[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UBlueprintFunctionNodeSpawner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintFunctionNodeSpawner"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "BLUEPRINTGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BLUEPRINTGRAPH_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintActionDatabase . h \" # include \" BlueprintEditorSettings . h \" # include \" BlueprintFunctionNodeSpawner . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphPin . h \" # include \" EdGraphSchema_K2 . h \" # include \" HAL / IConsoleManager . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UObjectGlobals . h \" class FText ; class UBlueprintFunctionNodeSpawner ; class UFunction ; class FTypePromotion : private FNoncopyable { public : FTypePromotion&)",
    "insertText": "Get()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FindBestMatchingFunc()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "FindBestMatchingFunc(FName Operation, const TArray<UEdGraphPin*>& PinsToConsider)"
  },
  {
    "label": "GetAllFuncsForOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllFuncsForOp(FName Operation, TArray<UFunction*>& OutFuncs)"
  },
  {
    "label": "GetAllOpNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetAllOpNames()"
  },
  {
    "label": "GetComparisonOpNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetComparisonOpNames()"
  },
  {
    "label": "GetKeywordsForOperator()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetKeywordsForOperator(const FName Operator)"
  },
  {
    "label": "GetUserFacingOperatorName()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetUserFacingOperatorName(const FName Operator)"
  },
  {
    "label": "IsComparisonFunc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComparisonFunc(UFunction const* const Func)"
  },
  {
    "label": "IsComparisonOpName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComparisonOpName(const FName OpName)"
  },
  {
    "label": "GetOpNameFromFunction()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetOpNameFromFunction(UFunction const* const Func)"
  },
  {
    "label": "GetPromotedType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetPromotedType(const TArray<UEdGraphPin*>& WildcardPins)"
  },
  {
    "label": "IsFunctionPromotionReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionPromotionReady(const UFunction* const FuncToConsider)"
  },
  {
    "label": "GetHigherType()",
    "kind": "Method",
    "detail": "Function (enum class ETypeComparisonResult : uint8 { TypeAHigher,TypeBHigher,TypesEqual,InvalidComparison } ; ETypeComparisonResult)",
    "insertText": "GetHigherType(const FEdGraphPinType& A, const FEdGraphPinType& B)"
  },
  {
    "label": "IsValidPromotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPromotion(const FEdGraphPinType& A, const FEdGraphPinType& B)"
  },
  {
    "label": "HasStructConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStructConversion(const UEdGraphPin* InputPin, const UEdGraphPin* OutputPin)"
  },
  {
    "label": "IsOperatorSpawnerRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOperatorSpawnerRegistered(UFunction const* const Func)"
  },
  {
    "label": "GetOperatorSpawner()",
    "kind": "Method",
    "detail": "Function (UBlueprintFunctionNodeSpawner*)",
    "insertText": "GetOperatorSpawner(FName OpName)"
  },
  {
    "label": "RegisterOperatorSpawner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOperatorSpawner(FName OpName, UBlueprintFunctionNodeSpawner* Spawner)"
  },
  {
    "label": "ClearNodeSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNodeSpawners()"
  },
  {
    "label": "RefreshPromotionTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPromotionTables(EReloadCompleteReason Reason = EReloadCompleteReason::None)"
  },
  {
    "label": "GetPrimitivePromotionTable()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,TArray<FName>>* const)",
    "insertText": "GetPrimitivePromotionTable()"
  },
  {
    "label": "GetAvailablePrimitivePromotions()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>*)",
    "insertText": "GetAvailablePrimitivePromotions(const FEdGraphPinType& Type)"
  },
  {
    "label": "FTypePromotion()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTypePromotion()"
  },
  {
    "label": "IsFunctionPromotionReady_Internal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionPromotionReady_Internal(const UFunction* const FuncToConsider)"
  },
  {
    "label": "GetPromotedType_Internal()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "GetPromotedType_Internal(const TArray<UEdGraphPin*>& WildcardPins)"
  },
  {
    "label": "FindBestMatchingFunc_Internal()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "FindBestMatchingFunc_Internal(FName Operation, const TArray<UEdGraphPin*>& PinsToConsider)"
  },
  {
    "label": "GetAllFuncsForOp_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllFuncsForOp_Internal(FName Operation, TArray<UFunction*>& OutFuncs)"
  },
  {
    "label": "IsPromotableFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPromotableFunction(const UFunction* Function)"
  },
  {
    "label": "GetHigherType_Internal()",
    "kind": "Method",
    "detail": "Function (ETypeComparisonResult)",
    "insertText": "GetHigherType_Internal(const FEdGraphPinType& A, const FEdGraphPinType& B)"
  },
  {
    "label": "CreateOpTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOpTable()"
  },
  {
    "label": "CreatePromotionTable()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TArray<FName>>)",
    "insertText": "CreatePromotionTable()"
  },
  {
    "label": "AddOpFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOpFunction(FName OpName, UFunction* Function)"
  },
  {
    "label": "IsTypePromoEnabled()",
    "kind": "Method",
    "detail": "Function (FTypePromotion* Instance ; const TMap<FName,TArray<FName>> PromotionTable ; typedef TArray<UFunction*> FFunctionsList ; FCriticalSection Lock ; TMap<FName,FFunctionsList> OperatorTable ; TMap<FName,UBlueprintFunctionNodeSpawner*> OperatorNodeSpawnerMap ; } ; namespace TypePromoDebug { bool)",
    "insertText": "IsTypePromoEnabled()"
  }
]