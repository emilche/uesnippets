[
  {
    "label": "FSlateClippingOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateClippingOp"
  },
  {
    "label": "FSlatePostProcessBlurPassInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostProcessBlurPassInputs"
  },
  {
    "label": "FSlatePostProcessColorDeficiencyPassInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostProcessColorDeficiencyPassInputs"
  },
  {
    "label": "Scissor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Layout / SlateRect . h \" # include \" Layout / Clipping . h \" # include \" ScreenPass . h \" struct FSlateClippingOp { union { struct { FSlateRect Rect ; } Data_Scissor ; struct { TConstArrayView<FSlateClippingZone> Zones ; } Data_Stencil ; } ; FVector2f Offset ; EClippingMethod Method ; uint8 MaskingId ; FSlateClippingOp*)",
    "insertText": "Scissor(FRDGBuilder& GraphBuilder, FVector2f Offset, FSlateRect Rect)"
  },
  {
    "label": "FSlateClippingOp()",
    "kind": "Method",
    "detail": "Function (FSlateClippingOp* Op = GraphBuilder . AllocPOD<)",
    "insertText": "FSlateClippingOp()"
  },
  {
    "label": "Stencil()",
    "kind": "Method",
    "detail": "Function (Op -> Data_Scissor . Rect = Rect ; Op -> Offset = Offset ; Op -> Method = EClippingMethod::Scissor ; Op -> MaskingId = 0 ; return Op ; } FSlateClippingOp*)",
    "insertText": "Stencil(FRDGBuilder& GraphBuilder, FVector2f Offset, TConstArrayView<FSlateClippingZone> Zones, int32 MaskingId)"
  },
  {
    "label": "GetSlateClippingPipelineState()",
    "kind": "Method",
    "detail": "Function (Op -> Data_Stencil . Zones = Zones ; Op -> Offset = Offset ; Op -> Method = EClippingMethod::Stencil ; Op -> MaskingId = MaskingId ; return Op ; } } ; bool)",
    "insertText": "GetSlateClippingPipelineState(const FSlateClippingOp* ClippingStateOp, FRHIDepthStencilState*& OutDepthStencilState, uint8& OutStencilRef)"
  },
  {
    "label": "SetSlateClipping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateClipping(FRHICommandList& RHICmdList, const FSlateClippingOp* ClippingStateOp, FIntRect ViewportRect)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (struct FSlatePostProcessBlurPassInputs { FRDGTexture* SDRCompositeUITexture = nullptr ; FRDGTexture* InputTexture = nullptr ; FRDGTexture* OutputTexture = nullptr ; ERenderTargetLoadAction OutputLoadAction = ERenderTargetLoadAction::ELoad ; const FSlateClippingOp* ClippingOp = nullptr ; const FDepthStencilBinding* ClippingStencilBinding = nullptr ; FIntRect ClippingElementsViewRect ; FIntRect InputRect ; FIntRect OutputRect ; uint32 KernelSize = 0 ; float Strength = 0 . 0 f ; uint32 DownsampleAmount = 0 ; FVector4f CornerRadius =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetSlateTransientRenderTargetFlags()",
    "kind": "Method",
    "detail": "Function (} ; ETextureCreateFlags)",
    "insertText": "GetSlateTransientRenderTargetFlags()"
  },
  {
    "label": "GetSlateTransientDepthStencilFlags()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "GetSlateTransientDepthStencilFlags()"
  },
  {
    "label": "AddSlatePostProcessBlurPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSlatePostProcessBlurPass(FRDGBuilder& GraphBuilder, const FSlatePostProcessBlurPassInputs& Inputs)"
  },
  {
    "label": "AddSlatePostProcessColorDeficiencyPass()",
    "kind": "Method",
    "detail": "Function (struct FSlatePostProcessColorDeficiencyPassInputs { FScreenPassTexture InputTexture ; FScreenPassTexture OutputTexture ; } ; void)",
    "insertText": "AddSlatePostProcessColorDeficiencyPass(FRDGBuilder& GraphBuilder, const FSlatePostProcessColorDeficiencyPassInputs& Inputs)"
  }
]