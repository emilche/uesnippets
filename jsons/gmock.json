[
  {
    "label": "GMOCK_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_H_ # include \" gmock / gmock - actions . h \" # include \" gmock / gmock - cardinalities . h \" # include \" gmock / gmock - function - mocker . h \" # include \" gmock / gmock - generated - actions . h \" # include \" gmock / gmock - generated - function - mockers . h \" # include \" gmock / gmock - generated - matchers . h \" # include \" gmock / gmock - matchers . h \" # include \" gmock / gmock - more - actions . h \" # include \" gmock / gmock - more - matchers . h \" # include \" gmock / gmock - nice - strict . h \" # include \" gmock / internal / gmock - internal - utils . h \" namespace testing {)",
    "insertText": "GMOCK_DECLARE_bool_(catch_leaked_mocks)"
  },
  {
    "label": "GMOCK_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_string_(verbose)"
  },
  {
    "label": "GMOCK_DECLARE_int32_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DECLARE_int32_(default_mock_behavior)"
  },
  {
    "label": "InitGoogleMock()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "InitGoogleMock(int* argc, char** argv)"
  },
  {
    "label": "InitGoogleMock()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "InitGoogleMock(int* argc, wchar_t** argv)"
  },
  {
    "label": "InitGoogleMock()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "InitGoogleMock()"
  }
]