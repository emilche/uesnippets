[
  {
    "label": "UStreamableRenderAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableRenderAsset"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "EThreadType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EThreadType"
  },
  {
    "label": "ETaskState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETaskState"
  },
  {
    "label": "FRenderAssetUpdateTickGTTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderAssetUpdateTickGTTask"
  },
  {
    "label": "FMipUpdateTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMipUpdateTask"
  },
  {
    "label": "TRenderAssetUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRenderAssetUpdate"
  },
  {
    "label": "SRA_UPDATE_CALLBACK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Async / AsyncWork . h \" # include \" RenderingThread . h \" # include \" Streaming / StreamableRenderResourceState . h \" class UStreamableRenderAsset ; # define)",
    "insertText": "SRA_UPDATE_CALLBACK(FunctionName) [this](const FContext& C)"
  },
  {
    "label": "FunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FunctionName(C)"
  },
  {
    "label": "IsAssetStreamingSuspended()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAssetStreamingSuspended()"
  },
  {
    "label": "FRenderAssetUpdate()",
    "kind": "Method",
    "detail": "Function (class FRenderAssetUpdate : public IRefCountedObject { public : enum EThreadType { TT_None,TT_Render,TT_Async,TT_GameThread,TT_GameRunningAsync } ; enum ETaskState { TS_Done,TS_Suspended,TS_InProgress,TS_Locked,TS_Init } ;)",
    "insertText": "FRenderAssetUpdate(const UStreamableRenderAsset* InAsset)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(EThreadType InCurrentThread)"
  },
  {
    "label": "IsCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompleted()"
  },
  {
    "label": "MarkAsCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsCancelled()"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCancelled()"
  },
  {
    "label": "DoUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoUnlock(ETaskState PreviousTaskState)"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (/ uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "FRenderAssetUpdate()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "FRenderAssetUpdate()"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (ETaskState)",
    "insertText": "TickInternal(EThreadType InCurrentThread, bool bCheckForSuspension)"
  },
  {
    "label": "MarkAsSuccessfullyFinished()",
    "kind": "Method",
    "detail": "Function (bIsCancelled = true ; } } void)",
    "insertText": "MarkAsSuccessfullyFinished()"
  },
  {
    "label": "ScheduleGTTask()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } void)",
    "insertText": "ScheduleGTTask()"
  },
  {
    "label": "ScheduleRenderTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleRenderTask()"
  },
  {
    "label": "ScheduleAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleAsyncTask()"
  },
  {
    "label": "FMipUpdateTask()",
    "kind": "Method",
    "detail": "Function (class FRenderAssetUpdateTickGTTask ; class FMipUpdateTask : public FNonAbandonableTask { public :)",
    "insertText": "FMipUpdateTask(FRenderAssetUpdate* InPendingUpdate) : PendingUpdate(InPendingUpdate)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} protected : TRefCountPtr<FRenderAssetUpdate> PendingUpdate ; } ; typedef FAutoDeleteAsyncTask<FMipUpdateTask> FAsyncMipUpdateTask ; const FStreamableRenderResourceState ResourceState ; const int32 CurrentFirstLODIdx = INDEX_NONE ; const int32 PendingFirstLODIdx = INDEX_NONE ; FCriticalSection CS ; int32 ScheduledGTTasks ; int32 ScheduledRenderTasks ; int32 ScheduledAsyncTasks ; const UStreamableRenderAsset* StreamableAsset = nullptr ; FThreadSafeCounter TaskSynchronization ; bool bIsCancelled ; bool bDeferExecution ; bool bSuccess ; volatile ETaskState TaskState ; private : FThreadSafeCounter NumRefs ; } ; template<TContext> class TRenderAssetUpdate : public FRenderAssetUpdate { public : typedef TContext FContext ; typedef TFunction<)",
    "insertText": "void(const FContext& Context)"
  },
  {
    "label": "TRenderAssetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRenderAssetUpdate(const UStreamableRenderAsset* InAsset)"
  },
  {
    "label": "PushTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTask(const FContext& Context, EThreadType InTaskThread, const FCallback& InTaskCallback, EThreadType InCancelationThread, const FCallback& InCancelationCallback)"
  },
  {
    "label": "GetRelevantThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetRelevantThread()"
  },
  {
    "label": "ClearCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCallbacks()"
  },
  {
    "label": "SuspendRenderAssetStreaming()",
    "kind": "Method",
    "detail": "Function (TaskThread = TT_None ; TaskCallback = nullptr ; CancelationThread = TT_None ; CancelationCallback = nullptr ; } } ; void)",
    "insertText": "SuspendRenderAssetStreaming()"
  },
  {
    "label": "ResumeRenderAssetStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeRenderAssetStreaming()"
  }
]