[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SHighResScreenshotDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHighResScreenshotDialog"
  },
  {
    "label": "SCaptureRegionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCaptureRegionWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" ViewportClient . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ShowFlags . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Slate / SceneViewport . h \" # include \" SCaptureRegionWidget . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" HighResScreenshot . h \" class SButton ; class SHighResScreenshotDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SHighResScreenshotDialog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SHighResScreenshotDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHighResScreenshotDialog()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Window .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWindow(TSharedPtr<SWindow> InWindow)"
  },
  {
    "label": "SetCaptureRegionWidget()",
    "kind": "Method",
    "detail": "Function (Window = InWindow ; } void)",
    "insertText": "SetCaptureRegionWidget(TSharedPtr<class SCaptureRegionWidget> InCaptureRegionWidget)"
  },
  {
    "label": "SetCaptureRegion()",
    "kind": "Method",
    "detail": "Function (CaptureRegionWidget = InCaptureRegionWidget ; } void)",
    "insertText": "SetCaptureRegion(const FIntRect& InCaptureRegion)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (Config . UnscaledCaptureRegion = InCaptureRegion ; auto ConfigViewport = Config . TargetViewport .)",
    "insertText": "Pin()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (ConfigViewport ->)",
    "insertText": "Invalidate()"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (} } FHighResScreenshotConfig&)",
    "insertText": "GetConfig()"
  },
  {
    "label": "OnCaptureClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnCaptureClicked()"
  },
  {
    "label": "OnSelectCaptureRegionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSelectCaptureRegionClicked()"
  },
  {
    "label": "OnSelectCaptureCancelRegionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSelectCaptureCancelRegionClicked()"
  },
  {
    "label": "OnSelectCaptureAcceptRegionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSelectCaptureAcceptRegionClicked()"
  },
  {
    "label": "OnSetFullViewportCaptureRegionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSetFullViewportCaptureRegionClicked()"
  },
  {
    "label": "OnSetCameraSafeAreaCaptureRegionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSetCameraSafeAreaCaptureRegionClicked()"
  },
  {
    "label": "IsSetCameraSafeAreaCaptureRegionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetCameraSafeAreaCaptureRegionEnabled()"
  },
  {
    "label": "OnResolutionMultiplierSliderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolutionMultiplierSliderChanged(float NewValue)"
  },
  {
    "label": "ResolutionMultiplierScale()",
    "kind": "Method",
    "detail": "Function (Config . ResolutionMultiplier = NewValue ; Config .)",
    "insertText": "ResolutionMultiplierScale(NewValue - FHighResScreenshotConfig::MinResolutionMultipler) / (FHighResScreenshotConfig::MaxResolutionMultipler - FHighResScreenshotConfig::MinResolutionMultipler)"
  },
  {
    "label": "OnMaskEnabledChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMaskEnabledChanged(ECheckBoxState NewValue)"
  },
  {
    "label": "bMaskEnabled()",
    "kind": "Method",
    "detail": "Function (Config .)",
    "insertText": "bMaskEnabled(NewValue == ECheckBoxState::Checked)"
  },
  {
    "label": "GetClient()",
    "kind": "Method",
    "detail": "Function (ConfigViewport ->)",
    "insertText": "GetClient()->GetEngineShowFlags()->SetHighResScreenshotMask(Config.bMaskEnabled)"
  },
  {
    "label": "OnHDREnabledChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnHDREnabledChanged(ECheckBoxState NewValue)"
  },
  {
    "label": "SetHDRCapture()",
    "kind": "Method",
    "detail": "Function (Config .)",
    "insertText": "SetHDRCapture(NewValue == ECheckBoxState::Checked)"
  },
  {
    "label": "OnForce128BitRenderingChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnForce128BitRenderingChanged(ECheckBoxState NewValue)"
  },
  {
    "label": "SetForce128BitRendering()",
    "kind": "Method",
    "detail": "Function (Config .)",
    "insertText": "SetForce128BitRendering(NewValue == ECheckBoxState::Checked)"
  },
  {
    "label": "OnDateTimeBasedNamingEnabledChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnDateTimeBasedNamingEnabledChanged(ECheckBoxState NewValue)"
  },
  {
    "label": "bEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bEnabled(NewValue == ECheckBoxState::Checked)"
  },
  {
    "label": "OnBufferVisualizationDumpEnabledChanged()",
    "kind": "Method",
    "detail": "Function (Config . bDateTimeBasedNaming = bEnabled ; } void)",
    "insertText": "OnBufferVisualizationDumpEnabledChanged(ECheckBoxState NewValue)"
  },
  {
    "label": "SetHDRUIEnableState()",
    "kind": "Method",
    "detail": "Function (Config . bDumpBufferVisualizationTargets = bEnabled ;)",
    "insertText": "SetHDRUIEnableState(bEnabled)"
  },
  {
    "label": "SetForce128BitRenderingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForce128BitRenderingState(bEnabled)"
  },
  {
    "label": "GetSpecifyCaptureRegionVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetSpecifyCaptureRegionVisibility()"
  },
  {
    "label": "GetResolutionMultiplierSlider()",
    "kind": "Method",
    "detail": "Function (bCaptureRegionControlsVisible = bVisible ; } float)",
    "insertText": "GetResolutionMultiplierSlider()"
  },
  {
    "label": "SetHDRUIEnableState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHDRUIEnableState(bool bEnable)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (HDRCheckBox ->)",
    "insertText": "SetEnabled(bEnable)"
  },
  {
    "label": "SetForce128BitRenderingState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetForce128BitRenderingState(bool bEnable)"
  },
  {
    "label": "WindowClosedHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WindowClosedHandler(const TSharedRef<SWindow>& InWindow)"
  },
  {
    "label": "ResetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewport()"
  },
  {
    "label": "ResetFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFrameBuffer()"
  }
]