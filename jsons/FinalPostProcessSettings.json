[
  {
    "label": "FImagePixelPipe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImagePixelPipe"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FFinalPostProcessSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFinalPostProcessSettings"
  },
  {
    "label": "FCubemapEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCubemapEntry"
  },
  {
    "label": "FLUTBlenderEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLUTBlenderEntry"
  },
  {
    "label": "FFinalPostProcessSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / Scene . h \" # include \" BlendableManager . h \" struct FImagePixelPipe ; class UMaterialInstanceDynamic ; class UMaterialInterface ; class UTexture ; class FFinalPostProcessSettings : public FPostProcessSettings { public :)",
    "insertText": "FFinalPostProcessSettings() : VisualizeCalibrationColorMaterial(NULL) , VisualizeCalibrationGrayscaleMaterial(NULL) , VisualizeCalibrationCustomMaterial(NULL) , HighResScreenshotMaterial(NULL) , HighResScreenshotMaskMaterial(NULL) , HighResScreenshotCaptureRegionMaterial(NULL) , bBufferVisualizationDumpRequired(false) #if !(UE_BUILD_SHIPPING || UE_BUILD_TEST) , bBufferVisualizationOverviewTargetIsSelected(false)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ContributingCubemaps .)",
    "insertText": "Reserve(8)"
  },
  {
    "label": "SetLUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLUT(0)"
  },
  {
    "label": "FCubemapEntry()",
    "kind": "Method",
    "detail": "Function (} struct FCubemapEntry { FLinearColor AmbientCubemapTintMulScaleValue ; class UTexture* AmbientCubemap ;)",
    "insertText": "FCubemapEntry() : AmbientCubemapTintMulScaleValue(FLinearColor(0, 0, 0, 0)), AmbientCubemap(NULL)"
  },
  {
    "label": "UpdateEntry()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLUTBlenderEntry { float Weight ; class UTexture* LUTTexture ; } ; void)",
    "insertText": "UpdateEntry(const FCubemapEntry &Entry, float Weight)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Existing = false ;)",
    "insertText": "for(int32 i = 0; ContributingCubemaps.IsValidIndex(i); ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCubemapEntry& Local = ContributingCubemaps [ i ] ;)",
    "insertText": "if(Local.AmbientCubemap == Entry.AmbientCubemap)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Local . AmbientCubemapTintMulScaleValue =)",
    "insertText": "Lerp(Local.AmbientCubemapTintMulScaleValue, Entry.AmbientCubemapTintMulScaleValue, Weight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Existing = true ; } else { Local . AmbientCubemapTintMulScaleValue* = 1 . 0 f - Weight ; })",
    "insertText": "if(Local.AmbientCubemapTintMulScaleValue.IsAlmostBlack())"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ContributingCubemaps .)",
    "insertText": "RemoveAt(i, EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i - - ; continue ; } })",
    "insertText": "if(!Existing)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCubemapEntry WeightedEntry = Entry ; WeightedEntry . AmbientCubemapTintMulScaleValue* = Weight ;)",
    "insertText": "if(!WeightedEntry.AmbientCubemapTintMulScaleValue.IsAlmostBlack())"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ContributingCubemaps .)",
    "insertText": "Push(WeightedEntry)"
  },
  {
    "label": "LerpTo()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "LerpTo(UTexture* InTexture, float Weight)"
  },
  {
    "label": "SetLUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLUT(InTexture)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (ContributingLUTs [ i ] . Weight* = 1 . 0 f - Weight ; } uint32 ExistingIndex =)",
    "insertText": "FindIndex(InTexture)"
  },
  {
    "label": "PushLUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLUT(InTexture, Weight)"
  },
  {
    "label": "PushLUT()",
    "kind": "Method",
    "detail": "Function (} else { ContributingLUTs [ ExistingIndex ] . Weight + = Weight ; } } void)",
    "insertText": "PushLUT(UTexture* Texture, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FLUTBlenderEntry Entry ; Entry . LUTTexture = Texture ; Entry . Weight = Weight ; ContributingLUTs .)",
    "insertText": "Add(Entry)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FindIndex(UTexture* Tex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ContributingLUTs .)",
    "insertText": "Reset()"
  },
  {
    "label": "PushLUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLUT(Texture, 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TArray<FCubemapEntry,TInlineAllocator<8>> ContributingCubemaps ; TArray<FLUTBlenderEntry,TInlineAllocator<8>> ContributingLUTs ; TArray<UMaterialInterface*> BufferVisualizationOverviewMaterials ; UMaterialInterface* VisualizeCalibrationColorMaterial ; UMaterialInterface* VisualizeCalibrationGrayscaleMaterial ; UMaterialInterface* VisualizeCalibrationCustomMaterial ; UMaterialInterface* HighResScreenshotMaterial ; UMaterialInterface* HighResScreenshotMaskMaterial ; UMaterialInstanceDynamic* HighResScreenshotCaptureRegionMaterial ; bool bBufferVisualizationDumpRequired ; FString BufferVisualizationDumpBaseFilename ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  }
]