[
  {
    "label": "FFakeFileReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeFileReader"
  },
  {
    "label": "FFakeFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeFileSystem"
  },
  {
    "label": "FFakeFileReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tests / Mock / FileSystem . mock . h \" # include \" Misc / Paths . h \" # include \" Misc / ScopeLock . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FFakeFileReader : public FMemoryArchive { public :)",
    "insertText": "FFakeFileReader(const TArray<uint8>& InBytes) : Bytes(InBytes) , FakeTotalSize(Bytes.Num())"
  },
  {
    "label": "SetIsLoading()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsLoading(true)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, &Bytes[Offset], Num)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Offset + = Num ; } else {)",
    "insertText": "SetError()"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (} } } public : const TArray<uint8>& Bytes ; int64 FakeTotalSize ; } ; class FFakeFileSystem : public FMockFileSystem { public : TUniquePtr<FArchive>)",
    "insertText": "CreateFileReader(const TCHAR* Filename, EReadFlags ReadFlags = EReadFlags::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive> Reader ;)",
    "insertText": "if(CreateFileReaderFunc)"
  },
  {
    "label": "CreateFileReaderFunc()",
    "kind": "Method",
    "detail": "Function (Reader =)",
    "insertText": "CreateFileReaderFunc(Filename, ReadFlags)"
  },
  {
    "label": "NormalizeFilename()",
    "kind": "Method",
    "detail": "Function (} else { FString NormalizedFilename = Filename ;)",
    "insertText": "NormalizeFilename(NormalizedFilename)"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (NormalizedFilename =)",
    "insertText": "ConvertRelativePathToFull(TEXT(\"\"), MoveTemp(NormalizedFilename))"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&ThreadLock)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "Reset(new FFakeFileReader(DiskData[NormalizedFilename]))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} } RxCreateFileReader .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Reader.Get(), Filename, ReadFlags)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive> Writer ;)",
    "insertText": "if(CreateFileWriterFunc)"
  },
  {
    "label": "CreateFileWriterFunc()",
    "kind": "Method",
    "detail": "Function (Writer =)",
    "insertText": "CreateFileWriterFunc(Filename, WriteFlags)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "Reset(new FMemoryWriter(DiskData.FindOrAdd(NormalizedFilename)))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxCreateFileWriter .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Writer.Get(), Filename, WriteFlags)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DiskData .)",
    "insertText": "Remove(NormalizedFilename)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFileSize = - 1 ;)",
    "insertText": "if(DiskData.Contains(Filename))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (OutFileSize = DiskData [ Filename ] .)",
    "insertText": "Num()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxGetFileSize .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, OutFileSize)"
  },
  {
    "label": "FArchive()",
    "kind": "Method",
    "detail": "Function (} public : TMap<FString,TArray<uint8>> DiskData ; TArray<FString> DiskDataOpenFailure ; TFunction<TUniquePtr<)",
    "insertText": "FArchive(const TCHAR*, EReadFlags)"
  },
  {
    "label": "FArchive()",
    "kind": "Method",
    "detail": "Function (TFunction<TUniquePtr<)",
    "insertText": "FArchive(const TCHAR*, EWriteFlags)"
  }
]