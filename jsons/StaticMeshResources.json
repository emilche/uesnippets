[
  {
    "label": "FDistanceFieldVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldVolumeData"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "USimpleConstructionScript",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USimpleConstructionScript"
  },
  {
    "label": "FStaticMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMaterial"
  },
  {
    "label": "FStaticMeshLODGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODGroup"
  },
  {
    "label": "FStaticMeshLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODSettings"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "FStaticMeshSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSection"
  },
  {
    "label": "FStaticMeshLODResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshLODResources"
  },
  {
    "label": "FStaticMeshSectionAreaWeightedTriangleSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSectionAreaWeightedTriangleSampler"
  },
  {
    "label": "FStaticMeshAreaWeightedSectionSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshAreaWeightedSectionSampler"
  },
  {
    "label": "FStaticMeshSectionAreaWeightedTriangleSamplerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshSectionAreaWeightedTriangleSamplerBuffer"
  },
  {
    "label": "SectionTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SectionTriangleInfo"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "FModelVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModelVertex"
  },
  {
    "label": "FStaticMeshVertexBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexBuffers"
  },
  {
    "label": "FAdditionalStaticMeshIndexBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalStaticMeshIndexBuffers"
  },
  {
    "label": "FStaticMeshSectionArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshSectionArray"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FCardRepresentationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardRepresentationData"
  },
  {
    "label": "EClassDataStripFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClassDataStripFlag"
  },
  {
    "label": "FStaticMeshBuffersSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshBuffersSize"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FStaticMeshStreamIn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStreamIn"
  },
  {
    "label": "FStaticMeshStreamIn_IO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStreamIn_IO"
  },
  {
    "label": "FStaticMeshStreamOut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStreamOut"
  },
  {
    "label": "FStaticMeshVertexFactories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexFactories"
  },
  {
    "label": "FSplineMeshVertexFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshVertexFactory"
  },
  {
    "label": "FStaticMeshRayTracingProxyLOD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshRayTracingProxyLOD"
  },
  {
    "label": "FStaticMeshRayTracingProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshRayTracingProxy"
  },
  {
    "label": "FLevelOfDetailSettingsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelOfDetailSettingsLayout"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStaticMeshComponentBulkReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentBulkReregisterContext"
  },
  {
    "label": "USCS_Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USCS_Node"
  },
  {
    "label": "FStaticMeshInstanceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshInstanceData"
  },
  {
    "label": "FInstanceTransformMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceTransformMatrix"
  },
  {
    "label": "FInstanceLightMapVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceLightMapVector"
  },
  {
    "label": "FStaticMeshLODGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / UObjectIterator . h \" # include \" Materials / MaterialInterface . h \" # include \" RenderResource . h \" # include \" PackedNormal . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" RawIndexBuffer . h \" # include \" Components . h \" # include \" LocalVertexFactory . h \" # include \" PrimitiveViewRelevance . h \" # include \" UObject / UObjectHash . h \" # include \" MeshBatch . h \" # include \" MeshReductionSettings . h \" # include \" SceneManagement . h \" # include \" Components / StaticMeshComponent . h \" # include \" BodySetupEnums . h \" # include \" Materials / MaterialInterface . h \" # include \" Rendering / ColorVertexBuffer . h \" # include \" Rendering / StaticMeshVertexBuffer . h \" # include \" Rendering / PositionVertexBuffer . h \" # include \" Rendering / StaticMeshVertexDataInterface . h \" # include \" Rendering / NaniteInterface . h \" # include \" RenderTransform . h \" # include \" Templates / UniquePtr . h \" # include \" Serialization / BulkData . h \" # include \" WeightedRandomSampler . h \" # include \" UObject / PerPlatformProperties . h \" # include \" RayTracingGeometry . h \" # if WITH_EDITORONLY_DATA # include \" Interface_CollisionDataProviderCore . h \" # endif class FDistanceFieldVolumeData ; class UBodySetup ; class USimpleConstructionScript ; # if RHI_RAYTRACING namespace RayTracing { using GeometryGroupHandle = int32 ; } # endif # define MAX_STATIC_MESH_LODS 8 struct FStaticMaterial ; class FStaticMeshLODGroup { public :)",
    "insertText": "FStaticMeshLODGroup() : DefaultNumLODs(1) , DefaultMaxNumStreamedLODs(0) , DefaultMaxNumOptionalLODs(0) , DefaultLightMapResolution(64) , BasePercentTrianglesMult(1.0f) , BasePercentVerticesMult(1.0f) , bSupportLODStreaming(false) , DisplayName( NSLOCTEXT( \"UnrealEd\", \"None\", \"None\" ))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(SettingsBias)"
  },
  {
    "label": "GetDefaultNumLODs()",
    "kind": "Method",
    "detail": "Function (SettingsBias . PercentTriangles = 1 . 0 f ; SettingsBias . PercentVertices = 1 . 0 f ; } int32)",
    "insertText": "GetDefaultNumLODs()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : class FStaticMeshLODSettings ; int32 DefaultNumLODs ; int32 DefaultMaxNumStreamedLODs ; int32 DefaultMaxNumOptionalLODs ; int32 DefaultLightMapResolution ; float BasePercentTrianglesMult ; float BasePercentVerticesMult ; bool bSupportLODStreaming ; FText DisplayName ; FMeshReductionSettings DefaultSettings [ MAX_STATIC_MESH_LODS ] ; FMeshReductionSettings SettingsBias ; } ; class FStaticMeshLODSettings { public : void)",
    "insertText": "Initialize(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const class ITargetPlatformSettings* TargetPlatform)"
  },
  {
    "label": "GetLODGroup()",
    "kind": "Method",
    "detail": "Function (const FStaticMeshLODGroup&)",
    "insertText": "GetLODGroup(FName LODGroup)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FStaticMeshLODGroup* Group = Groups .)",
    "insertText": "Find(LODGroup)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Group = Groups .)",
    "insertText": "Find(NAME_None)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Group)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* IdxPtr = GroupName2Index .)",
    "insertText": "Find(GroupName)"
  },
  {
    "label": "GetLODGroupDisplayNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLODGroupDisplayNames(TArray<FText>& OutDisplayNames)"
  },
  {
    "label": "ReadEntry()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReadEntry(FStaticMeshLODGroup& Group, FString Entry)"
  },
  {
    "label": "FStaticMeshSection()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FStaticMeshLODGroup> Groups ; TMap<FName,int32> GroupName2Index ; } ; struct FStaticMeshSection { int32 MaterialIndex ; uint32 FirstIndex ; uint32 NumTriangles ; uint32 MinVertexIndex ; uint32 MaxVertexIndex ; bool bEnableCollision ; bool bCastShadow ; bool bVisibleInRayTracing ; bool bAffectDistanceFieldLighting ; bool bForceOpaque ; # if WITH_EDITORONLY_DATA float UVDensities [ MAX_STATIC_TEXCOORDS ] ; float Weights [ MAX_STATIC_TEXCOORDS ] ; # endif)",
    "insertText": "FStaticMeshSection() : MaterialIndex(0) , FirstIndex(0) , NumTriangles(0) , MinVertexIndex(0) , MaxVertexIndex(0) , bEnableCollision(false) , bCastShadow(true) , bVisibleInRayTracing(true) , bAffectDistanceFieldLighting(true) , bForceOpaque(false)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "Memzero(UVDensities)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Weights)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } FArchive&)",
    "insertText": "operator(FArchive& Ar,FStaticMeshSection& Section)"
  },
  {
    "label": "FStaticMeshSectionAreaWeightedTriangleSampler()",
    "kind": "Method",
    "detail": "Function (} ; struct FStaticMeshLODResources ; struct FStaticMeshSectionAreaWeightedTriangleSampler : FWeightedRandomSampler {)",
    "insertText": "FStaticMeshSectionAreaWeightedTriangleSampler()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FStaticMeshLODResources* InOwner, int32 InSectionIdx)"
  },
  {
    "label": "GetWeights()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWeights(TArray<float>& OutWeights)"
  },
  {
    "label": "FStaticMeshAreaWeightedSectionSampler()",
    "kind": "Method",
    "detail": "Function (protected : FStaticMeshLODResources* Owner ; int32 SectionIdx ; } ; struct FStaticMeshAreaWeightedSectionSampler : FWeightedRandomSampler {)",
    "insertText": "FStaticMeshAreaWeightedSectionSampler()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FStaticMeshLODResources* InOwner)"
  },
  {
    "label": "FStaticMeshSectionAreaWeightedTriangleSamplerBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<const FStaticMeshLODResources> Owner ; } ; typedef TArray<FStaticMeshSectionAreaWeightedTriangleSampler,FMemoryImageAllocator> FStaticMeshSectionAreaWeightedTriangleSamplerArray ; class FStaticMeshSectionAreaWeightedTriangleSamplerBuffer : public FRenderResource { public :)",
    "insertText": "FStaticMeshSectionAreaWeightedTriangleSamplerBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FStaticMeshSectionAreaWeightedTriangleSamplerArray* SamplerToUpload)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (Samplers = SamplerToUpload ; } void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetBufferRHI()",
    "kind": "Method",
    "detail": "Function (} const FBufferRHIRef&)",
    "insertText": "GetBufferRHI()"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithDummyData(&RHICmdList, nullptr, VertexFactory, NumVertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitWithDummyData(FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory, uint32 NumVertices, uint32 NumTexCoords = 1, uint32 LightMapIndex = 0)"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithDummyData(nullptr, RenderCommandPipe, VertexFactory, NumVertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitWithDummyData(FLocalVertexFactory* VertexFactory, uint32 NumVertices, uint32 NumTexCoords = 1, uint32 LightMapIndex = 0)"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithDummyData(nullptr, nullptr, VertexFactory, NumVertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFromDynamicVertex(FRHICommandListBase& RHICmdList, FLocalVertexFactory* VertexFactory, TArray<FDynamicMeshVertex>& Vertices, uint32 NumTexCoords = 1, uint32 LightMapIndex = 0)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromDynamicVertex(&RHICmdList, nullptr, VertexFactory, Vertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFromDynamicVertex(FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory, TArray<FDynamicMeshVertex>& Vertices, uint32 NumTexCoords = 1, uint32 LightMapIndex = 0)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromDynamicVertex(nullptr, RenderCommandPipe, VertexFactory, Vertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFromDynamicVertex(FLocalVertexFactory* VertexFactory, TArray<FDynamicMeshVertex>& Vertices, uint32 NumTexCoords = 1, uint32 LightMapIndex = 0)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromDynamicVertex(nullptr, nullptr, VertexFactory, Vertices, NumTexCoords, LightMapIndex)"
  },
  {
    "label": "InitModelBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitModelBuffers(TArray<FModelVertex>& Vertices)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitModelVF(FRHICommandListBase& RHICmdList, FLocalVertexFactory* VertexFactory)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitModelVF(&RHICmdList, nullptr, VertexFactory)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitModelVF(FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitModelVF(nullptr, RenderCommandPipe, VertexFactory)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitModelVF(FLocalVertexFactory* VertexFactory)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitModelVF(nullptr, nullptr, VertexFactory)"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOwnerName(const FName& OwnerName)"
  },
  {
    "label": "InitWithDummyData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitWithDummyData(FRHICommandListBase* RHICmdList, FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory, uint32 NumVertices, uint32 NumTexCoords, uint32 LightMapIndex)"
  },
  {
    "label": "InitFromDynamicVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromDynamicVertex(FRHICommandListBase* RHICmdList, FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory, TArray<FDynamicMeshVertex>& Vertices, uint32 NumTexCoords, uint32 LightMapIndex)"
  },
  {
    "label": "InitModelVF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitModelVF(FRHICommandListBase* RHICmdList, FRenderCommandPipe* RenderCommandPipe, FLocalVertexFactory* VertexFactory)"
  },
  {
    "label": "FStaticMeshLODResources()",
    "kind": "Method",
    "detail": "Function (} ; struct FAdditionalStaticMeshIndexBuffers { FRawStaticIndexBuffer ReversedIndexBuffer ; FRawStaticIndexBuffer ReversedDepthOnlyIndexBuffer ; FRawStaticIndexBuffer WireframeIndexBuffer ; } ; class FStaticMeshSectionArray : public TArray<FStaticMeshSection,TInlineAllocator<1>> { using Super = TArray<FStaticMeshSection,TInlineAllocator<1>> ; public : using Super::Super ; } ; template<> struct TIsZeroConstructType<FStaticMeshSectionArray> : TIsZeroConstructType<TArray<FStaticMeshSection,TInlineAllocator<1>>> { } ; template<> struct TIsContiguousContainer<FStaticMeshSectionArray> : TIsContiguousContainer<TArray<FStaticMeshSection,TInlineAllocator<1>>> { } ; struct FStaticMeshLODResources : public FRefCountBase { public : FStaticMeshSectionArray Sections ; class FDistanceFieldVolumeData* DistanceFieldData = nullptr ; class FCardRepresentationData* CardRepresentationData ; FRayTracingGeometry* RayTracingGeometry = nullptr ; float MaxDeviation ; uint32 bHasDepthOnlyIndices : 1 ; uint32 bHasReversedIndices : 1 ; uint32 bHasReversedDepthOnlyIndices : 1 ; uint32 bHasColorVertexData : 1 ; uint32 bHasWireframeIndices : 1 ; uint32 bBuffersInlined : 1 ; uint32 bIsOptionalLOD : 1 ; uint32 DepthOnlyNumTriangles ; uint32 BuffersSize ; FByteBulkData StreamingBulkData ; # if STATS uint32 StaticMeshIndexMemory ; # endif # if WITH_EDITOR FByteBulkData BulkData ; FString DerivedDataKey ; TArray<int32> WedgeMap ; # endif FStaticMeshVertexBuffers VertexBuffers ; FRawStaticIndexBuffer IndexBuffer ; FRawStaticIndexBuffer DepthOnlyIndexBuffer ; FAdditionalStaticMeshIndexBuffers* AdditionalIndexBuffers = nullptr ; FStaticMeshAreaWeightedSectionSampler AreaWeightedSampler ; FStaticMeshSectionAreaWeightedTriangleSamplerArray AreaWeightedSectionSamplers ; FStaticMeshSectionAreaWeightedTriangleSamplerBuffer AreaWeightedSectionSamplersBuffer ;)",
    "insertText": "FStaticMeshLODResources(bool bAddRef = true)"
  },
  {
    "label": "FStaticMeshLODResources()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshLODResources()"
  },
  {
    "label": "ReleaseRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (template<TBatcher> void)",
    "insertText": "ReleaseRHIForStreaming(TBatcher& Batcher)"
  },
  {
    "label": "ReleaseRHIForStreaming()",
    "kind": "Method",
    "detail": "Function (VertexBuffers . StaticMeshVertexBuffer .)",
    "insertText": "ReleaseRHIForStreaming(Batcher)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitResources(UStaticMesh* Parent, int32 LODIndex)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 Idx)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "SetupRayTracingGeometryInitializer()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING void)",
    "insertText": "SetupRayTracingGeometryInitializer(FRayTracingGeometryInitializer& Initializer, const FDebugName& DebugName, const FName& OwnerName)"
  },
  {
    "label": "GetCPUAccessMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (# endif SIZE_T)",
    "insertText": "GetCPUAccessMemoryOverhead()"
  },
  {
    "label": "GetNumTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTriangles()"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetNumTexCoords()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTexCoords()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (private : enum EClassDataStripFlag : uint8 { CDSF_AdjacencyData_DEPRECATED = 1,CDSF_MinLodData = 2,CDSF_ReversedIndexBuffer = 4,CDSF_RayTracingResources = 8 } ; struct FStaticMeshBuffersSize { uint32 SerializedBuffersSize = 0 ; uint32 DepthOnlyIBSize = 0 ; uint32 ReversedIBsSize = 0 ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "CalcBuffersSize()",
    "kind": "Method",
    "detail": "Function (SerializedBuffersSize = 0 ; DepthOnlyIBSize = 0 ; ReversedIBsSize = 0 ; } uint32)",
    "insertText": "CalcBuffersSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FStaticMeshBuffersSize& Info)"
  },
  {
    "label": "GetPlatformMinLODIdx()",
    "kind": "Method",
    "detail": "Function (Ar<<Info . SerializedBuffersSize ; Ar<<Info . DepthOnlyIBSize ; Ar<<Info . ReversedIBsSize ; return Ar ; } } ; int32)",
    "insertText": "GetPlatformMinLODIdx(const ITargetPlatform* TargetPlatform, UStaticMesh* StaticMesh)"
  },
  {
    "label": "GenerateClassStripFlags()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GenerateClassStripFlags(FArchive& Ar, UStaticMesh* OwnerStaticMesh, int32 Index)"
  },
  {
    "label": "IsLODCookedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLODCookedOut(const ITargetPlatform* TargetPlatform, UStaticMesh* StaticMesh, bool bIsBelowMinLOD)"
  },
  {
    "label": "IsLODInlined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLODInlined(const ITargetPlatform* TargetPlatform, UStaticMesh* StaticMesh, int32 LODIdx, bool bIsBelowMinLOD)"
  },
  {
    "label": "GetNumOptionalLODsAllowed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumOptionalLODsAllowed(const ITargetPlatform* TargetPlatform, UStaticMesh* StaticMesh)"
  },
  {
    "label": "AccumVertexBuffersSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumVertexBuffersSize(const FStaticMeshVertexBuffers& VertexBuffers, uint32& OutSize)"
  },
  {
    "label": "AccumIndexBufferSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumIndexBufferSize(const FRawStaticIndexBuffer& IndexBuffer, uint32& OutSize)"
  },
  {
    "label": "AccumRayTracingGeometrySize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumRayTracingGeometrySize(const FRayTracingGeometry& RayTracingGeometry, uint32& OutSize)"
  },
  {
    "label": "SerializeBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBuffers(FArchive& Ar, UStaticMesh* OwnerStaticMesh, uint8 InStripFlags, FStaticMeshBuffersSize& OutBuffersSize)"
  },
  {
    "label": "SerializeAvailabilityInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeAvailabilityInfo(FArchive& Ar)"
  },
  {
    "label": "ClearAvailabilityInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAvailabilityInfo()"
  },
  {
    "label": "UpdateIndexMemoryStats()",
    "kind": "Method",
    "detail": "Function (template<bool bIncrement> void)",
    "insertText": "UpdateIndexMemoryStats()"
  },
  {
    "label": "UpdateVertexMemoryStats()",
    "kind": "Method",
    "detail": "Function (template<bool bIncrement> void)",
    "insertText": "UpdateVertexMemoryStats()"
  },
  {
    "label": "IncrementMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMemoryStats()"
  },
  {
    "label": "DecrementMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementMemoryStats()"
  },
  {
    "label": "DiscardCPUData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardCPUData()"
  },
  {
    "label": "FStaticMeshVertexFactories()",
    "kind": "Method",
    "detail": "Function (class FStaticMeshRenderData ; class FStaticMeshStreamIn ; class FStaticMeshStreamIn_IO ; class FStaticMeshStreamOut ; } ; struct FStaticMeshVertexFactories {)",
    "insertText": "FStaticMeshVertexFactories(ERHIFeatureLevel::Type InFeatureLevel) : VertexFactory(InFeatureLevel, \"FStaticMeshVertexFactories\") , VertexFactoryOverrideColorVertexBuffer(InFeatureLevel, \"FStaticMeshVertexFactories_Override\") , SplineVertexFactory(nullptr) , SplineVertexFactoryOverrideColorVertexBuffer(nullptr)"
  },
  {
    "label": "FStaticMeshVertexFactories()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStaticMeshVertexFactories()"
  },
  {
    "label": "InitVertexFactory()",
    "kind": "Method",
    "detail": "Function (FLocalVertexFactory VertexFactory ; FLocalVertexFactory VertexFactoryOverrideColorVertexBuffer ; struct FSplineMeshVertexFactory* SplineVertexFactory ; struct FSplineMeshVertexFactory* SplineVertexFactoryOverrideColorVertexBuffer ; void)",
    "insertText": "InitVertexFactory(const FStaticMeshVertexBuffers& VertexBuffers, FLocalVertexFactory& InOutVertexFactory, uint32 LODIndex, const UStaticMesh* InParentMesh, bool bInOverrideColorVertexBuffer)"
  },
  {
    "label": "InitVertexFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitVertexFactory(LodResources.VertexBuffers, InOutVertexFactory, LODIndex, InParentMesh, bInOverrideColorVertexBuffer)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitResources(const FStaticMeshVertexBuffers& VertexBuffers, uint32 LODIndex, const UStaticMesh* Parent)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(LodResources.VertexBuffers, LODIndex, Parent)"
  },
  {
    "label": "FStaticMeshRayTracingProxyLOD()",
    "kind": "Method",
    "detail": "Function (} ; using FStaticMeshLODResourcesArray = TIndirectArray<FStaticMeshLODResources> ; using FStaticMeshVertexFactoriesArray = TArray<FStaticMeshVertexFactories> ; struct FStaticMeshRayTracingProxyLOD { FRayTracingGeometry* RayTracingGeometry = nullptr ; FStaticMeshSectionArray* Sections = nullptr ; FStaticMeshVertexBuffers* VertexBuffers = nullptr ; FRawStaticIndexBuffer* IndexBuffer = nullptr ; FByteBulkData StreamableData ; bool bOwnsRayTracingGeometry : 1 = true ; bool bOwnsBuffers : 1 = true ; bool bBuffersInlined : 1 = false ; ~)",
    "insertText": "FStaticMeshRayTracingProxyLOD()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(UStaticMesh* Owner, int32 LODIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 Index)"
  },
  {
    "label": "SerializeBuffers()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SerializeBuffers(FArchive& Ar, UStaticMesh* OwnerStaticMesh, uint8 InStripFlags)"
  },
  {
    "label": "FStaticMeshRayTracingProxy()",
    "kind": "Method",
    "detail": "Function (# endif } ; using FStaticMeshRayTracingProxyLODArray = TIndirectArray<FStaticMeshRayTracingProxyLOD> ; struct FStaticMeshRayTracingProxy { FStaticMeshRayTracingProxyLODArray LODs ; FStaticMeshVertexFactoriesArray* LODVertexFactories = nullptr ; bool bUsingRenderingLODs = false ; ~)",
    "insertText": "FStaticMeshRayTracingProxy()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(UStaticMesh* Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, FStaticMeshRenderData* RenderData, bool bCooked)"
  },
  {
    "label": "FStaticMeshRenderData()",
    "kind": "Method",
    "detail": "Function (} ; class FStaticMeshRenderData { public :)",
    "insertText": "FStaticMeshRenderData()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (FStaticMeshLODResourcesArray LODResources ; FStaticMeshVertexFactoriesArray LODVertexFactories ; FPerPlatformFloat ScreenSize [ MAX_STATIC_MESH_LODS ] ; TPimplPtr<Nanite::FResources> NaniteResourcesPtr ; FStaticMeshRayTracingProxy* RayTracingProxy = nullptr ; FBoxSphereBounds Bounds ; # if RHI_RAYTRACING RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle = INDEX_NONE ; # endif bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SyncUVChannelData()",
    "kind": "Method",
    "detail": "Function (bool bLODsShareStaticLighting ; bool bReadyForStreaming ; uint8 NumInlinedLODs ; uint8 CurrentFirstLODIdx ; uint8 LODBiasModifier ; # if WITH_EDITORONLY_DATA FString DerivedDataKey ; TArray<int32> MaterialIndexToImportIndex ; TArray<FMeshUVChannelInfo> UVChannelDataPerMaterial ; TUniquePtr<class FStaticMeshRenderData> NextCachedRenderData ; TUniquePtr<FTriMeshCollisionData> CollisionDataForCookedCooker ; uint64 EstimatedCompressedSize = 0 ; uint64 EstimatedNaniteTotalCompressedSize = 0 ; uint64 EstimatedNaniteStreamingCompressedSize = 0 ; void)",
    "insertText": "SyncUVChannelData(const TArray<FStaticMaterial>& ObjectData)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache(const ITargetPlatform* TargetPlatform, UStaticMesh* Owner, const FStaticMeshLODSettings& LODSettings)"
  },
  {
    "label": "GetNumNonStreamingLODs()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumNonStreamingLODs()"
  },
  {
    "label": "GetNumNonOptionalLODs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNonOptionalLODs()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UStaticMesh* Owner, bool bCooked)"
  },
  {
    "label": "SerializeInlineDataRepresentations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeInlineDataRepresentations(FArchive& Ar, UStaticMesh* Owner)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(ERHIFeatureLevel::Type InFeatureLevel, UStaticMesh* Owner)"
  },
  {
    "label": "AllocateLODResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateLODResources(int32 NumLODs)"
  },
  {
    "label": "ComputeUVDensities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeUVDensities()"
  },
  {
    "label": "BuildAreaWeighedSamplingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAreaWeighedSamplingData()"
  },
  {
    "label": "InitializeRayTracingRepresentationFromRenderingLODs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRayTracingRepresentationFromRenderingLODs()"
  },
  {
    "label": "ResolveSectionInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ResolveSectionInfo(UStaticMesh* Owner)"
  },
  {
    "label": "GetFirstValidLODIdx()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetFirstValidLODIdx(int32 MinLODIdx)"
  },
  {
    "label": "GetCurrentFirstLOD()",
    "kind": "Method",
    "detail": "Function (} const FStaticMeshLODResources*)",
    "insertText": "GetCurrentFirstLOD(int32 MinLODIdx)"
  },
  {
    "label": "GetCurrentFirstLODIdx()",
    "kind": "Method",
    "detail": "Function (const int32 LODIdx =)",
    "insertText": "GetCurrentFirstLODIdx(MinLODIdx)"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext()",
    "kind": "Method",
    "detail": "Function (} private : # if WITH_EDITORONLY_DATA class FLevelOfDetailSettingsLayout ; # endif bool bIsInitialized = false ; } ; class FStaticMeshComponentRecreateRenderStateContext { public :)",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext(UStaticMesh* InStaticMesh, bool InUnbuildLighting = true, bool InRefreshBounds = false)"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext(const TArray<UStaticMesh*>& InStaticMeshes, bool InUnbuildLighting = true, bool InRefreshBounds = false)"
  },
  {
    "label": "GetComponentsUsingMesh()",
    "kind": "Method",
    "detail": "Function (const TArray<UStaticMeshComponent*>&)",
    "insertText": "GetComponentsUsingMesh(UStaticMesh* StaticMesh)"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext()"
  },
  {
    "label": "FStaticMeshComponentBulkReregisterContext()",
    "kind": "Method",
    "detail": "Function (private : struct FData { TArray<UStaticMeshComponent*> UStaticMeshComponents ; TArray<IStaticMeshComponent*> IStaticMeshComponents ; } ; TMap<void*,FData> StaticMeshComponents ; bool bUnbuildLighting ; bool bRefreshBounds ; } ; enum class EBulkReregister { Component,RenderState } ; class FStaticMeshComponentBulkReregisterContext { public :)",
    "insertText": "FStaticMeshComponentBulkReregisterContext(FSceneInterface* InScene, TArrayView<UActorComponent*> InComponents, EBulkReregister ReregisterType = EBulkReregister::Component)"
  },
  {
    "label": "FStaticMeshComponentBulkReregisterContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshComponentBulkReregisterContext()"
  },
  {
    "label": "AddSimpleConstructionScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleConstructionScript(USimpleConstructionScript* SCS)"
  },
  {
    "label": "SanitizeMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeMeshComponents()"
  },
  {
    "label": "AddConstructedComponent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddConstructedComponent(USceneComponent* SceneComp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class USCS_Node ; FSceneInterface* Scene ; TArray<UPrimitiveComponent*> StaticMeshComponents ; TArray<USimpleConstructionScript*> SCSs ; } ; class FStaticMeshInstanceData { template<F> struct FInstanceTransformMatrix { F InstanceTransform1 [ 4 ] ; F InstanceTransform2 [ 4 ] ; F InstanceTransform3 [ 4 ] ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FInstanceTransformMatrix& V)"
  },
  {
    "label": "FStaticMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStaticMeshInstanceData(bool bInUseHalfFloat) : bUseHalfFloat(PLATFORM_BUILTIN_VERTEX_HALF_FLOAT || bInUseHalfFloat)"
  },
  {
    "label": "AllocateBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateBuffers(0)"
  },
  {
    "label": "FStaticMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStaticMeshInstanceData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (delete InstanceOriginData ; delete InstanceLightmapData ; delete InstanceTransformData ; delete InstanceCustomData ; } void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AllocateInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateInstances(int32 InNumInstances, int32 InNumCustomDataFloats, EResizeBufferFlags BufferFlags, bool DestroyExistingInstances)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumInstances = InNumInstances ; NumCustomDataFloats = InNumCustomDataFloats ;)",
    "insertText": "if(DestroyExistingInstances)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InstanceOriginData ->)",
    "insertText": "Empty(NumInstances)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InstanceCustomData ->)",
    "insertText": "Empty(NumCustomDataFloats * NumInstances)"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (} InstanceOriginData ->)",
    "insertText": "ResizeBuffer(NumInstances, BufferFlags)"
  },
  {
    "label": "GetDataPointer()",
    "kind": "Method",
    "detail": "Function (InstanceOriginDataPtr = InstanceOriginData ->)",
    "insertText": "GetDataPointer()"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (InstanceCustomData ->)",
    "insertText": "ResizeBuffer(NumCustomDataFloats * NumInstances, BufferFlags)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "GetInstanceTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInstanceTransform(int32 InstanceIndex, FRenderTransform& Transform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector4f TransformVec [ 3 ] ;)",
    "insertText": "if(bUseHalfFloat)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (GetInstanceTransformInternal<)",
    "insertText": "FFloat16(InstanceIndex, TransformVec)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { GetInstanceTransformInternal<)",
    "insertText": "float(InstanceIndex, TransformVec)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (} Transform . TransformRows [ 0 ] =)",
    "insertText": "FVector3f(TransformVec[0].X, TransformVec[0].Y, TransformVec[0].Z)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Transform . TransformRows [ 1 ] =)",
    "insertText": "FVector3f(TransformVec[1].X, TransformVec[1].Y, TransformVec[1].Z)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Transform . TransformRows [ 2 ] =)",
    "insertText": "FVector3f(TransformVec[2].X, TransformVec[2].Y, TransformVec[2].Z)"
  },
  {
    "label": "GetInstanceOriginInternal()",
    "kind": "Method",
    "detail": "Function (FVector4f Origin ;)",
    "insertText": "GetInstanceOriginInternal(InstanceIndex, Origin)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Transform . Origin =)",
    "insertText": "FVector3f(Origin.X, Origin.Y, Origin.Z)"
  },
  {
    "label": "GetInstanceRandomID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInstanceRandomID(int32 InstanceIndex, float& RandomInstanceID)"
  },
  {
    "label": "GetInstanceEditorData()",
    "kind": "Method",
    "detail": "Function (RandomInstanceID = Origin . W ; } # if WITH_EDITOR void)",
    "insertText": "GetInstanceEditorData(int32 InstanceIndex, FColor& HitProxyColorOut, bool & bSelectedOut)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (GetInstanceTransformInternal<)",
    "insertText": "FFloat16(InstanceIndex, InstanceTransform)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { GetInstanceTransformInternal<)",
    "insertText": "float(InstanceIndex, InstanceTransform)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} bSelectedOut = InstanceTransform [ 0 ] [ 3 ]> 2 5 5 . 0 f ; HitProxyColorOut . R =)",
    "insertText": "uint8(InstanceTransform[0][3] - (bSelectedOut ? 256.0f : 0.0f))"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (HitProxyColorOut . G =)",
    "insertText": "uint8(InstanceTransform[1][3])"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (HitProxyColorOut . B =)",
    "insertText": "uint8(InstanceTransform[2][3])"
  },
  {
    "label": "GetInstanceLightMapData()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "GetInstanceLightMapData(int32 InstanceIndex, FVector4f& InstanceLightmapAndShadowMapUVBias)"
  },
  {
    "label": "GetInstanceLightMapDataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceLightMapDataInternal(InstanceIndex, InstanceLightmapAndShadowMapUVBias)"
  },
  {
    "label": "GetInstanceCustomDataValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInstanceCustomDataValues(int32 InstanceIndex, TArrayView<float> OutCustomData)"
  },
  {
    "label": "GetInstanceCustomDataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceCustomDataInternal(InstanceIndex, OutCustomData)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstance(int32 InstanceIndex, const FMatrix44f& Transform, float RandomInstanceID, const FVector2D& LightmapUVBias, const FVector2D& ShadowmapUVBias)"
  },
  {
    "label": "Origin()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "Origin(Transform.M[3][0], Transform.M[3][1], Transform.M[3][2], RandomInstanceID)"
  },
  {
    "label": "SetInstanceOriginInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceOriginInternal(InstanceIndex, Origin)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f InstanceTransform [ 3 ] ; InstanceTransform [ 0 ] =)",
    "insertText": "FVector4f(Transform.M[0][0], Transform.M[0][1], Transform.M[0][2], 0.0f)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (InstanceTransform [ 1 ] =)",
    "insertText": "FVector4f(Transform.M[1][0], Transform.M[1][1], Transform.M[1][2], 0.0f)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (InstanceTransform [ 2 ] =)",
    "insertText": "FVector4f(Transform.M[2][0], Transform.M[2][1], Transform.M[2][2], 0.0f)"
  },
  {
    "label": "SetInstanceLightMapDataInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetInstanceLightMapDataInternal(InstanceIndex, FVector4f((float)LightmapUVBias.X, (float)LightmapUVBias.Y, (float)ShadowmapUVBias.X, (float)ShadowmapUVBias.Y))"
  },
  {
    "label": "SetInstanceCustomDataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceCustomDataInternal(InstanceIndex, i, 0)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetInstance(int32 InstanceIndex, const FMatrix44f& Transform, float RandomInstanceID)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (const FVector2D& LightmapUVBias = FVector2D::ZeroVector ; const FVector2D& ShadowmapUVBias = FVector2D::ZeroVector ;)",
    "insertText": "SetInstance(InstanceIndex, Transform, RandomInstanceID, LightmapUVBias, ShadowmapUVBias)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstance(int32 InstanceIndex, const FMatrix44f& Transform, const FVector2D& LightmapUVBias, const FVector2D& ShadowmapUVBias)"
  },
  {
    "label": "GetInstanceRandomID()",
    "kind": "Method",
    "detail": "Function (float RandomInstanceID ;)",
    "insertText": "GetInstanceRandomID(InstanceIndex, RandomInstanceID)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstance(int32 InstanceIndex, const FMatrix44f& Transform)"
  },
  {
    "label": "SetInstanceLightMapData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstanceLightMapData(int32 InstanceIndex, const FVector2D& LightmapUVBias, const FVector2D& ShadowmapUVBias)"
  },
  {
    "label": "SetInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstanceCustomData(int32 InstanceIndex, int32 Index, float CustomData)"
  },
  {
    "label": "SetInstanceCustomDataInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceCustomDataInternal(InstanceIndex, Index, CustomData)"
  },
  {
    "label": "NullifyInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NullifyInstance(int32 InstanceIndex)"
  },
  {
    "label": "SetInstanceOriginInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceOriginInternal(InstanceIndex, FVector4f(0, 0, 0, 0))"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f InstanceTransform [ 3 ] ; InstanceTransform [ 0 ] =)",
    "insertText": "FVector4f(0, 0, 0, 0)"
  },
  {
    "label": "SetInstanceLightMapDataInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetInstanceLightMapDataInternal(InstanceIndex, FVector4f(0, 0, 0, 0))"
  },
  {
    "label": "SetInstanceEditorData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetInstanceEditorData(int32 InstanceIndex, FColor HitProxyColor, bool bSelected)"
  },
  {
    "label": "InstanceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstanceTransform((float)HitProxyColor.R) + (bSelected ? 256.f : 0.0f)"
  },
  {
    "label": "InstanceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstanceTransform(float)"
  },
  {
    "label": "ClearInstanceEditorData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearInstanceEditorData(int32 InstanceIndex)"
  },
  {
    "label": "SwapInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SwapInstance(int32 Index1, int32 Index2)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (FInstanceTransformMatrix<FFloat16>* ElementData = reinterpret_cast<FInstanceTransformMatrix<)",
    "insertText": "FFloat16(InstanceTransformDataPtr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentSize = InstanceTransformData ->)",
    "insertText": "Num() * InstanceTransformData->GetStride()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FInstanceTransformMatrix<FFloat16> TempStore = ElementData [ Index1 ] ; ElementData [ Index1 ] = ElementData [ Index2 ] ; ElementData [ Index2 ] = TempStore ; } else { FInstanceTransformMatrix<float>* ElementData = reinterpret_cast<FInstanceTransformMatrix<)",
    "insertText": "float(InstanceTransformDataPtr)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FInstanceTransformMatrix<float> TempStore = ElementData [ Index1 ] ; ElementData [ Index1 ] = ElementData [ Index2 ] ; ElementData [ Index2 ] = TempStore ; } { FVector4f* ElementData = reinterpret_cast<)",
    "insertText": "FVector4f(InstanceOriginDataPtr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentSize = InstanceOriginData ->)",
    "insertText": "Num() * InstanceOriginData->GetStride()"
  },
  {
    "label": "FInstanceLightMapVector()",
    "kind": "Method",
    "detail": "Function (FVector4f TempStore = ElementData [ Index1 ] ; ElementData [ Index1 ] = ElementData [ Index2 ] ; ElementData [ Index2 ] = TempStore ; } { FInstanceLightMapVector* ElementData = reinterpret_cast<)",
    "insertText": "FInstanceLightMapVector(InstanceLightmapDataPtr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentSize = InstanceLightmapData ->)",
    "insertText": "Num() * InstanceLightmapData->GetStride()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FInstanceLightMapVector TempStore = ElementData [ Index1 ] ; ElementData [ Index1 ] = ElementData [ Index2 ] ; ElementData [ Index2 ] = TempStore ; } { float* ElementData = reinterpret_cast<)",
    "insertText": "float(InstanceCustomDataPtr)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const uint32 CurrentSize = InstanceCustomData ->)",
    "insertText": "Num() * InstanceCustomData->GetStride()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 CustomDataIndex1 = NumCustomDataFloats* Index1 + i ; const int32 CustomDataIndex2 = NumCustomDataFloats* Index2 + i ;)",
    "insertText": "check((void*)((&ElementData[CustomDataIndex1]) + 1) <= (void*)(InstanceCustomDataPtr + CurrentSize))"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (float TempStore = ElementData [ CustomDataIndex1 ] ; ElementData [ CustomDataIndex1 ] = ElementData [ CustomDataIndex2 ] ; ElementData [ CustomDataIndex2 ] = TempStore ; } } } int32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "GetResourceArray()",
    "kind": "Method",
    "detail": "Function (InstanceOriginData ->)",
    "insertText": "GetResourceArray()->SetAllowCPUAccess(InNeedsCPUAccess)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InstanceLightmapData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InstanceTransformData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InstanceCustomData)"
  },
  {
    "label": "GetTranslationUsesHalfs()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetTranslationUsesHalfs()"
  },
  {
    "label": "GetTransformResourceArray()",
    "kind": "Method",
    "detail": "Function (} FResourceArrayInterface*)",
    "insertText": "GetTransformResourceArray()"
  },
  {
    "label": "GetLightMapResourceArray()",
    "kind": "Method",
    "detail": "Function (} FResourceArrayInterface*)",
    "insertText": "GetLightMapResourceArray()"
  },
  {
    "label": "GetCustomDataResourceArray()",
    "kind": "Method",
    "detail": "Function (} FResourceArrayInterface*)",
    "insertText": "GetCustomDataResourceArray()"
  },
  {
    "label": "GetOriginStride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetOriginStride()"
  },
  {
    "label": "GetTransformStride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTransformStride()"
  },
  {
    "label": "GetLightMapStride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLightMapStride()"
  },
  {
    "label": "GetCustomDataStride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCustomDataStride()"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "GetInstanceTransformInternal()",
    "kind": "Method",
    "detail": "Function (} private : template<T> void)",
    "insertText": "GetInstanceTransformInternal(int32 InstanceIndex, FVector4f (&Transform)[3])"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FInstanceTransformMatrix<T>* ElementData = reinterpret_cast<FInstanceTransformMatrix<)",
    "insertText": "T(InstanceTransformDataPtr)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (Transform [ 0 ] [ 0 ] = ElementData [ InstanceIndex ] . InstanceTransform1 [ 0 ] ; Transform [ 0 ] [ 1 ] = ElementData [ InstanceIndex ] . InstanceTransform1 [ 1 ] ; Transform [ 0 ] [ 2 ] = ElementData [ InstanceIndex ] . InstanceTransform1 [ 2 ] ; Transform [ 0 ] [ 3 ] = ElementData [ InstanceIndex ] . InstanceTransform1 [ 3 ] ; Transform [ 1 ] [ 0 ] = ElementData [ InstanceIndex ] . InstanceTransform2 [ 0 ] ; Transform [ 1 ] [ 1 ] = ElementData [ InstanceIndex ] . InstanceTransform2 [ 1 ] ; Transform [ 1 ] [ 2 ] = ElementData [ InstanceIndex ] . InstanceTransform2 [ 2 ] ; Transform [ 1 ] [ 3 ] = ElementData [ InstanceIndex ] . InstanceTransform2 [ 3 ] ; Transform [ 2 ] [ 0 ] = ElementData [ InstanceIndex ] . InstanceTransform3 [ 0 ] ; Transform [ 2 ] [ 1 ] = ElementData [ InstanceIndex ] . InstanceTransform3 [ 1 ] ; Transform [ 2 ] [ 2 ] = ElementData [ InstanceIndex ] . InstanceTransform3 [ 2 ] ; Transform [ 2 ] [ 3 ] = ElementData [ InstanceIndex ] . InstanceTransform3 [ 3 ] ; } else { Transform [ 0 ] =)",
    "insertText": "FVector4f(1.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (Transform [ 1 ] =)",
    "insertText": "FVector4f(0.0f, 1.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (Transform [ 2 ] =)",
    "insertText": "FVector4f(0.0f, 0.0f, 1.0f, 0.0f)"
  },
  {
    "label": "GetInstanceOriginInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetInstanceOriginInternal(int32 InstanceIndex, FVector4f &Origin)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (Origin = ElementData [ InstanceIndex ] ; } else { Origin =)",
    "insertText": "FVector4f(0.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "GetInstanceLightMapDataInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetInstanceLightMapDataInternal(int32 InstanceIndex, FVector4f &LightmapData)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (LightmapData =)",
    "insertText": "FVector4f(float(ElementData[InstanceIndex].InstanceLightmapAndShadowMapUVBias[0]) / 32767.0f, float(ElementData[InstanceIndex].InstanceLightmapAndShadowMapUVBias[1]) / 32767.0f, float(ElementData[InstanceIndex].InstanceLightmapAndShadowMapUVBias[2]) / 32767.0f, float(ElementData[InstanceIndex].InstanceLightmapAndShadowMapUVBias[3]) / 32767.0f)"
  },
  {
    "label": "GetInstanceCustomDataInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetInstanceCustomDataInternal(int32 InstanceIndex, TArrayView<float> OutCustomData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CustomDataIndex = NumCustomDataFloats* InstanceIndex + i ;)",
    "insertText": "if(ensure((void*)((&ElementData[CustomDataIndex]) + 1) <= (void*)(InstanceCustomDataPtr + CurrentSize)) && ensure((void*)((&ElementData[CustomDataIndex]) + 0) >= (void*)(InstanceCustomDataPtr)))"
  },
  {
    "label": "SetInstanceTransformInternal()",
    "kind": "Method",
    "detail": "Function (OutCustomData [ i ] = ElementData [ CustomDataIndex ] ; } } } template<T> void)",
    "insertText": "SetInstanceTransformInternal(int32 InstanceIndex, FVector4f(Transform)[3])"
  },
  {
    "label": "SetInstanceOriginInternal()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] . InstanceTransform1 [ 0 ] = Transform [ 0 ] [ 0 ] ; ElementData [ InstanceIndex ] . InstanceTransform1 [ 1 ] = Transform [ 0 ] [ 1 ] ; ElementData [ InstanceIndex ] . InstanceTransform1 [ 2 ] = Transform [ 0 ] [ 2 ] ; ElementData [ InstanceIndex ] . InstanceTransform1 [ 3 ] = Transform [ 0 ] [ 3 ] ; ElementData [ InstanceIndex ] . InstanceTransform2 [ 0 ] = Transform [ 1 ] [ 0 ] ; ElementData [ InstanceIndex ] . InstanceTransform2 [ 1 ] = Transform [ 1 ] [ 1 ] ; ElementData [ InstanceIndex ] . InstanceTransform2 [ 2 ] = Transform [ 1 ] [ 2 ] ; ElementData [ InstanceIndex ] . InstanceTransform2 [ 3 ] = Transform [ 1 ] [ 3 ] ; ElementData [ InstanceIndex ] . InstanceTransform3 [ 0 ] = Transform [ 2 ] [ 0 ] ; ElementData [ InstanceIndex ] . InstanceTransform3 [ 1 ] = Transform [ 2 ] [ 1 ] ; ElementData [ InstanceIndex ] . InstanceTransform3 [ 2 ] = Transform [ 2 ] [ 2 ] ; ElementData [ InstanceIndex ] . InstanceTransform3 [ 3 ] = Transform [ 2 ] [ 3 ] ; } } void)",
    "insertText": "SetInstanceOriginInternal(int32 InstanceIndex, const FVector4f& Origin)"
  },
  {
    "label": "SetInstanceLightMapDataInternal()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] = Origin ; } } void)",
    "insertText": "SetInstanceLightMapDataInternal(int32 InstanceIndex, const FVector4f& LightmapData)"
  },
  {
    "label": "InstanceLightmapAndShadowMapUVBias()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] .)",
    "insertText": "InstanceLightmapAndShadowMapUVBias(int16)FMath::Clamp<int32>(FMath::TruncToInt(LightmapData.X * 32767.0f), MIN_int16, MAX_int16)"
  },
  {
    "label": "InstanceLightmapAndShadowMapUVBias()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] .)",
    "insertText": "InstanceLightmapAndShadowMapUVBias(int16)FMath::Clamp<int32>(FMath::TruncToInt(LightmapData.Y * 32767.0f), MIN_int16, MAX_int16)"
  },
  {
    "label": "InstanceLightmapAndShadowMapUVBias()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] .)",
    "insertText": "InstanceLightmapAndShadowMapUVBias(int16)FMath::Clamp<int32>(FMath::TruncToInt(LightmapData.Z * 32767.0f), MIN_int16, MAX_int16)"
  },
  {
    "label": "InstanceLightmapAndShadowMapUVBias()",
    "kind": "Method",
    "detail": "Function (ElementData [ InstanceIndex ] .)",
    "insertText": "InstanceLightmapAndShadowMapUVBias(int16)FMath::Clamp<int32>(FMath::TruncToInt(LightmapData.W * 32767.0f), MIN_int16, MAX_int16)"
  },
  {
    "label": "SetInstanceCustomDataInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetInstanceCustomDataInternal(int32 InstanceIndex, int32 DataIndex, float CustomData)"
  },
  {
    "label": "AllocateBuffers()",
    "kind": "Method",
    "detail": "Function (ElementData [ CustomDataIndex ] = CustomData ; } } void)",
    "insertText": "AllocateBuffers(int32 InNumInstances, EResizeBufferFlags BufferFlags = EResizeBufferFlags::None)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (delete InstanceOriginData ; InstanceOriginDataPtr = nullptr ; delete InstanceTransformData ; InstanceTransformDataPtr = nullptr ; delete InstanceLightmapData ; InstanceLightmapDataPtr = nullptr ; delete InstanceCustomData ; InstanceCustomData = nullptr ; InstanceOriginData = new TStaticMeshVertexData<)",
    "insertText": "FVector4f()"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (InstanceOriginData ->)",
    "insertText": "ResizeBuffer(InNumInstances, BufferFlags)"
  },
  {
    "label": "FInstanceLightMapVector()",
    "kind": "Method",
    "detail": "Function (InstanceLightmapData = new TStaticMeshVertexData<)",
    "insertText": "FInstanceLightMapVector()"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (InstanceTransformData = new TStaticMeshVertexData<FInstanceTransformMatrix<)",
    "insertText": "FFloat16()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { InstanceTransformData = new TStaticMeshVertexData<FInstanceTransformMatrix<)",
    "insertText": "float()"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (InstanceCustomData ->)",
    "insertText": "ResizeBuffer(NumCustomDataFloats * InNumInstances, BufferFlags)"
  },
  {
    "label": "RemapPaintedVertexColors()",
    "kind": "Method",
    "detail": "Function (} FStaticMeshVertexDataInterface* InstanceOriginData = nullptr ; uint8* InstanceOriginDataPtr = nullptr ; FStaticMeshVertexDataInterface* InstanceTransformData = nullptr ; uint8* InstanceTransformDataPtr = nullptr ; FStaticMeshVertexDataInterface* InstanceLightmapData = nullptr ; uint8* InstanceLightmapDataPtr = nullptr ; FStaticMeshVertexDataInterface* InstanceCustomData = nullptr ; uint8* InstanceCustomDataPtr = nullptr ; int32 NumInstances = 0 ; int32 NumCustomDataFloats = 0 ; bool bUseHalfFloat = false ; } ; # if WITH_EDITOR void)",
    "insertText": "RemapPaintedVertexColors(const TArray<FPaintedVertex>& InPaintedVertices, const FColorVertexBuffer* InOverrideColors, const FPositionVertexBuffer& OldPositions, const FStaticMeshVertexBuffer& OldVertexBuffer, const FPositionVertexBuffer& NewPositions, const FStaticMeshVertexBuffer* OptionalVertexBuffer, TArray<FColor>& OutOverrideColors)"
  }
]