[
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "MyConvertableType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MyConvertableType"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "ThreadTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTicks"
  },
  {
    "label": "TraceEventMemoryOverhead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventMemoryOverhead"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "info"
  },
  {
    "label": "info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "info"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "InnerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InnerType"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "base"
  },
  {
    "label": "Helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Helper"
  },
  {
    "label": "HasHelperSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasHelperSupport"
  },
  {
    "label": "TypeFor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeFor"
  },
  {
    "label": "TypeFor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeFor"
  },
  {
    "label": "TypeFor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeFor"
  },
  {
    "label": "TypeCheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeCheck"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceStringWithCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceStringWithCopy"
  },
  {
    "label": "TraceValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceValue"
  },
  {
    "label": "TraceArguments",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceArguments"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "AppendToProto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendToProto(ProtoAppender* appender)"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (TraceArguments)",
    "insertText": "args(\"foo_arg1\", foo)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(size_t alloc_size = 0)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "data()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "data()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "CopyStringsTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStringsTo(StringStorage* storage,\n                     bool copy_all_strings,\n                     const char** extra_string1,\n                     const char** extra_string2)"
  },
  {
    "label": "AppendDebugString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDebugString(std::string* out)"
  }
]