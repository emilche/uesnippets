[
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertex"
  },
  {
    "label": "FHalfEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHalfEdge"
  },
  {
    "label": "FDelaunayTriangleGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelaunayTriangleGenerator"
  },
  {
    "label": "ECircumCircleState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECircumCircleState"
  },
  {
    "label": "FBlendSpaceTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceTriangle"
  },
  {
    "label": "FBlendSpaceGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSpaceGrid"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / BlendSpace . h \" struct FTriangle ; struct FTriangle ; struct FVertex { FVector2D Position ; TArray<FTriangle*> Triangles ; int32 SampleIndex ;)",
    "insertText": "FVertex(FVector2D InPosition, int32 InSampleIndex) : Position(InPosition), SampleIndex(InSampleIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVector2D& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVertex& Other)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangle(FTriangle * NewTriangle)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "AddUnique(NewTriangle)"
  },
  {
    "label": "RemoveTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveTriangle(FTriangle * TriangleToRemove)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Remove(TriangleToRemove)"
  },
  {
    "label": "GetDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDistance(const FVertex& Other)"
  },
  {
    "label": "FHalfEdge()",
    "kind": "Method",
    "detail": "Function (} } ; struct FHalfEdge { FVertex* Vertices [ 2 ] ;)",
    "insertText": "FHalfEdge()"
  },
  {
    "label": "FHalfEdge()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FHalfEdge(FVertex * A, FVertex * B)"
  },
  {
    "label": "DoesShare()",
    "kind": "Method",
    "detail": "Function (Vertices [ 0 ] = A ; Vertices [ 1 ] = B ; } bool)",
    "insertText": "DoesShare(const FHalfEdge& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FHalfEdge& Other)"
  },
  {
    "label": "UpdateCenter()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTriangle { FVertex* Vertices [ 3 ] ; FVector2D Center ; FHalfEdge Edges [ 3 ] ; void)",
    "insertText": "UpdateCenter()"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Center(Vertices[0]->Position + Vertices[1]->Position + Vertices[2]->Position)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTriangle& Other)"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangle(FTriangle & Copy)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Vertices, Copy.Vertices)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Edges, Copy.Edges)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (Vertices [ 0 ] ->)",
    "insertText": "AddTriangle(this)"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangle(FVertex * A, FVertex * B, FVertex * C)"
  },
  {
    "label": "MakeCCW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCCW()"
  },
  {
    "label": "FHalfEdge()",
    "kind": "Method",
    "detail": "Function (Edges [ 0 ] =)",
    "insertText": "FHalfEdge(Vertices[0], Vertices[1])"
  },
  {
    "label": "FHalfEdge()",
    "kind": "Method",
    "detail": "Function (Edges [ 1 ] =)",
    "insertText": "FHalfEdge(Vertices[1], Vertices[2])"
  },
  {
    "label": "FHalfEdge()",
    "kind": "Method",
    "detail": "Function (Edges [ 2 ] =)",
    "insertText": "FHalfEdge(Vertices[2], Vertices[0])"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangle(FVertex * A)"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangle(FVertex * A, FVertex * B)"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangle()"
  },
  {
    "label": "RemoveTriangle()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertexIndex ] ->)",
    "insertText": "RemoveTriangle(this)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "Contains(const FVertex& Other)"
  },
  {
    "label": "GetDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDistance(const FVector2D& Other)"
  },
  {
    "label": "HasSameHalfEdge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSameHalfEdge(const FTriangle* Other)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FVector2D Diff1 = Vertices [ 1 ] -> Position - Vertices [ 0 ] -> Position ; FVector2D Diff2 = Vertices [ 2 ] -> Position - Vertices [ 0 ] -> Position ; double Result = Diff1 . X* Diff2 . Y - Diff1 . Y* Diff2 . X ;)",
    "insertText": "check(Result != 0.f)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FVertex* TempPt = Vertices [ 2 ] ; Vertices [ 2 ] = Vertices [ 1 ] ; Vertices [ 1 ] = TempPt ; } } } ; class FDelaunayTriangleGenerator { public : enum ECircumCircleState { ECCS_Outside = - 1,ECCS_On = 0,ECCS_Inside = 1,} ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "EmptyTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTriangles()"
  },
  {
    "label": "EmptySamplePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySamplePoints()"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Triangulate(EPreferredTriangulationDirection PreferredTriangulationDirection)"
  },
  {
    "label": "CalculateTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<struct FBlendSpaceTriangle>)",
    "insertText": "CalculateTriangles()"
  },
  {
    "label": "AddSamplePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamplePoint(const FVector2D& NewPoint, const int32 SampleIndex)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Step(int32 StartIndex)"
  },
  {
    "label": "FDelaunayTriangleGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDelaunayTriangleGenerator()"
  },
  {
    "label": "GetTriangleList()",
    "kind": "Method",
    "detail": "Function (} const TArray<FTriangle*>&)",
    "insertText": "GetTriangleList()"
  },
  {
    "label": "SortSamples()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SortSamples()"
  },
  {
    "label": "AdjustEdgeDirections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustEdgeDirections(EPreferredTriangulationDirection PreferredTriangulationDirection)"
  },
  {
    "label": "FindTriangleIndexWithEdge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindTriangleIndexWithEdge(int32 SampleIndex0, int32 SampleIndex1, int32* VertexIndex = nullptr)"
  },
  {
    "label": "GetCircumcircleState()",
    "kind": "Method",
    "detail": "Function (ECircumCircleState)",
    "insertText": "GetCircumcircleState(const FTriangle* T, const FVertex& TestPoint)"
  },
  {
    "label": "IsEligibleForTriangulation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEligibleForTriangulation(const FVertex* A, const FVertex* B, const FVertex* C)"
  },
  {
    "label": "IsCollinear()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCollinear(const FVertex* A, const FVertex* B, const FVertex* C)"
  },
  {
    "label": "AllCoincident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllCoincident(const TArray<FVertex>& InPoints)"
  },
  {
    "label": "FlipTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlipTriangles(const int32 TriangleIndexOne, const int32 TriangleIndexTwo)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(FTriangle & newTriangle, bool bCheckHalfEdge=true)"
  },
  {
    "label": "GenerateTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateTriangles(TArray<FVertex> & PointList, const int32 TotalNum)"
  },
  {
    "label": "FindTriangleThisPointBelongsTo()",
    "kind": "Method",
    "detail": "Function (private : TArray<FVertex> SamplePointList ; TArray<FTriangle*> TriangleList ; FVector2D GridMin ; FVector2D RecipGridSize ; } ; class FBlendSpaceGrid { public : bool)",
    "insertText": "FindTriangleThisPointBelongsTo(const FVector2D& TestPoint, FVector& OutBarycentricCoords, FTriangle* & OutTriangle, const TArray<FTriangle*> & TriangleList)"
  },
  {
    "label": "GenerateGridElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateGridElements(const TArray<FVertex>& SamplePoints, const TArray<FTriangle*> & TriangleList)"
  },
  {
    "label": "FBlendSpaceGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlendSpaceGrid() : GridMin(0, 0) , GridMax(100, 100) , NumGridPointsForAxis(5, 5)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (GridPoints .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetGridInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGridInfo(const FBlendParameter& BlendParamX, const FBlendParameter& BlendParamY)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (NumGridPointsForAxis . X = BlendParamX . GridNum + 1 ; NumGridPointsForAxis . Y = BlendParamY . GridNum + 1 ; NumGridDivisions . X = BlendParamX . GridNum ; NumGridDivisions . Y = BlendParamY . GridNum ; GridMin . X = BlendParamX . Min ; GridMax . X = BlendParamX . Max ; GridMin . Y = BlendParamY . Min ; GridMax . Y = BlendParamY . Max ; } const FEditorElement&)",
    "insertText": "GetElement(const int32 GridX, const int32 GridY)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (const TArray<FEditorElement>&)",
    "insertText": "GetElements()"
  }
]