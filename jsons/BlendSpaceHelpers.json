[
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertex"
  },
  {
    "label": "FHalfEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHalfEdge"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FDelaunayTriangleGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelaunayTriangleGenerator"
  },
  {
    "label": "ECircumCircleState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECircumCircleState"
  },
  {
    "label": "FBlendSpaceTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceTriangle"
  },
  {
    "label": "FBlendSpaceGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendSpaceGrid"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (point)",
    "insertText": "return(Other == Position)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (point)",
    "insertText": "return(Other.Position == Position)"
  },
  {
    "label": "MakeCCW()",
    "kind": "Method",
    "detail": "Function (CCW)",
    "insertText": "MakeCCW()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "EmptyTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTriangles()"
  },
  {
    "label": "EmptySamplePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySamplePoints()"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Triangulate(EPreferredTriangulationDirection PreferredTriangulationDirection)"
  },
  {
    "label": "AddSamplePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamplePoint(const FVector2D& NewPoint, const int32 SampleIndex)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Step(int32 StartIndex)"
  },
  {
    "label": "SetGridBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGridBox(const FBlendParameter& BlendParamX, const FBlendParameter& BlendParamY)"
  },
  {
    "label": "SortSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortSamples()"
  },
  {
    "label": "AdjustEdgeDirections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustEdgeDirections(EPreferredTriangulationDirection PreferredTriangulationDirection)"
  },
  {
    "label": "GetCircumcircleState()",
    "kind": "Method",
    "detail": "Function (ECircumCircleState)",
    "insertText": "GetCircumcircleState(const FTriangle* T, const FVertex& TestPoint)"
  },
  {
    "label": "IsCollinear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollinear(const FVertex* A, const FVertex* B, const FVertex* C)"
  },
  {
    "label": "AllCoincident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllCoincident(const TArray<FVertex>& InPoints)"
  },
  {
    "label": "FlipTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlipTriangles(const int32 TriangleIndexOne, const int32 TriangleIndexTwo)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(FTriangle & newTriangle, bool bCheckHalfEdge=true)"
  },
  {
    "label": "GenerateTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateTriangles(TArray<FVertex> & PointList, const int32 TotalNum)"
  },
  {
    "label": "GenerateGridElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateGridElements(const TArray<FVertex>& SamplePoints, const TArray<FTriangle*> & TriangleList)"
  }
]