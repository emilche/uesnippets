[
  {
    "label": "PushSincResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PushSincResampler"
  },
  {
    "label": "SplittingFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SplittingFilter"
  },
  {
    "label": "Band",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Band"
  },
  {
    "label": "AudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioBuffer"
  },
  {
    "label": "AudioBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AUDIO_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AUDIO_BUFFER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" common_audio / channel_buffer . h \" # include \" modules / audio_processing / include / audio_processing . h \" namespace webrtc { class PushSincResampler ; class SplittingFilter ; enum Band { kBand0To8kHz = 0,kBand8To16kHz = 1,kBand16To24kHz = 2 } ; class AudioBuffer { public : const int kSplitBandSize = 1 6 0 ; const size_t kMaxSampleRate = 3 8 4 0 0 0 ;)",
    "insertText": "AudioBuffer(size_t input_rate, size_t input_num_channels, size_t buffer_rate, size_t buffer_num_channels, size_t output_rate, size_t output_num_channels)"
  },
  {
    "label": "AudioBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioBuffer()"
  },
  {
    "label": "AudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioBuffer(const AudioBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioBuffer&)",
    "insertText": "operator(const AudioBuffer&)"
  },
  {
    "label": "set_downmixing_to_specific_channel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_downmixing_to_specific_channel(size_t channel)"
  },
  {
    "label": "set_downmixing_by_averaging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_downmixing_by_averaging()"
  },
  {
    "label": "set_num_channels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_num_channels(size_t num_channels)"
  },
  {
    "label": "num_channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_channels()"
  },
  {
    "label": "channels_const()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "channels_const()"
  },
  {
    "label": "split_bands_const()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "split_bands_const(size_t channel)"
  },
  {
    "label": "split_bands()",
    "kind": "Method",
    "detail": "Function (} float* const*)",
    "insertText": "split_bands(size_t channel)"
  },
  {
    "label": "split_channels_const()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "split_channels_const(Band band)"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (} else { return band = = kBand0To8kHz ? data_ ->)",
    "insertText": "channels()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyFrom(const int16_t* const interleaved_data, const StreamConfig& stream_config)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const float* const* stacked_data, const StreamConfig& stream_config)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(const StreamConfig& stream_config, int16_t* const interleaved_data)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(const StreamConfig& stream_config, float* const* stacked_data)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(AudioBuffer* buffer)"
  },
  {
    "label": "SplitIntoFrequencyBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitIntoFrequencyBands()"
  },
  {
    "label": "MergeFrequencyBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeFrequencyBands()"
  },
  {
    "label": "ExportSplitChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportSplitChannelData(size_t channel, int16_t* const* split_band_data)"
  },
  {
    "label": "ImportSplitChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportSplitChannelData(size_t channel, const int16_t* const* split_band_data)"
  },
  {
    "label": "channels_f()",
    "kind": "Method",
    "detail": "Function (const size_t kMaxSplitFrameLength = 1 6 0 ; const size_t kMaxNumBands = 3 ; float* const*)",
    "insertText": "channels_f()"
  },
  {
    "label": "channels_const_f()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "channels_const_f()"
  },
  {
    "label": "split_bands_const_f()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "split_bands_const_f(size_t channel)"
  },
  {
    "label": "split_bands_f()",
    "kind": "Method",
    "detail": "Function (} float* const*)",
    "insertText": "split_bands_f(size_t channel)"
  },
  {
    "label": "split_channels_const_f()",
    "kind": "Method",
    "detail": "Function (} const float* const*)",
    "insertText": "split_channels_const_f(Band band)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AudioBufferTest, SetNumChannelsSetsChannelBuffersNumChannels)"
  },
  {
    "label": "RestoreNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreNumChannels()"
  }
]