[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "_IterOps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IterOps"
  },
  {
    "label": "_ForwardIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator1"
  },
  {
    "label": "_ForwardIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator2"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_FIND_END_OF_H # define _LIBCPP___ALGORITHM_FIND_END_OF_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / search . h> # include<__config> # include<__functional / identity . h> # include<__iterator / advance . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__iterator / reverse_iterator . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template < class _AlgPolicy, class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2> _LIBCPP_HIDE_FROM_ABI inline _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1, _Iter1> __find_end_impl( _Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, forward_iterator_tag, forward_iterator_tag)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (_Iter1 __match_first = _IterOps<_AlgPolicy)",
    "insertText": "next(__first1, __last1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_Iter1 __match_last = __match_first ;)",
    "insertText": "if(__first2 == __last2) return pair<_Iter1, _Iter1>(__match_last, __match_last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } _Iter1 __m1 = __first1 ; _Iter2 __m2 = __first2 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__match_first = __first1 ; __match_last = + + __m1 ; + + __first1 ; break ; })",
    "insertText": "if(++__m1 == __last1) return pair<_Iter1, _Iter1>(__match_first, __match_last)"
  },
  {
    "label": "__find_end()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; break ; } } } } template<class _IterOps,class _Pred,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2> _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter1)",
    "insertText": "__find_end(_Iter1 __first1, _Sent1 __sent1, _Iter2 __first2, _Sent2 __sent2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, bidirectional_iterator_tag, bidirectional_iterator_tag)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last1 =)",
    "insertText": "next(__first1, __sent1)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last2 =)",
    "insertText": "next(__first2, __sent2)"
  },
  {
    "label": "__find_end()",
    "kind": "Method",
    "detail": "Function (break ; } } } } template<class _AlgPolicy,class _Pred,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2> _LIBCPP_CONSTEXPR_AFTER_CXX11 _Iter1)",
    "insertText": "__find_end(_Iter1 __first1, _Sent1 __sent1, _Iter2 __first2, _Sent2 __sent2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, random_access_iterator_tag, random_access_iterator_tag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto __len2 = __last2 - __first2 ;)",
    "insertText": "if(__len2 == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto __len1 = __last1 - __first1 ;)",
    "insertText": "if(__len1 < __len2)"
  },
  {
    "label": "_D1()",
    "kind": "Method",
    "detail": "Function (const _Iter1 __s = __first1 +)",
    "insertText": "_D1(__len2 - 1)"
  },
  {
    "label": "__find_end_classic()",
    "kind": "Method",
    "detail": "Function (break ; } } } } template<class _ForwardIterator1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator1)",
    "insertText": "__find_end_classic(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate& __pred)"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "find_end()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1)",
    "insertText": "find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)"
  },
  {
    "label": "find_end()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1)",
    "insertText": "find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)"
  },
  {
    "label": "find_end()",
    "kind": "Method",
    "detail": "Function (using __v1 = iterator_traits<_ForwardIterator1>::value_type ; using __v2 = iterator_traits<_ForwardIterator2>::value_type ; return)",
    "insertText": "find_end(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>())"
  }
]