[
  {
    "label": "IAnalyticsProviderET",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProviderET"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnalyticsET . h \" # include \" AnalyticsEventAttribute . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMisc . h \" # include \" Interfaces / IAnalyticsProvider . h \" # include \" Misc / Guid . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" class IAnalyticsProviderET : public IAnalyticsProvider { public : using IAnalyticsProvider::StartSession ; using IAnalyticsProvider::RecordEvent ; void)",
    "insertText": "RecordEvent(const FString& EventName, const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "StartSession()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartSession(const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "CreateGuid()",
    "kind": "Method",
    "detail": "Function (FGuid SessionGUID ;)",
    "insertText": "CreateGuid(SessionGUID)"
  },
  {
    "label": "SetAppID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAppID(FString&& AppID)"
  },
  {
    "label": "GetAppID()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAppID()"
  },
  {
    "label": "SetAppVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAppVersion(FString&& AppVersion)"
  },
  {
    "label": "GetAppVersion()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAppVersion()"
  },
  {
    "label": "StartSession()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartSession(FString InSessionID, const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "ShouldRecordEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordEvent(const FString& EventName)"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEvent(FString&& EventName, const TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "SetURLEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURLEndpoint(const FString& UrlEndpoint, const TArray<FString>& AltDomains)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeader(const FString& HeaderName, const FString& HeaderValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FString& EventName, const TArray<FAnalyticsEventAttribute>& Attrs, bool bJson)"
  },
  {
    "label": "SetEventCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventCallback(const OnEventRecorded& Callback)"
  },
  {
    "label": "BlockUntilFlushed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockUntilFlushed(float InTimeoutSec)"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (const FAnalyticsET::Config&)",
    "insertText": "GetConfig()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(const IAnalyticsProviderET& ThisProvider, const FString& EventName)"
  },
  {
    "label": "SetShouldRecordEventFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldRecordEventFunc(const ShouldRecordEventFunction& ShouldRecordEventFunc)"
  }
]