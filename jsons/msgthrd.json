[
  {
    "label": "CMsg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMsg"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CMsg()",
    "kind": "Method",
    "detail": "Function (class CMsg { public : UINT uMsg ; DWORD dwFlags ; LPVOID lpParam ; CAMEvent* pEvent ;)",
    "insertText": "CMsg(UINT u, DWORD dw, __inout_opt LPVOID lp, __in_opt CAMEvent *pEvnt) : uMsg(u), dwFlags(dw), lpParam(lp), pEvent(pEvnt)"
  },
  {
    "label": "CMsg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CMsg() : uMsg(0), dwFlags(0L), lpParam(NULL), pEvent(NULL)"
  },
  {
    "label": "DefaultThreadProc()",
    "kind": "Method",
    "detail": "Function (} } ; class AM_NOVTABLE CMsgThread { private : DWORD WINAPI)",
    "insertText": "DefaultThreadProc(__inout LPVOID lpParam)"
  },
  {
    "label": "CMsgThread()",
    "kind": "Method",
    "detail": "Function (DWORD m_ThreadId ; HANDLE m_hThread ; protected : CGenericList<CMsg> m_ThreadQueue ; CCritSec m_Lock ; HANDLE m_hSem ; LONG m_lWaiting ; public :)",
    "insertText": "CMsgThread() : m_ThreadId(0), m_hThread(NULL), m_lWaiting(0), m_hSem(NULL), m_ThreadQueue(NAME(\"MsgThread list\"), 5)"
  },
  {
    "label": "CMsgThread()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CMsgThread()"
  },
  {
    "label": "GetThreadMsg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetThreadMsg(__out CMsg *msg)"
  },
  {
    "label": "OnThreadInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadInit()"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (} ; BOOL)",
    "insertText": "CreateThread()"
  },
  {
    "label": "WaitForThreadExit()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "WaitForThreadExit(__out LPDWORD lpdwExitCode)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(m_hThread, INFINITE)"
  },
  {
    "label": "ResumeThread()",
    "kind": "Method",
    "detail": "Function (} return FALSE ; } DWORD)",
    "insertText": "ResumeThread()"
  },
  {
    "label": "SuspendThread()",
    "kind": "Method",
    "detail": "Function (} DWORD)",
    "insertText": "SuspendThread()"
  },
  {
    "label": "GetThreadPriority()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetThreadPriority()"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (} BOOL)",
    "insertText": "SetThreadPriority(int nPriority)"
  },
  {
    "label": "GetThreadHandle()",
    "kind": "Method",
    "detail": "Function (} HANDLE)",
    "insertText": "GetThreadHandle()"
  },
  {
    "label": "lck()",
    "kind": "Method",
    "detail": "Function (CAutoLock)",
    "insertText": "lck(&m_Lock)"
  },
  {
    "label": "CMsg()",
    "kind": "Method",
    "detail": "Function (CMsg* pMsg = new)",
    "insertText": "CMsg(uMsg, dwMsgFlags, lpMsgParam, pEvent)"
  },
  {
    "label": "AddTail()",
    "kind": "Method",
    "detail": "Function (m_ThreadQueue .)",
    "insertText": "AddTail(pMsg)"
  },
  {
    "label": "ReleaseSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSemaphore(m_hSem, m_lWaiting, 0)"
  },
  {
    "label": "ThreadMessageProc()",
    "kind": "Method",
    "detail": "Function (m_lWaiting = 0 ; } } LRESULT)",
    "insertText": "ThreadMessageProc(UINT uMsg, DWORD dwFlags, __inout_opt LPVOID lpParam, __in_opt CAMEvent *pEvent)"
  }
]