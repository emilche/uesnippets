[
  {
    "label": "STileView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STileView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Framework / Views / TableViewTypeTraits . h \" # include \" Framework / Layout / Overscroll . h \" # include \" Widgets / Views / SListView . h \" template<ItemType> class STileView : public SListView<ItemType> { public : typedef TListTypeTraits<ItemType>::NullableType NullableItemType ; typedef TSlateDelegates<ItemType>::FOnGenerateRow FOnGenerateRow ; typedef TSlateDelegates<ItemType>::FOnItemScrolledIntoView FOnItemScrolledIntoView ; typedef TSlateDelegates<ItemType>::FOnMouseButtonClick FOnMouseButtonClick ; typedef TSlateDelegates<ItemType>::FOnMouseButtonDoubleClick FOnMouseButtonDoubleClick ; typedef TSlateDelegates<NullableItemType>::FOnSelectionChanged FOnSelectionChanged ; typedef TSlateDelegates<ItemType>::FIsSelectableOrNavigable FIsSelectableOrNavigable ; typedef TSlateDelegates<ItemType>::FOnItemToString_Debug FOnItemToString_Debug ; using FOnWidgetToBeRemoved = SListView<ItemType>::FOnWidgetToBeRemoved ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(STileView<ItemType>) : _OnGenerateTile() , _OnTileReleased() , _ItemHeight(128) , _ItemWidth(128) , _ItemAlignment(EListItemAlignment::EvenlyDistributed) , _OnContextMenuOpening() , _OnItemsRebuilt() , _OnMouseButtonClick() , _OnMouseButtonDoubleClick() , _OnSelectionChanged() , _OnIsSelectableOrNavigable() , _SelectionMode(ESelectionMode::Multi) , _ClearSelectionOnClick(true) , _ExternalScrollbar() , _Orientation(Orient_Vertical) , _EnableAnimatedScrolling(false) , _ScrollbarVisibility(EVisibility::Visible) , _ScrollbarDragFocusCause(EFocusCause::Mouse) , _AllowOverscroll(EAllowOverscroll::Yes) , _ScrollBarStyle(&FAppStyle::Get().GetWidgetStyle<FScrollBarStyle>(\"ScrollBar\")) , _ScrollbarDisabledVisibility(EVisibility::Collapsed) , _ConsumeMouseWheel(EConsumeMouseWheel::WhenScrollingPossible) , _WheelScrollMultiplier(GetGlobalScrollAmount()) , _HandleGamepadEvents(true) , _HandleDirectionalNavigation(true) , _IsFocusable(true) , _OnItemToString_Debug() , _OnEnteredBadState() , _WrapHorizontalNavigation(true)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (this -> _Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_EVENT(FOnGenerateRow, OnGenerateTile ) SLATE_EVENT( FOnWidgetToBeRemoved, OnTileReleased ) SLATE_EVENT( FOnTableViewScrolled, OnTileViewScrolled ) SLATE_EVENT( FOnItemScrolledIntoView, OnItemScrolledIntoView ) SLATE_ITEMS_SOURCE_ARGUMENT( ItemType, ListItemsSource ) SLATE_ATTRIBUTE( float, ItemHeight ) SLATE_ATTRIBUTE( float, ItemWidth ) SLATE_ATTRIBUTE( EListItemAlignment, ItemAlignment ) SLATE_EVENT( FOnContextMenuOpening, OnContextMenuOpening ) SLATE_EVENT( FSimpleDelegate, OnItemsRebuilt ) SLATE_EVENT( FOnMouseButtonClick, OnMouseButtonClick ) SLATE_EVENT( FOnMouseButtonDoubleClick, OnMouseButtonDoubleClick ) SLATE_EVENT( FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FIsSelectableOrNavigable, OnIsSelectableOrNavigable) SLATE_ATTRIBUTE( ESelectionMode::Type, SelectionMode ) SLATE_ARGUMENT ( bool, ClearSelectionOnClick ) SLATE_ARGUMENT( TSharedPtr<SScrollBar>, ExternalScrollbar ) SLATE_ARGUMENT(EOrientation, Orientation) SLATE_ARGUMENT( bool, EnableAnimatedScrolling) SLATE_ARGUMENT( TOptional<double>, FixedLineScrollOffset ) SLATE_ATTRIBUTE(EVisibility, ScrollbarVisibility) SLATE_ARGUMENT(EFocusCause, ScrollbarDragFocusCause) SLATE_ARGUMENT( EAllowOverscroll, AllowOverscroll)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_STYLE_ARGUMENT(FScrollBarStyle, ScrollBarStyle)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(EVisibility, ScrollbarDisabledVisibility)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(EConsumeMouseWheel, ConsumeMouseWheel)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, WheelScrollMultiplier)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, HandleGamepadEvents)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, HandleDirectionalNavigation)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(bool, IsFocusable) SLATE_EVENT(FOnItemToString_Debug, OnItemToString_Debug) SLATE_EVENT(FOnTableViewBadState, OnEnteredBadState)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, WrapHorizontalNavigation)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() void Construct( const typename STileView<ItemType>::FArguments& InArgs)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (this -> Clipping = InArgs . _Clipping ; this -> OnGenerateRow = InArgs . _OnGenerateTile ; this -> OnRowReleased = InArgs . _OnTileReleased ; this -> OnItemScrolledIntoView = InArgs . _OnItemScrolledIntoView ; this ->)",
    "insertText": "SetItemsSource(InArgs.MakeListItemsSource(this->SharedThis(this)))"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (this -> OnContextMenuOpening = InArgs . _OnContextMenuOpening ; this -> OnItemsRebuilt = InArgs . _OnItemsRebuilt ; this -> OnClick = InArgs . _OnMouseButtonClick ; this -> OnDoubleClick = InArgs . _OnMouseButtonDoubleClick ; this -> OnSelectionChanged = InArgs . _OnSelectionChanged ; this -> OnIsSelectableOrNavigable = InArgs . _OnIsSelectableOrNavigable ; this -> SelectionMode = InArgs . _SelectionMode ; this -> bClearSelectionOnClick = InArgs . _ClearSelectionOnClick ; this -> AllowOverscroll = InArgs . _AllowOverscroll ; this -> ConsumeMouseWheel = InArgs . _ConsumeMouseWheel ; this -> WheelScrollMultiplier = InArgs . _WheelScrollMultiplier ; this -> bHandleGamepadEvents = InArgs . _HandleGamepadEvents ; this -> bHandleDirectionalNavigation = InArgs . _HandleDirectionalNavigation ; this -> IsFocusable = InArgs . _IsFocusable ; this -> bEnableAnimatedScrolling = InArgs . _EnableAnimatedScrolling ; this -> FixedLineScrollOffset = InArgs . _FixedLineScrollOffset ; this -> OnItemToString_Debug = InArgs . _OnItemToString_Debug .)",
    "insertText": "IsBound() ? InArgs._OnItemToString_Debug : SListView< ItemType >::GetDefaultDebugDelegate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> OnEnteredBadState = InArgs . _OnEnteredBadState ; this -> bWrapHorizontalNavigation = InArgs . _WrapHorizontalNavigation ; FString ErrorString ; {)",
    "insertText": "if(!this->OnGenerateRow.IsBound())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ErrorString + =)",
    "insertText": "TEXT(\"Please specify an OnGenerateTile. \\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!this->HasValidItemsSource())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ErrorString + =)",
    "insertText": "TEXT(\"Please specify a ListItemsSource. \\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ErrorString.Len() > 0)"
  },
  {
    "label": "HAlign()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot .)",
    "insertText": "HAlign(HAlign_Center) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::FromString(ErrorString))"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "ConstructChildren(InArgs._ItemWidth, InArgs._ItemHeight, InArgs._ItemAlignment, TSharedPtr<SHeaderRow>(), InArgs._ExternalScrollbar, InArgs._Orientation, InArgs._OnTileViewScrolled, InArgs._ScrollBarStyle)"
  },
  {
    "label": "SetDragFocusCause()",
    "kind": "Method",
    "detail": "Function (this -> ScrollBar ->)",
    "insertText": "SetDragFocusCause(InArgs._ScrollbarDragFocusCause)"
  },
  {
    "label": "SetUserVisibility()",
    "kind": "Method",
    "detail": "Function (this -> ScrollBar ->)",
    "insertText": "SetUserVisibility(InArgs._ScrollbarVisibility)"
  },
  {
    "label": "SetScrollbarDisabledVisibility()",
    "kind": "Method",
    "detail": "Function (this -> ScrollBar ->)",
    "insertText": "SetScrollbarDisabledVisibility(InArgs._ScrollbarDisabledVisibility)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "AddMetadata(MakeShared<TTableViewMetadata<ItemType>>(this->SharedThis(this)))"
  },
  {
    "label": "STileView()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "STileView(ETableViewMode::Type InListMode = ETableViewMode::Tile ) : SListView<ItemType>( InListMode)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (} public : FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const TArrayView<const ItemType>& ItemsSourceRef = this ->)",
    "insertText": "GetItems()"
  },
  {
    "label": "GetNumItemsPerLine()",
    "kind": "Method",
    "detail": "Function (const int32 NumItemsPerLine =)",
    "insertText": "GetNumItemsPerLine()"
  },
  {
    "label": "CurSelectionIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "CurSelectionIndex(!TListTypeTraits<ItemType>::IsPtrValid(this->SelectorItem)) ? 0 : ItemsSourceRef.Find(TListTypeTraits<ItemType>::NullableItemTypeConvertToItemType(this->SelectorItem))"
  },
  {
    "label": "GetNavigationType()",
    "kind": "Method",
    "detail": "Function (int32 AttemptSelectIndex = - 1 ; const EUINavigation NavType = InNavigationEvent .)",
    "insertText": "GetNavigationType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AttemptSelectIndex = CurSelectionIndex - 1 ; } } else)",
    "insertText": "if((this->Orientation == Orient_Vertical && NavType == EUINavigation::Right) || (this->Orientation == Orient_Horizontal && NavType == EUINavigation::Down))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AttemptSelectIndex = CurSelectionIndex + 1 ; } })",
    "insertText": "if(ItemsSourceRef.IsValidIndex(AttemptSelectIndex) && this->bIsGamepadScrollingEnabled)"
  },
  {
    "label": "NavigationSelect()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "NavigationSelect(ItemsSourceRef[AttemptSelectIndex], InNavigationEvent)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (} } return SListView<ItemType)",
    "insertText": "OnNavigation(MyGeometry, InNavigationEvent)"
  },
  {
    "label": "ReGenerateItems()",
    "kind": "Method",
    "detail": "Function (} public : STableViewBase::FReGenerateResults)",
    "insertText": "ReGenerateItems(const FGeometry& MyGeometry)"
  },
  {
    "label": "ClearWidgets()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ClearWidgets()"
  },
  {
    "label": "GetTileDimensions()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions TileDimensions =)",
    "insertText": "GetTileDimensions()"
  },
  {
    "label": "AllottedDimensions()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "AllottedDimensions(this->Orientation, MyGeometry.GetLocalSize())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumItems = Items .)",
    "insertText": "Num()"
  },
  {
    "label": "NumItemsPaddedToFillLastLine()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumItemsPaddedToFillLastLine(NumItems % NumItemsPerLine != 0)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const double LinesPerScreen = AllottedDimensions . ScrollAxis / TileDimensions . ScrollAxis ; const double EndOfListOffset = NumItemsPaddedToFillLastLine - NumItemsPerLine* LinesPerScreen ; const double ClampedScrollOffset =)",
    "insertText": "Clamp(this->CurrentScrollOffset, 0.0, EndOfListOffset)"
  },
  {
    "label": "GetAccumulatedLayoutTransform()",
    "kind": "Method",
    "detail": "Function (const float LayoutScaleMultiplier = MyGeometry .)",
    "insertText": "GetAccumulatedLayoutTransform().GetScale()"
  },
  {
    "label": "DimensionsUsedSoFar()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "DimensionsUsedSoFar(this->Orientation)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex =)",
    "insertText": "Max(0, FMath::FloorToInt32(ClampedScrollOffset / NumItemsPerLine) * NumItemsPerLine)"
  },
  {
    "label": "OnBeginGenerationPass()",
    "kind": "Method",
    "detail": "Function (this -> WidgetGenerator .)",
    "insertText": "OnBeginGenerationPass()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bIsAtEndOfList = false ; bool bHasFilledAvailableArea = false ; bool bNewLine = true ; bool bFirstLine = true ; double NumLinesShownOnScreen = 0 ;)",
    "insertText": "for(int32 ItemIndex = StartIndex; !bHasFilledAvailableArea && ItemIndex < NumItems; ++ItemIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ItemType& CurItem = Items [ ItemIndex ] ;)",
    "insertText": "if(bNewLine)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bNewLine = false ; float LineFraction = 1 . f ;)",
    "insertText": "if(bFirstLine)"
  },
  {
    "label": "LineFraction()",
    "kind": "Method",
    "detail": "Function (bFirstLine = false ;)",
    "insertText": "LineFraction(float)FMath::Fractional(ClampedScrollOffset / NumItemsPerLine)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} DimensionsUsedSoFar . ScrollAxis + = TileDimensions . ScrollAxis* LineFraction ;)",
    "insertText": "if(DimensionsUsedSoFar.ScrollAxis > AllottedDimensions.ScrollAxis)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumLinesShownOnScreen + =)",
    "insertText": "Max(1.0f - ((DimensionsUsedSoFar.ScrollAxis - AllottedDimensions.ScrollAxis) / TileDimensions.ScrollAxis), 0.0f)"
  },
  {
    "label": "GenerateWidgetForItem()",
    "kind": "Method",
    "detail": "Function (} else { NumLinesShownOnScreen + = LineFraction ; } } SListView<ItemType)",
    "insertText": "GenerateWidgetForItem(CurItem, ItemIndex, StartIndex, LayoutScaleMultiplier)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DimensionsUsedSoFar . LineAxis + = TileDimensions . LineAxis ; bIsAtEndOfList = ItemIndex> = NumItems - 1 ;)",
    "insertText": "if(DimensionsUsedSoFar.LineAxis + TileDimensions.LineAxis > AllottedDimensions.LineAxis)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DimensionsUsedSoFar . LineAxis = 0 ; bNewLine = true ; })",
    "insertText": "if(bIsAtEndOfList || bNewLine)"
  },
  {
    "label": "OnEndGenerationPass()",
    "kind": "Method",
    "detail": "Function (const float FloatPrecisionOffset = 0 . 0 0 1 f ; bHasFilledAvailableArea = DimensionsUsedSoFar . ScrollAxis> AllottedDimensions . ScrollAxis + FloatPrecisionOffset ; } } this -> WidgetGenerator .)",
    "insertText": "OnEndGenerationPass()"
  },
  {
    "label": "TotalGeneratedLineAxisSize()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "TotalGeneratedLineAxisSize(float)(FMath::CeilToFloat(NumLinesShownOnScreen) * TileDimensions.ScrollAxis)"
  },
  {
    "label": "FReGenerateResults()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FReGenerateResults(0, 0, 0, false)"
  },
  {
    "label": "GetNumItemsBeingObserved()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumItemsBeingObserved()"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const int32 NumItemsBeingObserved = this ->)",
    "insertText": "GetItems().Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumEmptySpacesAtEnd = 0 ;)",
    "insertText": "if(NumItemsPerLine > 0)"
  },
  {
    "label": "NumItemsPerLine()",
    "kind": "Method",
    "detail": "Function (NumEmptySpacesAtEnd =)",
    "insertText": "NumItemsPerLine(NumItemsBeingObserved % NumItemsPerLine)"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ScrollBy(const FGeometry& MyGeometry, float ScrollByAmountInSlateUnits, EAllowOverscroll InAllowOverscroll)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bWholeListVisible = this -> DesiredScrollOffset = = 0&& this -> bWasAtEndOfList ;)",
    "insertText": "if(InAllowOverscroll == EAllowOverscroll::Yes && this->Overscroll.ShouldApplyOverscroll(this->DesiredScrollOffset == 0, this->bWasAtEndOfList, ScrollByAmountInSlateUnits))"
  },
  {
    "label": "ScrollByAmountInSlateUnits()",
    "kind": "Method",
    "detail": "Function (const float UnclampedScrollDelta =)",
    "insertText": "ScrollByAmountInSlateUnits(float)GetNumItemsPerLine()"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (const float ActuallyScrolledBy = this -> Overscroll .)",
    "insertText": "ScrollBy(MyGeometry, UnclampedScrollDelta)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return ActuallyScrolledBy ; } else)",
    "insertText": "if(!bWholeListVisible)"
  },
  {
    "label": "DesiredScrollOffset()",
    "kind": "Method",
    "detail": "Function (const double NewScrollOffset = this ->)",
    "insertText": "DesiredScrollOffset((ScrollByAmountInSlateUnits * (float)GetNumItemsPerLine()) / GetTileDimensions().ScrollAxis)"
  },
  {
    "label": "PanelDimensions()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "PanelDimensions(this->Orientation, this->PanelGeometryLastTick.GetLocalSize())"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 NumItemsPerLine = TileDimensions . LineAxis> 0 ?)",
    "insertText": "FloorToInt(PanelDimensions.LineAxis / TileDimensions.LineAxis)"
  },
  {
    "label": "ScrollIntoView()",
    "kind": "Method",
    "detail": "Function (} SListView<ItemType>::EScrollIntoViewResult)",
    "insertText": "ScrollIntoView(const FGeometry& ListViewGeometry)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const int32 IndexOfItem = this ->)",
    "insertText": "GetItems().Find(TListTypeTraits<ItemType>::NullableItemTypeConvertToItemType(this->ItemToScrollIntoView))"
  },
  {
    "label": "FTableViewDimensions()",
    "kind": "Method",
    "detail": "Function (const float NumLinesInView =)",
    "insertText": "FTableViewDimensions(this->Orientation, ListViewGeometry.GetLocalSize()).ScrollAxis / GetTileDimensions()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumLiveWidgets = this -> LastGenerateResults . ExactNumLinesOnScreen ;)",
    "insertText": "if(NumLiveWidgets == 0)"
  },
  {
    "label": "GetTargetScrollOffset()",
    "kind": "Method",
    "detail": "Function (const double ScrollLineOffset = this ->)",
    "insertText": "GetTargetScrollOffset()"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 LineOfItem =)",
    "insertText": "FloorToInt((float)IndexOfItem / (float)NumItemsPerLine)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (const int32 NumFullLinesInView =)",
    "insertText": "FloorToInt32(ScrollLineOffset + NumLinesInView) - FMath::CeilToInt32(ScrollLineOffset)"
  },
  {
    "label": "FloorToDouble()",
    "kind": "Method",
    "detail": "Function (const double MinDisplayedLine = this -> bNavigateOnScrollIntoView ?)",
    "insertText": "FloorToDouble(ScrollLineOffset) : FMath::CeilToDouble(ScrollLineOffset)"
  },
  {
    "label": "CeilToDouble()",
    "kind": "Method",
    "detail": "Function (const double MaxDisplayedLine = this -> bNavigateOnScrollIntoView ?)",
    "insertText": "CeilToDouble(ScrollLineOffset + NumFullLinesInView) : FMath::FloorToDouble(ScrollLineOffset + NumFullLinesInView)"
  },
  {
    "label": "NewLineOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "NewLineOffset(float)"
  },
  {
    "label": "NewLineOffset()",
    "kind": "Method",
    "detail": "Function (NewLineOffset - = NumLinesInView* 0 . 5 f ; double NewScrollOffset =)",
    "insertText": "NewLineOffset(double)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (NewScrollOffset =)",
    "insertText": "Clamp(NewScrollOffset, 0., (double)GetNumItemsBeingObserved() - (double)NumItemsPerLine * NumLinesInView)"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetScrollOffset((float)NewScrollOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(this->bNavigateOnScrollIntoView)"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetScrollOffset((float)(LineOfItem * NumItemsPerLine) - (this->FixedLineScrollOffset.IsSet() && LineOfItem > 0 ? 0.f : this->NavigationScrollOffset))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LineOfItem == MaxDisplayedLine)"
  },
  {
    "label": "NewLineOffset()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "NewLineOffset(float)LineOfItem - NumLinesInView + 1.f + (this->FixedLineScrollOffset.IsSet() ? 0.f : this->NavigationScrollOffset)"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetScrollOffset(NewLineOffset * (float)NumItemsPerLine)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (this -> ItemToNotifyWhenInView = this -> ItemToScrollIntoView ; } TListTypeTraits<ItemType)",
    "insertText": "ResetPtr(this->ItemToScrollIntoView)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TListTypeTraits<ItemType>::IsPtrValid(this->ItemToNotifyWhenInView))"
  },
  {
    "label": "WidgetFromItem()",
    "kind": "Method",
    "detail": "Function (const bool bHasWidgetForItem = this ->)",
    "insertText": "WidgetFromItem(TListTypeTraits<ItemType>::NullableItemTypeConvertToItemType(this->ItemToNotifyWhenInView)).IsValid()"
  }
]