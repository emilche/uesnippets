[
  {
    "label": "PointTriangleDistance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; double)",
    "insertText": "PointTriangleDistance(const FVector3d& x0, const FVector3d& x1, const FVector3d& x2, const FVector3d& x3)"
  },
  {
    "label": "PointTriangleDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PointTriangleDistance(const FVector3f& x0, const FVector3f& x1, const FVector3f& x2, const FVector3f& x3)"
  },
  {
    "label": "PointInTriangle2d()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointInTriangle2d(double X0, double Y0, double X1, double Y1, double X2, double Y2, double X3, double Y3, double& A, double& B, double& C)"
  },
  {
    "label": "PointSegmentDistance()",
    "kind": "Method",
    "detail": "Function (template<RealType> RealType)",
    "insertText": "PointSegmentDistance(const TVector<RealType>& x0, const TVector<RealType>& x1, const TVector<RealType>& x2)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> DX = x2 - x1 ; RealType m2 = DX .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "s12()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "s12(DX.Dot(x2 - x0) / m2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s12 = 0 ; } else)",
    "insertText": "if(s12 > 1)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (s12 = 1 ; } return)",
    "insertText": "Distance(x0, s12*x1 + (1.0 - s12)*x2)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (} template<RealType> int)",
    "insertText": "Orientation(RealType X1, RealType Y1, RealType X2, RealType Y2, RealType& TwiceSignedArea)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TwiceSignedArea = Y1* X2 - X1* Y2 ;)",
    "insertText": "if(TwiceSignedArea > 0)"
  }
]