[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "PROFILEVISUALIZER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROFILEVISUALIZER_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" VisualizerEvents . h \" class FPaintArgs ; class FSlateWindowElementList ; struct FSlateBrush ; class SGraphBar : public SLeafWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGeometryChanged, FGeometry)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (typedef TSlateDelegates<TSharedPtr<FVisualizerEvent>>::FOnSelectionChanged FOnSelectionChanged ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphBar ) : _OnSelectionChanged()"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FOnGeometryChanged, OnGeometryChanged ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SetEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvents(const FVisualizerEventsArray& InEvents, double InStartTime, double InTotalTime)"
  },
  {
    "label": "SetZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZoom(float InZoom)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Zoom =)",
    "insertText": "Max(InZoom, 1.0f)"
  },
  {
    "label": "SetOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOffset(float InOffset)"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (Offset = InOffset ; } float)",
    "insertText": "GetOffset()"
  },
  {
    "label": "EventStart()",
    "kind": "Method",
    "detail": "Function (const double SubPixelMinSize = 3 . 0 ; const double)",
    "insertText": "EventStart(InEvent->Start - StartTime)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const double EventDuration = InEvent -> Duration / TotalTime ; const double ClampedStart =)",
    "insertText": "Clamp(Offset + EventStart * Zoom, 0.0, 1.0)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const double ClampedEnd =)",
    "insertText": "Clamp(Offset + (EventStart + EventDuration) * Zoom, 0.0, 1.0)"
  },
  {
    "label": "OutStartX()",
    "kind": "Method",
    "detail": "Function (const double ClampedSize = ClampedEnd - ClampedStart ;)",
    "insertText": "OutStartX(float)( InGeometry.GetLocalSize().X * ClampedStart)"
  },
  {
    "label": "OutStartX()",
    "kind": "Method",
    "detail": "Function (OutEndX =)",
    "insertText": "OutStartX(float)FMath::Max( InGeometry.GetLocalSize().X * ClampedSize, ClampedEnd > 0.0f ? SubPixelMinSize : 0.0)"
  }
]