[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FDynamicFlagArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicFlagArray"
  },
  {
    "label": "FSparseOctreeCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparseOctreeCell"
  },
  {
    "label": "FSparseDynamicOctree3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSparseDynamicOctree3"
  },
  {
    "label": "FStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatistics"
  },
  {
    "label": "FDynamicFlagArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / ParallelFor . h \" # include \" BoxTypes . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / StaticArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" GeometryTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" IntVectorTypes . h \" # include \" Intersection / IntrRay3AxisAlignedBox3 . h \" # include \" Math / NumericLimits . h \" # include \" Math / Ray . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" MathUtil . h \" # include \" Misc / AssertionMacros . h \" # include \" Spatial / SparseGrid3 . h \" # include \" Util / DynamicVector . h \" # include \" Util / RefCountVector . h \" # include \" Util / SmallListSet . h \" template<FuncType> class TFunctionRef ; namespace UE { namespace Geometry { class FDynamicFlagArray { public : TBitArray<> BitArray ; uint32 MaxIndex = 0 ; int32 GrowChunkSize = 0 xFFF ;)",
    "insertText": "FDynamicFlagArray()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "Init(false, GrowChunkSize)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (MaxIndex = BitArray .)",
    "insertText": "Num()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(uint32 BitIndex, bool bValue)"
  },
  {
    "label": "ToAdd()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ToAdd(BitIndex - MaxIndex + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "Add(false, ToAdd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BitArray [ BitIndex ] = bValue ; } else)",
    "insertText": "if(BitIndex < MaxIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BitArray [ BitIndex ] = bValue ; } } bool)",
    "insertText": "Get(uint32 BitIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSparseOctreeCell { uint32 InvalidID = TNumericLimits<uint32)",
    "insertText": "Max()"
  },
  {
    "label": "FSparseOctreeCell()",
    "kind": "Method",
    "detail": "Function (uint32 CellID ; uint8 Level ; FVector3i Index ; TStaticArray<uint32,8> Children ;)",
    "insertText": "FSparseOctreeCell() : CellID(InvalidID), Level(0), Index(FVector3i::Zero())"
  },
  {
    "label": "FSparseOctreeCell()",
    "kind": "Method",
    "detail": "Function (Children [ 0 ] = Children [ 1 ] = Children [ 2 ] = Children [ 3 ] = InvalidID ; Children [ 4 ] = Children [ 5 ] = Children [ 6 ] = Children [ 7 ] = InvalidID ; })",
    "insertText": "FSparseOctreeCell(uint8 LevelIn, const FVector3i& IndexIn) : CellID(InvalidID), Level(LevelIn), Index(IndexIn)"
  },
  {
    "label": "IsExistingCell()",
    "kind": "Method",
    "detail": "Function (Children [ 0 ] = Children [ 1 ] = Children [ 2 ] = Children [ 3 ] = InvalidID ; Children [ 4 ] = Children [ 5 ] = Children [ 6 ] = Children [ 7 ] = InvalidID ; } bool)",
    "insertText": "IsExistingCell()"
  },
  {
    "label": "IndexOffset()",
    "kind": "Method",
    "detail": "Function (FVector3i)",
    "insertText": "IndexOffset(((ChildIndex & 1) != 0) ? 1 : 0, ((ChildIndex & 2) != 0) ? 1 : 0, ((ChildIndex & 4) != 0) ? 1 : 0)"
  },
  {
    "label": "SetChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChild(uint32 ChildIndex, const FSparseOctreeCell& ChildCell)"
  },
  {
    "label": "GetMaxTreeDepth()",
    "kind": "Method",
    "detail": "Function (Children [ ChildIndex ] = ChildCell . CellID ; } } ; class FSparseDynamicOctree3 { public : double RootDimension = 1 0 0 0 . 0 ; double MaxExpandFactor = 0 . 2 5 ; uint32 MaxSupportedTreeDepth = 0 x1F ; int)",
    "insertText": "GetMaxTreeDepth()"
  },
  {
    "label": "MaxTreeDepthIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxTreeDepthIn(int32)"
  },
  {
    "label": "ContainsObject()",
    "kind": "Method",
    "detail": "Function (} MaxTreeDepth = MaxTreeDepthIn ; } protected : int MaxTreeDepth = 1 0 ; public : bool)",
    "insertText": "ContainsObject(int32 ObjectID)"
  },
  {
    "label": "InsertObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertObject(int32 ObjectID, const FAxisAlignedBox3d& Bounds)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveObject(int32 ObjectID)"
  },
  {
    "label": "ReinsertObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReinsertObject(int32 ObjectID, const FAxisAlignedBox3d& NewBounds, uint32 CellIDHint = InvalidCellID)"
  },
  {
    "label": "CheckIfObjectNeedsReinsert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfObjectNeedsReinsert(int32 ObjectID, const FAxisAlignedBox3d& NewBounds, uint32& CellIDOut)"
  },
  {
    "label": "FindNearestHitObject()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNearestHitObject(const FRay3d& Ray, TFunctionRef<FAxisAlignedBox3d(int)> GetObjectBoundsFunc, TFunctionRef<double(int, const FRay3d&)> HitObjectDistFunc, double MaxDistance = TNumericLimits<double>::Max())"
  },
  {
    "label": "ContainmentQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContainmentQuery(const FVector3d& Point, TFunctionRef<void(int)> ObjectIDFunc)"
  },
  {
    "label": "ContainmentQueryCancellable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainmentQueryCancellable(const FVector3d& Point, TFunctionRef<bool(int)> ObjectIDFunc)"
  },
  {
    "label": "RangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeQuery(const FAxisAlignedBox3d& Bounds, TFunctionRef<void(int)> ObjectIDFunc)"
  },
  {
    "label": "RangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeQuery(const FAxisAlignedBox3d& Bounds, TArray<int>& ObjectIDsOut)"
  },
  {
    "label": "ParallelRangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelRangeQuery(const FAxisAlignedBox3d& Bounds, TArray<int>& ObjectIDsOut)"
  },
  {
    "label": "ParallelOverlapAnyQuery()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParallelOverlapAnyQuery(const FAxisAlignedBox3d& ShapeBounds, TFunctionRef<bool(int32)> ObjectOverlapFn, TFunctionRef<bool(const FAxisAlignedBox3d&)> BoundsOverlapFn)"
  },
  {
    "label": "ParallelOverlapAnyQuery()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParallelOverlapAnyQuery(const FAxisAlignedBox3d& ShapeBounds, TFunctionRef<bool(int32)> ObjectOverlapFn)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValidity(TFunctionRef<bool(int)> IsValidObjectIDFunc, TFunctionRef<FAxisAlignedBox3d(int)> GetObjectBoundsFunc, EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check, bool bVerbose = false, bool bFailOnMissingObjects = false)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (struct FStatistics { int32 Levels ; TArray<int32> LevelBoxCounts ; TArray<int32> LevelObjCounts ; int32 SpillObjCount ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ComputeStatistics()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ComputeStatistics(FStatistics& StatsOut)"
  },
  {
    "label": "GetCellWidth()",
    "kind": "Method",
    "detail": "Function (protected : uint32 InvalidCellID = FSparseOctreeCell::InvalidID ; uint32 SpillCellID = InvalidCellID - 1 ; FRefCountVector CellRefCounts ; TDynamicVector<FSparseOctreeCell> Cells ; FSmallListSet CellObjectLists ; TSet<int32> SpillObjectSet ; TDynamicVector<uint32> ObjectIDToCellMap ; FDynamicFlagArray ValidObjectIDs ; TSparseGrid3<uint32> RootCells ; double)",
    "insertText": "GetCellWidth(uint32 Level)"
  },
  {
    "label": "FAxisAlignedBox3d()",
    "kind": "Method",
    "detail": "Function (CellWidth + = 2 . 0* ExpandDelta ; return)",
    "insertText": "FAxisAlignedBox3d(FVector3d(MinX, MinY, MinZ), FVector3d(MinX + CellWidth, MinY + CellWidth, MinZ + CellWidth))"
  },
  {
    "label": "GetCellBox()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3d)",
    "insertText": "GetCellBox(const FSparseOctreeCell& Cell, double ExpandFactor = 0)"
  },
  {
    "label": "GetCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetCellCenter(const FSparseOctreeCell& Cell)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (CellWidth* = 0 . 5 ; return)",
    "insertText": "FVector3d(MinX + CellWidth, MinY + CellWidth, MinZ + CellWidth)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "PointToIndex(uint32 Level, const FVector3d& Position)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "i(int32)FMathd::Floor(Position.X / CellWidth)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "j(int32)FMathd::Floor(Position.Y / CellWidth)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "k(int32)FMathd::Floor(Position.Z / CellWidth)"
  },
  {
    "label": "ToChildCellIndex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ToChildCellIndex(const FSparseOctreeCell& Cell, const FVector3d& Position)"
  },
  {
    "label": "GetCellCenter()",
    "kind": "Method",
    "detail": "Function (FVector3d Center =)",
    "insertText": "GetCellCenter(Cell)"
  },
  {
    "label": "ChildIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ChildIndex((Position.X < Center.X) ? 0 : 1) + ((Position.Y < Center.Y) ? 0 : 2) + ((Position.Z < Center.Z) ? 0 : 4)"
  },
  {
    "label": "GetCellBox()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d CellBox =)",
    "insertText": "GetCellBox(Cell, MaxExpandFactor)"
  },
  {
    "label": "GetCellForObject()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCellForObject(int32 ObjectID)"
  },
  {
    "label": "Insert_Spill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_Spill(int32 ObjectID, const FAxisAlignedBox3d& Bounds)"
  },
  {
    "label": "Insert_NewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewRoot(int32 ObjectID, const FAxisAlignedBox3d& Bounds, FSparseOctreeCell NewRootCell)"
  },
  {
    "label": "Insert_ToCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_ToCell(int32 ObjectID, const FAxisAlignedBox3d& Bounds, const FSparseOctreeCell& ExistingCell)"
  },
  {
    "label": "Insert_NewChildCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert_NewChildCell(int32 ObjectID, const FAxisAlignedBox3d& Bounds, int ParentCellID, FSparseOctreeCell NewChildCell, int ChildIdx)"
  },
  {
    "label": "FindNearestRayCellIntersection()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FindNearestRayCellIntersection(const FSparseOctreeCell& Cell, const FRay3d& Ray)"
  },
  {
    "label": "BranchRangeQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchRangeQuery(const FSparseOctreeCell* ParentCell, const FAxisAlignedBox3d& Bounds, TArray<int>& ObjectIDs)"
  },
  {
    "label": "BranchCustomOverlapAnyQuery()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "BranchCustomOverlapAnyQuery(const FSparseOctreeCell* ParentCell, const FAxisAlignedBox3d& Bounds, TFunctionRef<bool(int32)> ObjectOverlapFn, TFunctionRef<bool(const FAxisAlignedBox3d&)> BoundsOverlapFn)"
  },
  {
    "label": "InitializeQueryQueue()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparseOctreeCell*,TInlineAllocator<3 2>>)",
    "insertText": "InitializeQueryQueue(const FVector3d& Point)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparseOctreeCell*,TInlineAllocator<3 2>> Queue ; int32 MinCountForRangeQuery = 1 0 ;)",
    "insertText": "if(RootCells.GetCount() > MinCountForRangeQuery)"
  },
  {
    "label": "RootBoundExpand()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "RootBoundExpand(RootDimension * MaxExpandFactor)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMinIndex =)",
    "insertText": "PointToIndex(0, Point - RootBoundExpand)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMaxIndex =)",
    "insertText": "PointToIndex(0, Point + RootBoundExpand)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (FVector3i QuerySize = RootMaxIndex - RootMinIndex +)",
    "insertText": "FVector3i(1, 1, 1)"
  },
  {
    "label": "RangeIteration()",
    "kind": "Method",
    "detail": "Function (RootCells .)",
    "insertText": "RangeIteration(RootMinIndex, RootMaxIndex, [&](uint32 RootCellID) { Queue.Add(&Cells[RootCellID]); })"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMinIndex =)",
    "insertText": "PointToIndex(0, Bounds.Min - RootBoundExpand)"
  },
  {
    "label": "PointToIndex()",
    "kind": "Method",
    "detail": "Function (FVector3i RootMaxIndex =)",
    "insertText": "PointToIndex(0, Bounds.Max + RootBoundExpand)"
  }
]