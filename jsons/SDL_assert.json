[
  {
    "label": "SDL_AssertData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_AssertData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_assert_h_ # define SDL_assert_h_ # include \" SDL_stdinc . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif # ifndef SDL_ASSERT_LEVEL # ifdef SDL_DEFAULT_ASSERT_LEVEL # define SDL_ASSERT_LEVEL SDL_DEFAULT_ASSERT_LEVEL # elif)",
    "insertText": "defined(_DEBUG) || defined(DEBUG) || \\ (defined(__GNUC__) && !defined(__OPTIMIZE__)) #define SDL_ASSERT_LEVEL 2 #else #define SDL_ASSERT_LEVEL 1 #endif #endif #if defined(_MSC_VER) extern void __cdecl __debugbreak(void)"
  },
  {
    "label": "SDL_TriggerBreakpoint()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_TriggerBreakpoint() __debugbreak() #elif _SDL_HAS_BUILTIN(__builtin_debugtrap) #define SDL_TriggerBreakpoint() __builtin_debugtrap() #elif ( (!defined(__NACL__)) && ((defined(__GNUC__) || defined(__clang__)) && (defined(__i386__) || defined(__x86_64__))) ) #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( \"int $3\\n\\t\" ) #elif (defined(__GNUC__) || defined(__clang__)) && defined(__riscv) #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( \"ebreak\\n\\t\" ) #elif ( defined(__APPLE__) && (defined(__arm64__) || defined(__aarch64__)) ) #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( \"brk #22\\n\\t\" ) #elif defined(__APPLE__) && defined(__arm__) #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( \"bkpt #22\\n\\t\" ) #elif defined(__386__) && defined(__WATCOMC__) #define SDL_TriggerBreakpoint()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (_asm { int 0 x03 } } # elif)",
    "insertText": "defined(HAVE_SIGNAL_H) && !defined(__WATCOMC__) #include <signal.h> #define SDL_TriggerBreakpoint() raise(SIGTRAP) #else #define SDL_TriggerBreakpoint() #endif #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) # define SDL_FUNCTION __func__ #elif ((defined(__GNUC__) && (__GNUC__ >= 2)) || defined(_MSC_VER) || defined (__WATCOMC__)) # define SDL_FUNCTION __FUNCTION__ #else # define SDL_FUNCTION \"???\" #endif #define SDL_FILE __FILE__ #define SDL_LINE __LINE__ #ifdef _MSC_VER #define SDL_NULL_WHILE_LOOP_CONDITION (0,0) #else #define SDL_NULL_WHILE_LOOP_CONDITION (0) #endif #define SDL_disabled_assert(condition)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(SDL_NULL_WHILE_LOOP_CONDITION)"
  },
  {
    "label": "SDL_ReportAssertion()",
    "kind": "Method",
    "detail": "Function (SDL_ASSERTION_RETRY,SDL_ASSERTION_BREAK,SDL_ASSERTION_ABORT,SDL_ASSERTION_IGNORE,SDL_ASSERTION_ALWAYS_IGNORE } SDL_AssertState ; typedef struct SDL_AssertData { int always_ignore ; unsigned int trigger_count ; const char* condition ; const char* filename ; int linenum ; const char* function ; const struct SDL_AssertData* next ; } SDL_AssertData ; DECLSPEC SDL_AssertState SDLCALL)",
    "insertText": "SDL_ReportAssertion(SDL_AssertData *, const char *, const char *, int) #if defined(__clang__) #if __has_feature(attribute_analyzer_noreturn) __attribute__((analyzer_noreturn))"
  },
  {
    "label": "SDL_enabled_assert()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_enabled_assert(condition)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(!(condition))"
  },
  {
    "label": "SDL_ReportAssertion()",
    "kind": "Method",
    "detail": "Function (\\ struct SDL_AssertData sdl_assert_data = { 0,0,# condition,0,0,0,0 } ; \\ const SDL_AssertState sdl_assert_state =)",
    "insertText": "SDL_ReportAssertion(&sdl_assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(sdl_assert_state == SDL_ASSERTION_RETRY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ continue ; \\ } else)",
    "insertText": "if(sdl_assert_state == SDL_ASSERTION_BREAK)"
  },
  {
    "label": "SDL_TriggerBreakpoint()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SDL_TriggerBreakpoint()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ break ; \\ } \\ })",
    "insertText": "while(SDL_NULL_WHILE_LOOP_CONDITION) #if SDL_ASSERT_LEVEL == 0 # define SDL_assert(condition) SDL_disabled_assert(condition) # define SDL_assert_release(condition) SDL_disabled_assert(condition) # define SDL_assert_paranoid(condition) SDL_disabled_assert(condition) #elif SDL_ASSERT_LEVEL == 1 # define SDL_assert(condition) SDL_disabled_assert(condition) # define SDL_assert_release(condition) SDL_enabled_assert(condition) # define SDL_assert_paranoid(condition) SDL_disabled_assert(condition) #elif SDL_ASSERT_LEVEL == 2 # define SDL_assert(condition) SDL_enabled_assert(condition) # define SDL_assert_release(condition) SDL_enabled_assert(condition) # define SDL_assert_paranoid(condition) SDL_disabled_assert(condition) #elif SDL_ASSERT_LEVEL == 3 # define SDL_assert(condition) SDL_enabled_assert(condition) # define SDL_assert_release(condition) SDL_enabled_assert(condition) # define SDL_assert_paranoid(condition) SDL_enabled_assert(condition) #else # error Unknown assertion level. #endif #define SDL_assert_always(condition) SDL_enabled_assert(condition) typedef SDL_AssertState (SDLCALL *SDL_AssertionHandler)( const SDL_AssertData* data, void* userdata)"
  },
  {
    "label": "SDL_SetAssertionHandler()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_SetAssertionHandler(SDL_AssertionHandler handler, void *userdata)"
  },
  {
    "label": "SDL_GetDefaultAssertionHandler()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_AssertionHandler SDLCALL)",
    "insertText": "SDL_GetDefaultAssertionHandler(void)"
  },
  {
    "label": "SDL_GetAssertionHandler()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_AssertionHandler SDLCALL)",
    "insertText": "SDL_GetAssertionHandler(void **puserdata)"
  },
  {
    "label": "SDL_GetAssertionReport()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const SDL_AssertData* SDLCALL)",
    "insertText": "SDL_GetAssertionReport(void)"
  },
  {
    "label": "SDL_ResetAssertionReport()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_ResetAssertionReport(void)"
  }
]