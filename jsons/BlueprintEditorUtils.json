[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ALevelScriptActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelScriptActor"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintGeneratedClass"
  },
  {
    "label": "USimpleConstructionScript",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USimpleConstructionScript"
  },
  {
    "label": "UK2Node_Event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Event"
  },
  {
    "label": "UK2Node_Variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Variable"
  },
  {
    "label": "ULevelScriptBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelScriptBlueprint"
  },
  {
    "label": "USCS_Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USCS_Node"
  },
  {
    "label": "UTimelineTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTimelineTemplate"
  },
  {
    "label": "FBlueprintCookedComponentInstancingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintCookedComponentInstancingData"
  },
  {
    "label": "FComponentKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentKey"
  },
  {
    "label": "UAnimGraphNode_Root",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Root"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FBPInterfaceDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBPInterfaceDescription"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UK2Node_CallFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CallFunction"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "FFunctionFromNodeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionFromNodeHelper"
  },
  {
    "label": "FBasePinChangeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasePinChangeHelper"
  },
  {
    "label": "UK2Node_Tunnel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Tunnel"
  },
  {
    "label": "UK2Node_MacroInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_MacroInstance"
  },
  {
    "label": "UK2Node_CallFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CallFunction"
  },
  {
    "label": "UK2Node_BaseMCDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_BaseMCDelegate"
  },
  {
    "label": "UK2Node_CreateDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CreateDelegate"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "FParamsChangedHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParamsChangedHelper"
  },
  {
    "label": "UK2Node_Tunnel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Tunnel"
  },
  {
    "label": "UK2Node_MacroInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_MacroInstance"
  },
  {
    "label": "UK2Node_CallFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CallFunction"
  },
  {
    "label": "UK2Node_BaseMCDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_BaseMCDelegate"
  },
  {
    "label": "UK2Node_CreateDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CreateDelegate"
  },
  {
    "label": "FUCSComponentId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUCSComponentId"
  },
  {
    "label": "UK2Node_AddComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_AddComponent"
  },
  {
    "label": "FCompilerRelevantNodeLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompilerRelevantNodeLink"
  },
  {
    "label": "FBlueprintEditorUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditorUtils"
  },
  {
    "label": "meta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meta"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "on",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "on"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "MinNodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MinNodeType"
  },
  {
    "label": "ArrayClassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayClassType"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "generated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generated"
  },
  {
    "label": "stored",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "stored"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "created",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "created"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "variable"
  },
  {
    "label": "UK2Node_FunctionEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FunctionEntry"
  },
  {
    "label": "UK2Node_FunctionEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FunctionEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "UTimelineTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTimelineTemplate"
  },
  {
    "label": "UTimelineTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTimelineTemplate"
  },
  {
    "label": "UK2Node_Timeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Timeline"
  },
  {
    "label": "ULevelScriptBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelScriptBlueprint"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "types"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "types"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "UK2Node_FunctionResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FunctionResult"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "display",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "display"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "disables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "disables"
  },
  {
    "label": "FBlueprintDuplicationScopeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintDuplicationScopeFlags"
  },
  {
    "label": "EFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlags"
  },
  {
    "label": "FMakeClassSpawnableOnScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMakeClassSpawnableOnScope"
  },
  {
    "label": "FFunctionFromNodeHelper()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FFunctionFromNodeHelper(const UObject* Obj)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast(UBlueprint* InBlueprint, class UK2Node_EditablePinBase* InTargetNode, UEdGraph* Graph)"
  },
  {
    "label": "FUCSComponentId()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FUCSComponentId(const class UK2Node_AddComponent* UCSNode)"
  },
  {
    "label": "RefreshAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "ReconstructAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructAllNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "RefreshExternalBlueprintDependencyNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshExternalBlueprintDependencyNodes(UBlueprint* Blueprint, UStruct* RefreshOnlyChild = NULL)"
  },
  {
    "label": "RefreshGraphNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshGraphNodes(const UEdGraph* Graph)"
  },
  {
    "label": "ReplaceDeprecatedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceDeprecatedNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "PreloadMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadMembers(UObject* InObject)"
  },
  {
    "label": "PreloadConstructionScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadConstructionScript(UBlueprint* Blueprint)"
  },
  {
    "label": "PreloadConstructionScript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadConstructionScript(USimpleConstructionScript* SimpleConstructionScript)"
  },
  {
    "label": "PatchNewCDOIntoLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchNewCDOIntoLinker(UObject* CDO, FLinkerLoad* Linker, int32 ExportIndex, FUObjectSerializeContext* InLoadContext)"
  },
  {
    "label": "RemoveStaleFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaleFunctions(UBlueprintGeneratedClass* Class, UBlueprint* Blueprint)"
  },
  {
    "label": "RefreshVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshVariables(UBlueprint* Blueprint)"
  },
  {
    "label": "PreloadBlueprintSpecificData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadBlueprintSpecificData(UBlueprint* Blueprint)"
  },
  {
    "label": "LinkExternalDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkExternalDependencies(UBlueprint* Blueprint)"
  },
  {
    "label": "PatchCDOSubobjectsIntoExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchCDOSubobjectsIntoExport(UObject* PreviousCDO, UObject* NewCDO)"
  },
  {
    "label": "RecreateClassMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateClassMetaData(UBlueprint* Blueprint, UClass* Class, bool bRemoveExistingMetaData)"
  },
  {
    "label": "PropagateParentBlueprintDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateParentBlueprintDefaults(UClass* ClassToPropagate)"
  },
  {
    "label": "PostDuplicateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicateBlueprint(UBlueprint* Blueprint, bool bDuplicateForPIE)"
  },
  {
    "label": "RemoveGeneratedClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeneratedClasses(UBlueprint* Blueprint)"
  },
  {
    "label": "PropertyStillExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyStillExists(FProperty* Property)"
  },
  {
    "label": "UpdateDelegatesInBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelegatesInBlueprint(UBlueprint* Blueprint)"
  },
  {
    "label": "ShouldRegenerateBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRegenerateBlueprint(UBlueprint* Blueprint)"
  },
  {
    "label": "IsCompileOnLoadDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompileOnLoadDisabled(UBlueprint* Blueprint)"
  },
  {
    "label": "MarkBlueprintAsStructurallyModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlueprintAsStructurallyModified(UBlueprint* Blueprint)"
  },
  {
    "label": "IsGraphNameUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphNameUnique(UObject* InOuter, const FName& InName)"
  },
  {
    "label": "CreateMatchingFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMatchingFunction(UK2Node_CallFunction* InNode, TSubclassOf<class UEdGraphSchema> InSchemaClass)"
  },
  {
    "label": "IsFunctionConvertableToEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionConvertableToEvent(UBlueprint* const BlueprintObj, UFunction* const Function)"
  },
  {
    "label": "GetOverrideFunctionClass()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "GetOverrideFunctionClass(UBlueprint* Blueprint, const FName FuncName, UFunction** OutFunction = nullptr)"
  },
  {
    "label": "AddMacroGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMacroGraph(UBlueprint* Blueprint, class UEdGraph* Graph,  bool bIsUserCreated, UClass* SignatureFromClass)"
  },
  {
    "label": "AddInterfaceGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInterfaceGraph(UBlueprint* Blueprint, class UEdGraph* Graph, UClass* InterfaceClass)"
  },
  {
    "label": "AddUbergraphPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUbergraphPage(UBlueprint* Blueprint, class UEdGraph* Graph)"
  },
  {
    "label": "GetUbergraphFunctionName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUbergraphFunctionName(const UBlueprint* ForBlueprint)"
  },
  {
    "label": "AddDomainSpecificGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDomainSpecificGraph(UBlueprint* Blueprint, class UEdGraph* Graph)"
  },
  {
    "label": "RemoveGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGraphs( UBlueprint* Blueprint, const TArray<class UEdGraph*>& GraphsToRemove )"
  },
  {
    "label": "RemoveGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGraph( UBlueprint* Blueprint, class UEdGraph* GraphToRemove, EGraphRemoveFlags::Type Flags = EGraphRemoveFlags::Default )"
  },
  {
    "label": "RenameGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameGraph(class UEdGraph* Graph, const FString& NewName )"
  },
  {
    "label": "RenameGraphWithSuggestion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameGraphWithSuggestion(class UEdGraph* Graph, TSharedPtr<class INameValidatorInterface> NameValidator, const FString& DesiredName )"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(UBlueprint* Blueprint, UEdGraphNode* Node, bool bDontRecompile=false)"
  },
  {
    "label": "IsGraphReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphReadOnly(UEdGraph* InGraph)"
  },
  {
    "label": "GatherDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDependencies(const UBlueprint* Blueprint, TSet<TWeakObjectPtr<UBlueprint>>& OutDependencies, TSet<TWeakObjectPtr<UStruct>>& OutUDSDependencies)"
  },
  {
    "label": "GetDependentBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentBlueprints(UBlueprint* Blueprint, TArray<UBlueprint*>& DependentBlueprints)"
  },
  {
    "label": "FindDependentBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindDependentBlueprints(UBlueprint* Blueprint, TArray<UBlueprint*>& DependentBlueprints)"
  },
  {
    "label": "EnsureCachedDependenciesUpToDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCachedDependenciesUpToDate(UBlueprint* Blueprint)"
  },
  {
    "label": "IsGraphIntermediate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphIntermediate(const UEdGraph* Graph)"
  },
  {
    "label": "IsDataOnlyBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataOnlyBlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsBlueprintConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlueprintConst(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsEditorUtilityBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorUtilityBlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsActorBased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorBased(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsComponentBased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentBased(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsInterfaceBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterfaceBlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsInterfaceGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterfaceGraph(const UEdGraph* Graph)"
  },
  {
    "label": "IsLevelScriptBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelScriptBlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsParentClassABlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentClassABlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsParentClassAnEditableBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentClassAnEditableBlueprint(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsAnonymousBlueprintClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnonymousBlueprintClass(const UClass* Class)"
  },
  {
    "label": "CanClassGenerateEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClassGenerateEvents(const UClass* Class)"
  },
  {
    "label": "CanCreateChildBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateChildBlueprint(const UBlueprint* BP)"
  },
  {
    "label": "SupportsConstructionScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsConstructionScript(const UBlueprint* Blueprint)"
  },
  {
    "label": "IsEventGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEventGraph(const UEdGraph* InGraph)"
  },
  {
    "label": "IsTunnelInstanceNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTunnelInstanceNode(const UEdGraphNode* InGraphNode)"
  },
  {
    "label": "DoesBlueprintDeriveFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesBlueprintDeriveFrom(const UBlueprint* Blueprint, UClass* TestClass)"
  },
  {
    "label": "DoesBlueprintContainField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesBlueprintContainField(const UBlueprint* Blueprint, UField* TestField)"
  },
  {
    "label": "DoesSupportOverridingFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportOverridingFunctions(const UBlueprint* Blueprint)"
  },
  {
    "label": "DoesSupportTimelines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportTimelines(const UBlueprint* Blueprint)"
  },
  {
    "label": "DoesSupportEventGraphs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportEventGraphs(const UBlueprint* Blueprint)"
  },
  {
    "label": "DoesSupportImplementingInterfaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportImplementingInterfaces(const UBlueprint* Blueprint)"
  },
  {
    "label": "DoesSupportComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportComponents(UBlueprint const* Blueprint)"
  },
  {
    "label": "DoesSupportDefaults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportDefaults(UBlueprint const* Blueprint)"
  },
  {
    "label": "DoesSupportLocalVariables()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportLocalVariables(UEdGraph const* InGraph)"
  },
  {
    "label": "GetBlueprintTypeDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBlueprintTypeDescription(const UBlueprint* Blueprint)"
  },
  {
    "label": "ConstructBlueprintParentClassPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructBlueprintParentClassPicker( const TArray< UBlueprint* >& Blueprints, const FOnClassPicked& OnPicked)"
  },
  {
    "label": "OpenReparentBlueprintMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenReparentBlueprintMenu( UBlueprint* Blueprint, const TSharedRef<SWidget>& ParentContent, const FOnClassPicked& OnPicked)"
  },
  {
    "label": "OpenReparentBlueprintMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenReparentBlueprintMenu( const TArray< UBlueprint* >& Blueprints, const TSharedRef<SWidget>& ParentContent, const FOnClassPicked& OnPicked)"
  },
  {
    "label": "ConstructBlueprintInterfaceClassPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructBlueprintInterfaceClassPicker( const TArray< UBlueprint* >& Blueprints, const FOnClassPicked& OnPicked)"
  },
  {
    "label": "IsNativeSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeSignature(const UFunction* Fn)"
  },
  {
    "label": "GetAllGraphNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllGraphNames(const UBlueprint* Blueprint, TSet<FName>& GraphNames)"
  },
  {
    "label": "GetCompilerRelevantNodeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompilerRelevantNodeLinks(UEdGraphPin* FromPin, FCompilerRelevantNodeLinkArray& OutNodeLinks)"
  },
  {
    "label": "RemoveAllLocalBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllLocalBookmarks(const UBlueprint* ForBlueprint)"
  },
  {
    "label": "GetFunctionNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFunctionNameList(const UBlueprint* Blueprint, TSet<FName>& FunctionNames)"
  },
  {
    "label": "GetDelegateNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDelegateNameList(const UBlueprint* Blueprint, TSet<FName>& DelegatesNames)"
  },
  {
    "label": "IsDelegateSignatureGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelegateSignatureGraph(const UEdGraph* Graph)"
  },
  {
    "label": "IsMathExpressionGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMathExpressionGraph(const UEdGraph* InGraph)"
  },
  {
    "label": "GetHiddenPinsForFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHiddenPinsForFunction(UEdGraph const* Graph, UFunction const* Function, TSet<FName>& HiddenPins, TSet<FName>* OutInternalPins = nullptr)"
  },
  {
    "label": "ConformCallsToParentFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformCallsToParentFunctions(UBlueprint* Blueprint)"
  },
  {
    "label": "ConformImplementedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformImplementedEvents(UBlueprint* Blueprint)"
  },
  {
    "label": "IsPinTypeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPinTypeValid(const FEdGraphPinType& Type)"
  },
  {
    "label": "ValidatePinConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePinConnections(const UEdGraphNode* Node, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "ValidateEditorOnlyNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateEditorOnlyNodes(const UK2Node* Node, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "GetClassVariableList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClassVariableList(const UBlueprint* Blueprint, TSet<FName>& VisibleVariables, bool bIncludePrivateVars=false)"
  },
  {
    "label": "GetNewVariablesOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNewVariablesOfType( const UBlueprint* Blueprint, const FEdGraphPinType& Type, TArray<FName>& OutVars)"
  },
  {
    "label": "GetLocalVariablesOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalVariablesOfType( const UEdGraph* Graph, const FEdGraphPinType& Type, TArray<FName>& OutVars)"
  },
  {
    "label": "DuplicateMemberVariable()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DuplicateMemberVariable(UBlueprint* InFromBlueprint, UBlueprint* InToBlueprint, FName InVariableToDuplicate)"
  },
  {
    "label": "DuplicateVariable()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DuplicateVariable(UBlueprint* InBlueprint, const UStruct* InScope, FName InVariableToDuplicate)"
  },
  {
    "label": "DuplicateVariableDescription()",
    "kind": "Method",
    "detail": "Function (FBPVariableDescription)",
    "insertText": "DuplicateVariableDescription(UBlueprint* InBlueprint, FBPVariableDescription& InVariableDescription)"
  },
  {
    "label": "RemoveMemberVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMemberVariable(UBlueprint* Blueprint, const FName VarName)"
  },
  {
    "label": "BulkRemoveMemberVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BulkRemoveMemberVariables(UBlueprint* Blueprint, const TArray<FName>& VarNames)"
  },
  {
    "label": "RemoveFieldNotifyFromAllMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFieldNotifyFromAllMetadata(UBlueprint* Blueprint, const FName VarName)"
  },
  {
    "label": "GetUsedAndUnusedVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedAndUnusedVariables(UBlueprint* Blueprint, TArray<FProperty*>& OutUsedVariables, TArray<FProperty*>& OutUnusedVariables)"
  },
  {
    "label": "FindMemberVariableGuidByName()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindMemberVariableGuidByName(UBlueprint* InBlueprint, const FName InVariableName)"
  },
  {
    "label": "FindMemberVariableNameByGuid()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindMemberVariableNameByGuid(UBlueprint* InBlueprint, const FGuid& InVariableGuid)"
  },
  {
    "label": "RemoveVariableNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVariableNodes(UBlueprint* Blueprint, const FName VarName, bool const bForSelfOnly = true, UEdGraph* LocalGraphScope = nullptr)"
  },
  {
    "label": "RenameMemberVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameMemberVariable(UBlueprint* Blueprint, const FName OldName, const FName NewName)"
  },
  {
    "label": "RenameComponentMemberVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameComponentMemberVariable(UBlueprint* Blueprint, USCS_Node* Node, const FName NewName)"
  },
  {
    "label": "ChangeMemberVariableType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeMemberVariableType(UBlueprint* Blueprint, const FName VariableName, const FEdGraphPinType& NewPinType)"
  },
  {
    "label": "RemoveLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLocalVariable(UBlueprint* InBlueprint, const UStruct* InScope, const FName InVarName)"
  },
  {
    "label": "FindLocalVariableNameByGuid()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindLocalVariableNameByGuid(UBlueprint* InBlueprint, const FGuid& InVariableGuid)"
  },
  {
    "label": "FindLocalVariableGuidByName()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindLocalVariableGuidByName(UBlueprint* InBlueprint, const UStruct* InScope, const FName InVariableName)"
  },
  {
    "label": "FindLocalVariableGuidByName()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindLocalVariableGuidByName(UBlueprint* InBlueprint, const UEdGraph* InScopeGraph, const FName InVariableName)"
  },
  {
    "label": "RenameLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameLocalVariable(UBlueprint* InBlueprint, const UStruct* InScope, const FName InOldName, const FName InNewName)"
  },
  {
    "label": "ChangeLocalVariableType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeLocalVariableType(UBlueprint* InBlueprint, const UStruct* InScope, const FName InVariableName, const FEdGraphPinType& InNewPinType)"
  },
  {
    "label": "ReplaceVariableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceVariableReferences(UBlueprint* Blueprint, const FName OldName, const FName NewName)"
  },
  {
    "label": "ReplaceVariableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceVariableReferences(UBlueprint* Blueprint, const FProperty* OldVariable, const FProperty* NewVariable)"
  },
  {
    "label": "ReplaceFunctionReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceFunctionReferences(UBlueprint* Blueprint, const FName OldName, const FName NewName)"
  },
  {
    "label": "FixupVariableDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupVariableDescription(UBlueprint* Blueprint, FBPVariableDescription& VarDesc)"
  },
  {
    "label": "GetChildrenOfBlueprint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildrenOfBlueprint(UBlueprint* InBlueprint, TArray<FAssetData>& OutChildren, bool bInRecursive = true)"
  },
  {
    "label": "MarkBlueprintChildrenAsModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlueprintChildrenAsModified(UBlueprint* InBlueprint)"
  },
  {
    "label": "RenameTimeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameTimeline(UBlueprint* Blueprint, const FName OldVarName, const FName NewVarName)"
  },
  {
    "label": "SetBlueprintOnlyEditableFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintOnlyEditableFlag(UBlueprint* Blueprint, const FName& VarName, const bool bNewBlueprintOnly)"
  },
  {
    "label": "SetBlueprintPropertyReadOnlyFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintPropertyReadOnlyFlag(UBlueprint* Blueprint, const FName& VarName, const bool bVariableReadOnly)"
  },
  {
    "label": "SetInterpFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpFlag(UBlueprint* Blueprint, const FName& VarName, const bool bInterp)"
  },
  {
    "label": "SetVariableTransientFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableTransientFlag(UBlueprint* InBlueprint, const FName& InVarName, const bool bInIsTransient)"
  },
  {
    "label": "SetVariableSaveGameFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableSaveGameFlag(UBlueprint* InBlueprint, const FName& InVarName, const bool bInIsSaveGame)"
  },
  {
    "label": "SetVariableAdvancedDisplayFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableAdvancedDisplayFlag(UBlueprint* InBlueprint, const FName& InVarName, const bool bInIsAdvancedDisplay)"
  },
  {
    "label": "SetVariableDeprecatedFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableDeprecatedFlag(UBlueprint* InBlueprint, const FName& InVarName, const bool bInIsDeprecated)"
  },
  {
    "label": "SetBlueprintVariableMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableMetaData(UBlueprint* Blueprint, const FName& VarName, const UStruct* InLocalVarScope, const FName& MetaDataKey, const FString& MetaDataValue)"
  },
  {
    "label": "GetBlueprintVariableMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBlueprintVariableMetaData(const UBlueprint* Blueprint, const FName& VarName, const UStruct* InLocalVarScope, const FName& MetaDataKey, FString& OutMetaDataValue)"
  },
  {
    "label": "RemoveBlueprintVariableMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlueprintVariableMetaData(UBlueprint* Blueprint, const FName& VarName, const UStruct* InLocalVarScope, const FName& MetaDataKey)"
  },
  {
    "label": "SetBlueprintVariableCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableCategory(UBlueprint* Blueprint, const FName& VarName, const UStruct* InLocalVarScope, const FText& NewCategory, bool bDontRecompile=false)"
  },
  {
    "label": "SetBlueprintFunctionOrMacroCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintFunctionOrMacroCategory(UEdGraph* Graph, const FText& NewCategory, bool bDontRecompile=false)"
  },
  {
    "label": "SetAnimationGraphLayerGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationGraphLayerGroup(UEdGraph* InGraph, const FText& InGroupName)"
  },
  {
    "label": "FindIndexOfGraphInParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindIndexOfGraphInParent(UEdGraph* Graph)"
  },
  {
    "label": "MoveGraphBeforeOtherGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveGraphBeforeOtherGraph(UEdGraph* Graph, int32 NewIndex, bool bDontRecompile)"
  },
  {
    "label": "GetBlueprintVariableCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBlueprintVariableCategory(UBlueprint* Blueprint, const FName& VarName, const UStruct* InLocalVarScope)"
  },
  {
    "label": "GetBlueprintVariableRepNotifyFunc()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetBlueprintVariableRepNotifyFunc(UBlueprint* Blueprint, const FName& VarName)"
  },
  {
    "label": "SetBlueprintVariableRepNotifyFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprintVariableRepNotifyFunc(UBlueprint* Blueprint, const FName& VarName, const FName& RepNotifyFunc)"
  },
  {
    "label": "IsVariableCreatedByBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableCreatedByBlueprint(UBlueprint* InBlueprint, FProperty* InVariableProperty)"
  },
  {
    "label": "FindNewVariableIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNewVariableIndex(const UBlueprint* Blueprint, const FName& InName)"
  },
  {
    "label": "FindNewVariableIndexAndBlueprint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNewVariableIndexAndBlueprint(UBlueprint* InBlueprint, FName InName, UBlueprint*& OutFoundBlueprint)"
  },
  {
    "label": "FindLocalVariableIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLocalVariableIndex(const UBlueprint* Blueprint, UStruct* VariableScope, const FName& InVariableName)"
  },
  {
    "label": "MoveVariableBeforeVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveVariableBeforeVariable(UBlueprint* Blueprint, UStruct* VariableScope, FName VarNameToMove, FName TargetVarName, bool bDontRecompile)"
  },
  {
    "label": "MoveVariableAfterVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveVariableAfterVariable(UBlueprint* Blueprint, UStruct* VariableScope, FName VarNameToMove, FName TargetVarName, bool bDontRecompile)"
  },
  {
    "label": "FindTimelineIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindTimelineIndex(const UBlueprint* Blueprint, const FName& InName)"
  },
  {
    "label": "GetSCSVariableNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSCSVariableNameList(const UBlueprint* Blueprint, TSet<FName>& VariableNames)"
  },
  {
    "label": "GetSCSVariableNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSCSVariableNameList(const UBlueprintGeneratedClass* BPGC, TSet<FName>& VariableNames)"
  },
  {
    "label": "GetSCSVariableNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSCSVariableNameList(const USimpleConstructionScript* SCS, TSet<FName>& VariableNames)"
  },
  {
    "label": "GetImplementingBlueprintsFunctionNameList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImplementingBlueprintsFunctionNameList(const UBlueprint* Blueprint, TSet<FName>& FunctionNames)"
  },
  {
    "label": "IsVariableComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableComponent(const FBPVariableDescription& Variable)"
  },
  {
    "label": "IsVariableUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableUsed(const UBlueprint* VariableBlueprint, const FName& VariableName, const UEdGraph* LocalGraphScope = nullptr)"
  },
  {
    "label": "IsFunctionUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionUsed(const UBlueprint* FunctionBlueprint, const FName& FunctionName, const UEdGraph* LocalGraphScope = nullptr)"
  },
  {
    "label": "PropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyValueFromString(const FProperty* Property, const FString& StrValue, uint8* Container, UObject* OwningObject = nullptr, int32 PortFlags = PPF_None)"
  },
  {
    "label": "PropertyValueFromString_Direct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyValueFromString_Direct(const FProperty* Property, const FString& StrValue, uint8* DirectValue, UObject* OwningObject = nullptr, int32 PortFlags = PPF_None)"
  },
  {
    "label": "PropertyValueToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyValueToString(const FProperty* Property, const uint8* Container, FString& OutForm, UObject* OwningObject = nullptr, int32 PortFlags = PPF_None)"
  },
  {
    "label": "PropertyValueToString_Direct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyValueToString_Direct(const FProperty* Property, const uint8* DirectValue, FString& OutForm, UObject* OwningObject = nullptr, int32 PortFlags = PPF_None)"
  },
  {
    "label": "PostEditChangeBlueprintActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeBlueprintActors(UBlueprint* Blueprint, bool bComponentEditChange = false)"
  },
  {
    "label": "IsPropertyPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyPrivate(const FProperty* Property)"
  },
  {
    "label": "IsPropertyWritableInBlueprint()",
    "kind": "Method",
    "detail": "Function (EPropertyWritableState)",
    "insertText": "IsPropertyWritableInBlueprint(const UBlueprint* Blueprint, const FProperty* Property)"
  },
  {
    "label": "IsPropertyReadableInBlueprint()",
    "kind": "Method",
    "detail": "Function (EPropertyReadableState)",
    "insertText": "IsPropertyReadableInBlueprint(const UBlueprint* Blueprint, const FProperty* Property)"
  },
  {
    "label": "UpdateRootComponentReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRootComponentReference(UBlueprint* Blueprint)"
  },
  {
    "label": "IsSCSComponentProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSCSComponentProperty(FObjectProperty* MemberProperty)"
  },
  {
    "label": "FindInterfaceGraphGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindInterfaceGraphGuid(const FName& GraphName, const UClass* InterfaceClass)"
  },
  {
    "label": "FindInterfaceFunctionGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindInterfaceFunctionGuid(const UFunction* Function, const UClass* InterfaceClass)"
  },
  {
    "label": "ImplementNewInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementNewInterface(UBlueprint* Blueprint, const FName& InterfaceClassName)"
  },
  {
    "label": "ImplementNewInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementNewInterface(UBlueprint* Blueprint, FTopLevelAssetPath InterfaceClassPathName)"
  },
  {
    "label": "RemoveInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInterface(UBlueprint* Blueprint, const FName& InterfaceClassName, bool bPreserveFunctions = false)"
  },
  {
    "label": "RemoveInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInterface(UBlueprint* Blueprint, FTopLevelAssetPath InterfaceClassPathName, bool bPreserveFunctions = false)"
  },
  {
    "label": "RemoveInterfaceFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveInterfaceFunction(UBlueprint* Blueprint, FBPInterfaceDescription& Interface, UFunction* Function, bool bPreserveFunction)"
  },
  {
    "label": "PromoteGraphFromInterfaceOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteGraphFromInterfaceOverride(UBlueprint* InBlueprint, UEdGraph* InInterfaceGraph)"
  },
  {
    "label": "GetInterfaceGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInterfaceGraphs(UBlueprint* Blueprint, const FName& InterfaceClassName, TArray<UEdGraph*>& ChildGraphs)"
  },
  {
    "label": "GetInterfaceGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInterfaceGraphs(UBlueprint* Blueprint, FTopLevelAssetPath InterfaceClassPathName, TArray<UEdGraph*>& ChildGraphs)"
  },
  {
    "label": "IsInterfaceFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterfaceFunction(UBlueprint* Blueprint, UFunction* Function)"
  },
  {
    "label": "ConformImplementedInterfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformImplementedInterfaces(UBlueprint* Blueprint)"
  },
  {
    "label": "ConformDelegateSignatureGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformDelegateSignatureGraphs(UBlueprint* Blueprint)"
  },
  {
    "label": "ConformAllowDeletionFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConformAllowDeletionFlag(UBlueprint* Blueprint)"
  },
  {
    "label": "PurgeNullGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeNullGraphs(UBlueprint* Blueprint)"
  },
  {
    "label": "UpdateOutOfDateAnimBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutOfDateAnimBlueprints(UBlueprint* Blueprint)"
  },
  {
    "label": "UpdateOutOfDateCompositeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutOfDateCompositeNodes(UBlueprint* Blueprint)"
  },
  {
    "label": "UpdateOutOfDateCompositeWithOuter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutOfDateCompositeWithOuter(UBlueprint* Blueprint, UEdGraph* Outer )"
  },
  {
    "label": "UpdateComponentTemplates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentTemplates(UBlueprint* Blueprint)"
  },
  {
    "label": "UpdateTransactionalFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransactionalFlags(UBlueprint* Blueprint)"
  },
  {
    "label": "UpdateStalePinWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStalePinWatches( UBlueprint* Blueprint )"
  },
  {
    "label": "ClearMacroCosmeticInfoCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMacroCosmeticInfoCache(UBlueprint* Blueprint)"
  },
  {
    "label": "GetCosmeticInfoForMacro()",
    "kind": "Method",
    "detail": "Function (FBlueprintMacroCosmeticInfo)",
    "insertText": "GetCosmeticInfoForMacro(UEdGraph* MacroGraph)"
  },
  {
    "label": "FindImplementedInterfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindImplementedInterfaces(const UBlueprint* Blueprint, bool bGetAllInterfaces, TArray<UClass*>& ImplementedInterfaces)"
  },
  {
    "label": "ImplementsInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementsInterface(const UBlueprint* Blueprint, bool bIncludeInherited, UClass* SomeInterface)"
  },
  {
    "label": "FindUniqueKismetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindUniqueKismetName(const UBlueprint* InBlueprint, const FString& InBaseName, UStruct* InScope = NULL)"
  },
  {
    "label": "ReplaceInvalidBlueprintNameCharacters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInvalidBlueprintNameCharacters(FString& InBaseName)"
  },
  {
    "label": "FindUniqueCustomEventName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindUniqueCustomEventName(const UBlueprint* Blueprint)"
  },
  {
    "label": "FindUniqueTimelineName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindUniqueTimelineName(const UBlueprint* Blueprint)"
  },
  {
    "label": "RemoveTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimeline(UBlueprint* Blueprint, class UTimelineTemplate* Timeline, bool bDontRecompile=false)"
  },
  {
    "label": "FindReferencesToActorFromLevelScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindReferencesToActorFromLevelScript(ULevelScriptBlueprint* LevelScriptBlueprint, AActor* InActor, TArray<UK2Node*>& ReferencedToActors)"
  },
  {
    "label": "ReplaceAllActorRefrences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceAllActorRefrences(ULevelScriptBlueprint* InLevelScriptBlueprint, AActor* InOldActor, AActor* InNewActor)"
  },
  {
    "label": "ModifyActorReferencedGraphNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyActorReferencedGraphNodes(ULevelScriptBlueprint* LevelScriptBlueprint, const AActor* InActor)"
  },
  {
    "label": "FixLevelScriptActorBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixLevelScriptActorBindings(ALevelScriptActor* LevelScriptActor, const class ULevelScriptBlueprint* ScriptBlueprint)"
  },
  {
    "label": "FindActorsThatReferenceActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindActorsThatReferenceActor( AActor* InActor, TArray<UClass*>& InClassesToIgnore, TArray<AActor*>& OutReferencingActors )"
  },
  {
    "label": "GetActorReferenceMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorReferenceMap(UWorld* InWorld, TArray<UClass*>& InClassesToIgnore, TMap<AActor*, TArray<AActor*> >& OutReferencingActors)"
  },
  {
    "label": "ListPackageContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListPackageContents(UPackage* Package, FOutputDevice& Ar)"
  },
  {
    "label": "KismetDiagnosticExec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KismetDiagnosticExec(const TCHAR* Stream, FOutputDevice& Ar)"
  },
  {
    "label": "FindAndSetDebuggableBlueprintInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndSetDebuggableBlueprintInstances()"
  },
  {
    "label": "AnalyticsTrackNewNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyticsTrackNewNode( UEdGraphNode* NewNode )"
  },
  {
    "label": "GenerateUniqueGraphName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenerateUniqueGraphName(UObject* const InOuter, FString const& ProposedName)"
  },
  {
    "label": "CheckIfSelectionIsCycling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfSelectionIsCycling(const TSet<UEdGraphNode*>& InSelectionSet, FCompilerResultsLog& InMessageLog)"
  },
  {
    "label": "IsPaletteActionReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaletteActionReadOnly(TSharedPtr<FEdGraphSchemaAction> ActionIn, TSharedPtr<class FBlueprintEditor> const BlueprintEditorIn)"
  },
  {
    "label": "GetEntryAndResultNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntryAndResultNodes(const UEdGraph* InGraph, TWeakObjectPtr<class UK2Node_EditablePinBase>& OutEntryNode, TWeakObjectPtr<class UK2Node_EditablePinBase>& OutResultNode)"
  },
  {
    "label": "ModifyFunctionMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyFunctionMetaData(const UEdGraph* InGraph)"
  },
  {
    "label": "GetGraphDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGraphDescription(const UEdGraph* InGraph)"
  },
  {
    "label": "CheckIfGraphHasLatentFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfGraphHasLatentFunctions(UEdGraph* InGraph)"
  },
  {
    "label": "HasGetTypeHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasGetTypeHash(const FEdGraphPinType& PinType)"
  },
  {
    "label": "PropertyHasGetTypeHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyHasGetTypeHash(const FProperty* PropertyType)"
  },
  {
    "label": "StructHasGetTypeHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StructHasGetTypeHash(const UScriptStruct* StructType)"
  },
  {
    "label": "BuildComponentInstancingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildComponentInstancingData(UActorComponent* ComponentTemplate, FBlueprintCookedComponentInstancingData& OutData, bool bUseTemplateArchetype = false)"
  },
  {
    "label": "FindScriptStructsInNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindScriptStructsInNodes(const TSet<UScriptStruct*>& Structs, FOnNodeFoundOrUpdated InOnNodeFoundOrUpdated)"
  },
  {
    "label": "FindEnumsInNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindEnumsInNodes(const TSet<UEnum*>& UEnums, FOnNodeFoundOrUpdated InOnNodeFoundOrUpdated)"
  },
  {
    "label": "UpdateScriptStructsInNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScriptStructsInNodes(const TMap<UScriptStruct*, UScriptStruct*>& Structs, FOnNodeFoundOrUpdated InOnNodeFoundOrUpdated)"
  },
  {
    "label": "UpdateEnumsInNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEnumsInNodes(const TMap<UEnum*, UEnum*>& Structs, FOnNodeFoundOrUpdated InOnNodeFoundOrUpdated)"
  },
  {
    "label": "RecombineNestedSubPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecombineNestedSubPins(UK2Node* Node)"
  },
  {
    "label": "CleanNullGraphReferencesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanNullGraphReferencesRecursive(UEdGraph* Graph)"
  },
  {
    "label": "CleanNullGraphReferencesInArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanNullGraphReferencesInArray(UBlueprint* Blueprint, TArray<UEdGraph*>& GraphArray)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (blueprint)",
    "insertText": "type(or optionally is BASED on the same type. \n\t *\n\t * @param InActorObject\t\t\t\t\t\tThe object to check\n\t * @param InBlueprint\t\t\t\t\t\tThe blueprint to check against\n\t * @param bInDisallowDerivedBlueprints\t\tif true will only allow exact type matches, if false derived types are allowed.\n\t */\n\tstatic UNREALED_API bool IsObjectADebugCandidate( AActor* InActorObject, UBlueprint* InBlueprint , bool bInDisallowDerivedBlueprints )"
  },
  {
    "label": "ValidateAllMemberVariables()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAllMemberVariables(UBlueprint* InBlueprint, UBlueprint* InParentBlueprint, const FName InVariableName)"
  },
  {
    "label": "ValidateAllComponentMemberVariables()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAllComponentMemberVariables(UBlueprint* InBlueprint, UBlueprint* InParentBlueprint, const FName& InVariableName)"
  },
  {
    "label": "ValidateAllTimelines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAllTimelines(UBlueprint* InBlueprint, UBlueprint* InParentBlueprint, const FName& InVariableName)"
  },
  {
    "label": "ValidateAllFunctionGraphs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAllFunctionGraphs(UBlueprint* InBlueprint, UBlueprint* InParentBlueprint, const FName& InVariableName)"
  },
  {
    "label": "CheckIfNodeConnectsToSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfNodeConnectsToSelection(UEdGraphNode* InNode, const TSet<UEdGraphNode*>& InSelectionSet)"
  },
  {
    "label": "VerifyUserWantsVariableTypeChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyUserWantsVariableTypeChanged(const FName& InVarName)"
  },
  {
    "label": "VerifyUserWantsRepNotifyVariableNameChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyUserWantsRepNotifyVariableNameChanged(const FName& InVarName, const FName& InFuncName)"
  },
  {
    "label": "GetLoadedChildBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLoadedChildBlueprints(UBlueprint* InBlueprint, TArray<UBlueprint*>& OutBlueprints)"
  },
  {
    "label": "PostSetupObjectPinType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSetupObjectPinType(UBlueprint* InBlueprint, FBPVariableDescription& InOutVarDesc)"
  },
  {
    "label": "RenameVariableReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameVariableReferences(UBlueprint* Blueprint, UClass* VariableClass, const FName& OldVarName, const FName& NewVarName)"
  },
  {
    "label": "RenameFunctionReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameFunctionReferences(UBlueprint* Blueprint, UClass* FunctionClass, const FName& OldFuncName, const FName& NewFuncName)"
  },
  {
    "label": "GetFunctionNameFromClassByGuid()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFunctionNameFromClassByGuid(const UClass* InClass, const FGuid FunctionGuid)"
  },
  {
    "label": "GetFunctionGuidFromClassByFieldName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFunctionGuidFromClassByFieldName(const UClass* InClass, const FName FunctionName, FGuid& FunctionGuid)"
  },
  {
    "label": "GetFriendlyClassDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFriendlyClassDisplayName(const UClass* Class)"
  },
  {
    "label": "GetClassNameWithoutSuffix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClassNameWithoutSuffix(const UClass* Class)"
  },
  {
    "label": "GetDeprecatedMemberMenuItemName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDeprecatedMemberMenuItemName(const FText& MemberName)"
  },
  {
    "label": "GetDeprecatedMemberUsageNodeWarning()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDeprecatedMemberUsageNodeWarning(const FText& MemberName, const FText& DetailedMessage)"
  },
  {
    "label": "GetDeprecatedMessageType()",
    "kind": "Method",
    "detail": "Function (EEdGraphNodeDeprecationMessageType)",
    "insertText": "GetDeprecatedMessageType(const FString& TypeString)"
  },
  {
    "label": "HandleDisableEditableWhenInherited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisableEditableWhenInherited(UObject* ModifiedObject, TArray<UObject*>& ArchetypeInstances)"
  },
  {
    "label": "ImplementsGetWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementsGetWorld(const UBlueprint* BP)"
  },
  {
    "label": "HasFunctionBlueprintThreadSafeMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFunctionBlueprintThreadSafeMetaData(const UFunction* InFunction)"
  },
  {
    "label": "HasRestrictedNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRestrictedNodes(const UBlueprint* BP, TArray<UEdGraphNode*>* OutRestrictedNodes = nullptr)"
  },
  {
    "label": "SanitizeRestrictedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeRestrictedContent(UBlueprint* BP)"
  },
  {
    "label": "ShouldOpenWithDataOnlyEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOpenWithDataOnlyEditor(const UBlueprint* Blueprint)"
  }
]