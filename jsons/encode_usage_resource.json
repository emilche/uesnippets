[
  {
    "label": "EncodeUsageResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodeUsageResource"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_ENCODE_USAGE_RESOURCE_H_ # define VIDEO_ADAPTATION_ENCODE_USAGE_RESOURCE_H_ # include<memory> # include<string> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / video / video_adaptation_reason . h \" # include \" video / adaptation / overuse_frame_detector . h \" # include \" video / adaptation / video_stream_encoder_resource . h \" namespace webrtc { class EncodeUsageResource : public VideoStreamEncoderResource,public OveruseFrameDetectorObserverInterface { public : rtc::scoped_refptr<EncodeUsageResource>)",
    "insertText": "Create(std::unique_ptr<OveruseFrameDetector> overuse_detector)"
  },
  {
    "label": "EncodeUsageResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeUsageResource(std::unique_ptr<OveruseFrameDetector> overuse_detector)"
  },
  {
    "label": "EncodeUsageResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EncodeUsageResource()"
  },
  {
    "label": "is_started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_started()"
  },
  {
    "label": "StartCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCheckForOveruse(CpuOveruseOptions options)"
  },
  {
    "label": "StopCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCheckForOveruse()"
  },
  {
    "label": "SetTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetFrameRate(absl::optional<double> target_frame_rate)"
  },
  {
    "label": "OnEncodeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeStarted(const VideoFrame& cropped_frame, int64_t time_when_first_seen_us)"
  },
  {
    "label": "OnEncodeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeCompleted(uint32_t timestamp, int64_t time_sent_in_us, int64_t capture_time_us, absl::optional<int> encode_duration_us)"
  },
  {
    "label": "AdaptUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptUp()"
  },
  {
    "label": "AdaptDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptDown()"
  },
  {
    "label": "TargetFrameRateAsInt()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "TargetFrameRateAsInt()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<OveruseFrameDetector> overuse_detector_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue())"
  }
]