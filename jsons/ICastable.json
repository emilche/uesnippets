[
  {
    "label": "FCastableTypeTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastableTypeTable"
  },
  {
    "label": "FDynamicExtensionContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicExtensionContainer"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FAutoRegisterTypeTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoRegisterTypeTable"
  },
  {
    "label": "TImplements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplements"
  },
  {
    "label": "CastedCall()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Invoke . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" MVVM / CastableTypeTable . h \" # include<type_traits> namespace UE::Sequencer { struct FCastableTypeTable ; class FDynamicExtensionContainer ; class ICastable { public : template<RetType,InterfaceType,. . . ArgTypes,. . . ParamTypes> RetType)",
    "insertText": "CastedCall(RetType(InterfaceType::*MemberFunc)(ArgTypes...), ParamTypes&&... InArgs)"
  },
  {
    "label": "CastWeakPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "CastWeakPtr(const TWeakPtr<ICastable>& InWeakPtr)"
  },
  {
    "label": "CastWeakPtrShared()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T> TSharedPtr<T>)",
    "insertText": "CastWeakPtrShared(const TWeakPtr<ICastable>& InWeakPtr)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } bool)",
    "insertText": "IsA(FViewModelTypeID InType)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "CastRaw()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "CastRaw(FViewModelTypeID InType)"
  },
  {
    "label": "CastThis()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "CastThis()"
  },
  {
    "label": "CastThisChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "CastThisChecked()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Result = CastThis<)",
    "insertText": "T()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (InThis -> ID .)",
    "insertText": "Register()"
  },
  {
    "label": "FCastableTypeTable()",
    "kind": "Method",
    "detail": "Function (const_cast<const)",
    "insertText": "FCastableTypeTable(InThis->TypeTable) = InThis->ID.GetTypeTable()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (} } ; private : FAutoRegisterTypeTable ; const FCastableTypeTable* const TypeTable = nullptr ; protected : FDynamicExtensionContainer* DynamicTypes = nullptr ; } ; template<. . . T> struct TImplements { } ; # define)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(ThisType, ...) \\ UE_SEQUENCER_DECLARE_CASTABLE_API(, ThisType, __VA_ARGS__) #define UE_SEQUENCER_DECLARE_CASTABLE_API(MODULE_API, ThisType, ...) \\ UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API(MODULE_API, ThisType)"
  },
  {
    "label": "FAutoRegisterTypeTable()",
    "kind": "Method",
    "detail": "Function (\\ using Implements =::UE::Sequencer::TImplements<__VA_ARGS__> ; \\ UE_NO_UNIQUE_ADDRESS::UE::Sequencer::ICastable::FAutoRegisterTypeTable AutoRegisterTypeTable =::UE::Sequencer::)",
    "insertText": "FAutoRegisterTypeTable(static_cast<ThisType*>(this))"
  },
  {
    "label": "UE_SEQUENCER_DEFINE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "UE_SEQUENCER_DEFINE_CASTABLE(ThisType) \\ UE_SEQUENCER_DEFINE_VIEW_MODEL_TYPE_ID(ThisType)"
  }
]