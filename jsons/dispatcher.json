[
  {
    "label": "DispatchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatchData"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Impl"
  },
  {
    "label": "InstallStandardAllocatorHooks()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_DISPATCHER_DISPATCHER_H_ # define BASE_ALLOCATOR_DISPATCHER_DISPATCHER_H_ # include \" base / allocator / dispatcher / internal / dispatcher_internal . h \" # include \" base / base_export . h \" # include<memory> namespace base::allocator::dispatcher { void BASE_EXPORT)",
    "insertText": "InstallStandardAllocatorHooks()"
  },
  {
    "label": "RemoveStandardAllocatorHooksForTesting()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "RemoveStandardAllocatorHooksForTesting()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (namespace internal { struct DispatchData ; } class BASE_EXPORT Dispatcher { public : Dispatcher&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "Dispatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatcher()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (template<. . . ObserverTypes> void)",
    "insertText": "Initialize(const std::tuple<ObserverTypes...>& observers)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(internal::GetNotificationHooks(observers))"
  },
  {
    "label": "InitializeForTesting()",
    "kind": "Method",
    "detail": "Function (} template<ObserverType> void)",
    "insertText": "InitializeForTesting(ObserverType* observer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(std::make_tuple(observer))"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const internal::DispatchData& dispatch_data)"
  }
]