[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FPacketTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketTimestamp"
  },
  {
    "label": "FSocketDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocketDeleter"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "FResolveInfoCached",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfoCached"
  },
  {
    "label": "FResolveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AddressInfoTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringConv . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" IPAddress . h \" # include \" Logging / LogMacros . h \" # include \" Net / Common / Sockets / SocketErrors . h \" # include \" SocketTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class Error ; class FInternetAddr ; class FOutputDevice ; class FSocket ; struct FPacketTimestamp ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSockets, Log, All)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# ifndef PLATFORM_SOCKETSUBSYSTEM # if PLATFORM_WINDOWS # define PLATFORM_SOCKETSUBSYSTEM)",
    "insertText": "FName(TEXT(\"WINDOWS\")) #elif PLATFORM_MAC #define PLATFORM_SOCKETSUBSYSTEM FName(TEXT(\"MAC\")) #elif PLATFORM_IOS #define PLATFORM_SOCKETSUBSYSTEM FName(TEXT(\"IOS\")) #elif PLATFORM_UNIX #define PLATFORM_SOCKETSUBSYSTEM FName(TEXT(\"UNIX\")) #elif PLATFORM_ANDROID #define PLATFORM_SOCKETSUBSYSTEM FName(TEXT(\"ANDROID\")) #else #define PLATFORM_SOCKETSUBSYSTEM FName(TEXT(\"\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (using FUniqueSocket = TUniquePtr<FSocket,FSocketDeleter> ; class ISocketSubsystem { public : ISocketSubsystem*)",
    "insertText": "Get(const FName& SubsystemName=NAME_None)"
  },
  {
    "label": "ShutdownAllSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownAllSystems()"
  },
  {
    "label": "ISocketSubsystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ISocketSubsystem()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FString& Error)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (FSocket*)",
    "insertText": "CreateSocket(const FName& SocketType, const FString& SocketDescription, bool bForceUDP = false)"
  },
  {
    "label": "NoProtocolTypeName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "NoProtocolTypeName(NAME_None)"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (} FSocket*)",
    "insertText": "CreateSocket(const FName& SocketType, const FString& SocketDescription, const FName& ProtocolName)"
  },
  {
    "label": "CreateUniqueSocket()",
    "kind": "Method",
    "detail": "Function (FUniqueSocket)",
    "insertText": "CreateUniqueSocket(const FName& SocketType, const FString& SocketDescription, bool bForceUDP = false)"
  },
  {
    "label": "CreateUniqueSocket()",
    "kind": "Method",
    "detail": "Function (FUniqueSocket)",
    "insertText": "CreateUniqueSocket(const FName& SocketType, const FString& SocketDescription, const FName& ProtocolName)"
  },
  {
    "label": "CreateResolveInfoCached()",
    "kind": "Method",
    "detail": "Function (class FResolveInfoCached*)",
    "insertText": "CreateResolveInfoCached(TSharedPtr<FInternetAddr> Addr)"
  },
  {
    "label": "DestroySocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySocket(FSocket* Socket)"
  },
  {
    "label": "GetAddressInfo()",
    "kind": "Method",
    "detail": "Function (} FAddressInfoResult)",
    "insertText": "GetAddressInfo(const TCHAR* HostName, const TCHAR* ServiceName = nullptr, EAddressInfoFlags QueryFlags = EAddressInfoFlags::Default, const FName ProtocolTypeName = NAME_None, ESocketType SocketType = ESocketType::SOCKTYPE_Unknown)"
  },
  {
    "label": "GetAddressInfoAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAddressInfoAsync(FAsyncGetAddressInfoCallback Callback, const TCHAR* HostName, const TCHAR* ServiceName = nullptr, EAddressInfoFlags QueryFlags = EAddressInfoFlags::Default, const FName ProtocolTypeName = NAME_None, ESocketType SocketType = ESocketType::SOCKTYPE_Unknown)"
  },
  {
    "label": "GetAddressFromString()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternetAddr>)",
    "insertText": "GetAddressFromString(const FString& InAddress)"
  },
  {
    "label": "GetAddressInfo()",
    "kind": "Method",
    "detail": "Function (FAddressInfoResult GAIResult =)",
    "insertText": "GetAddressInfo(ANSI_TO_TCHAR(HostName), nullptr, EAddressInfoFlags::Default, NAME_None)"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (OutAddr .)",
    "insertText": "SetRawIp(GAIResult.Results[0].Address->GetRawIp())"
  },
  {
    "label": "RequiresChatDataBeSeparate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresChatDataBeSeparate()"
  },
  {
    "label": "RequiresEncryptedPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresEncryptedPackets()"
  },
  {
    "label": "GetHostName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHostName(FString& HostName)"
  },
  {
    "label": "CreateInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr> ReturnAddr =)",
    "insertText": "CreateInternetAddr()"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ReturnAddr ->)",
    "insertText": "SetIp(Address)"
  },
  {
    "label": "CreateInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr>)",
    "insertText": "CreateInternetAddr(const FName ProtocolType)"
  },
  {
    "label": "CreateRecvMulti()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FRecvMulti>)",
    "insertText": "CreateRecvMulti(int32 MaxNumPackets, int32 MaxPacketSize, ERecvMultiFlags Flags=ERecvMultiFlags::None)"
  },
  {
    "label": "HasNetworkDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetworkDevice()"
  },
  {
    "label": "GetSocketAPIName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetSocketAPIName()"
  },
  {
    "label": "GetLastErrorCode()",
    "kind": "Method",
    "detail": "Function (ESocketErrors)",
    "insertText": "GetLastErrorCode()"
  },
  {
    "label": "TranslateErrorCode()",
    "kind": "Method",
    "detail": "Function (ESocketErrors)",
    "insertText": "TranslateErrorCode(int32 Code)"
  },
  {
    "label": "GetSocketError()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetSocketError(ESocketErrors Code = SE_GET_LAST_ERROR_CODE)"
  },
  {
    "label": "GetLocalAdapterAddresses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocalAdapterAddresses(TArray<TSharedPtr<FInternetAddr>>& OutAddresses)"
  },
  {
    "label": "GetLocalBindAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr>)",
    "insertText": "GetLocalBindAddr(FOutputDevice& Out)"
  },
  {
    "label": "GetLocalBindAddresses()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FInternetAddr>>)",
    "insertText": "GetLocalBindAddresses()"
  },
  {
    "label": "BindNextPort()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BindNextPort(FSocket* Socket, FInternetAddr& Addr, int32 PortCount, int32 PortIncrement)"
  },
  {
    "label": "GetLocalHostAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr>)",
    "insertText": "GetLocalHostAddr(FOutputDevice& Out, bool& bCanBindAll)"
  },
  {
    "label": "GetMultihomeAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMultihomeAddress(TSharedRef<FInternetAddr>& Addr)"
  },
  {
    "label": "GetHostByNameFromCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHostByNameFromCache(const ANSICHAR* HostName, TSharedPtr<class FInternetAddr>& Addr)"
  },
  {
    "label": "AddHostNameToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHostNameToCache(const ANSICHAR* HostName, TSharedPtr<class FInternetAddr> Addr)"
  },
  {
    "label": "RemoveHostNameFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHostNameFromCache(const ANSICHAR* HostName)"
  },
  {
    "label": "IsSocketRecvMultiSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSocketRecvMultiSupported()"
  },
  {
    "label": "IsSocketWaitSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSocketWaitSupported()"
  },
  {
    "label": "TranslatePacketTimestamp()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "TranslatePacketTimestamp(const FPacketTimestamp& Timestamp, ETimestampTranslation Translation=ETimestampTranslation::LocalTimestamp)"
  },
  {
    "label": "IsRecvFromWithPktInfoSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecvFromWithPktInfoSupported()"
  },
  {
    "label": "GetProtocolFamilyFromName()",
    "kind": "Method",
    "detail": "Function (protected : ESocketProtocolFamily)",
    "insertText": "GetProtocolFamilyFromName(const FName& InProtocolName)"
  },
  {
    "label": "GetProtocolNameFromFamily()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetProtocolNameFromFamily(ESocketProtocolFamily InProtocolFamily)"
  },
  {
    "label": "FSocketDeleter()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection HostNameCacheSync ; TMap<FString,TSharedPtr<FInternetAddr>> HostNameCache ; } ; class FSocketDeleter { public :)",
    "insertText": "FSocketDeleter() : Subsystem(nullptr)"
  },
  {
    "label": "FSocketDeleter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSocketDeleter(ISocketSubsystem* InSubsystem) : Subsystem(InSubsystem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FSocket* Socket)"
  },
  {
    "label": "DestroySocket()",
    "kind": "Method",
    "detail": "Function (Subsystem ->)",
    "insertText": "DestroySocket(Socket)"
  }
]