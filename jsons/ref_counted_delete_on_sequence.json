[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "RefCountedDeleteOnSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedDeleteOnSequence"
  },
  {
    "label": "DeleteHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeleteHelper"
  },
  {
    "label": "RefCountedDeleteOnSequence()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_REF_COUNTED_DELETE_ON_SEQUENCE_H_ # define BASE_MEMORY_REF_COUNTED_DELETE_ON_SEQUENCE_H_ # include<utility> # include \" base / check . h \" # include \" base / location . h \" # include \" base / memory / ref_counted . h \" # include \" base / task / sequenced_task_runner . h \" namespace base { template<class T> class RefCountedDeleteOnSequence : public subtle::RefCountedThreadSafeBase { public : subtle::StartRefCountFromZeroTag kRefCountPreference = subtle::kStartRefCountFromZeroTag ;)",
    "insertText": "RefCountedDeleteOnSequence(scoped_refptr<SequencedTaskRunner> owning_task_runner) : subtle::RefCountedThreadSafeBase(T::kRefCountPreference), owning_task_runner_(std::move(owning_task_runner))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(owning_task_runner_)"
  },
  {
    "label": "RefCountedDeleteOnSequence()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedDeleteOnSequence(const RefCountedDeleteOnSequence&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedDeleteOnSequence&)",
    "insertText": "operator(const RefCountedDeleteOnSequence&)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "AddRefImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefImpl(T::kRefCountPreference)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "RefCountedDeleteOnSequence()",
    "kind": "Method",
    "detail": "Function (} protected : class DeleteHelper<RefCountedDeleteOnSequence> ; ~)",
    "insertText": "RefCountedDeleteOnSequence()"
  },
  {
    "label": "owning_task_runner()",
    "kind": "Method",
    "detail": "Function (SequencedTaskRunner*)",
    "insertText": "owning_task_runner()"
  },
  {
    "label": "DestructOnSequence()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "DestructOnSequence()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* t = static_cast<const)",
    "insertText": "T(this)"
  },
  {
    "label": "AddRefImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRefImpl(subtle::StartRefCountFromZeroTag)"
  },
  {
    "label": "AddRefImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRefImpl(subtle::StartRefCountFromOneTag)"
  },
  {
    "label": "AddRefWithCheck()",
    "kind": "Method",
    "detail": "Function (subtle::)",
    "insertText": "AddRefWithCheck()"
  }
]