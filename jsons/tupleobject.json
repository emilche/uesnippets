[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_CPYTHON_TUPLEOBJECT_H # error \" this header file must not be included directly \" # endif typedef struct { PyObject_VAR_HEAD PyObject* ob_item [ 1 ] ; } PyTupleObject ;)",
    "insertText": "PyAPI_FUNC(int) _PyTuple_Resize(PyObject **, Py_ssize_t)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyTuple_MaybeUntrack(PyObject *)"
  },
  {
    "label": "_PyTuple_CAST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_PyTuple_CAST(op) \\ (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op))) static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op)"
  },
  {
    "label": "_PyTuple_CAST()",
    "kind": "Method",
    "detail": "Function (PyTupleObject* tuple =)",
    "insertText": "_PyTuple_CAST(op)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000 # define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op)) #endif #define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[index]) static inline void PyTuple_SET_ITEM(PyObject *op, Py_ssize_t index, PyObject *value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (tuple -> ob_item [ index ] = value ; } # if !)",
    "insertText": "defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000 #define PyTuple_SET_ITEM(op, index, value) \\ PyTuple_SET_ITEM(_PyObject_CAST(op), index, _PyObject_CAST(value)) #endif PyAPI_FUNC(void) _PyTuple_DebugMallocStats(FILE *out)"
  }
]