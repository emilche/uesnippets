[
  {
    "label": "Scatter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / Array . h \" template<DeltaType,ValueType> void)",
    "insertText": "Scatter(const DeltaType &Delta, TArray<ValueType> &OutDest, int32 DestNumElements, TArray<ValueType> &&InSource, int32 ElementStride = 1)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "SetNumUninitialized(DestNumElements * ElementStride)"
  },
  {
    "label": "GetItemIndex()",
    "kind": "Method",
    "detail": "Function (int32 ItemIndex = It .)",
    "insertText": "GetItemIndex()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32 DestIndex = It .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&OutDest[DestIndex * ElementStride], &InSource[ItemIndex * ElementStride], ElementStride * sizeof(ValueType))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "check(InSource.Num() == DestNumElements * ElementStride)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutDest =)",
    "insertText": "MoveTemp(InSource)"
  },
  {
    "label": "Scatter()",
    "kind": "Method",
    "detail": "Function (} } template<DeltaType,ValueType,IndexRemapType> void)",
    "insertText": "Scatter(const DeltaType &Delta, TArray<ValueType> &OutDest, int32 DestNumElements, const TArray<ValueType> &InSource, const IndexRemapType &IndexRemap, int32 ElementStride = 1)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&OutDest[DestIndex * ElementStride], &InSource[SrcIndex * ElementStride], ElementStride * sizeof(ValueType))"
  },
  {
    "label": "Gather()",
    "kind": "Method",
    "detail": "Function (} } } template<DeltaType,ValueType,InValueArrayType> void)",
    "insertText": "Gather(const DeltaType &Delta, TArray<ValueType> &OutDest, const InValueArrayType &InSource, int32 ElementStride = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutDest = InSource ; } else)",
    "insertText": "if(Delta.IsEmpty())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Delta.IsDelta() || ElementStride != 1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "Reset(Delta.GetNumItems() * ElementStride)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "Append(&InSource[It.GetIndex() * ElementStride], ElementStride)"
  },
  {
    "label": "GatherTransform()",
    "kind": "Method",
    "detail": "Function (} } } template<DeltaType,OutValueType,InValueArrayType,LambdaType> void)",
    "insertText": "GatherTransform(const DeltaType &Delta, TArray<OutValueType> &OutDest, const InValueArrayType &InSource, LambdaType TransformLambda)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { OutDest .)",
    "insertText": "Reset(Delta.GetNumItems())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "Add(TransformLambda(InSource[It.GetIndex()]))"
  }
]