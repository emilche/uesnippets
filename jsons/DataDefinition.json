[
  {
    "label": "CExprDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprDefinition"
  },
  {
    "label": "CExprIdentifierFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprIdentifierFunction"
  },
  {
    "label": "CTypeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeBase"
  },
  {
    "label": "SClassVarAccessorFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SClassVarAccessorFunctions"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CExprDataDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprDataDefinition"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / SemanticScope . h \" # include \" uLang / Common / Text / Symbol . h \" # include \" uLang / Common / Misc / Optional . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / Map . h \" namespace uLang { class CExprDefinition ; class CExprIdentifierFunction ; class CTypeBase ; SAccessLevel::EKind DefaultVarAccessLevelKind = SAccessLevel::EKind::Public ; struct SClassVarAccessorFunctions { TMap<int,const CFunction*> Getters ; TMap<int,const CFunction*> Setters ; CSymbol GetterName ; CSymbol SetterName ; operator)",
    "insertText": "bool()"
  },
  {
    "label": "CDataDefinition()",
    "kind": "Method",
    "detail": "Function (} } ; class CDataDefinition : public CDefinition { public : const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::Data ; class CExprDataDefinition ; bool _bNamed = false ; const CTypeBase* _NegativeType = nullptr ; const CTypeVariable* _ImplicitParam = nullptr ;)",
    "insertText": "CDataDefinition(const CSymbol& IdentName, CScope& EnclosingScope) : CDataDefinition(IdentName, EnclosingScope, nullptr)"
  },
  {
    "label": "CDataDefinition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CDataDefinition(const CSymbol& IdentName, CScope& EnclosingScope, const CTypeBase* Type) : CDefinition(StaticDefinitionKind, EnclosingScope, IdentName) , _Type(Type)"
  },
  {
    "label": "SetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPrototypeDefinition(const CDataDefinition& PrototypeDefinition)"
  },
  {
    "label": "SetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrototypeDefinition(PrototypeDefinition)"
  },
  {
    "label": "GetPrototypeDefinition()",
    "kind": "Method",
    "detail": "Function (} const CDataDefinition*)",
    "insertText": "GetPrototypeDefinition()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAstNode(CExprDefinition* AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (CExprDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(CExprDefinition* AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (CExprDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const CTypeBase* Type)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (_Type = Type ; } const CTypeBase*)",
    "insertText": "GetType()"
  },
  {
    "label": "SetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverriddenDefinition(const CDataDefinition& OverriddenDefinition)"
  },
  {
    "label": "SetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverriddenDefinition(OverriddenDefinition)"
  },
  {
    "label": "GetOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (} const CDataDefinition*)",
    "insertText": "GetOverriddenDefinition()"
  },
  {
    "label": "GetBaseOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (} const CDataDefinition&)",
    "insertText": "GetBaseOverriddenDefinition()"
  },
  {
    "label": "SetHasInitializer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasInitializer()"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(GetPrototypeDefinition() == this)"
  },
  {
    "label": "HasInitializer()",
    "kind": "Method",
    "detail": "Function (_bHasInitializer = true ; } bool)",
    "insertText": "HasInitializer()"
  },
  {
    "label": "SetVarAccessLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVarAccessLevel(TOptional<SAccessLevel>&& AccessLevel)"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(IsVar())"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (_VarAccessLevel =)",
    "insertText": "Move(AccessLevel)"
  },
  {
    "label": "SetIsVar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsVar()"
  },
  {
    "label": "SelfVarAccessLevel()",
    "kind": "Method",
    "detail": "Function (_bIsVar = true ; } const TOptional<SAccessLevel>&)",
    "insertText": "SelfVarAccessLevel()"
  },
  {
    "label": "IsVar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVar()"
  },
  {
    "label": "DerivedVarAccessLevel()",
    "kind": "Method",
    "detail": "Function (} SAccessLevel)",
    "insertText": "DerivedVarAccessLevel()"
  },
  {
    "label": "IsVarWritableFrom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVarWritableFrom(const CScope&)"
  },
  {
    "label": "GetDefinitionVarAccessibilityRoot()",
    "kind": "Method",
    "detail": "Function (const CDataDefinition&)",
    "insertText": "GetDefinitionVarAccessibilityRoot()"
  },
  {
    "label": "IsModuleScopedVar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsModuleScopedVar()"
  },
  {
    "label": "MarkPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPersistenceCompatConstraint()"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  },
  {
    "label": "CanHaveCustomAccessors()",
    "kind": "Method",
    "detail": "Function (SClassVarAccessorFunctions _OptionalAccessors ; bool)",
    "insertText": "CanHaveCustomAccessors()"
  }
]