[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_endian_h_ # define SDL_endian_h_ # include \" SDL_stdinc . h \" # if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER >= 1400) #ifdef __clang__ #ifndef __PRFCHWINTRIN_H #define __PRFCHWINTRIN_H static __inline__ void __attribute__((__always_inline__, __nodebug__)) _m_prefetch(void *__P)"
  },
  {
    "label": "__builtin_prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_prefetch(__P, 0, 3)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # include<intrin . h> # endif # define SDL_LIL_ENDIAN 1 2 3 4 # define SDL_BIG_ENDIAN 4 3 2 1 # ifndef SDL_BYTEORDER # ifdef __linux__ # include<endian . h> # define SDL_BYTEORDER __BYTE_ORDER # elif)",
    "insertText": "defined(__OpenBSD__) || defined(__DragonFly__) #include <endian.h> #define SDL_BYTEORDER BYTE_ORDER #elif defined(__FreeBSD__) || defined(__NetBSD__) #include <sys/endian.h> #define SDL_BYTEORDER BYTE_ORDER #elif defined(__ORDER_LITTLE_ENDIAN__) && defined(__ORDER_BIG_ENDIAN__) && defined(__BYTE_ORDER__) #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) #define SDL_BYTEORDER SDL_LIL_ENDIAN #elif (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) #define SDL_BYTEORDER SDL_BIG_ENDIAN #else #error Unsupported endianness #endif #else #if defined(__hppa__) || \\ defined(__m68k__) || defined(mc68000) || defined(_M_M68K) || \\ (defined(__MIPS__) && defined(__MIPSEB__)) || \\ defined(__ppc__) || defined(__POWERPC__) || defined(__powerpc__) || defined(__PPC__) || \\ defined(__sparc__) #define SDL_BYTEORDER SDL_BIG_ENDIAN #else #define SDL_BYTEORDER SDL_LIL_ENDIAN #endif #endif #endif #ifndef SDL_FLOATWORDORDER #if defined(__ORDER_LITTLE_ENDIAN__) && defined(__ORDER_BIG_ENDIAN__) && defined(__FLOAT_WORD_ORDER__) #if (__FLOAT_WORD_ORDER__ == __ORDER_LITTLE_ENDIAN__) #define SDL_FLOATWORDORDER SDL_LIL_ENDIAN #elif (__FLOAT_WORD_ORDER__ == __ORDER_BIG_ENDIAN__) #define SDL_FLOATWORDORDER SDL_BIG_ENDIAN #else #error Unsupported endianness #endif #elif defined(__MAVERICK__) #define SDL_FLOATWORDORDER SDL_LIL_ENDIAN #elif (defined(__arm__) || defined(__thumb__)) && !defined(__VFP_FP__) && !defined(__ARM_EABI__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) # define HAS_BUILTIN_BSWAP16 (_SDL_HAS_BUILTIN(__builtin_bswap16)) || \\ (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)) # define HAS_BUILTIN_BSWAP32 (_SDL_HAS_BUILTIN(__builtin_bswap32)) || \\ (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)) # define HAS_BUILTIN_BSWAP64 (_SDL_HAS_BUILTIN(__builtin_bswap64)) || \\ (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)) # define HAS_BROKEN_BSWAP (__GNUC__ == 2 && __GNUC_MINOR__ <= 95) #else # define HAS_BUILTIN_BSWAP16 0 # define HAS_BUILTIN_BSWAP32 0 # define HAS_BUILTIN_BSWAP64 0 # define HAS_BROKEN_BSWAP 0 #endif #if HAS_BUILTIN_BSWAP16 #define SDL_Swap16(x) __builtin_bswap16(x) #elif (defined(_MSC_VER) && (_MSC_VER >= 1400)) && !defined(__ICL) #pragma intrinsic(_byteswap_ushort) #define SDL_Swap16(x) _byteswap_ushort(x) #elif defined(__i386__) && !HAS_BROKEN_BSWAP SDL_FORCE_INLINE Uint16 SDL_Swap16(Uint16 x)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"xchgb %b0,%h0\": \"=q\"(x):\"0\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"xchgb %b0,%h0\": \"=Q\"(x):\"0\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (int result ;)",
    "insertText": "__asm__(\"rlwimi %0,%2,8,16,23\": \"=&r\"(result):\"0\"(x >> 8), \"r\"(x))"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "elif(defined(__m68k__) && !defined(__mcoldfire__)) SDL_FORCE_INLINE Uint16 SDL_Swap16(Uint16 x)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"rorw #8,%0\": \"=d\"(x): \"0\"(x):\"cc\")"
  },
  {
    "label": "SDL_Swap16()",
    "kind": "Method",
    "detail": "Function (# pragma aux SDL_Swap16 = \\ \" xchg al,ah \" \\ parm [ ax ] \\ modify [ ax ] ; # else SDL_FORCE_INLINE Uint16)",
    "insertText": "SDL_Swap16(Uint16 x)"
  },
  {
    "label": "SDL_Swap32()",
    "kind": "Method",
    "detail": "Function (} # endif # if HAS_BUILTIN_BSWAP32 # define)",
    "insertText": "SDL_Swap32(x) __builtin_bswap32(x) #elif (defined(_MSC_VER) && (_MSC_VER >= 1400)) && !defined(__ICL) #pragma intrinsic(_byteswap_ulong) #define SDL_Swap32(x) _byteswap_ulong(x) #elif defined(__i386__) && !HAS_BROKEN_BSWAP SDL_FORCE_INLINE Uint32 SDL_Swap32(Uint32 x)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"bswap %0\": \"=r\"(x):\"0\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"bswapl %0\": \"=r\"(x):\"0\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (Uint32 result ;)",
    "insertText": "__asm__(\"rlwimi %0,%2,24,16,23\": \"=&r\"(result): \"0\" (x>>24), \"r\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"rlwimi %0,%2,8,8,15\" : \"=&r\"(result): \"0\" (result), \"r\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"rlwimi %0,%2,24,0,7\" : \"=&r\"(result): \"0\" (result), \"r\"(x))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"rorw #8,%0\\n\\tswap %0\\n\\trorw #8,%0\": \"=d\"(x): \"0\"(x):\"cc\")"
  },
  {
    "label": "SDL_Swap32()",
    "kind": "Method",
    "detail": "Function (# pragma aux SDL_Swap32 = \\ \" bswap eax \" \\ parm [ eax ] \\ modify [ eax ] ; # else SDL_FORCE_INLINE Uint32)",
    "insertText": "SDL_Swap32(Uint32 x)"
  },
  {
    "label": "SDL_Swap64()",
    "kind": "Method",
    "detail": "Function (} # endif # if HAS_BUILTIN_BSWAP64 # define)",
    "insertText": "SDL_Swap64(x) __builtin_bswap64(x) #elif (defined(_MSC_VER) && (_MSC_VER >= 1400)) && !defined(__ICL) #pragma intrinsic(_byteswap_uint64) #define SDL_Swap64(x) _byteswap_uint64(x) #elif defined(__i386__) && !HAS_BROKEN_BSWAP SDL_FORCE_INLINE Uint64 SDL_Swap64(Uint64 x)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (union { struct { Uint32 a,b ; } s ; Uint64 u ; } v ; v . u = x ;)",
    "insertText": "__asm__(\"bswapl %0 ; bswapl %1 ; xchgl %0,%1\" : \"=r\"(v.s.a), \"=r\"(v.s.b) : \"0\" (v.s.a), \"1\"(v.s.b))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"bswapq %0\": \"=r\"(x):\"0\"(x))"
  },
  {
    "label": "SDL_Swap64()",
    "kind": "Method",
    "detail": "Function (# pragma aux SDL_Swap64 = \\ \" bswap eax \" \\ \" bswap edx \" \\ \" xchg eax,edx \" \\ parm [ eax edx ] \\ modify [ eax edx ] ; # else SDL_FORCE_INLINE Uint64)",
    "insertText": "SDL_Swap64(Uint64 x)"
  },
  {
    "label": "SDL_static_cast()",
    "kind": "Method",
    "detail": "Function (Uint32 hi,lo ; lo =)",
    "insertText": "SDL_static_cast(Uint32, x & 0xFFFFFFFF)"
  },
  {
    "label": "SDL_Swap32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "SDL_Swap32(lo)"
  },
  {
    "label": "SDL_Swap32()",
    "kind": "Method",
    "detail": "Function (x<<= 3 2 ; x | =)",
    "insertText": "SDL_Swap32(hi)"
  },
  {
    "label": "SDL_SwapFloat()",
    "kind": "Method",
    "detail": "Function (} # endif SDL_FORCE_INLINE float)",
    "insertText": "SDL_SwapFloat(float x)"
  },
  {
    "label": "SDL_Swap32()",
    "kind": "Method",
    "detail": "Function (union { float f ; Uint32 ui32 ; } swapper ; swapper . f = x ; swapper . ui32 =)",
    "insertText": "SDL_Swap32(swapper.ui32)"
  }
]