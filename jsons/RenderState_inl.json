[
  {
    "label": "SRenderState()",
    "kind": "Method",
    "detail": "Function (ST_INLINE)",
    "insertText": "SRenderState() : m_eLightingModel(LIGHTING_MODEL_PER_VERTEX), m_vAmbientColor(1.0f, 1.0f, 1.0f), m_eAmbientContrast(EFFECT_OFF), m_fAmbientContrastFactor(0.0f), m_bAmbientOcclusion(false), m_vDiffuseColor(1.0f, 1.0f, 1.0f), m_fDiffuseScalar(1.0f), m_bDiffuseAlphaMaskIsOpaque(false), m_eDetailLayer(EFFECT_OFF), m_eSpecular(EFFECT_OFF), m_fShininess(30.0f), m_vSpecularColor(1.0f, 1.0f, 1.0f), m_eTransmission(EFFECT_OFF), m_vTransmissionColor(1.0f, 1.0f, 0.0f), m_fTransmissionShadowBrightness(0.2f), m_fTransmissionViewDependency(0.5f), m_eBranchSeamSmoothing(EFFECT_OFF), m_fBranchSeamWeight(1.0f), m_eLodMethod(LOD_METHOD_POP), m_bFadeToBillboard(true), m_bVertBillboard(false), m_bHorzBillboard(false), m_eShaderGenerationMode(SHADER_GEN_MODE_STANDARD), m_bUsedAsGrass(false), m_eFaceCulling(CULLTYPE_NONE), m_bBlending(false), m_eAmbientImageLighting(EFFECT_OFF), m_eHueVariation(EFFECT_OFF), m_eFogCurve(FOG_CURVE_NONE), m_eFogColorStyle(FOG_COLOR_TYPE_CONSTANT), m_bCastsShadows(false), m_bReceivesShadows(false), m_bShadowSmoothing(false), m_fAlphaScalar(1.4f), m_eWindLod(WIND_LOD_NONE), m_eRenderPass(RENDER_PASS_MAIN), m_bBranchesPresent(false), m_bFrondsPresent(false), m_bLeavesPresent(false), m_bFacingLeavesPresent(false), m_bRigidMeshesPresent(false), m_pDescription(NULL), m_pUserData(NULL)"
  },
  {
    "label": "StringsEqual()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "StringsEqual(const char* pA, const char* pB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bEqual = false ;)",
    "insertText": "if(pA && pB) bEqual = (strcmp(pA, pB) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bLess = false ;)",
    "insertText": "if(pA && pB) bLess = (strcmp(pA, pB) < 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "operator(const SRenderState& sRight)"
  },
  {
    "label": "IsPerPixelModelActive()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsPerPixelModelActive(void)"
  },
  {
    "label": "IsLightingModelInTransition()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsLightingModelInTransition(void)"
  },
  {
    "label": "Get5xModeHashName()",
    "kind": "Method",
    "detail": "Function (} CFixedString)",
    "insertText": "Get5xModeHashName(const SRenderState& sRenderState)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CFixedString strName ;)",
    "insertText": "if(sRenderState.m_bVertBillboard)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (strName = \" Billboard \" ; } else)",
    "insertText": "if(sRenderState.m_bUsedAsGrass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (strName = \" Grass \" ; } else {)",
    "insertText": "if(sRenderState.m_bBranchesPresent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CFixedString strHashName ;)",
    "insertText": "if(ShaderGenHasFixedDecls( ))"
  },
  {
    "label": "Get5xModeHashName()",
    "kind": "Method",
    "detail": "Function (strHashName =)",
    "insertText": "Get5xModeHashName(*this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!m_bVertBillboard)"
  },
  {
    "label": "VertexDeclHash()",
    "kind": "Method",
    "detail": "Function (strHashName + =)",
    "insertText": "VertexDeclHash()"
  },
  {
    "label": "PixelDeclHash()",
    "kind": "Method",
    "detail": "Function (strHashName + =)",
    "insertText": "PixelDeclHash()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_int32 nFadeFlags = 0 ;)",
    "insertText": "if(m_eAmbientContrast == EFFECT_OFF_X_ON)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(m_eRenderPass == RENDER_PASS_DEPTH_PREPASS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (st_uint32 uiWindOptions = 0 ; st_uint32 uiBit = 1 ;)",
    "insertText": "assert(CWind::NUM_WIND_OPTIONS <= 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uiBit* = 2 ; } })",
    "insertText": "if(IsBranchWindEnabled( ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uiBit* = 2 ; } })",
    "insertText": "if(IsFullWindEnabled( ) && (m_bLeavesPresent || m_bFacingLeavesPresent))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uiBit* = 2 ; })",
    "insertText": "for(st_int32 i = CWind::LEAF_RIPPLE_VERTEX_NORMAL_2; i <= CWind::LEAF_OCCLUSION_2; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uiBit* = 2 ; } })",
    "insertText": "if(IsFullWindEnabled( ) && m_bFrondsPresent)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (uiBit* = 2 ; } } strHashName + =)",
    "insertText": "Format(\"_w%d%x\", m_eWindLod, uiWindOptions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { strHashName = \" Billboard \" ;)",
    "insertText": "if(m_bHorzBillboard)"
  },
  {
    "label": "PixelShaderHashName()",
    "kind": "Method",
    "detail": "Function (} } return strHashName ; } CFixedString)",
    "insertText": "PixelShaderHashName(EShadowConfig eShadowConfig)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(m_bVertBillboard)"
  },
  {
    "label": "strHashName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strHashName(m_eRenderPass == RENDER_PASS_MAIN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_int32 nEffectFlags = 0 ;)",
    "insertText": "if(m_eDetailLayer != EFFECT_OFF) nEffectFlags += st_int32(m_eDetailLayer)"
  },
  {
    "label": "GetPixelProperties()",
    "kind": "Method",
    "detail": "Function (} else { strHashName + = \" _do \" ; } } } return strHashName ; } ST_INLINE void)",
    "insertText": "GetPixelProperties(st_bool abPixelProperties[PIXEL_PROPERTY_COUNT])"
  },
  {
    "label": "bDeferred()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "bDeferred(m_eLightingModel == LIGHTING_MODEL_DEFERRED)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_POSITION ] = true ; abPixelProperties [ PIXEL_PROPERTY_DIFFUSE_TEXCOORDS ] = true ; bool bDetailLayerActive = false ;)",
    "insertText": "if(m_eRenderPass == RENDER_PASS_MAIN && m_eDetailLayer != EFFECT_OFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_DETAIL_TEXCOORDS ] = true ; bDetailLayerActive = true ; })",
    "insertText": "if(m_eRenderPass == RENDER_PASS_MAIN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_NORMAL ] = true ; abPixelProperties [ PIXEL_PROPERTY_TANGENT ] = true ; } else {)",
    "insertText": "if(IsPerPixelModelActive( ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_SPECULAR_HALF_VECTOR ] = true ;)",
    "insertText": "if(IsLightingModelInTransition( ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else abPixelProperties [ PIXEL_PROPERTY_PER_VERTEX_SPECULAR_DOT ] = true ; })",
    "insertText": "if(m_eAmbientContrast != EFFECT_OFF && m_eLightingModel != LIGHTING_MODEL_PER_PIXEL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_FOG_SCALAR ] = true ;)",
    "insertText": "if(m_eFogColorStyle == FOG_COLOR_TYPE_DYNAMIC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_RENDER_EFFECT_FADE ] = true ; })",
    "insertText": "if(m_eBranchSeamSmoothing != EFFECT_OFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (abPixelProperties [ PIXEL_PROPERTY_BRANCH_SEAM_DIFFUSE ] = true ;)",
    "insertText": "if(bDetailLayerActive)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ShaderGenHasFixedDecls( ) || m_bFadeToBillboard || m_bUsedAsGrass)"
  },
  {
    "label": "GetInstanceType()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE SVertexDecl::EInstanceType)",
    "insertText": "GetInstanceType(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SVertexDecl::EInstanceType eInstanceType = SVertexDecl::INSTANCES_NONE ;)",
    "insertText": "if(m_bUsedAsGrass)"
  },
  {
    "label": "ShaderGenerationMode()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE EShaderGenerationMode)",
    "insertText": "ShaderGenerationMode(void)"
  },
  {
    "label": "VertexDeclHash()",
    "kind": "Method",
    "detail": "Function (} CFixedString)",
    "insertText": "VertexDeclHash(void)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_int32 nEncodedVertexDecl = 0 ; st_int32 nBit = 1 ;)",
    "insertText": "for(st_int32 i = 0; i < VERTEX_PROPERTY_COUNT; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const SVertexDecl::SProperty& sProp = m_sVertexDecl . m_asProperties [ i ] ;)",
    "insertText": "if(sProp.IsPresent( ))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (nBit* = 2 ; } return)",
    "insertText": "Format(\"%x\", nEncodedVertexDecl)"
  },
  {
    "label": "PixelDeclHash()",
    "kind": "Method",
    "detail": "Function (} CFixedString)",
    "insertText": "PixelDeclHash(void)"
  },
  {
    "label": "GetPixelProperties()",
    "kind": "Method",
    "detail": "Function (CFixedString strHash ; st_bool abPixelProperties [ PIXEL_PROPERTY_COUNT ] ;)",
    "insertText": "GetPixelProperties(abPixelProperties)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_int32 nEncodedPixelDecl = 0 ; st_int32 nBit = 1 ;)",
    "insertText": "for(st_int32 i = 0; i < PIXEL_PROPERTY_COUNT; ++i)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (nBit* = 2 ; } return)",
    "insertText": "Format(\"%x\", nEncodedPixelDecl)"
  },
  {
    "label": "IsBranchWindEnabled()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsBranchWindEnabled(void)"
  },
  {
    "label": "IsGlobalWindEnabled()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsGlobalWindEnabled(void)"
  },
  {
    "label": "IsFullWindEnabled()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IsFullWindEnabled(void)"
  },
  {
    "label": "MakeDepthOnly()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "MakeDepthOnly(void)"
  },
  {
    "label": "MakeShadowCast()",
    "kind": "Method",
    "detail": "Function (m_eRenderPass = RENDER_PASS_DEPTH_PREPASS ; } ST_INLINE void)",
    "insertText": "MakeShadowCast(void)"
  },
  {
    "label": "HasOnlyBranches()",
    "kind": "Method",
    "detail": "Function (m_bFadeToBillboard = false ; m_eRenderPass = RENDER_PASS_SHADOW_CAST ; } ST_INLINE st_bool)",
    "insertText": "HasOnlyBranches(void)"
  },
  {
    "label": "HasOnlyFronds()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "HasOnlyFronds(void)"
  },
  {
    "label": "HasOnlyLeaves()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "HasOnlyLeaves(st_bool bFacing, st_bool bNonFacing)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bReturn = false ;)",
    "insertText": "if(!bFacing && !bNonFacing)"
  }
]