[
  {
    "label": "UFontBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFontBulkData"
  },
  {
    "label": "FFontFaceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontFaceData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFontRasterizationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontRasterizationSettings"
  },
  {
    "label": "FFontData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontData"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FTypefaceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypefaceEntry"
  },
  {
    "label": "FTypeface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeface"
  },
  {
    "label": "FCompositeFallbackFont",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeFallbackFont"
  },
  {
    "label": "FCompositeSubFont",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeSubFont"
  },
  {
    "label": "FCompositeFont",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeFont"
  },
  {
    "label": "FStandaloneCompositeFont",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStandaloneCompositeFont"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / FontRasterizationMode . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / GCObject . h \" # include \" UObject / Class . h \" # include \" CompositeFont . generated . h \" class UFontBulkData ; struct FFontFaceData ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FFontFaceData()",
    "kind": "Method",
    "detail": "Function (Metrics,BoundingBox,} ; typedef TSharedPtr<FFontFaceData,ESPMode::ThreadSafe> FFontFaceDataPtr ; typedef TSharedRef<FFontFaceData,ESPMode::ThreadSafe> FFontFaceDataRef ; typedef TSharedPtr<const FFontFaceData,ESPMode::ThreadSafe> FFontFaceDataConstPtr ; typedef TSharedRef<const FFontFaceData,ESPMode::ThreadSafe> FFontFaceDataConstRef ; struct FFontFaceData { public :)",
    "insertText": "FFontFaceData()"
  },
  {
    "label": "FFontFaceData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFontFaceData(TArray<uint8>&& InData) : Data(MoveTemp(InData))"
  },
  {
    "label": "TrackMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackMemoryUsage()"
  },
  {
    "label": "UntrackMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntrackMemoryUsage()"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasData()"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(TArray<uint8>&& InData)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "MoveTemp(InData)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const TArray<uint8>&)",
    "insertText": "GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Ar<<Data ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "MakeFontFaceData()",
    "kind": "Method",
    "detail": "Function (} } FFontFaceDataRef)",
    "insertText": "MakeFontFaceData()"
  },
  {
    "label": "MakeFontFaceData()",
    "kind": "Method",
    "detail": "Function (} FFontFaceDataRef)",
    "insertText": "MakeFontFaceData(TArray<uint8>&& InData)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Data ; } ; struct FFontRasterizationSettings { EFontRasterizationMode Mode = EFontRasterizationMode::Bitmap ; int32 DistanceFieldPpem = 0 ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() SLATECORE_API FFontData()"
  },
  {
    "label": "FFontData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFontData(const UObject* const InFontFaceAsset, const int32 InSubFaceIndex = 0)"
  },
  {
    "label": "FFontData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFontData(FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy, const int32 InSubFaceIndex = 0)"
  },
  {
    "label": "HasFont()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFont()"
  },
  {
    "label": "GetFontFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFontFilename()"
  },
  {
    "label": "GetHinting()",
    "kind": "Method",
    "detail": "Function (EFontHinting)",
    "insertText": "GetHinting()"
  },
  {
    "label": "GetLoadingPolicy()",
    "kind": "Method",
    "detail": "Function (EFontLoadingPolicy)",
    "insertText": "GetLoadingPolicy()"
  },
  {
    "label": "GetSubFaceIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSubFaceIndex()"
  },
  {
    "label": "SetSubFaceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubFaceIndex(const int32 InSubFaceIndex)"
  },
  {
    "label": "GetLayoutMethod()",
    "kind": "Method",
    "detail": "Function (EFontLayoutMethod)",
    "insertText": "GetLayoutMethod()"
  },
  {
    "label": "IsAscendOverridden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAscendOverridden()"
  },
  {
    "label": "GetAscendOverriddenValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAscendOverriddenValue()"
  },
  {
    "label": "IsDescendOverridden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDescendOverridden()"
  },
  {
    "label": "GetDescendOverriddenValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDescendOverriddenValue()"
  },
  {
    "label": "GetStrikeBrushHeightPercentage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStrikeBrushHeightPercentage()"
  },
  {
    "label": "GetFontFaceData()",
    "kind": "Method",
    "detail": "Function (FFontFaceDataConstPtr)",
    "insertText": "GetFontFaceData()"
  },
  {
    "label": "GetFontFaceAsset()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetFontFaceAsset()"
  },
  {
    "label": "GetFontRasterizationSettings()",
    "kind": "Method",
    "detail": "Function (FFontRasterizationSettings)",
    "insertText": "GetFontRasterizationSettings()"
  },
  {
    "label": "HasLegacyData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "HasLegacyData()"
  },
  {
    "label": "ConditionalUpgradeFontDataToBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpgradeFontDataToBulkData(UObject* InOuter)"
  },
  {
    "label": "ConditionalUpgradeBulkDataToFontFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpgradeBulkDataToFontFace(UObject* InOuter, UClass* InFontFaceClass, const FName InFontFaceName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "operator(const FFontData& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FFontData& Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash = 0 ;)",
    "insertText": "if(Key.FontFaceAsset)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.FontFaceAsset))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (} else { KeyHash =)",
    "insertText": "HashCombine(KeyHash, Key.FontFilenameHash)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.Hinting))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.LoadingPolicy))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (} KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.SubFaceIndex))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FFontData& InFontData)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (InFontData .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTypefaceEntry()"
  },
  {
    "label": "FTypefaceEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypefaceEntry(const FName& InFontName) : Name(InFontName)"
  },
  {
    "label": "FTypefaceEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypefaceEntry(const FName& InFontName, FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy) : Name(InFontName) , Font(MoveTemp(InFontFilename), InHinting, InLoadingPolicy)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTypeface()"
  },
  {
    "label": "FTypeface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypeface(const FName& InFontName, FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Fonts .)",
    "insertText": "Emplace(InFontName, MoveTemp(InFontFilename), InHinting, InLoadingPolicy)"
  },
  {
    "label": "AppendFont()",
    "kind": "Method",
    "detail": "Function (} FTypeface&)",
    "insertText": "AppendFont(const FName& InFontName, FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCompositeFallbackFont() : Typeface() , ScalingFactor(1.0f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCompositeSubFont()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCompositeFont() : DefaultTypeface() , SubTypefaces() #if WITH_EDITORONLY_DATA , HistoryRevision(0)"
  },
  {
    "label": "FCompositeFont()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompositeFont(const FName& InFontName, FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy) : DefaultTypeface(InFontName, MoveTemp(InFontFilename), InHinting, InLoadingPolicy) , SubTypefaces() #if WITH_EDITORONLY_DATA , HistoryRevision(0)"
  },
  {
    "label": "MakeDirty()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA void)",
    "insertText": "MakeDirty()"
  },
  {
    "label": "IsAscentDescentOverrideEnabled()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA int32 HistoryRevision ; # endif bool)",
    "insertText": "IsAscentDescentOverrideEnabled()"
  },
  {
    "label": "FStandaloneCompositeFont()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStandaloneCompositeFont(const FName& InFontName, FString InFontFilename, const EFontHinting InHinting, const EFontLoadingPolicy InLoadingPolicy) : FCompositeFont(InFontName, MoveTemp(InFontFilename), InHinting, InLoadingPolicy)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  }
]