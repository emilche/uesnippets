[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "TargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetOptions"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "LTOModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LTOModule"
  },
  {
    "label": "NameAndAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameAndAttributes"
  },
  {
    "label": "LTOModule()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LTO_LTOMODULE_H # define LLVM_LTO_LTOMODULE_H # include \" llvm - c / lto . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringSet . h \" # include \" llvm / IR / Module . h \" # include \" llvm / MC / MCContext . h \" # include \" llvm / MC / MCObjectFileInfo . h \" # include \" llvm / Object / IRObjectFile . h \" # include \" llvm / Target / TargetMachine . h \" # include<string> # include<vector> namespace llvm { class Function ; class GlobalValue ; class MemoryBuffer ; class TargetOptions ; class Value ; struct LTOModule { private : struct NameAndAttributes { const char* name ; uint32_t attributes ; bool isFunction ; const GlobalValue* symbol ; } ; std::unique_ptr<LLVMContext> OwnedContext ; std::string LinkerOpts ; std::unique_ptr<object::IRObjectFile> IRFile ; std::unique_ptr<TargetMachine> _target ; std::vector<NameAndAttributes> _symbols ; StringSet<> _defines ; StringMap<NameAndAttributes> _undefines ; std::vector<const char*> _asm_undefines ;)",
    "insertText": "LTOModule(std::unique_ptr<object::IRObjectFile> Obj, TargetMachine *TM)"
  },
  {
    "label": "LTOModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LTOModule(std::unique_ptr<object::IRObjectFile> Obj, TargetMachine *TM, std::unique_ptr<LLVMContext> Context)"
  },
  {
    "label": "LTOModule()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "LTOModule()"
  },
  {
    "label": "isBitcodeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeFile(const void *mem, size_t length)"
  },
  {
    "label": "isBitcodeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeFile(const char *path)"
  },
  {
    "label": "isBitcodeForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeForTarget(MemoryBuffer *memBuffer, StringRef triplePrefix)"
  },
  {
    "label": "makeBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryBuffer>)",
    "insertText": "makeBuffer(const void *mem, size_t length, StringRef name = \"\")"
  },
  {
    "label": "createFromFile()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createFromFile(const char *path, TargetOptions options, std::string &errMsg)"
  },
  {
    "label": "createFromOpenFile()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createFromOpenFile(int fd, const char *path, size_t size, TargetOptions options, std::string &errMsg)"
  },
  {
    "label": "createFromOpenFileSlice()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createFromOpenFileSlice(int fd, const char *path, size_t map_size, off_t offset, TargetOptions options, std::string &errMsg)"
  },
  {
    "label": "createFromBuffer()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createFromBuffer(const void *mem, size_t length, TargetOptions options, std::string &errMsg, StringRef path = \"\")"
  },
  {
    "label": "createInLocalContext()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createInLocalContext(const void *mem, size_t length, TargetOptions options, std::string &errMsg, StringRef path)"
  },
  {
    "label": "createInContext()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "createInContext(const void *mem, size_t length, TargetOptions options, std::string &errMsg, StringRef path, LLVMContext *Context)"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (const Module&)",
    "insertText": "getModule()"
  },
  {
    "label": "getTargetTriple()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "getTargetTriple()"
  },
  {
    "label": "setTargetTriple()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTargetTriple(StringRef Triple)"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getModule().setTargetTriple(Triple)"
  },
  {
    "label": "getSymbolCount()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getSymbolCount()"
  },
  {
    "label": "getSymbolAttributes()",
    "kind": "Method",
    "detail": "Function (} lto_symbol_attributes)",
    "insertText": "getSymbolAttributes(uint32_t index)"
  },
  {
    "label": "getSymbolName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSymbolName(uint32_t index)"
  },
  {
    "label": "getAsmUndefinedRefs()",
    "kind": "Method",
    "detail": "Function (} const std::vector<const char*>&)",
    "insertText": "getAsmUndefinedRefs()"
  },
  {
    "label": "parseSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseSymbols(std::string &errMsg)"
  },
  {
    "label": "addPotentialUndefinedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPotentialUndefinedSymbol(const object::BasicSymbolRef &Sym, bool isFunc)"
  },
  {
    "label": "addDefinedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedSymbol(const char *Name, const GlobalValue *def, bool isFunction)"
  },
  {
    "label": "addDefinedDataSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedDataSymbol(const object::BasicSymbolRef &Sym)"
  },
  {
    "label": "addDefinedDataSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedDataSymbol(const char*Name, const GlobalValue *v)"
  },
  {
    "label": "addDefinedFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedFunctionSymbol(const object::BasicSymbolRef &Sym)"
  },
  {
    "label": "addDefinedFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedFunctionSymbol(const char *Name, const Function *F)"
  },
  {
    "label": "addAsmGlobalSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAsmGlobalSymbol(const char *, lto_symbol_attributes scope)"
  },
  {
    "label": "addAsmGlobalSymbolUndef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAsmGlobalSymbolUndef(const char *)"
  },
  {
    "label": "addObjCClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCClass(const GlobalVariable *clgv)"
  },
  {
    "label": "addObjCCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCCategory(const GlobalVariable *clgv)"
  },
  {
    "label": "addObjCClassRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCClassRef(const GlobalVariable *clgv)"
  },
  {
    "label": "objcClassNameFromExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "objcClassNameFromExpression(const Constant *c, std::string &name)"
  },
  {
    "label": "makeLTOModule()",
    "kind": "Method",
    "detail": "Function (LTOModule*)",
    "insertText": "makeLTOModule(MemoryBufferRef Buffer, TargetOptions options, std::string &errMsg, LLVMContext *Context)"
  }
]