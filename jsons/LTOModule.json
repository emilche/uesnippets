[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "TargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetOptions"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "LTOModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LTOModule"
  },
  {
    "label": "NameAndAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NameAndAttributes"
  },
  {
    "label": "data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "data"
  },
  {
    "label": "list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "list"
  },
  {
    "label": "isBitcodeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeFile(const void *mem, size_t length)"
  },
  {
    "label": "isBitcodeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeFile(const char *path)"
  },
  {
    "label": "isBitcodeForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeForTarget(MemoryBuffer *memBuffer,\n                                 StringRef triplePrefix)"
  },
  {
    "label": "makeBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryBuffer>)",
    "insertText": "makeBuffer(const void *mem, size_t length, StringRef name = \"\")"
  },
  {
    "label": "lto_symbol_attributes()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "lto_symbol_attributes(_symbols[index].attributes)"
  },
  {
    "label": "lto_symbol_attributes()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "lto_symbol_attributes(0)"
  },
  {
    "label": "parseMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseMetadata()"
  },
  {
    "label": "parseSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseSymbols(std::string &errMsg)"
  },
  {
    "label": "addPotentialUndefinedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPotentialUndefinedSymbol(const object::BasicSymbolRef &Sym,\n                                   bool isFunc)"
  },
  {
    "label": "addDefinedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedSymbol(const char *Name, const GlobalValue *def,\n                        bool isFunction)"
  },
  {
    "label": "addDefinedDataSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedDataSymbol(const object::BasicSymbolRef &Sym)"
  },
  {
    "label": "addDefinedDataSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedDataSymbol(const char*Name, const GlobalValue *v)"
  },
  {
    "label": "addDefinedFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedFunctionSymbol(const object::BasicSymbolRef &Sym)"
  },
  {
    "label": "addDefinedFunctionSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefinedFunctionSymbol(const char *Name, const Function *F)"
  },
  {
    "label": "addAsmGlobalSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAsmGlobalSymbol(const char *, lto_symbol_attributes scope)"
  },
  {
    "label": "addAsmGlobalSymbolUndef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAsmGlobalSymbolUndef(const char *)"
  },
  {
    "label": "addObjCClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCClass(const GlobalVariable *clgv)"
  },
  {
    "label": "addObjCCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCCategory(const GlobalVariable *clgv)"
  },
  {
    "label": "addObjCClassRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addObjCClassRef(const GlobalVariable *clgv)"
  },
  {
    "label": "objcClassNameFromExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "objcClassNameFromExpression(const Constant *c, std::string &name)"
  }
]