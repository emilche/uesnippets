[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEventQuantizationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventQuantizationSettings"
  },
  {
    "label": "IQuantizedEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQuantizedEventListener"
  },
  {
    "label": "FEventQuantizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventQuantizer"
  },
  {
    "label": "FEventQuantizationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventQuantizationState"
  },
  {
    "label": "FEventQuantizationSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { enum class EEventQuantization : uint8 { None,Bars8,Bars4,Bars2,Bar,HalfNote,HalfNoteTriplet,QuarterNote,QuarterNoteTriplet,EighthNote,EighthNoteTriplet,SixteenthNote,SixteenthNoteTriplet,ThirtySecondNote,Count,} ; struct FEventQuantizationSettings { uint32 SampleRate ; uint32 NumChannels ; float BeatsPerMinute ; uint32 BeatsPerBar ; EEventQuantization GlobalQuantization ; uint16 BeatDivision ;)",
    "insertText": "FEventQuantizationSettings() : SampleRate(0.0f) , NumChannels(2) , BeatsPerMinute(90.0f) , BeatsPerBar(4) , GlobalQuantization(EEventQuantization::Bar) , BeatDivision(4)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (} } ; class IQuantizedEventListener { public : void)",
    "insertText": "OnEvent(EEventQuantization EventQuantizationType, int32 Bars, float Beat)"
  },
  {
    "label": "FEventQuantizer()",
    "kind": "Method",
    "detail": "Function (} ; class FEventQuantizer { public :)",
    "insertText": "FEventQuantizer()"
  },
  {
    "label": "SetQuantizationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQuantizationSettings(const FEventQuantizationSettings& QuantizationSettings)"
  },
  {
    "label": "GetQuantizationSettings()",
    "kind": "Method",
    "detail": "Function (const FEventQuantizationSettings&)",
    "insertText": "GetQuantizationSettings()"
  },
  {
    "label": "GetBPM()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBPM()"
  },
  {
    "label": "GetBeatDivision()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetBeatDivision()"
  },
  {
    "label": "GetDurationInFrames()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDurationInFrames(int32 NumBars, float NumBeats)"
  },
  {
    "label": "NotifyEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyEvents(int32 NumFrames)"
  },
  {
    "label": "EnqueueEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEvent(EEventQuantization InQuantization, TFunction<void(uint32 NumFramesOffset)> Lambda)"
  },
  {
    "label": "RegisterListenerForEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterListenerForEvent(IQuantizedEventListener* InListener, EEventQuantization InQuantization)"
  },
  {
    "label": "UnregisterListenerForEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterListenerForEvent(IQuantizedEventListener* InListener)"
  },
  {
    "label": "UnregisterListenerForEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterListenerForEvent(IQuantizedEventListener* InListener, EEventQuantization InQuantization)"
  },
  {
    "label": "SetQuantizationSettingsInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetQuantizationSettingsInternal(const FEventQuantizationSettings& QuantizationSettings)"
  },
  {
    "label": "SetBPMInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBPMInternal(const float InBPM)"
  },
  {
    "label": "ResetEventState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEventState()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct FEventQuantizationState { uint32 FrameCount ; uint32 EventFrameDuration ; TArray<TFunction<)",
    "insertText": "void(uint32 NumFramesOffset)"
  },
  {
    "label": "FEventQuantizationState()",
    "kind": "Method",
    "detail": "Function (TArray<IQuantizedEventListener*> EventListeners ;)",
    "insertText": "FEventQuantizationState() : FrameCount(0) , EventFrameDuration(INDEX_NONE)"
  },
  {
    "label": "NotifyEventForState()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "NotifyEventForState(FEventQuantizationState& State, EEventQuantization Type, bool bIsQuantizationEvent, int32 NumFrames)"
  },
  {
    "label": "EventQuantizationStates()",
    "kind": "Method",
    "detail": "Function (FEventQuantizationSettings QuantizationSettings ; EEventQuantization EventQuantizationForSettingsChange ; FEventQuantizationState)",
    "insertText": "EventQuantizationStates(int32)"
  }
]