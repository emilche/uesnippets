[
  {
    "label": "Basis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Basis"
  },
  {
    "label": "Basis()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_BASIS_H # define NV_MATH_BASIS_H # include<nvmath / nvmath . h> # include<nvmath / Vector . h> # include<nvmath / Matrix . h> namespace nv { struct Basis {)",
    "insertText": "Basis() : tangent(0, 0, 0), bitangent(0, 0, 0), normal(0, 0, 0)"
  },
  {
    "label": "Basis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Basis(Vector3::Arg n, Vector3::Arg t, Vector3::Arg b) : tangent(t), bitangent(b), normal(n)"
  },
  {
    "label": "Basis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Basis(Vector3::Arg n, Vector3::Arg t, float sign)"
  },
  {
    "label": "build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "build(n, t, sign)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "normalize(float epsilon = NV_EPSILON)"
  },
  {
    "label": "orthonormalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "orthonormalize(float epsilon = NV_EPSILON)"
  },
  {
    "label": "robustOrthonormalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "robustOrthonormalize(float epsilon = NV_EPSILON)"
  },
  {
    "label": "buildFrameForDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildFrameForDirection(Vector3::Arg d)"
  },
  {
    "label": "handness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "handness()"
  },
  {
    "label": "build()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "build(Vector3::Arg n, Vector3::Arg t, float sign)"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (normal = n ; tangent = t ; bitangent = sign*)",
    "insertText": "cross(t, n)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "determinant()"
  }
]