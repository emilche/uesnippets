[
  {
    "label": "SmallString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallString"
  },
  {
    "label": "SmallString()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SMALLSTRING_H # define LLVM_ADT_SMALLSTRING_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" namespace llvm { template<unsigned InternalLen> class SmallString : public SmallVector<char,InternalLen> { public :)",
    "insertText": "SmallString()"
  },
  {
    "label": "SmallString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallString(StringRef S) : SmallVector<char, InternalLen>(S.begin(), S.end())"
  },
  {
    "label": "SmallString()",
    "kind": "Method",
    "detail": "Function (} template<ItTy>)",
    "insertText": "SmallString(ItTy S, ItTy E) : SmallVector<char, InternalLen>(S, E)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(size_t NumElts, char Elt)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this -> SmallVectorImpl<char)",
    "insertText": "assign(NumElts, Elt)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} template<in_iter> void)",
    "insertText": "assign(in_iter S, in_iter E)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "clear()"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<char)",
    "insertText": "append(S, E)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(StringRef RHS)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<char)",
    "insertText": "append(RHS.begin(), RHS.end())"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(const SmallVectorImpl<char> &RHS)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} template<in_iter> void)",
    "insertText": "append(in_iter S, in_iter E)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "append(size_t NumInputs, char Elt)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<char)",
    "insertText": "append(NumInputs, Elt)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "append(StringRef RHS)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "append(const SmallVectorImpl<char> &RHS)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equals(StringRef RHS)"
  },
  {
    "label": "equals_lower()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equals_lower(StringRef RHS)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(StringRef RHS)"
  },
  {
    "label": "compare_lower()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare_lower(StringRef RHS)"
  },
  {
    "label": "compare_numeric()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare_numeric(StringRef RHS)"
  },
  {
    "label": "startswith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "startswith(StringRef Prefix)"
  },
  {
    "label": "endswith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "endswith(StringRef Suffix)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find(char C, size_t From = 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find(StringRef Str, size_t From = 0)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "rfind(char C, size_t From = StringRef::npos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "rfind(StringRef Str)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_first_of(char C, size_t From = 0)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_first_of(StringRef Chars, size_t From = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_first_not_of(char C, size_t From = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_first_not_of(StringRef Chars, size_t From = 0)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_last_of(char C, size_t From = StringRef::npos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "find_last_of(StringRef Chars, size_t From = StringRef::npos)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "count(char C)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "count(StringRef Str)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "substr(size_t Start, size_t N = StringRef::npos)"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "slice(size_t Start, size_t End)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "str()"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "c_str()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "push_back(0)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "pop_back()"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "StringRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const SmallString&)",
    "insertText": "operator(StringRef RHS)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "push_back(C)"
  }
]