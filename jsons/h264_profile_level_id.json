[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "H264ProfileLevelId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "H264ProfileLevelId"
  },
  {
    "label": "H264ProfileLevelId()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_H264_PROFILE_LEVEL_ID_H_ # define API_VIDEO_CODECS_H264_PROFILE_LEVEL_ID_H_ # include<string> # include \" absl / types / optional . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class H264Profile { kProfileConstrainedBaseline,kProfileBaseline,kProfileMain,kProfileConstrainedHigh,kProfileHigh,kProfilePredictiveHigh444,} ; enum class H264Level { kLevel1_b = 0,kLevel1 = 1 0,kLevel1_1 = 1 1,kLevel1_2 = 1 2,kLevel1_3 = 1 3,kLevel2 = 2 0,kLevel2_1 = 2 1,kLevel2_2 = 2 2,kLevel3 = 3 0,kLevel3_1 = 3 1,kLevel3_2 = 3 2,kLevel4 = 4 0,kLevel4_1 = 4 1,kLevel4_2 = 4 2,kLevel5 = 5 0,kLevel5_1 = 5 1,kLevel5_2 = 5 2 } ; struct H264ProfileLevelId {)",
    "insertText": "H264ProfileLevelId(H264Profile profile, H264Level level) : profile(profile), level(level)"
  },
  {
    "label": "ParseH264ProfileLevelId()",
    "kind": "Method",
    "detail": "Function (} H264Profile profile ; H264Level level ; } ; absl::optional<H264ProfileLevelId>)",
    "insertText": "ParseH264ProfileLevelId(const char* str)"
  },
  {
    "label": "ParseSdpForH264ProfileLevelId()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT absl::optional<H264ProfileLevelId>)",
    "insertText": "ParseSdpForH264ProfileLevelId(const SdpVideoFormat::Parameters& params)"
  },
  {
    "label": "H264SupportedLevel()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT absl::optional<H264Level>)",
    "insertText": "H264SupportedLevel(int max_frame_pixel_count, float max_fps)"
  },
  {
    "label": "H264ProfileLevelIdToString()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT absl::optional<std::string>)",
    "insertText": "H264ProfileLevelIdToString(const H264ProfileLevelId& profile_level_id)"
  },
  {
    "label": "H264IsSameProfile()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "H264IsSameProfile(const SdpVideoFormat::Parameters& params1, const SdpVideoFormat::Parameters& params2)"
  }
]