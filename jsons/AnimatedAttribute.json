[
  {
    "label": "TAnimatedAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAnimatedAttribute"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "OtherType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherType"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Attribute . h \" # include \" AnimatedAttributeManager . h \" # include \" AttributeInterpolator . h \" template<NumericType> class TAnimatedAttribute : public TAnimatedAttributeBase { public : using FGetter = TDelegate<)",
    "insertText": "NumericType()"
  },
  {
    "label": "FPrivateToken()",
    "kind": "Method",
    "detail": "Function (protected : struct FPrivateToken {)",
    "insertText": "FPrivateToken()"
  },
  {
    "label": "TAnimatedAttribute()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TAnimatedAttribute()"
  },
  {
    "label": "TAnimatedAttribute()",
    "kind": "Method",
    "detail": "Function (public : template<InterpolatorSettings>)",
    "insertText": "TAnimatedAttribute(FPrivateToken, const InterpolatorSettings& InSettings ) : Interpolator( MakeUnique<typename InterpolatorSettings::InterpolatorType>(InSettings) ) , Getter() , DesiredValue()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<InterpolatorSettings,OtherType> [ [ nodiscard ] ] TSharedRef<TAnimatedAttribute>)",
    "insertText": "Create(const InterpolatorSettings& InSettings, OtherType&& InInitialValue)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TAnimatedAttribute<NumericType>> Attribute = MakeShared<TAnimatedAttribute<)",
    "insertText": "NumericType(FPrivateToken{}, InSettings)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Attribute ->)",
    "insertText": "Set(Forward<OtherType>(InInitialValue))"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (Attribute ->)",
    "insertText": "Register()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Attribute ->)",
    "insertText": "Set(InDefaultValue.IsSet() ? InDefaultValue.GetValue() : InGetter.Execute())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Attribute -> Getter =)",
    "insertText": "MoveTemp(InGetter)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (Getter .)",
    "insertText": "Unbind()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "SetValue(DesiredValue.GetValue())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(NumericType&& InNewValue)"
  },
  {
    "label": "SetValueAndStop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueAndStop(const NumericType& InNewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InNewValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "Reset()"
  },
  {
    "label": "SetValueAndStop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueAndStop(NumericType&& InNewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Forward<NumericType>(InNewValue))"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const NumericType&)",
    "insertText": "Get()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (DesiredValue = Getter .)",
    "insertText": "Execute()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Interpolator->IsSet())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DesiredValue.IsSet())"
  },
  {
    "label": "GetDesiredValue()",
    "kind": "Method",
    "detail": "Function (} const NumericType&)",
    "insertText": "GetDesiredValue()"
  },
  {
    "label": "GetDelay()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetDelay()"
  },
  {
    "label": "SetDelayOneShot()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "SetDelayOneShot(InDelay)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTolerance(double Tolerance)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "SetTolerance(Tolerance)"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "EnableInterpolation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableInterpolation(bool bEnabled = true)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "SetEnabled(bEnabled)"
  },
  {
    "label": "DisableInterpolation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableInterpolation()"
  },
  {
    "label": "EnableInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableInterpolation(false)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "IdenticalTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IdenticalTo(const TAnimatedAttribute& InOther)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "IsSet() == InOther.IsSet()"
  },
  {
    "label": "OnInterpolationStarted()",
    "kind": "Method",
    "detail": "Function (} return false ; } TAttributeInterpolator<NumericType>::FInterpolatorEvent&)",
    "insertText": "OnInterpolationStarted()"
  },
  {
    "label": "OnInterpolationStopped()",
    "kind": "Method",
    "detail": "Function (} TAttributeInterpolator<NumericType>::FInterpolatorEvent&)",
    "insertText": "OnInterpolationStopped()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Tick(float InDeltaTime)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Interpolator ->)",
    "insertText": "SetValue(Getter.Execute())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} Interpolator ->)",
    "insertText": "Tick(InDeltaTime)"
  }
]