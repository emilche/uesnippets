[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FStaticMeshInstanceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshInstanceBuffer"
  },
  {
    "label": "FInstanceIdIndexMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceIdIndexMap"
  },
  {
    "label": "FInstanceEditorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceEditorData"
  },
  {
    "label": "FInstanceSceneDataImmutable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceSceneDataImmutable"
  },
  {
    "label": "FInstanceSceneDataBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceSceneDataBuffers"
  },
  {
    "label": "FAccessTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessTag"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCompressedSpatialHashItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedSpatialHashItem"
  },
  {
    "label": "FWriteView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteView"
  },
  {
    "label": "FReadView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadView"
  },
  {
    "label": "FCurrentWriterTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurrentWriterTag"
  },
  {
    "label": "FSingleInstanceDataBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleInstanceDataBuffers"
  },
  {
    "label": "FInstanceDataUpdateTaskInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceDataUpdateTaskInfo"
  },
  {
    "label": "FPrimitiveInstanceDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveInstanceDataManager"
  },
  {
    "label": "FInstanceDataSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceDataSceneProxy"
  },
  {
    "label": "IsIdentity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" InstanceDataTypes . h \" # include \" RenderTransform . h \" # include \" Tasks / Task . h \" # include \" Engine / EngineTypes . h \" # include \" Rendering / RenderingSpatialHash . h \" class FPrimitiveDrawInterface ; class FStaticMeshInstanceBuffer ; class FInstanceIdIndexMap { public : bool)",
    "insertText": "IsIdentity()"
  },
  {
    "label": "GetMaxInstanceId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxInstanceId()"
  },
  {
    "label": "GetMaxInstanceIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxInstanceIndex()"
  },
  {
    "label": "IsValidId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidId(FPrimitiveInstanceId InstanceId)"
  },
  {
    "label": "IdToIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "IdToIndex(FPrimitiveInstanceId InstanceId)"
  },
  {
    "label": "IndexToId()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveInstanceId)",
    "insertText": "IndexToId(int32 InstanceIndex)"
  },
  {
    "label": "SetInvalid()",
    "kind": "Method",
    "detail": "Function (InstanceIndex } : IndexToIdMap [ InstanceIndex ] ; } void)",
    "insertText": "SetInvalid(FPrimitiveInstanceId InstanceId)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (IdToIndexMap [ InstanceId . Id ] = INDEX_NONE ; } void)",
    "insertText": "Update(FPrimitiveInstanceId InstanceId, int32 InstanceIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (IndexToIdMap [ InstanceIndex ] = InstanceId ; IdToIndexMap [ InstanceId . Id ] = InstanceIndex ; } void)",
    "insertText": "Reset(int32 InNumInstances)"
  },
  {
    "label": "ResizeExplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeExplicit(int32 InNumInstances, int32 MaxInstanceId)"
  },
  {
    "label": "CreateExplicitIdentityMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExplicitIdentityMapping()"
  },
  {
    "label": "FInstanceIdIndexMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceIdIndexMap()"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FPrimitiveInstanceId> IndexToIdMap ; TArray<int32> IdToIndexMap ; int32 NumInstances = 0 ; bool bIsValid = false ; } ; # if WITH_EDITOR struct FInstanceEditorData { uint32)",
    "insertText": "Pack(const FColor& HitProxyColor, bool bSelected)"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unpack(const uint32 Packed, FColor& OutHitProxyColor, bool& bOutSelected)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (OutHitProxyColor . R =)",
    "insertText": "uint8((Packed >> 0u) & 0xFFu)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (OutHitProxyColor . G =)",
    "insertText": "uint8((Packed >> 8u) & 0xFFu)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (OutHitProxyColor . B =)",
    "insertText": "uint8((Packed >> 16u) & 0xFFu)"
  },
  {
    "label": "bOutSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bOutSelected(Packed >> 24u)"
  },
  {
    "label": "FInstanceSceneDataBuffers()",
    "kind": "Method",
    "detail": "Function (} } ; # endif class FInstanceSceneDataImmutable ; class FInstanceSceneDataBuffers { public :)",
    "insertText": "FInstanceSceneDataBuffers()"
  },
  {
    "label": "FInstanceSceneDataBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceSceneDataBuffers(bool InbInstanceDataIsGPUOnly)"
  },
  {
    "label": "FInstanceSceneDataBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceSceneDataBuffers(FInstanceSceneDataBuffers&& Other)"
  },
  {
    "label": "FAccessTag()",
    "kind": "Method",
    "detail": "Function (struct FAccessTag { enum class EKind { Reader,Writer } ;)",
    "insertText": "FAccessTag() : WriterTag(0), Kind(EKind::Reader)"
  },
  {
    "label": "FAccessTag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAccessTag(uint32 InWriterTag) : WriterTag(InWriterTag) , Kind(EKind::Writer)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} uint32 WriterTag ; EKind Kind ; } ; const FInstanceDataFlags&)",
    "insertText": "GetFlags()"
  },
  {
    "label": "ValidateAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAccess(AccessTag)"
  },
  {
    "label": "GetNumCustomDataFloats()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumCustomDataFloats(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetPayloadDataStride()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPayloadDataStride(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetInstanceLocalBounds()",
    "kind": "Method",
    "detail": "Function (FRenderBounds)",
    "insertText": "GetInstanceLocalBounds(int32 InstanceIndex, FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetInstancePrimitiveRelativeBounds()",
    "kind": "Method",
    "detail": "Function (FRenderBounds)",
    "insertText": "GetInstancePrimitiveRelativeBounds(int32 InstanceIndex, FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetInstanceWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetInstanceWorldBounds(int32 InstanceIndex, FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetInstanceToWorld()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetInstanceToWorld(int32 InstanceIndex, FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "IsInstanceDataGPUOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceDataGPUOnly(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetPrimitiveWorldSpaceOffset()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetPrimitiveWorldSpaceOffset(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "SetPrimitiveLocalToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitiveLocalToWorld(const FMatrix &PrimitiveLocalToWorld, FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (FInstanceDataBufferHeader)",
    "insertText": "GetHeader(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "ValidateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateData()"
  },
  {
    "label": "BeginWriteAccess()",
    "kind": "Method",
    "detail": "Function (struct FCompressedSpatialHashItem { RenderingSpatialHash::FLocation64 Location ; int32 NumInstances ; } ; struct FWriteView { FInstanceSceneDataBuffers::FAccessTag AccessTag ; FRenderTransform& PrimitiveToRelativeWorld ; FVector& PrimitiveWorldSpaceOffset ; TArray<FRenderBounds,TInlineAllocator<1>>& InstanceLocalBounds ; TArray<float>& InstanceCustomData ; TArray<float>& InstanceRandomIDs ; TArray<FVector4f>& InstanceLightShadowUVBias ; TArray<uint32>& InstanceSkinningData ; TArray<uint32>& InstanceHierarchyOffset ; TArray<FVector4f>& InstancePayloadExtension ; TArray<FRenderTransform>& InstanceToPrimitiveRelative ; TArray<FRenderTransform>& PrevInstanceToPrimitiveRelative ; # if WITH_EDITOR TArray<uint32>& InstanceEditorData ; TBitArray<>& SelectedInstances ; # endif TBitArray<>& VisibleInstances ; int32& NumInstancesGPUOnly ; int32& NumCustomDataFloats ; FInstanceDataFlags& Flags ; } ; FWriteView)",
    "insertText": "BeginWriteAccess(FAccessTag AccessTag)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 PrevTagValue = 0 u ;)",
    "insertText": "check(CurrentWriterTag.Value.compare_exchange_strong(PrevTagValue, AccessTag.WriterTag))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 PrevTagValue = AccessTag . WriterTag ;)",
    "insertText": "check(CurrentWriterTag.Value.compare_exchange_strong(PrevTagValue, 0U))"
  },
  {
    "label": "GetReadView()",
    "kind": "Method",
    "detail": "Function (} struct FReadView { const FRenderTransform& PrimitiveToRelativeWorld ; const FVector& PrimitiveWorldSpaceOffset ; const TArray<FRenderBounds,TInlineAllocator<1>>& InstanceLocalBounds ; const TArray<float>& InstanceCustomData ; const TArray<float>& InstanceRandomIDs ; const TArray<FVector4f>& InstanceLightShadowUVBias ; const TArray<uint32>& InstanceSkinningData ; const TArray<uint32>& InstanceHierarchyOffset ; const TArray<FVector4f>& InstancePayloadExtension ; const TArray<FRenderTransform>& InstanceToPrimitiveRelative ; const TArray<FRenderTransform>& PrevInstanceToPrimitiveRelative ; # if WITH_EDITOR const TArray<uint32>& InstanceEditorData ; const TBitArray<>& SelectedInstances ; # endif const TBitArray<>& VisibleInstances ; int32 NumInstancesGPUOnly ; int32 NumCustomDataFloats ; FInstanceDataFlags Flags ; bool bInstanceDataIsGPUOnly ; } ; FReadView)",
    "insertText": "GetReadView(FAccessTag AccessTag = FAccessTag())"
  },
  {
    "label": "GetImmutable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInstanceSceneDataImmutable,ESPMode::ThreadSafe>)",
    "insertText": "GetImmutable()"
  },
  {
    "label": "FCurrentWriterTag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurrentWriterTag(FCurrentWriterTag&& Other)"
  },
  {
    "label": "ValidateAccess()",
    "kind": "Method",
    "detail": "Function (} std::atomic<uint32> Value = 0 ; } ; FCurrentWriterTag CurrentWriterTag ; void)",
    "insertText": "ValidateAccess(const FAccessTag& AccessTag)"
  },
  {
    "label": "FInstanceSceneDataImmutable()",
    "kind": "Method",
    "detail": "Function (} # endif TSharedPtr<FInstanceSceneDataImmutable,ESPMode::ThreadSafe> Immutable ; } ; class FInstanceSceneDataImmutable { public :)",
    "insertText": "FInstanceSceneDataImmutable(const TArray<FInstanceSceneDataBuffers::FCompressedSpatialHashItem> &InCompressedInstanceSpatialHashes) : CompressedInstanceSpatialHashes(InCompressedInstanceSpatialHashes)"
  },
  {
    "label": "GetCompressedInstanceSpatialHashes()",
    "kind": "Method",
    "detail": "Function (} const TArray<FInstanceSceneDataBuffers::FCompressedSpatialHashItem>&)",
    "insertText": "GetCompressedInstanceSpatialHashes()"
  },
  {
    "label": "UpdateDefaultInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDefaultInstance(const FMatrix &PrimitiveLocalToWorld, const FRenderBounds LocalBounds)"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (} ; class FInstanceDataUpdateTaskInfo { public : const FInstanceDataBufferHeader&)",
    "insertText": "GetHeader()"
  },
  {
    "label": "FInstanceDataSceneProxy()",
    "kind": "Method",
    "detail": "Function (private : class FPrimitiveInstanceDataManager ; UE::Tasks::FTask UpdateTaskHandle ; FInstanceDataBufferHeader InstanceDataBufferHeader ; } ; class FInstanceDataSceneProxy { public :)",
    "insertText": "FInstanceDataSceneProxy()"
  },
  {
    "label": "FInstanceDataSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceDataSceneProxy(FInstanceSceneDataBuffers&& InInstanceSceneDataBuffers)"
  },
  {
    "label": "GeInstanceSceneDataBuffers()",
    "kind": "Method",
    "detail": "Function (const FInstanceSceneDataBuffers*)",
    "insertText": "GeInstanceSceneDataBuffers()"
  },
  {
    "label": "GetLegacyInstanceBuffer()",
    "kind": "Method",
    "detail": "Function (} ; FStaticMeshInstanceBuffer*)",
    "insertText": "GetLegacyInstanceBuffer()"
  },
  {
    "label": "DecStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecStatCounters()"
  }
]