[
  {
    "label": "FLinearFeedbackShiftRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearFeedbackShiftRegister"
  },
  {
    "label": "FLinearFeedbackShiftRegister()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" namespace UE { namespace Math { class FLinearFeedbackShiftRegister { public :)",
    "insertText": "FLinearFeedbackShiftRegister()"
  },
  {
    "label": "GetNextValue()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNextValue(uint32 N)"
  },
  {
    "label": "GetNextValueWithLast()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNextValueWithLast(uint32 N)"
  },
  {
    "label": "GetNextValueInternal()",
    "kind": "Method",
    "detail": "Function (} private : const uint32 StartState = 1 ; uint32 State = StartState ; uint32)",
    "insertText": "GetNextValueInternal(uint32 N, bool IncludeLast)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "CalcLFSRValue(uint32 Taps0, uint32 Taps1, uint32 Taps2, uint32 Taps3, uint32 Mask)"
  },
  {
    "label": "Tap()",
    "kind": "Method",
    "detail": "Function (State = StartState ; return Mask ; } uint32)",
    "insertText": "Tap((Taps0 & State) == 0 ? 0 : 1) ^ ((Taps1 & State) == 0 ? 0 : 1)"
  },
  {
    "label": "Tap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tap((Taps2 & State) == 0 ? 0 : 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Taps3 > 0)"
  },
  {
    "label": "Tap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tap((Taps3 & State) == 0 ? 0 : 1)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "State((State << 1) | Tap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 ValueToReturn = State - 1 ;)",
    "insertText": "if(IncludeLast && State == StartState)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (State = 0 ; } return ValueToReturn % Mask ; } ;)",
    "insertText": "check(N >= 2 && N <=12)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 NewValue = 0 ;)",
    "insertText": "if(N == 2)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 1, 1 << 0, 0, 0, 0x3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 3)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 2, 1 << 1, 0, 0, 0x7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 4)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 3, 1 << 2, 0, 0, 0xF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 5)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 4, 1 << 2, 0, 0, 0x1F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 6)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 5, 1 << 4, 0, 0, 0x3F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 7)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 6, 1 << 5, 0, 0, 0x7F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 8)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 7, 1 << 5, 1 << 4, 1 << 3, 0xFF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 9)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 8, 1 << 4, 0, 0, 0x1FF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 10)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 9, 1 << 6, 0, 0, 0x3FF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 11)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 10, 1 << 10, 0, 0, 0x7FF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(N == 12)"
  },
  {
    "label": "CalcLFSRValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "CalcLFSRValue(1 << 11, 1 << 10, 1 << 9, 1 << 3, 0xFFF)"
  }
]