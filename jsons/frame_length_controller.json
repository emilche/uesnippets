[
  {
    "label": "FrameLengthController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameLengthController"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "FrameLengthChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameLengthChange"
  },
  {
    "label": "FrameLengthChange()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_ # include<stddef . h> # include<map> # include<set> # include \" absl / types / optional . h \" # include \" modules / audio_coding / audio_network_adaptor / controller . h \" # include \" modules / audio_coding / audio_network_adaptor / include / audio_network_adaptor_config . h \" namespace webrtc { class FrameLengthController final : public Controller { public : struct Config { struct FrameLengthChange {)",
    "insertText": "FrameLengthChange(int from_frame_length_ms, int to_frame_length_ms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FrameLengthChange& rhs)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (int from_frame_length_ms ; int to_frame_length_ms ; } ;)",
    "insertText": "Config(const std::set<int>& encoder_frame_lengths_ms, int initial_frame_length_ms, int min_encoder_bitrate_bps, float fl_increasing_packet_loss_fraction, float fl_decreasing_packet_loss_fraction, int fl_increase_overhead_offset, int fl_decrease_overhead_offset, std::map<FrameLengthChange, int> fl_changing_bandwidths_bps)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config& other)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Config()"
  },
  {
    "label": "FrameLengthController()",
    "kind": "Method",
    "detail": "Function (std::set<int> encoder_frame_lengths_ms ; int initial_frame_length_ms ; int min_encoder_bitrate_bps ; float fl_increasing_packet_loss_fraction ; float fl_decreasing_packet_loss_fraction ; int fl_increase_overhead_offset ; int fl_decrease_overhead_offset ; std::map<FrameLengthChange,int> fl_changing_bandwidths_bps ; } ;)",
    "insertText": "FrameLengthController(const Config& config)"
  },
  {
    "label": "FrameLengthController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameLengthController()"
  },
  {
    "label": "FrameLengthController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameLengthController(const FrameLengthController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FrameLengthController&)",
    "insertText": "operator(const FrameLengthController&)"
  },
  {
    "label": "UpdateNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkMetrics(const NetworkMetrics& network_metrics)"
  },
  {
    "label": "MakeDecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDecision(AudioEncoderRuntimeConfig* config)"
  },
  {
    "label": "FrameLengthIncreasingDecision()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "FrameLengthIncreasingDecision(const AudioEncoderRuntimeConfig& config)"
  },
  {
    "label": "FrameLengthDecreasingDecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrameLengthDecreasingDecision(const AudioEncoderRuntimeConfig& config)"
  }
]