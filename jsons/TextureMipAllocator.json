[
  {
    "label": "FTextureMipAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureMipAllocator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextureMipAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Streaming / TextureMipDataProvider . h \" class FTextureMipAllocator { public : enum class ETickState : uint32 { AllocateMips,FinalizeMips,Done } ; enum class ETickThread : uint32 { Async,Render,None,} ;)",
    "insertText": "FTextureMipAllocator(UTexture* Texture, ETickState InTickState, ETickThread InTickThread)"
  },
  {
    "label": "FTextureMipAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureMipAllocator()"
  },
  {
    "label": "GetNextTickState()",
    "kind": "Method",
    "detail": "Function (} ETickState)",
    "insertText": "GetNextTickState()"
  },
  {
    "label": "FinalizeMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinalizeMips(const FTextureUpdateContext& Context, const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "GetCancelThread()",
    "kind": "Method",
    "detail": "Function (ETickThread)",
    "insertText": "GetCancelThread()"
  },
  {
    "label": "AdvanceTo()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AdvanceTo(ETickState InState, ETickThread InThread)"
  }
]