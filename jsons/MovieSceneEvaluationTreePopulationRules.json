[
  {
    "label": "FMovieSceneTrackEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackEvaluationData"
  },
  {
    "label": "TMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTree"
  },
  {
    "label": "FEvaluationTreePopulationRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationTreePopulationRules"
  },
  {
    "label": "FSortedSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedSection"
  },
  {
    "label": "FSortedSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreMinimal . h \" # include \" Evaluation / MovieSceneSegment . h \" # include \" HAL / Platform . h \" # include \" MovieSceneSection . h \" # include \" MovieSceneTrackEvaluationField . h \" # include \" Templates / Function . h \" struct FMovieSceneTrackEvaluationData ; template<DataType> struct TMovieSceneEvaluationTree ; namespace UE { namespace MovieScene { struct FEvaluationTreePopulationRules { struct FSortedSection { const UMovieSceneSection& Section ; int32 Index ;)",
    "insertText": "FSortedSection(const UMovieSceneSection& InSection, int32 InSectionIndex) : Section(InSection), Index(InSectionIndex)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Row()"
  },
  {
    "label": "OverlapPriority()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OverlapPriority()"
  },
  {
    "label": "SortByOverlapPriorityAndRow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortByOverlapPriorityAndRow(const FSortedSection& A, const FSortedSection& B)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (} return A .)",
    "insertText": "Row() < B.Row()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; using FSectionSortPredicate = TFunctionRef<)",
    "insertText": "bool(const FSortedSection&, const FSortedSection&)"
  },
  {
    "label": "Blended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Blended(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree)"
  },
  {
    "label": "Blended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Blended(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree, FSectionSortPredicate Predicate)"
  },
  {
    "label": "HighPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighPass(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree)"
  },
  {
    "label": "HighPassPerRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighPassPerRow(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree)"
  },
  {
    "label": "HighPassCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighPassCustom(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree, FSectionSortPredicate Predicate)"
  },
  {
    "label": "HighPassCustomPerRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighPassCustomPerRow(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree, FSectionSortPredicate Predicate)"
  },
  {
    "label": "PopulateNearestSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateNearestSection(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutTree)"
  },
  {
    "label": "SortSections()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SortSections(TArrayView<UMovieSceneSection* const> Sections, TArray<FSortedSection, TInlineAllocator<16>>& SortedSections, FSectionSortPredicate Predicate)"
  }
]