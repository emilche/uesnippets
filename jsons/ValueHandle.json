[
  {
    "label": "ValueHandleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueHandleBase"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "HandleBaseKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HandleBaseKind"
  },
  {
    "label": "WeakVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakVH"
  },
  {
    "label": "AssertingVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssertingVH"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "TrackingVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrackingVH"
  },
  {
    "label": "CallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackVH"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_VALUEHANDLE_H # define LLVM_IR_VALUEHANDLE_H # include \" llvm / ADT / DenseMapInfo . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / IR / Value . h \" namespace llvm { class ValueHandleBase ; template<From> struct simplify_type ; template<> class PointerLikeTypeTraits<ValueHandleBase**> { public : void*)",
    "insertText": "getAsVoidPointer(ValueHandleBase** P)"
  },
  {
    "label": "ValueHandleBase()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = 2 } ; } ; class ValueHandleBase { class Value ; protected : enum HandleBaseKind { Assert,Callback,Tracking,Weak } ; private : PointerIntPair<ValueHandleBase**,2,HandleBaseKind> PrevPair ; ValueHandleBase* Next ; Value* V ;)",
    "insertText": "ValueHandleBase(const ValueHandleBase&)"
  },
  {
    "label": "ValueHandleBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ValueHandleBase(HandleBaseKind Kind) : PrevPair(nullptr, Kind), Next(nullptr), V(nullptr)"
  },
  {
    "label": "ValueHandleBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueHandleBase(HandleBaseKind Kind, Value *V) : PrevPair(nullptr, Kind), Next(nullptr), V(V)"
  },
  {
    "label": "ValueHandleBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueHandleBase(HandleBaseKind Kind, const ValueHandleBase &RHS) : PrevPair(nullptr, Kind), Next(nullptr), V(RHS.V)"
  },
  {
    "label": "ValueHandleBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ValueHandleBase()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "operator(Value *RHS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (V = RHS ;)",
    "insertText": "if(isValid(V)) AddToUseList()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (V = RHS . V ;)",
    "insertText": "if(isValid(V)) AddToExistingUseList(RHS.getPrevPtr())"
  },
  {
    "label": "ValueIsDeleted()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "ValueIsDeleted(Value *V)"
  },
  {
    "label": "ValueIsRAUWd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueIsRAUWd(Value *Old, Value *New)"
  },
  {
    "label": "getPrevPtr()",
    "kind": "Method",
    "detail": "Function (private : ValueHandleBase**)",
    "insertText": "getPrevPtr()"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} HandleBaseKind)",
    "insertText": "getKind()"
  },
  {
    "label": "setPrevPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPrevPtr(ValueHandleBase **Ptr)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (PrevPair .)",
    "insertText": "setPointer(Ptr)"
  },
  {
    "label": "AddToExistingUseList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToExistingUseList(ValueHandleBase **List)"
  },
  {
    "label": "AddToExistingUseListAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToExistingUseListAfter(ValueHandleBase *Node)"
  },
  {
    "label": "AddToUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToUseList()"
  },
  {
    "label": "RemoveFromUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromUseList()"
  },
  {
    "label": "WeakVH()",
    "kind": "Method",
    "detail": "Function (} ; class WeakVH : public ValueHandleBase { public :)",
    "insertText": "WeakVH() : ValueHandleBase(Weak)"
  },
  {
    "label": "WeakVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WeakVH(Value *P) : ValueHandleBase(Weak, P)"
  },
  {
    "label": "WeakVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WeakVH(const WeakVH &RHS) : ValueHandleBase(Weak, RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} WeakVH&)",
    "insertText": "operator(const WeakVH &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "operator(const ValueHandleBase &RHS)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "Value()"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct simplify_type<WeakVH> { typedef Value* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(WeakVH &WVH)"
  },
  {
    "label": "setRawValPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRawValPtr(Value *P)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(P)"
  },
  {
    "label": "getRawValPtr()",
    "kind": "Method",
    "detail": "Function (} # else Value* ThePtr ; Value*)",
    "insertText": "getRawValPtr()"
  },
  {
    "label": "GetAsValue()",
    "kind": "Method",
    "detail": "Function (ThePtr = P ; } # endif Value*)",
    "insertText": "GetAsValue(Value *V)"
  },
  {
    "label": "getValPtr()",
    "kind": "Method",
    "detail": "Function (} ValueTy*)",
    "insertText": "getValPtr()"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValPtr(ValueTy *P)"
  },
  {
    "label": "setRawValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRawValPtr(GetAsValue(P))"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (} public : # ifndef NDEBUG)",
    "insertText": "AssertingVH() : ValueHandleBase(Assert)"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssertingVH(ValueTy *P) : ValueHandleBase(Assert, GetAsValue(P))"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssertingVH(const AssertingVH &RHS) : ValueHandleBase(Assert, RHS)"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "AssertingVH() : ThePtr(nullptr)"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssertingVH(ValueTy *P) : ThePtr(GetAsValue(P))"
  },
  {
    "label": "AssertingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssertingVH(const AssertingVH<ValueTy> &)"
  },
  {
    "label": "ValueTy()",
    "kind": "Method",
    "detail": "Function (# endif operator)",
    "insertText": "ValueTy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueTy*)",
    "insertText": "operator(ValueTy *RHS)"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValPtr(RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueTy*)",
    "insertText": "operator(const AssertingVH<ValueTy> &RHS)"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValPtr(RHS.getValPtr())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueTy*)",
    "insertText": "operator()"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct DenseMapInfo<AssertingVH<T>> { AssertingVH<T>)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "setRawValPtr()",
    "kind": "Method",
    "detail": "Function (AssertingVH<T> Res ; Res .)",
    "insertText": "setRawValPtr(DenseMapInfo<Value *>::getEmptyKey())"
  },
  {
    "label": "setRawValPtr()",
    "kind": "Method",
    "detail": "Function (AssertingVH<T> Res ; Res .)",
    "insertText": "setRawValPtr(DenseMapInfo<Value *>::getTombstoneKey())"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const AssertingVH<T> &LHS, const AssertingVH<T> &RHS)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct isPodLike<AssertingVH<T>> { # ifdef NDEBUG const bool value = true ; # else const bool value = false ; # endif } ; template<ValueTy> class TrackingVH : public ValueHandleBase { void)",
    "insertText": "CheckValidity()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ValueHandleBase::isValid(VP) && \"Tracked Value was deleted!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ValueTy>(VP) && \"Tracked Value was replaced by one with an invalid type!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(GetAsValue(P))"
  },
  {
    "label": "TrackingVH()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TrackingVH() : ValueHandleBase(Tracking)"
  },
  {
    "label": "TrackingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackingVH(ValueTy *P) : ValueHandleBase(Tracking, GetAsValue(P))"
  },
  {
    "label": "TrackingVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackingVH(const TrackingVH &RHS) : ValueHandleBase(Tracking, RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueTy*)",
    "insertText": "operator(const TrackingVH<ValueTy> &RHS)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} } ; class CallbackVH : public ValueHandleBase { void)",
    "insertText": "anchor()"
  },
  {
    "label": "CallbackVH()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CallbackVH(const CallbackVH &RHS) : ValueHandleBase(Callback, RHS)"
  },
  {
    "label": "CallbackVH()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CallbackVH()"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValPtr(Value *P)"
  },
  {
    "label": "CallbackVH()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "CallbackVH() : ValueHandleBase(Callback)"
  },
  {
    "label": "CallbackVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallbackVH(Value *P) : ValueHandleBase(Callback, P)"
  },
  {
    "label": "deleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleted()"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValPtr(nullptr)"
  },
  {
    "label": "allUsesReplacedWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allUsesReplacedWith(Value *)"
  }
]