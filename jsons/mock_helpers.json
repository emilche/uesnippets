[
  {
    "label": "MockHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockHelpers"
  },
  {
    "label": "KeySignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KeySignature"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_MOCK_HELPERS_H_ # define ABSL_RANDOM_INTERNAL_MOCK_HELPERS_H_ # include<tuple> # include<type_traits> # include<utility> # include \" absl / base / internal / fast_type_id . h \" # include \" absl / types / optional . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class MockHelpers { using IdType =::absl::base_internal::FastTypeIdType ; template<KeyT> struct KeySignature ; template<ResultT,DiscriminatorT,ArgTupleT> struct KeySignature<)",
    "insertText": "ResultT(DiscriminatorT, ArgTupleT)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using result_type = ResultT ; using discriminator_type = DiscriminatorT ; using arg_tuple_type = ArgTupleT ; } ; template<class T> using invoke_mock_t =)",
    "insertText": "decltype(std::declval<T*>()->InvokeMock( std::declval<IdType>(), std::declval<void*>(), std::declval<void*>()))"
  },
  {
    "label": "InvokeMockImpl()",
    "kind": "Method",
    "detail": "Function (template<KeyT,ReturnT,ArgTupleT,URBG,. . . Args> absl::optional<ReturnT>)",
    "insertText": "InvokeMockImpl(char, URBG*, Args&&...)"
  },
  {
    "label": "arg_tuple()",
    "kind": "Method",
    "detail": "Function (ArgTupleT)",
    "insertText": "arg_tuple(std::forward<Args>(args)...)"
  },
  {
    "label": "MaybeInvokeMock()",
    "kind": "Method",
    "detail": "Function (absl::optional<typename KeySignature<KeyT>::result_type>)",
    "insertText": "MaybeInvokeMock(URBG* urbg, Args&&... args)"
  },
  {
    "label": "MockFor()",
    "kind": "Method",
    "detail": "Function (} template<KeyT,MockURBG> auto)",
    "insertText": "MockFor(MockURBG& m) -> decltype(m.template RegisterMock< typename KeySignature<KeyT>::result_type, typename KeySignature<KeyT>::arg_tuple_type>( m, std::declval<IdType>()))"
  }
]