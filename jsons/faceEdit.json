[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrFaceEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFaceEdit"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRFACEEDIT_H # define OPENSUBDIV3_HBRFACEEDIT_H # include \" . . / hbr / hierarchicalEdit . h \" # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrFaceEdit ; template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& out, const HbrFaceEdit<T>& path)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (out<<\" face)",
    "insertText": "path(\" << path.faceid << ' '; for (int i = 0; i < path.nsubfaces; ++i) { out << static_cast<int>(path.subfaces[i]) << ' '; } return out << \")"
  },
  {
    "label": "HbrFaceEdit()",
    "kind": "Method",
    "detail": "Function (} template<class T> class HbrFaceEdit : public HbrHierarchicalEdit<T> { public :)",
    "insertText": "HbrFaceEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces, int _index, int _width, typename HbrHierarchicalEdit<T>::Operation _op, float *_edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), index(_index), width(_width), op(_op)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (edit = new float [ width ] ;)",
    "insertText": "memcpy(edit, _edit, width * sizeof(float))"
  },
  {
    "label": "HbrFaceEdit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HbrFaceEdit(int _faceid, int _nsubfaces, int *_subfaces, int _index, int _width, typename HbrHierarchicalEdit<T>::Operation _op, float *_edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), index(_index), width(_width), op(_op)"
  },
  {
    "label": "HbrFaceEdit()",
    "kind": "Method",
    "detail": "Function (} # ifdef PRMAN)",
    "insertText": "HbrFaceEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces, int _index, int _width, typename HbrHierarchicalEdit<T>::Operation _op, RtToken _edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), index(_index), width(_width), op(_op)"
  },
  {
    "label": "sedit()",
    "kind": "Method",
    "detail": "Function (edit = new float [ width ] ; RtString*)",
    "insertText": "sedit(RtString*)"
  },
  {
    "label": "HbrFaceEdit()",
    "kind": "Method",
    "detail": "Function (* sedit = _edit ; })",
    "insertText": "HbrFaceEdit(int _faceid, int _nsubfaces, int *_subfaces, int _index, int _width, typename HbrHierarchicalEdit<T>::Operation _op, RtToken _edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), index(_index), width(_width), op(_op)"
  },
  {
    "label": "HbrFaceEdit()",
    "kind": "Method",
    "detail": "Function (* sedit = _edit ; } # endif ~)",
    "insertText": "HbrFaceEdit()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (delete [ ] edit ; } std::ostream& operator<<<)",
    "insertText": "T(std::ostream& out, const HbrFaceEdit<T>& path)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetUniformIndex()",
    "kind": "Method",
    "detail": "Function (int oldUniformIndex = face ->)",
    "insertText": "GetUniformIndex()"
  },
  {
    "label": "SetUniformIndex()",
    "kind": "Method",
    "detail": "Function (face ->)",
    "insertText": "SetUniformIndex(face->GetMesh()->NewUniformIndex())"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} face ->)",
    "insertText": "GetVertex(0)->GetData().ApplyFaceEdit(oldUniformIndex, face->GetUniformIndex(), *const_cast<const HbrFaceEdit<T>*>(this))"
  }
]