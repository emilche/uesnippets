[
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "RtpTransportControllerSendInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransportControllerSendInterface"
  },
  {
    "label": "RtpStreamSender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpStreamSender"
  },
  {
    "label": "RtpVideoSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpVideoSender"
  },
  {
    "label": "RtpStreamSender()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_RTP_VIDEO_SENDER_H_ # define CALL_RTP_VIDEO_SENDER_H_ # include<map> # include<memory> # include<unordered_set> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / call / transport . h \" # include \" api / fec_controller . h \" # include \" api / fec_controller_override . h \" # include \" api / field_trials_view . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / rtp_config . h \" # include \" call / rtp_payload_params . h \" # include \" call / rtp_transport_controller_send_interface . h \" # include \" call / rtp_video_sender_interface . h \" # include \" modules / rtp_rtcp / include / flexfec_sender . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_impl2 . h \" # include \" modules / rtp_rtcp / source / rtp_sender . h \" # include \" modules / rtp_rtcp / source / rtp_sender_video . h \" # include \" modules / rtp_rtcp / source / rtp_sequence_number_map . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" rtc_base / rate_limiter . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class FrameEncryptorInterface ; class RtpTransportControllerSendInterface ; namespace webrtc_internal_rtp_video_sender { struct RtpStreamSender {)",
    "insertText": "RtpStreamSender(std::unique_ptr<ModuleRtpRtcpImpl2> rtp_rtcp, std::unique_ptr<RTPSenderVideo> sender_video, std::unique_ptr<VideoFecGenerator> fec_generator)"
  },
  {
    "label": "RtpStreamSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpStreamSender()"
  },
  {
    "label": "RtpStreamSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpStreamSender(RtpStreamSender&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpStreamSender&)",
    "insertText": "operator(RtpStreamSender&&)"
  },
  {
    "label": "RtpVideoSender()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ModuleRtpRtcpImpl2> rtp_rtcp ; std::unique_ptr<RTPSenderVideo> sender_video ; std::unique_ptr<VideoFecGenerator> fec_generator ; } ; } class RtpVideoSender : public RtpVideoSenderInterface,public VCMProtectionCallback,public StreamFeedbackObserver { public :)",
    "insertText": "RtpVideoSender(Clock* clock, const std::map<uint32_t, RtpState>& suspended_ssrcs, const std::map<uint32_t, RtpPayloadState>& states, const RtpConfig& rtp_config, int rtcp_report_interval_ms, Transport* send_transport, const RtpSenderObservers& observers, RtpTransportControllerSendInterface* transport, RtcEventLog* event_log, RateLimiter* retransmission_limiter, std::unique_ptr<FecController> fec_controller, FrameEncryptorInterface* frame_encryptor, const CryptoOptions& crypto_options, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer, const FieldTrialsView& field_trials, TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "RtpVideoSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpVideoSender()"
  },
  {
    "label": "RtpVideoSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpVideoSender(const RtpVideoSender&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpVideoSender&)",
    "insertText": "operator(const RtpVideoSender&)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(bool active) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetActiveModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveModules(std::vector<bool> active_modules) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkAvailability(bool network_available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetRtpStates()",
    "kind": "Method",
    "detail": "Function (std::map<uint32_t,RtpState>)",
    "insertText": "GetRtpStates() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetRtpPayloadStates()",
    "kind": "Method",
    "detail": "Function (std::map<uint32_t,RtpPayloadState>)",
    "insertText": "GetRtpPayloadStates() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "DeliverRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverRtcp(const uint8_t* packet, size_t length) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "ProtectionRequest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ProtectionRequest(const FecProtectionParams* delta_params, const FecProtectionParams* key_params, uint32_t* sent_video_rate_bps, uint32_t* sent_nack_rate_bps, uint32_t* sent_fec_rate_bps) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetFecAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecAllowed(bool fec_allowed) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnBitrateAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateAllocationUpdated(const VideoBitrateAllocation& bitrate) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnVideoLayersAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoLayersAllocationUpdated(const VideoLayersAllocation& layers)"
  },
  {
    "label": "OnTransportOverheadChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportOverheadChanged(size_t transport_overhead_bytes_per_packet) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnBitrateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateUpdated(BitrateAllocationUpdate update, int framerate) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetPayloadBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetPayloadBitrateBps() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetProtectionBitrateBps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetProtectionBitrateBps() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetEncodingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncodingData(size_t width, size_t height, size_t num_temporal_layers) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetSentRtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSequenceNumberMap::Info>)",
    "insertText": "GetSentRtpPacketInfos(uint32_t ssrc, rtc::ArrayView<const uint16_t> sequence_numbers) const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnPacketFeedbackVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketFeedbackVector(std::vector<StreamPacketInfo> packet_feedback_vector) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "IsActiveLocked()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsActiveLocked() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "SetActiveModulesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveModulesLocked(std::vector<bool> active_modules) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateModuleSendingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModuleSendingState() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ConfigureProtection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureProtection()"
  },
  {
    "label": "ConfigureSsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureSsrcs(const std::map<uint32_t, RtpState>& suspended_ssrcs)"
  },
  {
    "label": "NackEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NackEnabled()"
  },
  {
    "label": "GetPacketizationOverheadRate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetPacketizationOverheadRate()"
  },
  {
    "label": "CalculateOverheadRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "CalculateOverheadRate(DataRate data_rate, DataSize packet_size, DataSize overhead_per_packet, Frequency framerate)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const FieldTrialsView& field_trials_ ; const bool send_side_bwe_with_overhead_ ; const bool use_frame_rate_for_overhead_ ; const bool has_packet_feedback_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker transport_checker_ ; Mutex mutex_ ; bool active_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool registered_for_feedback_)",
    "insertText": "RTC_GUARDED_BY(transport_checker_)"
  }
]