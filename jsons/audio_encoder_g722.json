[
  {
    "label": "AudioEncoderG722Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderG722Impl"
  },
  {
    "label": "EncoderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderState"
  },
  {
    "label": "AudioEncoderG722Impl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_G722_AUDIO_ENCODER_G722_H_ # define MODULES_AUDIO_CODING_CODECS_G722_AUDIO_ENCODER_G722_H_ # include<memory> # include<utility> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / audio_codecs / g722 / audio_encoder_g722_config . h \" # include \" api / units / time_delta . h \" # include \" modules / audio_coding / codecs / g722 / g722_interface . h \" # include \" rtc_base / buffer . h \" namespace webrtc { class AudioEncoderG722Impl final : public AudioEncoder { public :)",
    "insertText": "AudioEncoderG722Impl(const AudioEncoderG722Config& config, int payload_type)"
  },
  {
    "label": "AudioEncoderG722Impl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioEncoderG722Impl()"
  },
  {
    "label": "AudioEncoderG722Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderG722Impl(const AudioEncoderG722Impl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderG722Impl&)",
    "insertText": "operator(const AudioEncoderG722Impl&)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "RtpTimestampRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RtpTimestampRateHz()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (protected : EncodedInfo)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "EncoderState()",
    "kind": "Method",
    "detail": "Function (private : struct EncoderState { G722EncInst* encoder ; std::unique_ptr<int16_t [ ]> speech_buffer ; rtc::Buffer encoded_buffer ;)",
    "insertText": "EncoderState()"
  },
  {
    "label": "SamplesPerChannel()",
    "kind": "Method",
    "detail": "Function (} ; size_t)",
    "insertText": "SamplesPerChannel()"
  }
]