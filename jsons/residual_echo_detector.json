[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioBuffer"
  },
  {
    "label": "ResidualEchoDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResidualEchoDetector"
  },
  {
    "label": "ResidualEchoDetector()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_ # define MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_ # include<atomic> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / echo_detector / circular_buffer . h \" # include \" modules / audio_processing / echo_detector / mean_variance_estimator . h \" # include \" modules / audio_processing / echo_detector / moving_max . h \" # include \" modules / audio_processing / echo_detector / normalized_covariance_estimator . h \" # include \" modules / audio_processing / include / audio_processing . h \" namespace webrtc { class ApmDataDumper ; class AudioBuffer ; class ResidualEchoDetector : public EchoDetector { public :)",
    "insertText": "ResidualEchoDetector()"
  },
  {
    "label": "AnalyzeRenderAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeRenderAudio(rtc::ArrayView<const float> render_audio)"
  },
  {
    "label": "AnalyzeCaptureAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCaptureAudio(rtc::ArrayView<const float> capture_audio)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int capture_sample_rate_hz, int num_capture_channels, int render_sample_rate_hz, int num_render_channels)"
  },
  {
    "label": "SetReliabilityForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReliabilityForTest(float value)"
  },
  {
    "label": "GetMetrics()",
    "kind": "Method",
    "detail": "Function (reliability_ = value ; } EchoDetector::Metrics)",
    "insertText": "GetMetrics()"
  }
]