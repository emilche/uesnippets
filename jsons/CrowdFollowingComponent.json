[
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "IRVOAvoidanceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRVOAvoidanceInterface"
  },
  {
    "label": "UCrowdManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdManager"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCrowdFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdFollowingComponent"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakInterfacePtr . h \" # include \" EngineDefines . h \" # include \" AITypes . h \" # include \" Navigation / PathFollowingComponent . h \" # include \" Navigation / CrowdAgentInterface . h \" # include \" AI / Navigation / NavigationAvoidanceTypes . h \" # include \" CrowdFollowingComponent . generated . h \" class INavLinkCustomInterface ; class IRVOAvoidanceInterface ; class UCrowdManager ; namespace ECrowdAvoidanceQuality { enum Type { Low,Medium,Good,High,} ; } enum class ECrowdSimulationState : uint8 { Enabled,ObstacleOnly)",
    "insertText": "UMETA(DisplayName=\"Disabled, avoided by others\"), Disabled UMETA(DisplayName=\"Disabled, ignored by others\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual void BeginDestroy()"
  },
  {
    "label": "GetCrowdAgentLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCrowdAgentLocation()"
  },
  {
    "label": "GetCrowdAgentVelocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCrowdAgentVelocity()"
  },
  {
    "label": "GetCrowdAgentCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCrowdAgentCollisions(float& CylinderRadius, float& CylinderHalfHeight)"
  },
  {
    "label": "GetCrowdAgentMaxSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCrowdAgentMaxSpeed()"
  },
  {
    "label": "GetCrowdAgentAvoidanceGroup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCrowdAgentAvoidanceGroup()"
  },
  {
    "label": "GetCrowdAgentGroupsToAvoid()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCrowdAgentGroupsToAvoid()"
  },
  {
    "label": "GetCrowdAgentGroupsToIgnore()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCrowdAgentGroupsToIgnore()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "AbortMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortMove(const UObject& Instigator, FPathFollowingResultFlags::Type AbortFlags, FAIRequestID RequestID = FAIRequestID::CurrentRequest, EPathFollowingVelocityMode VelocityMode = EPathFollowingVelocityMode::Reset)"
  },
  {
    "label": "PauseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseMove(FAIRequestID RequestID = FAIRequestID::CurrentRequest, EPathFollowingVelocityMode VelocityMode = EPathFollowingVelocityMode::Reset)"
  },
  {
    "label": "ResumeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeMove(FAIRequestID RequestID = FAIRequestID::CurrentRequest)"
  },
  {
    "label": "GetMoveFocus()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMoveFocus(bool bAllowStrafe)"
  },
  {
    "label": "OnLanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLanded()"
  },
  {
    "label": "FinishUsingCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishUsingCustomLink(INavLinkCustomInterface* CustomNavLink)"
  },
  {
    "label": "OnPathFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathFinished(const FPathFollowingResult& Result)"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathUpdated()"
  },
  {
    "label": "OnPathfindingQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathfindingQuery(FPathFindingQuery& Query)"
  },
  {
    "label": "GetCurrentPathElement()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentPathElement()"
  },
  {
    "label": "UpdateCrowdAgentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCrowdAgentParams()"
  },
  {
    "label": "ApplyCrowdAgentVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCrowdAgentVelocity(const FVector& NewVelocity, const FVector& DestPathCorner, bool bTraversingLink, bool bIsNearEndOfPath)"
  },
  {
    "label": "ApplyCrowdAgentPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCrowdAgentPosition(const FVector& NewPosition)"
  },
  {
    "label": "SetCrowdSimulationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSimulationState(ECrowdSimulationState NewState)"
  },
  {
    "label": "OnNavNodeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavNodeChanged(NavNodeRef NewPolyRef, NavNodeRef PrevPolyRef, int32 CorridorSize)"
  },
  {
    "label": "SetCrowdAnticipateTurns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAnticipateTurns(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdObstacleAvoidance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdObstacleAvoidance(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSeparation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSeparation(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdOptimizeVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdOptimizeVisibility(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdOptimizeTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdOptimizeTopology(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdPathOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdPathOffset(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSlowdownAtGoal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSlowdownAtGoal(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSeparationWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSeparationWeight(float Weight, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdCollisionQueryRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdCollisionQueryRange(float Range, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdPathOptimizationRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdPathOptimizationRange(float Range, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAvoidanceQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAvoidanceQuality(ECrowdAvoidanceQuality::Type Quality, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAvoidanceRangeMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAvoidanceRangeMultiplier(float Multiplier, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAffectFallingVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAffectFallingVelocity(bool bEnable)"
  },
  {
    "label": "SetCrowdRotateToVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdRotateToVelocity(bool bEnable)"
  },
  {
    "label": "SetAvoidanceGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceGroup(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "SetGroupsToAvoid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToAvoid(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "SetGroupsToIgnore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToIgnore(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "IsCrowdAnticipateTurnsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCrowdAnticipateTurnsActive()"
  },
  {
    "label": "IsCrowdObstacleAvoidanceActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCrowdObstacleAvoidanceActive()"
  },
  {
    "label": "IsCrowdSeparationActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCrowdSeparationActive()"
  },
  {
    "label": "IsCrowdOptimizeTopologyActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCrowdOptimizeTopologyActive()"
  },
  {
    "label": "GetCrowdSeparationWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCrowdSeparationWeight()"
  },
  {
    "label": "GetGroupsToAvoid()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupsToAvoid()"
  },
  {
    "label": "GetGroupsToIgnore()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGroupsToIgnore()"
  },
  {
    "label": "GetDebugStringTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugStringTokens(TArray<FString>& Tokens, TArray<EPathFollowingDebugTokens::Type>& Flags)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UE_DEPRECATED_FORGAME(4.16, \"Use ApplyCrowdAgentVelocity function with bIsNearEndOfPath param instead.\") virtual void ApplyCrowdAgentVelocity(const FVector& NewVelocity, const FVector& DestPathCorner, bool bTraversingLink)"
  },
  {
    "label": "UpdateDestinationForMovingGoal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateDestinationForMovingGoal(const FVector& NewDestination)"
  },
  {
    "label": "DetermineStartingPathPoint()",
    "kind": "Method",
    "detail": "Function (# endif uint8 bAffectFallingVelocity : 1 ; uint8 bRotateToVelocity : 1 ; uint8 bUpdateDirectMoveVelocity : 1 ; uint8 bRegisteredWithCrowdSimulation : 1 ; uint8 bSuspendCrowdSimulation : 1 ; uint8 bEnableAnticipateTurns : 1 ; uint8 bEnableObstacleAvoidance : 1 ; uint8 bEnableSeparation : 1 ; uint8 bEnableOptimizeVisibility : 1 ; uint8 bEnableOptimizeTopology : 1 ; uint8 bEnablePathOffset : 1 ; uint8 bEnableSlowdownAtGoal : 1 ; uint8 bFinalPathPart : 1 ; uint8 bCanCheckMovingTooFar : 1 ; uint8 bCanUpdatePathPartInTick : 1 ; uint8 bCheckMovementAngle : 1 ; uint8 bEnableSimulationReplanOnResume : 1 ; TEnumAsByte<ECrowdAvoidanceQuality::Type> AvoidanceQuality ; ECrowdSimulationState SimulationState ; float SeparationWeight ; float CollisionQueryRange ; float PathOptimizationRange ; float AvoidanceRangeMultiplier ; int32 PathStartIndex ; int32 LastPathPolyIndex ; int32)",
    "insertText": "DetermineStartingPathPoint(const FNavigationPath* ConsideredPath)"
  },
  {
    "label": "SetMoveSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveSegment(int32 SegmentStartIndex)"
  },
  {
    "label": "UpdatePathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePathSegment()"
  },
  {
    "label": "FollowPathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FollowPathSegment(float DeltaTime)"
  },
  {
    "label": "ShouldCheckPathOnResume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckPathOnResume()"
  },
  {
    "label": "IsOnPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnPath()"
  },
  {
    "label": "UpdateMovementComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateMovementComponent(bool bForce)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SwitchToNextPathPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchToNextPathPart()"
  },
  {
    "label": "ShouldSwitchPathPart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSwitchPathPart(int32 CorridorSize)"
  },
  {
    "label": "HasMovedDuringPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMovedDuringPause()"
  },
  {
    "label": "UpdateCachedDirections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedDirections(const FVector& NewVelocity, const FVector& NextPathCorner, bool bTraversingLink)"
  },
  {
    "label": "ShouldTrackMovingGoal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTrackMovingGoal(FVector& OutGoalLocation)"
  },
  {
    "label": "RegisterCrowdAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCrowdAgent()"
  }
]