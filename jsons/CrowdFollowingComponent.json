[
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "IRVOAvoidanceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRVOAvoidanceInterface"
  },
  {
    "label": "UCrowdManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdManager"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UCrowdFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdFollowingComponent"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "ApplyCrowdAgentVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCrowdAgentVelocity(const FVector& NewVelocity, const FVector& DestPathCorner, bool bTraversingLink, bool bIsNearEndOfPath)"
  },
  {
    "label": "ApplyCrowdAgentPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCrowdAgentPosition(const FVector& NewPosition)"
  },
  {
    "label": "SuspendCrowdSteering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendCrowdSteering(bool bSuspend)"
  },
  {
    "label": "SetCrowdSimulationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSimulationState(ECrowdSimulationState NewState)"
  },
  {
    "label": "OnNavNodeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavNodeChanged(NavNodeRef NewPolyRef, NavNodeRef PrevPolyRef, int32 CorridorSize)"
  },
  {
    "label": "SetCrowdAnticipateTurns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAnticipateTurns(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdObstacleAvoidance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdObstacleAvoidance(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSeparation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSeparation(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdOptimizeVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdOptimizeVisibility(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdOptimizeTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdOptimizeTopology(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdPathOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdPathOffset(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSlowdownAtGoal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSlowdownAtGoal(bool bEnable, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdSeparationWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdSeparationWeight(float Weight, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdCollisionQueryRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdCollisionQueryRange(float Range, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdPathOptimizationRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdPathOptimizationRange(float Range, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAvoidanceQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAvoidanceQuality(ECrowdAvoidanceQuality::Type Quality, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAvoidanceRangeMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAvoidanceRangeMultiplier(float Multiplier, bool bUpdateAgent = true)"
  },
  {
    "label": "SetCrowdAffectFallingVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdAffectFallingVelocity(bool bEnable)"
  },
  {
    "label": "SetCrowdRotateToVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdRotateToVelocity(bool bEnable)"
  },
  {
    "label": "SetAvoidanceGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAvoidanceGroup(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "SetGroupsToAvoid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToAvoid(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "SetGroupsToIgnore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupsToIgnore(int32 GroupFlags, bool bUpdateAgent = true)"
  },
  {
    "label": "UpdateDestinationForMovingGoal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDestinationForMovingGoal(const FVector& NewDestination)"
  },
  {
    "label": "SwitchToNextPathPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchToNextPathPart()"
  },
  {
    "label": "UpdateCachedDirections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedDirections(const FVector& NewVelocity, const FVector& NextPathCorner, bool bTraversingLink)"
  },
  {
    "label": "RegisterCrowdAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCrowdAgent()"
  }
]