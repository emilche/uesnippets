[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "IMovieSceneEasingFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieSceneEasingFunction"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEasingComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEasingComponentData"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FMovieSceneBlendTypeField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendTypeField"
  },
  {
    "label": "FMovieSceneChannelProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelProxy"
  },
  {
    "label": "FMovieSceneEvalTemplatePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvalTemplatePtr"
  },
  {
    "label": "FMovieSceneSequenceHierarchy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchy"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "FMovieSceneTimeWarpVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpVariant"
  },
  {
    "label": "ISectionEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISectionEventHandler"
  },
  {
    "label": "FEntityImportParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityImportParams"
  },
  {
    "label": "FFixedObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedObjectBindingID"
  },
  {
    "label": "FImportedEntity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedEntity"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FMovieSceneSectionEvalOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSectionEvalOptions"
  },
  {
    "label": "FMovieSceneEasingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEasingSettings"
  },
  {
    "label": "FMovieSceneTimecodeSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimecodeSource"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Conditions / MovieSceneCondition . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Evaluation / MovieSceneCompletionMode . h \" # include \" Evaluation / MovieSceneEvaluationCustomVersion . h \" # include \" EventHandlers / ISectionEventHandler . h \" # include \" EventHandlers / MovieSceneDataEventContainer . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Optional . h \" # include \" Misc / Timecode . h \" # include \" MovieSceneFrameMigration . h \" # include \" MovieSceneSequenceID . h \" # include \" MovieSceneSignedObject . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptInterface . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneSection . generated . h \" class FArchive ; class FStructOnScope ; class IMovieSceneEasingFunction ; class IMovieScenePlayer ; class UMovieSceneEntitySystemLinker ; class UObject ; enum class ECookOptimizationFlags ; struct FEasingComponentData ; struct FFrame ; struct FFrameRate ; struct FGuid ; struct FKeyHandle ; struct FMovieSceneBlendTypeField ; struct FMovieSceneChannelProxy ; struct FMovieSceneEvalTemplatePtr ; struct FMovieSceneSequenceHierarchy ; struct FMovieSceneSequenceID ; struct FPropertyChangedEvent ; struct FQualifiedFrameTime ; struct FMovieSceneTimeWarpVariant ; namespace UE::MovieScene { class ISectionEventHandler ; struct FEntityImportParams ; struct FFixedObjectBindingID ; struct FImportedEntity ; struct FSharedPlaybackState ; } enum class EMovieSceneChannelProxyType : uint8 {,Dynamic } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSectionEvalOptions() : bCanEditCompletionMode(false) , CompletionMode(EMovieSceneCompletionMode::KeepState)"
  },
  {
    "label": "EnableAndSetCompletionMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableAndSetCompletionMode(EMovieSceneCompletionMode NewCompletionMode)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneEasingSettings() : AutoEaseInDuration(0), AutoEaseOutDuration(0) , EaseIn(nullptr), bManualEaseIn(false), ManualEaseInDuration(0) , EaseOut(nullptr), bManualEaseOut(false), ManualEaseOutDuration(0) #if WITH_EDITORONLY_DATA , AutoEaseInTime_DEPRECATED(0.f), AutoEaseOutTime_DEPRECATED(0.f), ManualEaseInTime_DEPRECATED(0.f), ManualEaseOutTime_DEPRECATED(0.f)"
  },
  {
    "label": "GetEaseInDuration()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "GetEaseInDuration()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTimecodeSource(FTimecode InTimecode) : Timecode(InTimecode)"
  },
  {
    "label": "FMovieSceneTimecodeSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimecodeSource() : Timecode(FTimecode())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneTimecodeSource& Other)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EMovieSceneTransformChannel : uint32 { None = 0 x000,TranslationX = 0 x001,TranslationY = 0 x002,TranslationZ = 0 x004,Translation = TranslationX | TranslationY | TranslationZ,RotationX = 0 x008,RotationY = 0 x010,RotationZ = 0 x020,Rotation = RotationX | RotationY | RotationZ,ScaleX = 0 x040,ScaleY = 0 x080,ScaleZ = 0 x100,Scale = ScaleX | ScaleY | ScaleZ,AllTransform = Translation | Rotation | Scale,Weight = 0 x200,All = Translation | Rotation | Scale | Weight,} ;)",
    "insertText": "UCLASS(abstract, DefaultToInstanced, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, Category=\"Section\", meta=(ShowOnlyInnerProperties))"
  },
  {
    "label": "TryModify()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::TDataEventContainer<UE::MovieScene::ISectionEventHandler> EventHandlers ; public : bool)",
    "insertText": "TryModify(bool bAlwaysMarkDirty=true)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetRange()"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> SectionLower = SectionRange . Value .)",
    "insertText": "GetLowerBound()"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber> SectionUpper = SectionRange . Value .)",
    "insertText": "GetUpperBound()"
  },
  {
    "label": "Inclusive()",
    "kind": "Method",
    "detail": "Function (SectionLower = TRangeBound<FFrameNumber)",
    "insertText": "Inclusive(SectionLower.GetValue() + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SectionUpper.IsInclusive())"
  },
  {
    "label": "Exclusive()",
    "kind": "Method",
    "detail": "Function (SectionUpper = TRangeBound<FFrameNumber)",
    "insertText": "Exclusive(SectionUpper.GetValue() + 1)"
  },
  {
    "label": "FFrameNumber()",
    "kind": "Method",
    "detail": "Function (} return TRange<)",
    "insertText": "FFrameNumber(SectionLower, SectionUpper)"
  },
  {
    "label": "ExpandToFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExpandToFrame(FFrameNumber InFrame)"
  },
  {
    "label": "HasStartFrame()",
    "kind": "Method",
    "detail": "Function (FFrameNumber StartOffset =)",
    "insertText": "HasStartFrame() ? FMath::Min(GetInclusiveStartFrame(), InFrame) - GetInclusiveStartFrame()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRange(TRange<FFrameNumber>::Hull(GetRange(), TRange<FFrameNumber>::Inclusive(InFrame, InFrame)))"
  },
  {
    "label": "FixupRelativeKeyframes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupRelativeKeyframes(StartOffset)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetRange(const TRange<FFrameNumber>& NewRange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCanSetRange = true ;)",
    "insertText": "if(!HasAnyFlags(RF_NeedInitialization))"
  },
  {
    "label": "TryModify()",
    "kind": "Method",
    "detail": "Function (bCanSetRange =)",
    "insertText": "TryModify()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bCanSetRange)"
  },
  {
    "label": "HasStartFrame()",
    "kind": "Method",
    "detail": "Function (SectionRange . Value = NewRange ; } } bool)",
    "insertText": "HasStartFrame()"
  },
  {
    "label": "HasEndFrame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasEndFrame()"
  },
  {
    "label": "GetInclusiveStartFrame()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "GetInclusiveStartFrame()"
  },
  {
    "label": "GetExclusiveEndFrame()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber)",
    "insertText": "GetExclusiveEndFrame()"
  },
  {
    "label": "SetStartFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStartFrame(TRangeBound<FFrameNumber> NewStartFrame)"
  },
  {
    "label": "SetEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndFrame(TRangeBound<FFrameNumber> NewEndFrame)"
  },
  {
    "label": "IsTimeWithinSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimeWithinSection(FFrameNumber Position)"
  },
  {
    "label": "GetAutoSizeRange()",
    "kind": "Method",
    "detail": "Function (} TOptional<TRange<FFrameNumber>>)",
    "insertText": "GetAutoSizeRange()"
  },
  {
    "label": "GetSupportedBlendTypes()",
    "kind": "Method",
    "detail": "Function (BlendType = InBlendType ; } } FMovieSceneBlendTypeField)",
    "insertText": "GetSupportedBlendTypes()"
  },
  {
    "label": "GetBlendingOrder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendingOrder()"
  },
  {
    "label": "MoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSection(FFrameNumber DeltaTime)"
  },
  {
    "label": "ComputeEffectiveRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "ComputeEffectiveRange()"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "SplitSection(FQualifiedFrameTime SplitTime, bool bDeleteKeys)"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimSection(FQualifiedFrameTime TrimTime, bool bTrimLeft, bool bDeleteKeys)"
  },
  {
    "label": "GetKeyStruct()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStructOnScope>)",
    "insertText": "GetKeyStruct(TArrayView<const FKeyHandle> KeyHandles)"
  },
  {
    "label": "GetTimeWarp()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpVariant*)",
    "insertText": "GetTimeWarp()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutSnapTimes .)",
    "insertText": "Add(SectionRange.Value.GetLowerBoundValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SectionRange.Value.GetUpperBound().IsClosed())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutSnapTimes .)",
    "insertText": "Add(SectionRange.Value.GetUpperBoundValue())"
  },
  {
    "label": "InitialPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialPlacement(const TArray<UMovieSceneSection*>& Sections, FFrameNumber InStartTime, int32 InDuration, bool bAllowMultipleRows)"
  },
  {
    "label": "InitialPlacementOnRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialPlacementOnRow(const TArray<UMovieSceneSection*>& Sections, FFrameNumber InStartTime, int32 InDuration, int32 InRowIndex)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetOffsetTime()"
  },
  {
    "label": "MigrateFrameTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MigrateFrameTimes(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "OnBindingIDsUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBindingIDsUpdated(const TMap<UE::MovieScene::FFixedObjectBindingID, UE::MovieScene::FFixedObjectBindingID>& OldFixedToNewFixedMap, FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetReferencedBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetReferencedBindings(TArray<FGuid>& OutBindings)"
  },
  {
    "label": "GetOverlappingSections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOverlappingSections(TArray<UMovieSceneSection*>& OutSections, bool bSameRow, bool bIncludeThis)"
  },
  {
    "label": "CanHaveOpenLowerBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveOpenLowerBound()"
  },
  {
    "label": "CanHaveOpenUpperBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveOpenUpperBound()"
  },
  {
    "label": "EvaluateEasing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateEasing(FFrameTime InTime)"
  },
  {
    "label": "EvaluateEasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateEasing(FFrameTime InTime, TOptional<float>& OutEaseInValue, TOptional<float>& OutEaseOutValue, float* OutEaseInInterp, float* OutEaseOutInterp)"
  },
  {
    "label": "GetEaseInRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetEaseInRange()"
  },
  {
    "label": "GetEaseOutRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetEaseOutRange()"
  },
  {
    "label": "GetChannelProxy()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy&)",
    "insertText": "GetChannelProxy()"
  },
  {
    "label": "InvalidateChannelProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateChannelProxy()"
  },
  {
    "label": "GetSupportsInfiniteRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportsInfiniteRange()"
  },
  {
    "label": "GetImplicitObjectOwner()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetImplicitObjectOwner()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPaste()"
  },
  {
    "label": "GetCookOptimizationFlags()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR ECookOptimizationFlags)",
    "insertText": "GetCookOptimizationFlags()"
  },
  {
    "label": "RemoveForCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForCook()"
  },
  {
    "label": "BuildDefaultComponents()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "BuildDefaultComponents(UMovieSceneEntitySystemLinker* EntityLinker, const UE::MovieScene::FEntityImportParams& Params, UE::MovieScene::FImportedEntity* OutLedgerEntry)"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRename(UObject* OldOuter, const FName OldName)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "OnMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoved(int32 DeltaTime)"
  },
  {
    "label": "OnDilated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDilated(float DilationFactor, FFrameNumber Origin)"
  },
  {
    "label": "FixupRelativeKeyframes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FixupRelativeKeyframes(FFrameNumber Offset)"
  },
  {
    "label": "ShouldUpgradeEntityData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpgradeEntityData(FArchive& Ar, FMovieSceneEvaluationCustomVersion::Type UpgradeVersion)"
  },
  {
    "label": "CacheChannelProxy()",
    "kind": "Method",
    "detail": "Function (private : EMovieSceneChannelProxyType)",
    "insertText": "CacheChannelProxy()"
  },
  {
    "label": "MoveSectionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSectionImpl(FFrameNumber DeltaTime)"
  },
  {
    "label": "GetFirstLoopStartOffsetAtTrimTime()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMovieSceneChannelProxy> ChannelProxy ; EMovieSceneChannelProxyType ChannelProxyType ; } ; template<SectionParams> FFrameNumber)",
    "insertText": "GetFirstLoopStartOffsetAtTrimTime(FQualifiedFrameTime TrimTime, const SectionParams& Params, FFrameNumber StartFrame, FFrameRate FrameRate)"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (const float AnimPlayRate =)",
    "insertText": "IsNearlyZero(Params.PlayRate)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float AnimPosition = static_cast<)",
    "insertText": "float((TrimTime.Time - StartFrame) / TrimTime.Rate * AnimPlayRate)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float SeqLength = static_cast<)",
    "insertText": "float(Params.GetSequenceLength() - FrameRate.AsSeconds(Params.StartFrameOffset + Params.EndFrameOffset) / AnimPlayRate)"
  },
  {
    "label": "AsFrameNumber()",
    "kind": "Method",
    "detail": "Function (FFrameNumber NewOffset = FrameRate .)",
    "insertText": "AsFrameNumber(FMath::Fmod(AnimPosition, SeqLength))"
  },
  {
    "label": "AsFrameNumber()",
    "kind": "Method",
    "detail": "Function (NewOffset + = Params . FirstLoopStartFrameOffset ; const FFrameNumber SeqLengthInFrames = FrameRate .)",
    "insertText": "AsFrameNumber(SeqLength)"
  }
]