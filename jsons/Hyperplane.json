[
  {
    "label": "Hyperplane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hyperplane"
  },
  {
    "label": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_HYPERPLANE_H # define EIGEN_HYPERPLANE_H namespace Eigen { template<_Scalar,int _AmbientDim,int _Options> class Hyperplane { public :)",
    "insertText": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar,_AmbientDim==Dynamic ? Dynamic : _AmbientDim+1)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (AmbientDimAtCompileTime = _AmbientDim,Options = _Options } ; typedef _Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType ; typedef Matrix<Scalar,)",
    "insertText": "Index(AmbientDimAtCompileTime)==Dynamic ? Dynamic : Index(AmbientDimAtCompileTime)"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (typedef Block<Coefficients,AmbientDimAtCompileTime,1> NormalReturnType ; typedef const Block<const Coefficients,AmbientDimAtCompileTime,1> ConstNormalReturnType ; EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane()"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions> EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other) : m_coeffs(other.coeffs())"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane(Index _dim) : m_coeffs(_dim+1)"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane(const VectorType& n, const VectorType& e) : m_coeffs(n.size()+1)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normal()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset() = -n.dot(e)"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane(const VectorType& n, const Scalar& d) : m_coeffs(n.size()+1)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset()"
  },
  {
    "label": "Through()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Hyperplane)",
    "insertText": "Through(const VectorType& p0, const VectorType& p1)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (Hyperplane)",
    "insertText": "result(p0.size())"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "normal() = (p1 - p0).unitOrthogonal()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "offset() = -p0.dot(result.normal())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(VectorType, 3) Hyperplane result(p0.size())"
  },
  {
    "label": "v0()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "v0(p2 - p0), v1(p1 - p0)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "normal() = v0.cross(v1)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (RealScalar norm = result .)",
    "insertText": "normal().norm()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,3> m ; m<<v0 .)",
    "insertText": "transpose(), v1.transpose()"
  },
  {
    "label": "svd()",
    "kind": "Method",
    "detail": "Function (JacobiSVD<Matrix<Scalar,2,3>>)",
    "insertText": "svd(m, ComputeFullV)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "normal() = svd.matrixV().col(2)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normal() = parametrized.direction().unitOrthogonal()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset() = -parametrized.origin().dot(normal())"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "dim()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "normalize(void)"
  },
  {
    "label": "signedDistance()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "signedDistance(const VectorType& p)"
  },
  {
    "label": "absDistance()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "absDistance(const VectorType& p)"
  },
  {
    "label": "projection()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "projection(const VectorType& p)"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Coefficients&)",
    "insertText": "coeffs()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(VectorType, 2) Scalar det = coeffs().coeff(0) * other.coeffs().coeff(1) - coeffs().coeff(1) * other.coeffs().coeff(0)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} else { Scalar invdet =)",
    "insertText": "Scalar(1)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} } template<XprType> EIGEN_DEVICE_FUNC Hyperplane&)",
    "insertText": "transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normal() = mat.inverse().transpose() * normal()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(traits==Isometry) normal() = mat * normal()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<int TrOptions> EIGEN_DEVICE_FUNC Hyperplane&)",
    "insertText": "transform(const Transform<Scalar,AmbientDimAtCompileTime,Affine,TrOptions>& t, TransformTraits traits = Affine)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transform(t.linear(), traits)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset() -= normal().dot(t.translation())"
  },
  {
    "label": "Hyperplane()",
    "kind": "Method",
    "detail": "Function (} template<OtherScalarType,int OtherOptions> EIGEN_DEVICE_FUNC)",
    "insertText": "Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (m_coeffs = other .)",
    "insertText": "coeffs().template cast<Scalar>()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions> EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision())"
  }
]