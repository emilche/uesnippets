[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCompareFHitResultTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFHitResultTime"
  },
  {
    "label": "ConvertQueryImpactHit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" EngineDefines . h \" # include \" PhysicsEngine / BodyInstance . h \" # include \" PhysicsPublic . h \" enum class EConvertQueryResult { Valid,Invalid } ; EConvertQueryResult)",
    "insertText": "ConvertQueryImpactHit(const UWorld* World, const FHitLocation& PHit, FHitResult& OutResult, float CheckLength, const FCollisionFilterData& QueryFilter, const FVector& StartLoc, const FVector& EndLoc, const FPhysicsGeometry* Geom, const FTransform& QueryTM, bool bReturnFaceIndex, bool bReturnPhysMat)"
  },
  {
    "label": "ConvertQueryImpactHit()",
    "kind": "Method",
    "detail": "Function (EConvertQueryResult)",
    "insertText": "ConvertQueryImpactHit(const UWorld* World, const ChaosInterface::FPTLocationHit& PHit, FHitResult& OutResult, float CheckLength, const FCollisionFilterData& QueryFilter, const FVector& StartLoc, const FVector& EndLoc, const FPhysicsGeometry* Geom, const FTransform& QueryTM, bool bReturnFaceIndex, bool bReturnPhysMat)"
  },
  {
    "label": "ConvertTraceResults()",
    "kind": "Method",
    "detail": "Function (template<Hit> EConvertQueryResult)",
    "insertText": "ConvertTraceResults(bool& OutHasValidBlockingHit, const UWorld* World, int32 NumHits, Hit* Hits, float CheckLength, const FCollisionFilterData& QueryFilter, TArray<FHitResult>& OutHits, const FVector& StartLoc, const FVector& EndLoc, const FPhysicsGeometry* Geom, const FTransform& QueryTM, float MaxDistance, bool bReturnFaceIndex, bool bReturnPhysMat)"
  },
  {
    "label": "ConvertTraceResults()",
    "kind": "Method",
    "detail": "Function (template<Hit> EConvertQueryResult)",
    "insertText": "ConvertTraceResults(bool& OutHasValidBlockingHit, const UWorld* World, int32 NumHits, Hit* Hits, float CheckLength, const FCollisionFilterData& QueryFilter, FHitResult& OutHits, const FVector& StartLoc, const FVector& EndLoc, const FPhysicsGeometry* Geom, const FTransform& QueryTM, float MaxDistance, bool bReturnFaceIndex, bool bReturnPhysMat)"
  },
  {
    "label": "ConvertQueryOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertQueryOverlap(const UWorld* World, const FPhysicsShape& PShape, const FPhysicsActorHandle& PActor, FOverlapResult& OutOverlap, const FCollisionFilterData& QueryFilter)"
  },
  {
    "label": "IsBlocking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlocking(const FPhysicsShape& PShape, const FCollisionFilterData& QueryFilter)"
  },
  {
    "label": "ConvertOverlapResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertOverlapResults(int32 NumOverlaps, FHitOverlap* POverlapResults, const FCollisionFilterData& QueryFilter, TArray<FOverlapResult>& OutOverlaps)"
  },
  {
    "label": "ConvertOverlapResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertOverlapResults(int32 NumOverlaps, ChaosInterface::FPTOverlapHit* POverlapResults, const FCollisionFilterData& QueryFilter, TArray<FOverlapResult>& OutOverlaps)"
  },
  {
    "label": "ConvertOverlapToHitResult()",
    "kind": "Method",
    "detail": "Function (FHitResult)",
    "insertText": "ConvertOverlapToHitResult(const FOverlapResult& Overlap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FCompareFHitResultTime { bool)",
    "insertText": "operator()(const FHitResult& A, const FHitResult& B)"
  }
]