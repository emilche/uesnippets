[
  {
    "label": "FContentBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundle"
  },
  {
    "label": "UContentBundleDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleDescriptor"
  },
  {
    "label": "FContentBundleClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleClient"
  },
  {
    "label": "FContentBundleEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleEditor"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "URuntimeHashExternalStreamingObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeHashExternalStreamingObjectBase"
  },
  {
    "label": "UContentBundleDuplicateForPIEHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleDuplicateForPIEHelper"
  },
  {
    "label": "UContentBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleManager"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" WorldPartition / ContentBundle / ContentBundleContainer . h \" # include \" ContentBundleWorldSubsystem . generated . h \" class FContentBundle ; class UContentBundleDescriptor ; class FContentBundleClient ; class FContentBundleEditor ; class UWorldPartition ; class UCanvas ; # if WITH_EDITOR class URuntimeHashExternalStreamingObjectBase ; class UContentBundleDuplicateForPIEHelper ; # endif)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UContentBundleManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "CanInject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInject()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetEditorContentBundle()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetEditorContentBundle(TArray<TSharedPtr<FContentBundleEditor>>& OutContentBundles)"
  },
  {
    "label": "GetEditorContentBundle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContentBundleEditor>)",
    "insertText": "GetEditorContentBundle(const UContentBundleDescriptor* Descriptor, const UWorld* ContentBundleWorld)"
  },
  {
    "label": "GetEditorContentBundle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FContentBundleEditor>)",
    "insertText": "GetEditorContentBundle(const FGuid& ContentBundleGuid)"
  },
  {
    "label": "GetPIEDuplicateHelper()",
    "kind": "Method",
    "detail": "Function (UContentBundleDuplicateForPIEHelper*)",
    "insertText": "GetPIEDuplicateHelper()"
  },
  {
    "label": "GetContentBundle()",
    "kind": "Method",
    "detail": "Function (# endif const FContentBundleBase*)",
    "insertText": "GetContentBundle(const UWorld* InWorld, const FGuid& Guid)"
  },
  {
    "label": "DrawContentBundlesStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawContentBundlesStatus(const UWorld* InWorld, UCanvas* Canvas, FVector2D& Offset)"
  },
  {
    "label": "GetContentBundleContainerIndex()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "GetContentBundleContainerIndex(const UWorld* InjectedWorld)"
  },
  {
    "label": "GetContentBundleContainer()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<FContentBundleContainer>*)",
    "insertText": "GetContentBundleContainer(const UWorld* InjectedWorld)"
  },
  {
    "label": "OnWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionInitialized(UWorldPartition* WorldPartition)"
  },
  {
    "label": "OnWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionUninitialized(UWorldPartition* WorldPartition)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: #if WITH_EDITOR void Initialize()"
  },
  {
    "label": "StoreContentBundleStreamingObect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreContentBundleStreamingObect(const FContentBundleEditor& ContentBundleEditor, URuntimeHashExternalStreamingObjectBase* StreamingObject)"
  },
  {
    "label": "RetrieveContentBundleStreamingObject()",
    "kind": "Method",
    "detail": "Function (URuntimeHashExternalStreamingObjectBase*)",
    "insertText": "RetrieveContentBundleStreamingObject(const FContentBundle& ContentBundle)"
  },
  {
    "label": "GetStreamingObjectCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStreamingObjectCount()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (StreamingObjects .)",
    "insertText": "Empty()"
  },
  {
    "label": "OnPIEEnded()",
    "kind": "Method",
    "detail": "Function (} # endif private : void)",
    "insertText": "OnPIEEnded(const bool bIsSimulating)"
  }
]