[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FQuickFind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuickFind"
  },
  {
    "label": "SQuickFind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SQuickFind"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SLogView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLogView"
  },
  {
    "label": "ITimingViewExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewExtender"
  },
  {
    "label": "FTimingGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphTrack"
  },
  {
    "label": "FTimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingViewDrawHelper"
  },
  {
    "label": "FLoadingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadingSharedState"
  },
  {
    "label": "FFrameSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameSharedState"
  },
  {
    "label": "FThreadTimingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingSharedState"
  },
  {
    "label": "FTimingRegionsSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsSharedState"
  },
  {
    "label": "FFileActivitySharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivitySharedState"
  },
  {
    "label": "FTimeRulerTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeRulerTrack"
  },
  {
    "label": "FTimeMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeMarker"
  },
  {
    "label": "FMarkersTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkersTimingTrack"
  },
  {
    "label": "STimersView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimersView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, FName InViewName = NAME_None)"
  },
  {
    "label": "ToggleCompactMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCompactMode()"
  },
  {
    "label": "ToggleAutoHideEmptyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAutoHideEmptyTracks()"
  },
  {
    "label": "TogglePanningOnScreenEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePanningOnScreenEdges()"
  },
  {
    "label": "QuickFind_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuickFind_Execute()"
  },
  {
    "label": "ToggleTrackVisibility_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTrackVisibility_Execute(uint64 InTrackId)"
  },
  {
    "label": "HideAllDefaultTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAllDefaultTracks()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool bIsFirstReset = false)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveTrack(Track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveTrack(Track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveTrack(Track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveTrack(Track)"
  },
  {
    "label": "ChangeTrackLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTrackLocation(TSharedRef<FBaseTimingTrack> Track, ETimingTrackLocation NewLocation)"
  },
  {
    "label": "UpdateScrollableTracksOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollableTracksOrder()"
  },
  {
    "label": "HideAllScrollableTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAllScrollableTracks()"
  },
  {
    "label": "HandleTrackVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTrackVisibilityChanged()"
  },
  {
    "label": "SetAutoScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScroll(bool bOnOff)"
  },
  {
    "label": "ScrollAtPosY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollAtPosY(float ScrollPosY)"
  },
  {
    "label": "BringIntoViewY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringIntoViewY(float InTopY, float InBottomY)"
  },
  {
    "label": "BringScrollableTrackIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringScrollableTrackIntoView(const FBaseTimingTrack& Track)"
  },
  {
    "label": "ScrollAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollAtTime(double StartTime)"
  },
  {
    "label": "CenterOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterOnTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "ZoomOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomOnTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "BringIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringIntoView(double StartTime, double EndTime)"
  },
  {
    "label": "SelectTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "SnapToFrameBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToFrameBound(double& IntervalStartTime, double& IntervalDuration)"
  },
  {
    "label": "SelectToTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectToTimeMarker(double InTimeMarker)"
  },
  {
    "label": "SetTimeMarkersVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeMarkersVisible(bool bOnOff)"
  },
  {
    "label": "SetDrawOnlyBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawOnlyBookmarks(bool bOnOff)"
  },
  {
    "label": "SelectTimingTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimingTrack(const TSharedPtr<FBaseTimingTrack> InTrack, bool bBringTrackIntoView)"
  },
  {
    "label": "SelectTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimingEvent(const TSharedPtr<const ITimingEvent> InEvent, bool bBringEventIntoViewHorizontally, bool bBringEventIntoViewVertically = false)"
  },
  {
    "label": "ToggleGraphSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGraphSeries(const TSharedPtr<const ITimingEvent> InEvent)"
  },
  {
    "label": "SetEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventFilter(const TSharedPtr<ITimingEventFilter> InEventFilter)"
  },
  {
    "label": "ToggleEventFilterByEventType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleEventFilterByEventType(const uint64 EventType)"
  },
  {
    "label": "ClearRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRelations()"
  },
  {
    "label": "CloseQuickFindTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseQuickFindTab()"
  },
  {
    "label": "SelectEventInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectEventInstance(uint32 TimerId, ESelectEventType Type, bool bUseSelection)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector2D(16.0f, 16.0f)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "MakeCompactAutoScrollOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCompactAutoScrollOptionsMenu()"
  },
  {
    "label": "MakeAutoScrollOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutoScrollOptionsMenu()"
  },
  {
    "label": "MakeAllTracksMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAllTracksMenu()"
  },
  {
    "label": "CreateAllTracksMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAllTracksMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "MakeCpuGpuTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCpuGpuTracksFilterMenu()"
  },
  {
    "label": "MakeOtherTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeOtherTracksFilterMenu()"
  },
  {
    "label": "ShowHideGraphTrack_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideGraphTrack_Execute()"
  },
  {
    "label": "MakePluginTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePluginTracksFilterMenu()"
  },
  {
    "label": "MakeViewModeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeViewModeMenu()"
  },
  {
    "label": "CreateDepthLimitMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDepthLimitMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ChooseNextEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseNextEventDepthLimit()"
  },
  {
    "label": "SetEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventDepthLimit(uint32 DepthLimit)"
  },
  {
    "label": "CreateCpuThreadTrackColoringModeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCpuThreadTrackColoringModeMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ChooseNextCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseNextCpuThreadTrackColoringMode()"
  },
  {
    "label": "SetCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCpuThreadTrackColoringMode(UE::Insights::ETimingEventsColoringMode Mode)"
  },
  {
    "label": "CheckCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckCpuThreadTrackColoringMode(UE::Insights::ETimingEventsColoringMode Mode)"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateTrackLocationMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackLocationMenu(FMenuBuilder& MenuBuilder, TSharedRef<FBaseTimingTrack> Track)"
  },
  {
    "label": "AutoScroll_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoScroll_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "SetAutoScrollFrameAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollFrameAlignment(int32 FrameType)"
  },
  {
    "label": "SetAutoScrollViewportOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollViewportOffset(double Percent)"
  },
  {
    "label": "SetAutoScrollDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollDelay(double Delay)"
  },
  {
    "label": "UpdatePositionForScrollableTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionForScrollableTracks()"
  },
  {
    "label": "EnforceHorizontalScrollLimits()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "EnforceHorizontalScrollLimits(const double InStartTime)"
  },
  {
    "label": "EnforceVerticalScrollLimits()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EnforceVerticalScrollLimits(const float InScrollPosY)"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "VerticalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerticalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVerticalScrollBar()"
  },
  {
    "label": "RaiseSelectionChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseSelectionChanging()"
  },
  {
    "label": "RaiseSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseSelectionChanged()"
  },
  {
    "label": "RaiseTimeMarkerChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseTimeMarkerChanging(TSharedRef<FTimeMarker> InTimeMarker)"
  },
  {
    "label": "RaiseTimeMarkerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseTimeMarkerChanged(TSharedRef<FTimeMarker> InTimeMarker)"
  },
  {
    "label": "UpdateHoveredTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredTimingEvent(float InMousePosX, float InMousePosY)"
  },
  {
    "label": "OnSelectedTimingEventChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedTimingEventChanged()"
  },
  {
    "label": "SelectHoveredTimingTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHoveredTimingTrack()"
  },
  {
    "label": "SelectHoveredTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHoveredTimingEvent()"
  },
  {
    "label": "SelectLeftTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLeftTimingEvent()"
  },
  {
    "label": "SelectRightTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRightTimingEvent()"
  },
  {
    "label": "SelectUpTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectUpTimingEvent()"
  },
  {
    "label": "SelectDownTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectDownTimingEvent()"
  },
  {
    "label": "FrameSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameSelection()"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "FindFirstEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFirstEvent()"
  },
  {
    "label": "FindPrevEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPrevEvent()"
  },
  {
    "label": "FindNextEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextEvent()"
  },
  {
    "label": "FindLastEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLastEvent()"
  },
  {
    "label": "FilterAllTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterAllTracks()"
  },
  {
    "label": "ClearFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFilters()"
  },
  {
    "label": "SpawnQuickFindTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnQuickFindTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "PopulateTrackSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTrackSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "PopulateTimerNameSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTimerNameSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "EnumerateFilteredTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFilteredTracks(TSharedPtr<UE::Insights::FFilterConfigurator> FilterConfigurator, TSharedPtr<const FBaseTimingTrack> PriorityTrack, EnumerateFilteredTracksCallback Callback)"
  },
  {
    "label": "GetFrameTypeToSnapTo()",
    "kind": "Method",
    "detail": "Function (ETraceFrameType)",
    "insertText": "GetFrameTypeToSnapTo()"
  },
  {
    "label": "UpdateFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilters()"
  }
]