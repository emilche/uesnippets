[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FQuickFind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuickFind"
  },
  {
    "label": "SQuickFind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SQuickFind"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SLogView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLogView"
  },
  {
    "label": "ITimingViewExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewExtender"
  },
  {
    "label": "FTimingGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphTrack"
  },
  {
    "label": "FTimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingViewDrawHelper"
  },
  {
    "label": "FLoadingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoadingSharedState"
  },
  {
    "label": "FFrameSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameSharedState"
  },
  {
    "label": "FThreadTimingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingSharedState"
  },
  {
    "label": "FTimingRegionsSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsSharedState"
  },
  {
    "label": "FFileActivitySharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivitySharedState"
  },
  {
    "label": "FTimeRulerTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeRulerTrack"
  },
  {
    "label": "FTimeMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeMarker"
  },
  {
    "label": "FMarkersTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkersTimingTrack"
  },
  {
    "label": "STimersView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimersView"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "STimingView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Geometry . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / Function . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" InsightsCore / Common / FixedCircularBuffer . h \" # include \" Insights / Config . h \" # include \" Insights / ITimingViewSession . h \" # include \" Insights / TimingProfiler / ViewModels / TimerNode . h \" # include \" Insights / ViewModels / BaseTimingTrack . h \" # include \" Insights / ViewModels / TimingEvent . h \" # include \" Insights / ViewModels / TimingEventsTrack . h \" # include \" Insights / ViewModels / TimingTrackViewport . h \" # include \" Insights / ViewModels / TimingViewDrawHelper . h \" # include \" Insights / ViewModels / TooltipDrawState . h \" # if UE_INSIGHTS_BACKWARD_COMPATIBILITY_UE54 # include \" Insights / ITimingViewExtender . h \" # endif class FMenuBuilder ; class FUICommandList ; class SDockTab ; class SOverlay ; class SScrollBar ; class FSpawnTabArgs ; namespace Insights { class FQuickFind ; class SQuickFind ; } namespace UE::Insights { class FFilterConfigurator ; enum class ETimingEventsColoringMode : uint32 ; class SLogView ; } namespace UE::Insights::Timing { class ITimingViewExtender ; } class FTimingGraphTrack ; class FTimingViewDrawHelper ; namespace UE::Insights::LoadingProfiler { class FLoadingSharedState ; } namespace UE::Insights::TimingProfiler { class FFrameSharedState ; class FThreadTimingSharedState ; class FTimingRegionsSharedState ; class FFileActivitySharedState ; class FTimeRulerTrack ; class FTimeMarker ; class FMarkersTimingTrack ; class STimersView ; enum class ESelectEventType : uint32 { Min = 0,Max = 1 } ; class STimingView : public SCompoundWidget,public UE::Insights::Timing::ITimingViewSession { public :)",
    "insertText": "STimingView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(STimingView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, FName InViewName = NAME_None)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "ToggleCompactMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCompactMode()"
  },
  {
    "label": "IsAutoHideEmptyTracksEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoHideEmptyTracksEnabled()"
  },
  {
    "label": "ToggleAutoHideEmptyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAutoHideEmptyTracks()"
  },
  {
    "label": "IsPanningOnScreenEdgesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPanningOnScreenEdgesEnabled()"
  },
  {
    "label": "TogglePanningOnScreenEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePanningOnScreenEdges()"
  },
  {
    "label": "QuickFind_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QuickFind_CanExecute()"
  },
  {
    "label": "QuickFind_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuickFind_Execute()"
  },
  {
    "label": "ToggleTrackVisibility_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleTrackVisibility_IsChecked(uint64 InTrackId)"
  },
  {
    "label": "ToggleTrackVisibility_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTrackVisibility_Execute(uint64 InTrackId)"
  },
  {
    "label": "GetFrameSharedState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFrameSharedState>)",
    "insertText": "GetFrameSharedState()"
  },
  {
    "label": "GetTimeRulerTrack()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTimeRulerTrack>)",
    "insertText": "GetTimeRulerTrack()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "AddTopDockedTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTopDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(Track, ETimingTrackLocation::TopDocked)"
  },
  {
    "label": "RemoveTopDockedTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveTopDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddBottomDockedTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBottomDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(Track, ETimingTrackLocation::BottomDocked)"
  },
  {
    "label": "RemoveBottomDockedTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveBottomDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddScrollableTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddScrollableTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(Track, ETimingTrackLocation::Scrollable)"
  },
  {
    "label": "RemoveScrollableTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveScrollableTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "InvalidateScrollableTracksOrder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateScrollableTracksOrder()"
  },
  {
    "label": "AddForegroundTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForegroundTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(Track, ETimingTrackLocation::Foreground)"
  },
  {
    "label": "RemoveForegroundTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveForegroundTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTrack(TSharedPtr<FBaseTimingTrack> Track, ETimingTrackLocation Location)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBaseTimingTrack>)",
    "insertText": "FindTrack(uint64 InTrackId)"
  },
  {
    "label": "GetTimeMarker()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTimeMarker()"
  },
  {
    "label": "SetTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeMarker(double InTimeMarker)"
  },
  {
    "label": "SetAndCenterOnTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAndCenterOnTimeMarker(double InTimeMarker)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (Timing::FSelectionChangedDelegate&)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SelectedEvent .)",
    "insertText": "Reset()"
  },
  {
    "label": "OnSelectedEventChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedEventChanged()"
  },
  {
    "label": "ResetEventFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetEventFilter()"
  },
  {
    "label": "SetEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventFilter(nullptr)"
  },
  {
    "label": "PreventThrottling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreventThrottling()"
  },
  {
    "label": "AddOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOverlayWidget(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "EnumerateAllTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllTracks(TFunctionRef<bool(TSharedPtr<FBaseTimingTrack>&)> Callback)"
  },
  {
    "label": "GetTrackList()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FBaseTimingTrack>>&)",
    "insertText": "GetTrackList(ETimingTrackLocation TrackLocation)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FBaseTimingTrack>> EmptyTrackList ;)",
    "insertText": "switch(TrackLocation)"
  },
  {
    "label": "ChangeTrackLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTrackLocation(TSharedRef<FBaseTimingTrack> Track, ETimingTrackLocation NewLocation)"
  },
  {
    "label": "CanChangeTrackLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeTrackLocation(TSharedRef<FBaseTimingTrack> Track, ETimingTrackLocation NewLocation)"
  },
  {
    "label": "CheckTrackLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTrackLocation(TSharedRef<FBaseTimingTrack> Track, ETimingTrackLocation Location)"
  },
  {
    "label": "UpdateScrollableTracksOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollableTracksOrder()"
  },
  {
    "label": "GetFirstScrollableTrackOrder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFirstScrollableTrackOrder()"
  },
  {
    "label": "GetLastScrollableTrackOrder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastScrollableTrackOrder()"
  },
  {
    "label": "HideAllScrollableTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAllScrollableTracks()"
  },
  {
    "label": "HandleTrackVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTrackVisibilityChanged()"
  },
  {
    "label": "IsGpuTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGpuTrackVisible()"
  },
  {
    "label": "IsCpuTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCpuTrackVisible(uint32 InThreadId)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (const FTimingTrackViewport&)",
    "insertText": "GetViewport()"
  },
  {
    "label": "ScrollAtPosY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollAtPosY(float ScrollPosY)"
  },
  {
    "label": "BringIntoViewY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringIntoViewY(float InTopY, float InBottomY)"
  },
  {
    "label": "BringScrollableTrackIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringScrollableTrackIntoView(const FBaseTimingTrack& Track)"
  },
  {
    "label": "ScrollAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollAtTime(double StartTime)"
  },
  {
    "label": "CenterOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterOnTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "ZoomOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomOnTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "BringIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringIntoView(double StartTime, double EndTime)"
  },
  {
    "label": "SelectTimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimeInterval(double IntervalStartTime, double IntervalDuration)"
  },
  {
    "label": "SnapToFrameBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToFrameBound(double& IntervalStartTime, double& IntervalDuration)"
  },
  {
    "label": "SelectToTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectToTimeMarker(double InTimeMarker)"
  },
  {
    "label": "SetTimeMarkersVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeMarkersVisible(bool bOnOff)"
  },
  {
    "label": "SetDrawOnlyBookmarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawOnlyBookmarks(bool bOnOff)"
  },
  {
    "label": "GetMainTimingGraphTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphTrack>)",
    "insertText": "GetMainTimingGraphTrack()"
  },
  {
    "label": "SelectTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimingEvent(const TSharedPtr<const ITimingEvent> InEvent, bool bBringEventIntoViewHorizontally, bool bBringEventIntoViewVertically = false)"
  },
  {
    "label": "ToggleGraphSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGraphSeries(const TSharedPtr<const ITimingEvent> InEvent)"
  },
  {
    "label": "GetEventFilter()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<ITimingEventFilter>)",
    "insertText": "GetEventFilter()"
  },
  {
    "label": "ToggleEventFilterByEventType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleEventFilterByEventType(const uint64 EventType)"
  },
  {
    "label": "IsFilterByEventType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterByEventType(const uint64 EventType)"
  },
  {
    "label": "GetTrackAt()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FBaseTimingTrack>)",
    "insertText": "GetTrackAt(float InPosX, float InPosY)"
  },
  {
    "label": "GetCurrentRelations()",
    "kind": "Method",
    "detail": "Function (const TArray<TUniquePtr<ITimingEventRelation>>&)",
    "insertText": "GetCurrentRelations()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurrentRelations .)",
    "insertText": "Add(MoveTemp(Relation))"
  },
  {
    "label": "ClearRelations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearRelations()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "GetFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Insights::FFilterConfigurator>)",
    "insertText": "GetFilterConfigurator()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "CreateCompactMenuLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCompactMenuLine(FMenuBuilder& MenuBuilder, FText Label, TSharedRef<SWidget> InnerWidget)"
  },
  {
    "label": "MakeCompactAutoScrollOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCompactAutoScrollOptionsMenu()"
  },
  {
    "label": "MakeAutoScrollOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutoScrollOptionsMenu()"
  },
  {
    "label": "MakeAllTracksMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAllTracksMenu()"
  },
  {
    "label": "CreateAllTracksMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAllTracksMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "MakeCpuGpuTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCpuGpuTracksFilterMenu()"
  },
  {
    "label": "MakeOtherTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeOtherTracksFilterMenu()"
  },
  {
    "label": "ShowHideGraphTrack_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowHideGraphTrack_IsChecked()"
  },
  {
    "label": "ShowHideGraphTrack_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideGraphTrack_Execute()"
  },
  {
    "label": "MakePluginTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePluginTracksFilterMenu()"
  },
  {
    "label": "MakeViewModeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeViewModeMenu()"
  },
  {
    "label": "CreateDepthLimitMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDepthLimitMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetEventDepthLimitKeybindingText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEventDepthLimitKeybindingText(uint32 DepthLimit)"
  },
  {
    "label": "GetNextEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextEventDepthLimit(uint32 DepthLimit)"
  },
  {
    "label": "ChooseNextEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseNextEventDepthLimit()"
  },
  {
    "label": "SetEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventDepthLimit(uint32 DepthLimit)"
  },
  {
    "label": "CheckEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckEventDepthLimit(uint32 DepthLimit)"
  },
  {
    "label": "CreateCpuThreadTrackColoringModeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCpuThreadTrackColoringModeMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ChooseNextCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseNextCpuThreadTrackColoringMode()"
  },
  {
    "label": "SetCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCpuThreadTrackColoringMode(UE::Insights::ETimingEventsColoringMode Mode)"
  },
  {
    "label": "CheckCpuThreadTrackColoringMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckCpuThreadTrackColoringMode(UE::Insights::ETimingEventsColoringMode Mode)"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateTrackLocationMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackLocationMenu(FMenuBuilder& MenuBuilder, TSharedRef<FBaseTimingTrack> Track)"
  },
  {
    "label": "AutoScroll_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoScroll_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "AutoScroll_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "AutoScroll_IsChecked()"
  },
  {
    "label": "SetAutoScrollFrameAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollFrameAlignment(int32 FrameType)"
  },
  {
    "label": "CompareAutoScrollFrameAlignment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareAutoScrollFrameAlignment(int32 FrameType)"
  },
  {
    "label": "SetAutoScrollViewportOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollViewportOffset(double Percent)"
  },
  {
    "label": "CompareAutoScrollViewportOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareAutoScrollViewportOffset(double Percent)"
  },
  {
    "label": "SetAutoScrollDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoScrollDelay(double Delay)"
  },
  {
    "label": "CompareAutoScrollDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareAutoScrollDelay(double Delay)"
  },
  {
    "label": "UpdatePositionForScrollableTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionForScrollableTracks()"
  },
  {
    "label": "EnforceVerticalScrollLimits()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EnforceVerticalScrollLimits(const float InScrollPosY)"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "VerticalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerticalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVerticalScrollBar()"
  },
  {
    "label": "RaiseSelectionChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseSelectionChanging()"
  },
  {
    "label": "RaiseSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseSelectionChanged()"
  },
  {
    "label": "RaiseTimeMarkerChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseTimeMarkerChanging(TSharedRef<FTimeMarker> InTimeMarker)"
  },
  {
    "label": "RaiseTimeMarkerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseTimeMarkerChanged(TSharedRef<FTimeMarker> InTimeMarker)"
  },
  {
    "label": "UpdateHoveredTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredTimingEvent(float InMousePosX, float InMousePosY)"
  },
  {
    "label": "OnSelectedTimingEventChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedTimingEventChanged()"
  },
  {
    "label": "SelectHoveredTimingTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHoveredTimingTrack()"
  },
  {
    "label": "SelectHoveredTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHoveredTimingEvent()"
  },
  {
    "label": "SelectLeftTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLeftTimingEvent()"
  },
  {
    "label": "SelectRightTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRightTimingEvent()"
  },
  {
    "label": "SelectUpTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectUpTimingEvent()"
  },
  {
    "label": "SelectDownTimingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectDownTimingEvent()"
  },
  {
    "label": "FrameSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameSelection()"
  },
  {
    "label": "GetExtenders()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Insights::Timing::ITimingViewExtender*>)",
    "insertText": "GetExtenders()"
  },
  {
    "label": "GetOldExtenders()",
    "kind": "Method",
    "detail": "Function (# if UE_INSIGHTS_BACKWARD_COMPATIBILITY_UE54 PRAGMA_DISABLE_DEPRECATION_WARNINGS TArray<::Insights::ITimingViewExtender*>)",
    "insertText": "GetOldExtenders()"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS # endif FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AllowTracksToProcessOnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AllowTracksToProcessOnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetTrackPosY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackPosY(TSharedPtr<FBaseTimingTrack>& TrackPtr, float TrackPosY)"
  },
  {
    "label": "FindFirstEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFirstEvent()"
  },
  {
    "label": "FindPrevEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPrevEvent()"
  },
  {
    "label": "FindNextEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextEvent()"
  },
  {
    "label": "FindLastEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLastEvent()"
  },
  {
    "label": "FilterAllTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterAllTracks()"
  },
  {
    "label": "ClearFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFilters()"
  },
  {
    "label": "SpawnQuickFindTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnQuickFindTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "PopulateTrackSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTrackSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "PopulateTimerNameSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTimerNameSuggestionList(const FString& Text, TArray<FString>& OutSuggestions)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "void(TSharedPtr<const FBaseTimingTrack> Track)"
  },
  {
    "label": "EnumerateFilteredTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFilteredTracks(TSharedPtr<UE::Insights::FFilterConfigurator> FilterConfigurator, TSharedPtr<const FBaseTimingTrack> PriorityTrack, EnumerateFilteredTracksCallback Callback)"
  },
  {
    "label": "GetFrameTypeToSnapTo()",
    "kind": "Method",
    "detail": "Function (ETraceFrameType)",
    "insertText": "GetFrameTypeToSnapTo()"
  },
  {
    "label": "UpdateFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilters()"
  },
  {
    "label": "IsInTimingProfiler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInTimingProfiler()"
  },
  {
    "label": "GetTimersView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STimersView>)",
    "insertText": "GetTimersView()"
  },
  {
    "label": "GetLogView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SLogView>)",
    "insertText": "GetLogView()"
  }
]