[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "FSlateAccessibleButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleButton"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Margin . h \" # include \" Sound / SlateSound . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / Layout / SBorder . h \" class FPaintArgs ; class FSlateWindowElementList ; enum class ETextFlowDirection : uint8 ; enum class ETextShapingMethod : uint8 ; class SButton : public SBorder {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SButton, SBorder, SLATE_API)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "SLATE_BEGIN_ARGS(SButton ) : _Content() , _ButtonStyle( &FCoreStyle::Get().GetWidgetStyle< FButtonStyle >( \"Button\" ) ) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle< FTextBlockStyle >(\"ButtonText\") ) , _HAlign( HAlign_Fill ) , _VAlign( VAlign_Fill ) , _ContentPadding(FMargin(4.0, 2.0)) , _Text() , _ClickMethod( EButtonClickMethod::DownAndUp ) , _TouchMethod( EButtonTouchMethod::DownAndUp ) , _PressMethod( EButtonPressMethod::DownAndUp ) , _DesiredSizeScale( FVector2D(1,1) ) , _ContentScale( FVector2D(1,1) ) , _ButtonColorAndOpacity(FLinearColor::White) , _ForegroundColor(FSlateColor::UseStyle()) , _IsFocusable( true)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_STYLE_ARGUMENT( FButtonStyle, ButtonStyle ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle ) SLATE_ARGUMENT( EHorizontalAlignment, HAlign ) SLATE_ARGUMENT( EVerticalAlignment, VAlign ) SLATE_ATTRIBUTE( FMargin, ContentPadding ) SLATE_ATTRIBUTE( FText, Text ) SLATE_EVENT( FOnClicked, OnClicked ) SLATE_EVENT( FSimpleDelegate, OnPressed ) SLATE_EVENT( FSimpleDelegate, OnReleased ) SLATE_EVENT( FSimpleDelegate, OnHovered ) SLATE_EVENT( FSimpleDelegate, OnUnhovered ) SLATE_ARGUMENT( EButtonClickMethod::Type, ClickMethod ) SLATE_ARGUMENT( EButtonTouchMethod::Type, TouchMethod ) SLATE_ARGUMENT( EButtonPressMethod::Type, PressMethod ) SLATE_ATTRIBUTE( FVector2D, DesiredSizeScale ) SLATE_ATTRIBUTE( FVector2D, ContentScale ) SLATE_ATTRIBUTE( FSlateColor, ButtonColorAndOpacity ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ARGUMENT( bool, IsFocusable ) SLATE_ARGUMENT( TOptional<FSlateSound>, PressedSoundOverride ) SLATE_ARGUMENT( TOptional<FSlateSound>, HoveredSoundOverride ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_END_ARGS() SLATE_API virtual ~SButton()"
  },
  {
    "label": "SButton()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SButton()"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (public : FSlateColor)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "GetDisabledForegroundColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetDisabledForegroundColor()"
  },
  {
    "label": "IsPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPressed()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetContentPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentPadding(TAttribute<FMargin> InContentPadding)"
  },
  {
    "label": "SetHoveredSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredSound(TOptional<FSlateSound> InHoveredSound)"
  },
  {
    "label": "SetPressedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPressedSound(TOptional<FSlateSound> InPressedSound)"
  },
  {
    "label": "SetOnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnClicked(FOnClicked InOnClicked)"
  },
  {
    "label": "SetOnHovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnHovered(FSimpleDelegate InOnHovered)"
  },
  {
    "label": "SetOnUnhovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnUnhovered(FSimpleDelegate InOnUnhovered)"
  },
  {
    "label": "SetButtonStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetButtonStyle(const FButtonStyle* ButtonStyle)"
  },
  {
    "label": "SetClickMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClickMethod(EButtonClickMethod::Type InClickMethod)"
  },
  {
    "label": "SetTouchMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTouchMethod(EButtonTouchMethod::Type InTouchMethod)"
  },
  {
    "label": "SetPressMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPressMethod(EButtonPressMethod::Type InPressMethod)"
  },
  {
    "label": "SimulateClick()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "SimulateClick()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (# endif public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (# endif protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Press()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "ExecuteOnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ExecuteOnClick()"
  },
  {
    "label": "GetCombinedPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetCombinedPadding()"
  },
  {
    "label": "GetShowDisabledEffect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowDisabledEffect()"
  },
  {
    "label": "GetClickMethodFromInputType()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<EButtonClickMethod::Type>)",
    "insertText": "GetClickMethodFromInputType(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsPreciseTapOrClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreciseTapOrClick(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "PlayPressedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayPressedSound()"
  },
  {
    "label": "PlayHoverSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayHoverSound()"
  },
  {
    "label": "SetIsFocusable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsFocusable(bool bInIsFocusable)"
  },
  {
    "label": "ExecuteHoverStateChanged()",
    "kind": "Method",
    "detail": "Function (bIsFocusable = bInIsFocusable ; } void)",
    "insertText": "ExecuteHoverStateChanged(bool bPlaySound)"
  },
  {
    "label": "GetBorderForegroundColorAttribute()",
    "kind": "Method",
    "detail": "Function (protected : TSlateAttributeRef<FSlateColor>)",
    "insertText": "GetBorderForegroundColorAttribute()"
  },
  {
    "label": "GetContentPaddingAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<FMargin>)",
    "insertText": "GetContentPaddingAttribute()"
  },
  {
    "label": "SetAppearPressed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAppearPressed(TAttribute<bool> InValue)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (AppearPressedAttribute .)",
    "insertText": "Assign(*this, MoveTemp(InValue))"
  },
  {
    "label": "GetAppearPressedAttribute()",
    "kind": "Method",
    "detail": "Function (} TSlateAttributeRef<bool>)",
    "insertText": "GetAppearPressedAttribute()"
  },
  {
    "label": "UpdatePressStateChanged()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdatePressStateChanged()"
  },
  {
    "label": "UpdatePadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePadding()"
  },
  {
    "label": "UpdateShowDisabledEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShowDisabledEffect()"
  },
  {
    "label": "UpdateBorderImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBorderImage()"
  },
  {
    "label": "UpdateForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForegroundColor()"
  },
  {
    "label": "UpdateDisabledForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisabledForegroundColor()"
  }
]