[
  {
    "label": "VP8_BD_VALUE_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_DECODER_DBOOLHUFF_H_ # define VPX_VP8_DECODER_DBOOLHUFF_H_ # include<stddef . h> # include<limits . h> # include \" . / vpx_config . h \" # include \" vpx_ports / compiler_attributes . h \" # include \" vpx_ports / mem . h \" # include \" vpx / vp8dx . h \" # include \" vpx / vpx_integer . h \" # ifdef __cplusplus \" C \" { # endif typedef size_t VP8_BD_VALUE ; # define)",
    "insertText": "VP8_BD_VALUE_SIZE((int)sizeof(VP8_BD_VALUE) * CHAR_BIT) #define VP8_LOTS_OF_BITS (0x40000000)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (const unsigned char* user_buffer_end ; const unsigned char* user_buffer ; VP8_BD_VALUE value ; int count ; unsigned int range ; vpx_decrypt_cb decrypt_cb ; void* decrypt_state ; } BOOL_DECODER ;)",
    "insertText": "DECLARE_ALIGNED(16, extern const unsigned char, vp8_norm[256])"
  },
  {
    "label": "vp8dx_start_decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8dx_start_decode(BOOL_DECODER *br, const unsigned char *source, unsigned int source_sz, vpx_decrypt_cb decrypt_cb, void *decrypt_state)"
  },
  {
    "label": "vp8dx_bool_decoder_fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8dx_bool_decoder_fill(BOOL_DECODER *br)"
  },
  {
    "label": "vp8dx_decode_bool()",
    "kind": "Method",
    "detail": "Function (VPX_NO_UNSIGNED_SHIFT_CHECK int)",
    "insertText": "vp8dx_decode_bool(BOOL_DECODER *br, int probability)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (unsigned int bit = 0 ; VP8_BD_VALUE value ; unsigned int split ; VP8_BD_VALUE bigsplit ; int count ; unsigned int range ;)",
    "insertText": "split(((br->range - 1) * probability) >> 8)"
  },
  {
    "label": "bigsplit()",
    "kind": "Method",
    "detail": "Function (value = br -> value ; count = br -> count ;)",
    "insertText": "bigsplit(VP8_BD_VALUE)split << (VP8_BD_VALUE_SIZE - 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (range = split ;)",
    "insertText": "if(value >= bigsplit)"
  },
  {
    "label": "vp8_norm()",
    "kind": "Method",
    "detail": "Function (range = br -> range - split ; value = value - bigsplit ; bit = 1 ; } { const unsigned char shift =)",
    "insertText": "vp8_norm(unsigned char)"
  },
  {
    "label": "vp8_decode_value()",
    "kind": "Method",
    "detail": "Function (range<<= shift ; value<<= shift ; count - = shift ; } br -> value = value ; br -> count = count ; br -> range = range ; return bit ; } int)",
    "insertText": "vp8_decode_value(BOOL_DECODER *br, int bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int z = 0 ; int bit ;)",
    "insertText": "for(bit = bits - 1; bit >= 0; bit--)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "z(vp8dx_decode_bool(br, 0x80) << bit)"
  },
  {
    "label": "vp8dx_bool_error()",
    "kind": "Method",
    "detail": "Function (} return z ; } int)",
    "insertText": "vp8dx_bool_error(BOOL_DECODER *br)"
  }
]