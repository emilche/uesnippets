[
  {
    "label": "compute_inverse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "compute_inverse"
  },
  {
    "label": "compute_inverse_and_det_with_check",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "compute_inverse_and_det_with_check"
  },
  {
    "label": "compute_inverse_size4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "compute_inverse_size4"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INVERSE_IMPL_H # define EIGEN_INVERSE_IMPL_H namespace Eigen { namespace internal { template<MatrixType,ResultType,int Size = MatrixType::RowsAtCompileTime> struct compute_inverse { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const MatrixType& matrix, ResultType& result)"
  },
  {
    "label": "partialPivLu()",
    "kind": "Method",
    "detail": "Function (result = matrix .)",
    "insertText": "partialPivLu().inverse()"
  },
  {
    "label": "matrixEval()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; internal::evaluator<MatrixType>)",
    "insertText": "matrixEval(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,ResultType> struct compute_inverse_and_det_with_check<MatrixType,ResultType,1> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const MatrixType& matrix, const typename MatrixType::RealScalar& absDeterminantThreshold, ResultType& result, typename ResultType::Scalar& determinant, bool& invertible)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (using std::abs ; determinant = matrix .)",
    "insertText": "coeff(0,0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (invertible =)",
    "insertText": "abs(determinant)"
  },
  {
    "label": "compute_inverse_size2_helper()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,ResultType> EIGEN_DEVICE_FUNC void)",
    "insertText": "compute_inverse_size2_helper(const MatrixType& matrix, const typename ResultType::Scalar& invdet, ResultType& result)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,0) = matrix.coeff(1,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,0) = -matrix.coeff(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,1) = -matrix.coeff(0,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,1)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (typedef ResultType::Scalar Scalar ; const Scalar invdet =)",
    "insertText": "Scalar(1) / matrix.determinant()"
  },
  {
    "label": "compute_inverse_size2_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_inverse_size2_helper(matrix, invdet, result)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,ResultType> struct compute_inverse_and_det_with_check<MatrixType,ResultType,2> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const MatrixType& matrix, const typename MatrixType::RealScalar& absDeterminantThreshold, ResultType& inverse, typename ResultType::Scalar& determinant, bool& invertible)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (using std::abs ; typedef ResultType::Scalar Scalar ; determinant = matrix .)",
    "insertText": "determinant()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar invdet =)",
    "insertText": "Scalar(1)"
  },
  {
    "label": "compute_inverse_size2_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_inverse_size2_helper(matrix, invdet, inverse)"
  },
  {
    "label": "cofactor_3x3()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,int i,int j> EIGEN_DEVICE_FUNC MatrixType::Scalar)",
    "insertText": "cofactor_3x3(const MatrixType& m)"
  },
  {
    "label": "i1()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "i1(i+1) % 3, i2 = (i+2) % 3, j1 = (j+1) % 3, j2 = (j+2)"
  },
  {
    "label": "compute_inverse_size3_helper()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,ResultType> EIGEN_DEVICE_FUNC void)",
    "insertText": "compute_inverse_size3_helper(const MatrixType& matrix, const typename ResultType::Scalar& invdet, const Matrix<typename ResultType::Scalar,3,1>& cofactors_col0, ResultType& result)"
  },
  {
    "label": "MatrixType()",
    "kind": "Method",
    "detail": "Function (typedef ResultType::Scalar Scalar ; const Scalar c01 = cofactor_3x3<)",
    "insertText": "MatrixType(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,2) = cofactor_3x3<MatrixType,2,1>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,1) = cofactor_3x3<MatrixType,1,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,2) = cofactor_3x3<MatrixType,2,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,0)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "row(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (typedef ResultType::Scalar Scalar ; Matrix<MatrixType::Scalar,3,1> cofactors_col0 ; cofactors_col0 .)",
    "insertText": "coeffRef(0) = cofactor_3x3<MatrixType,0,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (cofactors_col0 .)",
    "insertText": "coeffRef(1) = cofactor_3x3<MatrixType,1,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (cofactors_col0 .)",
    "insertText": "coeffRef(2) = cofactor_3x3<MatrixType,2,0>(matrix)"
  },
  {
    "label": "det()",
    "kind": "Method",
    "detail": "Function (const Scalar)",
    "insertText": "det(cofactors_col0.cwiseProduct(matrix.col(0))).sum()"
  },
  {
    "label": "compute_inverse_size3_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_inverse_size3_helper(matrix, invdet, cofactors_col0, result)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "determinant(cofactors_col0.cwiseProduct(matrix.col(0))).sum()"
  },
  {
    "label": "compute_inverse_size3_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_inverse_size3_helper(matrix, invdet, cofactors_col0, inverse)"
  },
  {
    "label": "general_det3_helper()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived> EIGEN_DEVICE_FUNC const Derived::Scalar)",
    "insertText": "general_det3_helper(const MatrixBase<Derived>& matrix, int i1, int i2, int i3, int j1, int j2, int j3)"
  },
  {
    "label": "cofactor_4x4()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,int i,int j> EIGEN_DEVICE_FUNC MatrixType::Scalar)",
    "insertText": "cofactor_4x4(const MatrixType& matrix)"
  },
  {
    "label": "i1()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "i1(i+1) % 4, i2 = (i+2) % 4, i3 = (i+3) % 4, j1 = (j+1) % 4, j2 = (j+2) % 4, j3 = (j+3)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,0) = cofactor_4x4<MatrixType,0,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,0) = -cofactor_4x4<MatrixType,0,1>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,0) = cofactor_4x4<MatrixType,0,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(3,0) = -cofactor_4x4<MatrixType,0,3>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,2) = cofactor_4x4<MatrixType,2,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,2) = -cofactor_4x4<MatrixType,2,1>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,2) = cofactor_4x4<MatrixType,2,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(3,2) = -cofactor_4x4<MatrixType,2,3>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,1) = -cofactor_4x4<MatrixType,1,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,1) = cofactor_4x4<MatrixType,1,1>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,1) = -cofactor_4x4<MatrixType,1,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(3,1) = cofactor_4x4<MatrixType,1,3>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(0,3) = -cofactor_4x4<MatrixType,3,0>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(1,3) = cofactor_4x4<MatrixType,3,1>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(2,3) = -cofactor_4x4<MatrixType,3,2>(matrix)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "coeffRef(3,3) = cofactor_4x4<MatrixType,3,3>(matrix)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(matrix.col(0).cwiseProduct(result.row(0).transpose())).sum()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (compute_inverse<MatrixType,ResultType)",
    "insertText": "run(matrix, inverse)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(invertible)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (MatrixType matrix_t = matrix ; compute_inverse<MatrixType,ResultType)",
    "insertText": "run(matrix_t, inverse)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } ; } namespace internal { template<DstXprType,XprType> struct Assignment<DstXprType,Inverse<XprType>,internal::assign_op<DstXprType::Scalar,XprType::Scalar>,Dense2Dense> { typedef Inverse<XprType> SrcXprType ; EIGEN_DEVICE_FUNC void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index dstRows = src .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index dstCols = src .)",
    "insertText": "cols()"
  },
  {
    "label": "EIGEN_PLAIN_ENUM_MIN()",
    "kind": "Method",
    "detail": "Function (const int Size =)",
    "insertText": "EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(Size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(( (Size<=1) || (Size>4) || (extract_data(src.nestedExpression())!=extract_data(dst))) && \"Aliasing problem detected in inverse(), you need to do inverse().eval() here.\")"
  },
  {
    "label": "actual_xpr()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<XprType,XprType::ColsAtCompileTime>::type ActualXprType ; typedef internal::remove_all<ActualXprType>::type ActualXprTypeCleanded ; ActualXprType)",
    "insertText": "actual_xpr(src.nestedExpression())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (compute_inverse<ActualXprTypeCleanded,DstXprType)",
    "insertText": "run(actual_xpr, dst)"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> EIGEN_DEVICE_FUNC const Inverse<Derived> MatrixBase<Derived)",
    "insertText": "inverse()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES) eigen_assert(rows() == cols())"
  },
  {
    "label": "computeInverseAndDetWithCheck()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<ResultType> void MatrixBase<Derived)",
    "insertText": "computeInverseAndDetWithCheck(ResultType& inverse, typename ResultType::Scalar& determinant, bool& invertible, const RealScalar& absDeterminantThreshold)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows() == cols())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<RowsAtCompileTime = = 2,internal::remove_all<internal::nested_eval<Derived,2>::type>::type,PlainObject>::type MatrixType ; internal::compute_inverse_and_det_with_check<MatrixType,ResultType)",
    "insertText": "run(derived(), absDeterminantThreshold, inverse, determinant, invertible)"
  },
  {
    "label": "computeInverseWithCheck()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<ResultType> void MatrixBase<Derived)",
    "insertText": "computeInverseWithCheck(ResultType& inverse, bool& invertible, const RealScalar& absDeterminantThreshold)"
  },
  {
    "label": "computeInverseAndDetWithCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInverseAndDetWithCheck(inverse,determinant,invertible,absDeterminantThreshold)"
  }
]