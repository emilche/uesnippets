[
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "SSourceControlDescriptionItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSourceControlDescriptionItem"
  },
  {
    "label": "SSourceControlDescriptionWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSourceControlDescriptionWidget"
  },
  {
    "label": "SSourceControlDescriptionItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class SMultiLineEditableTextBox ; class SWidget ; class SWindow ; struct FGeometry ; struct FKeyEvent ; struct SSourceControlDescriptionItem {)",
    "insertText": "SSourceControlDescriptionItem(const FText& InTitle, const FText& InDescription, bool bInCanEditDescription) : Title(InTitle), Description(InDescription), bCanEditDescription(bInCanEditDescription)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} FText Title ; FText Description ; bool bCanEditDescription ; } ; class SSourceControlDescriptionWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSourceControlDescriptionWidget) : _ParentWindow() , _Label() , _Text() , _Items()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<SWindow>, ParentWindow) SLATE_ATTRIBUTE(FText, Label) SLATE_ATTRIBUTE(FText, Text) SLATE_ARGUMENT(const TArray<SSourceControlDescriptionItem>*, Items) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResult()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetSelectedItemIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedItemIndex()"
  },
  {
    "label": "CancelClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CancelClicked()"
  },
  {
    "label": "GetSelectionContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSelectionContent()"
  },
  {
    "label": "GetSelectedItemTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedItemTitle()"
  },
  {
    "label": "GetChangelistDescription()",
    "kind": "Method",
    "detail": "Function (private : bool bResult = false ; TWeakPtr<SWindow> ParentWindow ; TSharedPtr<SMultiLineEditableTextBox> TextBox ; const TArray<SSourceControlDescriptionItem>* Items ; int32 CurrentlySelectedItemIndex ; } ; bool)",
    "insertText": "GetChangelistDescription(const TSharedPtr<SWidget>& ParentWidget, const FText& InWindowTitle, const FText& InLabel, FText& OutDescription)"
  },
  {
    "label": "PickChangelistOrNewWithDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PickChangelistOrNewWithDescription(const TSharedPtr<SWidget>& ParentWidget, const FText& InWindowTitle, const FText& InLabel, const TArray<SSourceControlDescriptionItem>& Items, int32& OutPickedIndex, FText& OutDescription)"
  }
]