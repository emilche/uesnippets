[
  {
    "label": "FTrackedSubject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedSubject"
  },
  {
    "label": "LIVELINKMESSAGEBUSFRAMEWORK_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LIVELINKMESSAGEBUSFRAMEWORK_API"
  },
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "FTrackedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedAddress"
  },
  {
    "label": "FTrackedStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedStaticData"
  },
  {
    "label": "FTrackedFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedFrameData"
  },
  {
    "label": "IMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageContext"
  },
  {
    "label": "FMessageEndpointBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageEndpointBuilder"
  },
  {
    "label": "HandlePingMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" LiveLinkMessages . h \" # include \" LiveLinkProvider . h \" # include \" MessageEndpoint . h \" PRAGMA_DISABLE_DEPRECATION_WARNINGS struct FTrackedSubject { FLiveLinkRefSkeleton RefSkeleton ; TArray<FTransform> Transforms ; TArray<FLiveLinkCurveElement> Curves ; FLiveLinkMetaData MetaData ; double Time ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS struct FLiveLinkProvider : public ILiveLinkProvider { private : const FString ProviderName ; const FString MachineName ; TSharedPtr<class FMessageEndpoint,ESPMode::ThreadSafe> MessageEndpoint ; FCriticalSection CriticalSection ; TArray<struct FTrackedAddress> ConnectedAddresses ; TArray<struct FTrackedStaticData> StaticDatas ; TArray<struct FTrackedFrameData> FrameDatas ; TMap<FName,FTrackedSubject> Subjects ; FLiveLinkProviderConnectionStatusChanged OnConnectionStatusChanged ; private : void)",
    "insertText": "HandlePingMessage(const FLiveLinkPingMessage& Message, const TSharedRef<class IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeat(const FLiveLinkHeartbeatMessage& Message, const TSharedRef<class IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "GetTrackedSubject()",
    "kind": "Method",
    "detail": "Function (FTrackedSubject&)",
    "insertText": "GetTrackedSubject(const FName& SubjectName)"
  },
  {
    "label": "SendSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSubject(FName SubjectName, const struct FTrackedSubject& Subject)"
  },
  {
    "label": "SendSubjectFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSubjectFrame(FName SubjectName, const struct FTrackedSubject& Subject)"
  },
  {
    "label": "GetLastSubjectStaticData()",
    "kind": "Method",
    "detail": "Function (FTrackedStaticData*)",
    "insertText": "GetLastSubjectStaticData(const FName& SubjectName)"
  },
  {
    "label": "GetLastSubjectFrameData()",
    "kind": "Method",
    "detail": "Function (FTrackedFrameData*)",
    "insertText": "GetLastSubjectFrameData(const FName& SubjectName)"
  },
  {
    "label": "SetLastSubjectStaticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastSubjectStaticData(FName SubjectName, TSubclassOf<ULiveLinkRole> Role, FLiveLinkStaticDataStruct&& StaticData, TMap<FName, FString>&& Annotations)"
  },
  {
    "label": "SetLastSubjectFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastSubjectFrameData(FName SubjectName, FLiveLinkFrameDataStruct&& FrameData, TMap<FName, FString>&& SubjectAnnotations)"
  },
  {
    "label": "ClearTrackedSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTrackedSubject(const FName& SubjectName)"
  },
  {
    "label": "GetFilteredAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredAddresses(FName SubjectName, TArray<FMessageAddress>& Addresses)"
  },
  {
    "label": "HandleConnectMessage()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HandleConnectMessage(const FLiveLinkConnectMessage& Message, const TSharedRef<class IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "CreateMessageEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMessageEndpoint(struct FMessageEndpointBuilder& EndpointBuilder)"
  },
  {
    "label": "GetConnectedAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConnectedAddresses(TArray<FMessageAddress>& Addresses)"
  },
  {
    "label": "ValidateConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateConnections()"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseConnection(FMessageAddress Address)"
  },
  {
    "label": "GetLastSubjectStaticDataStruct()",
    "kind": "Method",
    "detail": "Function (TPair<UClass*,FLiveLinkStaticDataStruct*>)",
    "insertText": "GetLastSubjectStaticDataStruct(FName SubjectName)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (template<MessageType> void)",
    "insertText": "SendMessage(MessageType* Message)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (MessageEndpoint ->)",
    "insertText": "Send(Message, Addresses)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (} } template<MessageType> void)",
    "insertText": "SendMessage(MessageType* Message, const FMessageAddress& Address)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "SendMessage(MessageType* Message, const TArray<FMessageAddress>& Addresses)"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (} template<MessageType> void)",
    "insertText": "Subscribe()"
  },
  {
    "label": "MessageType()",
    "kind": "Method",
    "detail": "Function (MessageEndpoint -> Subscribe<)",
    "insertText": "MessageType()"
  },
  {
    "label": "GetProviderName()",
    "kind": "Method",
    "detail": "Function (} } const FString&)",
    "insertText": "GetProviderName()"
  },
  {
    "label": "GetAnnotations()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FString>)",
    "insertText": "GetAnnotations()"
  },
  {
    "label": "FLiveLinkProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkProvider(const FString& InProviderName, bool bInCreateEndpoint)"
  },
  {
    "label": "FLiveLinkProvider()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLiveLinkProvider(const FString& InProviderName)"
  },
  {
    "label": "FLiveLinkProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkProvider(const FString& InProviderName, struct FMessageEndpointBuilder&& EndpointBuilder)"
  },
  {
    "label": "FLiveLinkProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLiveLinkProvider()"
  },
  {
    "label": "UpdateSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubject(const FName& SubjectName, const TArray<FName>& BoneNames, const TArray<int32>& BoneParents)"
  },
  {
    "label": "UpdateSubjectStaticData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSubjectStaticData(const FName SubjectName, TSubclassOf<ULiveLinkRole> Role, FLiveLinkStaticDataStruct&& StaticData, const TMap<FName, FString>& ExtraAnnotations = {})"
  },
  {
    "label": "ClearSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubject(const FName& SubjectName)"
  },
  {
    "label": "RemoveSubject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubject(const FName SubjectName)"
  },
  {
    "label": "UpdateSubjectFrame()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "UpdateSubjectFrame(const FName& SubjectName, const TArray<FTransform>& BoneTransforms, const TArray<FLiveLinkCurveElement>& CurveData, double Time)"
  },
  {
    "label": "UpdateSubjectFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubjectFrame(const FName& SubjectName, const TArray<FTransform>& BoneTransforms, const TArray<FLiveLinkCurveElement>& CurveData, const FLiveLinkMetaData& MetaData, double Time)"
  },
  {
    "label": "UpdateSubjectFrameData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "UpdateSubjectFrameData(const FName SubjectName, FLiveLinkFrameDataStruct&& FrameData, const TMap<FName, FString>& ExtraAnnotations = {})"
  },
  {
    "label": "HasConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConnection()"
  },
  {
    "label": "RegisterConnStatusChangedHandle()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterConnStatusChangedHandle(const FLiveLinkProviderConnectionStatusChanged::FDelegate& ConnStatusChanged)"
  },
  {
    "label": "UnregisterConnStatusChangedHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterConnStatusChangedHandle(FDelegateHandle Handle)"
  }
]