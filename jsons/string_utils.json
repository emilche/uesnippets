[
  {
    "label": "AbslStringViewCmp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AbslStringViewCmp"
  },
  {
    "label": "CompileTimeString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompileTimeString"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_STRING_UTILS_H_ # define RTC_BASE_STRING_UTILS_H_ # include<stdio . h> # include<string . h> # include \" absl / strings / string_view . h \" # if)",
    "insertText": "defined(WEBRTC_WIN) #include <malloc.h> #include <wchar.h> #include <windows.h> #endif #if defined(WEBRTC_POSIX)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t SIZE_UNKNOWN = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct AbslStringViewCmp { using is_transparent = void ; bool)",
    "insertText": "operator()(absl::string_view a, absl::string_view b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN) inline std::wstring ToUtf16(const char* utf8, size_t len)"
  },
  {
    "label": "MultiByteToWideChar()",
    "kind": "Method",
    "detail": "Function (int len16)",
    "insertText": "MultiByteToWideChar(CP_UTF8, 0, utf8, static_cast<int>(len), nullptr, 0)"
  },
  {
    "label": "ws()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ws(len16, 0)"
  },
  {
    "label": "MultiByteToWideChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiByteToWideChar(CP_UTF8, 0, utf8, static_cast<int>(len), &*ws.begin(), len16)"
  },
  {
    "label": "ToUtf8()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToUtf8(const wchar_t* wide, size_t len)"
  },
  {
    "label": "WideCharToMultiByte()",
    "kind": "Method",
    "detail": "Function (int len8)",
    "insertText": "WideCharToMultiByte(CP_UTF8, 0, wide, static_cast<int>(len), nullptr, 0, nullptr, nullptr)"
  },
  {
    "label": "ns()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ns(len8, 0)"
  },
  {
    "label": "WideCharToMultiByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WideCharToMultiByte(CP_UTF8, 0, wide, static_cast<int>(len), &*ns.begin(), len8, nullptr, nullptr)"
  },
  {
    "label": "ToUtf8()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToUtf8(const std::wstring& wstr)"
  },
  {
    "label": "ToHex()",
    "kind": "Method",
    "detail": "Function (} # endif std::string)",
    "insertText": "ToHex(int i)"
  },
  {
    "label": "CompileTimeString()",
    "kind": "Method",
    "detail": "Function (namespace rtc_base_string_utils_internal { template<int NPlus1> struct CompileTimeString { char string [ NPlus1 ] = { 0 } ;)",
    "insertText": "CompileTimeString()"
  },
  {
    "label": "CompileTimeString()",
    "kind": "Method",
    "detail": "Function (template<int MPlus1>)",
    "insertText": "CompileTimeString(const char (&chars)[MPlus1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (char* chars_pointer = string ;)",
    "insertText": "for(auto c : chars)"
  },
  {
    "label": "Concat()",
    "kind": "Method",
    "detail": "Function (} template<int MPlus1> auto)",
    "insertText": "Concat(CompileTimeString<MPlus1> b)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CompileTimeString<NPlus1 + MPlus1 - 1> result ; char* chars_pointer = result . string ;)",
    "insertText": "for(auto c : string)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (chars_pointer = result . string + NPlus1 - 1 ;)",
    "insertText": "for(auto c : b.string)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (result . string [ NPlus1 + MPlus1 - 2 ] = 0 ; return result ; } operator const)",
    "insertText": "char()"
  }
]