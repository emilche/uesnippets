[
  {
    "label": "FReachabilityAnalysisState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReachabilityAnalysisState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TGatherIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGatherIterator"
  },
  {
    "label": "TDefaultPayloadOps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDefaultPayloadOps"
  },
  {
    "label": "TThreadedGather",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TThreadedGather"
  },
  {
    "label": "FTimeSlicer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeSlicer"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UObjectBase . h \" # include \" UObject / Object . h \" # include \" UObject / FastReferenceCollector . h \" # include \" UObject / ReachabilityAnalysis . h \" namespace UE::GC { class FReachabilityAnalysisState { public : int32 MaxWorkers = 1 6 ; private : int32 NumWorkers = 0 ; FWorkerContext* Contexts [ MaxWorkers ] = { nullptr } ; EObjectFlags ObjectKeepFlags = RF_NoFlags ; bool bPerformFullPurge = false ; bool bIsSuspended = false ; UE::GC::FProcessorStats Stats ; double IncrementalMarkPhaseTotalTime = 0 . 0 ; double ReferenceProcessingTotalTime = 0 . 0 ; int32 NumIterations = 0 ; int32 NumRechabilityIterationsToSkip = 0 ;)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "FReachabilityAnalysisState()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FReachabilityAnalysisState()"
  },
  {
    "label": "StartTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimer(double InTimeLimit)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (IterationTimeLimit = InTimeLimit ; IterationStartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} const UE::GC::FProcessorStats&)",
    "insertText": "GetStats()"
  },
  {
    "label": "PerformReachabilityAnalysisAndConditionallyPurgeGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformReachabilityAnalysisAndConditionallyPurgeGarbage(bool bReachabilityUsingTimeLimit)"
  },
  {
    "label": "GetNumWorkers()",
    "kind": "Method",
    "detail": "Function (} return false ; } int32)",
    "insertText": "GetNumWorkers()"
  },
  {
    "label": "SetupWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupWorkers(int32 InNumWorkers)"
  },
  {
    "label": "PerformReachabilityAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformReachabilityAnalysis()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(const UE::GC::FProcessorStats& InStats)"
  },
  {
    "label": "CheckIfAnyContextIsSuspended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfAnyContextIsSuspended()"
  },
  {
    "label": "ResetWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWorkers()"
  },
  {
    "label": "FinishIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishIteration()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EGatherOptions : uint32 { None = 0,Parallel = 1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EGatherOptions)"
  },
  {
    "label": "GetNumThreadsForGather()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumThreadsForGather(const EGatherOptions Options, const int32 NumObjects)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 MinNumObjectsPerThread = 1 0 0 ; const int32 MaxNumThreads =)",
    "insertText": "Max(1, FTaskGraphInterface::Get().GetNumWorkerThreads())"
  },
  {
    "label": "NumThreadsForNumObjects()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumThreadsForNumObjects(NumObjects + MinNumObjectsPerThread - 1)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } template<PayloadType> struct TGatherIterator { int32 StartIndex = 0 ; int32 Index = 0 ; int32 Num = 0 ; int32 LastIndex = 0 ; PayloadType Payload ; } ; template<PayloadType> struct TDefaultPayloadOps { int32)",
    "insertText": "Num(const PayloadType& InPayload)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Reserve(const TArray<TGatherIterator<PayloadType>, TInlineAllocator<32>>& ThreadIterators, PayloadType& OutPayload)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SizeToReserve = 0 ;)",
    "insertText": "for(const TGatherIterator<PayloadType>& It : ThreadIterators)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (SizeToReserve + = TDefaultPayloadOps<PayloadType)",
    "insertText": "Num(It.Payload)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} OutPayload .)",
    "insertText": "Reserve(TDefaultPayloadOps<PayloadType>::Num(OutPayload) + SizeToReserve)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutDest .)",
    "insertText": "Append(InSource)"
  },
  {
    "label": "GetThreadIterators()",
    "kind": "Method",
    "detail": "Function (} } ; template<PayloadType,PayloadOps = TDefaultPayloadOps<PayloadType>> class TThreadedGather { public : typedef TGatherIterator<PayloadType> FIterator ; typedef TArray<FIterator,TInlineAllocator<3 2>> FThreadIterators ; FThreadIterators&)",
    "insertText": "GetThreadIterators()"
  },
  {
    "label": "IsPending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPending()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bIsPending = true ; } FORCENOINLINE void)",
    "insertText": "Start(const EGatherOptions Options, const int32 TotalNumObjects, const int32 FirstIndex = 0, const int32 DesiredNumThreads = 0)"
  },
  {
    "label": "GetNumThreadsForGather()",
    "kind": "Method",
    "detail": "Function (int32 NumObjectsToProcess = TotalNumObjects - FirstIndex ; int32 NumThreads = DesiredNumThreads> 0 ? DesiredNumThreads :)",
    "insertText": "GetNumThreadsForGather(Options, NumObjectsToProcess)"
  },
  {
    "label": "NumberOfObjectsPerThread()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumberOfObjectsPerThread(NumObjectsToProcess / NumThreads)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (ThreadIterators .)",
    "insertText": "AddDefaulted(NumThreads)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FIterator& Iterator = ThreadIterators [ ThreadIndex ] ; Iterator . StartIndex = ThreadIndex* NumberOfObjectsPerThread + FirstIndex ; Iterator . Index = Iterator . StartIndex ; Iterator .)",
    "insertText": "Num(ThreadIndex < (NumThreads - 1)) ? NumberOfObjectsPerThread : (TotalNumObjects - (NumThreads - 1) * NumberOfObjectsPerThread)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Iterator . LastIndex =)",
    "insertText": "Min(TotalNumObjects - 1, Iterator.Index + Iterator.Num - 1)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE void)",
    "insertText": "Finish(PayloadType& OutGatheredObjects)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutGatheredObjects =)",
    "insertText": "MoveTemp(ThreadIterators[0].Payload)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(PayloadOps::Reserve(ThreadIterators, OutGatheredObjects))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Iterator.Payload, OutGatheredObjects)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } ThreadIterators .)",
    "insertText": "Reset()"
  },
  {
    "label": "NumWorkerThreads()",
    "kind": "Method",
    "detail": "Function (bIsPending = false ; } int32)",
    "insertText": "NumWorkerThreads()"
  },
  {
    "label": "NumScanned()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumScanned()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumScanned = 0 ;)",
    "insertText": "for(const FIterator& ThreadState : ThreadIterators)"
  },
  {
    "label": "NumGathered()",
    "kind": "Method",
    "detail": "Function (NumScanned + = ThreadState . Index - ThreadState . StartIndex ; } return NumScanned ; } int32)",
    "insertText": "NumGathered()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumGathered + =)",
    "insertText": "Num(ThreadState.Payload)"
  },
  {
    "label": "FTimeSlicer()",
    "kind": "Method",
    "detail": "Function (} return NumGathered ; } private : FThreadIterators ThreadIterators ; bool bIsPending = false ; } ; class FTimeSlicer { const int32 TimeLimitPollInterval = 0 ; int32 TimeLimitTimePollCounter = 0 ; const double StartTime = 0 . 0 ; const double TimeLimit = 0 . 0 ; std::atomic<int32>& TimeLimitFlag ; public :)",
    "insertText": "FTimeSlicer(int32 InPollInterval, int32 InitialCounter, double InStartTime, double InTimeLimit, std::atomic<int32>& InTimeLimitFlag) : TimeLimitPollInterval(InPollInterval) , TimeLimitTimePollCounter(InitialCounter) , StartTime(InStartTime) , TimeLimit(InTimeLimit) , TimeLimitFlag(InTimeLimitFlag)"
  },
  {
    "label": "IsTimeLimitExceeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeLimitExceeded()"
  },
  {
    "label": "bPollTimeLimit()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bPollTimeLimit((TimeLimitTimePollCounter++) % TimeLimitPollInterval == 0)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (TimeLimitFlag .)",
    "insertText": "store(1, std::memory_order_relaxed)"
  },
  {
    "label": "GetGarbageCollectionStats()",
    "kind": "Method",
    "detail": "Function (} } return false ; } } ; } namespace UE::GC::Private { UE::GC::Private::FStats)",
    "insertText": "GetGarbageCollectionStats()"
  }
]