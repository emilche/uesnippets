[
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfo"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "FeatureBitset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureBitset"
  },
  {
    "label": "OperandConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OperandConstraint"
  },
  {
    "label": "OperandFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OperandFlags"
  },
  {
    "label": "OperandType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OperandType"
  },
  {
    "label": "MCOperandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCOperandInfo"
  },
  {
    "label": "Flag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flag"
  },
  {
    "label": "MCInstrDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrDesc"
  },
  {
    "label": "isLookupPtrRegClass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCINSTRDESC_H # define LLVM_MC_MCINSTRDESC_H # include \" llvm / Support / DataTypes . h \" # include<string> namespace llvm { class MCInst ; class MCRegisterInfo ; class MCSubtargetInfo ; class FeatureBitset ; namespace MCOI { enum OperandConstraint { TIED_TO = 0,EARLY_CLOBBER } ; enum OperandFlags { LookupPtrRegClass = 0,Predicate,OptionalDef } ; enum OperandType { OPERAND_UNKNOWN = 0,OPERAND_IMMEDIATE = 1,OPERAND_REGISTER = 2,OPERAND_MEMORY = 3,OPERAND_PCREL = 4,OPERAND_FIRST_TARGET = 5 } ; } class MCOperandInfo { public : int16_t RegClass ; uint8_t Flags ; uint8_t OperandType ; uint32_t Constraints ; bool)",
    "insertText": "isLookupPtrRegClass()"
  },
  {
    "label": "isPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPredicate()"
  },
  {
    "label": "isOptionalDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOptionalDef()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; namespace MCID { enum Flag { Variadic = 0,HasOptionalDef,Pseudo,Return,Call,Barrier,Terminator,Branch,IndirectBranch,Compare,MoveImm,Bitcast,Select,DelaySlot,FoldableAsLoad,MayLoad,MayStore,Predicable,NotDuplicable,UnmodeledSideEffects,Commutable,ConvertibleTo3Addr,UsesCustomInserter,HasPostISelHook,Rematerializable,CheapAsAMove,ExtraSrcRegAllocReq,ExtraDefRegAllocReq,RegSequence,ExtractSubreg,InsertSubreg,Convergent } ; } class MCInstrDesc { public : unsigned short Opcode ; unsigned short NumOperands ; unsigned char NumDefs ; unsigned char Size ; unsigned short SchedClass ; uint64_t Flags ; uint64_t TSFlags ; const uint16_t* ImplicitUses ; const uint16_t* ImplicitDefs ; const MCOperandInfo* OpInfo ; int64_t DeprecatedFeature ;)",
    "insertText": "bool(*ComplexDeprecationInfo)(MCInst &, const MCSubtargetInfo &, std::string &)"
  },
  {
    "label": "getOperandConstraint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getOperandConstraint(unsigned OpNum, MCOI::OperandConstraint Constraint)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (unsigned Pos = 1 6 + Constraint* 4 ;)",
    "insertText": "return(int)(OpInfo[OpNum].Constraints >> Pos)"
  },
  {
    "label": "getDeprecatedInfo()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } bool)",
    "insertText": "getDeprecatedInfo(MCInst &MI, const MCSubtargetInfo &STI, std::string &Info)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOpcode()"
  },
  {
    "label": "hasOptionalDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOptionalDef()"
  },
  {
    "label": "isPseudo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPseudo()"
  },
  {
    "label": "isReturn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isReturn()"
  },
  {
    "label": "isCall()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCall()"
  },
  {
    "label": "isBarrier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBarrier()"
  },
  {
    "label": "isTerminator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTerminator()"
  },
  {
    "label": "isBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBranch()"
  },
  {
    "label": "isIndirectBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIndirectBranch()"
  },
  {
    "label": "isConditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConditionalBranch()"
  },
  {
    "label": "isUnconditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnconditionalBranch()"
  },
  {
    "label": "mayAffectControlFlow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayAffectControlFlow(const MCInst &MI, const MCRegisterInfo &RI)"
  },
  {
    "label": "isPredicable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPredicable()"
  },
  {
    "label": "isCompare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCompare()"
  },
  {
    "label": "isMoveImmediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMoveImmediate()"
  },
  {
    "label": "isBitcast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBitcast()"
  },
  {
    "label": "isSelect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSelect()"
  },
  {
    "label": "isNotDuplicable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNotDuplicable()"
  },
  {
    "label": "hasDelaySlot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDelaySlot()"
  },
  {
    "label": "canFoldAsLoad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canFoldAsLoad()"
  },
  {
    "label": "isRegSequenceLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegSequenceLike()"
  },
  {
    "label": "isExtractSubregLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExtractSubregLike()"
  },
  {
    "label": "isInsertSubregLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInsertSubregLike()"
  },
  {
    "label": "isConvergent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConvergent()"
  },
  {
    "label": "mayLoad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayLoad()"
  },
  {
    "label": "mayStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayStore()"
  },
  {
    "label": "hasUnmodeledSideEffects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUnmodeledSideEffects()"
  },
  {
    "label": "isCommutable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCommutable()"
  },
  {
    "label": "isConvertibleTo3Addr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConvertibleTo3Addr()"
  },
  {
    "label": "usesCustomInsertionHook()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "usesCustomInsertionHook()"
  },
  {
    "label": "hasPostISelHook()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPostISelHook()"
  },
  {
    "label": "isRematerializable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRematerializable()"
  },
  {
    "label": "isAsCheapAsAMove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAsCheapAsAMove()"
  },
  {
    "label": "hasExtraSrcRegAllocReq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExtraSrcRegAllocReq()"
  },
  {
    "label": "hasExtraDefRegAllocReq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExtraDefRegAllocReq()"
  },
  {
    "label": "getImplicitUses()",
    "kind": "Method",
    "detail": "Function (} const uint16_t*)",
    "insertText": "getImplicitUses()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i = 0 ;)",
    "insertText": "for(; ImplicitUses[i]; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned i = 0 ;)",
    "insertText": "for(; ImplicitDefs[i]; ++i)"
  },
  {
    "label": "getSchedClass()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSchedClass()"
  },
  {
    "label": "hasDefOfPhysReg()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } private : bool)",
    "insertText": "hasDefOfPhysReg(const MCInst &MI, unsigned Reg, const MCRegisterInfo &RI)"
  }
]