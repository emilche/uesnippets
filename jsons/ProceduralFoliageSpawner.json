[
  {
    "label": "UProceduralFoliageTile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProceduralFoliageTile"
  },
  {
    "label": "UProceduralFoliageSpawner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProceduralFoliageSpawner"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Math / RandomStream . h \" # include \" ProceduralFoliageInstance . h \" # include \" FoliageTypeObject . h \" # include \" ProceduralFoliageSpawner . generated . h \" class UProceduralFoliageTile ;)",
    "insertText": "UCLASS(BlueprintType, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(Category = ProceduralFoliageSimulation, EditAnywhere, BlueprintReadOnly)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetRandomNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRandomNumber()"
  },
  {
    "label": "GetFoliageTypes()",
    "kind": "Method",
    "detail": "Function (const TArray<FFoliageTypeObject>&)",
    "insertText": "GetFoliageTypes()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetRandomTile()",
    "kind": "Method",
    "detail": "Function (const UProceduralFoliageTile*)",
    "insertText": "GetRandomTile(int32 X, int32 Y)"
  },
  {
    "label": "CreateTempTile()",
    "kind": "Method",
    "detail": "Function (UProceduralFoliageTile*)",
    "insertText": "CreateTempTile()"
  },
  {
    "label": "CreateProceduralFoliageInstances()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateProceduralFoliageInstances()"
  },
  {
    "label": "SetClean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClean()"
  }
]