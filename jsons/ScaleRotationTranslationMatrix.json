[
  {
    "label": "TScaleRotationTranslationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScaleRotationTranslationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TScaleRotationTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TScaleRotationTranslationMatrix : public TMatrix<T> { public : using TMatrix<T>::M ;)",
    "insertText": "TScaleRotationTranslationMatrix(const TVector<T>& Scale, const TRotator<T>& Rot, const TVector<T>& Origin)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TScaleRotationTranslationMatrix(const TScaleRotationTranslationMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "GetSinCos()",
    "kind": "Method",
    "detail": "Function (} } ; namespace { template<T> void)",
    "insertText": "GetSinCos(T& S, T& C, T Degrees)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (S = 0 . f ; C = 1 . f ; } else)",
    "insertText": "if(Degrees == 90.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (S = 1 . f ; C = 0 . f ; } else)",
    "insertText": "if(Degrees == 180.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (S = 0 . f ; C = - 1 . f ; } else)",
    "insertText": "if(Degrees == 270.f)"
  },
  {
    "label": "SinCos()",
    "kind": "Method",
    "detail": "Function (S = - 1 . f ; C = 0 . f ; } else {)",
    "insertText": "SinCos(&S, &C, FMath::DegreesToRadians(Degrees))"
  },
  {
    "label": "GetSinCos()",
    "kind": "Method",
    "detail": "Function (T SP,SY,SR ; T CP,CY,CR ;)",
    "insertText": "GetSinCos(SP, CP, (T)Rot.Pitch)"
  },
  {
    "label": "GetSinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSinCos(SY, CY, (T)Rot.Yaw)"
  },
  {
    "label": "GetSinCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSinCos(SR, CR, (T)Rot.Roll)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(CP * CY)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(CP * SY)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(SP)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (M [ 0 ] [ 3 ] = 0 . f ;)",
    "insertText": "M(SR * SP * CY - CR * SY)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(SR * SP * SY + CR * CY)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(- SR * CP)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (M [ 1 ] [ 3 ] = 0 . f ;)",
    "insertText": "M(-( CR * SP * CY + SR * SY ))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(CY * SR - CR * SP * SY)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(CR * CP)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (M [ 2 ] [ 3 ] = 0 . f ; M [ 3 ] [ 0 ] = Origin . X ; M [ 3 ] [ 1 ] = Origin . Y ; M [ 3 ] [ 2 ] = Origin . Z ; M [ 3 ] [ 3 ] = 1 . f ; } } })",
    "insertText": "UE_DECLARE_LWC_TYPE(ScaleRotationTranslationMatrix, 44)"
  }
]