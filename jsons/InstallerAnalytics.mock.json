[
  {
    "label": "FMockInstallerAnalytics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockInstallerAnalytics"
  },
  {
    "label": "RecordChunkDownloadError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / InstallerAnalytics . h \" # if WITH_DEV_AUTOMATION_TESTS # include \" Common / StatsCollector . h \" namespace BuildPatchServices { class FMockInstallerAnalytics : public IInstallerAnalytics { public : typedef TTuple<double,FString,int32,FString> FRecordChunkDownloadError ; typedef TTuple<double,FString,double,double,double,double> FRecordChunkDownloadAborted ; typedef TTuple<double,FGuid,FString,int32,FString,FString> FRecordChunkCacheError ; typedef TTuple<double,FString,int32,FString> FRecordConstructionError ; typedef TTuple<double,FString,FString,FString,FString,int32,FString> FRecordPrereqInstallationError ; typedef TTuple<double,FHttpRequestPtr> FTrackRequest ; public : void)",
    "insertText": "RecordChunkDownloadError(const FString& ChunkUrl, int32 ResponseCode, const FString& ErrorString)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxRecordChunkDownloadError .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkUrl, ResponseCode, ErrorString)"
  },
  {
    "label": "RecordChunkDownloadAborted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordChunkDownloadAborted(const FString& ChunkUrl, double ChunkTime, double ChunkMean, double ChunkStd, double BreakingPoint)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxRecordChunkDownloadAborted .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkUrl, ChunkTime, ChunkMean, ChunkStd, BreakingPoint)"
  },
  {
    "label": "RecordChunkCacheError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordChunkCacheError(const FGuid& ChunkGuid, const FString& Filename, int32 LastError, const FString& SystemName, const FString& ErrorString)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxRecordChunkCacheError .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkGuid, Filename, LastError, SystemName, ErrorString)"
  },
  {
    "label": "RecordConstructionError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordConstructionError(const FString& Filename, int32 LastError, const FString& ErrorString)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxRecordConstructionError .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Filename, LastError, ErrorString)"
  },
  {
    "label": "RecordPrereqInstallationError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordPrereqInstallationError(const FString& AppName, const FString& AppVersion, const FString& Filename, const FString& CommandLine, int32 ErrorCode, const FString& ErrorString)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxRecordPrereqInstallationError .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), AppName, AppVersion, Filename, CommandLine, ErrorCode, ErrorString)"
  },
  {
    "label": "TrackRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackRequest(const FHttpRequestPtr& Request)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxTrackRequest .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Request)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  }
]