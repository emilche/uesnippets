[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "E",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "E"
  },
  {
    "label": "HashEq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashEq"
  },
  {
    "label": "StringHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringHash"
  },
  {
    "label": "StringEq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringEq"
  },
  {
    "label": "StringHashEq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringHashEq"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hash"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Eq"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASH_FUNCTION_DEFAULTS_H_ # define ABSL_CONTAINER_INTERNAL_HASH_FUNCTION_DEFAULTS_H_ # include<stdint . h> # include<cstddef> # include<memory> # include<string> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / hash / hash . h \" # include \" absl / strings / cord . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class T,class E = void> struct HashEq { using Hash = absl::Hash<T> ; using Eq = std::equal_to<T> ; } ; struct StringHash { using is_transparent = void ; size_t)",
    "insertText": "operator()(absl::string_view v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "operator()(const absl::Cord& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct StringEq { using is_transparent = void ; bool)",
    "insertText": "operator()(absl::string_view lhs, absl::string_view rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct Eq { using is_transparent = void ; template<class A,class B> bool)",
    "insertText": "operator()(const A& a, const B& b)"
  },
  {
    "label": "ToPtr()",
    "kind": "Method",
    "detail": "Function (} } ; private : const T*)",
    "insertText": "ToPtr(const T* ptr)"
  },
  {
    "label": "ToPtr()",
    "kind": "Method",
    "detail": "Function (} template<class U> const T*)",
    "insertText": "ToPtr(const std::shared_ptr<U>& ptr)"
  }
]