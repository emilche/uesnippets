[
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (ST_INLINE)",
    "insertText": "CExtents()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CExtents(const st_float32 afExtents[6]) : m_vMin(afExtents), m_vMax(afExtents + 3)"
  },
  {
    "label": "CExtents()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "CExtents(const Vec3& cMin, const Vec3& cMax) : m_vMin(cMin), m_vMax(cMax)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Reset(void)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "Set(FLT_MAX, FLT_MAX, FLT_MAX)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "Set(-FLT_MAX, -FLT_MAX, -FLT_MAX)"
  },
  {
    "label": "SetToZeros()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "SetToZeros(void)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "Set(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "Order()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Order(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_float32 fTmp ;)",
    "insertText": "if(m_vMin.x > m_vMax.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fTmp = m_vMin . x ; m_vMin . x = m_vMax . x ; m_vMax . x = fTmp ; })",
    "insertText": "if(m_vMin.y > m_vMax.y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fTmp = m_vMin . y ; m_vMin . y = m_vMax . y ; m_vMax . y = fTmp ; })",
    "insertText": "if(m_vMin.z > m_vMax.z)"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (fTmp = m_vMin . z ; m_vMin . z = m_vMax . z ; m_vMax . z = fTmp ; } } ST_INLINE bool)",
    "insertText": "Valid(void)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "ExpandAround(const st_float32 afPoint[3])"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "x(afPoint[0] < m_vMin.x)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "y(afPoint[1] < m_vMin.y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "z(afPoint[2] < m_vMin.z)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "x(afPoint[0] > m_vMax.x)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "y(afPoint[1] > m_vMax.y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "z(afPoint[2] > m_vMax.z)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "ExpandAround(const Vec3& vPoint)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "x(vPoint.x < m_vMin.x)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "y(vPoint.y < m_vMin.y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (m_vMin .)",
    "insertText": "z(vPoint.z < m_vMin.z)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "x(vPoint.x > m_vMax.x)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "y(vPoint.y > m_vMax.y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (m_vMax .)",
    "insertText": "z(vPoint.z > m_vMax.z)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "ExpandAround(const Vec3& vPoint, float fRadius)"
  },
  {
    "label": "vPointMin()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "vPointMin(vPoint.x - fRadius, vPoint.y - fRadius, vPoint.z - fRadius)"
  },
  {
    "label": "vPointMax()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "vPointMax(vPoint.x + fRadius, vPoint.y + fRadius, vPoint.z + fRadius)"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(vPointMin.x < m_vMin[0])"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(vPointMin.y < m_vMin[1])"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(vPointMin.z < m_vMin[2])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(vPointMax.x > m_vMax[0])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(vPointMax.y > m_vMax[1])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(vPointMax.z > m_vMax[2])"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "ExpandAround(const CExtents& cOther)"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(cOther.m_vMin[0] < m_vMin[0])"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(cOther.m_vMin[1] < m_vMin[1])"
  },
  {
    "label": "m_vMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMin(cOther.m_vMin[2] < m_vMin[2])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(cOther.m_vMax[0] > m_vMax[0])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(cOther.m_vMax[1] > m_vMax[1])"
  },
  {
    "label": "m_vMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_vMax(cOther.m_vMax[2] > m_vMax[2])"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Scale(st_float32 fScalar)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (m_vMin* = fScalar ; m_vMax* = fScalar ; } ST_INLINE void)",
    "insertText": "Translate(const Vec3& vTranslation)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (m_vMin + = vTranslation ; m_vMax + = vTranslation ; } ST_INLINE void)",
    "insertText": "Orient(const Vec3& vUp, const Vec3& vRight)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (Vec3 aVertices [ 8 ] = {)",
    "insertText": "Vec3(m_vMin.x, m_vMin.y, m_vMin.z), Vec3(m_vMax.x, m_vMin.y, m_vMin.z), Vec3(m_vMin.x, m_vMax.y, m_vMin.z), Vec3(m_vMax.x, m_vMax.y, m_vMin.z), Vec3(m_vMin.x, m_vMin.y, m_vMax.z), Vec3(m_vMax.x, m_vMin.y, m_vMax.z), Vec3(m_vMin.x, m_vMax.y, m_vMax.z), Vec3(m_vMax.x, m_vMax.y, m_vMax.z)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (Vec3 vOut = vUp .)",
    "insertText": "Cross(vRight).Normalize()"
  },
  {
    "label": "mOrient()",
    "kind": "Method",
    "detail": "Function (Mat3x3)",
    "insertText": "mOrient(vRight, vOut, vUp)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Rotate(st_float32 fRadians)"
  },
  {
    "label": "RotateUpAxis()",
    "kind": "Method",
    "detail": "Function (Mat3x3 mRot ;)",
    "insertText": "RotateUpAxis(mRot, fRadians)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (Vec3 vCorner1 = mRot* m_vMin ; Vec3 vCorner2 = mRot* m_vMax ; Vec3 vCorner3 = mRot*)",
    "insertText": "Vec3(m_vMin.x, m_vMax.y, m_vMin.z)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (Vec3 vCorner4 = mRot*)",
    "insertText": "Vec3(m_vMax.x, m_vMin.y, m_vMin.z)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(vCorner1)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(vCorner2)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(vCorner3)"
  },
  {
    "label": "ExpandAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAround(vCorner4)"
  },
  {
    "label": "ComputeRadiusFromCenter3D()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "ComputeRadiusFromCenter3D(void)"
  },
  {
    "label": "ComputeRadiusSquaredFromCenter3D()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "ComputeRadiusSquaredFromCenter3D(void)"
  },
  {
    "label": "ComputeRadiusFromCenter2D()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "ComputeRadiusFromCenter2D(void)"
  },
  {
    "label": "ConvertToStd()",
    "kind": "Method",
    "detail": "Function (Vec3 vCenter2D =)",
    "insertText": "ConvertToStd(GetCenter( ))"
  },
  {
    "label": "ConvertToStd()",
    "kind": "Method",
    "detail": "Function (vCenter2D . z = 0 . 0 f ; Vec3 vMin2D =)",
    "insertText": "ConvertToStd(Min( ))"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (vMin2D . z = 0 . 0 f ; return vCenter2D .)",
    "insertText": "Distance(vMin2D)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE const Vec3&)",
    "insertText": "Min(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(uiAxis < 3)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec3)",
    "insertText": "GetCenter(void)"
  },
  {
    "label": "GetDiagonal()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec3)",
    "insertText": "GetDiagonal(void)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GetHeight(void)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CExtents::operator)",
    "insertText": "float(void)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CExtents::operator const)",
    "insertText": "st_float32(void)"
  }
]