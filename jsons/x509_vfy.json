[
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_X509_VFY_H # define HEADER_X509_VFY_H # ifndef HEADER_X509_H # include<openssl / x509 . h> # endif # include<openssl / opensslconf . h> # include<openssl / lhash . h> # include<openssl / bio . h> # include<openssl / crypto . h> # include<openssl / symhacks . h> # ifdef __cplusplus \" C \" { # endif typedef enum { X509_LU_NONE = 0,X509_LU_X509,X509_LU_CRL } X509_LOOKUP_TYPE ; # if OPENSSL_API_COMPAT<0 x10100000L # define X509_LU_RETRY - 1 # define X509_LU_FAIL 0 # endif)",
    "insertText": "DEFINE_STACK_OF(X509_LOOKUP) DEFINE_STACK_OF(X509_OBJECT) DEFINE_STACK_OF(X509_VERIFY_PARAM) int X509_STORE_set_depth(X509_STORE *store, int depth)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_verify_fn)(X509_STORE_CTX *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_get_issuer_fn)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_check_issued_fn)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_check_revocation_fn)(X509_STORE_CTX *ctx)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_get_crl_fn)(X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_check_crl_fn)(X509_STORE_CTX *ctx, X509_CRL *crl)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_cert_crl_fn)(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_check_policy_fn)(X509_STORE_CTX *ctx)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(X509) *(*X509_STORE_CTX_lookup_certs_fn)(X509_STORE_CTX *ctx, X509_NAME *nm)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(X509_CRL) *(*X509_STORE_CTX_lookup_crls_fn)(X509_STORE_CTX *ctx, X509_NAME *nm)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_STORE_CTX_cleanup_fn)(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set_depth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth)"
  },
  {
    "label": "X509_STORE_CTX_set_app_data()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_CTX_set_app_data(ctx,data) \\ X509_STORE_CTX_set_ex_data(ctx,0,data) # define X509_STORE_CTX_get_app_data(ctx) \\ X509_STORE_CTX_get_ex_data(ctx,0) # define X509_L_FILE_LOAD 1 # define X509_L_ADD_DIR 2 # define X509_LOOKUP_load_file(x,name,type) \\ X509_LOOKUP_ctrl((x),X509_L_FILE_LOAD,(name),(long)(type),NULL) # define X509_LOOKUP_add_dir(x,name,type) \\ X509_LOOKUP_ctrl((x),X509_L_ADD_DIR,(name),(long)(type),NULL) # define X509_V_OK 0 # define X509_V_ERR_UNSPECIFIED 1 # define X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT 2 # define X509_V_ERR_UNABLE_TO_GET_CRL 3 # define X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE 4 # define X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE 5 # define X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY 6 # define X509_V_ERR_CERT_SIGNATURE_FAILURE 7 # define X509_V_ERR_CRL_SIGNATURE_FAILURE 8 # define X509_V_ERR_CERT_NOT_YET_VALID 9 # define X509_V_ERR_CERT_HAS_EXPIRED 10 # define X509_V_ERR_CRL_NOT_YET_VALID 11 # define X509_V_ERR_CRL_HAS_EXPIRED 12 # define X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD 13 # define X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD 14 # define X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD 15 # define X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD 16 # define X509_V_ERR_OUT_OF_MEM 17 # define X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT 18 # define X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN 19 # define X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY 20 # define X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE 21 # define X509_V_ERR_CERT_CHAIN_TOO_LONG 22 # define X509_V_ERR_CERT_REVOKED 23 # define X509_V_ERR_INVALID_CA 24 # define X509_V_ERR_PATH_LENGTH_EXCEEDED 25 # define X509_V_ERR_INVALID_PURPOSE 26 # define X509_V_ERR_CERT_UNTRUSTED 27 # define X509_V_ERR_CERT_REJECTED 28 # define X509_V_ERR_SUBJECT_ISSUER_MISMATCH 29 # define X509_V_ERR_AKID_SKID_MISMATCH 30 # define X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH 31 # define X509_V_ERR_KEYUSAGE_NO_CERTSIGN 32 # define X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER 33 # define X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION 34 # define X509_V_ERR_KEYUSAGE_NO_CRL_SIGN 35 # define X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION 36 # define X509_V_ERR_INVALID_NON_CA 37 # define X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED 38 # define X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE 39 # define X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED 40 # define X509_V_ERR_INVALID_EXTENSION 41 # define X509_V_ERR_INVALID_POLICY_EXTENSION 42 # define X509_V_ERR_NO_EXPLICIT_POLICY 43 # define X509_V_ERR_DIFFERENT_CRL_SCOPE 44 # define X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE 45 # define X509_V_ERR_UNNESTED_RESOURCE 46 # define X509_V_ERR_PERMITTED_VIOLATION 47 # define X509_V_ERR_EXCLUDED_VIOLATION 48 # define X509_V_ERR_SUBTREE_MINMAX 49 # define X509_V_ERR_APPLICATION_VERIFICATION 50 # define X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE 51 # define X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX 52 # define X509_V_ERR_UNSUPPORTED_NAME_SYNTAX 53 # define X509_V_ERR_CRL_PATH_VALIDATION_ERROR 54 # define X509_V_ERR_PATH_LOOP 55 # define X509_V_ERR_SUITE_B_INVALID_VERSION 56 # define X509_V_ERR_SUITE_B_INVALID_ALGORITHM 57 # define X509_V_ERR_SUITE_B_INVALID_CURVE 58 # define X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM 59 # define X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED 60 # define X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 61 # define X509_V_ERR_HOSTNAME_MISMATCH 62 # define X509_V_ERR_EMAIL_MISMATCH 63 # define X509_V_ERR_IP_ADDRESS_MISMATCH 64 # define X509_V_ERR_DANE_NO_MATCH 65 # define X509_V_ERR_EE_KEY_TOO_SMALL 66 # define X509_V_ERR_CA_KEY_TOO_SMALL 67 # define X509_V_ERR_CA_MD_TOO_WEAK 68 # define X509_V_ERR_INVALID_CALL 69 # define X509_V_ERR_STORE_LOOKUP 70 # define X509_V_ERR_NO_VALID_SCTS 71 # define X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION 72 # define X509_V_ERR_OCSP_VERIFY_NEEDED 73 # define X509_V_ERR_OCSP_VERIFY_FAILED 74 # define X509_V_ERR_OCSP_CERT_UNKNOWN 75 # define X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH 76 # define X509_V_ERR_NO_ISSUER_PUBLIC_KEY 77 # define X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM 78 # define X509_V_ERR_EC_KEY_EXPLICIT_PARAMS 79 # if OPENSSL_API_COMPAT < 0x10100000L # define X509_V_FLAG_CB_ISSUER_CHECK 0x0 # endif # define X509_V_FLAG_USE_CHECK_TIME 0x2 # define X509_V_FLAG_CRL_CHECK 0x4 # define X509_V_FLAG_CRL_CHECK_ALL 0x8 # define X509_V_FLAG_IGNORE_CRITICAL 0x10 # define X509_V_FLAG_X509_STRICT 0x20 # define X509_V_FLAG_ALLOW_PROXY_CERTS 0x40 # define X509_V_FLAG_POLICY_CHECK 0x80 # define X509_V_FLAG_EXPLICIT_POLICY 0x100 # define X509_V_FLAG_INHIBIT_ANY 0x200 # define X509_V_FLAG_INHIBIT_MAP 0x400 # define X509_V_FLAG_NOTIFY_POLICY 0x800 # define X509_V_FLAG_EXTENDED_CRL_SUPPORT 0x1000 # define X509_V_FLAG_USE_DELTAS 0x2000 # define X509_V_FLAG_CHECK_SS_SIGNATURE 0x4000 # define X509_V_FLAG_TRUSTED_FIRST 0x8000 # define X509_V_FLAG_SUITEB_128_LOS_ONLY 0x10000 # define X509_V_FLAG_SUITEB_192_LOS 0x20000 # define X509_V_FLAG_SUITEB_128_LOS 0x30000 # define X509_V_FLAG_PARTIAL_CHAIN 0x80000 # define X509_V_FLAG_NO_ALT_CHAINS 0x100000 # define X509_V_FLAG_NO_CHECK_TIME 0x200000 # define X509_VP_FLAG_DEFAULT 0x1 # define X509_VP_FLAG_OVERWRITE 0x2 # define X509_VP_FLAG_RESET_FLAGS 0x4 # define X509_VP_FLAG_LOCKED 0x8 # define X509_VP_FLAG_ONCE 0x10 # define X509_V_FLAG_POLICY_MASK (X509_V_FLAG_POLICY_CHECK \\ | X509_V_FLAG_EXPLICIT_POLICY \\ | X509_V_FLAG_INHIBIT_ANY \\ | X509_V_FLAG_INHIBIT_MAP) int X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type, X509_NAME *name)"
  },
  {
    "label": "X509_OBJECT_retrieve_by_subject()",
    "kind": "Method",
    "detail": "Function (X509_OBJECT*)",
    "insertText": "X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type, X509_NAME *name)"
  },
  {
    "label": "X509_OBJECT_retrieve_match()",
    "kind": "Method",
    "detail": "Function (X509_OBJECT*)",
    "insertText": "X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h, X509_OBJECT *x)"
  },
  {
    "label": "X509_OBJECT_up_ref_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_OBJECT_up_ref_count(X509_OBJECT *a)"
  },
  {
    "label": "X509_OBJECT_new()",
    "kind": "Method",
    "detail": "Function (X509_OBJECT*)",
    "insertText": "X509_OBJECT_new(void)"
  },
  {
    "label": "X509_OBJECT_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_OBJECT_free(X509_OBJECT *a)"
  },
  {
    "label": "X509_OBJECT_get_type()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_TYPE)",
    "insertText": "X509_OBJECT_get_type(const X509_OBJECT *a)"
  },
  {
    "label": "X509_OBJECT_get0_X509()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_OBJECT_get0_X509(const X509_OBJECT *a)"
  },
  {
    "label": "X509_OBJECT_set1_X509()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj)"
  },
  {
    "label": "X509_OBJECT_get0_X509_CRL()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "X509_OBJECT_get0_X509_CRL(X509_OBJECT *a)"
  },
  {
    "label": "X509_OBJECT_set1_X509_CRL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)"
  },
  {
    "label": "X509_STORE_new()",
    "kind": "Method",
    "detail": "Function (X509_STORE*)",
    "insertText": "X509_STORE_new(void)"
  },
  {
    "label": "X509_STORE_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_free(X509_STORE *v)"
  },
  {
    "label": "X509_STORE_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_lock(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_unlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_unlock(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_up_ref(X509_STORE *v)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_OBJECT) *X509_STORE_get0_objects(X509_STORE *v)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509) *X509_STORE_CTX_get1_certs(X509_STORE_CTX *st, X509_NAME *nm)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_CRL) *X509_STORE_CTX_get1_crls(X509_STORE_CTX *st, X509_NAME *nm)"
  },
  {
    "label": "X509_STORE_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags)"
  },
  {
    "label": "X509_STORE_set_purpose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_set_purpose(X509_STORE *ctx, int purpose)"
  },
  {
    "label": "X509_STORE_set_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_set_trust(X509_STORE *ctx, int trust)"
  },
  {
    "label": "X509_STORE_set1_param()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm)"
  },
  {
    "label": "X509_STORE_get0_param()",
    "kind": "Method",
    "detail": "Function (X509_VERIFY_PARAM*)",
    "insertText": "X509_STORE_get0_param(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify)"
  },
  {
    "label": "X509_STORE_set_verify_func()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_set_verify_func(ctx, func) \\ X509_STORE_set_verify((ctx),(func)) void X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx, X509_STORE_CTX_verify_fn verify)"
  },
  {
    "label": "X509_STORE_get_verify()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_verify_fn)",
    "insertText": "X509_STORE_get_verify(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_verify_cb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_verify_cb(X509_STORE *ctx, X509_STORE_CTX_verify_cb verify_cb)"
  },
  {
    "label": "X509_STORE_set_verify_cb_func()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_set_verify_cb_func(ctx,func) \\ X509_STORE_set_verify_cb((ctx),(func)) X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_get_issuer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_get_issuer(X509_STORE *ctx, X509_STORE_CTX_get_issuer_fn get_issuer)"
  },
  {
    "label": "X509_STORE_get_get_issuer()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_get_issuer_fn)",
    "insertText": "X509_STORE_get_get_issuer(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_check_issued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_check_issued(X509_STORE *ctx, X509_STORE_CTX_check_issued_fn check_issued)"
  },
  {
    "label": "X509_STORE_get_check_issued()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_issued_fn)",
    "insertText": "X509_STORE_get_check_issued(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_check_revocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_check_revocation(X509_STORE *ctx, X509_STORE_CTX_check_revocation_fn check_revocation)"
  },
  {
    "label": "X509_STORE_get_check_revocation()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_revocation_fn)",
    "insertText": "X509_STORE_get_check_revocation(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_get_crl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_get_crl(X509_STORE *ctx, X509_STORE_CTX_get_crl_fn get_crl)"
  },
  {
    "label": "X509_STORE_get_get_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_get_crl_fn)",
    "insertText": "X509_STORE_get_get_crl(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_check_crl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_check_crl(X509_STORE *ctx, X509_STORE_CTX_check_crl_fn check_crl)"
  },
  {
    "label": "X509_STORE_get_check_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_crl_fn)",
    "insertText": "X509_STORE_get_check_crl(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_cert_crl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_cert_crl(X509_STORE *ctx, X509_STORE_CTX_cert_crl_fn cert_crl)"
  },
  {
    "label": "X509_STORE_get_cert_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_cert_crl_fn)",
    "insertText": "X509_STORE_get_cert_crl(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_check_policy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_check_policy(X509_STORE *ctx, X509_STORE_CTX_check_policy_fn check_policy)"
  },
  {
    "label": "X509_STORE_get_check_policy()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_policy_fn)",
    "insertText": "X509_STORE_get_check_policy(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_lookup_certs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_lookup_certs(X509_STORE *ctx, X509_STORE_CTX_lookup_certs_fn lookup_certs)"
  },
  {
    "label": "X509_STORE_get_lookup_certs()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_lookup_certs_fn)",
    "insertText": "X509_STORE_get_lookup_certs(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_lookup_crls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_lookup_crls(X509_STORE *ctx, X509_STORE_CTX_lookup_crls_fn lookup_crls)"
  },
  {
    "label": "X509_STORE_set_lookup_crls_cb()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_set_lookup_crls_cb(ctx, func) \\ X509_STORE_set_lookup_crls((ctx), (func)) X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_set_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_set_cleanup(X509_STORE *ctx, X509_STORE_CTX_cleanup_fn cleanup)"
  },
  {
    "label": "X509_STORE_get_cleanup()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_cleanup_fn)",
    "insertText": "X509_STORE_get_cleanup(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_get_ex_new_index()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_get_ex_new_index(l, p, newf, dupf, freef) \\ CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE, l, p, newf, dupf, freef) int X509_STORE_set_ex_data(X509_STORE *ctx, int idx, void *data)"
  },
  {
    "label": "X509_STORE_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_STORE_get_ex_data(X509_STORE *ctx, int idx)"
  },
  {
    "label": "X509_STORE_CTX_new()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX*)",
    "insertText": "X509_STORE_CTX_new(void)"
  },
  {
    "label": "X509_STORE_CTX_get1_issuer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)"
  },
  {
    "label": "X509_STORE_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_free(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, STACK_OF(X509) *chain)"
  },
  {
    "label": "X509_STORE_CTX_set0_trusted_stack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)"
  },
  {
    "label": "X509_STORE_CTX_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get0_store()",
    "kind": "Method",
    "detail": "Function (X509_STORE*)",
    "insertText": "X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get0_cert()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509)* X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set0_untrusted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)"
  },
  {
    "label": "X509_STORE_CTX_set_verify_cb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx, X509_STORE_CTX_verify_cb verify)"
  },
  {
    "label": "X509_STORE_CTX_get_verify_cb()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_verify_cb)",
    "insertText": "X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_verify()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_verify_fn)",
    "insertText": "X509_STORE_CTX_get_verify(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_get_issuer()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_get_issuer_fn)",
    "insertText": "X509_STORE_CTX_get_get_issuer(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_check_issued()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_issued_fn)",
    "insertText": "X509_STORE_CTX_get_check_issued(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_check_revocation()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_revocation_fn)",
    "insertText": "X509_STORE_CTX_get_check_revocation(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_get_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_get_crl_fn)",
    "insertText": "X509_STORE_CTX_get_get_crl(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_check_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_crl_fn)",
    "insertText": "X509_STORE_CTX_get_check_crl(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_cert_crl()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_cert_crl_fn)",
    "insertText": "X509_STORE_CTX_get_cert_crl(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_check_policy()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_check_policy_fn)",
    "insertText": "X509_STORE_CTX_get_check_policy(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_lookup_certs()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_lookup_certs_fn)",
    "insertText": "X509_STORE_CTX_get_lookup_certs(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_lookup_crls()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_lookup_crls_fn)",
    "insertText": "X509_STORE_CTX_get_lookup_crls(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_cleanup()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX_cleanup_fn)",
    "insertText": "X509_STORE_CTX_get_cleanup(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_add_lookup()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define X509_STORE_CTX_get_chain X509_STORE_CTX_get0_chain # define X509_STORE_CTX_set_chain X509_STORE_CTX_set0_untrusted # define X509_STORE_CTX_trusted_stack X509_STORE_CTX_set0_trusted_stack # define X509_STORE_get_by_subject X509_STORE_CTX_get_by_subject # define X509_STORE_get1_certs X509_STORE_CTX_get1_certs # define X509_STORE_get1_crls X509_STORE_CTX_get1_crls # define X509_STORE_get1_cert X509_STORE_CTX_get1_certs # define X509_STORE_get1_crl X509_STORE_CTX_get1_crls # endif X509_LOOKUP*)",
    "insertText": "X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m)"
  },
  {
    "label": "X509_LOOKUP_hash_dir()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_METHOD*)",
    "insertText": "X509_LOOKUP_hash_dir(void)"
  },
  {
    "label": "X509_LOOKUP_file()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_METHOD*)",
    "insertText": "X509_LOOKUP_file(void)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_LOOKUP_ctrl_fn)(X509_LOOKUP *ctx, int cmd, const char *argc, long argl, char **ret)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_LOOKUP_get_by_subject_fn)(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, X509_NAME *name, X509_OBJECT *ret)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_LOOKUP_get_by_issuer_serial_fn)(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_LOOKUP_get_by_fingerprint_fn)(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, const unsigned char* bytes, int len, X509_OBJECT *ret)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509_LOOKUP_get_by_alias_fn)(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, const char *str, int len, X509_OBJECT *ret)"
  },
  {
    "label": "X509_LOOKUP_meth_new()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_METHOD*)",
    "insertText": "X509_LOOKUP_meth_new(const char *name)"
  },
  {
    "label": "X509_LOOKUP_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_meth_set_new_item()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method, int (*new_item) (X509_LOOKUP *ctx))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method)) (X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_meth_set_free()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD *method, void (*free_fn) (X509_LOOKUP *ctx))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method)) (X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_meth_set_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method, int (*init) (X509_LOOKUP *ctx))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method)) (X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_meth_set_shutdown()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD *method, int (*shutdown) (X509_LOOKUP *ctx))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method)) (X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_meth_set_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD *method, X509_LOOKUP_ctrl_fn ctrl_fn)"
  },
  {
    "label": "X509_LOOKUP_meth_get_ctrl()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_ctrl_fn)",
    "insertText": "X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_meth_set_get_by_subject()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method, X509_LOOKUP_get_by_subject_fn fn)"
  },
  {
    "label": "X509_LOOKUP_meth_get_get_by_subject()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_get_by_subject_fn)",
    "insertText": "X509_LOOKUP_meth_get_get_by_subject(const X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_meth_set_get_by_issuer_serial()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD *method, X509_LOOKUP_get_by_issuer_serial_fn fn)"
  },
  {
    "label": "X509_LOOKUP_meth_get_get_by_issuer_serial()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_get_by_issuer_serial_fn)",
    "insertText": "X509_LOOKUP_meth_get_get_by_issuer_serial(const X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_meth_set_get_by_fingerprint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method, X509_LOOKUP_get_by_fingerprint_fn fn)"
  },
  {
    "label": "X509_LOOKUP_meth_get_get_by_fingerprint()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_get_by_fingerprint_fn)",
    "insertText": "X509_LOOKUP_meth_get_get_by_fingerprint(const X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_meth_set_get_by_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method, X509_LOOKUP_get_by_alias_fn fn)"
  },
  {
    "label": "X509_LOOKUP_meth_get_get_by_alias()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP_get_by_alias_fn)",
    "insertText": "X509_LOOKUP_meth_get_get_by_alias(const X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_STORE_add_cert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_add_cert(X509_STORE *ctx, X509 *x)"
  },
  {
    "label": "X509_STORE_add_crl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x)"
  },
  {
    "label": "X509_STORE_CTX_get_by_subject()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type, X509_NAME *name, X509_OBJECT *ret)"
  },
  {
    "label": "X509_STORE_CTX_get_obj_by_subject()",
    "kind": "Method",
    "detail": "Function (X509_OBJECT*)",
    "insertText": "X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type, X509_NAME *name)"
  },
  {
    "label": "X509_LOOKUP_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc, long argl, char **ret)"
  },
  {
    "label": "X509_load_cert_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)"
  },
  {
    "label": "X509_load_crl_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)"
  },
  {
    "label": "X509_load_cert_crl_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)"
  },
  {
    "label": "X509_LOOKUP_new()",
    "kind": "Method",
    "detail": "Function (X509_LOOKUP*)",
    "insertText": "X509_LOOKUP_new(X509_LOOKUP_METHOD *method)"
  },
  {
    "label": "X509_LOOKUP_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_LOOKUP_free(X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_init(X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_by_subject()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, X509_NAME *name, X509_OBJECT *ret)"
  },
  {
    "label": "X509_LOOKUP_by_issuer_serial()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret)"
  },
  {
    "label": "X509_LOOKUP_by_fingerprint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, const unsigned char *bytes, int len, X509_OBJECT *ret)"
  },
  {
    "label": "X509_LOOKUP_by_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type, const char *str, int len, X509_OBJECT *ret)"
  },
  {
    "label": "X509_LOOKUP_set_method_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data)"
  },
  {
    "label": "X509_LOOKUP_get_method_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_get_store()",
    "kind": "Method",
    "detail": "Function (X509_STORE*)",
    "insertText": "X509_LOOKUP_get_store(const X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_LOOKUP_shutdown()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_LOOKUP_shutdown(X509_LOOKUP *ctx)"
  },
  {
    "label": "X509_STORE_load_locations()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_load_locations(X509_STORE *ctx, const char *file, const char *dir)"
  },
  {
    "label": "X509_STORE_set_default_paths()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_set_default_paths(X509_STORE *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_ex_new_index()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "X509_STORE_CTX_get_ex_new_index(l, p, newf, dupf, freef) \\ CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE_CTX, l, p, newf, dupf, freef) int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data)"
  },
  {
    "label": "X509_STORE_CTX_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx)"
  },
  {
    "label": "X509_STORE_CTX_get_error()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get_error(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s)"
  },
  {
    "label": "X509_STORE_CTX_get_error_depth()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set_error_depth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth)"
  },
  {
    "label": "X509_STORE_CTX_get_current_cert()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set_current_cert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x)"
  },
  {
    "label": "X509_STORE_CTX_get0_current_issuer()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get0_current_crl()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get0_parent_ctx()",
    "kind": "Method",
    "detail": "Function (X509_STORE_CTX*)",
    "insertText": "X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509) *X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509) *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set_cert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x)"
  },
  {
    "label": "X509_STORE_CTX_set0_verified_chain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *c, STACK_OF(X509) *sk)"
  },
  {
    "label": "X509_STORE_CTX_set0_crls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, STACK_OF(X509_CRL) *sk)"
  },
  {
    "label": "X509_STORE_CTX_set_purpose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)"
  },
  {
    "label": "X509_STORE_CTX_set_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)"
  },
  {
    "label": "X509_STORE_CTX_purpose_inherit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust)"
  },
  {
    "label": "X509_STORE_CTX_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags)"
  },
  {
    "label": "X509_STORE_CTX_set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags, time_t t)"
  },
  {
    "label": "X509_STORE_CTX_get0_policy_tree()",
    "kind": "Method",
    "detail": "Function (X509_POLICY_TREE*)",
    "insertText": "X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_explicit_policy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get_num_untrusted()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_get0_param()",
    "kind": "Method",
    "detail": "Function (X509_VERIFY_PARAM*)",
    "insertText": "X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx)"
  },
  {
    "label": "X509_STORE_CTX_set0_param()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_STORE_CTX_set_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)"
  },
  {
    "label": "X509_STORE_CTX_set0_dane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane)"
  },
  {
    "label": "DANE_FLAG_NO_DANE_EE_NAMECHECKS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DANE_FLAG_NO_DANE_EE_NAMECHECKS(1L << 0) X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)"
  },
  {
    "label": "X509_VERIFY_PARAM_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_inherit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)"
  },
  {
    "label": "X509_VERIFY_PARAM_clear_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param, unsigned long flags)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_flags()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_purpose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_depth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_auth_level()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_time()",
    "kind": "Method",
    "detail": "Function (time_t)",
    "insertText": "X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)"
  },
  {
    "label": "X509_VERIFY_PARAM_add0_policy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_policies()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param, STACK_OF(ASN1_OBJECT) *policies)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_inh_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param, uint32_t flags)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_inh_flags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_host()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param, const char *name, size_t namelen)"
  },
  {
    "label": "X509_VERIFY_PARAM_add1_host()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param, const char *name, size_t namelen)"
  },
  {
    "label": "X509_VERIFY_PARAM_set_hostflags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param, unsigned int flags)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_hostflags()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_get0_peername()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *)"
  },
  {
    "label": "X509_VERIFY_PARAM_move_peername()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_email()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param, const char *email, size_t emaillen)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_ip()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param, const unsigned char *ip, size_t iplen)"
  },
  {
    "label": "X509_VERIFY_PARAM_set1_ip_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, const char *ipasc)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_depth()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_auth_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_get0_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_add0_table()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)"
  },
  {
    "label": "X509_VERIFY_PARAM_get_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_VERIFY_PARAM_get_count(void)"
  },
  {
    "label": "X509_VERIFY_PARAM_get0()",
    "kind": "Method",
    "detail": "Function (const X509_VERIFY_PARAM*)",
    "insertText": "X509_VERIFY_PARAM_get0(int id)"
  },
  {
    "label": "X509_VERIFY_PARAM_lookup()",
    "kind": "Method",
    "detail": "Function (const X509_VERIFY_PARAM*)",
    "insertText": "X509_VERIFY_PARAM_lookup(const char *name)"
  },
  {
    "label": "X509_VERIFY_PARAM_table_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_VERIFY_PARAM_table_cleanup(void)"
  },
  {
    "label": "X509_policy_check()",
    "kind": "Method",
    "detail": "Function (# define X509_PCY_TREE_FAILURE - 2 # define X509_PCY_TREE_INVALID - 1 # define X509_PCY_TREE_INTERNAL 0 # define X509_PCY_TREE_VALID 1 # define X509_PCY_TREE_EMPTY 2 # define X509_PCY_TREE_EXPLICIT 4 int)",
    "insertText": "X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy, STACK_OF(X509) *certs, STACK_OF(ASN1_OBJECT) *policy_oids, unsigned int flags)"
  },
  {
    "label": "X509_policy_tree_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_policy_tree_free(X509_POLICY_TREE *tree)"
  },
  {
    "label": "X509_policy_tree_level_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_policy_tree_level_count(const X509_POLICY_TREE *tree)"
  },
  {
    "label": "X509_policy_tree_get0_level()",
    "kind": "Method",
    "detail": "Function (X509_POLICY_LEVEL*)",
    "insertText": "X509_policy_tree_get0_level(const X509_POLICY_TREE *tree, int i)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_policies(const X509_POLICY_TREE *tree)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_user_policies(const X509_POLICY_TREE *tree)"
  },
  {
    "label": "X509_policy_level_node_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_policy_level_node_count(X509_POLICY_LEVEL *level)"
  },
  {
    "label": "X509_policy_level_get0_node()",
    "kind": "Method",
    "detail": "Function (X509_POLICY_NODE*)",
    "insertText": "X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i)"
  },
  {
    "label": "X509_policy_node_get0_policy()",
    "kind": "Method",
    "detail": "Function (const ASN1_OBJECT*)",
    "insertText": "X509_policy_node_get0_policy(const X509_POLICY_NODE *node)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(POLICYQUALINFO) *X509_policy_node_get0_qualifiers(const X509_POLICY_NODE *node)"
  },
  {
    "label": "X509_policy_node_get0_parent()",
    "kind": "Method",
    "detail": "Function (const X509_POLICY_NODE*)",
    "insertText": "X509_policy_node_get0_parent(const X509_POLICY_NODE *node)"
  }
]