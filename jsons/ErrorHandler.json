[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Policy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Policy"
  },
  {
    "label": "UnknownExceptionFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UnknownExceptionFlag"
  },
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "ErrorHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_ErrorHandler_h # define Alembic_Abc_ErrorHandler_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ErrorHandler { public : enum Policy { kQuietNoopPolicy,kNoisyNoopPolicy,kThrowPolicy } ; enum UnknownExceptionFlag { kUnknownException } ;)",
    "insertText": "ErrorHandler() : m_policy( kThrowPolicy ) , m_errorLog( \"\")"
  },
  {
    "label": "ErrorHandler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ErrorHandler(Policy iPolicy ) : m_policy( iPolicy ) , m_errorLog( \"\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( std::exception &iExc, const std::string &iCtx = \"\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()( const std::string &iErrMsg, const std::string &iCtx = \"\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()( UnknownExceptionFlag iUef, const std::string &iCtx = \"\")"
  },
  {
    "label": "getPolicy()",
    "kind": "Method",
    "detail": "Function (Policy)",
    "insertText": "getPolicy()"
  },
  {
    "label": "getErrorLog()",
    "kind": "Method",
    "detail": "Function (m_policy = iPolicy ; } const std::string)",
    "insertText": "getErrorLog()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (m_errorLog = \" \" ; } class Context { public :)",
    "insertText": "Context(ErrorHandler &iEhnd, const char *iCtxMsg ) : m_handler( iEhnd ), m_message( iCtxMsg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( std::exception &iExc)"
  },
  {
    "label": "m_handler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_handler(iExc, m_message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( const std::string &iMsg)"
  },
  {
    "label": "m_handler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_handler(iMsg, m_message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( UnknownExceptionFlag iUef)"
  },
  {
    "label": "m_handler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_handler(iUef, m_message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : const Context&)",
    "insertText": "operator(const Context&)"
  },
  {
    "label": "handleIt()",
    "kind": "Method",
    "detail": "Function (ErrorHandler& m_handler ; const char* m_message ; } ; private : void)",
    "insertText": "handleIt(const std::string &iErr)"
  },
  {
    "label": "GetErrorHandlerPolicy()",
    "kind": "Method",
    "detail": "Function (Policy m_policy ; std::string m_errorLog ; } ; ErrorHandler::Policy)",
    "insertText": "GetErrorHandlerPolicy(AbcA::ArchiveWriterPtr)"
  },
  {
    "label": "__err()",
    "kind": "Method",
    "detail": "Function (\\::Alembic::Abc::ErrorHandler::Context \\)",
    "insertText": "__err(this->getErrorHandler(), ( CONTEXT ))"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (\\ try \\ { # define)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET() \\ } \\ catch ( std::exception &exc)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (\\ this ->)",
    "insertText": "reset()"
  },
  {
    "label": "__err()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__err(exc)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "catch(...)"
  },
  {
    "label": "__err()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__err(::Alembic::Abc:: \\ ErrorHandler::kUnknownException)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\)",
    "insertText": "while(0 ) #define ALEMBIC_ABC_SAFE_CALL_END() \\ } \\ catch ( std::exception &exc)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\)",
    "insertText": "while(0)"
  }
]