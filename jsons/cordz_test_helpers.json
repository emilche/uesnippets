[
  {
    "label": "CordzSamplingIntervalHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordzSamplingIntervalHelper"
  },
  {
    "label": "TestCordRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestCordRep"
  },
  {
    "label": "TestCordData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestCordData"
  },
  {
    "label": "GetCordzInfoForTesting()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_CORDZ_TEST_HELPERS_H_ # define ABSL_STRINGS_CORDZ_TEST_HELPERS_H_ # include<utility> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / base / config . h \" # include \" absl / base / macros . h \" # include \" absl / strings / cord . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cordz_info . h \" # include \" absl / strings / internal / cordz_sample_token . h \" # include \" absl / strings / internal / cordz_statistics . h \" # include \" absl / strings / internal / cordz_update_tracker . h \" # include \" absl / strings / str_cat . h \" namespace absl { ABSL_NAMESPACE_BEGIN const cord_internal::CordzInfo*)",
    "insertText": "GetCordzInfoForTesting(const Cord& cord)"
  },
  {
    "label": "CordzInfoIsListed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CordzInfoIsListed(const cord_internal::CordzInfo* cordz_info, cord_internal::CordzSampleToken token = {})"
  },
  {
    "label": "MATCHER_P()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "MATCHER_P(HasValidCordzInfoOf, method, \"CordzInfo matches cord\")"
  },
  {
    "label": "GetCordzInfoForTesting()",
    "kind": "Method",
    "detail": "Function (const cord_internal::CordzInfo* cord_info =)",
    "insertText": "GetCordzInfoForTesting(arg)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* result_listener<<\" cord is not sampled \" ; return false ; })",
    "insertText": "if(!CordzInfoIsListed(cord_info))"
  },
  {
    "label": "GetCordzStatistics()",
    "kind": "Method",
    "detail": "Function (* result_listener<<\" cord is sampled,but not listed \" ; return false ; } cord_internal::CordzStatistics stat = cord_info ->)",
    "insertText": "GetCordzStatistics()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (* result_listener<<\" cordz size \"<<stat . size<<\" does not match cord size \"<<arg .)",
    "insertText": "size()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (* result_listener<<\" Expected method count 1 for \"<<method<<\",found \"<<stat . update_tracker .)",
    "insertText": "Value(method)"
  },
  {
    "label": "set_cordz_mean_interval()",
    "kind": "Method",
    "detail": "Function (absl::)",
    "insertText": "set_cordz_mean_interval(interval)"
  },
  {
    "label": "cordz_set_next_sample_for_testing()",
    "kind": "Method",
    "detail": "Function (absl::)",
    "insertText": "cordz_set_next_sample_for_testing(interval)"
  },
  {
    "label": "CordzSamplingIntervalHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CordzSamplingIntervalHelper()"
  },
  {
    "label": "set_cordz_mean_interval()",
    "kind": "Method",
    "detail": "Function (absl::)",
    "insertText": "set_cordz_mean_interval(orig_mean_interval_)"
  },
  {
    "label": "cordz_set_next_sample_for_testing()",
    "kind": "Method",
    "detail": "Function (absl::)",
    "insertText": "cordz_set_next_sample_for_testing(orig_mean_interval_)"
  },
  {
    "label": "TestCordRep()",
    "kind": "Method",
    "detail": "Function (} private : int32_t orig_mean_interval_ ; } ; struct TestCordRep { cord_internal::CordRepFlat* rep ;)",
    "insertText": "TestCordRep()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (rep = cord_internal::)",
    "insertText": "New(100)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (rep -> length = 1 0 0 ;)",
    "insertText": "memset(rep->Data(), 1, 100)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (cord_internal::)",
    "insertText": "Unref(rep)"
  },
  {
    "label": "UnsampledCord()",
    "kind": "Method",
    "detail": "Function (} } ; struct TestCordData { TestCordRep rep ; cord_internal::InlineData data { rep . rep } ; } ; template<. . . Args> Cord)",
    "insertText": "UnsampledCord(Args... args)"
  },
  {
    "label": "never()",
    "kind": "Method",
    "detail": "Function (CordzSamplingIntervalHelper)",
    "insertText": "never(9999)"
  },
  {
    "label": "cord()",
    "kind": "Method",
    "detail": "Function (Cord)",
    "insertText": "cord(std::forward<Args>(args)...)"
  },
  {
    "label": "ABSL_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ASSERT(GetCordzInfoForTesting(cord) == nullptr)"
  }
]