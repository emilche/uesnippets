[
  {
    "label": "FMatrix3x4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMatrix3x4"
  },
  {
    "label": "TShaderParameterTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShaderParameterTypeInfo"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameterMacros . h \")",
    "insertText": "MS_ALIGN(16)"
  },
  {
    "label": "SetMatrix()",
    "kind": "Method",
    "detail": "Function (float M [ 3 ] [ 4 ] ; void)",
    "insertText": "SetMatrix(const FMatrix& Mat)"
  },
  {
    "label": "Src()",
    "kind": "Method",
    "detail": "Function (const FMatrix::FReal* RESTRICT)",
    "insertText": "Src(Mat.M[0][0])"
  },
  {
    "label": "Dest()",
    "kind": "Method",
    "detail": "Function (float* RESTRICT)",
    "insertText": "Dest(M[0][0])"
  },
  {
    "label": "Dest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dest(float)"
  },
  {
    "label": "SetMatrixTranspose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMatrixTranspose(const FMatrix& Mat)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (Dest [ 0 ] = 1 . 0 f ; Dest [ 1 ] = 0 . 0 f ; Dest [ 2 ] = 0 . 0 f ; Dest [ 3 ] = 0 . 0 f ; Dest [ 4 ] = 0 . 0 f ; Dest [ 5 ] = 1 . 0 f ; Dest [ 6 ] = 0 . 0 f ; Dest [ 7 ] = 0 . 0 f ; Dest [ 8 ] = 0 . 0 f ; Dest [ 9 ] = 0 . 0 f ; Dest [ 1 0 ] = 1 . 0 f ; Dest [ 1 1 ] = 0 . 0 f ; } })",
    "insertText": "GCC_ALIGN(16)"
  },
  {
    "label": "GetStructMetadata()",
    "kind": "Method",
    "detail": "Function (template<> struct TShaderParameterTypeInfo<FMatrix3x4> { EUniformBufferBaseType BaseType = UBMT_FLOAT32 ; int32 NumRows = 3 ; int32 NumColumns = 4 ; int32 NumElements = 0 ; int32 Alignment = 1 6 ; bool bIsStoredInConstantBuffer = true ; using TAlignedType = TAlignedTypedef<FMatrix3x4,Alignment>::Type ; const FShaderParametersMetadata*)",
    "insertText": "GetStructMetadata()"
  }
]