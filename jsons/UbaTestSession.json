[
  {
    "label": "ProcessHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaSessionServer . h \" # include \" UbaSessionClient . h \" # include \" UbaStorageServer . h \" # include \" UbaStorageClient . h \" namespace uba { using RunProcessFunction = Function<)",
    "insertText": "ProcessHandle(const ProcessStartInfo&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using TestSessionFunction = Function<)",
    "insertText": "bool(LoggerWithWriter& logger, SessionServer& session, const tchar* workingDir, const RunProcessFunction& runProcess)"
  },
  {
    "label": "RunLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunLocal(LoggerWithWriter& logger, const StringBufferBase& testRootDir, const TestSessionFunction& testFunc, bool enableDetour = true)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter = logger . m_writer ; StringBuffer<MaxPath> rootDir ; rootDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"Uba\"))"
  },
  {
    "label": "storageInfo()",
    "kind": "Method",
    "detail": "Function (StorageCreateInfo)",
    "insertText": "storageInfo(rootDir.data, logWriter)"
  },
  {
    "label": "storage()",
    "kind": "Method",
    "detail": "Function (storageInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; StorageImpl)",
    "insertText": "storage(storageInfo)"
  },
  {
    "label": "server()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "server(ctorSuccess, { logWriter })"
  },
  {
    "label": "sessionServerInfo()",
    "kind": "Method",
    "detail": "Function (SessionServerCreateInfo)",
    "insertText": "sessionServerInfo(storage, server, logWriter)"
  },
  {
    "label": "session()",
    "kind": "Method",
    "detail": "Function (sessionServerInfo . checkMemory = false ; sessionServerInfo . rootDir = rootDir . data ; SessionServer)",
    "insertText": "session(sessionServerInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> workingDir ; workingDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"WorkingDir\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (workingDir .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "RunRemote()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunRemote(LoggerWithWriter& logger, const StringBufferBase& testRootDir, const TestSessionFunction& testFunc)"
  },
  {
    "label": "tcpBackend()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "tcpBackend(logWriter)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (NetworkClient)",
    "insertText": "client(ctorSuccess, { logWriter })"
  },
  {
    "label": "storageServerInfo()",
    "kind": "Method",
    "detail": "Function (StorageServerCreateInfo)",
    "insertText": "storageServerInfo(server, rootDir.data, logWriter)"
  },
  {
    "label": "StorageServer()",
    "kind": "Method",
    "detail": "Function (storageServerInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; auto& storageServer =* new)",
    "insertText": "StorageServer(storageServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto ssg =)",
    "insertText": "MakeGuard([&]() { delete &storageServer; })"
  },
  {
    "label": "sessionServerInfo()",
    "kind": "Method",
    "detail": "Function (SessionServerCreateInfo)",
    "insertText": "sessionServerInfo(storageServer, server, logWriter)"
  },
  {
    "label": "SessionServer()",
    "kind": "Method",
    "detail": "Function (sessionServerInfo . checkMemory = false ; sessionServerInfo . rootDir = rootDir . data ; auto& sessionServer =* new)",
    "insertText": "SessionServer(sessionServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto ssg2 =)",
    "insertText": "MakeGuard([&]() { delete &sessionServer; })"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto sg =)",
    "insertText": "MakeGuard([&]() { server.DisconnectClients(); })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (rootDir .)",
    "insertText": "Append(TC(\"Client\"))"
  },
  {
    "label": "storageClientInfo()",
    "kind": "Method",
    "detail": "Function (StorageClientCreateInfo)",
    "insertText": "storageClientInfo(client, rootDir.data)"
  },
  {
    "label": "StorageClient()",
    "kind": "Method",
    "detail": "Function (auto& storageClient =* new)",
    "insertText": "StorageClient(storageClientInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto scg =)",
    "insertText": "MakeGuard([&]() { delete &storageClient; })"
  },
  {
    "label": "sessionClientInfo()",
    "kind": "Method",
    "detail": "Function (SessionClientCreateInfo)",
    "insertText": "sessionClientInfo(storageClient, client, logWriter)"
  },
  {
    "label": "SessionClient()",
    "kind": "Method",
    "detail": "Function (sessionClientInfo . rootDir = rootDir . data ; auto& sessionClient =* new)",
    "insertText": "SessionClient(sessionClientInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto scg2 =)",
    "insertText": "MakeGuard([&]() { delete &sessionClient; })"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto cg =)",
    "insertText": "MakeGuard([&]() { sessionClient.Stop(); client.Disconnect(); })"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (storageClient .)",
    "insertText": "Start()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u16 port = 1 3 5 6 ;)",
    "insertText": "if(!server.StartListen(tcpBackend, port)) return logger.Error(TC(\"Failed to listen\"))"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTestAppPath(LoggerWithWriter& logger, StringBufferBase& out)"
  },
  {
    "label": "GetDirectoryOfCurrentModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirectoryOfCurrentModule(logger, out)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "Append(IsWindows ? TC(\"UbaTestApp.exe\") : TC(\"UbaTestApp\"))"
  },
  {
    "label": "CreateTextFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateTextFile(StringBufferBase& outPath, LoggerWithWriter& logger, const tchar* workingDir, const tchar* fileName, const char* text)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (outPath .)",
    "insertText": "Clear().Append(workingDir).EnsureEndsWithSlash().Append(fileName)"
  },
  {
    "label": "fr()",
    "kind": "Method",
    "detail": "Function (FileAccessor)",
    "insertText": "fr(logger, outPath.data)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (fr .)",
    "insertText": "Write(text, strlen(text) + 1)"
  },
  {
    "label": "RunTestApp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunTestApp(LoggerWithWriter& logger, SessionServer& session, const tchar* workingDir, const RunProcessFunction& runProcess)"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> testApp ;)",
    "insertText": "GetTestAppPath(logger, testApp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> fileR ;)",
    "insertText": "if(!CreateTextFile(fileR, logger, workingDir, TC(\"FileR.h\"), \"Foo\"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function ({ StringBuffer<MaxPath> dir ; dir .)",
    "insertText": "Append(workingDir).Append(TC(\"Dir1\"))"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (dir .)",
    "insertText": "Clear().Append(workingDir).Append(TC(\"Dir2\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (dir .)",
    "insertText": "EnsureEndsWithSlash().Append(TC(\"Dir3\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (dir .)",
    "insertText": "EnsureEndsWithSlash().Append(TC(\"Dir4\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (dir .)",
    "insertText": "EnsureEndsWithSlash().Append(TC(\"Dir5\"))"
  },
  {
    "label": "logLineFunc()",
    "kind": "Method",
    "detail": "Function (} ProcessStartInfo processInfo ; processInfo . application = testApp . data ; processInfo . workingDir = workingDir ; processInfo .)",
    "insertText": "logLineFunc(void* userData, const tchar* line, u32 length, LogEntryType type)"
  },
  {
    "label": "LoggerWithWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggerWithWriter(g_consoleLogWriter, TC(\"\")).Info(line)"
  },
  {
    "label": "runProcess()",
    "kind": "Method",
    "detail": "Function (} ; ProcessHandle process =)",
    "insertText": "runProcess(processInfo)"
  },
  {
    "label": "GetExitCode()",
    "kind": "Method",
    "detail": "Function (u32 exitCode = process .)",
    "insertText": "GetExitCode()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} { StringBuffer<MaxPath> fileW2 ; fileW2 .)",
    "insertText": "Append(workingDir).Append(TC(\"FileW2\"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} { StringBuffer<MaxPath> fileWF ; fileWF .)",
    "insertText": "Append(workingDir).Append(TC(\"FileWF\"))"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (} return true ; } # if PLATFORM_MAC bool)",
    "insertText": "ExecuteCommand(LoggerWithWriter& logger, const tchar* command, StringBufferBase& commandOutput)"
  },
  {
    "label": "popen()",
    "kind": "Method",
    "detail": "Function (FILE* fpCommand =)",
    "insertText": "popen(command, \"r\")"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Error(\"Failed to get an Xcode from xcode-select\")"
  },
  {
    "label": "RunClang()",
    "kind": "Method",
    "detail": "Function (commandOutput . data [ commandOutput . count - 1 ] = 0 ; commandOutput . count - - ; } return true ; } # endif bool)",
    "insertText": "RunClang(LoggerWithWriter& logger, SessionServer& session, const tchar* workingDir, const RunProcessFunction& runProcess)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> sourceFile ; sourceFile .)",
    "insertText": "Append(workingDir).Append(TC(\"Code.cpp\"))"
  },
  {
    "label": "codeFile()",
    "kind": "Method",
    "detail": "Function (FileAccessor)",
    "insertText": "codeFile(logger, sourceFile.data)"
  },
  {
    "label": "main()",
    "kind": "Method",
    "detail": "Function (char code [ ] = \" # include<stdio . h> \\ n int)",
    "insertText": "main()"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\\\"Hello world\\\\n\\\")"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC StringBuffer<MaxPath> xcodePath ;)",
    "insertText": "ExecuteCommand(logger, \"/usr/bin/xcrun -f clang++\", xcodePath)"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (const tchar* clangPath = xcodePath . data ; # else const tchar* clangPath =)",
    "insertText": "TC(\"/usr/bin/clang++\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(!FileExists(logger, clangPath))"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (ProcessStartInfo processInfo ; processInfo . application = clangPath ; # if PLATFORM_MAC StringBuffer<MaxPath> xcodeSDKPath ; StringBuffer<MaxPath> args ;)",
    "insertText": "ExecuteCommand(logger, \"xcrun --show-sdk-path\", xcodeSDKPath)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (args .)",
    "insertText": "Append(\"-isysroot \")"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (args .)",
    "insertText": "Append(xcodeSDKPath.data)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (args .)",
    "insertText": "Append(\" -o code Code.cpp\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (processInfo . arguments = args . data ; # else processInfo . arguments =)",
    "insertText": "TC(\"-o code Code.cpp\")"
  },
  {
    "label": "RegisterCustomService()",
    "kind": "Method",
    "detail": "Function (bool gotMessage = false ; session .)",
    "insertText": "RegisterCustomService([&](uba::Process& process, const void* recv, u32 recvSize, void* send, u32 sendCapacity) { gotMessage = true; const wchar_t* hello = L\"Hello response from server\"; u64 helloBytes = wcslen(hello) * 2; memcpy(send, hello, helloBytes); return u32(helloBytes); })"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (ProcessStartInfo processInfo ; processInfo . application = testApp . data ; processInfo . workingDir = workingDir ; processInfo . arguments =)",
    "insertText": "TC(\"Whatever\")"
  },
  {
    "label": "TestRemoteDetouredTestApp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestRemoteDetouredTestApp(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "TestCustomService()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestCustomService(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "TestDetouredClang()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestDetouredClang(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "TestRemoteDetouredClang()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestRemoteDetouredClang(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "TestDetouredTouch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestDetouredTouch(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "GetSystemApplication()",
    "kind": "Method",
    "detail": "Function (} const tchar*)",
    "insertText": "GetSystemApplication()"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS return)",
    "insertText": "TC(\"c:\\\\windows\\\\system32\\\\ping.exe\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_LINUX return)",
    "insertText": "TC(\"/usr/bin/zip\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TC(\"/sbin/zip\")"
  },
  {
    "label": "GetSystemArguments()",
    "kind": "Method",
    "detail": "Function (# endif } const tchar*)",
    "insertText": "GetSystemArguments()"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS return)",
    "insertText": "TC(\"-n 1 localhost\")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TC(\"-help\")"
  },
  {
    "label": "GetSystemExpectedLogLine()",
    "kind": "Method",
    "detail": "Function (# endif } const tchar*)",
    "insertText": "GetSystemExpectedLogLine()"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS return)",
    "insertText": "TC(\"Pinging \")"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TC(\"zip [-options]\")"
  },
  {
    "label": "TestMultipleDetouredProcesses()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "TestMultipleDetouredProcesses(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "RunSystemApplicationAndLookForLog()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunSystemApplicationAndLookForLog(LoggerWithWriter& logger, SessionServer& session, const tchar* workingDir, const RunProcessFunction& runProcess)"
  },
  {
    "label": "TestLogLinesNoDetour()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestLogLinesNoDetour(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  }
]