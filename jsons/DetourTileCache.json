[
  {
    "label": "dtTileCacheAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheAlloc"
  },
  {
    "label": "dtTileCacheCompressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheCompressor"
  },
  {
    "label": "dtCompressedTileFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtCompressedTileFlags"
  },
  {
    "label": "dtCompressedTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCompressedTile"
  },
  {
    "label": "dtTileCacheLayerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheLayerHeader"
  },
  {
    "label": "ObstacleState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObstacleState"
  },
  {
    "label": "dtTileCacheObstacle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheObstacle"
  },
  {
    "label": "dtTileCacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheParams"
  },
  {
    "label": "dtTileCacheMeshProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheMeshProcess"
  },
  {
    "label": "dtTileCacheLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheLayer"
  },
  {
    "label": "dtNavMeshCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtNavMeshCreateParams"
  },
  {
    "label": "dtTileCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtTileCache"
  },
  {
    "label": "dtNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMesh"
  },
  {
    "label": "ObstacleRequestAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObstacleRequestAction"
  },
  {
    "label": "ObstacleRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObstacleRequest"
  },
  {
    "label": "markAreas()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURTILECACHE_H # define DETOURTILECACHE_H # include \" CoreMinimal . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourStatus . h \" struct dtTileCacheAlloc ; struct dtTileCacheCompressor ; typedef unsigned int dtObstacleRef ; typedef unsigned int dtCompressedTileRef ; enum dtCompressedTileFlags { DT_COMPRESSEDTILE_FREE_DATA = 0 x01,} ; struct dtCompressedTile { unsigned int salt ; struct dtTileCacheLayerHeader* header ; unsigned char* compressed ; int compressedSize ; unsigned char* data ; int dataSize ; unsigned int flags ; dtCompressedTile* next ; } ; enum ObstacleState { DT_OBSTACLE_EMPTY,DT_OBSTACLE_PROCESSING,DT_OBSTACLE_PROCESSED,DT_OBSTACLE_REMOVING,} ; const int DT_MAX_TOUCHED_TILES = 8 ; struct dtTileCacheObstacle { dtReal pos [ 3 ] ; dtReal radius,height ; dtCompressedTileRef touched [ DT_MAX_TOUCHED_TILES ] ; dtCompressedTileRef pending [ DT_MAX_TOUCHED_TILES ] ; unsigned short salt ; unsigned char state ; unsigned char ntouched ; unsigned char npending ; dtTileCacheObstacle* next ; } ; struct dtTileCacheParams { dtReal orig [ 3 ] ; dtReal cs,ch ; int width,height ; dtReal walkableHeight ; dtReal walkableRadius ; dtReal walkableClimb ; dtReal maxSimplificationError ; dtReal simplificationElevationRatio ; int maxTiles ; int maxObstacles ; dtReal detailSampleDist ; dtReal detailSampleMaxError ; int minRegionArea ; int mergeRegionArea ; int regionChunkSize ; int regionPartitioning ; } ; struct dtTileCacheMeshProcess { void)",
    "insertText": "markAreas(struct dtTileCacheLayer* layer, const dtReal* orig, const dtReal cs, const dtReal ch)"
  },
  {
    "label": "markAreas()",
    "kind": "Method",
    "detail": "Function (# if ! DT_LARGE_WORLD_COORDINATES_DISABLED void)",
    "insertText": "markAreas(struct dtTileCacheLayer* layer, const float* orig, const float cs, const float ch)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (} ; # endif void)",
    "insertText": "process(struct dtNavMeshCreateParams* params, unsigned char* polyAreas, unsigned short* polyFlags)"
  },
  {
    "label": "dtTileCache()",
    "kind": "Method",
    "detail": "Function (} ; class dtTileCache { public :)",
    "insertText": "dtTileCache()"
  },
  {
    "label": "getAlloc()",
    "kind": "Method",
    "detail": "Function (struct dtTileCacheAlloc*)",
    "insertText": "getAlloc()"
  },
  {
    "label": "getObstacleRef()",
    "kind": "Method",
    "detail": "Function (dtObstacleRef)",
    "insertText": "getObstacleRef(const dtTileCacheObstacle* obmin)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "init(const dtTileCacheParams* params, struct dtTileCacheAlloc* talloc, struct dtTileCacheCompressor* tcomp, struct dtTileCacheMeshProcess* tmproc)"
  },
  {
    "label": "getTilesAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getTilesAt(const int tx, const int ty, dtCompressedTileRef* tiles, const int maxTiles)"
  },
  {
    "label": "getTileAt()",
    "kind": "Method",
    "detail": "Function (dtCompressedTile*)",
    "insertText": "getTileAt(const int tx, const int ty, const int tlayer)"
  },
  {
    "label": "getTileRef()",
    "kind": "Method",
    "detail": "Function (dtCompressedTileRef)",
    "insertText": "getTileRef(const dtCompressedTile* tile)"
  },
  {
    "label": "getTileByRef()",
    "kind": "Method",
    "detail": "Function (const dtCompressedTile*)",
    "insertText": "getTileByRef(dtCompressedTileRef ref)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "addTile(unsigned char* data, const int dataSize, unsigned char flags, dtCompressedTileRef* result)"
  },
  {
    "label": "removeTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "removeTile(dtCompressedTileRef ref, unsigned char** data, int* dataSize)"
  },
  {
    "label": "addObstacle()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "addObstacle(const dtReal* pos, const dtReal radius, const dtReal height, dtObstacleRef* result)"
  },
  {
    "label": "removeObstacle()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "removeObstacle(const dtObstacleRef ref)"
  },
  {
    "label": "queryTiles()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "queryTiles(const dtReal* bmin, const dtReal* bmax, dtCompressedTileRef* results, int* resultCount, const int maxResults)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "update(const dtReal , class dtNavMesh* navmesh)"
  },
  {
    "label": "buildNavMeshTilesAt()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "buildNavMeshTilesAt(const int tx, const int ty, class dtNavMesh* navmesh)"
  },
  {
    "label": "buildNavMeshTile()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "buildNavMeshTile(const dtCompressedTileRef ref, class dtNavMesh* navmesh)"
  },
  {
    "label": "calcTightTileBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calcTightTileBounds(const struct dtTileCacheLayerHeader* header, dtReal* bmin, dtReal* bmax)"
  },
  {
    "label": "getObstacleBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getObstacleBounds(const struct dtTileCacheObstacle* ob, dtReal* bmin, dtReal* bmax)"
  },
  {
    "label": "encodeTileId()",
    "kind": "Method",
    "detail": "Function (dtCompressedTileRef)",
    "insertText": "encodeTileId(unsigned int salt, unsigned int it)"
  },
  {
    "label": "decodeTileIdSalt()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodeTileIdSalt(dtCompressedTileRef ref)"
  },
  {
    "label": "saltMask()",
    "kind": "Method",
    "detail": "Function (const dtCompressedTileRef)",
    "insertText": "saltMask((dtCompressedTileRef)1<<m_saltBits)"
  },
  {
    "label": "decodeTileIdTile()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodeTileIdTile(dtCompressedTileRef ref)"
  },
  {
    "label": "tileMask()",
    "kind": "Method",
    "detail": "Function (const dtCompressedTileRef)",
    "insertText": "tileMask((dtCompressedTileRef)1<<m_tileBits)"
  },
  {
    "label": "encodeObstacleId()",
    "kind": "Method",
    "detail": "Function (} dtObstacleRef)",
    "insertText": "encodeObstacleId(unsigned int salt, unsigned int it)"
  },
  {
    "label": "decodeObstacleIdSalt()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodeObstacleIdSalt(dtObstacleRef ref)"
  },
  {
    "label": "saltMask()",
    "kind": "Method",
    "detail": "Function (const dtObstacleRef)",
    "insertText": "saltMask((dtObstacleRef)1<<16)"
  },
  {
    "label": "decodeObstacleIdObstacle()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "decodeObstacleIdObstacle(dtObstacleRef ref)"
  },
  {
    "label": "tileMask()",
    "kind": "Method",
    "detail": "Function (const dtObstacleRef)",
    "insertText": "tileMask((dtObstacleRef)1<<16)"
  },
  {
    "label": "dtAllocTileCache()",
    "kind": "Method",
    "detail": "Function (} private : enum ObstacleRequestAction { REQUEST_ADD,REQUEST_REMOVE,} ; struct ObstacleRequest { int action ; dtObstacleRef ref ; } ; int m_tileLutSize ; int m_tileLutMask ; dtCompressedTile** m_posLookup ; dtCompressedTile* m_nextFreeTile ; dtCompressedTile* m_tiles ; unsigned int m_saltBits ; unsigned int m_tileBits ; dtTileCacheParams m_params ; dtTileCacheAlloc* m_talloc ; dtTileCacheCompressor* m_tcomp ; dtTileCacheMeshProcess* m_tmproc ; dtTileCacheObstacle* m_obstacles ; dtTileCacheObstacle* m_nextFreeObstacle ; const int MAX_REQUESTS = 6 4 ; ObstacleRequest m_reqs [ MAX_REQUESTS ] ; int m_nreqs ; const int MAX_UPDATE = 6 4 ; dtCompressedTileRef m_update [ MAX_UPDATE ] ; int m_nupdate ; } ; dtTileCache*)",
    "insertText": "dtAllocTileCache()"
  },
  {
    "label": "dtFreeTileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCache(dtTileCache* tc)"
  }
]