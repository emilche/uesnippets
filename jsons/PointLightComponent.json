[
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "UPointLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPointLightComponent"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Components / LocalLightComponent . h \" # include \" PointLightComponent . generated . h \" class FLightSceneProxy ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=(Lights,Common), hidecategories=(Object, LightShafts), editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=Light, AdvancedDisplay)"
  },
  {
    "label": "ComputeLightBrightness()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "ComputeLightBrightness()"
  },
  {
    "label": "SetLightBrightness()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetLightBrightness(float InBrightness)"
  },
  {
    "label": "GetLightType()",
    "kind": "Method",
    "detail": "Function (# endif ELightComponentType)",
    "insertText": "GetLightType()"
  },
  {
    "label": "GetUniformPenumbraSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUniformPenumbraSize()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FLightSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  }
]