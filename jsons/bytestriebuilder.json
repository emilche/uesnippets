[
  {
    "label": "BytesTrieElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BytesTrieElement"
  },
  {
    "label": "CharString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharString"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "BTLinearMatchNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BTLinearMatchNode"
  },
  {
    "label": "BytesTrieBuilder()",
    "kind": "Method",
    "detail": "Function (# ifndef __BYTESTRIEBUILDER_H__ # define __BYTESTRIEBUILDER_H__ # include \" unicode / utypes . h \" # include \" unicode / bytestrie . h \" # include \" unicode / stringpiece . h \" # include \" unicode / stringtriebuilder . h \" U_NAMESPACE_BEGIN class BytesTrieElement ; class CharString ; class BytesTrieBuilder : public StringTrieBuilder { public :)",
    "insertText": "BytesTrieBuilder(UErrorCode &errorCode)"
  },
  {
    "label": "BytesTrieBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BytesTrieBuilder()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (BytesTrieBuilder&)",
    "insertText": "add(StringPiece s, int32_t value, UErrorCode &errorCode)"
  },
  {
    "label": "build()",
    "kind": "Method",
    "detail": "Function (BytesTrie*)",
    "insertText": "build(UStringTrieBuildOption buildOption, UErrorCode &errorCode)"
  },
  {
    "label": "buildStringPiece()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "buildStringPiece(UStringTrieBuildOption buildOption, UErrorCode &errorCode)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (BytesTrieBuilder&)",
    "insertText": "clear()"
  },
  {
    "label": "BytesTrieBuilder()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "BytesTrieBuilder(const BytesTrieBuilder &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BytesTrieBuilder&)",
    "insertText": "operator(const BytesTrieBuilder &other)"
  },
  {
    "label": "buildBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildBytes(UStringTrieBuildOption buildOption, UErrorCode &errorCode)"
  },
  {
    "label": "getElementStringLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getElementStringLength(int32_t i)"
  },
  {
    "label": "getElementUnit()",
    "kind": "Method",
    "detail": "Function (char16_t)",
    "insertText": "getElementUnit(int32_t i, int32_t byteIndex)"
  },
  {
    "label": "getElementValue()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getElementValue(int32_t i)"
  },
  {
    "label": "getLimitOfLinearMatch()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getLimitOfLinearMatch(int32_t first, int32_t last, int32_t byteIndex)"
  },
  {
    "label": "countElementUnits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countElementUnits(int32_t start, int32_t limit, int32_t byteIndex)"
  },
  {
    "label": "skipElementsBySomeUnits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipElementsBySomeUnits(int32_t i, int32_t byteIndex, int32_t count)"
  },
  {
    "label": "indexOfElementWithNextUnit()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOfElementWithNextUnit(int32_t i, int32_t byteIndex, char16_t byte)"
  },
  {
    "label": "matchNodesCanHaveValues()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "matchNodesCanHaveValues()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Node &other)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(StringTrieBuilder &builder)"
  },
  {
    "label": "createLinearMatchNode()",
    "kind": "Method",
    "detail": "Function (private : const char* s ; } ; Node*)",
    "insertText": "createLinearMatchNode(int32_t i, int32_t byteIndex, int32_t length, Node *nextNode)"
  },
  {
    "label": "ensureCapacity()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "ensureCapacity(int32_t length)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "write(int32_t byte)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "write(const char *b, int32_t length)"
  },
  {
    "label": "writeElementUnits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "writeElementUnits(int32_t i, int32_t byteIndex, int32_t length)"
  },
  {
    "label": "writeValueAndFinal()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "writeValueAndFinal(int32_t i, UBool isFinal)"
  },
  {
    "label": "writeValueAndType()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "writeValueAndType(UBool hasValue, int32_t value, int32_t node)"
  },
  {
    "label": "writeDeltaTo()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "writeDeltaTo(int32_t jumpTarget)"
  }
]