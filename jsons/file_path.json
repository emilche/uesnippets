[
  {
    "label": "SafeBaseName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafeBaseName"
  },
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_PATH_H_ # define BASE_FILES_FILE_PATH_H_ # include<cstddef> # include<iosfwd> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / trace_event / base_tracing_forward . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #define FILE_PATH_USES_DRIVE_LETTERS #define FILE_PATH_USES_WIN_SEPARATORS #endif #if BUILDFLAG(IS_WIN) #define PRFilePath \"ls\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #define PRFilePath \"s\" #endif #if BUILDFLAG(IS_WIN) #define FILE_PATH_LITERAL_INTERNAL(x) L##x #define FILE_PATH_LITERAL(x) FILE_PATH_LITERAL_INTERNAL(x) #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #define FILE_PATH_LITERAL(x)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class SafeBaseName ; class Pickle ; class PickleIterator ; class BASE_EXPORT FilePath { public : # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif typedef StringType::value_type CharType ; typedef BasicStringPiece<CharType> StringPieceType ; CharType kSeparators [ ] = # if)",
    "insertText": "defined(FILE_PATH_USES_WIN_SEPARATORS) FILE_PATH_LITERAL(\"\\\\/\")"
  },
  {
    "label": "FILE_PATH_LITERAL()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "FILE_PATH_LITERAL(\"/\")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (# endif size_t kSeparatorsLength =)",
    "insertText": "size(kSeparators)"
  },
  {
    "label": "FILE_PATH_LITERAL()",
    "kind": "Method",
    "detail": "Function (CharType kCurrentDirectory [ ] =)",
    "insertText": "FILE_PATH_LITERAL(\".\")"
  },
  {
    "label": "FILE_PATH_LITERAL()",
    "kind": "Method",
    "detail": "Function (CharType kParentDirectory [ ] =)",
    "insertText": "FILE_PATH_LITERAL(\"..\")"
  },
  {
    "label": "FILE_PATH_LITERAL()",
    "kind": "Method",
    "detail": "Function (CharType kExtensionSeparator =)",
    "insertText": "FILE_PATH_LITERAL('.')"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePath()"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePath(const FilePath& that)"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePath(StringPieceType path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilePath&)",
    "insertText": "operator(const FilePath& that)"
  },
  {
    "label": "FilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePath(FilePath&& that)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilePath&)",
    "insertText": "operator(FilePath&& that)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "IsSeparator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSeparator(CharType character)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (std::vector<FilePath::StringType>)",
    "insertText": "GetComponents()"
  },
  {
    "label": "IsParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParent(const FilePath& child)"
  },
  {
    "label": "AppendRelativePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendRelativePath(const FilePath& child, FilePath* path)"
  },
  {
    "label": "DirName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "DirName()"
  },
  {
    "label": "BaseName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "BaseName()"
  },
  {
    "label": "Extension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] StringType)",
    "insertText": "Extension()"
  },
  {
    "label": "FinalExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] StringType)",
    "insertText": "FinalExtension()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "RemoveExtension()"
  },
  {
    "label": "RemoveFinalExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "RemoveFinalExtension()"
  },
  {
    "label": "InsertBeforeExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "InsertBeforeExtension(StringPieceType suffix)"
  },
  {
    "label": "InsertBeforeExtensionASCII()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "InsertBeforeExtensionASCII(StringPiece suffix)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "AddExtension(StringPieceType extension)"
  },
  {
    "label": "AddExtensionASCII()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "AddExtensionASCII(StringPiece extension)"
  },
  {
    "label": "ReplaceExtension()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "ReplaceExtension(StringPieceType extension)"
  },
  {
    "label": "MatchesExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesExtension(StringPieceType extension)"
  },
  {
    "label": "MatchesFinalExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesFinalExtension(StringPieceType extension)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "Append(StringPieceType component)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "Append(const FilePath& component)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "Append(const SafeBaseName& component)"
  },
  {
    "label": "AppendASCII()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "AppendASCII(StringPiece component)"
  },
  {
    "label": "IsAbsolute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAbsolute()"
  },
  {
    "label": "IsNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetwork()"
  },
  {
    "label": "EndsWithSeparator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "EndsWithSeparator()"
  },
  {
    "label": "AsEndingWithSeparator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "AsEndingWithSeparator()"
  },
  {
    "label": "StripTrailingSeparators()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "StripTrailingSeparators()"
  },
  {
    "label": "ReferencesParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReferencesParent()"
  },
  {
    "label": "LossyDisplayName()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "LossyDisplayName()"
  },
  {
    "label": "MaybeAsASCII()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "MaybeAsASCII()"
  },
  {
    "label": "AsUTF8Unsafe()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AsUTF8Unsafe()"
  },
  {
    "label": "AsUTF16Unsafe()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "AsUTF16Unsafe()"
  },
  {
    "label": "FromASCII()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "FromASCII(StringPiece ascii)"
  },
  {
    "label": "FromUTF8Unsafe()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "FromUTF8Unsafe(StringPiece utf8)"
  },
  {
    "label": "FromUTF16Unsafe()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "FromUTF16Unsafe(StringPiece16 utf16)"
  },
  {
    "label": "WriteToPickle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToPickle(Pickle* pickle)"
  },
  {
    "label": "ReadFromPickle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromPickle(PickleIterator* iter)"
  },
  {
    "label": "NormalizePathSeparators()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "NormalizePathSeparators()"
  },
  {
    "label": "NormalizePathSeparatorsTo()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FilePath)",
    "insertText": "NormalizePathSeparatorsTo(CharType separator)"
  },
  {
    "label": "CompareIgnoreCase()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareIgnoreCase(StringPieceType string1, StringPieceType string2)"
  },
  {
    "label": "CompareEqualIgnoreCase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareEqualIgnoreCase(StringPieceType string1, StringPieceType string2)"
  },
  {
    "label": "CompareLessIgnoreCase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareLessIgnoreCase(StringPieceType string1, StringPieceType string2)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIntoTrace(perfetto::TracedValue context)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) static StringType GetHFSDecomposedForm(StringPieceType string)"
  },
  {
    "label": "HFSFastUnicodeCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HFSFastUnicodeCompare(StringPieceType string1, StringPieceType string2)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) bool IsContentUri()"
  },
  {
    "label": "StripTrailingSeparatorsInternal()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "StripTrailingSeparatorsInternal()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringType path_ ; } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& out, const FilePath& file_path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} namespace std { template<> struct hash<base::FilePath> { typedef base::FilePath argument_type ; typedef std::size_t result_type ; result_type)",
    "insertText": "operator()(argument_type const& f)"
  }
]