[
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCObjectStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCObjectStreamer"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "SourceMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceMgr"
  },
  {
    "label": "SMLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMLoc"
  },
  {
    "label": "MCDwarfFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCDwarfFile"
  },
  {
    "label": "MCDwarfLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfLoc"
  },
  {
    "label": "MCLineEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLineEntry"
  },
  {
    "label": "MCLineSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLineSection"
  },
  {
    "label": "MCDwarfLineTableHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCDwarfLineTableHeader"
  },
  {
    "label": "MCDwarfDwoLineTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfDwoLineTable"
  },
  {
    "label": "MCDwarfLineTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfLineTable"
  },
  {
    "label": "MCDwarfLineAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfLineAddr"
  },
  {
    "label": "MCGenDwarfInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCGenDwarfInfo"
  },
  {
    "label": "MCGenDwarfLabelEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCGenDwarfLabelEntry"
  },
  {
    "label": "MCCFIInstruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCFIInstruction"
  },
  {
    "label": "OpType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OpType"
  },
  {
    "label": "MCDwarfFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCDwarfFrameInfo"
  },
  {
    "label": "MCDwarfFrameEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfFrameEmitter"
  },
  {
    "label": "DWARF2_FLAG_IS_STMT()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCDWARF_H # define LLVM_MC_MCDWARF_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / Dwarf . h \" # include \" llvm / Support / raw_ostream . h \" # include<map> # include<string> # include<utility> # include<vector> namespace llvm { class MCAsmBackend ; class MCContext ; class MCObjectStreamer ; class MCSection ; class MCStreamer ; class MCSymbol ; class SourceMgr ; class SMLoc ; struct MCDwarfFile { std::string Name ; unsigned DirIndex ; } ; class MCDwarfLoc { uint32_t FileNum ; uint32_t Line ; uint16_t Column ; uint8_t Flags ; uint8_t Isa ; uint32_t Discriminator ; # define DWARF2_LINE_DEFAULT_IS_STMT 1 # define)",
    "insertText": "DWARF2_FLAG_IS_STMT(1 << 0) #define DWARF2_FLAG_BASIC_BLOCK (1 << 1) #define DWARF2_FLAG_PROLOGUE_END (1 << 2) #define DWARF2_FLAG_EPILOGUE_BEGIN (1 << 3)"
  },
  {
    "label": "MCDwarfLoc()",
    "kind": "Method",
    "detail": "Function (class MCLineEntry ;)",
    "insertText": "MCDwarfLoc(unsigned fileNum, unsigned line, unsigned column, unsigned flags, unsigned isa, unsigned discriminator) : FileNum(fileNum), Line(line), Column(column), Flags(flags), Isa(isa), Discriminator(discriminator)"
  },
  {
    "label": "getFileNum()",
    "kind": "Method",
    "detail": "Function (} public : unsigned)",
    "insertText": "getFileNum()"
  },
  {
    "label": "setLine()",
    "kind": "Method",
    "detail": "Function (FileNum = fileNum ; } void)",
    "insertText": "setLine(unsigned line)"
  },
  {
    "label": "setColumn()",
    "kind": "Method",
    "detail": "Function (Line = line ; } void)",
    "insertText": "setColumn(unsigned column)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(column <= UINT16_MAX)"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (Column = column ; } void)",
    "insertText": "setFlags(unsigned flags)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(flags <= UINT8_MAX)"
  },
  {
    "label": "setIsa()",
    "kind": "Method",
    "detail": "Function (Flags = flags ; } void)",
    "insertText": "setIsa(unsigned isa)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa <= UINT8_MAX)"
  },
  {
    "label": "setDiscriminator()",
    "kind": "Method",
    "detail": "Function (Isa = isa ; } void)",
    "insertText": "setDiscriminator(unsigned discriminator)"
  },
  {
    "label": "MCLineEntry()",
    "kind": "Method",
    "detail": "Function (Discriminator = discriminator ; } } ; class MCLineEntry : public MCDwarfLoc { MCSymbol* Label ; private : public :)",
    "insertText": "MCLineEntry(MCSymbol *label, const MCDwarfLoc loc) : MCDwarfLoc(loc), Label(label)"
  },
  {
    "label": "getLabel()",
    "kind": "Method",
    "detail": "Function (} MCSymbol*)",
    "insertText": "getLabel()"
  },
  {
    "label": "addLineEntry()",
    "kind": "Method",
    "detail": "Function (} ; class MCLineSection { public : void)",
    "insertText": "addLineEntry(const MCLineEntry &LineEntry, MCSection *Sec)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (MCLineDivisions [ Sec ] .)",
    "insertText": "push_back(LineEntry)"
  },
  {
    "label": "getMCLineEntries()",
    "kind": "Method",
    "detail": "Function (} typedef std::vector<MCLineEntry> MCLineEntryCollection ; typedef MCLineEntryCollection::iterator iterator ; typedef MCLineEntryCollection::const_iterator const_iterator ; typedef MapVector<MCSection*,MCLineEntryCollection> MCLineDivisionMap ; private : MCLineDivisionMap MCLineDivisions ; public : const MCLineDivisionMap&)",
    "insertText": "getMCLineEntries()"
  },
  {
    "label": "getFile()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getFile(StringRef &Directory, StringRef &FileName, unsigned FileNumber = 0)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (std::pair<MCSymbol*,MCSymbol*>)",
    "insertText": "Emit(MCStreamer *MCOS)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (std::pair<MCSymbol*,MCSymbol*>)",
    "insertText": "Emit(MCStreamer *MCOS, ArrayRef<char> SpecialOpcodeLengths)"
  },
  {
    "label": "setCompilationDir()",
    "kind": "Method",
    "detail": "Function (} ; class MCDwarfDwoLineTable { MCDwarfLineTableHeader Header ; public : void)",
    "insertText": "setCompilationDir(StringRef CompilationDir)"
  },
  {
    "label": "getFile()",
    "kind": "Method",
    "detail": "Function (Header . CompilationDir = CompilationDir ; } unsigned)",
    "insertText": "getFile(StringRef Directory, StringRef FileName)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Emit(MCStreamer &MCOS)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} ; class MCDwarfLineTable { MCDwarfLineTableHeader Header ; MCLineSection MCLineSections ; public : void)",
    "insertText": "Emit(MCObjectStreamer *MCOS)"
  },
  {
    "label": "EmitCU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCU(MCObjectStreamer *MCOS)"
  },
  {
    "label": "getMCDwarfDirs()",
    "kind": "Method",
    "detail": "Function (Header . CompilationDir = CompilationDir ; } const SmallVectorImpl<std::string>&)",
    "insertText": "getMCDwarfDirs()"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit(MCStreamer *MCOS, int64_t LineDelta, uint64_t AddrDelta)"
  },
  {
    "label": "MCGenDwarfLabelEntry()",
    "kind": "Method",
    "detail": "Function (} ; class MCGenDwarfLabelEntry { private : StringRef Name ; unsigned FileNumber ; unsigned LineNumber ; MCSymbol* Label ; public :)",
    "insertText": "MCGenDwarfLabelEntry(StringRef name, unsigned fileNumber, unsigned lineNumber, MCSymbol *label) : Name(name), FileNumber(fileNumber), LineNumber(lineNumber), Label(label)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "MCCFIInstruction()",
    "kind": "Method",
    "detail": "Function (} ; class MCCFIInstruction { public : enum OpType { OpSameValue,OpRememberState,OpRestoreState,OpOffset,OpDefCfaRegister,OpDefCfaOffset,OpDefCfa,OpRelOffset,OpAdjustCfaOffset,OpEscape,OpRestore,OpUndefined,OpRegister,OpWindowSave } ; private : OpType Operation ; MCSymbol* Label ; unsigned Register ; union { int Offset ; unsigned Register2 ; } ; std::vector<char> Values ;)",
    "insertText": "MCCFIInstruction(OpType Op, MCSymbol *L, unsigned R, int O, StringRef V) : Operation(Op), Label(L), Register(R), Offset(O), Values(V.begin(), V.end())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Op != OpRegister)"
  },
  {
    "label": "MCCFIInstruction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCCFIInstruction(OpType Op, MCSymbol *L, unsigned R1, unsigned R2) : Operation(Op), Label(L), Register(R1), Register2(R2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Op == OpRegister)"
  },
  {
    "label": "createDefCfa()",
    "kind": "Method",
    "detail": "Function (} public : MCCFIInstruction)",
    "insertText": "createDefCfa(MCSymbol *L, unsigned Register, int Offset)"
  },
  {
    "label": "createDefCfaRegister()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createDefCfaRegister(MCSymbol *L, unsigned Register)"
  },
  {
    "label": "createDefCfaOffset()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createDefCfaOffset(MCSymbol *L, int Offset)"
  },
  {
    "label": "createAdjustCfaOffset()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createAdjustCfaOffset(MCSymbol *L, int Adjustment)"
  },
  {
    "label": "createOffset()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createOffset(MCSymbol *L, unsigned Register, int Offset)"
  },
  {
    "label": "createRelOffset()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createRelOffset(MCSymbol *L, unsigned Register, int Offset)"
  },
  {
    "label": "createRegister()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createRegister(MCSymbol *L, unsigned Register1, unsigned Register2)"
  },
  {
    "label": "createWindowSave()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createWindowSave(MCSymbol *L)"
  },
  {
    "label": "createRestore()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createRestore(MCSymbol *L, unsigned Register)"
  },
  {
    "label": "createUndefined()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createUndefined(MCSymbol *L, unsigned Register)"
  },
  {
    "label": "createSameValue()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createSameValue(MCSymbol *L, unsigned Register)"
  },
  {
    "label": "createRememberState()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createRememberState(MCSymbol *L)"
  },
  {
    "label": "createRestoreState()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createRestoreState(MCSymbol *L)"
  },
  {
    "label": "createEscape()",
    "kind": "Method",
    "detail": "Function (} MCCFIInstruction)",
    "insertText": "createEscape(MCSymbol *L, StringRef Vals)"
  },
  {
    "label": "getOperation()",
    "kind": "Method",
    "detail": "Function (} OpType)",
    "insertText": "getOperation()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Operation == OpDefCfa || Operation == OpOffset || Operation == OpRestore || Operation == OpUndefined || Operation == OpSameValue || Operation == OpDefCfaRegister || Operation == OpRelOffset || Operation == OpRegister)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Operation == OpRegister)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Operation == OpDefCfa || Operation == OpOffset || Operation == OpRelOffset || Operation == OpDefCfaOffset || Operation == OpAdjustCfaOffset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Operation == OpEscape)"
  },
  {
    "label": "MCDwarfFrameInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct MCDwarfFrameInfo {)",
    "insertText": "MCDwarfFrameInfo() : Begin(nullptr), End(nullptr), Personality(nullptr), Lsda(nullptr), Instructions(), CurrentCfaRegister(0), PersonalityEncoding(), LsdaEncoding(0), CompactUnwindEncoding(0), IsSignalFrame(false), IsSimple(false)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} MCSymbol* Begin ; MCSymbol* End ; const MCSymbol* Personality ; const MCSymbol* Lsda ; std::vector<MCCFIInstruction> Instructions ; unsigned CurrentCfaRegister ; unsigned PersonalityEncoding ; unsigned LsdaEncoding ; uint32_t CompactUnwindEncoding ; bool IsSignalFrame ; bool IsSimple ; } ; class MCDwarfFrameEmitter { public : void)",
    "insertText": "Emit(MCObjectStreamer &streamer, MCAsmBackend *MAB, bool isEH)"
  },
  {
    "label": "EmitAdvanceLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAdvanceLoc(MCObjectStreamer &Streamer, uint64_t AddrDelta)"
  },
  {
    "label": "EncodeAdvanceLoc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeAdvanceLoc(MCContext &Context, uint64_t AddrDelta, raw_ostream &OS)"
  }
]