[
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FRHIBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBlendState"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHIDepthStencilState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDepthStencilState"
  },
  {
    "label": "FRHIRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRasterizerState"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FShaderPipelineCacheArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheArchive"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FShaderPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCache"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "FShaderPipelineCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELibraryState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELibraryState"
  },
  {
    "label": "FShaderCachePrecompileContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCachePrecompileContext"
  },
  {
    "label": "FPipelineCachePSOContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineCachePSOContext"
  },
  {
    "label": "FShaderPipelineCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheTask"
  },
  {
    "label": "FShaderPipelineCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheTask"
  },
  {
    "label": "FShaderPipelineCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheTask"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(EShaderPlatform Platform)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PauseBatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseBatching()"
  },
  {
    "label": "SetBatchMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBatchMode(BatchMode Mode)"
  },
  {
    "label": "ResumeBatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeBatching()"
  },
  {
    "label": "IsPrecompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecompiling()"
  },
  {
    "label": "NumPrecompilesRemaining()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPrecompilesRemaining()"
  },
  {
    "label": "OpenPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPipelineFileCache(EShaderPlatform Platform)"
  },
  {
    "label": "OpenUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenUserPipelineFileCache(EShaderPlatform Platform)"
  },
  {
    "label": "SavePipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePipelineFileCache(FPipelineFileCacheManager::SaveMode Mode)"
  },
  {
    "label": "CloseUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseUserPipelineFileCache()"
  },
  {
    "label": "GetGameVersionForPSOFileCache()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGameVersionForPSOFileCache()"
  },
  {
    "label": "SetGameUsageMaskWithComparison()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGameUsageMaskWithComparison(uint64 Mask, FPSOMaskComparisonFn InComparisonFnPtr)"
  },
  {
    "label": "IsBatchingPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBatchingPaused()"
  },
  {
    "label": "FShaderPipelineCache()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "FShaderPipelineCache(EShaderPlatform Platform)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( float DeltaTime )"
  },
  {
    "label": "ShaderLibraryStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShaderLibraryStateChanged(ELibraryState State, EShaderPlatform Platform, FString const& Name, int32 ComponentID)"
  },
  {
    "label": "OpenPipelineFileCacheInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPipelineFileCacheInternal(bool bUserCache, const FString& PSOCacheKey, const FString& CacheName, EShaderPlatform Platform)"
  },
  {
    "label": "BeginNextPrecompileCacheTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNextPrecompileCacheTask()"
  },
  {
    "label": "BeginNextPrecompileCacheTaskInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNextPrecompileCacheTaskInternal()"
  },
  {
    "label": "ClearPendingPrecompileTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingPrecompileTaskQueue()"
  },
  {
    "label": "EnqueuePendingPrecompileTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueuePendingPrecompileTask(const FString& PSOCacheKey)"
  },
  {
    "label": "ApplyNewUsageMaskToAllTasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ApplyNewUsageMaskToAllTasks(uint64 Mask)"
  }
]