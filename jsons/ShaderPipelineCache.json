[
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FRHIBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBlendState"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHIDepthStencilState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDepthStencilState"
  },
  {
    "label": "FRHIRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRasterizerState"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FShaderPipelineCacheArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheArchive"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FShaderPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCache"
  },
  {
    "label": "FShaderPipelineCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCacheTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELibraryState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELibraryState"
  },
  {
    "label": "FShaderCachePrecompileContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCachePrecompileContext"
  },
  {
    "label": "FPipelineCachePSOContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineCachePSOContext"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / List . h \" # include \" Stats / Stats . h \" # include \" RHI . h \" # include \" TickableObjectRenderThread . h \" # include \" PipelineFileCache . h \" # include \" Delegates / DelegateCombinations . h \" # include \" ShaderStableKeyDebugInfoReader . h \" class FBlendStateInitializerRHI ; class FRHIBlendState ; class FRHICommandListImmediate ; class FRHIDepthStencilState ; class FRHIRasterizerState ; class FSHAHash ; class FShaderPipelineCacheArchive ; struct FDepthStencilStateInitializerRHI ; struct FRasterizerStateInitializerRHI ; class FShaderPipelineCache : public FTickableObjectRenderThread { class FShaderPipelineCacheTask ; public : void)",
    "insertText": "Initialize(EShaderPlatform Platform)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PauseBatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseBatching()"
  },
  {
    "label": "SetBatchMode()",
    "kind": "Method",
    "detail": "Function (enum class BatchMode { Background,Fast,Precompile } ; void)",
    "insertText": "SetBatchMode(BatchMode Mode)"
  },
  {
    "label": "ResumeBatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeBatching()"
  },
  {
    "label": "IsPrecompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecompiling()"
  },
  {
    "label": "NumPrecompilesRemaining()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPrecompilesRemaining()"
  },
  {
    "label": "OpenPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPipelineFileCache(EShaderPlatform Platform)"
  },
  {
    "label": "OpenUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenUserPipelineFileCache(EShaderPlatform Platform)"
  },
  {
    "label": "SavePipelineFileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePipelineFileCache(FPipelineFileCacheManager::SaveMode Mode)"
  },
  {
    "label": "CloseUserPipelineFileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseUserPipelineFileCache()"
  },
  {
    "label": "GetGameVersionForPSOFileCache()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGameVersionForPSOFileCache()"
  },
  {
    "label": "SetGameUsageMaskWithComparison()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGameUsageMaskWithComparison(uint64 Mask, FPSOMaskComparisonFn InComparisonFnPtr)"
  },
  {
    "label": "IsBatchingPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBatchingPaused()"
  },
  {
    "label": "FShaderPipelineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderPipelineCache(EShaderPlatform Platform)"
  },
  {
    "label": "FShaderPipelineCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderPipelineCache()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "NeedsRenderingResumedForRenderingThreadTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsRenderingResumedForRenderingThreadTick()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "ShaderLibraryStateChanged()",
    "kind": "Method",
    "detail": "Function (enum ELibraryState { Opened,OpenedComponent,Closed } ; void)",
    "insertText": "ShaderLibraryStateChanged(ELibraryState State, EShaderPlatform Platform, FString const& Name, int32 ComponentID)"
  },
  {
    "label": "FShaderCachePrecompileContext()",
    "kind": "Method",
    "detail": "Function (class FShaderCachePrecompileContext { bool bSlowPrecompileTask = false ; FString CacheName ; public :)",
    "insertText": "FShaderCachePrecompileContext()"
  },
  {
    "label": "FShaderCachePrecompileContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCachePrecompileContext(const FString& CacheNameIn) : CacheName(CacheNameIn)"
  },
  {
    "label": "GetCacheName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetCacheName()"
  },
  {
    "label": "IsPrecompilationSlowTask()",
    "kind": "Method",
    "detail": "Function (bSlowPrecompileTask = true ; } bool)",
    "insertText": "IsPrecompilationSlowTask()"
  },
  {
    "label": "GetCachePreOpenDelegate()",
    "kind": "Method",
    "detail": "Function (FShaderCachePreOpenDelegate&)",
    "insertText": "GetCachePreOpenDelegate()"
  },
  {
    "label": "GetCacheOpenedDelegate()",
    "kind": "Method",
    "detail": "Function (FShaderCacheOpenedDelegate&)",
    "insertText": "GetCacheOpenedDelegate()"
  },
  {
    "label": "GetCacheClosedDelegate()",
    "kind": "Method",
    "detail": "Function (FShaderCacheClosedDelegate&)",
    "insertText": "GetCacheClosedDelegate()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FShaderPrecompilationCompleteDelegate, uint32 , double , const FShaderCachePrecompileContext&)"
  },
  {
    "label": "GetPrecompilationBeginDelegate()",
    "kind": "Method",
    "detail": "Function (FShaderPrecompilationBeginDelegate&)",
    "insertText": "GetPrecompilationBeginDelegate()"
  },
  {
    "label": "BeginNextPrecompileCacheTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNextPrecompileCacheTask()"
  },
  {
    "label": "BeginNextPrecompileCacheTaskInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginNextPrecompileCacheTaskInternal()"
  },
  {
    "label": "ReadyForAutoSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyForAutoSave()"
  },
  {
    "label": "ClearPendingPrecompileTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingPrecompileTaskQueue()"
  },
  {
    "label": "EnqueuePendingPrecompileTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueuePendingPrecompileTask(const FString& PSOCacheKey)"
  },
  {
    "label": "ApplyNewUsageMaskToAllTasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ApplyNewUsageMaskToAllTasks(uint64 Mask)"
  },
  {
    "label": "GetOrCreateBlendState()",
    "kind": "Method",
    "detail": "Function (FRHIBlendState*)",
    "insertText": "GetOrCreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "GetOrCreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRHIRasterizerState*)",
    "insertText": "GetOrCreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "GetOrCreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FRHIDepthStencilState*)",
    "insertText": "GetOrCreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "GetTask()",
    "kind": "Method",
    "detail": "Function (private : FShaderPipelineCache* ShaderPipelineCache ; uint32 BatchSize ; float BatchTime ; bool bPaused ; int32 PausedCount ; double LastAutoSaveTime = 0 . 0 ; double LastAutoSaveTimeLogBoundPSO = 0 . 0 ; int32 LastAutoSaveNum = 0 ; TSet<uint32> CompiledHashes ; UE::ShaderUtils::FShaderStableKeyDebugInfoReader ShaderHashToStableKey ; FString UserCacheTaskKey ; struct FPipelineCachePSOContext { FString FileName ; EShaderPlatform CurrentPlatform ; FShaderCachePrecompileContext PrecompileContext ; } ; TMap<FString,TUniquePtr<class FShaderPipelineCacheTask>> ShaderCacheTasks ; class FShaderPipelineCacheTask*)",
    "insertText": "GetTask(const FString& Name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<class FShaderPipelineCacheTask>* CacheTask =)",
    "insertText": "Get()->ShaderCacheTasks.Find(Name)"
  }
]