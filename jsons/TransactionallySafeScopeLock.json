[
  {
    "label": "FTransactionallySafeScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionallySafeScopeLock"
  },
  {
    "label": "FTransactionallySafeScopeLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TransactionallySafeCriticalSection . h \" struct FTransactionallySafeScopeLock final { UE_NODISCARD_CTOR)",
    "insertText": "FTransactionallySafeScopeLock(FTransactionallySafeCriticalSection* InSynchObject) : SynchObject(InSynchObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (SynchObject ->)",
    "insertText": "Lock()"
  },
  {
    "label": "FTransactionallySafeScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTransactionallySafeScopeLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "FTransactionallySafeScopeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransactionallySafeScopeLock(const FTransactionallySafeScopeLock&)"
  }
]