[
  {
    "label": "FMockChunkStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockChunkStore"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Data / ChunkData . h \" # include \" Installer / ChunkStore . h \" # include \" Common / StatsCollector . h \" # include \" Tests / TestHelpers . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockChunkStore : public IChunkStore { public : typedef TTuple<double,FGuid> FPut ; typedef TTuple<double,IChunkDataAccess*,FGuid> FGet ; typedef TTuple<double,FGuid> FRemove ; typedef TTuple<double,int32> FGetSize ; public : void)",
    "insertText": "Put(const FGuid& DataId, TUniquePtr<IChunkDataAccess> ChunkData)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxPut .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), DataId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} IChunkDataAccess*)",
    "insertText": "Get(const FGuid& DataId)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxGet .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), nullptr, DataId)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSize()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxGetSize .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), INDEX_NONE)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockChunkStore::SetLostChunkCallback\")"
  }
]