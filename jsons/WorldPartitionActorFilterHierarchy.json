[
  {
    "label": "FWorldPartitionActorFilterMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorFilterMode"
  },
  {
    "label": "FWorldPartitionActorFilterHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorFilterHierarchy"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISceneOutlinerHierarchy . h \" class FWorldPartitionActorFilterMode ; class FWorldPartitionActorFilterHierarchy : public ISceneOutlinerHierarchy { public : TUniquePtr<FWorldPartitionActorFilterHierarchy>)",
    "insertText": "Create(FWorldPartitionActorFilterMode* Mode)"
  },
  {
    "label": "FWorldPartitionActorFilterHierarchy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWorldPartitionActorFilterHierarchy()"
  },
  {
    "label": "CreateItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateItems(TArray<FSceneOutlinerTreeItemPtr>& OutItems)"
  },
  {
    "label": "CreateChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateChildren(const FSceneOutlinerTreeItemPtr& Item, TArray<FSceneOutlinerTreeItemPtr>& OutItems)"
  },
  {
    "label": "FindOrCreateParentItem()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemPtr)",
    "insertText": "FindOrCreateParentItem(const ISceneOutlinerTreeItem& Item, const TMap<FSceneOutlinerTreeItemID, FSceneOutlinerTreeItemPtr>& Items, bool bCreate = false)"
  },
  {
    "label": "CreateChildren()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateChildren(const FSceneOutlinerTreeItemPtr& Item, TArray<FSceneOutlinerTreeItemPtr>& OutItems, bool bRecursive)"
  },
  {
    "label": "FWorldPartitionActorFilterHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionActorFilterHierarchy(FWorldPartitionActorFilterMode* Mode)"
  }
]