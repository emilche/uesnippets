[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "OSubDSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OSubDSchema"
  },
  {
    "label": "OFaceSetSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OFaceSetSchema"
  },
  {
    "label": "ABC_GEOM_SUBD_NULL_INT_VALUE()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OSubD_h # define Alembic_AbcGeom_OSubD_h # include<map> # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / OGeomBase . h> # include<Alembic / AbcGeom / OFaceSet . h> # include<Alembic / AbcGeom / OGeomParam . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { const int32_t)",
    "insertText": "ABC_GEOM_SUBD_NULL_INT_VALUE(-1073741824)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (class ALEMBIC_EXPORT OSubDSchema : public OGeomBaseSchema<SubDSchemaInfo> { public : class Sample { public :)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::P3fArraySample &iPositions, const Abc::Int32ArraySample &iFaceIndices, const Abc::Int32ArraySample &iFaceCounts, const Abc::Int32ArraySample &iCreaseIndices = Abc::Int32ArraySample(), const Abc::Int32ArraySample &iCreaseLengths = Abc::Int32ArraySample(), const Abc::FloatArraySample &iCreaseSharpnesses = Abc::FloatArraySample(), const Abc::Int32ArraySample &iCornerIndices = Abc::Int32ArraySample(), const Abc::FloatArraySample &iCornerSharpnesses = Abc::FloatArraySample(), const Abc::Int32ArraySample &iHoles = Abc::Int32ArraySample() ) : m_positions( iPositions ) , m_faceIndices( iFaceIndices ) , m_faceCounts( iFaceCounts ) , m_faceVaryingInterpolateBoundary( ABC_GEOM_SUBD_NULL_INT_VALUE ) , m_faceVaryingPropagateCorners( ABC_GEOM_SUBD_NULL_INT_VALUE ) , m_interpolateBoundary( ABC_GEOM_SUBD_NULL_INT_VALUE ) , m_creaseIndices ( iCreaseIndices ) , m_creaseLengths ( iCreaseLengths ) , m_creaseSharpnesses ( iCreaseSharpnesses ) , m_cornerIndices ( iCornerIndices ) , m_cornerSharpnesses ( iCornerSharpnesses ) , m_holes ( iHoles ) , m_subdScheme ( \"catmull-clark\")"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (} const Abc::P3fArraySample&)",
    "insertText": "getPositions()"
  },
  {
    "label": "getFaceIndices()",
    "kind": "Method",
    "detail": "Function (m_positions = iSmp ; } const Abc::Int32ArraySample&)",
    "insertText": "getFaceIndices()"
  },
  {
    "label": "getFaceCounts()",
    "kind": "Method",
    "detail": "Function (m_faceIndices = iSmp ; } const Abc::Int32ArraySample&)",
    "insertText": "getFaceCounts()"
  },
  {
    "label": "getFaceVaryingInterpolateBoundary()",
    "kind": "Method",
    "detail": "Function (m_faceCounts = iCnt ; } int32_t)",
    "insertText": "getFaceVaryingInterpolateBoundary()"
  },
  {
    "label": "getFaceVaryingPropagateCorners()",
    "kind": "Method",
    "detail": "Function (m_faceVaryingInterpolateBoundary = i ; } int32_t)",
    "insertText": "getFaceVaryingPropagateCorners()"
  },
  {
    "label": "getInterpolateBoundary()",
    "kind": "Method",
    "detail": "Function (m_faceVaryingPropagateCorners = i ; } int32_t)",
    "insertText": "getInterpolateBoundary()"
  },
  {
    "label": "getCreaseIndices()",
    "kind": "Method",
    "detail": "Function (m_interpolateBoundary = i ; } const Abc::Int32ArraySample&)",
    "insertText": "getCreaseIndices()"
  },
  {
    "label": "getCreaseLengths()",
    "kind": "Method",
    "detail": "Function (m_creaseIndices = iCreaseIndices ; } const Abc::Int32ArraySample&)",
    "insertText": "getCreaseLengths()"
  },
  {
    "label": "getCreaseSharpnesses()",
    "kind": "Method",
    "detail": "Function (m_creaseLengths = iCreaseLengths ; } const Abc::FloatArraySample&)",
    "insertText": "getCreaseSharpnesses()"
  },
  {
    "label": "setCreases()",
    "kind": "Method",
    "detail": "Function (m_creaseSharpnesses = iCreaseSharpnesses ; } void)",
    "insertText": "setCreases(const Abc::Int32ArraySample &iCreaseIndices, const Abc::Int32ArraySample &iCreaseLengths)"
  },
  {
    "label": "setCreases()",
    "kind": "Method",
    "detail": "Function (m_creaseIndices = iCreaseIndices ; m_creaseLengths = iCreaseLengths ; } void)",
    "insertText": "setCreases(const Abc::Int32ArraySample &iCreaseIndices, const Abc::Int32ArraySample &iCreaseLengths, const Abc::FloatArraySample &iCreaseSharpnesses)"
  },
  {
    "label": "getCornerIndices()",
    "kind": "Method",
    "detail": "Function (m_creaseIndices = iCreaseIndices ; m_creaseLengths = iCreaseLengths ; m_creaseSharpnesses = iCreaseSharpnesses ; } const Abc::Int32ArraySample&)",
    "insertText": "getCornerIndices()"
  },
  {
    "label": "getCornerSharpnesses()",
    "kind": "Method",
    "detail": "Function (m_cornerIndices = iCornerIndices ; } const Abc::FloatArraySample&)",
    "insertText": "getCornerSharpnesses()"
  },
  {
    "label": "setCorners()",
    "kind": "Method",
    "detail": "Function (m_cornerSharpnesses = iCornerSharpnesses ; } void)",
    "insertText": "setCorners(const Abc::Int32ArraySample &iCornerIndices, const Abc::FloatArraySample &iCornerSharpnesses)"
  },
  {
    "label": "getHoles()",
    "kind": "Method",
    "detail": "Function (m_cornerIndices = iCornerIndices ; m_cornerSharpnesses = iCornerSharpnesses ; } const Abc::Int32ArraySample&)",
    "insertText": "getHoles()"
  },
  {
    "label": "getSubdivisionScheme()",
    "kind": "Method",
    "detail": "Function (m_holes = iHoles ; } std::string)",
    "insertText": "getSubdivisionScheme()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (m_subdScheme = iScheme ; } const Abc::Box3d&)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "getVelocities()",
    "kind": "Method",
    "detail": "Function (m_selfBounds = iBnds ; } const Abc::V3fArraySample&)",
    "insertText": "getVelocities()"
  },
  {
    "label": "getUVs()",
    "kind": "Method",
    "detail": "Function (m_velocities = iVelocities ; } const OV2fGeomParam::Sample&)",
    "insertText": "getUVs()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "isPartialSample()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPartialSample()"
  },
  {
    "label": "OSubDSchema()",
    "kind": "Method",
    "detail": "Function (m_selectiveExport = false ; m_numSamples = 0 ; m_timeSamplingIndex = 0 ; })",
    "insertText": "OSubDSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OSubDSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OSubDSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} } size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_faceSets .)",
    "insertText": "clear()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "createFaceSet()",
    "kind": "Method",
    "detail": "Function (} OFaceSet&)",
    "insertText": "createFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "getFaceSetNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFaceSetNames(std::vector <std::string> & oFaceSetNames)"
  },
  {
    "label": "getFaceSet()",
    "kind": "Method",
    "detail": "Function (OFaceSet)",
    "insertText": "getFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "hasFaceSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "setUVSourceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUVSourceName(const std::string & iName)"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(OSubDSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init(uint32_t iTsIdx, bool isSparse)"
  },
  {
    "label": "selectiveSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "selectiveSet(const Sample &iSamp)"
  },
  {
    "label": "initCreases()",
    "kind": "Method",
    "detail": "Function (Abc::OP3fArrayProperty m_positionsProperty ; Abc::OInt32ArrayProperty m_faceIndicesProperty ; Abc::OInt32ArrayProperty m_faceCountsProperty ; Abc::OInt32Property m_faceVaryingInterpolateBoundaryProperty ; Abc::OInt32Property m_faceVaryingPropagateCornersProperty ; Abc::OInt32Property m_interpolateBoundaryProperty ; Abc::OInt32ArrayProperty m_creaseIndicesProperty ; Abc::OInt32ArrayProperty m_creaseLengthsProperty ; Abc::OFloatArrayProperty m_creaseSharpnessesProperty ; Abc::OInt32ArrayProperty m_cornerIndicesProperty ; Abc::OFloatArrayProperty m_cornerSharpnessesProperty ; Abc::OInt32ArrayProperty m_holesProperty ; Abc::OStringProperty m_subdSchemeProperty ; Abc::OV3fArrayProperty m_velocitiesProperty ; OV2fGeomParam m_uvsParam ; std::string m_uvSourceName ; private : void)",
    "insertText": "initCreases(uint32_t iNumSamples)"
  },
  {
    "label": "initCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initCorners(uint32_t iNumSamples)"
  },
  {
    "label": "initHoles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initHoles(uint32_t iNumSamples)"
  },
  {
    "label": "createSubDSchemeProperty()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,OFaceSet> m_faceSets ; bool m_selectiveExport ; size_t m_numSamples ; uint32_t m_timeSamplingIndex ; void)",
    "insertText": "createSubDSchemeProperty()"
  },
  {
    "label": "createFaceVaryingInterpolateBoundaryProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createFaceVaryingInterpolateBoundaryProperty()"
  },
  {
    "label": "createFaceVaryingPropagateCornersProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createFaceVaryingPropagateCornersProperty()"
  },
  {
    "label": "createInterpolateBoundaryProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createInterpolateBoundaryProperty()"
  },
  {
    "label": "createVelocitiesProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVelocitiesProperty()"
  },
  {
    "label": "createUVsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createUVsProperty(const Sample &iSamp)"
  },
  {
    "label": "createPositionsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createPositionsProperty()"
  }
]