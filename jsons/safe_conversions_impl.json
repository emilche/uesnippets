[
  {
    "label": "DstSign",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DstSign"
  },
  {
    "label": "SrcSign",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SrcSign"
  },
  {
    "label": "DstRange",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DstRange"
  },
  {
    "label": "StaticRangeCheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StaticRangeCheck"
  },
  {
    "label": "RangeCheckResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RangeCheckResult"
  },
  {
    "label": "RangeCheckImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeCheckImpl"
  },
  {
    "label": "max_exponent()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_SAFE_CONVERSIONS_IMPL_H_ # define RTC_BASE_NUMERICS_SAFE_CONVERSIONS_IMPL_H_ # include<limits> namespace rtc { namespace internal { enum DstSign { DST_UNSIGNED,DST_SIGNED } ; enum SrcSign { SRC_UNSIGNED,SRC_SIGNED } ; enum DstRange { OVERLAPS_RANGE,CONTAINS_RANGE } ; template<Dst,Src,DstSign IsDstSigned = std::numeric_limits<Dst>::is_signed ? DST_SIGNED : DST_UNSIGNED,SrcSign IsSrcSigned = std::numeric_limits<Src>::is_signed ? SRC_SIGNED : SRC_UNSIGNED> struct StaticRangeCheck { } ; template<Dst,Src> struct StaticRangeCheck<Dst,Src,DST_SIGNED,SRC_SIGNED> { typedef std::numeric_limits<Dst> DstLimits ; typedef std::numeric_limits<Src> SrcLimits ; const size_t kDstMaxExponent = DstLimits::is_iec559 ?)",
    "insertText": "max_exponent(sizeof(Dst) * 8 - 1)"
  },
  {
    "label": "max_exponent()",
    "kind": "Method",
    "detail": "Function (const size_t kSrcMaxExponent = SrcLimits::is_iec559 ?)",
    "insertText": "max_exponent(sizeof(Src) * 8 - 1)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const DstRange value = kDstMaxExponent> = kSrcMaxExponent ? CONTAINS_RANGE : OVERLAPS_RANGE ; } ; template<Dst,Src> struct StaticRangeCheck<Dst,Src,DST_UNSIGNED,SRC_UNSIGNED> { const DstRange value =)",
    "insertText": "sizeof(Dst) >= sizeof(Src)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t kSrcMaxExponent =)",
    "insertText": "sizeof(Src)"
  },
  {
    "label": "BASE_NUMERIC_RANGE_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (const DstRange value = kDstMaxExponent> = kSrcMaxExponent ? CONTAINS_RANGE : OVERLAPS_RANGE ; } ; template<Dst,Src> struct StaticRangeCheck<Dst,Src,DST_UNSIGNED,SRC_SIGNED> { const DstRange value = OVERLAPS_RANGE ; } ; enum RangeCheckResult { TYPE_VALID = 0,TYPE_UNDERFLOW = 1,TYPE_OVERFLOW = 2,TYPE_INVALID = 3 } ; # define)",
    "insertText": "BASE_NUMERIC_RANGE_CHECK_RESULT(is_in_upper_bound, is_in_lower_bound) \\ RangeCheckResult(((is_in_upper_bound) ? 0 : TYPE_OVERFLOW) | \\ ((is_in_lower_bound) ? 0 : TYPE_UNDERFLOW))"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} ; template<Dst,Src,DstSign IsDstSigned,SrcSign IsSrcSigned> struct RangeCheckImpl<Dst,Src,IsDstSigned,IsSrcSigned,CONTAINS_RANGE> { RangeCheckResult)",
    "insertText": "Check(Src value)"
  },
  {
    "label": "BASE_NUMERIC_RANGE_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (typedef std::numeric_limits<Dst> DstLimits ; return DstLimits::is_iec559 ?)",
    "insertText": "BASE_NUMERIC_RANGE_CHECK_RESULT(value <= static_cast<Src>(DstLimits::max()), value >= static_cast<Src>(DstLimits::max() * -1)) : BASE_NUMERIC_RANGE_CHECK_RESULT( value <= static_cast<Src>(DstLimits::max()), value >= static_cast<Src>(DstLimits::min()))"
  },
  {
    "label": "BASE_NUMERIC_RANGE_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (typedef std::numeric_limits<Dst> DstLimits ; return)",
    "insertText": "BASE_NUMERIC_RANGE_CHECK_RESULT(value <= static_cast<Src>(DstLimits::max()), true)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef std::numeric_limits<Dst> DstLimits ; return)",
    "insertText": "sizeof(Dst) > sizeof(Src) ? TYPE_VALID : BASE_NUMERIC_RANGE_CHECK_RESULT( value <= static_cast<Src>(DstLimits::max()), true)"
  },
  {
    "label": "DstMaxExponent()",
    "kind": "Method",
    "detail": "Function (} } ; template<Dst,Src> struct RangeCheckImpl<Dst,Src,DST_UNSIGNED,SRC_SIGNED,OVERLAPS_RANGE> { typedef std::numeric_limits<Dst> DstLimits ; typedef std::numeric_limits<Src> SrcLimits ; size_t)",
    "insertText": "DstMaxExponent()"
  },
  {
    "label": "SrcMaxExponent()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "SrcMaxExponent()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} } ; template<Dst,Src> RangeCheckResult)",
    "insertText": "RangeCheck(Src value)"
  }
]