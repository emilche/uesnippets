[
  {
    "label": "FSlateD3DShaderParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3DShaderParameter"
  },
  {
    "label": "TSlateD3DTypedShaderParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateD3DTypedShaderParameter"
  },
  {
    "label": "FSlateShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderParameterMap"
  },
  {
    "label": "FSlateD3DShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateD3DShaderBindings"
  },
  {
    "label": "FSlateD3DVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3DVS"
  },
  {
    "label": "FSlateD3DPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3DPS"
  },
  {
    "label": "FSlateDefaultVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDefaultVS"
  },
  {
    "label": "FPerElementConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerElementConstants"
  },
  {
    "label": "FSlateDefaultPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDefaultPS"
  },
  {
    "label": "FPerFrameConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerFrameConstants"
  },
  {
    "label": "FSlateD3DShaderParameter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" StandaloneRendererPlatformHeaders . h \" # include \" SlateD3DConstantBuffer . h \" # include \" Rendering / RenderingCommon . h \" class FSlateD3DShaderParameter { public : ~)",
    "insertText": "FSlateD3DShaderParameter()"
  },
  {
    "label": "SetParameter()",
    "kind": "Method",
    "detail": "Function (} } ; template<ParamType> class TSlateD3DTypedShaderParameter : public FSlateD3DShaderParameter { public : void)",
    "insertText": "SetParameter(const TRefCountPtr<ParamType>& InParam)"
  },
  {
    "label": "GetParameter()",
    "kind": "Method",
    "detail": "Function (Param = InParam ; } const TRefCountPtr<ParamType>&)",
    "insertText": "GetParameter()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateShaderParameterMap> Instance ;)",
    "insertText": "if(!Instance.IsValid())"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (Instance =)",
    "insertText": "MakeShareable(new FSlateShaderParameterMap)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (} return* Instance ; } template<ParamType> TSlateD3DTypedShaderParameter<ParamType>&)",
    "insertText": "RegisterParameter(const FString& ParamName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FSlateD3DShaderParameter** Param = NameToParameterMap .)",
    "insertText": "Find(ParamName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TSlateD3DTypedShaderParameter<ParamType>* NewParam = new TSlateD3DTypedShaderParameter<ParamType> ; NameToParameterMap .)",
    "insertText": "Add(ParamName, NewParam)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} } FSlateD3DShaderParameter*)",
    "insertText": "Find(const FString& ParamName)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (delete It .)",
    "insertText": "Value()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} NameToParameterMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "FSlateShaderParameterMap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSlateShaderParameterMap()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FSlateD3DVS()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FString,FSlateD3DShaderParameter*> NameToParameterMap ; } ; struct FSlateD3DShaderBindings { TArray<TSlateD3DTypedShaderParameter<ID3D11ShaderResourceView>*> ResourceViews ; TArray<TSlateD3DTypedShaderParameter<ID3D11SamplerState>*> SamplerStates ; TArray<TSlateD3DTypedShaderParameter<ID3D11Buffer>*> ConstantBuffers ; } ; class FSlateD3DVS { public : ~)",
    "insertText": "FSlateD3DVS()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(const FString& Filename, const FString& EntryPoint, const FString& ShaderModel, D3D11_INPUT_ELEMENT_DESC* VertexLayout, uint32 VertexLayoutCount)"
  },
  {
    "label": "BindShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindShader()"
  },
  {
    "label": "BindParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindParameters()"
  },
  {
    "label": "UpdateParameters()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateParameters()"
  },
  {
    "label": "FSlateD3DPS()",
    "kind": "Method",
    "detail": "Function (} private : FSlateD3DShaderBindings ShaderBindings ; TRefCountPtr<ID3D11VertexShader> VertexShader ; TRefCountPtr<ID3D11InputLayout> InputLayout ; } ; class FSlateD3DPS { public : ~)",
    "insertText": "FSlateD3DPS()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(const FString& Filename, const FString& EntryPoint, const FString& ShaderModel)"
  },
  {
    "label": "FSlateDefaultVS()",
    "kind": "Method",
    "detail": "Function (} private : FSlateD3DShaderBindings ShaderBindings ; TRefCountPtr<ID3D11PixelShader> PixelShader ; } ; class FSlateDefaultVS : public FSlateD3DVS { public :)",
    "insertText": "FSlateDefaultVS()"
  },
  {
    "label": "SetViewProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewProjection(const FMatrix& ViewProjectionMatrix)"
  },
  {
    "label": "SetShaderParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParams(const FVector4& InShaderParams)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : struct FPerElementConstants { FMatrix44f ViewProjection ; FVector4f VertexShaderParams ; } ;)",
    "insertText": "static_assert(sizeof(FPerElementConstants) == sizeof(float) * 20, \"Size mismatch\")"
  },
  {
    "label": "FSlateDefaultPS()",
    "kind": "Method",
    "detail": "Function (FSlateD3DConstantBuffer<FPerElementConstants> ConstantBuffer ; TSlateD3DTypedShaderParameter<ID3D11Buffer>* Constants ; } ; class FSlateDefaultPS : public FSlateD3DPS { public :)",
    "insertText": "FSlateDefaultPS()"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTexture(const TRefCountPtr<ID3D11ShaderResourceView>& InTexture, TRefCountPtr<ID3D11SamplerState>& InSamplerState)"
  },
  {
    "label": "SetParameter()",
    "kind": "Method",
    "detail": "Function (Texture ->)",
    "insertText": "SetParameter(InTexture)"
  },
  {
    "label": "SetShaderType()",
    "kind": "Method",
    "detail": "Function (SamplerState = InSamplerState ; } void)",
    "insertText": "SetShaderType(uint32 InShaderType)"
  },
  {
    "label": "SetDrawEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawEffects(ESlateDrawEffect InDrawEffects)"
  },
  {
    "label": "SetShaderParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParams(const FShaderParams& InShaderParams)"
  },
  {
    "label": "SetGammaValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGammaValues(const FVector2f& InGammaValues)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "MS_ALIGN(16)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (FVector4f ShaderParams ; FVector4f ShaderParams2 ; uint32 ShaderType ; uint32 IgnoreTextureAlpha ; uint32 DisableEffect ; uint32 UNUSED [ 1 ] ; } ;)",
    "insertText": "static_assert(sizeof(FPerElementConstants) == sizeof(float) * 8 + sizeof(uint32) * 4, \"Size mismatch\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (FVector2f GammaValues ; } ;)",
    "insertText": "static_assert(sizeof(FVector2f) == sizeof(float) * 2, \"Size mismatch\")"
  }
]