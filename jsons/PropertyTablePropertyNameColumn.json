[
  {
    "label": "FPropertyTablePropertyNameColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTablePropertyNameColumn"
  },
  {
    "label": "IPropertyTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCell"
  },
  {
    "label": "IPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableRow"
  },
  {
    "label": "FPropertyPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPath"
  },
  {
    "label": "IPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTable"
  },
  {
    "label": "FCompareRowByColumnBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRowByColumnBase"
  },
  {
    "label": "FPropertyTablePropertyNameColumn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PropertyPath . h \" # include \" IPropertyTableColumn . h \" # include \" IPropertyTable . h \" # include \" IPropertyTableRow . h \" # include \" Presentation / PropertyTable / PropertyTableColumn . h \" # define LOCTEXT_NAMESPACE \" PropertyNameColumnHeader \" class FPropertyTablePropertyNameColumn : public TSharedFromThis<FPropertyTablePropertyNameColumn>,public IPropertyTableColumn { public :)",
    "insertText": "FPropertyTablePropertyNameColumn(const TSharedRef< IPropertyTable >& InTable)"
  },
  {
    "label": "FPropertyTablePropertyNameColumn()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPropertyTablePropertyNameColumn()"
  },
  {
    "label": "CanSelectCells()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectCells()"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDataSource>)",
    "insertText": "GetDataSource()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetId()"
  },
  {
    "label": "GetSizeMode()",
    "kind": "Method",
    "detail": "Function (} EPropertyTableColumnSizeMode::Type)",
    "insertText": "GetSizeMode()"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IPropertyTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Remove(Row)"
  },
  {
    "label": "SetFrozen()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFrozen(bool InIsFrozen)"
  },
  {
    "label": "SetHidden()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHidden(bool InIsHidden)"
  },
  {
    "label": "SetWidth()",
    "kind": "Method",
    "detail": "Function (bIsHidden = InIsHidden ; } void)",
    "insertText": "SetWidth(float InWidth)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Width = InWidth ; } void)",
    "insertText": "Sort(TArray< TSharedRef< class IPropertyTableRow > >& Rows, const EColumnSortMode::Type PrimarySortMode, const TSharedPtr<IPropertyTableColumn>& SecondarySortColumn, const EColumnSortMode::Type SecondarySortMode)"
  },
  {
    "label": "GetPropertySorter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<struct FCompareRowByColumnBase>)",
    "insertText": "GetPropertySorter(const FProperty* Property, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(FPropertyTableColumn, IPropertyTableColumn::FFrozenStateChanged, FFrozenStateChanged)"
  },
  {
    "label": "OnFrozenStateChanged()",
    "kind": "Method",
    "detail": "Function (FFrozenStateChanged*)",
    "insertText": "OnFrozenStateChanged()"
  }
]