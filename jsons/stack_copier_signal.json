[
  {
    "label": "ThreadDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "StackCopierSignal()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_STACK_COPIER_SIGNAL_H_ # define BASE_PROFILER_STACK_COPIER_SIGNAL_H_ # include<memory> # include \" base / base_export . h \" # include \" base / profiler / stack_copier . h \" namespace base { class ThreadDelegate ; class BASE_EXPORT StackCopierSignal : public StackCopier { public :)",
    "insertText": "StackCopierSignal(std::unique_ptr<ThreadDelegate> thread_delegate)"
  },
  {
    "label": "StackCopierSignal()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StackCopierSignal()"
  },
  {
    "label": "CopyStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyStack(StackBuffer* stack_buffer, uintptr_t* stack_top, TimeTicks* timestamp, RegisterContext* thread_context, Delegate* delegate)"
  }
]