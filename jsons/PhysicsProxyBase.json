[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPhysicsSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsSolverBase"
  },
  {
    "label": "FProxyTimestampBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProxyTimestampBase"
  },
  {
    "label": "TTimestampProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTimestampProperty"
  },
  {
    "label": "FSingleParticleProxyTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleParticleProxyTimestamp"
  },
  {
    "label": "FGeometryCollectionProxyTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionProxyTimestamp"
  },
  {
    "label": "FClusterUnionProxyTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionProxyTimestamp"
  },
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "SOLVER_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOLVER_TYPE"
  },
  {
    "label": "PhysicsProxyWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PhysicsProxyWrapper"
  },
  {
    "label": "FProxyInterpolationBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProxyInterpolationBase"
  },
  {
    "label": "FProxyInterpolationError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProxyInterpolationError"
  },
  {
    "label": "FProxyInterpolationErrorVelocity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProxyInterpolationErrorVelocity"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Declares . h \" # include \" UObject / GCObject . h \" # include \" Chaos / Core . h \" # include \" HAL / IConsoleManager . h \" enum class EPhysicsProxyType : uint32 { NoneType = 0,StaticMeshType = 1,GeometryCollectionType = 2,FieldType = 3,SkeletalMeshType = 4,JointConstraintType = 8,SuspensionConstraintType = 9,CharacterGroundConstraintType = 1 0,SingleParticleProxy,ClusterUnionProxy,Count } ; namespace Chaos { class FPhysicsSolverBase ; } namespace RenderInterpolationCVars { float RenderInterpErrorCorrectionDuration ; float RenderInterpMaximumErrorCorrectionBeforeSnapping ; float RenderInterpErrorVelocitySmoothingDuration ; float RenderInterpErrorDirectionalDecayMultiplier ; bool bRenderInterpErrorVelocityCorrection ; bool bRenderInterpDebugDraw ; float RenderInterpDebugDrawZOffset ; } enum class EProxyInterpolationType : uint32 { Base = 0,ErrorLinear = 1,ErrorVelocity = 2 } ; struct FProxyTimestampBase { bool bDeleted = false ; } ; template<TPropertyType> struct TTimestampProperty { void)",
    "insertText": "Set(int32 InTimestamp, const TPropertyType& InValue)"
  },
  {
    "label": "IPhysicsProxyBase()",
    "kind": "Method",
    "detail": "Function (Value = InValue ; Timestamp = InTimestamp ; } TPropertyType Value ; int32 Timestamp = INDEX_NONE ; } ; struct FSingleParticleProxyTimestamp : public FProxyTimestampBase { int32 ObjectStateTimestamp = INDEX_NONE ; TTimestampProperty<Chaos::FVec3> OverWriteX ; TTimestampProperty<Chaos::FRotation3> OverWriteR ; TTimestampProperty<Chaos::FVec3> OverWriteV ; TTimestampProperty<Chaos::FVec3> OverWriteW ; } ; struct FGeometryCollectionProxyTimestamp : public FProxyTimestampBase { } ; struct FClusterUnionProxyTimestamp : public FProxyTimestampBase { TTimestampProperty<Chaos::FVec3> OverWriteX ; TTimestampProperty<Chaos::FRotation3> OverWriteR ; TTimestampProperty<Chaos::FVec3> OverWriteV ; TTimestampProperty<Chaos::FVec3> OverWriteW ; } ; class IPhysicsProxyBase { public :)",
    "insertText": "IPhysicsProxyBase(EPhysicsProxyType InType, UObject* InOwner, TSharedPtr<FProxyTimestampBase,ESPMode::ThreadSafe> InProxyTimeStamp) : Solver(nullptr) , Owner(InOwner) , DirtyIdx(INDEX_NONE) , Type(InType) , SyncTimestamp(InProxyTimeStamp)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "GetSolverBase()",
    "kind": "Method",
    "detail": "Function (} Chaos::FPhysicsSolverBase*)",
    "insertText": "GetSolverBase()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Solver = InSolver ; } EPhysicsProxyType)",
    "insertText": "GetType()"
  },
  {
    "label": "ResetDirtyIdx()",
    "kind": "Method",
    "detail": "Function (DirtyIdx = Idx ; } void)",
    "insertText": "ResetDirtyIdx()"
  },
  {
    "label": "MarkDeleted()",
    "kind": "Method",
    "detail": "Function (DirtyIdx = INDEX_NONE ; } void)",
    "insertText": "MarkDeleted()"
  },
  {
    "label": "GetMarkedDeleted()",
    "kind": "Method",
    "detail": "Function (SyncTimestamp -> bDeleted = true ; } bool)",
    "insertText": "GetMarkedDeleted()"
  },
  {
    "label": "GetInitializedStep()",
    "kind": "Method",
    "detail": "Function (IgnoreDataOnStep_Internal = InitializedOnStep ; } InitializedOnStep = InitializeStep ; } int32)",
    "insertText": "GetInitializedStep()"
  },
  {
    "label": "GetSyncTimestampAs()",
    "kind": "Method",
    "detail": "Function (template<TProxyTimeStamp> TProxyTimeStamp&)",
    "insertText": "GetSyncTimestampAs()"
  },
  {
    "label": "GetSolverSyncTimestamp_External()",
    "kind": "Method",
    "detail": "Function (} Chaos::FPhysicsSolverBase* Solver ; UObject* Owner ; private : int32 DirtyIdx ; protected : EPhysicsProxyType Type ; private : TSharedPtr<FProxyTimestampBase,ESPMode::ThreadSafe> SyncTimestamp ; IPhysicsProxyBase* ParentProxy = nullptr ; protected : int32 InitializedOnStep = INDEX_NONE ; int32 IgnoreDataOnStep_Internal = INDEX_NONE ; int32)",
    "insertText": "GetSolverSyncTimestamp_External()"
  },
  {
    "label": "FProxyInterpolationBase()",
    "kind": "Method",
    "detail": "Function (} ; struct PhysicsProxyWrapper { IPhysicsProxyBase* PhysicsProxy ; EPhysicsProxyType Type ; } ; struct FProxyInterpolationBase {)",
    "insertText": "FProxyInterpolationBase(const int32 PullDataInterpIdx = INDEX_NONE, const int32 InterpChannel = 0) : PullDataInterpIdx_External(PullDataInterpIdx) , InterpChannel_External(InterpChannel)"
  },
  {
    "label": "FProxyInterpolationBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProxyInterpolationBase()"
  },
  {
    "label": "GetPullDataInterpIdx_External()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPullDataInterpIdx_External()"
  },
  {
    "label": "GetInterpChannel_External()",
    "kind": "Method",
    "detail": "Function (PullDataInterpIdx_External = Idx ; } int32)",
    "insertText": "GetInterpChannel_External()"
  },
  {
    "label": "GetInterpolationType()",
    "kind": "Method",
    "detail": "Function (InterpChannel_External = Channel ; } protected : int32 PullDataInterpIdx_External ; int32 InterpChannel_External ; public : const EProxyInterpolationType InterpolationType = EProxyInterpolationType::Base ; const EProxyInterpolationType)",
    "insertText": "GetInterpolationType()"
  },
  {
    "label": "UpdateError()",
    "kind": "Method",
    "detail": "Function (} ; const bool)",
    "insertText": "UpdateError(const int32 CurrentSimTick, const Chaos::FReal AsyncFixedTimeStep)"
  },
  {
    "label": "FProxyInterpolationError()",
    "kind": "Method",
    "detail": "Function (} ; } ; struct FProxyInterpolationError : FProxyInterpolationBase { using Super = FProxyInterpolationBase ;)",
    "insertText": "FProxyInterpolationError(const int32 PullDataInterpIdx = INDEX_NONE, const int32 InterpChannel = 0) : Super(PullDataInterpIdx, InterpChannel)"
  },
  {
    "label": "FProxyInterpolationError()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProxyInterpolationError()"
  },
  {
    "label": "GetErrorR()",
    "kind": "Method",
    "detail": "Function (} const FQuat)",
    "insertText": "GetErrorR(const Chaos::FRealSingle Alpha)"
  },
  {
    "label": "AccumlateErrorXR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumlateErrorXR(const Chaos::FVec3 X, const FQuat R, const int32 CurrentSimTick, const int32 ErrorSmoothDuration)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ErrorSmoothingCount = ErrorSmoothDuration ; LastSimTick = CurrentSimTick - 1 ; SimTicks = 0 ;)",
    "insertText": "if(IsErrorSmoothing())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ErrorX + = X ; ErrorXPrev = ErrorX ; ErrorR* = R ; ErrorRPrev = ErrorR ; } else {)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SimTicks = CurrentSimTick - LastSimTick ; LastSimTick = CurrentSimTick ;)",
    "insertText": "if(SimTicks > 0)"
  },
  {
    "label": "DirectionalDecay()",
    "kind": "Method",
    "detail": "Function (} return false ; } const bool)",
    "insertText": "DirectionalDecay(Chaos::FVec3 Direction)"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (const Chaos::FVec3 DirectionNormal = Direction .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Chaos::FRealDouble DotProd = Chaos::)",
    "insertText": "DotProduct(DirectionNormal, ErrorX)"
  },
  {
    "label": "ProjectOnToNormal()",
    "kind": "Method",
    "detail": "Function (Chaos::FVec3 DirProjection = ErrorX .)",
    "insertText": "ProjectOnToNormal(DirectionNormal)"
  },
  {
    "label": "DecayError()",
    "kind": "Method",
    "detail": "Function (ErrorX - = DirProjection ; return true ; } } return false ; } protected : const bool)",
    "insertText": "DecayError()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Chaos::FRealSingle Alpha =)",
    "insertText": "FRealSingle(ErrorSmoothingCount - 1) / Chaos::FRealSingle(ErrorSmoothingCount)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Alpha =)",
    "insertText": "Clamp(Alpha, 0.f, 1.f)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (ErrorXPrev = ErrorX ; ErrorX* = Alpha ; ErrorRPrev = ErrorR ; ErrorR =)",
    "insertText": "Lerp(FQuat::Identity, ErrorR, Alpha)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ErrorSmoothingCount =)",
    "insertText": "Max(ErrorSmoothingCount - 1, 0)"
  },
  {
    "label": "FProxyInterpolationErrorVelocity()",
    "kind": "Method",
    "detail": "Function (ErrorX = Chaos::FVec3::ZeroVector ; ErrorXPrev = Chaos::FVec3::ZeroVector ; ErrorR = FQuat::Identity ; ErrorRPrev = FQuat::Identity ; ErrorSmoothingCount = 0 ; LastSimTick = 0 ; SimTicks = 0 ; } protected : int32 LastSimTick = 0 ; int32 SimTicks = 0 ; Chaos::FVec3 ErrorX = { 0,0,0 } ; Chaos::FVec3 ErrorXPrev = { 0,0,0 } ; FQuat ErrorR = FQuat::Identity ; FQuat ErrorRPrev = FQuat::Identity ; int32 ErrorSmoothingCount = 0 ; } ; struct FProxyInterpolationErrorVelocity : FProxyInterpolationError { using Super = FProxyInterpolationError ;)",
    "insertText": "FProxyInterpolationErrorVelocity(const int32 PullDataInterpIdx = INDEX_NONE, const int32 InterpChannel = 0) : Super(PullDataInterpIdx, InterpChannel)"
  },
  {
    "label": "FProxyInterpolationErrorVelocity()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProxyInterpolationErrorVelocity()"
  },
  {
    "label": "GetErrorVelocitySmoothingX()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3)",
    "insertText": "GetErrorVelocitySmoothingX(const Chaos::FRealSingle Alpha)"
  },
  {
    "label": "StepErrorVelocitySmoothingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepErrorVelocitySmoothingData(AsyncFixedTimeStep)"
  },
  {
    "label": "StepErrorVelocitySmoothingData()",
    "kind": "Method",
    "detail": "Function (ErrorVelocitySmoothingV = CurrV ; ErrorVelocitySmoothingX = CurrX ; ErrorVelocitySmoothingXPrev = ErrorVelocitySmoothingX ; ErrorVelocitySmoothingCount = ErrorVelocitySmoothDuration ; } protected : void)",
    "insertText": "StepErrorVelocitySmoothingData(const Chaos::FReal AsyncFixedTimeStep)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const Chaos::FReal Time = AsyncFixedTimeStep* SimTicks ; ErrorVelocitySmoothingXPrev = ErrorVelocitySmoothingX ; ErrorVelocitySmoothingX + = ErrorVelocitySmoothingV* Time ; ErrorVelocitySmoothingCount =)",
    "insertText": "Max(ErrorVelocitySmoothingCount - SimTicks, 0)"
  }
]