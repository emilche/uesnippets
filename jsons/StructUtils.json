[
  {
    "label": "FInstancedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStruct"
  },
  {
    "label": "FStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructView"
  },
  {
    "label": "FConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstStructView"
  },
  {
    "label": "FSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedStruct"
  },
  {
    "label": "FConstSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstSharedStruct"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "types"
  },
  {
    "label": "CheckStructType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Class . h \" namespace UE::StructUtils { template<T> void)",
    "insertText": "CheckStructType()"
  },
  {
    "label": "CheckWrapperType()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "CheckWrapperType()"
  },
  {
    "label": "GetStructRef()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetStructRef(const UScriptStruct* ScriptStruct, void* StructMemory)"
  },
  {
    "label": "GetStructPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetStructPtr(const UScriptStruct* ScriptStruct, void* StructMemory)"
  },
  {
    "label": "GetStructRef()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T> const T&)",
    "insertText": "GetStructRef(const UScriptStruct* ScriptStruct, const void* StructMemory)"
  },
  {
    "label": "GetStructPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetStructPtr(const UScriptStruct* ScriptStruct, const void* StructMemory)"
  },
  {
    "label": "CalcMidIndexAndCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalcMidIndexAndCount(int32 ArrayNum, int32& InOutIndex, int32& InOutCount)"
  },
  {
    "label": "NegativeIndexOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NegativeIndexOffset(InOutIndex < 0)"
  },
  {
    "label": "InOutIndex()",
    "kind": "Method",
    "detail": "Function (InOutCount + = NegativeIndexOffset ; InOutIndex - = NegativeIndexOffset ;)",
    "insertText": "InOutIndex(InOutIndex > ArrayNum)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (InOutCount =)",
    "insertText": "Clamp(InOutCount, 0, (ArrayNum - InOutIndex))"
  }
]