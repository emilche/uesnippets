[
  {
    "label": "FEventScopeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventScopeEntry"
  },
  {
    "label": "FEventStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventStackEntry"
  },
  {
    "label": "FEventScopeEntryPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventScopeEntryPage"
  },
  {
    "label": "FDetailLevelDepthState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailLevelDepthState"
  },
  {
    "label": "FDetailLevelInsertionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailLevelInsertionState"
  },
  {
    "label": "FDetailLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailLevel"
  },
  {
    "label": "FEventInfoStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventInfoStackEntry"
  },
  {
    "label": "CurrentScopeEntryPageIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" namespace TraceServices { struct FEventScopeEntry { double Time ; } ; struct FEventStackEntry { uint64 EnterScopeIndex ; uint64 EventIndex ; double ExclTime = 0 . 0 ; double EndTime = - 1 . 0 ; } ; struct FEventScopeEntryPage { FEventScopeEntry* Items = nullptr ; uint64 Count = 0 ; double BeginTime = 0 . 0 ; double EndTime = 0 . 0 ; uint64 BeginEventIndex = 0 ; uint64 EndEventIndex = 0 ; FEventStackEntry* InitialStack = nullptr ; uint16 InitialStackCount = 0 ; } ; template<EventType> struct FDetailLevelDepthState { int64 PendingScopeEnterIndex = - 1 ; int64 PendingEventIndex = - 1 ; EventType DominatingEvent ; double DominatingEventStartTime = 0 . 0 ; double DominatingEventEndTime = 0 . 0 ; double DominatingEventDuration = 0 . 0 ; double EnterTime = 0 . 0 ; double ExitTime = 0 . 0 ; } ; template<EventType,SettingsType> struct FDetailLevelInsertionState { double LastTime = - 1 . 0 ; uint16 CurrentDepth = 0 ; int32 PendingDepth = - 1 ; FDetailLevelDepthState<EventType> DepthStates [ SettingsType::MaxDepth ] ; FEventStackEntry EventStack [ SettingsType::MaxDepth ] ; uint64)",
    "insertText": "CurrentScopeEntryPageIndex(uint64)"
  },
  {
    "label": "FDetailLevel()",
    "kind": "Method",
    "detail": "Function (} ; template<EventType,SettingsType> struct FDetailLevel {)",
    "insertText": "FDetailLevel(ILinearAllocator& Allocator, double InResolution) : Resolution(InResolution) , ScopeEntries(Allocator, SettingsType::ScopeEntriesPageSize) , Events(Allocator, SettingsType::EventsPageSize)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetScopeEntryTime(uint64 Index)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntry& ScopeEntry = ScopeEntries [ Index ] ; return ScopeEntry . Time<0 ? - ScopeEntry . Time : ScopeEntry . Time ; } void)",
    "insertText": "SetEvent(uint64 Index, const EventType& Event)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (Events [ Index ] = Event ; } EventType)",
    "insertText": "GetEvent(uint64 Index)"
  },
  {
    "label": "FEventInfoStackEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEventInfoStackEntry(const FEventStackEntry& EventStackEntry, const FDetailLevel<EventType, SettingsType>& DetailLevel)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(EventStackEntry.EnterScopeIndex)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (Event = DetailLevel .)",
    "insertText": "GetEvent(EventStackEntry.EventIndex)"
  }
]