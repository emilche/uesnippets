[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "MakeTransformedDynamicMeshAdapter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicPointSet3 . h \" # include \" Math / Transform . h \" # include \" MeshAdapter . h \" # include \" PointSetAdapter . h \" namespace UE { namespace Geometry { class FDynamicMesh3 ; FTriangleMeshAdapterd)",
    "insertText": "MakeTransformedDynamicMeshAdapter(const FDynamicMesh3* Mesh, FTransform3d Transform)"
  },
  {
    "label": "MakeDynamicMeshAdapter()",
    "kind": "Method",
    "detail": "Function (FTriangleMeshAdapterd)",
    "insertText": "MakeDynamicMeshAdapter(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "MakeVerticesAdapter()",
    "kind": "Method",
    "detail": "Function (FPointSetAdapterd)",
    "insertText": "MakeVerticesAdapter(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "MakePointsAdapter()",
    "kind": "Method",
    "detail": "Function (FPointSetAdapterd)",
    "insertText": "MakePointsAdapter(const FDynamicPointSet3d* PointSet)"
  },
  {
    "label": "MakeTriCentroidsAdapter()",
    "kind": "Method",
    "detail": "Function (FPointSetAdapterd)",
    "insertText": "MakeTriCentroidsAdapter(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "MakeEdgeMidpointsAdapter()",
    "kind": "Method",
    "detail": "Function (FPointSetAdapterd)",
    "insertText": "MakeEdgeMidpointsAdapter(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "MakeBoundaryEdgeMidpointsAdapter()",
    "kind": "Method",
    "detail": "Function (FPointSetAdapterd)",
    "insertText": "MakeBoundaryEdgeMidpointsAdapter(const FDynamicMesh3* Mesh)"
  }
]