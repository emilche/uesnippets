[
  {
    "label": "IConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleObject"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FPullRequestCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPullRequestCollection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVirtualizationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualizationManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ECachingPolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECachingPolicy"
  },
  {
    "label": "FDebugValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugValues"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(EPackageFilterMode& OutValue, FStringView Buffer)"
  },
  {
    "label": "FixFilterFlags()",
    "kind": "Method",
    "detail": "Function (EPayloadFilterReason)",
    "insertText": "FixFilterFlags(FStringView PackagePath, uint64 SizeOnDisk, EPayloadFilterReason CurrentFilterFlags)"
  },
  {
    "label": "ApplySettingsFromConfigFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingsFromConfigFiles(const FConfigFile& ConfigFile)"
  },
  {
    "label": "ApplySettingsFromFromCmdline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingsFromFromCmdline()"
  },
  {
    "label": "ApplySettingsFromCVar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingsFromCVar()"
  },
  {
    "label": "ApplyDebugSettingsFromFromCmdline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDebugSettingsFromFromCmdline()"
  },
  {
    "label": "RegisterConsoleCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterConsoleCommands()"
  },
  {
    "label": "OnUpdateDebugMissBackendsFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissBackendsFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "OnUpdateDebugMissChanceFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissChanceFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "OnUpdateDebugMissCountFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissCountFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "UpdateBackendDebugState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBackendDebugState()"
  },
  {
    "label": "ShouldDebugFailPulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDebugFailPulling()"
  },
  {
    "label": "MountBackends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountBackends(const FConfigFile& ConfigFile)"
  },
  {
    "label": "ParseHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseHierarchy(const FConfigFile& ConfigFile, const TCHAR* GraphName, const TCHAR* HierarchyKey, const TCHAR* LegacyHierarchyKey, const FRegistedFactories& FactoryLookupTable, FBackendArray& PushArray)"
  },
  {
    "label": "CreateBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateBackend(const FConfigFile& ConfigFile, const TCHAR* GraphName, const FString& ConfigEntryName, const FRegistedFactories& FactoryLookupTable, FBackendArray& PushArray)"
  },
  {
    "label": "AddBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBackend(TUniquePtr<IVirtualizationBackend> Backend, FBackendArray& PushArray)"
  },
  {
    "label": "IsPersistentBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistentBackend(IVirtualizationBackend& Backend)"
  },
  {
    "label": "EnsureBackendConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBackendConnections()"
  },
  {
    "label": "CachePayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePayloads(TArrayView<FPushRequest> Requests, const IVirtualizationBackend* BackendSource, IVirtualizationBackend::EPushFlags Flags)"
  },
  {
    "label": "TryCacheDataToBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCacheDataToBackend(IVirtualizationBackend& Backend, TArrayView<FPushRequest> Requests, IVirtualizationBackend::EPushFlags Flags)"
  },
  {
    "label": "TryPushDataToBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPushDataToBackend(IVirtualizationBackend& Backend, TArrayView<FPushRequest> Requests)"
  },
  {
    "label": "PullDataFromAllBackends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullDataFromAllBackends(TArrayView<FPullRequest> Requests)"
  },
  {
    "label": "PullDataFromBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullDataFromBackend(IVirtualizationBackend& Backend, TArrayView<FPullRequest> Requests, FText& OutErrors)"
  },
  {
    "label": "BroadcastEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastEvent(TConstArrayView<FPullRequest> Ids, ENotification Event)"
  },
  {
    "label": "GetConnectionHelpUrl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConnectionHelpUrl()"
  }
]