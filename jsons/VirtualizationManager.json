[
  {
    "label": "IConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleObject"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FPullRequestCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPullRequestCollection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVirtualizationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualizationManager"
  },
  {
    "label": "ECachingPolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECachingPolicy"
  },
  {
    "label": "FDebugValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugValues"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" HAL / CriticalSection . h \" # include \" IVirtualizationBackend . h \" # include \" Logging / LogMacros . h \" # include \" Templates / UniquePtr . h \" # include \" Virtualization / VirtualizationSystem . h \" class IConsoleObject ; class FOutputDevice ; struct FAnalyticsEventAttribute ; namespace UE::Virtualization { class FPullRequestCollection ; enum class EPackageFilterMode : uint8 { OptOut = 0,OptIn } ; bool)",
    "insertText": "LexTryParseString(EPackageFilterMode& OutValue, FStringView Buffer)"
  },
  {
    "label": "FVirtualizationManager()",
    "kind": "Method",
    "detail": "Function (class FVirtualizationManager final : public IVirtualizationSystem { public : using FRegistedFactories = TMap<FName,IVirtualizationBackendFactory*> ; using FBackendArray = TArray<IVirtualizationBackend*> ;)",
    "insertText": "FVirtualizationManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Initialize(const FInitParams& InitParams)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsPushingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPushingEnabled(EStorageType StorageType)"
  },
  {
    "label": "FilterPayload()",
    "kind": "Method",
    "detail": "Function (EPayloadFilterReason)",
    "insertText": "FilterPayload(const UObject* Owner)"
  },
  {
    "label": "AllowSubmitIfVirtualizationFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSubmitIfVirtualizationFailed()"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushData(TArrayView<FPushRequest> Requests, EStorageType StorageType)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullData(TArrayView<FPullRequest> Requests)"
  },
  {
    "label": "QueryPayloadStatuses()",
    "kind": "Method",
    "detail": "Function (EQueryResult)",
    "insertText": "QueryPayloadStatuses(TArrayView<const FIoHash> Ids, EStorageType StorageType, TArray<EPayloadStatus>& OutStatuses)"
  },
  {
    "label": "TryVirtualizePackages()",
    "kind": "Method",
    "detail": "Function (FVirtualizationResult)",
    "insertText": "TryVirtualizePackages(TConstArrayView<FString> PackagePaths, EVirtualizationOptions Options)"
  },
  {
    "label": "TryRehydratePackages()",
    "kind": "Method",
    "detail": "Function (FRehydrationResult)",
    "insertText": "TryRehydratePackages(TConstArrayView<FString> PackagePaths, ERehydrationOptions Options)"
  },
  {
    "label": "TryRehydratePackages()",
    "kind": "Method",
    "detail": "Function (ERehydrationResult)",
    "insertText": "TryRehydratePackages(TConstArrayView<FString> PackagePaths, uint64 PaddingAlignment, TArray<FText>& OutErrors, TArray<FSharedBuffer>& OutPackages, TArray<FRehydrationInfo>* OutInfo)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "GetSystemStatistics()",
    "kind": "Method",
    "detail": "Function (FPayloadActivityInfo)",
    "insertText": "GetSystemStatistics()"
  },
  {
    "label": "GetBackendStatistics()",
    "kind": "Method",
    "detail": "Function (TArray<FBackendStats>)",
    "insertText": "GetBackendStatistics()"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "GetNotificationEvent()",
    "kind": "Method",
    "detail": "Function (FOnNotification&)",
    "insertText": "GetNotificationEvent()"
  },
  {
    "label": "ApplySettingsFromConfigFiles()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplySettingsFromConfigFiles(const FConfigFile& ConfigFile)"
  },
  {
    "label": "ApplySettingsFromFromCmdline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingsFromFromCmdline()"
  },
  {
    "label": "ApplySettingsFromCVar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettingsFromCVar()"
  },
  {
    "label": "ApplyDebugSettingsFromFromCmdline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDebugSettingsFromFromCmdline()"
  },
  {
    "label": "RegisterConsoleCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterConsoleCommands()"
  },
  {
    "label": "OnUpdateDebugMissBackendsFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissBackendsFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "OnUpdateDebugMissChanceFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissChanceFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "OnUpdateDebugMissCountFromConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDebugMissCountFromConsole(const TArray<FString>& Args, FOutputDevice& OutputDevice)"
  },
  {
    "label": "UpdateBackendDebugState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBackendDebugState()"
  },
  {
    "label": "ShouldDebugDisablePulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDebugDisablePulling(FStringView BackendConfigName)"
  },
  {
    "label": "ShouldDebugFailPulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDebugFailPulling()"
  },
  {
    "label": "MountBackends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MountBackends(const FConfigFile& ConfigFile)"
  },
  {
    "label": "ParseHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseHierarchy(const FConfigFile& ConfigFile, const TCHAR* GraphName, const TCHAR* HierarchyKey, const TCHAR* LegacyHierarchyKey, const FRegistedFactories& FactoryLookupTable, FBackendArray& PushArray)"
  },
  {
    "label": "CreateBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateBackend(const FConfigFile& ConfigFile, const TCHAR* GraphName, const FString& ConfigEntryName, const FRegistedFactories& FactoryLookupTable, FBackendArray& PushArray)"
  },
  {
    "label": "AddBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBackend(TUniquePtr<IVirtualizationBackend> Backend, FBackendArray& PushArray)"
  },
  {
    "label": "IsPersistentBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistentBackend(IVirtualizationBackend& Backend)"
  },
  {
    "label": "EnsureBackendConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBackendConnections()"
  },
  {
    "label": "CachePayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePayloads(TArrayView<FPushRequest> Requests, const IVirtualizationBackend* BackendSource, IVirtualizationBackend::EPushFlags Flags)"
  },
  {
    "label": "TryCacheDataToBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCacheDataToBackend(IVirtualizationBackend& Backend, TArrayView<FPushRequest> Requests, IVirtualizationBackend::EPushFlags Flags)"
  },
  {
    "label": "TryPushDataToBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPushDataToBackend(IVirtualizationBackend& Backend, TArrayView<FPushRequest> Requests)"
  },
  {
    "label": "PullDataFromAllBackends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullDataFromAllBackends(TArrayView<FPullRequest> Requests)"
  },
  {
    "label": "PullDataFromBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PullDataFromBackend(IVirtualizationBackend& Backend, TArrayView<FPullRequest> Requests, FText& OutErrors)"
  },
  {
    "label": "OnPayloadPullError()",
    "kind": "Method",
    "detail": "Function (enum class ErrorHandlingResult { Retry = 0,AcceptFailedPayloads } ; ErrorHandlingResult)",
    "insertText": "OnPayloadPullError(const FPullRequestCollection& Requests, FStringView BackendErrors)"
  },
  {
    "label": "ShouldVirtualizeAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVirtualizeAsset(const UObject* Owner)"
  },
  {
    "label": "ShouldVirtualizePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVirtualizePackage(const FPackagePath& PackagePath)"
  },
  {
    "label": "ShouldVirtualize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVirtualize(FStringView Context)"
  },
  {
    "label": "ShouldVirtualizeAsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVirtualizeAsDefault()"
  },
  {
    "label": "ShouldRetryWhenUnattended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRetryWhenUnattended()"
  },
  {
    "label": "BroadcastEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastEvent(TConstArrayView<FPullRequest> Ids, ENotification Event)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : bool bAllowPackageVirtualization ; enum ECachingPolicy { None = 0,CacheOnPull = 1<<0,CacheOnPush = 1<<1,AlwaysCache = CacheOnPull | CacheOnPush } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(ECachingPolicy)"
  },
  {
    "label": "GetConnectionHelpUrl()",
    "kind": "Method",
    "detail": "Function (ECachingPolicy CachingPolicy ; int64 MinPayloadLength ; FString BackendGraphName ; FString VirtualizationProcessTag ; EPackageFilterMode FilteringMode ; bool bFilterMapContent ; bool bAllowSubmitIfVirtualizationFailed ; bool bLazyInitConnections ; bool bUseLegacyErrorHandling ; bool bForceCachingOnPull ; FString PullErrorAdditionalMsg ; FString ConnectionHelpUrl ; int32 UnattendedRetryCount = 0 ; int32 UnattendedRetryTimer = 0 ; private : FString ProjectName ; TSet<FName> DisabledAssetTypes ; TArray<TUniquePtr<IVirtualizationBackend>> AllBackends ; FBackendArray CacheStorageBackends ; FBackendArray PersistentStorageBackends ; FBackendArray PullEnabledBackends ; std::atomic<bool> bPendingBackendConnections ; FOnNotification NotificationEvent ; std::atomic<int32> UnattendedFailureMsgCount = 0 ; struct FDebugValues { TArray<IConsoleObject*> ConsoleObjects ; TArray<TPair<IConsoleVariable*,FDelegateHandle>> ConsoleDelegateHandles ; FCriticalSection ForceSingleThreadedCS ; bool bSingleThreaded = false ; bool bValidateAfterPush = false ; TArray<FString> MissBackends ; float MissChance ; std::atomic<int32> MissCount = 0 ; } DebugValues ; public : FString)",
    "insertText": "GetConnectionHelpUrl()"
  }
]