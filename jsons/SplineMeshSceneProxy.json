[
  {
    "label": "FSplineMeshVertexFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshVertexFactory"
  },
  {
    "label": "FSplineMeshVertexFactoryShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshVertexFactoryShaderParameters"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FMeshMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShader"
  },
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FSplineMeshSceneInstanceDataBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshSceneInstanceDataBuffers"
  },
  {
    "label": "TSplineMeshSceneProxyCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSplineMeshSceneProxyCommon"
  },
  {
    "label": "FSplineMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshSceneProxy"
  },
  {
    "label": "FLODResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODResources"
  },
  {
    "label": "FNaniteSplineMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteSplineMeshSceneProxy"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderingThread . h \" # include \" ShaderParameters . h \" # include \" VertexFactory . h \" # include \" LocalVertexFactory . h \" # include \" PrimitiveViewRelevance . h \" # include \" Components / SplineMeshComponent . h \" # include \" StaticMeshResources . h \" # include \" StaticMeshSceneProxy . h \" # include \" SplineMeshShaderParams . h \" # include \" NaniteSceneProxy . h \" # include \" InstanceDataSceneProxy . h \" struct FSplineMeshVertexFactory : public FLocalVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE(FSplineMeshVertexFactory)"
  },
  {
    "label": "FSplineMeshVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSplineMeshVertexFactory(ERHIFeatureLevel::Type InFeatureLevel) : FLocalVertexFactory(InFeatureLevel, \"FSplineMeshVertexFactory\")"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FVertexFactoryShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FSplineMeshVertexFactory& Other)"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (FSplineMeshVertexFactory* VertexFactory = this ; const FDataType* DataCopy =& Other . Data ;)",
    "insertText": "ENQUEUE_RENDER_COMMAND(FSplineMeshVertexFactoryCopyData)( [VertexFactory, DataCopy](FRHICommandListImmediate& RHICmdList) { VertexFactory->Data = *DataCopy; })"
  },
  {
    "label": "BeginUpdateResourceRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUpdateResourceRHI(this)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FSplineMeshVertexFactoryShaderParameters : public FVertexFactoryShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FSplineMeshVertexFactoryShaderParameters, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementShaderBindings(const class FSceneInterface* Scene, const FSceneView* View, const class FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FVertexFactory* VertexFactory, const FMeshBatchElement& BatchElement, class FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SplineMeshParams)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} ; struct FSplineMeshSceneInstanceDataBuffers : public FSingleInstanceDataBuffers { void)",
    "insertText": "Setup(const FSplineMeshShaderParams& InSplineMeshShaderParams)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(const FSplineMeshShaderParams& InSplineMeshShaderParams)"
  },
  {
    "label": "TSplineMeshSceneProxyCommon()",
    "kind": "Method",
    "detail": "Function (} ; template<TDerived> class TSplineMeshSceneProxyCommon { public :)",
    "insertText": "TSplineMeshSceneProxyCommon()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(&SplineParams, sizeof(SplineParams))"
  },
  {
    "label": "FUintVector2()",
    "kind": "Method",
    "detail": "Function (SplineParams . TextureCoord =)",
    "insertText": "FUintVector2(INDEX_NONE, INDEX_NONE)"
  },
  {
    "label": "GetSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (} const FSplineMeshShaderParams&)",
    "insertText": "GetSplineMeshParams()"
  },
  {
    "label": "RepackSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (SplineParams . TextureCoord = TexCoord ;)",
    "insertText": "RepackSplineMeshParams()"
  },
  {
    "label": "UpdateSplineMeshParams_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSplineMeshParams_RenderThread(const FSplineMeshShaderParams& Params)"
  },
  {
    "label": "RepackSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RepackSplineMeshParams(bool bUpdateGPUScene = true)"
  },
  {
    "label": "Downcast()",
    "kind": "Method",
    "detail": "Function (auto& SceneProxy =)",
    "insertText": "Downcast()"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (SceneProxy .)",
    "insertText": "GetScene().RequestGPUSceneUpdate( *SceneProxy.GetPrimitiveSceneInfo(), EPrimitiveDirtyState::ChangedOther)"
  },
  {
    "label": "IMPL_SPLINE_MESH_SCENE_PROXY_COMMON()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "IMPL_SPLINE_MESH_SCENE_PROXY_COMMON(classname)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetShadowMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShadowMeshElement(int32 LODIndex, int32 BatchIndex, uint8 InDepthPriorityGroup, FMeshBatch& OutMeshBatch, bool bDitheredLODTransition)"
  },
  {
    "label": "GetMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshElement(int32 LODIndex, int32 BatchIndex, int32 ElementIndex, uint8 InDepthPriorityGroup, bool bUseSelectionOutline, bool bAllowPreCulledIndices, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "GetWireframeMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWireframeMeshElement(int32 LODIndex, int32 BatchIndex, const FMaterialRenderProxy* WireframeRenderProxy, uint8 InDepthPriorityGroup, bool bAllowPreCulledIndices, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "GetCollisionMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollisionMeshElement(int32 LODIndex, int32 BatchIndex, int32 ElementIndex, uint8 InDepthPriorityGroup, const FMaterialRenderProxy* RenderProxy, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnTransformChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FLODResources()",
    "kind": "Method",
    "detail": "Function (private : struct FLODResources { FSplineMeshVertexFactory* VertexFactory ;)",
    "insertText": "FLODResources(FSplineMeshVertexFactory* InVertexFactory) : VertexFactory(InVertexFactory)"
  },
  {
    "label": "SetupMeshBatchForSpline()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "SetupMeshBatchForSpline(int32 InLODIndex, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "IMPL_SPLINE_MESH_SCENE_PROXY_COMMON()",
    "kind": "Method",
    "detail": "Function (private : TArray<FLODResources> LODResources ; } ; class FNaniteSplineMeshSceneProxy final : public Nanite::FSceneProxy,public TSplineMeshSceneProxyCommon<FNaniteSplineMeshSceneProxy> {)",
    "insertText": "IMPL_SPLINE_MESH_SCENE_PROXY_COMMON(FNaniteSplineMeshSceneProxy) public: FNaniteSplineMeshSceneProxy(const Nanite::FMaterialAudit& MaterialAudit, USplineMeshComponent* InComponent)"
  },
  {
    "label": "IsRayTracingStaticRelevant()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING bool)",
    "insertText": "IsRayTracingStaticRelevant()"
  },
  {
    "label": "GetDynamicRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicRayTracingInstances(FRayTracingInstanceCollector& Collector)"
  },
  {
    "label": "SetupFallbackRayTracingMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupFallbackRayTracingMaterials(int32 LODIndex, TArray<FMeshBatch>& OutMaterials)"
  },
  {
    "label": "UpdateSplineMeshParams_RenderThread()",
    "kind": "Method",
    "detail": "Function (# endif } ; void)",
    "insertText": "UpdateSplineMeshParams_RenderThread(FPrimitiveSceneProxy* SceneProxy, const FSplineMeshShaderParams& Params)"
  }
]