[
  {
    "label": "EMinifyShaderFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMinifyShaderFlags"
  },
  {
    "label": "FDiagnosticMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiagnosticMessage"
  },
  {
    "label": "FDiagnostics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiagnostics"
  },
  {
    "label": "FMinifiedShader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinifiedShader"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / UnrealString . h \" # include \" Misc / EnumClassFlags . h \" # include \" ShaderSource . h \" namespace UE::ShaderMinifier { enum EMinifyShaderFlags { None = 0,OutputReasons = 1<<1,OutputStats = 1<<2,OutputLines = 1<<3,OutputCommentLines = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMinifyShaderFlags)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (FString Message ; FString File ; int32 Offset = INDEX_NONE ; int32 Line = INDEX_NONE ; int32 Column = INDEX_NONE ; } ; struct FDiagnostics { TArray<FDiagnosticMessage> Errors ; TArray<FDiagnosticMessage> Warnings ; } ; struct FMinifiedShader { FShaderSource::FStringType Code ; FDiagnostics Diagnostics ; bool)",
    "insertText": "Success()"
  },
  {
    "label": "Minify()",
    "kind": "Method",
    "detail": "Function (} } ; FMinifiedShader)",
    "insertText": "Minify(const FShaderSource& PreprocessedShader, const FShaderSource::FViewType EntryPoint, EMinifyShaderFlags Flags = EMinifyShaderFlags::None)"
  },
  {
    "label": "Minify()",
    "kind": "Method",
    "detail": "Function (FMinifiedShader)",
    "insertText": "Minify(const FShaderSource& PreprocessedShader, TConstArrayView<FShaderSource::FViewType> RequiredSymbols, EMinifyShaderFlags Flags = EMinifyShaderFlags::None)"
  }
]