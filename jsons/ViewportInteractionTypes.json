[
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineBaseTypes . h \" # include \" ViewportInteractionTypes . generated . h \")",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FViewportActionKeyInput() : ActionType( NAME_None ) , Event( IE_Pressed ) , bIsInputCaptured( false ) , bIsAxis( false)"
  },
  {
    "label": "FViewportActionKeyInput()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewportActionKeyInput(const FName& InActionType ) : ActionType( InActionType ) , Event( IE_Pressed ) , bIsInputCaptured( false ) , bIsAxis( false)"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (} FViewportActionKeyInput)",
    "insertText": "Axis(const FName& InActionType)"
  },
  {
    "label": "Input()",
    "kind": "Method",
    "detail": "Function (FViewportActionKeyInput)",
    "insertText": "Input(InActionType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FViewportActionKeyInput& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Input.ActionType)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Input.Event))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Input.bIsInputCaptured))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Input.bIsAxis))"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Nothing,TransformablesWithGizmo,TransformablesAtLaserImpact,AssistingDrag,TransformablesFreely,World,Interactable,Material } ; enum class ETransformGizmoHandleDirection { Negative,Center,Positive,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetCenterHandleCountAndFacingAxisIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCenterHandleCountAndFacingAxisIndex(int32& OutCenterHandleCount, int32& OutFacingAxisIndex, int32& OutCenterAxisIndex)"
  }
]