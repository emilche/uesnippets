[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FComponentVisualizerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizerManager"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "FComponentVisualizerManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" ComponentVisualizer . h \" class FEditorViewportClient ; class FViewport ; class SWidget ; struct FViewportClick ; class FComponentVisualizerManager { public :)",
    "insertText": "FComponentVisualizerManager()"
  },
  {
    "label": "HandleProxyForComponentVis()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleProxyForComponentVis(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "GetActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FComponentVisualizer>)",
    "insertText": "GetActiveComponentVis()"
  },
  {
    "label": "SetActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActiveComponentVis(FEditorViewportClient* InViewportClient, TSharedPtr<FComponentVisualizer>& InVisualizer)"
  },
  {
    "label": "ClearActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActiveComponentVis()"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputKey(FEditorViewportClient* InViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "HandleInputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "HandleBoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBoxSelect(const FBox& InBox, FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HandleFrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFrustumSelect(const FConvexVolume &InFrustum, FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HasFocusOnSelectionBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusOnSelectionBoundingBox(FBox& OutBoundingBox)"
  },
  {
    "label": "HandleSnapTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSnapTo(const bool bInAlign, const bool bInUseLineTrace, const bool bInUseBounds, const bool bInUsePivot, AActor* InDestination)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetLocation(const FEditorViewportClient* InViewportClient, FVector& OutLocation)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(const FEditorViewportClient* InViewportClient, FMatrix& OutMatrix)"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped(FEditorViewportClient* InViewportClient, bool bInDidMove)"
  },
  {
    "label": "GenerateContextMenuForComponentVis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateContextMenuForComponentVis()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "IsVisualizingArchetype()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizingArchetype()"
  }
]