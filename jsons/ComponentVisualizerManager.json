[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FComponentVisualizerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizerManager"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "FComponentVisualizerManager()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FComponentVisualizerManager()"
  },
  {
    "label": "HandleProxyForComponentVis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleProxyForComponentVis(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "GetActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FComponentVisualizer>)",
    "insertText": "GetActiveComponentVis()"
  },
  {
    "label": "SetActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetActiveComponentVis(FEditorViewportClient* InViewportClient, TSharedPtr<FComponentVisualizer>& InVisualizer)"
  },
  {
    "label": "ClearActiveComponentVis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActiveComponentVis()"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "HandleSnapTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSnapTo(const bool bInAlign, const bool bInUseLineTrace, const bool bInUseBounds, const bool bInUsePivot, AActor* InDestination)"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped(FEditorViewportClient* InViewportClient, bool bInDidMove)"
  }
]