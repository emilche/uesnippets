[
  {
    "label": "TestTurnCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestTurnCustomizer"
  },
  {
    "label": "TestTurnAttributeExtensions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TestTurnAttributeExtensions"
  },
  {
    "label": "TestTurnCustomizer()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TEST_TURN_CUSTOMIZER_H_ # define P2P_BASE_TEST_TURN_CUSTOMIZER_H_ # include<memory> # include \" api / turn_customizer . h \" # include \" rtc_base / gunit . h \" namespace cricket { class TestTurnCustomizer : public webrtc::TurnCustomizer { public :)",
    "insertText": "TestTurnCustomizer()"
  },
  {
    "label": "MaybeModifyOutgoingStunMessage()",
    "kind": "Method",
    "detail": "Function (} enum TestTurnAttributeExtensions { STUN_ATTR_COUNTER = 0 xFF02 } ; void)",
    "insertText": "MaybeModifyOutgoingStunMessage(cricket::PortInterface* port, cricket::StunMessage* message)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (modify_cnt_ + + ;)",
    "insertText": "ASSERT_NE(0, message->type())"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (message ->)",
    "insertText": "AddAttribute(std::make_unique<cricket::StunUInt32Attribute>( STUN_ATTR_COUNTER, modify_cnt_))"
  },
  {
    "label": "AllowChannelData()",
    "kind": "Method",
    "detail": "Function (} return ; } bool)",
    "insertText": "AllowChannelData(cricket::PortInterface* port, const void* data, size_t size, bool payload)"
  }
]