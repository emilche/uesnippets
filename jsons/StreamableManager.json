[
  {
    "label": "FStreamableHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "id",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "id"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "TStreamableHandleContextDataTypeIDStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStreamableHandleContextDataTypeIDStorage"
  },
  {
    "label": "TStreamableHandleContextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStreamableHandleContextData"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FStreamableHandleContextDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableHandleContextDataBase"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "TStreamableHandleContextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStreamableHandleContextData"
  },
  {
    "label": "FStreamableHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableHandle"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FStreamableManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableManager"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "which"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "which"
  },
  {
    "label": "FStreamableManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableManager"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamableManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FStreamableManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableManager"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FStreamable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamable"
  },
  {
    "label": "FRedirectedPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRedirectedPath"
  },
  {
    "label": "AllocateClassTypeId()",
    "kind": "Method",
    "detail": "Function (TStreamableHandleContextDataTypeID)",
    "insertText": "AllocateClassTypeId()"
  },
  {
    "label": "SetDebugNameIfEmptyOrDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugNameIfEmptyOrDefault(const FString& NewName)"
  },
  {
    "label": "ReleaseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseHandle()"
  },
  {
    "label": "CancelHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelHandle()"
  },
  {
    "label": "StartStalledHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStalledHandle()"
  },
  {
    "label": "BindCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindCompleteDelegate(FStreamableDelegate NewDelegate)"
  },
  {
    "label": "BindCancelDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindCancelDelegate(FStreamableDelegate NewDelegate)"
  },
  {
    "label": "BindUpdateDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindUpdateDelegate(FStreamableUpdateDelegate NewDelegate)"
  },
  {
    "label": "WaitUntilComplete()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "WaitUntilComplete(float Timeout = 0.0f, bool bStartStalledHandles = true)"
  },
  {
    "label": "CreateCombinedHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "CreateCombinedHandle(const TConstArrayView<TSharedPtr<FStreamableHandle>>& OtherHandles)"
  },
  {
    "label": "GetOutermostHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "GetOutermostHandle()"
  },
  {
    "label": "CompleteLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteLoad()"
  },
  {
    "label": "AsyncLoadCallbackWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLoadCallbackWrapper(const FName& PackageName, UPackage* LevelPackage, EAsyncLoadingResult::Type Result, FSoftObjectPath TargetName)"
  },
  {
    "label": "NotifyParentsOfCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyParentsOfCompletion()"
  },
  {
    "label": "NotifyParentsOfCancellation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyParentsOfCancellation()"
  },
  {
    "label": "UpdateCombinedHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCombinedHandle()"
  },
  {
    "label": "CallUpdateDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallUpdateDelegate()"
  },
  {
    "label": "UnbindDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindDelegates()"
  },
  {
    "label": "FStreamableHandle()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FStreamableHandle()"
  },
  {
    "label": "CreateCombinedHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "CreateCombinedHandle(const TConstArrayView<TSharedPtr<FStreamableHandle>>& ChildHandles,\n\t\tconst FString& DebugName = FStreamableHandle::HandleDebugName_CombinedHandle,\n\t\tEStreamableManagerCombinedHandleOptions Options = EStreamableManagerCombinedHandleOptions::None)"
  },
  {
    "label": "Unload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unload(const FSoftObjectPath& Target)"
  },
  {
    "label": "SetManagerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManagerName(FString InName)"
  },
  {
    "label": "FStreamableManager()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FStreamableManager()"
  },
  {
    "label": "RemoveReferencedAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferencedAsset(const FSoftObjectPath& Target, TSharedRef<FStreamableHandle> Handle)"
  },
  {
    "label": "StartHandleRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartHandleRequests(TSharedRef<FStreamableHandle> Handle)"
  },
  {
    "label": "GetAsyncLoadRequestIds()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetAsyncLoadRequestIds(TSharedRef<FStreamableHandle> Handle)"
  },
  {
    "label": "FindInMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInMemory(FSoftObjectPath& InOutTarget, struct FStreamable* Existing, UPackage* Package = nullptr)"
  },
  {
    "label": "HandleLoadedRedirector()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "HandleLoadedRedirector(UObjectRedirector* LoadedRedirector, FSoftObjectPath RequestedPath, struct FStreamable* RequestedStreamable)"
  },
  {
    "label": "CheckCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckCompletedRequests(const FSoftObjectPath& Target, struct FStreamable* Existing)"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreGarbageCollect()"
  },
  {
    "label": "AsyncLoadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLoadCallback(FSoftObjectPath Request, UPackage* Package)"
  },
  {
    "label": "ShouldStripDebugName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStripDebugName()"
  },
  {
    "label": "RequestAsyncLoadInternal()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "RequestAsyncLoadInternal(TArray<FSoftObjectPath>&& TargetsToStream, FStreamableDelegate&& DelegateToCall, TAsyncLoadPriority Priority, bool bManageActiveHandle, bool bStartStalled, FString&& DebugName)"
  },
  {
    "label": "RequestSyncLoadInternal()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "RequestSyncLoadInternal(TArray<FSoftObjectPath>&& TargetsToStream, bool bManageActiveHandle, FString&& DebugName)"
  }
]