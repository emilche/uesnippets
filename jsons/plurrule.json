[
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "IFixedDecimal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFixedDecimal"
  },
  {
    "label": "RuleChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuleChain"
  },
  {
    "label": "PluralRuleParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralRuleParser"
  },
  {
    "label": "PluralKeywordEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralKeywordEnumeration"
  },
  {
    "label": "AndConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AndConstraint"
  },
  {
    "label": "SharedPluralRules",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPluralRules"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "UPLRULES_NO_UNIQUE_VALUE()",
    "kind": "Method",
    "detail": "Function (# ifndef PLURRULE # define PLURRULE # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / format . h \" # include \" unicode / upluralrules . h \" # ifndef # include \" unicode / numfmt . h \" # endif # define)",
    "insertText": "UPLRULES_NO_UNIQUE_VALUE((double)-0.00123456777)"
  },
  {
    "label": "PluralRules()",
    "kind": "Method",
    "detail": "Function (class IFixedDecimal ; class RuleChain ; class PluralRuleParser ; class PluralKeywordEnumeration ; class AndConstraint ; class SharedPluralRules ; namespace number { class FormattedNumber ; } class U_I18N_API PluralRules : public UObject { public :)",
    "insertText": "PluralRules(UErrorCode& status)"
  },
  {
    "label": "PluralRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralRules(const PluralRules& other)"
  },
  {
    "label": "PluralRules()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PluralRules()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (PluralRules*)",
    "insertText": "clone()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PluralRules&)",
    "insertText": "operator(const PluralRules&)"
  },
  {
    "label": "createRules()",
    "kind": "Method",
    "detail": "Function (PluralRules* U_EXPORT2)",
    "insertText": "createRules(const UnicodeString& description, UErrorCode& status)"
  },
  {
    "label": "createDefaultRules()",
    "kind": "Method",
    "detail": "Function (PluralRules* U_EXPORT2)",
    "insertText": "createDefaultRules(UErrorCode& status)"
  },
  {
    "label": "forLocale()",
    "kind": "Method",
    "detail": "Function (PluralRules* U_EXPORT2)",
    "insertText": "forLocale(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "forLocale()",
    "kind": "Method",
    "detail": "Function (PluralRules* U_EXPORT2)",
    "insertText": "forLocale(const Locale& locale, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (# ifndef StringEnumeration* U_EXPORT2)",
    "insertText": "getAvailableLocales(UErrorCode &status)"
  },
  {
    "label": "hasOverride()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasOverride(const Locale &locale)"
  },
  {
    "label": "internalForLocale()",
    "kind": "Method",
    "detail": "Function (PluralRules* U_EXPORT2)",
    "insertText": "internalForLocale(const Locale& locale, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "createSharedInstance()",
    "kind": "Method",
    "detail": "Function (const SharedPluralRules* U_EXPORT2)",
    "insertText": "createSharedInstance(const Locale& locale, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString)",
    "insertText": "select(int32_t number)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "select(double number)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString)",
    "insertText": "select(const number::FormattedNumber& number, UErrorCode& status)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef UnicodeString)",
    "insertText": "select(const IFixedDecimal &number)"
  },
  {
    "label": "getKeywords()",
    "kind": "Method",
    "detail": "Function (# endif StringEnumeration*)",
    "insertText": "getKeywords(UErrorCode& status)"
  },
  {
    "label": "getUniqueKeywordValue()",
    "kind": "Method",
    "detail": "Function (# ifndef double)",
    "insertText": "getUniqueKeywordValue(const UnicodeString& keyword)"
  },
  {
    "label": "getAllKeywordValues()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getAllKeywordValues(const UnicodeString &keyword, double *dest, int32_t destCapacity, UErrorCode& status)"
  },
  {
    "label": "getSamples()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "getSamples(const UnicodeString &keyword, double *dest, int32_t destCapacity, UErrorCode& status)"
  },
  {
    "label": "isKeyword()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isKeyword(const UnicodeString& keyword)"
  },
  {
    "label": "getKeywordOther()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getKeywordOther()"
  },
  {
    "label": "getRules()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString)",
    "insertText": "getRules()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif UBool)",
    "insertText": "operator(const PluralRules& other)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (} UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "parseDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseDescription(const UnicodeString& ruleData, UErrorCode &status)"
  },
  {
    "label": "getNumberValue()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getNumberValue(const UnicodeString& token)"
  },
  {
    "label": "getRuleFromResource()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getRuleFromResource(const Locale& locale, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "rulesForKeyword()",
    "kind": "Method",
    "detail": "Function (RuleChain*)",
    "insertText": "rulesForKeyword(const UnicodeString &keyword)"
  }
]