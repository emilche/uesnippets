[
  {
    "label": "TScale",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScale"
  },
  {
    "label": "TransformConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformConverter"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector . h \" # include \" Math / Rotator . h \" # include \" Math / Matrix . h \" # include \" Math / RotationMatrix . h \" # include \" Math / TranslationMatrix . h \" # include \" Math / Quat . h \" # include \" Math / ScaleMatrix . h \" # include \" Math / TransformCalculus . h \" template<T> class TScale {)",
    "insertText": "static_assert(std::is_floating_point_v<T>, \"T must be floating point\")"
  },
  {
    "label": "TScale()",
    "kind": "Method",
    "detail": "Function (public : using Vector3Type = UE::Math::TVector<T> ;)",
    "insertText": "TScale() :Scale(1.0f)"
  },
  {
    "label": "TScale()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScale(T InScale) :Scale(InScale)"
  },
  {
    "label": "TScale()",
    "kind": "Method",
    "detail": "Function (} template<VType>)",
    "insertText": "TScale(const UE::Math::TVector<VType>& InScale) : Scale((Vector3Type)InScale)"
  },
  {
    "label": "GetVector()",
    "kind": "Method",
    "detail": "Function (} const Vector3Type&)",
    "insertText": "GetVector()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} const TScale)",
    "insertText": "Inverse()"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (} private : Vector3Type Scale ; } ; typedef TScale<float> FScale3f ; typedef TScale<double> FScale3d ; typedef FScale3f FScale3D ; template<> template<> FRotator3f TransformConverter<FRotator3f>::Convert<)",
    "insertText": "FMatrix44f(const FMatrix44f& Transform)"
  },
  {
    "label": "FMatrix44d()",
    "kind": "Method",
    "detail": "Function (} template<> template<> FRotator3d TransformConverter<FRotator3d>::Convert<)",
    "insertText": "FMatrix44d(const FMatrix44d& Transform)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} template<TransformType> auto)",
    "insertText": "ToMatrix(const TransformType& Transform) -> decltype(Transform.ToMatrix())"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} const UE::Math::TMatrix<float>&)",
    "insertText": "ToMatrix(const UE::Math::TMatrix<float>& Transform)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<double>)",
    "insertText": "ToMatrix(double Scale)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<float>)",
    "insertText": "ToMatrix(const TScale<float>& Scale)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<double>)",
    "insertText": "ToMatrix(const TScale<double>& Scale)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<float>)",
    "insertText": "ToMatrix(const UE::Math::TVector<float>& Translation)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<double>)",
    "insertText": "ToMatrix(const UE::Math::TVector<double>& Translation)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<float>)",
    "insertText": "ToMatrix(const UE::Math::TRotator<float>& Rotation)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<double>)",
    "insertText": "ToMatrix(const UE::Math::TRotator<double>& Rotation)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<float>)",
    "insertText": "ToMatrix(const UE::Math::TQuat<float>& Rotation)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TMatrix<double>)",
    "insertText": "ToMatrix(const UE::Math::TQuat<double>& Rotation)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} template<> struct TransformConverter<FMatrix44f> { template<OtherTransformType> auto)",
    "insertText": "Convert(const OtherTransformType& Transform) -> decltype((FMatrix44f)ToMatrix(Transform))"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TransformConverter<FMatrix44d> { template<OtherTransformType> auto)",
    "insertText": "Convert(const OtherTransformType& Transform) -> decltype((FMatrix44d)ToMatrix(Transform))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct ConcatenateRules<float,TScale<T>> { typedef TScale<T> ResultType ; } ; template<T> struct ConcatenateRules<double,TScale<T>> { typedef TScale<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,float> { typedef TScale<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,double> { typedef TScale<T> ResultType ; } ; template<T> struct ConcatenateRules<float,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<double,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,float> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,double> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<float,UE::Math::TRotator<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<double,UE::Math::TRotator<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,float> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,double> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<float,UE::Math::TQuat<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<double,UE::Math::TQuat<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,float> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,double> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<float,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<double,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,float> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,double> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,TScale<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,UE::Math::TRotator<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,TScale<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,UE::Math::TQuat<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,TScale<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale<T>,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,TScale<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,UE::Math::TRotator<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,UE::Math::TQuat<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector<T>,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,UE::Math::TVector<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,UE::Math::TQuat<T>> { typedef UE::Math::TQuat<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,UE::Math::TRotator<T>> { typedef UE::Math::TQuat<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TRotator<T>,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,UE::Math::TRotator<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TQuat<T>,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,UE::Math::TQuat<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; namespace UE { namespace Math { template<T> UE::Math::TMatrix<T>)",
    "insertText": "Concatenate(const UE::Math::TMatrix<T>& LHS, const UE::Math::TMatrix<T>& RHS)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TMatrix<T>)",
    "insertText": "Inverse(const UE::Math::TMatrix<T>& Transform)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TRotator<T>)",
    "insertText": "Inverse(const UE::Math::TRotator<T>& Transform)"
  },
  {
    "label": "Euler()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T> EulerAngles = Transform .)",
    "insertText": "Euler()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TQuat<T>)",
    "insertText": "Inverse(const UE::Math::TQuat<T>& Transform)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "Inverse(const UE::Math::TVector<T>& Transform)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformPoint(const UE::Math::TQuat<T>& Transform, const UE::Math::TVector<T>& Point)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformVector(const UE::Math::TQuat<T>& Transform, const UE::Math::TVector<T>& Vector)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformPoint(const UE::Math::TRotator<T>& Transform, const UE::Math::TVector<T>& Point)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformVector(const UE::Math::TRotator<T>& Transform, const UE::Math::TVector<T>& Vector)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformPoint(const UE::Math::TVector<T>& Transform, const UE::Math::TVector<T>& Point)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} template<T> UE::Math::TVector<T>)",
    "insertText": "TransformVector(const TScale<T>& Transform, const UE::Math::TVector<T>& Vector)"
  }
]