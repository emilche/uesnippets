[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_SkeletalControlBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SkeletalControlBase"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BonePose . h \" # include \" Animation / BoneSocketReference . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / InputScaleBias . h \" # include \" AnimNode_SkeletalControlBase . generated . h \" class USkeletalMeshComponent ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)"
  },
  {
    "label": "FAnimNode_SkeletalControlBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNode_SkeletalControlBase() : LODThreshold(INDEX_NONE) , ActualAlpha(0.f) , AlphaInputType(EAnimAlphaInputType::Float) , bAlphaBoolEnabled(true) , Alpha(1.0f)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (} public : # if WITH_EDITORONLY_DATA FCSPose<FCompactHeapPose> ForwardedPose ; # endif void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateComponentSpace_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentSpace_AnyThread(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "GetLODThreshold()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODThreshold()"
  },
  {
    "label": "GetAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAlpha()"
  },
  {
    "label": "InitializeAndValidateBoneRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndValidateBoneRef(FBoneReference& BoneRef, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "AddBoneRefMissingVisualWarning()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddBoneRefMissingVisualWarning(const FString& BoneName, const FString& SkeletalMeshName)"
  },
  {
    "label": "AddValidationVisualWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValidationVisualWarning(FText ValidationVisualWarning)"
  },
  {
    "label": "HasValidationVisualWarnings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidationVisualWarnings()"
  },
  {
    "label": "ClearValidationVisualWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearValidationVisualWarnings()"
  },
  {
    "label": "GetValidationVisualWarningMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetValidationVisualWarningMessage()"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "UpdateComponentPose_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentPose_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateComponentPose_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentPose_AnyThread(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "EvaluateComponentSpaceInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentSpaceInternal(FComponentSpacePoseContext& Context)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "AddDebugNodeData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddDebugNodeData(FString& OutDebugData)"
  }
]