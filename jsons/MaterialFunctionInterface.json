[
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunction"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "FFunctionExpressionOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionExpressionOutput"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMaterialFunctionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunctionInterface"
  },
  {
    "label": "UMaterialFunctionInterfaceEditorOnlyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunctionInterfaceEditorOnlyData"
  },
  {
    "label": "FFunctionExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionExpressionInput"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Materials / MaterialExpression . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Templates / Casts . h \" # include \" MaterialRecursionGuard . h \" # include \" StaticParameterSet . h \" # if WITH_EDITOR # include \" Materials / MaterialExpression . h \" # endif # include \" MaterialFunctionInterface . generated . h \" class UMaterial ; class UMaterialFunction ; class UTexture ; struct FPropertyChangedEvent ; class FMaterialHLSLGenerator ; class FMaterialUpdateContext ; class UMaterialInterface ; class UMaterialExpression ; struct FFunctionExpressionOutput ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Default,MaterialLayer,MaterialLayerBlend } ; # if ENABLE_MATERIAL_LAYER_PROTOTYPE # define DEFAULT_MATERIALLAYERBLEND_PATH)",
    "insertText": "TEXT(\"/Engine/EngineMaterials/Blends/MLB_Horizontal\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Optional)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual void Serialize(FArchive& Ar)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, hidecategories=object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetEditorOnlyDataClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetEditorOnlyDataClass()"
  },
  {
    "label": "CreateEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (UMaterialFunctionInterfaceEditorOnlyData*)",
    "insertText": "CreateEditorOnlyData()"
  },
  {
    "label": "GetEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (public : UMaterialFunctionInterfaceEditorOnlyData*)",
    "insertText": "GetEditorOnlyData()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Rename(const TCHAR* NewName = nullptr, UObject* NewOuter = nullptr, ERenameFlags Flags = REN_None)"
  },
  {
    "label": "GetMaterialFunctionUsage()",
    "kind": "Method",
    "detail": "Function (public : EMaterialFunctionUsage)",
    "insertText": "GetMaterialFunctionUsage() PURE_VIRTUAL(UMaterialFunctionInterface::GetMaterialFunctionUsage,return EMaterialFunctionUsage::Default;)"
  },
  {
    "label": "UpdateFromFunctionResource()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateFromFunctionResource() PURE_VIRTUAL(UMaterialFunctionInterface::UpdateFromFunctionResource,)"
  },
  {
    "label": "GetInputsAndOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInputsAndOutputs(TArray<struct FFunctionExpressionInput>& OutInputs, TArray<struct FFunctionExpressionOutput>& OutOutputs) const PURE_VIRTUAL(UMaterialFunctionInterface::GetInputsAndOutputs,)"
  },
  {
    "label": "ForceRecompileForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRecompileForRendering(FMaterialUpdateContext& UpdateContext, UMaterial* InPreviewMaterial)"
  },
  {
    "label": "ValidateFunctionUsage()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ValidateFunctionUsage(class FMaterialCompiler* Compiler, const FFunctionExpressionOutput& Output) PURE_VIRTUAL(UMaterialFunctionInterface::ValidateFunctionUsage,return false;)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, const struct FFunctionExpressionOutput& Output) PURE_VIRTUAL(UMaterialFunctionInterface::Compile,return INDEX_NONE;)"
  },
  {
    "label": "LinkIntoCaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkIntoCaller(const TArray<FFunctionExpressionInput>& CallerInputs) PURE_VIRTUAL(UMaterialFunctionInterface::LinkIntoCaller,)"
  },
  {
    "label": "UnlinkFromCaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFromCaller() PURE_VIRTUAL(UMaterialFunctionInterface::UnlinkFromCaller,)"
  },
  {
    "label": "IsDependent()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsDependent(UMaterialFunctionInterface* OtherFunction) PURE_VIRTUAL(UMaterialFunctionInterface::IsDependent,return false;)"
  },
  {
    "label": "IterateDependentFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDependentFunctions(TFunctionRef<bool(UMaterialFunctionInterface*)> Predicate) const PURE_VIRTUAL(UMaterialFunctionInterface::IterateDependentFunctions,return false;)"
  },
  {
    "label": "GetDependentFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentFunctions(TArray<UMaterialFunctionInterface*>& DependentFunctions) const PURE_VIRTUAL(UMaterialFunctionInterface::GetDependentFunctions,)"
  },
  {
    "label": "GetUserExposedCaption()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUserExposedCaption()"
  },
  {
    "label": "GetPreviewMaterial()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_EDITOR UMaterialInterface*)",
    "insertText": "GetPreviewMaterial() PURE_VIRTUAL(UMaterialFunctionInterface::GetPreviewMaterial,return nullptr;)"
  },
  {
    "label": "UpdateInputOutputTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputOutputTypes() PURE_VIRTUAL(UMaterialFunctionInterface::UpdateInputOutputTypes,)"
  },
  {
    "label": "HasFlippedCoordinates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFlippedCoordinates() const PURE_VIRTUAL(UMaterialFunctionInterface::HasFlippedCoordinates,return false;)"
  },
  {
    "label": "GetBaseFunction()",
    "kind": "Method",
    "detail": "Function (# endif UMaterialFunction*)",
    "insertText": "GetBaseFunction(FMFRecursionGuard RecursionGuard = FMFRecursionGuard()) PURE_VIRTUAL(UMaterialFunction::GetBaseFunction,return nullptr;)"
  },
  {
    "label": "GetBaseFunction()",
    "kind": "Method",
    "detail": "Function (const UMaterialFunction*)",
    "insertText": "GetBaseFunction(FMFRecursionGuard RecursionGuard = FMFRecursionGuard()) const PURE_VIRTUAL(UMaterialFunction::GetBaseFunction,return nullptr;)"
  },
  {
    "label": "GetBaseFunctionInterface()",
    "kind": "Method",
    "detail": "Function (UMaterialFunctionInterface*)",
    "insertText": "GetBaseFunctionInterface()"
  },
  {
    "label": "GetExpressions()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TConstArrayView<TObjectPtr<UMaterialExpression>>)",
    "insertText": "GetExpressions()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_EDITOR const FString&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetReentrantFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReentrantFlag()"
  },
  {
    "label": "SetReentrantFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReentrantFlag(bool bIsReentrant)"
  },
  {
    "label": "GetNamedParameterOfType()",
    "kind": "Method",
    "detail": "Function (# endif public : # if WITH_EDITOR template<ExpressionType> bool)",
    "insertText": "GetNamedParameterOfType(const FHashedMaterialParameterInfo& ParameterInfo, ExpressionType*& Parameter, UMaterialFunctionInterface** OwningFunction = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parameter = nullptr ;)",
    "insertText": "if(UMaterialFunctionInterface* ParameterFunction = GetBaseFunctionInterface())"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (const UClass* TargetClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "TargetClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TargetClass(UMaterialFunctionInterface* Function)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parameter = ExpressionParameter ;)",
    "insertText": "if(OwningFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; } } } return true ; } ;)",
    "insertText": "if(!ParameterFunction->IterateDependentFunctions(GetExpressionParameterByNamePredicate))"
  },
  {
    "label": "UpdateParameterSet()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<ParameterType,ExpressionType> bool)",
    "insertText": "UpdateParameterSet(ParameterType& Parameter)"
  },
  {
    "label": "GetDependentFunctions()",
    "kind": "Method",
    "detail": "Function (TArray<UMaterialFunctionInterface*> Functions ; ParameterFunction ->)",
    "insertText": "GetDependentFunctions(Functions)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Functions .)",
    "insertText": "AddUnique(ParameterFunction)"
  },
  {
    "label": "HasAnyExpressionsOfType()",
    "kind": "Method",
    "detail": "Function (Parameter . ExpressionGUID = ParameterExpression -> ExpressionGUID ; bChanged = true ; break ; } } } } } return bChanged ; } # endif # if WITH_EDITORONLY_DATA template<ExpressionType> bool)",
    "insertText": "HasAnyExpressionsOfType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<UMaterialFunctionInterface*> Functions ;)",
    "insertText": "if(bRecursive)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutExpressions .)",
    "insertText": "Add(FunctionExpressionOfType)"
  },
  {
    "label": "GetParameterOverrideValue()",
    "kind": "Method",
    "detail": "Function (} } } } } # endif # if WITH_EDITOR bool)",
    "insertText": "GetParameterOverrideValue(EMaterialParameterType Type, const FName& ParameterName, FMaterialParameterMetadata& OutValue, FMFRecursionGuard RecursionGuard = FMFRecursionGuard())"
  },
  {
    "label": "OverrideNamedScalarParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedScalarParameter(const FHashedMaterialParameterInfo& ParameterInfo, float& OutValue)"
  },
  {
    "label": "OverrideNamedVectorParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedVectorParameter(const FHashedMaterialParameterInfo& ParameterInfo, FLinearColor& OutValue)"
  },
  {
    "label": "OverrideNamedTextureParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedTextureParameter(const FHashedMaterialParameterInfo& ParameterInfo, class UTexture*& OutValue)"
  },
  {
    "label": "OverrideNamedTextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedTextureCollectionParameter(const FHashedMaterialParameterInfo& ParameterInfo, class UTextureCollection*& OutValue)"
  },
  {
    "label": "OverrideNamedRuntimeVirtualTextureParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedRuntimeVirtualTextureParameter(const FHashedMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture*& OutValue)"
  },
  {
    "label": "OverrideNamedSparseVolumeTextureParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedSparseVolumeTextureParameter(const FHashedMaterialParameterInfo& ParameterInfo, class USparseVolumeTexture*& OutValue)"
  },
  {
    "label": "OverrideNamedFontParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedFontParameter(const FHashedMaterialParameterInfo& ParameterInfo, class UFont*& OutFontValue, int32& OutFontPage)"
  },
  {
    "label": "OverrideNamedStaticSwitchParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedStaticSwitchParameter(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutValue, FGuid& OutExpressionGuid)"
  },
  {
    "label": "OverrideNamedStaticComponentMaskParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideNamedStaticComponentMaskParameter(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutR, bool& OutG, bool& OutB, bool& OutA, FGuid& OutExpressionGuid)"
  },
  {
    "label": "IsUsingControlFlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingControlFlow()"
  }
]