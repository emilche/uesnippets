[
  {
    "label": "ValidateFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ValidateFlag"
  },
  {
    "label": "SchemaDraft",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SchemaDraft"
  },
  {
    "label": "OpenApiVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OpenApiVersion"
  },
  {
    "label": "Specification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Specification"
  },
  {
    "label": "GenericSchemaDocument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericSchemaDocument"
  },
  {
    "label": "Schema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Schema"
  },
  {
    "label": "ISchemaValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISchemaValidator"
  },
  {
    "label": "ISchemaStateFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISchemaStateFactory"
  },
  {
    "label": "IValidationErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IValidationErrorHandler"
  },
  {
    "label": "Hasher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hasher"
  },
  {
    "label": "Number",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Number"
  },
  {
    "label": "SchemaValidationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchemaValidationContext"
  },
  {
    "label": "PatternValidatorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PatternValidatorType"
  },
  {
    "label": "SchemaValueType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SchemaValueType"
  },
  {
    "label": "SchemaArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchemaArray"
  },
  {
    "label": "Property",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Property"
  },
  {
    "label": "PatternProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatternProperty"
  },
  {
    "label": "TokenHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TokenHelper"
  },
  {
    "label": "IGenericRemoteSchemaDocumentProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGenericRemoteSchemaDocumentProvider"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "GenericSchemaValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericSchemaValidator"
  },
  {
    "label": "SchemaEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchemaEntry"
  },
  {
    "label": "SchemaValidatingReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchemaValidatingReader"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_SCHEMA_H_ # define RAPIDJSON_SCHEMA_H_ # include \" document . h \" # include \" pointer . h \" # include \" stringbuffer . h \" # include \" error / en . h \" # include \" uri . h \" # include<cmath> # if !)",
    "insertText": "defined(RAPIDJSON_SCHEMA_USE_INTERNALREGEX) #define RAPIDJSON_SCHEMA_USE_INTERNALREGEX 1 #endif #if !defined(RAPIDJSON_SCHEMA_USE_STDREGEX) || !(__cplusplus >=201103L || (defined(_MSC_VER) && _MSC_VER >= 1800)) #define RAPIDJSON_SCHEMA_USE_STDREGEX 0 #endif #if RAPIDJSON_SCHEMA_USE_INTERNALREGEX #include \"internal/regex.h\" #elif RAPIDJSON_SCHEMA_USE_STDREGEX #include <regex> #endif #if RAPIDJSON_SCHEMA_USE_INTERNALREGEX || RAPIDJSON_SCHEMA_USE_STDREGEX #define RAPIDJSON_SCHEMA_HAS_REGEX 1 #else #define RAPIDJSON_SCHEMA_HAS_REGEX 0 #endif #ifndef RAPIDJSON_SCHEMA_VERBOSE #define RAPIDJSON_SCHEMA_VERBOSE 0 #endif RAPIDJSON_DIAG_PUSH #if defined(__GNUC__) RAPIDJSON_DIAG_OFF(effc++) #endif #ifdef __clang__ RAPIDJSON_DIAG_OFF(weak-vtables) RAPIDJSON_DIAG_OFF(exit-time-destructors) RAPIDJSON_DIAG_OFF(c++98-compat-pedantic) RAPIDJSON_DIAG_OFF(variadic-macros) #elif defined(_MSC_VER) RAPIDJSON_DIAG_OFF(4512)"
  },
  {
    "label": "PrintInvalidKeywordData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintInvalidKeywordData(const char* keyword)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Fail keyword: '%s'\\n\", keyword)"
  },
  {
    "label": "PrintInvalidKeywordData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintInvalidKeywordData(const wchar_t* keyword)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\" Fail keyword: '%ls'\\n\", keyword)"
  },
  {
    "label": "PrintInvalidDocumentData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintInvalidDocumentData(const char* document)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Fail document: '%s'\\n\", document)"
  },
  {
    "label": "PrintInvalidDocumentData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintInvalidDocumentData(const wchar_t* document)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\" Fail document: '%ls'\\n\", document)"
  },
  {
    "label": "PrintValidatorPointersData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintValidatorPointersData(const char* s, const char* d, unsigned depth)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Sch: %*s'%s'\\n Doc: %*s'%s'\\n\", depth * 4, \" \", s, depth * 4, \" \", d)"
  },
  {
    "label": "PrintValidatorPointersData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintValidatorPointersData(const wchar_t* s, const wchar_t* d, unsigned depth)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\" Sch: %*ls'%ls'\\n Doc: %*ls'%ls'\\n\", depth * 4, L\" \", s, depth * 4, L\" \", d)"
  },
  {
    "label": "PrintSchemaIdsData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintSchemaIdsData(const char* base, const char* local, const char* resolved)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\" Resolving id: Base: '%s', Local: '%s', Resolved: '%s'\\n\", base, local, resolved)"
  },
  {
    "label": "PrintSchemaIdsData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintSchemaIdsData(const wchar_t* base, const wchar_t* local, const wchar_t* resolved)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\" Resolving id: Base: '%ls', Local: '%ls', Resolved: '%ls'\\n\", base, local, resolved)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s\\n\", method)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, bool b)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%s'\\n\", method, b ? \"true\" : \"false\")"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, int64_t i)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%\" PRId64 \"'\\n\", method, i)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, uint64_t u)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%\" PRIu64 \"'\\n\", method, u)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, double d)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%lf'\\n\", method, d)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, const char* s)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%s'\\n\", method, s)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, const wchar_t* s)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\"%hs, Data: '%ls'\\n\", method, s)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, const char* s1, const char* s2)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"%s, Data: '%s', '%s'\\n\", method, s1, s2)"
  },
  {
    "label": "PrintMethodData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintMethodData(const char* method, const wchar_t* s1, const wchar_t* s2)"
  },
  {
    "label": "wprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wprintf(L\"%hs, Data: '%ls', '%ls'\\n\", method, s1, s2)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (} } # endif # ifndef RAPIDJSON_SCHEMA_PRINT # if RAPIDJSON_SCHEMA_VERBOSE # define)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(name, ...) internal::Print##name##Data(__VA_ARGS__) #else #define RAPIDJSON_SCHEMA_PRINT(name, ...) #endif #endif #define RAPIDJSON_INVALID_KEYWORD_RETURN(code)"
  },
  {
    "label": "GetValidateErrorKeyword()",
    "kind": "Method",
    "detail": "Function (\\ context . invalidKeyword =)",
    "insertText": "GetValidateErrorKeyword(code).GetString()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(InvalidKeyword, context.invalidKeyword)"
  },
  {
    "label": "Specification()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ RAPIDJSON_MULTILINEMACRO_END # ifndef RAPIDJSON_VALIDATE_DEFAULT_FLAGS # define RAPIDJSON_VALIDATE_DEFAULT_FLAGS kValidateNoFlags # endif enum ValidateFlag { kValidateNoFlags = 0,kValidateContinueOnErrorFlag = 1,kValidateReadFlag = 2,kValidateWriteFlag = 4,kValidateDefaultFlags = RAPIDJSON_VALIDATE_DEFAULT_FLAGS } ; enum SchemaDraft { kDraftUnknown = - 1,kDraftNone = 0,kDraft03 = 3,kDraftMin = 4,kDraft04 = 4,kDraft05 = 5,kDraftMax = 5,kDraft06 = 6,kDraft07 = 7,kDraft2019_09 = 8,kDraft2020_12 = 9 } ; enum OpenApiVersion { kVersionUnknown = - 1,kVersionNone = 0,kVersionMin = 2,kVersion20 = 2,kVersion30 = 3,kVersionMax = 3,kVersion31 = 4,} ; struct Specification {)",
    "insertText": "Specification(SchemaDraft d) : draft(d), oapi(kVersionNone)"
  },
  {
    "label": "Specification()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Specification(OpenApiVersion o) : oapi(o)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "ISchemaValidator()",
    "kind": "Method",
    "detail": "Function (} SchemaDraft draft ; OpenApiVersion oapi ; } ; template<ValueType,Allocator> class GenericSchemaDocument ; namespace internal { template<SchemaDocumentType> class Schema ; class ISchemaValidator { public : ~)",
    "insertText": "ISchemaValidator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetValidateFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidateFlags(unsigned flags)"
  },
  {
    "label": "GetValidateFlags()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetValidateFlags()"
  },
  {
    "label": "ISchemaStateFactory()",
    "kind": "Method",
    "detail": "Function (} ; template<SchemaType> class ISchemaStateFactory { public : ~)",
    "insertText": "ISchemaStateFactory()"
  },
  {
    "label": "CreateSchemaValidator()",
    "kind": "Method",
    "detail": "Function (} ISchemaValidator*)",
    "insertText": "CreateSchemaValidator(const SchemaType&, const bool inheritContinueOnErrors)"
  },
  {
    "label": "DestroySchemaValidator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySchemaValidator(ISchemaValidator* validator)"
  },
  {
    "label": "CreateHasher()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CreateHasher()"
  },
  {
    "label": "GetHashCode()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetHashCode(void* hasher)"
  },
  {
    "label": "DestroryHasher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroryHasher(void* hasher)"
  },
  {
    "label": "MallocState()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "MallocState(size_t size)"
  },
  {
    "label": "FreeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeState(void* p)"
  },
  {
    "label": "IValidationErrorHandler()",
    "kind": "Method",
    "detail": "Function (} ; template<SchemaType> class IValidationErrorHandler { public : typedef SchemaType::Ch Ch ; typedef SchemaType::SValue SValue ; ~)",
    "insertText": "IValidationErrorHandler()"
  },
  {
    "label": "NotMultipleOf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotMultipleOf(int64_t actual, const SValue& expected)"
  },
  {
    "label": "NotMultipleOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotMultipleOf(uint64_t actual, const SValue& expected)"
  },
  {
    "label": "NotMultipleOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotMultipleOf(double actual, const SValue& expected)"
  },
  {
    "label": "AboveMaximum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboveMaximum(int64_t actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "AboveMaximum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboveMaximum(uint64_t actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "AboveMaximum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboveMaximum(double actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "BelowMinimum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BelowMinimum(int64_t actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "BelowMinimum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BelowMinimum(uint64_t actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "BelowMinimum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BelowMinimum(double actual, const SValue& expected, bool exclusive)"
  },
  {
    "label": "TooLong()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooLong(const Ch* str, SizeType length, SizeType expected)"
  },
  {
    "label": "TooShort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooShort(const Ch* str, SizeType length, SizeType expected)"
  },
  {
    "label": "DoesNotMatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoesNotMatch(const Ch* str, SizeType length)"
  },
  {
    "label": "DisallowedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedItem(SizeType index)"
  },
  {
    "label": "TooFewItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooFewItems(SizeType actualCount, SizeType expectedCount)"
  },
  {
    "label": "TooManyItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooManyItems(SizeType actualCount, SizeType expectedCount)"
  },
  {
    "label": "DuplicateItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateItems(SizeType index1, SizeType index2)"
  },
  {
    "label": "TooManyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooManyProperties(SizeType actualCount, SizeType expectedCount)"
  },
  {
    "label": "TooFewProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TooFewProperties(SizeType actualCount, SizeType expectedCount)"
  },
  {
    "label": "StartMissingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMissingProperties()"
  },
  {
    "label": "AddMissingProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMissingProperty(const SValue& name)"
  },
  {
    "label": "EndMissingProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndMissingProperties()"
  },
  {
    "label": "PropertyViolations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyViolations(ISchemaValidator** subvalidators, SizeType count)"
  },
  {
    "label": "DisallowedProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedProperty(const Ch* name, SizeType length)"
  },
  {
    "label": "StartDependencyErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDependencyErrors()"
  },
  {
    "label": "StartMissingDependentProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMissingDependentProperties()"
  },
  {
    "label": "AddMissingDependentProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMissingDependentProperty(const SValue& targetName)"
  },
  {
    "label": "EndMissingDependentProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMissingDependentProperties(const SValue& sourceName)"
  },
  {
    "label": "AddDependencySchemaError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySchemaError(const SValue& souceName, ISchemaValidator* subvalidator)"
  },
  {
    "label": "EndDependencyErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndDependencyErrors()"
  },
  {
    "label": "DisallowedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedValue(const ValidateErrorCode code)"
  },
  {
    "label": "StartDisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDisallowedType()"
  },
  {
    "label": "AddExpectedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedType(const typename SchemaType::ValueType& expectedType)"
  },
  {
    "label": "EndDisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDisallowedType(const typename SchemaType::ValueType& actualType)"
  },
  {
    "label": "NotAllOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotAllOf(ISchemaValidator** subvalidators, SizeType count)"
  },
  {
    "label": "NoneOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoneOf(ISchemaValidator** subvalidators, SizeType count)"
  },
  {
    "label": "NotOneOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotOneOf(ISchemaValidator** subvalidators, SizeType count)"
  },
  {
    "label": "MultipleOneOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultipleOneOf(SizeType index1, SizeType index2)"
  },
  {
    "label": "Disallowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disallowed()"
  },
  {
    "label": "DisallowedWhenWriting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedWhenWriting()"
  },
  {
    "label": "DisallowedWhenReading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedWhenReading()"
  },
  {
    "label": "Hasher()",
    "kind": "Method",
    "detail": "Function (} ; template<Encoding,Allocator> class Hasher { public : typedef Encoding::Ch Ch ;)",
    "insertText": "Hasher(Allocator* allocator = 0, size_t stackCapacity = kDefaultSize) : stack_(allocator, stackCapacity)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Null()"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Bool(bool b)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int(int i)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Number n ; n . u . i = i ; n . d = static_cast<)",
    "insertText": "double(i)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint(unsigned u)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Number n ; n . u . u = u ; n . d = static_cast<)",
    "insertText": "double(u)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int64(int64_t i)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint64(uint64_t u)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Double(double d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Number n ;)",
    "insertText": "if(d < 0) n.u.i = static_cast<int64_t>(d)"
  },
  {
    "label": "WriteNumber()",
    "kind": "Method",
    "detail": "Function (n . d = d ; return)",
    "insertText": "WriteNumber(n)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawNumber(const Ch* str, SizeType len, bool)"
  },
  {
    "label": "WriteBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBuffer(kNumberType, str, len * sizeof(Ch))"
  },
  {
    "label": "WriteBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBuffer(kStringType, str, len * sizeof(Ch))"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndObject(SizeType memberCount)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (uint64_t h =)",
    "insertText": "Hash(0, kObjectType)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t* kv = stack_ . template Pop<)",
    "insertText": "uint64_t(memberCount * 2)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (* stack_ . template Push<)",
    "insertText": "uint64_t()"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (uint64_t h =)",
    "insertText": "Hash(0, kArrayType)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t* e = stack_ . template Pop<)",
    "insertText": "uint64_t(elementCount)"
  },
  {
    "label": "GetHashCode()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "GetHashCode()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsValid())"
  },
  {
    "label": "WriteType()",
    "kind": "Method",
    "detail": "Function (} private : const size_t kDefaultSize = 2 5 6 ; struct Number { union U { uint64_t u ; int64_t i ; } u ; double d ; } ; bool)",
    "insertText": "WriteType(Type type)"
  },
  {
    "label": "WriteNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteNumber(const Number& n)"
  },
  {
    "label": "WriteBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteBuffer(Type type, const void* data, size_t len)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (uint64_t h =)",
    "insertText": "Hash(RAPIDJSON_UINT64_C2(0xcbf29ce4, 0x84222325), type)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned char* d = static_cast<const unsigned)",
    "insertText": "char(data)"
  },
  {
    "label": "RAPIDJSON_UINT64_C2()",
    "kind": "Method",
    "detail": "Function (const uint64_t kPrime =)",
    "insertText": "RAPIDJSON_UINT64_C2(0x00000100, 0x000001b3)"
  },
  {
    "label": "SchemaValidationContext()",
    "kind": "Method",
    "detail": "Function (h ^ = d ; h* = kPrime ; return h ; } Stack<Allocator> stack_ ; } ; template<SchemaDocumentType> struct SchemaValidationContext { typedef Schema<SchemaDocumentType> SchemaType ; typedef ISchemaStateFactory<SchemaType> SchemaValidatorFactoryType ; typedef IValidationErrorHandler<SchemaType> ErrorHandlerType ; typedef SchemaType::ValueType ValueType ; typedef ValueType::Ch Ch ; enum PatternValidatorType { kPatternValidatorOnly,kPatternValidatorWithProperty,kPatternValidatorWithAdditionalProperty } ;)",
    "insertText": "SchemaValidationContext(SchemaValidatorFactoryType& f, ErrorHandlerType& eh, const SchemaType* s, unsigned fl = 0) : factory(f), error_handler(eh), schema(s), flags(fl), valueSchema(), invalidKeyword(), invalidCode(), hasher(), arrayElementHashCodes(), validators(), validatorCount(), patternPropertiesValidators(), patternPropertiesValidatorCount(), patternPropertiesSchemas(), patternPropertiesSchemaCount(), valuePatternValidatorType(kPatternValidatorOnly), propertyExist(), inArray(false), valueUniqueness(false), arrayUniqueness(false)"
  },
  {
    "label": "SchemaValidationContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SchemaValidationContext()"
  },
  {
    "label": "DestroySchemaValidator()",
    "kind": "Method",
    "detail": "Function (factory .)",
    "insertText": "DestroySchemaValidator(validators[i])"
  },
  {
    "label": "FreeState()",
    "kind": "Method",
    "detail": "Function (} } factory .)",
    "insertText": "FreeState(validators)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(patternPropertiesValidators)"
  },
  {
    "label": "DestroySchemaValidator()",
    "kind": "Method",
    "detail": "Function (factory .)",
    "insertText": "DestroySchemaValidator(patternPropertiesValidators[i])"
  },
  {
    "label": "FreeState()",
    "kind": "Method",
    "detail": "Function (} } factory .)",
    "insertText": "FreeState(patternPropertiesValidators)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(patternPropertiesSchemas) factory.FreeState(patternPropertiesSchemas)"
  },
  {
    "label": "Schema()",
    "kind": "Method",
    "detail": "Function (} SchemaValidatorFactoryType& factory ; ErrorHandlerType& error_handler ; const SchemaType* schema ; unsigned flags ; const SchemaType* valueSchema ; const Ch* invalidKeyword ; ValidateErrorCode invalidCode ; void* hasher ; void* arrayElementHashCodes ; ISchemaValidator** validators ; SizeType validatorCount ; ISchemaValidator** patternPropertiesValidators ; SizeType patternPropertiesValidatorCount ; const SchemaType** patternPropertiesSchemas ; SizeType patternPropertiesSchemaCount ; PatternValidatorType valuePatternValidatorType ; PatternValidatorType objectPatternValidatorType ; SizeType arrayElementIndex ; bool* propertyExist ; bool inArray ; bool valueUniqueness ; bool arrayUniqueness ; } ; template<SchemaDocumentType> class Schema { public : typedef SchemaDocumentType::ValueType ValueType ; typedef SchemaDocumentType::AllocatorType AllocatorType ; typedef SchemaDocumentType::PointerType PointerType ; typedef ValueType::EncodingType EncodingType ; typedef EncodingType::Ch Ch ; typedef SchemaValidationContext<SchemaDocumentType> Context ; typedef Schema<SchemaDocumentType> SchemaType ; typedef GenericValue<EncodingType,AllocatorType> SValue ; typedef IValidationErrorHandler<Schema> ErrorHandler ; typedef GenericUri<ValueType,AllocatorType> UriType ; class GenericSchemaDocument<ValueType,AllocatorType> ;)",
    "insertText": "Schema(SchemaDocumentType* schemaDocument, const PointerType& p, const ValueType& value, const ValueType& document, AllocatorType* allocator, const UriType& id = UriType()) : allocator_(allocator), uri_(schemaDocument->GetURI(), *allocator), id_(id, allocator), spec_(schemaDocument->GetSpecification()), pointer_(p, allocator), typeless_(schemaDocument->GetTypeless()), enum_(), enumCount_(), not_(), type_((1 << kTotalSchemaType) - 1), validatorCount_(), notValidatorIndex_(), properties_(), additionalPropertiesSchema_(), patternProperties_(), patternPropertyCount_(), propertyCount_(), minProperties_(), maxProperties_(SizeType(~0)), additionalProperties_(true), hasDependencies_(), hasRequired_(), hasSchemaDependencies_(), additionalItemsSchema_(), itemsList_(), itemsTuple_(), itemsTupleCount_(), minItems_(), maxItems_(SizeType(~0)), additionalItems_(true), uniqueItems_(false), pattern_(), minLength_(0), maxLength_(~SizeType(0)), exclusiveMinimum_(false), exclusiveMaximum_(false), defaultValueLength_(0), readOnly_(false), writeOnly_(false), nullable_(false)"
  },
  {
    "label": "StringifyUriFragment()",
    "kind": "Method",
    "detail": "Function (GenericStringBuffer<EncodingType> sb ; p .)",
    "insertText": "StringifyUriFragment(sb)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Schema\", sb.GetString(), id.GetString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef ValueType::ConstValueIterator ConstValueIterator ; typedef ValueType::ConstMemberIterator ConstMemberIterator ;)",
    "insertText": "if(this != typeless_)"
  },
  {
    "label": "SchemaEntry()",
    "kind": "Method",
    "detail": "Function (typedef SchemaDocumentType::SchemaEntry SchemaEntry ; SchemaEntry* entry = schemaDocument -> schemaMap_ . template Push<)",
    "insertText": "SchemaEntry()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(entry) SchemaEntry(pointer_, this, true, allocator_)"
  },
  {
    "label": "AddSchemaRefs()",
    "kind": "Method",
    "detail": "Function (schemaDocument ->)",
    "insertText": "AddSchemaRefs(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!value.IsObject())"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (UriType)",
    "insertText": "local(*v, allocator)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (id_ = local .)",
    "insertText": "Resolve(id_, allocator)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(SchemaIds, id.GetString(), v->GetString(), id_.GetString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(const ValueType* v = GetMember(value, GetTypeString()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (type_ = 0 ;)",
    "insertText": "if(v->IsString()) AddType(*v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(const ValueType* v = GetMember(value, GetEnumString()))"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (enum_ = static_cast<)",
    "insertText": "uint64_t(allocator_->Malloc(sizeof(uint64_t) * v->Size()))"
  },
  {
    "label": "hasherAllocator()",
    "kind": "Method",
    "detail": "Function (typedef Hasher<EncodingType,MemoryPoolAllocator<AllocatorType>> EnumHasherType ; char buffer [ 2 5 6 u + 2 4 ] ; MemoryPoolAllocator<AllocatorType>)",
    "insertText": "hasherAllocator(buffer, sizeof(buffer))"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (EnumHasherType)",
    "insertText": "h(&hasherAllocator, 256)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (itr ->)",
    "insertText": "Accept(h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(schemaDocument) AssignIfExist(allOf_, *schemaDocument, p, value, GetAllOfString(), document)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(anyOf_, *schemaDocument, p, value, GetAnyOfString(), document)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(oneOf_, *schemaDocument, p, value, GetOneOfString(), document)"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (schemaDocument ->)",
    "insertText": "CreateSchema(&not_, p.Append(GetNotString(), allocator_), *v, document, id_)"
  },
  {
    "label": "GetMember()",
    "kind": "Method",
    "detail": "Function (notValidatorIndex_ = validatorCount_ ; validatorCount_ + + ; } } const ValueType* properties =)",
    "insertText": "GetMember(value, GetPropertiesString())"
  },
  {
    "label": "GetMember()",
    "kind": "Method",
    "detail": "Function (const ValueType* required =)",
    "insertText": "GetMember(value, GetRequiredString())"
  },
  {
    "label": "GetMember()",
    "kind": "Method",
    "detail": "Function (const ValueType* dependencies =)",
    "insertText": "GetMember(value, GetDependenciesString())"
  },
  {
    "label": "allProperties()",
    "kind": "Method",
    "detail": "Function ({ SValue)",
    "insertText": "allProperties(kArrayType)"
  },
  {
    "label": "AddUniqueElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueElement(allProperties, itr->name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(allProperties.Size() > 0)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (propertyCount_ = allProperties .)",
    "insertText": "Size()"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (properties_ = static_cast<)",
    "insertText": "Property(allocator_->Malloc(sizeof(Property) * propertyCount_))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&properties_[i]) Property()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (properties_ [ i ] . name = allProperties [ i ] ; properties_ [ i ] . schema = typeless_ ; } } })",
    "insertText": "if(properties && properties->IsObject())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType q = p .)",
    "insertText": "Append(GetPropertiesString(), allocator_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType index ;)",
    "insertText": "if(FindPropertyIndex(itr->name, &index)) schemaDocument->CreateSchema(&properties_[index].schema, q.Append(itr->name, allocator_), itr->value, document, id_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(spec_.oapi != kVersion20 && spec_.oapi != kVersion30) if (const ValueType* v = GetMember(value, GetPatternPropertiesString()))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType q = p .)",
    "insertText": "Append(GetPatternPropertiesString(), allocator_)"
  },
  {
    "label": "PatternProperty()",
    "kind": "Method",
    "detail": "Function (patternProperties_ = static_cast<)",
    "insertText": "PatternProperty(allocator_->Malloc(sizeof(PatternProperty) * v->MemberCount()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (patternPropertyCount_ = 0 ;)",
    "insertText": "for(ConstMemberIterator itr = v->MemberBegin(); itr != v->MemberEnd(); ++itr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&patternProperties_[patternPropertyCount_]) PatternProperty()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType r = q .)",
    "insertText": "Append(itr->name, allocator_)"
  },
  {
    "label": "CreatePattern()",
    "kind": "Method",
    "detail": "Function (patternProperties_ [ patternPropertyCount_ ] . pattern =)",
    "insertText": "CreatePattern(itr->name, schemaDocument, r)"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (schemaDocument ->)",
    "insertText": "CreateSchema(&patternProperties_[patternPropertyCount_].schema, r, itr->value, document, id_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (patternPropertyCount_ + + ; } })",
    "insertText": "if(required && required->IsArray()) for (ConstValueIterator itr = required->Begin(); itr != required->End(); ++itr) if (itr->IsString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType index ;)",
    "insertText": "if(FindPropertyIndex(*itr, &index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (properties_ [ index ] . required = true ; hasRequired_ = true ; } })",
    "insertText": "if(spec_.oapi != kVersion20 && spec_.oapi != kVersion30) if (dependencies && dependencies->IsObject())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType q = p .)",
    "insertText": "Append(GetDependenciesString(), allocator_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (hasDependencies_ = true ;)",
    "insertText": "for(ConstMemberIterator itr = dependencies->MemberBegin(); itr != dependencies->MemberEnd(); ++itr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType sourceIndex ;)",
    "insertText": "if(FindPropertyIndex(itr->name, &sourceIndex))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (properties_ [ sourceIndex ] . dependencies = static_cast<)",
    "insertText": "bool(allocator_->Malloc(sizeof(bool) * propertyCount_))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(properties_[sourceIndex].dependencies, 0, sizeof(bool)* propertyCount_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType targetIndex ;)",
    "insertText": "if(FindPropertyIndex(*targetItr, &targetIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(itr->value.IsObject())"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (hasSchemaDependencies_ = true ; schemaDocument ->)",
    "insertText": "CreateSchema(&properties_[sourceIndex].dependenciesSchema, q.Append(itr->name, allocator_), itr->value, document, id_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (properties_ [ sourceIndex ] . dependenciesValidatorIndex = validatorCount_ ; validatorCount_ + + ; } } } })",
    "insertText": "if(const ValueType* v = GetMember(value, GetAdditionalPropertiesString()))"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssignIfExist(minProperties_, value, GetMinPropertiesString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(maxProperties_, value, GetMaxPropertiesString())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType q = p .)",
    "insertText": "Append(GetItemsString(), allocator_)"
  },
  {
    "label": "Schema()",
    "kind": "Method",
    "detail": "Function (itemsTuple_ = static_cast<const)",
    "insertText": "Schema(allocator_->Malloc(sizeof(const Schema*) * v->Size()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SizeType index = 0 ;)",
    "insertText": "for(ConstValueIterator itr = v->Begin(); itr != v->End(); ++itr, index++) schemaDocument->CreateSchema(&itemsTuple_[itemsTupleCount_++], q.Append(index, allocator_), *itr, document, id_)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "AssignIfExist(minItems_, value, GetMinItemsString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(maxItems_, value, GetMaxItemsString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssignIfExist(uniqueItems_, value, GetUniqueItemsString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(minLength_, value, GetMinLengthString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(maxLength_, value, GetMaxLengthString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(exclusiveMinimum_, value, GetExclusiveMinimumString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(exclusiveMaximum_, value, GetExclusiveMaximumString())"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIfExist(nullable_, value, GetNullableString())"
  },
  {
    "label": "Schema()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "Schema()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(enum_)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(properties_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(patternProperties_)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(patternProperties_)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Free(itemsTuple_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_SCHEMA_HAS_REGEX)",
    "insertText": "if(pattern_)"
  },
  {
    "label": "RegexType()",
    "kind": "Method",
    "detail": "Function (pattern_ -> ~)",
    "insertText": "RegexType()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(pattern_)"
  },
  {
    "label": "GetURI()",
    "kind": "Method",
    "detail": "Function (} # endif } const SValue&)",
    "insertText": "GetURI()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::BeginValue\")"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (context . valueSchema = typeless_ ; context . arrayElementIndex + + ;)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorAdditionalItems)"
  },
  {
    "label": "EndValue()",
    "kind": "Method",
    "detail": "Function (} } else context . valueSchema = typeless_ ; context . arrayElementIndex + + ; } return true ; } RAPIDJSON_FORCEINLINE bool)",
    "insertText": "EndValue(Context& context)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::EndValue\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool otherValid = false ; SizeType count = context . patternPropertiesValidatorCount ;)",
    "insertText": "if(context.objectPatternValidatorType != Context::kPatternValidatorOnly) otherValid = context.patternPropertiesValidators[--count]->IsValid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool patternValid = true ;)",
    "insertText": "for(SizeType i = 0; i < count; i++) if (!context.patternPropertiesValidators[i]->IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (patternValid = false ; break ; })",
    "insertText": "if(context.objectPatternValidatorType == Context::kPatternValidatorOnly)"
  },
  {
    "label": "PropertyViolations()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "PropertyViolations(context.patternPropertiesValidators, count)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorPatternProperties)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(context.objectPatternValidatorType == Context::kPatternValidatorWithProperty)"
  },
  {
    "label": "PropertyViolations()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "PropertyViolations(context.patternPropertiesValidators, count + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!patternValid && !otherValid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(enum_ && context.hasher)"
  },
  {
    "label": "GetHashCode()",
    "kind": "Method",
    "detail": "Function (const uint64_t h = context . factory .)",
    "insertText": "GetHashCode(context.hasher)"
  },
  {
    "label": "DisallowedValue()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "DisallowedValue(kValidateErrorEnum)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorEnum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (foundEnum : ; })",
    "insertText": "if(context.validatorCount > 0)"
  },
  {
    "label": "NotAllOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "NotAllOf(&context.validators[allOf_.begin], allOf_.count)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorAllOf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(anyOf_.schemas)"
  },
  {
    "label": "NoneOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "NoneOf(&context.validators[anyOf_.begin], anyOf_.count)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorAnyOf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (foundAny : ; })",
    "insertText": "if(oneOf_.schemas)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool oneValid = false ; SizeType firstMatch = 0 ;)",
    "insertText": "for(SizeType i = oneOf_.begin; i < oneOf_.begin + oneOf_.count; i++) if (context.validators[i]->IsValid())"
  },
  {
    "label": "MultipleOneOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "MultipleOneOf(firstMatch, i - oneOf_.begin)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorOneOfMatch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { oneValid = true ; firstMatch = i - oneOf_ . begin ; } })",
    "insertText": "if(!oneValid)"
  },
  {
    "label": "NotOneOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "NotOneOf(&context.validators[oneOf_.begin], oneOf_.count)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorOneOf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(not_ && context.validators[notValidatorIndex_]->IsValid())"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorNot)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "Null(Context& context)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Null\")"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetNullString())"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorType)"
  },
  {
    "label": "CreateParallelValidator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateParallelValidator(context)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Bool(Context& context, bool b)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Bool\", b)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int(Context& context, int i)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Int\", (int64_t)i)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint(Context& context, unsigned u)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Uint\", (uint64_t)u)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int64(Context& context, int64_t i)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Int64\", i)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint64(Context& context, uint64_t u)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Uint64\", u)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Double(Context& context, double d)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Double\", d)"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetNumberString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!minimum_.IsNull() && !CheckDoubleMinimum(context, d))"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(Context& context, const Ch* str, SizeType length, bool)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::String\", str)"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetStringString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(minLength_ != 0 || maxLength_ != SizeType(~0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeType count ;)",
    "insertText": "if(internal::CountStringCodePoint<EncodingType>(str, length, &count))"
  },
  {
    "label": "TooShort()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooShort(str, length, minLength_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMinLength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(count > maxLength_)"
  },
  {
    "label": "TooLong()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooLong(str, length, maxLength_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMaxLength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(pattern_ && !IsPatternMatch(pattern_, str, length))"
  },
  {
    "label": "DoesNotMatch()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "DoesNotMatch(str, length)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorPattern)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartObject(Context& context)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::StartObject\")"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetObjectString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(hasDependencies_ || hasRequired_)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (context . propertyExist = static_cast<)",
    "insertText": "bool(context.factory.MallocState(sizeof(bool) * propertyCount_))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(context.propertyExist, 0, sizeof(bool) * propertyCount_)"
  },
  {
    "label": "SchemaType()",
    "kind": "Method",
    "detail": "Function (SizeType count = patternPropertyCount_ + 1 ; context . patternPropertiesSchemas = static_cast<const)",
    "insertText": "SchemaType(context.factory.MallocState(sizeof(const SchemaType*) * count))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (context . patternPropertiesSchemaCount = 0 ;)",
    "insertText": "memset(context.patternPropertiesSchemas, 0, sizeof(SchemaType*) * count)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(Context& context, const Ch* str, SizeType len, bool)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::Key\", str)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (context . patternPropertiesSchemaCount = 0 ;)",
    "insertText": "for(SizeType i = 0; i < patternPropertyCount_; i++) if (patternProperties_[i].pattern && IsPatternMatch(patternProperties_[i].pattern, str, len))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . patternPropertiesSchemas [ context . patternPropertiesSchemaCount + + ] = patternProperties_ [ i ] . schema ; context . valueSchema = typeless_ ; } } SizeType index = 0 ;)",
    "insertText": "if(FindPropertyIndex(ValueType(str, len).Move(), &index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . patternPropertiesSchemas [ context . patternPropertiesSchemaCount + + ] = properties_ [ index ] . schema ; context . valueSchema = typeless_ ; context . valuePatternValidatorType = Context::kPatternValidatorWithProperty ; } else context . valueSchema = properties_ [ index ] . schema ;)",
    "insertText": "if(context.propertyExist)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . patternPropertiesSchemas [ context . patternPropertiesSchemaCount + + ] = additionalPropertiesSchema_ ; context . valueSchema = typeless_ ; context . valuePatternValidatorType = Context::kPatternValidatorWithAdditionalProperty ; } else context . valueSchema = additionalPropertiesSchema_ ; return true ; } else)",
    "insertText": "if(additionalProperties_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . valueSchema = typeless_ ; return true ; })",
    "insertText": "if(context.patternPropertiesSchemaCount == 0)"
  },
  {
    "label": "DisallowedProperty()",
    "kind": "Method",
    "detail": "Function (context . valueSchema = typeless_ ; context . error_handler .)",
    "insertText": "DisallowedProperty(str, len)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorAdditionalProperties)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "EndObject(Context& context, SizeType memberCount)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::EndObject\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(memberCount < minProperties_)"
  },
  {
    "label": "TooFewProperties()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooFewProperties(memberCount, minProperties_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMinProperties)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(memberCount > maxProperties_)"
  },
  {
    "label": "TooManyProperties()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooManyProperties(memberCount, maxProperties_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMaxProperties)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(hasDependencies_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Property& source = properties_ [ sourceIndex ] ;)",
    "insertText": "if(context.propertyExist[sourceIndex])"
  },
  {
    "label": "EndMissingDependentProperties()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "EndMissingDependentProperties(source.name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(source.dependenciesSchema)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ISchemaValidator* dependenciesValidator = context . validators [ source . dependenciesValidatorIndex ] ;)",
    "insertText": "if(!dependenciesValidator->IsValid()) context.error_handler.AddDependencySchemaError(source.name, dependenciesValidator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(context.error_handler.EndDependencyErrors()) RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorDependencies)"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "StartArray(Context& context)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::StartArray\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . arrayElementIndex = 0 ; context . inArray = true ;)",
    "insertText": "if(!(type_ & (1 << kArraySchemaType)))"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetArrayString())"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndArray(Context& context, SizeType elementCount)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"Schema::EndArray\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . inArray = false ;)",
    "insertText": "if(elementCount < minItems_)"
  },
  {
    "label": "TooFewItems()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooFewItems(elementCount, minItems_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMinItems)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(elementCount > maxItems_)"
  },
  {
    "label": "TooManyItems()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "TooManyItems(elementCount, maxItems_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMaxItems)"
  },
  {
    "label": "GetValidateErrorKeyword()",
    "kind": "Method",
    "detail": "Function (} return true ; } const ValueType&)",
    "insertText": "GetValidateErrorKeyword(ValidateErrorCode validateErrorCode)"
  },
  {
    "label": "GetNullString()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "GetNullString()"
  },
  {
    "label": "RAPIDJSON_STRING_()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "RAPIDJSON_STRING_(name, ...) \\ static const ValueType& Get##name##String()"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ const Ch s [ ] = { __VA_ARGS__,' \\ 0 ' } ; \\ const ValueType)",
    "insertText": "v(s, static_cast<SizeType>(sizeof(s) / sizeof(Ch) - 1))"
  },
  {
    "label": "RAPIDJSON_STRING_()",
    "kind": "Method",
    "detail": "Function (\\ return v ; \\ })",
    "insertText": "RAPIDJSON_STRING_(Null, 'n', 'u', 'l', 'l') RAPIDJSON_STRING_(Boolean, 'b', 'o', 'o', 'l', 'e', 'a', 'n') RAPIDJSON_STRING_(Object, 'o', 'b', 'j', 'e', 'c', 't') RAPIDJSON_STRING_(Array, 'a', 'r', 'r', 'a', 'y') RAPIDJSON_STRING_(String, 's', 't', 'r', 'i', 'n', 'g') RAPIDJSON_STRING_(Number, 'n', 'u', 'm', 'b', 'e', 'r') RAPIDJSON_STRING_(Integer, 'i', 'n', 't', 'e', 'g', 'e', 'r') RAPIDJSON_STRING_(Type, 't', 'y', 'p', 'e') RAPIDJSON_STRING_(Enum, 'e', 'n', 'u', 'm') RAPIDJSON_STRING_(AllOf, 'a', 'l', 'l', 'O', 'f') RAPIDJSON_STRING_(AnyOf, 'a', 'n', 'y', 'O', 'f') RAPIDJSON_STRING_(OneOf, 'o', 'n', 'e', 'O', 'f') RAPIDJSON_STRING_(Not, 'n', 'o', 't') RAPIDJSON_STRING_(Properties, 'p', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's') RAPIDJSON_STRING_(Required, 'r', 'e', 'q', 'u', 'i', 'r', 'e', 'd') RAPIDJSON_STRING_(Dependencies, 'd', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'i', 'e', 's') RAPIDJSON_STRING_(PatternProperties, 'p', 'a', 't', 't', 'e', 'r', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's') RAPIDJSON_STRING_(AdditionalProperties, 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's') RAPIDJSON_STRING_(MinProperties, 'm', 'i', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's') RAPIDJSON_STRING_(MaxProperties, 'm', 'a', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's') RAPIDJSON_STRING_(Items, 'i', 't', 'e', 'm', 's') RAPIDJSON_STRING_(MinItems, 'm', 'i', 'n', 'I', 't', 'e', 'm', 's') RAPIDJSON_STRING_(MaxItems, 'm', 'a', 'x', 'I', 't', 'e', 'm', 's') RAPIDJSON_STRING_(AdditionalItems, 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'I', 't', 'e', 'm', 's') RAPIDJSON_STRING_(UniqueItems, 'u', 'n', 'i', 'q', 'u', 'e', 'I', 't', 'e', 'm', 's') RAPIDJSON_STRING_(MinLength, 'm', 'i', 'n', 'L', 'e', 'n', 'g', 't', 'h') RAPIDJSON_STRING_(MaxLength, 'm', 'a', 'x', 'L', 'e', 'n', 'g', 't', 'h') RAPIDJSON_STRING_(Pattern, 'p', 'a', 't', 't', 'e', 'r', 'n') RAPIDJSON_STRING_(Minimum, 'm', 'i', 'n', 'i', 'm', 'u', 'm') RAPIDJSON_STRING_(Maximum, 'm', 'a', 'x', 'i', 'm', 'u', 'm') RAPIDJSON_STRING_(ExclusiveMinimum, 'e', 'x', 'c', 'l', 'u', 's', 'i', 'v', 'e', 'M', 'i', 'n', 'i', 'm', 'u', 'm') RAPIDJSON_STRING_(ExclusiveMaximum, 'e', 'x', 'c', 'l', 'u', 's', 'i', 'v', 'e', 'M', 'a', 'x', 'i', 'm', 'u', 'm') RAPIDJSON_STRING_(MultipleOf, 'm', 'u', 'l', 't', 'i', 'p', 'l', 'e', 'O', 'f') RAPIDJSON_STRING_(DefaultValue, 'd', 'e', 'f', 'a', 'u', 'l', 't') RAPIDJSON_STRING_(Schema, '$', 's', 'c', 'h', 'e', 'm', 'a') RAPIDJSON_STRING_(Ref, '$', 'r', 'e', 'f') RAPIDJSON_STRING_(Id, 'i', 'd') RAPIDJSON_STRING_(Swagger, 's', 'w', 'a', 'g', 'g', 'e', 'r') RAPIDJSON_STRING_(OpenApi, 'o', 'p', 'e', 'n', 'a', 'p', 'i') RAPIDJSON_STRING_(ReadOnly, 'r', 'e', 'a', 'd', 'O', 'n', 'l', 'y') RAPIDJSON_STRING_(WriteOnly, 'w', 'r', 'i', 't', 'e', 'O', 'n', 'l', 'y') RAPIDJSON_STRING_(Nullable, 'n', 'u', 'l', 'l', 'a', 'b', 'l', 'e')"
  },
  {
    "label": "SchemaArray()",
    "kind": "Method",
    "detail": "Function (kNullSchemaType,kBooleanSchemaType,kObjectSchemaType,kArraySchemaType,kStringSchemaType,kNumberSchemaType,kIntegerSchemaType,kTotalSchemaType } ; # if RAPIDJSON_SCHEMA_USE_INTERNALREGEX typedef internal::GenericRegex<EncodingType,AllocatorType> RegexType ; # elif RAPIDJSON_SCHEMA_USE_STDREGEX typedef std::basic_regex<Ch> RegexType ; # else typedef char RegexType ; # endif struct SchemaArray {)",
    "insertText": "SchemaArray() : schemas(), count()"
  },
  {
    "label": "SchemaArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SchemaArray()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(schemas)"
  },
  {
    "label": "AddUniqueElement()",
    "kind": "Method",
    "detail": "Function (} const SchemaType** schemas ; SizeType begin ; SizeType count ; } ; template<V1,V2> void)",
    "insertText": "AddUniqueElement(V1& a, const V2& v)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (V1)",
    "insertText": "c(v, *allocator_)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "PushBack(c, *allocator_)"
  },
  {
    "label": "GetMember()",
    "kind": "Method",
    "detail": "Function (} const ValueType*)",
    "insertText": "GetMember(const ValueType& value, const ValueType& name)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (ValueType::ConstMemberIterator itr = value .)",
    "insertText": "FindMember(name)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignIfExist(bool& out, const ValueType& value, const ValueType& name)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignIfExist(SizeType& out, const ValueType& value, const ValueType& name)"
  },
  {
    "label": "AssignIfExist()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignIfExist(SchemaArray& out, SchemaDocumentType& schemaDocument, const PointerType& p, const ValueType& value, const ValueType& name, const ValueType& document)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PointerType q = p .)",
    "insertText": "Append(name, allocator_)"
  },
  {
    "label": "Schema()",
    "kind": "Method",
    "detail": "Function (out . schemas = static_cast<const)",
    "insertText": "Schema(allocator_->Malloc(out.count * sizeof(const Schema*)))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(out.schemas, 0, sizeof(Schema*)* out.count)"
  },
  {
    "label": "CreatePattern()",
    "kind": "Method",
    "detail": "Function (out . begin = validatorCount_ ; validatorCount_ + = out . count ; } } } # if RAPIDJSON_SCHEMA_USE_INTERNALREGEX template<ValueType> RegexType*)",
    "insertText": "CreatePattern(const ValueType& value, SchemaDocumentType* sd, const PointerType& p)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (RegexType* r =)",
    "insertText": "new(allocator_->Malloc(sizeof(RegexType))) RegexType(value.GetString(), allocator_)"
  },
  {
    "label": "SchemaErrorValue()",
    "kind": "Method",
    "detail": "Function (sd ->)",
    "insertText": "SchemaErrorValue(kSchemaErrorRegexInvalid, p, value.GetString(), value.GetStringLength())"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(r)"
  },
  {
    "label": "IsPatternMatch()",
    "kind": "Method",
    "detail": "Function (r = 0 ; } return r ; } return 0 ; } bool)",
    "insertText": "IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType)"
  },
  {
    "label": "rs()",
    "kind": "Method",
    "detail": "Function (GenericRegexSearch<RegexType>)",
    "insertText": "rs(*pattern)"
  },
  {
    "label": "RegexType()",
    "kind": "Method",
    "detail": "Function (RegexType* r = static_cast<)",
    "insertText": "RegexType(allocator_->Malloc(sizeof(RegexType)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (try { return)",
    "insertText": "new(r) RegexType(value.GetString(), std::size_t(value.GetStringLength()), std::regex_constants::ECMAScript)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(const std::regex_error& e)"
  },
  {
    "label": "IsPatternMatch()",
    "kind": "Method",
    "detail": "Function (} } return 0 ; } bool)",
    "insertText": "IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType length)"
  },
  {
    "label": "regex_search()",
    "kind": "Method",
    "detail": "Function (std::match_results<const Ch*> r ; return)",
    "insertText": "regex_search(str, str + length, r, *pattern)"
  },
  {
    "label": "CreatePattern()",
    "kind": "Method",
    "detail": "Function (} # else template<ValueType> RegexType*)",
    "insertText": "CreatePattern(const ValueType&)"
  },
  {
    "label": "CreateParallelValidator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateParallelValidator(Context& context)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(context.validators == 0)"
  },
  {
    "label": "ISchemaValidator()",
    "kind": "Method",
    "detail": "Function (context . validators = static_cast<)",
    "insertText": "ISchemaValidator(context.factory.MallocState(sizeof(ISchemaValidator*) * validatorCount_))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(context.validators, 0, sizeof(ISchemaValidator*) * validatorCount_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context . validatorCount = validatorCount_ ;)",
    "insertText": "if(allOf_.schemas) CreateSchemaValidators(context, allOf_, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(readOnly_ && (context.flags & kValidateWriteFlag))"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorReadOnly)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(writeOnly_ && (context.flags & kValidateReadFlag))"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorWriteOnly)"
  },
  {
    "label": "CreateSchemaValidators()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "CreateSchemaValidators(Context& context, const SchemaArray& schemas, const bool inheritContinueOnErrors)"
  },
  {
    "label": "FindPropertyIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindPropertyIndex(const ValueType& name, SizeType* outIndex)"
  },
  {
    "label": "GetStringLength()",
    "kind": "Method",
    "detail": "Function (SizeType len = name .)",
    "insertText": "GetStringLength()"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (const Ch* str = name .)",
    "insertText": "GetString()"
  },
  {
    "label": "CheckBool()",
    "kind": "Method",
    "detail": "Function (* outIndex = index ; return true ; } return false ; } bool)",
    "insertText": "CheckBool(Context& context, bool)"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetBooleanString())"
  },
  {
    "label": "CheckInt()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CheckInt(Context& context, int64_t i)"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowedType(context, GetIntegerString())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!minimum_.IsNull())"
  },
  {
    "label": "BelowMinimum()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "BelowMinimum(i, minimum_, exclusiveMinimum_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(exclusiveMinimum_ ? kValidateErrorExclusiveMinimum : kValidateErrorMinimum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(minimum_.IsUint64())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!CheckDoubleMinimum(context, static_cast<double>(i)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!maximum_.IsNull())"
  },
  {
    "label": "AboveMaximum()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "AboveMaximum(i, maximum_, exclusiveMaximum_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(exclusiveMaximum_ ? kValidateErrorExclusiveMaximum : kValidateErrorMaximum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(maximum_.IsUint64())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!CheckDoubleMaximum(context, static_cast<double>(i)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!multipleOf_.IsNull())"
  },
  {
    "label": "NotMultipleOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "NotMultipleOf(i, multipleOf_)"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorMultipleOf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!CheckDoubleMultipleOf(context, static_cast<double>(i)))"
  },
  {
    "label": "CheckUint()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CheckUint(Context& context, uint64_t i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(minimum_.IsInt64())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(maximum_.IsInt64())"
  },
  {
    "label": "CheckDoubleMinimum()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CheckDoubleMinimum(Context& context, double d)"
  },
  {
    "label": "BelowMinimum()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "BelowMinimum(d, minimum_, exclusiveMinimum_)"
  },
  {
    "label": "CheckDoubleMaximum()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CheckDoubleMaximum(Context& context, double d)"
  },
  {
    "label": "AboveMaximum()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "AboveMaximum(d, maximum_, exclusiveMaximum_)"
  },
  {
    "label": "CheckDoubleMultipleOf()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CheckDoubleMultipleOf(Context& context, double d)"
  },
  {
    "label": "isMultiple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isMultiple(difference <= scaledEpsilon) || (difference < std::numeric_limits<double>::min())"
  },
  {
    "label": "NotMultipleOf()",
    "kind": "Method",
    "detail": "Function (context . error_handler .)",
    "insertText": "NotMultipleOf(d, multipleOf_)"
  },
  {
    "label": "DisallowedType()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "DisallowedType(Context& context, const ValueType& actualType)"
  },
  {
    "label": "EndDisallowedType()",
    "kind": "Method",
    "detail": "Function (eh .)",
    "insertText": "EndDisallowedType(actualType)"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (} struct Property {)",
    "insertText": "Property() : schema(), dependenciesSchema(), dependenciesValidatorIndex(), dependencies(), required(false)"
  },
  {
    "label": "Property()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Property()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(dependencies)"
  },
  {
    "label": "PatternProperty()",
    "kind": "Method",
    "detail": "Function (} SValue name ; const SchemaType* schema ; const SchemaType* dependenciesSchema ; SizeType dependenciesValidatorIndex ; bool* dependencies ; bool required ; } ; struct PatternProperty {)",
    "insertText": "PatternProperty() : schema(), pattern()"
  },
  {
    "label": "PatternProperty()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PatternProperty()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(pattern)"
  },
  {
    "label": "AppendIndexToken()",
    "kind": "Method",
    "detail": "Function (} } const SchemaType* schema ; RegexType* pattern ; } ; AllocatorType* allocator_ ; SValue uri_ ; UriType id_ ; Specification spec_ ; PointerType pointer_ ; const SchemaType* typeless_ ; uint64_t* enum_ ; SizeType enumCount_ ; SchemaArray allOf_ ; SchemaArray anyOf_ ; SchemaArray oneOf_ ; const SchemaType* not_ ; unsigned type_ ; SizeType validatorCount_ ; SizeType notValidatorIndex_ ; Property* properties_ ; const SchemaType* additionalPropertiesSchema_ ; PatternProperty* patternProperties_ ; SizeType patternPropertyCount_ ; SizeType propertyCount_ ; SizeType minProperties_ ; SizeType maxProperties_ ; bool additionalProperties_ ; bool hasDependencies_ ; bool hasRequired_ ; bool hasSchemaDependencies_ ; const SchemaType* additionalItemsSchema_ ; const SchemaType* itemsList_ ; const SchemaType** itemsTuple_ ; SizeType itemsTupleCount_ ; SizeType minItems_ ; SizeType maxItems_ ; bool additionalItems_ ; bool uniqueItems_ ; RegexType* pattern_ ; SizeType minLength_ ; SizeType maxLength_ ; SValue minimum_ ; SValue maximum_ ; SValue multipleOf_ ; bool exclusiveMinimum_ ; bool exclusiveMaximum_ ; SizeType defaultValueLength_ ; bool readOnly_ ; bool writeOnly_ ; bool nullable_ ; } ; template<Stack,Ch> struct TokenHelper { RAPIDJSON_FORCEINLINE void)",
    "insertText": "AppendIndexToken(Stack& documentStack, SizeType index)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (* documentStack . template Push<)",
    "insertText": "Ch()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (char buffer [ 2 1 ] ; size_t length = static_cast<)",
    "insertText": "size_t((sizeof(SizeType) == 4 ? u32toa(index, buffer) : u64toa(index, buffer)) - buffer)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* buffer = documentStack . template Push<)",
    "insertText": "char(1 + 10)"
  },
  {
    "label": "u32toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' / ' ; const char* end =)",
    "insertText": "u32toa(index, buffer)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (} else { char* buffer = documentStack . template Push<)",
    "insertText": "char(1 + 20)"
  },
  {
    "label": "u64toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' / ' ; const char* end =)",
    "insertText": "u64toa(index, buffer)"
  },
  {
    "label": "IGenericRemoteSchemaDocumentProvider()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<SchemaDocumentType> class IGenericRemoteSchemaDocumentProvider { public : typedef SchemaDocumentType::Ch Ch ; typedef SchemaDocumentType::ValueType ValueType ; typedef SchemaDocumentType::AllocatorType AllocatorType ; ~)",
    "insertText": "IGenericRemoteSchemaDocumentProvider()"
  },
  {
    "label": "GetRemoteDocument()",
    "kind": "Method",
    "detail": "Function (} const SchemaDocumentType*)",
    "insertText": "GetRemoteDocument(const Ch* uri, SizeType length)"
  },
  {
    "label": "GetRemoteDocument()",
    "kind": "Method",
    "detail": "Function (const SchemaDocumentType*)",
    "insertText": "GetRemoteDocument(const GenericUri<ValueType, AllocatorType> uri, Specification& spec)"
  },
  {
    "label": "GenericSchemaDocument()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT,Allocator = CrtAllocator> class GenericSchemaDocument { public : typedef ValueT ValueType ; typedef IGenericRemoteSchemaDocumentProvider<GenericSchemaDocument> IRemoteSchemaDocumentProviderType ; typedef Allocator AllocatorType ; typedef ValueType::EncodingType EncodingType ; typedef EncodingType::Ch Ch ; typedef internal::Schema<GenericSchemaDocument> SchemaType ; typedef GenericPointer<ValueType,Allocator> PointerType ; typedef GenericValue<EncodingType,AllocatorType> GValue ; typedef GenericUri<ValueType,Allocator> UriType ; typedef GenericStringRef<Ch> StringRefType ; class internal::Schema<GenericSchemaDocument> ; template<,,> class GenericSchemaValidator ;)",
    "insertText": "GenericSchemaDocument(const ValueType& document, const Ch* uri = 0, SizeType uriLength = 0, IRemoteSchemaDocumentProviderType* remoteProvider = 0, Allocator* allocator = 0, const PointerType& pointer = PointerType(), const Specification& spec = Specification(kDraft04)) : remoteProvider_(remoteProvider), allocator_(allocator), ownAllocator_(), root_(), typeless_(), schemaMap_(allocator, kInitialSchemaMapSize), schemaRef_(allocator, kInitialSchemaRefSize), spec_(spec), error_(kObjectType), currentError_()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaDocument::GenericSchemaDocument\")"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (Ch noUri [ 1 ] = { 0 } ; uri_ .)",
    "insertText": "SetString(uri ? uri : noUri, uriLength, *allocator_)"
  },
  {
    "label": "SchemaType()",
    "kind": "Method",
    "detail": "Function (typeless_ = static_cast<)",
    "insertText": "SchemaType(allocator_->Malloc(sizeof(SchemaType)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(typeless_) SchemaType(this, PointerType(), ValueType(kObjectType).Move(), ValueType(kObjectType).Move(), allocator_, docId_)"
  },
  {
    "label": "SetSchemaSpecification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSchemaSpecification(document)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (root_ = typeless_ ;)",
    "insertText": "if(pointer.GetTokenCount() == 0)"
  },
  {
    "label": "CreateSchemaRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSchemaRecursive(&root_, pointer, document, document, docId_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const ValueType* v = pointer.Get(document))"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSchema(&root_, pointer, *v, document, docId_)"
  },
  {
    "label": "SchemaErrorValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchemaErrorValue(kSchemaErrorStartUnknown, PointerType(), sb.GetString(), static_cast<SizeType>(sb.GetSize() / sizeof(Ch)))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RAPIDJSON_ASSERT(root_ != 0)"
  },
  {
    "label": "ShrinkToFit()",
    "kind": "Method",
    "detail": "Function (schemaRef_ .)",
    "insertText": "ShrinkToFit()"
  },
  {
    "label": "GenericSchemaDocument()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "GenericSchemaDocument(GenericSchemaDocument&& rhs) RAPIDJSON_NOEXCEPT : remoteProvider_(rhs.remoteProvider_), allocator_(rhs.allocator_), ownAllocator_(rhs.ownAllocator_), root_(rhs.root_), typeless_(rhs.typeless_), schemaMap_(std::move(rhs.schemaMap_)), schemaRef_(std::move(rhs.schemaRef_)), uri_(std::move(rhs.uri_)), docId_(std::move(rhs.docId_)), spec_(rhs.spec_), error_(std::move(rhs.error_)), currentError_(std::move(rhs.currentError_))"
  },
  {
    "label": "GenericSchemaDocument()",
    "kind": "Method",
    "detail": "Function (rhs . remoteProvider_ = 0 ; rhs . allocator_ = 0 ; rhs . ownAllocator_ = 0 ; rhs . typeless_ = 0 ; } # endif ~)",
    "insertText": "GenericSchemaDocument()"
  },
  {
    "label": "SchemaType()",
    "kind": "Method",
    "detail": "Function (typeless_ -> ~)",
    "insertText": "SchemaType()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(typeless_)"
  },
  {
    "label": "SetNull()",
    "kind": "Method",
    "detail": "Function (} uri_ .)",
    "insertText": "SetNull()"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_DELETE(ownAllocator_)"
  },
  {
    "label": "GetSpecification()",
    "kind": "Method",
    "detail": "Function (} const Specification)",
    "insertText": "GetSpecification(const ValueType& document)"
  },
  {
    "label": "GetSchemaDraft()",
    "kind": "Method",
    "detail": "Function (SchemaDraft draft =)",
    "insertText": "GetSchemaDraft(document)"
  },
  {
    "label": "Specification()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Specification(kDraftNone)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (} const SchemaType&)",
    "insertText": "GetRoot()"
  },
  {
    "label": "SchemaError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SchemaError(const SchemaErrorCode code, const PointerType& location)"
  },
  {
    "label": "GValue()",
    "kind": "Method",
    "detail": "Function (currentError_ =)",
    "insertText": "GValue(kObjectType)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(code, location)"
  },
  {
    "label": "SchemaErrorValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SchemaErrorValue(const SchemaErrorCode code, const PointerType& location, const Ch* value, SizeType length)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetValueString(), GValue(value, length, *allocator_).Move(), *allocator_)"
  },
  {
    "label": "SchemaErrorPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SchemaErrorPointer(const SchemaErrorCode code, const PointerType& location, const Ch* value, SizeType length, const PointerType& pointer)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetOffsetString(), static_cast<SizeType>(pointer.GetParseErrorOffset() / sizeof(Ch)), *allocator_)"
  },
  {
    "label": "GenericSchemaDocument()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GenericSchemaDocument(const GenericSchemaDocument&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericSchemaDocument&)",
    "insertText": "operator(const GenericSchemaDocument&)"
  },
  {
    "label": "SchemaEntry()",
    "kind": "Method",
    "detail": "Function (typedef const PointerType* SchemaRefPtr ; struct SchemaEntry {)",
    "insertText": "SchemaEntry(const PointerType& p, SchemaType* s, bool o, Allocator* allocator) : pointer(p, allocator), schema(s), owned(o)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(schema)"
  },
  {
    "label": "AddErrorInstanceLocation()",
    "kind": "Method",
    "detail": "Function (} } PointerType pointer ; SchemaType* schema ; bool owned ; } ; void)",
    "insertText": "AddErrorInstanceLocation(GValue& result, const PointerType& location)"
  },
  {
    "label": "instanceRef()",
    "kind": "Method",
    "detail": "Function (GValue)",
    "insertText": "instanceRef(sb.GetString(), static_cast<SizeType>(sb.GetSize() / sizeof(Ch)), *allocator_)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "AddMember(GetInstanceRefString(), instanceRef, *allocator_)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(GValue& keyword, GValue& error)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (GValue::MemberIterator member = error_ .)",
    "insertText": "FindMember(keyword)"
  },
  {
    "label": "errors()",
    "kind": "Method",
    "detail": "Function (GValue)",
    "insertText": "errors(kArrayType)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (errors .)",
    "insertText": "PushBack(member->value, *allocator_)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (member -> value = errors ; } member -> value .)",
    "insertText": "PushBack(error, *allocator_)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddCurrentError(const SchemaErrorCode code, const PointerType& location)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(InvalidKeyword, GetSchemaErrorKeyword(code))"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetErrorCodeString(), code, *allocator_)"
  },
  {
    "label": "AddErrorInstanceLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorInstanceLocation(currentError_, location)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(GValue(GetSchemaErrorKeyword(code)).Move(), currentError_)"
  },
  {
    "label": "RAPIDJSON_STRING_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "RAPIDJSON_STRING_(name, ...) \\ static const StringRefType& Get##name##String()"
  },
  {
    "label": "RAPIDJSON_STRING_()",
    "kind": "Method",
    "detail": "Function (\\ return v ; \\ })",
    "insertText": "RAPIDJSON_STRING_(InstanceRef, 'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 'R', 'e', 'f') RAPIDJSON_STRING_(ErrorCode, 'e', 'r', 'r', 'o', 'r', 'C', 'o', 'd', 'e') RAPIDJSON_STRING_(Value, 'v', 'a', 'l', 'u', 'e') RAPIDJSON_STRING_(Offset, 'o', 'f', 'f', 's', 'e', 't') RAPIDJSON_STRING_(Null, 'n', 'u', 'l', 'l') RAPIDJSON_STRING_(SpecUnknown, 'S', 'p', 'e', 'c', 'U', 'n', 'k', 'n', 'o', 'w', 'n') RAPIDJSON_STRING_(SpecUnsupported, 'S', 'p', 'e', 'c', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd') RAPIDJSON_STRING_(SpecIllegal, 'S', 'p', 'e', 'c', 'I', 'l', 'l', 'e', 'g', 'a', 'l') RAPIDJSON_STRING_(StartUnknown, 'S', 't', 'a', 'r', 't', 'U', 'n', 'k', 'n', 'o', 'w', 'n') RAPIDJSON_STRING_(RefPlainName, 'R', 'e', 'f', 'P', 'l', 'a', 'i', 'n', 'N', 'a', 'm', 'e') RAPIDJSON_STRING_(RefInvalid, 'R', 'e', 'f', 'I', 'n', 'v', 'a', 'l', 'i', 'd') RAPIDJSON_STRING_(RefPointerInvalid, 'R', 'e', 'f', 'P', 'o', 'i', 'n', 't', 'e', 'r', 'I', 'n', 'v', 'a', 'l', 'i', 'd') RAPIDJSON_STRING_(RefUnknown, 'R', 'e', 'f', 'U', 'n', 'k', 'n', 'o', 'w', 'n') RAPIDJSON_STRING_(RefCyclical, 'R', 'e', 'f', 'C', 'y', 'c', 'l', 'i', 'c', 'a', 'l') RAPIDJSON_STRING_(RefNoRemoteProvider, 'R', 'e', 'f', 'N', 'o', 'R', 'e', 'm', 'o', 't', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r') RAPIDJSON_STRING_(RefNoRemoteSchema, 'R', 'e', 'f', 'N', 'o', 'R', 'e', 'm', 'o', 't', 'e', 'S', 'c', 'h', 'e', 'm', 'a') RAPIDJSON_STRING_(ReadOnlyAndWriteOnly, 'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 'A', 'n', 'd', 'W', 'r', 'i', 't', 'e', 'O', 'n', 'l', 'y') RAPIDJSON_STRING_(RegexInvalid, 'R', 'e', 'g', 'e', 'x', 'I', 'n', 'v', 'a', 'l', 'i', 'd') #undef RAPIDJSON_STRING_ static SchemaDraft GetSchemaDraft(const ValueType& document)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Ch kDraft03String [ ] = { ' h ',' t ',' t ',' p ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' - ',' 0 ',' 3 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' # ',' \\ 0 ' } ; const Ch kDraft04String [ ] = { ' h ',' t ',' t ',' p ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' - ',' 0 ',' 4 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' # ',' \\ 0 ' } ; const Ch kDraft05String [ ] = { ' h ',' t ',' t ',' p ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' - ',' 0 ',' 5 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' # ',' \\ 0 ' } ; const Ch kDraft06String [ ] = { ' h ',' t ',' t ',' p ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' - ',' 0 ',' 6 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' # ',' \\ 0 ' } ; const Ch kDraft07String [ ] = { ' h ',' t ',' t ',' p ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' - ',' 0 ',' 7 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' # ',' \\ 0 ' } ; const Ch kDraft2019_09String [ ] = { ' h ',' t ',' t ',' p ',' s ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' / ',' 2 ',' 0 ',' 1 ',' 9 ',' - ',' 0 ',' 9 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' \\ 0 ' } ; const Ch kDraft2020_12String [ ] = { ' h ',' t ',' t ',' p ',' s ',' : ',' / ',' / ',' j ',' s ',' o ',' n ',' - ',' s ',' c ',' h ',' e ',' m ',' a ',' . ',' o ',' r ',' g ',' / ',' d ',' r ',' a ',' f ',' t ',' / ',' 2 ',' 0 ',' 2 ',' 0 ',' - ',' 1 ',' 2 ',' / ',' s ',' c ',' h ',' e ',' m ',' a ',' \\ 0 ' } ;)",
    "insertText": "if(!document.IsObject())"
  },
  {
    "label": "draftUri()",
    "kind": "Method",
    "detail": "Function (const UriType)",
    "insertText": "draftUri(itr->value)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (const Ch kVersion20String [ ] = { ' 2 ',' . ',' 0 ',' \\ 0 ' } ; const Ch kVersion30String [ ] = { ' 3 ',' . ',' 0 ',' . ',' \\ 0 ' } ; const Ch kVersion31String [ ] = { ' 3 ',' . ',' 1 ',' . ',' \\ 0 ' } ; SizeType len = internal::StrLen<)",
    "insertText": "Ch(kVersion30String)"
  },
  {
    "label": "kVersion20Value()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "kVersion20Value(kVersion20String)"
  },
  {
    "label": "kVersion30Value()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "kVersion30Value(kVersion30String)"
  },
  {
    "label": "kVersion31Value()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "kVersion31Value(kVersion31String)"
  },
  {
    "label": "GetOpenApiVersion()",
    "kind": "Method",
    "detail": "Function (OpenApiVersion docOapi =)",
    "insertText": "GetOpenApiVersion(document)"
  },
  {
    "label": "CreateSchemaRecursive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateSchemaRecursive(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document, const UriType& id)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (UriType newid =)",
    "insertText": "UriType(CreateSchema(schema, pointer, v, document, id), allocator_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(v.GetType() == kArrayType) for (SizeType i = 0; i < v.Size(); i++) CreateSchemaRecursive(0, pointer.Append(i, allocator_), v[i], document, id)"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (} const UriType&)",
    "insertText": "CreateSchema(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document, const UriType& id)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(pointer.IsValid())"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaDocument::CreateSchema\", sb.GetString(), id.GetString())"
  },
  {
    "label": "AddSchemaRefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSchemaRefs(const_cast<SchemaType*>(sc))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!HandleRefSchema(pointer, schema, v, document, id))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (SchemaType* s =)",
    "insertText": "new(allocator_->Malloc(sizeof(SchemaType))) SchemaType(this, pointer, v, document, allocator_, id)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(schema)"
  },
  {
    "label": "AddSchemaRefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSchemaRefs(typeless_)"
  },
  {
    "label": "HandleRefSchema()",
    "kind": "Method",
    "detail": "Function (} return id ; } bool)",
    "insertText": "HandleRefSchema(const PointerType& source, const SchemaType** schema, const ValueType& v, const ValueType& document, const UriType& id)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (ValueType::ConstMemberIterator itr = v .)",
    "insertText": "FindMember(SchemaType::GetRefString())"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaDocument::HandleRefSchema\", sb.GetString(), id.GetString())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(schemaRef_.template Push<SchemaRefPtr>()) SchemaRefPtr(&source)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (UriType ref =)",
    "insertText": "UriType(itr->value, allocator_).Resolve(scopeId, allocator_)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(SchemaIds, id.GetString(), itr->value.GetString(), ref.GetString())"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (PointerType basePointer =)",
    "insertText": "PointerType()"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (const ValueType* base =)",
    "insertText": "FindId(document, ref, basePointer, docId_, false)"
  },
  {
    "label": "GetFragString()",
    "kind": "Method",
    "detail": "Function (const Ch* s = ref .)",
    "insertText": "GetFragString()"
  },
  {
    "label": "GetFragStringLength()",
    "kind": "Method",
    "detail": "Function (len = ref .)",
    "insertText": "GetFragStringLength()"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (const PointerType)",
    "insertText": "pointer(s, len, allocator_)"
  },
  {
    "label": "AddSchemaRefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSchemaRefs(const_cast<SchemaType *>(sc))"
  },
  {
    "label": "SchemaErrorValue()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "SchemaErrorValue(kSchemaErrorRefPlainName, source, s, len)"
  },
  {
    "label": "SchemaErrorValue()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "SchemaErrorValue(kSchemaErrorRefNoRemoteSchema, source, ref.GetString(), ref.GetStringLength())"
  },
  {
    "label": "relPointer()",
    "kind": "Method",
    "detail": "Function (const PointerType)",
    "insertText": "relPointer(s, len, allocator_)"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (PointerType)",
    "insertText": "pointer(basePointer, allocator_)"
  },
  {
    "label": "CreateSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSchema(schema, pointer, *pv, document, scopeId)"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (} } else { PointerType)",
    "insertText": "pointer(allocator_)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (SizeType i = 0 ; ValueType* resval = 0 ; UriType tempuri =)",
    "insertText": "UriType(finduri, allocator_)"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (UriType localuri =)",
    "insertText": "UriType(baseuri, allocator_)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (ValueType::ConstMemberIterator m = doc .)",
    "insertText": "FindMember(SchemaType::GetIdString())"
  },
  {
    "label": "UriType()",
    "kind": "Method",
    "detail": "Function (localuri =)",
    "insertText": "UriType(m->value, allocator_).Resolve(baseuri, allocator_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(localuri.Match(finduri, full))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaDocument::FindId (match)\", full ? localuri.GetString() : localuri.GetBaseString())"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (resval = const_cast<)",
    "insertText": "ValueType(&doc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (resptr = here ; return resval ; })",
    "insertText": "for(m = doc.MemberBegin(); m != doc.MemberEnd(); ++m)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (resval =)",
    "insertText": "FindId(m->value, finduri, resptr, localuri, full, here.Append(m->name.GetString(), m->name.GetStringLength(), allocator_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(resval)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(doc.GetType() == kArrayType)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (resval =)",
    "insertText": "FindId(*v, finduri, resptr, localuri, full, here.Append(i, allocator_))"
  },
  {
    "label": "AddSchemaRefs()",
    "kind": "Method",
    "detail": "Function (i + + ; } } return resval ; } void)",
    "insertText": "AddSchemaRefs(SchemaType* schema)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaDocument::AddSchemaRefs\")"
  },
  {
    "label": "SchemaRefPtr()",
    "kind": "Method",
    "detail": "Function (SchemaRefPtr* ref = schemaRef_ . template Pop<)",
    "insertText": "SchemaRefPtr(1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(entry) SchemaEntry(**ref, schema, false, allocator_)"
  },
  {
    "label": "IsCyclicRef()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsCyclicRef(const PointerType& pointer)"
  },
  {
    "label": "GetTypeless()",
    "kind": "Method",
    "detail": "Function (} const SchemaType*)",
    "insertText": "GetTypeless()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::GenericSchemaValidator\")"
  },
  {
    "label": "GenericSchemaValidator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericSchemaValidator(const SchemaDocumentType& schemaDocument, OutputHandler& outputHandler, StateAllocator* allocator = 0, size_t schemaStackCapacity = kDefaultSchemaStackCapacity, size_t documentStackCapacity = kDefaultDocumentStackCapacity) : schemaDocument_(&schemaDocument), root_(schemaDocument.GetRoot()), stateAllocator_(allocator), ownStateAllocator_(0), schemaStack_(allocator, schemaStackCapacity), documentStack_(allocator, documentStackCapacity), outputHandler_(&outputHandler), error_(kObjectType), currentError_(), missingDependents_(), valid_(true), flags_(kValidateDefaultFlags), depth_(0)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::GenericSchemaValidator (output handler)\")"
  },
  {
    "label": "GenericSchemaValidator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GenericSchemaValidator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_DELETE(ownStateAllocator_)"
  },
  {
    "label": "ResetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetError()"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (error_ .)",
    "insertText": "SetObject()"
  },
  {
    "label": "GetInvalidSchemaKeyword()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetInvalidSchemaKeyword()"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "PointerType(documentStack_.template Bottom<Ch>(), documentStack_.GetSize() / sizeof(Ch))"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMultipleOf, ValueType(actual).Move(), expected)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(exclusive ? kValidateErrorExclusiveMaximum : kValidateErrorMaximum, ValueType(actual).Move(), expected, exclusive ? &SchemaType::GetExclusiveMaximumString : 0)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(exclusive ? kValidateErrorExclusiveMinimum : kValidateErrorMinimum, ValueType(actual).Move(), expected, exclusive ? &SchemaType::GetExclusiveMinimumString : 0)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMaxLength, ValueType(str, length, GetStateAllocator()).Move(), SValue(expected).Move())"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMinLength, ValueType(str, length, GetStateAllocator()).Move(), SValue(expected).Move())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetActualString(), ValueType(str, length, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorPattern)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetDisallowedString(), ValueType(index).Move(), GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorAdditionalItems, true)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMinItems, ValueType(actualCount).Move(), SValue(expectedCount).Move())"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMaxItems, ValueType(actualCount).Move(), SValue(expectedCount).Move())"
  },
  {
    "label": "duplicates()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "duplicates(kArrayType)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (duplicates .)",
    "insertText": "PushBack(index1, GetStateAllocator())"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (duplicates .)",
    "insertText": "PushBack(index2, GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetDuplicatesString(), duplicates, GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorUniqueItems, true)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMaxProperties, ValueType(actualCount).Move(), SValue(expectedCount).Move())"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNumberError(kValidateErrorMinProperties, ValueType(actualCount).Move(), SValue(expectedCount).Move())"
  },
  {
    "label": "SetArray()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "SetArray()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "PushBack(ValueType(name, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "error(kObjectType)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "AddMember(GetMissingString(), currentError_, GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (currentError_ = error ;)",
    "insertText": "AddCurrentError(kValidateErrorRequired)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetDisallowedString(), ValueType(name, length, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorAdditionalProperties, true)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (missingDependents_ .)",
    "insertText": "PushBack(ValueType(targetName, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (ValidateErrorCode code = kValidateErrorRequired ; error .)",
    "insertText": "AddMember(GetMissingString(), missingDependents_.Move(), GetStateAllocator())"
  },
  {
    "label": "AddErrorCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorCode(error, code)"
  },
  {
    "label": "AddErrorInstanceLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorInstanceLocation(error, false)"
  },
  {
    "label": "GetInvalidSchemaPointer()",
    "kind": "Method",
    "detail": "Function (PointerType schemaRef =)",
    "insertText": "GetInvalidSchemaPointer().Append(SchemaType::GetValidateErrorKeyword(kValidateErrorDependencies), &GetInvalidSchemaPointer().GetAllocator())"
  },
  {
    "label": "AddErrorSchemaLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorSchemaLocation(error, schemaRef.Append(sourceName.GetString(), sourceName.GetStringLength(), &GetInvalidSchemaPointer().GetAllocator()))"
  },
  {
    "label": "wrapper()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "wrapper(kObjectType)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (wrapper .)",
    "insertText": "AddMember(ValueType(SchemaType::GetValidateErrorKeyword(code), GetStateAllocator()).Move(), error, GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(ValueType(sourceName, GetStateAllocator()).Move(), wrapper, GetStateAllocator())"
  },
  {
    "label": "AddDependencySchemaError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddDependencySchemaError(const SValue& sourceName, ISchemaValidator* subvalidator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(ValueType(sourceName, GetStateAllocator()).Move(), static_cast<GenericSchemaValidator*>(subvalidator)->GetError(), GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "AddMember(GetErrorsString(), currentError_, GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (currentError_ = error ;)",
    "insertText": "AddCurrentError(kValidateErrorDependencies)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(code)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "PushBack(ValueType(expectedType, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "AddMember(GetExpectedString(), currentError_, GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (error .)",
    "insertText": "AddMember(GetActualString(), ValueType(actualType, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (currentError_ = error ;)",
    "insertText": "AddCurrentError(kValidateErrorType)"
  },
  {
    "label": "AddErrorArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorArray(kValidateErrorAllOf, subvalidators, count)"
  },
  {
    "label": "AddErrorArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorArray(kValidateErrorAnyOf, subvalidators, count)"
  },
  {
    "label": "AddErrorArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorArray(kValidateErrorOneOf, subvalidators, count)"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "matches(kArrayType)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetMatchesString(), matches, GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorOneOfMatch)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorNot)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorReadOnly)"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurrentError(kValidateErrorWriteOnly)"
  },
  {
    "label": "RAPIDJSON_STRING_()",
    "kind": "Method",
    "detail": "Function (\\ return v ; \\ })",
    "insertText": "RAPIDJSON_STRING_(InstanceRef, 'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 'R', 'e', 'f') RAPIDJSON_STRING_(SchemaRef, 's', 'c', 'h', 'e', 'm', 'a', 'R', 'e', 'f') RAPIDJSON_STRING_(Expected, 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd') RAPIDJSON_STRING_(Actual, 'a', 'c', 't', 'u', 'a', 'l') RAPIDJSON_STRING_(Disallowed, 'd', 'i', 's', 'a', 'l', 'l', 'o', 'w', 'e', 'd') RAPIDJSON_STRING_(Missing, 'm', 'i', 's', 's', 'i', 'n', 'g') RAPIDJSON_STRING_(Errors, 'e', 'r', 'r', 'o', 'r', 's') RAPIDJSON_STRING_(ErrorCode, 'e', 'r', 'r', 'o', 'r', 'C', 'o', 'd', 'e') RAPIDJSON_STRING_(ErrorMessage, 'e', 'r', 'r', 'o', 'r', 'M', 'e', 's', 's', 'a', 'g', 'e') RAPIDJSON_STRING_(Duplicates, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', 's') RAPIDJSON_STRING_(Matches, 'm', 'a', 't', 'c', 'h', 'e', 's') #undef RAPIDJSON_STRING_ #define RAPIDJSON_SCHEMA_HANDLE_BEGIN_(method, arg1)\\ if (!valid_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((!BeginValue() && !GetContinueOnErrors()) || (!CurrentSchema().method arg1 && !GetContinueOnErrors()))"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (\\ documentStack_ . template Pop<)",
    "insertText": "Ch(1)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(InvalidDocument, documentStack_.template Bottom<Ch>())"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (\\ valid_ = false ; \\ return valid_ ; \\ } # define)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(method, arg2)\\ for (Context* context = schemaStack_.template Bottom<Context>(); context != schemaStack_.template End<Context>(); context++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (method arg2)",
    "insertText": "if(context->hasher)\\ static_cast<HasherType*>(context->hasher)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (method arg2)",
    "insertText": "if(context->validators)\\ for (SizeType i_ = 0; i_ < context->validatorCount; i_++)\\ static_cast<GenericSchemaValidator*>(context->validators[i_])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (method arg2)",
    "insertText": "if(context->patternPropertiesValidators)\\ for (SizeType i_ = 0; i_ < context->patternPropertiesValidatorCount; i_++)\\ static_cast<GenericSchemaValidator*>(context->patternPropertiesValidators[i_])"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_END_()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_END_(method, arg2)\\ valid_ = (EndValue() || GetContinueOnErrors()) && (!outputHandler_ || outputHandler_->method arg2)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (\\ return valid_ ; # define)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(method, arg1, arg2) \\ RAPIDJSON_SCHEMA_HANDLE_BEGIN_ (method, arg1)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(method, arg2)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_END_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_END_(method, arg2) bool Null()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Null, (CurrentContext()), ( ))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Bool, (CurrentContext(), b), (b))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int, (CurrentContext(), i), (i))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint, (CurrentContext(), u), (u))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int64, (CurrentContext(), i), (i))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint64, (CurrentContext(), u), (u))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(Double, (CurrentContext(), d), (d))"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawNumber(const Ch* str, SizeType length, bool copy)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_VALUE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_VALUE_(String, (CurrentContext(), str, length, copy), (str, length, copy))"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(const Ch* str, SizeType length, bool copy)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartObject()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::StartObject\")"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_BEGIN_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_BEGIN_(StartObject, (CurrentContext()))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(StartObject, ())"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::Key\", str)"
  },
  {
    "label": "AppendToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToken(str, len)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (valid_ = false ; return valid_ ; })",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(Key, (str, len, copy))"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (valid_ = ! outputHandler_ | | outputHandler_ ->)",
    "insertText": "Key(str, len, copy)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::EndObject\")"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(EndObject, (memberCount))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_END_()",
    "kind": "Method",
    "detail": "Function (valid_ = false ; return valid_ ; })",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_END_(EndObject, (memberCount))"
  },
  {
    "label": "StartArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartArray()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::StartArray\")"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_BEGIN_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_BEGIN_(StartArray, (CurrentContext()))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(StartArray, ())"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::EndArray\")"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(EndArray, (elementCount))"
  },
  {
    "label": "RAPIDJSON_SCHEMA_HANDLE_END_()",
    "kind": "Method",
    "detail": "Function (valid_ = false ; return valid_ ; })",
    "insertText": "RAPIDJSON_SCHEMA_HANDLE_END_(EndArray, (elementCount))"
  },
  {
    "label": "CreateSchemaValidator()",
    "kind": "Method",
    "detail": "Function (} # undef RAPIDJSON_SCHEMA_HANDLE_BEGIN_ # undef RAPIDJSON_SCHEMA_HANDLE_PARALLEL_ # undef RAPIDJSON_SCHEMA_HANDLE_VALUE_ ISchemaValidator*)",
    "insertText": "CreateSchemaValidator(const SchemaType& root, const bool inheritContinueOnErrors)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ISchemaValidator* sv =)",
    "insertText": "new(GetStateAllocator().Malloc(sizeof(GenericSchemaValidator))) GenericSchemaValidator(*schemaDocument_, root, documentStack_.template Bottom<char>(), documentStack_.GetSize(), depth_ + 1, &GetStateAllocator())"
  },
  {
    "label": "SetValidateFlags()",
    "kind": "Method",
    "detail": "Function (sv ->)",
    "insertText": "SetValidateFlags(inheritContinueOnErrors ? GetValidateFlags() : GetValidateFlags() & ~static_cast<unsigned>(kValidateContinueOnErrorFlag))"
  },
  {
    "label": "GenericSchemaValidator()",
    "kind": "Method",
    "detail": "Function (GenericSchemaValidator* v = static_cast<)",
    "insertText": "GenericSchemaValidator(validator)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(v)"
  },
  {
    "label": "HasherType()",
    "kind": "Method",
    "detail": "Function (HasherType* h = static_cast<)",
    "insertText": "HasherType(hasher)"
  },
  {
    "label": "HasherType()",
    "kind": "Method",
    "detail": "Function (h -> ~)",
    "insertText": "HasherType()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(h)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(p)"
  },
  {
    "label": "GenericSchemaValidator()",
    "kind": "Method",
    "detail": "Function (} private : typedef SchemaType::Context Context ; typedef GenericValue<UTF8<>,StateAllocator> HashCodeArray ; typedef internal::Hasher<EncodingType,StateAllocator> HasherType ;)",
    "insertText": "GenericSchemaValidator(const SchemaDocumentType& schemaDocument, const SchemaType& root, const char* basePath, size_t basePathSize, unsigned depth, StateAllocator* allocator = 0, size_t schemaStackCapacity = kDefaultSchemaStackCapacity, size_t documentStackCapacity = kDefaultDocumentStackCapacity) : schemaDocument_(&schemaDocument), root_(root), stateAllocator_(allocator), ownStateAllocator_(0), schemaStack_(allocator, schemaStackCapacity), documentStack_(allocator, documentStackCapacity), outputHandler_(0), error_(kObjectType), currentError_(), missingDependents_(), valid_(true), flags_(kValidateDefaultFlags), depth_(depth)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::GenericSchemaValidator (internal)\", basePath && basePathSize ? basePath : \"\")"
  },
  {
    "label": "GetStateAllocator()",
    "kind": "Method",
    "detail": "Function (} StateAllocator&)",
    "insertText": "GetStateAllocator()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::BeginValue\")"
  },
  {
    "label": "CurrentContext()",
    "kind": "Method",
    "detail": "Function (SizeType count =)",
    "insertText": "CurrentContext()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(CurrentContext().valueSchema)"
  },
  {
    "label": "PushSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSchema(*CurrentContext().valueSchema)"
  },
  {
    "label": "ISchemaValidator()",
    "kind": "Method",
    "detail": "Function (va = static_cast<)",
    "insertText": "ISchemaValidator(MallocState(sizeof(ISchemaValidator*) * count))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(va, 0, sizeof(ISchemaValidator*) * count)"
  },
  {
    "label": "EndValue()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "EndValue()"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(Method, \"GenericSchemaValidator::EndValue\")"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (GenericStringBuffer<EncodingType> sb ; schemaDocument_ ->)",
    "insertText": "GetPointer(&CurrentSchema()).StringifyUriFragment(sb)"
  },
  {
    "label": "RAPIDJSON_SCHEMA_PRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SCHEMA_PRINT(ValidatorPointers, sb.GetString(), documentStack_.template Bottom<Ch>(), depth_)"
  },
  {
    "label": "CurrentContext()",
    "kind": "Method",
    "detail": "Function (uint64_t h = hasher&&)",
    "insertText": "CurrentContext().arrayUniqueness ? static_cast<HasherType*>(hasher)->GetHashCode()"
  },
  {
    "label": "PopSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSchema()"
  },
  {
    "label": "HashCodeArray()",
    "kind": "Method",
    "detail": "Function (HashCodeArray* a = static_cast<)",
    "insertText": "HashCodeArray(context.arrayElementHashCodes)"
  },
  {
    "label": "DuplicateItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateItems(static_cast<SizeType>(itr - a->Begin()), a->Size())"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (a ->)",
    "insertText": "PushBack(h, GetStateAllocator())"
  },
  {
    "label": "RAPIDJSON_INVALID_KEYWORD_RETURN()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RAPIDJSON_INVALID_KEYWORD_RETURN(kValidateErrorUniqueItems)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!documentStack_.Empty() && *documentStack_.template Pop<Ch>(1) != '/')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(str[i] == '/')"
  },
  {
    "label": "PushSchema()",
    "kind": "Method",
    "detail": "Function (} } RAPIDJSON_FORCEINLINE void)",
    "insertText": "PushSchema(const SchemaType& schema)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(schemaStack_.template Push<Context>()) Context(*this, *this, &schema, flags_)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (Context* c = schemaStack_ . template Pop<)",
    "insertText": "Context(1)"
  },
  {
    "label": "HashCodeArray()",
    "kind": "Method",
    "detail": "Function (a -> ~)",
    "insertText": "HashCodeArray()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(a)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (} c -> ~)",
    "insertText": "Context()"
  },
  {
    "label": "AddErrorInstanceLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddErrorInstanceLocation(ValueType& result, bool parent)"
  },
  {
    "label": "GetInvalidDocumentPointer()",
    "kind": "Method",
    "detail": "Function (GenericStringBuffer<EncodingType> sb ; PointerType instancePointer =)",
    "insertText": "GetInvalidDocumentPointer()"
  },
  {
    "label": "instanceRef()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "instanceRef(sb.GetString(), static_cast<SizeType>(sb.GetSize() / sizeof(Ch)), GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "AddMember(GetInstanceRefString(), instanceRef, GetStateAllocator())"
  },
  {
    "label": "AddErrorSchemaLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddErrorSchemaLocation(ValueType& result, PointerType schema = PointerType())"
  },
  {
    "label": "CurrentSchema()",
    "kind": "Method",
    "detail": "Function (GenericStringBuffer<EncodingType> sb ; SizeType len =)",
    "insertText": "CurrentSchema().GetURI().GetStringLength()"
  },
  {
    "label": "schemaRef()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "schemaRef(sb.GetString(), static_cast<SizeType>(sb.GetSize() / sizeof(Ch)), GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "AddMember(GetSchemaRefString(), schemaRef, GetStateAllocator())"
  },
  {
    "label": "AddErrorCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddErrorCode(ValueType& result, const ValidateErrorCode code)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "AddMember(GetErrorCodeString(), code, GetStateAllocator())"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(ValueType& keyword, ValueType& error)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (errors .)",
    "insertText": "PushBack(member->value, GetStateAllocator())"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (member -> value = errors ; } member -> value .)",
    "insertText": "PushBack(error, GetStateAllocator())"
  },
  {
    "label": "AddCurrentError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddCurrentError(const ValidateErrorCode code, bool parent = false)"
  },
  {
    "label": "AddErrorCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorCode(currentError_, code)"
  },
  {
    "label": "AddErrorInstanceLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorInstanceLocation(currentError_, parent)"
  },
  {
    "label": "AddErrorSchemaLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddErrorSchemaLocation(currentError_)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(ValueType(SchemaType::GetValidateErrorKeyword(code), GetStateAllocator(), false).Move(), currentError_)"
  },
  {
    "label": "MergeError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeError(ValueType& other)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(it->name, it->value)"
  },
  {
    "label": "AddNumberError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddNumberError(const ValidateErrorCode code, ValueType& actual, const SValue& expected, const typename SchemaType::ValueType& (*exclusive)() = 0)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetActualString(), actual, GetStateAllocator())"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetExpectedString(), ValueType(expected, GetStateAllocator()).Move(), GetStateAllocator())"
  },
  {
    "label": "AddErrorArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddErrorArray(const ValidateErrorCode code, ISchemaValidator** subvalidators, SizeType count)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (currentError_ .)",
    "insertText": "AddMember(GetErrorsString(), errors, GetStateAllocator())"
  },
  {
    "label": "CurrentSchema()",
    "kind": "Method",
    "detail": "Function (} const SchemaType&)",
    "insertText": "CurrentSchema()"
  },
  {
    "label": "SchemaValidatingReader()",
    "kind": "Method",
    "detail": "Function (} const size_t kDefaultSchemaStackCapacity = 1 0 2 4 ; const size_t kDefaultDocumentStackCapacity = 2 5 6 ; const SchemaDocumentType* schemaDocument_ ; const SchemaType& root_ ; StateAllocator* stateAllocator_ ; StateAllocator* ownStateAllocator_ ; internal::Stack<StateAllocator> schemaStack_ ; internal::Stack<StateAllocator> documentStack_ ; OutputHandler* outputHandler_ ; ValueType error_ ; ValueType currentError_ ; ValueType missingDependents_ ; bool valid_ ; unsigned flags_ ; unsigned depth_ ; } ; typedef GenericSchemaValidator<SchemaDocument> SchemaValidator ; template<unsigned parseFlags,InputStream,SourceEncoding,SchemaDocumentType = SchemaDocument,StackAllocator = CrtAllocator> class SchemaValidatingReader { public : typedef SchemaDocumentType::PointerType PointerType ; typedef InputStream::Ch Ch ; typedef GenericValue<SourceEncoding,StackAllocator> ValueType ;)",
    "insertText": "SchemaValidatingReader(InputStream& is, const SchemaDocumentType& sd) : is_(is), sd_(sd), invalidSchemaKeyword_(), invalidSchemaCode_(kValidateErrorNone), error_(kObjectType), isValid_(true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Handler> bool)",
    "insertText": "operator()(Handler& handler)"
  },
  {
    "label": "validator()",
    "kind": "Method",
    "detail": "Function (GenericReader<SourceEncoding,SchemaDocumentType::EncodingType,StackAllocator> reader ; GenericSchemaValidator<SchemaDocumentType,Handler>)",
    "insertText": "validator(sd_, handler)"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (parseResult_ = reader . template Parse<)",
    "insertText": "parseFlags(is_, validator)"
  },
  {
    "label": "GetInvalidSchemaPointer()",
    "kind": "Method",
    "detail": "Function (} else { invalidSchemaPointer_ = validator .)",
    "insertText": "GetInvalidSchemaPointer()"
  },
  {
    "label": "GetInvalidSchemaCode()",
    "kind": "Method",
    "detail": "Function (invalidSchemaCode_ = validator .)",
    "insertText": "GetInvalidSchemaCode()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (error_ .)",
    "insertText": "CopyFrom(validator.GetError(), allocator_)"
  },
  {
    "label": "GetParseResult()",
    "kind": "Method",
    "detail": "Function (} return parseResult_ ; } const ParseResult&)",
    "insertText": "GetParseResult()"
  }
]