[
  {
    "label": "FakeRtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeRtcEventLog"
  },
  {
    "label": "FakeRtcEventLog()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_FAKE_RTC_EVENT_LOG_H_ # define LOGGING_RTC_EVENT_LOG_FAKE_RTC_EVENT_LOG_H_ # include<map> # include<memory> # include \" api / rtc_event_log / rtc_event . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class FakeRtcEventLog : public RtcEventLog { public :)",
    "insertText": "FakeRtcEventLog()"
  },
  {
    "label": "StartLogging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartLogging(std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms)"
  },
  {
    "label": "StopLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogging()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(std::unique_ptr<RtcEvent> event)"
  },
  {
    "label": "GetEventCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEventCount(RtcEvent::Type event_type)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex mu_ ; std::map<RtcEvent::Type,int> count_)",
    "insertText": "RTC_GUARDED_BY(mu_)"
  }
]