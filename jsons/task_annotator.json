[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ObserverForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverForTesting"
  },
  {
    "label": "ScopedSetIpcHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSetIpcHash"
  },
  {
    "label": "LongTaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LongTaskTracker"
  },
  {
    "label": "TaskAnnotatorBacktraceIntegrationTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskAnnotatorBacktraceIntegrationTest"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_TASK_ANNOTATOR_H_ # define BASE_TASK_COMMON_TASK_ANNOTATOR_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / pending_task . h \" # include \" base / strings / string_piece . h \" # include \" base / time / tick_clock . h \" # include \" base / trace_event / base_tracing . h \" namespace base { TimeDelta kMaxTaskDurationTimeDelta =)",
    "insertText": "Milliseconds(4)"
  },
  {
    "label": "BeforeRunTask()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT TaskAnnotator { public : class ObserverForTesting { public : void)",
    "insertText": "BeforeRunTask(const PendingTask* pending_task)"
  },
  {
    "label": "CurrentTaskForThread()",
    "kind": "Method",
    "detail": "Function (} ; class ScopedSetIpcHash ; class LongTaskTracker ; const PendingTask*)",
    "insertText": "CurrentTaskForThread()"
  },
  {
    "label": "TaskAnnotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskAnnotator()"
  },
  {
    "label": "TaskAnnotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskAnnotator(const TaskAnnotator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskAnnotator&)",
    "insertText": "operator(const TaskAnnotator&)"
  },
  {
    "label": "WillQueueTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillQueueTask(perfetto::StaticString trace_event_name, PendingTask* pending_task)"
  },
  {
    "label": "GetTaskTraceID()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetTaskTraceID(const PendingTask& task)"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> void)",
    "insertText": "RunTask(perfetto::StaticString event_name, PendingTask& pending_task, Args&&... args)"
  },
  {
    "label": "TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT(\"toplevel\", event_name, [&](perfetto::EventContext& ctx) { EmitTaskLocation(ctx, pending_task); MaybeEmitIncomingTaskFlow(ctx, pending_task); MaybeEmitIPCHashAndDelay(ctx, pending_task); }, std::forward<Args>(args)...)"
  },
  {
    "label": "RunTaskImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTaskImpl(pending_task)"
  },
  {
    "label": "RunTaskImpl()",
    "kind": "Method",
    "detail": "Function (} private : class TaskAnnotatorBacktraceIntegrationTest ; void NOT_TAIL_CALLED)",
    "insertText": "RunTaskImpl(PendingTask& pending_task)"
  },
  {
    "label": "RegisterObserverForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObserverForTesting(ObserverForTesting* observer)"
  },
  {
    "label": "ClearObserverForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObserverForTesting()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_BASE_TRACING) static void EmitTaskLocation(perfetto::EventContext& ctx, const PendingTask& task)"
  },
  {
    "label": "MaybeEmitIncomingTaskFlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeEmitIncomingTaskFlow(perfetto::EventContext& ctx, const PendingTask& task)"
  },
  {
    "label": "MaybeEmitIPCHashAndDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeEmitIPCHashAndDelay(perfetto::EventContext& ctx, const PendingTask& task)"
  },
  {
    "label": "ScopedSetIpcHash()",
    "kind": "Method",
    "detail": "Function (# endif } ; class BASE_EXPORT TaskAnnotator::ScopedSetIpcHash { public :)",
    "insertText": "ScopedSetIpcHash(uint32_t ipc_hash)"
  },
  {
    "label": "ScopedSetIpcHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetIpcHash(const char* ipc_interface_name)"
  },
  {
    "label": "ScopedSetIpcHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetIpcHash(const ScopedSetIpcHash&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSetIpcHash&)",
    "insertText": "operator(const ScopedSetIpcHash&)"
  },
  {
    "label": "ScopedSetIpcHash()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetIpcHash()"
  },
  {
    "label": "GetIpcHash()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetIpcHash()"
  },
  {
    "label": "ScopedSetIpcHash()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedSetIpcHash(uint32_t ipc_hash, const char* ipc_interface_name)"
  },
  {
    "label": "LongTaskTracker()",
    "kind": "Method",
    "detail": "Function (raw_ptr<ScopedSetIpcHash> old_scoped_ipc_hash_ = nullptr ; uint32_t ipc_hash_ = 0 ; const char* ipc_interface_name_ = nullptr ; } ; class BASE_EXPORT TaskAnnotator::LongTaskTracker { public :)",
    "insertText": "LongTaskTracker(const TickClock* tick_clock, PendingTask& pending_task, TaskAnnotator* task_annotator)"
  },
  {
    "label": "LongTaskTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LongTaskTracker(const LongTaskTracker&)"
  },
  {
    "label": "LongTaskTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LongTaskTracker()"
  },
  {
    "label": "BeginTrackingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingTask()"
  },
  {
    "label": "EndTrackingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTrackingTask()"
  }
]