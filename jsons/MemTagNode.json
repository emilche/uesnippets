[
  {
    "label": "FMemoryProfilerAggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryProfilerAggregatedStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMemTagNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemTagNode"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Model / Memory . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" # include \" Insights / MemoryProfiler / ViewModels / MemorySharedState . h \" # include \" Insights / MemoryProfiler / ViewModels / MemoryTag . h \" # include \" Insights / MemoryProfiler / ViewModels / MemoryTracker . h \" namespace TraceServices { struct FMemoryProfilerAggregatedStats { uint32 Type ; uint32 InstanceCount = 0 U ; uint64 Min = 0 U ; uint64 Max = 0 U ; uint64 Average = 0 U ; } ; } namespace UE::Insights::MemoryProfiler { enum class EMemTagNodeType { MemTag,Group,InvalidOrMax,} ; class FMemTagNode ; typedef TSharedPtr<class FMemTagNode> FMemTagNodePtr ; typedef TSharedRef<class FMemTagNode> FMemTagNodeRef ; typedef TSharedRef<const class FMemTagNode> FMemTagNodeRefConst ; typedef TWeakPtr<class FMemTagNode> FMemTagNodeWeak ; class FMemTagNode : public FBaseTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FMemTagNode, FBaseTreeNode) public: explicit FMemTagNode(FMemoryTag* InMemTag) : FBaseTreeNode(FName(InMemTag->GetStatFullName(), 0), false) , Type(EMemTagNodeType::MemTag) , MemTag(InMemTag)"
  },
  {
    "label": "ResetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAggregatedStats()"
  },
  {
    "label": "FMemTagNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemTagNode(const FName InGroupName) : FBaseTreeNode(InGroupName, true) , Type(EMemTagNodeType::Group) , MemTag(nullptr)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EMemTagNodeType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetMemTrackerId()",
    "kind": "Method",
    "detail": "Function (} FMemoryTrackerId)",
    "insertText": "GetMemTrackerId()"
  },
  {
    "label": "GetTrackerText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetTrackerText()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "IsAddedToGraph()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAddedToGraph()"
  },
  {
    "label": "GetParentTagNode()",
    "kind": "Method",
    "detail": "Function (} FMemTagNodePtr)",
    "insertText": "GetParentTagNode()"
  },
  {
    "label": "SetParentTagNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParentTagNode(FMemTagNodePtr NodePtr)"
  },
  {
    "label": "GetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (ParentTagNode = NodePtr ; } const TraceServices::FMemoryProfilerAggregatedStats&)",
    "insertText": "GetAggregatedStats()"
  }
]