[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FVisualizerDebuggingStateImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizerDebuggingStateImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVisualizerDebuggingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizerDebuggingState"
  },
  {
    "label": "FVisualizerDebuggingState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # ifndef UE_VISUALIZER_DEBUGGING_STATE # define UE_VISUALIZER_DEBUGGING_STATE ! UE_BUILD_SHIPPING # endif struct FGuid ; namespace UE::Core { struct FVisualizerDebuggingStateImpl ; enum class EVisualizerDebuggingStateResult : uint8 { Success,StringCollision,FeatureDisabled,} ; struct FVisualizerDebuggingState {)",
    "insertText": "FVisualizerDebuggingState()"
  },
  {
    "label": "FVisualizerDebuggingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualizerDebuggingState(const FVisualizerDebuggingState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FVisualizerDebuggingState&)"
  },
  {
    "label": "FVisualizerDebuggingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualizerDebuggingState(FVisualizerDebuggingState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FVisualizerDebuggingState&&)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (# if ! UE_VISUALIZER_DEBUGGING_STATE [ [ nodiscard ] ] EVisualizerDebuggingStateResult)",
    "insertText": "Assign(const FGuid& UniqueId, void* DebugPtr)"
  },
  {
    "label": "AssignImpl()",
    "kind": "Method",
    "detail": "Function (protected : EVisualizerDebuggingStateResult)",
    "insertText": "AssignImpl(const FGuid& UniqueId, void* DebugPtr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Find(const FGuid& UniqueId)"
  }
]