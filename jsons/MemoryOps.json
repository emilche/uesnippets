[
  {
    "label": "TCanBitwiseRelocate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBitwiseRelocate"
  },
  {
    "label": "DefaultConstructElements()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<string . h> # include \" uLang / Common / Templates / TypeTraits . h \" namespace uLang { namespace Private { template<DestinationElementType,SourceElementType> struct TCanBitwiseRelocate { enum { Value = TOr<TAreTypesEqual<DestinationElementType,SourceElementType>,TAnd<TIsBitwiseConstructible<DestinationElementType,SourceElementType>,TIsTriviallyDestructible<SourceElementType>>>::Value } ; } ; } template<ElementType> ULANG_FORCEINLINE TEnableIf<! TIsZeroConstructType<ElementType>::Value>::Type)",
    "insertText": "DefaultConstructElements(void* Address, int32_t Count)"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (ElementType*)",
    "insertText": "Element(ElementType*)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Element)"
  },
  {
    "label": "DefaultConstructElements()",
    "kind": "Method",
    "detail": "Function (+ + Element ; - - Count ; } } template<ElementType> ULANG_FORCEINLINE TEnableIf<TIsZeroConstructType<ElementType>::Value>::Type)",
    "insertText": "DefaultConstructElements(void* Elements, int32_t Count)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(Elements, 0, sizeof(ElementType) * Count)"
  },
  {
    "label": "DestructElement()",
    "kind": "Method",
    "detail": "Function (} } template<ElementType> ULANG_FORCEINLINE TEnableIf<! TIsTriviallyDestructible<ElementType>::Value>::Type)",
    "insertText": "DestructElement(ElementType* Element)"
  },
  {
    "label": "DestructItemsElementTypeTypedef()",
    "kind": "Method",
    "detail": "Function (using DestructItemsElementTypeTypedef = ElementType ; Element -> DestructItemsElementTypeTypedef::~)",
    "insertText": "DestructItemsElementTypeTypedef()"
  },
  {
    "label": "DestructElements()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> ULANG_FORCEINLINE TEnableIf<! TIsTriviallyDestructible<ElementType>::Value>::Type)",
    "insertText": "DestructElements(ElementType* Element, int32_t Count)"
  },
  {
    "label": "DestructElements()",
    "kind": "Method",
    "detail": "Function (+ + Element ; - - Count ; } } template<ElementType> ULANG_FORCEINLINE TEnableIf<TIsTriviallyDestructible<ElementType>::Value>::Type)",
    "insertText": "DestructElements(ElementType* Elements, int32_t Count)"
  },
  {
    "label": "ConstructElements()",
    "kind": "Method",
    "detail": "Function (} template<DestinationElementType,SourceElementType> ULANG_FORCEINLINE TEnableIf<! TIsBitwiseConstructible<DestinationElementType,SourceElementType>::Value>::Type)",
    "insertText": "ConstructElements(void* Dest, const SourceElementType* Source, int32_t Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Dest) DestinationElementType(*Source)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(Dest, Source, sizeof(SourceElementType) * Count)"
  },
  {
    "label": "RelocateConstructElements()",
    "kind": "Method",
    "detail": "Function (} } template<DestinationElementType,SourceElementType> ULANG_FORCEINLINE TEnableIf<! Private::TCanBitwiseRelocate<DestinationElementType,SourceElementType>::Value>::Type)",
    "insertText": "RelocateConstructElements(void* Dest, const SourceElementType* Source, int32_t Count)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(Dest, Source, sizeof(SourceElementType) * Count)"
  },
  {
    "label": "CompareElements()",
    "kind": "Method",
    "detail": "Function (} } template<ElementType> ULANG_FORCEINLINE TEnableIf<TTypeTraits<ElementType>::IsBytewiseComparable,bool>::Type)",
    "insertText": "CompareElements(const ElementType* A, const ElementType* B, int32_t Count)"
  }
]