[
  {
    "label": "FBuildInstallerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildInstallerThread"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMsg"
  },
  {
    "label": "FBuildInstallerSharedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildInstallerSharedContext"
  },
  {
    "label": "FBuildInstallerSharedContextFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildInstallerSharedContextFactory"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Runnable . h \" # include \" Containers / MpscQueue . h \" # include \" Interfaces / IBuildInstallerSharedContext . h \" namespace BuildPatchServices { class FBuildInstallerThread : public IBuildInstallerThread,public FRunnable { enum class EMsg : uint8 { None = 0,)",
    "insertText": "RunTask(1 << 0), Exit = (1 << 1)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EMsg)"
  },
  {
    "label": "FMsg()",
    "kind": "Method",
    "detail": "Function (struct FMsg {)",
    "insertText": "FMsg()"
  },
  {
    "label": "FMsg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMsg(TUniqueFunction<void()> InTask, EMsg InMsg) : Task(MoveTemp(InTask)) , Msg(InMsg)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FBuildInstallerThread()",
    "kind": "Method",
    "detail": "Function (EMsg Msg = EMsg::None ; } ; public : ~)",
    "insertText": "FBuildInstallerThread()"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartThread(const TCHAR* DebugName)"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTask(TUniqueFunction<void()> Task)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FBuildInstallerSharedContext()",
    "kind": "Method",
    "detail": "Function (private : FEvent* DoWorkEvent = nullptr ; FRunnableThread* Thread = nullptr ; TMpscQueue<FMsg> MsgQueue ; } ; class FBuildInstallerSharedContext : public IBuildInstallerSharedContext { public :)",
    "insertText": "FBuildInstallerSharedContext(const TCHAR* InDebugName) : DebugName(InDebugName)"
  },
  {
    "label": "FBuildInstallerSharedContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBuildInstallerSharedContext()"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (IBuildInstallerThread*)",
    "insertText": "CreateThread()"
  },
  {
    "label": "ReleaseThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseThread(IBuildInstallerThread* Thread)"
  },
  {
    "label": "PreallocateThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreallocateThreads(uint32 NumThreads)"
  },
  {
    "label": "NumThreadsPerInstaller()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumThreadsPerInstaller(bool bUseChunkDBs)"
  },
  {
    "label": "CreateThreadInternal()",
    "kind": "Method",
    "detail": "Function (private : IBuildInstallerThread*)",
    "insertText": "CreateThreadInternal()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : TArray<IBuildInstallerThread*> ThreadFreeList ; FCriticalSection ThreadFreeListCS ; const TCHAR* DebugName ; uint32 ThreadCount = 0 ; bool bWarnOnCreateThread = false ; } ; class FBuildInstallerSharedContextFactory { public : IBuildInstallerSharedContextRef)",
    "insertText": "Create(const TCHAR* DebugName)"
  }
]