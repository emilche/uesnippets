[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MatrixMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixMetadata"
  },
  {
    "label": "AllowedRegVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllowedRegVector"
  },
  {
    "label": "GraphMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphMetadata"
  },
  {
    "label": "NodeMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeMetadata"
  },
  {
    "label": "RegAllocSolverImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegAllocSolverImpl"
  },
  {
    "label": "EdgeMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EdgeMetadata"
  },
  {
    "label": "SpillCostComparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpillCostComparator"
  },
  {
    "label": "PBQPRAGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PBQPRAGraph"
  },
  {
    "label": "getSpillOptionIdx()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_REGALLOCPBQP_H # define LLVM_CODEGEN_REGALLOCPBQP_H # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / PBQP / CostAllocator . h \" # include \" llvm / CodeGen / PBQP / ReductionRules . h \" # include \" llvm / CodeGen / PBQPRAConstraint . h \" # include \" llvm / Support / ErrorHandling . h \" namespace llvm { class raw_ostream ; namespace PBQP { namespace RegAlloc { unsigned)",
    "insertText": "getSpillOptionIdx()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MatrixMetadata&)"
  },
  {
    "label": "MatrixMetadata()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MatrixMetadata(const Matrix& M) : WorstRow(0), WorstCol(0), UnsafeRows(new bool[M.getRows() - 1]()), UnsafeCols(new bool[M.getCols() - 1]())"
  },
  {
    "label": "getCols()",
    "kind": "Method",
    "detail": "Function (unsigned* ColCounts = new unsigned [ M .)",
    "insertText": "getCols() - 1]()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned RowCount = 0 ;)",
    "insertText": "for(unsigned j = 1; j < M.getCols(); ++j)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (+ + RowCount ; + + ColCounts [ j - 1 ] ; UnsafeRows [ i - 1 ] = true ; UnsafeCols [ j - 1 ] = true ; } } WorstRow =)",
    "insertText": "max(WorstRow, RowCount)"
  },
  {
    "label": "max_element()",
    "kind": "Method",
    "detail": "Function (} unsigned WorstColCountForCurRow =*)",
    "insertText": "max_element(ColCounts, ColCounts + M.getCols() - 1)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (WorstCol =)",
    "insertText": "max(WorstCol, WorstColCountForCurRow)"
  },
  {
    "label": "getWorstRow()",
    "kind": "Method",
    "detail": "Function (delete [ ] ColCounts ; } unsigned)",
    "insertText": "getWorstRow()"
  },
  {
    "label": "getUnsafeCols()",
    "kind": "Method",
    "detail": "Function (} const bool*)",
    "insertText": "getUnsafeCols()"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (} private : unsigned WorstRow,WorstCol ; std::unique_ptr<bool [ ]> UnsafeRows ; std::unique_ptr<bool [ ]> UnsafeCols ; } ; class AllowedRegVector { hash_code)",
    "insertText": "hash_value(const AllowedRegVector &)"
  },
  {
    "label": "AllowedRegVector()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AllowedRegVector() : NumOpts(0), Opts(nullptr)"
  },
  {
    "label": "AllowedRegVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AllowedRegVector(const std::vector<unsigned> &OptVec) : NumOpts(OptVec.size()), Opts(new unsigned[NumOpts])"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(OptVec.begin(), OptVec.end(), Opts.get())"
  },
  {
    "label": "AllowedRegVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AllowedRegVector(const AllowedRegVector &Other) : NumOpts(Other.NumOpts), Opts(new unsigned[NumOpts])"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(Other.Opts.get(), Other.Opts.get() + NumOpts, Opts.get())"
  },
  {
    "label": "AllowedRegVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AllowedRegVector(AllowedRegVector &&Other) : NumOpts(std::move(Other.NumOpts)), Opts(std::move(Other.Opts))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AllowedRegVector&)",
    "insertText": "operator(const AllowedRegVector &Other)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (NumOpts = Other . NumOpts ; Opts .)",
    "insertText": "reset(new unsigned[NumOpts])"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (NumOpts =)",
    "insertText": "move(Other.NumOpts)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Opts =)",
    "insertText": "move(Other.Opts)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (} private : unsigned NumOpts ; std::unique_ptr<unsigned [ ]> Opts ; } ; hash_code)",
    "insertText": "hash_value(const AllowedRegVector &OptRegs)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (unsigned* OStart = OptRegs . Opts .)",
    "insertText": "get()"
  },
  {
    "label": "GraphMetadata()",
    "kind": "Method",
    "detail": "Function (} class GraphMetadata { private : typedef ValuePool<AllowedRegVector> AllowedRegVecPool ; public : typedef AllowedRegVecPool::PoolRef AllowedRegVecRef ;)",
    "insertText": "GraphMetadata(MachineFunction &MF, LiveIntervals &LIS, MachineBlockFrequencyInfo &MBFI) : MF(MF), LIS(LIS), MBFI(MBFI)"
  },
  {
    "label": "setNodeIdForVReg()",
    "kind": "Method",
    "detail": "Function (} MachineFunction& MF ; LiveIntervals& LIS ; MachineBlockFrequencyInfo& MBFI ; void)",
    "insertText": "setNodeIdForVReg(unsigned VReg, GraphBase::NodeId NId)"
  },
  {
    "label": "getNodeIdForVReg()",
    "kind": "Method",
    "detail": "Function (VRegToNodeId [ VReg ] = NId ; } GraphBase::NodeId)",
    "insertText": "getNodeIdForVReg(unsigned VReg)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto VRegItr = VRegToNodeId .)",
    "insertText": "find(VReg)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (VRegToNodeId .)",
    "insertText": "erase(VReg)"
  },
  {
    "label": "getAllowedRegs()",
    "kind": "Method",
    "detail": "Function (} AllowedRegVecRef)",
    "insertText": "getAllowedRegs(AllowedRegVector Allowed)"
  },
  {
    "label": "NodeMetadata()",
    "kind": "Method",
    "detail": "Function (} private : DenseMap<unsigned,GraphBase::NodeId> VRegToNodeId ; AllowedRegVecPool AllowedRegVecs ; } ; class NodeMetadata { public : typedef RegAlloc::AllowedRegVector AllowedRegVector ; typedef enum { Unprocessed,NotProvablyAllocatable,ConservativelyAllocatable,OptimallyReducible } ReductionState ;)",
    "insertText": "NodeMetadata() : RS(Unprocessed), NumOpts(0), DeniedOpts(0), OptUnsafeEdges(nullptr), VReg(0) #ifndef NDEBUG , everConservativelyAllocatable(false)"
  },
  {
    "label": "NodeMetadata()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMetadata(const NodeMetadata &Other) : RS(Other.RS), NumOpts(Other.NumOpts), DeniedOpts(Other.DeniedOpts), OptUnsafeEdges(new unsigned[NumOpts]), VReg(Other.VReg), AllowedRegs(Other.AllowedRegs) #ifndef NDEBUG , everConservativelyAllocatable(Other.everConservativelyAllocatable)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(&Other.OptUnsafeEdges[0], &Other.OptUnsafeEdges[NumOpts], &OptUnsafeEdges[0])"
  },
  {
    "label": "NodeMetadata()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "NodeMetadata(NodeMetadata &&Other) : RS(Other.RS), NumOpts(Other.NumOpts), DeniedOpts(Other.DeniedOpts), OptUnsafeEdges(std::move(Other.OptUnsafeEdges)), VReg(Other.VReg), AllowedRegs(std::move(Other.AllowedRegs)) #ifndef NDEBUG , everConservativelyAllocatable(Other.everConservativelyAllocatable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} NodeMetadata&)",
    "insertText": "operator(const NodeMetadata &Other)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(Other.OptUnsafeEdges.get(), Other.OptUnsafeEdges.get() + NumOpts, OptUnsafeEdges.get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VReg = Other . VReg ; AllowedRegs = Other . AllowedRegs ; # ifndef NDEBUG everConservativelyAllocatable = Other . everConservativelyAllocatable ; # endif return* this ; } NodeMetadata&)",
    "insertText": "operator(NodeMetadata &&Other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (RS = Other . RS ; NumOpts = Other . NumOpts ; DeniedOpts = Other . DeniedOpts ; OptUnsafeEdges =)",
    "insertText": "move(Other.OptUnsafeEdges)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (VReg = Other . VReg ; AllowedRegs =)",
    "insertText": "move(Other.AllowedRegs)"
  },
  {
    "label": "setVReg()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG everConservativelyAllocatable = Other . everConservativelyAllocatable ; # endif return* this ; } void)",
    "insertText": "setVReg(unsigned VReg)"
  },
  {
    "label": "getVReg()",
    "kind": "Method",
    "detail": "Function (this -> VReg = VReg ; } unsigned)",
    "insertText": "getVReg()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (this -> AllowedRegs =)",
    "insertText": "move(AllowedRegs)"
  },
  {
    "label": "getAllowedRegs()",
    "kind": "Method",
    "detail": "Function (} const AllowedRegVector&)",
    "insertText": "getAllowedRegs()"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (NumOpts = Costs .)",
    "insertText": "getLength()"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (OptUnsafeEdges = std::unique_ptr<)",
    "insertText": "unsigned(new unsigned[NumOpts]())"
  },
  {
    "label": "getReductionState()",
    "kind": "Method",
    "detail": "Function (} ReductionState)",
    "insertText": "getReductionState()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RS >= this->RS && \"A node's reduction state can not be downgraded\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> RS = RS ; # ifndef NDEBUG)",
    "insertText": "if(RS == ConservativelyAllocatable)"
  },
  {
    "label": "handleAddEdge()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "handleAddEdge(const MatrixMetadata& MD, bool Transpose)"
  },
  {
    "label": "getWorstRow()",
    "kind": "Method",
    "detail": "Function (DeniedOpts + = Transpose ? MD .)",
    "insertText": "getWorstRow() : MD.getWorstCol()"
  },
  {
    "label": "getUnsafeCols()",
    "kind": "Method",
    "detail": "Function (const bool* UnsafeOpts = Transpose ? MD .)",
    "insertText": "getUnsafeCols() : MD.getUnsafeRows()"
  },
  {
    "label": "handleRemoveEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleRemoveEdge(const MatrixMetadata& MD, bool Transpose)"
  },
  {
    "label": "isConservativelyAllocatable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConservativelyAllocatable()"
  },
  {
    "label": "wasConservativelyAllocatable()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG bool)",
    "insertText": "wasConservativelyAllocatable()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} Solution)",
    "insertText": "solve()"
  },
  {
    "label": "setSolver()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "setSolver(*this)"
  },
  {
    "label": "setup()",
    "kind": "Method",
    "detail": "Function (Solution S ;)",
    "insertText": "setup()"
  },
  {
    "label": "backpropagate()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "backpropagate(G, reduce())"
  },
  {
    "label": "unsetSolver()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "unsetSolver()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(G.getNodeCosts(NId).getLength() > 1 && \"PBQP Graph should not contain single or zero-option nodes\")"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "getNodeMetadata(NId).setup(G.getNodeCosts(NId))"
  },
  {
    "label": "handleRemoveNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleRemoveNode(NodeId NId)"
  },
  {
    "label": "handleSetNodeCosts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleSetNodeCosts(NodeId NId, const Vector& newCosts)"
  },
  {
    "label": "handleAddEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleAddEdge(EdgeId EId)"
  },
  {
    "label": "handleReconnectEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleReconnectEdge(EId, G.getEdgeNode1Id(EId))"
  },
  {
    "label": "handleReconnectEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleReconnectEdge(EId, G.getEdgeNode2Id(EId))"
  },
  {
    "label": "handleRemoveEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleRemoveEdge(EdgeId EId)"
  },
  {
    "label": "handleDisconnectEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleDisconnectEdge(EId, G.getEdgeNode1Id(EId))"
  },
  {
    "label": "handleDisconnectEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleDisconnectEdge(EId, G.getEdgeNode2Id(EId))"
  },
  {
    "label": "handleDisconnectEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleDisconnectEdge(EdgeId EId, NodeId NId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (NodeMetadata& NMd = G .)",
    "insertText": "getNodeMetadata(NId)"
  },
  {
    "label": "getEdgeCosts()",
    "kind": "Method",
    "detail": "Function (const MatrixMetadata& MMd = G .)",
    "insertText": "getEdgeCosts(EId).getMetadata()"
  },
  {
    "label": "handleRemoveEdge()",
    "kind": "Method",
    "detail": "Function (NMd .)",
    "insertText": "handleRemoveEdge(MMd, NId == G.getEdgeNode2Id(EId))"
  },
  {
    "label": "promote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "promote(NId, NMd)"
  },
  {
    "label": "handleReconnectEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleReconnectEdge(EdgeId EId, NodeId NId)"
  },
  {
    "label": "handleAddEdge()",
    "kind": "Method",
    "detail": "Function (NMd .)",
    "insertText": "handleAddEdge(MMd, NId == G.getEdgeNode2Id(EId))"
  },
  {
    "label": "handleUpdateCosts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "handleUpdateCosts(EdgeId EId, const Matrix& NewCosts)"
  },
  {
    "label": "getEdgeNode1Id()",
    "kind": "Method",
    "detail": "Function (NodeId N1Id = G .)",
    "insertText": "getEdgeNode1Id(EId)"
  },
  {
    "label": "getEdgeNode2Id()",
    "kind": "Method",
    "detail": "Function (NodeId N2Id = G .)",
    "insertText": "getEdgeNode2Id(EId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (NodeMetadata& N1Md = G .)",
    "insertText": "getNodeMetadata(N1Id)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (NodeMetadata& N2Md = G .)",
    "insertText": "getNodeMetadata(N2Id)"
  },
  {
    "label": "handleRemoveEdge()",
    "kind": "Method",
    "detail": "Function (N1Md .)",
    "insertText": "handleRemoveEdge(OldMMd, Transpose)"
  },
  {
    "label": "handleRemoveEdge()",
    "kind": "Method",
    "detail": "Function (N2Md .)",
    "insertText": "handleRemoveEdge(OldMMd, !Transpose)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (const MatrixMetadata& MMd = NewCosts .)",
    "insertText": "getMetadata()"
  },
  {
    "label": "handleAddEdge()",
    "kind": "Method",
    "detail": "Function (N1Md .)",
    "insertText": "handleAddEdge(MMd, Transpose)"
  },
  {
    "label": "handleAddEdge()",
    "kind": "Method",
    "detail": "Function (N2Md .)",
    "insertText": "handleAddEdge(MMd, !Transpose)"
  },
  {
    "label": "promote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "promote(N1Id, N1Md)"
  },
  {
    "label": "promote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "promote(N2Id, N2Md)"
  },
  {
    "label": "promote()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "promote(NodeId NId, NodeMetadata& NMd)"
  },
  {
    "label": "moveToOptimallyReducibleNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveToOptimallyReducibleNodes(NId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NMd.getReductionState() == NodeMetadata::NotProvablyAllocatable && NMd.isConservativelyAllocatable())"
  },
  {
    "label": "moveToConservativelyAllocatableNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveToConservativelyAllocatableNodes(NId)"
  },
  {
    "label": "removeFromCurrentSet()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "removeFromCurrentSet(NodeId NId)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (OptimallyReducibleNodes .)",
    "insertText": "erase(NId)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (break ; case NodeMetadata::ConservativelyAllocatable :)",
    "insertText": "assert(ConservativelyAllocatableNodes.find(NId) != ConservativelyAllocatableNodes.end() && \"Node not in conservatively allocatable set.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (break ; case NodeMetadata::NotProvablyAllocatable :)",
    "insertText": "assert(NotProvablyAllocatableNodes.find(NId) != NotProvablyAllocatableNodes.end() && \"Node not in not-provably-allocatable set.\")"
  },
  {
    "label": "moveToOptimallyReducibleNodes()",
    "kind": "Method",
    "detail": "Function (break ; } } void)",
    "insertText": "moveToOptimallyReducibleNodes(NodeId NId)"
  },
  {
    "label": "removeFromCurrentSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeFromCurrentSet(NId)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (OptimallyReducibleNodes .)",
    "insertText": "insert(NId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "getNodeMetadata(NId).setReductionState( NodeMetadata::OptimallyReducible)"
  },
  {
    "label": "moveToConservativelyAllocatableNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "moveToConservativelyAllocatableNodes(NodeId NId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "getNodeMetadata(NId).setReductionState( NodeMetadata::ConservativelyAllocatable)"
  },
  {
    "label": "moveToNotProvablyAllocatableNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "moveToNotProvablyAllocatableNodes(NodeId NId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "getNodeMetadata(NId).setReductionState( NodeMetadata::NotProvablyAllocatable)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} } std::vector<GraphBase::NodeId>)",
    "insertText": "reduce()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!G.empty() && \"Cannot reduce empty graph.\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (typedef GraphBase::NodeId NodeId ; std::vector<NodeId> NodeStack ;)",
    "insertText": "while(true)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (NodeSet::iterator NItr = OptimallyReducibleNodes .)",
    "insertText": "begin()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (NodeId NId =* NItr ; OptimallyReducibleNodes .)",
    "insertText": "erase(NItr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (NodeStack .)",
    "insertText": "push_back(NId)"
  },
  {
    "label": "applyR2()",
    "kind": "Method",
    "detail": "Function (break ; case 2 :)",
    "insertText": "applyR2(G, NId)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "llvm_unreachable(\"Not an optimally reducible node.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!ConservativelyAllocatableNodes.empty())"
  },
  {
    "label": "disconnectAllNeighborsFromNode()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "disconnectAllNeighborsFromNode(NId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!NotProvablyAllocatableNodes.empty())"
  },
  {
    "label": "min_element()",
    "kind": "Method",
    "detail": "Function (NodeSet::iterator NItr =)",
    "insertText": "min_element(NotProvablyAllocatableNodes.begin(), NotProvablyAllocatableNodes.end(), SpillCostComparator(G))"
  },
  {
    "label": "SpillCostComparator()",
    "kind": "Method",
    "detail": "Function (} else break ; } return NodeStack ; } class SpillCostComparator { public :)",
    "insertText": "SpillCostComparator(const Graph& G) : G(G)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(NodeId N1Id, NodeId N2Id)"
  },
  {
    "label": "getNodeCosts()",
    "kind": "Method",
    "detail": "Function (PBQPNum N1SC = G .)",
    "insertText": "getNodeCosts(N1Id)"
  },
  {
    "label": "getNodeCosts()",
    "kind": "Method",
    "detail": "Function (PBQPNum N2SC = G .)",
    "insertText": "getNodeCosts(N2Id)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(raw_ostream &OS)"
  },
  {
    "label": "printDot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printDot(raw_ostream &OS)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} ; Solution)",
    "insertText": "solve(PBQPRAGraph& G)"
  },
  {
    "label": "RegAllocSolver()",
    "kind": "Method",
    "detail": "Function (RegAllocSolverImpl)",
    "insertText": "RegAllocSolver(G)"
  },
  {
    "label": "createPBQPRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (} } } FunctionPass*)",
    "insertText": "createPBQPRegisterAllocator(char *customPassID = nullptr)"
  }
]