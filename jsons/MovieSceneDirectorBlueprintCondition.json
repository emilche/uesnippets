[
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "MOVIESCENETRACKS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETRACKS_API"
  },
  {
    "label": "FMovieSceneDirectorBlueprintConditionInvoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDirectorBlueprintConditionInvoker"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Conditions / MovieSceneCondition . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" MovieSceneSequenceID . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" MovieSceneDirectorBlueprintCondition . generated . h \" namespace UE { namespace MovieScene { struct FSharedPlaybackState ; } })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "EvaluateDirectorBlueprintCondition()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FMovieSceneDirectorBlueprintConditionInvoker { using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ; bool)",
    "insertText": "EvaluateDirectorBlueprintCondition(FGuid BindingGuid, FMovieSceneSequenceID SequenceID, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, const FMovieSceneDirectorBlueprintConditionData& DirectorBlueprintCondition)"
  },
  {
    "label": "InvokeDirectorBlueprintCondition()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "InvokeDirectorBlueprintCondition(UObject* DirectorInstance, const FMovieSceneDirectorBlueprintConditionData& DirectorBlueprintCondition, const FMovieSceneConditionContext& ConditionContext)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(DisplayName=\"Director Blueprint Condition\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Category=\"Sequencer|Condition\")"
  },
  {
    "label": "EvaluateConditionInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "EvaluateConditionInternal(FGuid BindingGuid, FMovieSceneSequenceID SequenceID, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetScopeInternal()",
    "kind": "Method",
    "detail": "Function (EMovieSceneConditionScope)",
    "insertText": "GetScopeInternal()"
  }
]