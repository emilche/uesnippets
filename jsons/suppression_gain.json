[
  {
    "label": "SuppressionGain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SuppressionGain"
  },
  {
    "label": "LowNoiseRenderDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LowNoiseRenderDetector"
  },
  {
    "label": "GainParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GainParameters"
  },
  {
    "label": "SuppressionGain()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_GAIN_H_ # define MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_GAIN_H_ # include<array> # include<atomic> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec_state . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" # include \" modules / audio_processing / aec3 / moving_average . h \" # include \" modules / audio_processing / aec3 / nearend_detector . h \" # include \" modules / audio_processing / aec3 / render_signal_analyzer . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class SuppressionGain { public :)",
    "insertText": "SuppressionGain(const EchoCanceller3Config& config, Aec3Optimization optimization, int sample_rate_hz, size_t num_capture_channels)"
  },
  {
    "label": "SuppressionGain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SuppressionGain()"
  },
  {
    "label": "SuppressionGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressionGain(const SuppressionGain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SuppressionGain&)",
    "insertText": "operator(const SuppressionGain&)"
  },
  {
    "label": "GetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGain(rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> nearend_spectrum, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> echo_spectrum, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> residual_echo_spectrum, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> residual_echo_spectrum_unbounded, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> comfort_noise_spectrum, const RenderSignalAnalyzer& render_signal_analyzer, const AecState& aec_state, const Block& render, bool clock_drift, float* high_bands_gain, std::array<float, kFftLengthBy2Plus1>* low_band_gain)"
  },
  {
    "label": "IsDominantNearend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDominantNearend()"
  },
  {
    "label": "SetInitialState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInitialState(bool state)"
  },
  {
    "label": "UpperBandsGain()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "UpperBandsGain(rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> echo_spectrum, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> comfort_noise_spectrum, const absl::optional<int>& narrow_peak_band, bool saturated_echo, const Block& render, const std::array<float, kFftLengthBy2Plus1>& low_band_gain)"
  },
  {
    "label": "GainToNoAudibleEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GainToNoAudibleEcho(const std::array<float, kFftLengthBy2Plus1>& nearend, const std::array<float, kFftLengthBy2Plus1>& echo, const std::array<float, kFftLengthBy2Plus1>& masker, std::array<float, kFftLengthBy2Plus1>* gain)"
  },
  {
    "label": "LowerBandGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowerBandGain(bool stationary_with_low_power, const AecState& aec_state, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> suppressor_input, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> residual_echo, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> comfort_noise, bool clock_drift, std::array<float, kFftLengthBy2Plus1>* gain)"
  },
  {
    "label": "GetMinGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinGain(rtc::ArrayView<const float> weighted_residual_echo, rtc::ArrayView<const float> last_nearend, rtc::ArrayView<const float> last_echo, bool low_noise_render, bool saturated_echo, rtc::ArrayView<float> min_gain)"
  },
  {
    "label": "GetMaxGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaxGain(rtc::ArrayView<float> max_gain)"
  },
  {
    "label": "Detect()",
    "kind": "Method",
    "detail": "Function (class LowNoiseRenderDetector { public : bool)",
    "insertText": "Detect(const Block& render)"
  },
  {
    "label": "GainParameters()",
    "kind": "Method",
    "detail": "Function (private : float average_power_ = 3 2 7 6 8 . f* 3 2 7 6 8 . f ; } ; struct GainParameters {)",
    "insertText": "GainParameters(int last_lf_band, int first_hf_band, const EchoCanceller3Config::Suppressor::Tuning& tuning)"
  }
]