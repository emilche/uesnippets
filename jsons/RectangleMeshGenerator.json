[
  {
    "label": "FRectangleMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRectangleMeshGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRoundedRectangleMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRoundedRectangleMeshGenerator"
  },
  {
    "label": "FRectangleMeshGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IndexTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" MeshShapeGenerator . h \" # include \" Misc / EnumClassFlags . h \" namespace UE { namespace Geometry { class FRectangleMeshGenerator : public FMeshShapeGenerator { public : FVector3d Origin ; FVector3f Normal ; double Width ; double Height ; int WidthVertexCount ; int HeightVertexCount ; bool bScaleUVByAspectRatio = true ; bool bSinglePolyGroup = false ; FIndex2i IndicesMap ; public :)",
    "insertText": "FRectangleMeshGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "MakeVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "MakeVertex(int CornerIndex, double x, double y)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "v(0, 0, 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (v [ IndicesMap . A ] = x ; v [ IndicesMap . B ] = y ; return Origin + v ; } } ; enum class ERoundedRectangleCorner : uint8 { None = 0,BottomLeft = 1,BottomRight = 2,TopLeft = 4,TopRight = 8,All = 1 5 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERoundedRectangleCorner)"
  },
  {
    "label": "SideInCorners()",
    "kind": "Method",
    "detail": "Function (class FRoundedRectangleMeshGenerator : public FRectangleMeshGenerator { public : double Radius ; int AngleSamples ; ERoundedRectangleCorner SharpCorners ; bool)",
    "insertText": "SideInCorners(int SideX, int SideY, ERoundedRectangleCorner Corners)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int SideInCorners =)",
    "insertText": "int(Corners)&((SideY ? 4 : 1) * (SideX ? 2 : 1))"
  },
  {
    "label": "FlagsValue()",
    "kind": "Method",
    "detail": "Function (int NumSharp = 0 ; int)",
    "insertText": "FlagsValue(int)"
  },
  {
    "label": "FlagsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagsValue(FlagsValue - 1)"
  },
  {
    "label": "FRoundedRectangleMeshGenerator()",
    "kind": "Method",
    "detail": "Function (NumSharp + + ; } return NumSharp ; } public :)",
    "insertText": "FRoundedRectangleMeshGenerator()"
  }
]