[
  {
    "label": "MCAsmLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLayout"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCLOHType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MCLOHType"
  },
  {
    "label": "MCLOHDirective",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLOHDirective"
  },
  {
    "label": "raw_counting_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_counting_ostream"
  },
  {
    "label": "MCLOHContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLOHContainer"
  },
  {
    "label": "MCLOHDirectiveName()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCLINKEROPTIMIZATIONHINT_H # define LLVM_MC_MCLINKEROPTIMIZATIONHINT_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / StringSwitch . h \" # include \" llvm / MC / MCMachObjectWriter . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { class MCAsmLayout ; class MCSymbol ; enum MCLOHType { MCLOH_AdrpAdrp = 0 x1u,MCLOH_AdrpLdr = 0 x2u,MCLOH_AdrpAddLdr = 0 x3u,MCLOH_AdrpLdrGotLdr = 0 x4u,MCLOH_AdrpAddStr = 0 x5u,MCLOH_AdrpLdrGotStr = 0 x6u,MCLOH_AdrpAdd = 0 x7u,MCLOH_AdrpLdrGot = 0 x8u } ; StringRef)",
    "insertText": "MCLOHDirectiveName()"
  },
  {
    "label": "isValidMCLOHType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidMCLOHType(unsigned Kind)"
  },
  {
    "label": "MCLOHCaseNameToId()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MCLOHCaseNameToId(Name) .Case(#Name, MCLOH_ ## Name) return StringSwitch<int>(Name) MCLOHCaseNameToId(AdrpAdrp) MCLOHCaseNameToId(AdrpLdr) MCLOHCaseNameToId(AdrpAddLdr) MCLOHCaseNameToId(AdrpLdrGotLdr) MCLOHCaseNameToId(AdrpAddStr) MCLOHCaseNameToId(AdrpLdrGotStr) MCLOHCaseNameToId(AdrpAdd) MCLOHCaseNameToId(AdrpLdrGot) .Default(-1)"
  },
  {
    "label": "MCLOHIdToName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "MCLOHIdToName(MCLOHType Kind)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MCLOHCaseIdToName(Name) case MCLOH_ ## Name: return StringRef(#Name)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpAdrp)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpLdr)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpAddLdr)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpLdrGotLdr)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpAddStr)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpLdrGotStr)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpAdd)"
  },
  {
    "label": "MCLOHCaseIdToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MCLOHCaseIdToName(AdrpLdrGot)"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "StringRef()"
  },
  {
    "label": "MCLOHIdToNbArgs()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MCLOHIdToNbArgs(MCLOHType Kind)"
  },
  {
    "label": "MCLOHDirective()",
    "kind": "Method",
    "detail": "Function (public : typedef SmallVectorImpl<MCSymbol*> LOHArgs ;)",
    "insertText": "MCLOHDirective(MCLOHType Kind, const LOHArgs &Args) : Kind(Kind), Args(Args.begin(), Args.end())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValidMCLOHType(Kind) && \"Invalid LOH directive type!\")"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} MCLOHType)",
    "insertText": "getKind()"
  },
  {
    "label": "getStream()",
    "kind": "Method",
    "detail": "Function (raw_ostream& OutStream = ObjWriter .)",
    "insertText": "getStream()"
  },
  {
    "label": "emit_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emit_impl(OutStream, ObjWriter, Layout)"
  },
  {
    "label": "getEmitSize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getEmitSize(const MachObjectWriter &ObjWriter, const MCAsmLayout &Layout)"
  },
  {
    "label": "write_impl()",
    "kind": "Method",
    "detail": "Function (class raw_counting_ostream : public raw_ostream { uint64_t Count ; void)",
    "insertText": "write_impl(const char *, size_t size)"
  },
  {
    "label": "current_pos()",
    "kind": "Method",
    "detail": "Function (Count + = size ; } uint64_t)",
    "insertText": "current_pos()"
  },
  {
    "label": "raw_counting_ostream()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "raw_counting_ostream()"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "MCLOHContainer()",
    "kind": "Method",
    "detail": "Function (} } ; class MCLOHContainer { uint64_t EmitSize ; SmallVector<MCLOHDirective,3 2> Directives ; public : typedef SmallVectorImpl<MCLOHDirective> LOHDirectives ;)",
    "insertText": "MCLOHContainer() : EmitSize(0)"
  },
  {
    "label": "getDirectives()",
    "kind": "Method",
    "detail": "Function (} ; const LOHDirectives&)",
    "insertText": "getDirectives()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Directives .)",
    "insertText": "push_back(MCLOHDirective(Kind, Args))"
  },
  {
    "label": "emit()",
    "kind": "Method",
    "detail": "Function (} return EmitSize ; } void)",
    "insertText": "emit(MachObjectWriter &ObjWriter, const MCAsmLayout &Layout)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Directives .)",
    "insertText": "clear()"
  }
]