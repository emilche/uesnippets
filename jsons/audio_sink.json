[
  {
    "label": "AudioSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSink"
  },
  {
    "label": "AudioSinkFork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSinkFork"
  },
  {
    "label": "VoidAudioSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoidAudioSink"
  },
  {
    "label": "AudioSink()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_SINK_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_SINK_H_ # include \" api / audio / audio_frame . h \" namespace webrtc { namespace test { class AudioSink { public :)",
    "insertText": "AudioSink()"
  },
  {
    "label": "AudioSink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioSink(const AudioSink&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioSink&)",
    "insertText": "operator(const AudioSink&)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteArray(const int16_t* audio, size_t num_samples)"
  },
  {
    "label": "WriteAudioFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteAudioFrame(const AudioFrame& audio_frame)"
  },
  {
    "label": "AudioSinkFork()",
    "kind": "Method",
    "detail": "Function (} } ; class AudioSinkFork : public AudioSink { public :)",
    "insertText": "AudioSinkFork(AudioSink* left, AudioSink* right) : left_sink_(left), right_sink_(right)"
  },
  {
    "label": "AudioSinkFork()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioSinkFork(const AudioSinkFork&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioSinkFork&)",
    "insertText": "operator(const AudioSinkFork&)"
  },
  {
    "label": "VoidAudioSink()",
    "kind": "Method",
    "detail": "Function (private : AudioSink* left_sink_ ; AudioSink* right_sink_ ; } ; class VoidAudioSink : public AudioSink { public :)",
    "insertText": "VoidAudioSink()"
  },
  {
    "label": "VoidAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoidAudioSink(const VoidAudioSink&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VoidAudioSink&)",
    "insertText": "operator(const VoidAudioSink&)"
  }
]