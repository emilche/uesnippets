[
  {
    "label": "FAssetContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetContextMenu"
  },
  {
    "label": "IAssetTypeActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetTypeActions"
  },
  {
    "label": "SAssetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetView"
  },
  {
    "label": "SContentBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SContentBrowser"
  },
  {
    "label": "SFilterList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterList"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UAssetDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetDefinition"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CONTENTBROWSER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CONTENTBROWSER_API"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetTypeCategories . h \" # include \" Containers / Array . h \" # include \" ContentBrowserDelegates . h \" # include \" CoreMinimal . h \" # include \" Algo / SelectRandomWeighted . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" ContentBrowserMenuContexts . generated . h \" class FAssetContextMenu ; class IAssetTypeActions ; class SAssetView ; class SContentBrowser ; class SFilterList ; class UClass ; class UAssetDefinition ; struct FFrame ; struct FToolMenuSection ; struct FToolMenuContext ; enum class EIncludeSubclasses : uint8 { No,Yes } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetSelectedObjectsInMemory()",
    "kind": "Method",
    "detail": "Function (} template<ExpectedAssetType> TArray<ExpectedAssetType*>)",
    "insertText": "GetSelectedObjectsInMemory()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<ExpectedAssetType*> Result ; Result .)",
    "insertText": "Reserve(SelectedAssets.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(AssetObjectTyped)"
  },
  {
    "label": "LoadSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} template<ExpectedAssetType> TArray<ExpectedAssetType*>)",
    "insertText": "LoadSelectedObjects(TSet<FName> LoadTags = {})"
  },
  {
    "label": "LoadSelectedObjectsIf()",
    "kind": "Method",
    "detail": "Function (} template<ExpectedAssetType> TArray<ExpectedAssetType*>)",
    "insertText": "LoadSelectedObjectsIf(TFunctionRef<bool(const FAssetData& AssetData)> PredicateFilter)"
  },
  {
    "label": "LoadSelectedObjectsIf()",
    "kind": "Method",
    "detail": "Function (} template<ExpectedAssetType> TArray<ExpectedAssetType*>)",
    "insertText": "LoadSelectedObjectsIf(TSet<FName> LoadTags, TFunctionRef<bool(const FAssetData& AssetData)> PredicateFilter)"
  },
  {
    "label": "LoadFirstSelectedObject()",
    "kind": "Method",
    "detail": "Function (} } } } } return Result ; } template<ExpectedAssetType> ExpectedAssetType*)",
    "insertText": "LoadFirstSelectedObject(const TSet<FName>& LoadTags = {})"
  },
  {
    "label": "GetSingleSelectedAssetOfType()",
    "kind": "Method",
    "detail": "Function (const FAssetData*)",
    "insertText": "GetSingleSelectedAssetOfType(const UClass* AssetClass, EIncludeSubclasses IncludeSubclasses = EIncludeSubclasses::Yes)"
  },
  {
    "label": "GetSelectedAssetSoftObjects()",
    "kind": "Method",
    "detail": "Function (template<ExpectedAssetType> TArray<TSoftObjectPtr<ExpectedAssetType>>)",
    "insertText": "GetSelectedAssetSoftObjects(EIncludeSubclasses IncludeSubclasses = EIncludeSubclasses::Yes)"
  },
  {
    "label": "TransformIf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformIf(SelectedAssets, Result, [](const FAssetData& AssetData) { return AssetData.IsInstanceOf(ExpectedAssetType::StaticClass()); }, [](const FAssetData& AssetData) { return TSoftObjectPtr<ExpectedAssetType>(AssetData.ToSoftObjectPath()); })"
  },
  {
    "label": "TransformIf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "TransformIf(SelectedAssets, Result, [](const FAssetData& AssetData) { return AssetData.GetClass() == ExpectedAssetType::StaticClass(); }, [](const FAssetData& AssetData) { return TSoftObjectPtr<ExpectedAssetType>(AssetData.ToSoftObjectPath()); })"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const TArray<FContentBrowserItem>&)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "FindContextWithAssets()",
    "kind": "Method",
    "detail": "Function (template<MenuOrSectionType> const UContentBrowserAssetContextMenuContext*)",
    "insertText": "FindContextWithAssets(const MenuOrSectionType& MenuOrSection)"
  },
  {
    "label": "UContentBrowserAssetContextMenuContext()",
    "kind": "Method",
    "detail": "Function (const UContentBrowserAssetContextMenuContext* Context = MenuOrSection . template FindContext<)",
    "insertText": "UContentBrowserAssetContextMenuContext()"
  },
  {
    "label": "LoadSingleSelectedAsset()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } template<ExpectedType,MenuOrSectionType> ExpectedType*)",
    "insertText": "LoadSingleSelectedAsset(const MenuOrSectionType& MenuOrSection)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(BlueprintReadOnly, Category = \"ContentBrowser\")"
  },
  {
    "label": "GetSelectedPackagePaths()",
    "kind": "Method",
    "detail": "Function (FOnCreateNewFolder OnCreateNewFolder ; const TArray<FString>&)",
    "insertText": "GetSelectedPackagePaths()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FName GetCurrentPath()"
  },
  {
    "label": "CanWriteToCurrentPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanWriteToCurrentPath()"
  },
  {
    "label": "ExtendToolMenu_AssetContextMenu()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SContentBrowser> ContentBrowser ; } ; class UToolMenu ; namespace UE::ContentBrowser { UToolMenu*)",
    "insertText": "ExtendToolMenu_AssetContextMenu(UClass* AssetClass)"
  },
  {
    "label": "ExtendToolMenu_AssetContextMenu()",
    "kind": "Method",
    "detail": "Function (UToolMenu*)",
    "insertText": "ExtendToolMenu_AssetContextMenu(TSoftClassPtr<UObject> AssetSoftClass)"
  },
  {
    "label": "ExtendToolMenu_AssetContextMenus()",
    "kind": "Method",
    "detail": "Function (TArray<UToolMenu*>)",
    "insertText": "ExtendToolMenu_AssetContextMenus(TConstArrayView<UClass*> AssetClasses)"
  }
]