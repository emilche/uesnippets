[
  {
    "label": "MatrixFunctionAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionAtomic"
  },
  {
    "label": "matrix_function_compute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_function_compute"
  },
  {
    "label": "MatrixFunctionReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "MatrixFunctionAtomic()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_FUNCTION_H # define EIGEN_MATRIX_FUNCTION_H # include \" StemFunction . h \" namespace Eigen { namespace internal { const float matrix_function_separation = 0 . 1 f ; template<MatrixType> class MatrixFunctionAtomic { public : typedef MatrixType::Scalar Scalar ; typedef stem_function<Scalar>::type StemFunction ;)",
    "insertText": "MatrixFunctionAtomic(StemFunction f) : m_f(f)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} MatrixType)",
    "insertText": "compute(const MatrixType& A)"
  },
  {
    "label": "matrix_function_compute_mu()",
    "kind": "Method",
    "detail": "Function (private : StemFunction* m_f ; } ; template<MatrixType> NumTraits<MatrixType::Scalar>::Real)",
    "insertText": "matrix_function_compute_mu(const MatrixType& A)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (typedef plain_col_type<MatrixType>::type VectorType ; Index rows = A .)",
    "insertText": "rows()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (const MatrixType N =)",
    "insertText": "Identity(rows, rows)"
  },
  {
    "label": "Ones()",
    "kind": "Method",
    "detail": "Function (VectorType e =)",
    "insertText": "Ones(rows)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (N . template triangularView<)",
    "insertText": "Upper().solveInPlace(e)"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (Scalar avgEival = A .)",
    "insertText": "trace() / Scalar(RealScalar(rows))"
  },
  {
    "label": "matrix_function_compute_mu()",
    "kind": "Method",
    "detail": "Function (RealScalar mu =)",
    "insertText": "matrix_function_compute_mu(Ashifted)"
  },
  {
    "label": "m_f()",
    "kind": "Method",
    "detail": "Function (MatrixType F =)",
    "insertText": "m_f(avgEival, 0) * MatrixType::Identity(rows, rows)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MatrixType P = Ashifted ; MatrixType Fincr ;)",
    "insertText": "for(Index s = 1; double(s) < 1.1 * double(rows) + 10.0; s++)"
  },
  {
    "label": "m_f()",
    "kind": "Method",
    "detail": "Function (Fincr =)",
    "insertText": "m_f(avgEival, static_cast<int>(s))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (F + = Fincr ; P =)",
    "insertText": "Scalar(RealScalar(1)/RealScalar(s + 1))"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (const RealScalar F_norm = F .)",
    "insertText": "cwiseAbs().rowwise().sum().maxCoeff()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar delta = 0 ; RealScalar rfactorial = 1 ;)",
    "insertText": "for(Index r = 0; r < rows; r++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar mx = 0 ;)",
    "insertText": "for(Index i = 0; i < rows; i++) mx = (std::max)(mx, std::abs(m_f(Ashifted(i, i) + avgEival, static_cast<int>(s+r))))"
  },
  {
    "label": "delta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delta(std::max)(delta, mx / rfactorial)"
  },
  {
    "label": "matrix_function_find_cluster()",
    "kind": "Method",
    "detail": "Function (} } return F ; } template<Index,ListOfClusters> ListOfClusters::iterator)",
    "insertText": "matrix_function_find_cluster(Index key, ListOfClusters& clusters)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::list<Index>::iterator j ;)",
    "insertText": "for(typename ListOfClusters::iterator i = clusters.begin(); i != clusters.end(); ++i)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (j =)",
    "insertText": "find(i->begin(), i->end(), key)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} return clusters .)",
    "insertText": "end()"
  },
  {
    "label": "matrix_function_partition_eigenvalues()",
    "kind": "Method",
    "detail": "Function (} template<EivalsType,Cluster> void)",
    "insertText": "matrix_function_partition_eigenvalues(const EivalsType& eivals, std::list<Cluster>& clusters)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef EivalsType::RealScalar RealScalar ;)",
    "insertText": "for(Index i=0; i<eivals.rows(); ++i)"
  },
  {
    "label": "matrix_function_find_cluster()",
    "kind": "Method",
    "detail": "Function (std::list<Cluster>::iterator qi =)",
    "insertText": "matrix_function_find_cluster(i, clusters)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Cluster l ; l .)",
    "insertText": "push_back(i)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (clusters .)",
    "insertText": "push_back(l)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - qi ; })",
    "insertText": "for(Index j=i+1; j<eivals.rows(); ++j)"
  },
  {
    "label": "matrix_function_find_cluster()",
    "kind": "Method",
    "detail": "Function (std::list<Cluster>::iterator qj =)",
    "insertText": "matrix_function_find_cluster(j, clusters)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qi ->)",
    "insertText": "push_back(j)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} else { qi ->)",
    "insertText": "insert(qi->end(), qj->begin(), qj->end())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (clusters .)",
    "insertText": "erase(qj)"
  },
  {
    "label": "matrix_function_compute_cluster_size()",
    "kind": "Method",
    "detail": "Function (} } } } } template<ListOfClusters,Index> void)",
    "insertText": "matrix_function_compute_cluster_size(const ListOfClusters& clusters, Matrix<Index, Dynamic, 1>& clusterSize)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const Index numClusters = static_cast<)",
    "insertText": "Index(clusters.size())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (clusterSize .)",
    "insertText": "setZero(numClusters)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index clusterIndex = 0 ;)",
    "insertText": "for(typename ListOfClusters::const_iterator cluster = clusters.begin(); cluster != clusters.end(); ++cluster)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (clusterSize [ clusterIndex ] = cluster ->)",
    "insertText": "size()"
  },
  {
    "label": "matrix_function_compute_block_start()",
    "kind": "Method",
    "detail": "Function (+ + clusterIndex ; } } template<VectorType> void)",
    "insertText": "matrix_function_compute_block_start(const VectorType& clusterSize, VectorType& blockStart)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (blockStart .)",
    "insertText": "resize(clusterSize.rows())"
  },
  {
    "label": "blockStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blockStart(0)"
  },
  {
    "label": "blockStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blockStart(i) = blockStart(i-1) + clusterSize(i-1)"
  },
  {
    "label": "matrix_function_compute_map()",
    "kind": "Method",
    "detail": "Function (} } template<EivalsType,ListOfClusters,VectorType> void)",
    "insertText": "matrix_function_compute_map(const EivalsType& eivals, const ListOfClusters& clusters, VectorType& eivalToCluster)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (eivalToCluster .)",
    "insertText": "resize(eivals.rows())"
  },
  {
    "label": "matrix_function_compute_permutation()",
    "kind": "Method",
    "detail": "Function (eivalToCluster [ i ] = clusterIndex ; } } + + clusterIndex ; } } template<DynVectorType,VectorType> void)",
    "insertText": "matrix_function_compute_permutation(const DynVectorType& blockStart, const DynVectorType& eivalToCluster, VectorType& permutation)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (DynVectorType indexNextEntry = blockStart ; permutation .)",
    "insertText": "resize(eivalToCluster.rows())"
  },
  {
    "label": "matrix_function_permute_schur()",
    "kind": "Method",
    "detail": "Function (Index cluster = eivalToCluster [ i ] ; permutation [ i ] = indexNextEntry [ cluster ] ; + + indexNextEntry [ cluster ] ; } } template<VectorType,MatrixType> void)",
    "insertText": "matrix_function_permute_schur(VectorType& permutation, MatrixType& U, MatrixType& T)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index j ;)",
    "insertText": "for(j = i; j < permutation.rows(); j++)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "eigen_assert(permutation(j) == i)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<MatrixType::Scalar> rotation ; rotation .)",
    "insertText": "makeGivens(T(k, k+1), T(k+1, k+1) - T(k, k))"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (T .)",
    "insertText": "applyOnTheLeft(k, k+1, rotation.adjoint())"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (T .)",
    "insertText": "applyOnTheRight(k, k+1, rotation)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(permutation.coeffRef(k), permutation.coeffRef(k+1))"
  },
  {
    "label": "matrix_function_compute_block_atomic()",
    "kind": "Method",
    "detail": "Function (} } } template<MatrixType,AtomicType,VectorType> void)",
    "insertText": "matrix_function_compute_block_atomic(const MatrixType& T, AtomicType& atomic, const VectorType& blockStart, const VectorType& clusterSize, MatrixType& fT)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (fT .)",
    "insertText": "setZero(T.rows(), T.cols())"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (fT .)",
    "insertText": "block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i)) = atomic.compute(T.block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i)))"
  },
  {
    "label": "matrix_function_solve_triangular_sylvester()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType> MatrixType)",
    "insertText": "matrix_function_solve_triangular_sylvester(const MatrixType& A, const MatrixType& B, const MatrixType& C)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(A.rows() == A.cols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(A.isUpperTriangular())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(B.rows() == B.cols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(B.isUpperTriangular())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(C.rows() == A.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(C.cols() == B.rows())"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "X(m, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar AX ;)",
    "insertText": "if(i == m - 1)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (AX = 0 ; } else { Matrix<Scalar,1,1> AXmatrix = A .)",
    "insertText": "row(i).tail(m-1-i) * X.col(j).tail(m-1-i)"
  },
  {
    "label": "AXmatrix()",
    "kind": "Method",
    "detail": "Function (AX =)",
    "insertText": "AXmatrix(0,0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Scalar XB ;)",
    "insertText": "if(j == 0)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (XB = 0 ; } else { Matrix<Scalar,1,1> XBmatrix = X .)",
    "insertText": "row(i).head(j) * B.col(j).head(j)"
  },
  {
    "label": "XBmatrix()",
    "kind": "Method",
    "detail": "Function (XB =)",
    "insertText": "XBmatrix(0,0)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "X(i,j) = (C(i,j) - AX - XB) / (A(i,i) + B(j,j))"
  },
  {
    "label": "matrix_function_compute_above_diagonal()",
    "kind": "Method",
    "detail": "Function (} } return X ; } template<MatrixType,VectorType> void)",
    "insertText": "matrix_function_compute_above_diagonal(const MatrixType& T, const VectorType& blockStart, const VectorType& clusterSize, MatrixType& fT)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<MatrixType> Traits ; typedef MatrixType::Scalar Scalar ; const int Options = MatrixType::Options ; typedef Matrix<Scalar,Dynamic,Dynamic,Options,Traits::RowsAtCompileTime,Traits::ColsAtCompileTime> DynMatrixType ;)",
    "insertText": "for(Index k = 1; k < clusterSize.rows(); k++)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (DynMatrixType A = T .)",
    "insertText": "block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (DynMatrixType B = - T .)",
    "insertText": "block(blockStart(i+k), blockStart(i+k), clusterSize(i+k), clusterSize(i+k))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (DynMatrixType C = fT .)",
    "insertText": "block(blockStart(i), blockStart(i), clusterSize(i), clusterSize(i)) * T.block(blockStart(i), blockStart(i+k), clusterSize(i), clusterSize(i+k))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (C - = T .)",
    "insertText": "block(blockStart(i), blockStart(i+k), clusterSize(i), clusterSize(i+k)) * fT.block(blockStart(i+k), blockStart(i+k), clusterSize(i+k), clusterSize(i+k))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (C + = fT .)",
    "insertText": "block(blockStart(i), blockStart(m), clusterSize(i), clusterSize(m)) * T.block(blockStart(m), blockStart(i+k), clusterSize(m), clusterSize(i+k))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (C - = T .)",
    "insertText": "block(blockStart(i), blockStart(m), clusterSize(i), clusterSize(m)) * fT.block(blockStart(m), blockStart(i+k), clusterSize(m), clusterSize(i+k))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} fT .)",
    "insertText": "block(blockStart(i), blockStart(i+k), clusterSize(i), clusterSize(i+k)) = matrix_function_solve_triangular_sylvester(A, B, C)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } template<MatrixType,int IsComplex = NumTraits<internal::traits<MatrixType>::Scalar>::IsComplex> struct matrix_function_compute { template<AtomicType,ResultType> void)",
    "insertText": "run(const MatrixType& A, AtomicType& atomic, ResultType &result)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> struct matrix_function_compute<MatrixType,0> { template<MatA,AtomicType,ResultType> void)",
    "insertText": "run(const MatA& A, AtomicType& atomic, ResultType &result)"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<MatrixType> Traits ; typedef Traits::Scalar Scalar ; const int Rows = Traits::RowsAtCompileTime,Cols = Traits::ColsAtCompileTime ; const int MaxRows = Traits::MaxRowsAtCompileTime,MaxCols = Traits::MaxColsAtCompileTime ; typedef std::complex<Scalar> ComplexScalar ; typedef Matrix<ComplexScalar,Rows,Cols,0,MaxRows,MaxCols> ComplexMatrix ; ComplexMatrix CA = A . template cast<)",
    "insertText": "ComplexScalar()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (ComplexMatrix Cresult ; matrix_function_compute<ComplexMatrix)",
    "insertText": "run(CA, atomic, Cresult)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (result = Cresult .)",
    "insertText": "real()"
  },
  {
    "label": "schurOfA()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<MatrixType> Traits ; const ComplexSchur<MatrixType>)",
    "insertText": "schurOfA(A)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(schurOfA.info()==Success)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (MatrixType T = schurOfA .)",
    "insertText": "matrixT()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (MatrixType U = schurOfA .)",
    "insertText": "matrixU()"
  },
  {
    "label": "matrix_function_partition_eigenvalues()",
    "kind": "Method",
    "detail": "Function (std::list<std::list<Index>> clusters ;)",
    "insertText": "matrix_function_partition_eigenvalues(T.diagonal(), clusters)"
  },
  {
    "label": "matrix_function_compute_cluster_size()",
    "kind": "Method",
    "detail": "Function (Matrix<Index,Dynamic,1> clusterSize ;)",
    "insertText": "matrix_function_compute_cluster_size(clusters, clusterSize)"
  },
  {
    "label": "matrix_function_compute_block_start()",
    "kind": "Method",
    "detail": "Function (Matrix<Index,Dynamic,1> blockStart ;)",
    "insertText": "matrix_function_compute_block_start(clusterSize, blockStart)"
  },
  {
    "label": "matrix_function_compute_map()",
    "kind": "Method",
    "detail": "Function (Matrix<Index,Dynamic,1> eivalToCluster ;)",
    "insertText": "matrix_function_compute_map(T.diagonal(), clusters, eivalToCluster)"
  },
  {
    "label": "matrix_function_compute_permutation()",
    "kind": "Method",
    "detail": "Function (Matrix<Index,Traits::RowsAtCompileTime,1> permutation ;)",
    "insertText": "matrix_function_compute_permutation(blockStart, eivalToCluster, permutation)"
  },
  {
    "label": "matrix_function_permute_schur()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_function_permute_schur(permutation, U, T)"
  },
  {
    "label": "matrix_function_compute_block_atomic()",
    "kind": "Method",
    "detail": "Function (MatrixType fT ;)",
    "insertText": "matrix_function_compute_block_atomic(T, atomic, blockStart, clusterSize, fT)"
  },
  {
    "label": "matrix_function_compute_above_diagonal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "matrix_function_compute_above_diagonal(T, blockStart, clusterSize, fT)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "U(fT.template triangularView<Upper>() * U.adjoint())"
  },
  {
    "label": "MatrixFunctionReturnValue()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> class MatrixFunctionReturnValue : public ReturnByValue<MatrixFunctionReturnValue<Derived>> { public : typedef Derived::Scalar Scalar ; typedef internal::stem_function<Scalar>::type StemFunction ; protected : typedef internal::ref_selector<Derived>::type DerivedNested ; public :)",
    "insertText": "MatrixFunctionReturnValue(const Derived& A, StemFunction f) : m_A(A), m_f(f)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "atomic()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Derived,1 0>::type NestedEvalType ; typedef internal::remove_all<NestedEvalType>::type NestedEvalTypeClean ; typedef internal::traits<NestedEvalTypeClean> Traits ; typedef std::complex<NumTraits<Scalar>::Real> ComplexScalar ; typedef Matrix<ComplexScalar,Dynamic,Dynamic,0,Traits::RowsAtCompileTime,Traits::ColsAtCompileTime> DynMatrixType ; typedef internal::MatrixFunctionAtomic<DynMatrixType> AtomicType ; AtomicType)",
    "insertText": "atomic(m_f)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::matrix_function_compute<NestedEvalTypeClean::PlainObject)",
    "insertText": "run(m_A, atomic, result)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "matrixFunction()",
    "kind": "Method",
    "detail": "Function (} private : const DerivedNested m_A ; StemFunction* m_f ; } ; namespace internal { template<Derived> struct traits<MatrixFunctionReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<Derived> const MatrixFunctionReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "matrixFunction(typename internal::stem_function<typename internal::traits<Derived>::Scalar>::type f)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows() == cols())"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const MatrixFunctionReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "sin()"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (typedef internal::stem_function<Scalar>::ComplexScalar ComplexScalar ; return MatrixFunctionReturnValue<)",
    "insertText": "Derived(derived(), internal::stem_function_sin<ComplexScalar>)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const MatrixFunctionReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "cos()"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (typedef internal::stem_function<Scalar>::ComplexScalar ComplexScalar ; return MatrixFunctionReturnValue<)",
    "insertText": "Derived(derived(), internal::stem_function_cos<ComplexScalar>)"
  },
  {
    "label": "sinh()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const MatrixFunctionReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "sinh()"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (typedef internal::stem_function<Scalar>::ComplexScalar ComplexScalar ; return MatrixFunctionReturnValue<)",
    "insertText": "Derived(derived(), internal::stem_function_sinh<ComplexScalar>)"
  },
  {
    "label": "cosh()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const MatrixFunctionReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "cosh()"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (typedef internal::stem_function<Scalar>::ComplexScalar ComplexScalar ; return MatrixFunctionReturnValue<)",
    "insertText": "Derived(derived(), internal::stem_function_cosh<ComplexScalar>)"
  }
]