[
  {
    "label": "MatrixFunctionAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionAtomic"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MatrixFunctionAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionAtomic"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "delegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "delegates"
  },
  {
    "label": "MatrixFunctionAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionAtomic"
  },
  {
    "label": "MatrixLogarithmAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixLogarithmAtomic"
  },
  {
    "label": "matrix_function_compute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_function_compute"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "matrix_function_compute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_function_compute"
  },
  {
    "label": "matrix_function_compute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_function_compute"
  },
  {
    "label": "holds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "holds"
  },
  {
    "label": "MatrixFunctionReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixFunctionReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "compute(const MatrixType& A)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (set)",
    "insertText": "for(Index j=i+1; j<eivals.rows()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "X(m, n)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(const MatrixType& A, AtomicType& atomic, ResultType &result)"
  },
  {
    "label": "schurOfA()",
    "kind": "Method",
    "detail": "Function (ComplexSchur<MatrixType>)",
    "insertText": "schurOfA(A)"
  },
  {
    "label": "matrix_function_permute_schur()",
    "kind": "Method",
    "detail": "Function (decomposition)",
    "insertText": "matrix_function_permute_schur(permutation, U, T)"
  },
  {
    "label": "matrix_function_compute_block_atomic()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "matrix_function_compute_block_atomic(T, atomic, blockStart, clusterSize, fT)"
  },
  {
    "label": "atomic()",
    "kind": "Method",
    "detail": "Function (AtomicType)",
    "insertText": "atomic(m_f)"
  }
]