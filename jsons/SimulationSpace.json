[
  {
    "label": "FSimulationSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulationSpace"
  },
  {
    "label": "FSimulationSpaceSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulationSpaceSettings"
  },
  {
    "label": "FSimulationSpace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { class FSimulationSpace { public :)",
    "insertText": "FSimulationSpace() : Transform(FRigidTransform3()) , LinearAcceleration(0) , AngularAcceleration(0) , LinearVelocity(0) , AngularVelocity(0)"
  },
  {
    "label": "FSimulationSpaceSettings()",
    "kind": "Method",
    "detail": "Function (} FRigidTransform3 Transform ; FVec3 LinearAcceleration ; FVec3 AngularAcceleration ; FVec3 LinearVelocity ; FVec3 AngularVelocity ; } ; class FSimulationSpaceSettings { public :)",
    "insertText": "FSimulationSpaceSettings() : MasterAlpha(0) , Alpha(0) , LinearAccelerationAlpha(1) , CoriolisAlpha(1) , CentrifugalAlpha(1) , EulerAlpha(1) , AngularAccelerationAlpha(1) , LinearVelocityAlpha(1) , AngularVelocityAlpha(1) , ExternalLinearEtherDrag(FVec3(0))"
  },
  {
    "label": "FSimulationSpaceSettings()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FSimulationSpaceSettings(const FSimulationSpaceSettings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSimulationSpaceSettings&)",
    "insertText": "operator(const FSimulationSpaceSettings&)"
  }
]