[
  {
    "label": "FSlateFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontCache"
  },
  {
    "label": "FCachedShapedTextKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedShapedTextKey"
  },
  {
    "label": "FShapedTextCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapedTextCache"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "FCachedShapedTextKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / ShapedTextFwd . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Framework / Text / IRun . h \" class FSlateFontCache ; struct FCachedShapedTextKey { public :)",
    "insertText": "FCachedShapedTextKey(const FTextRange& InTextRange, const float InScale, const FShapedTextContext& InTextContext, const FSlateFontInfo& InFontInfo) : TextRange(InTextRange) , Scale(InScale) , TextContext(InTextContext) , FontInfo(InFontInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCachedShapedTextKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FCachedShapedTextKey& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash = 0 ; KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.TextRange))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.Scale))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.TextContext))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (KeyHash =)",
    "insertText": "HashCombine(KeyHash, GetTypeHash(Key.FontInfo))"
  },
  {
    "label": "FindShapedText()",
    "kind": "Method",
    "detail": "Function (} FShapedGlyphSequencePtr)",
    "insertText": "FindShapedText(const FCachedShapedTextKey& InKey)"
  },
  {
    "label": "AddShapedText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "AddShapedText(const FCachedShapedTextKey& InKey, const TCHAR* InText)"
  },
  {
    "label": "AddShapedText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "AddShapedText(const FCachedShapedTextKey& InKey, const TCHAR* InText, const TextBiDi::ETextDirection InTextDirection)"
  },
  {
    "label": "AddShapedText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "AddShapedText(const FCachedShapedTextKey& InKey, FShapedGlyphSequenceRef InShapedText)"
  },
  {
    "label": "FindOrAddShapedText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "FindOrAddShapedText(const FCachedShapedTextKey& InKey, const TCHAR* InText)"
  },
  {
    "label": "FindOrAddShapedText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "FindOrAddShapedText(const FCachedShapedTextKey& InKey, const TCHAR* InText, const TextBiDi::ETextDirection InTextDirection)"
  },
  {
    "label": "FindOrAddOverflowEllipsisText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "FindOrAddOverflowEllipsisText(const float InScale, const FShapedTextContext& InTextContext, const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetFontCache()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateFontCache>)",
    "insertText": "GetFontCache()"
  },
  {
    "label": "FPrivateToken()",
    "kind": "Method",
    "detail": "Function (} private : struct FPrivateToken {)",
    "insertText": "FPrivateToken()"
  },
  {
    "label": "FShapedTextCache()",
    "kind": "Method",
    "detail": "Function (} ; public :)",
    "insertText": "FShapedTextCache(FPrivateToken, const TSharedRef<FSlateFontCache>& InFontCache) : FontCachePtr(InFontCache)"
  },
  {
    "label": "MeasureShapedText()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<FSlateFontCache> FontCachePtr ; TMap<FCachedShapedTextKey,FShapedGlyphSequencePtr> CachedShapedText ; } ; namespace ShapedTextCacheUtil { FVector2D)",
    "insertText": "MeasureShapedText(const FShapedTextCacheRef& InShapedTextCache, const FCachedShapedTextKey& InRunKey, const FTextRange& InMeasureRange, const TCHAR* InText)"
  },
  {
    "label": "FindCharacterIndexAtOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCharacterIndexAtOffset(const FShapedTextCacheRef& InShapedTextCache, const FCachedShapedTextKey& InRunKey, const FTextRange& InTextRange, const TCHAR* InText, const int32 InHorizontalOffset)"
  },
  {
    "label": "GetShapedGlyphKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetShapedGlyphKerning(const FShapedTextCacheRef& InShapedTextCache, const FCachedShapedTextKey& InRunKey, const int32 InGlyphIndex, const TCHAR* InText)"
  },
  {
    "label": "GetShapedTextSubSequence()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "GetShapedTextSubSequence(const FShapedTextCacheRef& InShapedTextCache, const FCachedShapedTextKey& InRunKey, const FTextRange& InTextRange, const TCHAR* InText, const TextBiDi::ETextDirection InTextDirection)"
  }
]