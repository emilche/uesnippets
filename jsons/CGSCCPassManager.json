[
  {
    "label": "CGSCCAnalysisManagerModuleProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGSCCAnalysisManagerModuleProxy"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Result"
  },
  {
    "label": "ModuleAnalysisManagerCGSCCProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleAnalysisManagerCGSCCProxy"
  },
  {
    "label": "ModuleToPostOrderCGSCCPassAdaptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleToPostOrderCGSCCPassAdaptor"
  },
  {
    "label": "FunctionAnalysisManagerCGSCCProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionAnalysisManagerCGSCCProxy"
  },
  {
    "label": "CGSCCAnalysisManagerFunctionProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGSCCAnalysisManagerFunctionProxy"
  },
  {
    "label": "CGSCCToFunctionPassAdaptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGSCCToFunctionPassAdaptor"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_CGSCCPASSMANAGER_H # define LLVM_ANALYSIS_CGSCCPASSMANAGER_H # include \" llvm / Analysis / LazyCallGraph . h \" # include \" llvm / IR / PassManager . h \" namespace llvm { typedef PassManager<LazyCallGraph::SCC> CGSCCPassManager ; typedef AnalysisManager<LazyCallGraph::SCC> CGSCCAnalysisManager ; class CGSCCAnalysisManagerModuleProxy { public : class Result { public :)",
    "insertText": "Result(CGSCCAnalysisManager &CGAM) : CGAM(&CGAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(const Result &Arg) : CGAM(Arg.CGAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(Result &&Arg) : CGAM(std::move(Arg.CGAM))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Result&)",
    "insertText": "operator(Result RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(CGAM, RHS.CGAM)"
  },
  {
    "label": "getManager()",
    "kind": "Method",
    "detail": "Function (CGSCCAnalysisManager&)",
    "insertText": "getManager()"
  },
  {
    "label": "ID()",
    "kind": "Method",
    "detail": "Function (private : CGSCCAnalysisManager* CGAM ; } ; void*)",
    "insertText": "ID()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "name()"
  },
  {
    "label": "CGSCCAnalysisManagerModuleProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCAnalysisManagerModuleProxy(const CGSCCAnalysisManagerModuleProxy &Arg) : CGAM(Arg.CGAM)"
  },
  {
    "label": "CGSCCAnalysisManagerModuleProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCAnalysisManagerModuleProxy(CGSCCAnalysisManagerModuleProxy &&Arg) : CGAM(std::move(Arg.CGAM))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CGSCCAnalysisManagerModuleProxy&)",
    "insertText": "operator(CGSCCAnalysisManagerModuleProxy RHS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (private : char PassID ; CGSCCAnalysisManager* CGAM ; } ; class ModuleAnalysisManagerCGSCCProxy { public : class Result { public :)",
    "insertText": "Result(const ModuleAnalysisManager &MAM) : MAM(&MAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(const Result &Arg) : MAM(Arg.MAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(Result &&Arg) : MAM(std::move(Arg.MAM))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(MAM, RHS.MAM)"
  },
  {
    "label": "ModuleAnalysisManagerCGSCCProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ModuleAnalysisManagerCGSCCProxy(const ModuleAnalysisManagerCGSCCProxy &Arg) : MAM(Arg.MAM)"
  },
  {
    "label": "ModuleAnalysisManagerCGSCCProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ModuleAnalysisManagerCGSCCProxy(ModuleAnalysisManagerCGSCCProxy &&Arg) : MAM(std::move(Arg.MAM))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ModuleAnalysisManagerCGSCCProxy&)",
    "insertText": "operator(ModuleAnalysisManagerCGSCCProxy RHS)"
  },
  {
    "label": "ModuleToPostOrderCGSCCPassAdaptor()",
    "kind": "Method",
    "detail": "Function (} private : char PassID ; const ModuleAnalysisManager* MAM ; } ; template<CGSCCPassT> class ModuleToPostOrderCGSCCPassAdaptor { public :)",
    "insertText": "ModuleToPostOrderCGSCCPassAdaptor(CGSCCPassT Pass) : Pass(std::move(Pass))"
  },
  {
    "label": "ModuleToPostOrderCGSCCPassAdaptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ModuleToPostOrderCGSCCPassAdaptor(const ModuleToPostOrderCGSCCPassAdaptor &Arg) : Pass(Arg.Pass)"
  },
  {
    "label": "ModuleToPostOrderCGSCCPassAdaptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ModuleToPostOrderCGSCCPassAdaptor(ModuleToPostOrderCGSCCPassAdaptor &&Arg) : Pass(std::move(Arg.Pass))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(ModuleToPostOrderCGSCCPassAdaptor &LHS, ModuleToPostOrderCGSCCPassAdaptor &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(LHS.Pass, RHS.Pass)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ModuleToPostOrderCGSCCPassAdaptor&)",
    "insertText": "operator(ModuleToPostOrderCGSCCPassAdaptor RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(*this, RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(AM && \"We need analyses to compute the call graph!\")"
  },
  {
    "label": "CGSCCAnalysisManagerModuleProxy()",
    "kind": "Method",
    "detail": "Function (CGSCCAnalysisManager& CGAM = AM -> getResult<)",
    "insertText": "CGSCCAnalysisManagerModuleProxy(M).getManager()"
  },
  {
    "label": "LazyCallGraphAnalysis()",
    "kind": "Method",
    "detail": "Function (LazyCallGraph& CG = AM -> getResult<)",
    "insertText": "LazyCallGraphAnalysis(M)"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses PA =)",
    "insertText": "all()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses PassPA = Pass .)",
    "insertText": "run(C, &CGAM)"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (PassPA = CGAM .)",
    "insertText": "invalidate(C, std::move(PassPA))"
  },
  {
    "label": "intersect()",
    "kind": "Method",
    "detail": "Function (PA .)",
    "insertText": "intersect(std::move(PassPA))"
  },
  {
    "label": "CGSCCAnalysisManagerModuleProxy()",
    "kind": "Method",
    "detail": "Function (} PA . preserve<)",
    "insertText": "CGSCCAnalysisManagerModuleProxy()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} class FunctionAnalysisManagerCGSCCProxy { public : class Result { public :)",
    "insertText": "Result(FunctionAnalysisManager &FAM) : FAM(&FAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(const Result &Arg) : FAM(Arg.FAM)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Result(Result &&Arg) : FAM(std::move(Arg.FAM))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(FAM, RHS.FAM)"
  },
  {
    "label": "FunctionAnalysisManagerCGSCCProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionAnalysisManagerCGSCCProxy(const FunctionAnalysisManagerCGSCCProxy &Arg) : FAM(Arg.FAM)"
  },
  {
    "label": "FunctionAnalysisManagerCGSCCProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionAnalysisManagerCGSCCProxy(FunctionAnalysisManagerCGSCCProxy &&Arg) : FAM(std::move(Arg.FAM))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FunctionAnalysisManagerCGSCCProxy&)",
    "insertText": "operator(FunctionAnalysisManagerCGSCCProxy RHS)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (private : char PassID ; FunctionAnalysisManager* FAM ; } ; class CGSCCAnalysisManagerFunctionProxy { public : class Result { public :)",
    "insertText": "Result(const CGSCCAnalysisManager &CGAM) : CGAM(&CGAM)"
  },
  {
    "label": "CGSCCAnalysisManagerFunctionProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCAnalysisManagerFunctionProxy(const CGSCCAnalysisManagerFunctionProxy &Arg) : CGAM(Arg.CGAM)"
  },
  {
    "label": "CGSCCAnalysisManagerFunctionProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCAnalysisManagerFunctionProxy(CGSCCAnalysisManagerFunctionProxy &&Arg) : CGAM(std::move(Arg.CGAM))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CGSCCAnalysisManagerFunctionProxy&)",
    "insertText": "operator(CGSCCAnalysisManagerFunctionProxy RHS)"
  },
  {
    "label": "CGSCCToFunctionPassAdaptor()",
    "kind": "Method",
    "detail": "Function (} private : char PassID ; const CGSCCAnalysisManager* CGAM ; } ; template<FunctionPassT> class CGSCCToFunctionPassAdaptor { public :)",
    "insertText": "CGSCCToFunctionPassAdaptor(FunctionPassT Pass) : Pass(std::move(Pass))"
  },
  {
    "label": "CGSCCToFunctionPassAdaptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCToFunctionPassAdaptor(const CGSCCToFunctionPassAdaptor &Arg) : Pass(Arg.Pass)"
  },
  {
    "label": "CGSCCToFunctionPassAdaptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CGSCCToFunctionPassAdaptor(CGSCCToFunctionPassAdaptor &&Arg) : Pass(std::move(Arg.Pass))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(CGSCCToFunctionPassAdaptor &LHS, CGSCCToFunctionPassAdaptor &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CGSCCToFunctionPassAdaptor&)",
    "insertText": "operator(CGSCCToFunctionPassAdaptor RHS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FunctionAnalysisManager* FAM = nullptr ;)",
    "insertText": "if(AM) FAM = &AM->getResult<FunctionAnalysisManagerCGSCCProxy>(C).getManager()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses PassPA = Pass .)",
    "insertText": "run(N->getFunction(), FAM)"
  },
  {
    "label": "FunctionAnalysisManagerCGSCCProxy()",
    "kind": "Method",
    "detail": "Function (} PA . preserve<)",
    "insertText": "FunctionAnalysisManagerCGSCCProxy()"
  }
]