[
  {
    "label": "FMovieSceneTimeWarping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarping"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" MovieSceneTimeTransform . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneTimeWarping . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTimeWarping() : Start(0) , End(0)"
  },
  {
    "label": "FMovieSceneTimeWarping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarping(FFrameNumber InStart, FFrameNumber InEnd) : Start(InStart) , End(InEnd)"
  },
  {
    "label": "OutLower()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime>)",
    "insertText": "OutLower(TRangeBound<FFrameTime>::Inclusive(Start))"
  },
  {
    "label": "OutUpper()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime>)",
    "insertText": "OutUpper(TRangeBound<FFrameTime>::Exclusive(End))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FFrameNumber)",
    "insertText": "operator(FFrameNumber InFrame, const FMovieSceneTimeWarping& RHS)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber WarpLength = RHS .)",
    "insertText": "Length()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "operator(FFrameTime InTime, const FMovieSceneTimeWarping& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameNumber&)",
    "insertText": "operator(FFrameNumber& InFrame, const FMovieSceneTimeWarping& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InFrame = InFrame* RHS ; return InFrame ; } FFrameTime&)",
    "insertText": "operator(FFrameTime& InTime, const FMovieSceneTimeWarping& RHS)"
  },
  {
    "label": "InverseFromWarp()",
    "kind": "Method",
    "detail": "Function (InTime = InTime* RHS ; return InTime ; } FMovieSceneTimeTransform)",
    "insertText": "InverseFromWarp(uint32 WarpCount)"
  },
  {
    "label": "WarpLength()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber WarpsOffset =)",
    "insertText": "WarpLength(float)"
  },
  {
    "label": "TransformFrame()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "TransformFrame(FFrameNumber InFrame, FFrameNumber& OutFrame, uint32& OutWarpIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (OutWarpIndex = 0 ; FFrameNumber TempFrame = InFrame - Start ;)",
    "insertText": "while(TempFrame >= WarpLength)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (TempFrame - = WarpLength ; + + OutWarpIndex ; } OutFrame = TempFrame + Start ; } void)",
    "insertText": "TransformTime(FFrameTime InTime, FFrameTime& OutTime, uint32& OutWarpIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (OutWarpIndex = 0 ; FFrameTime TempTime = InTime - Start ;)",
    "insertText": "while(TempTime >= WarpLength)"
  },
  {
    "label": "TransformTimeSpecific()",
    "kind": "Method",
    "detail": "Function (TempTime = TempTime - WarpLength ; + + OutWarpIndex ; } OutTime = TempTime + Start ; } void)",
    "insertText": "TransformTimeSpecific(FFrameTime InTime, uint32 WarpCount, FFrameTime& OutTime)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FFrameTime TempTime = InTime - Start ;)",
    "insertText": "for(uint32 WarpIndex = 0; WarpIndex < WarpCount; ++WarpIndex)"
  },
  {
    "label": "TransformRangePure()",
    "kind": "Method",
    "detail": "Function (TempTime = TempTime - WarpLength ; } OutTime = TempTime + Start ; } TRange<FFrameTime>)",
    "insertText": "TransformRangePure(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> SourceLower = Range .)",
    "insertText": "GetLowerBound()"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> TransformedLower = SourceLower .)",
    "insertText": "IsOpen() ? TRangeBound<FFrameTime>() : SourceLower.IsInclusive() ? TRangeBound<FFrameTime>::Inclusive(SourceLower.GetValue() * (*this)) : TRangeBound<FFrameTime>::Exclusive(SourceLower.GetValue() * (*this))"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> SourceUpper = Range .)",
    "insertText": "GetUpperBound()"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> TransformedUpper = SourceUpper .)",
    "insertText": "IsOpen() ? TRangeBound<FFrameTime>() : SourceUpper.IsInclusive() ? TRangeBound<FFrameTime>::Inclusive(SourceUpper.GetValue() * (*this)) : TRangeBound<FFrameTime>::Exclusive(SourceUpper.GetValue() * (*this))"
  },
  {
    "label": "TransformRangeUnwarped()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameTime>)",
    "insertText": "TransformRangeUnwarped(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "IsInclusive()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> TransformedLower = SourceLower .)",
    "insertText": "IsInclusive() ? TRangeBound<FFrameTime>::Inclusive(SourceLower.GetValue() * (*this)) : TRangeBound<FFrameTime>::Exclusive(SourceLower.GetValue() * (*this))"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (const FFrameTime RangeSize = Range . Size<)",
    "insertText": "FFrameTime()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FFrameTime TransformedUpperValue = TransformedLower .)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (const TRangeBound<FFrameTime> TransformedUpper = Range .)",
    "insertText": "GetUpperBound().IsInclusive() ? TRangeBound<FFrameTime>::Inclusive(TransformedUpperValue) : TRangeBound<FFrameTime>::Exclusive(TransformedUpperValue)"
  },
  {
    "label": "TransformRangePure()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TransformRangePure(Range)"
  },
  {
    "label": "TransformRangeConstrained()",
    "kind": "Method",
    "detail": "Function (} } TRange<FFrameTime>)",
    "insertText": "TransformRangeConstrained(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "TransformRangeUnwarped()",
    "kind": "Method",
    "detail": "Function (} const TRange<FFrameTime> UnwarpedTransformedRange =)",
    "insertText": "TransformRangeUnwarped(Range)"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (} return UnwarpedTransformedRange ; } else { return)",
    "insertText": "GetRange()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "LexToString(const FMovieSceneTimeWarping& InWarping)"
  }
]