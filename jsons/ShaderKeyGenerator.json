[
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FBlake3Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlake3Hash"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsFShaderKeyGeneratorKnownType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsFShaderKeyGeneratorKnownType"
  },
  {
    "label": "FShaderKeyGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / StringBuilder . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" class FSHAHash ; struct FBlake3Hash ; struct FGuid ; class FShaderKeyGenerator { public :)",
    "insertText": "FShaderKeyGenerator(TUniqueFunction<void(const void* Data, uint64 Size)>&& InResultFunc)"
  },
  {
    "label": "FShaderKeyGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderKeyGenerator(FString& InResultString)"
  },
  {
    "label": "FShaderKeyGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderKeyGenerator()"
  },
  {
    "label": "IsBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBinary()"
  },
  {
    "label": "IsText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsText()"
  },
  {
    "label": "BinaryAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BinaryAppend(const void* Data, uint64 Size)"
  },
  {
    "label": "TextGetResultString()",
    "kind": "Method",
    "detail": "Function (FString&)",
    "insertText": "TextGetResultString()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FStringView Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const TCHAR* Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FName Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(int64 Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(uint64 Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(int32 Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(uint32 Value)"
  },
  {
    "label": "AppendHex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHex(uint32 Value)"
  },
  {
    "label": "AppendBoolInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBoolInt(bool Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FBlake3Hash& Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FGuid& Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FSHAHash& Value)"
  },
  {
    "label": "AppendDebugText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDebugText(FStringView Value)"
  },
  {
    "label": "AppendSeparator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSeparator()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : enum class EOutputType { Text,Binary,} ; private : TUniqueFunction<)",
    "insertText": "void(const void* Data, uint64 Size)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FString* ResultString = nullptr ; EOutputType OutputType = EOutputType::Text ; } ; template<T> void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen, TConstArrayView<T> Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Append(FShaderKeyGenerator& KeyGen, const TArray<T>& Value)"
  },
  {
    "label": "FShaderKeyGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderKeyGenerator(TUniqueFunction<void(const void* Data, uint64 Size)>&& InResultFunc) : ResultFunc(MoveTemp(InResultFunc)) , OutputType(EOutputType::Binary)"
  },
  {
    "label": "FShaderKeyGenerator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderKeyGenerator(FString& InResultString) : ResultString(&InResultString) , OutputType(EOutputType::Text)"
  },
  {
    "label": "ResultFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResultFunc(Data, Size)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FStringView(Value))"
  },
  {
    "label": "ResultFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResultFunc(Builder.GetData(), Builder.Len() * sizeof(Builder.GetData()[0]))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(KeyGen, TConstArrayView<T>(Value))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (KeyGen<<Element ; } } template<T,= int> struct IsFShaderKeyGeneratorKnownType : std::false_type { } ; template<T> struct IsFShaderKeyGeneratorKnownType<T,)",
    "insertText": "decltype(std::declval<FShaderKeyGenerator>().Append(std::declval<T>()), 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<T> std::enable_if<IsFShaderKeyGeneratorKnownType<T>::value,FShaderKeyGenerator&>::type)",
    "insertText": "operator(FShaderKeyGenerator& KeyGen, const T& Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (KeyGen .)",
    "insertText": "Append(Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(KeyGen, Value)"
  }
]