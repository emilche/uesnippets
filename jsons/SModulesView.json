[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModule"
  },
  {
    "label": "SModulesView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SModulesView"
  },
  {
    "label": "AddressRangeColumnName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" SlateFwd . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" class FMenuBuilder ; namespace UE::Insights { class FModule ; namespace ModulesViewColumns { const FName)",
    "insertText": "AddressRangeColumnName(TEXT(\"BaseAddress\"))"
  },
  {
    "label": "ModuleNameColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ModuleNameColumnName(TEXT(\"ModuleName\"))"
  },
  {
    "label": "DiscoveredColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "DiscoveredColumnName(TEXT(\"Discovered\"))"
  },
  {
    "label": "CachedColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "CachedColumnName(TEXT(\"Cached\"))"
  },
  {
    "label": "ResolvedColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "ResolvedColumnName(TEXT(\"Resolved\"))"
  },
  {
    "label": "FailedColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "FailedColumnName(TEXT(\"Failed\"))"
  },
  {
    "label": "StatusColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "StatusColumnName(TEXT(\"Status\"))"
  },
  {
    "label": "SymbolsFileColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SymbolsFileColumnName(TEXT(\"SymbolsFile\"))"
  },
  {
    "label": "SizeColumnName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SizeColumnName(TEXT(\"Size\"))"
  },
  {
    "label": "SModulesView()",
    "kind": "Method",
    "detail": "Function (} class SModulesView : public SCompoundWidget { public :)",
    "insertText": "SModulesView()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SModulesView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetSelectedModule()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModule>)",
    "insertText": "GetSelectedModule()"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(TSharedPtr<FModule> InModule, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SelectModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectModule(TSharedPtr<FModule> Module)"
  },
  {
    "label": "OnMouseButtonClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseButtonClick(TSharedPtr<FModule> Module)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FModule> Module, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetStatsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStatsText()"
  },
  {
    "label": "GetStatsTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetStatsTextColor()"
  },
  {
    "label": "ListView_GetContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "ListView_GetContextMenu()"
  },
  {
    "label": "LoadSymbolsFile_Label()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "LoadSymbolsFile_Label()"
  },
  {
    "label": "LoadSymbolsDirectory_Label()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "LoadSymbolsDirectory_Label()"
  },
  {
    "label": "LoadSymbols_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadSymbols_CanExecute()"
  },
  {
    "label": "LoadSymbols_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSymbols_Execute(TSharedPtr<FModule> Module, bool bOpenFile)"
  },
  {
    "label": "UpdateSorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSorting()"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (private : EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  }
]