[
  {
    "label": "CastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CastInst"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "IVUsers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVUsers"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LPPassManager"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "IVVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVVisitor"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_SIMPLIFYINDVAR_H # define LLVM_TRANSFORMS_UTILS_SIMPLIFYINDVAR_H # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / CommandLine . h \" namespace llvm { class CastInst ; class DominatorTree ; class IVUsers ; class Loop ; class LPPassManager ; class PHINode ; class ScalarEvolution ; class IVVisitor { protected : const DominatorTree* DT ; bool ShouldSplitOverflowIntrinsics ; void)",
    "insertText": "anchor()"
  },
  {
    "label": "IVVisitor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "IVVisitor(): DT(nullptr), ShouldSplitOverflowIntrinsics(false)"
  },
  {
    "label": "IVVisitor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IVVisitor()"
  },
  {
    "label": "getDomTree()",
    "kind": "Method",
    "detail": "Function (} const DominatorTree*)",
    "insertText": "getDomTree()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (ShouldSplitOverflowIntrinsics = true ;)",
    "insertText": "assert(DT && \"Splitting overflow intrinsics requires a DomTree.\")"
  },
  {
    "label": "visitCast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitCast(CastInst *Cast)"
  },
  {
    "label": "simplifyUsersOfIV()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "simplifyUsersOfIV(PHINode *CurrIV, ScalarEvolution *SE, LPPassManager *LPM, SmallVectorImpl<WeakVH> &Dead, IVVisitor *V = nullptr)"
  },
  {
    "label": "simplifyLoopIVs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "simplifyLoopIVs(Loop *L, ScalarEvolution *SE, LPPassManager *LPM, SmallVectorImpl<WeakVH> &Dead)"
  }
]