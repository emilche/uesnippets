[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MDCT_H # define MDCT_H # include \" opus_defines . h \" # include \" kiss_fft . h \" # include \" arch . h \" typedef struct { int n ; int maxshift ; const kiss_fft_state* kfft [ 4 ] ; const kiss_twiddle_scalar* OPUS_RESTRICT trig ; } mdct_lookup ; # if)",
    "insertText": "defined(HAVE_ARM_NE10) #include \"arm/mdct_arm.h\" #endif int clt_mdct_init(mdct_lookup *l,int N, int maxshift, int arch)"
  },
  {
    "label": "clt_mdct_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clt_mdct_clear(mdct_lookup *l, int arch)"
  },
  {
    "label": "clt_mdct_forward_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clt_mdct_forward_c(const mdct_lookup *l, kiss_fft_scalar *in, kiss_fft_scalar * OPUS_RESTRICT out, const opus_val16 *window, int overlap, int shift, int stride, int arch)"
  },
  {
    "label": "clt_mdct_backward_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clt_mdct_backward_c(const mdct_lookup *l, kiss_fft_scalar *in, kiss_fft_scalar * OPUS_RESTRICT out, const opus_val16 * OPUS_RESTRICT window, int overlap, int shift, int stride, int arch)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_OPUS_MDCT) #if defined(OPUS_HAVE_RTCD) && defined(HAVE_ARM_NE10) extern void (*const CLT_MDCT_FORWARD_IMPL[OPUS_ARCHMASK+1])( const mdct_lookup *l, kiss_fft_scalar *in, kiss_fft_scalar * OPUS_RESTRICT out, const opus_val16 *window, int overlap, int shift, int stride, int arch)"
  },
  {
    "label": "clt_mdct_forward()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "clt_mdct_forward(_l, _in, _out, _window, _overlap, _shift, _stride, _arch) \\ ((*CLT_MDCT_FORWARD_IMPL[(arch)&OPUS_ARCHMASK])(_l, _in, _out, \\ _window, _overlap, _shift, \\ _stride, _arch)) extern void (*const CLT_MDCT_BACKWARD_IMPL[OPUS_ARCHMASK+1])( const mdct_lookup *l, kiss_fft_scalar *in, kiss_fft_scalar * OPUS_RESTRICT out, const opus_val16 *window, int overlap, int shift, int stride, int arch)"
  }
]