[
  {
    "label": "FLevelRenderAssetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelRenderAssetManager"
  },
  {
    "label": "FDynamicRenderAssetInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRenderAssetInstanceManager"
  },
  {
    "label": "FRenderAssetStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingManager"
  },
  {
    "label": "FAsyncRenderAssetStreamingData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncRenderAssetStreamingData"
  },
  {
    "label": "FCompareRenderAssetByRetentionPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRenderAssetByRetentionPriority"
  },
  {
    "label": "FCompareRenderAssetByLoadOrderPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRenderAssetByLoadOrderPriority"
  },
  {
    "label": "FRenderAssetStreamingMipCalcTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderAssetStreamingMipCalcTask"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" ContentStreaming . h \" # include \" Async / AsyncWork . h \" # include \" Streaming / StreamingTexture . h \" # include \" Streaming / TextureInstanceView . h \" class FLevelRenderAssetManager ; class FDynamicRenderAssetInstanceManager ; struct FRenderAssetStreamingManager ; class FAsyncRenderAssetStreamingData { public : void)",
    "insertText": "Init(TArray<FStreamingViewInfo> InViewInfos, float InWorldTime, TArray<FLevelRenderAssetManager*>& LevelStaticInstanceManagers, FDynamicRenderAssetInstanceManager& DynamicComponentManager)"
  },
  {
    "label": "ComputeViewInfoExtras()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeViewInfoExtras(const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdateBoundSizes_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundSizes_Async(const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdatePerfectWantedMips_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerfectWantedMips_Async(FStreamingRenderAsset& StreamingRenderAsset, const FRenderAssetStreamingSettings& Settings, bool bOutputToLog = false)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetDynamicInstancesView()",
    "kind": "Method",
    "detail": "Function (} const FRenderAssetInstanceAsyncView&)",
    "insertText": "GetDynamicInstancesView()"
  },
  {
    "label": "ReleaseViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseViews()"
  },
  {
    "label": "FRenderAssetInstanceAsyncView()",
    "kind": "Method",
    "detail": "Function (DynamicInstancesView =)",
    "insertText": "FRenderAssetInstanceAsyncView()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StaticInstancesViews .)",
    "insertText": "Reset()"
  },
  {
    "label": "OnTaskDone_Async()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTaskDone_Async()"
  },
  {
    "label": "OnTaskDone()",
    "kind": "Method",
    "detail": "Function (DynamicInstancesView .)",
    "insertText": "OnTaskDone()"
  },
  {
    "label": "FCompareRenderAssetByRetentionPriority()",
    "kind": "Method",
    "detail": "Function (} } private : TArray<FStreamingViewInfo> ViewInfos ; FStreamingViewInfoExtraArray ViewInfoExtras ; FRenderAssetInstanceAsyncView DynamicInstancesView ; TArray<FRenderAssetInstanceAsyncView> StaticInstancesViews ; float LastUpdateTime ; float MaxScreenSizeOverAllViews ; TArray<int32> StaticInstancesViewIndices ; TArray<int32> CulledStaticInstancesViewIndices ; TArray<int32> StaticInstancesViewLevelIndices ; } ; struct FCompareRenderAssetByRetentionPriority {)",
    "insertText": "FCompareRenderAssetByRetentionPriority(const TArray<FStreamingRenderAsset>& InStreamingRenderAssets) : StreamingRenderAssets(InStreamingRenderAssets)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const TArray<FStreamingRenderAsset>& StreamingRenderAssets ; bool)",
    "insertText": "operator()( int32 IndexA, int32 IndexB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 PrioA = StreamingRenderAssets [ IndexA ] . RetentionPriority ; const int32 PrioB = StreamingRenderAssets [ IndexB ] . RetentionPriority ;)",
    "insertText": "if(PrioA > PrioB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float SSA = StreamingRenderAssets [ IndexA ] . NormalizedScreenSize ; const float SSB = StreamingRenderAssets [ IndexB ] . NormalizedScreenSize ;)",
    "insertText": "if(SSA > SSB)"
  },
  {
    "label": "FCompareRenderAssetByLoadOrderPriority()",
    "kind": "Method",
    "detail": "Function (} return false ; } } ; struct FCompareRenderAssetByLoadOrderPriority {)",
    "insertText": "FCompareRenderAssetByLoadOrderPriority(const TArray<FStreamingRenderAsset>& InStreamingRenderAssets) : StreamingRenderAssets(InStreamingRenderAssets)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(0, 0, 0, 0, 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MemoryBudget = 0 ; MeshMemoryBudget = 0 ; PerfectWantedMipsBudgetResetThresold = 0 ; } void)",
    "insertText": "Reset(int64 InTotalGraphicsMemory, int64 InAllocatedMemory, int64 InPoolSize, int64 InTempMemoryBudget, int64 InMemoryMargin)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (TotalGraphicsMemory = InTotalGraphicsMemory ; AllocatedMemory = InAllocatedMemory ; PoolSize = InPoolSize ; TempMemoryBudget = InTempMemoryBudget ; MemoryMargin = InMemoryMargin ; bAbort = false ; } void)",
    "insertText": "Abort()"
  },
  {
    "label": "IsAborted()",
    "kind": "Method",
    "detail": "Function (bAbort = true ; } bool)",
    "insertText": "IsAborted()"
  },
  {
    "label": "HasAnyView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyView()"
  },
  {
    "label": "ReleaseAsyncViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseAsyncViews()"
  },
  {
    "label": "AllowPerRenderAssetMipBiasChanges()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "AllowPerRenderAssetMipBiasChanges()"
  },
  {
    "label": "ApplyPakStateChanges_Async()",
    "kind": "Method",
    "detail": "Function (private : class FAsyncTask<FRenderAssetStreamingMipCalcTask> ; void)",
    "insertText": "ApplyPakStateChanges_Async()"
  },
  {
    "label": "TryDropMaxResolutions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDropMaxResolutions(TArray<int32>& PrioritizedRenderAssets, int64& MemoryBudgeted, const int64 InMemoryBudget)"
  },
  {
    "label": "TryDropMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDropMips(TArray<int32>& PrioritizedRenderAssets, int64& MemoryBudgeted, const int64 InMemoryBudget)"
  },
  {
    "label": "TryKeepMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryKeepMips(TArray<int32>& PrioritizedRenderAssets, int64& MemoryBudgeted, const int64 InMemoryBudget)"
  },
  {
    "label": "UpdateBudgetedMips_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBudgetedMips_Async()"
  },
  {
    "label": "UpdateLoadAndCancelationRequests_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoadAndCancelationRequests_Async()"
  },
  {
    "label": "UpdatePendingStreamingStatus_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePendingStreamingStatus_Async()"
  },
  {
    "label": "UpdateStats_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats_Async()"
  },
  {
    "label": "UpdateCSVOnlyStats_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCSVOnlyStats_Async()"
  }
]