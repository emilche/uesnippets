[
  {
    "label": "StackTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackTrace"
  },
  {
    "label": "THREAD_ANNOTATION_ATTRIBUTE__",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THREAD_ANNOTATION_ATTRIBUTE__"
  },
  {
    "label": "Core",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Core"
  },
  {
    "label": "THREAD_ANNOTATION_ATTRIBUTE__()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SEQUENCE_CHECKER_IMPL_H_ # define BASE_SEQUENCE_CHECKER_IMPL_H_ # include<memory> # include \" base / base_export . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" namespace base { namespace debug { class StackTrace ; } class)",
    "insertText": "THREAD_ANNOTATION_ATTRIBUTE__(capability(\"context\"))"
  },
  {
    "label": "EnableStackLogging()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EnableStackLogging()"
  },
  {
    "label": "SequenceCheckerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceCheckerImpl()"
  },
  {
    "label": "SequenceCheckerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceCheckerImpl(SequenceCheckerImpl&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceCheckerImpl&)",
    "insertText": "operator(SequenceCheckerImpl&& other)"
  },
  {
    "label": "SequenceCheckerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceCheckerImpl(const SequenceCheckerImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceCheckerImpl&)",
    "insertText": "operator(const SequenceCheckerImpl&)"
  },
  {
    "label": "CalledOnValidSequence()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CalledOnValidSequence(std::unique_ptr<debug::StackTrace>* out_bound_at = nullptr)"
  },
  {
    "label": "DetachFromSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromSequence()"
  },
  {
    "label": "HasThreadLocalStorageBeenDestroyed()",
    "kind": "Method",
    "detail": "Function (private : class Core ; bool)",
    "insertText": "HasThreadLocalStorageBeenDestroyed()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock lock_ ; std::unique_ptr<Core> core_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]