[
  {
    "label": "FAssetThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnailPool"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FGameModeInfoCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameModeInfoCustomizer"
  },
  {
    "label": "IDetailCategoryBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCategoryBuilder"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FWorldSettingsDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldSettingsDetails"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FLightmapCustomNodeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapCustomNodeBuilder"
  },
  {
    "label": "FLightmapItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmapItem"
  },
  {
    "label": "FAssetThumbnail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnail"
  },
  {
    "label": "FWorldSettingsDetails()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" IDetailCustomization . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FAssetThumbnailPool ; class FDetailWidgetRow ; class FGameModeInfoCustomizer ; class IDetailCategoryBuilder ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class IPropertyHandle ; class SWidget ; class ULevel ; class UObject ; struct FGeometry ; struct FPointerEvent ; class FWorldSettingsDetails : public IDetailCustomization { public : ~)",
    "insertText": "FWorldSettingsDetails()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeGameInfoProperty()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CustomizeGameInfoProperty(const FName& PropertyName, IDetailLayoutBuilder& DetailBuilder, IDetailCategoryBuilder& CategoryBuilder)"
  },
  {
    "label": "AddLightmapCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLightmapCustomization(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "AddWorldCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldCustomization(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "IsPartitionedWorld()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsPartitionedWorld(ULevel* Level)"
  },
  {
    "label": "OnUseExternalActorsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseExternalActorsChanged(ECheckBoxState State, ULevel* Level)"
  },
  {
    "label": "IsUseExternalActorsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsUseExternalActorsChecked(ULevel* Level)"
  },
  {
    "label": "IsUseExternalActorsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUseExternalActorsEnabled(ULevel* Level)"
  },
  {
    "label": "OnUseActorFoldersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseActorFoldersChanged(ECheckBoxState BoxState, ULevel* Level)"
  },
  {
    "label": "IsUsingActorFoldersChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsUsingActorFoldersChecked(ULevel* Level)"
  },
  {
    "label": "IsUsingActorFoldersEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingActorFoldersEnabled(ULevel* Level)"
  },
  {
    "label": "HandleAssetDropTargetIsAssetAcceptableForDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetDropTargetIsAssetAcceptableForDrop(const UObject* InObject)"
  },
  {
    "label": "HandleAssetDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetDropped(UObject* Object, TSharedRef<IPropertyHandle> GameInfoProperty)"
  },
  {
    "label": "FLightmapCustomNodeBuilder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGameModeInfoCustomizer> GameInfoModeCustomizer ; TWeakObjectPtr<class AWorldSettings> SelectedWorldSettings ; } ; class FLightmapCustomNodeBuilder : public IDetailCustomNodeBuilder,public TSharedFromThis<FLightmapCustomNodeBuilder> { public :)",
    "insertText": "FLightmapCustomNodeBuilder(const TSharedPtr<FAssetThumbnailPool>& InThumbnailPool)"
  },
  {
    "label": "FLightmapCustomNodeBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLightmapCustomNodeBuilder()"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRegenerateChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "InitiallyCollapsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitiallyCollapsed()"
  },
  {
    "label": "GetLightmapCountText()",
    "kind": "Method",
    "detail": "Function (} } ; FText)",
    "insertText": "GetLightmapCountText()"
  },
  {
    "label": "HandleLightingBuildKept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLightingBuildKept()"
  },
  {
    "label": "HandleNewCurrentLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNewCurrentLevel()"
  },
  {
    "label": "MakeLightMapList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeLightMapList(TSharedPtr<FLightmapItem> AssetItem)"
  },
  {
    "label": "OnGetLightMapContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetLightMapContextMenuContent(TSharedPtr<FLightmapItem> Lightmap)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TWeakPtr<FLightmapItem> Lightmap)"
  },
  {
    "label": "OnLightMapListMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLightMapListMouseButtonDoubleClick(const FGeometry& MyGeom, const FPointerEvent& PointerEvent, TWeakPtr<FLightmapItem> SelectedLightmap)"
  },
  {
    "label": "ExecuteViewLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteViewLightmap(FString SelectedLightmapPath)"
  },
  {
    "label": "RefreshLightmapItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshLightmapItems()"
  }
]