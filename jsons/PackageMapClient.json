[
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetFieldExport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetFieldExport"
  },
  {
    "label": "FNetFieldExportGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetFieldExportGroup"
  },
  {
    "label": "FNetGuidCacheObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetGuidCacheObject"
  },
  {
    "label": "FQueuedBunchObjectReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedBunchObjectReference"
  },
  {
    "label": "FNetGUIDCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetGUIDCache"
  },
  {
    "label": "FRefCountedNetGUIDArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountedNetGUIDArray"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UPackageMapClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMapClient"
  },
  {
    "label": "FPendingAsyncLoadRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingAsyncLoadRequest"
  },
  {
    "label": "FIsOwnerOrPawnHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIsOwnerOrPawnHelper"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FPackageMapAckState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageMapAckState"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Misc / NetworkGuid . h \" # include \" Misc / NetworkVersion . h \" # include \" UObject / CoreNet . h \" # include \" Net / Core / NetToken / NetToken . h \" # include \" Net / DataBunch . h \" # include \" Net / NetAnalyticsTypes . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" PackageMapClient . generated . h \")",
    "insertText": "LLM_DECLARE_TAG_API(GuidCache, ENGINE_API)"
  },
  {
    "label": "FNetFieldExport()",
    "kind": "Method",
    "detail": "Function (class UNetConnection ; class UNetDriver ; enum class EChannelGetAdditionalRequiredBunchesFlags : uint32 ; class FNetFieldExport { public :)",
    "insertText": "FNetFieldExport() : Handle( 0 ), CompatibleChecksum( 0 ), bExported( false ), bDirtyForReplay( true ), bIncompatible( false)"
  },
  {
    "label": "FNetFieldExport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetFieldExport(const uint32 InHandle, const uint32 InCompatibleChecksum, const FName& InName ) : Handle( InHandle ), CompatibleChecksum( InCompatibleChecksum ), ExportName( InName ), bExported( false ), bDirtyForReplay( true ), bIncompatible( false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FNetFieldExport& C)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "FNetFieldExportGroup()",
    "kind": "Method",
    "detail": "Function (uint32 Handle ; uint32 CompatibleChecksum ; FName ExportName ; bool bExported ; bool bDirtyForReplay ; bool bIncompatible ; } ; class FNetFieldExportGroup { public :)",
    "insertText": "FNetFieldExportGroup() : PathNameIndex( 0 ), bDirtyForReplay( true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FString PathName ; uint32 PathNameIndex ; TArray<FNetFieldExport> NetFieldExports ; bool bDirtyForReplay ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FNetFieldExportGroup& C)"
  },
  {
    "label": "FindNetFieldExportHandleByChecksum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNetFieldExportHandleByChecksum(const uint32 Checksum)"
  },
  {
    "label": "FNetGuidCacheObject()",
    "kind": "Method",
    "detail": "Function (} ; class FNetGuidCacheObject { public :)",
    "insertText": "FNetGuidCacheObject() : NetworkChecksum( 0 ), ReadOnlyTimestamp( 0 ), bNoLoad( 0 ), bIgnoreWhenMissing( 0 ), bIsPending( 0 ), bIsBroken( 0 ), bDirtyForReplay( 1)"
  },
  {
    "label": "ForceExportDirtyGroups()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UObject> Object ; FNetworkGUID OuterGUID ; FName PathName ; uint32 NetworkChecksum ; double ReadOnlyTimestamp ; uint8 bNoLoad : 1 ; uint8 bIgnoreWhenMissing : 1 ; uint8 bIsPending : 1 ; uint8 bIsBroken : 1 ; uint8 bDirtyForReplay : 1 ; } ; enum class EAppendNetExportFlags : uint32 { None = 0,)",
    "insertText": "ForceExportDirtyGroups(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EAppendNetExportFlags)"
  },
  {
    "label": "FQueuedBunchObjectReference()",
    "kind": "Method",
    "detail": "Function (struct FQueuedBunchObjectReference { private : class FNetGUIDCache ;)",
    "insertText": "FQueuedBunchObjectReference(const FNetworkGUID InNetGUID, UObject* InObject) : NetGUID(InNetGUID), Object(InObject)"
  },
  {
    "label": "FRefCountedNetGUIDArray()",
    "kind": "Method",
    "detail": "Function (} FNetworkGUID NetGUID ; TObjectPtr<UObject> Object ; } ; namespace UE::Net::Private { class FRefCountedNetGUIDArray { public :)",
    "insertText": "FRefCountedNetGUIDArray()"
  },
  {
    "label": "FRefCountedNetGUIDArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRefCountedNetGUIDArray(const FRefCountedNetGUIDArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRefCountedNetGUIDArray&)",
    "insertText": "operator(const FRefCountedNetGUIDArray&)"
  },
  {
    "label": "FRefCountedNetGUIDArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRefCountedNetGUIDArray(FRefCountedNetGUIDArray&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRefCountedNetGUIDArray&)",
    "insertText": "operator(FRefCountedNetGUIDArray&& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FNetworkGUID NetGUID)"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSwap(FNetworkGUID NetGUID)"
  },
  {
    "label": "GetNetGUIDs()",
    "kind": "Method",
    "detail": "Function (const TArray<FNetworkGUID>&)",
    "insertText": "GetNetGUIDs()"
  },
  {
    "label": "FNetGUIDCache()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FNetGUIDCache(FNetGUIDCache&&)"
  },
  {
    "label": "FNetGUIDCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetGUIDCache(const FNetGUIDCache&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetGUIDCache&)",
    "insertText": "operator(FNetGUIDCache&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetGUIDCache&)",
    "insertText": "operator(const FNetGUIDCache&)"
  },
  {
    "label": "CleanReferences()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS enum class ENetworkChecksumMode : uint8 { None = 0,SaveAndUse = 1,SaveButIgnore = 2,} ; enum class EAsyncLoadMode : uint8 { UseCVar = 0,ForceDisable = 1,ForceEnable = 2,} ; void)",
    "insertText": "CleanReferences()"
  },
  {
    "label": "SupportsObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsObject(const UObject* Object, const TWeakObjectPtr<UObject>* WeakObjectPtr=nullptr)"
  },
  {
    "label": "IsDynamicObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicObject(const UObject* Object)"
  },
  {
    "label": "IsNetGUIDAuthority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetGUIDAuthority()"
  },
  {
    "label": "GetOrAssignNetGUID()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetOrAssignNetGUID(UObject* Object, const TWeakObjectPtr<UObject>* WeakObjectPtr=nullptr)"
  },
  {
    "label": "GetNetGUID()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetNetGUID(const UObject* Object)"
  },
  {
    "label": "GetOuterNetGUID()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetOuterNetGUID(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "AssignNewNetGUID_Server()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "AssignNewNetGUID_Server(UObject* Object)"
  },
  {
    "label": "AssignNewNetGUIDFromPath_Server()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "AssignNewNetGUIDFromPath_Server(const FString& PathName, UObject* ObjOuter, UClass* ObjClass)"
  },
  {
    "label": "RegisterNetGUID_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetGUID_Internal(const FNetworkGUID& NetGUID, const FNetGuidCacheObject& CacheObject)"
  },
  {
    "label": "RegisterNetGUID_Server()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetGUID_Server(const FNetworkGUID& NetGUID, UObject* Object)"
  },
  {
    "label": "RegisterNetGUID_Client()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetGUID_Client(const FNetworkGUID& NetGUID, const UObject* Object)"
  },
  {
    "label": "RegisterNetGUIDFromPath_Client()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetGUIDFromPath_Client(const FNetworkGUID& NetGUID, const FString& PathName, const FNetworkGUID& OuterGUID, const uint32 NetworkChecksum, const bool bNoLoad, const bool bIgnoreWhenMissing)"
  },
  {
    "label": "RegisterNetGUIDFromPath_Server()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetGUIDFromPath_Server(const FNetworkGUID& NetGUID, const FString& PathName, const FNetworkGUID& OuterGUID, const uint32 NetworkChecksum, const bool bNoLoad, const bool bIgnoreWhenMissing)"
  },
  {
    "label": "GetObjectFromNetGUID()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectFromNetGUID(const FNetworkGUID& NetGUID, const bool bIgnoreMustBeMapped)"
  },
  {
    "label": "ShouldIgnoreWhenMissing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIgnoreWhenMissing(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "GetCacheObject()",
    "kind": "Method",
    "detail": "Function (FNetGuidCacheObject const* const)",
    "insertText": "GetCacheObject(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "IsGUIDRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGUIDRegistered(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "IsGUIDLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGUIDLoaded(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "IsGUIDBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGUIDBroken(const FNetworkGUID& NetGUID, const bool bMustBeRegistered)"
  },
  {
    "label": "IsGUIDNoLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGUIDNoLoad(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "IsGUIDPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGUIDPending(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "FullNetGUIDPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FullNetGUIDPath(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "GenerateFullNetGUIDPath_r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFullNetGUIDPath_r(const FNetworkGUID& NetGUID, FString& FullPath)"
  },
  {
    "label": "GetClassNetworkChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetClassNetworkChecksum(UClass* Class)"
  },
  {
    "label": "GetNetworkChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNetworkChecksum(UObject* Obj)"
  },
  {
    "label": "SetNetworkChecksumMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkChecksumMode(const ENetworkChecksumMode NewMode)"
  },
  {
    "label": "SetAsyncLoadMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncLoadMode(const EAsyncLoadMode NewMode)"
  },
  {
    "label": "ShouldAsyncLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAsyncLoad()"
  },
  {
    "label": "CanClientLoadObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClientLoadObject(const UObject* Object, const FNetworkGUID& NetGUID)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "AsyncPackageCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncPackageCallback(const FName& PackageName, UPackage * Package, EAsyncLoadingResult::Type Result)"
  },
  {
    "label": "ResetCacheForDemo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCacheForDemo()"
  },
  {
    "label": "ConsumeAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeAsyncLoadDelinquencyAnalytics(FNetAsyncLoadDelinquencyAnalytics& Out)"
  },
  {
    "label": "GetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetAsyncLoadDelinquencyAnalytics&)",
    "insertText": "GetAsyncLoadDelinquencyAnalytics()"
  },
  {
    "label": "ResetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAsyncLoadDelinquencyAnalytics()"
  },
  {
    "label": "CollectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectReferences(class FReferenceCollector& ReferenceCollector)"
  },
  {
    "label": "TrackQueuedBunchObjectReference()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FQueuedBunchObjectReference>)",
    "insertText": "TrackQueuedBunchObjectReference(const FNetworkGUID InNetGUID, UObject* InObject)"
  },
  {
    "label": "WasGUIDSyncLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasGUIDSyncLoaded(FNetworkGUID NetGUID)"
  },
  {
    "label": "ClearSyncLoadedGUID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearSyncLoadedGUID(FNetworkGUID NetGUID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (SyncLoadedGUIDs .)",
    "insertText": "Remove(NetGUID)"
  },
  {
    "label": "ReportSyncLoadedGUIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportSyncLoadedGUIDs()"
  },
  {
    "label": "ResetReplayDirtyTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReplayDirtyTracking()"
  },
  {
    "label": "FindUnmappedStablyNamedGuidsWithOuter()",
    "kind": "Method",
    "detail": "Function (const TArray<FNetworkGUID>*)",
    "insertText": "FindUnmappedStablyNamedGuidsWithOuter(FNetworkGUID OuterGUID)"
  },
  {
    "label": "RemoveUnmappedStablyNamedGuidsWithOuter()",
    "kind": "Method",
    "detail": "Function (const void)",
    "insertText": "RemoveUnmappedStablyNamedGuidsWithOuter(FNetworkGUID OuterGUID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (UnmappedStablyNamedGuids_OuterToInner .)",
    "insertText": "Remove(OuterGUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<FNetworkGUID> ImportedNetGuids ; TMap<FNetworkGUID,TSet<FNetworkGUID>> PendingOuterNetGuids ; UNetDriver* Driver ; ENetworkChecksumMode NetworkChecksumMode ; EAsyncLoadMode AsyncLoadMode ; bool IsExportingNetGUIDBunch ; private : class UPackageMapClient ; uint64 NetworkGuidIndex [ 2 ] ; TMap<FName,FNetworkGUID> PendingAsyncPackages ; TMap<FString,TSharedPtr<FNetFieldExportGroup>> NetFieldExportGroupMap ; TMap<FString,uint32> NetFieldExportGroupPathToIndex ; TMap<uint32,FNetFieldExportGroup*> NetFieldExportGroupIndexToGroup ; int32 UniqueNetFieldExportGroupPathIndex ; TArray<FNetworkGUID> SyncLoadedGUIDs ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) public: static ENGINE_API const bool IsHistoryEnabled()"
  },
  {
    "label": "FPendingAsyncLoadRequest()",
    "kind": "Method",
    "detail": "Function (TMap<FNetworkGUID,FString> History ; private : # endif struct FPendingAsyncLoadRequest {)",
    "insertText": "FPendingAsyncLoadRequest(const FNetworkGUID InNetGUID, const double InRequestStartTime): RequestStartTime(InRequestStartTime)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NetGUIDs .)",
    "insertText": "Add(InNetGUID)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(const FPendingAsyncLoadRequest& Other)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (NetGUIDs .)",
    "insertText": "AddUnique(OtherGUID)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} # if CSV_PROFILER_STATS bWasRequestedByOwnerOrPawn | = Other . bWasRequestedByOwnerOrPawn ; # endif } void)",
    "insertText": "Merge(FNetworkGUID InNetGUID)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (NetGUIDs .)",
    "insertText": "AddUnique(InNetGUID)"
  },
  {
    "label": "StartAsyncLoadingPackage()",
    "kind": "Method",
    "detail": "Function (} TArray<FNetworkGUID,TInlineAllocator<2>> NetGUIDs ; double RequestStartTime ; # if CSV_PROFILER_STATS bool bWasRequestedByOwnerOrPawn = false ; # endif } ; TMap<FName,FPendingAsyncLoadRequest> PendingAsyncLoadRequests ; FNetAsyncLoadDelinquencyAnalytics DelinquentAsyncLoads ; void)",
    "insertText": "StartAsyncLoadingPackage(FNetGuidCacheObject& Object, const FNetworkGUID ObjectGUID, const bool bWasAlreadyAsyncLoading)"
  },
  {
    "label": "ValidateAsyncLoadingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAsyncLoadingPackage(FNetGuidCacheObject& Object, const FNetworkGUID ObjectGUID)"
  },
  {
    "label": "UpdateQueuedBunchObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQueuedBunchObjectReference(const FNetworkGUID NetGUID, UObject* NewObject)"
  },
  {
    "label": "IsTrackingOwnerOrPawn()",
    "kind": "Method",
    "detail": "Function (TMap<FNetworkGUID,TWeakPtr<FQueuedBunchObjectReference>> QueuedBunchObjectReferences ; TMap<FNetworkGUID,UE::Net::Private::FRefCountedNetGUIDArray> UnmappedStablyNamedGuids_OuterToInner ; # if CSV_PROFILER_STATS public : bool)",
    "insertText": "IsTrackingOwnerOrPawn()"
  },
  {
    "label": "FIsOwnerOrPawnHelper()",
    "kind": "Method",
    "detail": "Function (struct FIsOwnerOrPawnHelper { private : class UActorChannel ;)",
    "insertText": "FIsOwnerOrPawnHelper(class FNetGUIDCache* const InGuidCache, const class AActor* InConnectionActor, const class AActor* ChannelActor)"
  },
  {
    "label": "FIsOwnerOrPawnHelper()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FIsOwnerOrPawnHelper()"
  },
  {
    "label": "IsOwnerOrPawn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwnerOrPawn()"
  },
  {
    "label": "FIsOwnerOrPawnHelper()",
    "kind": "Method",
    "detail": "Function (private : class FNetGUIDCache* const GuidCache ; const class AActor* ConnectionActor ; const class AActor* ChannelActor ; int8 CachedResult = INDEX_NONE ;)",
    "insertText": "FIsOwnerOrPawnHelper(const FIsOwnerOrPawnHelper&)"
  },
  {
    "label": "FIsOwnerOrPawnHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIsOwnerOrPawnHelper(FIsOwnerOrPawnHelper&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIsOwnerOrPawnHelper&)",
    "insertText": "operator(const FIsOwnerOrPawnHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIsOwnerOrPawnHelper&)",
    "insertText": "operator(FIsOwnerOrPawnHelper&&)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void *)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void*)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; private : FIsOwnerOrPawnHelper* TrackingOwnerOrPawnHelper = nullptr ; # endif } ; class FPackageMapAckState { public : TMap<FNetworkGUID,int32> NetGUIDAckStatus ; TSet<uint32> NetFieldExportGroupPathAcked ; TSet<uint64> NetFieldExportAcked ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NetGUIDAckStatus .)",
    "insertText": "Empty()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() ENGINE_API UPackageMapClient(const FObjectInitializer & ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UNetConnection * InConnection, TSharedPtr<FNetGUIDCache> InNetGUIDCache)"
  },
  {
    "label": "UPackageMapClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UPackageMapClient()"
  },
  {
    "label": "SerializeObject()",
    "kind": "Method",
    "detail": "Function (delete CurrentExportBunch ; CurrentExportBunch = NULL ; } } bool)",
    "insertText": "SerializeObject(FArchive& Ar, UClass* InClass, UObject*& Obj, FNetworkGUID *OutNetGUID = NULL)"
  },
  {
    "label": "SerializeNewActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeNewActor(FArchive& Ar, class UActorChannel *Channel, class AActor*& Actor)"
  },
  {
    "label": "WriteObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteObject(FArchive& Ar, UObject* InOuter, FNetworkGUID NetGUID, FString ObjName)"
  },
  {
    "label": "NetGUIDHasBeenAckd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetGUIDHasBeenAckd(FNetworkGUID NetGUID)"
  },
  {
    "label": "ReceivedNak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedNak(const int32 NakPacketId)"
  },
  {
    "label": "ReceivedAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedAck(const int32 AckPacketId)"
  },
  {
    "label": "NotifyBunchCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBunchCommit(const int32 OutPacketId, const FOutBunch* OutBunch)"
  },
  {
    "label": "GetNetGUIDStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNetGUIDStats(int32 &AckCount, int32 &UnAckCount, int32 &PendingCount)"
  },
  {
    "label": "GetNetTokenResolveContext()",
    "kind": "Method",
    "detail": "Function (const UE::Net::FNetTokenResolveContext*)",
    "insertText": "GetNetTokenResolveContext()"
  },
  {
    "label": "GetAdditionalRequiredBunches()",
    "kind": "Method",
    "detail": "Function (TArray<FOutBunch*>)",
    "insertText": "GetAdditionalRequiredBunches(const FOutBunch& OutgoingBunch, EChannelGetAdditionalRequiredBunchesFlags Flags)"
  },
  {
    "label": "GetNumExportBunches()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumExportBunches()"
  },
  {
    "label": "AppendExportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExportData(FArchive& Archive)"
  },
  {
    "label": "ReceiveExportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveExportData(FArchive& Archive)"
  },
  {
    "label": "HandleUnAssignedObject()",
    "kind": "Method",
    "detail": "Function (TMap<FNetworkGUID,int32> NetGUIDExportCountMap ; void)",
    "insertText": "HandleUnAssignedObject(UObject* Obj)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "NotifyStreamingLevelUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyStreamingLevelUnload(UObject* UnloadedLevel)"
  },
  {
    "label": "PrintExportBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrintExportBatch()"
  },
  {
    "label": "ResetTrackedSyncLoadedGuids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTrackedSyncLoadedGuids()"
  },
  {
    "label": "ReportSyncLoadsForProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportSyncLoadsForProperty(const FProperty* Property, const UObject* Object)"
  },
  {
    "label": "LogDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDebugInfo(FOutputDevice & Ar)"
  },
  {
    "label": "GetNetGUIDFromObject()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetNetGUIDFromObject(const UObject* InObject)"
  },
  {
    "label": "SetHasQueuedBunches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasQueuedBunches(const FNetworkGUID& NetGUID, bool bHasQueuedBunches)"
  },
  {
    "label": "GetMustBeMappedGuidsInLastBunch()",
    "kind": "Method",
    "detail": "Function (TArray<FNetworkGUID>&)",
    "insertText": "GetMustBeMappedGuidsInLastBunch()"
  },
  {
    "label": "SavePackageMapExportAckStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePackageMapExportAckStatus(FPackageMapAckState& OutState)"
  },
  {
    "label": "RestorePackageMapExportAckStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePackageMapExportAckStatus(const FPackageMapAckState& InState)"
  },
  {
    "label": "OverridePackageMapExportAckStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePackageMapExportAckStatus(FPackageMapAckState* NewState)"
  },
  {
    "label": "ResetAckState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAckState()"
  },
  {
    "label": "GetNetFieldExportGroup()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNetFieldExportGroup>)",
    "insertText": "GetNetFieldExportGroup(const FString& PathName)"
  },
  {
    "label": "AddNetFieldExportGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNetFieldExportGroup(const FString& PathName, TSharedPtr< FNetFieldExportGroup > NewNetFieldExportGroup)"
  },
  {
    "label": "TrackNetFieldExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackNetFieldExport(FNetFieldExportGroup* NetFieldExportGroup, const int32 NetFieldExportHandle)"
  },
  {
    "label": "GetNetFieldExportGroupChecked()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNetFieldExportGroup>)",
    "insertText": "GetNetFieldExportGroupChecked(const FString& PathName)"
  },
  {
    "label": "SerializeNetFieldExportGroupMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNetFieldExportGroupMap(FArchive& Ar, bool bClearPendingExports=true)"
  },
  {
    "label": "SerializeNetFieldExportDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNetFieldExportDelta(FArchive& Ar)"
  },
  {
    "label": "CreateCustomExportsBunch()",
    "kind": "Method",
    "detail": "Function (FOutBunch*)",
    "insertText": "CreateCustomExportsBunch(const FOutBunch& OutgoingBunch)"
  },
  {
    "label": "ReceiveCustomExportsBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveCustomExportsBunch(FInBunch& InBunch)"
  },
  {
    "label": "ScopedIgnoreReceivedExportGUIDs()",
    "kind": "Method",
    "detail": "Function (public : TUniquePtr<TGuardValue<bool>>)",
    "insertText": "ScopedIgnoreReceivedExportGUIDs()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetFullNetGUIDPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullNetGUIDPath(const FNetworkGUID& NetGUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString FullGuidCachePath ;)",
    "insertText": "if(const FNetGUIDCache * const GuidCacheLocal = GuidCache.Get())"
  },
  {
    "label": "FullNetGUIDPath()",
    "kind": "Method",
    "detail": "Function (FullGuidCachePath = GuidCacheLocal ->)",
    "insertText": "FullNetGUIDPath(NetGUID)"
  },
  {
    "label": "AddUnmappedNetGUIDReference()",
    "kind": "Method",
    "detail": "Function (} return FullGuidCachePath ; } void)",
    "insertText": "AddUnmappedNetGUIDReference(FNetworkGUID UnmappedGUID)"
  },
  {
    "label": "RemoveUnmappedNetGUIDReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnmappedNetGUIDReference(FNetworkGUID MappedGUID)"
  },
  {
    "label": "AppendNetFieldExports()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AppendNetFieldExports(FArchive& Archive)"
  },
  {
    "label": "ReceiveNetFieldExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveNetFieldExports(FArchive& Archive)"
  },
  {
    "label": "AppendNetFieldExportsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNetFieldExportsInternal(FArchive& Archive, const TSet<uint64>& InNetFieldExports, EAppendNetExportFlags Flags)"
  },
  {
    "label": "AppendNetExportGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNetExportGUIDs(FArchive& Archive)"
  },
  {
    "label": "ReceiveNetExportGUIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveNetExportGUIDs(FArchive& Archive)"
  },
  {
    "label": "ExportNetGUIDForReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportNetGUIDForReplay(FNetworkGUID&, UObject* Object, FString& PathName, UObject* ObjOuter)"
  },
  {
    "label": "ExportNetGUID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportNetGUID(FNetworkGUID NetGUID, UObject* Object, FString PathName, UObject* ObjOuter)"
  },
  {
    "label": "ExportNetGUIDHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportNetGUIDHeader()"
  },
  {
    "label": "InternalWriteObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalWriteObject(FArchive& Ar, FNetworkGUID NetGUID, UObject* Object, FString ObjectPathName, UObject* ObjectOuter)"
  },
  {
    "label": "InternalLoadObject()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "InternalLoadObject(FArchive & Ar, UObject *& Object, const int32 InternalLoadObjectRecursionCount)"
  },
  {
    "label": "ResolvePathAndAssignNetGUID()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolvePathAndAssignNetGUID(const FNetworkGUID& NetGUID, const FString& PathName)"
  },
  {
    "label": "ShouldSendFullPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendFullPath(const UObject* Object, const FNetworkGUID &NetGUID)"
  },
  {
    "label": "ObjectLevelHasFinishedLoading()",
    "kind": "Method",
    "detail": "Function (class UNetConnection* Connection ; bool)",
    "insertText": "ObjectLevelHasFinishedLoading(UObject* Obj)"
  },
  {
    "label": "ReceiveNetFieldExportsCompat()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<uint8>> ExportGUIDArchives ; TSet<FNetworkGUID> CurrentExportNetGUIDs ; TMap<FNetworkGUID,double> CurrentQueuedBunchNetGUIDs ; TArray<FNetworkGUID> PendingAckGUIDs ; FPackageMapAckState AckState ; FPackageMapAckState* OverrideAckState ; TArray<FOutBunch*> ExportBunches ; FOutBunch* CurrentExportBunch ; int32 ExportNetGUIDCount ; TSharedPtr<FNetGUIDCache> GuidCache ; TArray<FNetworkGUID> MustBeMappedGuidsInLastBunch ; TSet<uint64> NetFieldExports ; private : void)",
    "insertText": "ReceiveNetFieldExportsCompat(FInBunch& InBunch)"
  },
  {
    "label": "ReportSyncLoadsForActorSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSyncLoadsForActorSpawn(const AActor* Actor)"
  },
  {
    "label": "GetNumQueuedBunchNetGUIDs()",
    "kind": "Method",
    "detail": "Function (bool bIgnoreReceivedExportGUIDs ; public : int32)",
    "insertText": "GetNumQueuedBunchNetGUIDs()"
  },
  {
    "label": "ConsumeQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeQueuedActorDelinquencyAnalytics(FNetQueuedActorDelinquencyAnalytics& Out)"
  },
  {
    "label": "GetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetQueuedActorDelinquencyAnalytics&)",
    "insertText": "GetQueuedActorDelinquencyAnalytics()"
  },
  {
    "label": "ResetQueuedActorDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetQueuedActorDelinquencyAnalytics()"
  }
]