[
  {
    "label": "conj_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conj_helper"
  },
  {
    "label": "conj_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conj_if"
  },
  {
    "label": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARCH_CONJ_HELPER_H # define EIGEN_ARCH_CONJ_HELPER_H # define)",
    "insertText": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(PACKET_CPLX, PACKET_REAL)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (\\ EIGEN_STRONG_INLINE PACKET_CPLX)",
    "insertText": "pmadd(const PACKET_REAL& x, \\ const PACKET_CPLX& y, \\ const PACKET_CPLX& c)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "padd(c, this->pmul(x, y))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (\\ } \\ EIGEN_STRONG_INLINE PACKET_CPLX)",
    "insertText": "pmul(const PACKET_REAL& x, \\ const PACKET_CPLX& y)"
  },
  {
    "label": "PACKET_CPLX()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "PACKET_CPLX(Eigen::internal::pmul<PACKET_REAL>(x, y.v))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ \\ template<> \\ struct conj_helper<PACKET_CPLX,PACKET_REAL,false,false> { \\ EIGEN_STRONG_INLINE PACKET_CPLX)",
    "insertText": "pmadd(const PACKET_CPLX& x, \\ const PACKET_REAL& y, \\ const PACKET_CPLX& c)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (\\ } \\ EIGEN_STRONG_INLINE PACKET_CPLX)",
    "insertText": "pmul(const PACKET_CPLX& x, \\ const PACKET_REAL& y)"
  },
  {
    "label": "PACKET_CPLX()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "PACKET_CPLX(Eigen::internal::pmul<PACKET_REAL>(x.v, y))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; namespace Eigen { namespace internal { template<bool Conjugate> struct conj_if ; template<> struct conj_if<true> { template<T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "operator()(const T& x)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "pconj(const T& x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType)",
    "insertText": "pmul(const LhsType& x, const RhsType& y)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar> struct conj_helper<LhsScalar,RhsScalar,true,true> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResultType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType)",
    "insertText": "pmadd(const LhsScalar& x, const RhsScalar& y, const ResultType& c)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType)",
    "insertText": "pmul(const LhsScalar& x, const RhsScalar& y)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet,bool ConjLhs,bool ConjRhs> struct conj_helper<Packet,Packet,ConjLhs,ConjRhs> { typedef Packet ResultType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pmadd(const Packet& x, const Packet& y, const Packet& c)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pmul(const Packet& x, const Packet& y)"
  }
]