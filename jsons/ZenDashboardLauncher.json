[
  {
    "label": "FZenDashboardLauncher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenDashboardLauncher"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Experimental / ZenGlobals . h \" # include \" HAL / PlatformProcess . h \" # if UE_WITH_ZEN # define namespace UE::Zen { class FZenDashboardLauncher : public TSharedFromThis<FZenDashboardLauncher> { public : enum class EStartZenDashboardResult : uint32 { Completed = 0,BuildFailed = 1,LaunchFailed = 2,} ; typedef TFunction<)",
    "insertText": "void(const EStartZenDashboardResult)"
  },
  {
    "label": "FZenDashboardLauncher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FZenDashboardLauncher()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FZenDashboardLauncher>&)",
    "insertText": "Get()"
  },
  {
    "label": "GetZenDashboardApplicationPath()",
    "kind": "Method",
    "detail": "Function (} return Instance ; } FString)",
    "insertText": "GetZenDashboardApplicationPath()"
  },
  {
    "label": "StartZenDashboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartZenDashboard(const FString& Path, const FString& Parameters = TEXT(\"\"))"
  },
  {
    "label": "StartZenDashboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartZenDashboard(const FString& Path, const FString& Parameters, StartZenDashboardCallback Callback)"
  },
  {
    "label": "CloseZenDashboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseZenDashboard()"
  },
  {
    "label": "BuildZenDashboard()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildZenDashboard(const FString& Path, const FString& LaunchParameters, StartZenDashboardCallback Callback)"
  }
]