[
  {
    "label": "TaskEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TaskEvent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SequencedTaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskTracker"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "SequencedTaskRunnerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunnerTest"
  },
  {
    "label": "TaskEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SEQUENCED_TASK_RUNNER_TEST_TEMPLATE_H_ # define BASE_TEST_SEQUENCED_TASK_RUNNER_TEST_TEMPLATE_H_ # include<cstddef> # include<iosfwd> # include<vector> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / memory / ref_counted . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # include \" testing / gtest / include / gtest / gtest . h \" namespace base { namespace internal { struct TaskEvent { enum Type { POST,START,END } ;)",
    "insertText": "TaskEvent(int i, Type type)"
  },
  {
    "label": "SequencedTaskTracker()",
    "kind": "Method",
    "detail": "Function (int i ; Type type ; } ; class SequencedTaskTracker : public RefCountedThreadSafe<SequencedTaskTracker> { public :)",
    "insertText": "SequencedTaskTracker()"
  },
  {
    "label": "SequencedTaskTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequencedTaskTracker(const SequencedTaskTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequencedTaskTracker&)",
    "insertText": "operator(const SequencedTaskTracker&)"
  },
  {
    "label": "PostWrappedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostWrappedNonNestableTask(SequencedTaskRunner* task_runner, OnceClosure task)"
  },
  {
    "label": "PostWrappedNestableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostWrappedNestableTask(SequencedTaskRunner* task_runner, OnceClosure task)"
  },
  {
    "label": "PostWrappedDelayedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostWrappedDelayedNonNestableTask(SequencedTaskRunner* task_runner, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "PostNonNestableTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNonNestableTasks(SequencedTaskRunner* task_runner, int task_count)"
  },
  {
    "label": "GetTaskEvents()",
    "kind": "Method",
    "detail": "Function (const std::vector<TaskEvent>&)",
    "insertText": "GetTaskEvents()"
  },
  {
    "label": "WaitForCompletedTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletedTasks(int count)"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTask(OnceClosure task, int task_i)"
  },
  {
    "label": "TaskPosted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskPosted(int i)"
  },
  {
    "label": "TaskStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskStarted(int i)"
  },
  {
    "label": "TaskEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskEnded(int i)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (Lock lock_ ; std::vector<TaskEvent> events_ ; int next_post_i_ ; int task_end_count_ ; ConditionVariable task_end_cv_ ; } ; void)",
    "insertText": "PrintTo(const TaskEvent& event, std::ostream* os)"
  },
  {
    "label": "CheckNonNestableInvariants()",
    "kind": "Method",
    "detail": "Function (::testing::AssertionResult)",
    "insertText": "CheckNonNestableInvariants(const std::vector<TaskEvent>& events, int task_count)"
  },
  {
    "label": "SequencedTaskRunnerTest()",
    "kind": "Method",
    "detail": "Function (} template<TaskRunnerTestDelegate> class SequencedTaskRunnerTest : public testing::Test { protected :)",
    "insertText": "SequencedTaskRunnerTest() : task_tracker_(new internal::SequencedTaskTracker())"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (} const scoped_refptr<internal::SequencedTaskTracker> task_tracker_ ; TaskRunnerTestDelegate delegate_ ; } ;)",
    "insertText": "TYPED_TEST_SUITE_P(SequencedTaskRunnerTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, SequentialNonNestable)"
  },
  {
    "label": "StartTaskRunner()",
    "kind": "Method",
    "detail": "Function (const int kTaskCount = 1 0 0 0 ; this -> delegate_ .)",
    "insertText": "StartTaskRunner()"
  },
  {
    "label": "GetTaskRunner()",
    "kind": "Method",
    "detail": "Function (const scoped_refptr<SequencedTaskRunner> task_runner = this -> delegate_ .)",
    "insertText": "GetTaskRunner()"
  },
  {
    "label": "PostWrappedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNonNestableTask(task_runner.get(), BindOnce(&PlatformThread::Sleep, Seconds(1)))"
  },
  {
    "label": "PostWrappedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNonNestableTask(task_runner.get(), OnceClosure())"
  },
  {
    "label": "StopTaskRunner()",
    "kind": "Method",
    "detail": "Function (} this -> delegate_ .)",
    "insertText": "StopTaskRunner()"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(CheckNonNestableInvariants(this->task_tracker_->GetTaskEvents(), kTaskCount))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, SequentialNestable)"
  },
  {
    "label": "PostWrappedNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNestableTask(task_runner.get(), BindOnce(&PlatformThread::Sleep, Seconds(1)))"
  },
  {
    "label": "PostWrappedNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNestableTask(task_runner.get(), OnceClosure())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, SequentialDelayedNonNestable)"
  },
  {
    "label": "PostWrappedDelayedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedDelayedNonNestableTask(task_runner.get(), OnceClosure(), Milliseconds(kDelayIncrementMs * i))"
  },
  {
    "label": "WaitForCompletedTasks()",
    "kind": "Method",
    "detail": "Function (} this -> task_tracker_ ->)",
    "insertText": "WaitForCompletedTasks(kTaskCount)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, NonNestablePostFromNonNestableTask)"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (auto task =)",
    "insertText": "BindOnce(&internal::SequencedTaskTracker::PostNonNestableTasks, this->task_tracker_, RetainedRef(task_runner), kChildrenPerParent)"
  },
  {
    "label": "PostWrappedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNonNestableTask(task_runner.get(), std::move(task))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(CheckNonNestableInvariants( this->task_tracker_->GetTaskEvents(), kParentCount * (kChildrenPerParent + 1)))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, DelayedTasksSameDelay)"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (const int kTaskCount = 2 ; const TimeDelta kDelay =)",
    "insertText": "Milliseconds(100)"
  },
  {
    "label": "PostWrappedDelayedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedDelayedNonNestableTask(task_runner.get(), OnceClosure(), kDelay)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, DelayedTaskAfterLongTask)"
  },
  {
    "label": "PostWrappedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedNonNestableTask(task_runner.get(), base::BindOnce(&PlatformThread::Sleep, Milliseconds(50)))"
  },
  {
    "label": "PostWrappedDelayedNonNestableTask()",
    "kind": "Method",
    "detail": "Function (this -> task_tracker_ ->)",
    "insertText": "PostWrappedDelayedNonNestableTask(task_runner.get(), OnceClosure(), Milliseconds(10))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(SequencedTaskRunnerTest, DelayedTaskAfterManyLongTasks)"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(SequencedTaskRunnerTest, SequentialNonNestable, SequentialNestable, SequentialDelayedNonNestable, NonNestablePostFromNonNestableTask, DelayedTasksSameDelay, DelayedTaskAfterLongTask, DelayedTaskAfterManyLongTasks)"
  }
]