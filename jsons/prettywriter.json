[
  {
    "label": "PrettyFormatOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrettyFormatOptions"
  },
  {
    "label": "PrettyWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrettyWriter"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_PRETTYWRITER_H_ # define RAPIDJSON_PRETTYWRITER_H_ # include \" writer . h \" # ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++) #endif #if defined(__clang__) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(c++98-compat)"
  },
  {
    "label": "PrettyWriter()",
    "kind": "Method",
    "detail": "Function (kFormatDefault = 0,kFormatSingleLineArray = 1 } ; template<OutputStream,SourceEncoding = UTF8<>,TargetEncoding = UTF8<>,StackAllocator = CrtAllocator,unsigned writeFlags = kWriteDefaultFlags> class PrettyWriter : public Writer<OutputStream,SourceEncoding,TargetEncoding,StackAllocator,writeFlags> { public : typedef Writer<OutputStream,SourceEncoding,TargetEncoding,StackAllocator,writeFlags> Base ; typedef Base::Ch Ch ;)",
    "insertText": "PrettyWriter(OutputStream& os, StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : Base(os, allocator, levelDepth), indentChar_(' '), indentCharCount_(4), formatOptions_(kFormatDefault)"
  },
  {
    "label": "PrettyWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PrettyWriter(StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : Base(allocator, levelDepth), indentChar_(' '), indentCharCount_(4), formatOptions_(kFormatDefault)"
  },
  {
    "label": "PrettyWriter()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "PrettyWriter(PrettyWriter&& rhs) : Base(std::forward<PrettyWriter>(rhs)), indentChar_(rhs.indentChar_), indentCharCount_(rhs.indentCharCount_), formatOptions_(rhs.formatOptions_)"
  },
  {
    "label": "SetIndent()",
    "kind": "Method",
    "detail": "Function (} # endif PrettyWriter&)",
    "insertText": "SetIndent(Ch indentChar, unsigned indentCharCount)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(indentChar == ' ' || indentChar == '\\t' || indentChar == '\\n' || indentChar == '\\r')"
  },
  {
    "label": "SetFormatOptions()",
    "kind": "Method",
    "detail": "Function (indentChar_ = indentChar ; indentCharCount_ = indentCharCount ; return* this ; } PrettyWriter&)",
    "insertText": "SetFormatOptions(PrettyFormatOptions options)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(kNullType)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Bool(bool b)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(b ? kTrueType : kFalseType)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int(int i)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(kNumberType)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint(unsigned u)"
  },
  {
    "label": "Int64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Int64(int64_t i64)"
  },
  {
    "label": "Uint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Uint64(uint64_t u64)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Double(double d)"
  },
  {
    "label": "RawNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawNumber(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(str != 0)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "String(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(kStringType)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "String(const std::basic_string<Ch>& str)"
  },
  {
    "label": "StartObject()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "StartObject()"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(kObjectType)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Base::level_stack_.template Push<typename Base::Level>()) typename Base::Level(false)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(const Ch* str, SizeType length, bool copy = false)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "Key(const std::basic_string<Ch>& str)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "EndObject(SizeType memberCount = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(Base::level_stack_.GetSize() >= sizeof(typename Base::Level))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(!Base::level_stack_.template Top<typename Base::Level>()->inArray)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2)"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (valueCount == 0)",
    "insertText": "Level(1)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (Base::os_ ->)",
    "insertText": "Put('\\n')"
  },
  {
    "label": "WriteIndent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIndent()"
  },
  {
    "label": "EndValue()",
    "kind": "Method",
    "detail": "Function (} bool ret =)",
    "insertText": "EndValue(Base::WriteEndObject())"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(ret == true)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(kArrayType)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Base::level_stack_.template Push<typename Base::Level>()) typename Base::Level(true)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndArray(SizeType memberCount = 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(Base::level_stack_.template Top<typename Base::Level>()->inArray)"
  },
  {
    "label": "EndValue()",
    "kind": "Method",
    "detail": "Function (} bool ret =)",
    "insertText": "EndValue(Base::WriteEndArray())"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Key(const Ch* str)"
  },
  {
    "label": "RawValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawValue(const Ch* json, size_t length, Type type)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(json != 0)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrettyPrefix(type)"
  },
  {
    "label": "PrettyPrefix()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PrettyPrefix(Type type)"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (Base::Level* level = Base::level_stack_ . template Top<)",
    "insertText": "Level()"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (Base::os_ ->)",
    "insertText": "Put(',')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!(formatOptions_ & kFormatSingleLineArray))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(level->valueCount > 0)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} else { Base::os_ ->)",
    "insertText": "Put(':')"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (Base::os_ ->)",
    "insertText": "Put(' ')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!level->inArray && level->valueCount % 2 == 0) RAPIDJSON_ASSERT(type == kStringType)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (level -> valueCount + + ; } else {)",
    "insertText": "RAPIDJSON_ASSERT(!Base::hasRoot_)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "count(Base::level_stack_.GetSize() / sizeof(typename Base::Level))"
  },
  {
    "label": "PutN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutN(*Base::os_, static_cast<typename OutputStream::Ch>(indentChar_), count)"
  },
  {
    "label": "PrettyWriter()",
    "kind": "Method",
    "detail": "Function (} Ch indentChar_ ; unsigned indentCharCount_ ; PrettyFormatOptions formatOptions_ ; private :)",
    "insertText": "PrettyWriter(const PrettyWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PrettyWriter&)",
    "insertText": "operator(const PrettyWriter&)"
  }
]