[
  {
    "label": "ColorBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ColorBlock"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stream"
  },
  {
    "label": "BlockDXT1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockDXT1"
  },
  {
    "label": "AlphaBlockDXT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlphaBlockDXT3"
  },
  {
    "label": "BlockDXT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockDXT3"
  },
  {
    "label": "AlphaBlockDXT5",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlphaBlockDXT5"
  },
  {
    "label": "BlockDXT5",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockDXT5"
  },
  {
    "label": "BlockATI1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockATI1"
  },
  {
    "label": "BlockATI2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockATI2"
  },
  {
    "label": "BlockCTX1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockCTX1"
  },
  {
    "label": "isFourColorMode()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_IMAGE_BLOCKDXT_H # define NV_IMAGE_BLOCKDXT_H # include<nvmath / Color . h> # include<nvimage / nvimage . h> namespace nv { struct ColorBlock ; class Stream ; struct BlockDXT1 { Color16 col0 ; Color16 col1 ; union { uint8 row [ 4 ] ; uint indices ; } ; bool)",
    "insertText": "isFourColorMode()"
  },
  {
    "label": "evaluatePalette()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "evaluatePalette(Color32 color_array[4])"
  },
  {
    "label": "evaluatePaletteFast()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "evaluatePaletteFast(Color32 color_array[4])"
  },
  {
    "label": "evaluatePalette3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evaluatePalette3(Color32 color_array[4])"
  },
  {
    "label": "evaluatePalette4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evaluatePalette4(Color32 color_array[4])"
  },
  {
    "label": "decodeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeBlock(ColorBlock * block)"
  },
  {
    "label": "setIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIndices(int * idx)"
  },
  {
    "label": "flip4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flip4()"
  },
  {
    "label": "flip2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flip2()"
  },
  {
    "label": "evaluatePalette()",
    "kind": "Method",
    "detail": "Function (} ; struct AlphaBlockDXT5 { union { struct { uint64 alpha0 : 8 ; uint64 alpha1 : 8 ; uint64 bits0 : 3 ; uint64 bits1 : 3 ; uint64 bits2 : 3 ; uint64 bits3 : 3 ; uint64 bits4 : 3 ; uint64 bits5 : 3 ; uint64 bits6 : 3 ; uint64 bits7 : 3 ; uint64 bits8 : 3 ; uint64 bits9 : 3 ; uint64 bitsA : 3 ; uint64 bitsB : 3 ; uint64 bitsC : 3 ; uint64 bitsD : 3 ; uint64 bitsE : 3 ; uint64 bitsF : 3 ; } ; uint64 u ; } ; void)",
    "insertText": "evaluatePalette(uint8 alpha[8])"
  },
  {
    "label": "evaluatePalette8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evaluatePalette8(uint8 alpha[8])"
  },
  {
    "label": "evaluatePalette6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evaluatePalette6(uint8 alpha[8])"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "indices(uint8 index_array[16])"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "index(uint index)"
  },
  {
    "label": "setIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIndex(uint index, uint value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; Stream&)",
    "insertText": "operator(Stream & stream, BlockDXT1 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, AlphaBlockDXT3 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, BlockDXT3 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, AlphaBlockDXT5 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, BlockDXT5 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, BlockATI1 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, BlockATI2 & block)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Stream&)",
    "insertText": "operator(Stream & stream, BlockCTX1 & block)"
  }
]