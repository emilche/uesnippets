[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EUpVector",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUpVector"
  },
  {
    "label": "EFrontVector",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFrontVector"
  },
  {
    "label": "ECoordSystem",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECoordSystem"
  },
  {
    "label": "EPreDefinedAxisSystem",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPreDefinedAxisSystem"
  },
  {
    "label": "AxisDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AxisDef"
  },
  {
    "label": "EAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAxis"
  },
  {
    "label": "FbxConversionMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxConversionMatrix"
  },
  {
    "label": "FbxGlobalSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxGlobalSettings"
  },
  {
    "label": "FbxAxisSystem()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_AXIS_SYSTEM_H_ # define _FBXSDK_SCENE_AXIS_SYSTEM_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxarray . h> # include<fbxsdk / core / base / fbxstring . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxAxisSystem { public : enum EUpVector { eXAxis = 1,eYAxis = 2,eZAxis = 3 } ; enum EFrontVector { eParityEven = 1,eParityOdd = 2 } ; enum ECoordSystem { eRightHanded,eLeftHanded } ; enum EPreDefinedAxisSystem { eMayaZUp,eMayaYUp,eMax,eMotionBuilder,eOpenGL,eDirectX,eLightwave } ;)",
    "insertText": "FbxAxisSystem()"
  },
  {
    "label": "FbxAxisSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxAxisSystem(EUpVector pUpVector, EFrontVector pFrontVector, ECoordSystem pCoorSystem)"
  },
  {
    "label": "FbxAxisSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxAxisSystem(const FbxAxisSystem& pAxisSystem)"
  },
  {
    "label": "FbxAxisSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxAxisSystem(const EPreDefinedAxisSystem pAxisSystem)"
  },
  {
    "label": "ParseAxisSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseAxisSystem(const char * pAxes, FbxAxisSystem& pOutput)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FbxAxisSystem& pAxisSystem)"
  },
  {
    "label": "DeepConvertScene()",
    "kind": "Method",
    "detail": "Function (const FbxAxisSystem MayaZUp ; const FbxAxisSystem MayaYUp ; const FbxAxisSystem Max ; const FbxAxisSystem Motionbuilder ; const FbxAxisSystem OpenGL ; const FbxAxisSystem DirectX ; const FbxAxisSystem Lightwave ; void)",
    "insertText": "DeepConvertScene(FbxScene* pScene)"
  },
  {
    "label": "ConvertScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertScene(FbxScene* pScene)"
  },
  {
    "label": "ConvertScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertScene(FbxScene* pScene, FbxNode* pFbxRoot)"
  },
  {
    "label": "GetFrontVector()",
    "kind": "Method",
    "detail": "Function (EFrontVector)",
    "insertText": "GetFrontVector(int & pSign)"
  },
  {
    "label": "GetUpVector()",
    "kind": "Method",
    "detail": "Function (EUpVector)",
    "insertText": "GetUpVector(int & pSign)"
  },
  {
    "label": "GetCoorSystem()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetCoorSystem()"
  },
  {
    "label": "GetMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMatrix(FbxAMatrix& pMatrix)"
  },
  {
    "label": "ConvertChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertChildren(FbxNode* pRoot, const FbxAxisSystem& pSrcSystem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS protected : class AxisDef { public : enum EAxis { eXAxis,eYAxis,eZAxis } ; bool)",
    "insertText": "operator(const AxisDef& pAxis)"
  },
  {
    "label": "ConvertTProperty()",
    "kind": "Method",
    "detail": "Function (} EAxis mAxis ; int mSign ; } ; class FbxConversionMatrix ; AxisDef mUpVector ; AxisDef mFrontVector ; AxisDef mCoorSystem ; void)",
    "insertText": "ConvertTProperty(FbxArray<FbxNode*>& pNodes, const FbxAxisSystem& pFrom)"
  },
  {
    "label": "ConvertCurveNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertCurveNodes(FbxArray<FbxAnimCurveNode*>& pCurveNodes, const FbxAxisSystem& pFrom)"
  },
  {
    "label": "AdjustPreRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPreRotation(FbxNode* pNode, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "AdjustPivots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPivots(FbxNode* pNode, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "GetConversionMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConversionMatrix(const FbxAxisSystem& pFrom, FbxMatrix& pConversionRM)"
  },
  {
    "label": "AdjustLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustLimits(FbxNode* pNode, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "AdjustPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPoses(FbxScene* pScene, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "AdjustCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustCamera(FbxNode* pNode, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "AdjustCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustCluster(FbxNode* pNode, const FbxMatrix& pConversionRM)"
  },
  {
    "label": "ConvertChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertChildren(FbxNode* pRoot, const FbxAxisSystem& pSrcSystem, bool pSubChildrenOnly)"
  }
]