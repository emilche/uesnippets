[
  {
    "label": "MetricsLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetricsLogger"
  },
  {
    "label": "DefaultMetricsLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultMetricsLogger"
  },
  {
    "label": "MetricsLogger()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_METRICS_METRICS_LOGGER_H_ # define API_TEST_METRICS_METRICS_LOGGER_H_ # include<map> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / metrics / metric . h \" # include \" api / test / metrics / metrics_accumulator . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace test { class MetricsLogger { public : ~)",
    "insertText": "MetricsLogger()"
  },
  {
    "label": "LogSingleValueMetric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogSingleValueMetric(absl::string_view name, absl::string_view test_case_name, double value, Unit unit, ImprovementDirection improvement_direction, std::map<std::string, std::string> metadata = {})"
  },
  {
    "label": "LogMetric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMetric(absl::string_view name, absl::string_view test_case_name, const SamplesStatsCounter& values, Unit unit, ImprovementDirection improvement_direction, std::map<std::string, std::string> metadata = {})"
  },
  {
    "label": "LogMetric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMetric(absl::string_view name, absl::string_view test_case_name, const Metric::Stats& metric_stats, Unit unit, ImprovementDirection improvement_direction, std::map<std::string, std::string> metadata = {})"
  },
  {
    "label": "GetCollectedMetrics()",
    "kind": "Method",
    "detail": "Function (std::vector<Metric>)",
    "insertText": "GetCollectedMetrics()"
  },
  {
    "label": "DefaultMetricsLogger()",
    "kind": "Method",
    "detail": "Function (} ; class DefaultMetricsLogger : public MetricsLogger { public :)",
    "insertText": "DefaultMetricsLogger(webrtc::Clock* clock) : clock_(clock)"
  },
  {
    "label": "DefaultMetricsLogger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DefaultMetricsLogger()"
  },
  {
    "label": "GetMetricsAccumulator()",
    "kind": "Method",
    "detail": "Function (MetricsAccumulator*)",
    "insertText": "GetMetricsAccumulator()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::Clock* const clock_ ; MetricsAccumulator metrics_accumulator_ ; Mutex mutex_ ; std::vector<Metric> metrics_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]