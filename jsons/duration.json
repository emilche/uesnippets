[
  {
    "label": "_Rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep"
  },
  {
    "label": "_Period",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__is_duration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_duration"
  },
  {
    "label": "_Rep1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep1"
  },
  {
    "label": "_Period1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period1"
  },
  {
    "label": "_Rep2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep2"
  },
  {
    "label": "_Period2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period2"
  },
  {
    "label": "_FromDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_FromDuration"
  },
  {
    "label": "_ToDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ToDuration"
  },
  {
    "label": "__duration_cast",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__duration_cast"
  },
  {
    "label": "_R1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_R1"
  },
  {
    "label": "_R2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_R2"
  },
  {
    "label": "__no_overflow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__no_overflow"
  },
  {
    "label": "__mul",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__mul"
  },
  {
    "label": "_LhsDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LhsDuration"
  },
  {
    "label": "_RhsDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RhsDuration"
  },
  {
    "label": "__duration_eq",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__duration_eq"
  },
  {
    "label": "__duration_lt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__duration_lt"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_DURATION_H # define _LIBCPP___CHRONO_DURATION_H # include<__config> # include<limits> # include<ratio> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Rep,class _Period = ratio<1>> class _LIBCPP_TEMPLATE_VIS duration ; template<class _Tp> struct __is_duration : false_type { } ; template<class _Rep,class _Period> struct __is_duration<duration<_Rep,_Period>> : true_type { } ; template<class _Rep,class _Period> struct __is_duration<const duration<_Rep,_Period>> : true_type { } ; template<class _Rep,class _Period> struct __is_duration<volatile duration<_Rep,_Period>> : true_type { } ; template<class _Rep,class _Period> struct __is_duration<const volatile duration<_Rep,_Period>> : true_type { } ; } template<class _Rep1,class _Period1,class _Rep2,class _Period2> struct _LIBCPP_TEMPLATE_VIS common_type<chrono::duration<_Rep1,_Period1>,chrono::duration<_Rep2,_Period2>> { typedef chrono::duration<common_type<_Rep1,_Rep2>::type,__ratio_gcd<_Period1,_Period2>::type> type ; } ; namespace chrono { template<class _FromDuration,class _ToDuration,class _Period = ratio_divide<_FromDuration::period,_ToDuration::period>::type,bool = _Period::num = = 1,bool = _Period::den = = 1> struct __duration_cast ; template<class _FromDuration,class _ToDuration,class _Period> struct __duration_cast<_FromDuration,_ToDuration,_Period,true,true> { _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _ToDuration)",
    "insertText": "operator()(const _FromDuration& __fd)"
  },
  {
    "label": "_ToDuration()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_ToDuration::rep,_FromDuration::rep,intmax_t>::type _Ct ; return)",
    "insertText": "_ToDuration(static_cast<typename _ToDuration::rep>( static_cast<_Ct>(__fd.count()) / static_cast<_Ct>(_Period::den)))"
  },
  {
    "label": "_ToDuration()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_ToDuration::rep,_FromDuration::rep,intmax_t>::type _Ct ; return)",
    "insertText": "_ToDuration(static_cast<typename _ToDuration::rep>( static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num)))"
  },
  {
    "label": "_ToDuration()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_ToDuration::rep,_FromDuration::rep,intmax_t>::type _Ct ; return)",
    "insertText": "_ToDuration(static_cast<typename _ToDuration::rep>( static_cast<_Ct>(__fd.count()) * static_cast<_Ct>(_Period::num) / static_cast<_Ct>(_Period::den)))"
  },
  {
    "label": "duration_cast()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _ToDuration,class _Rep,class _Period> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,_ToDuration>::type)",
    "insertText": "duration_cast(const duration<_Rep, _Period>& __fd)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep> struct _LIBCPP_TEMPLATE_VIS treat_as_floating_point : is_floating_point<_Rep> { } ; # if _LIBCPP_STD_VER> 1 4 template<class _Rep> bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value ; # endif template<class _Rep> struct _LIBCPP_TEMPLATE_VIS duration_values { public : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Rep)",
    "insertText": "zero()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Rep)",
    "insertText": "max()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Rep)",
    "insertText": "min()"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (} } ; # if _LIBCPP_STD_VER> 1 4 template<class _ToDuration,class _Rep,class _Period> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,_ToDuration>::type)",
    "insertText": "floor(const duration<_Rep, _Period>& __d)"
  },
  {
    "label": "_ToDuration()",
    "kind": "Method",
    "detail": "Function (_ToDuration __t = duration_cast<)",
    "insertText": "_ToDuration(__d)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (1 } ; return __t ; } template<class _ToDuration,class _Rep,class _Period> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,_ToDuration>::type)",
    "insertText": "ceil(const duration<_Rep, _Period>& __d)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (1 } ; return __t ; } template<class _ToDuration,class _Rep,class _Period> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,_ToDuration>::type)",
    "insertText": "round(const duration<_Rep, _Period>& __d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_ToDuration __upper = __lower + _ToDuration { 1 } ; auto __lowerDiff = __d - __lower ; auto __upperDiff = __upper - __d ;)",
    "insertText": "if(__lowerDiff < __upperDiff)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Rep,class _Period> class _LIBCPP_TEMPLATE_VIS duration {)",
    "insertText": "static_assert(!__is_duration<_Rep>::value, \"A duration representation can not be a duration\")"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (template<class _R1,class _R2> struct __no_overflow { private : const intmax_t __gcd_n1_n2 = __static_gcd<_R1::num,_R2::num>::value ; const intmax_t __gcd_d1_d2 = __static_gcd<_R1::den,_R2::den>::value ; const intmax_t __n1 = _R1::num / __gcd_n1_n2 ; const intmax_t __d1 = _R1::den / __gcd_d1_d2 ; const intmax_t __n2 = _R2::num / __gcd_n1_n2 ; const intmax_t __d2 = _R2::den / __gcd_d1_d2 ; const intmax_t)",
    "insertText": "max((intmax_t(1) << (sizeof(intmax_t) * CHAR_BIT - 1)) + 1)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (template<intmax_t _Xp,intmax_t _Yp,bool __overflow> struct __mul { const intmax_t value = _Xp* _Yp ; } ; template<intmax_t _Xp,intmax_t _Yp> struct __mul<_Xp,_Yp,true> { const intmax_t value = 1 ; } ; public : const bool)",
    "insertText": "value(__n1 <= max / __d2) && (__n2 <= max / __d1)"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (typedef ratio<__mul<__n1,__d2,! value>::value,__mul<__n2,__d1,! value>::value> type ; } ; public : typedef _Rep rep ; typedef _Period::type period ; private : rep __rep_ ; public : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR # ifndef _LIBCPP_CXX03_LANG)",
    "insertText": "duration()"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Rep2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "duration(const _Rep2& __r, typename enable_if < is_convertible<const _Rep2&, rep>::value && (treat_as_floating_point<rep>::value || !treat_as_floating_point<_Rep2>::value) >::type* = nullptr) : __rep_(__r)"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep2,class _Period2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "duration(const duration<_Rep2, _Period2>& __d, typename enable_if < __no_overflow<_Period2, period>::value && ( treat_as_floating_point<rep>::value || (__no_overflow<_Period2, period>::type::den == 1 && !treat_as_floating_point<_Rep2>::value)) >::type* = nullptr) : __rep_(chrono::duration_cast<duration>(__d).count())"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR rep)",
    "insertText": "count()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR common_type<duration>::type)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __rep_ ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration&)",
    "insertText": "operator(const duration& __d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__rep_* = __rhs ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration&)",
    "insertText": "operator(const rep& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__rep_ % = __rhs ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 duration&)",
    "insertText": "operator(const duration& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef duration<long long,nano> nanoseconds ; typedef duration<long long,micro> microseconds ; typedef duration<long long,milli> milliseconds ; typedef duration<long long> seconds ; typedef duration<long,ratio<6 0>> minutes ; typedef duration<long,ratio<3 6 0 0>> hours ; # if _LIBCPP_STD_VER> 1 7 typedef duration<int,ratio_multiply<ratio<2 4>,hours::period>> days ; typedef duration<int,ratio_multiply<ratio<7>,days::period>> weeks ; typedef duration<int,ratio_multiply<ratio<1 4 6 0 9 7,4 0 0>,days::period>> years ; typedef duration<int,ratio_divide<years::period,ratio<1 2>>> months ; # endif template<class _LhsDuration,class _RhsDuration> struct __duration_eq { _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator()(const _LhsDuration& __lhs, const _RhsDuration& __rhs)"
  },
  {
    "label": "_Ct()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_LhsDuration,_RhsDuration>::type _Ct ; return)",
    "insertText": "_Ct(__lhs).count() == _Ct(__rhs).count()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _LhsDuration> struct __duration_eq<_LhsDuration,_LhsDuration> { _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator()(const _LhsDuration& __lhs, const _LhsDuration& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Rep1,class _Period1,class _Rep2,class _Period2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator(const duration<_Rep1, _Period1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"
  },
  {
    "label": "_Ct()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_LhsDuration,_RhsDuration>::type _Ct ; return)",
    "insertText": "_Ct(__lhs).count() < _Ct(__rhs).count()"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<duration<_Rep1,_Period1>,duration<_Rep2,_Period2>>::type _Cd ; return)",
    "insertText": "_Cd(_Cd(__lhs).count() + _Cd(__rhs).count())"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<duration<_Rep1,_Period1>,duration<_Rep2,_Period2>>::type _Cd ; return)",
    "insertText": "_Cd(_Cd(__lhs).count() - _Cd(__rhs).count())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep1,class _Period,class _Rep2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<is_convertible<_Rep2,common_type<_Rep1,_Rep2>::type>::value,duration<common_type<_Rep1,_Rep2>::type,_Period>>::type)",
    "insertText": "operator(const duration<_Rep1, _Period>& __d, const _Rep2& __s)"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_Rep1,_Rep2>::type _Cr ; typedef duration<_Cr,_Period> _Cd ; return)",
    "insertText": "_Cd(_Cd(__d).count() * static_cast<_Cr>(__s))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep1,class _Period,class _Rep2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<is_convertible<_Rep1,common_type<_Rep1,_Rep2>::type>::value,duration<common_type<_Rep1,_Rep2>::type,_Period>>::type)",
    "insertText": "operator(const _Rep1& __s, const duration<_Rep2, _Period>& __d)"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_Rep1,_Rep2>::type _Cr ; typedef duration<_Cr,_Period> _Cd ; return)",
    "insertText": "_Cd(_Cd(__d).count() / static_cast<_Cr>(__s))"
  },
  {
    "label": "_Ct()",
    "kind": "Method",
    "detail": "Function (typedef common_type<duration<_Rep1,_Period1>,duration<_Rep2,_Period2>>::type _Ct ; return)",
    "insertText": "_Ct(__lhs).count() / _Ct(__rhs).count()"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_Rep1,_Rep2>::type _Cr ; typedef duration<_Cr,_Period> _Cd ; return)",
    "insertText": "_Cd(_Cd(__d).count() % static_cast<_Cr>(__s))"
  },
  {
    "label": "_Cd()",
    "kind": "Method",
    "detail": "Function (typedef common_type<_Rep1,_Rep2>::type _Cr ; typedef common_type<duration<_Rep1,_Period1>,duration<_Rep2,_Period2>>::type _Cd ; return)",
    "insertText": "_Cd(static_cast<_Cr>(_Cd(__lhs).count()) % static_cast<_Cr>(_Cd(__rhs).count()))"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (} } # if _LIBCPP_STD_VER> 1 1 namespace literals { namespace chrono_literals { chrono::hours operator \" \")",
    "insertText": "h(unsigned long long __h)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double,ratio<3 6 0 0,1>> operator \" \")",
    "insertText": "h(long double __h)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} chrono::minutes operator \" \")",
    "insertText": "min(unsigned long long __m)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double,ratio<6 0,1>> operator \" \")",
    "insertText": "min(long double __m)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (} chrono::seconds operator \" \")",
    "insertText": "s(unsigned long long __s)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double> operator \" \")",
    "insertText": "s(long double __s)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (} chrono::milliseconds operator \" \")",
    "insertText": "ms(unsigned long long __ms)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double,milli> operator \" \")",
    "insertText": "ms(long double __ms)"
  },
  {
    "label": "us()",
    "kind": "Method",
    "detail": "Function (} chrono::microseconds operator \" \")",
    "insertText": "us(unsigned long long __us)"
  },
  {
    "label": "us()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double,micro> operator \" \")",
    "insertText": "us(long double __us)"
  },
  {
    "label": "ns()",
    "kind": "Method",
    "detail": "Function (} chrono::nanoseconds operator \" \")",
    "insertText": "ns(unsigned long long __ns)"
  },
  {
    "label": "ns()",
    "kind": "Method",
    "detail": "Function (} chrono::duration<long double,nano> operator \" \")",
    "insertText": "ns(long double __ns)"
  }
]