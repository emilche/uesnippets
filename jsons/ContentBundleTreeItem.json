[
  {
    "label": "FContentBundleEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleEditor"
  },
  {
    "label": "FContentBundleMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleMode"
  },
  {
    "label": "FContentBundleTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentBundleTreeItem"
  },
  {
    "label": "FInitializationValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializationValues"
  },
  {
    "label": "FInitializationValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" SceneOutlinerFwd . h \" # include \" ISceneOutlinerTreeItem . h \" class FContentBundleEditor ; class FContentBundleMode ; struct FContentBundleTreeItem : ISceneOutlinerTreeItem { public : struct FInitializationValues {)",
    "insertText": "FInitializationValues(const TWeakPtr<FContentBundleEditor>& InContentBundleEditor, const FContentBundleMode& InMode) :ContentBundleEditor(InContentBundleEditor), Mode(InMode)"
  },
  {
    "label": "FContentBundleTreeItem()",
    "kind": "Method",
    "detail": "Function (} const TWeakPtr<FContentBundleEditor> ContentBundleEditor ; const FContentBundleMode& Mode ; } ;)",
    "insertText": "FContentBundleTreeItem(const FInitializationValues& InitializationValues)"
  },
  {
    "label": "GetContentBundleEditor()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FContentBundleEditor>)",
    "insertText": "GetContentBundleEditor()"
  },
  {
    "label": "GetContentBundleEditorPin()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FContentBundleEditor>)",
    "insertText": "GetContentBundleEditorPin()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "GenerateLabelWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateLabelWidget(ISceneOutliner& Outliner, const STableRow<FSceneOutlinerTreeItemPtr>& InRow)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (const FSceneOutlinerTreeItemType Type ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FFilterPredicate, const FContentBundleEditor*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FInteractivePredicate, const FContentBundleEditor*)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Filter(FFilterPredicate Pred)"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInteractiveState(FInteractivePredicate Pred)"
  },
  {
    "label": "GetItemColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetItemColor()"
  }
]