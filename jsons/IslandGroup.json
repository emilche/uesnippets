[
  {
    "label": "FPBDIslandConstraintGroupSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandConstraintGroupSolver"
  },
  {
    "label": "moved",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "moved"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Chaos / Evolution / ConstraintGroupSolver . h \" # include \" Chaos / Island / IslandManagerFwd . h \" namespace Chaos { namespace Private { class FPBDIslandConstraintGroupSolver : public FPBDConstraintGroupSolver { public :)",
    "insertText": "UE_NONCOPYABLE(FPBDIslandConstraintGroupSolver)"
  },
  {
    "label": "FPBDIslandConstraintGroupSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDIslandConstraintGroupSolver(FPBDIslandManager& InIslandManager)"
  },
  {
    "label": "AddIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIsland(FPBDIsland* Island)"
  },
  {
    "label": "SetConstraintSolverImpl()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetConstraintSolverImpl(const int32 ContainerId)"
  },
  {
    "label": "ResetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImpl()"
  },
  {
    "label": "AddConstraintsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintsImpl()"
  },
  {
    "label": "GatherBodiesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherBodiesImpl(const FReal Dt, const int32 BeginBodyIndex, const int32 EndBodyIndex)"
  }
]