[
  {
    "label": "PeerConnectionClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionClient"
  },
  {
    "label": "PeerConnectionClient()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_DATA_CHANNEL_BENCHMARK_PEER_CONNECTION_CLIENT_H_ # define RTC_TOOLS_DATA_CHANNEL_BENCHMARK_PEER_CONNECTION_CLIENT_H_ # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" api / jsep . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / set_local_description_observer_interface . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / thread . h \" # include \" rtc_tools / data_channel_benchmark / signaling_interface . h \" namespace webrtc { class PeerConnectionClient : public webrtc::PeerConnectionObserver { public :)",
    "insertText": "PeerConnectionClient(webrtc::PeerConnectionFactoryInterface* factory, webrtc::SignalingInterface* signaling)"
  },
  {
    "label": "PeerConnectionClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionClient()"
  },
  {
    "label": "PeerConnectionClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerConnectionClient(const PeerConnectionClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PeerConnectionClient&)",
    "insertText": "operator(const PeerConnectionClient&)"
  },
  {
    "label": "StartPeerConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPeerConnection()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "peerConnection()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::PeerConnectionInterface>)",
    "insertText": "peerConnection()"
  },
  {
    "label": "dataChannels()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<webrtc::DataChannelInterface>>&)",
    "insertText": "dataChannels()"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> candidate)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteDescription(std::unique_ptr<webrtc::SessionDescriptionInterface> desc)"
  },
  {
    "label": "InitializePeerConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializePeerConnection(webrtc::PeerConnectionFactoryInterface* factory)"
  },
  {
    "label": "DeletePeerConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePeerConnection()"
  },
  {
    "label": "OnSignalingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSignalingChange(webrtc::PeerConnectionInterface::SignalingState new_state)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_INFO)"
  },
  {
    "label": "OnDataChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDataChannel(rtc::scoped_refptr<webrtc::DataChannelInterface> channel)"
  },
  {
    "label": "OnNegotiationNeededEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNegotiationNeededEvent(uint32_t event_id)"
  },
  {
    "label": "OnIceConnectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "OnIceGatheringChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceGatheringChange(webrtc::PeerConnectionInterface::IceGatheringState new_state)"
  },
  {
    "label": "OnIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidate(const webrtc::IceCandidateInterface* candidate)"
  },
  {
    "label": "OnIceConnectionReceivingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceConnectionReceivingChange(bool receiving)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<webrtc::PeerConnectionInterface> peer_connection_ ; std::function<)",
    "insertText": "void(rtc::scoped_refptr<webrtc::DataChannelInterface>)"
  }
]