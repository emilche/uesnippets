[
  {
    "label": "ResizeUninitializedTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ResizeUninitializedTraits"
  },
  {
    "label": "AppendUninitializedTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AppendUninitializedTraits"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_RESIZE_UNINITIALIZED_H_ # define ABSL_STRINGS_INTERNAL_RESIZE_UNINITIALIZED_H_ # include<algorithm> # include<string> # include<type_traits> # include<utility> # include \" absl / base / port . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { template<string_type,= void> struct ResizeUninitializedTraits { using HasMember = std::false_type ; void)",
    "insertText": "Resize(string_type* s, size_t new_size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "resize(new_size)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<string_type> struct ResizeUninitializedTraits<string_type,absl::void_t<)",
    "insertText": "decltype(std::declval<string_type&>() .__resize_default_init(237))"
  },
  {
    "label": "__resize_default_init()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "__resize_default_init(new_size)"
  },
  {
    "label": "STLStringSupportsNontrashingResize()",
    "kind": "Method",
    "detail": "Function (} } ; template<string_type> bool)",
    "insertText": "STLStringSupportsNontrashingResize(string_type*)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (ResizeUninitializedTraits<string_type)",
    "insertText": "Resize(s, new_size)"
  },
  {
    "label": "STLStringReserveAmortized()",
    "kind": "Method",
    "detail": "Function (} template<string_type> void)",
    "insertText": "STLStringReserveAmortized(string_type* s, size_t new_size)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (const size_t cap = s ->)",
    "insertText": "capacity()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "reserve((std::max)(new_size, 2 * cap))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<string_type,= void> struct AppendUninitializedTraits { void)",
    "insertText": "Append(string_type* s, size_t n)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "append(n, typename string_type::value_type())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<string_type> struct AppendUninitializedTraits<string_type,absl::void_t<)",
    "insertText": "decltype(std::declval<string_type&>() .__append_default_init(237))"
  },
  {
    "label": "__append_default_init()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "__append_default_init(n)"
  },
  {
    "label": "STLStringResizeUninitializedAmortized()",
    "kind": "Method",
    "detail": "Function (} } ; template<string_type> void)",
    "insertText": "STLStringResizeUninitializedAmortized(string_type* s, size_t new_size)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t size = s ->)",
    "insertText": "size()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (AppendUninitializedTraits<string_type)",
    "insertText": "Append(s, new_size - size)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} else { s ->)",
    "insertText": "erase(new_size)"
  }
]