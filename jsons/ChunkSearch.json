[
  {
    "label": "FChunkSearcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkSearcher"
  },
  {
    "label": "FChunkNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkNode"
  },
  {
    "label": "FFileNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileNode"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / BlockRange . h \" # include \" Core / BlockStructure . h \" # include \" CoreMinimal . h \" # include \" Containers / List . h \" # include \" BuildPatchManifest . h \" # include \" BuildPatchSettings . h \" namespace BuildPatchServices { namespace ListHelpers { template<ElementType> void)",
    "insertText": "Copy(const TDoubleLinkedList<ElementType>& CopyFrom, TDoubleLinkedList<ElementType>& CopyTo)"
  },
  {
    "label": "AddTail()",
    "kind": "Method",
    "detail": "Function (CopyTo .)",
    "insertText": "AddTail(Elem)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (} } template<ListType,NodeType,ElementType> void)",
    "insertText": "InsertBefore(const ElementType& NewNode, ListType& List, NodeType* Node)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (List .)",
    "insertText": "InsertNode(NewNode, Node)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} template<ListType,NodeType,ElementType> void)",
    "insertText": "InsertAfter(const ElementType& NewNode, ListType& List, NodeType* Node)"
  },
  {
    "label": "GetNextNode()",
    "kind": "Method",
    "detail": "Function (NodeType* NextNode = Node ->)",
    "insertText": "GetNextNode()"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (List .)",
    "insertText": "InsertNode(NewNode, NextNode)"
  },
  {
    "label": "AddTail()",
    "kind": "Method",
    "detail": "Function (} else { List .)",
    "insertText": "AddTail(NewNode)"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (} } TArray<FString>)",
    "insertText": "GetFileList(const FBuildPatchAppManifest& Manifest)"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (TArray<FString> BuildFiles ; Manifest .)",
    "insertText": "GetFileList(BuildFiles)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(*Manifest.GetFileManifest(ManifestFile))"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEach(const FFileManifestList& FileManifestList, const TFunction<void(const FFileManifest&)>& Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(FileManifest)"
  },
  {
    "label": "FChunkNode()",
    "kind": "Method",
    "detail": "Function (} } } class FChunkSearcher { public : struct FChunkNode { public :)",
    "insertText": "FChunkNode(const FChunkPart& InChunkPart, const FBlockRange& InBuildRange) : BuildRange(InBuildRange) , ChunkPart(InChunkPart)"
  },
  {
    "label": "FChunkNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChunkNode(const FChunkNode& CopyFrom) : BuildRange(CopyFrom.BuildRange) , ChunkPart(CopyFrom.ChunkPart)"
  },
  {
    "label": "FFileNode()",
    "kind": "Method",
    "detail": "Function (} public : FBlockRange BuildRange ; FChunkPart ChunkPart ; } ; typedef TDoubleLinkedList<FChunkNode> FChunkDList ; typedef FChunkDList::TDoubleLinkedListNode FChunkDListNode ; struct FFileNode { public :)",
    "insertText": "FFileNode(const FFileManifest *const InManifest, const FBlockRange& InBuildRange) : Manifest(InManifest) , BuildRange(InBuildRange)"
  },
  {
    "label": "FFileNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileNode(const FFileNode& CopyFrom) : Manifest(CopyFrom.Manifest) , BuildRange(CopyFrom.BuildRange)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(CopyFrom.ChunkParts, ChunkParts)"
  },
  {
    "label": "FChunkSearcher()",
    "kind": "Method",
    "detail": "Function (} public : const FFileManifest* const Manifest ; const FBlockRange BuildRange ; FChunkDList ChunkParts ; } ; typedef TDoubleLinkedList<FFileNode> FFileDList ; typedef FFileDList::TDoubleLinkedListNode FFileDListNode ; template<InitType>)",
    "insertText": "FChunkSearcher(const InitType& InitClass)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (uint64 LocationCount = 0 ;)",
    "insertText": "ForEach(InitClass, [&](const FFileManifest& FileManifest) { FFileNode FileNode(&FileManifest, FBlockRange::FromFirstAndSize(LocationCount, FileManifest.FileSize)); for (const FChunkPart& ChunkPart : FileNode.Manifest->ChunkParts) { FChunkNode ChunkNode(ChunkPart, FBlockRange::FromFirstAndSize(LocationCount, ChunkPart.Size)); FileNode.ChunkParts.AddTail(ChunkNode); LocationCount += ChunkPart.Size; } FileLinkedList.AddTail(FileNode); })"
  },
  {
    "label": "SetStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStart()"
  },
  {
    "label": "ForEachOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachOverlap(const FBlockStructure& BlockStructure, const TFunction<void(const FBlockRange&, FFileDListNode*, FChunkDListNode*)>& Handler)"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (const FBlockEntry* Block = BlockStructure .)",
    "insertText": "GetHead()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (Block = Block ->)",
    "insertText": "GetNext()"
  },
  {
    "label": "ForEachOverlap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachOverlap(const FBlockRange& BlockRange, const TFunction<void(const FBlockRange&, FFileDListNode*, FChunkDListNode*)>& Handler)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FFileDListNode* StartFile = FindFirst(&FileLinkedList, CurrFile, BlockRange); CurrFile != StartFile;)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (CurrFile = StartFile ; CurrChunk = CurrFile ->)",
    "insertText": "GetValue().ChunkParts.GetHead()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(CurrFile->GetValue().BuildRange.Overlaps(BlockRange))"
  },
  {
    "label": "FindFirst()",
    "kind": "Method",
    "detail": "Function (CurrChunk =)",
    "insertText": "FindFirst(&CurrFile->GetValue().ChunkParts, CurrChunk, BlockRange)"
  },
  {
    "label": "FromIntersection()",
    "kind": "Method",
    "detail": "Function (const FBlockRange OverlapRange =)",
    "insertText": "FromIntersection(CurrChunk->GetValue().BuildRange, BlockRange)"
  },
  {
    "label": "Handler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Handler(OverlapRange, CurrFile, CurrChunk)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CurrChunk = NextChunk ;)",
    "insertText": "while(!CurrChunk && CurrFile)"
  },
  {
    "label": "BuildNewFileManifestList()",
    "kind": "Method",
    "detail": "Function (} FFileManifestList)",
    "insertText": "BuildNewFileManifestList()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (FFileManifestList NewFileManifestList ; NewFileManifestList . FileList .)",
    "insertText": "Reserve(FileLinkedList.Num())"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (FFileManifest& FileManifest = NewFileManifestList . FileList .)",
    "insertText": "Add_GetRef(*FileNode.Manifest)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FileManifest . ChunkParts .)",
    "insertText": "Empty(FileNode.ChunkParts.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FileManifest . ChunkParts .)",
    "insertText": "Add(ChunkNode.ChunkPart)"
  },
  {
    "label": "FindFirst()",
    "kind": "Method",
    "detail": "Function (} template<ListType,ListNodeType> ListNodeType*)",
    "insertText": "FindFirst(ListType* List, ListNodeType* Current, const FBlockRange& BlockRange)"
  },
  {
    "label": "GetPrevNode()",
    "kind": "Method",
    "detail": "Function (Current = Current ->)",
    "insertText": "GetPrevNode()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "while(Current && !Current->GetValue().BuildRange.Overlaps(BlockRange))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(Current && (Current->GetValue().BuildRange.Overlaps(BlockRange) || Current->GetValue().BuildRange.GetSize() == 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Current)"
  }
]