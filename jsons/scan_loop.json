[
  {
    "label": "ScanLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScanLoop"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_SCAN_LOOP_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_SCAN_LOOP_H_ # include<cstddef> # include<cstdint> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / starscan / starscan_fwd . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(ARCH_CPU_X86_64) #include <immintrin.h> #include <smmintrin.h> #include <avxintrin.h> #include <avx2intrin.h> #endif #if defined(PA_STARSCAN_NEON_SUPPORTED)"
  },
  {
    "label": "ScanLoop()",
    "kind": "Method",
    "detail": "Function (template<Derived> class ScanLoop { public :)",
    "insertText": "ScanLoop(SimdSupport simd_type) : simd_type_(simd_type)"
  },
  {
    "label": "ScanLoop()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScanLoop(const ScanLoop&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScanLoop&)",
    "insertText": "operator(const ScanLoop&)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(uintptr_t begin, uintptr_t end)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (private : const Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ARCH_CPU_X86_64) __attribute__((target(\"avx2\"))) void RunAVX2(uintptr_t, uintptr_t)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__attribute__((target(\"sse4.1\"))) void RunSSE4(uintptr_t, uintptr_t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(PA_STARSCAN_NEON_SUPPORTED) void RunNEON(uintptr_t, uintptr_t)"
  },
  {
    "label": "RunUnvectorized()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RunUnvectorized(uintptr_t, uintptr_t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ARCH_CPU_X86_64) if (simd_type_ == SimdSupport::kAVX2) return RunAVX2(begin, end)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(PA_STARSCAN_NEON_SUPPORTED) if (simd_type_ == SimdSupport::kNEON) return RunNEON(begin, end)"
  },
  {
    "label": "RunUnvectorized()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "RunUnvectorized(begin, end)"
  },
  {
    "label": "RunUnvectorized()",
    "kind": "Method",
    "detail": "Function (} template<Derived> void ScanLoop<Derived)",
    "insertText": "RunUnvectorized(uintptr_t begin, uintptr_t end)"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_SCAN_DCHECK(!(begin % sizeof(uintptr_t)))"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_SCAN_DCHECK(!(end % sizeof(uintptr_t)))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) const uintptr_t mask = Derived::RegularPoolMask()"
  },
  {
    "label": "RegularPoolBase()",
    "kind": "Method",
    "detail": "Function (const uintptr_t base =)",
    "insertText": "RegularPoolBase()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(; begin < end; begin += sizeof(uintptr_t))"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (const uintptr_t maybe_ptr =* reinterpret_cast<)",
    "insertText": "uintptr_t(begin)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) if (PA_LIKELY((maybe_ptr & mask) != base))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(!maybe_ptr)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "derived().CheckPointer(maybe_ptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if)",
    "insertText": "defined(ARCH_CPU_X86_64) template <typename Derived> __attribute__((target(\"avx2\"))) void ScanLoop<Derived>::RunAVX2(uintptr_t begin, uintptr_t end)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t kAlignmentRequirement = 3 2 ; size_t kWordsInVector = 4 ; size_t kBytesInVector = kWordsInVector*)",
    "insertText": "sizeof(uintptr_t)"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_SCAN_DCHECK(!(begin % kAlignmentRequirement))"
  },
  {
    "label": "_mm256_set1_epi64x()",
    "kind": "Method",
    "detail": "Function (const __m256i vbase =)",
    "insertText": "_mm256_set1_epi64x(derived().RegularPoolBase())"
  },
  {
    "label": "_mm256_set1_epi64x()",
    "kind": "Method",
    "detail": "Function (const __m256i regular_pool_mask =)",
    "insertText": "_mm256_set1_epi64x(derived().RegularPoolMask() & kPtrUntagMask)"
  },
  {
    "label": "_mm256_load_si256()",
    "kind": "Method",
    "detail": "Function (const __m256i maybe_ptrs =)",
    "insertText": "_mm256_load_si256(reinterpret_cast<__m256i*>(begin))"
  },
  {
    "label": "_mm256_and_si256()",
    "kind": "Method",
    "detail": "Function (const __m256i vand =)",
    "insertText": "_mm256_and_si256(maybe_ptrs, regular_pool_mask)"
  },
  {
    "label": "_mm256_cmpeq_epi64()",
    "kind": "Method",
    "detail": "Function (const __m256i vcmp =)",
    "insertText": "_mm256_cmpeq_epi64(vand, vbase)"
  },
  {
    "label": "_mm256_movemask_pd()",
    "kind": "Method",
    "detail": "Function (const int mask =)",
    "insertText": "_mm256_movemask_pd(_mm256_castsi256_pd(vcmp))"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} template<Derived>)",
    "insertText": "__attribute__((target(\"sse4.1\"))) void ScanLoop<Derived>::RunSSE4( uintptr_t begin, uintptr_t end)"
  },
  {
    "label": "_mm_set1_epi64x()",
    "kind": "Method",
    "detail": "Function (const __m128i vbase =)",
    "insertText": "_mm_set1_epi64x(derived().RegularPoolBase())"
  },
  {
    "label": "_mm_set1_epi64x()",
    "kind": "Method",
    "detail": "Function (const __m128i regular_pool_mask =)",
    "insertText": "_mm_set1_epi64x(derived().RegularPoolMask() & kPtrUntagMask)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i maybe_ptrs =)",
    "insertText": "_mm_loadu_si128(reinterpret_cast<__m128i*>(begin))"
  },
  {
    "label": "_mm_and_si128()",
    "kind": "Method",
    "detail": "Function (const __m128i vand =)",
    "insertText": "_mm_and_si128(maybe_ptrs, regular_pool_mask)"
  },
  {
    "label": "_mm_cmpeq_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i vcmp =)",
    "insertText": "_mm_cmpeq_epi64(vand, vbase)"
  },
  {
    "label": "_mm_movemask_pd()",
    "kind": "Method",
    "detail": "Function (const int mask =)",
    "insertText": "_mm_movemask_pd(_mm_castsi128_pd(vcmp))"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived().CheckPointer(_mm_cvtsi128_si64(maybe_ptrs))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mask & 0b10)"
  },
  {
    "label": "kSecondWordMask()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "kSecondWordMask(3 << 2) | (2 << 0)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i shuffled =)",
    "insertText": "_mm_shuffle_epi32(maybe_ptrs, kSecondWordMask)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived().CheckPointer(_mm_cvtsi128_si64(shuffled))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if)",
    "insertText": "defined(PA_STARSCAN_NEON_SUPPORTED) template <typename Derived> void ScanLoop<Derived>::RunNEON(uintptr_t begin, uintptr_t end)"
  },
  {
    "label": "vdupq_n_u64()",
    "kind": "Method",
    "detail": "Function (const uint64x2_t vbase =)",
    "insertText": "vdupq_n_u64(derived().RegularPoolBase())"
  },
  {
    "label": "vdupq_n_u64()",
    "kind": "Method",
    "detail": "Function (const uint64x2_t regular_pool_mask =)",
    "insertText": "vdupq_n_u64(derived().RegularPoolMask() & kPtrUntagMask)"
  },
  {
    "label": "vld1q_u64()",
    "kind": "Method",
    "detail": "Function (const uint64x2_t maybe_ptrs =)",
    "insertText": "vld1q_u64(reinterpret_cast<uint64_t*>(begin))"
  },
  {
    "label": "vandq_u64()",
    "kind": "Method",
    "detail": "Function (const uint64x2_t vand =)",
    "insertText": "vandq_u64(maybe_ptrs, regular_pool_mask)"
  },
  {
    "label": "vceqq_u64()",
    "kind": "Method",
    "detail": "Function (const uint64x2_t vcmp =)",
    "insertText": "vceqq_u64(vand, vbase)"
  },
  {
    "label": "vmaxvq_u32()",
    "kind": "Method",
    "detail": "Function (const uint32_t max =)",
    "insertText": "vmaxvq_u32(vreinterpretq_u32_u64(vcmp))"
  }
]