[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataTable"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SCSVImportOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCSVImportOptions"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Curves / RealCurve . h \" # include \" Delegates / Delegate . h \" # include \" Factories / CSVImportFactory . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class SWidget ; class SWindow ; class UDataTable ; class UScriptStruct ; enum class ECSVImportOptionDlgResponse : uint8 { Import,ImportAll,Cancel } ; class SCSVImportOptions : public SCompoundWidget { private : typedef TSharedPtr<ERichCurveInterpMode> CurveInterpModePtr ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCSVImportOptions) : _WidgetWindow() , _FullPath() , _TempImportDataTable()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, WidgetWindow) SLATE_ARGUMENT(FText, FullPath) SLATE_ARGUMENT(UDataTable*, TempImportDataTable) SLATE_END_ARGS() SCSVImportOptions() : UserDlgResponse(ECSVImportOptionDlgResponse::Cancel) , SelectedImportType(ECSVImportType::ECSV_DataTable) , SelectedStruct(nullptr) , TempImportDataTable(nullptr)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImport()"
  },
  {
    "label": "ShouldImportAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImportAll()"
  },
  {
    "label": "GetSelectedRowStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct*)",
    "insertText": "GetSelectedRowStruct()"
  },
  {
    "label": "GetSelectedImportType()",
    "kind": "Method",
    "detail": "Function (ECSVImportType)",
    "insertText": "GetSelectedImportType()"
  },
  {
    "label": "GetSelectedCurveIterpMode()",
    "kind": "Method",
    "detail": "Function (ERichCurveInterpMode)",
    "insertText": "GetSelectedCurveIterpMode()"
  },
  {
    "label": "GetTableRowOptionVis()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTableRowOptionVis()"
  },
  {
    "label": "GetCurveTypeVis()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCurveTypeVis()"
  },
  {
    "label": "GetDetailsPanelVis()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDetailsPanelVis()"
  },
  {
    "label": "GetImportTypeText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetImportTypeText(TSharedPtr<ECSVImportType> Type)"
  },
  {
    "label": "MakeImportTypeItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeImportTypeItemWidget(TSharedPtr<ECSVImportType> Type)"
  },
  {
    "label": "OnImportTypeSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImportTypeSelected(TSharedPtr<ECSVImportType> Selection, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "OnStructSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStructSelected(UScriptStruct* NewStruct)"
  },
  {
    "label": "GetCurveTypeText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurveTypeText(CurveInterpModePtr InterpMode)"
  },
  {
    "label": "MakeCurveTypeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCurveTypeWidget(CurveInterpModePtr InterpMode)"
  },
  {
    "label": "OnImport()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnImport()"
  },
  {
    "label": "CanImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImport()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCancel()"
  },
  {
    "label": "GetSelectedItemText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedItemText()"
  },
  {
    "label": "GetSelectedCurveTypeText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedCurveTypeText()"
  },
  {
    "label": "HandleImport()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "HandleImport()"
  },
  {
    "label": "OnImportAll()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnImportAll()"
  }
]