[
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_UCRT_SYMBOLS_WIN_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_UCRT_SYMBOLS_WIN_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_UCRT_SYMBOLS_WIN_H_ # include<malloc . h> # include<windows . h> # include \" base / allocator / partition_allocator / shim / allocator_shim_internals . h \" SHIM_ALWAYS_EXPORT void* operator)",
    "insertText": "new(size_t size, const std::nothrow_t&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} \" C \" {)",
    "insertText": "void(*malloc_unchecked)(size_t)"
  },
  {
    "label": "_set_new_mode()",
    "kind": "Method",
    "detail": "Function (namespace { int win_new_mode = 0 ; } int)",
    "insertText": "_set_new_mode(int flag)"
  },
  {
    "label": "SetCallNewHandlerOnMallocFailure()",
    "kind": "Method",
    "detail": "Function (allocator_shim::g_is_win_shim_layer_initialized = true ; int old_mode = win_new_mode ; win_new_mode = flag ;)",
    "insertText": "SetCallNewHandlerOnMallocFailure(win_new_mode != 0)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "free(void* ptr)"
  },
  {
    "label": "ShimFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFree(ptr, nullptr)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* realloc(void* ptr, size_t size)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* calloc(size_t n, size_t size)"
  },
  {
    "label": "_msize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "_msize(void* memblock)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_malloc(size_t size, size_t alignment)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_realloc(void* address, size_t size, size_t alignment)"
  },
  {
    "label": "_aligned_free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_aligned_free(void* address)"
  },
  {
    "label": "ShimAlignedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimAlignedFree(address, nullptr)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _recalloc_base(void* block, size_t count, size_t size)"
  },
  {
    "label": "old_block_size()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "old_block_size(block != nullptr) ? _msize(block)"
  },
  {
    "label": "ValueOrDie()",
    "kind": "Method",
    "detail": "Function (base::CheckedNumeric<size_t> new_block_size_checked = count ; new_block_size_checked* = size ; const size_t new_block_size = new_block_size_checked .)",
    "insertText": "ValueOrDie()"
  },
  {
    "label": "realloc()",
    "kind": "Method",
    "detail": "Function (void* const new_block =)",
    "insertText": "realloc(block, new_block_size)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(static_cast<char*>(new_block) + old_block_size, 0, new_block_size - old_block_size)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (} return new_block ; })",
    "insertText": "__declspec(restrict) void* _malloc_base(size_t size)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _calloc_base(size_t n, size_t size)"
  },
  {
    "label": "_free_base()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_free_base(void* block)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(block)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _recalloc(void* block, size_t count, size_t size)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_recalloc(void* address, size_t num, size_t size, size_t alignment)"
  },
  {
    "label": "__builtin_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__builtin_unreachable()"
  },
  {
    "label": "_aligned_msize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "_aligned_msize(void* address, size_t alignment, size_t offset)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_offset_malloc(size_t size, size_t alignment, size_t offset)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_offset_realloc(void* address, size_t size, size_t alignment, size_t offset)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__declspec(restrict) void* _aligned_offset_recalloc(void* address, size_t num, size_t size, size_t alignment, size_t offset)"
  }
]