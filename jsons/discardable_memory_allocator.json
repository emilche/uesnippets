[
  {
    "label": "DiscardableMemory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiscardableMemory"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DiscardableMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_DISCARDABLE_MEMORY_ALLOCATOR_H_ # define BASE_MEMORY_DISCARDABLE_MEMORY_ALLOCATOR_H_ # include<stddef . h> # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / discardable_memory . h \" namespace base { class DiscardableMemory ; class BASE_EXPORT DiscardableMemoryAllocator { public :)",
    "insertText": "DiscardableMemoryAllocator()"
  },
  {
    "label": "DiscardableMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardableMemoryAllocator(const DiscardableMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DiscardableMemoryAllocator&)",
    "insertText": "operator(const DiscardableMemoryAllocator&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (DiscardableMemoryAllocator*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstance(DiscardableMemoryAllocator* allocator)"
  },
  {
    "label": "AllocateLockedDiscardableMemory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DiscardableMemory>)",
    "insertText": "AllocateLockedDiscardableMemory(size_t size)"
  },
  {
    "label": "AllocateLockedDiscardableMemoryWithRetryOrDie()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DiscardableMemory>)",
    "insertText": "AllocateLockedDiscardableMemoryWithRetryOrDie(size_t size, OnceClosure on_no_memory)"
  },
  {
    "label": "GetBytesAllocated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBytesAllocated()"
  },
  {
    "label": "ReleaseFreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFreeMemory()"
  }
]