[
  {
    "label": "SGraphPinNumSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPinNumSlider"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Misc / DefaultValueHelper . h \" # include \" ScopedTransaction . h \" # include \" SGraphPin . h \" # include \" Editor . h \" # include \" NumericPropertyParams . h \" template<NumericType> class SGraphPinNumSlider : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinNumSlider) :_MinDesiredBoxWidth(18.0f) ,_ShouldShowDisabledWhenConnected(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(float, MinDesiredBoxWidth) SLATE_ARGUMENT(bool, ShouldShowDisabledWhenConnected) SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj, FProperty* InProperty)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (PinProperty = InProperty ; MinDesiredBoxWidth = InArgs . _MinDesiredBoxWidth ; bShouldShowDisabledWhenConnected = InArgs . _ShouldShowDisabledWhenConnected ;)",
    "insertText": "Construct(SGraphPin::FArguments(), InGraphPinObj)"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (const TNumericPropertyParams<NumericType>::FMetaDataGetter MetaDataGetter = TNumericPropertyParams<NumericType>::)",
    "insertText": "CreateLambda([&](const FName& Key) { return (PinProperty) ? PinProperty->GetMetaData(Key) : FString(); })"
  },
  {
    "label": "NumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (TNumericPropertyParams<NumericType>)",
    "insertText": "NumericPropertyParams(PinProperty, PinProperty ? MetaDataGetter : nullptr)"
  },
  {
    "label": "bAllowSpin()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bAllowSpin(PinProperty && PinProperty->GetBoolMetaData(\"NoSpinbox\"))"
  },
  {
    "label": "GetNumericValue()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue =)",
    "insertText": "GetNumericValue().GetValue()"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnValueChanged(NumericType NewValue)"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (SliderValue = NewValue ; GraphPinObj ->)",
    "insertText": "GetSchema()->TrySetDefaultValue(*GraphPinObj, *LexToSanitizedString(NewValue), false)"
  },
  {
    "label": "OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnValueCommitted(NumericType NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (const FScopedTransaction)",
    "insertText": "Transaction(NSLOCTEXT(\"GraphEditor\", \"ChangeNumberPinValue\", \"Change Number Pin Value\"))"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (GraphPinObj ->)",
    "insertText": "Modify()"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (GraphPinObj ->)",
    "insertText": "GetSchema()->TrySetDefaultValue(*GraphPinObj, *LexToSanitizedString(NewValue))"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue = NewValue ; } } void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (GEditor ->)",
    "insertText": "BeginTransaction(NSLOCTEXT(\"GraphEditor\", \"ChangeNumberPinValueSlider\", \"Change Number Pin Value slider\"))"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement(NumericType NewValue)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ; GEditor ->)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "GetNumericValue()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetNumericValue()"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (NumericType Num =)",
    "insertText": "NumericType()"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(Num, *GraphPinObj->GetDefaultAsString())"
  },
  {
    "label": "Schema()",
    "kind": "Method",
    "detail": "Function (const UEdGraphSchema*)",
    "insertText": "Schema(GraphPin && !GraphPin->IsPendingKill()) ? GraphPin->GetSchema()"
  }
]