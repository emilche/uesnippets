[
  {
    "label": "NearestNeighbors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NearestNeighbors"
  },
  {
    "label": "TilePolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TilePolicy"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "Morphology",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Morphology"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "NodeMaskOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeMaskOp"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "Adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Adapter"
  },
  {
    "label": "Adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Adapter"
  },
  {
    "label": "directly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "directly"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(TreeOrLeafManagerT& tree,\n    const int iterations = 1,\n    const NearestNeighbors nn = NN_FACE,\n    const TilePolicy mode = PRESERVE_TILES,\n    const bool threaded = true)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeActiveValues(TreeOrLeafManagerT& tree,\n    const int iterations = 1,\n    const NearestNeighbors nn = NN_FACE,\n    const TilePolicy mode = PRESERVE_TILES,\n    const bool threaded = true)"
  },
  {
    "label": "erodeVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeVoxels(const size_t iter,\n        const NearestNeighbors nn,\n        const bool prune = false)"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateVoxels(const size_t iter,\n        const NearestNeighbors nn,\n        const bool prune = false,\n        const bool preserveMaskLeafNodes = false)"
  },
  {
    "label": "dilate6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate6(const MaskType& mask)"
  },
  {
    "label": "dilate18()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate18(const MaskType& mask)"
  },
  {
    "label": "dilate26()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate26(const MaskType& mask)"
  },
  {
    "label": "erode6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erode6(MaskType& mask)"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scatterFacesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "scatterEdgesXY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scatterEdgesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "gatherFacesXY()",
    "kind": "Method",
    "detail": "Function (Word)",
    "insertText": "gatherFacesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "gatherEdgesXY()",
    "kind": "Method",
    "detail": "Function (Word)",
    "insertText": "gatherEdgesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<MaskTreeT>)",
    "insertText": "manager(mask)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Morphology<MaskTreeT>)",
    "insertText": "m(manager)"
  },
  {
    "label": "accessor()",
    "kind": "Method",
    "detail": "Function (AccessorType)",
    "insertText": "accessor(tree)"
  },
  {
    "label": "cache()",
    "kind": "Method",
    "detail": "Function (NodeMaskOp)",
    "insertText": "cache(accessor, nn)"
  },
  {
    "label": "accessor()",
    "kind": "Method",
    "detail": "Function (AccessorType)",
    "insertText": "accessor(tree)"
  },
  {
    "label": "cache()",
    "kind": "Method",
    "detail": "Function (NodeMaskOp)",
    "insertText": "cache(accessor, nn)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Morphology<TreeT>)",
    "insertText": "m(manager)"
  },
  {
    "label": "accessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeT>)",
    "insertText": "accessor(tree)"
  },
  {
    "label": "cache()",
    "kind": "Method",
    "detail": "Function (Morphology<TreeT>::NodeMaskOp)",
    "insertText": "cache(accessor, nn)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MaskTreeT>)",
    "insertText": "mask(new MaskTreeT)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeT>)",
    "insertText": "morph(treeOrLeafM)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeT>)",
    "insertText": "morph(treeOrLeafM)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (dilation)",
    "insertText": "assert(mode == PRESERVE_TILES)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<MaskT>)",
    "insertText": "morph(topology)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<MaskT>)",
    "insertText": "morph(topology)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeT>)",
    "insertText": "morph(treeOrLeafM)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(tree)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(manager)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(tree)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(manager)"
  }
]