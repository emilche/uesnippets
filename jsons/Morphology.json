[
  {
    "label": "NearestNeighbors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NearestNeighbors"
  },
  {
    "label": "TilePolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TilePolicy"
  },
  {
    "label": "Morphology",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Morphology"
  },
  {
    "label": "NodeMaskOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeMaskOp"
  },
  {
    "label": "Adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Adapter"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_MORPHOLOGY_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_MORPHOLOGY_HAS_BEEN_INCLUDED # include \" Activate . h \" # include \" Prune . h \" # include \" ValueTransformer . h \" # include \" openvdb / Types . h \" # include \" openvdb / Grid . h \" # include \" openvdb / tree / ValueAccessor . h \" # include \" openvdb / tree / LeafManager . h \" # include<tbb / task_scheduler_init . h> # include<tbb / enumerable_thread_specific . h> # include<tbb / parallel_for . h> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { enum NearestNeighbors { NN_FACE = 6,NN_FACE_EDGE = 1 8,NN_FACE_EDGE_VERTEX = 2 6 } ; enum TilePolicy { IGNORE_TILES,EXPAND_TILES,PRESERVE_TILES } ; template<TreeOrLeafManagerT> void)",
    "insertText": "dilateActiveValues(TreeOrLeafManagerT& tree, const int iterations = 1, const NearestNeighbors nn = NN_FACE, const TilePolicy mode = PRESERVE_TILES, const bool threaded = true)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (template<TreeOrLeafManagerT> void)",
    "insertText": "erodeActiveValues(TreeOrLeafManagerT& tree, const int iterations = 1, const NearestNeighbors nn = NN_FACE, const TilePolicy mode = PRESERVE_TILES, const bool threaded = true)"
  },
  {
    "label": "Morphology()",
    "kind": "Method",
    "detail": "Function (namespace morphology { template<TreeType> class Morphology { public : using LeafType = TreeType::LeafNodeType ; using MaskType = LeafType::NodeMaskType ; using ValueType = TreeType::ValueType ; using MaskTreeT = TreeType::template ValueConverter<ValueMask>::Type ; using MaskLeafT = MaskTreeT::LeafNodeType ; using AccessorType = tree::ValueAccessor<TreeType> ;)",
    "insertText": "Morphology(TreeType& tree) : mManagerPtr(new tree::LeafManager<TreeType>(tree)) , mManager(*mManagerPtr) , mThreaded(true)"
  },
  {
    "label": "Morphology()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Morphology(tree::LeafManager<TreeType>& tree) : mManagerPtr(nullptr) , mManager(tree) , mThreaded(true)"
  },
  {
    "label": "getThreaded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getThreaded()"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (mThreaded = threaded ; } const tree::LeafManager<TreeType>&)",
    "insertText": "leafManager()"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateVoxels(const size_t iter, const NearestNeighbors nn, const bool prune = false, const bool preserveMaskLeafNodes = false)"
  },
  {
    "label": "copyMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyMasks(std::vector<MaskType>& masks)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (masks .)",
    "insertText": "resize(mManager.leafCount())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->getThreaded())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(mManager.getRange(), [&](const tbb::blocked_range<size_t>& r){ for (size_t idx = r.begin(); idx < r.end(); ++idx) masks[idx] = mManager.leaf(idx).getValueMask(); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t idx = 0; idx < mManager.leafCount(); ++idx)"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (masks [ idx ] = mManager .)",
    "insertText": "leaf(idx).getValueMask()"
  },
  {
    "label": "Int32()",
    "kind": "Method",
    "detail": "Function (} } } public : struct NodeMaskOp { const Int32 DIM = static_cast<)",
    "insertText": "Int32(LeafType::DIM)"
  },
  {
    "label": "Int32()",
    "kind": "Method",
    "detail": "Function (const Int32 LOG2DIM = static_cast<)",
    "insertText": "Int32(LeafType::LOG2DIM)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using Word = std::conditional<LOG2DIM = = 3,uint8_t,std::conditional<LOG2DIM = = 4,uint16_t,std::conditional<LOG2DIM = = 5,uint32_t,std::conditional<LOG2DIM = = 6,uint64_t,void>::type>::type>::type>::type ;)",
    "insertText": "static_assert(!std::is_same<Word, void>::value, \"Unsupported Node Dimension for node mask dilation/erosion\")"
  },
  {
    "label": "NodeMaskOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeMaskOp(AccessorType& accessor, const NearestNeighbors op) : mOrigin(nullptr) , mNeighbours(NodeMaskOp::ksize(op), nullptr) , mAccessor(&accessor) , mOnTile(true) , mOffTile(false) , mOp(op)"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dilate(LeafType& leaf)"
  },
  {
    "label": "getValueMask()",
    "kind": "Method",
    "detail": "Function (const MaskType mask = leaf .)",
    "insertText": "getValueMask()"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "dilate(leaf, mask)"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dilate(LeafType& leaf, const MaskType& mask)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "clear()"
  },
  {
    "label": "mNeighbours()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mNeighbours(leaf.getValueMask())"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOrigin(leaf.origin())"
  },
  {
    "label": "erode()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "erode(leaf, mask)"
  },
  {
    "label": "MaskType()",
    "kind": "Method",
    "detail": "Function (mNeighbours [ 0 ] = const_cast<)",
    "insertText": "MaskType(&leaf.getValueMask())"
  },
  {
    "label": "dilate18()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate18(const MaskType& mask)"
  },
  {
    "label": "dilate26()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate26(const MaskType& mask)"
  },
  {
    "label": "erode6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erode6(MaskType& mask)"
  },
  {
    "label": "erode18()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erode18(MaskType&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(NotImplementedError, \"erode18 is not implemented yet!\")"
  },
  {
    "label": "erode26()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erode26(MaskType&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(NotImplementedError, \"erode26 is not implemented yet!\")"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOrigin(const Coord& origin)"
  },
  {
    "label": "getOrigin()",
    "kind": "Method",
    "detail": "Function (mOrigin =& origin ; } const Coord&)",
    "insertText": "getOrigin()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(mNeighbours.begin(), mNeighbours.end(), nullptr)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "scatter(size_t n, int indx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n < mNeighbours.size())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mNeighbours[n])"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (mNeighbours [ n ] -> template getWord<)",
    "insertText": "Word(indx)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (mNeighbours [ n ] = this -> getNeighbour<DX,DY,DZ,)",
    "insertText": "true()"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(n, indx - (DIM - 1)*(DY + DX*DIM))"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (} Word)",
    "insertText": "gather(size_t n, int indx)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (mNeighbours [ n ] = this -> getNeighbour<DX,DY,DZ,)",
    "insertText": "false()"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (} return this ->)",
    "insertText": "gather(n, indx - (DIM -1)*(DY + DX*DIM))"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "scatterFacesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "scatterEdgesXY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scatterEdgesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "gatherFacesXY()",
    "kind": "Method",
    "detail": "Function (Word)",
    "insertText": "gatherFacesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "gatherEdgesXY()",
    "kind": "Method",
    "detail": "Function (Word)",
    "insertText": "gatherEdgesXY(int x, int y, int i1, int n, int i2)"
  },
  {
    "label": "getNeighbour()",
    "kind": "Method",
    "detail": "Function (template<int DX,int DY,int DZ,bool Create> MaskType*)",
    "insertText": "getNeighbour()"
  },
  {
    "label": "offsetBy()",
    "kind": "Method",
    "detail": "Function (const Coord xyz = mOrigin ->)",
    "insertText": "offsetBy(DX*DIM, DY*DIM, DZ*DIM)"
  },
  {
    "label": "probeLeaf()",
    "kind": "Method",
    "detail": "Function (auto* leaf = mAccessor ->)",
    "insertText": "probeLeaf(xyz)"
  },
  {
    "label": "touchLeaf()",
    "kind": "Method",
    "detail": "Function (leaf = mAccessor ->)",
    "insertText": "touchLeaf(xyz)"
  },
  {
    "label": "getMaskTree()",
    "kind": "Method",
    "detail": "Function (} private : const Coord* mOrigin ; std::vector<MaskType*> mNeighbours ; AccessorType* const mAccessor ; Word mWord ; MaskType mOnTile,mOffTile ; const NearestNeighbors mOp ; } ; private : std::unique_ptr<tree::LeafManager<TreeType>> mManagerPtr ; tree::LeafManager<TreeType>& mManager ; bool mThreaded ; } ; template<TreeT> std::enable_if<std::is_same<TreeT,TreeT::template ValueConverter<ValueMask>::Type>::value,TreeT::template ValueConverter<ValueMask>::Type*>::type)",
    "insertText": "getMaskTree(TreeT& tree)"
  },
  {
    "label": "leafCount()",
    "kind": "Method",
    "detail": "Function (const size_t leafCount = mManager .)",
    "insertText": "leafCount()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (auto& tree = mManager .)",
    "insertText": "tree()"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (MaskTreeT)",
    "insertText": "mask(tree, false, TopologyCopy())"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<MaskTreeT>)",
    "insertText": "manager(mask)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Morphology<MaskTreeT>)",
    "insertText": "m(manager)"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "setThreaded(this->getThreaded())"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "dilateVoxels(1, nn, false)"
  },
  {
    "label": "computeWavefront()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "computeWavefront(const size_t idx)"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (auto& leaf = manager .)",
    "insertText": "leaf(idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(!nodemask.isOn())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(manager.getRange(), [&](const tbb::blocked_range<size_t>& r){ for (size_t idx = r.begin(); idx < r.end(); ++idx) { computeWavefront(idx); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t idx = 0; idx < manager.leafCount(); ++idx)"
  },
  {
    "label": "computeWavefront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeWavefront(idx)"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (} } m .)",
    "insertText": "dilateVoxels(iter, nn, false)"
  },
  {
    "label": "subtractTopology()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "subtractTopology(const size_t idx)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const auto* maskleaf = mask .)",
    "insertText": "probeConstLeaf(leaf.origin())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(maskleaf)"
  },
  {
    "label": "getValueMask()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "getValueMask() -= maskleaf->getValueMask()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(mManager.getRange(), [&](const tbb::blocked_range<size_t>& r){ for (size_t idx = r.begin(); idx < r.end(); ++idx) { subtractTopology(idx); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t idx = 0; idx < leafCount; ++idx)"
  },
  {
    "label": "subtractTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subtractTopology(idx)"
  },
  {
    "label": "copyMasks()",
    "kind": "Method",
    "detail": "Function (} } } else { std::vector<MaskType> nodeMasks ; this ->)",
    "insertText": "copyMasks(nodeMasks)"
  },
  {
    "label": "getRange()",
    "kind": "Method",
    "detail": "Function (const auto range = mManager .)",
    "insertText": "getRange()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, [&](const tbb::blocked_range<size_t>& r) { AccessorType accessor(tree); NodeMaskOp cache(accessor, nn); for (size_t idx = r.begin(); idx < r.end(); ++idx) { const auto& leaf = mManager.leaf(idx); if (leaf.isEmpty()) continue; MaskType& newMask = nodeMasks[idx]; cache.erode(leaf, newMask); } })"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, [&](const tbb::blocked_range<size_t>& r){ for (size_t idx = r.begin(); idx < r.end(); ++idx) mManager.leaf(idx).setValueMask(nodeMasks[idx]); })"
  },
  {
    "label": "accessor()",
    "kind": "Method",
    "detail": "Function (} } else { AccessorType)",
    "insertText": "accessor(tree)"
  },
  {
    "label": "cache()",
    "kind": "Method",
    "detail": "Function (NodeMaskOp)",
    "insertText": "cache(accessor, nn)"
  },
  {
    "label": "erode()",
    "kind": "Method",
    "detail": "Function (MaskType& newMask = nodeMasks [ idx ] ; cache .)",
    "insertText": "erode(leaf, newMask)"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (mManager .)",
    "insertText": "leaf(idx).setValueMask(nodeMasks[idx])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(prune)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(mManager.tree(), zeroVal<typename TreeType::ValueType>(), this->getThreaded())"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (mManager .)",
    "insertText": "rebuild(!this->getThreaded())"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (} } template<TreeType> void Morphology<TreeType)",
    "insertText": "dilateVoxels(const size_t iter, const NearestNeighbors nn, const bool prune, const bool preserveMaskLeafNodes)"
  },
  {
    "label": "threaded()",
    "kind": "Method",
    "detail": "Function (auto dilate = [ iter,nn,)",
    "insertText": "threaded(auto& manager, const bool collapse)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using LeafManagerT = std::decay<)",
    "insertText": "decltype(manager)"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "setThreaded(threaded)"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (std::vector<MaskType> nodeMasks ; std::vector<std::unique_ptr<LeafT>> nodes ; const ValueT& bg = tree .)",
    "insertText": "background()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const bool steal = iter> 1 ;)",
    "insertText": "for(size_t i = 0; i < iter; ++i)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (manager .)",
    "insertText": "foreach([&](LeafT& leaf, const size_t idx) { const MaskType& oldMask = nodeMasks[idx]; const bool dense = oldMask.isOn(); cache.dilate(leaf, oldMask); if (!dense) return; if (collapse) { accessor.addTile(1, leaf.origin(), bg, true); } else if (steal) { nodes.emplace_back( tree.template stealNode<LeafT>(leaf.origin(), zeroVal<ValueT>(), true)); } }, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(nodes.empty())"
  },
  {
    "label": "addLeaf()",
    "kind": "Method",
    "detail": "Function (accessor .)",
    "insertText": "addLeaf(node.release())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "if(!threaded)"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (bool isMask = std::is_same<TreeType,MaskTreeT>::value ;)",
    "insertText": "dilate(mManager, isMask && prune)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(mManager.tree(), zeroVal<typename TreeType::ValueType>(), threaded)"
  },
  {
    "label": "getMaskTree()",
    "kind": "Method",
    "detail": "Function (} } else { std::vector<MaskLeafT*> array ; MaskTreeT* mask =)",
    "insertText": "getMaskTree(mManager.tree())"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (MaskTreeT topology ; topology .)",
    "insertText": "topologyUnion(mManager.tree())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (array .)",
    "insertText": "reserve(mManager.leafCount())"
  },
  {
    "label": "stealNodes()",
    "kind": "Method",
    "detail": "Function (topology .)",
    "insertText": "stealNodes(array)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(preserveMaskLeafNodes)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(mManager.getRange(), [&](const tbb::blocked_range<size_t>& r){ for (size_t idx = r.begin(); idx < r.end(); ++idx) { array[idx] = new MaskLeafT(mManager.leaf(idx)); } })"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} const size_t numThreads =)",
    "insertText": "size_t(tbb::task_scheduler_init::default_num_threads())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const size_t subTreeSize =)",
    "insertText": "Max(size_t(1), array.size()/(2*numThreads))"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (tbb::enumerable_thread_specific<std::unique_ptr<MaskTreeT>> pool ; MaskLeafT** start = array .)",
    "insertText": "data()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<MaskLeafT**>(start, start + array.size(), subTreeSize), [&](const tbb::blocked_range<MaskLeafT**>& range) { std::unique_ptr<MaskTreeT> mask(new MaskTreeT); for (MaskLeafT** it = range.begin(); it != range.end(); ++it) mask->addLeaf(*it); tree::LeafManager<MaskTreeT> manager(*mask, range.begin(), range.end()); dilate(manager, prune); auto& subtree = pool.local(); if (!subtree) subtree = std::move(mask); else subtree->merge(*mask, MERGE_ACTIVE_STATES); })"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto piter = pool .)",
    "insertText": "begin()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MaskTreeT& subtree = mask ?* mask :** piter + + ;)",
    "insertText": "for(; piter != pool.end(); ++piter) subtree.merge(**piter)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} } mManager .)",
    "insertText": "rebuild(!threaded)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "Word(w & (Word(w<<1 | (this->template gather<0,0,-1>(1, n)>>(DIM-1))) & Word(w>>1 | (this->template gather<0,0, 1>(2, n)<<(DIM-1)))))"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "Word(w & this->gatherFacesXY(x, y, 0, n, 3))"
  },
  {
    "label": "dilate6()",
    "kind": "Method",
    "detail": "Function (} } } } template<TreeType> void Morphology<TreeType>::)",
    "insertText": "dilate6(const MaskType& mask)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (this -> mWord =)",
    "insertText": "Word(w | (w>>1) | (w<<1))"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(0, n)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(1, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((this->mWord = Word(w>>(DIM-1))))"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(2, n)"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (} this -> mWord = w ; this ->)",
    "insertText": "scatterFacesXY(x, y, 0, n, 3)"
  },
  {
    "label": "offsetBy()",
    "kind": "Method",
    "detail": "Function (const Coord orig_mz = origin .)",
    "insertText": "offsetBy(0, 0, -DIM)"
  },
  {
    "label": "offsetBy()",
    "kind": "Method",
    "detail": "Function (const Coord orig_pz = origin .)",
    "insertText": "offsetBy(0, 0, DIM)"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOrigin(origin)"
  },
  {
    "label": "scatterEdgesXY()",
    "kind": "Method",
    "detail": "Function (this -> mWord = w ; this ->)",
    "insertText": "scatterEdgesXY(x, y, 0, n, 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((this->mWord = Word(w<<(DIM-1))))"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOrigin(orig_mz)"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatterFacesXY(x, y, 1, n, 11)"
  },
  {
    "label": "setOrigin()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOrigin(orig_pz)"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatterFacesXY(x, y, 2, n, 15)"
  },
  {
    "label": "scatterEdgesXY()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatterEdgesXY(x, y, 1, n, 11)"
  },
  {
    "label": "scatterFacesXY()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatterFacesXY(x, y, 2, n, 19)"
  },
  {
    "label": "scatterEdgesXY()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatterEdgesXY(x, y, 2, n, 19)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n-DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(x < DIM-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n+DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+1, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(y > 0)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+2, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(y < DIM-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n+1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+3, n)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n-DIM-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+2, n-DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n-DIM+1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+3, n-DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(i2 , n+1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+7, n)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(i2 , n-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+4, n)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n+DIM-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+2, n+DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "scatter(i1, n+DIM+1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+3, n+DIM)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(i2+1, n-1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+6, n)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (this -> template)",
    "insertText": "scatter(i2+1, n+1)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (} else { this -> template)",
    "insertText": "scatter(i2+5, n)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (Word w = x> 0 ? this ->)",
    "insertText": "gather(i1, n - DIM) : this->template gather<-1,0,0>(i2, n)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "Word(w & (x < DIM - 1 ? this->gather(i1, n + DIM) : this->template gather<1,0,0>(i2 + 1, n)))"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "Word(w & (y > 0 ? this->gather(i1, n - 1) : this->template gather<0,-1,0>(i2 + 2, n)))"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "Word(w & (y < DIM - 1 ? this->gather(i1, n + 1) : this->template gather<0,1,0>(i2+3, n)))"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (Word w = ~)",
    "insertText": "Word(0)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y> 0 ? this ->)",
    "insertText": "gather(i1, n-DIM-1) : this->template gather< 0,-1, 0>(i2+2, n-DIM)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y<DIM - 1 ? this ->)",
    "insertText": "gather(i1, n-DIM+1) : this->template gather< 0, 1, 0>(i2+3, n-DIM)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (} else { w& = y<DIM - 1 ? this -> template)",
    "insertText": "gather(i2 , n+1): this->template gather<-1, 1, 0>(i2+7, n)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y> 0 ? this -> template)",
    "insertText": "gather(i2 , n-1): this->template gather<-1,-1, 0>(i2+4, n)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y> 0 ? this ->)",
    "insertText": "gather(i1, n+DIM-1) : this->template gather< 0,-1, 0>(i2+2, n+DIM)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y<DIM - 1 ? this ->)",
    "insertText": "gather(i1, n+DIM+1) : this->template gather< 0, 1, 0>(i2+3, n+DIM)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (} else { w& = y> 0 ? this -> template)",
    "insertText": "gather(i2+1, n-1): this->template gather< 1,-1, 0>(i2+6, n)"
  },
  {
    "label": "gather()",
    "kind": "Method",
    "detail": "Function (w& = y<DIM - 1 ? this -> template)",
    "insertText": "gather(i2+1, n+1): this->template gather< 1, 1, 0>(i2+5, n)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} return w ; } } namespace morph_internal { template<T> struct Adapter { using TreeType = T ; TreeType&)",
    "insertText": "get(T& tree)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct Adapter<openvdb::tree::LeafManager<T>> { using TreeType = T ; TreeType&)",
    "insertText": "get(openvdb::tree::LeafManager<T>& M)"
  },
  {
    "label": "sync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sync(openvdb::tree::LeafManager<T>& M)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "rebuild()"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (} } ; } template<TreeOrLeafManagerT> void)",
    "insertText": "dilateActiveValues(TreeOrLeafManagerT& treeOrLeafM, const int iterations, const NearestNeighbors nn, const TilePolicy mode, const bool threaded)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using AdapterT = morph_internal::Adapter<TreeOrLeafManagerT> ; using TreeT = AdapterT::TreeType ; using MaskT = TreeT::template ValueConverter<ValueMask>::Type ;)",
    "insertText": "if(iterations <= 0)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeT>)",
    "insertText": "morph(treeOrLeafM)"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (morph .)",
    "insertText": "dilateVoxels(static_cast<size_t>(iterations), nn, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool isMask = std::is_same<TreeT,MaskT>::value ;)",
    "insertText": "if(isMask || mode == EXPAND_TILES)"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "voxelizeActiveTiles()"
  },
  {
    "label": "sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sync(treeOrLeafM)"
  },
  {
    "label": "dilateVoxels()",
    "kind": "Method",
    "detail": "Function (morph .)",
    "insertText": "dilateVoxels(static_cast<size_t>(iterations), nn, true)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(mode == EXPAND_TILES)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "assert(mode == PRESERVE_TILES)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (MaskT topology ; topology .)",
    "insertText": "topologyUnion(tree)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<MaskT>)",
    "insertText": "morph(topology)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "topologyUnion(topology, true)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(tree, zeroVal<typename TreeT::ValueType>(), threaded)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeOrLeafManagerT> void)",
    "insertText": "erodeActiveValues(TreeOrLeafManagerT& treeOrLeafM, const int iterations, const NearestNeighbors nn, const TilePolicy mode, const bool threaded)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (auto& tree =)",
    "insertText": "get(treeOrLeafM)"
  },
  {
    "label": "erodeVoxels()",
    "kind": "Method",
    "detail": "Function (morph .)",
    "insertText": "erodeVoxels(static_cast<size_t>(iterations), nn, false)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "prune(topology, zeroVal<typename MaskT::ValueType>(), threaded)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (tree .)",
    "insertText": "topologyIntersection(topology)"
  },
  {
    "label": "OPENVDB_DEPRECATED_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} template<TreeType>)",
    "insertText": "OPENVDB_DEPRECATED_MESSAGE(\"Switch to tools::dilateActiveValues. Use tools::IGNORE_TILES to maintain same (but perhaps unintended) behaviour\") inline void dilateVoxels(TreeType& tree, int iterations = 1, NearestNeighbors nn = NN_FACE)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(tree)"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (morph .)",
    "insertText": "setThreaded(false)"
  },
  {
    "label": "OPENVDB_DEPRECATED_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} template<TreeType>)",
    "insertText": "OPENVDB_DEPRECATED_MESSAGE(\"Switch to tools::dilateActiveValues. Use tools::IGNORE_TILES to maintain same (but perhaps unintended) behaviour\") inline void dilateVoxels(tree::LeafManager<TreeType>& manager, int iterations = 1, NearestNeighbors nn = NN_FACE)"
  },
  {
    "label": "morph()",
    "kind": "Method",
    "detail": "Function (morphology::Morphology<TreeType>)",
    "insertText": "morph(manager)"
  },
  {
    "label": "OPENVDB_DEPRECATED_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} template<TreeType>)",
    "insertText": "OPENVDB_DEPRECATED_MESSAGE(\"Switch to tools::erodeActiveValues. Use tools::IGNORE_TILES to maintain same (but perhaps unintended) behaviour\") inline void erodeVoxels(TreeType& tree, int iterations=1, NearestNeighbors nn = NN_FACE)"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (morph .)",
    "insertText": "setThreaded(true)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pruneLevelSet(tree)"
  },
  {
    "label": "OPENVDB_DEPRECATED_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} template<TreeType>)",
    "insertText": "OPENVDB_DEPRECATED_MESSAGE(\"Switch to tools::erodeActiveValues. Use tools::IGNORE_TILES to maintain same (but perhaps unintended) behaviour\") inline void erodeVoxels(tree::LeafManager<TreeType>& manager, int iterations = 1, NearestNeighbors nn = NN_FACE)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(manager.tree())"
  }
]