[
  {
    "label": "IMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLog"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "IMessageLog()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Logging / TokenizedMessage . h \" class IMessageLog { public : ~)",
    "insertText": "IMessageLog()"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMessage(const TSharedRef<class FTokenizedMessage>& NewMessage, bool bMirrorToOutputLog = true)"
  },
  {
    "label": "AddMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessages(const TArray< TSharedRef<class FTokenizedMessage> >& NewMessages, bool bMirrorToOutputLog = true)"
  },
  {
    "label": "NewPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewPage(const FText& Title)"
  },
  {
    "label": "SetCurrentPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentPage(const FText& Title)"
  },
  {
    "label": "SetCurrentPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentPage(const uint32 InOldPageIndex)"
  },
  {
    "label": "NotifyIfAnyMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIfAnyMessages(const FText& Message, EMessageSeverity::Type SeverityFilter = EMessageSeverity::Info, bool bForce = false)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open()"
  },
  {
    "label": "NumMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumMessages(EMessageSeverity::Type SeverityFilter)"
  }
]