[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USMInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USMInstanceManager"
  },
  {
    "label": "ISMInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISMInstanceManager"
  },
  {
    "label": "USMInstanceManagerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USMInstanceManagerProvider"
  },
  {
    "label": "ISMInstanceManagerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISMInstanceManagerProvider"
  },
  {
    "label": "FSMInstanceManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSMInstanceManager"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Interface . h \" # include \" Containers / ArrayView . h \" # include \" Elements / SMInstance / SMInstanceElementId . h \" # include \" SMInstanceManager . generated . h \" enum class ETypedElementWorldType : uint8 ;)",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ISMInstanceManager {)",
    "insertText": "GENERATED_BODY() public: virtual FText GetSMInstanceDisplayName(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "GetSMInstanceTooltip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSMInstanceTooltip(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "CanEditSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "CanMoveSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveSMInstance(const FSMInstanceId& InstanceId, const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSMInstanceTransform(const FSMInstanceId& InstanceId, FTransform& OutInstanceTransform, bool bWorldSpace = false)"
  },
  {
    "label": "SetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSMInstanceTransform(const FSMInstanceId& InstanceId, const FTransform& InstanceTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)"
  },
  {
    "label": "NotifySMInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementStarted(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementOngoing(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceMovementEnded(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "NotifySMInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySMInstanceSelectionChanged(const FSMInstanceId& InstanceId, const bool bIsSelected)"
  },
  {
    "label": "ForEachSMInstanceInSelectionGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSMInstanceInSelectionGroup(const FSMInstanceId& InstanceId, TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(InstanceId)"
  },
  {
    "label": "CanDeleteSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeleteSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "DeleteSMInstances()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteSMInstances(TArrayView<const FSMInstanceId> InstanceIds)"
  },
  {
    "label": "CanDuplicateSMInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateSMInstance(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "DuplicateSMInstances()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DuplicateSMInstances(TArrayView<const FSMInstanceId> InstanceIds, TArray<FSMInstanceId>& OutNewInstanceIds)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ISMInstanceManagerProvider {)",
    "insertText": "GENERATED_BODY() public: virtual ISMInstanceManager* GetSMInstanceManager(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "FSMInstanceManager()",
    "kind": "Method",
    "detail": "Function (} ; struct FSMInstanceManager { public :)",
    "insertText": "FSMInstanceManager()"
  },
  {
    "label": "FSMInstanceManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSMInstanceManager(const FSMInstanceId& InInstanceId, ISMInstanceManager* InInstanceManager) : InstanceId(InInstanceId) , InstanceManager(InInstanceManager)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSMInstanceManager& InId)"
  },
  {
    "label": "GetInstanceId()",
    "kind": "Method",
    "detail": "Function (} const FSMInstanceId&)",
    "insertText": "GetInstanceId()"
  },
  {
    "label": "GetSMInstanceTooltip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSMInstanceTooltip()"
  },
  {
    "label": "CanEditSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditSMInstance()"
  },
  {
    "label": "CanMoveSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanMoveSMInstance(const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSMInstanceTransform(FTransform& OutInstanceTransform, bool bWorldSpace = false)"
  },
  {
    "label": "SetSMInstanceTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetSMInstanceTransform(const FTransform& InstanceTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)"
  },
  {
    "label": "NotifySMInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifySMInstanceMovementStarted()"
  },
  {
    "label": "NotifySMInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifySMInstanceMovementOngoing()"
  },
  {
    "label": "NotifySMInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifySMInstanceMovementEnded()"
  },
  {
    "label": "NotifySMInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifySMInstanceSelectionChanged(const bool bIsSelected)"
  },
  {
    "label": "ForEachSMInstanceInSelectionGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSMInstanceInSelectionGroup(TFunctionRef<bool(FSMInstanceId)> Callback)"
  },
  {
    "label": "CanDeleteSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeleteSMInstance()"
  },
  {
    "label": "DeleteSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteSMInstance()"
  },
  {
    "label": "CanDuplicateSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDuplicateSMInstance()"
  },
  {
    "label": "DuplicateSMInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DuplicateSMInstance(FSMInstanceId& OutNewInstanceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FSMInstanceId> NewInstanceIds ;)",
    "insertText": "if(InstanceManager->DuplicateSMInstances(MakeArrayView(&InstanceId, 1), NewInstanceIds))"
  }
]