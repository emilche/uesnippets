[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "UActorGroupingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorGroupingUtils"
  },
  {
    "label": "SetGroupingActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroupingActive(bool bInGroupingActive)"
  },
  {
    "label": "UngroupSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UngroupSelected()"
  },
  {
    "label": "UngroupActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UngroupActors(const TArray<AActor*>& ActorsToUngroup)"
  },
  {
    "label": "LockSelectedGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockSelectedGroups()"
  },
  {
    "label": "UnlockSelectedGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockSelectedGroups()"
  },
  {
    "label": "AddSelectedToGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedToGroup()"
  },
  {
    "label": "RemoveSelectedFromGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedFromGroup()"
  },
  {
    "label": "AddCanGroupActorsDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCanGroupActorsDelegate(const FName& Owner, const FCanGroupActors& InGroupActorsDelegate)"
  },
  {
    "label": "RemoveCanGroupActorsDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCanGroupActorsDelegate(const FName& Owner)"
  }
]