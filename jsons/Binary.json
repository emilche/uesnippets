[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Binary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Binary"
  },
  {
    "label": "OwningBinary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OwningBinary"
  },
  {
    "label": "Binary()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_BINARY_H # define LLVM_OBJECT_BINARY_H # include \" llvm / Object / Error . h \" # include \" llvm / Support / ErrorOr . h \" # include \" llvm / Support / FileSystem . h \" # include \" llvm / Support / MemoryBuffer . h \" namespace llvm { class LLVMContext ; class StringRef ; namespace object { class Binary { private :)",
    "insertText": "Binary()"
  },
  {
    "label": "Binary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Binary(const Binary &other)"
  },
  {
    "label": "Binary()",
    "kind": "Method",
    "detail": "Function (unsigned int TypeID ; protected : MemoryBufferRef Data ;)",
    "insertText": "Binary(unsigned int Type, MemoryBufferRef Source)"
  },
  {
    "label": "getELFType()",
    "kind": "Method",
    "detail": "Function (enum { ID_Archive,ID_MachOUniversalBinary,ID_IR,ID_StartObjects,ID_COFF,ID_ELF32L,ID_ELF32B,ID_ELF64L,ID_ELF64B,ID_MachO32L,ID_MachO32B,ID_MachO64L,ID_MachO64B,ID_EndObjects } ; unsigned int)",
    "insertText": "getELFType(bool isLE, bool is64Bits)"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getData()"
  },
  {
    "label": "getFileName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getFileName()"
  },
  {
    "label": "getMemoryBufferRef()",
    "kind": "Method",
    "detail": "Function (MemoryBufferRef)",
    "insertText": "getMemoryBufferRef()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "getType()"
  },
  {
    "label": "isArchive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArchive()"
  },
  {
    "label": "createBinary()",
    "kind": "Method",
    "detail": "Function (} } ; ErrorOr<std::unique_ptr<Binary>>)",
    "insertText": "createBinary(MemoryBufferRef Source, LLVMContext *Context = nullptr)"
  },
  {
    "label": "OwningBinary()",
    "kind": "Method",
    "detail": "Function (template<T> class OwningBinary { std::unique_ptr<T> Bin ; std::unique_ptr<MemoryBuffer> Buf ; public :)",
    "insertText": "OwningBinary()"
  },
  {
    "label": "OwningBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OwningBinary(std::unique_ptr<T> Bin, std::unique_ptr<MemoryBuffer> Buf)"
  },
  {
    "label": "OwningBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OwningBinary(OwningBinary<T>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OwningBinary<T>&)",
    "insertText": "operator(OwningBinary<T> &&Other)"
  },
  {
    "label": "takeBinary()",
    "kind": "Method",
    "detail": "Function (std::pair<std::unique_ptr<T>,std::unique_ptr<MemoryBuffer>>)",
    "insertText": "takeBinary()"
  },
  {
    "label": "getBinary()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "getBinary()"
  },
  {
    "label": "OwningBinary()",
    "kind": "Method",
    "detail": "Function (} ; template<T> OwningBinary<T)",
    "insertText": "OwningBinary(std::unique_ptr<T> Bin, std::unique_ptr<MemoryBuffer> Buf) : Bin(std::move(Bin)), Buf(std::move(Buf))"
  },
  {
    "label": "OwningBinary()",
    "kind": "Method",
    "detail": "Function (} template<T> OwningBinary<T)",
    "insertText": "OwningBinary(OwningBinary &&Other) : Bin(std::move(Other.Bin)), Buf(std::move(Other.Buf))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> OwningBinary<T>& OwningBinary<T)",
    "insertText": "operator(OwningBinary &&Other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Bin =)",
    "insertText": "move(Other.Bin)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Buf =)",
    "insertText": "move(Other.Buf)"
  },
  {
    "label": "createBinary()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<OwningBinary<Binary>>)",
    "insertText": "createBinary(StringRef Path)"
  }
]