[
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "IsBeginningTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsBeginningTag"
  },
  {
    "label": "IsEndTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsEndTag"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_DATA_H_ # define NET_DCSCTP_PACKET_DATA_H_ # include<cstdint> # include<utility> # include<vector> # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / public / types . h \" namespace dcsctp { struct Data { using IsBeginning = webrtc::StrongAlias<class IsBeginningTag,bool> ; using IsEnd = webrtc::StrongAlias<class IsEndTag,bool> ;)",
    "insertText": "Data(StreamID stream_id, SSN ssn, MID message_id, FSN fsn, PPID ppid, std::vector<uint8_t> payload, IsBeginning is_beginning, IsEnd is_end, IsUnordered is_unordered) : stream_id(stream_id), ssn(ssn), message_id(message_id), fsn(fsn), ppid(ppid), payload(std::move(payload)), is_beginning(is_beginning), is_end(is_end), is_unordered(is_unordered)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(Data&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Data&)",
    "insertText": "operator(Data&& other)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (Data)",
    "insertText": "Clone()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  }
]