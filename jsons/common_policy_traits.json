[
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "common_policy_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "common_policy_traits"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_COMMON_POLICY_TRAITS_H_ # define ABSL_CONTAINER_INTERNAL_COMMON_POLICY_TRAITS_H_ # include<cstddef> # include<cstring> # include<memory> # include<new> # include<type_traits> # include<utility> # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class Policy,class = void> struct common_policy_traits { using slot_type = Policy::slot_type ; using reference =)",
    "insertText": "decltype(Policy::element(std::declval<slot_type*>()))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (using value_type = std::remove_reference<reference>::type ; template<class Alloc,class . . . Args> void)",
    "insertText": "construct(Alloc* alloc, slot_type* slot, Args&&... args)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(alloc, slot, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<class Alloc> void)",
    "insertText": "destroy(Alloc* alloc, slot_type* slot)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(alloc, slot)"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (} template<class Alloc> void)",
    "insertText": "transfer(Alloc* alloc, slot_type* new_slot, slot_type* old_slot)"
  },
  {
    "label": "transfer_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transfer_impl(alloc, new_slot, old_slot, 0)"
  },
  {
    "label": "element()",
    "kind": "Method",
    "detail": "Function (} template<class P = Policy> auto)",
    "insertText": "element(absl::remove_const_t<slot_type>* slot) -> decltype(P::element(slot))"
  },
  {
    "label": "element()",
    "kind": "Method",
    "detail": "Function (} template<class P = Policy> auto)",
    "insertText": "element(const slot_type* slot) -> decltype(P::element(slot))"
  },
  {
    "label": "transfer_impl()",
    "kind": "Method",
    "detail": "Function (} private : template<class Alloc,class P = Policy> auto)",
    "insertText": "transfer_impl(Alloc* alloc, slot_type* new_slot, slot_type* old_slot, int) -> decltype((void)P::transfer(alloc, new_slot, old_slot))"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transfer(alloc, new_slot, old_slot)"
  },
  {
    "label": "transfer_impl()",
    "kind": "Method",
    "detail": "Function (} template<class Alloc> void)",
    "insertText": "transfer_impl(Alloc* alloc, slot_type* new_slot, slot_type* old_slot, char)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__cpp_lib_launder) && __cpp_lib_launder >= 201606 if (absl::is_trivially_relocatable<value_type>())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>( std::launder(const_cast<std::remove_const_t<value_type>*>( &element(new_slot)))), static_cast<const void*>(&element(old_slot)), sizeof(value_type))"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(alloc, old_slot)"
  }
]