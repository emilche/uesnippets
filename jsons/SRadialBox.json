[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SRadialBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRadialBox"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FChildArranger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildArranger"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class SRadialBox : public SPanel { public : class FSlot : public TSlotBase<FSlot> { public : using TSlotBase<FSlot>::TSlotBase ;)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TSlotBase<FSlot>) SLATE_SLOT_END_ARGS()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SLATE_BEGIN_ARGS(SRadialBox) : _PreferredWidth( 100.f ) , _UseAllottedWidth( false ) , _StartingAngle(0.f) , _bDistributeItemsEvenly(true) , _AngleBetweenItems(0.f) , _SectorCentralAngle(360.f)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots ) SLATE_ATTRIBUTE( float, PreferredWidth ) SLATE_ARGUMENT( bool, UseAllottedWidth ) SLATE_ARGUMENT( float, StartingAngle) SLATE_ARGUMENT(bool, bDistributeItemsEvenly) SLATE_ARGUMENT(float, AngleBetweenItems) SLATE_ARGUMENT(float, SectorCentralAngle) SLATE_END_ARGS() SLATE_API SRadialBox()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SetStartingAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartingAngle(float InStartingAngle)"
  },
  {
    "label": "SetAngleBetweenItems()",
    "kind": "Method",
    "detail": "Function (StartingAngle = InStartingAngle ; } void)",
    "insertText": "SetAngleBetweenItems(float InAngleBetweenItems)"
  },
  {
    "label": "SetDistributeItemsEvenly()",
    "kind": "Method",
    "detail": "Function (AngleBetweenItems = InAngleBetweenItems ; } void)",
    "insertText": "SetDistributeItemsEvenly(bool bInDistributeItemsEvenly)"
  },
  {
    "label": "SetSectorCentralAngle()",
    "kind": "Method",
    "detail": "Function (bDistributeItemsEvenly = bInDistributeItemsEvenly ; } void)",
    "insertText": "SetSectorCentralAngle(float InSectorCentralAngle)"
  },
  {
    "label": "SetUseAllottedWidth()",
    "kind": "Method",
    "detail": "Function (SectorCentralAngle = InSectorCentralAngle ; } void)",
    "insertText": "SetUseAllottedWidth(bool bInUseAllottedWidth)"
  },
  {
    "label": "InternalNormalizeAngle()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "InternalNormalizeAngle(float Angle)"
  }
]