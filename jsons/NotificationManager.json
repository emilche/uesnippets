[
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TLockFreePointerListLIFO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreePointerListLIFO"
  },
  {
    "label": "FProgressNotificationHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProgressNotificationHandle"
  },
  {
    "label": "FSlateNotificationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateNotificationManager"
  },
  {
    "label": "IProgressNotificationHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProgressNotificationHandler"
  },
  {
    "label": "SNotificationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationList"
  },
  {
    "label": "FRegionalNotificationList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegionalNotificationList"
  },
  {
    "label": "FProgressNotificationHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Containers / LockFreeList . h \" # include \" Layout / SlateRect . h \" # include \" Widgets / SWindow . h \" # include \" HAL / IConsoleManager . h \" # include \" Misc / CoreAsyncTaskNotificationImpl . h \" struct FNotificationInfo ; template<class T> class TLockFreePointerListLIFO ; struct FProgressNotificationHandle { class FSlateNotificationManager ;)",
    "insertText": "FProgressNotificationHandle() : Id(INDEX_NONE)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Id = INDEX_NONE ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IProgressNotificationHandler()",
    "kind": "Method",
    "detail": "Function (} int32 Id ; } ; class IProgressNotificationHandler { public : ~)",
    "insertText": "IProgressNotificationHandler()"
  },
  {
    "label": "StartProgressNotification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartProgressNotification(FProgressNotificationHandle Handle, FText DisplayText, int32 TotalWorkToDo)"
  },
  {
    "label": "UpdateProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgressNotification(FProgressNotificationHandle Handle, int32 TotalWorkDone, int32 UpdatedTotalWorkToDo, FText UpdatedDisplayText)"
  },
  {
    "label": "CancelProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelProgressNotification(FProgressNotificationHandle Handle)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateNotificationManager { class SNotificationList ; public : FSlateNotificationManager&)",
    "insertText": "Get()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "SetRootWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootWindow(const TSharedRef<SWindow> InRootWindow)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SNotificationItem>)",
    "insertText": "AddNotification(const FNotificationInfo& Info)"
  },
  {
    "label": "QueueNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueNotification(FNotificationInfo* Info)"
  },
  {
    "label": "StartProgressNotification()",
    "kind": "Method",
    "detail": "Function (FProgressNotificationHandle)",
    "insertText": "StartProgressNotification(FText DisplayText, int32 TotalWorkToDo)"
  },
  {
    "label": "UpdateProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgressNotification(FProgressNotificationHandle InHandle, int32 TotalWorkDone, int32 UpdatedTotalWorkToDo = 0, FText UpdatedDisplayText = FText::GetEmpty())"
  },
  {
    "label": "CancelProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelProgressNotification(FProgressNotificationHandle InHandle)"
  },
  {
    "label": "SetProgressNotificationHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgressNotificationHandler(IProgressNotificationHandler* NewHandler)"
  },
  {
    "label": "ForceNotificationsInFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNotificationsInFront(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "GetWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindows(TArray< TSharedRef<SWindow> >& OutWindows)"
  },
  {
    "label": "SetAllowNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowNotifications(const bool bShouldAllow)"
  },
  {
    "label": "AreNotificationsAllowed()",
    "kind": "Method",
    "detail": "Function (this -> bAllowNotifications = bShouldAllow ; } bool)",
    "insertText": "AreNotificationsAllowed()"
  },
  {
    "label": "UnregisterStagedNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterStagedNotification(TSharedPtr<IAsyncTaskNotificationImpl> InNotification)"
  },
  {
    "label": "FSlateNotificationManager()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FSlateNotificationManager()"
  },
  {
    "label": "CreateStackForArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SNotificationList>)",
    "insertText": "CreateStackForArea(const FSlateRect& InRectangle, TSharedPtr<SWindow> Window)"
  },
  {
    "label": "ShutdownOnPreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownOnPreExit()"
  },
  {
    "label": "FRegionalNotificationList()",
    "kind": "Method",
    "detail": "Function (private : struct FRegionalNotificationList {)",
    "insertText": "FRegionalNotificationList(const FSlateRect& InRectangle)"
  },
  {
    "label": "Arrange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Arrange()"
  },
  {
    "label": "RemoveDeadNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadNotifications()"
  }
]