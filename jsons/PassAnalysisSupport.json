[
  {
    "label": "AnalysisUsage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisUsage"
  },
  {
    "label": "PassClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassClass"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "AnalysisResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisResolver"
  },
  {
    "label": "AnalysisUsage()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PASSANALYSISSUPPORT_H # define LLVM_PASSANALYSISSUPPORT_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Pass . h \" # include<vector> namespace llvm { class AnalysisUsage { public : typedef SmallVector<AnalysisID,3 2> VectorType ; private : VectorType Required,RequiredTransitive,Preserved ; bool PreservesAll ; public :)",
    "insertText": "AnalysisUsage() : PreservesAll(false)"
  },
  {
    "label": "addRequiredID()",
    "kind": "Method",
    "detail": "Function (} AnalysisUsage&)",
    "insertText": "addRequiredID(const void *ID)"
  },
  {
    "label": "addRequiredID()",
    "kind": "Method",
    "detail": "Function (AnalysisUsage&)",
    "insertText": "addRequiredID(char &ID)"
  },
  {
    "label": "addRequired()",
    "kind": "Method",
    "detail": "Function (template<class PassClass> AnalysisUsage&)",
    "insertText": "addRequired()"
  },
  {
    "label": "addRequiredTransitiveID()",
    "kind": "Method",
    "detail": "Function (} AnalysisUsage&)",
    "insertText": "addRequiredTransitiveID(char &ID)"
  },
  {
    "label": "addRequiredTransitive()",
    "kind": "Method",
    "detail": "Function (template<class PassClass> AnalysisUsage&)",
    "insertText": "addRequiredTransitive()"
  },
  {
    "label": "addPreservedID()",
    "kind": "Method",
    "detail": "Function (} AnalysisUsage&)",
    "insertText": "addPreservedID(const void *ID)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Preserved .)",
    "insertText": "push_back(ID)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Preserved .)",
    "insertText": "push_back(&ID)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Preserved .)",
    "insertText": "push_back(&PassClass::ID)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "getPreservesAll()",
    "kind": "Method",
    "detail": "Function (PreservesAll = true ; } bool)",
    "insertText": "getPreservesAll()"
  },
  {
    "label": "getRequiredSet()",
    "kind": "Method",
    "detail": "Function (const VectorType&)",
    "insertText": "getRequiredSet()"
  },
  {
    "label": "AnalysisResolver()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AnalysisResolver(PMDataManager &P) : PM(P)"
  },
  {
    "label": "getPMDataManager()",
    "kind": "Method",
    "detail": "Function (} PMDataManager&)",
    "insertText": "getPMDataManager()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Pass* ResultPass = nullptr ;)",
    "insertText": "for(unsigned i = 0; i < AnalysisImpls.size() ; ++i)"
  },
  {
    "label": "findImplPass()",
    "kind": "Method",
    "detail": "Function (ResultPass = AnalysisImpls [ i ] . second ; break ; } } return ResultPass ; } Pass*)",
    "insertText": "findImplPass(Pass *P, AnalysisID PI, Function &F)"
  },
  {
    "label": "addAnalysisImplsPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAnalysisImplsPair(AnalysisID PI, Pass *P)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (std::pair<AnalysisID,Pass*> pir =)",
    "insertText": "make_pair(PI,P)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (AnalysisImpls .)",
    "insertText": "push_back(pir)"
  },
  {
    "label": "clearAnalysisImpls()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearAnalysisImpls()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (AnalysisImpls .)",
    "insertText": "clear()"
  },
  {
    "label": "getAnalysisIfAvailable()",
    "kind": "Method",
    "detail": "Function (} Pass*)",
    "insertText": "getAnalysisIfAvailable(AnalysisID ID, bool Direction)"
  },
  {
    "label": "getAnalysisIfAvailable()",
    "kind": "Method",
    "detail": "Function (private : std::vector<std::pair<AnalysisID,Pass*>> AnalysisImpls ; PMDataManager& PM ; } ; template<AnalysisType> AnalysisType*)",
    "insertText": "getAnalysisIfAvailable()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Resolver && \"Pass not resident in a PassManager object!\")"
  },
  {
    "label": "getAnalysisIfAvailable()",
    "kind": "Method",
    "detail": "Function (const void* PI =& AnalysisType::ID ; Pass* ResultPass = Resolver ->)",
    "insertText": "getAnalysisIfAvailable(PI, true)"
  },
  {
    "label": "getAnalysis()",
    "kind": "Method",
    "detail": "Function (} template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysis()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Resolver && \"Pass has not been inserted into a PassManager object!\")"
  },
  {
    "label": "getAnalysisID()",
    "kind": "Method",
    "detail": "Function (} template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysisID(AnalysisID PI)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(PI && \"getAnalysis for unregistered pass!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Resolver&&\"Pass has not been inserted into a PassManager object!\")"
  },
  {
    "label": "findImplPass()",
    "kind": "Method",
    "detail": "Function (Pass* ResultPass = Resolver ->)",
    "insertText": "findImplPass(PI)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ResultPass && \"getAnalysis*() called on an analysis that was not \" \"'required' by pass!\")"
  },
  {
    "label": "getAnalysis()",
    "kind": "Method",
    "detail": "Function (} template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysis(Function &F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Resolver &&\"Pass has not been inserted into a PassManager object!\")"
  },
  {
    "label": "getAnalysisID()",
    "kind": "Method",
    "detail": "Function (} template<AnalysisType> AnalysisType&)",
    "insertText": "getAnalysisID(AnalysisID PI, Function &F)"
  },
  {
    "label": "findImplPass()",
    "kind": "Method",
    "detail": "Function (Pass* ResultPass = Resolver ->)",
    "insertText": "findImplPass(this, PI, F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ResultPass && \"Unable to find requested analysis info\")"
  }
]