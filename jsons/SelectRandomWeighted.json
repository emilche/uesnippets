[
  {
    "label": "SelectRandomWeightedBy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Accumulate . h \" # include \" Algo / Impl / RangePointerType . h \" # include \" Math / RandomStream . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / ElementType . h \" # include \" GenericPlatform / GenericPlatformMath . h \" namespace AlgoImpl { template<RangeType,ProjectionType> TRangePointerType<TRemoveReference<RangeType>::Type>::Type)",
    "insertText": "SelectRandomWeightedBy(RangeType&& Range, ProjectionType Proj)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (using WeightType = std::decay_t<TInvokeResult_T<ProjectionType,TElementType_T<RangeType>>> ; const auto SumOfAllDesires =)",
    "insertText": "Accumulate(Range, (WeightType)0, [&Proj](auto Acc, auto&& Elem) { const auto Weight = Invoke(Proj, Elem); return Acc + (Weight < (WeightType)0 ? (WeightType)0 : Weight); })"
  },
  {
    "label": "RandomWeightedAvg()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "RandomWeightedAvg(WeightType)(FMath::FRand() * SumOfAllDesires)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (const auto Weight =)",
    "insertText": "Invoke(Proj, Elem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(RandomWeightedAvg < Weight)"
  }
]