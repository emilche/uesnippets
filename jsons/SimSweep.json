[
  {
    "label": "FSimSweepParticleHit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimSweepParticleHit"
  },
  {
    "label": "FSimOverlapParticleShape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimOverlapParticleShape"
  },
  {
    "label": "TSimSweepSQVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimSweepSQVisitor"
  },
  {
    "label": "FSimSweepParticleFilterBroadPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimSweepParticleFilterBroadPhase"
  },
  {
    "label": "FSimSweepShapeFilterNarrowPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimSweepShapeFilterNarrowPhase"
  },
  {
    "label": "FSimSweepCollectorFirstHit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimSweepCollectorFirstHit"
  },
  {
    "label": "FSimSweepParticleHit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Collision / CollisionFilter . h \" # include \" Chaos / GeometryQueries . h \" # include \" Chaos / ISpatialAcceleration . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { namespace Private { class FSimSweepParticleHit { public :)",
    "insertText": "FSimSweepParticleHit() : HitParticle(nullptr)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "IsHit()",
    "kind": "Method",
    "detail": "Function (HitParticle = nullptr ; } bool)",
    "insertText": "IsHit()"
  },
  {
    "label": "TSimSweepSQVisitor()",
    "kind": "Method",
    "detail": "Function (} const FGeometryParticleHandle* HitParticle ; const FPerShapeData* HitShape ; FRigidTransform3 ShapeWorldTransform ; } ; template<TVisitor> class TSimSweepSQVisitor : public ISpatialVisitor<FAccelerationStructureHandle,FReal> { public : using FVisitorData = TSpatialVisitorData<FAccelerationStructureHandle> ;)",
    "insertText": "TSimSweepSQVisitor(const TVisitor& InVisitor) : Visitor(InVisitor)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Overlap(const FVisitorData& Instance)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Sweep(const FVisitorData& Instance, FQueryFastData& CurData)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Raycast(const FVisitorData& Instance, FQueryFastData& CurData)"
  },
  {
    "label": "CallVisitor()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "CallVisitor(const FVisitorData& Instance)"
  },
  {
    "label": "GetGeometryParticleHandle_PhysicsThread()",
    "kind": "Method",
    "detail": "Function (FGeometryParticleHandle* Particle = Instance . Payload .)",
    "insertText": "GetGeometryParticleHandle_PhysicsThread()"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(Particle)"
  },
  {
    "label": "QueryBox()",
    "kind": "Method",
    "detail": "Function (FImplicitBox3)",
    "insertText": "QueryBox(QueryBounds.Min(), QueryBounds.Max())"
  },
  {
    "label": "OverlapCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverlapCollector(const FGeometryParticleHandle* OtherParticle)"
  },
  {
    "label": "GetTransformXR()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 OtherWorldTransform = OtherParticle ->)",
    "insertText": "GetTransformXR()"
  },
  {
    "label": "GetLeafGeometry()",
    "kind": "Method",
    "detail": "Function (const FImplicitObject* OtherImplicit = OtherShape ->)",
    "insertText": "GetLeafGeometry()"
  },
  {
    "label": "ShapeFilter()",
    "kind": "Method",
    "detail": "Function (const bool bOverlapShape =)",
    "insertText": "ShapeFilter(OtherShape.Get(), OtherImplicit)"
  },
  {
    "label": "FRigidTransform3()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 OtherShapeWorldTransform =)",
    "insertText": "FRigidTransform3(OtherShape->GetLeafRelativeTransform())"
  },
  {
    "label": "OverlapQuery()",
    "kind": "Method",
    "detail": "Function (const bool bOverlapHit =)",
    "insertText": "OverlapQuery(*OtherImplicit, OtherShapeWorldTransform, QueryBox, FRigidTransform3::Identity, 0 , nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FSimOverlapParticleShape Overlap ; Overlap . HitParticle = OtherParticle ; Overlap . HitShape = OtherShape .)",
    "insertText": "Get()"
  },
  {
    "label": "OverlapCollector()",
    "kind": "Method",
    "detail": "Function (Overlap . ShapeWorldTransform = OtherShapeWorldTransform ;)",
    "insertText": "OverlapCollector(Overlap)"
  },
  {
    "label": "SpatialAcclerationVisitor()",
    "kind": "Method",
    "detail": "Function (} } } } } ; TSimSweepSQVisitor)",
    "insertText": "SpatialAcclerationVisitor(ProcessParticle)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration ->)",
    "insertText": "Overlap(QueryBounds, SpatialAcclerationVisitor)"
  },
  {
    "label": "SimSweepParticlePair()",
    "kind": "Method",
    "detail": "Function (} template<TShapeFilter,THitCollector> void)",
    "insertText": "SimSweepParticlePair(const FGeometryParticleHandle* SweptParticle, const FGeometryParticleHandle* OtherParticle, const FVec3& StartPos, const FRotation3& Rot, const FVec3& Dir, const FReal Length, TShapeFilter& ShapeFilter, THitCollector& HitCollector)"
  },
  {
    "label": "FRigidTransform3()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 SweptWorldTransform =)",
    "insertText": "FRigidTransform3(StartPos, Rot)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FSimSweepParticleHit Hit ; Hit . HitParticle = OtherParticle ;)",
    "insertText": "for(const TUniquePtr<FPerShapeData>& SweptShape : SweptParticle->ShapesArray())"
  },
  {
    "label": "FRigidTransform3()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 SweptShapeWorldTransform =)",
    "insertText": "FRigidTransform3(SweptShape->GetLeafRelativeTransform())"
  },
  {
    "label": "ShapeFilter()",
    "kind": "Method",
    "detail": "Function (const bool bSweepShape =)",
    "insertText": "ShapeFilter(SweptShape.Get(), SweptImplicit, OtherShape.Get(), OtherImplicit)"
  },
  {
    "label": "SweepQuery()",
    "kind": "Method",
    "detail": "Function (const bool bSweepHit =)",
    "insertText": "SweepQuery(*OtherImplicit, OtherShapeWorldTransform, *SweptImplicit, SweptShapeWorldTransform, Dir, Length, Hit.HitDistance, Hit.HitPosition, Hit.HitNormal, Hit.HitFaceIndex, Hit.HitFaceNormal, 0 , true)"
  },
  {
    "label": "HitTOI()",
    "kind": "Method",
    "detail": "Function (Hit .)",
    "insertText": "HitTOI(Hit.HitDistance > 0) ? (Hit.HitDistance / Length)"
  },
  {
    "label": "HitCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitCollector(Dir, Length, Hit)"
  },
  {
    "label": "SimSweepParticle()",
    "kind": "Method",
    "detail": "Function (} } } } } template<TParticleFilter,TShapeFilter,THitCollector> void)",
    "insertText": "SimSweepParticle(ISpatialAcceleration<FAccelerationStructureHandle, FReal, 3>* SpatialAcceleration, const FGeometryParticleHandle* SweptParticle, const FVec3& StartPos, const FRotation3& Rot, const FVec3& Dir, const FReal Length, TParticleFilter& ParticleFilter, TShapeFilter& ShapeFilter, THitCollector& HitCollector)"
  },
  {
    "label": "SimSweepParticlePair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimSweepParticlePair(SweptParticle, OtherParticle, StartPos, Rot, Dir, Length, ShapeFilter, HitCollector)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (} } } ; const FAABB3 TransformedParticleBounds = SweptParticle ->)",
    "insertText": "GetGeometry()->CalculateTransformedBounds(FRigidTransform3(StartPos, Rot))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FVec3 BoundsExtents =)",
    "insertText": "FReal(0.5) * TransformedParticleBounds.Extents()"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (const FVec3 BoundsStartPos = TransformedParticleBounds .)",
    "insertText": "Center()"
  },
  {
    "label": "SpatialAcclerationVisitor()",
    "kind": "Method",
    "detail": "Function (TSimSweepSQVisitor)",
    "insertText": "SpatialAcclerationVisitor(ProcessParticlePair)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration ->)",
    "insertText": "Sweep(BoundsStartPos, Dir, Length, BoundsExtents, SpatialAcclerationVisitor)"
  },
  {
    "label": "FSimSweepParticleFilterBroadPhase()",
    "kind": "Method",
    "detail": "Function (} class FSimSweepParticleFilterBroadPhase { public :)",
    "insertText": "FSimSweepParticleFilterBroadPhase(FIgnoreCollisionManager* InIgnoreCollisionManager) : IgnoreCollisionManager(InIgnoreCollisionManager)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FGeometryParticleHandle* SweptParticle, const FGeometryParticleHandle* OtherParticle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : FIgnoreCollisionManager* IgnoreCollisionManager ; } ; class FSimSweepShapeFilterNarrowPhase { public : bool)",
    "insertText": "operator()(const FPerShapeData* SweptShape, const FImplicitObject* SweptImplicit, const FPerShapeData* OtherShape, const FImplicitObject* OtherImplicit)"
  },
  {
    "label": "GetInnerType()",
    "kind": "Method",
    "detail": "Function (const EImplicitObjectType SweptImplicitType = SweptImplicit ?)",
    "insertText": "GetInnerType(SweptImplicit->GetType())"
  },
  {
    "label": "GetInnerType()",
    "kind": "Method",
    "detail": "Function (const EImplicitObjectType OtherImplicitType = OtherImplicit ?)",
    "insertText": "GetInnerType(OtherImplicit->GetType())"
  },
  {
    "label": "FSimSweepCollectorFirstHit()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimSweepCollectorFirstHit { public :)",
    "insertText": "FSimSweepCollectorFirstHit(const FReal InHitDistanceEqualTolerance, FSimSweepParticleHit& OutFirstHit) : FirstHit(OutFirstHit) , HitDistanceEqualTolerance(InHitDistanceEqualTolerance)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FVec3& Dir, const FReal Length, const FSimSweepParticleHit& InHit)"
  },
  {
    "label": "ProcessHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHit(Dir, Length, InHit)"
  },
  {
    "label": "GetFirstHit()",
    "kind": "Method",
    "detail": "Function (} const FSimSweepParticleHit&)",
    "insertText": "GetFirstHit()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal ExistingDotNormal =)",
    "insertText": "DotProduct(Dir, FirstHit.HitNormal)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal NewDotNormal =)",
    "insertText": "DotProduct(Dir, InHit.HitNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FirstHit = InHit ; } return ; })",
    "insertText": "if((InHit.HitDistance > 0) || (FVec3::DotProduct(InHit.HitNormal, Dir) < 0))"
  },
  {
    "label": "SimSweepParticleFirstHit()",
    "kind": "Method",
    "detail": "Function (FirstHit = InHit ; return ; } } } FSimSweepParticleHit& FirstHit ; FReal HitDistanceEqualTolerance ; } ; bool)",
    "insertText": "SimSweepParticleFirstHit(ISpatialAcceleration<FAccelerationStructureHandle, FReal, 3>* SpatialAcceleration, FIgnoreCollisionManager* IgnoreCollisionManager, const FGeometryParticleHandle* SweptParticle, const FVec3& StartPos, const FRotation3& Rot, const FVec3& Dir, const FReal Length, FSimSweepParticleHit& OutHit, const FReal InHitDistanceEqualTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SimOverlapBoundsAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimOverlapBoundsAll(ISpatialAcceleration<FAccelerationStructureHandle, FReal, 3>* SpatialAcceleration, const FAABB3& QueryBounds, TArray<FSimOverlapParticleShape>& Overlaps)"
  }
]