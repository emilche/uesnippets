[
  {
    "label": "FMovieSceneEvaluationTrackSegments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrackSegments"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneSegmentIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSegmentIdentifier"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FSectionEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionEvaluationData"
  },
  {
    "label": "FMovieSceneSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSegment"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / FrameTime . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Containers / ArrayView . h \" # include \" UObject / SequencerObjectVersion . h \" # include \" MovieSceneFrameMigration . h \" # include \" MovieSceneSegment . generated . h \" struct FMovieSceneEvaluationTrackSegments ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00,PreRoll = 0 x01,PostRoll = 0 x02,ForceKeepState = 0 x04,ForceRestoreState = 0 x08,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESectionEvaluationFlags)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSegmentIdentifier() : IdentifierIndex(INDEX_NONE)"
  },
  {
    "label": "FMovieSceneSegmentIdentifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSegmentIdentifier(int32 InIndex) : IdentifierIndex(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMovieSceneSegmentIdentifier A, FMovieSceneSegmentIdentifier B)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<IdentifierIndex ; return true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneSegmentIdentifier& ID)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSectionEvaluationData() : ImplIndex(-1), ForcedTime(TNumericLimits<int32>::Lowest()), Flags(ESectionEvaluationFlags::None)"
  },
  {
    "label": "FSectionEvaluationData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSectionEvaluationData(int32 InImplIndex) : ImplIndex(InImplIndex), ForcedTime(TNumericLimits<int32>::Lowest()), Flags(ESectionEvaluationFlags::None)"
  },
  {
    "label": "FSectionEvaluationData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSectionEvaluationData(int32 InImplIndex, FFrameNumber InForcedTime) : ImplIndex(InImplIndex), ForcedTime(InForcedTime), Flags(ESectionEvaluationFlags::None)"
  },
  {
    "label": "FSectionEvaluationData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSectionEvaluationData(int32 InImplIndex, ESectionEvaluationFlags InFlags) : ImplIndex(InImplIndex), ForcedTime(TNumericLimits<int32>::Lowest()), Flags(InFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FSectionEvaluationData A, FSectionEvaluationData B)"
  },
  {
    "label": "IsPreRoll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPreRoll()"
  },
  {
    "label": "IsPostRoll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPostRoll()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FSectionEvaluationData& Data)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticStruct()->SerializeItem(Ar, &Data, nullptr)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSegment()"
  },
  {
    "label": "FMovieSceneSegment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSegment(const TRange<FFrameNumber>& InRange) : Range(InRange) , bAllowEmpty(false)"
  },
  {
    "label": "FMovieSceneSegment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSegment(const TRange<FFrameNumber>& InRange, TArrayView<const FSectionEvaluationData> InApplicationImpls) : Range(InRange) , bAllowEmpty(true)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Impls .)",
    "insertText": "Reserve(InApplicationImpls.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Impls .)",
    "insertText": "Add(Impl)"
  },
  {
    "label": "FMovieSceneSegment()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FMovieSceneSegment(const TRange<FFrameNumber>& InRange, std::initializer_list<FSectionEvaluationData> InApplicationImpls) : FMovieSceneSegment(InRange, MakeArrayView(InApplicationImpls))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMovieSceneSegment& A, const FMovieSceneSegment& B)"
  },
  {
    "label": "CombineWith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CombineWith(const FMovieSceneSegment& OtherSegment)"
  },
  {
    "label": "Hull()",
    "kind": "Method",
    "detail": "Function (Range = TRange<FFrameNumber)",
    "insertText": "Hull(OtherSegment.Range, Range)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FSequencerObjectVersion::GUID)"
  },
  {
    "label": "FromFloatRange()",
    "kind": "Method",
    "detail": "Function (TRange<float> OldFloatRange ; Ar<<OldFloatRange ; Range =)",
    "insertText": "FromFloatRange(OldFloatRange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Ar<<Range ; })",
    "insertText": "if(Ar.CustomVer(FSequencerObjectVersion::GUID) >= FSequencerObjectVersion::EvaluationTree)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Ar<<ID ; Ar<<bAllowEmpty ; } int32 NumStructs = Impls .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<NumStructs ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FSectionEvaluationData Data ; Ar<<Data ; Impls .)",
    "insertText": "Add(Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Ar.IsSaving())"
  }
]