[
  {
    "label": "FTextLocalizationResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLocalizationResource"
  },
  {
    "label": "FLocalizationResourceTextSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalizationResourceTextSource"
  },
  {
    "label": "GetNativeCultureName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Internationalization / ILocalizedTextSource . h \" # include \" Internationalization / LocalizedTextSourceTypes . h \" class FTextLocalizationResource ; class FLocalizationResourceTextSource : public ILocalizedTextSource { public : bool)",
    "insertText": "GetNativeCultureName(const ELocalizedTextSourceCategory InCategory, FString& OutNativeCultureName)"
  },
  {
    "label": "GetLocalizedCultureNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalizedCultureNames(const ELocalizationLoadFlags InLoadFlags, TSet<FString>& OutLocalizedCultureNames)"
  },
  {
    "label": "LoadLocalizedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizedResources(const ELocalizationLoadFlags InLoadFlags, TArrayView<const FString> InPrioritizedCultures, FTextLocalizationResource& InOutNativeResource, FTextLocalizationResource& InOutLocalizedResource)"
  },
  {
    "label": "LoadLocalizedResourcesFromPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizedResourcesFromPaths(TArrayView<const FString> InPrioritizedNativePaths, TArrayView<const FString> InPrioritizedLocalizationPaths, TArrayView<const FString> InGameNativePaths, const ELocalizationLoadFlags InLoadFlags, TArrayView<const FString> InPrioritizedCultures, FTextLocalizationResource& InOutNativeResource, FTextLocalizationResource& InOutLocalizedResource)"
  },
  {
    "label": "RegisterChunkId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterChunkId(const int32 InChunkId)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ChunkIds .)",
    "insertText": "AddUnique(InChunkId)"
  },
  {
    "label": "HasRegisteredChunkId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRegisteredChunkId(const int32 InChunkId)"
  },
  {
    "label": "GetChunkedLocalizationTargets()",
    "kind": "Method",
    "detail": "Function (} TArray<FString>)",
    "insertText": "GetChunkedLocalizationTargets()"
  }
]