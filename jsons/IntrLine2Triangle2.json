[
  {
    "label": "TIntrLine2Triangle2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrLine2Triangle2"
  },
  {
    "label": "GetLine()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include \" LineTypes . h \" # include \" TriangleTypes . h \" # include \" VectorUtil . h \" # include \" Intersection / Intersector1 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrLine2Triangle2 { protected : TLine2<Real> Line ; TTriangle2<Real> Triangle ; public : int Quantity = 0 ; EIntersectionResult Result = EIntersectionResult::NotComputed ; EIntersectionType Type = EIntersectionType::Empty ; TVector2<Real> Point0 ; TVector2<Real> Point1 ; double Param0 ; double Param1 ; TLine2<Real>)",
    "insertText": "GetLine()"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Line = LineIn ; } void)",
    "insertText": "SetTriangle(const TTriangle2<Real>& TriangleIn)"
  },
  {
    "label": "IsSimpleIntersection()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle = TriangleIn ; } bool)",
    "insertText": "IsSimpleIntersection()"
  },
  {
    "label": "TIntrLine2Triangle2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrLine2Triangle2(TLine2<Real> l, TTriangle2<Real> t) : Line(l), Triangle(t)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} TIntrLine2Triangle2*)",
    "insertText": "Compute()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsNormalized(Line.Direction) == false)"
  },
  {
    "label": "TriangleLineRelations()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Empty ; Result = EIntersectionResult::InvalidQuery ; return false ; } TVector<Real> Dist ; FVector3i Sign ; int Positive = 0,Negative = 0,Zero = 0 ;)",
    "insertText": "TriangleLineRelations(Line.Origin, Line.Direction, Triangle, Dist, Sign, Positive, Negative, Zero)"
  },
  {
    "label": "GetInterval()",
    "kind": "Method",
    "detail": "Function (Quantity = 0 ; Type = EIntersectionType::Empty ; } else { TVector2<Real> param ;)",
    "insertText": "GetInterval(Line.Origin, Line.Direction, Triangle, Dist, Sign, param)"
  },
  {
    "label": "intr()",
    "kind": "Method",
    "detail": "Function (TIntersector1<Real>)",
    "insertText": "intr(param[0], param[1], -TMathUtil<Real>::MaxReal, +TMathUtil<Real>::MaxReal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quantity = intr . NumIntersections ;)",
    "insertText": "if(Quantity == 2)"
  },
  {
    "label": "GetIntersection()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Segment ; Param0 = intr .)",
    "insertText": "GetIntersection(0)"
  },
  {
    "label": "GetIntersection()",
    "kind": "Method",
    "detail": "Function (Point0 = Line . Origin + Param0* Line . Direction ; Param1 = intr .)",
    "insertText": "GetIntersection(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Point1 = Line . Origin + Param1* Line . Direction ; } else)",
    "insertText": "if(Quantity == 1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Point0 = Line . Origin + Param0* Line . Direction ; } else { Type = EIntersectionType::Empty ; } })",
    "insertText": "Result(Type != EIntersectionType::Empty)"
  },
  {
    "label": "TriangleLineRelations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TriangleLineRelations(const TVector2<Real>& Origin, const TVector2<Real>& Direction, const TTriangle2<Real>& Tri, TVector<Real>& Dist, FVector3i& Sign, int& Positive, int& Negative, int& Zero, Real Tolerance = TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Positive = 0 ; Negative = 0 ; Zero = 0 ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> diff = Tri . V [ i ] - Origin ; Dist [ i ] =)",
    "insertText": "DotPerp(diff, Direction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Sign [ i ] = 1 ; + + Positive ; } else)",
    "insertText": "if(Dist[i] < -Tolerance)"
  },
  {
    "label": "GetInterval()",
    "kind": "Method",
    "detail": "Function (Sign [ i ] = - 1 ; + + Negative ; } else { Dist [ i ] = 0 . 0 ; Sign [ i ] = 0 ; + + Zero ; } } } bool)",
    "insertText": "GetInterval(const TVector2<Real>& Origin, const TVector2<Real>& Direction, const TTriangle2<Real>& Tri, const TVector<Real>& Dist, const FVector3i& Sign, TVector2<Real>& param)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVector<Real> proj ; int i ;)",
    "insertText": "for(i = 0; i < 3; ++i)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> diff = Tri . V [ i ] - Origin ; proj [ i ] = Direction .)",
    "insertText": "Dot(diff)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} double numer,denom ; int i0,i1 ; int quantity = 0 ;)",
    "insertText": "for(i0 = 2, i1 = 0; i1 < 3; i0 = i1++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (numer = Dist [ i0 ]* proj [ i1 ] - Dist [ i1 ]* proj [ i0 ] ; denom = Dist [ i0 ] - Dist [ i1 ] ; param [ quantity + + ] = numer / denom ; } })",
    "insertText": "if(quantity < 2)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(param[0], param[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} double extraparam = proj [ i ] ;)",
    "insertText": "if(extraparam < param[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (param [ 0 ] = extraparam ; } else)",
    "insertText": "if(extraparam > param[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (param [ 1 ] = extraparam ; } } else { param [ quantity + + ] = proj [ i ] ; } } } })",
    "insertText": "if(!ensureMsgf(quantity > 0, TEXT(\"TIntrLine2Triangle2.GetInterval: need at least one intersection\")))"
  }
]