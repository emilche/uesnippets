[
  {
    "label": "APPLICATIONCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APPLICATIONCORE_API"
  },
  {
    "label": "FMacApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacApplication"
  },
  {
    "label": "FWindowedModeSavedState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowedModeSavedState"
  },
  {
    "label": "FMacWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericWindow . h \" # include \" Templates / SharedPointer . h \" # include \" Mac / CocoaWindow . h \" class FMacWindow : public FGenericWindow,public TSharedFromThis<FMacWindow> { public : ~)",
    "insertText": "FMacWindow()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMacWindow>)",
    "insertText": "Make()"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (FCocoaWindow*)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(class FMacApplication* const Application, const TSharedRef< FGenericWindowDefinition >& InDefinition, const TSharedPtr< FMacWindow >& InParent, const bool bShowImmediately)"
  },
  {
    "label": "OnDisplayReconfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisplayReconfiguration(CGDirectDisplayID Display, CGDisplayChangeSummaryFlags Flags)"
  },
  {
    "label": "OnWindowDidChangeScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDidChangeScreen()"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReshapeWindow(int32 X, int32 Y, int32 Width, int32 Height)"
  },
  {
    "label": "GetFullScreenInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFullScreenInfo(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(int32 X, int32 Y)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(bool bForce = false)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode(EWindowMode::Type NewWindowMode)"
  },
  {
    "label": "GetWindowMode()",
    "kind": "Method",
    "detail": "Function (EWindowMode::Type)",
    "insertText": "GetWindowMode()"
  },
  {
    "label": "IsMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaximized()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "GetRestoredDimensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRestoredDimensions(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "SetWindowFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowFocus()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(const float InOpacity)"
  },
  {
    "label": "IsPointInWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInWindow(int32 X, int32 Y)"
  },
  {
    "label": "GetWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowBorderSize()"
  },
  {
    "label": "GetOSWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetOSWindowHandle()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* const Text)"
  },
  {
    "label": "GetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactor()"
  },
  {
    "label": "SetNativeWindowButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindowButtonsVisibility(bool bVisible)"
  },
  {
    "label": "IsRegularWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegularWindow()"
  },
  {
    "label": "GetDisplayID()",
    "kind": "Method",
    "detail": "Function (const CGDirectDisplayID)",
    "insertText": "GetDisplayID()"
  },
  {
    "label": "UpdateFullScreenState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFullScreenState(bool bToggleFullScreen)"
  },
  {
    "label": "WaitForFullScreenTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForFullScreenTransition()"
  },
  {
    "label": "FWindowedModeSavedState()",
    "kind": "Method",
    "detail": "Function (private : FMacApplication* OwningApplication ; FCocoaWindow* WindowHandle ; CGDirectDisplayID DisplayID ; float CachedOpacity ; struct FWindowedModeSavedState { CGDirectDisplayID CapturedDisplayID ; CGDisplayModeRef DesktopDisplayMode ; int32 WindowLevel ;)",
    "insertText": "FWindowedModeSavedState() : CapturedDisplayID(kCGNullDirectDisplay), DesktopDisplayMode(nullptr), WindowLevel(NSNormalWindowLevel)"
  }
]