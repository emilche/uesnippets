[
  {
    "label": "IElementLocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IElementLocator"
  },
  {
    "label": "AUTOMATIONDRIVER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AUTOMATIONDRIVER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Misc / Timespan . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" class IElementLocator ; struct FDriverWaitResponse { public : enum class EState : uint8 { PASSED,WAIT,FAILED,} ; FDriverWaitResponse)",
    "insertText": "Passed()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Wait()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Wait(FTimespan Timespan)"
  },
  {
    "label": "Failed()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Failed()"
  },
  {
    "label": "FDriverWaitResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDriverWaitResponse(EState InState, FTimespan InNextWait)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (const FTimespan NextWait ; const EState State ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FDriverWaitResponse, FDriverWaitDelegate, const FTimespan&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FDriverWaitConditionDelegate)"
  },
  {
    "label": "InMilliseconds()",
    "kind": "Method",
    "detail": "Function (class FWaitTimeout { public : FWaitTimeout)",
    "insertText": "InMilliseconds(double Value)"
  },
  {
    "label": "InSeconds()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InSeconds(double Value)"
  },
  {
    "label": "InMinutes()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InMinutes(double Value)"
  },
  {
    "label": "InHours()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InHours(double Value)"
  },
  {
    "label": "FWaitTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWaitTimeout(FTimespan InTimespan)"
  },
  {
    "label": "FWaitInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWaitInterval(FTimespan InTimespan)"
  },
  {
    "label": "ElementExists()",
    "kind": "Method",
    "detail": "Function (const FTimespan Timespan ; } ; class Until { public : FDriverWaitDelegate)",
    "insertText": "ElementExists(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementExists()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementExists(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsVisible()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsVisible(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsVisible()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsVisible(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsHidden()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsHidden(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsHidden()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsHidden(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsInteractable()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsInteractable(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsInteractable()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsInteractable(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToBeginning()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToBeginning()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToEnd()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToEnd()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const TFunction<bool()>& Function, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const TFunction<bool()>& Function, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const FDriverWaitConditionDelegate& Delegate, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const FDriverWaitConditionDelegate& Delegate, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Lambda(const TFunction<FDriverWaitResponse(const FTimespan&)>& Value)"
  }
]