[
  {
    "label": "IElementLocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IElementLocator"
  },
  {
    "label": "AUTOMATIONDRIVER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AUTOMATIONDRIVER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AUTOMATIONDRIVER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUTOMATIONDRIVER_API"
  },
  {
    "label": "AUTOMATIONDRIVER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUTOMATIONDRIVER_API"
  },
  {
    "label": "AUTOMATIONDRIVER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUTOMATIONDRIVER_API"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Passed()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Wait()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Wait(FTimespan Timespan)"
  },
  {
    "label": "Failed()",
    "kind": "Method",
    "detail": "Function (FDriverWaitResponse)",
    "insertText": "Failed()"
  },
  {
    "label": "InMilliseconds()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InMilliseconds(double Value)"
  },
  {
    "label": "InSeconds()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InSeconds(double Value)"
  },
  {
    "label": "InMinutes()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InMinutes(double Value)"
  },
  {
    "label": "InHours()",
    "kind": "Method",
    "detail": "Function (FWaitTimeout)",
    "insertText": "InHours(double Value)"
  },
  {
    "label": "FWaitTimeout()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FWaitTimeout(FTimespan InTimespan)"
  },
  {
    "label": "InMilliseconds()",
    "kind": "Method",
    "detail": "Function (FWaitInterval)",
    "insertText": "InMilliseconds(double Value)"
  },
  {
    "label": "InSeconds()",
    "kind": "Method",
    "detail": "Function (FWaitInterval)",
    "insertText": "InSeconds(double Value)"
  },
  {
    "label": "InMinutes()",
    "kind": "Method",
    "detail": "Function (FWaitInterval)",
    "insertText": "InMinutes(double Value)"
  },
  {
    "label": "InHours()",
    "kind": "Method",
    "detail": "Function (FWaitInterval)",
    "insertText": "InHours(double Value)"
  },
  {
    "label": "FWaitInterval()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FWaitInterval(FTimespan InTimespan)"
  },
  {
    "label": "ElementExists()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementExists(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementExists()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementExists(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsVisible()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsVisible(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsVisible()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsVisible(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsHidden()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsHidden(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsHidden()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsHidden(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsInteractable()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsInteractable(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsInteractable()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsInteractable(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToBeginning()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToBeginning()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToEnd()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitTimeout Timeout)"
  },
  {
    "label": "ElementIsScrolledToEnd()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "ElementIsScrolledToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FWaitInterval Interval, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const FDriverWaitConditionDelegate& Delegate, FWaitTimeout Timeout)"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (FDriverWaitDelegate)",
    "insertText": "Condition(const FDriverWaitConditionDelegate& Delegate, FWaitInterval Interval, FWaitTimeout Timeout)"
  }
]