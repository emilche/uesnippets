[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "_InValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InValueT"
  },
  {
    "label": "_OutValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutValueT"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_COPY_H # define _LIBCPP___ALGORITHM_COPY_H # include<__algorithm / unwrap_iter . h> # include<__algorithm / unwrap_range . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__iterator / reverse_iterator . h> # include<__utility / move . h> # include<__utility / pair . h> # include<cstring> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InIter, class _Sent, class _OutIter> inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InIter, _OutIter> __copy_impl(_InIter __first, _Sent __last, _OutIter __result)"
  },
  {
    "label": "_OutIter()",
    "kind": "Method",
    "detail": "Function (* __result =* __first ; + + __first ; + + __result ; } return pair<_InIter,)",
    "insertText": "_OutIter(std::move(__first), std::move(__result))"
  },
  {
    "label": "__copy_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _InValueT,class _OutValueT,class = __enable_if_t<is_same<remove_const<_InValueT>::type,_OutValueT>::value&& is_trivially_copy_assignable<_OutValueT>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InValueT*,_OutValueT*>)",
    "insertText": "__copy_impl(_InValueT* __first, _InValueT* __last, _OutValueT* __result)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t __n = static_cast<)",
    "insertText": "size_t(__last - __first)"
  },
  {
    "label": "__copy_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _InIter,class _OutIter,__enable_if_t<is_same<remove_const<__iter_value_type<_InIter>>::type,__iter_value_type<_OutIter>>::value&& __is_cpp17_contiguous_iterator<_InIter::iterator_type>::value&& __is_cpp17_contiguous_iterator<_OutIter::iterator_type>::value&& is_trivially_copy_assignable<__iter_value_type<_OutIter>>::value&& __is_reverse_iterator<_InIter>::value&& __is_reverse_iterator<_OutIter>::value,int> = 0> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InIter,_OutIter>)",
    "insertText": "__copy_impl(_InIter __first, _InIter __last, _OutIter __result)"
  },
  {
    "label": "__unwrap_iter()",
    "kind": "Method",
    "detail": "Function (auto __first_base =)",
    "insertText": "__unwrap_iter(__first.base())"
  },
  {
    "label": "__unwrap_iter()",
    "kind": "Method",
    "detail": "Function (auto __last_base =)",
    "insertText": "__unwrap_iter(__last.base())"
  },
  {
    "label": "__unwrap_iter()",
    "kind": "Method",
    "detail": "Function (auto __result_base =)",
    "insertText": "__unwrap_iter(__result.base())"
  },
  {
    "label": "__result_base()",
    "kind": "Method",
    "detail": "Function (auto __result_first =)",
    "insertText": "__result_base(__first_base - __last_base)"
  },
  {
    "label": "__copy_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__copy_impl(__last_base, __first_base, __result_first)"
  },
  {
    "label": "__enable_if_t()",
    "kind": "Method",
    "detail": "Function (} template<class _InIter,class _Sent,class _OutIter,)",
    "insertText": "__enable_if_t(is_copy_constructible<_InIter>::value && is_copy_constructible<_Sent>::value && is_copy_constructible<_OutIter>::value), int> = 0 > inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InIter, _OutIter> __copy(_InIter __first, _Sent __last, _OutIter __result)"
  },
  {
    "label": "__copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InIter,class _Sent,class _OutIter,__enable_if_t<is_copy_constructible<_InIter>::value&& is_copy_constructible<_Sent>::value&& is_copy_constructible<_OutIter>::value,int> = 0> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_InIter,_OutIter>)",
    "insertText": "__copy(_InIter __first, _Sent __last, _OutIter __result)"
  },
  {
    "label": "__unwrap_range()",
    "kind": "Method",
    "detail": "Function (auto __range =)",
    "insertText": "__unwrap_range(__first, __last)"
  },
  {
    "label": "__copy_impl()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "__copy_impl(std::move(__range.first), std::move(__range.second), std::__unwrap_iter(__result))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _OutputIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  }
]