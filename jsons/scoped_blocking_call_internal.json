[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "OnlyObservedThreadsTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnlyObservedThreadsTag"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedMonitoredCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMonitoredCall"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EnableIOJankMonitoringForProcess()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "EnableIOJankMonitoringForProcess(IOJankReportingCallback,\n                                                  OnlyObservedThreadsForTest)"
  },
  {
    "label": "SetBlockingObserverForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockingObserverForCurrentThread(\n    BlockingObserver* blocking_observer)"
  },
  {
    "label": "ClearBlockingObserverForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBlockingObserverForCurrentThread()"
  },
  {
    "label": "IOJankMonitoringWindow()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "IOJankMonitoringWindow(TimeTicks start_time)"
  },
  {
    "label": "CancelMonitoringForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelMonitoringForTesting()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "MonitorNextJankWindowIfNecessary()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<IOJankMonitoringWindow>)",
    "insertText": "MonitorNextJankWindowIfNecessary(\n      TimeTicks recent_now)"
  },
  {
    "label": "OnBlockingCallCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlockingCallCompleted(TimeTicks call_start, TimeTicks call_end)"
  },
  {
    "label": "AddJank()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddJank(int local_jank_start_index, int num_janky_intervals)"
  },
  {
    "label": "UncheckedScopedBlockingCall()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UncheckedScopedBlockingCall(const Location& from_here,\n                                       BlockingType blocking_type,\n                                       BlockingCallType blocking_call_type)"
  }
]