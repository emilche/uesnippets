[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchive"
  },
  {
    "label": "FStructuredArchiveArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveArray"
  },
  {
    "label": "FStructuredArchiveChildReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveChildReader"
  },
  {
    "label": "FStructuredArchiveMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveMap"
  },
  {
    "label": "FStructuredArchiveRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveRecord"
  },
  {
    "label": "FStructuredArchiveSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveSlot"
  },
  {
    "label": "FStructuredArchiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveStream"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FLazyObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLazyObjectPtr"
  },
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FSoftObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPtr"
  },
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "TEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnum"
  },
  {
    "label": "TEnumAsByte",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnumAsByte"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" Formatters / BinaryArchiveFormatter . h \" # include \" Misc / Build . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchiveFwd . h \" # include \" Serialization / StructuredArchiveNameHelpers . h \" # include \" Serialization / StructuredArchiveSlotBase . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsEnumClass . h \" class FName ; class FString ; class FStructuredArchive ; class FStructuredArchiveArray ; class FStructuredArchiveChildReader ; class FStructuredArchiveMap ; class FStructuredArchiveRecord ; class FStructuredArchiveSlot ; class FStructuredArchiveStream ; class FText ; class UObject ; struct FLazyObjectPtr ; struct FObjectPtr ; struct FSoftObjectPath ; struct FSoftObjectPtr ; struct FWeakObjectPtr ; template<class TEnum> class TEnumAsByte ; namespace UE::StructuredArchive::Private { FArchiveFormatterType&)",
    "insertText": "GetFormatterImpl(FStructuredArchive& StructuredArchive)"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (} class FStructuredArchiveSlot final : public UE::StructuredArchive::Private::FSlotBase { public : FStructuredArchiveRecord)",
    "insertText": "EnterRecord()"
  },
  {
    "label": "EnterArray()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveArray)",
    "insertText": "EnterArray(int32& Num)"
  },
  {
    "label": "EnterStream()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveStream)",
    "insertText": "EnterStream()"
  },
  {
    "label": "EnterMap()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveMap)",
    "insertText": "EnterMap(int32& Num)"
  },
  {
    "label": "EnterAttribute()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveSlot)",
    "insertText": "EnterAttribute(FArchiveFieldName AttributeName)"
  },
  {
    "label": "TryEnterAttribute()",
    "kind": "Method",
    "detail": "Function (TOptional<FStructuredArchiveSlot>)",
    "insertText": "TryEnterAttribute(FArchiveFieldName AttributeName, bool bEnterWhenWriting)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(uint8& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(uint16& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(uint32& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(uint64& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(int8& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(int16& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(int32& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(int64& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(float& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(double& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(bool& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FString& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FName& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(UObject*& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FText& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FWeakObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FSoftObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FLazyObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "operator(TEnumAsByte<T>& Value)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Tmp(uint8)Value.GetValue()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (* this<<Tmp ;)",
    "insertText": "Value(T)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<EnumType,std::enable_if_t<TIsEnumClass<EnumType>::Value,int> = 0> void)",
    "insertText": "operator(EnumType& Value)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "this(__underlying_type(EnumType)&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "operator(UE::StructuredArchive::Private::TNamedAttribute<T> Item)"
  },
  {
    "label": "EnterAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterAttribute(Item.Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "operator(UE::StructuredArchive::Private::TOptionalNamedAttribute<T> Item)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Attribute .)",
    "insertText": "GetValue()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} else { Item . Value = Item . Default ; } } void)",
    "insertText": "Serialize(TArray<uint8>& Data)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* Data, uint64 DataSize)"
  },
  {
    "label": "IsFilled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilled()"
  },
  {
    "label": "EnterField()",
    "kind": "Method",
    "detail": "Function (private : FStructuredArchive ; FStructuredArchiveChildReader ; FStructuredArchiveSlot ; FStructuredArchiveRecord ; FStructuredArchiveArray ; FStructuredArchiveStream ; FStructuredArchiveMap ; using UE::StructuredArchive::Private::FSlotBase::FSlotBase ; } ; class FStructuredArchiveRecord final : public UE::StructuredArchive::Private::FSlotBase { public : FStructuredArchiveSlot)",
    "insertText": "EnterField(FArchiveFieldName Name)"
  },
  {
    "label": "EnterRecord()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveRecord)",
    "insertText": "EnterRecord(FArchiveFieldName Name)"
  },
  {
    "label": "EnterArray()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveArray)",
    "insertText": "EnterArray(FArchiveFieldName Name, int32& Num)"
  },
  {
    "label": "EnterStream()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveStream)",
    "insertText": "EnterStream(FArchiveFieldName Name)"
  },
  {
    "label": "EnterMap()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveMap)",
    "insertText": "EnterMap(FArchiveFieldName Name, int32& Num)"
  },
  {
    "label": "TryEnterField()",
    "kind": "Method",
    "detail": "Function (TOptional<FStructuredArchiveSlot>)",
    "insertText": "TryEnterField(FArchiveFieldName Name, bool bEnterForSaving)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> FStructuredArchiveRecord&)",
    "insertText": "operator(UE::StructuredArchive::Private::TNamedValue<T> Item)"
  },
  {
    "label": "EnterField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterField(Item.Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> FStructuredArchiveArray&)",
    "insertText": "operator(T& Item)"
  },
  {
    "label": "EnterElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterElement()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FStructuredArchive ; FStructuredArchiveSlot ; using UE::StructuredArchive::Private::FSlotBase::FSlotBase ; } ; template<T> void)",
    "insertText": "operator(FStructuredArchiveSlot Slot, TArray<T>& InArray)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumElements = InArray .)",
    "insertText": "Num()"
  },
  {
    "label": "EnterArray()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveArray Array = Slot .)",
    "insertText": "EnterArray(NumElements)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (InArray .)",
    "insertText": "SetNum(NumElements)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 ElementIndex = 0; ElementIndex < NumElements; ++ElementIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ElementSlot<<InArray [ ElementIndex ] ; } } template<> void)",
    "insertText": "operator(FStructuredArchiveSlot Slot, TArray<uint8>& InArray)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Slot .)",
    "insertText": "Serialize(InArray)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).EnterArray(Num)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).EnterMap(Num)"
  },
  {
    "label": "EnterAttribute()",
    "kind": "Method",
    "detail": "Function (} FStructuredArchiveSlot)",
    "insertText": "EnterAttribute(FArchiveFieldName FieldName)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).EnterAttribute(FieldName)"
  },
  {
    "label": "TryEnterAttribute()",
    "kind": "Method",
    "detail": "Function (} TOptional<FStructuredArchiveSlot>)",
    "insertText": "TryEnterAttribute(FArchiveFieldName FieldName, bool bEnterWhenWriting)"
  },
  {
    "label": "FStructuredArchiveSlot()",
    "kind": "Method",
    "detail": "Function (} else { return TOptional<)",
    "insertText": "FStructuredArchiveSlot()"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).Serialize(Value)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).Serialize(Data)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).Serialize(Data, DataSize)"
  },
  {
    "label": "TryEnterField()",
    "kind": "Method",
    "detail": "Function (} TOptional<FStructuredArchiveSlot>)",
    "insertText": "TryEnterField(FArchiveFieldName Name, bool bEnterWhenWriting)"
  },
  {
    "label": "EnterElement()",
    "kind": "Method",
    "detail": "Function (} FStructuredArchiveSlot)",
    "insertText": "EnterElement(FString& Name)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (UE::StructuredArchive::)",
    "insertText": "GetFormatterImpl(StructuredArchive).EnterMapElement(Name)"
  }
]