[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FLinkerNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerNull"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FObjectPostSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPostSaveContext"
  },
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMetaData"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMD5Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMD5Hash"
  },
  {
    "label": "FPackageSaveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageSaveInfo"
  },
  {
    "label": "FSavePackageArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageArgs"
  },
  {
    "label": "FCookDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDependency"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSavePackageResultStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageResultStruct"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FAdditionalInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalInfo"
  },
  {
    "label": "FUnsafeLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnsafeLinkerLoad"
  },
  {
    "label": "FSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveContext"
  },
  {
    "label": "FAsyncPackage2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage2"
  },
  {
    "label": "FSavePackageResultStruct()",
    "kind": "Method",
    "detail": "Function (uint32 SerializedPackageFlags ; TPimplPtr<FLinkerSave> LinkerSave ; TArray<FAssetData> SavedAssets ; TArray<FName> ImportPackages ; TArray<FName> SoftPackageReferences ; # if WITH_EDITOR TArray<UE::Cook::FCookDependency> CookDependencies ; # endif)",
    "insertText": "FSavePackageResultStruct()"
  },
  {
    "label": "FSavePackageResultStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageResultStruct(ESavePackageResult InResult)"
  },
  {
    "label": "FSavePackageResultStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageResultStruct(ESavePackageResult InResult, int64 InTotalFileSize)"
  },
  {
    "label": "FSavePackageResultStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageResultStruct(ESavePackageResult InResult, int64 InTotalFileSize, uint32 InSerializedPackageFlags, TPimplPtr<FLinkerSave> Linker = nullptr)"
  },
  {
    "label": "FSavePackageResultStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSavePackageResultStruct(FSavePackageResultStruct&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSavePackageResultStruct&)",
    "insertText": "operator(FSavePackageResultStruct&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSavePackageResultStruct& Other)"
  },
  {
    "label": "UPackage()",
    "kind": "Method",
    "detail": "Function (} ; public :)",
    "insertText": "UPackage(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPackageDirtyStateChanged, class UPackage*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPackageSaved, const FString&, UObject*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnPackageSavedWithContext, const FString&, UPackage*, FObjectPostSaveContext)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPackageMarkedDirty, class UPackage*, bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPreSavePackage, class UPackage*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPreSavePackageWithContext, class UPackage*, FObjectPreSaveContext)"
  },
  {
    "label": "GetHasBeenEndLoaded()",
    "kind": "Method",
    "detail": "Function (FOnPackageSavedWithContext PackageSavedWithContextEvent ; FOnPackageDirtyStateChanged PackageDirtyStateChangedEvent ; FOnPackageMarkedDirty PackageMarkedDirtyEvent ; private : uint8 bDirty : 1 ; # if WITH_EDITORONLY_DATA uint8 bIsDynamicPIEPackagePending : 1 ; # endif public : uint8 bHasBeenFullyLoaded : 1 ; uint8 bCanBeImported : 1 ; # if WITH_EDITORONLY_DATA bool bIsCookedForEditor { false } ; private : std::atomic<bool> bLoadedByEditorPropertiesOnly { false } ; std::atomic<bool> bHasBeenEndLoaded { false } ; public : bool)",
    "insertText": "GetHasBeenEndLoaded()"
  },
  {
    "label": "SetHasBeenEndLoaded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasBeenEndLoaded(bool bValue)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (bHasBeenEndLoaded .)",
    "insertText": "store(bValue, std::memory_order_release)"
  },
  {
    "label": "IsNameStableForNetworking()",
    "kind": "Method",
    "detail": "Function (# endif # endif uint32 PackageFlagsPrivate ; FPackageId PackageId ; FPackagePath LoadedPath ; # if ! UE_BUILD_SHIPPING float LoadTime ; # endif struct FAdditionalInfo { FPackageFileVersion LinkerPackageVersion = GPackageFileUEVersion ; int32 LinkerLicenseeVersion = GPackageFileLicenseeUEVersion ; FCustomVersionContainer LinkerCustomVersion ; FLinkerLoad* LinkerLoad = nullptr ; uint64 FileSize = 0 ; TUniquePtr<FWorldTileInfo> WorldTileInfo ; } ; TUniquePtr<FAdditionalInfo> AdditionalInfo ; # if WITH_METADATA class UMetaData* MetaData ; # endif # if WITH_EDITORONLY_DATA TUniquePtr<FThumbnailMap> ThumbnailMap ; int32 PIEInstanceID ; # endif # if WITH_RELOAD TArray<UFunction*> Delegates ; # endif public : bool)",
    "insertText": "IsNameStableForNetworking()"
  },
  {
    "label": "IsDynamicPIEPackagePending()",
    "kind": "Method",
    "detail": "Function (bIsDynamicPIEPackagePending = bInIsDynamicPIEPackagePending ; } bool)",
    "insertText": "IsDynamicPIEPackagePending()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "IsAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsset()"
  },
  {
    "label": "SetLinker()",
    "kind": "Method",
    "detail": "Function (# endif private : class FLinkerLoad ; class FUnsafeLinkerLoad ; class FSaveContext ; struct FAsyncPackage2 ; void)",
    "insertText": "SetLinker(FLinkerLoad* InLinker)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Package/AdditionalInfo\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerLoad = InLinker ; } else)",
    "insertText": "if(InLinker != nullptr)"
  },
  {
    "label": "FAdditionalInfo()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo = MakeUnique<)",
    "insertText": "FAdditionalInfo()"
  },
  {
    "label": "SetLinkerPackageVersion()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerLoad = InLinker ; } } void)",
    "insertText": "SetLinkerPackageVersion(FPackageFileVersion InVersion)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerPackageVersion =)",
    "insertText": "MoveTemp(InVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InVersion != GPackageFileUEVersion)"
  },
  {
    "label": "SetLinkerLicenseeVersion()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetLinkerLicenseeVersion(int32 InVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerLicenseeVersion = InVersion ; } else)",
    "insertText": "if(InVersion != GPackageFileLicenseeUEVersion)"
  },
  {
    "label": "SetLinkerCustomVersions()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerLicenseeVersion = InVersion ; } } void)",
    "insertText": "SetLinkerCustomVersions(FCustomVersionContainer InVersions)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerCustomVersion =)",
    "insertText": "MoveTemp(InVersions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!InVersions.GetAllVersions().IsEmpty())"
  },
  {
    "label": "SetFileSize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetFileSize(int64 InFileSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> FileSize = InFileSize ; } else)",
    "insertText": "if(InFileSize != 0)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> FileSize =)",
    "insertText": "MoveTemp(InFileSize)"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetMetaData(UMetaData* InMetaData)"
  },
  {
    "label": "GetPIEInstanceID()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA MetaData = InMetaData ; # endif } public : int32)",
    "insertText": "GetPIEInstanceID()"
  },
  {
    "label": "SetPIEInstanceID()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return PIEInstanceID ; # else return INDEX_NONE ; # endif } void)",
    "insertText": "SetPIEInstanceID(int32 InPIEInstanceID)"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA PIEInstanceID = InPIEInstanceID ; # endif } FLinkerLoad*)",
    "insertText": "GetLinker()"
  },
  {
    "label": "GetLinkerPackageVersion()",
    "kind": "Method",
    "detail": "Function (} const FPackageFileVersion&)",
    "insertText": "GetLinkerPackageVersion()"
  },
  {
    "label": "GetLinkerLicenseeVersion()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLinkerLicenseeVersion()"
  },
  {
    "label": "GetLinkerCustomVersions()",
    "kind": "Method",
    "detail": "Function (} const FCustomVersionContainer&)",
    "insertText": "GetLinkerCustomVersions()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (LinkerCustomVersion : EmptyVersions)",
    "insertText": "IsValid()"
  },
  {
    "label": "EmptyLinkerCustomVersion()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "EmptyLinkerCustomVersion()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> LinkerCustomVersion .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetLoadTime()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "SetLoadTime(float InLoadTime)"
  },
  {
    "label": "GetLoadTime()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING LoadTime = InLoadTime ; # endif } float)",
    "insertText": "GetLoadTime()"
  },
  {
    "label": "ClearDirtyFlag()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING return LoadTime ; # else return 0 . 0 f ; # endif } void)",
    "insertText": "ClearDirtyFlag()"
  },
  {
    "label": "SetDirtyFlag()",
    "kind": "Method",
    "detail": "Function (bDirty = false ; } void)",
    "insertText": "SetDirtyFlag(bool bIsDirty)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "MarkAsUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsUnloaded()"
  },
  {
    "label": "SetPackageFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageFlags(PKG_NewlyCreated)"
  },
  {
    "label": "SetFileSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileSize(0)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (bHasBeenFullyLoaded = false ;)",
    "insertText": "ClearFlags(RF_WasLoaded)"
  },
  {
    "label": "MarkAsFullyLoaded()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "MarkAsFullyLoaded()"
  },
  {
    "label": "IsFullyLoaded()",
    "kind": "Method",
    "detail": "Function (bHasBeenFullyLoaded = true ; } bool)",
    "insertText": "IsFullyLoaded()"
  },
  {
    "label": "FullyLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FullyLoad()"
  },
  {
    "label": "GetLoadedPath()",
    "kind": "Method",
    "detail": "Function (const FPackagePath&)",
    "insertText": "GetLoadedPath()"
  },
  {
    "label": "SetLoadedPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedPath(const FPackagePath& PackagePath)"
  },
  {
    "label": "SetCanBeImportedFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanBeImportedFlag(bool bInCanBeImported)"
  },
  {
    "label": "CanBeImported()",
    "kind": "Method",
    "detail": "Function (bCanBeImported = bInCanBeImported ; } bool)",
    "insertText": "CanBeImported()"
  },
  {
    "label": "ThisContainsMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThisContainsMap()"
  },
  {
    "label": "SetPackageFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageFlags(PKG_ContainsMap)"
  },
  {
    "label": "ContainsMap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsMap()"
  },
  {
    "label": "ThisRequiresLocalizationGather()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ThisRequiresLocalizationGather(bool Value)"
  },
  {
    "label": "SetPackageFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageFlags(PKG_RequiresLocalizationGather)"
  },
  {
    "label": "ClearPackageFlags()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ClearPackageFlags(PKG_RequiresLocalizationGather)"
  },
  {
    "label": "RequiresLocalizationGather()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "RequiresLocalizationGather()"
  },
  {
    "label": "SetPackageFlagsTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPackageFlagsTo(uint32 NewFlags)"
  },
  {
    "label": "SetPackageFlags()",
    "kind": "Method",
    "detail": "Function (PackageFlagsPrivate = NewFlags ; } void)",
    "insertText": "SetPackageFlags(uint32 NewFlags)"
  },
  {
    "label": "SetPackageFlagsTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageFlagsTo(PackageFlagsPrivate | NewFlags)"
  },
  {
    "label": "ClearPackageFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearPackageFlags(uint32 NewFlags)"
  },
  {
    "label": "SetPackageFlagsTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageFlagsTo(PackageFlagsPrivate & ~NewFlags)"
  },
  {
    "label": "HasAnyPackageFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyPackageFlags(uint32 FlagsToCheck)"
  },
  {
    "label": "HasAllPackagesFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllPackagesFlags(uint32 FlagsToCheck)"
  },
  {
    "label": "GetPackageFlags()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPackageFlags()"
  },
  {
    "label": "SetIsExternallyReferenceable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsExternallyReferenceable(bool bValue)"
  },
  {
    "label": "ClearPackageFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPackageFlags(PKG_NotExternallyReferenceable)"
  },
  {
    "label": "SetPackageFlags()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetPackageFlags(PKG_NotExternallyReferenceable)"
  },
  {
    "label": "HasThumbnailMap()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_EDITORONLY_DATA bool)",
    "insertText": "HasThumbnailMap()"
  },
  {
    "label": "GetThumbnailMap()",
    "kind": "Method",
    "detail": "Function (} const FThumbnailMap&)",
    "insertText": "GetThumbnailMap()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ThumbnailMap =)",
    "insertText": "MoveTemp(InThumbnailMap)"
  },
  {
    "label": "GetPersistentGuid()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetPersistentGuid()"
  },
  {
    "label": "GetSavedHash()",
    "kind": "Method",
    "detail": "Function (PersistentGuid = NewPersistentGuid ; } FIoHash)",
    "insertText": "GetSavedHash()"
  },
  {
    "label": "SetSavedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSavedHash(const FIoHash& InSavedHash)"
  },
  {
    "label": "GetReloadDelegates()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_RELOAD const TArray<UFunction*>&)",
    "insertText": "GetReloadDelegates()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Delegates =)",
    "insertText": "MoveTemp(InDelegates)"
  },
  {
    "label": "GetWorldTileInfo()",
    "kind": "Method",
    "detail": "Function (} # endif FWorldTileInfo*)",
    "insertText": "GetWorldTileInfo()"
  },
  {
    "label": "SetWorldTileInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldTileInfo(TUniquePtr<FWorldTileInfo> InWorldTileInfo)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AdditionalInfo -> WorldTileInfo =)",
    "insertText": "MoveTemp(InWorldTileInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InWorldTileInfo.IsValid())"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (# if ! UE_STRIP_DEPRECATED_PROPERTIES return Guid ; # else return)",
    "insertText": "FGuid()"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (# if ! UE_STRIP_DEPRECATED_PROPERTIES Guid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "GetFileSize()",
    "kind": "Method",
    "detail": "Function (# if ! UE_STRIP_DEPRECATED_PROPERTIES Guid = NewGuid ; # endif } # endif int64)",
    "insertText": "GetFileSize()"
  },
  {
    "label": "GetChunkIDs()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "GetChunkIDs()"
  },
  {
    "label": "SetChunkIDs()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return ChunkIDs ; # else TArray<int32> Dummy ; return Dummy ; # endif } void)",
    "insertText": "SetChunkIDs(const TArray<int32>& InChunkIDs)"
  },
  {
    "label": "GetPackageId()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA ChunkIDs = InChunkIDs ; # endif } FPackageId)",
    "insertText": "GetPackageId()"
  },
  {
    "label": "GetPackageIdToLoad()",
    "kind": "Method",
    "detail": "Function (PackageId = InPackageId ; } FPackageId)",
    "insertText": "GetPackageIdToLoad()"
  },
  {
    "label": "FindAssetInPackage()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "FindAssetInPackage(EObjectFlags RequiredTopLevelFlags = RF_NoFlags)"
  },
  {
    "label": "GetExternalPackages()",
    "kind": "Method",
    "detail": "Function (TArray<UPackage*>)",
    "insertText": "GetExternalPackages()"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetaData()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA return MetaData ! = nullptr ; # else return false ; # endif } class UMetaData*)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (FSavePackageResultStruct)",
    "insertText": "Save(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename, const FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "SaveConcurrent()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "SaveConcurrent(TArrayView<FPackageSaveInfo> InPackages, const FSavePackageArgs& SaveArgs, TArray<FSavePackageResultStruct>& OutResults)"
  },
  {
    "label": "SavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackage(UPackage* InOuter, UObject* InAsset, const TCHAR* Filename, const FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "WaitForAsyncFileWrites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncFileWrites()"
  },
  {
    "label": "HasAsyncFileWrites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAsyncFileWrites()"
  },
  {
    "label": "IsEmptyPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyPackage(UPackage* Package, const UObject* LastReferencer = NULL)"
  },
  {
    "label": "DeclareIntrinsicUPackageMembers()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DeclareIntrinsicUPackageMembers()"
  },
  {
    "label": "Save2()",
    "kind": "Method",
    "detail": "Function (FSavePackageResultStruct)",
    "insertText": "Save2(UPackage* InPackage, UObject* InAsset, const TCHAR* InFilename, const FSavePackageArgs& SaveArgs)"
  }
]