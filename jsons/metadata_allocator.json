[
  {
    "label": "MetadataAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetadataAllocator"
  },
  {
    "label": "AllocatedOnPCScanMetadataPartition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocatedOnPCScanMetadataPartition"
  },
  {
    "label": "PCScanMetadataDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PCScanMetadataDeleter"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_METADATA_ALLOCATOR_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_METADATA_ALLOCATOR_H_ # include<utility> # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_root . h \" namespace partition_alloc::internal {)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) ThreadSafePartitionRoot& PCScanMetadataAllocator()"
  },
  {
    "label": "ReinitPCScanMetadataAllocatorForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitPCScanMetadataAllocatorForTesting()"
  },
  {
    "label": "MetadataAllocator()",
    "kind": "Method",
    "detail": "Function (template<T> class MetadataAllocator { public : using value_type = T ;)",
    "insertText": "MetadataAllocator()"
  },
  {
    "label": "MetadataAllocator()",
    "kind": "Method",
    "detail": "Function (template<U>)",
    "insertText": "MetadataAllocator(const MetadataAllocator<U>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> MetadataAllocator&)",
    "insertText": "operator(const MetadataAllocator<U>&)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} value_type*)",
    "insertText": "allocate(size_t size)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(value_type* ptr, size_t size)"
  },
  {
    "label": "PCScanMetadataAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCScanMetadataAllocator().FreeNoHooks(ptr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } ; struct AllocatedOnPCScanMetadataPartition { void* operator)",
    "insertText": "new(size_t size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* ptr)"
  },
  {
    "label": "MakePCScanMetadata()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,. . . Args> T*)",
    "insertText": "MakePCScanMetadata(Args&&... args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto* memory = static_cast<)",
    "insertText": "T(PCScanMetadataAllocator().AllocWithFlagsNoHooks( 0, sizeof(T), PartitionPageSize()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct PCScanMetadataDeleter final { void)",
    "insertText": "operator()(void* ptr)"
  }
]