[
  {
    "label": "MCSymbolCOFF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolCOFF"
  },
  {
    "label": "SymbolFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolFlags"
  },
  {
    "label": "MCSymbolCOFF()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSYMBOLCOFF_H # define LLVM_MC_MCSYMBOLCOFF_H # include \" llvm / MC / MCSymbol . h \" namespace llvm { class MCSymbolCOFF : public MCSymbol { uint16_t Type ; enum SymbolFlags : uint16_t { SF_ClassMask = 0 x00FF,SF_ClassShift = 0,SF_WeakExternal = 0 x0100,SF_SafeSEH = 0 x0200,} ; public :)",
    "insertText": "MCSymbolCOFF(const StringMapEntry<bool> *Name, bool isTemporary) : MCSymbol(SymbolKindCOFF, Name, isTemporary), Type(0)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "getType()"
  },
  {
    "label": "getClass()",
    "kind": "Method",
    "detail": "Function (Type = Ty ; } uint16_t)",
    "insertText": "getClass()"
  },
  {
    "label": "setClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setClass(uint16_t StorageClass)"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(StorageClass << SF_ClassShift, SF_ClassMask)"
  },
  {
    "label": "isWeakExternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeakExternal()"
  },
  {
    "label": "setIsWeakExternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsWeakExternal()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_WeakExternal, SF_WeakExternal)"
  },
  {
    "label": "isSafeSEH()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSafeSEH()"
  },
  {
    "label": "setIsSafeSEH()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsSafeSEH()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_SafeSEH, SF_SafeSEH)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const MCSymbol *S)"
  }
]