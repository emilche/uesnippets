[
  {
    "label": "IHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpRequest"
  },
  {
    "label": "FSlackIncomingWebhook",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlackIncomingWebhook"
  },
  {
    "label": "FSlackMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlackMessage"
  },
  {
    "label": "FSlackIncomingWebhookInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlackIncomingWebhookInterface"
  },
  {
    "label": "FSlackIncomingWebhookInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / UnrealString . h \" # include \" Interfaces / IHttpRequest . h \" # include \" ISlackIncomingWebhookInterface . h \" class IHttpRequest ; struct FSlackIncomingWebhook ; struct FSlackMessage ; class FSlackIncomingWebhookInterface : public ISlackIncomingWebhookInterface { public : ~)",
    "insertText": "FSlackIncomingWebhookInterface()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendMessage(const FSlackIncomingWebhook& InWebhook, const FSlackMessage& InMessage)"
  },
  {
    "label": "CreateHttpRequest()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<IHttpRequest,ESPMode::ThreadSafe>)",
    "insertText": "CreateHttpRequest()"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPayload(const FSlackIncomingWebhook& InWebhook, const FSlackMessage& InMessage, TArray<uint8>& OutPayload)"
  },
  {
    "label": "JsonEncode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "JsonEncode(const FString& InString)"
  }
]