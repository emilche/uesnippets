[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IFrameProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFrameProvider"
  },
  {
    "label": "IThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IThreadProvider"
  },
  {
    "label": "IEditableCounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounterProvider"
  },
  {
    "label": "IEditableCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCounter"
  },
  {
    "label": "FCsvProfilerAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfilerAnalyzer"
  },
  {
    "label": "ECsvOpType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECsvOpType"
  },
  {
    "label": "FStatSeriesValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatSeriesValue"
  },
  {
    "label": "FStatSeriesDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatSeriesDefinition"
  },
  {
    "label": "FStatSeriesInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatSeriesInstance"
  },
  {
    "label": "FTimingMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingMarker"
  },
  {
    "label": "FThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadState"
  },
  {
    "label": "FCsvProfilerAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" # include \" Containers / Map . h \" # include \" Model / CsvProfilerProviderPrivate . h \" # include \" ProfilingDebugging / MiscTrace . h \" namespace TraceServices { class IAnalysisSession ; class IFrameProvider ; class IThreadProvider ; class IEditableCounterProvider ; class IEditableCounter ; class FCsvProfilerAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FCsvProfilerAnalyzer(IAnalysisSession& Session, FCsvProfilerProvider& CsvProfilerProvider, IEditableCounterProvider& EditableCounterProvider, const IFrameProvider& FrameProvider, const IThreadProvider& ThreadProvider)"
  },
  {
    "label": "FCsvProfilerAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCsvProfilerAnalyzer()"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "FStatSeriesValue()",
    "kind": "Method",
    "detail": "Function (private : enum : uint16 { RouteId_RegisterCategory,RouteId_DefineInlineStat,RouteId_DefineDeclaredStat,RouteId_BeginStat,RouteId_EndStat,RouteId_BeginExclusiveStat,RouteId_EndExclusiveStat,RouteId_CustomStatInt,RouteId_CustomStatFloat,RouteId_Event,RouteId_Metadata,RouteId_BeginCapture,RouteId_EndCapture,} ; enum ECsvOpType { CsvOpType_Set,CsvOpType_Min,CsvOpType_Max,CsvOpType_Accumulate,} ; union FStatSeriesID { struct { uint64 IsFName : 1 ; uint64 IsCountStat : 1 ; uint64 CategoryIndex : 1 1 ; uint64 FNameOrIndex : 5 1 ; } Fields ; uint64 Hash ; } ; struct FStatSeriesValue {)",
    "insertText": "FStatSeriesValue()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Value . AsInt = 0 ; } union { int64 AsInt ; double AsDouble ; } Value ; bool bIsValid = false ; } ; struct FStatSeriesDefinition { const TCHAR* Name = nullptr ; int32 CategoryIndex = - 1 ; int32 ColumnIndex = - 1 ; } ; struct FStatSeriesInstance { uint64 ProviderHandle =)",
    "insertText": "uint64(-1)"
  },
  {
    "label": "GetThreadState()",
    "kind": "Method",
    "detail": "Function (IEditableCounter* Counter = nullptr ; uint32 CurrentFrame = 0 ; FStatSeriesValue CurrentValue ; int64 CurrentCount = 0 ; ECsvStatSeriesType Type = CsvStatSeriesType_CustomStatInt ; ETraceFrameType FrameType = TraceFrameType_Game ; } ; struct FTimingMarker { uint64 StatId = 0 ; uint64 Cycle = 0 ; bool bIsBegin = false ; bool bIsExclusive = false ; bool bIsExclusiveInsertedMarker = false ; } ; struct FThreadState { TArray<FTimingMarker> MarkerStack ; TArray<FTimingMarker> ExclusiveMarkerStack ; ETraceFrameType FrameType = TraceFrameType_Game ; TArray<FStatSeriesInstance*> StatSeries ; FString ThreadName ; } ; FThreadState&)",
    "insertText": "GetThreadState(uint32 ThreadId)"
  },
  {
    "label": "CreateStatSeries()",
    "kind": "Method",
    "detail": "Function (FStatSeriesDefinition*)",
    "insertText": "CreateStatSeries(const TCHAR* Name, int32 CategoryIndex)"
  },
  {
    "label": "DefineStatSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineStatSeries(uint64 StatId, const TCHAR* Name, int32 CategoryIndex, bool bIsInline)"
  },
  {
    "label": "GetStatSeriesName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetStatSeriesName(const FStatSeriesDefinition* Definition, ECsvStatSeriesType Type, FThreadState& ThreadState, bool bIsCount)"
  },
  {
    "label": "GetStatSeries()",
    "kind": "Method",
    "detail": "Function (FStatSeriesInstance&)",
    "insertText": "GetStatSeries(uint64 StatId, ECsvStatSeriesType Type, FThreadState& ThreadState)"
  },
  {
    "label": "HandleMarkerEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMarkerEvent(const FOnEventContext& Context, bool bIsExclusive, bool bIsBegin)"
  },
  {
    "label": "HandleMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMarker(const FOnEventContext& Context, FThreadState& ThreadState, const FTimingMarker& Marker)"
  },
  {
    "label": "HandleCustomStatEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCustomStatEvent(const FOnEventContext& Context, bool bIsFloat)"
  },
  {
    "label": "HandleEventEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEventEvent(const FOnEventContext& Context)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(FStatSeriesInstance& StatSeries)"
  },
  {
    "label": "FlushIfNewFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushIfNewFrame(FStatSeriesInstance& StatSeries, uint32 FrameNumber)"
  },
  {
    "label": "FlushAtEndOfCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAtEndOfCapture(FStatSeriesInstance& StatSeries, uint32 CaptureEndFrame)"
  },
  {
    "label": "SetTimerValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerValue(FStatSeriesInstance& StatSeries, uint32 FrameNumber, double ElapsedTime, bool bCount)"
  },
  {
    "label": "SetCustomStatValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomStatValue(FStatSeriesInstance& StatSeries, uint32 FrameNumber, ECsvOpType OpType, int32 Value)"
  },
  {
    "label": "SetCustomStatValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomStatValue(FStatSeriesInstance& StatSeries, uint32 FrameNumber, ECsvOpType OpType, float Value)"
  }
]