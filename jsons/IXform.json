[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "IXformSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_IXform_h # define Alembic_AbcGeom_IXform_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / XformSample . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT IXformSchema : public Abc::ISchema<XformSchemaInfo> { public : typedef Abc::ISchema<XformSchemaInfo> super_type ; typedef IXformSchema this_type ; typedef XformSample sample_type ;)",
    "insertText": "IXformSchema()"
  },
  {
    "label": "IXformSchema()",
    "kind": "Method",
    "detail": "Function (m_useArrayProp = false ; m_isConstant = true ; m_isConstantIdentity = true ; })",
    "insertText": "IXformSchema(const ICompoundProperty &iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<XformSchemaInfo>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "IXformSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IXformSchema(const ICompoundProperty &iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<XformSchemaInfo>( iProp, iArg0, iArg1)"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get(XformSample &oSamp, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (XformSample)",
    "insertText": "getValue(const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getChildBoundsProperty()",
    "kind": "Method",
    "detail": "Function (Abc::IBox3dProperty)",
    "insertText": "getChildBoundsProperty()"
  },
  {
    "label": "getNumOps()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumOps()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "XformSample()",
    "kind": "Method",
    "detail": "Function (m_sample =)",
    "insertText": "XformSample()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "getArbGeomParams()",
    "kind": "Method",
    "detail": "Function (} ICompoundProperty)",
    "insertText": "getArbGeomParams()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : Abc::IBox3dProperty m_childBoundsProperty ; AbcA::BasePropertyReaderPtr m_valsProperty ; Abc::IBoolProperty m_inheritsProperty ; Abc::ICompoundProperty m_arbGeomParams ; Abc::ICompoundProperty m_userProperties ; bool m_isConstant ; bool m_isConstantIdentity ; XformSample m_sample ; private : void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  },
  {
    "label": "getChannelValues()",
    "kind": "Method",
    "detail": "Function (bool m_useArrayProp ; void)",
    "insertText": "getChannelValues(const AbcA::index_t iSampleIndex, XformSample & oSamp)"
  }
]