[
  {
    "label": "USpringArmComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpringArmComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Components / SceneComponent . h \" # include \" SpringArmComponent . generated . h \")",
    "insertText": "UCLASS(ClassGroup=Camera, meta=(BlueprintSpawnableComponent), hideCategories=(Mobility), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Camera)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (bool bIsCameraFixed = false ; FVector UnfixedCameraPosition ; FVector PreviousDesiredLoc ; FVector PreviousArmOrigin ; FRotator PreviousDesiredRot ; void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "HasAnySockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySockets()"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace = RTS_World)"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySupportedSockets(TArray<FComponentSocketDescription>& OutSockets)"
  },
  {
    "label": "GetDesiredRotation()",
    "kind": "Method",
    "detail": "Function (const FName SocketName ; FRotator)",
    "insertText": "GetDesiredRotation()"
  },
  {
    "label": "UpdateDesiredArmLocation()",
    "kind": "Method",
    "detail": "Function (protected : FVector RelativeSocketLocation ; FQuat RelativeSocketRotation ; protected : void)",
    "insertText": "UpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime)"
  },
  {
    "label": "BlendLocations()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "BlendLocations(const FVector& DesiredArmLocation, const FVector& TraceHitLocation, bool bHitSomething, float DeltaTime)"
  }
]