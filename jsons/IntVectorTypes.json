[
  {
    "label": "FVector2i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector2i"
  },
  {
    "label": "FVector3i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector3i"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function ({ },{ } } ; } ;)",
    "insertText": "FVector2i() : X(0), Y(0)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(int32 ValX, int32 ValY) : X(ValX), Y(ValY)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(const int32* Data) : X(Data[0]), Y(Data[1])"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FVector2i(const FVector2i& Vec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector2i&)",
    "insertText": "operator(const FVector2i& V2)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS operator const)",
    "insertText": "int32()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XY ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } operator)",
    "insertText": "FVector2f()"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FVector2d()"
  },
  {
    "label": "FIntVector2()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FIntVector2()"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(const FVector& Vec) : X((int32)Vec.X), Y((int32)Vec.Y)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(const FVector2f& Vec) : X((int32)Vec.X), Y((int32)Vec.Y)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(const FVector2d& Vec) : X((int32)Vec.X), Y((int32)Vec.Y)"
  },
  {
    "label": "FVector2i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector2i(const FIntVector2& Vec) : X(Vec.X), Y(Vec.Y)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "Zero()"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "One()"
  },
  {
    "label": "UnitX()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "UnitX()"
  },
  {
    "label": "UnitY()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "UnitY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32&)",
    "insertText": "operator(int Idx)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XY [ Idx ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } int32)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (int32 dx = V2 . X - X ; int32 dy = V2 . Y - Y ; return dx* dx + dy* dy ; } int32)",
    "insertText": "Dot(const FVector2i& V2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "operator(const int32& Scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X / = Scalar ; Y / = Scalar ; return* this ; } bool)",
    "insertText": "operator(const FVector2i& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& os, const FVector2i& Vec)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (os<<Vec . X<<\" \"<<Vec . Y ; return os ; } uint32)",
    "insertText": "GetTypeHash(const FVector2i& Vector)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function ({ },{ },{ } } ; } ;)",
    "insertText": "FVector3i() : X(0), Y(0), Z(0)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector3i(int32 ValX, int32 ValY, int32 ValZ) : X(ValX), Y(ValY), Z(ValZ)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector3i(const int32* Data) : X(Data[0]), Y(Data[1]), Z(Data[2])"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FVector3i(const FVector3i& Vec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVector3i&)",
    "insertText": "operator(const FVector3i& V2)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZ ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } operator)",
    "insertText": "FVector3f()"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FVector3d()"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FIntVector()"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector3i(const FVector3f& Vec) : X((int32)Vec.X), Y((int32)Vec.Y), Z((int32)Vec.Z)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector3i(const FVector3d& Vec) : X((int32)Vec.X), Y((int32)Vec.Y), Z((int32)Vec.Z)"
  },
  {
    "label": "FVector3i()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector3i(const FIntVector& Vec) : X(Vec.X), Y(Vec.Y), Z(Vec.Z)"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "UnitZ()"
  },
  {
    "label": "MaxVector()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "MaxVector()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 dx = V2 . X - X ; int32 dy = V2 . Y - Y ; int32 dz = V2 . Z - Z ; return dx* dx + dy* dy + dz* dz ; } FVector3i)",
    "insertText": "operator()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (X / = Scalar ; Y / = Scalar ; Z / = Scalar ; return* this ; } int32)",
    "insertText": "Dot(const FVector3i& V2)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "Min(const FVector3i& V0, const FVector3i& V1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "Max(const FVector3i& V0, const FVector3i& V1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& os, const FVector3i& Vec)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (os<<Vec . X<<\" \"<<Vec . Y<<\" \"<<Vec . Z ; return os ; } uint32)",
    "insertText": "GetTypeHash(const FVector3i& Vector)"
  }
]