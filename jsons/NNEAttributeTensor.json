[
  {
    "label": "FAttributeTensor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeTensor"
  },
  {
    "label": "GetDataType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" NNETensor . h \" # include \" NNETypes . h \" # include \" Serialization / Archive . h \" namespace UE::NNE::Internal { class FAttributeTensor { protected : ENNETensorDataType DataType ; TArray<uint32,TInlineAllocator<FTensorShape::MaxRank>> Shape ; TArray<uint8> Data ; public : ENNETensorDataType)",
    "insertText": "GetDataType()"
  },
  {
    "label": "SetShape()",
    "kind": "Method",
    "detail": "Function (Tensor .)",
    "insertText": "SetShape(FTensorShape::Make(Shape))"
  },
  {
    "label": "SetPreparedData()",
    "kind": "Method",
    "detail": "Function (Tensor .)",
    "insertText": "SetPreparedData(MakeConstArrayView(Data))"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} FAttributeTensor)",
    "insertText": "Make(const FTensorShape& Shape, ENNETensorDataType DataType, TConstArrayView<uint8> Data)"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (uint64 Volume = Shape .)",
    "insertText": "Volume()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FAttributeTensor Tensor ; Tensor . DataType = DataType ; Tensor . Shape .)",
    "insertText": "Reset()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Tensor . Shape .)",
    "insertText": "Append(Shape.GetData())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Tensor . Data .)",
    "insertText": "Append(Data)"
  }
]