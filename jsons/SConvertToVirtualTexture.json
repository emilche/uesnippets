[
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FConversionStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConversionStatus"
  },
  {
    "label": "FConvertToVTDlg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvertToVTDlg"
  },
  {
    "label": "EResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResult"
  },
  {
    "label": "SConvertToVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SConvertToVirtualTexture"
  },
  {
    "label": "FMaterialItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialItem"
  },
  {
    "label": "FConvertToVTDlg()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" UObject / Object . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Styling / AppStyle . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" GameplayTagsManager . h \" # include \" VirtualTextureConversionWorker . h \" class UTexture2D ; struct FConversionStatus { bool UserSelected = true ; bool UnderSized = false ; bool NonPowerOf2 = false ; bool InvalidMaterialUsage = false ; } ; class FConvertToVTDlg { public : enum EResult { Cancel = 0,Confirm = 1,} ;)",
    "insertText": "FConvertToVTDlg(const TArray<UTexture2D*>& Textures, bool bBackwards)"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "ShowModal()"
  },
  {
    "label": "ConvertVTTexture()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWindow> DialogWindow ; TSharedPtr<class SConvertToVirtualTexture> DialogWidget ; } ; struct FMaterialItem { FName Name ; } ; class SConvertToVirtualTexture : public SCompoundWidget { public : void)",
    "insertText": "ConvertVTTexture(TArray<UTexture2D*> Objects, bool backwards)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SConvertToVirtualTexture)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<SWindow>, ParentWindow) SLATE_END_ARGS() void Construct(const FArguments& InArgs, bool bBackwards)"
  },
  {
    "label": "SetBackwards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackwards(bool bSetBackwards)"
  },
  {
    "label": "SetUserTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserTextures(const TArray<UTexture2D *> &Textures)"
  },
  {
    "label": "GetUserResponse()",
    "kind": "Method",
    "detail": "Function (FConvertToVTDlg::EResult)",
    "insertText": "GetUserResponse()"
  },
  {
    "label": "CreateAssetLine()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "CreateAssetLine(int index, const FAssetData &Asset, const FConversionStatus &Status)"
  },
  {
    "label": "GetAuditTrailText()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetAuditTrailText(const FAssetData &Asset, int32 index)"
  },
  {
    "label": "UpdateList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateList()"
  },
  {
    "label": "OnButtonClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClick(FConvertToVTDlg::EResult ButtonID)"
  },
  {
    "label": "OnThresholdChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThresholdChanged(TSharedPtr<int32> InSelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetThresholdText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetThresholdText()"
  },
  {
    "label": "OnGenerateThresholdWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGenerateThresholdWidget(TSharedPtr<int32> InItem)"
  },
  {
    "label": "GetFilterButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilterButtonEnabled()"
  },
  {
    "label": "OnFilterButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFilterButtonClicked()"
  },
  {
    "label": "OnExpanderClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnExpanderClicked(int index)"
  },
  {
    "label": "GetOkButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOkButtonEnabled()"
  },
  {
    "label": "GetDetailVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDetailVisibility(int index)"
  },
  {
    "label": "GetExpanderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetExpanderImage(int index)"
  },
  {
    "label": "GetIntroMessageVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetIntroMessageVisibility()"
  },
  {
    "label": "GetErrorMessageVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetErrorMessageVisibility()"
  },
  {
    "label": "GetThresholdVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetThresholdVisibility()"
  },
  {
    "label": "GetIntroMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIntroMessage()"
  },
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetErrorMessage()"
  }
]