[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FFutureState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFutureState"
  },
  {
    "label": "TFutureState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFutureState"
  },
  {
    "label": "TFutureBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFutureBase"
  },
  {
    "label": "TSharedFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedFuture"
  },
  {
    "label": "TFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFuture"
  },
  {
    "label": "TFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFuture"
  },
  {
    "label": "TFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFuture"
  },
  {
    "label": "TSharedFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedFuture"
  },
  {
    "label": "TSharedFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedFuture"
  },
  {
    "label": "TSharedFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedFuture"
  },
  {
    "label": "TPromiseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromiseBase"
  },
  {
    "label": "TPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromise"
  },
  {
    "label": "TPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromise"
  },
  {
    "label": "TPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromise"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&Mutex)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "Then(Func Continuation)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "Next(Func Continuation)"
  },
  {
    "label": "Share()",
    "kind": "Method",
    "detail": "Function (TSharedFuture<void>)",
    "insertText": "Share()"
  }
]