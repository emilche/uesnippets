[
  {
    "label": "FFutureState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFutureState"
  },
  {
    "label": "TFutureState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFutureState"
  },
  {
    "label": "TFutureBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFutureBase"
  },
  {
    "label": "TSharedFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedFuture"
  },
  {
    "label": "TFuture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFuture"
  },
  {
    "label": "TPromiseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromiseBase"
  },
  {
    "label": "TPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromise"
  },
  {
    "label": "FFutureState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / Function . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / DateTime . h \" # include \" HAL / Event . h \" # include \" HAL / PlatformProcess . h \" # include \" Misc / ScopeLock . h \" class FFutureState { public :)",
    "insertText": "FFutureState() : CompletionEvent(FPlatformProcess::GetSynchEventFromPool(true)) , Complete(false)"
  },
  {
    "label": "FFutureState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFutureState(TUniqueFunction<void()>&& InCompletionCallback) : CompletionCallback(MoveTemp(InCompletionCallback)) , CompletionEvent(FPlatformProcess::GetSynchEventFromPool(true)) , Complete(false)"
  },
  {
    "label": "FFutureState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFutureState()"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSynchEventToPool(CompletionEvent)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (CompletionEvent = nullptr ; } public : bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&Mutex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (CompletionCallback =)",
    "insertText": "MoveTemp(Continuation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bShouldJustRun && Continuation)"
  },
  {
    "label": "Continuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Continuation()"
  },
  {
    "label": "MarkComplete()",
    "kind": "Method",
    "detail": "Function (} } protected : void)",
    "insertText": "MarkComplete()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Continuation =)",
    "insertText": "MoveTemp(CompletionCallback)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (Complete = true ; } CompletionEvent ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "TFutureState()",
    "kind": "Method",
    "detail": "Function (FEvent* CompletionEvent ; TAtomic<bool> Complete ; } ; template<InternalResultType> class TFutureState : public FFutureState { public :)",
    "insertText": "TFutureState() : FFutureState()"
  },
  {
    "label": "TFutureState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TFutureState()"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(Result.GetTypedPtr())"
  },
  {
    "label": "TFutureState()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TFutureState(TUniqueFunction<void()>&& CompletionCallback) : FFutureState(MoveTemp(CompletionCallback))"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} public : const InternalResultType&)",
    "insertText": "GetResult()"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitFor(FTimespan::MaxValue())"
  },
  {
    "label": "GetTypedPtr()",
    "kind": "Method",
    "detail": "Function (} return* Result .)",
    "insertText": "GetTypedPtr()"
  },
  {
    "label": "EmplaceResult()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> void)",
    "insertText": "EmplaceResult(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Result.GetTypedPtr()) InternalResultType(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} private : TTypeCompatibleBytes<InternalResultType> Result ; } ; template<InternalResultType> class TFutureBase { public : bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "WaitFor(const FTimespan& Duration)"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitUntil(const FDateTime& Time)"
  },
  {
    "label": "TFutureBase()",
    "kind": "Method",
    "detail": "Function (} protected : typedef TSharedPtr<TFutureState<InternalResultType>,ESPMode::ThreadSafe> StateType ;)",
    "insertText": "TFutureBase()"
  },
  {
    "label": "TFutureBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFutureBase(const StateType& InState) : State(InState)"
  },
  {
    "label": "TFutureBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFutureBase(const TFutureBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TFutureBase&)",
    "insertText": "operator(const TFutureBase&)"
  },
  {
    "label": "TFutureBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFutureBase(TFutureBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TFutureBase&)",
    "insertText": "operator(TFutureBase&&)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (protected : const StateType&)",
    "insertText": "GetState()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (template<Func> auto)",
    "insertText": "Next(Func Continuation)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetContinuation()",
    "kind": "Method",
    "detail": "Function (this -> State ->)",
    "insertText": "SetContinuation(nullptr)"
  },
  {
    "label": "TFuture()",
    "kind": "Method",
    "detail": "Function (} } private : StateType State ; } ; template<ResultType> class TSharedFuture ; template<ResultType> class TFuture : public TFutureBase<ResultType> { typedef TFutureBase<ResultType> BaseType ; public :)",
    "insertText": "TFuture()"
  },
  {
    "label": "TFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFuture(const typename BaseType::StateType& InState) : BaseType(InState)"
  },
  {
    "label": "TFuture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFuture(const TFuture&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TFuture&)",
    "insertText": "operator(const TFuture&)"
  },
  {
    "label": "TFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFuture(TFuture&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TFuture&)",
    "insertText": "operator(TFuture&&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : const ResultType&)",
    "insertText": "Get()"
  },
  {
    "label": "GetMutable()",
    "kind": "Method",
    "detail": "Function (} ResultType&)",
    "insertText": "GetMutable()"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (} ResultType)",
    "insertText": "Consume()"
  },
  {
    "label": "Local()",
    "kind": "Method",
    "detail": "Function (TFuture<ResultType>)",
    "insertText": "Local(MoveTemp(*this))"
  },
  {
    "label": "Share()",
    "kind": "Method",
    "detail": "Function (} TSharedFuture<ResultType>)",
    "insertText": "Share()"
  },
  {
    "label": "TFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFuture(const BaseType::StateType& InState) : BaseType(InState)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetState()->GetResult()"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (using BaseType::Then ; using BaseType::Next ; using BaseType::Reset ; } ; template<ResultType> class TSharedFuture : public TFutureBase<ResultType> { typedef TFutureBase<ResultType> BaseType ; public :)",
    "insertText": "TSharedFuture()"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedFuture(const typename BaseType::StateType& InState) : BaseType(InState)"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSharedFuture(TFuture<ResultType>&& Future) : BaseType(MoveTemp(Future))"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSharedFuture(const TSharedFuture&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedFuture&)",
    "insertText": "operator(const TSharedFuture&)"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedFuture(TSharedFuture&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedFuture&)",
    "insertText": "operator(TSharedFuture&&)"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSharedFuture(const BaseType::StateType& InState) : BaseType(InState)"
  },
  {
    "label": "TSharedFuture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSharedFuture(TFuture<void>&& Future) : BaseType(MoveTemp(Future))"
  },
  {
    "label": "TPromiseBase()",
    "kind": "Method",
    "detail": "Function (} template<InternalResultType> class TPromiseBase : FNoncopyable { typedef TSharedPtr<TFutureState<InternalResultType>,ESPMode::ThreadSafe> StateType ; public :)",
    "insertText": "TPromiseBase() : State(MakeShared<TFutureState<InternalResultType>, ESPMode::ThreadSafe>())"
  },
  {
    "label": "TPromiseBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromiseBase(TPromiseBase&& Other) : State(MoveTemp(Other.State))"
  },
  {
    "label": "TPromiseBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromiseBase(TUniqueFunction<void()>&& CompletionCallback) : State(MakeShared<TFutureState<InternalResultType>, ESPMode::ThreadSafe>(MoveTemp(CompletionCallback)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : TPromiseBase&)",
    "insertText": "operator(TPromiseBase&& Other)"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromise(TPromise&& Other) : BaseType(MoveTemp(Other)) , FutureRetrieved(MoveTemp(Other.FutureRetrieved))"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromise(TUniqueFunction<void()>&& CompletionCallback) : BaseType(MoveTemp(CompletionCallback)) , FutureRetrieved(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : TPromise&)",
    "insertText": "operator(TPromise&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(MoveTemp(Other))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FutureRetrieved =)",
    "insertText": "MoveTemp(Other.FutureRetrieved)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (FutureRetrieved = true ; return TFuture<)",
    "insertText": "ResultType(this->GetState())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const ResultType& Result)"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmplaceValue(Result)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(ResultType&& Result)"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmplaceValue(MoveTemp(Result))"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> void)",
    "insertText": "EmplaceValue(ArgTypes&&... Args)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetState()->EmplaceResult(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (} private : bool FutureRetrieved ; } ; template<ResultType> class TPromise<ResultType&> : public TPromiseBase<ResultType*> { typedef TPromiseBase<ResultType*> BaseType ; public :)",
    "insertText": "TPromise() : BaseType() , FutureRetrieved(false)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(ResultType& Result)"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceValue(ResultType& Result)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetState()->EmplaceResult(&Result)"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromise(TPromise&& Other) : BaseType(MoveTemp(Other)) , FutureRetrieved(false)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FutureRetrieved = true ; return TFuture<)",
    "insertText": "void(GetState())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue()"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmplaceValue()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetState()->EmplaceResult(0)"
  },
  {
    "label": "SetPromiseValue()",
    "kind": "Method",
    "detail": "Function (} private : bool FutureRetrieved ; } ; namespace FutureDetail { template<Func,ParamType,ResultType> void)",
    "insertText": "SetPromiseValue(TPromise<ResultType>& Promise, Func& Function, TFuture<ParamType>&& Param)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Promise .)",
    "insertText": "SetValue(Function(MoveTemp(Param)))"
  },
  {
    "label": "SetPromiseValue()",
    "kind": "Method",
    "detail": "Function (} template<Func,ParamType> void)",
    "insertText": "SetPromiseValue(TPromise<void>& Promise, Func& Function, TFuture<ParamType>&& Param)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(MoveTemp(Param))"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} } template<InternalResultType> template<Func> auto TFutureBase<InternalResultType)",
    "insertText": "Then(Func Continuation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ReturnValue =)",
    "insertText": "decltype(Continuation(MoveTemp(TFuture<InternalResultType>())))"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (TPromise<ReturnValue> Promise ; TFuture<ReturnValue> FutureResult = Promise .)",
    "insertText": "GetFuture()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "void()> Callback = [PromiseCapture = MoveTemp(Promise), ContinuationCapture = MoveTemp(Continuation), StateCapture = this->State]()"
  },
  {
    "label": "SetPromiseValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPromiseValue(PromiseCapture, ContinuationCapture, TFuture<InternalResultType>(MoveTemp(StateCapture)))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} ; StateType MovedState =)",
    "insertText": "MoveTemp(this->State)"
  },
  {
    "label": "SetContinuation()",
    "kind": "Method",
    "detail": "Function (MovedState ->)",
    "insertText": "SetContinuation(MoveTemp(Callback))"
  },
  {
    "label": "MakeFulfilledPromise()",
    "kind": "Method",
    "detail": "Function (} template<ResultType,. . . ArgTypes> TPromise<ResultType>)",
    "insertText": "MakeFulfilledPromise(ArgTypes&&... Args)"
  },
  {
    "label": "EmplaceValue()",
    "kind": "Method",
    "detail": "Function (TPromise<ResultType> Promise ; Promise .)",
    "insertText": "EmplaceValue(Forward<ArgTypes>(Args)...)"
  }
]