[
  {
    "label": "ObjectVisibility",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectVisibility"
  },
  {
    "label": "CreateVisibilityProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_Visibility_h # define Alembic_AbcGeom_Visibility_h # include<string . h> # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / Abc / OSchemaObject . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { enum ObjectVisibility { kVisibilityDeferred = - 1,kVisibilityHidden = 0,kVisibilityVisible = 1,} ; const std::string kVisibilityPropertyName = \" visible \" ; typedef Abc::ICharProperty IVisibilityProperty ; typedef Abc::OCharProperty OVisibilityProperty ; ALEMBIC_EXPORT OVisibilityProperty)",
    "insertText": "CreateVisibilityProperty(OObject & iObject, uint32_t iTimeSamplingID)"
  },
  {
    "label": "CreateVisibilityProperty()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT OVisibilityProperty)",
    "insertText": "CreateVisibilityProperty(OObject & iObject, AbcA::TimeSamplingPtr iTimeSampling)"
  },
  {
    "label": "GetVisibilityProperty()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT IVisibilityProperty)",
    "insertText": "GetVisibilityProperty(IObject & schemaObject)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT ObjectVisibility)",
    "insertText": "GetVisibility(IObject & schemaObject, const Abc::ISampleSelector &iSS = Abc::ISampleSelector ())"
  },
  {
    "label": "IsAncestorInvisible()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT bool)",
    "insertText": "IsAncestorInvisible(IObject schemaObject, const Abc::ISampleSelector &iSS = Abc::ISampleSelector ())"
  }
]