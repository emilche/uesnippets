[
  {
    "label": "FPriorityOrderPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPriorityOrderPoints"
  },
  {
    "label": "FPriorityOrderPoints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" Spatial / PointHashGrid3 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; struct FPriorityOrderPoints { int32 SpatialLevels = 1 0 ; TArray<int32> Order ; public :)",
    "insertText": "FPriorityOrderPoints(int32 SpatialLevels = 10) : SpatialLevels(SpatialLevels)"
  },
  {
    "label": "ComputeUniformSpaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeUniformSpaced(TArrayView<const FVector3d> Points, TArrayView<const float> ImportanceWeights, int32 EarlyStop = -1, int32 OffsetResFactor = 4)"
  },
  {
    "label": "ComputeUniformSpaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeUniformSpaced(TArrayView<const FVector3f> Points, TArrayView<const float> ImportanceWeights, int32 EarlyStop = -1, int32 OffsetResFactor = 4)"
  },
  {
    "label": "ComputeUniformSpaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeUniformSpaced(TArrayView<const FVector3d> Points, TArrayView<const float> ImportanceWeights, TArrayView<const float> SecondImportanceWeights, int32 EarlyStop = -1, int32 OffsetResFactor = 4)"
  },
  {
    "label": "ComputeUniformSpaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeUniformSpaced(TArrayView<const FVector3f> Points, TArrayView<const float> ImportanceWeights, TArrayView<const float> SecondImportanceWeights, int32 EarlyStop = -1, int32 OffsetResFactor = 4)"
  },
  {
    "label": "ComputeDescendingImportance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDescendingImportance(TArrayView<const float> ImportanceWeights)"
  }
]