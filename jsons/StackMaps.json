[
  {
    "label": "AsmPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmPrinter"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "PatchPointOpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchPointOpers"
  },
  {
    "label": "StatepointOpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatepointOpers"
  },
  {
    "label": "StackMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackMaps"
  },
  {
    "label": "Location",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Location"
  },
  {
    "label": "LocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LocationType"
  },
  {
    "label": "LiveOutReg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LiveOutReg"
  },
  {
    "label": "CallsiteInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallsiteInfo"
  },
  {
    "label": "PatchPointOpers()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_STACKMAPS_H # define LLVM_CODEGEN_STACKMAPS_H # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / CodeGen / MachineInstr . h \" # include \" llvm / Support / Debug . h \" # include<map> # include<vector> namespace llvm { class AsmPrinter ; class MCExpr ; class MCStreamer ; class PatchPointOpers { public : enum { IDPos,NBytesPos,TargetPos,NArgPos,CCPos,MetaEnd } ; private : const MachineInstr* MI ; bool HasDef ; bool IsAnyReg ; public :)",
    "insertText": "PatchPointOpers(const MachineInstr *MI)"
  },
  {
    "label": "isAnyReg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAnyReg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Pos < MetaEnd && \"Meta operand index out of range.\")"
  },
  {
    "label": "getMetaOper()",
    "kind": "Method",
    "detail": "Function (} const MachineOperand&)",
    "insertText": "getMetaOper(unsigned Pos)"
  },
  {
    "label": "getArgIdx()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getArgIdx()"
  },
  {
    "label": "getVarIdx()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getVarIdx()"
  },
  {
    "label": "getStackMapStartIdx()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getStackMapStartIdx()"
  },
  {
    "label": "getNextScratchIdx()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNextScratchIdx(unsigned StartIdx = 0)"
  },
  {
    "label": "StatepointOpers()",
    "kind": "Method",
    "detail": "Function (} ; class StatepointOpers { private : enum { IDPos,NBytesPos,NCallArgsPos,CallTargetPos,MetaEnd } ; enum { CCOffset = 1,FlagsOffset = 3,NumVMSArgsOffset = 5 } ; public :)",
    "insertText": "StatepointOpers(const MachineInstr *MI) : MI(MI)"
  },
  {
    "label": "getID()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getID()"
  },
  {
    "label": "getNumPatchBytes()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getNumPatchBytes()"
  },
  {
    "label": "getCallTarget()",
    "kind": "Method",
    "detail": "Function (} const MachineOperand&)",
    "insertText": "getCallTarget()"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (} private : const MachineInstr* MI ; } ; class StackMaps { public : struct Location { enum LocationType { Unprocessed,Register,Direct,Indirect,Constant,ConstantIndex } ; LocationType Type ; unsigned Size ; unsigned Reg ; int64_t Offset ;)",
    "insertText": "Location() : Type(Unprocessed), Size(0), Reg(0), Offset(0)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Location(LocationType Type, unsigned Size, unsigned Reg, int64_t Offset) : Type(Type), Size(Size), Reg(Reg), Offset(Offset)"
  },
  {
    "label": "LiveOutReg()",
    "kind": "Method",
    "detail": "Function (} } ; struct LiveOutReg { unsigned short Reg ; unsigned short DwarfRegNum ; unsigned short Size ;)",
    "insertText": "LiveOutReg() : Reg(0), DwarfRegNum(0), Size(0)"
  },
  {
    "label": "LiveOutReg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LiveOutReg(unsigned short Reg, unsigned short DwarfRegNum, unsigned short Size) : Reg(Reg), DwarfRegNum(DwarfRegNum), Size(Size)"
  },
  {
    "label": "StackMaps()",
    "kind": "Method",
    "detail": "Function (} } ; typedef enum { DirectMemRefOp,IndirectMemRefOp,ConstantOp } OpType ;)",
    "insertText": "StackMaps(AsmPrinter &AP)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (CSInfos .)",
    "insertText": "clear()"
  },
  {
    "label": "recordStackMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recordStackMap(const MachineInstr &MI)"
  },
  {
    "label": "recordPatchPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordPatchPoint(const MachineInstr &MI)"
  },
  {
    "label": "recordStatepoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordStatepoint(const MachineInstr &MI)"
  },
  {
    "label": "serializeToStackMapSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "serializeToStackMapSection()"
  },
  {
    "label": "CallsiteInfo()",
    "kind": "Method",
    "detail": "Function (private : const char* WSMP ; typedef SmallVector<Location,8> LocationVec ; typedef SmallVector<LiveOutReg,8> LiveOutVec ; typedef MapVector<uint64_t,uint64_t> ConstantPool ; typedef MapVector<const MCSymbol*,uint64_t> FnStackSizeMap ; struct CallsiteInfo { const MCExpr* CSOffsetExpr ; uint64_t ID ; LocationVec Locations ; LiveOutVec LiveOuts ;)",
    "insertText": "CallsiteInfo() : CSOffsetExpr(nullptr), ID(0)"
  },
  {
    "label": "CallsiteInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallsiteInfo(const MCExpr *CSOffsetExpr, uint64_t ID, LocationVec &&Locations, LiveOutVec &&LiveOuts) : CSOffsetExpr(CSOffsetExpr), ID(ID), Locations(std::move(Locations)), LiveOuts(std::move(LiveOuts))"
  },
  {
    "label": "parseOperand()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::vector<CallsiteInfo> CallsiteInfoList ; AsmPrinter& AP ; CallsiteInfoList CSInfos ; ConstantPool ConstPool ; FnStackSizeMap FnStackSize ; MachineInstr::const_mop_iterator)",
    "insertText": "parseOperand(MachineInstr::const_mop_iterator MOI, MachineInstr::const_mop_iterator MOE, LocationVec &Locs, LiveOutVec &LiveOuts)"
  },
  {
    "label": "createLiveOutReg()",
    "kind": "Method",
    "detail": "Function (LiveOutReg)",
    "insertText": "createLiveOutReg(unsigned Reg, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "parseRegisterLiveOutMask()",
    "kind": "Method",
    "detail": "Function (LiveOutVec)",
    "insertText": "parseRegisterLiveOutMask(const uint32_t *Mask)"
  },
  {
    "label": "recordStackMapOpers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordStackMapOpers(const MachineInstr &MI, uint64_t ID, MachineInstr::const_mop_iterator MOI, MachineInstr::const_mop_iterator MOE, bool recordResult = false)"
  },
  {
    "label": "emitStackmapHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitStackmapHeader(MCStreamer &OS)"
  },
  {
    "label": "emitFunctionFrameRecords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionFrameRecords(MCStreamer &OS)"
  },
  {
    "label": "emitConstantPoolEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitConstantPoolEntries(MCStreamer &OS)"
  },
  {
    "label": "emitCallsiteEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitCallsiteEntries(MCStreamer &OS)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "debug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "debug()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(dbgs())"
  }
]