[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "TListThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TListThreadSafe"
  },
  {
    "label": "FDebugDrawQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDrawQueue"
  },
  {
    "label": "EBuffer",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBuffer"
  },
  {
    "label": "TListThreadSafe()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosDebugDrawDeclares . h \" # include \" Chaos / AABB . h \" # include \" Chaos / DebugDrawCommand . h \" # include \" Containers / List . h \" # include \" Math / Vector . h \" # include \" Math / Color . h \" # include \" Math / Quat . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / IConsoleManager . h \" # include \" ChaosDebugDraw / ChaosDDContext . h \" # include \" ChaosDebugDraw / ChaosDDFrame . h \" class AActor ; # if CHAOS_DEBUG_DRAW namespace Chaos { bool bChaosDebugDraw_UseNewQueue ; bool bChaosDebugDraw_UseLegacyQueue ; template<ElementType> class TListThreadSafe { public :)",
    "insertText": "TListThreadSafe() : FirstElement(nullptr)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddElement(TList<ElementType>* Element)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* LocalFirstElement ; do { LocalFirstElement = FirstElement ; Element -> Next = LocalFirstElement ; })",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchangePointer((void**)&FirstElement, Element, LocalFirstElement) != LocalFirstElement)"
  },
  {
    "label": "ExtractAll()",
    "kind": "Method",
    "detail": "Function (} TList<ElementType>*)",
    "insertText": "ExtractAll()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* LocalFirstElement ; do { LocalFirstElement = FirstElement ; })",
    "insertText": "while(FPlatformAtomics::InterlockedCompareExchangePointer((void**)&FirstElement, NULL, LocalFirstElement) != LocalFirstElement)"
  },
  {
    "label": "ExtractAllElements()",
    "kind": "Method",
    "detail": "Function (TList<ElementType>* NextElement = Element -> Next ; delete Element ; Element = NextElement ; } ; } ; } private : TList<ElementType>* FirstElement ; } ; class FDebugDrawQueue { public : enum EBuffer { Internal = 0,External = 1 } ; void)",
    "insertText": "ExtractAllElements(TArray<FLatentDrawCommand>& OutDrawCommands, bool bPaused = false)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CommandQueueCS)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int Capacity = CommandQueue .)",
    "insertText": "Max()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutDrawCommands =)",
    "insertText": "MoveTemp(CommandQueue)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (CommandQueue .)",
    "insertText": "Reserve(Capacity)"
  },
  {
    "label": "DrawDebugPoint()",
    "kind": "Method",
    "detail": "Function (RequestedCommandCost = 0 ; } void)",
    "insertText": "DrawDebugPoint(const FVector& Position, const FColor& Color, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawPoint(Position, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugLine()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugLine(const FVector& LineStart, const FVector& LineEnd, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawLine(LineStart, LineEnd, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugDirectionalArrow(const FVector& LineStart, const FVector& LineEnd, float ArrowSize, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDirectionalArrow(LineStart, LineEnd, ArrowSize, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugCoordinateSystem(const FVector& Position, const FRotator& AxisRot, FReal Scale, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (FRotationMatrix)",
    "insertText": "R(AxisRot)"
  },
  {
    "label": "GetScaledAxis()",
    "kind": "Method",
    "detail": "Function (FVector const X = R .)",
    "insertText": "GetScaledAxis(EAxis::X)"
  },
  {
    "label": "GetScaledAxis()",
    "kind": "Method",
    "detail": "Function (FVector const Y = R .)",
    "insertText": "GetScaledAxis(EAxis::Y)"
  },
  {
    "label": "GetScaledAxis()",
    "kind": "Method",
    "detail": "Function (FVector const Z = R .)",
    "insertText": "GetScaledAxis(EAxis::Z)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawLine(Position, Position + X * Scale, FColor::Red, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawLine(Position, Position + Y * Scale, FColor::Green, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawLine(Position, Position + Z * Scale, FColor::Blue, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugSphere()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugSphere(FVector const& Center, FReal Radius, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, uint8 DepthPriority = 0, float Thickness = 0.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int Cost = Segments* Segments ;)",
    "insertText": "if(AcceptCommand(Cost, Center))"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDebugSphere(Center, Radius, Segments, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugBox()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugBox(FVector const& Center, FVector const& Extent, const FQuat& Rotation, FColor const& Color, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDebugBox(Center, Extent, Rotation, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "DrawDebugString()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugString(FVector const& TextLocation, const FString& Text, class AActor* TestBaseActor, FColor const& Color, float Duration, bool bDrawShadow, float FontScale)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (int Cost = Text .)",
    "insertText": "Len()"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDebugString(TextLocation, Text, TestBaseActor, Color, Duration, bDrawShadow, FontScale))"
  },
  {
    "label": "DrawDebugCircle()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugCircle(const FVector& Center, FReal Radius, int32 Segments, const FColor& Color, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness, const FVector& YAxis, const FVector& ZAxis, bool bDrawAxis)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDebugCircle(Center, Radius, Segments, Color, bPersistentLines, LifeTime, DepthPriority, Thickness, YAxis, ZAxis, bDrawAxis))"
  },
  {
    "label": "DrawDebugCapsule()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DrawDebugCapsule(const FVector& Center, FReal HalfHeight, FReal Radius, const FQuat& Rotation, const FColor& Color, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(FLatentDrawCommand::DrawDebugCapsule(Center, HalfHeight, Radius, Rotation, Color, bPersistentLines, LifeTime, DepthPriority, Thickness))"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetEnabled(bool bInEnabled)"
  },
  {
    "label": "SetMaxCost()",
    "kind": "Method",
    "detail": "Function (bEnableDebugDrawing = bInEnabled ; } void)",
    "insertText": "SetMaxCost(int32 InMaxCost)"
  },
  {
    "label": "SetRegionOfInterest()",
    "kind": "Method",
    "detail": "Function (MaxCommandCost = InMaxCost ; } void)",
    "insertText": "SetRegionOfInterest(const FVector& Pos, float InRadius)"
  },
  {
    "label": "GetCenterOfInterest()",
    "kind": "Method",
    "detail": "Function (CenterOfInterest = Pos ; RadiusOfInterest = InRadius ; } FVector)",
    "insertText": "GetCenterOfInterest()"
  },
  {
    "label": "GetRadiusOfInterest()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRadiusOfInterest()"
  },
  {
    "label": "IsInRegionOfInterest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRegionOfInterest(FVector Pos)"
  },
  {
    "label": "IsInRegionOfInterest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRegionOfInterest(FVector Pos, FReal Radius)"
  },
  {
    "label": "IsInRegionOfInterest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRegionOfInterest(FAABB3 Bounds)"
  },
  {
    "label": "SetConsumerActive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConsumerActive(void* Consumer, bool bConsumerActive)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (FDebugDrawQueue&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "IsDebugDrawingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugDrawingEnabled()"
  },
  {
    "label": "FDebugDrawQueue()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FDebugDrawQueue() : RequestedCommandCost(0) , MaxCommandCost(10000) , CenterOfInterest(FVector::ZeroVector) , RadiusOfInterest(0) , bEnableDebugDrawing(false)"
  },
  {
    "label": "FDebugDrawQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDebugDrawQueue()"
  },
  {
    "label": "GetCenterOfInterestImpl()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetCenterOfInterestImpl()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ChaosDD::Private::FChaosDDFrameWriter DDWriter = ChaosDD::Private::)",
    "insertText": "Get().GetWriter()"
  },
  {
    "label": "GetRadiusOfInterestImpl()",
    "kind": "Method",
    "detail": "Function (} return CenterOfInterest ; } FReal)",
    "insertText": "GetRadiusOfInterestImpl()"
  },
  {
    "label": "IsInRegionOfInterestImpl()",
    "kind": "Method",
    "detail": "Function (} return RadiusOfInterest ; } bool)",
    "insertText": "IsInRegionOfInterestImpl(FVector Pos)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(RadiusOfInterest <= 0.0f) || ((Pos - CenterOfInterest).SizeSquared() < RadiusOfInterest * RadiusOfInterest)"
  },
  {
    "label": "IsInRegionOfInterestImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRegionOfInterestImpl(FVector Pos, FReal Radius)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(RadiusOfInterest <= 0.0f) || ((Pos - CenterOfInterest).SizeSquared() < (RadiusOfInterest + Radius) * (RadiusOfInterest + Radius))"
  },
  {
    "label": "IsInRegionOfInterestImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRegionOfInterestImpl(FAABB3 Bounds)"
  },
  {
    "label": "ThickenSymmetrically()",
    "kind": "Method",
    "detail": "Function (} return Bounds .)",
    "insertText": "ThickenSymmetrically(FVec3(RadiusOfInterest)).Contains(CenterOfInterest)"
  },
  {
    "label": "AcceptCommand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AcceptCommand(int Cost, const FVec3& Position)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(bChaosDebugDraw_UseLegacyQueue)"
  },
  {
    "label": "IsInBudget()",
    "kind": "Method",
    "detail": "Function (RequestedCommandCost + = Cost ; return)",
    "insertText": "IsInBudget()"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "AddCommand(const FLatentDrawCommand& Command)"
  },
  {
    "label": "GetWriter()",
    "kind": "Method",
    "detail": "Function (ChaosDD::Private::)",
    "insertText": "GetWriter().EnqueueLatentCommand(Command)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CommandQueue .)",
    "insertText": "Add(Command)"
  }
]