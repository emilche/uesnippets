[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "PortProvider()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_PORT_PROVIDER_MAC_H_ # define BASE_PROCESS_PORT_PROVIDER_MAC_H_ # include<mach / mach . h> # include \" base / base_export . h \" # include \" base / observer_list . h \" # include \" base / process / process_handle . h \" # include \" base / synchronization / lock . h \" namespace base { class BASE_EXPORT PortProvider { public :)",
    "insertText": "PortProvider()"
  },
  {
    "label": "PortProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PortProvider(const PortProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PortProvider&)",
    "insertText": "operator(const PortProvider&)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (class Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnReceivedTaskPort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceivedTaskPort(ProcessHandle process)"
  },
  {
    "label": "TaskForPid()",
    "kind": "Method",
    "detail": "Function (} ; mach_port_t)",
    "insertText": "TaskForPid(ProcessHandle process)"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObserver(Observer* observer)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(Observer* observer)"
  },
  {
    "label": "NotifyObservers()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotifyObservers(ProcessHandle process)"
  },
  {
    "label": "TaskForPid()",
    "kind": "Method",
    "detail": "Function (private : base::Lock lock_ ; base::ObserverList<Observer>::Unchecked observer_list_ ; } ; class BASE_EXPORT SelfPortProvider : public base::PortProvider { mach_port_t)",
    "insertText": "TaskForPid(base::ProcessHandle process)"
  }
]