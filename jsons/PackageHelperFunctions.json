[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "EPackageNormalizationFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPackageNormalizationFlags"
  },
  {
    "label": "FContentHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentHelper"
  },
  {
    "label": "AssetSetPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetSetPolicy"
  },
  {
    "label": "AssetSetPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetSetPolicy"
  },
  {
    "label": "AssetSetPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetSetPolicy"
  },
  {
    "label": "AssetSetPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetSetPolicy"
  },
  {
    "label": "AssetSetPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetSetPolicy"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPackageHelperFunctions, Log, All)"
  },
  {
    "label": "SearchDirectoryRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchDirectoryRecursive( const FString& SearchPathMask, TArray<FString>& out_PackageNames, TArray<FString>& out_PackageFilenames )"
  },
  {
    "label": "SavePackageHelper()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "SavePackageHelper(UPackage* Package, FString Filename,  EObjectFlags KeepObjectFlags = RF_Standalone,\n\tFOutputDevice* ErrorDevice=GWarn, ESaveFlags SaveFlags = SAVE_None)"
  },
  {
    "label": "SavePackageHelper()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "SavePackageHelper(UPackage* Package, FString Filename, EObjectFlags KeepObjectFlags,\n\tFOutputDevice* ErrorDevice, FLinkerNull* LinkerToConformAgainst, ESaveFlags SaveFlags = SAVE_None)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "CreateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollection( FName CollectionName, ECollectionShareType::Type InType )"
  },
  {
    "label": "ClearCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearCollection(FName InCollectionName, ECollectionShareType::Type InType)"
  },
  {
    "label": "SetCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCollection(FName InCollectionName, ECollectionShareType::Type InType, const TArray<FSoftObjectPath>& InAssetList)"
  },
  {
    "label": "UpdateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCollection(FName InCollectionName, ECollectionShareType::Type InType, const TArray<FSoftObjectPath>& InAddList, const TArray<FSoftObjectPath>& InRemoveList)"
  },
  {
    "label": "QueryAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAssetsInCollection(FName InCollectionName, ECollectionShareType::Type InType, TArray<FSoftObjectPath>& OutAssetPaths)"
  },
  {
    "label": "QueryAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAssetsInCollection(FName InCollectionName, ECollectionShareType::Type InType, TArray<FName>& OutAssetPathNames)"
  },
  {
    "label": "CreateAssetSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAssetSet( FName InSetName, ECollectionShareType::Type InSetType )"
  },
  {
    "label": "ClearAssetSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearAssetSet( FName InSetName, ECollectionShareType::Type InSetType )"
  },
  {
    "label": "AssignSetContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssignSetContent( FName InSetName, ECollectionShareType::Type InType, const TArray<FSoftObjectPath>& InAssetList )"
  },
  {
    "label": "UpdateSetContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSetContent( FName InSetName, ECollectionShareType::Type InType, const TArray<FSoftObjectPath>& InAddList, const TArray<FSoftObjectPath>& InRemoveList )"
  },
  {
    "label": "QuerySetContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QuerySetContent( FName InCollectionName, ECollectionShareType::Type InType, TArray<FSoftObjectPath>& OutAssetPaths )"
  }
]