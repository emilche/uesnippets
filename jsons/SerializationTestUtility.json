[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "SaveLoadUtility()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosArchive . h \" # include \" Serialization / MemoryWriter . h \" # include \" Serialization / MemoryReader . h \" # include \" Serialization / CustomVersion . h \" # include \" HAL / FileManager . h \" # if UE_BUILD_SHIPPING = = 0 namespace Chaos { template<class T,class U> bool)",
    "insertText": "SaveLoadUtility(U &ObjectToSave, TCHAR const * SerializedBinaryDirectory, TCHAR const * BinaryFolderName, bool bSave, TArray<U>& ObjectsToTest)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function ({ TArray<uint8> Data ; { FMemoryWriter)",
    "insertText": "Ar(Data)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (FChaosArchive)",
    "insertText": "Writer(Ar)"
  },
  {
    "label": "Reader()",
    "kind": "Method",
    "detail": "Function (FChaosArchive)",
    "insertText": "Reader(Ar)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Reader<<ReadFromMemory ; } ObjectsToTest .)",
    "insertText": "Emplace(MoveTemp(ReadFromMemory))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} # if 0 TArray<FString> FilesFound ; IFileManager& FileManager =)",
    "insertText": "Get()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString TestBinaryFolder =)",
    "insertText": "FString(SerializedBinaryDirectory)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (FileManager .)",
    "insertText": "FindFiles(FilesFound, *TestBinaryFolder)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "for(FString File : FilesFound)"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (U ReadFromDisk ; File = TestBinaryFolder / File ; FArchive* Ar = FileManager .)",
    "insertText": "CreateFileReader(*File, FILEREAD_None)"
  },
  {
    "label": "MemoryAr()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Data ; FMemoryReader)",
    "insertText": "MemoryAr(Data)"
  },
  {
    "label": "Reader()",
    "kind": "Method",
    "detail": "Function (FChaosArchive)",
    "insertText": "Reader(MemoryAr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FCustomVersionContainer Version ; Version .)",
    "insertText": "Serialize(*Ar)"
  },
  {
    "label": "SetCustomVersions()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "SetCustomVersions(Version)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (* Ar<<Data ; Reader<<ReadFromDisk ; Ar ->)",
    "insertText": "Close()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } ObjectsToTest .)",
    "insertText": "Emplace(MoveTemp(ReadFromDisk))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bSave)"
  },
  {
    "label": "AppendInt()",
    "kind": "Method",
    "detail": "Function (FString FilePath = TestBinaryFolder / BinaryFolderName ; FilePath .)",
    "insertText": "AppendInt(FilesFound.Num())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FilePath .)",
    "insertText": "Append(TEXT(\".bin\"))"
  },
  {
    "label": "CreateFileWriter()",
    "kind": "Method",
    "detail": "Function (FArchive* Ar = FileManager .)",
    "insertText": "CreateFileWriter(*FilePath, FILEWRITE_None)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (FChaosArchive)",
    "insertText": "Writer(MemoryAr)"
  },
  {
    "label": "GetCustomVersions()",
    "kind": "Method",
    "detail": "Function (Writer<<ObjectToSave ; FCustomVersionContainer Version = Writer .)",
    "insertText": "GetCustomVersions()"
  }
]