[
  {
    "label": "TOverridePassSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOverridePassSequence"
  },
  {
    "label": "FPassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPassInfo"
  },
  {
    "label": "TOverridePassSequence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" SceneViewExtension . h \" template<EPass> class TOverridePassSequence final { public :)",
    "insertText": "TOverridePassSequence(const FScreenPassRenderTarget& InOverrideOutput) : OverrideOutput(InOverrideOutput)"
  },
  {
    "label": "TOverridePassSequence()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TOverridePassSequence()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "if(bFinalized)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} } } # endif } void)",
    "insertText": "SetName(EPass Pass, const TCHAR* Name)"
  },
  {
    "label": "Passes()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "Passes(int32)"
  },
  {
    "label": "SetNames()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "SetNames(const TCHAR* const* Names, uint32 NameCount)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "check(NameCount == PassCountMax)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (Passes [ PassIndex ] . Name = Names [ PassIndex ] ; } # endif } void)",
    "insertText": "SetEnabled(EPass Pass, bool bEnabled)"
  },
  {
    "label": "PassIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "PassIndex(int32)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "check(!bFinalized)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (Passes [ PassIndex ] . bAssigned = true ; # endif Passes [ PassIndex ] . bEnabled = bEnabled ; } bool)",
    "insertText": "IsEnabled(EPass Pass)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "check(Passes[PassIndex].bAssigned)"
  },
  {
    "label": "IsLastPass()",
    "kind": "Method",
    "detail": "Function (# endif return Passes [ PassIndex ] . bEnabled ; } bool)",
    "insertText": "IsLastPass(EPass Pass)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "check(bFinalized)"
  },
  {
    "label": "AcceptPass()",
    "kind": "Method",
    "detail": "Function (# endif return Pass = = LastPass ; } void)",
    "insertText": "AcceptPass(EPass Pass)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Passes [ PassIndex ] . bAccepted = true ;)",
    "insertText": "for(int32 NextPassIndex = int32(NextPass) + 1; NextPassIndex < PassCountMax; ++NextPassIndex)"
  },
  {
    "label": "EPass()",
    "kind": "Method",
    "detail": "Function (NextPass =)",
    "insertText": "EPass(NextPassIndex)"
  },
  {
    "label": "AcceptOverrideIfLastPass()",
    "kind": "Method",
    "detail": "Function (break ; } } # endif } bool)",
    "insertText": "AcceptOverrideIfLastPass(EPass Pass, FScreenPassRenderTarget& OutTargetToOverride, const TOptional<int32>& AfterPassCallbackIndex = TOptional<int32>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHasMoreAfterPassCallbacks ;)",
    "insertText": "if(AfterPassCallbackIndex)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bHasMoreAfterPassCallbacks = AfterPassCallbackIndex .)",
    "insertText": "GetValue() < AfterPass[PassIndex].Num()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} else { bHasMoreAfterPassCallbacks = AfterPass [ PassIndex ] .)",
    "insertText": "Num()"
  },
  {
    "label": "AcceptPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcceptPass(Pass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AcceptOverrideInPassIndex == PassIndex && !bHasMoreAfterPassCallbacks)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (OutTargetToOverride = OverrideOutput ; return true ; } return false ; } void)",
    "insertText": "Finalize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bFinalized = true ;)",
    "insertText": "for(int32 PassIndex = 0; PassIndex < PassCountMax; ++PassIndex)"
  },
  {
    "label": "NextPass()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG)",
    "insertText": "NextPass(EPass)"
  },
  {
    "label": "LastPass()",
    "kind": "Method",
    "detail": "Function (# endif bFirstPass = false ; })",
    "insertText": "LastPass(EPass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AcceptOverrideInPassIndex = PassIndex ; })",
    "insertText": "if(AfterPass[PassIndex].Num() > 0)"
  },
  {
    "label": "GetAfterPassCallbacks()",
    "kind": "Method",
    "detail": "Function (AcceptOverrideInPassIndex = PassIndex ; } } } FAfterPassCallbackDelegateArray&)",
    "insertText": "GetAfterPassCallbacks(EPass Pass)"
  },
  {
    "label": "EPass()",
    "kind": "Method",
    "detail": "Function (struct FPassInfo { # if RDG_ENABLE_DEBUG const TCHAR* Name = nullptr ; bool bAssigned = false ; bool bAccepted = false ; # endif bool bEnabled = false ; } ; FScreenPassRenderTarget OverrideOutput ; TStaticArray<FPassInfo,PassCountMax> Passes ; TStaticArray<FAfterPassCallbackDelegateArray,PassCountMax> AfterPass ; EPass LastPass = EPass::MAX ; int32 AcceptOverrideInPassIndex = PassCountMax ; # if RDG_ENABLE_DEBUG EPass NextPass =)",
    "insertText": "EPass(0)"
  }
]