[
  {
    "label": "CommandLine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandLine"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "TestResultsTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResultsTracker"
  },
  {
    "label": "AggregateTestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AggregateTestResult"
  },
  {
    "label": "PerIterationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerIterationData"
  },
  {
    "label": "CodeLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodeLocation"
  },
  {
    "label": "TestResultsTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_TEST_RESULTS_TRACKER_H_ # define BASE_TEST_LAUNCHER_TEST_RESULTS_TRACKER_H_ # include<map> # include<set> # include<string> # include<utility> # include<vector> # include \" base / callback . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / test / launcher / test_result . h \" # include \" base / threading / thread_checker . h \" namespace base { class CommandLine ; class FilePath ; class TestResultsTracker { public :)",
    "insertText": "TestResultsTracker()"
  },
  {
    "label": "TestResultsTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestResultsTracker(const TestResultsTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResultsTracker&)",
    "insertText": "operator(const TestResultsTracker&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Init(const CommandLine& command_line)"
  },
  {
    "label": "OnTestIterationStarting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationStarting()"
  },
  {
    "label": "AddTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTest(const std::string& test_name)"
  },
  {
    "label": "AddDisabledTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDisabledTest(const std::string& test_name)"
  },
  {
    "label": "AddTestLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestLocation(const std::string& test_name, const std::string& file, int line)"
  },
  {
    "label": "AddTestPlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestPlaceholder(const std::string& test_name)"
  },
  {
    "label": "AddTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestResult(const TestResult& result)"
  },
  {
    "label": "AddLeakedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLeakedItems(int count, const std::vector<std::string>& test_names)"
  },
  {
    "label": "GeneratePlaceholderIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlaceholderIteration()"
  },
  {
    "label": "PrintSummaryOfCurrentIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummaryOfCurrentIteration()"
  },
  {
    "label": "PrintSummaryOfAllIterations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummaryOfAllIterations()"
  },
  {
    "label": "AddGlobalTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGlobalTag(const std::string& tag)"
  },
  {
    "label": "SaveSummaryAsJSON()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "SaveSummaryAsJSON(const FilePath& path, const std::vector<std::string>& additional_tags)"
  },
  {
    "label": "GetTestStatusMapForCurrentIteration()",
    "kind": "Method",
    "detail": "Function (typedef std::map<TestResult::Status,std::set<std::string>> TestStatusMap ; TestStatusMap)",
    "insertText": "GetTestStatusMapForCurrentIteration()"
  },
  {
    "label": "GetTestStatusMapForAllIterations()",
    "kind": "Method",
    "detail": "Function (TestStatusMap)",
    "insertText": "GetTestStatusMapForAllIterations()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TestResultsTrackerTest, SaveSummaryAsJSONWithLinkInResult)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TestResultsTrackerTest, SaveSummaryAsJSONWithPropertyInResult)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TestResultsTrackerTest, SaveSummaryAsJSONWithOutTimestampInResult)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TestResultsTrackerTest, SaveSummaryAsJSONWithTimestampInResult)"
  },
  {
    "label": "GetTestStatusForIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTestStatusForIteration(int iteration, TestStatusMap* map)"
  },
  {
    "label": "PrintTests()",
    "kind": "Method",
    "detail": "Function (template<InputIterator> void)",
    "insertText": "PrintTests(InputIterator first, InputIterator last, const std::string& description)"
  },
  {
    "label": "PrintLeaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintLeaks(int count, const std::vector<std::string>& test_names)"
  },
  {
    "label": "AggregateTestResult()",
    "kind": "Method",
    "detail": "Function (struct AggregateTestResult {)",
    "insertText": "AggregateTestResult()"
  },
  {
    "label": "AggregateTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AggregateTestResult(const AggregateTestResult& other)"
  },
  {
    "label": "PerIterationData()",
    "kind": "Method",
    "detail": "Function (std::vector<TestResult> test_results ; } ; struct PerIterationData {)",
    "insertText": "PerIterationData()"
  },
  {
    "label": "PerIterationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerIterationData(const PerIterationData& other)"
  },
  {
    "label": "CodeLocation()",
    "kind": "Method",
    "detail": "Function (typedef std::map<std::string,AggregateTestResult> ResultsMap ; ResultsMap results ; std::vector<std::pair<int,std::vector<std::string>>> leaked_temp_items ; } ; struct CodeLocation {)",
    "insertText": "CodeLocation(const std::string& f, int l) : file(f), line(l)"
  }
]