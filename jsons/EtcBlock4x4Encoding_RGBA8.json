[
  {
    "label": "Block4x4EncodingBits_A8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_A8"
  },
  {
    "label": "Block4x4Encoding_RGBA8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding_RGBA8"
  },
  {
    "label": "Block4x4Encoding_RGBA8_Opaque",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding_RGBA8_Opaque"
  },
  {
    "label": "Block4x4Encoding_RGBA8_Transparent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding_RGBA8_Transparent"
  },
  {
    "label": "Block4x4Encoding_RGBA8()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcBlock4x4Encoding_RGB8 . h \" namespace Etc { class Block4x4EncodingBits_A8 ; class Block4x4Encoding_RGBA8 : public Block4x4Encoding_RGB8 { public :)",
    "insertText": "Block4x4Encoding_RGBA8(void)"
  },
  {
    "label": "InitFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromSource(Block4x4 *a_pblockParent, ColorFloatRGBA *a_pafrgbaSource, unsigned char *a_paucEncodingBits, ErrorMetric a_errormetric)"
  },
  {
    "label": "InitFromEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromEncodingBits(Block4x4 *a_pblockParent, unsigned char *a_paucEncodingBits, ColorFloatRGBA *a_pafrgbaSource, ErrorMetric a_errormetric)"
  },
  {
    "label": "PerformIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformIteration(float a_fEffort)"
  },
  {
    "label": "SetEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncodingBits(void)"
  },
  {
    "label": "CalculateA8()",
    "kind": "Method",
    "detail": "Function (protected : const unsigned int MODIFIER_TABLE_ENTRYS = 1 6 ; const unsigned int ALPHA_SELECTOR_BITS = 3 ; const unsigned int ALPHA_SELECTORS = 1<<ALPHA_SELECTOR_BITS ; float s_aafModifierTable [ MODIFIER_TABLE_ENTRYS ] [ ALPHA_SELECTORS ] ; void)",
    "insertText": "CalculateA8(float a_fRadius)"
  },
  {
    "label": "DecodePixelAlpha()",
    "kind": "Method",
    "detail": "Function (Block4x4EncodingBits_A8* m_pencodingbitsA8 ; float m_fBase ; float m_fMultiplier ; unsigned int m_uiModifierTableIndex ; unsigned int m_auiAlphaSelectors [ PIXELS ] ; private : float)",
    "insertText": "DecodePixelAlpha(float a_fBase, float a_fMultiplier, unsigned int a_uiTableIndex, unsigned int a_uiSelector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float fPixelAlpha = a_fBase + a_fMultiplier* s_aafModifierTable [ a_uiTableIndex ] [ a_uiSelector ] ;)",
    "insertText": "if(fPixelAlpha < 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fPixelAlpha = 0 . 0 f ; } else)",
    "insertText": "if(fPixelAlpha > 1.0f)"
  }
]