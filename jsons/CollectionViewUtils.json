[
  {
    "label": "ResolveColor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CollectionManagerTypes . h \" # include \" Containers / Array . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" # include \" UObject / NameTypes . h \" namespace CollectionViewUtils { FLinearColor)",
    "insertText": "ResolveColor(const FName InCollectionName, const ECollectionShareType::Type& InCollectionType)"
  },
  {
    "label": "GetCustomColor()",
    "kind": "Method",
    "detail": "Function (TOptional<FLinearColor>)",
    "insertText": "GetCustomColor(const FName InCollectionName, const ECollectionShareType::Type& InCollectionType)"
  },
  {
    "label": "SetCustomColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomColor(const FName InCollectionName, const ECollectionShareType::Type& InCollectionType, const TOptional<FLinearColor>& CollectionColor)"
  },
  {
    "label": "HasCustomColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomColors(TArray<FLinearColor>* OutColors = nullptr)"
  },
  {
    "label": "GetDefaultColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetDefaultColor()"
  }
]