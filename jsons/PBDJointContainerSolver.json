[
  {
    "label": "FPBDJointContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointContainerSolver"
  },
  {
    "label": "FPBDJointContainerSolver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Evolution / SolverConstraintContainer . h \" # include \" Chaos / Joint / PBDJointSolverGaussSeidel . h \" # include \" Chaos / Joint / PBDJointCachedSolverGaussSeidel . h \" # include \" Chaos / PBDJointConstraints . h \" # include \" Chaos / PBDJointConstraintTypes . h \" namespace Chaos { namespace Private { class FPBDJointContainerSolver : public FConstraintContainerSolver { public :)",
    "insertText": "FPBDJointContainerSolver(FPBDJointConstraints& InConstraintContainer, const int32 InPriority)"
  },
  {
    "label": "FPBDJointContainerSolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDJointContainerSolver()"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const int32 InMaxCollisions)"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraints()"
  },
  {
    "label": "AddConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraints(const TArrayView<Private::FPBDIslandConstraint*>& IslandConstraints)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt, const int32 BeginIndex, const int32 EndIndex)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (FPBDJointConstraints&)",
    "insertText": "GetContainer()"
  },
  {
    "label": "GetConstraintSettings()",
    "kind": "Method",
    "detail": "Function (} const FPBDJointSettings&)",
    "insertText": "GetConstraintSettings(const int32 InConstraintIndex)"
  },
  {
    "label": "GetContainerConstraintIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetContainerConstraintIndex(const int32 InConstraintIndex)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraint(const int32 InContainerConstraintIndex)"
  },
  {
    "label": "ResizeSolverArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeSolverArrays()"
  },
  {
    "label": "ApplyLinearProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLinearProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyNonLinearProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNonLinearProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  }
]