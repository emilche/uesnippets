[
  {
    "label": "Block4x4EncodingBits_R11",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_R11"
  },
  {
    "label": "Block4x4Encoding_R11",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding_R11"
  },
  {
    "label": "Block4x4Encoding_R11()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcBlock4x4Encoding_RGB8 . h \" namespace Etc { class Block4x4EncodingBits_R11 ; class Block4x4Encoding_R11 : public Block4x4Encoding_RGB8 { public :)",
    "insertText": "Block4x4Encoding_R11(void)"
  },
  {
    "label": "InitFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromSource(Block4x4 *a_pblockParent, ColorFloatRGBA *a_pafrgbaSource, unsigned char *a_paucEncodingBits, ErrorMetric a_errormetric)"
  },
  {
    "label": "InitFromEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromEncodingBits(Block4x4 *a_pblockParent, unsigned char *a_paucEncodingBits, ColorFloatRGBA *a_pafrgbaSource, ErrorMetric a_errormetric)"
  },
  {
    "label": "PerformIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformIteration(float a_fEffort)"
  },
  {
    "label": "SetEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncodingBits(void)"
  },
  {
    "label": "GetRedBase()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRedBase(void)"
  },
  {
    "label": "DecodePixelRed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DecodePixelRed(float a_fBase, float a_fMultiplier, unsigned int a_uiTableIndex, unsigned int a_uiSelector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float fMultiplier = a_fMultiplier ;)",
    "insertText": "if(fMultiplier <= 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fMultiplier = 1 . 0 f / 8 . 0 f ; } float fPixelRed = a_fBase* 8 + 4 + 8* fMultiplier* s_aafModifierTable [ a_uiTableIndex ] [ a_uiSelector ]* 2 5 5 ; fPixelRed / = 2 0 4 7 . 0 f ;)",
    "insertText": "if(fPixelRed < 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fPixelRed = 0 . 0 f ; } else)",
    "insertText": "if(fPixelRed > 1.0f)"
  }
]