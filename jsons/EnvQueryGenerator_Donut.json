[
  {
    "label": "UEnvQueryGenerator_Donut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryGenerator_Donut"
  },
  {
    "label": "UEnvQueryContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryContext"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" DataProviders / AIDataProvider . h \" # include \" EnvironmentQuery / Generators / EnvQueryGenerator_ProjectedPoints . h \" # include \" EnvQueryGenerator_Donut . generated . h \")",
    "insertText": "UCLASS(meta = (DisplayName = \"Points: Donut\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditDefaultsOnly, Category = Generator)"
  },
  {
    "label": "GenerateItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateItems(FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "GetDescriptionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescriptionTitle()"
  },
  {
    "label": "GetDescriptionDetails()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescriptionDetails()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetArcBisectorAngle()",
    "kind": "Method",
    "detail": "Function (# endif protected : FVector::FReal)",
    "insertText": "GetArcBisectorAngle(FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "IsAngleAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAngleAllowed(FVector::FReal TestAngleRad, FVector::FReal BisectAngleDeg, FVector::FReal AngleRangeDeg, bool bConstrainAngle)"
  },
  {
    "label": "GenerateDonutNavPoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDonutNavPoints(const TArray<FVector>& CenterPoints, TArray<FNavLocation>& Points, FEnvQueryInstance& QueryInstance)"
  }
]