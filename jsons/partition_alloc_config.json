[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CONFIG_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_CONFIG_H_ # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(ARCH_CPU_64_BITS) && !BUILDFLAG(IS_NACL) #define PA_HAS_64_BITS_POINTERS static_assert(sizeof(void*) == 8, \"\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "static_assert(sizeof(void*) != 8, \"\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) && BUILDFLAG(STARSCAN) #define PA_ALLOW_PCSCAN #endif #if defined(PA_HAS_64_BITS_POINTERS) && \\ (defined(__ARM_NEON) || defined(__ARM_NEON__)) && defined(__ARM_FP) #define PA_STARSCAN_NEON_SUPPORTED #endif #if defined(PA_HAS_64_BITS_POINTERS) && (BUILDFLAG(IS_IOS) || BUILDFLAG(IS_WIN)) #define PA_DYNAMICALLY_SELECT_POOL_SIZE #endif #if defined(PA_HAS_64_BITS_POINTERS) && BUILDFLAG(GLUE_CORE_POOLS) #define PA_GLUE_CORE_POOLS #endif #if defined(PA_HAS_64_BITS_POINTERS) && \\ (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_ANDROID)) #include <linux/version.h> #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0) #define PA_STARSCAN_UFFD_WRITE_PROTECTOR_SUPPORTED #endif #endif #if defined(PA_HAS_64_BITS_POINTERS) && BUILDFLAG(STARSCAN) #define PA_STARSCAN_USE_CARD_TABLE 1 #else #define PA_STARSCAN_USE_CARD_TABLE 0 #endif #if PA_STARSCAN_USE_CARD_TABLE && !defined(PA_ALLOW_PCSCAN) #error \"Card table can only be used when *Scan is allowed\" #endif #define PA_STARSCAN_BATCHED_FREE 1 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) #define PA_HAS_LINUX_KERNEL #endif #if defined(PA_HAS_LINUX_KERNEL) || BUILDFLAG(IS_WIN) || \\ BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #define PA_HAS_FAST_MUTEX #endif #if 0 #define PA_ZERO_RANDOMLY_ON_FREE #endif #if BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_FUCHSIA) #define PA_THREAD_CACHE_SUPPORTED #endif #if BUILDFLAG(ENABLE_PARTITION_ALLOC_AS_MALLOC_SUPPORT) && \\ !defined(OFFICIAL_BUILD) #define PA_THREAD_CACHE_ALLOC_STATS #endif #define PA_THREAD_CACHE_ENABLE_STATISTICS #if !BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT) && \\ defined(ARCH_CPU_LITTLE_ENDIAN) #define PA_HAS_FREELIST_SHADOW_ENTRY #endif #if BUILDFLAG(ENABLE_MTE_CHECKED_PTR_SUPPORT) && \\ defined(PA_HAS_64_BITS_POINTERS) && !defined(PA_HAS_MEMORY_TAGGING) #define PA_ENABLE_MTE_CHECKED_PTR_SUPPORT_WITH_64_BITS_POINTERS #endif #if BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) || \\ defined(PA_ENABLE_MTE_CHECKED_PTR_SUPPORT_WITH_64_BITS_POINTERS) #define PA_EXTRAS_REQUIRED #endif #if !(BUILDFLAG(IS_WIN) && defined(COMPONENT_BUILD)) && !BUILDFLAG(IS_APPLE) #define PA_THREAD_LOCAL_TLS #endif #if BUILDFLAG(PA_DCHECK_IS_ON) && \\ BUILDFLAG(ENABLE_PARTITION_ALLOC_AS_MALLOC_SUPPORT) && \\ defined(PA_THREAD_LOCAL_TLS) && !BUILDFLAG(IS_ANDROID) #define PA_HAS_ALLOCATION_GUARD #endif #if defined(ARCH_CPU_ARM64) && defined(__clang__) && \\ (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_ANDROID)) static_assert(sizeof(void*) == 8)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# define PA_HAS_MEMORY_TAGGING # endif # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  }
]