[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneEvaluationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrack"
  },
  {
    "label": "FMovieSceneTrackRowSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackRowSegmentBlender"
  },
  {
    "label": "FMovieSceneTrackSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackSegmentBlender"
  },
  {
    "label": "IMovieSceneTemplateGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneTemplateGenerator"
  },
  {
    "label": "FMovieSceneConditionContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneConditionContainer"
  },
  {
    "label": "TMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTree"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneTrackEvalOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackEvalOptions"
  },
  {
    "label": "FMovieSceneTrackDisplayOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackDisplayOptions"
  },
  {
    "label": "FMovieSceneSupportsEasingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSupportsEasingParams"
  },
  {
    "label": "FMovieSceneTrackPreCompileResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackPreCompileResult"
  },
  {
    "label": "FMovieSceneSectionMovedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSectionMovedParams"
  },
  {
    "label": "FMovieSceneLabelParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneLabelParams"
  },
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compilation / MovieSceneSegmentCompiler . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Evaluation / MovieSceneEvaluationField . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Misc / InlineValue . h \" # include \" MovieSceneSignedObject . h \" # include \" MovieSceneTrackEvaluationField . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / UnrealType . h \" # include \" Conditions / MovieSceneCondition . h \" # if WITH_EDITOR # include \" Styling / SlateColor . h \" # endif # include \" MovieSceneTrack . generated . h \" class UMovieSceneSection ; class UObject ; struct FMovieSceneEvaluationTrack ; struct FMovieSceneTrackRowSegmentBlender ; struct FMovieSceneTrackSegmentBlender ; struct IMovieSceneTemplateGenerator ; struct FMovieSceneConditionContainer ; template<> struct TMovieSceneEvaluationTree ; enum class ECookOptimizationFlags { None = 0,RemoveTrack = 1<<0,RemoveObject = 1<<1,RemoveSection = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECookOptimizationFlags) USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTrackEvalOptions() : bCanEvaluateNearestSection(false) , bEvalNearestSection(false) , bEvaluateInPreroll(false) , bEvaluateInPostroll(false) , bEvaluateNearestSection_DEPRECATED(false)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTrackDisplayOptions() : bShowVerticalFrames(false)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EMovieSceneTrackEasingSupportFlags { None = 0,AutomaticEaseIn = 1<<0,AutomaticEaseOut = 1<<1,ManualEaseIn = 1<<2,ManualEaseOut = 1<<3,AutomaticEasing = AutomaticEaseIn | AutomaticEaseOut,ManualEasing = ManualEaseIn | ManualEaseOut,All = AutomaticEasing | ManualEasing } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMovieSceneTrackEasingSupportFlags)"
  },
  {
    "label": "FMovieSceneSupportsEasingParams()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneSection* ForSection ;)",
    "insertText": "FMovieSceneSupportsEasingParams() : ForSection(nullptr)"
  },
  {
    "label": "FMovieSceneSupportsEasingParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSupportsEasingParams(const UMovieSceneSection* InSection) : ForSection(InSection)"
  },
  {
    "label": "FMovieSceneSectionMovedParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMovieSceneTrackPreCompileResult { FMovieSceneEvaluationFieldEntityMetaData DefaultMetaData ; } ; # if WITH_EDITOR struct FMovieSceneSectionMovedParams { EPropertyChangeType::Type MoveType ;)",
    "insertText": "FMovieSceneSectionMovedParams(EPropertyChangeType::Type InMoveType) : MoveType(InMoveType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EMovieSceneSectionMovedResult { None = 0,SectionsChanged = 1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMovieSceneSectionMovedResult)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=\"Track Row\", meta=(ShowOnlyInnerProperties))"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, DefaultToInstanced, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: MOVIESCENE_API UMovieSceneTrack(const FObjectInitializer& InInitializer)"
  },
  {
    "label": "UMovieSceneTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UMovieSceneTrack()"
  },
  {
    "label": "GetSupportedBlendTypes()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBlendTypeField)",
    "insertText": "GetSupportedBlendTypes()"
  },
  {
    "label": "GetTrackSegmentBlender()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTrackSegmentBlenderPtr)",
    "insertText": "GetTrackSegmentBlender()"
  },
  {
    "label": "UpdateEasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEasing()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PreCompile()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PreCompile(FMovieSceneTrackPreCompileResult& OutPreCompileResult)"
  },
  {
    "label": "GetEvaluationField()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneTrackEvaluationField&)",
    "insertText": "GetEvaluationField()"
  },
  {
    "label": "GetEvaluationFieldVersion()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetEvaluationFieldVersion()"
  },
  {
    "label": "ForceUpdateEvaluationTree()",
    "kind": "Method",
    "detail": "Function (protected : enum class ETreePopulationMode : uint8 { None,Blended,HighPass,HighPassPerRow,} ; ETreePopulationMode BuiltInTreePopulationMode ; protected : void)",
    "insertText": "ForceUpdateEvaluationTree()"
  },
  {
    "label": "PopulateEvaluationTree()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PopulateEvaluationTree(TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutData)"
  },
  {
    "label": "UpdateEvaluationTree()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateEvaluationTree()"
  },
  {
    "label": "AddSectionRangesToTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSectionRangesToTree(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutData)"
  },
  {
    "label": "AddSectionPrePostRollRangesToTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSectionPrePostRollRangesToTree(TArrayView<UMovieSceneSection* const> Sections, TMovieSceneEvaluationTree<FMovieSceneTrackEvaluationData>& OutData)"
  },
  {
    "label": "GetTrackName()",
    "kind": "Method",
    "detail": "Function (public : FName)",
    "insertText": "GetTrackName()"
  },
  {
    "label": "RemoveAllAnimationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAnimationData()"
  },
  {
    "label": "SupportsMultipleRows()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsMultipleRows()"
  },
  {
    "label": "SupportsEasing()",
    "kind": "Method",
    "detail": "Function (} EMovieSceneTrackEasingSupportFlags)",
    "insertText": "SupportsEasing(FMovieSceneSupportsEasingParams& Params)"
  },
  {
    "label": "SetSectionToKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSectionToKey(UMovieSceneSection* InSection)"
  },
  {
    "label": "GetSectionToKey()",
    "kind": "Method",
    "detail": "Function (} ; UMovieSceneSection*)",
    "insertText": "GetSectionToKey()"
  },
  {
    "label": "FixRowIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixRowIndices()"
  },
  {
    "label": "OnRowIndicesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRowIndicesChanged(const TMap<int32, int32>& NewToOldRowIndices)"
  },
  {
    "label": "IsEvalDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEvalDisabled()"
  },
  {
    "label": "SetEvalDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvalDisabled(bool bEvalDisabled)"
  },
  {
    "label": "SetRowEvalDisabled()",
    "kind": "Method",
    "detail": "Function (bIsEvalDisabled = bEvalDisabled ; } void)",
    "insertText": "SetRowEvalDisabled(bool bEvalDisabled, int32 RowIndex)"
  },
  {
    "label": "FindTrackRowMetadata()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneTrackRowMetadata*)",
    "insertText": "FindTrackRowMetadata(int32 RowIndex)"
  },
  {
    "label": "FindOrAddTrackRowMetadata()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTrackRowMetadata&)",
    "insertText": "FindOrAddTrackRowMetadata(int32 RowIndex)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneSection> SectionClass) const PURE_VIRTUAL(UMovieSceneTrack::SupportsType, return false;)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSection(UMovieSceneSection& Section) PURE_VIRTUAL(UMovieSceneTrack::AddSection,)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (class UMovieSceneSection*)",
    "insertText": "CreateNewSection() PURE_VIRTUAL(UMovieSceneTrack::CreateNewSection, return nullptr;)"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (const TArray<UMovieSceneSection*>&)",
    "insertText": "GetAllSections() const PURE_VIRTUAL(UMovieSceneTrack::GetAllSections, static TArray<UMovieSceneSection*> Empty; return Empty;)"
  },
  {
    "label": "HasSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSection(const UMovieSceneSection& Section) const PURE_VIRTUAL(UMovieSceneTrack::HasSection, return false;)"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(UMovieSceneSection& Section) PURE_VIRTUAL(UMovieSceneTrack::RemoveSection,)"
  },
  {
    "label": "RemoveSectionAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSectionAt(int32 SectionIndex) PURE_VIRTUAL(UMovieSceneTrack::RemoveSectionAt,)"
  },
  {
    "label": "GetCookOptimizationFlags()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR ECookOptimizationFlags)",
    "insertText": "GetCookOptimizationFlags()"
  },
  {
    "label": "RemoveForCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForCook()"
  },
  {
    "label": "RemoveMutedTracksOnCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveMutedTracksOnCook()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDisplayName() const PURE_VIRTUAL(UMovieSceneTrack::GetDisplayName, return FText::FromString(TEXT(\"Unnamed Track\"));)"
  },
  {
    "label": "GetTrackRowDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTrackRowDisplayName(int32 RowIndex)"
  },
  {
    "label": "GetDisplayNameToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayNameToolTipText(const FMovieSceneLabelParams& LabelParams)"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetLabelColor(const FMovieSceneLabelParams& LabelParams)"
  },
  {
    "label": "GetColorTint()",
    "kind": "Method",
    "detail": "Function (} const FColor&)",
    "insertText": "GetColorTint()"
  },
  {
    "label": "GetSortingOrder()",
    "kind": "Method",
    "detail": "Function (TrackTint = InTrackTint ; } int32)",
    "insertText": "GetSortingOrder()"
  },
  {
    "label": "SupportsDefaultSections()",
    "kind": "Method",
    "detail": "Function (SortingOrder = InSortingOrder ; } bool)",
    "insertText": "SupportsDefaultSections()"
  },
  {
    "label": "OnSectionMoved()",
    "kind": "Method",
    "detail": "Function (public : # endif # if WITH_EDITOR EMovieSceneSectionMovedResult)",
    "insertText": "OnSectionMoved(UMovieSceneSection& Section, const FMovieSceneSectionMovedParams& Params)"
  }
]