[
  {
    "label": "FBehaviorDecoratorDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBehaviorDecoratorDetails"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBTDecorator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTDecorator"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BehaviorTree / BTAuxiliaryNode . h \" # include \" BTDecorator . generated . h \" class FBehaviorDecoratorDetails ; enum class EBTDecoratorAbortRequest : uint8 { ConditionResultChanged,ConditionPassing,} ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API bool WrappedCanExecute(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "WrappedOnNodeActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedOnNodeActivation(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "WrappedOnNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedOnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type NodeResult)"
  },
  {
    "label": "WrappedOnNodeProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedOnNodeProcessed(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "GetFlowAbortMode()",
    "kind": "Method",
    "detail": "Function (EBTFlowAbortMode::Type)",
    "insertText": "GetFlowAbortMode()"
  },
  {
    "label": "IsInversed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInversed()"
  },
  {
    "label": "GetStaticDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStaticDescription()"
  },
  {
    "label": "UpdateFlowAbortMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFlowAbortMode()"
  },
  {
    "label": "IsFlowAbortModeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlowAbortModeValid()"
  },
  {
    "label": "SetIsInversed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsInversed(bool bShouldBeInversed)"
  },
  {
    "label": "OnNodeActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeActivation(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "OnNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type NodeResult)"
  },
  {
    "label": "OnNodeProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeProcessed(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "CalculateRawConditionValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "ConditionalFlowAbort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalFlowAbort(UBehaviorTreeComponent& OwnerComp, EBTDecoratorAbortRequest RequestMode)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (FBehaviorDecoratorDetails ; template<TickNode,OnBecomeRelevant,OnCeaseRelevant,OnNodeActivation,OnNodeDeactivation,OnNodeProcessed> void)",
    "insertText": "InitNotifyFlags(TickNode, OnBecomeRelevant, OnCeaseRelevant, OnNodeActivation, OnNodeDeactivation, OnNodeProcessed)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyTick = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::TickNode)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyBecomeRelevant = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::OnBecomeRelevant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyCeaseRelevant = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::OnCeaseRelevant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyActivation = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::OnNodeActivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyDeactivation = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::OnNodeDeactivation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyProcessed = ! std::is_same_v<)",
    "insertText": "decltype(&UBTDecorator::OnNodeProcessed)"
  },
  {
    "label": "INIT_DECORATOR_NODE_NOTIFY_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "INIT_DECORATOR_NODE_NOTIFY_FLAGS()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using NodeType = TRemovePointer<)",
    "insertText": "decltype(this)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InitNotifyFlags(&NodeType::TickNode, \\ &NodeType::OnBecomeRelevant, \\ &NodeType::OnCeaseRelevant, \\ &NodeType::OnNodeActivation, \\ &NodeType::OnNodeDeactivation, \\ &NodeType::OnNodeProcessed)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) FORCEINLINE EBTFlowAbortMode::Type UBTDecorator::GetFlowAbortMode()"
  }
]