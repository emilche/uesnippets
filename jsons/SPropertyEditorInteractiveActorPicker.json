[
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "SPropertyEditorInteractiveActorPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorInteractiveActorPicker"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ActorPickerMode . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SButton . h \" struct FGeometry ; struct FKeyEvent ; class SPropertyEditorInteractiveActorPicker : public SButton { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorInteractiveActorPicker)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnGetAllowedClasses, OnGetAllowedClasses ) SLATE_EVENT( FOnShouldFilterActor, OnShouldFilterActor ) SLATE_EVENT( FOnActorSelected, OnActorSelected ) SLATE_END_ARGS() ~SPropertyEditorInteractiveActorPicker()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnClicked()"
  }
]