[
  {
    "label": "HeartbeatHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeartbeatHandler"
  },
  {
    "label": "HeartbeatHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_HEARTBEAT_HANDLER_H_ # define NET_DCSCTP_SOCKET_HEARTBEAT_HANDLER_H_ # include<stdint . h> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" net / dcsctp / packet / chunk / heartbeat_ack_chunk . h \" # include \" net / dcsctp / packet / chunk / heartbeat_request_chunk . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_options . h \" # include \" net / dcsctp / socket / context . h \" # include \" net / dcsctp / timer / timer . h \" namespace dcsctp { class HeartbeatHandler { public :)",
    "insertText": "HeartbeatHandler(absl::string_view log_prefix, const DcSctpOptions& options, Context* context, TimerManager* timer_manager)"
  },
  {
    "label": "RestartTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartTimer()"
  },
  {
    "label": "HandleHeartbeatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatRequest(HeartbeatRequestChunk chunk)"
  },
  {
    "label": "HandleHeartbeatAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatAck(HeartbeatAckChunk chunk)"
  },
  {
    "label": "OnIntervalTimerExpiry()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<DurationMs>)",
    "insertText": "OnIntervalTimerExpiry()"
  },
  {
    "label": "OnTimeoutTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnTimeoutTimerExpiry()"
  }
]