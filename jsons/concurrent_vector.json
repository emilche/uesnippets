[
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "concurrent_vector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_vector"
  },
  {
    "label": "vector_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "vector_iterator"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "concurrent_vector_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_vector_base_v3"
  },
  {
    "label": "pointers_per_short_table",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pointers_per_short_table"
  },
  {
    "label": "segment_not_used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segment_not_used"
  },
  {
    "label": "segment_allocated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segment_allocated"
  },
  {
    "label": "segment_allocation_failed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segment_allocation_failed"
  },
  {
    "label": "segment_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segment_t"
  },
  {
    "label": "segment_value_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segment_value_t"
  },
  {
    "label": "segment_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segment_t"
  },
  {
    "label": "segment_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "segment_t"
  },
  {
    "label": "internal_segments_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal_segments_table"
  },
  {
    "label": "helper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "helper"
  },
  {
    "label": "helper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "helper"
  },
  {
    "label": "vector_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "vector_iterator"
  },
  {
    "label": "vector_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "vector_iterator"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "allocator_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allocator_base"
  },
  {
    "label": "meets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meets"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "concurrent_vector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_vector"
  },
  {
    "label": "generic_range_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_range_type"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "destructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "destructor"
  },
  {
    "label": "is_integer_tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is_integer_tag"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "class"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "push_back_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "push_back_helper"
  },
  {
    "label": "element_construction_guard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "element_construction_guard"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (true)",
    "insertText": "__TBB_ASSERT(element_index, \"there should be no need to call \"\n                                        \"is_first_element_in_segment for 0th element\" )"
  },
  {
    "label": "is_power_of_two_at_least()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "is_power_of_two_at_least( element_index, 2 )"
  },
  {
    "label": "internal_reserve()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_reserve( size_type n, size_type element_size, size_type max_size )"
  },
  {
    "label": "internal_grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_grow( size_type start, size_type finish, size_type element_size, internal_array_op2 init, const void *src )"
  },
  {
    "label": "internal_grow_by()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_grow_by( size_type delta, size_type element_size, internal_array_op2 init, const void *src )"
  },
  {
    "label": "internal_push_back()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_back( size_type element_size, size_type& index )"
  },
  {
    "label": "internal_clear()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_clear( internal_array_op1 destroy )"
  },
  {
    "label": "internal_compact()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_compact( size_type element_size, void *table, internal_array_op1 destroy, internal_array_op2 copy )"
  },
  {
    "label": "internal_copy()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_copy( const concurrent_vector_base_v3& src, size_type element_size, internal_array_op2 copy )"
  },
  {
    "label": "internal_assign()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_assign( const concurrent_vector_base_v3& src, size_type element_size,\n                              internal_array_op1 destroy, internal_array_op2 assign, internal_array_op2 copy )"
  },
  {
    "label": "internal_swap()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_swap(concurrent_vector_base_v3& v)"
  },
  {
    "label": "internal_resize()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_resize( size_type n, size_type element_size, size_type max_size, const void *src,\n                                                    internal_array_op1 destroy, internal_array_op2 init )"
  },
  {
    "label": "internal_grow_to_at_least_with_result()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_grow_to_at_least_with_result( size_type new_size, size_type element_size, internal_array_op2 init, const void *src )"
  },
  {
    "label": "internal_grow_to_at_least()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_grow_to_at_least( size_type new_size, size_type element_size, internal_array_op2 init, const void *src )"
  },
  {
    "label": "vector_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vector_iterator( *my_vector, my_index+offset )"
  },
  {
    "label": "vector_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vector_iterator( *my_vector, my_index-offset )"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(*this, m)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(*this, m)"
  },
  {
    "label": "prolog()",
    "kind": "Method",
    "detail": "Function (push_back_helper)",
    "insertText": "prolog(*this)"
  },
  {
    "label": "prolog()",
    "kind": "Method",
    "detail": "Function (push_back_helper)",
    "insertText": "prolog(*this)"
  },
  {
    "label": "prolog()",
    "kind": "Method",
    "detail": "Function (push_back_helper)",
    "insertText": "prolog(*this)"
  },
  {
    "label": "internal_subscript()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_subscript(index)"
  },
  {
    "label": "internal_subscript()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_subscript(index)"
  },
  {
    "label": "internal_subscript_with_exceptions()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_subscript_with_exceptions(index)"
  },
  {
    "label": "internal_subscript_with_exceptions()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_subscript_with_exceptions(index)"
  },
  {
    "label": "internal_capacity()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_capacity()"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(*this,0)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(*this,0)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(*this,0)"
  },
  {
    "label": "internal_free_segments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_free_segments(segment_t table[], segment_index_t k, segment_index_t first_block)"
  },
  {
    "label": "foo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "foo(is_integer_tag<true>*)"
  },
  {
    "label": "foo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "foo(is_integer_tag<false>*)"
  },
  {
    "label": "internal_assign_iterators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_assign_iterators(I first, I last)"
  },
  {
    "label": "initialize_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "initialize_array( void* begin, const void*, size_type n )"
  },
  {
    "label": "initialize_array_by()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "initialize_array_by( void* begin, const void* src, size_type n )"
  },
  {
    "label": "copy_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "copy_array( void* dst, const void* src, size_type n )"
  },
  {
    "label": "move_array_if_noexcept()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "move_array_if_noexcept( void* dst, const void* src, size_type n )"
  },
  {
    "label": "move_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "move_array( void* dst, const void* src, size_type n )"
  },
  {
    "label": "move_assign_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "move_assign_array( void* dst, const void* src, size_type n )"
  },
  {
    "label": "copy_range()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "copy_range( void* dst, const void* p_type_erased_iterator, size_type n )"
  },
  {
    "label": "assign_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "assign_array( void* dst, const void* src, size_type n )"
  },
  {
    "label": "destroy_array()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "destroy_array( void* begin, size_type n )"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(v, k, ptr)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (internal_subscript)",
    "insertText": "__TBB_ASSERT( index < my_early_size, \"index out of bounds\" )"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, begin)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, begin)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (internal_loop_guide)",
    "insertText": "loop(n, dst)"
  }
]