[
  {
    "label": "TTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTuple"
  },
  {
    "label": "TEntityPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityPtr"
  },
  {
    "label": "TEntityRangeImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityRangeImpl"
  },
  {
    "label": "TEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityRange"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / IntegerSequence . h \" # include \" Templates / UnrealTemplate . h \" template<. . . T> struct TTuple ; namespace UE { namespace MovieScene { template<. . . T> struct TEntityPtr ; template<. . . T> struct TEntityRangeImpl ; template<. . . T> struct TEntityRange : TEntityRangeImpl<TMakeIntegerSequence<int,)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "TEntityRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEntityRange() : Super(0)"
  },
  {
    "label": "TEntityRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEntityRange(int32 InNum) : Super(InNum)"
  },
  {
    "label": "TEntityRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEntityRange(int32 InNum, T*... InComponentArrays) : Super(InNum, InComponentArrays...)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetComponentArrayReference()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex> auto*&)",
    "insertText": "GetComponentArrayReference()"
  },
  {
    "label": "GetRawUnchecked()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex> auto*)",
    "insertText": "GetRawUnchecked()"
  },
  {
    "label": "GetAll()",
    "kind": "Method",
    "detail": "Function (} template<int32 ComponentTypeIndex> auto)",
    "insertText": "GetAll()"
  },
  {
    "label": "ComponentTypeIndex()",
    "kind": "Method",
    "detail": "Function (auto* Ptr = this -> ComponentArrays . template Get<)",
    "insertText": "ComponentTypeIndex()"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex> auto&)",
    "insertText": "GetComponent(int32 EntityIndex)"
  },
  {
    "label": "GetComponentOptional()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex> auto*)",
    "insertText": "GetComponentOptional(int32 EntityIndex)"
  },
  {
    "label": "SetComponent()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex,ValueType> void)",
    "insertText": "SetComponent(int32 EntityIndex, ValueType&& InValue)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TEntityPtr<T . . .>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TEntityPtr<T . . .>)",
    "insertText": "end()"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (} } ; template<int . . . Indices,. . . T> struct TEntityRangeImpl<TIntegerSequence<int,Indices . . .>,T . . .> { void)",
    "insertText": "Slice(int32 Index, int32 NewNum)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Temp((ComponentArrays.template Get<Indices>() ? (ComponentArrays.template Get<Indices>() = ComponentArrays.template Get<Indices>() + Index, 0) : 0), 0)"
  },
  {
    "label": "TEntityRangeImpl()",
    "kind": "Method",
    "detail": "Function (NumEntities = NewNum ; } protected :)",
    "insertText": "TEntityRangeImpl(int32 InNum) : NumEntities(InNum)"
  },
  {
    "label": "TEntityRangeImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TEntityRangeImpl(int32 InNum, T*... InBasePtrs) : ComponentArrays(InBasePtrs...) , NumEntities(InNum)"
  },
  {
    "label": "TEntityPtr()",
    "kind": "Method",
    "detail": "Function (} TTuple<T* . . .> ComponentArrays ; int32 NumEntities ; } ; template<. . . T> struct TEntityPtr {)",
    "insertText": "TEntityPtr(int32 InEntityIndex, const TEntityRange<T...>* InOwner) : Owner(InOwner) , EntityIndex(InEntityIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TEntityPtr&)",
    "insertText": "operator()"
  },
  {
    "label": "GetOptional()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex> auto*)",
    "insertText": "GetOptional()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<int ComponentTypeIndex,ValueType> void)",
    "insertText": "Set(ValueType&& InValue)"
  },
  {
    "label": "ComponentTypeIndex()",
    "kind": "Method",
    "detail": "Function (Owner -> SetComponent<)",
    "insertText": "ComponentTypeIndex(EntityIndex, Forward<ValueType>(InValue))"
  },
  {
    "label": "TEntityPtr()",
    "kind": "Method",
    "detail": "Function (} private : const TEntityRange<T . . .>* Owner ; int32 EntityIndex ; } ; template<T> struct TEntityPtr<T> {)",
    "insertText": "TEntityPtr(int32 InEntityIndex, const TEntityRange<T>* InOwner) : Owner(InOwner) , EntityIndex(InEntityIndex)"
  }
]