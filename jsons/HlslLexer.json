[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHlslToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHlslToken"
  },
  {
    "label": "FHlslScanner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHlslScanner"
  },
  {
    "label": "FTokenizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenizer"
  },
  {
    "label": "IsIntegerType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" HlslUtils . h \" class Error ; namespace CrossCompiler { enum class EHlslToken { Invalid,Pragma,Plus,PlusEqual,Minus,MinusEqual,Times,TimesEqual,Div,DivEqual,Mod,ModEqual,LeftParenthesis,RightParenthesis,EqualEqual,NotEqual,Lower,LowerEqual,Greater,GreaterEqual,AndAnd,OrOr,LowerLower,LowerLowerEqual,GreaterGreater,GreaterGreaterEqual,And,AndEqual,Or,OrEqual,Xor,XorEqual,Not,Neg,Equal,LeftBrace,RightBrace,Semicolon,If,Else,For,While,Do,Return,Switch,Case,Break,Default,Continue,Goto,PlusPlus,MinusMinus,Void,Const,Precise,Bool,Bool1,Bool2,Bool3,Bool4,Bool1x1,Bool2x1,Bool3x1,Bool4x1,Bool1x2,Bool2x2,Bool3x2,Bool4x2,Bool1x3,Bool2x3,Bool3x3,Bool4x3,Bool1x4,Bool2x4,Bool3x4,Bool4x4,Int,Int1,Int2,Int3,Int4,Int1x1,Int2x1,Int3x1,Int4x1,Int1x2,Int2x2,Int3x2,Int4x2,Int1x3,Int2x3,Int3x3,Int4x3,Int1x4,Int2x4,Int3x4,Int4x4,Uint,Uint1,Uint2,Uint3,Uint4,Uint1x1,Uint2x1,Uint3x1,Uint4x1,Uint1x2,Uint2x2,Uint3x2,Uint4x2,Uint1x3,Uint2x3,Uint3x3,Uint4x3,Uint1x4,Uint2x4,Uint3x4,Uint4x4,Uint64_t,Uint64_t1,Uint64_t2,Uint64_t3,Uint64_t4,Uint64_t1x1,Uint64_t2x1,Uint64_t3x1,Uint64_t4x1,Uint64_t1x2,Uint64_t2x2,Uint64_t3x2,Uint64_t4x2,Uint64_t1x3,Uint64_t2x3,Uint64_t3x3,Uint64_t4x3,Uint64_t1x4,Uint64_t2x4,Uint64_t3x4,Uint64_t4x4,Half,Half1,Half2,Half3,Half4,Half1x1,Half2x1,Half3x1,Half4x1,Half1x2,Half2x2,Half3x2,Half4x2,Half1x3,Half2x3,Half3x3,Half4x3,Half1x4,Half2x4,Half3x4,Half4x4,Min16Float,Min16Float1,Min16Float2,Min16Float3,Min16Float4,Min16Float1x1,Min16Float2x1,Min16Float3x1,Min16Float4x1,Min16Float1x2,Min16Float2x2,Min16Float3x2,Min16Float4x2,Min16Float1x3,Min16Float2x3,Min16Float3x3,Min16Float4x3,Min16Float1x4,Min16Float2x4,Min16Float3x4,Min16Float4x4,Float,Float1,Float2,Float3,Float4,Float1x1,Float2x1,Float3x1,Float4x1,Float1x2,Float2x2,Float3x2,Float4x2,Float1x3,Float2x3,Float3x3,Float4x3,Float1x4,Float2x4,Float3x4,Float4x4,Texture,Texture1D,Texture1DArray,Texture2D,Texture2DArray,Texture2DMS,Texture2DMSArray,Texture3D,TextureCube,TextureCubeArray,Sampler,Sampler1D,Sampler2D,Sampler3D,SamplerCube,SamplerState,SamplerComparisonState,Buffer,AppendStructuredBuffer,ByteAddressBuffer,ConsumeStructuredBuffer,RWBuffer,RWByteAddressBuffer,RWStructuredBuffer,RWTexture1D,RWTexture1DArray,RWTexture2D,RWTexture2DArray,RasterizerOrderedTexture2D,RWTexture3D,StructuredBuffer,ConstantBuffer,RaytracingAccelerationStructure,In,Out,InOut,,Uniform,LeftSquareBracket,RightSquareBracket,Question,Colon,ColonColon,Comma,Dot,Struct,CBuffer,GroupShared,RowMajor,Register,,Typedef,PackOffset,Identifier,Operator,Literal,BoolConstant,StringConstant,StaticAssert,C99Pragma,} ; enum class ELiteralType { Unknown = - 1,Float,FloatSuffix,Integer,IntegerSuffix,Hex,HexSuffix,Octal,Bool,} ; bool)",
    "insertText": "IsIntegerType(ELiteralType Type)"
  },
  {
    "label": "DebugId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugId()"
  },
  {
    "label": "FHlslToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHlslToken(EHlslToken InToken, const FString& Identifier) : Token(InToken), String(Identifier)"
  },
  {
    "label": "FHlslToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHlslToken(const FString& InLiteral, ELiteralType InLiteralType) : Token(EHlslToken::Literal), LiteralType(InLiteralType), String(InLiteral)"
  },
  {
    "label": "FHlslScanner()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_DEBUG int32 DebugID = 0 ; + + DebugID ; # endif } } ; class FHlslScanner { public :)",
    "insertText": "FHlslScanner(FCompilerMessages& InCompilerMessages)"
  },
  {
    "label": "FHlslScanner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHlslScanner()"
  },
  {
    "label": "Lex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Lex(const FString& String, const FString& Filename)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump()"
  },
  {
    "label": "GetCurrentTokenIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentTokenIndex()"
  },
  {
    "label": "HasMoreTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMoreTokens()"
  },
  {
    "label": "MatchToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchToken(EHlslToken InToken)"
  },
  {
    "label": "MatchIntegerLiteral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchIntegerLiteral()"
  },
  {
    "label": "PeekToken()",
    "kind": "Method",
    "detail": "Function (const FHlslToken*)",
    "insertText": "PeekToken(uint32 LookAhead = 0)"
  },
  {
    "label": "GetCurrentToken()",
    "kind": "Method",
    "detail": "Function (const FHlslToken*)",
    "insertText": "GetCurrentToken()"
  },
  {
    "label": "GetCurrentTokenAndAdvance()",
    "kind": "Method",
    "detail": "Function (const FHlslToken*)",
    "insertText": "GetCurrentTokenAndAdvance()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance()"
  },
  {
    "label": "SourceError()",
    "kind": "Method",
    "detail": "Function (+ + CurrentToken ; } void)",
    "insertText": "SourceError(const FString& Error)"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (private : FCompilerMessages& CompilerMessages ; TArray<FHlslToken> Tokens ; void)",
    "insertText": "AddToken(const FHlslToken& Token, const struct FTokenizer& Tokenizer)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentToken ; TIndirectArray<FString> SourceFilenames ; void)",
    "insertText": "Clear(const FString& Filename)"
  }
]