[
  {
    "label": "FNetworkNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkNotify"
  },
  {
    "label": "FRepState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepState"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "FQueuedReplayTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedReplayTask"
  },
  {
    "label": "FRollbackNetStartupActorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRollbackNetStartupActorInfo"
  },
  {
    "label": "FDemoSavedRepObjectState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoSavedRepObjectState"
  },
  {
    "label": "FMulticastRecordOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMulticastRecordOptions"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "INetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkReplayStreamer"
  },
  {
    "label": "FReplayPlaylistTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistTracker"
  },
  {
    "label": "FDemoActorPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoActorPriority"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "FOutParmRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutParmRec"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "FLevelnterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelnterval"
  },
  {
    "label": "FRepActorsParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepActorsParams"
  },
  {
    "label": "FPendingTaskHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingTaskHelper"
  },
  {
    "label": "FDemoBudgetLogHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoBudgetLogHelper"
  },
  {
    "label": "UDemoNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetConnection"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Serialization / BitReader . h \" # include \" Misc / NetworkGuid . h \" # include \" Engine / EngineBaseTypes . h \" # include \" GameFramework / Actor . h \" # include \" Misc / EngineVersion . h \" # include \" GameFramework / PlayerController . h \" # include \" Engine / NetDriver . h \" # include \" Engine / PackageMapClient . h \" # include \" Misc / NetworkVersion . h \" # include \" NetworkReplayStreaming . h \" # include \" Engine / DemoNetConnection . h \" # include \" Net / RepLayout . h \" # include \" Net / Core / Connection / NetResult . h \" # include \" Net / ReplayResult . h \" # include \" Templates / Atomic . h \" # include \" Net / UnrealNetwork . h \" # include \" ReplayHelper . h \" # include \" DemoNetDriver . generated . h \" class FNetworkNotify ; class FRepState ; class UDemoNetDriver ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnGotoTimeMCDelegate)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGotoTimeDelegate, const bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnDemoStartedDelegate, UDemoNetDriver*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnDemoFinishPlaybackDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnDemoFinishRecordingDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPauseChannelsDelegate, const bool)"
  },
  {
    "label": "FQueuedReplayTask()",
    "kind": "Method",
    "detail": "Function (class FQueuedReplayTask : public TSharedFromThis<FQueuedReplayTask> { public :)",
    "insertText": "FQueuedReplayTask(UDemoNetDriver* InDriver) : Driver(InDriver)"
  },
  {
    "label": "FQueuedReplayTask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FQueuedReplayTask()"
  },
  {
    "label": "StartTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartTask()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "ShouldPausePlayback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPausePlayback()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "CountBytes(sizeof(FRepState), sizeof(FRepState))"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (LocalRepState ->)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T SizeOfRepState =)",
    "insertText": "sizeof(FRepState)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "CountBytes(SizeOfRepState, SizeOfRepState)"
  },
  {
    "label": "FDemoSavedRepObjectState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDemoSavedRepObjectState {)",
    "insertText": "FDemoSavedRepObjectState(const TWeakObjectPtr<const UObject>& InObject, const TSharedRef<const FRepLayout>& InRepLayout, FRepStateStaticBuffer&& InPropertyData)"
  },
  {
    "label": "FDemoSavedRepObjectState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDemoSavedRepObjectState()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TArray<struct FDemoSavedRepObjectState> FDemoSavedPropertyState ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(transient, config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UDemoNetDriver(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "UDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDemoNetDriver(FVTableHelper& Helper)"
  },
  {
    "label": "UDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UDemoNetDriver()"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorld(class UWorld* InWorld)"
  },
  {
    "label": "GetDemoFrameNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDemoFrameNum()"
  },
  {
    "label": "GetSpectatorController()",
    "kind": "Method",
    "detail": "Function (ReplayHelper . CurrentLevelIndex = Index ; } APlayerController*)",
    "insertText": "GetSpectatorController()"
  },
  {
    "label": "GetLastCheckpointTime()",
    "kind": "Method",
    "detail": "Function (public : double)",
    "insertText": "GetLastCheckpointTime()"
  },
  {
    "label": "RespawnNecessaryNetStartupActors()",
    "kind": "Method",
    "detail": "Function (ReplayHelper . LastCheckpointTime = CheckpointTime ; } void)",
    "insertText": "RespawnNecessaryNetStartupActors(TArray<AActor*>& SpawnedActors, ULevel* Level = nullptr)"
  },
  {
    "label": "RestoreComponentState()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RestoreComponentState(UActorComponent* ActorComp, FRollbackNetStartupActorInfo& RollbackActor)"
  },
  {
    "label": "InitDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDefaults()"
  },
  {
    "label": "LoadCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCheckpoint(const FGotoResult& GotoResult)"
  },
  {
    "label": "SetPlayingPlaylist()",
    "kind": "Method",
    "detail": "Function (TArray<TUniquePtr<FDeltaCheckpointData>> PlaybackDeltaCheckpointData ; TSharedPtr<struct FReplayPlaylistTracker> PlaylistTracker ; public : void)",
    "insertText": "SetPlayingPlaylist(TSharedPtr<struct FReplayPlaylistTracker> InPlaylistTracker)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (PlaylistTracker = InPlaylistTracker ; } void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "IsSavingCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSavingCheckpoint()"
  },
  {
    "label": "IsLoadingCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingCheckpoint()"
  },
  {
    "label": "IsRecordingMapChanges()",
    "kind": "Method",
    "detail": "Function (TArray<FPlaybackPacket> PlaybackPackets ; bool)",
    "insertText": "IsRecordingMapChanges()"
  },
  {
    "label": "TickFlushInternal()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<APlayerController> ViewerOverride ; TArray<FDemoActorPriority> PrioritizedActors ; void)",
    "insertText": "TickFlushInternal(float DeltaSeconds)"
  },
  {
    "label": "GetLastCheckpointTimeInMS()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLastCheckpointTimeInMS()"
  },
  {
    "label": "TickDemoRecordFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickDemoRecordFrame(float DeltaSeconds)"
  },
  {
    "label": "InitBase()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "InitBase(bool bInitAsClient, FNetworkNotify* InNotify, const FURL& URL, bool bReuseAddressAndPort, FString& Error)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "LowLevelGetNetworkNumber()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LowLevelGetNetworkNumber()"
  },
  {
    "label": "InitConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitConnect(FNetworkNotify* InNotify, const FURL& ConnectURL, FString& Error)"
  },
  {
    "label": "InitListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitListen(FNetworkNotify* InNotify, FURL& ListenURL, bool bReuseAddressAndPort, FString& Error)"
  },
  {
    "label": "TickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFlush(float DeltaSeconds)"
  },
  {
    "label": "PostTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickFlush()"
  },
  {
    "label": "TickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDispatch(float DeltaSeconds)"
  },
  {
    "label": "ProcessRemoteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemoteFunction(class AActor* Actor, class UFunction* Function, void* Parameters, struct FOutParmRec* OutParms, struct FFrame* Stack, class UObject* SubObject = nullptr)"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "ShouldClientDestroyTearOffActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClientDestroyTearOffActors()"
  },
  {
    "label": "ShouldSkipRepNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipRepNotifies()"
  },
  {
    "label": "ShouldQueueBunchesForActorGUID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldQueueBunchesForActorGUID(FNetworkGUID InGUID)"
  },
  {
    "label": "ShouldIgnoreRPCs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIgnoreRPCs()"
  },
  {
    "label": "GetGUIDForActor()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID)",
    "insertText": "GetGUIDForActor(const AActor* InActor)"
  },
  {
    "label": "GetActorForGUID()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetActorForGUID(FNetworkGUID InGUID)"
  },
  {
    "label": "ShouldReceiveRepNotifiesForObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReceiveRepNotifiesForObject(UObject* Object)"
  },
  {
    "label": "ForceNetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNetUpdate(AActor* Actor)"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServer()"
  },
  {
    "label": "ShouldReplicateFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplicateFunction(AActor* Actor, UFunction* Function)"
  },
  {
    "label": "ShouldReplicateActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplicateActor(AActor* Actor)"
  },
  {
    "label": "ShouldForwardFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForwardFunction(AActor* Actor, UFunction* Function, void* Parms)"
  },
  {
    "label": "NotifyActorChannelOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelOpen(UActorChannel* Channel, AActor* Actor)"
  },
  {
    "label": "NotifyActorChannelCleanedUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelCleanedUp(UActorChannel* Channel, EChannelCloseReason CloseReason)"
  },
  {
    "label": "NotifyActorClientDormancyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorClientDormancyChanged(AActor* Actor, ENetDormancy OldDormancyState)"
  },
  {
    "label": "NotifyActorTornOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorTornOff(AActor* Actor)"
  },
  {
    "label": "ProcessLocalServerPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLocalServerPackets()"
  },
  {
    "label": "ProcessLocalClientPackets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessLocalClientPackets()"
  },
  {
    "label": "InitDestroyedStartupActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDestroyedStartupActors()"
  },
  {
    "label": "SetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsProvider(TSharedPtr<IAnalyticsProvider> InProvider)"
  },
  {
    "label": "LowLevelSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelSend(TSharedPtr<const FInternetAddr> Address, void* Data, int32 CountBits, FOutPacketTraits& Traits)"
  },
  {
    "label": "GetSocketSubsystem()",
    "kind": "Method",
    "detail": "Function (} class ISocketSubsystem*)",
    "insertText": "GetSocketSubsystem()"
  },
  {
    "label": "ContinueListen()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ContinueListen(FURL& ListenURL)"
  },
  {
    "label": "GotoTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInSeconds(const float TimeInSeconds, const FOnGotoTimeDelegate& InOnGotoTimeDelegate = FOnGotoTimeDelegate())"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "GetDemoTotalTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDemoTotalTime()"
  },
  {
    "label": "GetDemoCurrentTime()",
    "kind": "Method",
    "detail": "Function (ReplayHelper . DemoTotalTime = TotalTime ; } float)",
    "insertText": "GetDemoCurrentTime()"
  },
  {
    "label": "GetDemoURL()",
    "kind": "Method",
    "detail": "Function (ReplayHelper . DemoCurrentTime = CurrentTime ; } FString)",
    "insertText": "GetDemoURL()"
  },
  {
    "label": "SetMaxDesiredRecordTimeMS()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxDesiredRecordTimeMS(const float InMaxDesiredRecordTimeMS)"
  },
  {
    "label": "GetMaxDesiredRecordTimeMS()",
    "kind": "Method",
    "detail": "Function (MaxDesiredRecordTimeMS = InMaxDesiredRecordTimeMS ; } float)",
    "insertText": "GetMaxDesiredRecordTimeMS()"
  },
  {
    "label": "SetActorPrioritizationEnabled()",
    "kind": "Method",
    "detail": "Function (ViewerOverride = InViewerOverride ; } void)",
    "insertText": "SetActorPrioritizationEnabled(const bool bInPrioritizeActors)"
  },
  {
    "label": "IsActorPrioritizationEnabled()",
    "kind": "Method",
    "detail": "Function (bPrioritizeActors = bInPrioritizeActors ; } bool)",
    "insertText": "IsActorPrioritizationEnabled()"
  },
  {
    "label": "GetLevelNameAndTimeList()",
    "kind": "Method",
    "detail": "Function (const TArray<FLevelNameAndTime>&)",
    "insertText": "GetLevelNameAndTimeList()"
  },
  {
    "label": "SavePropertyState()",
    "kind": "Method",
    "detail": "Function (FDemoSavedPropertyState)",
    "insertText": "SavePropertyState()"
  },
  {
    "label": "ComparePropertyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComparePropertyState(const FDemoSavedPropertyState& State)"
  },
  {
    "label": "IsNetResourceValid()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsNetResourceValid(void)"
  },
  {
    "label": "PauseChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseChannels(const bool bPause)"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording(const bool bInPauseRecording)"
  },
  {
    "label": "IsRecordingPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordingPaused()"
  },
  {
    "label": "ConditionallyProcessPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyProcessPlaybackPackets()"
  },
  {
    "label": "ProcessAllPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllPlaybackPackets()"
  },
  {
    "label": "ConditionallyReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyReadDemoFrameIntoPlaybackPackets(FArchive& Ar)"
  },
  {
    "label": "ProcessPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPacket(const uint8* Data, int32 Count)"
  },
  {
    "label": "ProcessPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPacket(const FPlaybackPacket& PlaybackPacket)"
  },
  {
    "label": "WriteDemoFrameFromQueuedDemoPackets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteDemoFrameFromQueuedDemoPackets(FArchive& Ar, TArray<FQueuedDemoPacket>& QueuedPackets, float FrameTime, EWriteDemoFrameFlags Flags)"
  },
  {
    "label": "WritePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePacket(FArchive& Ar, uint8* Data, int32 Count)"
  },
  {
    "label": "TickDemoPlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDemoPlayback(float DeltaSeconds)"
  },
  {
    "label": "FinalizeFastForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFastForward(const double StartTime)"
  },
  {
    "label": "SpawnDemoRecSpectator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnDemoRecSpectator(UNetConnection* Connection, const FURL& ListenURL)"
  },
  {
    "label": "RestoreConnectionPostScrub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreConnectionPostScrub(APlayerController* PC, UNetConnection* NetConnection)"
  },
  {
    "label": "SetSpectatorController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorController(APlayerController* PC)"
  },
  {
    "label": "SpawnSplitscreenViewer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnSplitscreenViewer(ULocalPlayer* NewPlayer, UWorld* InWorld)"
  },
  {
    "label": "RemoveSplitscreenViewer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSplitscreenViewer(APlayerController* RemovePlayer, bool bMarkOwnerForDeletion=false)"
  },
  {
    "label": "CleanUpSplitscreenConnections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CleanUpSplitscreenConnections(bool bDeleteOwner)"
  },
  {
    "label": "ResetDemoState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ResetDemoState()"
  },
  {
    "label": "JumpToEndOfLiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEndOfLiveReplay()"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& EventName, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEventsForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsForActiveReplay(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEventsForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsForActiveReplay(const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventDataForActiveReplay(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventDataForActiveReplay(const FString& EventID, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupDataForActiveReplay(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupDataForActiveReplay(const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "IsFastForwarding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFastForwarding()"
  },
  {
    "label": "SetExternalDataForObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetExternalDataForObject(UObject* OwningObject, const uint8* Src, const int32 NumBits)"
  },
  {
    "label": "ReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDemoFrameIntoPlaybackPackets(FArchive& Ar, TArray<FPlaybackPacket>& Packets, const bool bForLevelFastForward, float* OutTime)"
  },
  {
    "label": "ReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDemoFrameIntoPlaybackPackets(FArchive& Ar)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "StopDemo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDemo()"
  },
  {
    "label": "ReplayStreamingReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplayStreamingReady(const FStartStreamingResult& Result)"
  },
  {
    "label": "AddReplayTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReplayTask(FQueuedReplayTask* NewTask)"
  },
  {
    "label": "IsAnyTaskPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyTaskPending()"
  },
  {
    "label": "ClearReplayTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearReplayTasks()"
  },
  {
    "label": "ProcessReplayTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessReplayTasks()"
  },
  {
    "label": "IsNamedTaskInQueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNamedTaskInQueue(const FName& Name)"
  },
  {
    "label": "GetNextQueuedTaskName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNextQueuedTaskName()"
  },
  {
    "label": "AddNonQueuedActorForScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNonQueuedActorForScrubbing(AActor const* Actor)"
  },
  {
    "label": "AddNonQueuedGUIDForScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNonQueuedGUIDForScrubbing(FNetworkGUID InGUID)"
  },
  {
    "label": "IsLevelInitializedForActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelInitializedForActor(const AActor* InActor, const UNetConnection* InConnection)"
  },
  {
    "label": "NotifyGotoTimeFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGotoTimeFinished(bool bWasSuccessful)"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* ThisActor, bool IsSeamlessTravel=false)"
  },
  {
    "label": "NotifyActorLevelUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorLevelUnloaded(AActor* Actor)"
  },
  {
    "label": "NotifyStreamingLevelUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyStreamingLevelUnload(ULevel* InLevel)"
  },
  {
    "label": "QueueNetStartupActorForRollbackViaDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueNetStartupActorForRollbackViaDeletion(AActor* Actor)"
  },
  {
    "label": "OnSeamlessTravelStartDuringRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeamlessTravelStartDuringRecording(const FString& LevelName)"
  },
  {
    "label": "GetDemoSessionID()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDemoSessionID()"
  },
  {
    "label": "HasLevelStreamingFixes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLevelStreamingFixes()"
  },
  {
    "label": "HasDeltaCheckpoints()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDeltaCheckpoints()"
  },
  {
    "label": "HasGameSpecificFrameData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasGameSpecificFrameData()"
  },
  {
    "label": "GetActiveReplayName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetActiveReplayName()"
  },
  {
    "label": "GetPlaybackReplayVersion()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return ReplayHelper . PlaybackDemoHeader . Version ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } FReplayCustomVersion::Type)",
    "insertText": "GetPlaybackReplayVersion()"
  },
  {
    "label": "GetPlaybackEngineNetworkProtocolVersion()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPlaybackEngineNetworkProtocolVersion()"
  },
  {
    "label": "GetPlaybackGameNetworkProtocolVersion()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPlaybackGameNetworkProtocolVersion()"
  },
  {
    "label": "GetPlaybackCustomVersionVersion()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPlaybackCustomVersionVersion(const FGuid& VersionGuid)"
  },
  {
    "label": "GetDemoPath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDemoPath()"
  },
  {
    "label": "BuildSortedLevelPriorityOnLevels()",
    "kind": "Method",
    "detail": "Function (private : struct FLevelnterval { int32 Priority ; int32 StartIndex ; int32 Count ; int32 LevelIndex ; } ; TArray<FLevelnterval> LevelIntervals ; void)",
    "insertText": "BuildSortedLevelPriorityOnLevels(const TArray<FDemoActorPriority>& PrioritizedActorList, TArray<FLevelnterval>& OutLevelIntervals)"
  },
  {
    "label": "OnRefreshHeaderCompletePrivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshHeaderCompletePrivate(const FDownloadHeaderResult& Result, int32 LevelIndex)"
  },
  {
    "label": "CleanupOutstandingRewindActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupOutstandingRewindActors()"
  },
  {
    "label": "ShouldSkipPlaybackPacket()",
    "kind": "Method",
    "detail": "Function (TSet<FNetworkGUID> TrackedRewindActorsByGUID ; float LastProcessedPacketTime ; int32 PlaybackPacketIndex ; bool)",
    "insertText": "ShouldSkipPlaybackPacket(const FPlaybackPacket& Packet)"
  },
  {
    "label": "ReplicatePrioritizedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicatePrioritizedActors(const FDemoActorPriority* ActorsToReplicate, uint32 Count, class FRepActorsParams& Params)"
  },
  {
    "label": "ReplicatePrioritizedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicatePrioritizedActor(const FActorPriority& ActorPriority, class FRepActorsParams& Params)"
  },
  {
    "label": "PrepFastForwardLevels()",
    "kind": "Method",
    "detail": "Function (class FPendingTaskHelper ; void)",
    "insertText": "PrepFastForwardLevels()"
  },
  {
    "label": "FastForwardLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FastForwardLevels(const FGotoResult& GotoResult)"
  },
  {
    "label": "OnPostLoadMapWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMapWithWorld(UWorld* World)"
  },
  {
    "label": "DiffActorProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiffActorProperties(UActorChannel* const ActorChannel)"
  },
  {
    "label": "OnActorPreDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorPreDestroy(AActor* DestroyedActor)"
  },
  {
    "label": "ProcessSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle DelegateHandleActorPreDestroy ; protected : void)",
    "insertText": "ProcessSeamlessTravel(int32 LevelIndex)"
  },
  {
    "label": "DemoReplicateActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DemoReplicateActor(AActor* Actor, UNetConnection* Connection, bool bMustReplicate)"
  },
  {
    "label": "NotifyDemoPlaybackError()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "NotifyDemoPlaybackError(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "NotifyDemoRecordFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDemoRecordFailure(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "AdjustConsiderTime()",
    "kind": "Method",
    "detail": "Function (TArray<FQueuedDemoPacket> QueuedPacketsBeforeTravel ; int64 MaxArchiveReadPos ; private : float RecordBuildConsiderAndPrioritizeTimeSlice ; float RecordDestructionInfoReplicationTimeSlice ; void)",
    "insertText": "AdjustConsiderTime(const float ReplicatedPercent)"
  },
  {
    "label": "ProcessFastForwardPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessFastForwardPackets(TArrayView<FPlaybackPacket> Packets, const TSet<int32>& LevelIndices)"
  },
  {
    "label": "ProcessPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlaybackPackets(TArrayView<FPlaybackPacket> Packets)"
  },
  {
    "label": "GetCreateReplicationChangelistMgrFlags()",
    "kind": "Method",
    "detail": "Function (ECreateReplicationChangelistMgrFlags)",
    "insertText": "GetCreateReplicationChangelistMgrFlags()"
  }
]