[
  {
    "label": "FNetworkNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkNotify"
  },
  {
    "label": "FRepState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepState"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "FQueuedReplayTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedReplayTask"
  },
  {
    "label": "FRollbackNetStartupActorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRollbackNetStartupActorInfo"
  },
  {
    "label": "FDemoSavedRepObjectState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoSavedRepObjectState"
  },
  {
    "label": "FDemoSavedRepObjectState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoSavedRepObjectState"
  },
  {
    "label": "FMulticastRecordOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMulticastRecordOptions"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "INetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkReplayStreamer"
  },
  {
    "label": "INetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkReplayStreamer"
  },
  {
    "label": "FReplayPlaylistTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistTracker"
  },
  {
    "label": "FReplayPlaylistTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistTracker"
  },
  {
    "label": "FDemoActorPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoActorPriority"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "FOutParmRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutParmRec"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "FLevelnterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelnterval"
  },
  {
    "label": "FRepActorsParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepActorsParams"
  },
  {
    "label": "FRepActorsParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepActorsParams"
  },
  {
    "label": "FPendingTaskHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingTaskHelper"
  },
  {
    "label": "FDemoBudgetLogHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDemoBudgetLogHelper"
  },
  {
    "label": "UDemoNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetConnection"
  },
  {
    "label": "FQueuedReplayTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedReplayTask"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnDemoFinishPlaybackDelegate)"
  },
  {
    "label": "FDemoSavedRepObjectState()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FDemoSavedRepObjectState(\n\t\tconst TWeakObjectPtr<const UObject>& InObject,\n\t\tconst TSharedRef<const FRepLayout>& InRepLayout,\n\t\tFRepStateStaticBuffer&& InPropertyData)"
  },
  {
    "label": "UDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UDemoNetDriver(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "UDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UDemoNetDriver(FVTableHelper& Helper)"
  },
  {
    "label": "RespawnNecessaryNetStartupActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RespawnNecessaryNetStartupActors(TArray<AActor*>& SpawnedActors, ULevel* Level = nullptr)"
  },
  {
    "label": "RestoreComponentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreComponentState(UActorComponent* ActorComp, FRollbackNetStartupActorInfo& RollbackActor)"
  },
  {
    "label": "InitDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDefaults()"
  },
  {
    "label": "LoadCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCheckpoint(const FGotoResult& GotoResult)"
  },
  {
    "label": "RequestCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCheckpoint()"
  },
  {
    "label": "TickFlushInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFlushInternal(float DeltaSeconds)"
  },
  {
    "label": "TickDemoRecordFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDemoRecordFrame(float DeltaSeconds)"
  },
  {
    "label": "SkipTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipTime(const float InTimeToSkip)"
  },
  {
    "label": "SkipTimeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipTimeInternal(const float SecondsToSkip, const bool InFastForward, const bool InIsForCheckpoint)"
  },
  {
    "label": "InitConnectInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitConnectInternal(FString& Error)"
  },
  {
    "label": "ContinueListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinueListen(FURL& ListenURL)"
  },
  {
    "label": "TickFlushAsyncEndOfFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFlushAsyncEndOfFrame(float DeltaSeconds)"
  },
  {
    "label": "TickDemoRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDemoRecord(float DeltaSeconds)"
  },
  {
    "label": "PauseChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseChannels(const bool bPause)"
  },
  {
    "label": "PauseRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRecording(const bool bInPauseRecording)"
  },
  {
    "label": "ConditionallyProcessPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyProcessPlaybackPackets()"
  },
  {
    "label": "ProcessAllPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllPlaybackPackets()"
  },
  {
    "label": "ConditionallyReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionallyReadDemoFrameIntoPlaybackPackets(FArchive& Ar)"
  },
  {
    "label": "ProcessPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPacket(const uint8* Data, int32 Count)"
  },
  {
    "label": "WriteDemoFrameFromQueuedDemoPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDemoFrameFromQueuedDemoPackets(FArchive& Ar, TArray<FQueuedDemoPacket>& QueuedPackets, float FrameTime, EWriteDemoFrameFlags Flags)"
  },
  {
    "label": "WritePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePacket(FArchive& Ar, uint8* Data, int32 Count)"
  },
  {
    "label": "TickDemoPlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDemoPlayback(float DeltaSeconds)"
  },
  {
    "label": "FinalizeFastForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFastForward(const double StartTime)"
  },
  {
    "label": "SpawnDemoRecSpectator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnDemoRecSpectator( UNetConnection* Connection, const FURL& ListenURL)"
  },
  {
    "label": "RestoreConnectionPostScrub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreConnectionPostScrub(APlayerController* PC, UNetConnection* NetConnection)"
  },
  {
    "label": "SetSpectatorController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorController(APlayerController* PC)"
  },
  {
    "label": "SpawnSplitscreenViewer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnSplitscreenViewer(ULocalPlayer* NewPlayer, UWorld* InWorld)"
  },
  {
    "label": "RemoveSplitscreenViewer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSplitscreenViewer(APlayerController* RemovePlayer, bool bMarkOwnerForDeletion=false)"
  },
  {
    "label": "CleanUpSplitscreenConnections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CleanUpSplitscreenConnections(bool bDeleteOwner)"
  },
  {
    "label": "ResetDemoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDemoState()"
  },
  {
    "label": "JumpToEndOfLiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEndOfLiveReplay()"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& EventName, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEventsForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsForActiveReplay(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEventsForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsForActiveReplay(const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventDataForActiveReplay(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventDataForActiveReplay(const FString& EventID, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupDataForActiveReplay(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupDataForActiveReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupDataForActiveReplay(const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SetExternalDataForObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetExternalDataForObject(UObject* OwningObject, const uint8* Src, const int32 NumBits)"
  },
  {
    "label": "ReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadDemoFrameIntoPlaybackPackets(FArchive& Ar, TArray<FPlaybackPacket>& Packets, const bool bForLevelFastForward, float* OutTime)"
  },
  {
    "label": "ReadDemoFrameIntoPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReadDemoFrameIntoPlaybackPackets(Ar, PlaybackPackets, false, nullptr)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "StopDemo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDemo()"
  },
  {
    "label": "ReplayStreamingReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplayStreamingReady(const FStartStreamingResult& Result)"
  },
  {
    "label": "AddReplayTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReplayTask(FQueuedReplayTask* NewTask)"
  },
  {
    "label": "ClearReplayTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearReplayTasks()"
  },
  {
    "label": "ProcessReplayTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessReplayTasks()"
  },
  {
    "label": "AddNonQueuedActorForScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNonQueuedActorForScrubbing(AActor const* Actor)"
  },
  {
    "label": "AddNonQueuedGUIDForScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNonQueuedGUIDForScrubbing(FNetworkGUID InGUID)"
  },
  {
    "label": "NotifyGotoTimeFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGotoTimeFinished(bool bWasSuccessful)"
  },
  {
    "label": "QueueNetStartupActorForRollbackViaDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueNetStartupActorForRollbackViaDeletion(AActor* Actor)"
  },
  {
    "label": "OnSeamlessTravelStartDuringRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSeamlessTravelStartDuringRecording(const FString& LevelName)"
  },
  {
    "label": "BuildSortedLevelPriorityOnLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSortedLevelPriorityOnLevels(const TArray<FDemoActorPriority>& PrioritizedActorList, TArray<FLevelnterval>& OutLevelIntervals)"
  },
  {
    "label": "OnRefreshHeaderCompletePrivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshHeaderCompletePrivate(const FDownloadHeaderResult& Result, int32 LevelIndex)"
  },
  {
    "label": "CleanupOutstandingRewindActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupOutstandingRewindActors()"
  },
  {
    "label": "ShouldSkipPlaybackPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipPlaybackPacket(const FPlaybackPacket& Packet)"
  },
  {
    "label": "ReplicatePrioritizedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicatePrioritizedActors(const FDemoActorPriority* ActorsToReplicate, uint32 Count, class FRepActorsParams& Params)"
  },
  {
    "label": "ReplicatePrioritizedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicatePrioritizedActor(const FActorPriority& ActorPriority, class FRepActorsParams& Params)"
  },
  {
    "label": "PrepFastForwardLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepFastForwardLevels()"
  },
  {
    "label": "FastForwardLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FastForwardLevels(const FGotoResult& GotoResult)"
  },
  {
    "label": "OnPostLoadMapWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMapWithWorld(UWorld* World)"
  },
  {
    "label": "DiffActorProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiffActorProperties(UActorChannel* const ActorChannel)"
  },
  {
    "label": "OnActorPreDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorPreDestroy(AActor* DestroyedActor)"
  },
  {
    "label": "ProcessSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSeamlessTravel(int32 LevelIndex)"
  },
  {
    "label": "DemoReplicateActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DemoReplicateActor(AActor* Actor, UNetConnection* Connection, bool bMustReplicate)"
  },
  {
    "label": "NotifyDemoPlaybackFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDemoPlaybackFailure(EDemoPlayFailure::Type FailureType)"
  },
  {
    "label": "NotifyDemoPlaybackError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDemoPlaybackError(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "NotifyDemoRecordFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDemoRecordFailure(const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "AdjustConsiderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustConsiderTime(const float ReplicatedPercent)"
  },
  {
    "label": "ProcessFastForwardPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessFastForwardPackets(TArrayView<FPlaybackPacket> Packets, const TSet<int32>& LevelIndices)"
  },
  {
    "label": "ProcessPlaybackPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPlaybackPackets(TArrayView<FPlaybackPacket> Packets)"
  }
]