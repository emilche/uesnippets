[
  {
    "label": "MachineFunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunctionPass"
  },
  {
    "label": "PassConfigImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassConfigImpl"
  },
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "ScheduleDAGInstrs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGInstrs"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetLoweringBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLoweringBase"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MachineSchedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineSchedContext"
  },
  {
    "label": "PassManagerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerBase"
  },
  {
    "label": "IdentifyingPassPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IdentifyingPassPtr"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "TargetPassConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetPassConfig"
  },
  {
    "label": "IdentifyingPassPtr()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_PASSES_H # define LLVM_CODEGEN_PASSES_H # include \" llvm / Pass . h \" # include \" llvm / Target / TargetMachine . h \" # include<functional> # include<string> namespace llvm { class MachineFunctionPass ; class PassConfigImpl ; class PassInfo ; class ScheduleDAGInstrs ; class TargetLowering ; class TargetLoweringBase ; class TargetRegisterClass ; class raw_ostream ; struct MachineSchedContext ; namespace legacy { class PassManagerBase ; } using legacy::PassManagerBase ; class IdentifyingPassPtr { union { AnalysisID ID ; Pass* P ; } ; bool IsInstance ; public :)",
    "insertText": "IdentifyingPassPtr() : P(nullptr), IsInstance(false)"
  },
  {
    "label": "IdentifyingPassPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IdentifyingPassPtr(AnalysisID IDPtr) : ID(IDPtr), IsInstance(false)"
  },
  {
    "label": "IdentifyingPassPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IdentifyingPassPtr(Pass *InstancePtr) : P(InstancePtr), IsInstance(true)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!IsInstance && \"Not a Pass ID\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsInstance && \"Not a Pass Instance\")"
  },
  {
    "label": "TargetPassConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetPassConfig()"
  },
  {
    "label": "getTM()",
    "kind": "Method",
    "detail": "Function (char ID ; template<TMC> TMC&)",
    "insertText": "getTM()"
  },
  {
    "label": "setInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setInitialized()"
  },
  {
    "label": "getOptLevel()",
    "kind": "Method",
    "detail": "Function (Initialized = true ; } CodeGenOpt::Level)",
    "insertText": "getOptLevel()"
  },
  {
    "label": "setStartStopPasses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setStartStopPasses(AnalysisID StartBefore, AnalysisID StartAfter, AnalysisID StopAfter)"
  },
  {
    "label": "Started()",
    "kind": "Method",
    "detail": "Function (this -> StartBefore = StartBefore ; this -> StartAfter = StartAfter ; this -> StopAfter = StopAfter ;)",
    "insertText": "Started(StartAfter == nullptr) && (StartBefore == nullptr)"
  },
  {
    "label": "setDisableVerify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDisableVerify(bool Disable)"
  },
  {
    "label": "setOpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOpt(DisableVerify, Disable)"
  },
  {
    "label": "getEnableTailMerge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getEnableTailMerge()"
  },
  {
    "label": "setOpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOpt(EnableTailMerge, Enable)"
  },
  {
    "label": "substitutePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "substitutePass(AnalysisID StandardID, IdentifyingPassPtr TargetID)"
  },
  {
    "label": "insertPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertPass(AnalysisID TargetPassID, IdentifyingPassPtr InsertedPassID)"
  },
  {
    "label": "enablePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enablePass(AnalysisID PassID)"
  },
  {
    "label": "substitutePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "substitutePass(PassID, PassID)"
  },
  {
    "label": "disablePass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "disablePass(AnalysisID PassID)"
  },
  {
    "label": "substitutePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "substitutePass(PassID, IdentifyingPassPtr())"
  },
  {
    "label": "getPassSubstitution()",
    "kind": "Method",
    "detail": "Function (} IdentifyingPassPtr)",
    "insertText": "getPassSubstitution(AnalysisID StandardID)"
  },
  {
    "label": "getOptimizeRegAlloc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getOptimizeRegAlloc()"
  },
  {
    "label": "getEnableShrinkWrap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getEnableShrinkWrap()"
  },
  {
    "label": "usingDefaultRegAlloc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "usingDefaultRegAlloc()"
  },
  {
    "label": "addIRPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addIRPasses()"
  },
  {
    "label": "addPassesToHandleExceptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPassesToHandleExceptions()"
  },
  {
    "label": "addCodeGenPrepare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCodeGenPrepare()"
  },
  {
    "label": "addISelPrepare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addISelPrepare()"
  },
  {
    "label": "addInstSelector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addInstSelector()"
  },
  {
    "label": "createMachineScheduler()",
    "kind": "Method",
    "detail": "Function (ScheduleDAGInstrs*)",
    "insertText": "createMachineScheduler(MachineSchedContext *C)"
  },
  {
    "label": "addPreISel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addPreISel()"
  },
  {
    "label": "addILPOpts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addILPOpts()"
  },
  {
    "label": "createTargetRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (} FunctionPass*)",
    "insertText": "createTargetRegisterAllocator(bool Optimized)"
  },
  {
    "label": "addFastRegAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addFastRegAlloc(FunctionPass *RegAllocPass)"
  },
  {
    "label": "addOptimizedRegAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOptimizedRegAlloc(FunctionPass *RegAllocPass)"
  },
  {
    "label": "addPreRewrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addPreRewrite()"
  },
  {
    "label": "addMachineLateOptimization()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addMachineLateOptimization()"
  },
  {
    "label": "addPreSched2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPreSched2()"
  },
  {
    "label": "addGCPasses()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "addGCPasses()"
  },
  {
    "label": "addBlockPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addBlockPlacement()"
  },
  {
    "label": "addPreEmitPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPreEmitPass()"
  },
  {
    "label": "addPass()",
    "kind": "Method",
    "detail": "Function (} AnalysisID)",
    "insertText": "addPass(AnalysisID PassID, bool verifyAfter = true, bool printAfter = true)"
  },
  {
    "label": "addPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPass(Pass *P, bool verifyAfter = true, bool printAfter = true)"
  },
  {
    "label": "createRegAllocPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createRegAllocPass(bool Optimized)"
  },
  {
    "label": "printAndVerify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printAndVerify(const std::string &Banner)"
  },
  {
    "label": "addPrintPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPrintPass(const std::string &Banner)"
  },
  {
    "label": "addVerifyPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVerifyPass(const std::string &Banner)"
  },
  {
    "label": "createAtomicExpandPass()",
    "kind": "Method",
    "detail": "Function (} ; } namespace llvm { FunctionPass*)",
    "insertText": "createAtomicExpandPass(const TargetMachine *TM)"
  },
  {
    "label": "createUnreachableBlockEliminationPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createUnreachableBlockEliminationPass()"
  },
  {
    "label": "createMachineFunctionPrinterPass()",
    "kind": "Method",
    "detail": "Function (MachineFunctionPass*)",
    "insertText": "createMachineFunctionPrinterPass(raw_ostream &OS, const std::string &Banner =\"\")"
  },
  {
    "label": "createPrintMIRPass()",
    "kind": "Method",
    "detail": "Function (MachineFunctionPass*)",
    "insertText": "createPrintMIRPass(raw_ostream &OS)"
  },
  {
    "label": "createCodeGenPreparePass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createCodeGenPreparePass(const TargetMachine *TM = nullptr)"
  },
  {
    "label": "createFastRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (char& AtomicExpandID ; char& MachineLoopInfoID ; char& MachineDominatorsID ; char& MachineDominanceFrontierID ; char& EdgeBundlesID ; char& LiveVariablesID ; char& PHIEliminationID ; char& LiveIntervalsID ; char& LiveStacksID ; char& TwoAddressInstructionPassID ; char& ProcessImplicitDefsID ; char& RegisterCoalescerID ; char& MachineSchedulerID ; char& PostMachineSchedulerID ; char& SpillPlacementID ; char& ShrinkWrapID ; char& VirtRegRewriterID ; char& UnreachableMachineBlockElimID ; char& DeadMachineInstructionElimID ; FunctionPass*)",
    "insertText": "createFastRegisterAllocator()"
  },
  {
    "label": "createBasicRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createBasicRegisterAllocator()"
  },
  {
    "label": "createGreedyRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createGreedyRegisterAllocator()"
  },
  {
    "label": "createDefaultPBQPRegisterAllocator()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createDefaultPBQPRegisterAllocator()"
  },
  {
    "label": "createIfConverter()",
    "kind": "Method",
    "detail": "Function (char& PrologEpilogCodeInserterID ; char& ExpandPostRAPseudosID ; char& PostRASchedulerID ; char& BranchFolderPassID ; char& MachineFunctionPrinterPassID ; char& MIRPrintingPassID ; char& TailDuplicateID ; char& MachineTraceMetricsID ; char& EarlyIfConverterID ; char& MachineCombinerID ; char& StackColoringID ; char& IfConverterID ; FunctionPass*)",
    "insertText": "createIfConverter(std::function<bool(const Function &)> Ftor)"
  },
  {
    "label": "createGCLoweringPass()",
    "kind": "Method",
    "detail": "Function (char& MachineBlockPlacementID ; char& MachineBlockPlacementStatsID ; FunctionPass*)",
    "insertText": "createGCLoweringPass()"
  },
  {
    "label": "createShadowStackGCLoweringPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createShadowStackGCLoweringPass()"
  },
  {
    "label": "createGCInfoPrinter()",
    "kind": "Method",
    "detail": "Function (char& GCMachineCodeAnalysisID ; FunctionPass*)",
    "insertText": "createGCInfoPrinter(raw_ostream &OS)"
  },
  {
    "label": "createStackProtectorPass()",
    "kind": "Method",
    "detail": "Function (char& MachineCSEID ; char& ImplicitNullChecksID ; char& MachineLICMID ; char& MachineSinkingID ; char& MachineCopyPropagationID ; char& PeepholeOptimizerID ; char& OptimizePHIsID ; char& StackSlotColoringID ; FunctionPass*)",
    "insertText": "createStackProtectorPass(const TargetMachine *TM)"
  },
  {
    "label": "createMachineVerifierPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createMachineVerifierPass(const std::string& Banner)"
  },
  {
    "label": "createDwarfEHPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createDwarfEHPass(const TargetMachine *TM)"
  },
  {
    "label": "createWinEHPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createWinEHPass(const TargetMachine *TM)"
  },
  {
    "label": "createSjLjEHPreparePass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createSjLjEHPreparePass()"
  },
  {
    "label": "createExecutionDependencyFixPass()",
    "kind": "Method",
    "detail": "Function (char& LocalStackSlotAllocationID ; char& ExpandISelPseudosID ; FunctionPass*)",
    "insertText": "createExecutionDependencyFixPass(const TargetRegisterClass *RC)"
  },
  {
    "label": "createUnpackMachineBundles()",
    "kind": "Method",
    "detail": "Function (char& UnpackMachineBundlesID ; FunctionPass*)",
    "insertText": "createUnpackMachineBundles(std::function<bool(const Function &)> Ftor)"
  },
  {
    "label": "createJumpInstrTablesPass()",
    "kind": "Method",
    "detail": "Function (char& FinalizeMachineBundlesID ; char& StackMapLivenessID ; ModulePass*)",
    "insertText": "createJumpInstrTablesPass()"
  },
  {
    "label": "createForwardControlFlowIntegrityPass()",
    "kind": "Method",
    "detail": "Function (ModulePass*)",
    "insertText": "createForwardControlFlowIntegrityPass()"
  },
  {
    "label": "createInterleavedAccessPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createInterleavedAccessPass(const TargetMachine *TM)"
  },
  {
    "label": "INITIALIZE_TM_PASS_END()",
    "kind": "Method",
    "detail": "Function (} # define INITIALIZE_TM_PASS_BEGIN INITIALIZE_PASS_BEGIN # define)",
    "insertText": "INITIALIZE_TM_PASS_END(passName, arg, name, cfg, analysis) \\ PassInfo *PI = new PassInfo(name, arg, & passName ::ID, \\ PassInfo::NormalCtor_t(callDefaultCtor< passName >), cfg, analysis, \\ PassInfo::TargetMachineCtor_t(callTargetMachineCtor< passName >))"
  },
  {
    "label": "registerPass()",
    "kind": "Method",
    "detail": "Function (\\ Registry .)",
    "insertText": "registerPass(*PI, true)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (\\ return PI ; \\ } \\ void llvm::initialize # # passName # #)",
    "insertText": "Pass(PassRegistry &Registry)"
  }
]