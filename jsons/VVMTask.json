[
  {
    "label": "FOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOp"
  },
  {
    "label": "VFailureContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFailureContext"
  },
  {
    "label": "VTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VSemaphore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VSemaphore"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct FOp ; struct VFailureContext ; struct VTask : VValueObject,TIntrusiveTree<VTask> {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VValueObject)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TGlobalHeapPtr<VEmergentType> EmergentType ; bool bRunning { true } ; enum class EPhase : int8 { Active,CancelRequested,CancelStarted,CancelUnwind,Canceled,} ; EPhase Phase { EPhase::Active } ; TFunction<)",
    "insertText": "void(FAccessContext, VTask*)"
  },
  {
    "label": "BindStruct()",
    "kind": "Method",
    "detail": "Function (FOp* ResumePC { nullptr } ; TWriteBarrier<VFrame> ResumeFrame ; VReturnSlot ResumeSlot ; FOp* YieldPC ; TWriteBarrier<VFrame> YieldFrame ; TWriteBarrier<VTask> YieldTask ; TWriteBarrier<VValue> Result ; TWriteBarrier<VTask> LastAwait ; TWriteBarrier<VTask> LastCancel ; TWriteBarrier<VTask> PrevTask ; TWriteBarrier<VTask> NextTask ; void)",
    "insertText": "BindStruct(FAllocationContext Context, VClass& TaskClass)"
  },
  {
    "label": "BindStructTrivial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindStructTrivial(FAllocationContext Context)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (VTask&)",
    "insertText": "New(FAllocationContext Context, FOp* YieldPC, VFrame* YieldFrame, VTask* YieldTask, VTask* Parent)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (VEmergentType& TaskEmergentType =* EmergentType ; return*)",
    "insertText": "new(AllocateCell(Context, TaskEmergentType)) VTask(Context, TaskEmergentType, YieldPC, YieldFrame, YieldTask, Parent)"
  },
  {
    "label": "ResumeInTransaction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeInTransaction(FRunningContext Context, VValue ResumeArgument)"
  },
  {
    "label": "UnwindInTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwindInTransaction(FRunningContext Context)"
  },
  {
    "label": "ActiveImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "ActiveImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "CompletedImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "CompletedImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "CancelingImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "CancelingImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "CanceledImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "CanceledImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "UnsettledImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "UnsettledImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "SettledImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "SettledImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "UninterruptedImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "UninterruptedImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "InterruptedImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "InterruptedImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "AwaitImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "AwaitImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "CancelImpl()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "CancelImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "RequestCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestCancel(FRunningContext Context)"
  },
  {
    "label": "CancelChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelChildren(FRunningContext Context)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend(FAccessContext Context)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bRunning = false ; } void)",
    "insertText": "Resume(FAccessContext Context)"
  },
  {
    "label": "Park()",
    "kind": "Method",
    "detail": "Function (bRunning = true ; } void)",
    "insertText": "Park(FAccessContext Context, TWriteBarrier<VTask>& LastTask)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(PrevTask || NextTask)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (PrevTask .)",
    "insertText": "Set(Context, LastTask.Get())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (LastTask -> NextTask .)",
    "insertText": "Set(Context, this)"
  },
  {
    "label": "Unpark()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unpark(FAccessContext Context, TWriteBarrier<VTask>& LastTask)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(NextTask)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (LastTask .)",
    "insertText": "Set(Context, PrevTask.Get())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PrevTask)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(PrevTask->NextTask.Get() == this)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (PrevTask -> NextTask .)",
    "insertText": "Set(Context, NextTask.Get())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NextTask)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(NextTask->PrevTask.Get() == this)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} PrevTask .)",
    "insertText": "Reset()"
  },
  {
    "label": "VTask()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "VTask(FAllocationContext Context, VEmergentType& TaskEmergentType, FOp* YieldPC, VFrame* YieldFrame, VTask* YieldTask, VTask* Parent) : VValueObject(Context, TaskEmergentType) , TIntrusiveTree(Context, Parent) , ResumeSlot(Context, nullptr) , YieldPC(YieldPC) , YieldFrame(Context, YieldFrame) , YieldTask(Context, YieldTask)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (} } ; struct VSemaphore : VCell {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; int32 Count { 0 } ; TWriteBarrier<VTask> Await ; VSemaphore&)",
    "insertText": "New(FAllocationContext Context)"
  },
  {
    "label": "VSemaphore()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "VSemaphore(FAllocationContext Context) : VCell(Context, &GlobalTrivialEmergentType.Get(Context))"
  }
]