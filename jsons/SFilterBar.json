[
  {
    "label": "SFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterBar"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SlateGlobals . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Filters / SAssetFilterBar . h \" # include \" Filters / AssetFilter . h \" template<FilterType> class SFilterBar : public SAssetFilterBar<FilterType> { public : using FOnFilterChanged = SBasicFilterBar<FilterType>::FOnFilterChanged ; using FConvertItemToAssetData = FAssetFilter<FilterType>::FConvertItemToAssetData ; using FCompareItemWithClassNames = FAssetFilter<FilterType>::FCompareItemWithClassNames ; using FCreateTextFilter = SBasicFilterBar<FilterType>::FCreateTextFilter ; using SFilter = SBasicFilterBar<FilterType>::SFilter ;)",
    "insertText": "SLATE_BEGIN_ARGS(SFilterBar<FilterType> ) : _FilterBarIdentifier(NAME_None) , _UseDefaultAssetFilters(true) , _FilterBarLayout(EFilterBarLayout::Horizontal) , _CanChangeOrientation(false) , _FilterPillStyle(EFilterPillStyle::Default) , _DefaultMenuExpansionCategory(EAssetCategoryPaths::Basic)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnFilterChanged, OnFilterChanged ) SLATE_EVENT( FConvertItemToAssetData, OnConvertItemToAssetData ) SLATE_EVENT( FCompareItemWithClassNames, OnCompareItemWithClassNames ) SLATE_ARGUMENT( TArray<TSharedRef<FFilterBase<FilterType>>>, CustomFilters) SLATE_ARGUMENT(FName, FilterBarIdentifier) SLATE_EVENT( FOnExtendAddFilterMenu, OnExtendAddFilterMenu ) SLATE_ARGUMENT( TArray<TSharedRef<FCustomClassFilterData>>, CustomClassFilters) SLATE_ARGUMENT(bool, UseDefaultAssetFilters) SLATE_ARGUMENT(FCreateTextFilter, CreateTextFilter) SLATE_ARGUMENT(TSharedPtr<SFilterSearchBox>, FilterSearchBox) SLATE_ARGUMENT(EFilterBarLayout, FilterBarLayout) SLATE_ARGUMENT(bool, CanChangeOrientation) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_ARGUMENT(TOptional<FAssetCategoryPath>, DefaultMenuExpansionCategory)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (SAssetFilterBar<FilterType>::FArguments Args ; Args . _OnFilterChanged = InArgs . _OnFilterChanged ; Args . _CustomFilters = InArgs . _CustomFilters ; Args . _UseDefaultAssetFilters = InArgs . _UseDefaultAssetFilters ; Args . _CustomClassFilters = InArgs . _CustomClassFilters ; Args . _OnExtendAddFilterMenu = InArgs . _OnExtendAddFilterMenu ; Args . _CreateTextFilter = InArgs . _CreateTextFilter ; Args . _FilterSearchBox = InArgs . _FilterSearchBox ; Args . _FilterBarIdentifier = InArgs . _FilterBarIdentifier ; Args . _FilterBarLayout = InArgs . _FilterBarLayout ; Args . _CanChangeOrientation = InArgs . _CanChangeOrientation ; Args . _FilterPillStyle = InArgs . _FilterPillStyle ; Args . _DefaultMenuExpansionCategory = InArgs . _DefaultMenuExpansionCategory ; SAssetFilterBar<FilterType)",
    "insertText": "Construct(Args)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (AssetFilter =)",
    "insertText": "MakeShareable(new FAssetFilter<FilterType>)"
  },
  {
    "label": "SetConversionFunction()",
    "kind": "Method",
    "detail": "Function (AssetFilter ->)",
    "insertText": "SetConversionFunction(InArgs._OnConvertItemToAssetData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InArgs._OnCompareItemWithClassNames.IsBound())"
  },
  {
    "label": "SetComparisonFunction()",
    "kind": "Method",
    "detail": "Function (AssetFilter ->)",
    "insertText": "SetComparisonFunction(InArgs._OnCompareItemWithClassNames)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogSlate, Error, TEXT(\"SFilterBar Requires that you specify either OnConvertItemToAssetData or OnCompareItemWithClassName\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} this -> ActiveFilters ->)",
    "insertText": "Add(AssetFilter)"
  },
  {
    "label": "GetAllActiveFilters()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<TFilterCollection<FilterType>>)",
    "insertText": "GetAllActiveFilters()"
  },
  {
    "label": "UpdateAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetFilter()"
  },
  {
    "label": "GetCombinedBackendFilter()",
    "kind": "Method",
    "detail": "Function (FARFilter CombinedBackendFilter = this ->)",
    "insertText": "GetCombinedBackendFilter()"
  },
  {
    "label": "SetBackendFilter()",
    "kind": "Method",
    "detail": "Function (AssetFilter ->)",
    "insertText": "SetBackendFilter(CombinedBackendFilter)"
  }
]