[
  {
    "label": "IgnoredValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IgnoredValue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MemoryDumpArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryDumpArgs"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "TracedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedArray"
  },
  {
    "label": "TracedDictionary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedDictionary"
  },
  {
    "label": "EventContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventContext"
  },
  {
    "label": "StaticString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StaticString"
  },
  {
    "label": "DynamicString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicString"
  },
  {
    "label": "TracedValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedValue"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACE_STR_COPY()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_EVENT_STUB_H_ # define BASE_TRACE_EVENT_TRACE_EVENT_STUB_H_ # include<stddef . h> # include<cstdint> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / trace_event / common / trace_event_common . h \" # include \" base / trace_event / memory_allocator_dump_guid . h \" # include \" base / values . h \" # define)",
    "insertText": "TRACE_STR_COPY(str) str #define TRACE_ID_WITH_SCOPE(scope, ...) 0 #define TRACE_ID_GLOBAL(id) 0 #define TRACE_ID_LOCAL(id)"
  },
  {
    "label": "Ignore()",
    "kind": "Method",
    "detail": "Function (const unsigned long long kNoId = 0 ; template<. . . Args> void)",
    "insertText": "Ignore(Args&&... args)"
  },
  {
    "label": "IgnoredValue()",
    "kind": "Method",
    "detail": "Function (} struct IgnoredValue { template<. . . Args>)",
    "insertText": "IgnoredValue(Args&&... args)"
  },
  {
    "label": "INTERNAL_TRACE_IGNORE()",
    "kind": "Method",
    "detail": "Function (} } ; } # define)",
    "insertText": "INTERNAL_TRACE_IGNORE(...) \\ (false ? trace_event_internal::Ignore(__VA_ARGS__) : (void)0) #define INTERNAL_TRACE_EVENT_ADD(...) INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_EVENT_ADD_SCOPED(...) INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_EVENT_ADD_WITH_ID(...) INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_LOG_MESSAGE(...) INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW(...) \\ INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP(...) \\ INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMPS(...) \\ INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define TRACE_APPLICATION_STATE(...) INTERNAL_TRACE_IGNORE(__VA_ARGS__) #define TRACE_HEAP_PROFILER_API_SCOPED_TASK_EXECUTION \\ trace_event_internal::IgnoredValue #define TRACE_ID_MANGLE(val) (val) #define INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(cat) INTERNAL_TRACE_IGNORE(cat)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED_FOR_RECORDING_MODE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED_FOR_RECORDING_MODE() false #define TRACE_EVENT_API_CURRENT_THREAD_ID 0 #define TRACE_EVENT_BEGIN(category, name, ...) \\ INTERNAL_TRACE_IGNORE(category, name) #define TRACE_EVENT_END(category, ...) INTERNAL_TRACE_IGNORE(category) #define TRACE_EVENT(category, name, ...) INTERNAL_TRACE_IGNORE(category, name) #define TRACE_EVENT_INSTANT(category, name, ...) \\ INTERNAL_TRACE_IGNORE(category, name) #define PERFETTO_INTERNAL_ADD_EMPTY_EVENT() INTERNAL_TRACE_IGNORE()"
  },
  {
    "label": "ConvertableToTraceFormat()",
    "kind": "Method",
    "detail": "Function (namespace trace_event { class BASE_EXPORT ConvertableToTraceFormat { public :)",
    "insertText": "ConvertableToTraceFormat()"
  },
  {
    "label": "ConvertableToTraceFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertableToTraceFormat(const ConvertableToTraceFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConvertableToTraceFormat&)",
    "insertText": "operator(const ConvertableToTraceFormat&)"
  },
  {
    "label": "AppendAsTraceFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAsTraceFormat(std::string* out)"
  },
  {
    "label": "TracedValue()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT TracedValue : public ConvertableToTraceFormat { public :)",
    "insertText": "TracedValue(size_t capacity = 0)"
  },
  {
    "label": "EndDictionary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndDictionary()"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndArray()"
  },
  {
    "label": "SetInteger()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInteger(const char* name, int value)"
  },
  {
    "label": "SetDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDouble(const char* name, double value)"
  },
  {
    "label": "SetBoolean()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoolean(const char* name, bool value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetString(const char* name, base::StringPiece value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const char* name, TracedValue* value)"
  },
  {
    "label": "BeginDictionary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDictionary(const char* name)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginArray(const char* name)"
  },
  {
    "label": "SetIntegerWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIntegerWithCopiedName(base::StringPiece name, int value)"
  },
  {
    "label": "SetDoubleWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDoubleWithCopiedName(base::StringPiece name, double value)"
  },
  {
    "label": "SetBooleanWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBooleanWithCopiedName(base::StringPiece name, bool value)"
  },
  {
    "label": "SetStringWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStringWithCopiedName(base::StringPiece name, base::StringPiece value)"
  },
  {
    "label": "SetValueWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueWithCopiedName(base::StringPiece name, TracedValue* value)"
  },
  {
    "label": "BeginDictionaryWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDictionaryWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "BeginArrayWithCopiedName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginArrayWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "AppendInteger()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendInteger(int)"
  },
  {
    "label": "AppendDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendDouble(double)"
  },
  {
    "label": "AppendBoolean()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendBoolean(bool)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendString(base::StringPiece)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginArray()"
  },
  {
    "label": "BeginDictionary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDictionary()"
  },
  {
    "label": "TracedValueJSON()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT TracedValueJSON : public TracedValue { public :)",
    "insertText": "TracedValueJSON(size_t capacity = 0) : TracedValue(capacity)"
  },
  {
    "label": "ToBaseValue()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<base::Value>)",
    "insertText": "ToBaseValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryDumpProvider&)",
    "insertText": "operator(const MemoryDumpProvider&)"
  },
  {
    "label": "MemoryDumpProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MemoryDumpProvider()"
  },
  {
    "label": "OnMemoryDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnMemoryDump(const MemoryDumpArgs& args, ProcessMemoryDump* pmd)"
  },
  {
    "label": "TRACE_DISABLED_BY_DEFAULT()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT MemoryDumpManager { public : const char* const kTraceCategory =)",
    "insertText": "TRACE_DISABLED_BY_DEFAULT(\"memory-infra\")"
  },
  {
    "label": "StaticString()",
    "kind": "Method",
    "detail": "Function (} ; } } namespace perfetto { class TracedArray ; class TracedDictionary ; class EventContext ; class StaticString { public : template<T>)",
    "insertText": "StaticString(T)"
  },
  {
    "label": "DynamicString()",
    "kind": "Method",
    "detail": "Function (} } ; class DynamicString { public : template<T>)",
    "insertText": "DynamicString(T)"
  },
  {
    "label": "WriteInt64()",
    "kind": "Method",
    "detail": "Function (} } ; class TracedValue { public : void)",
    "insertText": "WriteInt64(int64_t)"
  },
  {
    "label": "WriteUInt64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUInt64(uint64_t)"
  },
  {
    "label": "WriteDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteDouble(double)"
  },
  {
    "label": "WriteBoolean()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteBoolean(bool)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteString(const char*)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteString(const char*, size_t)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteString(const std::string&)"
  },
  {
    "label": "WritePointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WritePointer(const void*)"
  },
  {
    "label": "WriteDictionary()",
    "kind": "Method",
    "detail": "Function (} TracedDictionary)",
    "insertText": "WriteDictionary()"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (TracedArray)",
    "insertText": "WriteArray()"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (} ; class TracedDictionary { public : TracedValue)",
    "insertText": "AddItem(StaticString)"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (} TracedValue)",
    "insertText": "AddItem(DynamicString)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Add(StaticString, T&&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Add(DynamicString, T&&)"
  },
  {
    "label": "AddDictionary()",
    "kind": "Method",
    "detail": "Function (} TracedDictionary)",
    "insertText": "AddDictionary(StaticString)"
  },
  {
    "label": "AddDictionary()",
    "kind": "Method",
    "detail": "Function (TracedDictionary)",
    "insertText": "AddDictionary(DynamicString)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (TracedArray)",
    "insertText": "AddArray(StaticString)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (TracedArray)",
    "insertText": "AddArray(DynamicString)"
  },
  {
    "label": "AppendItem()",
    "kind": "Method",
    "detail": "Function (} ; class TracedArray { public : TracedValue)",
    "insertText": "AppendItem()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Append(T&&)"
  },
  {
    "label": "AppendDictionary()",
    "kind": "Method",
    "detail": "Function (} TracedDictionary)",
    "insertText": "AppendDictionary()"
  },
  {
    "label": "AppendArray()",
    "kind": "Method",
    "detail": "Function (TracedArray)",
    "insertText": "AppendArray()"
  },
  {
    "label": "WriteIntoTracedValue()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> void)",
    "insertText": "WriteIntoTracedValue(TracedValue, T&&)"
  },
  {
    "label": "QueueName_Name()",
    "kind": "Method",
    "detail": "Function (} namespace protos::pbzero::SequenceManagerTask { enum class QueueName { UNKNOWN_TQ = 0,DEFAULT_TQ = 1,TASK_ENVIRONMENT_DEFAULT_TQ = 2,TEST2_TQ = 3,TEST_TQ = 4,} ; const char*)",
    "insertText": "QueueName_Name(QueueName value)"
  }
]