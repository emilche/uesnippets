[
  {
    "label": "is_urbg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_urbg"
  },
  {
    "label": "DistributionCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DistributionCaller"
  },
  {
    "label": "MockHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockHelpers"
  },
  {
    "label": "BitGenRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitGenRef"
  },
  {
    "label": "Trait",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trait"
  },
  {
    "label": "AlwaysVoid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlwaysVoid"
  },
  {
    "label": "detector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "detector"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_BIT_GEN_REF_H_ # define ABSL_RANDOM_BIT_GEN_REF_H_ # include<limits> # include<type_traits> # include<utility> # include \" absl / base / internal / fast_type_id . h \" # include \" absl / base / macros . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / distribution_caller . h \" # include \" absl / random / internal / fast_uniform_bits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<URBG,= void,= void,= void> struct is_urbg : std::false_type { } ; template<URBG> struct is_urbg<URBG,absl::enable_if_t<std::is_same<URBG::result_type,std::decay<)",
    "insertText": "decltype((URBG::min)())>::type>::value>, absl::enable_if_t<std::is_same< typename URBG::result_type, typename std::decay<decltype((URBG::max)())>::type>::value>, absl::enable_if_t<std::is_same< typename URBG::result_type, typename std::decay<decltype(std::declval<URBG>()())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct DistributionCaller ; class MockHelpers ; } class BitGenRef { template<template<class . . .> class Trait,class AlwaysVoid,class . . . Args> struct detector : std::false_type { } ; template<template<class . . .> class Trait,class . . . Args> struct detector<Trait,absl::void_t<Trait<Args . . .>>,Args . . .> : std::true_type { } ; template<class T> using invoke_mock_t =)",
    "insertText": "decltype(std::declval<T*>()->InvokeMock( std::declval<base_internal::FastTypeIdType>(), std::declval<void*>(), std::declval<void*>()))"
  },
  {
    "label": "BitGenRef()",
    "kind": "Method",
    "detail": "Function (template<T> using HasInvokeMock = detector<invoke_mock_t,void,T>::type ; public :)",
    "insertText": "BitGenRef(const BitGenRef&)"
  },
  {
    "label": "BitGenRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitGenRef(BitGenRef&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitGenRef&)",
    "insertText": "operator(const BitGenRef&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitGenRef&)",
    "insertText": "operator(BitGenRef&&)"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (template<URBG,)",
    "insertText": "enable_if_t(!std::is_same<URBG, BitGenRef>::value && random_internal::is_urbg<URBG>::value && !HasInvokeMock<URBG>::value)>* = nullptr> BitGenRef(URBG& gen) : t_erased_gen_ptr_(reinterpret_cast<uintptr_t>(&gen)), mock_call_(NotAMock), generate_impl_fn_(ImplFn<URBG>)"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (} template<URBG,)",
    "insertText": "enable_if_t(!std::is_same<URBG, BitGenRef>::value && random_internal::is_urbg<URBG>::value && HasInvokeMock<URBG>::value)>* = nullptr> BitGenRef(URBG& gen) : t_erased_gen_ptr_(reinterpret_cast<uintptr_t>(&gen)), mock_call_(&MockCall<URBG>), generate_impl_fn_(ImplFn<URBG>)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (} using result_type = uint64_t ;)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (} private : using impl_fn =)",
    "insertText": "result_type(*)(uintptr_t)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using mock_call_fn =)",
    "insertText": "bool(*)(uintptr_t, base_internal::FastTypeIdType, void*, void*)"
  },
  {
    "label": "ImplFn()",
    "kind": "Method",
    "detail": "Function (template<URBG> result_type)",
    "insertText": "ImplFn(uintptr_t ptr)"
  },
  {
    "label": "fast_uniform_bits()",
    "kind": "Method",
    "detail": "Function (absl::random_internal::FastUniformBits<result_type> fast_uniform_bits ; return)",
    "insertText": "fast_uniform_bits(*reinterpret_cast<URBG*>(ptr))"
  },
  {
    "label": "MockCall()",
    "kind": "Method",
    "detail": "Function (} template<URBG> bool)",
    "insertText": "MockCall(uintptr_t gen_ptr, base_internal::FastTypeIdType type, void* result, void* arg_tuple)"
  },
  {
    "label": "NotAMock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NotAMock(uintptr_t, base_internal::FastTypeIdType, void*, void*)"
  }
]