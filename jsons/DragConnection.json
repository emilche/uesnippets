[
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FDragConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragConnection"
  },
  {
    "label": "EDragMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDragMode"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" GraphEditorDragDropAction . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Math / Vector2D . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" class SGraphPanel ; class SWidget ; class UEdGraph ; class UEdGraphPin ; struct FPointerEvent ; class FDragConnection : public FGraphEditorDragDropAction { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FDragConnection, FGraphEditorDragDropAction)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CreateConnection = 0,RelinkConnection } ; typedef TArray<FGraphPinHandle> FDraggedPinTable ; TSharedRef<FDragConnection>)",
    "insertText": "New(const TSharedRef<SGraphPanel>& InGraphPanel, const FDraggedPinTable& InStartingPins)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HoverTargetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HoverTargetChanged()"
  },
  {
    "label": "DroppedOnPin()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnPin(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnNode(FVector2D ScreenPosition, FVector2D GraphPosition)"
  },
  {
    "label": "DroppedOnPanel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DroppedOnPanel(const TSharedRef< SWidget >& Panel, FVector2D ScreenPosition, FVector2D GraphPosition, UEdGraph& Graph)"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const class FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "ValidateGraphPinList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateGraphPinList(TArray<UEdGraphPin*>& OutValidPins)"
  },
  {
    "label": "FDragConnection()",
    "kind": "Method",
    "detail": "Function (protected : typedef FGraphEditorDragDropAction Super ;)",
    "insertText": "FDragConnection(const TSharedRef<SGraphPanel>& GraphPanel, const FDraggedPinTable& DraggedPins)"
  }
]