[
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "FSandboxPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSandboxPlatformFile"
  },
  {
    "label": "FSandboxVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSandboxVisitor"
  },
  {
    "label": "FSandboxStatVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSandboxStatVisitor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / Paths . h \" # include \" Templates / UniquePtr . h \" class IAsyncReadFileHandle ; class IMappedFileHandle ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(SandboxFile, Log, All)"
  },
  {
    "label": "WipeSandboxFolder()",
    "kind": "Method",
    "detail": "Function (class FSandboxPlatformFile : public IPlatformFile { IPlatformFile* LowerLevel ; FString SandboxDirectory ; FString GameSandboxDirectoryName ; FString RelativeRootDirectory ; FString AbsoluteRootDirectory ; FString AbsoluteGameDirectory ; FString AbsolutePathToGameDirectory ; TArray<FString> FileExclusionWildcards ; TArray<FString> DirectoryExclusionWildcards ; bool bEntireEngineWillUseThisSandbox ; bool bSandboxEnabled ; FString InjectedSourceDirectory ; FString InjectedSourceDirectoryParent ; FString InjectedTargetDirectory ; FString InjectedTargetDirectoryParent ; bool bSandboxOnly ; bool)",
    "insertText": "WipeSandboxFolder(const TCHAR* AbsolutePath)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& Result, const TCHAR* InFilename, bool Files, bool Directories)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (using IPlatformFile::FindFiles ; bool)",
    "insertText": "DeleteDirectory(const TCHAR* Path, bool Tree)"
  },
  {
    "label": "OkForInnerAccess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OkForInnerAccess(const TCHAR* InFilenameOrDirectoryName, bool bIsDirectory = false)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "FSandboxPlatformFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSandboxPlatformFile(bool bInEntireEngineWillUseThisSandbox)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : TUniquePtr<FSandboxPlatformFile>)",
    "insertText": "Create(bool bInEntireEngineWillUseThisSandbox)"
  },
  {
    "label": "FSandboxPlatformFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSandboxPlatformFile()"
  },
  {
    "label": "SetSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (using IPlatformFile::IterateDirectory ; using IPlatformFile::IterateDirectoryRecursively ; using IPlatformFile::IterateDirectoryStat ; using IPlatformFile::IterateDirectoryStatRecursively ; void)",
    "insertText": "SetSandboxEnabled(bool bInEnabled)"
  },
  {
    "label": "IsSandboxEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSandboxEnabled()"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "SetLowerLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowerLevel(IPlatformFile* NewLowerLevel)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "ConvertToSandboxPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToSandboxPath(const TCHAR* Filename)"
  },
  {
    "label": "ConvertFromSandboxPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertFromSandboxPath(const TCHAR* Filename)"
  },
  {
    "label": "GetSandboxDirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetSandboxDirectory()"
  },
  {
    "label": "GetGameSandboxDirectoryName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetGameSandboxDirectoryName()"
  },
  {
    "label": "GetAbsoluteRootDirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAbsoluteRootDirectory()"
  },
  {
    "label": "GetAbsoluteGameDirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAbsoluteGameDirectory()"
  },
  {
    "label": "GetAbsolutePathToGameDirectory()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAbsolutePathToGameDirectory()"
  },
  {
    "label": "AddExclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExclusion(const TCHAR* Wildcard, bool bIsDirectory = false)"
  },
  {
    "label": "RemoveExclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExclusion(const TCHAR* Wildcard, bool bIsDirectory = false)"
  },
  {
    "label": "SetSandboxOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSandboxOnly(bool bInSandboxOnly)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "OpenAsyncRead()",
    "kind": "Method",
    "detail": "Function (IAsyncReadFileHandle*)",
    "insertText": "OpenAsyncRead(const TCHAR* Filename)"
  },
  {
    "label": "SetAsyncMinimumPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncMinimumPriority(EAsyncIOPriorityAndFlags Priority)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  }
]