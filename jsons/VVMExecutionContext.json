[
  {
    "label": "FExecutionContextImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExecutionContextImpl"
  },
  {
    "label": "FExecutionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExecutionContext"
  },
  {
    "label": "FExecutionContextImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Blueprint / BlueprintExceptionInfo . h \" # include \" Misc / AssertionMacros . h \" # if ! WITH_VERSE_BPVM # include \" VerseVM / VVMContext . h \" # endif namespace verse { # if WITH_VERSE_BPVM struct FExecutionContextImpl { private : struct FExecutionContext ;)",
    "insertText": "FExecutionContextImpl()"
  },
  {
    "label": "Claim()",
    "kind": "Method",
    "detail": "Function (FExecutionContextImpl*)",
    "insertText": "Claim()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (FExecutionContextImpl*)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "FExecutionContext()",
    "kind": "Method",
    "detail": "Function (bool bActive = false ; } ; # endif struct FExecutionContext {)",
    "insertText": "FExecutionContext(const FExecutionContext& Other) : Impl(Other.Impl)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} # if WITH_VERSE_BPVM FExecutionContext)",
    "insertText": "Create()"
  },
  {
    "label": "GetActiveContext()",
    "kind": "Method",
    "detail": "Function (} # endif FExecutionContext)",
    "insertText": "GetActiveContext()"
  },
  {
    "label": "FExecutionContext()",
    "kind": "Method",
    "detail": "Function (# if WITH_VERSE_BPVM return)",
    "insertText": "FExecutionContext(FExecutionContextImpl::GetCurrent())"
  },
  {
    "label": "FExecutionContext()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "FExecutionContext(::Verse::FRunningContextPromise{})"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (# endif } # if ! WITH_VERSE_BPVM::Verse::FRunningContext)",
    "insertText": "GetContext()"
  },
  {
    "label": "IsExecutionBlocked()",
    "kind": "Method",
    "detail": "Function (bool bWasBlocked = bBlockAllExecution ; bBlockAllExecution = ShouldBlock ; return bWasBlocked ; } bool)",
    "insertText": "IsExecutionBlocked()"
  },
  {
    "label": "FExecutionContext()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FExecutionContext(::Verse::FRunningContext InImpl) : Impl(InImpl)"
  }
]