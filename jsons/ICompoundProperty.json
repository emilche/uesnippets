[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_ICompoundProperty_h # define Alembic_Abc_ICompoundProperty_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / IBaseProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ICompoundProperty : public IBasePropertyT<AbcA::CompoundPropertyReaderPtr> { public : typedef ICompoundProperty this_type ;)",
    "insertText": "ICompoundProperty() : IBasePropertyT<AbcA::CompoundPropertyReaderPtr>()"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ICompoundProperty(const ICompoundProperty & iParent, const std::string & iName, const Argument & iArg0 = Argument())"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ICompoundProperty(AbcA::CompoundPropertyReaderPtr iPtr, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ICompoundProperty(AbcA::CompoundPropertyReaderPtr iPtr, WrapExistingFlag , const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ICompoundProperty(const IObject & iObject, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ICompoundProperty(const IObject & iObject, TopFlag , const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ICompoundProperty()"
  },
  {
    "label": "getNumProperties()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumProperties()"
  },
  {
    "label": "getPropertyHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader&)",
    "insertText": "getPropertyHeader(size_t i)"
  },
  {
    "label": "getPropertyHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader*)",
    "insertText": "getPropertyHeader(const std::string &iName)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (ICompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(const IObject & iObject, const Argument &iArg0, const Argument &iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(AbcA::CompoundPropertyReaderPtr iParentObject, const std::string &iName, ErrorHandler::Policy iParentPolicy, const Argument &iArg0)"
  },
  {
    "label": "GetCompoundPropertyReaderPtr()",
    "kind": "Method",
    "detail": "Function (} ; AbcA::CompoundPropertyReaderPtr)",
    "insertText": "GetCompoundPropertyReaderPtr(ICompoundProperty &iPrp)"
  }
]