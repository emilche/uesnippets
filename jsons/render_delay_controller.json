[
  {
    "label": "RenderDelayController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderDelayController"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_CONTROLLER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_CONTROLLER_H_ # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / block . h \" # include \" modules / audio_processing / aec3 / delay_estimate . h \" # include \" modules / audio_processing / aec3 / downsampled_render_buffer . h \" # include \" modules / audio_processing / aec3 / render_delay_buffer . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class RenderDelayController { public : RenderDelayController*)",
    "insertText": "Create(const EchoCanceller3Config& config, int sample_rate_hz, size_t num_capture_channels)"
  },
  {
    "label": "RenderDelayController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RenderDelayController()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool reset_delay_confidence)"
  },
  {
    "label": "LogRenderCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRenderCall()"
  },
  {
    "label": "GetDelay()",
    "kind": "Method",
    "detail": "Function (absl::optional<DelayEstimate>)",
    "insertText": "GetDelay(const DownsampledRenderBuffer& render_buffer, size_t render_delay_buffer_delay, const Block& capture)"
  },
  {
    "label": "HasClockdrift()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClockdrift()"
  }
]