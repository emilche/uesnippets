[
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Input / DragAndDrop . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Templates / SharedPointer . h \" class FDragDropOperation ; class SWidget ; namespace UE::Sequencer { class FEditorViewModel ; class FViewModel ; class IOutlinerExtension ; class FOutlinerViewModel : public FViewModel { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FOutlinerViewModel, FViewModel)"
  },
  {
    "label": "FOutlinerViewModel()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate OnRefreshed ;)",
    "insertText": "FOutlinerViewModel()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FWeakViewModelPtr& InWeakRootDataModel)"
  },
  {
    "label": "GetEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEditorViewModel>)",
    "insertText": "GetEditor()"
  },
  {
    "label": "GetRootItem()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr)",
    "insertText": "GetRootItem()"
  },
  {
    "label": "GetTopLevelItems()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TWeakViewModelPtr<IOutlinerExtension>>)",
    "insertText": "GetTopLevelItems()"
  },
  {
    "label": "SetHoveredItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredItem(TViewModelPtr<IOutlinerExtension> InHoveredModel)"
  },
  {
    "label": "GetHoveredItem()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<IOutlinerExtension>)",
    "insertText": "GetHoveredItem()"
  },
  {
    "label": "UnpinAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinAllNodes()"
  },
  {
    "label": "CreateContextMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenuWidget()"
  },
  {
    "label": "InitiateDrag()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDragDropOperation>)",
    "insertText": "InitiateDrag(TArray<TWeakViewModelPtr<IOutlinerExtension>>&& InDraggedModels)"
  },
  {
    "label": "RequestUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdate()"
  },
  {
    "label": "HandleDataHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleDataHierarchyChanged()"
  }
]