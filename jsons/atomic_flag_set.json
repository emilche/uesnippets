[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Group",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Group"
  },
  {
    "label": "AtomicFlagSet()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_ATOMIC_FLAG_SET_H_ # define BASE_TASK_SEQUENCE_MANAGER_ATOMIC_FLAG_SET_H_ # include<atomic> # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / sequence_manager / associated_thread_id . h \" namespace base { namespace sequence_manager { namespace internal { class BASE_EXPORT AtomicFlagSet { protected : struct Group ; public :)",
    "insertText": "AtomicFlagSet(scoped_refptr<const AssociatedThreadId> associated_thread)"
  },
  {
    "label": "AtomicFlagSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicFlagSet(const AtomicFlagSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AtomicFlagSet&)",
    "insertText": "operator(const AtomicFlagSet&)"
  },
  {
    "label": "AtomicFlagSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AtomicFlagSet()"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT AtomicFlag { public :)",
    "insertText": "AtomicFlag()"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicFlag(const AtomicFlag&)"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicFlag(AtomicFlag&& other)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(bool active)"
  },
  {
    "label": "ReleaseAtomicFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAtomicFlag()"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (private : AtomicFlagSet ;)",
    "insertText": "AtomicFlag(AtomicFlagSet* outer, Group* element, size_t flag_bit)"
  },
  {
    "label": "AddFlag()",
    "kind": "Method",
    "detail": "Function (raw_ptr<AtomicFlagSet,DanglingUntriaged> outer_ = nullptr ; raw_ptr<Group> group_ = nullptr ; size_t flag_bit_ = 0 ; } ; AtomicFlag)",
    "insertText": "AddFlag(RepeatingClosure callback)"
  },
  {
    "label": "RunActiveCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunActiveCallbacks()"
  },
  {
    "label": "GetAllocListForTesting()",
    "kind": "Method",
    "detail": "Function (protected : Group*)",
    "insertText": "GetAllocListForTesting()"
  },
  {
    "label": "GetPartiallyFreeListForTesting()",
    "kind": "Method",
    "detail": "Function (} Group*)",
    "insertText": "GetPartiallyFreeListForTesting()"
  },
  {
    "label": "Group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Group(const Group&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Group&)",
    "insertText": "operator(const Group&)"
  },
  {
    "label": "Group()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Group()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int kNumFlags =)",
    "insertText": "sizeof(size_t)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (std::atomic<size_t> flags = { 0 } ; size_t allocated_flags = 0 ; RepeatingClosure flag_callbacks [ kNumFlags ] ; raw_ptr<Group> prev = nullptr ; std::unique_ptr<Group> next ; raw_ptr<Group> partially_free_list_prev = nullptr ; raw_ptr<Group> partially_free_list_next = nullptr ; bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FindFirstUnallocatedFlag()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindFirstUnallocatedFlag()"
  },
  {
    "label": "IndexOfFirstFlagSet()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IndexOfFirstFlagSet(size_t flag)"
  },
  {
    "label": "AddToAllocList()",
    "kind": "Method",
    "detail": "Function (} ; private : void)",
    "insertText": "AddToAllocList(std::unique_ptr<Group> element)"
  },
  {
    "label": "RemoveFromAllocList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromAllocList(Group* element)"
  },
  {
    "label": "AddToPartiallyFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToPartiallyFreeList(Group* element)"
  },
  {
    "label": "RemoveFromPartiallyFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromPartiallyFreeList(Group* element)"
  }
]