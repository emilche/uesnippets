[
  {
    "label": "INumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INumericTypeInterface"
  },
  {
    "label": "ISequencerKeyEditor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequencerKeyEditor"
  },
  {
    "label": "TSequencerKeyEditor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerKeyEditor"
  },
  {
    "label": "TSequencerKeyEditorWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerKeyEditorWrapper"
  },
  {
    "label": "ISequencerKeyEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" MovieSceneSection . h \" # include \" IKeyArea . h \" # include \" ISequencer . h \" # include \" MovieSceneCommonHelpers . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" SequencerChannelTraits . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" MovieSceneTimeHelpers . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" MVVM / Selection / Selection . h \" # include \" MVVM / ViewModels / SequencerEditorViewModel . h \" template<NumericType> struct INumericTypeInterface ; template<ValueType> struct ISequencerKeyEditor { ~)",
    "insertText": "ISequencerKeyEditor()"
  },
  {
    "label": "GetNumericTypeInterface()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<INumericTypeInterface<ValueType>>)",
    "insertText": "GetNumericTypeInterface()"
  },
  {
    "label": "GetExternalValue()",
    "kind": "Method",
    "detail": "Function (TOptional<ValueType>)",
    "insertText": "GetExternalValue()"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "GetCurrentValue()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const ValueType& InValue)"
  },
  {
    "label": "SetValueWithNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueWithNotify(const ValueType& InValue, EMovieSceneDataChangeType NotifyType = EMovieSceneDataChangeType::TrackValueChanged)"
  },
  {
    "label": "GetObjectBindingID()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetObjectBindingID()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (ISequencer*)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetPropertyBindings()",
    "kind": "Method",
    "detail": "Function (FTrackInstancePropertyBindings*)",
    "insertText": "GetPropertyBindings()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMetaData(const FName& Key)"
  },
  {
    "label": "GetEditingKeySelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEditingKeySelection()"
  },
  {
    "label": "TSequencerKeyEditor()",
    "kind": "Method",
    "detail": "Function (} ; template<ChannelType,ValueType> struct TSequencerKeyEditor {)",
    "insertText": "TSequencerKeyEditor()"
  },
  {
    "label": "TSequencerKeyEditor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSequencerKeyEditor(FGuid InObjectBindingID, TMovieSceneChannelHandle<ChannelType> InChannelHandle, TWeakObjectPtr<UMovieSceneSection> InWeakSection, TWeakPtr<ISequencer> InWeakSequencer, TWeakPtr<FTrackInstancePropertyBindings> InWeakPropertyBindings, TFunction<TOptional<ValueType>(UObject&, FTrackInstancePropertyBindings*)> InOnGetExternalValue ) : ObjectBindingID(InObjectBindingID) , ChannelHandle(InChannelHandle) , WeakSection(InWeakSection) , WeakSequencer(InWeakSequencer) , WeakPropertyBindings(InWeakPropertyBindings) , OnGetExternalValue(InOnGetExternalValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} TOptional<ValueType>)",
    "insertText": "Get(const FGuid& ObjectBindingID, ISequencer* Sequencer, FTrackInstancePropertyBindings* PropertyBindings, const TFunction<TOptional<ValueType>(UObject&, FTrackInstancePropertyBindings*)>& OnGetExternalValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TWeakObjectPtr<> WeakObject : Sequencer->FindBoundObjects(ObjectBindingID, Sequencer->GetFocusedTemplateID()))"
  },
  {
    "label": "OnGetExternalValue()",
    "kind": "Method",
    "detail": "Function (TOptional<ValueType> ExternalValue =)",
    "insertText": "OnGetExternalValue(*Object, PropertyBindings)"
  },
  {
    "label": "SetOwningObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOwningObject(TWeakObjectPtr<UMovieSceneSignedObject> InWeakOwningObject)"
  },
  {
    "label": "SetNumericTypeInterface()",
    "kind": "Method",
    "detail": "Function (WeakOwningObject = InWeakOwningObject ; } void)",
    "insertText": "SetNumericTypeInterface(TSharedPtr<INumericTypeInterface<ValueType>> InNumericTypeInterface)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; ChannelType* Channel = ChannelHandle .)",
    "insertText": "Get()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (ISequencer* Sequencer = WeakSequencer .)",
    "insertText": "Pin().Get()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneChannelMetaData* ChannelMetaData = ChannelHandle .)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueType Result { } ;)",
    "insertText": "if(Channel && ChannelMetaData && Sequencer && OwningSection)"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime LocalTime =)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "ClampToDiscreteRange()",
    "kind": "Method",
    "detail": "Function (const FFrameTime CurrentTime = UE::)",
    "insertText": "ClampToDiscreteRange(LocalTime, OwningSection->GetRange()) - ChannelMetaData->GetOffsetTime(OwningSection)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Result = ExternalValue .)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetViewModel()",
    "kind": "Method",
    "detail": "Function (KeySelection)",
    "insertText": "GetViewModel()->GetSelection()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAllowEditingKeySelection = false ; int32 NumSelectedKeys = 0 ;)",
    "insertText": "for(FKeyHandle Key : KeySelection)"
  },
  {
    "label": "GetModelForKey()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FChannelModel> ChannelModel = KeySelection .)",
    "insertText": "GetModelForKey(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NumSelectedKeys ;)",
    "insertText": "if(NumSelectedKeys > 1)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Owner = OwningSection ; } Owner ->)",
    "insertText": "Modify()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (Owner ->)",
    "insertText": "SetFlags(RF_Transactional)"
  },
  {
    "label": "GetAutoSetTrackDefaults()",
    "kind": "Method",
    "detail": "Function (const bool bAutoSetTrackDefaults = Sequencer ->)",
    "insertText": "GetAutoSetTrackDefaults()"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection* Section = ChannelModel ->)",
    "insertText": "GetSection()"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(reinterpret_cast<ChannelType*>(ChannelModel->GetChannel()), Key, InValue)"
  },
  {
    "label": "RoundToFrame()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber CurrentTime = LocalTime .)",
    "insertText": "RoundToFrame() - ChannelMetaData->GetOffsetTime(OwningSection)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation Interpolation =)",
    "insertText": "GetInterpolationMode(Channel, CurrentTime, Sequencer->GetKeyInterpolation())"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyHandle> KeysAtCurrentTime ; Channel ->)",
    "insertText": "GetKeys(TRange<FFrameNumber>(CurrentTime), nullptr, &KeysAtCurrentTime)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(Channel, KeysAtCurrentTime[0], InValue)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} else { bool bHasAnyKeys = Channel ->)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyToChannel(Channel, CurrentTime, InValue, Interpolation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bHasAnyKeys)"
  },
  {
    "label": "FFrameNumber()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber> KeyRange = TRange<)",
    "insertText": "FFrameNumber(CurrentTime)"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber> SectionRange = OwningSection ->)",
    "insertText": "GetRange()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (OwningSection ->)",
    "insertText": "SetRange(TRange<FFrameNumber>::Hull(KeyRange, SectionRange))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(bAutoSetTrackDefaults)"
  },
  {
    "label": "SetChannelDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelDefault(Channel, InValue)"
  },
  {
    "label": "PostEditChange()",
    "kind": "Method",
    "detail": "Function (} Channel ->)",
    "insertText": "PostEditChange()"
  },
  {
    "label": "OnChannelChanged()",
    "kind": "Method",
    "detail": "Function (Sequencer ->)",
    "insertText": "OnChannelChanged().Broadcast(MetaData, OwningSection)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(InValue)"
  },
  {
    "label": "NotifyMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (Sequencer ->)",
    "insertText": "NotifyMovieSceneDataChanged(NotifyType)"
  },
  {
    "label": "SetApplyInUnwarpedLocalSpace()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetApplyInUnwarpedLocalSpace(bool bInApplyInUnwarpedLocalSpace)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(const FMovieSceneChannelMetaData* MetaData = ChannelHandle.GetMetaData())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FString()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } private : FGuid ObjectBindingID ; TMovieSceneChannelHandle<ChannelType> ChannelHandle ; TWeakObjectPtr<UMovieSceneSection> WeakSection ; TWeakObjectPtr<UMovieSceneSignedObject> WeakOwningObject ; TWeakPtr<ISequencer> WeakSequencer ; TWeakPtr<FTrackInstancePropertyBindings> WeakPropertyBindings ; TFunction<TOptional<)",
    "insertText": "ValueType(UObject&, FTrackInstancePropertyBindings*)"
  },
  {
    "label": "TSequencerKeyEditorWrapper()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<INumericTypeInterface<ValueType>> NumericTypeInterface ; bool bApplyInUnwarpedLocalSpace = false ; } ; template<ChannelType,ValueType> struct TSequencerKeyEditorWrapper : ISequencerKeyEditor<ValueType> {)",
    "insertText": "TSequencerKeyEditorWrapper(const TSequencerKeyEditor<ChannelType, ValueType>& InKeyEditor) : Impl(InKeyEditor)"
  },
  {
    "label": "SetValueWithNotify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueWithNotify(const ValueType& InValue, EMovieSceneDataChangeType NotifyType)"
  }
]