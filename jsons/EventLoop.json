[
  {
    "label": "FEventLoopTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoopTraitsBase"
  },
  {
    "label": "FEventLoopDefaultTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoopDefaultTraits"
  },
  {
    "label": "TEventLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventLoop"
  },
  {
    "label": "FParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParams"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Algo / ForEach . h \" # include \" Async / Mutex . h \" # include \" EventLoop / IEventLoop . h \" # include \" EventLoop / EventLoopTimer . h \" # include \" EventLoop / IEventLoopIOManager . h \" # include \" GenericPlatform / GenericPlatformProcess . h \" # include \" HAL / PlatformTime . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / ScopeExit . h \" # include \" Stats / Stats . h \" # include<limits> namespace UE::EventLoop { struct FEventLoopTraitsBase { uint32)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "IsEventLoopThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEventLoopThread(uint32 EventLoopThreadId)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized(uint32 EventLoopThreadId)"
  },
  {
    "label": "CheckInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckInitialized(uint32 EventLoopThreadId)"
  },
  {
    "label": "CheckNotInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckNotInitialized(uint32 EventLoopThreadId)"
  },
  {
    "label": "CheckIsEventLoopThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckIsEventLoopThread(uint32 EventLoopThreadId)"
  },
  {
    "label": "IsShutdownRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShutdownRequested(bool bShutdownRequested)"
  },
  {
    "label": "TEventLoop()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TEventLoop()"
  },
  {
    "label": "GetIOAccess()",
    "kind": "Method",
    "detail": "Function (} IOManagerType::FIOAccess&)",
    "insertText": "GetIOAccess()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bool bInitSuccessful = false ; { InitMutex .)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (ON_SCOPE_EXIT { InitMutex .)",
    "insertText": "Unlock()"
  },
  {
    "label": "CheckNotInitialized()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CheckNotInitialized(EventLoopThreadId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bNotifyOnInit)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (IOManager .)",
    "insertText": "Notify()"
  },
  {
    "label": "RequestShutdown()",
    "kind": "Method",
    "detail": "Function (} return bInitSuccessful ; } void)",
    "insertText": "RequestShutdown(FOnShutdownComplete&& OnShutdownComplete = FOnShutdownComplete())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; bool bExpectedValue = false ;)",
    "insertText": "if(bShutdownRequested.CompareExchange(bExpectedValue, true))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShutdownRequests .)",
    "insertText": "Add(MoveTemp(OnShutdownComplete))"
  },
  {
    "label": "TryNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryNotify()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!bShutdownCompleted)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { bRunLocally = true ; } })",
    "insertText": "if(bRunLocally && OnShutdownComplete)"
  },
  {
    "label": "OnShutdownComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdownComplete()"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (} } FTimerHandle)",
    "insertText": "SetTimer(FTimerCallback&& Callback, FTimespan InRate, bool InbRepeat = false, TOptional<FTimespan> InFirstDelay = TOptional<FTimespan>())"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (FTimerHandle OutHandle = TimerManager .)",
    "insertText": "SetTimer(MoveTemp(Callback), InRate, InbRepeat, InFirstDelay)"
  },
  {
    "label": "ClearTimer()",
    "kind": "Method",
    "detail": "Function (TimerManager .)",
    "insertText": "ClearTimer(InHandle, MoveTemp(OnTimerCleared))"
  },
  {
    "label": "PostAsyncTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostAsyncTask(FAsyncTask&& Task)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (AsyncTasks .)",
    "insertText": "Enqueue(MoveTemp(Task))"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TEventLoop_Run)"
  },
  {
    "label": "CheckInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInitialized(EventLoopThreadId)"
  },
  {
    "label": "InfiniteWait()",
    "kind": "Method",
    "detail": "Function (const FTimespan)",
    "insertText": "InfiniteWait(std::numeric_limits<int64>::max())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTimespan WaitTime = InfiniteWait ;)",
    "insertText": "if(!RunOnce(WaitTime))"
  },
  {
    "label": "RunOnce()",
    "kind": "Method",
    "detail": "Function (break ; } } ; } bool)",
    "insertText": "RunOnce(FTimespan WaitTime)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_EventLoop_TEventLoop_RunOnce)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (WaitTime =)",
    "insertText": "Min(WaitTime, TimerExpirationTime)"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (} IOManager .)",
    "insertText": "Poll(WaitTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FTimespan ElapsedTime =)",
    "insertText": "Max(CurrentTime - LoopTime, 0.0)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (LoopTime = CurrentTime ; TimerManager .)",
    "insertText": "Tick(ElapsedTime)"
  },
  {
    "label": "RunAsyncTasks()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RunAsyncTasks()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (IOManager .)",
    "insertText": "Shutdown()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} ; bShutdownCompleted = true ; LocalShutdownRequests =)",
    "insertText": "MoveTemp(ShutdownRequests)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForEach(LocalShutdownRequests, [](FOnShutdownComplete& OnShutdownComplete){ if (OnShutdownComplete) { OnShutdownComplete(); } })"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FAsyncTask AsyncTask ;)",
    "insertText": "while(AsyncTasks.Dequeue(AsyncTask))"
  },
  {
    "label": "AsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncTask()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(!Traits::IsInitialized(EventLoopThreadId))"
  }
]