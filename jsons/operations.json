[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "_T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_OPERATIONS_H # define _LIBCPP___FUNCTIONAL_OPERATIONS_H # include<__config> # include<__functional / binary_function . h> # include<__functional / unary_function . h> # include<__utility / forward . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (typedef _Tp __result_type ; _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY _Tp)",
    "insertText": "operator()(const _Tp& __x, const _Tp& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} typedef void is_transparent ; } ; # endif # if _LIBCPP_STD_VER> 1 1 template<class _Tp = void> # else template<class _Tp> # endif struct _LIBCPP_TEMPLATE_VIS negate : __unary_function<_Tp,_Tp> { typedef _Tp __result_type ; _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY _Tp)",
    "insertText": "operator()(const _Tp& __x)"
  }
]