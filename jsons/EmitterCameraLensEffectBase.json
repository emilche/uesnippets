[
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "AEmitterCameraLensEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEmitterCameraLensEffectBase"
  },
  {
    "label": "UParticleSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Particles / Emitter . h \" # include \" Camera / CameraLensEffectInterface . h \" # include \" EmitterCameraLensEffectBase . generated . h \" class APlayerCameraManager ;)",
    "insertText": "UCLASS(abstract, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(EditDefaultsOnly, Category = EmitterCameraLensEffectBase)"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetRelativeTransform()"
  },
  {
    "label": "GetBaseFOV()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBaseFOV()"
  },
  {
    "label": "ShouldAllowMultipleInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowMultipleInstances()"
  },
  {
    "label": "ResetWhenTriggered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetWhenTriggered()"
  },
  {
    "label": "ShouldTreatEmitterAsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTreatEmitterAsSame(TSubclassOf<AActor> OtherEmitter)"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "AdjustBaseFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustBaseFOV(float NewFOV)"
  },
  {
    "label": "RegisterCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCamera(APlayerCameraManager* C)"
  },
  {
    "label": "NotifyWillBePooled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWillBePooled()"
  },
  {
    "label": "NotifyRetriggered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRetriggered()"
  },
  {
    "label": "ActivateLensEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateLensEffect()"
  },
  {
    "label": "DeactivateLensEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateLensEffect()"
  },
  {
    "label": "UpdateLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocation(const FVector& CamLoc, const FRotator& CamRot, float CamFOVDeg)"
  }
]