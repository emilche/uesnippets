[
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FIOSTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSTargetDevice"
  },
  {
    "label": "FIOSTargetDeviceOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSTargetDeviceOutput"
  },
  {
    "label": "FTcpDSCommander",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTcpDSCommander"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "FTcpDSCommander()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" Interfaces / ITargetDevice . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" Containers / Queue . h \" class FMessageEndpoint ; class ITargetPlatformControls ; typedef TSharedPtr<class FIOSTargetDevice,ESPMode::ThreadSafe> FIOSTargetDevicePtr ; typedef TSharedRef<class FIOSTargetDevice,ESPMode::ThreadSafe> FIOSTargetDeviceRef ; typedef TSharedPtr<class FIOSTargetDeviceOutput,ESPMode::ThreadSafe> FIOSTargetDeviceOutputPtr ; class FTcpDSCommander : FRunnable { public :)",
    "insertText": "FTcpDSCommander(const uint8* Data, int32 Count, TQueue<FString>& InOutputQueue)"
  },
  {
    "label": "FTcpDSCommander()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTcpDSCommander()"
  },
  {
    "label": "IsDSRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDSRunning()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Exit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStopped()"
  },
  {
    "label": "FIOSTargetDevice()",
    "kind": "Method",
    "detail": "Function (bool bStopping ; bool bStopped ; bool bIsSuccess ; bool bIsSystemError ; class FSocket* DSSocket ; FRunnableThread* Thread ; TQueue<FString>& OutputQueue ; uint8* DSCommand ; int32 DSCommandLen ; double LastActivity ; } ; class FIOSTargetDevice : public ITargetDevice { public :)",
    "insertText": "FIOSTargetDevice(const ITargetPlatformControls& InTargetPlatformControls)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Connect()"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "GetProcessSnapshot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProcessSnapshot(TArray<FTargetDeviceProcessInfo>& OutProcessInfos)"
  },
  {
    "label": "GetDeviceType()",
    "kind": "Method",
    "detail": "Function (ETargetDeviceTypes)",
    "insertText": "GetDeviceType()"
  },
  {
    "label": "GetDeviceConnectionType()",
    "kind": "Method",
    "detail": "Function (ETargetDeviceConnectionTypes)",
    "insertText": "GetDeviceConnectionType()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FTargetDeviceId)",
    "insertText": "GetId()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "GetModelId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetModelId()"
  },
  {
    "label": "GetOSVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOSVersion()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (const class ITargetPlatformSettings&)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "GetPlatformControls()",
    "kind": "Method",
    "detail": "Function (const class ITargetPlatformControls&)",
    "insertText": "GetPlatformControls()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "PowerOff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PowerOff(bool Force)"
  },
  {
    "label": "PowerOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PowerOn()"
  },
  {
    "label": "IsAuthorized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuthorized()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFeature(ETargetDeviceFeatures Feature)"
  },
  {
    "label": "TerminateProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TerminateProcess(const int64 ProcessId)"
  },
  {
    "label": "SetUserCredentials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserCredentials(const FString& UserName, const FString& UserPassword)"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "ExecuteConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteConsoleCommand(const FString& ExecCommand)"
  },
  {
    "label": "CreateDeviceOutputRouter()",
    "kind": "Method",
    "detail": "Function (ITargetDeviceOutputPtr)",
    "insertText": "CreateDeviceOutputRouter(FOutputDevice* Output)"
  },
  {
    "label": "SetFeature()",
    "kind": "Method",
    "detail": "Function (public : FDateTime LastPinged ; private : const ITargetPlatformControls& TargetPlatformControls ; FMessageAddress DeviceEndpoint ; TSharedPtr<FMessageEndpoint,ESPMode::ThreadSafe> MessageEndpoint ; FString AppId ; EBuildConfiguration BuildConfiguration ; bool bIsSimulated ; private : bool bCanReboot ; bool bCanPowerOn ; bool bCanPowerOff ; FTargetDeviceId DeviceId ; FString DeviceName ; bool bIsDeviceAuthorized ; ETargetDeviceTypes DeviceType ; FString DeviceModelId ; FString DeviceOSVersion ; ETargetDeviceConnectionTypes DeviceConnectionType ; public : void)",
    "insertText": "SetFeature(ETargetDeviceFeatures InFeature, bool bFlag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCanReboot = bFlag ; } else)",
    "insertText": "if(InFeature == ETargetDeviceFeatures::PowerOn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCanPowerOn = bFlag ; } else)",
    "insertText": "if(InFeature == ETargetDeviceFeatures::PowerOff)"
  },
  {
    "label": "SetDeviceId()",
    "kind": "Method",
    "detail": "Function (bCanPowerOff = bFlag ; } } void)",
    "insertText": "SetDeviceId(const FTargetDeviceId InDeviceId)"
  },
  {
    "label": "SetDeviceName()",
    "kind": "Method",
    "detail": "Function (DeviceId = InDeviceId ; } void)",
    "insertText": "SetDeviceName(const FString InDeviceName)"
  },
  {
    "label": "SetModelId()",
    "kind": "Method",
    "detail": "Function (DeviceName = InDeviceName ; } void)",
    "insertText": "SetModelId(const FString InModelId)"
  },
  {
    "label": "SetOSVersion()",
    "kind": "Method",
    "detail": "Function (DeviceModelId = InModelId ; } void)",
    "insertText": "SetOSVersion(const FString InOSVersion)"
  },
  {
    "label": "SetAuthorized()",
    "kind": "Method",
    "detail": "Function (DeviceOSVersion = InOSVersion ; } void)",
    "insertText": "SetAuthorized(bool bInIsAuthorized)"
  },
  {
    "label": "SetDeviceType()",
    "kind": "Method",
    "detail": "Function (bIsDeviceAuthorized = bInIsAuthorized ; } void)",
    "insertText": "SetDeviceType(const FString InDeviceTypeString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceType = ETargetDeviceTypes::Browser ; } else)",
    "insertText": "if(InDeviceTypeString.Contains(TEXT(\"Console\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceType = ETargetDeviceTypes::Console ; } else)",
    "insertText": "if(InDeviceTypeString.Contains(TEXT(\"Phone\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceType = ETargetDeviceTypes::Phone ; } else)",
    "insertText": "if(InDeviceTypeString.Contains(TEXT(\"Tablet\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceType = ETargetDeviceTypes::Tablet ; } else)",
    "insertText": "if(InDeviceTypeString.Contains(TEXT(\"iPad\")))"
  },
  {
    "label": "SetDeviceConnectionType()",
    "kind": "Method",
    "detail": "Function (DeviceType = ETargetDeviceTypes::Tablet ; } else { DeviceType = ETargetDeviceTypes::Indeterminate ; } } void)",
    "insertText": "SetDeviceConnectionType(const FString InDeviceConnectionTypeString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceConnectionType = ETargetDeviceConnectionTypes::Wifi ; } else)",
    "insertText": "if(InDeviceConnectionTypeString == TEXT(\"USB\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceConnectionType = ETargetDeviceConnectionTypes::USB ; } else)",
    "insertText": "if(InDeviceConnectionTypeString == TEXT(\"Simulator\"))"
  },
  {
    "label": "SetDeviceEndpoint()",
    "kind": "Method",
    "detail": "Function (DeviceConnectionType = ETargetDeviceConnectionTypes::Simulator ; } else { DeviceConnectionType = ETargetDeviceConnectionTypes::Unknown ; } } void)",
    "insertText": "SetDeviceEndpoint(const FMessageAddress& DeviceAddress)"
  },
  {
    "label": "SetAppId()",
    "kind": "Method",
    "detail": "Function (DeviceEndpoint = DeviceAddress ; } void)",
    "insertText": "SetAppId(const FString& GameName)"
  },
  {
    "label": "SetAppConfiguration()",
    "kind": "Method",
    "detail": "Function (AppId = GameName ; } void)",
    "insertText": "SetAppConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetIsSimulated()",
    "kind": "Method",
    "detail": "Function (BuildConfiguration = Configuration ; } void)",
    "insertText": "SetIsSimulated(bool IsSimulated)"
  }
]