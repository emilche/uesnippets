[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "FbxHungryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxHungryAllocator"
  },
  {
    "label": "MemoryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBlock"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_CONTAINER_ALLOCATORS_H_ # define _FBXSDK_CORE_BASE_CONTAINER_ALLOCATORS_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / fbxsdk_nsbegin . h> # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) && _MSC_VER < 1900 #pragma warning(push) #pragma warning(disable : 4512)"
  },
  {
    "label": "FbxBaseAllocator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FbxBaseAllocator(const size_t pRecordSize) : mRecordSize(pRecordSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(const size_t)"
  },
  {
    "label": "AllocateRecords()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "AllocateRecords(const size_t pRecordCount=1)"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeMemory(void* pRecord)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(pRecord)"
  },
  {
    "label": "GetRecordSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetRecordSize()"
  },
  {
    "label": "FbxHungryAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxHungryAllocator(const FbxHungryAllocator& pOther) : mRecordSize(pOther.mRecordSize), mRecordPoolSize(pOther.mRecordPoolSize), mData(NULL)"
  },
  {
    "label": "FbxHungryAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxHungryAllocator()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (MemoryBlock* lCurrent = mData ; MemoryBlock* lNext = lCurrent ? lCurrent -> mNextBlock : 0 ;)",
    "insertText": "while(lCurrent)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(lCurrent)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (lCurrent = lNext ; lNext = lCurrent ? lCurrent -> mNextBlock : 0 ; } } void)",
    "insertText": "Reserve(const size_t pRecordCount)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (MemoryBlock* lMem = FbxNew<)",
    "insertText": "MemoryBlock(pRecordCount* mRecordSize)"
  },
  {
    "label": "AllocateRecords()",
    "kind": "Method",
    "detail": "Function (lMem -> mNextBlock = mData ; mData = lMem ; mRecordPoolSize + = pRecordCount ; } void*)",
    "insertText": "AllocateRecords(const size_t pRecordCount = 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (MemoryBlock* lBlock = mData ; void* lRecord = NULL ;)",
    "insertText": "while((lBlock != NULL) && ((lRecord = lBlock->GetChunk(pRecordCount * mRecordSize)) == NULL))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lBlock = lBlock -> mNextBlock ; })",
    "insertText": "if(lRecord == NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t lNumRecordToAllocate = mRecordPoolSize / 8 = = 0 ? 2 : mRecordPoolSize / 8 ;)",
    "insertText": "if(lNumRecordToAllocate < pRecordCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (lNumRecordToAllocate = pRecordCount ; })",
    "insertText": "Reserve(lNumRecordToAllocate)"
  },
  {
    "label": "AllocateRecords()",
    "kind": "Method",
    "detail": "Function (lRecord =)",
    "insertText": "AllocateRecords(pRecordCount)"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (} return lRecord ; } void)",
    "insertText": "FreeMemory(void*)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (mRecordPoolSize = 0 ; } mRecordSize = pOther . mRecordSize ; })",
    "insertText": "return(*this)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (} private : class MemoryBlock { public :)",
    "insertText": "MemoryBlock(size_t pSize) : mNextBlock(NULL), mData(NULL), mFreeData(NULL), mEnd(NULL)"
  },
  {
    "label": "FbxMalloc()",
    "kind": "Method",
    "detail": "Function (mData =)",
    "insertText": "FbxMalloc(pSize)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (mFreeData = mData ; mEnd = reinterpret_cast<)",
    "insertText": "char(mData)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MemoryBlock()"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(mData)"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetChunk(const size_t pSize)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (void* lChunk = mFreeData ; mFreeData = reinterpret_cast<)",
    "insertText": "char(mFreeData)"
  }
]