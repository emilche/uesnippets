[
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_BINARY_SEARCH_H # define _LIBCPP___ALGORITHM_BINARY_SEARCH_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / lower_bound . h> # include<__config> # include<__iterator / iterator_traits . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _ForwardIterator, class _Tp, class _Compare> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (using _Comp_ref = __comp_ref_type<_Compare>::type ; __first = std::lower_bound<_ForwardIterator,_Tp,)",
    "insertText": "_Comp_ref(__first, __last, __value, __comp)"
  },
  {
    "label": "binary_search()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)"
  }
]