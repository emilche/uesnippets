[
  {
    "label": "GetWindowListFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GetWindowListFlags"
  },
  {
    "label": "WindowCaptureHelperWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowCaptureHelperWin"
  },
  {
    "label": "GetWindowRect()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURE_UTILS_H_ # define MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURE_UTILS_H_ # include<shlobj . h> # include<windows . h> # include<wrl / client . h> # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / desktop_geometry . h \" namespace webrtc { bool)",
    "insertText": "GetWindowRect(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetCroppedWindowRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCroppedWindowRect(HWND window, bool avoid_cropping_border, DesktopRect* cropped_rect, DesktopRect* original_rect)"
  },
  {
    "label": "GetWindowContentRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWindowContentRect(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetWindowRegionTypeWithBoundary()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetWindowRegionTypeWithBoundary(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetDcSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDcSize(HDC hdc, DesktopSize* size)"
  },
  {
    "label": "IsWindowMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowMaximized(HWND window, bool* result)"
  },
  {
    "label": "IsWindowValidAndVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowValidAndVisible(HWND window)"
  },
  {
    "label": "IsWindowResponding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowResponding(HWND window)"
  },
  {
    "label": "GetWindowList()",
    "kind": "Method",
    "detail": "Function (enum GetWindowListFlags { kNone = 0 x00,kIgnoreUntitled = 1<<0,kIgnoreUnresponsive = 1<<1,kIgnoreCurrentProcessWindows = 1<<2,} ; bool)",
    "insertText": "GetWindowList(int flags, DesktopCapturer::SourceList* windows, LONG ex_style_filters = 0)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* DwmIsCompositionEnabledFunc)(BOOL* enabled)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "HRESULT(WINAPI* DwmGetWindowAttributeFunc)(HWND hwnd, DWORD flag, PVOID result_ptr, DWORD result_size)"
  },
  {
    "label": "WindowCaptureHelperWin()",
    "kind": "Method",
    "detail": "Function (class WindowCaptureHelperWin { public :)",
    "insertText": "WindowCaptureHelperWin()"
  },
  {
    "label": "WindowCaptureHelperWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WindowCaptureHelperWin(const WindowCaptureHelperWin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WindowCaptureHelperWin&)",
    "insertText": "operator(const WindowCaptureHelperWin&)"
  },
  {
    "label": "IsAeroEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAeroEnabled()"
  },
  {
    "label": "IsWindowChromeNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowChromeNotification(HWND hwnd)"
  },
  {
    "label": "AreWindowsOverlapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreWindowsOverlapping(HWND hwnd, HWND selected_hwnd, const DesktopRect& selected_window_rect)"
  },
  {
    "label": "IsWindowOnCurrentDesktop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowOnCurrentDesktop(HWND hwnd)"
  },
  {
    "label": "IsWindowVisibleOnCurrentDesktop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowVisibleOnCurrentDesktop(HWND hwnd)"
  },
  {
    "label": "IsWindowCloaked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowCloaked(HWND hwnd)"
  },
  {
    "label": "EnumerateCapturableWindows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateCapturableWindows(DesktopCapturer::SourceList* results, bool enumerate_current_process_windows, LONG ex_style_filters = 0)"
  }
]