[
  {
    "label": "GetWindowListFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GetWindowListFlags"
  },
  {
    "label": "WindowCaptureHelperWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowCaptureHelperWin"
  },
  {
    "label": "GetWindowRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWindowRect(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetCroppedWindowRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCroppedWindowRect(HWND window,\n                          bool avoid_cropping_border,\n                          DesktopRect* cropped_rect,\n                          DesktopRect* original_rect)"
  },
  {
    "label": "GetWindowContentRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWindowContentRect(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetWindowRegionTypeWithBoundary()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetWindowRegionTypeWithBoundary(HWND window, DesktopRect* result)"
  },
  {
    "label": "GetDcSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDcSize(HDC hdc, DesktopSize* size)"
  },
  {
    "label": "IsWindowMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowMaximized(HWND window, bool* result)"
  },
  {
    "label": "IsWindowValidAndVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowValidAndVisible(HWND window)"
  },
  {
    "label": "IsWindowResponding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowResponding(HWND window)"
  },
  {
    "label": "GetWindowList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWindowList(int flags,\n                   DesktopCapturer::SourceList* windows,\n                   LONG ex_style_filters = 0)"
  },
  {
    "label": "WindowCaptureHelperWin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WindowCaptureHelperWin()"
  },
  {
    "label": "IsAeroEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAeroEnabled()"
  },
  {
    "label": "IsWindowChromeNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowChromeNotification(HWND hwnd)"
  },
  {
    "label": "AreWindowsOverlapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreWindowsOverlapping(HWND hwnd,\n                             HWND selected_hwnd,\n                             const DesktopRect& selected_window_rect)"
  },
  {
    "label": "IsWindowOnCurrentDesktop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowOnCurrentDesktop(HWND hwnd)"
  },
  {
    "label": "IsWindowVisibleOnCurrentDesktop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowVisibleOnCurrentDesktop(HWND hwnd)"
  },
  {
    "label": "IsWindowCloaked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowCloaked(HWND hwnd)"
  },
  {
    "label": "EnumerateCapturableWindows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateCapturableWindows(DesktopCapturer::SourceList* results,\n                                  bool enumerate_current_process_windows,\n                                  LONG ex_style_filters = 0)"
  }
]