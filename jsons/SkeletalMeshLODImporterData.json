[
  {
    "label": "FImportedSkinWeightProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedSkinWeightProfileData"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshInfo"
  },
  {
    "label": "FMeshWedge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshWedge"
  },
  {
    "label": "FMeshFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshFace"
  },
  {
    "label": "FJointPos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointPos"
  },
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FVertInfluence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertInfluence"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBone"
  },
  {
    "label": "FRawBoneInfluence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawBoneInfluence"
  },
  {
    "label": "FVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertex"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FVertexAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexAttribute"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FSkeletalMeshImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshImportData"
  },
  {
    "label": "FReductionBaseSkeletalMeshBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReductionBaseSkeletalMeshBulkData"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FInlineReductionCacheData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInlineReductionCacheData"
  },
  {
    "label": "FRawSkeletalMeshBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawSkeletalMeshBulkData"
  },
  {
    "label": "FIndexAndZ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexAndZ"
  },
  {
    "label": "FCompareIndexAndZ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareIndexAndZ"
  },
  {
    "label": "FWedgeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWedgeInfo"
  },
  {
    "label": "FWedgeInfoOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWedgeInfoOctreeSemantics"
  },
  {
    "label": "FOctreeQueryHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOctreeQueryHelper"
  },
  {
    "label": "FWedgePosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWedgePosition"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshDescription . h \" # if WITH_EDITOR # include \" Engine / EngineTypes . h \" # include \" BoneIndices . h \" # include \" Serialization / BulkData . h \" # include \" Components . h \" # include \" Math / GenericOctree . h \" # include \" Animation / MorphTarget . h \" # include \" Templates / DontCopy . h \" struct FImportedSkinWeightProfileData ; struct FMeshDescription ; class FSkeletalMeshLODModel ; enum class ESkeletalMeshGeoImportVersions : uint8 { Before_Versionning = 0,SkeletalMeshBuildRefactor,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; enum class ESkeletalMeshSkinningImportVersions : uint8 { Before_Versionning = 0,SkeletalMeshBuildRefactor,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; namespace SkeletalMeshImportData { struct FMeshInfo { FName Name ; int32 NumVertices = 0 ; int32 StartImportedVertex = 0 ; } ; struct FMeshWedge { uint32 iVertex ; FVector2f UVs [ MAX_TEXCOORDS ] ; FColor Color ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMeshWedge& T)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<T . iVertex ;)",
    "insertText": "for(int32 UVIdx = 0; UVIdx < MAX_TEXCOORDS; ++UVIdx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<T . UVs [ UVIdx ] ; } Ar<<T . Color ; return Ar ; } } ; struct FMeshFace { uint32 iWedge [ 3 ] ; uint16 MeshMaterialIndex ; FVector3f TangentX [ 3 ] ; FVector3f TangentY [ 3 ] ; FVector3f TangentZ [ 3 ] ; uint32 SmoothingGroups ; } ; struct FJointPos {::FTransform3f Transform ; float Length ; float XSize ; float YSize ; float ZSize ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FJointPos& F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Transform ; return Ar ; } } ; struct FTriangle { uint32 WedgeIndex [ 3 ] ; uint16 MatIndex ; uint8 AuxMatIndex ; uint32 SmoothingGroups ; FVector3f TangentX [ 3 ] ; FVector3f TangentY [ 3 ] ; FVector3f TangentZ [ 3 ] ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FTriangle& F)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FEditorObjectVersion::GUID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint8 TempMatIndex = 0 ; Ar<<TempMatIndex ; F . MatIndex = TempMatIndex ; } else { Ar<<F . MatIndex ; } Ar<<F . AuxMatIndex ; Ar<<F . SmoothingGroups ; Ar<<F . WedgeIndex [ 0 ] ; Ar<<F . WedgeIndex [ 1 ] ; Ar<<F . WedgeIndex [ 2 ] ; Ar<<F . TangentX [ 0 ] ; Ar<<F . TangentX [ 1 ] ; Ar<<F . TangentX [ 2 ] ; Ar<<F . TangentY [ 0 ] ; Ar<<F . TangentY [ 1 ] ; Ar<<F . TangentY [ 2 ] ; Ar<<F . TangentZ [ 0 ] ; Ar<<F . TangentZ [ 1 ] ; Ar<<F . TangentZ [ 2 ] ; return Ar ; } } ; struct FVertInfluence { float Weight ; uint32 VertIndex ; FBoneIndexType BoneIndex ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FVertInfluence& F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Weight<<F . VertIndex<<F . BoneIndex ; return Ar ; } } ; struct FMaterial { TWeakObjectPtr<UMaterialInterface> Material ; FString MaterialImportName ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMaterial& F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<F . MaterialImportName ; return Ar ; } } ; struct FBone { FString Name ; uint32 Flags ; int32 NumChildren ; int32 ParentIndex ; FJointPos BonePos ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBone& F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Name ; Ar<<F . Flags ; Ar<<F . NumChildren ; Ar<<F . ParentIndex ; Ar<<F . BonePos ; return Ar ; } } ; struct FRawBoneInfluence { float Weight ; int32 VertexIndex ; int32 BoneIndex ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FRawBoneInfluence& F)"
  },
  {
    "label": "FVertex()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Weight ; Ar<<F . VertexIndex ; Ar<<F . BoneIndex ; return Ar ; } } ; struct FVertex { uint32 VertexIndex ; FVector2f UVs [ MAX_TEXCOORDS ] ; FColor Color ; uint8 MatIndex ; uint8 Reserved ;)",
    "insertText": "FVertex()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FVertex))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVertex& Other)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (bool Equal = true ;)",
    "insertText": "Equal(VertexIndex == Other.VertexIndex)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Equal(MatIndex == Other.MatIndex)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Equal(Color == Other.Color)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Equal(Reserved == Other.Reserved)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bUVsEqual = true ;)",
    "insertText": "for(uint32 UVIdx = 0; UVIdx < MAX_TEXCOORDS; ++UVIdx)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (bUVsEqual = false ; break ; } } Equal& = bUVsEqual ; return Equal ; } uint32)",
    "insertText": "GetTypeHash(const FVertex& Vertex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FVertex& F)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<F . UVs [ UVIdx ] ; } return Ar ; } } ; struct FPoint { FVector3f Point ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FPoint& F)"
  },
  {
    "label": "FVertexAttribute()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Point ; return Ar ; } } ; struct FVertexAttribute {)",
    "insertText": "FVertexAttribute()"
  },
  {
    "label": "FVertexAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexAttribute(TArray<float>&& InAttributeValues, int32 InComponentCount) : AttributeValues(InAttributeValues), ComponentCount(InComponentCount)"
  },
  {
    "label": "FVertexAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexAttribute(const FVertexAttribute&)"
  },
  {
    "label": "FVertexAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexAttribute(FVertexAttribute&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<float> AttributeValues ; int32 ComponentCount ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FVertexAttribute& A)"
  },
  {
    "label": "FSkeletalMeshImportData()",
    "kind": "Method",
    "detail": "Function (Ar<<A . AttributeValues ; Ar<<A . ComponentCount ; return Ar ; } } ; } template<> struct TIsPODType<SkeletalMeshImportData::FMeshWedge> { enum { Value = true } ; } ; template<> struct TIsPODType<SkeletalMeshImportData::FMeshFace> { enum { Value = true } ; } ; template<> struct TIsPODType<SkeletalMeshImportData::FJointPos> { enum { Value = true } ; } ; template<> struct TIsPODType<SkeletalMeshImportData::FTriangle> { enum { Value = true } ; } ; template<> struct TIsPODType<SkeletalMeshImportData::FVertInfluence> { enum { Value = true } ; } ; class FSkeletalMeshImportData { public : TArray<SkeletalMeshImportData::FMaterial> Materials ; TArray<FVector3f> Points ; TArray<SkeletalMeshImportData::FVertex> Wedges ; TArray<SkeletalMeshImportData::FTriangle> Faces ; TArray<SkeletalMeshImportData::FBone> RefBonesBinary ; TArray<SkeletalMeshImportData::FRawBoneInfluence> Influences ; TArray<SkeletalMeshImportData::FMeshInfo> MeshInfos ; TArray<int32> PointToRawMap ; uint32 NumTexCoords ; uint32 MaxMaterialIndex ; bool bHasVertexColors ; bool bHasNormals ; bool bHasTangents ; TArray<FSkeletalMeshImportData> MorphTargets ; TArray<TSet<uint32>> MorphTargetModifiedPoints ; TArray<FString> MorphTargetNames ; TArray<FSkeletalMeshImportData> AlternateInfluences ; TArray<FString> AlternateInfluenceProfileNames ; TArray<SkeletalMeshImportData::FVertexAttribute> VertexAttributes ; TArray<FString> VertexAttributeNames ;)",
    "insertText": "FSkeletalMeshImportData() : NumTexCoords(0) , MaxMaterialIndex(0) , bHasVertexColors(false) , bHasNormals(false) , bHasTangents(false)"
  },
  {
    "label": "CopyDataNeedByMorphTargetImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyDataNeedByMorphTargetImport(FSkeletalMeshImportData& Other)"
  },
  {
    "label": "KeepAlternateSkinningBuildDataOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepAlternateSkinningBuildDataOnly()"
  },
  {
    "label": "CopyLODImportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLODImportData(TArray<FVector3f>& LODPoints, TArray<SkeletalMeshImportData::FMeshWedge>& LODWedges, TArray<SkeletalMeshImportData::FMeshFace>& LODFaces, TArray<SkeletalMeshImportData::FVertInfluence>& LODInfluences, TArray<int32>& LODPointToRawMap)"
  },
  {
    "label": "FixupBoneName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FixupBoneName(FString InBoneName)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "ReplaceSkeletalMeshGeometryImportData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReplaceSkeletalMeshGeometryImportData(const USkeletalMesh* SkeletalMesh, FSkeletalMeshImportData* ImportData, int32 LodIndex)"
  },
  {
    "label": "ReplaceSkeletalMeshRigImportData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceSkeletalMeshRigImportData(const USkeletalMesh* SkeletalMesh, FSkeletalMeshImportData* ImportData, int32 LodIndex)"
  },
  {
    "label": "ApplyRigToGeo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRigToGeo(FSkeletalMeshImportData& Other)"
  },
  {
    "label": "ComputeSmoothGroupFromNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSmoothGroupFromNormals()"
  },
  {
    "label": "AddMorphTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMorphTarget(FName InMorphTargetName, const FMorphTargetLODModel& InMorphTargetModel, const TArray<uint32>& InVertexMap)"
  },
  {
    "label": "AddSkinWeightProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSkinWeightProfile(FName InProfileName, const FImportedSkinWeightProfileData& InProfileData, const TArray<int32>& InVertexMap, const TArray<FBoneIndexType>& InBoneIndexMap)"
  },
  {
    "label": "GetMeshDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshDescription(const USkeletalMesh* InSkeletalMesh, const FSkeletalMeshBuildSettings* InBuildSettings, FMeshDescription& OutMeshDescription)"
  },
  {
    "label": "CreateFromMeshDescription()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshImportData)",
    "insertText": "CreateFromMeshDescription(const FMeshDescription& InMeshDescription)"
  },
  {
    "label": "CopySkinWeightsToMeshDescription()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CopySkinWeightsToMeshDescription(const USkeletalMesh* InSkeletalMesh, const FName InSkinWeightName, const FSkeletalMeshImportData& InSkinWeightMesh, const TArray<FVertexID>& InVertexIDMap, FMeshDescription& OutMeshDescription)"
  },
  {
    "label": "CleanUpUnusedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpUnusedMaterials()"
  },
  {
    "label": "SplitVerticesBySmoothingGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitVerticesBySmoothingGroups()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSkeletalMeshImportData& RawMesh)"
  },
  {
    "label": "CacheGeometryInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FReductionBaseSkeletalMeshBulkData { FByteBulkData BulkData ; FCustomVersionContainer SerializeLoadingCustomVersionContainer ; FPackageFileVersion UEVersion ; int32 LicenseeUEVersion = 0 ; bool bUseSerializeLoadingCustomVersion = false ; uint32 CacheLODVertexNumber = MAX_uint32 ; uint32 CacheLODTriNumber = MAX_uint32 ; void)",
    "insertText": "CacheGeometryInfo(const FSkeletalMeshLODModel& SourceLODModel)"
  },
  {
    "label": "FReductionBaseSkeletalMeshBulkData()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FReductionBaseSkeletalMeshBulkData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, TArray<FReductionBaseSkeletalMeshBulkData*>& ReductionBaseSkeletalMeshDatas, UObject* Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(class FArchive& Ar, class UObject* Owner)"
  },
  {
    "label": "SaveReductionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveReductionData(FSkeletalMeshLODModel& BaseLODModel, TMap<FString, TArray<FMorphTargetDelta>>& BaseLODMorphTargetData, UObject* Owner)"
  },
  {
    "label": "LoadReductionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadReductionData(FSkeletalMeshLODModel& BaseLODModel, TMap<FString, TArray<FMorphTargetDelta>>& BaseLODMorphTargetData, UObject* Owner)"
  },
  {
    "label": "GetGeometryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGeometryInfo(uint32& LODVertexNumber, uint32& LODTriNumber, UObject* Owner)"
  },
  {
    "label": "GetBulkData()",
    "kind": "Method",
    "detail": "Function (FByteBulkData&)",
    "insertText": "GetBulkData()"
  },
  {
    "label": "RemoveBulkData()",
    "kind": "Method",
    "detail": "Function (BulkData .)",
    "insertText": "RemoveBulkData()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "SetCacheGeometryInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInlineReductionCacheData { uint32 CacheLODVertexCount = MAX_uint32 ; uint32 CacheLODTriCount = MAX_uint32 ; void)",
    "insertText": "SetCacheGeometryInfo(const FSkeletalMeshLODModel& SourceLODModel)"
  },
  {
    "label": "SetCacheGeometryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheGeometryInfo(uint32 LODVertexCount, uint32 LODTriCount)"
  },
  {
    "label": "GetCacheGeometryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCacheGeometryInfo(uint32& LODVertexCount, uint32& LODTriCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FInlineReductionCacheData& InlineReductionCacheData)"
  },
  {
    "label": "FRawSkeletalMeshBulkData()",
    "kind": "Method",
    "detail": "Function (Ar<<InlineReductionCacheData . CacheLODVertexCount ; Ar<<InlineReductionCacheData . CacheLODTriCount ; return Ar ; } class FRawSkeletalMeshBulkData { # if WITH_EDITOR TDontCopy<FRWLock> BulkDataLock ; # endif FByteBulkData BulkData ; FGuid Guid ; bool bGuidIsHash ; FCustomVersionContainer SerializeLoadingCustomVersionContainer ; FPackageFileVersion UEVersion ; int32 LicenseeUEVersion = 0 ; bool bUseSerializeLoadingCustomVersion = false ; public : ESkeletalMeshGeoImportVersions GeoImportVersion ; ESkeletalMeshSkinningImportVersions SkinningImportVersion ;)",
    "insertText": "FRawSkeletalMeshBulkData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, TArray<TSharedRef<FRawSkeletalMeshBulkData>>& RawSkeltalMeshBulkDatas, UObject* Owner)"
  },
  {
    "label": "SaveRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRawMesh(FSkeletalMeshImportData& InMesh)"
  },
  {
    "label": "LoadRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRawMesh(FSkeletalMeshImportData& OutMesh)"
  },
  {
    "label": "GetIdString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetIdString()"
  },
  {
    "label": "UseHashAsGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseHashAsGuid(class UObject* Owner)"
  },
  {
    "label": "EmptyBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyBulkData()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (Guid .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "IsBuildDataAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBuildDataAvailable()"
  },
  {
    "label": "PointsEqual()",
    "kind": "Method",
    "detail": "Function (} ; namespace FWedgePositionHelper { bool)",
    "insertText": "PointsEqual(const FVector3f& V1, const FVector3f& V2, float ComparisonThreshold)"
  },
  {
    "label": "FIndexAndZ()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIndexAndZ(int32 InIndex, FVector3f V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Z = 0 . 3 0 f* V . X + 0 . 3 3 f* V . Y + 0 . 3 7 f* V . Z ; Index = InIndex ; } } ; struct FCompareIndexAndZ { bool)",
    "insertText": "operator()(FIndexAndZ const& A, FIndexAndZ const& B)"
  },
  {
    "label": "AreElementsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreElementsEqual(const FWedgeInfo& A, const FWedgeInfo& B)"
  },
  {
    "label": "SetElementId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetElementId(const FWedgeInfo& Element, FOctreeElementId2 Id)"
  },
  {
    "label": "FOctreeQueryHelper()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TOctree2<FWedgeInfo,FWedgeInfoOctreeSemantics> TWedgeInfoPosOctree ; class FOctreeQueryHelper { public :)",
    "insertText": "FOctreeQueryHelper(const TWedgeInfoPosOctree *InWedgePosOctree) : WedgePosOctree(InWedgePosOctree)"
  },
  {
    "label": "FindNearestWedgeIndexes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindNearestWedgeIndexes(const FVector3f& SearchPosition, TArray<FWedgeInfo>& OutNearestWedges)"
  },
  {
    "label": "FWedgePosition()",
    "kind": "Method",
    "detail": "Function (private : const TWedgeInfoPosOctree* WedgePosOctree ; } ; struct FWedgePosition {)",
    "insertText": "FWedgePosition()"
  },
  {
    "label": "GetOctree()",
    "kind": "Method",
    "detail": "Function (delete WedgePosOctree ; WedgePosOctree = nullptr ; } } const TWedgeInfoPosOctree*)",
    "insertText": "GetOctree()"
  },
  {
    "label": "FillWedgePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWedgePosition(FWedgePosition& OutOverlappingPosition, const TArray<FVector3f>& Positions, const TArray<SkeletalMeshImportData::FVertex> Wedges, const TArray<FVector3f>& TargetPositions, float ComparisonThreshold)"
  }
]