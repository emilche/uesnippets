[
  {
    "label": "FMyAwesomeStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMyAwesomeStruct"
  },
  {
    "label": "AMyAwesomeActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AMyAwesomeActor"
  },
  {
    "label": "FNetPushObjectId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetPushObjectId"
  },
  {
    "label": "FPushModelPerNetDriverHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPushModelPerNetDriverHandle"
  },
  {
    "label": "FPushModelPerNetDriverState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPushModelPerNetDriverState"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PushModelMacros . h \" # if WITH_PUSH_MODEL # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" UObject / ObjectKey . h \" # if 0)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() void SetMyReplicatedBool(const bool bNewValue)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (bMyReplicatedBool = bNewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AMyAwesomeActor, bMyReplicatedBool, this)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (MyBlueprintProperty = NewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AMyAwesomeActor, MyBlueprintProperty, this)"
  },
  {
    "label": "MySetter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MySetter(const FString& NewValue)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (MyBlueprintSetterProperty = NewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AMyAwesomeActor, MyBlueprintSetterProperty, this)"
  },
  {
    "label": "SetStaticArrayValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStaticArrayValue(const int32 NewValue, const int32 Index)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX()",
    "kind": "Method",
    "detail": "Function (MyStaticArray [ Index ] = NewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX(AMyAwesomeActor, MyStaticArray, Index, this)"
  },
  {
    "label": "SetEntireStaticArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEntireStaticArray(const int32 NewArray[4])"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY()",
    "kind": "Method",
    "detail": "Function (MyStaticArray = NewArray ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY(AMyAwesomeActor, MyStaticArray, this)"
  },
  {
    "label": "UpdateMyStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMyStruct(int32 NewValue)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (MyStruct . SomeReplicatedProperty = NewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AMyAwesomeActor, MyStruct, this)"
  },
  {
    "label": "UpdateMyStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMyStruct(bool bNewValue)"
  },
  {
    "label": "GetMyStruct_Mutable()",
    "kind": "Method",
    "detail": "Function (} FMyAwesomeStruct&)",
    "insertText": "GetMyStruct_Mutable()"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(OutLifetimeProps)"
  },
  {
    "label": "DOREPLIFETIME_WITH_PARAMS_FAST()",
    "kind": "Method",
    "detail": "Function (FDoRepLifetimeParams Params ; Params . bIsPushBased = true ;)",
    "insertText": "DOREPLIFETIME_WITH_PARAMS_FAST(AMyAwesomeActor, bMyReplicatedBool, Params)"
  },
  {
    "label": "DOREPLIFETIME_WITH_PARAMS_FAST()",
    "kind": "Method",
    "detail": "Function (Params . bIsPushBased = false ;)",
    "insertText": "DOREPLIFETIME_WITH_PARAMS_FAST(AMyAwesomeActor, NonPushModelProperty, Params)"
  },
  {
    "label": "FNetPushObjectId()",
    "kind": "Method",
    "detail": "Function (} ; # endif namespace UEPushModelPrivate { using FNetPushPerNetDriverId = int32 ; using FNetLegacyPushObjectId = int32 ; using FNetIrisPushObjectId = uint64 ; struct FNetPushObjectId {)",
    "insertText": "FNetPushObjectId() : Value(0xFFFFFFFFFFFFFFFFULL)"
  },
  {
    "label": "FNetPushObjectId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetPushObjectId(FNetLegacyPushObjectId Id)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Value = 0 xFFFFFFFF00000000ULL |)",
    "insertText": "uint32(Id)"
  },
  {
    "label": "FNetPushObjectId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetPushObjectId(FNetIrisPushObjectId Id)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Value = Id ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetIrisPushObjectId()",
    "kind": "Method",
    "detail": "Function (} FNetIrisPushObjectId)",
    "insertText": "GetIrisPushObjectId()"
  },
  {
    "label": "IsPushModelEnabled()",
    "kind": "Method",
    "detail": "Function (} } ; bool bIsPushModelEnabled ; bool bMakeBpPropertiesPushModel ; const bool)",
    "insertText": "IsPushModelEnabled()"
  },
  {
    "label": "SetHandleCreationAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandleCreationAllowed(bool bAllow)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FNetPushObjectId Id)"
  },
  {
    "label": "MarkPropertyDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkPropertyDirty(const UObject* Object, const FNetPushObjectId ObjectId, const int32 RepIndex)"
  },
  {
    "label": "MarkPropertyDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPropertyDirty(const UObject* Object, const FNetPushObjectId ObjectId, const int32 StartRepIndex, const int32 EndRepIndex)"
  },
  {
    "label": "AddPushModelObject()",
    "kind": "Method",
    "detail": "Function (const FPushModelPerNetDriverHandle)",
    "insertText": "AddPushModelObject(const FObjectKey ObjectId, const uint16 NumberOfReplicatedProperties)"
  },
  {
    "label": "RemovePushModelObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePushModelObject(const FPushModelPerNetDriverHandle Handle)"
  },
  {
    "label": "GetPerNetDriverState()",
    "kind": "Method",
    "detail": "Function (class FPushModelPerNetDriverState*)",
    "insertText": "GetPerNetDriverState(const FPushModelPerNetDriverHandle Handle)"
  },
  {
    "label": "DoesHaveDirtyPropertiesOrRecentlyCollectedGarbage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesHaveDirtyPropertiesOrRecentlyCollectedGarbage(const FPushModelPerNetDriverHandle Handle)"
  },
  {
    "label": "ValidateObjectIdReassignment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateObjectIdReassignment(FNetLegacyPushObjectId CurrentId, FNetLegacyPushObjectId NewId)"
  },
  {
    "label": "LogMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMemory(FOutputDevice& Ar)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FIrisMarkPropertyDirty, const UObject*, UEPushModelPrivate::FNetIrisPushObjectId, const int32)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FIrisMarkPropertiesDirty, const UObject*, UEPushModelPrivate::FNetIrisPushObjectId, const int32, const int32)"
  },
  {
    "label": "SetIrisMarkPropertyDirtyDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrisMarkPropertyDirtyDelegate(const FIrisMarkPropertyDirty& Delegate)"
  },
  {
    "label": "SetIrisMarkPropertiesDirtyDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrisMarkPropertiesDirtyDelegate(const FIrisMarkPropertiesDirty& Delegate)"
  },
  {
    "label": "CONDITIONAL_ON_PUSH_MODEL()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "CONDITIONAL_ON_PUSH_MODEL(Work) if (UEPushModelPrivate::IsPushModelEnabled())"
  },
  {
    "label": "IS_PUSH_MODEL_ENABLED()",
    "kind": "Method",
    "detail": "Function (Work ; } # define)",
    "insertText": "IS_PUSH_MODEL_ENABLED() UEPushModelPrivate::IsPushModelEnabled() #define PUSH_MAKE_BP_PROPERTIES_PUSH_MODEL() (UEPushModelPrivate::IsPushModelEnabled() && UEPushModelPrivate::MakeBpPropertiesPushModel()) #define GET_PROPERTY_REP_INDEX(ClassName, PropertyName) (int32)ClassName::ENetFields_Private::PropertyName #define GET_PROPERTY_REP_INDEX_STATIC_ARRAY_START(ClassName, PropertyName) ((int32)ClassName::ENetFields_Private::PropertyName ## _STATIC_ARRAY) #define GET_PROPERTY_REP_INDEX_STATIC_ARRAY_END(ClassName, PropertyName) ((int32)ClassName::ENetFields_Private::PropertyName ## _STATIC_ARRAY_END) #define GET_PROPERTY_REP_INDEX_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex) (GET_PROPERTY_REP_INDEX_STATIC_ARRAY_START(ClassName, PropertyName) + ArrayIndex) #define IS_PROPERTY_REPLICATED(Property) (0 != (EPropertyFlags::CPF_Net & Property->PropertyFlags)) #define CONDITIONAL_ON_OBJECT_NET_ID(Object, Work)"
  },
  {
    "label": "PrivatePushId()",
    "kind": "Method",
    "detail": "Function (const UEPushModelPrivate::FNetPushObjectId)",
    "insertText": "PrivatePushId(Object->GetNetPushId())"
  },
  {
    "label": "CONDITIONAL_ON_OBJECT_NET_ID_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (Work ; } # define)",
    "insertText": "CONDITIONAL_ON_OBJECT_NET_ID_DYNAMIC(Object, Work)"
  },
  {
    "label": "PrivatePushId()",
    "kind": "Method",
    "detail": "Function (const UEPushModelPrivate::FNetPushObjectId)",
    "insertText": "PrivatePushId(Object->GetNetPushIdDynamic())"
  },
  {
    "label": "CONDITIONAL_ON_REP_INDEX_AND_OBJECT_NET_ID()",
    "kind": "Method",
    "detail": "Function (Work ; } # define)",
    "insertText": "CONDITIONAL_ON_REP_INDEX_AND_OBJECT_NET_ID(Object, Property, Work) if (IS_PROPERTY_REPLICATED(Property))"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_UNSAFE()",
    "kind": "Method",
    "detail": "Function (Work ; } # define)",
    "insertText": "MARK_PROPERTY_DIRTY_UNSAFE(Object, RepIndex) CONDITIONAL_ON_OBJECT_NET_ID_DYNAMIC(Object, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, RepIndex)) #define MARK_PROPERTY_DIRTY(Object, Property) CONDITIONAL_ON_REP_INDEX_AND_OBJECT_NET_ID(Object, Property, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, Property->RepIndex)) #define MARK_PROPERTY_DIRTY_STATIC_ARRAY_INDEX(Object, Property, ArrayIndex) CONDITIONAL_ON_REP_INDEX_AND_OBJECT_NET_ID(Object, Property, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, Property->RepIndex + ArrayIndex)) #define MARK_PROPERTY_DIRTY_STATIC_ARRAY(Object, Property) CONDITIONAL_ON_REP_INDEX_AND_OBJECT_NET_ID(Object, Property, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, Property->RepIndex, Property->RepIndex + Property->ArrayDim - 1)) #define MARK_PROPERTY_DIRTY_FROM_NAME(ClassName, PropertyName, Object) CONDITIONAL_ON_OBJECT_NET_ID(Object, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, GET_PROPERTY_REP_INDEX(ClassName, PropertyName))) #define MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex, Object) CONDITIONAL_ON_OBJECT_NET_ID(Object, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, GET_PROPERTY_REP_INDEX_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex))) #define MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY(ClassName, PropertyName, Object) CONDITIONAL_ON_OBJECT_NET_ID(Object, UEPushModelPrivate::MarkPropertyDirty(Object, PrivatePushId, GET_PROPERTY_REP_INDEX_STATIC_ARRAY_START(ClassName, PropertyName), GET_PROPERTY_REP_INDEX_STATIC_ARRAY_END(ClassName, PropertyName))) #define COMPARE_ASSIGN_AND_MARK_PROPERTY_DIRTY(ClassName, PropertyName, NewValue, Object) \\ if (NewValue != PropertyName)"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (PropertyName = NewValue ;)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(ClassName, PropertyName, Object)"
  },
  {
    "label": "UE_NET_SET_IRIS_MARK_PROPERTY_DIRTY_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} # if UE_WITH_IRIS # define)",
    "insertText": "UE_NET_SET_IRIS_MARK_PROPERTY_DIRTY_DELEGATE(Delegate) UEPushModelPrivate::SetIrisMarkPropertyDirtyDelegate(Delegate) #define UE_NET_SET_IRIS_MARK_PROPERTIES_DIRTY_DELEGATE(Delegate) UEPushModelPrivate::SetIrisMarkPropertiesDirtyDelegate(Delegate) #endif #else #define MARK_PROPERTY_DIRTY_UNSAFE(Object, RepIndex) #define MARK_PROPERTY_DIRTY(Object, Property) #define MARK_PROPERTY_DIRTY_STATIC_ARRAY_INDEX(Object, RepIndex, ArrayIndex) #define MARK_PROPERTY_DIRTY_STATIC_ARRAY(Object, RepIndex, ArrayIndex) #define MARK_PROPERTY_DIRTY_FROM_NAME(ClassName, PropertyName, Object) #define MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex, Object) #define MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY(ClassName, PropertyName, ArrayIndex, Object) #define GET_PROPERTY_REP_INDEX(ClassName, PropertyName) INDEX_NONE #define GET_PROPERTY_REP_INDEX_STATIC_ARRAY(ClassName, PropertyName, ArrayIndex) INDEX_NONE #define IS_PUSH_MODEL_ENABLED() false #define PUSH_MAKE_BP_PROPERTIES_PUSH_MODEL() false #define COMPARE_ASSIGN_AND_MARK_PROPERTY_DIRTY(ClassName, PropertyName, NewValue, Object) \\ if (NewValue != PropertyName)"
  }
]