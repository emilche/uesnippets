[
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "RegionT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionT"
  },
  {
    "label": "RNSuccIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RNSuccIterator"
  },
  {
    "label": "ItMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ItMode"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "advanceRegionSucc()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_REGIONITERATOR_H # define LLVM_ANALYSIS_REGIONITERATOR_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Analysis / RegionInfo . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { template<class NodeType,class BlockT,class RegionT> class RNSuccIterator { public : using iterator_category = std::forward_iterator_tag ; using value_type = NodeType ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; private : typedef GraphTraits<BlockT*> BlockTraits ; typedef BlockTraits::ChildIteratorType SuccIterTy ; enum ItMode { ItBB,ItRgBegin,ItRgEnd } ; PointerIntPair<NodeType*,2,ItMode> Node ; SuccIterTy BItor ; void)",
    "insertText": "advanceRegionSucc()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node.getInt() == ItRgBegin && \"Cannot advance region successor!\")"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (Node .)",
    "insertText": "setInt(ItRgEnd)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} NodeType*)",
    "insertText": "getNode()"
  },
  {
    "label": "isRegionMode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegionMode()"
  },
  {
    "label": "getISucc()",
    "kind": "Method",
    "detail": "Function (} NodeType*)",
    "insertText": "getISucc(BlockT* BB)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (NodeType* succ ; succ =)",
    "insertText": "getNode()->getParent()->getNode(BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(succ && \"BB not in Region or entered subregion!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node.getInt() == ItRgBegin && \"Cannot get the region successor!\")"
  },
  {
    "label": "isExit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExit(BlockT* BB)"
  },
  {
    "label": "RNSuccIterator()",
    "kind": "Method",
    "detail": "Function (} public : typedef RNSuccIterator<NodeType,BlockT,RegionT> Self ;)",
    "insertText": "RNSuccIterator(NodeType* node) : Node(node, node->isSubRegion() ? ItRgBegin : ItBB), BItor(BlockTraits::child_begin(node->getEntry()))"
  },
  {
    "label": "RNSuccIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RNSuccIterator(NodeType* node, bool) : Node(node, node->isSubRegion() ? ItRgEnd : ItBB), BItor(BlockTraits::child_end(node->getEntry()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Self& x)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isRegionMode() == x.isRegionMode() && \"Broken iterator!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "operator()"
  },
  {
    "label": "isRegionMode()",
    "kind": "Method",
    "detail": "Function (BlockT* BB =)",
    "insertText": "isRegionMode() ? getRegionSucc()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isExit(BB) && \"Iterator out of range!\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { do + + BItor ;)",
    "insertText": "while(BItor != BlockTraits::child_end(getNode()->getEntry()) && isExit(*BItor))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } Self)",
    "insertText": "operator(int)"
  },
  {
    "label": "RNSuccIterator()",
    "kind": "Method",
    "detail": "Function (Self tmp =* this ; + +* this ; return tmp ; } } ; template<class NodeType,class BlockT,class RegionT> class RNSuccIterator<FlatIt<NodeType>,BlockT,RegionT> { typedef GraphTraits<BlockT*> BlockTraits ; typedef BlockTraits::ChildIteratorType SuccIterTy ; NodeType* Node ; SuccIterTy Itor ; public : using iterator_category = std::forward_iterator_tag ; using value_type = NodeType ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; typedef RNSuccIterator<FlatIt<NodeType>,BlockT,RegionT> Self ;)",
    "insertText": "RNSuccIterator(NodeType* node) : Node(node), Itor(BlockTraits::child_begin(node->getEntry()))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Node->isSubRegion() && \"Subregion node not allowed in flat iterating mode!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node->getParent() && \"A BB node must have a parent!\")"
  },
  {
    "label": "RNSuccIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RNSuccIterator(NodeType* node, bool) : Node(node), Itor(BlockTraits::child_end(node->getEntry()))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node->getParent() == x.Node->getParent() && \"Cannot compare iterators of different regions!\")"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (BlockT* BB =* Itor ; RegionT* Parent = Node ->)",
    "insertText": "getParent()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Parent->getExit() != BB && \"iterator out of range!\")"
  },
  {
    "label": "succ_begin()",
    "kind": "Method",
    "detail": "Function (Self tmp =* this ; + +* this ; return tmp ; } } ; template<class NodeType,class BlockT,class RegionT> RNSuccIterator<NodeType,BlockT,RegionT>)",
    "insertText": "succ_begin(NodeType* Node)"
  },
  {
    "label": "succ_end()",
    "kind": "Method",
    "detail": "Function (} template<class NodeType,class BlockT,class RegionT> RNSuccIterator<NodeType,BlockT,RegionT>)",
    "insertText": "succ_end(NodeType* Node)"
  },
  {
    "label": "RegionNodeGraphTraits()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "RegionNodeGraphTraits(NodeT, BlockT, RegionT)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (\\ typedef NodeT NodeType ; \\ typedef RNSuccIterator<NodeType,BlockT,RegionT> ChildIteratorType ; \\ NodeType*)",
    "insertText": "getEntryNode(NodeType* N)"
  },
  {
    "label": "RegionT()",
    "kind": "Method",
    "detail": "Function (\\ return RNSuccIterator<NodeType,BlockT,)",
    "insertText": "RegionT(N)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "RegionT()",
    "kind": "Method",
    "detail": "Function (\\ return RNSuccIterator<NodeType,BlockT,)",
    "insertText": "RegionT(N, true)"
  },
  {
    "label": "RegionGraphTraits()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "RegionGraphTraits(RegionT, NodeT)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (\\ typedef df_iterator<NodeType*> nodes_iterator ; \\ NodeType*)",
    "insertText": "getEntryNode(RegionT* R)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (\\ return R ->)",
    "insertText": "getNode(R->getEntry())"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (\\ } \\ nodes_iterator)",
    "insertText": "nodes_begin(RegionT* R)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "begin(getEntryNode(R))"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (\\ } \\ nodes_iterator)",
    "insertText": "nodes_end(RegionT* R)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "end(getEntryNode(R))"
  },
  {
    "label": "getBBNode()",
    "kind": "Method",
    "detail": "Function (\\ return R ->)",
    "insertText": "getBBNode(R->getEntry())"
  },
  {
    "label": "RegionNodeGraphTraits()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "RegionNodeGraphTraits(RegionNode, BasicBlock, Region)"
  },
  {
    "label": "RegionNodeGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionNodeGraphTraits(const RegionNode, BasicBlock, Region)"
  },
  {
    "label": "RegionGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionGraphTraits(Region, RegionNode)"
  },
  {
    "label": "RegionGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionGraphTraits(const Region, const RegionNode)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (template<> struct GraphTraits<RegionInfo*> : public GraphTraits<FlatIt<RegionNode*>> { typedef df_iterator<NodeType*,SmallPtrSet<NodeType*,8>,false,GraphTraits<FlatIt<NodeType*>>> nodes_iterator ; NodeType*)",
    "insertText": "getEntryNode(RegionInfo *RI)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(RegionInfo* RI)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(RegionInfo *RI)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<RegionInfoPass*> : public GraphTraits<RegionInfo*> { typedef df_iterator<NodeType*,SmallPtrSet<NodeType*,8>,false,GraphTraits<FlatIt<NodeType*>>> nodes_iterator ; NodeType*)",
    "insertText": "getEntryNode(RegionInfoPass *RI)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(RegionInfoPass* RI)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(RegionInfoPass *RI)"
  }
]