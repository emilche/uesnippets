[
  {
    "label": "FRHIShaderBundleComputeDispatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderBundleComputeDispatch"
  },
  {
    "label": "FRHIShaderBundleGraphicsDispatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderBundleGraphicsDispatch"
  },
  {
    "label": "FShaderCodeReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeReader"
  },
  {
    "label": "TResourceTypeStr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TResourceTypeStr"
  },
  {
    "label": "ValidateStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / App . h \" # include \" RHICore . h \" # include \" ShaderCore . h \" # include \" ShaderParameterMacros . h \" struct FRHIShaderBundleComputeDispatch ; struct FRHIShaderBundleGraphicsDispatch ; namespace UE { namespace RHICore { void)",
    "insertText": "ValidateStaticUniformBuffer(FRHIUniformBuffer* UniformBuffer, FUniformBufferStaticSlot Slot, uint32 ExpectedHash)"
  },
  {
    "label": "SetupShaderCodeValidationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupShaderCodeValidationData(FRHIShader* RHIShader, class FShaderCodeReader& ShaderCodeReader)"
  },
  {
    "label": "SetupShaderDiagnosticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupShaderDiagnosticData(FRHIShader* RHIShader, class FShaderCodeReader& ShaderCodeReader)"
  },
  {
    "label": "RegisterDiagnosticMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDiagnosticMessages(const TArray<FShaderDiagnosticData>& In)"
  },
  {
    "label": "GetDiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "GetDiagnosticMessage(uint32 MessageID)"
  },
  {
    "label": "DispatchShaderBundleEmulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchShaderBundleEmulation(FRHIComputeCommandList& InRHICmdList, FRHIShaderBundle* ShaderBundle, FRHIBuffer* ArgumentBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches)"
  },
  {
    "label": "DispatchShaderBundleEmulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchShaderBundleEmulation(FRHICommandList& InRHICmdList, FRHIShaderBundle* ShaderBundle, FRHIBuffer* ArgumentBuffer, const FRHIShaderBundleGraphicsState& BundleState, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> Dispatches)"
  },
  {
    "label": "InitStaticUniformBufferSlots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticUniformBufferSlots(FRHIShaderData* ShaderData)"
  },
  {
    "label": "GetShaderResourceTable()",
    "kind": "Method",
    "detail": "Function (TArray<FUniformBufferStaticSlot>& StaticSlots = ShaderData -> StaticSlots ; const FShaderResourceTable& ShaderResourceTable = ShaderData ->)",
    "insertText": "GetShaderResourceTable()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (StaticSlots .)",
    "insertText": "Reserve(ShaderResourceTable.ResourceTableLayoutHashes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StaticSlots .)",
    "insertText": "Add(Metadata->GetLayout().StaticSlot)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { StaticSlots .)",
    "insertText": "Add(MAX_UNIFORM_BUFFER_STATIC_SLOTS)"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} } } template<TApplyFunction> void)",
    "insertText": "ApplyStaticUniformBuffers(FRHIShader* Shader, const TArray<FRHIUniformBuffer*>& UniformBuffers, TApplyFunction&& ApplyFunction)"
  },
  {
    "label": "GetStaticSlots()",
    "kind": "Method",
    "detail": "Function (const TArray<FUniformBufferStaticSlot>& Slots = Shader ->)",
    "insertText": "GetStaticSlots()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FUniformBufferStaticSlot Slot = Slots [ BufferIndex ] ;)",
    "insertText": "if(IsUniformBufferStaticSlotValid(Slot))"
  },
  {
    "label": "ValidateStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer* Buffer = UniformBuffers [ Slot ] ;)",
    "insertText": "ValidateStaticUniformBuffer(Buffer, Slot, LayoutHashes[BufferIndex])"
  },
  {
    "label": "ApplyFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFunction(BufferIndex, Buffer)"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} } } } template<TRHIContext,TRHIShader> void)",
    "insertText": "ApplyStaticUniformBuffers(TRHIContext* CommandContext, TRHIShader* Shader, const TArray<FRHIUniformBuffer*>& UniformBuffers)"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyStaticUniformBuffers(Shader, UniformBuffers, [CommandContext, Shader](int32 BufferIndex, FRHIUniformBuffer* Buffer) { CommandContext->RHISetShaderUniformBuffer(Shader, BufferIndex, Buffer); })"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} template<TResourceType> struct TResourceTypeStr { } ; template<> struct TResourceTypeStr<FRHISamplerState> { TCHAR String [ ] =)",
    "insertText": "TEXT(\"Sampler State\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TResourceTypeStr<FRHITexture> { TCHAR String [ ] =)",
    "insertText": "TEXT(\"Texture\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TResourceTypeStr<FRHIShaderResourceView> { TCHAR String [ ] =)",
    "insertText": "TEXT(\"Shader Resource View\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TResourceTypeStr<FRHIUnorderedAccessView> { TCHAR String [ ] =)",
    "insertText": "TEXT(\"Unordered Access View\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TResourceTypeStr<FRHIResourceCollection> { TCHAR String [ ] =)",
    "insertText": "TEXT(\"Resource Collection\")"
  },
  {
    "label": "EnumerateUniformBufferResources()",
    "kind": "Method",
    "detail": "Function (} ; template<TResourceType,TCallback> void)",
    "insertText": "EnumerateUniformBufferResources(const FRHIUniformBuffer* RESTRICT Buffer, int32 BufferIndex, const uint32* RESTRICT ResourceMap, TCallback&& Callback)"
  },
  {
    "label": "GetResourceTable()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRHIResource>* RESTRICT Resources = Buffer ->)",
    "insertText": "GetResourceTable().GetData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 BufferOffset = ResourceMap [ BufferIndex ] ;)",
    "insertText": "if(BufferOffset > 0)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const uint32* RESTRICT ResourceInfos =& ResourceMap [ BufferOffset ] ; uint32 ResourceInfo =* ResourceInfos + + ; do {)",
    "insertText": "checkSlow(FRHIResourceTableEntry::GetUniformBufferIndex(ResourceInfo) == BufferIndex)"
  },
  {
    "label": "GetResourceIndex()",
    "kind": "Method",
    "detail": "Function (const uint16 ResourceIndex =)",
    "insertText": "GetResourceIndex(ResourceInfo)"
  },
  {
    "label": "GetBindIndex()",
    "kind": "Method",
    "detail": "Function (const uint8 BindIndex =)",
    "insertText": "GetBindIndex(ResourceInfo)"
  },
  {
    "label": "TResourceType()",
    "kind": "Method",
    "detail": "Function (TResourceType* Resource = static_cast<)",
    "insertText": "TResourceType(Resources[ResourceIndex].GetReference())"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Resource, BindIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ResourceInfo =* ResourceInfos + + ; })",
    "insertText": "while(FRHIResourceTableEntry::GetUniformBufferIndex(ResourceInfo) == BufferIndex)"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (} } template<TBinder,TUniformBufferArrayType,TBitMaskType,bool bFullyBindless = false> void)",
    "insertText": "SetResourcesFromTables(TBinder&& Binder, FRHIShader const& Shader, TBitMaskType& DirtyUniformBuffers, TUniformBufferArrayType const& BoundUniformBuffers #if ENABLE_RHI_VALIDATION , RHIValidation::FTracker* Tracker #endif)"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (float CurrentTimeForTextureTimes =)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (uint32 DirtyBits = SRT . ResourceTableBits& DirtyUniformBuffers ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING&& ! ENABLE_RHI_VALIDATION if)",
    "insertText": "constexpr(bFullyBindless)"
  },
  {
    "label": "LowestBitMask()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "LowestBitMask(DirtyBits) & (-(int32)DirtyBits)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (const int32 BufferIndex =)",
    "insertText": "CountTrailingZeros(LowestBitMask)"
  },
  {
    "label": "FRHITexture()",
    "kind": "Method",
    "detail": "Function (DirtyBits ^ = LowestBitMask ; EnumerateUniformBufferResources<)",
    "insertText": "FRHITexture(BoundUniformBuffers[BufferIndex], BufferIndex, SRT.TextureMap.GetData(), [&](FRHITexture* Texture, uint8 Index) { Texture->SetLastRenderTime(CurrentTimeForTextureTimes); })"
  },
  {
    "label": "TBitMaskType()",
    "kind": "Method",
    "detail": "Function (} DirtyUniformBuffers =)",
    "insertText": "TBitMaskType(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (DirtyBits ^ = LowestBitMask ;)",
    "insertText": "check(BufferIndex < SRT.ResourceTableLayoutHashes.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer* Buffer = BoundUniformBuffers [ BufferIndex ] ; # if DO_CHECK)",
    "insertText": "if(!Buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Buffer->GetLayout().GetHash() != SRT.ResourceTableLayoutHashes[BufferIndex])"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBufferLayout const& BufferLayout = Buffer ->)",
    "insertText": "GetLayout()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString ResourcesString ;)",
    "insertText": "for(FRHIUniformBufferResource const& Resource : BufferLayout.Resources)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ResourcesString + =)",
    "insertText": "Printf(TEXT(\"%s%d\") , ResourcesString.Len() ? TEXT(\" \") : TEXT(\"\") , Resource.MemberType)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogRHICore, Fatal, TEXT(\"Uniform buffer bound to slot %u is not what the shader expected:\\n\") TEXT(\"\\tBound : Uniform Buffer[%s] with Hash[0x%08x]\\n\") TEXT(\"\\tExpected : Uniform Buffer[%s] with Hash[0x%08x]\\n\") TEXT(\"\\tShader Name : %s\\n\") TEXT(\"\\tLayout CB Size : %d\\n\") TEXT(\"\\tLayout Num Resources : %d\\n\") TEXT(\"\\tResource Types : %s\\n\") , BufferIndex , *BufferLayout.GetDebugName(), BufferLayout.GetHash() , *Shader.GetUniformBufferName(BufferIndex), SRT.ResourceTableLayoutHashes[BufferIndex] , Shader.GetShaderName() , BufferLayout.ConstantBufferSize , BufferLayout.Resources.Num() , *ResourcesString)"
  },
  {
    "label": "FRHITexture()",
    "kind": "Method",
    "detail": "Function (} # endif EnumerateUniformBufferResources<)",
    "insertText": "FRHITexture(Buffer, BufferIndex, SRT.TextureMap.GetData(), [&](FRHITexture* Texture, uint8 Index) { #if ENABLE_RHI_VALIDATION if (Tracker) { ERHIAccess Access = IsComputeShaderFrequency(Shader.GetFrequency()) ? ERHIAccess::SRVCompute : Shader.GetFrequency() == SF_Pixel ? ERHIAccess::SRVGraphicsPixel : ERHIAccess::SRVGraphicsNonPixel; Tracker->Assert(Texture->GetViewIdentity(0, 0, 0, 0, uint32(RHIValidation::EResourcePlane::Common), 1), Access); } #endif Texture->SetLastRenderTime(CurrentTimeForTextureTimes); Binder.SetTexture(Texture, Index); })"
  },
  {
    "label": "FRHIShaderResourceView()",
    "kind": "Method",
    "detail": "Function (EnumerateUniformBufferResources<)",
    "insertText": "FRHIShaderResourceView(Buffer, BufferIndex, SRT.ShaderResourceViewMap.GetData(), [&](FRHIShaderResourceView* SRV, uint8 Index) { #if ENABLE_RHI_VALIDATION if (Tracker) { ERHIAccess Access = IsComputeShaderFrequency(Shader.GetFrequency()) ? ERHIAccess::SRVCompute : Shader.GetFrequency() == SF_Pixel ? ERHIAccess::SRVGraphicsPixel : ERHIAccess::SRVGraphicsNonPixel; Tracker->Assert(SRV->GetViewIdentity(), Access); } if (GRHIValidationEnabled) { RHIValidation::ValidateShaderResourceView(&Shader, Index, SRV); } #endif Binder.SetSRV(SRV, Index); })"
  },
  {
    "label": "FRHIResourceCollection()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING EnumerateUniformBufferResources<)",
    "insertText": "FRHIResourceCollection(Buffer, BufferIndex, SRT.ResourceCollectionMap.GetData(), [&](FRHIResourceCollection* ResourceCollection, uint8 Index) { #if ENABLE_RHI_VALIDATION #endif Binder.SetResourceCollection(ResourceCollection, Index); })"
  },
  {
    "label": "FRHISamplerState()",
    "kind": "Method",
    "detail": "Function (# endif EnumerateUniformBufferResources<)",
    "insertText": "FRHISamplerState(Buffer, BufferIndex, SRT.SamplerMap.GetData(), [&](FRHISamplerState* Sampler, uint8 Index) { Binder.SetSampler(Sampler, Index); })"
  },
  {
    "label": "FRHIUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (EnumerateUniformBufferResources<)",
    "insertText": "FRHIUnorderedAccessView(Buffer, BufferIndex, SRT.UnorderedAccessViewMap.GetData(), [&](FRHIUnorderedAccessView* UAV, uint8 Index) { #if ENABLE_RHI_VALIDATION if (Tracker) { ERHIAccess Access = IsComputeShaderFrequency(Shader.GetFrequency()) ? ERHIAccess::UAVCompute : ERHIAccess::UAVGraphics; Tracker->AssertUAV(UAV, Access, Index); } #endif Binder.SetUAV(UAV, Index); })"
  },
  {
    "label": "SetFullyBindlessResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (} template<TBinder,TUniformBufferArrayType,TBitMaskType> void)",
    "insertText": "SetFullyBindlessResourcesFromTables(TBinder&& Binder, const FRHIShader& Shader, TBitMaskType& DirtyUniformBuffers, const TUniformBufferArrayType& BoundUniformBuffers #if ENABLE_RHI_VALIDATION , RHIValidation::FTracker* Tracker #endif)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (SetResourcesFromTables<TBinder,TUniformBufferArrayType,TBitMaskType,)",
    "insertText": "true(MoveTemp(Binder) , Shader , DirtyUniformBuffers , BoundUniformBuffers #if ENABLE_RHI_VALIDATION , Tracker #endif)"
  }
]