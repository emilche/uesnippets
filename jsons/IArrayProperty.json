[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "IArrayProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_IArrayProperty_h # define Alembic_Abc_IArrayProperty_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / ISampleSelector . h> # include<Alembic / Abc / IBaseProperty . h> # include<Alembic / Abc / ICompoundProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT IArrayProperty : public IBasePropertyT<AbcA::ArrayPropertyReaderPtr> { public : typedef IArrayProperty this_type ;)",
    "insertText": "IArrayProperty() : IBasePropertyT<AbcA::ArrayPropertyReaderPtr>()"
  },
  {
    "label": "IArrayProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IArrayProperty(const ICompoundProperty & iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument())"
  },
  {
    "label": "IArrayProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IArrayProperty(AbcA::ArrayPropertyReaderPtr iPtr, const Argument &iArg0 = Argument() ) : IBasePropertyT<AbcA::ArrayPropertyReaderPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "IArrayProperty()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "IArrayProperty(AbcA::ArrayPropertyReaderPtr iPtr, WrapExistingFlag iWrapFlag, const Argument &iArg0 = Argument() ) : IBasePropertyT<AbcA::ArrayPropertyReaderPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "IArrayProperty()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "IArrayProperty()"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "isScalarLike()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isScalarLike()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get(AbcA::ArraySamplePtr& oSample, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAs(void *oSample, AbcA::PlainOldDataType iPod, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAs(void *oSample, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getKey(AbcA::ArraySampleKey& oKey, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getDimensions(Util::Dimensions & oDim, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (ICompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(AbcA::CompoundPropertyReaderPtr iParentObject, const std::string &iName, ErrorHandler::Policy iParentPolicy, const Argument &iArg0, const Argument &iArg1)"
  }
]