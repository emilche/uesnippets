[
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "TSlotlessChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlotlessChildren"
  },
  {
    "label": "FDockingStackOptionalContent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDockingStackOptionalContent"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "FTabMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabMatcher"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ETabsToClose",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETabsToClose"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "FTabMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabMatcher"
  },
  {
    "label": "OnLastTabRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLastTabRemoved()"
  },
  {
    "label": "OnTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabClosed(const TSharedRef<SDockTab>& ClosedTab, SDockingNode::ELayoutModification RemovalMethod)"
  },
  {
    "label": "OnTabRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabRemoved( const FTabId& TabId )"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, const TSharedRef<FTabManager::FStack>& PersistentNode )"
  },
  {
    "label": "OpenTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTab(const TSharedRef<SDockTab>& InTab, int32 InsertAtLocation = INDEX_NONE, bool bKeepInactive = false)"
  },
  {
    "label": "AddTabWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTabWidget(const TSharedRef<SDockTab>& InTab, int32 AtLocation = INDEX_NONE, bool bKeepInactive = false)"
  },
  {
    "label": "AddSidebarTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSidebarTab(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "GetTabSidebarSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTabSidebarSizeCoefficient(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "SetTabSidebarSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabSidebarSizeCoefficient(const TSharedRef<SDockTab>& InTab, float InSizeCoefficient)"
  },
  {
    "label": "IsTabPinnedInSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabPinnedInSidebar(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "SetTabPinnedInSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabPinnedInSidebar(const TSharedRef<SDockTab>& InTab, bool bPinnedInSidebar)"
  },
  {
    "label": "MoveTabToSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTabToSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "RestoreTabFromSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreTabFromSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "RemoveClosedTabsWithName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClosedTabsWithName( FName InName )"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront( const TSharedRef<SDockTab>& TabToBringToFront )"
  },
  {
    "label": "SetNodeContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeContent( const TSharedRef<SWidget>& InContent, const FDockingStackOptionalContent& OptionalContent)"
  },
  {
    "label": "SetTabWellHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabWellHidden( bool bShouldHideTabWell )"
  },
  {
    "label": "ClearReservedSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearReservedSpace()"
  },
  {
    "label": "ReserveSpaceForWindowChrome()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveSpaceForWindowChrome(EChromeElement Element, bool bIncludePaddingForMenuBar, bool bOnlyMinorTabs)"
  },
  {
    "label": "CloseForegroundTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseForegroundTab()"
  },
  {
    "label": "CloseTabsToRightOfForegroundTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseTabsToRightOfForegroundTab(ETabsToClose TabsToClose)"
  },
  {
    "label": "CloseAllButForegroundTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllButForegroundTab(ETabsToClose TabsToClose)"
  },
  {
    "label": "TabWellRightClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "TabWellRightClicked( const FGeometry& TabWellGeometry, const FPointerEvent& MouseEvent )"
  },
  {
    "label": "OpenPersistentTab()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OpenPersistentTab( const FTabId& TabId, int32 OpenLocationAmongActiveTabs = INDEX_NONE )"
  },
  {
    "label": "ClosePersistentTab()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ClosePersistentTab( const FTabId& TabId )"
  },
  {
    "label": "RemovePersistentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePersistentTab( const FTabId& TabId )"
  },
  {
    "label": "ToggleTabWellVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTabWellVisibility()"
  },
  {
    "label": "MoveForegroundTabToSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveForegroundTabToSidebar()"
  },
  {
    "label": "UnhideTabWell()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "UnhideTabWell()"
  },
  {
    "label": "MakeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeContextMenu()"
  },
  {
    "label": "ShowCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowCross()"
  },
  {
    "label": "HideCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideCross()"
  },
  {
    "label": "BindTabCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindTabCommands()"
  },
  {
    "label": "ExecuteCloseMajorTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseMajorTabCommand()"
  },
  {
    "label": "CanExecuteCloseMajorTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseMajorTabCommand()"
  },
  {
    "label": "ExecuteCloseMinorTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseMinorTabCommand()"
  },
  {
    "label": "CanExecuteCloseMinorTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseMinorTabCommand()"
  },
  {
    "label": "ExecuteCloseFocusedTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseFocusedTabCommand()"
  },
  {
    "label": "CanExecuteCloseFocusedTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseFocusedTabCommand()"
  }
]