[
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "TSlotlessChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlotlessChildren"
  },
  {
    "label": "FDockingStackOptionalContent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDockingStackOptionalContent"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "FTabMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabMatcher"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ETabsToClose",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETabsToClose"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "FDockingStackOptionalContent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Animation / CurveSequence . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Docking / SDockingNode . h \" # define DEBUG_TAB_MANAGEMENT 0 class FUICommandList ; class FWeakWidgetPath ; class FWidgetPath ; class SDockingTabWell ; class SBorder ; template<ChildType> class TSlotlessChildren ; struct FDockingStackOptionalContent {)",
    "insertText": "FDockingStackOptionalContent() : ContentLeft(SNullWidget::NullWidget) , ContentRight(SNullWidget::NullWidget) , TitleBarContentRight(SNullWidget::NullWidget)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> ContentLeft ; TSharedRef<SWidget> ContentRight ; TSharedRef<SWidget> TitleBarContentRight ; } ; class SDockingTabStack : public SDockingNode { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDockingTabStack) : _IsDocumentArea(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, IsDocumentArea ) SLATE_END_ARGS() virtual Type GetNodeType()"
  },
  {
    "label": "OnTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabClosed(const TSharedRef<SDockTab>& ClosedTab, SDockingNode::ELayoutModification RemovalMethod)"
  },
  {
    "label": "OnTabRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabRemoved(const FTabId& TabId)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FTabManager::FStack>& PersistentNode)"
  },
  {
    "label": "OpenTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTab(const TSharedRef<SDockTab>& InTab, int32 InsertAtLocation = INDEX_NONE, bool bKeepInactive = false)"
  },
  {
    "label": "AddTabWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTabWidget(const TSharedRef<SDockTab>& InTab, int32 AtLocation = INDEX_NONE, bool bKeepInactive = false)"
  },
  {
    "label": "AddSidebarTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSidebarTab(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "GetTabSidebarSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTabSidebarSizeCoefficient(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "SetTabSidebarSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabSidebarSizeCoefficient(const TSharedRef<SDockTab>& InTab, float InSizeCoefficient)"
  },
  {
    "label": "IsTabPinnedInSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabPinnedInSidebar(const TSharedRef<SDockTab>& InTab)"
  },
  {
    "label": "SetTabPinnedInSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabPinnedInSidebar(const TSharedRef<SDockTab>& InTab, bool bPinnedInSidebar)"
  },
  {
    "label": "CanMoveTabToSideBar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveTabToSideBar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "MoveTabToSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTabToSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "RestoreTabFromSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreTabFromSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "GetTabs()",
    "kind": "Method",
    "detail": "Function (const TSlotlessChildren<SDockTab>&)",
    "insertText": "GetTabs()"
  },
  {
    "label": "HasTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTab(const struct FTabMatcher& TabMatcher)"
  },
  {
    "label": "GetTabStackGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetTabStackGeometry()"
  },
  {
    "label": "RemoveClosedTabsWithName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClosedTabsWithName(FName InName)"
  },
  {
    "label": "IsShowingLiveTabs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingLiveTabs()"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(const TSharedRef<SDockTab>& TabToBringToFront)"
  },
  {
    "label": "SetNodeContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeContent(const TSharedRef<SWidget>& InContent, const FDockingStackOptionalContent& OptionalContent)"
  },
  {
    "label": "OnUserAttemptingDock()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnUserAttemptingDock(SDockingNode::RelativeDirection Direction, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetAllChildTabs()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SDockTab>>)",
    "insertText": "GetAllChildTabs()"
  },
  {
    "label": "GetNumTabs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTabs()"
  },
  {
    "label": "GetSizeRule()",
    "kind": "Method",
    "detail": "Function (SSplitter::ESizeRule)",
    "insertText": "GetSizeRule()"
  },
  {
    "label": "CanHideTabWell()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideTabWell()"
  },
  {
    "label": "SetTabWellHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabWellHidden(bool bShouldHideTabWell)"
  },
  {
    "label": "IsTabWellHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabWellHidden()"
  },
  {
    "label": "GatherPersistentLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayoutNode>)",
    "insertText": "GatherPersistentLayout()"
  },
  {
    "label": "ClearReservedSpace()",
    "kind": "Method",
    "detail": "Function (enum class EChromeElement { Icon,Controls } ; void)",
    "insertText": "ClearReservedSpace()"
  },
  {
    "label": "ReserveSpaceForWindowChrome()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveSpaceForWindowChrome(EChromeElement Element, bool bIncludePaddingForMenuBar, bool bOnlyMinorTabs)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "CloseTabsToRightOfForegroundTab()",
    "kind": "Method",
    "detail": "Function (enum ETabsToClose { CloseDocumentTabs,CloseDocumentAndMajorTabs,CloseAllTabs } ; void)",
    "insertText": "CloseTabsToRightOfForegroundTab(ETabsToClose TabsToClose)"
  },
  {
    "label": "CloseAllButForegroundTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllButForegroundTab(ETabsToClose TabsToClose)"
  },
  {
    "label": "TabWellRightClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "TabWellRightClicked(const FGeometry& TabWellGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CleanUpNodes()",
    "kind": "Method",
    "detail": "Function (SDockingNode::ECleanupRetVal)",
    "insertText": "CleanUpNodes()"
  },
  {
    "label": "OpenPersistentTab()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OpenPersistentTab(const FTabId& TabId, int32 OpenLocationAmongActiveTabs = INDEX_NONE)"
  },
  {
    "label": "ClosePersistentTab()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ClosePersistentTab(const FTabId& TabId)"
  },
  {
    "label": "RemovePersistentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePersistentTab(const FTabId& TabId)"
  },
  {
    "label": "SetParentNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentNode(TSharedRef<class SDockingSplitter> InParent)"
  },
  {
    "label": "IsContentEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsContentEnabled()"
  },
  {
    "label": "CreateNewTabStackBySplitting()",
    "kind": "Method",
    "detail": "Function (private : TArray<FTabManager::FTab> Tabs ; TSharedRef<SDockingTabStack>)",
    "insertText": "CreateNewTabStackBySplitting(const SDockingNode::RelativeDirection Direction)"
  },
  {
    "label": "GetContentAreaBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetContentAreaBrush()"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "GetTabWellBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTabWellBrush()"
  },
  {
    "label": "GetTabWellVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTabWellVisibility()"
  },
  {
    "label": "GetUnhideButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetUnhideButtonVisibility()"
  },
  {
    "label": "ToggleTabWellVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTabWellVisibility()"
  },
  {
    "label": "MoveForegroundTabToSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveForegroundTabToSidebar()"
  },
  {
    "label": "UnhideTabWell()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "UnhideTabWell()"
  },
  {
    "label": "CanCloseForegroundTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseForegroundTab()"
  },
  {
    "label": "CanCloseTabsToRightOfForegroundTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseTabsToRightOfForegroundTab()"
  },
  {
    "label": "CanCloseAllButForegroundTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseAllButForegroundTab()"
  },
  {
    "label": "CanMoveForegroundTabToSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveForegroundTabToSidebar()"
  },
  {
    "label": "IsTabAllowedInSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabAllowedInSidebar(TSharedPtr<SDockTab> Tab)"
  },
  {
    "label": "MakeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SDockingTabWell> TabWell ; SHorizontalBox::FSlot* InlineContentAreaLeft ; SHorizontalBox::FSlot* InlineContentAreaRight ; SVerticalBox::FSlot* TitleBarSlot ; TSharedPtr<SWidget> TitleBarContent ; TSharedPtr<SBorder> ContentSlot ; FOverlayManagement OverlayManagement ; TSharedRef<SWidget>)",
    "insertText": "MakeContextMenu()"
  },
  {
    "label": "ShowCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowCross()"
  },
  {
    "label": "HideCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideCross()"
  },
  {
    "label": "GetTabWellScale()",
    "kind": "Method",
    "detail": "Function (bool bIsDocumentArea ; FCurveSequence ShowHideTabWell ; FVector2D)",
    "insertText": "GetTabWellScale()"
  },
  {
    "label": "GetUnhideTabWellButtonScale()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetUnhideTabWellButtonScale()"
  },
  {
    "label": "GetUnhideTabWellButtonOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetUnhideTabWellButtonOpacity()"
  },
  {
    "label": "GetTabStackBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTabStackBorderImage()"
  },
  {
    "label": "GetMaximizeSpacerVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetMaximizeSpacerVisibility()"
  },
  {
    "label": "BindTabCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindTabCommands()"
  },
  {
    "label": "ExecuteCloseMajorTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseMajorTabCommand()"
  },
  {
    "label": "CanExecuteCloseMajorTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseMajorTabCommand()"
  },
  {
    "label": "ExecuteCloseMinorTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseMinorTabCommand()"
  },
  {
    "label": "CanExecuteCloseMinorTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseMinorTabCommand()"
  },
  {
    "label": "ExecuteCloseFocusedTabCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCloseFocusedTabCommand()"
  },
  {
    "label": "CanExecuteCloseFocusedTabCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCloseFocusedTabCommand()"
  },
  {
    "label": "OnResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResized()"
  },
  {
    "label": "ShowPersistentTabs()",
    "kind": "Method",
    "detail": "Function (# if DEBUG_TAB_MANAGEMENT FString)",
    "insertText": "ShowPersistentTabs()"
  },
  {
    "label": "FTabMatcher()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<FUICommandList> ActionList ; bool bShowingTitleBarArea ; } ; struct FTabMatcher {)",
    "insertText": "FTabMatcher(const FTabId& InTabId, ETabState::Type InTabState = static_cast<ETabState::Type>(ETabState::ClosedTab | ETabState::OpenedTab | ETabState::SidebarTab), const bool InTreatIndexNoneAsWildcard = true ) : TabIdToMatch( InTabId ) , RequiredTabState( InTabState ) , TreatIndexNoneAsWildcard( InTreatIndexNoneAsWildcard)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FTabManager::FTab& Candidate)"
  }
]