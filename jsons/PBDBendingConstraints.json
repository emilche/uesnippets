[
  {
    "label": "FPBDBendingConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDBendingConstraints"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDBendingConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FPBDBendingConstraints : public FPBDBendingConstraintsBase { typedef FPBDBendingConstraintsBase Base ; public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDBendingConstraints(const FSolverParticlesRange& InParticles, TArray<TVec4<int32>>&& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints = false) : Base( InParticles, MoveTemp(InConstraints), WeightMaps.FindRef(GetBendingElementStiffnessString(PropertyCollection, BendingElementStiffnessName.ToString())), WeightMaps.FindRef(GetBucklingRatioString(PropertyCollection, BucklingRatioName.ToString())), WeightMaps.FindRef(GetBucklingStiffnessString(PropertyCollection, BucklingStiffnessName.ToString())), GetRestAngleMapFromCollection(WeightMaps, PropertyCollection), FSolverVec2(GetWeightedFloatBendingElementStiffness(PropertyCollection, 1.f)), FSolverVec2(GetWeightedFloatBucklingRatio(PropertyCollection, 0.f)), FSolverVec2(GetWeightedFloatBucklingStiffness(PropertyCollection, 1.f)), GetRestAngleValueFromCollection(PropertyCollection), (ERestAngleConstructionType)GetRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles), bTrimKinematicConstraints) , BendingElementStiffnessIndex(PropertyCollection) , BucklingRatioIndex(PropertyCollection) , BucklingStiffnessIndex(PropertyCollection) , FlatnessRatioIndex(PropertyCollection) , RestAngleIndex(PropertyCollection) , RestAngleTypeIndex(PropertyCollection)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "FPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDBendingConstraints(const FSolverParticles& InParticles, int32 InParticleOffset, int32 InParticleCount, TArray<TVec4<int32>>&& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints = false) : Base( InParticles, InParticleOffset, InParticleCount, MoveTemp(InConstraints), WeightMaps.FindRef(GetBendingElementStiffnessString(PropertyCollection, BendingElementStiffnessName.ToString())), WeightMaps.FindRef(GetBucklingRatioString(PropertyCollection, BucklingRatioName.ToString())), WeightMaps.FindRef(GetBucklingStiffnessString(PropertyCollection, BucklingStiffnessName.ToString())), GetRestAngleMapFromCollection(WeightMaps, PropertyCollection), FSolverVec2(GetWeightedFloatBendingElementStiffness(PropertyCollection, 1.f)), FSolverVec2(GetWeightedFloatBucklingRatio(PropertyCollection, 0.f)), FSolverVec2(GetWeightedFloatBucklingStiffness(PropertyCollection, 1.f)), GetRestAngleValueFromCollection(PropertyCollection), (ERestAngleConstructionType)GetRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles), bTrimKinematicConstraints) , BendingElementStiffnessIndex(PropertyCollection) , BucklingRatioIndex(PropertyCollection) , BucklingStiffnessIndex(PropertyCollection) , FlatnessRatioIndex(PropertyCollection) , RestAngleIndex(PropertyCollection) , RestAngleTypeIndex(PropertyCollection)"
  },
  {
    "label": "FPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDBendingConstraints(const FSolverParticles& InParticles, int32 ParticleOffset, int32 ParticleCount, TArray<TVec4<int32>>&& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& BucklingRatioMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessMultipliers, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType, bool bTrimKinematicConstraints = false) : Base( InParticles, ParticleOffset, ParticleCount, MoveTemp(InConstraints), StiffnessMultipliers, BucklingRatioMultipliers, BucklingStiffnessMultipliers, RestAngleMap, InStiffness, InBucklingRatio, InBucklingStiffness, RestAngleValue, RestAngleConstructionType, bTrimKinematicConstraints) , BendingElementStiffnessIndex(ForceInit) , BucklingRatioIndex(ForceInit) , BucklingStiffnessIndex(ForceInit) , FlatnessRatioIndex(ForceInit) , RestAngleIndex(ForceInit) , RestAngleTypeIndex(ForceInit)"
  },
  {
    "label": "FPBDBendingConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDBendingConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} using Base::SetProperties ; void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "GetConstraintsPerColorStartIndex()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetConstraintsPerColorStartIndex()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& InParticles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverReal ExpStiffnessValue, const FSolverReal ExpBucklingValue)"
  },
  {
    "label": "GetRestAngleMapFromCollection()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRealSingle>)",
    "insertText": "GetRestAngleMapFromCollection(const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "ConstructionType()",
    "kind": "Method",
    "detail": "Function (const ERestAngleConstructionType)",
    "insertText": "ConstructionType(ERestAngleConstructionType)GetRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return TConstArrayView<)",
    "insertText": "FRealSingle()"
  },
  {
    "label": "GetRestAngleValueFromCollection()",
    "kind": "Method",
    "detail": "Function (} } FSolverVec2)",
    "insertText": "GetRestAngleValueFromCollection(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FSolverVec2()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return)",
    "insertText": "FSolverVec2(0.f)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (} } using Base::Constraints ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::Stiffness ; using Base::BucklingRatioWeighted ; using Base::BucklingStiffness ; TArray<int32> ConstraintsPerColorStartIndex ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(BendingElementStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(BucklingRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(BucklingStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(FlatnessRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(RestAngle, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(RestAngleType, int32)"
  }
]