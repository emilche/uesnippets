[
  {
    "label": "FSchematicGraphGroupNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphGroupNode"
  },
  {
    "label": "ANIMATIONEDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMATIONEDITORWIDGETS_API"
  },
  {
    "label": "FSchematicGraphModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchematicGraphModel"
  },
  {
    "label": "SSchematicGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSchematicGraphNode"
  },
  {
    "label": "SCHEMATICGRAPHNODE_BODY()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Framework / Animation / AnimatedAttribute . h \" # include \" SchematicGraphTag . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # define)",
    "insertText": "SCHEMATICGRAPHNODE_BODY(ClassName, SuperClass) \\ SCHEMATICGRAPHELEMENT_BODY(ClassName, SuperClass, FSchematicGraphNode)"
  },
  {
    "label": "SCHEMATICGRAPHELEMENT_BODY_BASE()",
    "kind": "Method",
    "detail": "Function (class FSchematicGraphNode : public TSharedFromThis<FSchematicGraphNode> { public :)",
    "insertText": "SCHEMATICGRAPHELEMENT_BODY_BASE(FSchematicGraphNode) FSchematicGraphNode()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "GetParentNodeGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetParentNodeGuid()"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (FSchematicGraphNode*)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "GetRootNodeGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetRootNodeGuid()"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (const FSchematicGraphNode*)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "IsRootNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootNode()"
  },
  {
    "label": "GetGroupNode()",
    "kind": "Method",
    "detail": "Function (} FSchematicGraphGroupNode*)",
    "insertText": "GetGroupNode()"
  },
  {
    "label": "GetNumChildNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChildNodes()"
  },
  {
    "label": "GetChildNodeGuids()",
    "kind": "Method",
    "detail": "Function (} const TArray<FGuid>&)",
    "insertText": "GetChildNodeGuids()"
  },
  {
    "label": "GetChildNode()",
    "kind": "Method",
    "detail": "Function (FSchematicGraphNode*)",
    "insertText": "GetChildNode(int32 InChildNodeIndex)"
  },
  {
    "label": "GetVisibilityForChildNode()",
    "kind": "Method",
    "detail": "Function (TOptional<ESchematicGraphVisibility::Type>)",
    "insertText": "GetVisibilityForChildNode(const FGuid& InChildGuid)"
  },
  {
    "label": "GetVisibilityForChildNode()",
    "kind": "Method",
    "detail": "Function (TOptional<ESchematicGraphVisibility::Type>)",
    "insertText": "GetVisibilityForChildNode(const FSchematicGraphNode* InChildNode)"
  },
  {
    "label": "GetPositionForChildNode()",
    "kind": "Method",
    "detail": "Function (} TOptional<FVector2d>)",
    "insertText": "GetPositionForChildNode(const FGuid& InChildGuid)"
  },
  {
    "label": "GetPositionForChildNode()",
    "kind": "Method",
    "detail": "Function (TOptional<FVector2d>)",
    "insertText": "GetPositionForChildNode(const FSchematicGraphNode* InChildNode)"
  },
  {
    "label": "GetScaleForChildNode()",
    "kind": "Method",
    "detail": "Function (} TOptional<float>)",
    "insertText": "GetScaleForChildNode(const FGuid& InChildGuid)"
  },
  {
    "label": "GetScaleForChildNode()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetScaleForChildNode(const FSchematicGraphNode* InChildNode)"
  },
  {
    "label": "GetInteractivityForChildNode()",
    "kind": "Method",
    "detail": "Function (} TOptional<bool>)",
    "insertText": "GetInteractivityForChildNode(const FGuid& InChildGuid)"
  },
  {
    "label": "GetInteractivityForChildNode()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetInteractivityForChildNode(const FSchematicGraphNode* InChildNode)"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (bIsSelected = bSelected ; } const FText&)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (Label = InLabel ; } FVector2d)",
    "insertText": "GetPosition()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(const FVector2d& InPosition)"
  },
  {
    "label": "GetPositionOffset()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ; } FVector2d)",
    "insertText": "GetPositionOffset()"
  },
  {
    "label": "GetScaleOffset()",
    "kind": "Method",
    "detail": "Function (PositionOffset = InPositionOffset ; } float)",
    "insertText": "GetScaleOffset()"
  },
  {
    "label": "GetNumLayers()",
    "kind": "Method",
    "detail": "Function (ScaleOffset = InScaleOffset ; } int32)",
    "insertText": "GetNumLayers()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetColor(int32 InLayerIndex)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (ESchematicGraphVisibility::Type)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(ESchematicGraphVisibility::Type InVisibility)"
  },
  {
    "label": "IsInteractive()",
    "kind": "Method",
    "detail": "Function (Visibility = InVisibility ; } bool)",
    "insertText": "IsInteractive()"
  },
  {
    "label": "IsDragSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragSupported()"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (bDragSupported = InDragSupported ; } FReply)",
    "insertText": "OnClicked(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter()"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave()"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragOver()"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave()"
  },
  {
    "label": "GetDragDropDecoratorLabel()",
    "kind": "Method",
    "detail": "Function (; FString)",
    "insertText": "GetDragDropDecoratorLabel()"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (template<TagType = FSchematicGraphTag> TagType*)",
    "insertText": "AddTag(bool bNotify = true)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSchematicGraphTag> NewTag =)",
    "insertText": "MakeShareable(new TagType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewTag -> Node = this ; Tags .)",
    "insertText": "Add(NewTag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TagByGuid .)",
    "insertText": "Add(NewTag->GetGuid(), NewTag)"
  },
  {
    "label": "NotifyTagAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTagAdded(NewTag)"
  },
  {
    "label": "TagType()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "TagType(NewTag.Get())"
  },
  {
    "label": "FindTag()",
    "kind": "Method",
    "detail": "Function (} template<TagType = FSchematicGraphTag> const TagType*)",
    "insertText": "FindTag(const FGuid& InTagGuid = FGuid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(!InTagGuid.IsValid())"
  },
  {
    "label": "TagType()",
    "kind": "Method",
    "detail": "Function (const FSchematicGraphNode* ConstThis = this ; return const_cast<)",
    "insertText": "TagType(ConstThis->FindTag<TagType>(InTagGuid))"
  },
  {
    "label": "FindTagChecked()",
    "kind": "Method",
    "detail": "Function (} template<TagType = FSchematicGraphTag> const TagType*)",
    "insertText": "FindTagChecked(const FGuid& InTagGuid)"
  },
  {
    "label": "TagType()",
    "kind": "Method",
    "detail": "Function (const FSchematicGraphNode* ConstThis = this ; return const_cast<)",
    "insertText": "TagType(ConstThis->FindTagChecked<TagType>(InTagGuid))"
  },
  {
    "label": "RemoveTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveTag(const FGuid& InTagGuid)"
  },
  {
    "label": "GetTags()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FSchematicGraphTag>>&)",
    "insertText": "GetTags()"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (FSchematicGraphModel* Model = nullptr ; FGuid Guid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (FText Label =)",
    "insertText": "FText()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (FGuid ParentNodeGuid =)",
    "insertText": "FGuid()"
  },
  {
    "label": "SCHEMATICGRAPHNODE_BODY()",
    "kind": "Method",
    "detail": "Function (ESchematicGraphVisibility::Type Visibility = ESchematicGraphVisibility::Visible ; bool bDragSupported = false ; float ScaledUp = 1 . 2 5 ; float ScaledDown = 0 . 7 5 ; TArray<TSharedPtr<FSchematicGraphTag>> Tags ; TMap<FGuid,TSharedPtr<FSchematicGraphTag>> TagByGuid ; class FSchematicGraphModel ; } ; class FSchematicGraphGroupNode : public FSchematicGraphNode { public :)",
    "insertText": "SCHEMATICGRAPHNODE_BODY(FSchematicGraphGroupNode, FSchematicGraphNode) FSchematicGraphGroupNode()"
  },
  {
    "label": "FSchematicGraphGroupNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSchematicGraphGroupNode()"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "IsExpanding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpanding()"
  },
  {
    "label": "IsCollapsing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollapsing()"
  },
  {
    "label": "GetExpansionState()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetExpansionState()"
  },
  {
    "label": "SetExpanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpanded(bool InExpanded, bool bAutoCloseParentGroups = false)"
  },
  {
    "label": "GetExpansionColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetExpansionColor()"
  },
  {
    "label": "GetExpansionRadius()",
    "kind": "Method",
    "detail": "Function (ExpansionColor = InExpansionColor ; } float)",
    "insertText": "GetExpansionRadius()"
  },
  {
    "label": "GetDelayDuration()",
    "kind": "Method",
    "detail": "Function (ExpansionRadius = InExpansionRadius ; } float)",
    "insertText": "GetDelayDuration(bool bEnter)"
  },
  {
    "label": "SetDelayDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelayDuration(bool bEnter, float InDelayDuration)"
  },
  {
    "label": "GetAnimationSettings()",
    "kind": "Method",
    "detail": "Function (} protected : const TEasingAttributeInterpolator<float>::FSettings&)",
    "insertText": "GetAnimationSettings()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (float ExpansionRadius = 6 0 . f ; FLinearColor ExpansionColor = FLinearColor::White*)",
    "insertText": "FLinearColor(1.f, 1.f, 1.f, 0.5f)"
  },
  {
    "label": "SCHEMATICGRAPHNODE_BODY()",
    "kind": "Method",
    "detail": "Function (float EnterDelayDuration = 0 . 2 5 f ; float LeaveDelayDuration = 0 . 7 5 f ; TOptional<bool> LastExpansionState ; TEasingAttributeInterpolator<float>::FSettings AnimationSettings ; TSharedPtr<TAnimatedAttribute<float>> ExpansionState ; class SSchematicGraphNode ; } ; class FSchematicGraphAutoGroupNode : public FSchematicGraphGroupNode { public :)",
    "insertText": "SCHEMATICGRAPHNODE_BODY(FSchematicGraphAutoGroupNode, FSchematicGraphGroupNode) virtual const FText& GetLabel()"
  }
]