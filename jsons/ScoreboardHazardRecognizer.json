[
  {
    "label": "InstrItineraryData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrItineraryData"
  },
  {
    "label": "ScheduleDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAG"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "ScoreboardHazardRecognizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScoreboardHazardRecognizer"
  },
  {
    "label": "Scoreboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scoreboard"
  },
  {
    "label": "Scoreboard()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SCOREBOARDHAZARDRECOGNIZER_H # define LLVM_CODEGEN_SCOREBOARDHAZARDRECOGNIZER_H # include \" llvm / CodeGen / ScheduleHazardRecognizer . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<cstring> namespace llvm { class InstrItineraryData ; class ScheduleDAG ; class SUnit ; class ScoreboardHazardRecognizer : public ScheduleHazardRecognizer { class Scoreboard { unsigned* Data ; size_t Depth ; size_t Head ; public :)",
    "insertText": "Scoreboard():Data(nullptr), Depth(0), Head(0)"
  },
  {
    "label": "Scoreboard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Scoreboard()"
  },
  {
    "label": "getDepth()",
    "kind": "Method",
    "detail": "Function (delete [ ] Data ; } size_t)",
    "insertText": "getDepth()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Depth && !(Depth & (Depth - 1)) && \"Scoreboard was not initialized properly!\")"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(size_t d = 1)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (Depth = d ; Data = new unsigned [ Depth ] ; })",
    "insertText": "memset(Data, 0, Depth * sizeof(Data[0]))"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (Head = 0 ; } void)",
    "insertText": "advance()"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Head(Head + 1) & (Depth-1)"
  },
  {
    "label": "recede()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recede()"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Head(Head - 1) & (Depth-1)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "ScoreboardHazardRecognizer()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef NDEBUG const char* DebugType ; # endif const InstrItineraryData* ItinData ; const ScheduleDAG* DAG ; unsigned IssueWidth ; unsigned IssueCount ; Scoreboard ReservedScoreboard ; Scoreboard RequiredScoreboard ; public :)",
    "insertText": "ScoreboardHazardRecognizer(const InstrItineraryData *ItinData, const ScheduleDAG *DAG, const char *ParentDebugType = \"\")"
  },
  {
    "label": "atIssueLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "atIssueLimit()"
  },
  {
    "label": "getHazardType()",
    "kind": "Method",
    "detail": "Function (HazardType)",
    "insertText": "getHazardType(SUnit *SU, int Stalls)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "EmitInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstruction(SUnit *SU)"
  },
  {
    "label": "AdvanceCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceCycle()"
  },
  {
    "label": "RecedeCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecedeCycle()"
  }
]