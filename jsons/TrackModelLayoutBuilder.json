[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FMovieSceneChannelHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelHandle"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "FHierarchicalModelListRefresher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalModelListRefresher"
  },
  {
    "label": "FListData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListData"
  },
  {
    "label": "FTrackModelLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackModelLayoutBuilder"
  },
  {
    "label": "FHierarchicalModelListRefresher()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / PlatformCrt . h \" # include \" ISectionLayoutBuilder . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / ViewModels / ViewModelIterators . h \" # include \" Templates / Invoke . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" class FText ; class ISequencerSection ; namespace UE::Sequencer { class FViewModel ; } struct FMovieSceneChannelHandle ; namespace UE { namespace Sequencer { class FSectionModel ; struct FHierarchicalModelListRefresher {)",
    "insertText": "FHierarchicalModelListRefresher()"
  },
  {
    "label": "FHierarchicalModelListRefresher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHierarchicalModelListRefresher(TSharedPtr<FViewModel> InRoot, FViewModelChildren InExistingChildren)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(TSharedPtr<FViewModel> Item)"
  },
  {
    "label": "RecurseInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecurseInto(TSharedPtr<FViewModel> Item, FViewModelChildren InExistingChildren)"
  },
  {
    "label": "GetCurrentParent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetCurrentParent()"
  },
  {
    "label": "GetCurrentType()",
    "kind": "Method",
    "detail": "Function (EViewModelListType)",
    "insertText": "GetCurrentType()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pop()"
  },
  {
    "label": "FindItem()",
    "kind": "Method",
    "detail": "Function (template<ModelType,Predicate> TSharedPtr<ModelType>)",
    "insertText": "FindItem(Predicate&& InPredicate)"
  },
  {
    "label": "ModelType()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<ModelType> Model = FindExistingItem<)",
    "insertText": "ModelType(InPredicate)"
  },
  {
    "label": "FindExistingItem()",
    "kind": "Method",
    "detail": "Function (} template<ModelType,Predicate> TSharedPtr<ModelType>)",
    "insertText": "FindExistingItem(Predicate&& InPredicate)"
  },
  {
    "label": "FListData()",
    "kind": "Method",
    "detail": "Function (struct FListData {)",
    "insertText": "FListData(TSharedPtr<FViewModel> InParent, const FViewModelChildren& InExistingChildren)"
  },
  {
    "label": "FTrackModelLayoutBuilder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel> Parent ; FViewModelChildren Children ; TSharedPtr<FViewModel> AttachTail ; } ; TArray<FListData,TInlineAllocator<8>> ListData ; TArray<TArray<FScopedViewModelListHead>> RecycledLists ; } ; class FTrackModelLayoutBuilder : private ISectionLayoutBuilder { public :)",
    "insertText": "FTrackModelLayoutBuilder(TSharedPtr<FViewModel> InSharedOutlinerRoot)"
  },
  {
    "label": "FTrackModelLayoutBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTrackModelLayoutBuilder()"
  },
  {
    "label": "RefreshLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshLayout(TSharedPtr<FSectionModel> InSection)"
  },
  {
    "label": "PushCategory()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PushCategory(FName CategoryName, const FText& DisplayLabel, FGetMovieSceneTooltipText GetGroupTooltipTextDelegate, TFunction<TSharedPtr<UE::Sequencer::FCategoryModel>(FName, const FText&)> OptionalFactory)"
  },
  {
    "label": "SetTopLevelChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTopLevelChannel(const FMovieSceneChannelHandle& Channel, TFunction<TSharedPtr<UE::Sequencer::FChannelModel>(FName, const FSectionModel&, const FMovieSceneChannelHandle&)> OptionalFactory)"
  },
  {
    "label": "AddChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChannel(const FMovieSceneChannelHandle& Channel, TFunction<TSharedPtr<UE::Sequencer::FChannelModel>(FName, const FSectionModel&, const FMovieSceneChannelHandle&)> OptionalFactory)"
  },
  {
    "label": "PopCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopCategory()"
  },
  {
    "label": "AddChannel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddChannel(const FMovieSceneChannelHandle& Channel, bool bIsTopLevel, TFunction<TSharedPtr<UE::Sequencer::FChannelModel>(FName, const FSectionModel&, const FMovieSceneChannelHandle&)> OptionalFactory)"
  }
]