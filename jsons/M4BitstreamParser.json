[
  {
    "label": "M4Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4Decoder"
  },
  {
    "label": "M4PictureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "M4PictureType"
  },
  {
    "label": "M4BitstreamParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4BitstreamParser"
  },
  {
    "label": "M4BitstreamCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4BitstreamCache"
  },
  {
    "label": "M4_CLIP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" M4Global . h \" # include \" M4Bitstream . h \" # include \" M4VlcDecoder . h \" # include \" M4BitstreamHeaderInfo . h \" namespace vdecmpeg4 { # define)",
    "insertText": "M4_CLIP(X,A) (X > A) ? (A) : (X) #define M4_ABS(X) (((X)>0)?(X):-(X))"
  },
  {
    "label": "M4BitstreamParser()",
    "kind": "Method",
    "detail": "Function (enum M4PictureType { M4PIC_I_VOP = 0,M4PIC_P_VOP,M4PIC_B_VOP,M4PIC_S_VOP,M4PIC_VOL,} ; class M4BitstreamParser { public :)",
    "insertText": "M4BitstreamParser()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "init(M4Decoder* decoder, M4Bitstream* bitstream)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "reset()"
  },
  {
    "label": "initFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFrame(int16 width, int16 height)"
  },
  {
    "label": "parseMPEG4ES()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "parseMPEG4ES(M4PictureType& pictureType)"
  },
  {
    "label": "findNextStartCode()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "findNextStartCode(uint32& absolutePos)"
  },
  {
    "label": "getCbpCIntra()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "getCbpCIntra()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 index ;)",
    "insertText": "while((index = mBitstream->show(9)) == 1)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (mBitstream ->)",
    "insertText": "skip(9)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (} index>> = 3 ; mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabCbpCIntra[index]))"
  },
  {
    "label": "getCbpCInter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "getCbpCInter()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 index ;)",
    "insertText": "while((index = M4_CLIP(mBitstream->show(9), 256)) == 1)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (} mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabCbpCInter[index]))"
  },
  {
    "label": "getMBType()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "getMBType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint8 type ;)",
    "insertText": "for(type = 0; type <= 3; type++)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "M4CHECK(type <= 3)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (uint32 index = mBitstream ->)",
    "insertText": "show(6)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabCbpY[index]))"
  },
  {
    "label": "VLC_CODE()",
    "kind": "Method",
    "detail": "Function (uint32 cbpy =)",
    "insertText": "VLC_CODE(mVLCDecoder.mTabCbpY[index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(quant < 9)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(quant < 25)"
  },
  {
    "label": "getDCSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "getDCSize(bool luminance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 code,i ;)",
    "insertText": "if(luminance)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (code = mBitstream ->)",
    "insertText": "show(11)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (mBitstream ->)",
    "insertText": "skip(i)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (} code>> = 1 ; } mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mDCLumTab[code]))"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (} else { code = mBitstream ->)",
    "insertText": "show(12)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} code>> = 1 ; })",
    "insertText": "return(int32)mBitstream->getBits(2)"
  },
  {
    "label": "getDCDiff()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "getDCDiff(uint32 dc_size)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(dc_size < 32U)"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "code(int32)mBitstream->getBits(dc_size)"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (int32 msb =)",
    "insertText": "code(dc_size - 1)"
  },
  {
    "label": "decodeInterBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "decodeInterBlock(int16* block)"
  },
  {
    "label": "getInterBlockNoAsm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getInterBlockNoAsm(block)"
  },
  {
    "label": "decodeIntraBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "decodeIntraBlock(int16* block, uint32 direction, uint32 startCoeff)"
  },
  {
    "label": "getIntraBlockNoAsm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getIntraBlockNoAsm(block, direction, startCoeff)"
  },
  {
    "label": "getQuantiserChange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "getQuantiserChange()"
  },
  {
    "label": "getCoeffIntraNoAsm()",
    "kind": "Method",
    "detail": "Function (const uint8* scan = mScanTable [ direction ] ; int32 last,run ; do { int32 level = mVLCDecoder .)",
    "insertText": "getCoeffIntraNoAsm(run, last, *mBitstream)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK((level >= -2047) && (level <= 2047) && \"getIntraBlock: intra_overflow!!\")"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(run != -1 && \"getIntraBlock: invalid run\")"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(run >= 0 && \"getIntraBlock: invalid run\")"
  },
  {
    "label": "startCoeff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startCoeff(uint32)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(startCoeff<64)"
  },
  {
    "label": "startCoeff()",
    "kind": "Method",
    "detail": "Function (block [ scan [)",
    "insertText": "startCoeff(int16)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (startCoeff + + ; })",
    "insertText": "while(!last)"
  },
  {
    "label": "getInterBlockNoAsm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getInterBlockNoAsm(int16* block)"
  },
  {
    "label": "getCoeffInterNoAsm()",
    "kind": "Method",
    "detail": "Function (const uint8* scan = mScanTable [ 0 ] ; int32 run,last ; int32 p = 0 ; do { int32 level = mVLCDecoder .)",
    "insertText": "getCoeffInterNoAsm(run, last, *mBitstream)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK((level >= -2047) && (level <= 2047) && \"getInterBlock: level overflow!!\")"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(run != -1 && \"getInterBlock: invalid run\")"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (p + = run ;)",
    "insertText": "M4CHECK(p<64)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (block [ scan [)",
    "insertText": "p(int16)"
  },
  {
    "label": "getMv()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "getMv(const uint16 code)"
  },
  {
    "label": "scale_fac()",
    "kind": "Method",
    "detail": "Function (int32 res ; int32 mv ; int32)",
    "insertText": "scale_fac(code - 1)"
  },
  {
    "label": "getMvVlc()",
    "kind": "Method",
    "detail": "Function (int32 codeMagnitude =)",
    "insertText": "getMvVlc()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(int32)mBitstream->getBits(code - 1)"
  },
  {
    "label": "mv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mv((M4_ABS(codeMagnitude) - 1) * scale_fac)"
  },
  {
    "label": "readGMCSprite()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "readGMCSprite()"
  },
  {
    "label": "decodeGMCSprite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decodeGMCSprite()"
  },
  {
    "label": "setMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMatrix(uint8* matrixOut, const uint8* matrixIn)"
  },
  {
    "label": "log2bin()",
    "kind": "Method",
    "detail": "Function (matrixOut [ i ] = matrixIn [ i ] ; } } uint32)",
    "insertText": "log2bin(uint32 value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 n = 0 ;)",
    "insertText": "while(value)"
  },
  {
    "label": "getMatrix()",
    "kind": "Method",
    "detail": "Function (value>> = 1 ; + + n ; } return n ; } void)",
    "insertText": "getMatrix(uint8* matrix)"
  },
  {
    "label": "getBits()",
    "kind": "Method",
    "detail": "Function (uint32 last ; uint32 i = 0 ; uint32 value = 0 ; do { last = value ; value = mBitstream ->)",
    "insertText": "getBits(8)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (matrix [ mScanTable [ 0 ] [)",
    "insertText": "i(uint8)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(value != 0 && i < 64)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (i - - ;)",
    "insertText": "while(i < 64)"
  },
  {
    "label": "getTrajaPoint()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "getTrajaPoint()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 index ;)",
    "insertText": "if(mBitstream->getBit())"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "index(index >> 8)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabTMNMV0[index]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(index >= 128)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "index(index >> 2)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabTMNMV1[index]))"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (} index - = 4 ; mBitstream ->)",
    "insertText": "skip(VLC_LEN(mVLCDecoder.mTabTMNMV2[index]))"
  },
  {
    "label": "M4BitstreamParser()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "M4BitstreamParser(const M4BitstreamParser& pObj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const M4BitstreamParser&)",
    "insertText": "operator(const M4BitstreamParser& pObj)"
  },
  {
    "label": "M4BitstreamCache()",
    "kind": "Method",
    "detail": "Function (public : M4BitstreamHeaderInfo mHeaderInfo ; VIDStreamEvents::VOLInfo mVOLInfo ; uint16 mLowDelay ; uint16 mFcodeForward ; uint16 mFcodeBackward ; uint32 mIntraDCThreshold ; uint32 mScalability ; uint16 mVopTimeIncrementBits ; uint16 mVopTimeIncrementResolution ; uint32 mVopTimeFixedIncrement ; bool mbVopTimeFixedRate ; double mTicksPerSecond ; double mVopTime ; uint32 mLastTimeBase ; uint32 mTimeBase ; uint64 mTime ; uint64 mLastNonBTime ; uint64 mTimePP ; uint64 mTimeBP ; uint32 mResyncMacroblockNumber ; uint32 mSpriteUsage ; uint16 mSpriteWarpingPoints ; uint16 mSpriteWarpingPointsUsed ; int16 mSpriteWarpingAccuracy ; int16 _free ; M4_VECTOR mSpriteOffset [ 2 ] ; M4_VECTOR mSpriteDelta [ 2 ] ; M4_VECTOR mSpriteShift ; private : M4Bitstream* mBitstream ; uint32 mShape ; uint32 mQuantBits ; uint32 mQuarterpel ; uint32 mNewPredEnable ; uint8* mScanTable [ 3 ] ; bool mVOLfound ; uint64 mVOLCounter ; bool mLoadIntraQuant ; bool mLoadInterQuant ; uint8 mIntraMatrix [ 6 4 ] ; uint8 mInterMatrix [ 6 4 ] ; M4_VECTOR mSprite [ 4 ] ; M4VlcDecoder mVLCDecoder ; M4_VECTOR mRefVop [ 4 ] ; uint8 mScanTableInput [ 3 ] [ 6 4 ] ; const uint32 mIntraDCThresholdTable [ 8 ] ; const uint8 mDefaultIntraMatrix [ 6 4 ] ; const uint8 mDefaultInterMatrix [ 6 4 ] ; M4Decoder* mDecoder ; } ; class M4BitstreamCache { public :)",
    "insertText": "M4BitstreamCache()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "Init(M4MemHandler& memSys)"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit(M4MemHandler& memSys)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (M4BitstreamCacheEntry&)",
    "insertText": "Alloc()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(mpCacheEntry->mDctFromBitstream, sizeof(mpCacheEntry->mDctFromBitstream))"
  }
]