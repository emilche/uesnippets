[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetChunkDeltaFilename()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Interfaces / IBuildManifest . h \" namespace BuildPatchServices { enum class EDeltaPolicy : uint32 { TryFetchContinueWithout = 0,Expect,Skip,InvalidOrMax } ; FString)",
    "insertText": "GetChunkDeltaFilename(const IBuildManifestRef& SourceManifest, const IBuildManifestRef& DestinationManifest)"
  },
  {
    "label": "MergeDeltaManifest()",
    "kind": "Method",
    "detail": "Function (IBuildManifestPtr)",
    "insertText": "MergeDeltaManifest(const IBuildManifestRef& Manifest, const IBuildManifestRef& Delta)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert((uint32)BuildPatchServices::EDeltaPolicy::InvalidOrMax == 3, \"Please add support for the extra values to the Lex functions below.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(BuildPatchServices::EDeltaPolicy DeltaPolicy)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case BuildPatchServices::EDeltaPolicy::Value: return TEXT(#Value) switch (DeltaPolicy)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"InvalidOrMax\")"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(BuildPatchServices::EDeltaPolicy& DeltaPolicy, const TCHAR* Buffer)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETURN_IF_EQUAL(Value) if (FCString::Stricmp(Buffer, TEXT(#Value)) == 0)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (DeltaPolicy = BuildPatchServices::EDeltaPolicy::Value ; return ; } const TCHAR* const Prefix =)",
    "insertText": "TEXT(\"EDeltaPolicy::\")"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const SIZE_T PrefixLen =)",
    "insertText": "Strlen(Prefix)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(TryFetchContinueWithout)"
  }
]