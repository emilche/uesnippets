[
  {
    "label": "FDataflowNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowNode"
  },
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "FLazySingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazySingleton"
  },
  {
    "label": "FNodeColorsRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNodeColorsRegistry"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Dataflow / DataflowGraph . h \" # include \" Dataflow / DataflowSettings . h \" # include \" ChaosLog . h \" struct FDataflowNode ; struct FDataflowConnection ; class FLazySingleton ; namespace UE::Dataflow { class FNodeColorsRegistry { public : FNodeColorsRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "RegisterNodeColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNodeColors(const FName& Category, const FNodeColors& NodeColors)"
  },
  {
    "label": "GetNodeTitleColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeTitleColor(const FName& Category)"
  },
  {
    "label": "GetNodeBodyTintColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeBodyTintColor(const FName& Category)"
  },
  {
    "label": "NodeColorsChangedInSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeColorsChangedInSettings(const FNodeColorsMap& NodeColorsMap)"
  },
  {
    "label": "FNodeColorsRegistry()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FNodeColorsRegistry()"
  }
]