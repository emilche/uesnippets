[
  {
    "label": "FUVDensityAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVDensityAccumulator"
  },
  {
    "label": "FElementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementInfo"
  },
  {
    "label": "FCompareUVDensity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareUVDensity"
  },
  {
    "label": "FElementInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_EDITORONLY_DATA struct FUVDensityAccumulator { private : struct FElementInfo { float Weight ; float UVDensity ;)",
    "insertText": "FElementInfo(float InWeight, float InUVDensity) : Weight(InWeight), UVDensity(InUVDensity)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FElementInfo> Elements ; public : void)",
    "insertText": "Reserve(int32 Size)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reserve(Size)"
  },
  {
    "label": "PushTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushTriangle(float InAera, float InUVArea)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FElementInfo(FMath::Sqrt(InAera), FMath::Sqrt(InAera / InUVArea)))"
  },
  {
    "label": "AccumulateDensity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AccumulateDensity(float& WeightedUVDensity, float& Weight, float DiscardPercentage = .10f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FCompareUVDensity { bool)",
    "insertText": "operator()(FElementInfo const& A, FElementInfo const& B)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 Threshold =)",
    "insertText": "FloorToInt(DiscardPercentage * (float)Elements.Num())"
  },
  {
    "label": "GetDensity()",
    "kind": "Method",
    "detail": "Function (const FElementInfo& Element = Elements [ Index ] ; WeightedUVDensity + = Element . UVDensity* Element . Weight ; Weight + = Element . Weight ; } } float)",
    "insertText": "GetDensity(float DiscardPercentage = .10f)"
  },
  {
    "label": "AccumulateDensity()",
    "kind": "Method",
    "detail": "Function (float WeightedUVDensity = 0 ; float Weight = 0 ;)",
    "insertText": "AccumulateDensity(WeightedUVDensity, Weight, DiscardPercentage)"
  },
  {
    "label": "GetTriangleAera()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTriangleAera(const FVector3f& Pos0, const FVector3f& Pos1, const FVector3f& Pos2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (FVector3f P01 = Pos1 - Pos0 ; FVector3f P02 = Pos2 - Pos0 ; return)",
    "insertText": "CrossProduct(P01, P02).Size()"
  },
  {
    "label": "GetUVChannelAera()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetUVChannelAera(const FVector2D& UV0, const FVector2D& UV1, const FVector2D& UV2)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FVector2D UV01 = UV1 - UV0 ; FVector2D UV02 = UV2 - UV0 ; return FMath::Abs<)",
    "insertText": "float(UV01.X * UV02.Y - UV01.Y * UV02.X)"
  }
]