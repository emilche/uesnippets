[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FMulticastDelegateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMulticastDelegateProperty"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "FSubobjectEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubobjectEditorTreeNode"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SBlueprintNamespaceEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlueprintNamespaceEntry"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "STextComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextComboBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphNode_Documentation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode_Documentation"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UK2Node_Variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Variable"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBlueprintDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDetails"
  },
  {
    "label": "FBlueprintVarActionDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintVarActionDetails"
  },
  {
    "label": "IDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCustomization"
  },
  {
    "label": "FBaseBlueprintGraphActionDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseBlueprintGraphActionDetails"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "FBlueprintDelegateActionDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDelegateActionDetails"
  },
  {
    "label": "FBlueprintGraphArgumentGroupLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphArgumentGroupLayout"
  },
  {
    "label": "FBlueprintGraphArgumentLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphArgumentLayout"
  },
  {
    "label": "FBlueprintGraphLocalVariableGroupLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphLocalVariableGroupLayout"
  },
  {
    "label": "FBlueprintGraphLocalVariableLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphLocalVariableLayout"
  },
  {
    "label": "FBlueprintGraphActionDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphActionDetails"
  },
  {
    "label": "FAccessSpecifierLabel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessSpecifierLabel"
  },
  {
    "label": "FReplicationSpecifierLabel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationSpecifierLabel"
  },
  {
    "label": "SColorBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorBlock"
  },
  {
    "label": "FBlueprintGlobalOptionsManagedListDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGlobalOptionsManagedListDetails"
  },
  {
    "label": "FBlueprintGlobalOptionsDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGlobalOptionsDetails"
  },
  {
    "label": "FBlueprintImportsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintImportsLayout"
  },
  {
    "label": "FBlueprintInterfaceLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintInterfaceLayout"
  },
  {
    "label": "FBlueprintComponentDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintComponentDetails"
  },
  {
    "label": "FBlueprintGraphNodeDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintGraphNodeDetails"
  },
  {
    "label": "FChildActorComponentDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildActorComponentDetails"
  },
  {
    "label": "FBlueprintDocumentationDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDocumentationDetails"
  },
  {
    "label": "FBlueprintDetails()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditor . h \" # include \" BlueprintManagedListDetails . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphPin . h \" # include \" Engine / Blueprint . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" IDetailCustomization . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" K2Node_EditablePinBase . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" SMyBlueprint . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Script . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakFieldPtr . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / Views / SListView . h \" class FDetailWidgetRow ; class FMulticastDelegateProperty ; class FProperty ; class FStructOnScope ; class FSubobjectEditorTreeNode ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class IPropertyHandle ; class ITableRow ; class SBlueprintNamespaceEntry ; class SComboButton ; class SEditableTextBox ; class SGraphPin ; class SMultiLineEditableTextBox ; class STableViewBase ; class STextComboBox ; class SWidget ; class UClass ; class UEdGraph ; class UEdGraphNode ; class UEdGraphNode_Documentation ; class UFunction ; class UK2Node_Variable ; class UObject ; class UStruct ; struct FGeometry ; struct FPointerEvent ; struct FPropertyChangedEvent ; struct FTopLevelAssetPath ; namespace EVariableReplication { enum Type { None,Replicated,RepNotify,MAX } ; } class FBlueprintDetails : public IDetailCustomization { public :)",
    "insertText": "FBlueprintDetails(TWeakPtr<SMyBlueprint> InMyBlueprint) : Blueprint(InMyBlueprint.Pin()->GetBlueprintObj())"
  },
  {
    "label": "FBlueprintDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintDetails(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr) : Blueprint(InBlueprintEditorPtr.Pin()->GetBlueprintObj())"
  },
  {
    "label": "GetBlueprintObj()",
    "kind": "Method",
    "detail": "Function (} protected : UBlueprint*)",
    "insertText": "GetBlueprintObj()"
  },
  {
    "label": "AddEventsCategory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEventsCategory(IDetailLayoutBuilder& DetailBuilder, FName PropertyName, UClass* ComponentClass)"
  },
  {
    "label": "HandleAddOrViewEventForVariable()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAddOrViewEventForVariable(const FName EventName, FName PropertyName, TWeakObjectPtr<UClass> PropertyClass)"
  },
  {
    "label": "HandleAddOrViewIndexForButton()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HandleAddOrViewIndexForButton(const FName EventName, FName PropertyName)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<UBlueprint> Blueprint ; } ; class FBlueprintVarActionDetails : public FBlueprintDetails { public : TSharedRef<class IDetailCustomization>)",
    "insertText": "MakeInstance(TWeakPtr<SMyBlueprint> InMyBlueprint)"
  },
  {
    "label": "FBlueprintVarActionDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintVarActionDetails(TWeakPtr<SMyBlueprint> InMyBlueprint) : FBlueprintDetails(InMyBlueprint) , MyBlueprint(InMyBlueprint) , bIsVarNameInvalid(false)"
  },
  {
    "label": "FBlueprintVarActionDetails()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBlueprintVarActionDetails()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailLayout)"
  },
  {
    "label": "PopulateCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCategories(SMyBlueprint* MyBlueprint, TArray<TSharedPtr<FText>>& CategorySource)"
  },
  {
    "label": "EdGraphSelectionAsVar()",
    "kind": "Method",
    "detail": "Function (private : UK2Node_Variable*)",
    "insertText": "EdGraphSelectionAsVar()"
  },
  {
    "label": "SelectionAsProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "SelectionAsProperty()"
  },
  {
    "label": "GetVariableName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetVariableName()"
  },
  {
    "label": "IsAUserVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAUserVariable(FProperty* VariableProperty)"
  },
  {
    "label": "IsASCSVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsASCSVariable(FProperty* VariableProperty)"
  },
  {
    "label": "IsABlueprintVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsABlueprintVariable(FProperty* VariableProperty)"
  },
  {
    "label": "IsALocalVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsALocalVariable(FProperty* VariableProperty)"
  },
  {
    "label": "GetLocalVariableScope()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetLocalVariableScope(FProperty* VariableProperty)"
  },
  {
    "label": "GetVariableNameChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVariableNameChangeEnabled()"
  },
  {
    "label": "OnGetVarName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetVarName()"
  },
  {
    "label": "OnVarNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVarNameChanged(const FText& InNewText)"
  },
  {
    "label": "OnVarNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVarNameCommitted(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "GetVariableTypeChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVariableTypeChangeEnabled()"
  },
  {
    "label": "OnGetVarType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "OnGetVarType()"
  },
  {
    "label": "OnVarTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVarTypeChanged(const FEdGraphPinType& NewPinType)"
  },
  {
    "label": "IsTooltipEditVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsTooltipEditVisible()"
  },
  {
    "label": "OnBrowseToVarType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowseToVarType()"
  },
  {
    "label": "CanBrowseToVarType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBrowseToVarType()"
  },
  {
    "label": "OnFinishedChangingVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingVariable(const FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "OnFinishedChangingLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingLocalVariable(const FPropertyChangedEvent& InPropertyChangedEvent, TSharedPtr<FStructOnScope> InStructData, TWeakObjectPtr<UK2Node_EditablePinBase> InEntryNode)"
  },
  {
    "label": "ImportNamespacesForPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportNamespacesForPropertyValue(const FProperty* InProperty, const void* InContainer)"
  },
  {
    "label": "GetVariableCategoryChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVariableCategoryChangeEnabled()"
  },
  {
    "label": "OnGetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetTooltipText()"
  },
  {
    "label": "OnTooltipTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTooltipTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit, FName VarName)"
  },
  {
    "label": "OnGetCategoryText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetCategoryText()"
  },
  {
    "label": "OnCategoryTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCategoryTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit, FName VarName)"
  },
  {
    "label": "MakeCategoryViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeCategoryViewWidget(TSharedPtr<FText> Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnCategorySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCategorySelectionChanged(TSharedPtr<FText> ProposedSelection, ESelectInfo::Type)"
  },
  {
    "label": "ShowEditableCheckboxVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ShowEditableCheckboxVisibility()"
  },
  {
    "label": "OnEditableCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnEditableCheckboxState()"
  },
  {
    "label": "OnEditableChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditableChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "ShowReadOnlyCheckboxVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ShowReadOnlyCheckboxVisibility()"
  },
  {
    "label": "OnReadyOnlyCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnReadyOnlyCheckboxState()"
  },
  {
    "label": "OnReadyOnlyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyOnlyChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetVariableUnitsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVariableUnitsVisibility()"
  },
  {
    "label": "GetVariableUnits()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetVariableUnits()"
  },
  {
    "label": "OnVariableUnitsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableUnitsChanged(TSharedPtr<FString> ItemSelected, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnFieldNotifyCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnFieldNotifyCheckboxState()"
  },
  {
    "label": "OnFieldNotifyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFieldNotifyChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetFieldNotifyCheckboxListVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFieldNotifyCheckboxListVisibility()"
  },
  {
    "label": "OnCreateWidgetCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnCreateWidgetCheckboxState()"
  },
  {
    "label": "OnCreateWidgetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateWidgetChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "Show3DWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "Show3DWidgetVisibility()"
  },
  {
    "label": "Is3DWidgetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Is3DWidgetEnabled()"
  },
  {
    "label": "OnGetExposedToSpawnCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetExposedToSpawnCheckboxState()"
  },
  {
    "label": "OnExposedToSpawnChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExposedToSpawnChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "ExposeOnSpawnVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ExposeOnSpawnVisibility()"
  },
  {
    "label": "OnGetPrivateCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetPrivateCheckboxState()"
  },
  {
    "label": "OnPrivateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPrivateChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "ExposePrivateVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ExposePrivateVisibility()"
  },
  {
    "label": "OnGetExposedToCinematicsCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetExposedToCinematicsCheckboxState()"
  },
  {
    "label": "OnExposedToCinematicsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExposedToCinematicsChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "ExposeToCinematicsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ExposeToCinematicsVisibility()"
  },
  {
    "label": "OnGetConfigVariableCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetConfigVariableCheckboxState()"
  },
  {
    "label": "OnSetConfigVariableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetConfigVariableState(ECheckBoxState InNewState)"
  },
  {
    "label": "ExposeConfigVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ExposeConfigVisibility()"
  },
  {
    "label": "IsConfigCheckBoxEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConfigCheckBoxEnabled()"
  },
  {
    "label": "OnGetMetaKeyValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetMetaKeyValue(FName Key)"
  },
  {
    "label": "OnMetaKeyValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMetaKeyValueChanged(const FText& NewMinValue, ETextCommit::Type CommitInfo, FName Key)"
  },
  {
    "label": "RangeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "RangeVisibility()"
  },
  {
    "label": "OnBitmaskCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnBitmaskCheckboxState()"
  },
  {
    "label": "BitmaskVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "BitmaskVisibility()"
  },
  {
    "label": "OnBitmaskChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitmaskChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetBitmaskEnumTypePath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopLevelAssetPath>)",
    "insertText": "GetBitmaskEnumTypePath()"
  },
  {
    "label": "OnBitmaskEnumTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitmaskEnumTypeChanged(TSharedPtr<FTopLevelAssetPath> ItemSelected, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GenerateBitmaskEnumTypeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateBitmaskEnumTypeWidget(TSharedPtr<FTopLevelAssetPath> Item)"
  },
  {
    "label": "GetBitmaskEnumTypeName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBitmaskEnumTypeName()"
  },
  {
    "label": "GetVariableReplicationType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetVariableReplicationType()"
  },
  {
    "label": "OnChangeReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeReplication(TSharedPtr<FString> ItemSelected, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ReplicationOnRepFuncChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicationOnRepFuncChanged(const FString& NewOnRepFunc)"
  },
  {
    "label": "ReplicationVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "ReplicationVisibility()"
  },
  {
    "label": "GetVariableReplicationCondition()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FString>> ReplicationConditionEnumTypeNames ; TSharedPtr<FString>)",
    "insertText": "GetVariableReplicationCondition()"
  },
  {
    "label": "OnChangeReplicationCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeReplicationCondition(TSharedPtr<FString> ItemSelected, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ReplicationConditionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicationConditionEnabled()"
  },
  {
    "label": "ReplicationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicationEnabled()"
  },
  {
    "label": "ReplicationTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ReplicationTooltip()"
  },
  {
    "label": "GetTransientVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTransientVisibility()"
  },
  {
    "label": "OnGetTransientCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetTransientCheckboxState()"
  },
  {
    "label": "OnTransientChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransientChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetSaveGameVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSaveGameVisibility()"
  },
  {
    "label": "OnGetSaveGameCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetSaveGameCheckboxState()"
  },
  {
    "label": "OnSaveGameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSaveGameChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetAdvancedDisplayVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAdvancedDisplayVisibility()"
  },
  {
    "label": "OnGetAdvancedDisplayCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetAdvancedDisplayCheckboxState()"
  },
  {
    "label": "OnAdvancedDisplayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvancedDisplayChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetMultilineVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetMultilineVisibility()"
  },
  {
    "label": "OnGetMultilineCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetMultilineCheckboxState()"
  },
  {
    "label": "OnMultilineChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMultilineChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetDeprecatedVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDeprecatedVisibility()"
  },
  {
    "label": "OnGetDeprecatedCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "OnGetDeprecatedCheckboxState()"
  },
  {
    "label": "OnDeprecatedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeprecatedChanged(ECheckBoxState InNewState)"
  },
  {
    "label": "GetDropDownOptionsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDropDownOptionsVisibility()"
  },
  {
    "label": "OnDropDownOptionSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropDownOptionSelectionChanged(TSharedPtr<FString> InString, ESelectInfo::Type)"
  },
  {
    "label": "OnDropDownOptionTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropDownOptionTextChanged(const FText& Text, ETextCommit::Type)"
  },
  {
    "label": "GenerateDropDownOptionWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateDropDownOptionWidget(TSharedPtr<FString> InItem)"
  },
  {
    "label": "CollectDropDownOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectDropDownOptions()"
  },
  {
    "label": "GetDropDownOptionDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDropDownOptionDisplayText()"
  },
  {
    "label": "GetDropDownOptionsFunctionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDropDownOptionsFunctionName()"
  },
  {
    "label": "SetDropDownOptionsFunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDropDownOptionsFunctionName(const FString& InFunctionName)"
  },
  {
    "label": "GetDeprecationMessageText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDeprecationMessageText()"
  },
  {
    "label": "OnDeprecationMessageTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeprecationMessageTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit, FName VarName)"
  },
  {
    "label": "RefreshPropertyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPropertyFlags()"
  },
  {
    "label": "OnGenerateWidgetForPropertyList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateWidgetForPropertyList(TSharedPtr< FString > Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "BuildEventsMenuForVariable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildEventsMenuForVariable()"
  },
  {
    "label": "OnPostEditorRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEditorRefresh()"
  },
  {
    "label": "GetPropertyOwnerBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetPropertyOwnerBlueprint()"
  },
  {
    "label": "IsVariableInBlueprint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVariableInBlueprint()"
  },
  {
    "label": "IsVariableInheritedByBlueprint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVariableInheritedByBlueprint()"
  },
  {
    "label": "IsVariableDeprecated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableDeprecated()"
  },
  {
    "label": "FBaseBlueprintGraphActionDetails()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SMyBlueprint> MyBlueprint ; TArray<TSharedPtr<FString>> ReplicationOptions ; TArray<TSharedPtr<FString>> DropDownFunctionOptions ; TArray<TSharedPtr<FString>> UnitsOptions ; TArray<TSharedPtr<FTopLevelAssetPath>> BitmaskEnumTypePaths ; TSharedPtr<SEditableTextBox> VarNameEditableTextBox ; bool bIsVarNameInvalid ; TArray<TSharedPtr<FText>> CategorySource ; TWeakPtr<SComboButton> CategoryComboButton ; TWeakPtr<SListView<TSharedPtr<FText>>> CategoryListView ; TArray<TSharedPtr<FString>> PropertyFlags ; TWeakPtr<SListView<TSharedPtr<FString>>> PropertyFlagWidget ; TWeakFieldPtr<FProperty> CachedVariableProperty ; FName CachedVariableName ; TWeakObjectPtr<UBlueprint> PropertyOwnerBlueprint ; TArray<TSharedPtr<IDetailCustomization>> ExternalDetailCustomizations ; } ; class FBaseBlueprintGraphActionDetails : public IDetailCustomization { public : ~)",
    "insertText": "FBaseBlueprintGraphActionDetails()"
  },
  {
    "label": "FBaseBlueprintGraphActionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBaseBlueprintGraphActionDetails(TWeakPtr<SMyBlueprint> InMyBlueprint) : MyBlueprint(InMyBlueprint)"
  },
  {
    "label": "GetGraph()",
    "kind": "Method",
    "detail": "Function (} UEdGraph*)",
    "insertText": "GetGraph()"
  },
  {
    "label": "OnParamsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParamsChanged(UK2Node_EditablePinBase* TargetNode, bool bForceRefresh = false)"
  },
  {
    "label": "OnVerifyPinRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyPinRename(UK2Node_EditablePinBase* InTargetNode, const FName InOldName, const FString& InNewName, FText& OutErrorMessage)"
  },
  {
    "label": "OnPinRenamed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPinRenamed(UK2Node_EditablePinBase* TargetNode, const FName OldName, const FString& NewName)"
  },
  {
    "label": "GetMyBlueprint()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SMyBlueprint>)",
    "insertText": "GetMyBlueprint()"
  },
  {
    "label": "GetFunctionEntryNode()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<class UK2Node_EditablePinBase>)",
    "insertText": "GetFunctionEntryNode()"
  },
  {
    "label": "OnAddNewInputClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnAddNewInputClicked()"
  },
  {
    "label": "AttemptToCreateResultNode()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AttemptToCreateResultNode()"
  },
  {
    "label": "FBlueprintDelegateActionDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintDelegateActionDetails(TWeakPtr<SMyBlueprint> InMyBlueprint) : FBaseBlueprintGraphActionDetails(InMyBlueprint)"
  },
  {
    "label": "SetEntryNode()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetEntryNode()"
  },
  {
    "label": "GetDelegateProperty()",
    "kind": "Method",
    "detail": "Function (FMulticastDelegateProperty*)",
    "insertText": "GetDelegateProperty()"
  },
  {
    "label": "CollectAvailibleSignatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAvailibleSignatures()"
  },
  {
    "label": "OnFunctionSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFunctionSelected(TSharedPtr<FString> FunctionItemData, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "IsBlueprintProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlueprintProperty()"
  },
  {
    "label": "OnGetSectionTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetSectionTextVisibility(TWeakPtr<SWidget> RowWidget)"
  },
  {
    "label": "FBlueprintGraphArgumentGroupLayout()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<FString>> FunctionsToCopySignatureFrom ; TSharedPtr<STextComboBox> CopySignatureComboButton ; } ; class FBlueprintGraphArgumentGroupLayout : public IDetailCustomNodeBuilder,public TSharedFromThis<FBlueprintGraphArgumentGroupLayout> { public :)",
    "insertText": "FBlueprintGraphArgumentGroupLayout(TWeakPtr<class FBaseBlueprintGraphActionDetails> InGraphActionDetails, UK2Node_EditablePinBase* InTargetNode) : GraphActionDetailsPtr(InGraphActionDetails) , TargetNode(InTargetNode)"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRegenerateChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "IsPinEditingReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPinEditingReadOnly(bool bIsEditingPinType = false)"
  },
  {
    "label": "OnRemoveClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveClicked()"
  },
  {
    "label": "OnGetArgNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetArgNameText()"
  },
  {
    "label": "OnGetArgToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetArgToolTipText()"
  },
  {
    "label": "OnArgNameChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArgNameChange(const FText& InNewText)"
  },
  {
    "label": "OnArgNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArgNameTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnGetPinInfo()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "OnGetPinInfo()"
  },
  {
    "label": "PinInfoChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinInfoChanged(const FEdGraphPinType& PinType)"
  },
  {
    "label": "OnPrePinInfoChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPrePinInfoChange(const FEdGraphPinType& PinType)"
  },
  {
    "label": "GetPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetPin()"
  },
  {
    "label": "IsRefChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsRefChecked()"
  },
  {
    "label": "IsConstChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsConstChecked()"
  },
  {
    "label": "OnRefCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefCheckStateChanged(ECheckBoxState InState)"
  },
  {
    "label": "OnConstCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstCheckStateChanged(ECheckBoxState InState)"
  },
  {
    "label": "ShouldBeForceConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeForceConst()"
  },
  {
    "label": "CanChangeConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeConst()"
  },
  {
    "label": "FBlueprintGraphLocalVariableGroupLayout()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<class FBaseBlueprintGraphActionDetails> GraphActionDetailsPtr ; TWeakPtr<FUserPinInfo> ParamItemPtr ; UK2Node_EditablePinBase* TargetNode ; bool bHasDefaultValue ; FName ArgumentName ; TWeakPtr<SEditableTextBox> ArgumentNameWidget ; TSharedPtr<SGraphPin> DefaultValuePinWidget ; } ; # define UE_BP_LOCAL_VAR_LAYOUT_SETTERS_IMPLEMENTED false class FBlueprintGraphLocalVariableGroupLayout : public IDetailCustomNodeBuilder,public TSharedFromThis<FBlueprintGraphLocalVariableGroupLayout> { public :)",
    "insertText": "FBlueprintGraphLocalVariableGroupLayout(TWeakPtr<class FBaseBlueprintGraphActionDetails> InGraphActionDetails, TWeakObjectPtr<UEdGraph> InTargetGraph, TWeakObjectPtr<UBlueprint> InBlueprintObj, TWeakObjectPtr<UFunction> InOwningFunction, TSharedPtr<IPropertyHandle> Property = nullptr) : GraphActionDetailsPtr(InGraphActionDetails) , TargetGraph(InTargetGraph) , BlueprintObj(InBlueprintObj) , PropertyHandle(Property) , OwningFunction(InOwningFunction)"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IPropertyHandle>)",
    "insertText": "GetPropertyHandle()"
  },
  {
    "label": "FBPVariableDescription()",
    "kind": "Method",
    "detail": "Function (Data . Set<)",
    "insertText": "FBPVariableDescription(VariableDescription)"
  },
  {
    "label": "FBlueprintGraphLocalVariableLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintGraphLocalVariableLayout(TWeakObjectPtr<UFunction> InOwningFunction, TSharedPtr<IPropertyHandle> Property = nullptr) : OwningFunction(InOwningFunction)"
  },
  {
    "label": "IPropertyHandle()",
    "kind": "Method",
    "detail": "Function (Data . Set<TSharedPtr<)",
    "insertText": "IPropertyHandle(Property)"
  },
  {
    "label": "GetVariable()",
    "kind": "Method",
    "detail": "Function (const FBPVariableDescription&)",
    "insertText": "GetVariable()"
  },
  {
    "label": "SetVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariable(const FBPVariableDescription&)"
  },
  {
    "label": "InitiallyCollapsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitiallyCollapsed()"
  },
  {
    "label": "IsVariableEditingReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableEditingReadOnly(bool bIsEditingPinType = false)"
  },
  {
    "label": "OnGetVarNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetVarNameText()"
  },
  {
    "label": "OnGetVarToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetVarToolTipText()"
  },
  {
    "label": "OnGetVariableType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "OnGetVariableType()"
  },
  {
    "label": "OnVarNameChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVarNameChange(const FText& InNewText)"
  },
  {
    "label": "OnVarNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVarNameTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "VariableTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VariableTypeChanged(const FEdGraphPinType& PinType)"
  },
  {
    "label": "OnPreVariableTypeChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreVariableTypeChange(const FEdGraphPinType& PinType)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# endif private : TWeakPtr<SEditableTextBox> VariableNameWidget ; TSharedPtr<SGraphPin> DefaultValueWidget ; TVariant<TSharedPtr<IPropertyHandle>,FBPVariableDescription> Data ; TWeakObjectPtr<UFunction> OwningFunction ; } ; class FBlueprintGraphActionDetails : public FBaseBlueprintGraphActionDetails { public : TSharedRef<class IDetailCustomization>)",
    "insertText": "MakeInstance(TWeakPtr<SMyBlueprint> InMyBlueprint, bool bInShowLocalVariables = false)"
  },
  {
    "label": "FBlueprintGraphActionDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintGraphActionDetails(TWeakPtr<SMyBlueprint> InMyBlueprint, bool bInShowLocalVariables = false) : FBaseBlueprintGraphActionDetails(InMyBlueprint) , bShowLocalVariables(bInShowLocalVariables)"
  },
  {
    "label": "FAccessSpecifierLabel()",
    "kind": "Method",
    "detail": "Function (private : struct FAccessSpecifierLabel { FText LocalizedName ; EFunctionFlags SpecifierFlag ;)",
    "insertText": "FAccessSpecifierLabel(FText InLocalizedName, EFunctionFlags InSpecifierFlag) : LocalizedName( InLocalizedName ), SpecifierFlag( InSpecifierFlag)"
  },
  {
    "label": "SetEntryAndResultNodes()",
    "kind": "Method",
    "detail": "Function (} } ; private : void)",
    "insertText": "SetEntryAndResultNodes()"
  },
  {
    "label": "GetEditableNode()",
    "kind": "Method",
    "detail": "Function (UK2Node_EditablePinBase*)",
    "insertText": "GetEditableNode()"
  },
  {
    "label": "FindFunction()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "FindFunction()"
  },
  {
    "label": "GetMetadataBlock()",
    "kind": "Method",
    "detail": "Function (FKismetUserDeclaredFunctionMetadata*)",
    "insertText": "GetMetadataBlock()"
  },
  {
    "label": "OnTooltipTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTooltipTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnCategoryTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCategoryTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnGetKeywordsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetKeywordsText()"
  },
  {
    "label": "OnKeywordsTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeywordsTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnGetCompactNodeTitleText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetCompactNodeTitleText()"
  },
  {
    "label": "OnCompactNodeTitleTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompactNodeTitleTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "AccessSpecifierProperName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AccessSpecifierProperName(uint32 AccessSpecifierFlag)"
  },
  {
    "label": "IsAccessSpecifierVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAccessSpecifierVisible()"
  },
  {
    "label": "HandleGenerateRowAccessSpecifier()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRowAccessSpecifier(TSharedPtr<FAccessSpecifierLabel> SpecifierName, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetCurrentAccessSpecifierName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentAccessSpecifierName()"
  },
  {
    "label": "OnAccessSpecifierSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAccessSpecifierSelected(TSharedPtr<FAccessSpecifierLabel> SpecifierName, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetInstanceColorVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInstanceColorVisibility()"
  },
  {
    "label": "GetNodeTitleColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeTitleColor()"
  },
  {
    "label": "ColorBlock_OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ColorBlock_OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsCustomEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomEvent()"
  },
  {
    "label": "OnIsReliableReplicationFunctionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsReliableReplicationFunctionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsReliableReplicatedFunction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsReliableReplicatedFunction()"
  },
  {
    "label": "FReplicationSpecifierLabel()",
    "kind": "Method",
    "detail": "Function (struct FReplicationSpecifierLabel { FText LocalizedName ; FText LocalizedToolTip ; uint32 SpecifierFlag ;)",
    "insertText": "FReplicationSpecifierLabel(FText InLocalizedName, uint32 InSpecifierFlag, FText InLocalizedToolTip ) : LocalizedName( InLocalizedName ), LocalizedToolTip( InLocalizedToolTip ), SpecifierFlag( InSpecifierFlag)"
  },
  {
    "label": "GetCurrentReplicatedEventString()",
    "kind": "Method",
    "detail": "Function (} } ; FText)",
    "insertText": "GetCurrentReplicatedEventString()"
  },
  {
    "label": "ReplicationSpecifierProperName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ReplicationSpecifierProperName(uint32 ReplicationSpecifierFlag)"
  },
  {
    "label": "OnGenerateReplicationComboWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateReplicationComboWidget(TSharedPtr<FReplicationSpecifierLabel> InNetFlag, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "IsPureFunctionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPureFunctionVisible()"
  },
  {
    "label": "OnIsPureFunctionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsPureFunctionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsPureFunction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsPureFunction()"
  },
  {
    "label": "IsConstFunctionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstFunctionVisible()"
  },
  {
    "label": "OnIsConstFunctionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsConstFunctionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsConstFunction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsConstFunction()"
  },
  {
    "label": "IsExecFunctionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExecFunctionVisible()"
  },
  {
    "label": "OnIsExecFunctionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsExecFunctionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsExecFunction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsExecFunction()"
  },
  {
    "label": "IsThreadSafeFunctionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadSafeFunctionVisible()"
  },
  {
    "label": "OnIsThreadSafeFunctionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsThreadSafeFunctionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsThreadSafeFunction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsThreadSafeFunction()"
  },
  {
    "label": "IsUnsafeDuringActorConstructionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnsafeDuringActorConstructionVisible()"
  },
  {
    "label": "OnIsUnsafeDuringActorConstructionModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsUnsafeDuringActorConstructionModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "GetIsUnsafeDuringActorConstruction()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsUnsafeDuringActorConstruction()"
  },
  {
    "label": "IsFieldNotifyCheckVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFieldNotifyCheckVisible()"
  },
  {
    "label": "GetIsFieldNotfyEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsFieldNotfyEnabled()"
  },
  {
    "label": "GetIsEditorCallableEvent()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetIsEditorCallableEvent()"
  },
  {
    "label": "OnEditorCallableEventModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorCallableEventModified(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "IsFunctionDeprecated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionDeprecated()"
  },
  {
    "label": "OnDeprecationMessageTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeprecationMessageTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnAddNewOutputClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddNewOutputClicked()"
  },
  {
    "label": "GetAddNewInputOutputVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAddNewInputOutputVisibility()"
  },
  {
    "label": "IsAddNewInputOutputEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAddNewInputOutputEnabled()"
  },
  {
    "label": "SetNetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetFlags(TWeakObjectPtr<UK2Node_EditablePinBase> FunctionEntryNode, uint32 NetFlags)"
  },
  {
    "label": "FBlueprintGlobalOptionsManagedListDetails()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<FAccessSpecifierLabel>> AccessSpecifierLabels ; TSharedPtr<class SComboButton> AccessSpecifierComboButton ; TSharedPtr<class SColorBlock> ColorBlock ; TArray<TSharedPtr<FText>> CategorySource ; TWeakPtr<SComboButton> CategoryComboButton ; TWeakPtr<SListView<TSharedPtr<FText>>> CategoryListView ; TArray<TSharedPtr<IDetailCustomization>> ExternalDetailCustomizations ; bool bShowLocalVariables = false ; } ; class FBlueprintGlobalOptionsManagedListDetails : public FBlueprintManagedListDetails { public :)",
    "insertText": "FBlueprintGlobalOptionsManagedListDetails(TWeakPtr<class FBlueprintGlobalOptionsDetails> InGlobalOptionsDetailsPtr)"
  },
  {
    "label": "GetBlueprintObjectChecked()",
    "kind": "Method",
    "detail": "Function (protected : UBlueprint*)",
    "insertText": "GetBlueprintObjectChecked()"
  },
  {
    "label": "GetPinnedBlueprintEditorPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintEditor>)",
    "insertText": "GetPinnedBlueprintEditorPtr()"
  },
  {
    "label": "OnRefreshInDetailsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshInDetailsView()"
  },
  {
    "label": "FBlueprintImportsLayout()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<class FBlueprintGlobalOptionsDetails> GlobalOptionsDetailsPtr ; } ; class FBlueprintImportsLayout : public FBlueprintGlobalOptionsManagedListDetails,public TSharedFromThis<FBlueprintImportsLayout> { public :)",
    "insertText": "FBlueprintImportsLayout(TWeakPtr<class FBlueprintGlobalOptionsDetails> InGlobalOptionsDetails, bool bInShowDefaultImports)"
  },
  {
    "label": "MakeAddItemWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SWidget>)",
    "insertText": "MakeAddItemWidget()"
  },
  {
    "label": "GetManagedListItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetManagedListItems(TArray<FManagedListItem>& OutListItems)"
  },
  {
    "label": "OnRemoveItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveItem(const FManagedListItem& Item)"
  },
  {
    "label": "OnNamespaceSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamespaceSelected(const FString& InNamespace)"
  },
  {
    "label": "OnGetNamespacesToExclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetNamespacesToExclude(TSet<FString>& OutNamespacesToExclude)"
  },
  {
    "label": "FBlueprintInterfaceLayout()",
    "kind": "Method",
    "detail": "Function (private : bool bShouldShowDefaultImports ; } ; class FBlueprintInterfaceLayout : public FBlueprintGlobalOptionsManagedListDetails,public TSharedFromThis<FBlueprintInterfaceLayout> { public :)",
    "insertText": "FBlueprintInterfaceLayout(TWeakPtr<class FBlueprintGlobalOptionsDetails> InGlobalOptionsDetails, TSharedPtr<IPropertyHandle> InInterfacesProperty = nullptr)"
  },
  {
    "label": "OnGetAddInterfaceMenuContent()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "OnGetAddInterfaceMenuContent()"
  },
  {
    "label": "OnClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassPicked(UClass* PickedClass)"
  },
  {
    "label": "FBlueprintGlobalOptionsDetails()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SComboButton> AddInterfaceComboButton ; TSharedPtr<IPropertyHandle> InterfacesProperty ; } ; class FBlueprintGlobalOptionsDetails : public IDetailCustomization { public :)",
    "insertText": "FBlueprintGlobalOptionsDetails(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr) :BlueprintEditorPtr(InBlueprintEditorPtr) ,BlueprintObjOverride(nullptr)"
  },
  {
    "label": "FBlueprintGlobalOptionsDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlueprintGlobalOptionsDetails(TWeakObjectPtr<UBlueprint> InBlueprintPtr) :BlueprintObjOverride(InBlueprintPtr)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IDetailCustomization>)",
    "insertText": "MakeInstance(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr)"
  },
  {
    "label": "MakeInstanceForDiff()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstanceForDiff(TWeakObjectPtr<UBlueprint> InBlueprintPtr)"
  },
  {
    "label": "GetBlueprintEditorPtr()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FBlueprintEditor>)",
    "insertText": "GetBlueprintEditorPtr()"
  },
  {
    "label": "CanReparent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReparent()"
  },
  {
    "label": "GetParentClassMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetParentClassMenuContent()"
  },
  {
    "label": "OnClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassPicked(UClass* SelectedClass)"
  },
  {
    "label": "CanDeprecateBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeprecateBlueprint()"
  },
  {
    "label": "OnDeprecateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeprecateBlueprint(ECheckBoxState InCheckState)"
  },
  {
    "label": "IsDeprecatedBlueprint()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsDeprecatedBlueprint()"
  },
  {
    "label": "GetDeprecatedTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDeprecatedTooltip()"
  },
  {
    "label": "OnNamespaceValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamespaceValueCommitted(const FString& InNamespace)"
  },
  {
    "label": "ShouldShowNamespaceResetToDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowNamespaceResetToDefault()"
  },
  {
    "label": "OnNamespaceResetToDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamespaceResetToDefaultValue()"
  },
  {
    "label": "HandleNamespaceValueChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNamespaceValueChange(const FString& InOldValue, const FString& InNewValue)"
  },
  {
    "label": "FBlueprintComponentDetails()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FBlueprintEditor> BlueprintEditorPtr ; TWeakObjectPtr<UBlueprint> BlueprintObjOverride ; TSharedPtr<SComboButton> ParentClassComboButton ; TSharedPtr<IPropertyHandle> NamespacePropertyHandle ; TSharedPtr<SBlueprintNamespaceEntry> NamespaceValueWidget ; float NamespacePropertyValueCustomization_MinDesiredWidth ; } ; class FBlueprintComponentDetails : public FBlueprintDetails { public :)",
    "insertText": "FBlueprintComponentDetails(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr) : FBlueprintDetails(InBlueprintEditorPtr) , BlueprintEditorPtr(InBlueprintEditorPtr) , bIsVariableNameInvalid(false)"
  },
  {
    "label": "OnGetVariableText()",
    "kind": "Method",
    "detail": "Function (protected : FText)",
    "insertText": "OnGetVariableText()"
  },
  {
    "label": "OnVariableTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableTextChanged(const FText& InNewText)"
  },
  {
    "label": "OnVariableTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableTextCommitted(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnVariableCategoryChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVariableCategoryChangeEnabled()"
  },
  {
    "label": "OnGetVariableCategoryText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetVariableCategoryText()"
  },
  {
    "label": "OnVariableCategoryTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableCategoryTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit, FName VarName)"
  },
  {
    "label": "OnVariableCategorySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVariableCategorySelectionChanged(TSharedPtr<FText> ProposedSelection, ESelectInfo::Type)"
  },
  {
    "label": "MakeVariableCategoryViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeVariableCategoryViewWidget(TSharedPtr<FText> Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "GetSelectedEntryClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetSelectedEntryClass()"
  },
  {
    "label": "HandleNewEntryClassSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNewEntryClassSelected(const UClass* NewEntryClass)"
  },
  {
    "label": "GetSocketName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSocketName()"
  },
  {
    "label": "CanChangeSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeSocket()"
  },
  {
    "label": "OnBrowseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowseSocket()"
  },
  {
    "label": "OnClearSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearSocket()"
  },
  {
    "label": "OnSocketSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketSelection(FName SocketName)"
  },
  {
    "label": "PopulateVariableCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateVariableCategories()"
  },
  {
    "label": "FBlueprintGraphNodeDetails()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FBlueprintEditor> BlueprintEditorPtr ; TSharedPtr<FSubobjectEditorTreeNode> CachedNodePtr ; TSharedPtr<SEditableTextBox> VariableNameEditableTextBox ; bool bIsVariableNameInvalid ; TArray<TSharedPtr<FText>> VariableCategorySource ; TSharedPtr<SComboButton> VariableCategoryComboButton ; TSharedPtr<SListView<TSharedPtr<FText>>> VariableCategoryListView ; } ; class FBlueprintGraphNodeDetails : public IDetailCustomization { public :)",
    "insertText": "FBlueprintGraphNodeDetails(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr) : GraphNodePtr(NULL) , BlueprintEditorPtr(InBlueprintEditorPtr)"
  },
  {
    "label": "SetNameError()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetNameError(const FText& Error)"
  },
  {
    "label": "OnGetName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetName()"
  },
  {
    "label": "IsNameReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameReadOnly()"
  },
  {
    "label": "OnNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameChanged(const FText& InNewText)"
  },
  {
    "label": "OnNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameCommitted(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SEditableTextBox> NameEditableTextBox ; TSharedPtr<SMultiLineEditableTextBox> MultiLineNameEditableTextBox ; TWeakObjectPtr<UEdGraphNode> GraphNodePtr ; TWeakPtr<FBlueprintEditor> BlueprintEditorPtr ; } ; class FChildActorComponentDetails : public IDetailCustomization { public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance(TWeakPtr<FBlueprintEditor> BlueprintEditorPtr)"
  },
  {
    "label": "FChildActorComponentDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChildActorComponentDetails(TWeakPtr<FBlueprintEditor> BlueprintEditorPtr)"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "FBlueprintDocumentationDetails()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FBlueprintEditor> BlueprintEditorPtr ; } ; class FBlueprintDocumentationDetails : public IDetailCustomization { public :)",
    "insertText": "FBlueprintDocumentationDetails(TWeakPtr<FBlueprintEditor> InBlueprintEditorPtr) : BlueprintEditorPtr(InBlueprintEditorPtr)"
  },
  {
    "label": "EdGraphSelectionAsDocumentNode()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UEdGraphNode_Documentation>)",
    "insertText": "EdGraphSelectionAsDocumentNode()"
  },
  {
    "label": "OnGetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetDocumentationLink()"
  },
  {
    "label": "OnGetDocumentationExcerpt()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetDocumentationExcerpt()"
  },
  {
    "label": "OnExcerptChangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnExcerptChangeEnabled()"
  },
  {
    "label": "OnDocumentationLinkCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDocumentationLinkCommitted(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "MakeExcerptViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeExcerptViewWidget(TSharedPtr<FString> Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnExcerptSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExcerptSelectionChanged(TSharedPtr<FString> ProposedSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GenerateExcerptList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateExcerptList()"
  }
]