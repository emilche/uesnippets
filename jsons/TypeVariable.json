[
  {
    "label": "CDataDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDataDefinition"
  },
  {
    "label": "CExprDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprDefinition"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CTypeVariable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / Expression . h \" # include \" uLang / Semantics / SemanticScope . h \" # include \" uLang / Semantics / SemanticTypes . h \" namespace uLang { class CDataDefinition ; class CExprDefinition ; class CTypeVariable : public CDefinition,public CNominalType { public : const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::TypeVariable ; const ETypeKind StaticTypeKind = ETypeKind::Variable ; const CDataDefinition* _ExplicitParam = nullptr ; const CTypeVariable* _NegativeTypeVariable = nullptr ; const CTypeBase* _NegativeType = nullptr ;)",
    "insertText": "CTypeVariable(const CSymbol& Name, const CTypeBase* Type, CScope& EnclosingScope) : CDefinition(StaticDefinitionKind, EnclosingScope, Name) , CNominalType(StaticTypeKind, EnclosingScope.GetProgram()) , _Type(Type)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} const CTypeBase*)",
    "insertText": "GetType()"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (_Type = Type ; } EComparability)",
    "insertText": "GetComparability()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const CTypeType* TypeType =)",
    "insertText": "GetType() ? GetType()->GetNormalType().AsNullable<CTypeType>()"
  },
  {
    "label": "Definition()",
    "kind": "Method",
    "detail": "Function (} const CDefinition*)",
    "insertText": "Definition()"
  },
  {
    "label": "CanBeCustomAccessorDataType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeCustomAccessorDataType()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (} CExprDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIrNode(CExprDefinition* AstNode)"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (} CExprDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  }
]