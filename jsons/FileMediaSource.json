[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UFileMediaSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFileMediaSource"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BaseMediaSource . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" FileMediaSource . generated . h \" class UObject ; struct FFrame ; struct FPropertyChangedEvent ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(BlueprintReadWrite, EditAnywhere, Category=File, AssetRegistrySearchable)"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (public : const FString&)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetMediaOption()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "GetMediaOption(const FName& Key, bool DefaultValue)"
  },
  {
    "label": "HasMediaOption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMediaOption(const FName& Key)"
  },
  {
    "label": "GetUrl()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetUrl()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "ResolveFullPath()",
    "kind": "Method",
    "detail": "Function (public : FName PrecacheFileOption ; private : void)",
    "insertText": "ResolveFullPath()"
  },
  {
    "label": "ClearResolvedFullPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResolvedFullPath()"
  }
]