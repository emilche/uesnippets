[
  {
    "label": "PA_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_LOCKABLE"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SPINNING_MUTEX_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SPINNING_MUTEX_H_ # include<algorithm> # include<atomic> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / yield_processor . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/allocator/partition_allocator/partition_alloc_base/win/windows_types.h\" #endif #if BUILDFLAG(IS_POSIX) #include <errno.h> #include <pthread.h> #endif #if BUILDFLAG(IS_APPLE) #include <os/lock.h> #endif #if BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (class PA_LOCKABLE)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "SpinningMutex()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SpinningMutex()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Acquire() PA_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Release() PA_UNLOCK_FUNCTION()"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "Try() PA_EXCLUSIVE_TRYLOCK_FUNCTION(true)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "Reinit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reinit() PA_UNLOCK_FUNCTION()"
  },
  {
    "label": "AcquireSpinThenBlock()",
    "kind": "Method",
    "detail": "Function (private : PA_NOINLINE void)",
    "insertText": "AcquireSpinThenBlock() PA_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "LockSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockSlow() PA_EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (int kSpinCount = 6 4 ; # if)",
    "insertText": "defined(PA_HAS_FAST_MUTEX) #if defined(PA_HAS_LINUX_KERNEL) void FutexWait()"
  },
  {
    "label": "FutexWake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FutexWake()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int kUnlocked = 0 ; int kLockedUncontended = 1 ; int kLockedContended = 2 ; std::atomic<int32_t> state_ { kUnlocked } ; # elif)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "TrySpinLock()",
    "kind": "Method",
    "detail": "Function (# endif # else std::atomic<bool> lock_ { false } ; PA_ALWAYS_INLINE bool)",
    "insertText": "TrySpinLock()"
  },
  {
    "label": "ReleaseSpinLock()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "ReleaseSpinLock()"
  },
  {
    "label": "LockSlowSpinLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockSlowSpinLock()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (# endif } ; PA_ALWAYS_INLINE void)",
    "insertText": "Acquire()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_FAST_MUTEX) #if defined(PA_HAS_LINUX_KERNEL) PA_ALWAYS_INLINE bool SpinningMutex::Try()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int expected = kUnlocked ;)",
    "insertText": "return(state_.load(std::memory_order_relaxed) == expected) && state_.compare_exchange_weak(expected, kLockedUncontended, std::memory_order_acquire, std::memory_order_relaxed)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "Release()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} } # elif)",
    "insertText": "BUILDFLAG(IS_WIN) PA_ALWAYS_INLINE bool SpinningMutex::Try()"
  },
  {
    "label": "ReleaseSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSRWLockExclusive(reinterpret_cast<PSRWLOCK>(&lock_))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_APPLE) PA_ALWAYS_INLINE bool SpinningMutex::Try()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) PA_ALWAYS_INLINE bool SpinningMutex::Try()"
  },
  {
    "label": "pthread_mutex_trylock()",
    "kind": "Method",
    "detail": "Function (int retval =)",
    "insertText": "pthread_mutex_trylock(&lock_)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(retval == 0 || retval == EBUSY)"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (int retval =)",
    "insertText": "pthread_mutex_unlock(&lock_)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(retval == 0)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA) PA_ALWAYS_INLINE bool SpinningMutex::Try()"
  },
  {
    "label": "sync_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sync_mutex_unlock(&lock_)"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (} # endif # else PA_ALWAYS_INLINE bool)",
    "insertText": "Try()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "store(false, std::memory_order_release)"
  },
  {
    "label": "LockSlow()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "LockSlow()"
  }
]