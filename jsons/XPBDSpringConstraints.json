[
  {
    "label": "FXPBDSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDSpringConstraints"
  },
  {
    "label": "FXPBDEdgeSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDEdgeSpringConstraints"
  },
  {
    "label": "FXPBDBendingSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDBendingSpringConstraints"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" PBDWeightMap . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / SoftsSpring . h \" namespace Chaos::Softs { class FXPBDSpringConstraints : public FPBDSpringConstraintsBase { typedef FPBDSpringConstraintsBase Base ; public : FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "MinDampingRatio()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinDampingRatio(FSolverReal)"
  },
  {
    "label": "MaxDampingRatio()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDampingRatio(FSolverReal)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> FXPBDSpringConstraints( const FSolverParticlesRange& Particles, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const FSolverVec2& InStiffness, const FSolverVec2& InDampingRatio) : Base( Particles, InConstraints, StiffnessMultipliers, InStiffness, true , MaxStiffness) , DampingRatio( InDampingRatio.ClampAxes(MinDampingRatio, MaxDampingRatio), DampingMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Init((FSolverReal)0., Constraints.Num())"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(Particles)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> UE_DEPRECATED(5.4, \"XPBD Constraints must always trim kinematic constraints\") FXPBDSpringConstraints( const FSolverParticlesRange& Particles, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const FSolverVec2& InStiffness, const FSolverVec2& InDampingRatio, bool bTrimKinematicConstraints) : Base( Particles, InConstraints, StiffnessMultipliers, InStiffness, true , MaxStiffness) , DampingRatio( InDampingRatio.ClampAxes(MinDampingRatio, MaxDampingRatio), DampingMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> FXPBDSpringConstraints( const FSolverParticles& Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const FSolverVec2& InStiffness, const FSolverVec2& InDampingRatio) : Base( Particles, ParticleOffset, ParticleCount, InConstraints, StiffnessMultipliers, InStiffness, true , MaxStiffness) , DampingRatio( InDampingRatio.ClampAxes(MinDampingRatio, MaxDampingRatio), DampingMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Lambdas .)",
    "insertText": "SetNumZeroed(Constraints.Num())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> UE_DEPRECATED(5.4, \"XPBD Constraints must always trim kinematic constraints\") FXPBDSpringConstraints( const FSolverParticles& Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const FSolverVec2& InStiffness, const FSolverVec2& InDampingRatio, bool bTrimKinematicConstraints) : Base( Particles, ParticleOffset, ParticleCount, InConstraints, StiffnessMultipliers, InStiffness, true , MaxStiffness) , DampingRatio( InDampingRatio.ClampAxes(MinDampingRatio, MaxDampingRatio), DampingMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount)"
  },
  {
    "label": "FXPBDSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDSpringConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InDampingRatio = FSolverVec2::ZeroVector)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness, MaxStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (DampingRatio .)",
    "insertText": "SetWeightedValue(InDampingRatio.ClampAxes(MinDampingRatio, MaxDampingRatio))"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyXPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyXPBDValues(MaxStiffness)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (DampingRatio .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "UpdateLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinearSystem(const FSolverParticlesRange& Particles, const FSolverReal Dt, FEvolutionLinearSystem& LinearSystem)"
  },
  {
    "label": "GetConstraintsPerColorStartIndex()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetConstraintsPerColorStartIndex()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<bool bDampingBefore,bool bSingleLambda,bool bSeparateStretch,bool bDampingAfter,SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverReal StiffnessValue, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (protected : using Base::Constraints ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::Stiffness ; FPBDWeightMap DampingRatio ; private : using Base::Dists ; TArray<FSolverReal> Lambdas ; TArray<FSolverReal> LambdasDamping ; TArray<int32> ConstraintsPerColorStartIndex ; } ; class FXPBDEdgeSpringConstraints final : public FXPBDSpringConstraints { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDEdgeSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDEdgeSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : FXPBDSpringConstraints( Particles, InConstraints, WeightMaps.FindRef(GetXPBDEdgeSpringStiffnessString(PropertyCollection, XPBDEdgeSpringStiffnessName.ToString())), WeightMaps.FindRef(GetXPBDEdgeSpringDampingString(PropertyCollection, XPBDEdgeSpringDampingName.ToString())), FSolverVec2(GetWeightedFloatXPBDEdgeSpringStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDEdgeSpringDamping(PropertyCollection, MinDampingRatio))) , XPBDEdgeSpringStiffnessIndex(PropertyCollection) , XPBDEdgeSpringDampingIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDEdgeSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDEdgeSpringConstraints(const FSolverParticles& Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : FXPBDSpringConstraints( Particles, ParticleOffset, ParticleCount, InConstraints, WeightMaps.FindRef(GetXPBDEdgeSpringStiffnessString(PropertyCollection, XPBDEdgeSpringStiffnessName.ToString())), WeightMaps.FindRef(GetXPBDEdgeSpringDampingString(PropertyCollection, XPBDEdgeSpringDampingName.ToString())), FSolverVec2(GetWeightedFloatXPBDEdgeSpringStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDEdgeSpringDamping(PropertyCollection, MinDampingRatio))) , XPBDEdgeSpringStiffnessIndex(PropertyCollection) , XPBDEdgeSpringDampingIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDEdgeSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDEdgeSpringConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : using FXPBDSpringConstraints::Constraints ; using FXPBDSpringConstraints::ParticleOffset ; using FXPBDSpringConstraints::ParticleCount ; using FXPBDSpringConstraints::Stiffness ; using FXPBDSpringConstraints::DampingRatio ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDEdgeSpringStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDEdgeSpringDamping, float)"
  },
  {
    "label": "FXPBDBendingSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDBendingSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec2<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection) : FXPBDSpringConstraints( Particles, InConstraints, WeightMaps.FindRef(GetXPBDBendingSpringStiffnessString(PropertyCollection, XPBDBendingSpringStiffnessName.ToString())), WeightMaps.FindRef(GetXPBDBendingSpringDampingString(PropertyCollection, XPBDBendingSpringDampingName.ToString())), FSolverVec2(GetWeightedFloatXPBDBendingSpringStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDBendingSpringDamping(PropertyCollection, MinDampingRatio))) , XPBDBendingSpringStiffnessIndex(PropertyCollection) , XPBDBendingSpringDampingIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDBendingSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDBendingSpringConstraints(const FSolverParticles & Particles, int32 ParticleOffset, int32 ParticleCount, const TArray<TVec2<int32>>&InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>&WeightMaps, const FCollectionPropertyConstFacade & PropertyCollection) : FXPBDSpringConstraints( Particles, ParticleOffset, ParticleCount, InConstraints, WeightMaps.FindRef(GetXPBDBendingSpringStiffnessString(PropertyCollection, XPBDBendingSpringStiffnessName.ToString())), WeightMaps.FindRef(GetXPBDBendingSpringDampingString(PropertyCollection, XPBDBendingSpringDampingName.ToString())), FSolverVec2(GetWeightedFloatXPBDBendingSpringStiffness(PropertyCollection, MaxStiffness)), FSolverVec2(GetWeightedFloatXPBDBendingSpringDamping(PropertyCollection, MinDampingRatio))) , XPBDBendingSpringStiffnessIndex(PropertyCollection) , XPBDBendingSpringDampingIndex(PropertyCollection)"
  },
  {
    "label": "FXPBDBendingSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDBendingSpringConstraints()"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : using FXPBDSpringConstraints::Constraints ; using FXPBDSpringConstraints::ParticleOffset ; using FXPBDSpringConstraints::ParticleCount ; using FXPBDSpringConstraints::Stiffness ; using FXPBDSpringConstraints::DampingRatio ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBendingSpringStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDBendingSpringDamping, float)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_XPBD_SPRING_ISPC_ENABLED_DEFAULT)"
  }
]