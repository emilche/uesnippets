[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "TSpatialHashGridBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpatialHashGridBase"
  },
  {
    "label": "FPayloadAndBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayloadAndBounds"
  },
  {
    "label": "FHashIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashIndex"
  },
  {
    "label": "FHashMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashMap"
  },
  {
    "label": "FElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElement"
  },
  {
    "label": "THierarchicalSpatialHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THierarchicalSpatialHash"
  },
  {
    "label": "TSpatialHashGridPoints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpatialHashGridPoints"
  },
  {
    "label": "FVectorAABB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorAABB"
  },
  {
    "label": "FParticleProximities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleProximities"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TVec3<int32> Cell ; int32 Lod ; bool)",
    "insertText": "operator(const FHierarchicalSpatialHashCellIdx& OtherIdx)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(int32)FMath::CeilLogTwo((uint32)FMath::CeilToInt32(CellSize))"
  },
  {
    "label": "LodForAABB()",
    "kind": "Method",
    "detail": "Function (} } template<T> int32)",
    "insertText": "LodForAABB(const TAABB<T, 3>& Box)"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (const T LongestSideLen = Box .)",
    "insertText": "Extents().Max()"
  },
  {
    "label": "CellSizeForLod()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "CellSizeForLod(const int32 Lod)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(T)1 / (T)(1ULL << (-Lod))"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (} template<T> TVec3<int32>)",
    "insertText": "CellIdxForPoint(const TVec3<T>& Point, const T CellSize)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (int32 Hash = Idx . Cell [ 0 ]* 7 3 8 5 6 0 9 3 ; Hash =)",
    "insertText": "Hash(Idx.Cell[1] * 19349663)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "Hash(Idx.Cell[2] * 83492791)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "Hash(Idx.Lod * 67867979)"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS template<PayloadType> class TSpatialHashGridBase { private : struct FPayloadAndBounds { PayloadType Payload ; int32 BoundsLookupIdx ; } ; struct FHashIndex { VectorRegister4Int VectorIndex ;)",
    "insertText": "FHashIndex()"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHashIndex(const TVec3<int32>& Cell, int32 Lod) :VectorIndex(MakeVectorRegisterInt(Cell.X, Cell.Y, Cell.Z, Lod))"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHashIndex(int32 CellX, int32 CellY, int32 CellZ, int32 Lod) :VectorIndex(MakeVectorRegisterInt(CellX, CellY, CellZ, Lod))"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHashIndex(const VectorRegister4Int& InVectorIndex) :VectorIndex(InVectorIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FHashIndex& Other)"
  },
  {
    "label": "VectorIntCompareNEQ()",
    "kind": "Method",
    "detail": "Function (union { VectorRegister4Float v ; VectorRegister4Int i ; } Result ; Result . i =)",
    "insertText": "VectorIntCompareNEQ(VectorIndex, Other.VectorIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "MakeVectorRegisterIntConstant()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int Multiplier =)",
    "insertText": "MakeVectorRegisterIntConstant(73856093, 19349663, 83492791, 67867979)"
  },
  {
    "label": "VectorIntMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Int Multiplied =)",
    "insertText": "VectorIntMultiply(VectorIndex, Multiplier)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(VectorRegister4Int)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorIntStoreAligned(Multiplied, Indexable)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } ; class FHashMap { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "PreallocateElementsForConcurrentAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreallocateElementsForConcurrentAdd(int32 MaxNumElements, int32 HashSize)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (HashSize =)",
    "insertText": "RoundUpToPowerOfTwo(HashSize)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "SetNumUninitialized(HashSize)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (H .)",
    "insertText": "store(INDEX_NONE, std::memory_order_relaxed)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} Elements .)",
    "insertText": "SetNumUninitialized(MaxNumElements)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (ConcurrentElementAddIdx .)",
    "insertText": "store(0)"
  },
  {
    "label": "ConcurrentAddElementRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConcurrentAddElementRange(const TVec3<int32>& MinCellIdx, const TVec3<int32>& MaxCellIdx, int32 Lod, const FPayloadAndBounds& Value)"
  },
  {
    "label": "NumElementsToAdd()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumElementsToAdd(MaxCellIdx[0] - MinCellIdx[0] + 1) * (MaxCellIdx[1] - MinCellIdx[1] + 1) * (MaxCellIdx[2] - MinCellIdx[2] + 1)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (int32 IndexToWrite = ConcurrentElementAddIdx .)",
    "insertText": "fetch_add(NumElementsToAdd, std::memory_order_relaxed)"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (FElement Element ; Element . Key =)",
    "insertText": "FHashIndex(XIdx, YIdx, ZIdx, Lod)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 HashKey = Element . Key .)",
    "insertText": "GetTypeHash() & (Hash.Num() - 1)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (Element . NextIndex = Hash [ HashKey ] .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Element . Value = Value ; Elements [ IndexToWrite ] =)",
    "insertText": "MoveTemp(Element)"
  },
  {
    "label": "ConcurrentAddElement()",
    "kind": "Method",
    "detail": "Function (+ + IndexToWrite ; } } } } } int32)",
    "insertText": "ConcurrentAddElement(const TVec3<int32>& CellIdx, int32 Lod, const FPayloadAndBounds& Value)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (const int32 IndexToWrite = ConcurrentElementAddIdx .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "FHashIndex()",
    "kind": "Method",
    "detail": "Function (FElement Element ; Element . Key =)",
    "insertText": "FHashIndex(CellIdx, Lod)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "SetNum(ConcurrentElementAddIdx.load(), EAllowShrinking::No)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "First(const FHashIndex& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 HashKey = Key .)",
    "insertText": "GetTypeHash() &(Hash.Num() - 1)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Next(int32 Index)"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (} TVec3<int32>)",
    "insertText": "CellIdxForPoint(const VectorRegister4Float& Point, const VectorRegister4Float& CellSize)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Tmp =)",
    "insertText": "VectorDivide(Point, CellSize)"
  },
  {
    "label": "VectorRoundToIntHalfToEven()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int CellVector =)",
    "insertText": "VectorRoundToIntHalfToEven(VectorAdd(Tmp, VectorSubtract(Tmp, GlobalVectorConstants::FloatOneHalf)))"
  },
  {
    "label": "VectorShiftRightImmArithmetic()",
    "kind": "Method",
    "detail": "Function (CellVector =)",
    "insertText": "VectorShiftRightImmArithmetic(CellVector, 1)"
  },
  {
    "label": "VectorIntStore()",
    "kind": "Method",
    "detail": "Function (TVec4<int32> Result4 ;)",
    "insertText": "VectorIntStore(CellVector, &Result4[0])"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (} TVec3<int32>)",
    "insertText": "CellIdxForPoint(const VectorRegister4Double& Point, const VectorRegister4Double& CellSize)"
  },
  {
    "label": "VectorRoundToIntHalfToEven()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Int CellVector =)",
    "insertText": "VectorRoundToIntHalfToEven(MakeVectorRegisterFloatFromDouble(VectorAdd(Tmp, VectorSubtract(Tmp, GlobalVectorConstants::DoubleOneHalf))))"
  },
  {
    "label": "LodForCellSize()",
    "kind": "Method",
    "detail": "Function (} template<PT,T> class THierarchicalSpatialHash ; template<PT,T> class TSpatialHashGridPoints ; } ; template<PayloadType,T> class THierarchicalSpatialHash : public TSpatialHashGridBase<PayloadType> { typedef TSpatialHashGridBase<PayloadType> Base ; using Base::FPayloadAndBounds ; using Base::FHashMap ; using Base::FHashIndex ; using Base::HashMap ; int32)",
    "insertText": "LodForCellSize(T CellSize)"
  },
  {
    "label": "FVectorAABB()",
    "kind": "Method",
    "detail": "Function (} public : class FVectorAABB { public :)",
    "insertText": "FVectorAABB()"
  },
  {
    "label": "FVectorAABB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVectorAABB(const TAABB<T, 3>& BBox) : Min(MakeVectorRegister(BBox.Min()[0], BBox.Min()[1], BBox.Min()[2], (T)0.)) , Max(MakeVectorRegister(BBox.Max()[0], BBox.Max()[1], BBox.Max()[2], (T)0.))"
  },
  {
    "label": "FVectorAABB()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorAABB(const TVec3<T>& Point) : Min(MakeVectorRegister(Point[0], Point[1], Point[2], (T)0.)) , Max(Min)"
  },
  {
    "label": "FVectorAABB()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorAABB(const TVec3<T>& Point, const T Radius) : Min(MakeVectorRegister(Point[0], Point[1], Point[2], (T)0.)) , Max(Min)"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thicken(Radius)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GrowToInclude(const TVec3<T>& Point)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (const TVectorRegisterType<T> Vector =)",
    "insertText": "MakeVectorRegister(Point[0], Point[1], Point[2], (T)0)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Min =)",
    "insertText": "VectorMin(Min, Vector)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "VectorMax(Max, Vector)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GrowToInclude(const TVec3<T>& Point, const T Radius)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (const TVectorRegisterType<T> ThicknessVec =)",
    "insertText": "MakeVectorRegister(Radius, Radius, Radius, (T)0)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Min =)",
    "insertText": "VectorMin(Min, VectorSubtract(Vector, ThicknessVec))"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "VectorMax(Max, VectorAdd(Vector, ThicknessVec))"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Thicken(const T Thickness)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (const TVectorRegisterType<T> ThicknessVec =)",
    "insertText": "MakeVectorRegister(Thickness, Thickness, Thickness, (T)0)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (Min =)",
    "insertText": "VectorSubtract(Min, ThicknessVec)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "VectorAdd(Max, ThicknessVec)"
  },
  {
    "label": "LongestSideLength()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "LongestSideLength()"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const TVectorRegisterType<T> ExtentsVector =)",
    "insertText": "VectorSubtract(Max, Min)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVec3<T> Extents ;)",
    "insertText": "VectorStoreFloat3(ExtentsVector, &Extents)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (} const TVectorRegisterType<T>&)",
    "insertText": "GetMin()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} template<ParticlesType> void)",
    "insertText": "Initialize(const ParticlesType& Particles, const T MinLodSize = (T)0)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(HierarchicalSpatialHash_Init)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Bounds .)",
    "insertText": "SetNumUninitialized(Particles.Num())"
  },
  {
    "label": "PreallocateElementsForConcurrentAdd()",
    "kind": "Method",
    "detail": "Function (HashMap .)",
    "insertText": "PreallocateElementsForConcurrentAdd(Particles.Num() * 8, Particles.Num() * 2)"
  },
  {
    "label": "MinLodSize()",
    "kind": "Method",
    "detail": "Function (const int32 MinAllowableLod =)",
    "insertText": "MinLodSize(T)0 ? LodForCellSize(MinLodSize) : std::numeric_limits<int32>::min()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (int32 MaxPreAllocatedUsedLodValue = 1 0 ; int32 MinPreAllocatedUsedLodValue = - 1 0 ; TStaticArray<bool,MaxPreAllocatedUsedLodValue - MinPreAllocatedUsedLodValue + 1> UsedLodsArray ;)",
    "insertText": "memset(UsedLodsArray.GetData(), 0, UsedLodsArray.Num() * sizeof(bool))"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (FCriticalSection UsedLodsCriticalSection ;)",
    "insertText": "PhysicsParallelFor(Particles.Num(), [this, &Particles, MinAllowableLod, MaxPreAllocatedUsedLodValue, MinPreAllocatedUsedLodValue, &UsedLodsArray, &UsedLodsCriticalSection](int32 ParticleIdx) { const auto& Particle = Particles[ParticleIdx]; const FVectorAABB ParticleBounds = Particle.VectorAABB(); const int32 Lod = FMath::Max(MinAllowableLod, LodForCellSize(ParticleBounds.LongestSideLength())); const T CellSize = CellSizeForLod(Lod); const TVectorRegisterType<T> CellSizeVector = MakeVectorRegister(CellSize, CellSize, CellSize, CellSize); const PayloadType Payload = Particle.template GetPayload<PayloadType>(ParticleIdx); const TVec3<int32> MinCellIdx = Base::CellIdxForPoint(ParticleBounds.GetMin(), CellSizeVector); const TVec3<int32> MaxCellIdx = Base::CellIdxForPoint(ParticleBounds.GetMax(), CellSizeVector); const FPayloadAndBounds Value = { Payload, ParticleIdx }; HashMap.ConcurrentAddElementRange(MinCellIdx, MaxCellIdx, Lod, Value); Bounds[ParticleIdx] = ParticleBounds; if (Lod >= MinPreAllocatedUsedLodValue && Lod <= MaxPreAllocatedUsedLodValue) { UsedLodsArray[Lod - MinPreAllocatedUsedLodValue] = true; } else { UsedLodsCriticalSection.Lock(); UsedLods.Add(Lod, CellSize); UsedLodsCriticalSection.Unlock(); } })"
  },
  {
    "label": "ShrinkElementsAfterConcurrentAdd()",
    "kind": "Method",
    "detail": "Function (HashMap .)",
    "insertText": "ShrinkElementsAfterConcurrentAdd()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UsedLods .)",
    "insertText": "Add(Lod, CellSizeForLod(Lod))"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} } } TArray<PayloadType>)",
    "insertText": "FindAllIntersections(const FVectorAABB LookupBounds, TFunctionRef<bool(const int32 Payload)> BroadphaseTest)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<PayloadType> Result ;)",
    "insertText": "for(const typename TMap<int32, T>::ElementType& UsedLod : UsedLods)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (const int32 Lod = UsedLod . Key ; const TVectorRegisterType<T> CellSize =)",
    "insertText": "MakeVectorRegister(UsedLod.Value, UsedLod.Value, UsedLod.Value, UsedLod.Value)"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (const TVec3<int32> MinCellIdx =)",
    "insertText": "CellIdxForPoint(LookupBounds.GetMin(), CellSize)"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (const TVec3<int32> MaxCellIdx =)",
    "insertText": "CellIdxForPoint(LookupBounds.GetMax(), CellSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FHashIndex Key { { XIdx,YIdx,ZIdx },Lod } ;)",
    "insertText": "for(int32 HashIndex = HashMap.First(Key); HashMap.IsValid(HashIndex); HashIndex = HashMap.Next(HashIndex))"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FPayloadAndBounds& Value = HashMap .)",
    "insertText": "GetValue(HashIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } const FVectorAABB& PayloadBounds = Bounds [ Value . BoundsLookupIdx ] ;)",
    "insertText": "if(PayloadBounds.Intersects(LookupBounds))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "AddUnique(Value.Payload)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} } } } } } } return Result ; } TArray<PayloadType>)",
    "insertText": "FindAllIntersections(const TAABB<T, 3>& LookupBounds)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} TArray<PayloadType>)",
    "insertText": "FindAllIntersections(const TVec3<T>& Point)"
  },
  {
    "label": "PointVec()",
    "kind": "Method",
    "detail": "Function (TVectorRegisterType<T>)",
    "insertText": "PointVec(MakeVectorRegister(Point.X, Point.Y, Point.Z, (T)0))"
  },
  {
    "label": "CellIdxForPoint()",
    "kind": "Method",
    "detail": "Function (const TVec3<int32> CellIdx =)",
    "insertText": "CellIdxForPoint(PointVec, CellSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVectorAABB& PayloadBounds = Bounds [ Value . BoundsLookupIdx ] ;)",
    "insertText": "if(PayloadBounds.Intersects(PointVec))"
  },
  {
    "label": "TSpatialHashGridPoints()",
    "kind": "Method",
    "detail": "Function (} } } } return Result ; } private : TMap<int32,T> UsedLods ; TArray<FVectorAABB> Bounds ; } ; template<PayloadType,T> class TSpatialHashGridPoints : public TSpatialHashGridBase<PayloadType> { typedef TSpatialHashGridBase<PayloadType> Base ; using Base::FPayloadAndBounds ; using Base::FHashMap ; using Base::FHashIndex ; using Base::HashMap ; public :)",
    "insertText": "TSpatialHashGridPoints(const T InCellSize) : Base() , CellSize(MakeVectorRegister(InCellSize, InCellSize, InCellSize, InCellSize))"
  },
  {
    "label": "InitializePoints()",
    "kind": "Method",
    "detail": "Function (} template<ParticlesType> void)",
    "insertText": "InitializePoints(const ParticlesType& Particles)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(SpatialHashGridConstantBounds_Init)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleIndexToElement .)",
    "insertText": "SetNum(Particles.Num())"
  },
  {
    "label": "PreallocateElementsForConcurrentAdd()",
    "kind": "Method",
    "detail": "Function (HashMap .)",
    "insertText": "PreallocateElementsForConcurrentAdd(Particles.Num(), Particles.Num())"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Particles.Num(), [this, &Particles](int32 ParticleIdx) { const auto& Particle = Particles[ParticleIdx]; const PayloadType Payload = Particle.template GetPayload<PayloadType>(ParticleIdx); const auto& ParticleX = Particle.X(); const TVec3<int32> CellIdx = Base::CellIdxForPoint(MakeVectorRegister(ParticleX[0], ParticleX[1], ParticleX[2], 0), CellSize); const FPayloadAndBounds Value = { Payload, ParticleIdx }; const int32 ElementIdx = HashMap.ConcurrentAddElement(CellIdx, INDEX_NONE, Value); ParticleIndexToElement[ParticleIdx] = ElementIdx; })"
  },
  {
    "label": "FindAllSelfProximities()",
    "kind": "Method",
    "detail": "Function (} TArray<TVec2<PayloadType>>)",
    "insertText": "FindAllSelfProximities(int32 CellRadius, int32 MaxNumExpectedConnections, TFunctionRef<bool(const int32 Payload0, const int32 Payload1)> NarrowTest)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (struct FParticleProximities { const int32 CellRadius ; TFunctionRef<)",
    "insertText": "bool(const int32 Payload0, const int32 Payload1)"
  },
  {
    "label": "FParticleProximities()",
    "kind": "Method",
    "detail": "Function (const FHashMap& HashMap ; const TArray<int32>& ParticleIndexToElement ; TArray<TVec2<PayloadType>> Result ; std::atomic<int32> ResultIndex ; std::atomic<int32> CurrentResultNum ; FRWLock ResultResizeRWLock ;)",
    "insertText": "FParticleProximities(const int32 InCellRadius, const int32 InMaxNumExpectedConnections, TFunctionRef<bool(const int32 Payload0, const int32 Payload1)> InNarrowTest, const FHashMap& InHashMap, const TArray<int32>& InParticleIndexToElement) :CellRadius(InCellRadius), NarrowTest(InNarrowTest), HashMap(InHashMap), ParticleIndexToElement(InParticleIndexToElement), ResultIndex(0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNum(InMaxNumExpectedConnections)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNum(Result.Max())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (CurrentResultNum .)",
    "insertText": "store(Result.Num())"
  },
  {
    "label": "AddResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddResult(const TVec2<PayloadType>& Proximity)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (ResultResizeRWLock .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (Result [ NewResultIndex ] = Proximity ; ResultResizeRWLock .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (} else { ResultResizeRWLock .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNum(NewResultIndex + 1)"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (} Result [ NewResultIndex ] = Proximity ; ResultResizeRWLock .)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "AddResultsInCell()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddResultsInCell(PayloadType ThisPayload, const FHashIndex& Cell)"
  },
  {
    "label": "AddResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResult(TVec2<PayloadType>(ThisPayload, HashMap.GetValue(HashIndex).Payload))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "operator()(int32 ParticleIdx)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const int32 ThisElementIdx = ParticleIndexToElement [ ParticleIdx ] ; const int32 ThisPayload = HashMap .)",
    "insertText": "GetValue(ThisElementIdx)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FHashIndex& ThisKey = HashMap .)",
    "insertText": "GetKey(ThisElementIdx)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (int32 OtherElementIdx = HashMap .)",
    "insertText": "Next(ThisElementIdx)"
  },
  {
    "label": "AddResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResult(TVec2<PayloadType>(ThisPayload, HashMap.GetValue(OtherElementIdx).Payload))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 ZIndex = 1; ZIndex <= CellRadius; ++ZIndex)"
  },
  {
    "label": "AddResultsInCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResultsInCell(ThisPayload, FHashIndex(VectorIntAdd(ThisKey.VectorIndex, MakeVectorRegisterInt(0, 0, ZIndex, 0))))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 YIndex = 1; YIndex <= CellRadius; ++YIndex)"
  },
  {
    "label": "AddResultsInCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResultsInCell(ThisPayload, FHashIndex(VectorIntAdd(ThisKey.VectorIndex, MakeVectorRegisterInt(0, YIndex, ZIndex, 0))))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 XIndex = 1; XIndex <= CellRadius; ++XIndex)"
  },
  {
    "label": "AddResultsInCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResultsInCell(ThisPayload, FHashIndex(VectorIntAdd(ThisKey.VectorIndex, MakeVectorRegisterInt(XIndex, YIndex, ZIndex, 0))))"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} } } } } ConcurrentResults { CellRadius,MaxNumExpectedConnections,NarrowTest,HashMap,ParticleIndexToElement } ;)",
    "insertText": "PhysicsParallelFor(ParticleIndexToElement.Num(), ConcurrentResults)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (const int32 ResultNum = ConcurrentResults . ResultIndex .)",
    "insertText": "load()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConcurrentResults . Result .)",
    "insertText": "SetNum(ResultNum, EAllowShrinking::Yes)"
  }
]