[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AdaptiveDigitalGainController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdaptiveDigitalGainController"
  },
  {
    "label": "AdaptiveDigitalGainController()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_CONTROLLER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_CONTROLLER_H_ # include<memory> # include \" absl / types / optional . h \" # include \" modules / audio_processing / agc2 / adaptive_digital_gain_applier . h \" # include \" modules / audio_processing / agc2 / noise_level_estimator . h \" # include \" modules / audio_processing / agc2 / saturation_protector . h \" # include \" modules / audio_processing / agc2 / speech_level_estimator . h \" # include \" modules / audio_processing / include / audio_frame_view . h \" # include \" modules / audio_processing / include / audio_processing . h \" namespace webrtc { class ApmDataDumper ; class AdaptiveDigitalGainController { public :)",
    "insertText": "AdaptiveDigitalGainController(ApmDataDumper* apm_data_dumper, const AudioProcessing::Config::GainController2::AdaptiveDigital& config, int sample_rate_hz, int num_channels)"
  },
  {
    "label": "AdaptiveDigitalGainController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptiveDigitalGainController(const AdaptiveDigitalGainController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AdaptiveDigitalGainController&)",
    "insertText": "operator(const AdaptiveDigitalGainController&)"
  },
  {
    "label": "AdaptiveDigitalGainController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AdaptiveDigitalGainController()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int sample_rate_hz, int num_channels)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(AudioFrameView<float> frame, float speech_probability, float limiter_envelope)"
  },
  {
    "label": "HandleInputGainChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputGainChange()"
  },
  {
    "label": "GetSpeechLevelDbfsIfConfident()",
    "kind": "Method",
    "detail": "Function (absl::optional<float>)",
    "insertText": "GetSpeechLevelDbfsIfConfident()"
  }
]