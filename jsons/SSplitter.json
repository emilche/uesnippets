[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLayoutGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutGeometry"
  },
  {
    "label": "SSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplitter"
  },
  {
    "label": "ESizeRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESizeRule"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSplitter2x2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplitter2x2"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments)",
    "insertText": "AddSlot( int32 AtIndex = INDEX_NONE )"
  },
  {
    "label": "SSplitter()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "SSplitter()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt( int32 IndexToRemove )"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation( EOrientation NewOrientation )"
  },
  {
    "label": "FindResizeableSlotBeforeHandle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindResizeableSlotBeforeHandle( int32 DraggedHandle, const TPanelChildren<FSlot>& Children )"
  },
  {
    "label": "FindResizeableSlotAfterHandle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindResizeableSlotAfterHandle( int32 DraggedHandle, const TPanelChildren<FSlot>& Children )"
  },
  {
    "label": "FindAllResizeableSlotsAfterHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllResizeableSlotsAfterHandle( int32 DraggedHandle, const TPanelChildren<FSlot>& Children, TArray<int32, FConcurrentLinearArrayAllocator>& OutSlotIndicies )"
  },
  {
    "label": "HandleResizingByMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingByMousePosition(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, const FVector2D& LocalMousePos, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries )"
  },
  {
    "label": "HandleResizingDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingDelta(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, float Delta, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "HandleResizingBySize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingBySize(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, const FVector2D& DesiredSize, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "GetHandleBeingResizedFromMousePosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHandleBeingResizedFromMousePosition(  float PhysicalSplitterHandleSize, float HitDetectionSplitterHandleSize, FVector2D LocalMousePos, const TArray<FLayoutGeometry>& ChildGeometries )"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FSlot(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArg)"
  },
  {
    "label": "SSplitter2x2()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "SSplitter2x2()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "SetTopLeftContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTopLeftContent( TSharedRef< SWidget > TopLeftContent )"
  },
  {
    "label": "SetBottomLeftContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBottomLeftContent( TSharedRef< SWidget > BottomLeftContent )"
  },
  {
    "label": "SetTopRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTopRightContent( TSharedRef< SWidget > TopRightContent )"
  },
  {
    "label": "SetBottomRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBottomRightContent( TSharedRef< SWidget > BottomRightContent )"
  },
  {
    "label": "SetSplitterPercentages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplitterPercentages( TArrayView< FVector2D > InPercentages )"
  },
  {
    "label": "ResizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeChildren( const FGeometry& MyGeometry, const TArray<FLayoutGeometry>& ArrangedChildren, const FVector2D& LocalMousePos )"
  }
]