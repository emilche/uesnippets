[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLayoutGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutGeometry"
  },
  {
    "label": "SSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplitter"
  },
  {
    "label": "ESizeRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESizeRule"
  },
  {
    "label": "SLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSplitter2x2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplitter2x2"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / LayoutGeometry . h \" # include \" Widgets / SWidget . h \" # include \" SlotBase . h \" # include \" Layout / Children . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / SPanel . h \" # include \" Styling / SlateTypes . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; namespace ESplitterResizeMode { enum Type { FixedPosition,FixedSize,Fill,} ; } class FLayoutGeometry ; class SSplitter : public SPanel { public : enum ESizeRule { SizeToContent,FractionOfParent } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSlotResized, float)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FVector2D, FOnGetMaxSlotSize, int32)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (public : class FSlot : public TSlotBase<FSlot> { public :)",
    "insertText": "FSlot() : TSlotBase<FSlot>() , SizingRule( FractionOfParent ) , SizeValue( 1 ) , MinSizeValue( 0)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TSlotBase<FSlot>) SLATE_ATTRIBUTE(ESizeRule, SizeRule) SLATE_ATTRIBUTE(float, Value) SLATE_ATTRIBUTE(float, MinSize) SLATE_ARGUMENT(TOptional<bool>, Resizable) SLATE_EVENT(FOnSlotResized, OnSlotResized) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "SetSizeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeValue(TAttribute<float> InValue)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SizeValue =)",
    "insertText": "MoveTemp(InValue)"
  },
  {
    "label": "GetSizeValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSizeValue()"
  },
  {
    "label": "SetResizable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResizable(bool bInIsResizable)"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bIsResizable = bInIsResizable ; } bool)",
    "insertText": "IsResizable()"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinSize(float InMinSize)"
  },
  {
    "label": "GetMinSize()",
    "kind": "Method",
    "detail": "Function (MinSizeValue = InMinSize ; } float)",
    "insertText": "GetMinSize()"
  },
  {
    "label": "OnSlotResized()",
    "kind": "Method",
    "detail": "Function (} FOnSlotResized&)",
    "insertText": "OnSlotResized()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SizingRule =)",
    "insertText": "MoveTemp(InSizeRule)"
  },
  {
    "label": "GetSizingRule()",
    "kind": "Method",
    "detail": "Function (} ESizeRule)",
    "insertText": "GetSizingRule()"
  },
  {
    "label": "CanBeResized()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "CanBeResized()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (private : TAttribute<ESizeRule> SizingRule ; TAttribute<float> SizeValue ; TAttribute<float> MinSizeValue ; FOnSlotResized OnSlotResized_Handler ; TOptional<bool> bIsResizable ; } ; FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot(int32 AtIndex = INDEX_NONE)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnHandleHovered, int32)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSplitter) : _Style( &FCoreStyle::Get().GetWidgetStyle<FSplitterStyle>(\"Splitter\") ) , _Orientation( Orient_Horizontal ) , _ResizeMode( ESplitterResizeMode::FixedPosition ) , _PhysicalSplitterHandleSize( 5.0f ) , _HitDetectionSplitterHandleSize( 5.0f ) , _MinimumSlotHeight( 20.0f ) , _OnSplitterFinishedResizing()"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_STYLE_ARGUMENT( FSplitterStyle, Style ) SLATE_ARGUMENT( EOrientation, Orientation ) SLATE_ARGUMENT( ESplitterResizeMode::Type, ResizeMode ) SLATE_ARGUMENT( float, PhysicalSplitterHandleSize ) SLATE_ARGUMENT( float, HitDetectionSplitterHandleSize ) SLATE_ARGUMENT( float, MinimumSlotHeight ) SLATE_ATTRIBUTE( int32, HighlightedHandleIndex ) SLATE_EVENT( FOnHandleHovered, OnHandleHovered ) SLATE_EVENT( FSimpleDelegate, OnSplitterFinishedResizing ) SLATE_EVENT( FOnGetMaxSlotSize, OnGetMaxSlotSize ) SLATE_END_ARGS() SLATE_API SSplitter()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SlotAt()",
    "kind": "Method",
    "detail": "Function (public : SSplitter::FSlot&)",
    "insertText": "SlotAt(int32 SlotIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(int32 IndexToRemove)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation NewOrientation)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "ArrangeChildrenForLayout()",
    "kind": "Method",
    "detail": "Function (private : TArray<FLayoutGeometry>)",
    "insertText": "ArrangeChildrenForLayout(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "FindResizeableSlotBeforeHandle()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "FindResizeableSlotBeforeHandle(int32 DraggedHandle, const TPanelChildren<FSlot>& Children)"
  },
  {
    "label": "FindResizeableSlotAfterHandle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindResizeableSlotAfterHandle(int32 DraggedHandle, const TPanelChildren<FSlot>& Children)"
  },
  {
    "label": "FindAllResizeableSlotsAfterHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllResizeableSlotsAfterHandle(int32 DraggedHandle, const TPanelChildren<FSlot>& Children, TArray<int32, FConcurrentLinearArrayAllocator>& OutSlotIndicies)"
  },
  {
    "label": "HandleResizingByMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingByMousePosition(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, const FVector2D& LocalMousePos, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "HandleResizingDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingDelta(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, float Delta, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "HandleResizingBySize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResizingBySize(EOrientation Orientation, const float PhysicalSplitterHandleSize, const ESplitterResizeMode::Type ResizeMode, int32 DraggedHandle, const FVector2D& DesiredSize, TPanelChildren<FSlot>& Children, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "ClampChild()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ClampChild(const FSlot& ChildSlot, float ProposedSize)"
  },
  {
    "label": "GetHandleBeingResizedFromMousePosition()",
    "kind": "Method",
    "detail": "Function (template<EOrientation SplitterOrientation> int32)",
    "insertText": "GetHandleBeingResizedFromMousePosition(float PhysicalSplitterHandleSize, float HitDetectionSplitterHandleSize, FVector2D LocalMousePos, const TArray<FLayoutGeometry>& ChildGeometries)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (TPanelChildren<FSlot> Children ; int32 HoveredHandleIndex ; TSlateAttribute<int32,EInvalidateWidgetReason::Paint> HighlightedHandleIndex ; bool bIsResizing ; EOrientation Orientation ; ESplitterResizeMode::Type ResizeMode ; FSimpleDelegate OnSplitterFinishedResizing ; FOnGetMaxSlotSize OnGetMaxSlotSize ; FOnHandleHovered OnHandleHovered ; float MinSplitterChildLength ; float PhysicalSplitterHandleSize ; float HitDetectionSplitterHandleSize ; const FSplitterStyle* Style ; } ; enum class EResizingAxis : uint8 { None = 0 x00,LeftRightMask = 0 x01,UpDownMask = 0 x10,CrossMask = UpDownMask | LeftRightMask } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EResizingAxis)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SSplitter2x2 : public SPanel { private : class FSlot : public TSlotBase<FSlot> { public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TSlotBase<FSlot>) SLATE_ATTRIBUTE(FVector2D, Percentage) SLATE_SLOT_END_ARGS() void SetPercentage( const FVector2D& Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (PercentageAttribute .)",
    "insertText": "Set(Value)"
  },
  {
    "label": "GetPercentage()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetPercentage()"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlot(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArg)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TAttribute<FVector2D> PercentageAttribute ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSplitter2x2 ) : _Style(&FCoreStyle::Get().GetWidgetStyle<FSplitterStyle>(\"Splitter\"))"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FSplitterStyle, Style) SLATE_NAMED_SLOT( FArguments, TopLeft ) SLATE_NAMED_SLOT( FArguments, BottomLeft ) SLATE_NAMED_SLOT( FArguments, TopRight ) SLATE_NAMED_SLOT( FArguments, BottomRight ) SLATE_END_ARGS() SLATE_API SSplitter2x2()"
  },
  {
    "label": "GetTopLeftContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetTopLeftContent()"
  },
  {
    "label": "GetBottomLeftContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetBottomLeftContent()"
  },
  {
    "label": "GetTopRightContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetTopRightContent()"
  },
  {
    "label": "GetBottomRightContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetBottomRightContent()"
  },
  {
    "label": "SetTopLeftContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTopLeftContent(TSharedRef< SWidget > TopLeftContent)"
  },
  {
    "label": "SetBottomLeftContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBottomLeftContent(TSharedRef< SWidget > BottomLeftContent)"
  },
  {
    "label": "SetTopRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTopRightContent(TSharedRef< SWidget > TopRightContent)"
  },
  {
    "label": "SetBottomRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBottomRightContent(TSharedRef< SWidget > BottomRightContent)"
  },
  {
    "label": "GetSplitterPercentages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSplitterPercentages(TArray< FVector2D >& OutPercentages)"
  },
  {
    "label": "SetSplitterPercentages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplitterPercentages(TArrayView< FVector2D > InPercentages)"
  },
  {
    "label": "CalculateResizingAxis()",
    "kind": "Method",
    "detail": "Function (EResizingAxis)",
    "insertText": "CalculateResizingAxis(const FGeometry& MyGeometry, const FVector2D& LocalMousePos)"
  },
  {
    "label": "ResizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeChildren(const FGeometry& MyGeometry, const TArray<FLayoutGeometry>& ArrangedChildren, const FVector2D& LocalMousePos)"
  }
]