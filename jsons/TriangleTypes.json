[
  {
    "label": "TTriangle2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTriangle2"
  },
  {
    "label": "TTriangle3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTriangle3"
  },
  {
    "label": "TTetrahedron3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTetrahedron3"
  },
  {
    "label": "EquilateralEdgeLengthForArea()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include \" IndexTypes . h \" # include \" BoxTypes . h \" # include \" SegmentTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; namespace TriangleUtil { template<RealType> RealType)",
    "insertText": "EquilateralEdgeLengthForArea(RealType TriArea)"
  },
  {
    "label": "TTriangle2()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> struct TTriangle2 { TVector2<RealType> V [ 3 ] ;)",
    "insertText": "TTriangle2()"
  },
  {
    "label": "TTriangle2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTriangle2(const TVector2<RealType>& V0, const TVector2<RealType>& V1, const TVector2<RealType>& V2)"
  },
  {
    "label": "TTriangle2()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = V0 ; V [ 1 ] = V1 ; V [ 2 ] = V2 ; })",
    "insertText": "TTriangle2(const TVector2<RealType> VIn[3])"
  },
  {
    "label": "BarycentricPoint()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = VIn [ 0 ] ; V [ 1 ] = VIn [ 1 ] ; V [ 2 ] = VIn [ 2 ] ; } TVector2<RealType>)",
    "insertText": "BarycentricPoint(RealType Bary0, RealType Bary1, RealType Bary2)"
  },
  {
    "label": "SignedArea()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "SignedArea(const TVector2<RealType>& A, const TVector2<RealType>& B, const TVector2<RealType>& C)"
  },
  {
    "label": "SignedArea()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "SignedArea()"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Area()"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInside(const TVector2<RealType>& A, const TVector2<RealType>& B, const TVector2<RealType>& C, const TVector2<RealType>& QueryPoint)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (RealType Sign1 =)",
    "insertText": "Orient(A, B, QueryPoint)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (RealType Sign2 =)",
    "insertText": "Orient(B, C, QueryPoint)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (RealType Sign3 =)",
    "insertText": "Orient(C, A, QueryPoint)"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInside(const TVector2<RealType>& QueryPoint)"
  },
  {
    "label": "IsInsideOrOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInsideOrOn(const TVector2<RealType>& A, const TVector2<RealType>& B, const TVector2<RealType>& C, const TVector2<RealType>& QueryPoint, RealType Tolerance = (RealType)0)"
  },
  {
    "label": "GetSide()",
    "kind": "Method",
    "detail": "Function (RealType Sign1 = TSegment2<RealType)",
    "insertText": "GetSide(A, B, QueryPoint, Tolerance)"
  },
  {
    "label": "GetSide()",
    "kind": "Method",
    "detail": "Function (RealType Sign2 = TSegment2<RealType)",
    "insertText": "GetSide(B, C, QueryPoint, Tolerance)"
  },
  {
    "label": "GetSide()",
    "kind": "Method",
    "detail": "Function (RealType Sign3 = TSegment2<RealType)",
    "insertText": "GetSide(C, A, QueryPoint, Tolerance)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "ensure(false)"
  },
  {
    "label": "IsInsideOrOn()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsInsideOrOn(const TVector2<RealType>& QueryPoint, RealType Tolerance = 0)"
  },
  {
    "label": "IsInsideOrOn_Oriented()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsInsideOrOn_Oriented(const TVector2<RealType>& QueryPoint, RealType Tolerance = (RealType)0)"
  },
  {
    "label": "IsInsideOrOn_Oriented()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "IsInsideOrOn_Oriented(const TVector2<RealType>& A, const TVector2<RealType>& B, const TVector2<RealType>& C, const TVector2<RealType>& QueryPoint, RealType Tolerance = (RealType)0)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bool bIsOnEdge = false ;)",
    "insertText": "switch(NumZero)"
  },
  {
    "label": "DistSquared()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : bIsOnEdge = Sign1 ! = 0 ? TVector2<RealType)",
    "insertText": "DistSquared(QueryPoint, C) <= Tolerance * Tolerance : Sign2 != 0 ? TVector2<RealType>::DistSquared(QueryPoint, A) <= Tolerance * Tolerance : TVector2<RealType>::DistSquared(QueryPoint, B)"
  },
  {
    "label": "IsOnSegment()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : bIsOnEdge = TSegment2<RealType)",
    "insertText": "IsOnSegment(A, B, QueryPoint, Tolerance) || TSegment2<RealType>::IsOnSegment(B, C, QueryPoint, Tolerance)"
  },
  {
    "label": "TTriangle3()",
    "kind": "Method",
    "detail": "Function (} return bIsOnEdge ? 0 : 1 ; } } ; typedef TTriangle2<float> FTriangle2f ; typedef TTriangle2<double> FTriangle2d ; template<RealType> struct TTriangle3 { TVector<RealType> V [ 3 ] ;)",
    "insertText": "TTriangle3()"
  },
  {
    "label": "TTriangle3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTriangle3(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2)"
  },
  {
    "label": "TTriangle3()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = V0 ; V [ 1 ] = V1 ; V [ 2 ] = V2 ; })",
    "insertText": "TTriangle3(const TVector<RealType> VIn[3])"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Normal()"
  },
  {
    "label": "Centroid()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "Centroid()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType f = 1 . 0 / 3 . 0 ; return TVector<)",
    "insertText": "RealType((V[0].X + V[1].X + V[2].X) * f, (V[0].Y + V[1].Y + V[2].Y) * f, (V[0].Z + V[1].Z + V[2].Z) * f)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Expand(RealType Delta)"
  },
  {
    "label": "Centroid()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "Centroid(Centroid())"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] + =)",
    "insertText": "Delta((V[0] - Centroid).Normalized())"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (V [ 1 ] + =)",
    "insertText": "Delta((V[1] - Centroid).Normalized())"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (V [ 2 ] + =)",
    "insertText": "Delta((V[2] - Centroid).Normalized())"
  },
  {
    "label": "GetTetFaceOrdering()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TTriangle3<float> FTriangle3f ; typedef TTriangle3<double> FTriangle3d ; typedef TTriangle3<int> FTriangle3i ; namespace TetUtil { template<bool bReverseOrientation = false> const FIndex3i*)",
    "insertText": "GetTetFaceOrdering()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (const FIndex3i FaceMap [ 4 ] {)",
    "insertText": "FIndex3i(0,1,2), FIndex3i(0,3,1), FIndex3i(0,2,3), FIndex3i(1,3,2)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (const FIndex3i FaceMapRev [ 4 ] {)",
    "insertText": "FIndex3i(1,0,2), FIndex3i(3,0,1), FIndex3i(2,0,3), FIndex3i(3,1,2)"
  },
  {
    "label": "TTetrahedron3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTetrahedron3(const TVector<RealType>& V0, const TVector<RealType>& V1, const TVector<RealType>& V2, const TVector<RealType>& V3)"
  },
  {
    "label": "TTetrahedron3()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = V0 ; V [ 1 ] = V1 ; V [ 2 ] = V2 ; V [ 3 ] = V3 ; })",
    "insertText": "TTetrahedron3(const TVector<RealType> VIn[4])"
  },
  {
    "label": "BarycentricPoint()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = VIn [ 0 ] ; V [ 1 ] = VIn [ 1 ] ; V [ 2 ] = VIn [ 2 ] ; V [ 3 ] = VIn [ 3 ] ; } TVector<RealType>)",
    "insertText": "BarycentricPoint(RealType Bary0, RealType Bary1, RealType Bary2, RealType Bary3)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d RetBounds ; RetBounds .)",
    "insertText": "Contain(V[0])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (RetBounds .)",
    "insertText": "Contain(V[1])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (RetBounds .)",
    "insertText": "Contain(V[2])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (RetBounds .)",
    "insertText": "Contain(V[3])"
  },
  {
    "label": "GetFace()",
    "kind": "Method",
    "detail": "Function (} template<bool bReverseOrientation = false> TTriangle3<RealType>)",
    "insertText": "GetFace(int32 Idx)"
  },
  {
    "label": "bReverseOrientation()",
    "kind": "Method",
    "detail": "Function (FIndex3i Face = GetFaceIndices<)",
    "insertText": "bReverseOrientation(Idx)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType f = 1 . 0 / 4 . 0 ; return TVector<)",
    "insertText": "RealType((V[0].X + V[1].X + V[2].X + V[3].X) * f, (V[0].Y + V[1].Y + V[2].Y + V[3].Y) * f, (V[0].Z + V[1].Z + V[2].Z + V[3].Z) * f)"
  }
]