[
  {
    "label": "FLauncherUATTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLauncherUATTask"
  },
  {
    "label": "FLauncherUATTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherWorker . h \" # include \" Misc / CommandLine . h \" # include \" Misc / Paths . h \" # include \" Launcher / LauncherTask . h \" # include \" Misc / App . h \" class FLauncherUATTask : public FLauncherTask { public :)",
    "insertText": "FLauncherUATTask(const FString& InCommandLine, const FString& InName, const FString& InDesc, void* InReadPipe, void* InWritePipe, const FString& InEditorExe, FProcHandle& InProcessHandle, ILauncherWorker* InWorker, const FString& InCommandEnd, const FString& InBuildCookRunPreCommand) : FLauncherTask(InName, InDesc) , CommandLine(InCommandLine) , ReadPipe(InReadPipe) , WritePipe(InWritePipe) , EditorExe(InEditorExe) , ProcessHandle(InProcessHandle) , CommandText(InCommandEnd) , PreCommand(InBuildCookRunPreCommand)"
  },
  {
    "label": "OnOutputReceived()",
    "kind": "Method",
    "detail": "Function (InWorker ->)",
    "insertText": "OnOutputReceived().AddRaw(this, &FLauncherUATTask::HandleOutputReceived)"
  },
  {
    "label": "PerformTask()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "PerformTask(FLauncherTaskChainState& ChainState)"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (FString ExecutablePath =)",
    "insertText": "ConvertRelativePathToFull(FPaths::EngineDir() + FString(TEXT(\"Build\")) / TEXT(\"BatchFiles\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC FString Executable =)",
    "insertText": "TEXT(\"RunUAT.command\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_LINUX FString Executable =)",
    "insertText": "TEXT(\"RunUAT.sh\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# else FString Executable =)",
    "insertText": "TEXT(\"RunUAT.bat\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# endif const FString ConfigStrings [ ] = {)",
    "insertText": "TEXT(\"Unknown\"), TEXT(\"Debug\"), TEXT(\"DebugGame\"), TEXT(\"Development\"), TEXT(\"Shipping\"), TEXT(\"Test\")"
  },
  {
    "label": "GetProjectPath()",
    "kind": "Method",
    "detail": "Function (FString UATCommandLine ; FString ProjectPath =* ChainState . Profile ->)",
    "insertText": "GetProjectPath()"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (ProjectPath =)",
    "insertText": "ConvertRelativePathToFull(ProjectPath)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (UATCommandLine =)",
    "insertText": "Printf(TEXT(\"-ScriptsForProject=\\\"%s\\\" %s BuildCookRun -project=\\\"%s\\\" -noP4 -clientconfig=%s -serverconfig=%s\"), *ProjectPath, *PreCommand, *ProjectPath, LexToString(ChainState.Profile->GetBuildConfiguration()), LexToString(ChainState.Profile->GetBuildConfiguration()))"
  },
  {
    "label": "UATCommandLine()",
    "kind": "Method",
    "detail": "Function (bool bAllowCompile = true ;)",
    "insertText": "UATCommandLine(bAllowCompile && (FParse::Param( FCommandLine::Get(), TEXT(\"development\") ) || ChainState.Profile->IsBuildingUAT())) ? TEXT(\"\") : TEXT(\" -nocompile\")"
  },
  {
    "label": "IsEngineInstalled()",
    "kind": "Method",
    "detail": "Function (UATCommandLine + = GIsEditor | |)",
    "insertText": "IsEngineInstalled() ? TEXT(\" -nocompileeditor\") : TEXT(\"\")"
  },
  {
    "label": "IsEngineInstalled()",
    "kind": "Method",
    "detail": "Function (UATCommandLine + =)",
    "insertText": "IsEngineInstalled() ? TEXT(\" -installed\") : TEXT(\"\")"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (UATCommandLine + =)",
    "insertText": "Printf(TEXT(\" -unrealexe=\\\"%s\\\"\"), *EditorExe)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (} UATCommandLine + = CommandLine ; ProcessHandle =)",
    "insertText": "CreateProc(*(ExecutablePath / Executable), *UATCommandLine, false, true, true, NULL, 0, *ExecutablePath, WritePipe, ReadPipe)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0.25)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!EndTextFound && !FPlatformProcess::GetProcReturnCode(ProcessHandle, &Result))"
  },
  {
    "label": "HandleOutputReceived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleOutputReceived(const FString& InMessage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ErrorCounter ; } else)",
    "insertText": "if(InMessage.Contains(TEXT(\"Warning:\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (+ + WarningCounter ; } EndTextFound | = InMessage .)",
    "insertText": "Contains(CommandText)"
  }
]