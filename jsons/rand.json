[
  {
    "label": "rand_meth_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rand_meth_st"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_RAND_H # define HEADER_RAND_H # include<stdlib . h> # include<openssl / ossl_typ . h> # include<openssl / e_os2 . h> # include<openssl / randerr . h> # ifdef __cplusplus \" C \" { # endif struct rand_meth_st {)",
    "insertText": "int(*seed) (const void *buf, int num)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*bytes) (unsigned char *buf, int num)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*cleanup) (void)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*add) (const void *buf, int num, double randomness)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*pseudorand) (unsigned char *buf, int num)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*status) (void)"
  },
  {
    "label": "RAND_set_rand_method()",
    "kind": "Method",
    "detail": "Function (} ; int)",
    "insertText": "RAND_set_rand_method(const RAND_METHOD *meth)"
  },
  {
    "label": "RAND_get_rand_method()",
    "kind": "Method",
    "detail": "Function (const RAND_METHOD*)",
    "insertText": "RAND_get_rand_method(void)"
  },
  {
    "label": "RAND_set_rand_engine()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_ENGINE int)",
    "insertText": "RAND_set_rand_engine(ENGINE *engine)"
  },
  {
    "label": "RAND_OpenSSL()",
    "kind": "Method",
    "detail": "Function (# endif RAND_METHOD*)",
    "insertText": "RAND_OpenSSL(void)"
  },
  {
    "label": "RAND_cleanup()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "RAND_cleanup() while(0) continue # endif int RAND_bytes(unsigned char *buf, int num)"
  },
  {
    "label": "RAND_priv_bytes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_priv_bytes(unsigned char *buf, int num)"
  },
  {
    "label": "DEPRECATEDIN_1_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_1_1_0(int RAND_pseudo_bytes(unsigned char *buf, int num)) void RAND_seed(const void *buf, int num)"
  },
  {
    "label": "RAND_keep_random_devices_open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAND_keep_random_devices_open(int keep)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__ANDROID__) && defined(__NDK_FPABI__) __NDK_FPABI__ # endif void RAND_add(const void *buf, int num, double randomness)"
  },
  {
    "label": "RAND_load_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_load_file(const char *file, long max_bytes)"
  },
  {
    "label": "RAND_write_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_write_file(const char *file)"
  },
  {
    "label": "RAND_file_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "RAND_file_name(char *file, size_t num)"
  },
  {
    "label": "RAND_status()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_status(void)"
  },
  {
    "label": "RAND_query_egd_bytes()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_EGD int)",
    "insertText": "RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)"
  },
  {
    "label": "RAND_egd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_egd(const char *path)"
  },
  {
    "label": "RAND_egd_bytes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RAND_egd_bytes(const char *path, int bytes)"
  },
  {
    "label": "RAND_poll()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "RAND_poll(void)"
  }
]