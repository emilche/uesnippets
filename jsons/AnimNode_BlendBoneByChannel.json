[
  {
    "label": "FBlendBoneByChannelEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendBoneByChannelEntry"
  },
  {
    "label": "FAnimNode_BlendBoneByChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_BlendBoneByChannel"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / InputScaleBias . h \" # include \" BoneContainer . h \" # include \" AnimNode_BlendBoneByChannel . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = Blend)"
  },
  {
    "label": "FBlendBoneByChannelEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlendBoneByChannelEntry() : bBlendTranslation(true) , bBlendRotation(true) , bBlendScale(true)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Links)"
  },
  {
    "label": "FAnimNode_BlendBoneByChannel()",
    "kind": "Method",
    "detail": "Function (private : bool bBIsRelevant ; public :)",
    "insertText": "FAnimNode_BlendBoneByChannel() : Alpha(0.0f) , InternalBlendAlpha(0.0f) , TransformsSpace(EBoneControlSpace::BCS_BoneSpace) , bBIsRelevant(false)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  }
]