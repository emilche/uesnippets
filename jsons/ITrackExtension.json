[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "FViewModelChildren",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelChildren"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModels / SectionModel . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / ViewModels / ViewModelIterators . h \" class UMovieSceneSection ; class UMovieSceneTrack ; class ISequencerTrackEditor ; namespace UE::Sequencer { struct FViewModelChildren ; class ITrackExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ITrackExtension) virtual ~ITrackExtension()"
  },
  {
    "label": "GetTrack()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneTrack*)",
    "insertText": "GetTrack()"
  },
  {
    "label": "GetRowIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRowIndex()"
  },
  {
    "label": "GetSectionModels()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetSectionModels()"
  },
  {
    "label": "GetSections()",
    "kind": "Method",
    "detail": "Function (TArray<UMovieSceneSection*>)",
    "insertText": "GetSections()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<UMovieSceneSection*> Sections ;)",
    "insertText": "for(const TViewModelPtr<FSectionModel>& Item : GetSectionModels().IterateSubList<FSectionModel>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sections .)",
    "insertText": "Add(Section)"
  },
  {
    "label": "GetTrackEditor()",
    "kind": "Method",
    "detail": "Function (} } return Sections ; } TSharedPtr<ISequencerTrackEditor>)",
    "insertText": "GetTrackEditor()"
  }
]