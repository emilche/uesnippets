[
  {
    "label": "FFieldId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldId"
  },
  {
    "label": "FFieldNotificationId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldNotificationId"
  },
  {
    "label": "FFieldId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FieldNotificationVariant . h \" # include \" UObject / Object . h \" # include \" FieldNotificationId . generated . h \" namespace UE::FieldNotification { struct FFieldId { public :)",
    "insertText": "FFieldId()"
  },
  {
    "label": "FFieldId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldId(FName InFieldName, int32 InBitNumber) : FieldName(InFieldName) , BitNumber(InBitNumber)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FProperty* Property = InContainer->GetClass()->FindPropertyByName(FieldName))"
  },
  {
    "label": "FFieldVariant()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "FFieldVariant()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFieldId& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} private : FName FieldName ; int32 BitNumber ; } ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FFieldNotificationId()"
  },
  {
    "label": "FFieldNotificationId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFieldNotificationId(FName InFieldName) : FieldName(InFieldName)"
  },
  {
    "label": "GetFieldName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetFieldName()"
  }
]