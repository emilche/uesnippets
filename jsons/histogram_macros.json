[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMA_HISTOGRAM_ENUMERATION()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_MACROS_H_ # define BASE_METRICS_HISTOGRAM_MACROS_H_ # include \" base / check_op . h \" # include \" base / metrics / histogram . h \" # include \" base / metrics / histogram_macros_internal . h \" # include \" base / metrics / histogram_macros_local . h \" # include \" base / time / time . h \" # define)",
    "insertText": "UMA_HISTOGRAM_ENUMERATION(name, ...) \\ INTERNAL_UMA_HISTOGRAM_ENUMERATION_GET_MACRO( \\ __VA_ARGS__, INTERNAL_UMA_HISTOGRAM_ENUMERATION_SPECIFY_BOUNDARY, \\ INTERNAL_UMA_HISTOGRAM_ENUMERATION_DEDUCE_BOUNDARY) \\ (name, __VA_ARGS__, base::HistogramBase::kUmaTargetedHistogramFlag) #define UMA_HISTOGRAM_SCALED_ENUMERATION(name, sample, count, scale) \\ INTERNAL_HISTOGRAM_SCALED_ENUMERATION_WITH_FLAG( \\ name, sample, count, scale, \\ base::HistogramBase::kUmaTargetedHistogramFlag) #define UMA_HISTOGRAM_BOOLEAN(name, sample) \\ STATIC_HISTOGRAM_POINTER_BLOCK(name, AddBoolean(sample), \\ base::BooleanHistogram::FactoryGet(name, \\ base::HistogramBase::kUmaTargetedHistogramFlag)) #define UMA_HISTOGRAM_EXACT_LINEAR(name, sample, exclusive_max) \\ INTERNAL_HISTOGRAM_EXACT_LINEAR_WITH_FLAG( \\ name, sample, exclusive_max, \\ base::HistogramBase::kUmaTargetedHistogramFlag) #define UMA_HISTOGRAM_PERCENTAGE(name, percent_as_int) \\ UMA_HISTOGRAM_EXACT_LINEAR(name, percent_as_int, 101) #define UMA_HISTOGRAM_SCALED_EXACT_LINEAR(name, sample, count, sample_max, \\ scale) \\ INTERNAL_HISTOGRAM_SCALED_EXACT_LINEAR_WITH_FLAG( \\ name, sample, count, sample_max, scale, \\ base::HistogramBase::kUmaTargetedHistogramFlag) #define UMA_HISTOGRAM_COUNTS_100(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 100, 50) #define UMA_HISTOGRAM_COUNTS_1000(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 1000, 50) #define UMA_HISTOGRAM_COUNTS_10000(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 10000, 50) #define UMA_HISTOGRAM_COUNTS_100000(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 100000, 50) #define UMA_HISTOGRAM_COUNTS_1M(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 1000000, 50) #define UMA_HISTOGRAM_COUNTS_10M(name, sample) UMA_HISTOGRAM_CUSTOM_COUNTS( \\ name, sample, 1, 10000000, 50) #define UMA_HISTOGRAM_CUSTOM_COUNTS(name, sample, min, exclusive_max, \\ bucket_count) \\ INTERNAL_HISTOGRAM_CUSTOM_COUNTS_WITH_FLAG( \\ name, sample, min, exclusive_max, bucket_count, \\ base::HistogramBase::kUmaTargetedHistogramFlag) #define UMA_HISTOGRAM_TIMES(name, sample) \\ UMA_HISTOGRAM_CUSTOM_TIMES(name, sample, base::Milliseconds(1), \\ base::Seconds(10), 50) #define UMA_HISTOGRAM_MEDIUM_TIMES(name, sample) \\ UMA_HISTOGRAM_CUSTOM_TIMES(name, sample, base::Milliseconds(10), \\ base::Minutes(3), 50) #define UMA_HISTOGRAM_LONG_TIMES(name, sample) \\ UMA_HISTOGRAM_CUSTOM_TIMES(name, sample, base::Milliseconds(1), \\ base::Hours(1), 50) #define UMA_HISTOGRAM_LONG_TIMES_100(name, sample) \\ UMA_HISTOGRAM_CUSTOM_TIMES(name, sample, base::Milliseconds(1), \\ base::Hours(1), 100) #define UMA_HISTOGRAM_CUSTOM_TIMES(name, sample, min, max, bucket_count) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, AddTimeMillisecondsGranularity(sample), \\ base::Histogram::FactoryTimeGet( \\ name, min, max, bucket_count, \\ base::HistogramBase::kUmaTargetedHistogramFlag)) #define UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES(name, sample, min, max, \\ bucket_count) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, AddTimeMicrosecondsGranularity(sample), \\ base::Histogram::FactoryMicrosecondsTimeGet( \\ name, min, max, bucket_count, \\ base::HistogramBase::kUmaTargetedHistogramFlag))"
  },
  {
    "label": "SCOPED_UMA_HISTOGRAM_TIMER()",
    "kind": "Method",
    "detail": "Function (kMicrosecondTimes,kMediumTimes,kLongTimes } ; # define)",
    "insertText": "SCOPED_UMA_HISTOGRAM_TIMER(name) \\ INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_EXPANDER( \\ name, ScopedHistogramTiming::kMediumTimes, __COUNTER__) #define SCOPED_UMA_HISTOGRAM_LONG_TIMER(name) \\ INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_EXPANDER( \\ name, ScopedHistogramTiming::kLongTimes, __COUNTER__) #define SCOPED_UMA_HISTOGRAM_TIMER_MICROS(name) \\ INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_EXPANDER( \\ name, ScopedHistogramTiming::kMicrosecondTimes, __COUNTER__) #define UMA_HISTOGRAM_MEMORY_KB(name, sample) \\ UMA_HISTOGRAM_CUSTOM_COUNTS(name, sample, 1000, 500000, 50) #define UMA_HISTOGRAM_MEMORY_MEDIUM_MB(name, sample) \\ UMA_HISTOGRAM_CUSTOM_COUNTS(name, sample, 1, 4000, 100) #define UMA_HISTOGRAM_MEMORY_LARGE_MB(name, sample) \\ UMA_HISTOGRAM_CUSTOM_COUNTS(name, sample, 1, 64000, 100) #define UMA_STABILITY_HISTOGRAM_BOOLEAN(name, sample) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, AddBoolean(sample), \\ base::BooleanHistogram::FactoryGet( \\ name, base::HistogramBase::kUmaStabilityHistogramFlag)) #define UMA_STABILITY_HISTOGRAM_COUNTS_100(name, sample) \\ UMA_STABILITY_HISTOGRAM_CUSTOM_COUNTS(name, sample, 1, 100, 50) #define UMA_STABILITY_HISTOGRAM_CUSTOM_COUNTS(name, sample, min, max, \\ bucket_count) \\ INTERNAL_HISTOGRAM_CUSTOM_COUNTS_WITH_FLAG( \\ name, sample, min, max, bucket_count, \\ base::HistogramBase::kUmaStabilityHistogramFlag) #define UMA_STABILITY_HISTOGRAM_ENUMERATION(name, ...) \\ INTERNAL_UMA_HISTOGRAM_ENUMERATION_GET_MACRO( \\ __VA_ARGS__, INTERNAL_UMA_HISTOGRAM_ENUMERATION_SPECIFY_BOUNDARY, \\ INTERNAL_UMA_HISTOGRAM_ENUMERATION_DEDUCE_BOUNDARY) \\ (name, __VA_ARGS__, base::HistogramBase::kUmaStabilityHistogramFlag) #define UMA_STABILITY_HISTOGRAM_LONG_TIMES(name, sample) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, AddTimeMillisecondsGranularity(sample), \\ base::Histogram::FactoryTimeGet( \\ name, base::Milliseconds(1), base::Hours(1), 50, \\ base::HistogramBase::kUmaStabilityHistogramFlag)) #define UMA_STABILITY_HISTOGRAM_PERCENTAGE(name, percent_as_int) \\ INTERNAL_HISTOGRAM_EXACT_LINEAR_WITH_FLAG( \\ name, percent_as_int, 101, \\ base::HistogramBase::kUmaStabilityHistogramFlag) #define UMA_HISTOGRAM_SPARSE(name, sample) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, Add(sample), \\ base::SparseHistogram::FactoryGet( \\ name, base::HistogramBase::kUmaTargetedHistogramFlag)) #define STATIC_HISTOGRAM_POINTER_GROUP( \\ constant_histogram_name, index, constant_maximum, \\ histogram_add_method_invocation, histogram_factory_get_invocation)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (\\ std::atomic_uintptr_t atomic_histograms [ constant_maximum ] ; \\)",
    "insertText": "DCHECK_LE(0, index)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DCHECK_LT(index, constant_maximum)"
  },
  {
    "label": "HISTOGRAM_POINTER_USE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "HISTOGRAM_POINTER_USE(\\ std::addressof(atomic_histograms[index]), constant_histogram_name, \\ histogram_add_method_invocation, histogram_factory_get_invocation)"
  }
]