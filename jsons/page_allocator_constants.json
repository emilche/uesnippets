[
  {
    "label": "PageCharacteristics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PageCharacteristics"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_CONSTANTS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_CONSTANTS_H_ # include<stddef . h> # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE) && defined(ARCH_CPU_64_BITS) #include <mach/vm_page_size.h> #define PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR __attribute__((const)) #elif BUILDFLAG(IS_LINUX) && defined(ARCH_CPU_ARM64) #define PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR __attribute__((const))"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (struct PageCharacteristics { std::atomic<size_t> size ; std::atomic<size_t> shift ; } ;)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PageAllocationGranularity()",
    "kind": "Method",
    "detail": "Function (} # else # define PAGE_ALLOCATOR_CONSTANTS_ARE_CONSTEXPR 1 # define PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR # endif namespace partition_alloc::internal { PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PageAllocationGranularity()"
  },
  {
    "label": "PageAllocationGranularityShift()",
    "kind": "Method",
    "detail": "Function (PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PageAllocationGranularityShift()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) || defined(ARCH_CPU_PPC64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MIPS_ARCH_LOONGSON) || defined(ARCH_CPU_LOONG64)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_APPLE) && defined(ARCH_CPU_64_BITS) return static_cast<size_t>(vm_page_shift)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_LINUX) && defined(ARCH_CPU_ARM64) size_t shift = page_characteristics.shift.load(std::memory_order_relaxed)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (shift = static_cast<)",
    "insertText": "size_t(__builtin_ctz((unsigned int)PageAllocationGranularity()))"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (page_characteristics . shift .)",
    "insertText": "store(shift, std::memory_order_relaxed)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) && defined(ARCH_CPU_64_BITS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_LINUX) && defined(ARCH_CPU_ARM64) size_t size = page_characteristics.size.load(std::memory_order_relaxed)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size = static_cast<)",
    "insertText": "size_t(getpagesize())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (page_characteristics . size .)",
    "insertText": "store(size, std::memory_order_relaxed)"
  },
  {
    "label": "PageAllocationGranularityOffsetMask()",
    "kind": "Method",
    "detail": "Function (# endif } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PageAllocationGranularityOffsetMask()"
  },
  {
    "label": "PageAllocationGranularityBaseMask()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "PageAllocationGranularityBaseMask()"
  },
  {
    "label": "SystemPageShift()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "SystemPageShift()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "SystemPageSize()",
    "kind": "Method",
    "detail": "Function (# endif } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "SystemPageSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(BUILDFLAG(IS_APPLE) && defined(ARCH_CPU_64_BITS)) || \\ (BUILDFLAG(IS_LINUX) && defined(ARCH_CPU_ARM64)) return PageAllocationGranularity()"
  },
  {
    "label": "SystemPageOffsetMask()",
    "kind": "Method",
    "detail": "Function (# endif } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "SystemPageOffsetMask()"
  },
  {
    "label": "SystemPageBaseMask()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "SystemPageBaseMask()"
  }
]