[
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "HActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HActor"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FEditorCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCameraController"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AdvancedPreviewScene . h \" # include \" Containers / ArrayView . h \" # include \" Types / SlateEnums . h \" # include \" Animation / AnimBlueprint . h \" # include \" PersonaSelectionProxies . h \" class UAnimationAsset ; class UDebugSkelMeshComponent ; class USkeletalMesh ; struct FSelectedSocketInfo ; struct HActor ; struct FViewportClick ; class FEditorCameraController ; class ISkeletonTreeItem ; class IEditableSkeleton ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAnimChangedMulticaster, UAnimationAsset*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (typedef FOnAnimChangedMulticaster::FDelegate FOnAnimChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPreviewMeshChangedMulticaster, USkeletalMesh* , USkeletalMesh*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (typedef FOnPreviewMeshChangedMulticaster::FDelegate FOnPreviewMeshChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnMeshClickMulticaster, HActor*, const FViewportClick&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (typedef FOnMeshClickMulticaster::FDelegate FOnMeshClick ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSelectedLODChangedMulticaster)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (typedef FOnSelectedLODChangedMulticaster::FDelegate FOnSelectedLODChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSelectedBoneChangedMulticaster, const FName& , ESelectInfo::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (typedef FOnSelectedBoneChangedMulticaster::FDelegate FOnSelectedBoneChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSelectedSocketChangedMulticaster, const FSelectedSocketInfo&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (typedef FOnSelectedSocketChangedMulticaster::FDelegate FOnSelectedSocketChanged ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnRemoveAttachedComponentFilter, const USceneComponent*)"
  },
  {
    "label": "IPersonaPreviewScene()",
    "kind": "Method",
    "detail": "Function (enum class EPreviewSceneDefaultAnimationMode : int32 { ReferencePose,Animation,AnimationBlueprint,Custom,} ; class IPersonaPreviewScene : public FAdvancedPreviewScene { public :)",
    "insertText": "IPersonaPreviewScene(ConstructionValues CVS) : FAdvancedPreviewScene(CVS)"
  },
  {
    "label": "UnregisterForUndo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterForUndo()"
  },
  {
    "label": "GetPersonaToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaToolkit>)",
    "insertText": "GetPersonaToolkit()"
  },
  {
    "label": "InvalidateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateViews()"
  },
  {
    "label": "FocusViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViews()"
  },
  {
    "label": "GetPreviewMeshComponent()",
    "kind": "Method",
    "detail": "Function (UDebugSkelMeshComponent*)",
    "insertText": "GetPreviewMeshComponent()"
  },
  {
    "label": "GetAllPreviewMeshComponents()",
    "kind": "Method",
    "detail": "Function (TArray<UDebugSkelMeshComponent*>)",
    "insertText": "GetAllPreviewMeshComponents()"
  },
  {
    "label": "ForEachPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachPreviewMesh(TFunction<void (UDebugSkelMeshComponent*)> PerMeshFunction)"
  },
  {
    "label": "SetPreviewMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMeshComponent(UDebugSkelMeshComponent* InSkeletalMeshComponent)"
  },
  {
    "label": "SetAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalMeshes(class UDataAsset* InAdditionalMeshes)"
  },
  {
    "label": "SetAdditionalMeshesSelectable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalMeshesSelectable(bool bSelectable)"
  },
  {
    "label": "RefreshAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAdditionalMeshes(bool bAllowOverrideBaseMesh)"
  },
  {
    "label": "SetPreviewAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewAnimationAsset(UAnimationAsset* AnimAsset, bool bEnablePreview = true)"
  },
  {
    "label": "GetPreviewAnimationAsset()",
    "kind": "Method",
    "detail": "Function (UAnimationAsset*)",
    "insertText": "GetPreviewAnimationAsset()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* NewPreviewMesh, bool bAllowOverrideBaseMesh = true)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh()"
  },
  {
    "label": "SetPreviewAnimationBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewAnimationBlueprint(UAnimBlueprint* InAnimBlueprint, UAnimBlueprint* InOverlayOrSubAnimBlueprint)"
  },
  {
    "label": "ShowReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowReferencePose(bool bShowRefPose, bool bResetBoneTransforms = false)"
  },
  {
    "label": "IsShowReferencePoseEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowReferencePoseEnabled()"
  },
  {
    "label": "AttachObjectToPreviewComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachObjectToPreviewComponent(UObject* Object, FName AttachTo)"
  },
  {
    "label": "RemoveAttachedObjectFromPreviewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttachedObjectFromPreviewComponent(UObject* Object, FName AttachedTo)"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBone(BoneName, ESelectInfo::Direct)"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedBone(const FName& BoneName, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "ClearSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedBone()"
  },
  {
    "label": "SetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSocket(const FSelectedSocketInfo& SocketInfo)"
  },
  {
    "label": "ClearSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedSocket()"
  },
  {
    "label": "SetSelectedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedActor(AActor* InActor)"
  },
  {
    "label": "ClearSelectedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedActor()"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll()"
  },
  {
    "label": "RegisterOnAnimChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnAnimChanged(const FOnAnimChanged& Delegate)"
  },
  {
    "label": "UnregisterOnAnimChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnAnimChanged(void* Thing)"
  },
  {
    "label": "RegisterOnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnPreviewMeshChanged(const FOnPreviewMeshChanged& Delegate)"
  },
  {
    "label": "UnregisterOnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPreviewMeshChanged(void* Thing)"
  },
  {
    "label": "RegisterOnLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnLODChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnLODChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOnLODChanged()"
  },
  {
    "label": "RegisterOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnMorphTargetsChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnMorphTargetsChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOnMorphTargetsChanged()"
  },
  {
    "label": "RegisterOnInvalidateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnInvalidateViews(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnInvalidateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnInvalidateViews(void* Thing)"
  },
  {
    "label": "RegisterOnFocusViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnFocusViews(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnFocusViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnFocusViews(void* Thing)"
  },
  {
    "label": "RegisterOnMeshClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnMeshClick(const FOnMeshClick& Delegate)"
  },
  {
    "label": "UnregisterOnMeshClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnMeshClick(void* Thing)"
  },
  {
    "label": "RegisterOnSelectedBoneChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSelectedBoneChanged(const FOnSelectedBoneChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectedBoneChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSelectedBoneChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOnSelectedSocketChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSelectedSocketChanged(const FOnSelectedSocketChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectedSocketChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSelectedSocketChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOnDeselectAll()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnDeselectAll(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnDeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnDeselectAll(FDelegateHandle InHandle)"
  },
  {
    "label": "BroadcastMeshClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BroadcastMeshClick(HActor* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "SetDefaultAnimationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAnimationMode(EPreviewSceneDefaultAnimationMode Mode, bool bShowNow = true)"
  },
  {
    "label": "ShowDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDefaultMode()"
  },
  {
    "label": "EnableWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWind(bool bEnableWind)"
  },
  {
    "label": "IsWindEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindEnabled()"
  },
  {
    "label": "SetWindStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindStrength(float InWindStrength)"
  },
  {
    "label": "GetWindStrength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWindStrength()"
  },
  {
    "label": "SetGravityScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityScale(float InGravityScale)"
  },
  {
    "label": "GetGravityScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGravityScale()"
  },
  {
    "label": "GetSelectedActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetSelectedActor()"
  },
  {
    "label": "GetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (FSelectedSocketInfo)",
    "insertText": "GetSelectedSocket()"
  },
  {
    "label": "GetSelectedBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedBoneIndex()"
  },
  {
    "label": "TogglePlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlayback()"
  },
  {
    "label": "GetActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetActor()"
  },
  {
    "label": "SetActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActor(AActor* InActor)"
  },
  {
    "label": "AllowMeshHitProxies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMeshHitProxies()"
  },
  {
    "label": "SetAllowMeshHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowMeshHitProxies(bool bState)"
  },
  {
    "label": "RegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnSelectedLODChanged(const FOnSelectedLODChanged &Delegate)"
  },
  {
    "label": "UnRegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterOnSelectedLODChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastOnSelectedLODChanged()"
  },
  {
    "label": "RegisterOnCameraOverrideChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnCameraOverrideChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnCameraOverrideChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnCameraOverrideChanged(void* Thing)"
  },
  {
    "label": "SetCameraOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraOverride(TSharedPtr<FEditorCameraController> NewCamera)"
  },
  {
    "label": "GetCurrentCameraOverride()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEditorCameraController>)",
    "insertText": "GetCurrentCameraOverride()"
  },
  {
    "label": "RegisterOnPreTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnPreTick(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnPreTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPreTick(void* Thing)"
  },
  {
    "label": "RegisterOnPostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnPostTick(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnPostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPostTick(void* Thing)"
  },
  {
    "label": "SetRemoveAttachedComponentFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoveAttachedComponentFilter(const FOnRemoveAttachedComponentFilter& Delegate)"
  },
  {
    "label": "ClearRemoveAttachedComponentFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRemoveAttachedComponentFilter()"
  },
  {
    "label": "FlagTickable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagTickable()"
  },
  {
    "label": "HandleSkeletonTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSkeletonTreeSelectionChanged(const TArrayView<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "SetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditableSkeleton(TSharedPtr<IEditableSkeleton> InEditableSkeleton)"
  }
]