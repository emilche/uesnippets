[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskSourceAndSortKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskSourceAndSortKey"
  },
  {
    "label": "PriorityQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_PRIORITY_QUEUE_H_ # define BASE_TASK_THREAD_POOL_PRIORITY_QUEUE_H_ # include<functional> # include<memory> # include \" base / base_export . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / thread_pool / task_source . h \" # include \" base / task / thread_pool / task_source_sort_key . h \" # include \" base / types / cxx23_to_underlying . h \" namespace base { namespace internal { class BASE_EXPORT PriorityQueue { public :)",
    "insertText": "PriorityQueue()"
  },
  {
    "label": "PriorityQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PriorityQueue(const PriorityQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PriorityQueue&)",
    "insertText": "operator(const PriorityQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PriorityQueue&)",
    "insertText": "operator(PriorityQueue&& other)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(RegisteredTaskSource task_source, TaskSourceSortKey task_source_sort_key)"
  },
  {
    "label": "PeekSortKey()",
    "kind": "Method",
    "detail": "Function (const TaskSourceSortKey&)",
    "insertText": "PeekSortKey()"
  },
  {
    "label": "PeekTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource&)",
    "insertText": "PeekTaskSource()"
  },
  {
    "label": "PopTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "PopTaskSource()"
  },
  {
    "label": "RemoveTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "RemoveTaskSource(const TaskSource& task_source)"
  },
  {
    "label": "UpdateSortKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSortKey(const TaskSource& task_source, TaskSourceSortKey sort_key)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "GetNumTaskSourcesWithPriority()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumTaskSourcesWithPriority(TaskPriority priority)"
  },
  {
    "label": "EnableFlushTaskSourcesOnDestroyForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableFlushTaskSourcesOnDestroyForTesting()"
  },
  {
    "label": "DecrementNumTaskSourcesForPriority()",
    "kind": "Method",
    "detail": "Function (private : class TaskSourceAndSortKey ; using ContainerType = IntrusiveHeap<TaskSourceAndSortKey> ; void)",
    "insertText": "DecrementNumTaskSourcesForPriority(TaskPriority priority)"
  },
  {
    "label": "IncrementNumTaskSourcesForPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementNumTaskSourcesForPriority(TaskPriority priority)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (ContainerType container_ ; std::array<size_t,static_cast<)",
    "insertText": "int(TaskPriority::HIGHEST)"
  }
]