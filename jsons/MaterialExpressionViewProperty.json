[
  {
    "label": "EMaterialExposedViewProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialExposedViewProperty"
  },
  {
    "label": "UMaterialExpressionViewProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionViewProperty"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Materials / MaterialExpression . h \" # include \" MaterialExpressionViewProperty . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MEVP_BufferSize)",
    "insertText": "UMETA(DisplayName=\"Render Target Size\"), MEVP_FieldOfView UMETA(DisplayName=\"Field Of View\"), MEVP_TanHalfFieldOfView UMETA(DisplayName=\"Tan(0.5 * Field Of View)\"), MEVP_ViewSize UMETA(DisplayName=\"View Size\"), MEVP_WorldSpaceViewPosition UMETA(DisplayName=\"View Position (Absolute World Space)\"), MEVP_WorldSpaceCameraPosition UMETA(DisplayName = \"Camera Position (Absolute World Space)\"), MEVP_ViewportOffset UMETA(DisplayName = \"Viewport Offset\"), MEVP_TemporalSampleCount UMETA(DisplayName = \"Temporal Sample Count\"), MEVP_TemporalSampleIndex UMETA(DisplayName = \"Temporal Sample Index\"), MEVP_TemporalSampleOffset UMETA(DisplayName = \"Temporal Sample Offset\"), MEVP_RuntimeVirtualTextureOutputLevel UMETA(DisplayName = \"Virtual Texture Output Level\"), MEVP_RuntimeVirtualTextureOutputDerivative UMETA(DisplayName = \"Virtual Texture Output Derivative\"), MEVP_PreExposure UMETA(DisplayName = \"Pre-Exposure\"), MEVP_RuntimeVirtualTextureMaxLevel UMETA(DisplayName = \"Virtual Texture Max Level\"), MEVP_ResolutionFraction UMETA(DisplayName = \"ScreenPercentage / 100\"), MEVP_PostVolumeUserFlags UMETA(DisplayName = \"Post Process Volume User Flags\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(collapsecategories, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=UMaterialExpressionViewProperty, meta=(DisplayName = \"View Property\", ShowAsInputPin = \"Advanced\"))"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  }
]