[
  {
    "label": "ScopedTraceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedTraceEvent"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TYPED_MACROS_INTERNAL_H_ # define BASE_TRACE_EVENT_TYPED_MACROS_INTERNAL_H_ # include \" base / base_export . h \" # include \" base / time / time . h \" # include \" base / trace_event / trace_event . h \" # include \" base / trace_event / typed_macros_embedder_support . h \" # include \" build / build_config . h \" # include \" third_party / perfetto / include / perfetto / protozero / message_handle . h \" # include \" third_party / perfetto / include / perfetto / tracing / event_context . h \" # include \" third_party / perfetto / include / perfetto / tracing / internal / write_track_event_args . h \" # include \" third_party / perfetto / include / perfetto / tracing / string_helpers . h \" # include \" third_party / perfetto / include / perfetto / tracing / track . h \" # include \" third_party / perfetto / protos / perfetto / trace / track_event / track_event . pbzero . h \" # if !)",
    "insertText": "BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) #define TRACING_INTERNAL_CONCAT2(a, b) a##b #define TRACING_INTERNAL_CONCAT(a, b) TRACING_INTERNAL_CONCAT2(a, b) #define TRACING_INTERNAL_UID(prefix) TRACING_INTERNAL_CONCAT(prefix, __LINE__) #define TRACING_INTERNAL_ADD_TRACE_EVENT(phase, category, name, ...)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(category)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED())"
  },
  {
    "label": "AddTypedTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddTypedTraceEvent(\\ phase, INTERNAL_TRACE_EVENT_UID(category_group_enabled), name, \\ ##__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(false) #define TRACING_INTERNAL_SCOPED_ADD_TRACE_EVENT(category, name, ...)"
  },
  {
    "label": "ScopedTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\ struct ScopedTraceEvent { \\ \\ \\ \\ \\ \\ \\)",
    "insertText": "ScopedTraceEvent(...)"
  },
  {
    "label": "ScopedTraceEvent()",
    "kind": "Method",
    "detail": "Function (} \\ ~)",
    "insertText": "ScopedTraceEvent()"
  },
  {
    "label": "TRACING_INTERNAL_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ \\)",
    "insertText": "TRACING_INTERNAL_ADD_TRACE_EVENT(TRACE_EVENT_PHASE_END, category, \"\", \\ [](perfetto::EventContext) {})"
  },
  {
    "label": "TRACING_INTERNAL_UID()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } event ; \\ })",
    "insertText": "TRACING_INTERNAL_UID(scoped_event)"
  },
  {
    "label": "TRACING_INTERNAL_ADD_TRACE_EVENT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACING_INTERNAL_ADD_TRACE_EVENT(TRACE_EVENT_PHASE_BEGIN, category, name, \\ ##__VA_ARGS__)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return()"
  },
  {
    "label": "PERFETTO_INTERNAL_ADD_EMPTY_EVENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PERFETTO_INTERNAL_ADD_EMPTY_EVENT()"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(\"__metadata\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED()) \\ trace_event_internal::AddEmptyPacket()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false)"
  },
  {
    "label": "CreateTrackEvent()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const perfetto::Track kDefaultTrack ; char kTraceEventEndName [ ] = \" \" ; base::trace_event::TrackEventHandle BASE_EXPORT)",
    "insertText": "CreateTrackEvent(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, base::TimeTicks timestamp, uint64_t track_uuid, bool explicit_track)"
  },
  {
    "label": "CreateTracePacket()",
    "kind": "Method",
    "detail": "Function (base::trace_event::TracePacketHandle BASE_EXPORT)",
    "insertText": "CreateTracePacket()"
  },
  {
    "label": "AddEmptyPacket()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "AddEmptyPacket()"
  },
  {
    "label": "ShouldEmitTrackDescriptor()",
    "kind": "Method",
    "detail": "Function (bool BASE_EXPORT)",
    "insertText": "ShouldEmitTrackDescriptor(uint64_t track_uuid, base::trace_event::TrackEventHandle::IncrementalState* incr_state)"
  },
  {
    "label": "WriteTrackDescriptor()",
    "kind": "Method",
    "detail": "Function (template<TrackType> void)",
    "insertText": "WriteTrackDescriptor(const TrackType& track)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (perfetto::internal::)",
    "insertText": "Get()->SerializeTrack( track, packet.TakePerfettoHandle())"
  },
  {
    "label": "AddTypedTraceEventImpl()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "AddTypedTraceEventImpl(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, const perfetto::Track& track, base::TimeTicks timestamp, Args&&... args)"
  },
  {
    "label": "CreateTrackEvent()",
    "kind": "Method",
    "detail": "Function (bool emit_track_descriptor = false ; { bool explicit_track =& track ! =& kDefaultTrack ; base::trace_event::TrackEventHandle track_event =)",
    "insertText": "CreateTrackEvent(phase, category_group_enabled, name, timestamp, track.uuid, explicit_track)"
  },
  {
    "label": "set_track_uuid()",
    "kind": "Method",
    "detail": "Function (track_event ->)",
    "insertText": "set_track_uuid(track.uuid)"
  },
  {
    "label": "ShouldEmitTrackDescriptor()",
    "kind": "Method",
    "detail": "Function (emit_track_descriptor =)",
    "insertText": "ShouldEmitTrackDescriptor(track.uuid, track_event.incremental_state())"
  },
  {
    "label": "WriteTrackEventArgs()",
    "kind": "Method",
    "detail": "Function (} perfetto::)",
    "insertText": "WriteTrackEventArgs(perfetto::EventContext(track_event.get(), track_event.incremental_state(), track_event.ShouldFilterDebugAnnotations()), std::forward<Args>(args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(emit_track_descriptor) WriteTrackDescriptor(track)"
  },
  {
    "label": "AddTypedTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<TrackType,. . . Args,TrackTypeCheck = std::enable_if<std::is_convertible<TrackType,perfetto::Track>::value>::type> void)",
    "insertText": "AddTypedTraceEvent(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, TrackType&& track, base::TimeTicks timestamp, Args&&... args)"
  },
  {
    "label": "AddTypedTraceEventImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTypedTraceEventImpl(phase, category_group_enabled, name, std::forward<TrackType>(track), timestamp, std::forward<Args>(args)...)"
  },
  {
    "label": "AddTypedTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<TrackType,. . . Args,TrackTypeCheck = std::enable_if<std::is_convertible<TrackType,perfetto::Track>::value>::type> void)",
    "insertText": "AddTypedTraceEvent(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, TrackType&& track, Args&&... args)"
  },
  {
    "label": "AddTypedTraceEventImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTypedTraceEventImpl(phase, category_group_enabled, name, std::forward<TrackType>(track), base::TimeTicks(), std::forward<Args>(args)...)"
  },
  {
    "label": "AddTypedTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "AddTypedTraceEvent(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, base::TimeTicks timestamp, Args&&... args)"
  },
  {
    "label": "AddTypedTraceEventImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTypedTraceEventImpl(phase, category_group_enabled, name, kDefaultTrack, timestamp, std::forward<Args>(args)...)"
  },
  {
    "label": "AddTypedTraceEvent()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "AddTypedTraceEvent(char phase, const unsigned char* category_group_enabled, perfetto::StaticString name, Args&&... args)"
  },
  {
    "label": "AddTypedTraceEventImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTypedTraceEventImpl(phase, category_group_enabled, name, kDefaultTrack, base::TimeTicks(), std::forward<Args>(args)...)"
  }
]