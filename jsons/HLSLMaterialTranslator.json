[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FAddUniformExpressionScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAddUniformExpressionScope"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "EMaterialExpressionVisitResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialExpressionVisitResult"
  },
  {
    "label": "IMaterialExpressionVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMaterialExpressionVisitor"
  },
  {
    "label": "FShaderCodeChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeChunk"
  },
  {
    "label": "FMaterialVTStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialVTStackEntry"
  },
  {
    "label": "FMaterialCustomExpressionEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCustomExpressionEntry"
  },
  {
    "label": "FMaterialDerivativeVariation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialDerivativeVariation"
  },
  {
    "label": "FMaterialLocalVariableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLocalVariableEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ESubstrateCompilationContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESubstrateCompilationContext"
  },
  {
    "label": "FHLSLMaterialTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLSLMaterialTranslator"
  },
  {
    "label": "FMaterialDerivativeAutogen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialDerivativeAutogen"
  },
  {
    "label": "FEnvironmentDefines",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvironmentDefines"
  },
  {
    "label": "FSubstrateSimplificationStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateSimplificationStatus"
  },
  {
    "label": "FOperatorToSimplify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperatorToSimplify"
  },
  {
    "label": "FSubstrateSharedLocalBasesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateSharedLocalBasesInfo"
  },
  {
    "label": "FSubstrateCompilationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateCompilationContext"
  },
  {
    "label": "UMaterialExpressionCustom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustom"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "IsExpressionClassPermitted()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Algo / Transform . h \" # include \" Misc / Guid . h \" # include \" HAL / IConsoleManager . h \" # include \" ShaderParameters . h \" # include \" StaticParameterSet . h \" # include \" MaterialShared . h \" # include \" Stats / StatsMisc . h \" # include \" Materials / Material . h \" # include \" Materials / MaterialExpressionMaterialFunctionCall . h \" # include \" Materials / MaterialFunctionInstance . h \" # include \" Materials / MaterialExpressionSingleLayerWaterMaterialOutput . h \" # include \" Materials / MaterialExpressionVolumetricAdvancedMaterialOutput . h \" # include \" Materials / MaterialExpressionThinTranslucentMaterialOutput . h \" # include \" Materials / MaterialExpressionAbsorptionMediumMaterialOutput . h \" # include \" Materials / MaterialExpressionVolumetricAdvancedMaterialOutput . h \" # include \" MaterialCompiler . h \" # include \" RenderUtils . h \" # include \" EngineGlobals . h \" # include \" Engine / Engine . h \" # include \" Interfaces / ITargetPlatformManagerModule . h \" # include \" Hash / CityHash . h \" # include \" VT / RuntimeVirtualTexture . h \" # include \" Field / FieldSystemTypes . h \" # include \" Containers / Map . h \" # include \" Shader / ShaderTypes . h \" # include \" SparseVolumeTexture / SparseVolumeTexture . h \" # include \" Runtime / RenderCore / Internal / ShaderCompilerDefinitions . h \" # if WITH_EDITORONLY_DATA # include \" Materials / MaterialExpressionSceneTexture . h \" # include \" Materials / MaterialExpressionUserSceneTexture . h \" # include \" Materials / MaterialExpressionNoise . h \" # include \" Materials / MaterialExpressionFunctionInput . h \" # include \" Materials / MaterialExpressionFunctionOutput . h \" # include \" Materials / MaterialExpressionCustom . h \" # include \" Materials / MaterialExpressionCustomOutput . h \" # include \" Materials / MaterialExpressionVectorNoise . h \" # include \" Materials / MaterialExpressionVertexInterpolator . h \" # include \" Materials / MaterialUniformExpressions . h \" # include \" ParameterCollection . h \" # include \" Materials / MaterialParameterCollection . h \" # include \" Containers / LazyPrintf . h \" # include \" Containers / HashTable . h \" # include \" Engine / Texture2D . h \" # include \" SubstrateMaterial . h \" # include \" HLSLMaterialDerivativeAutogen . h \" # endif class Error ; class FAddUniformExpressionScope ; class FShaderKeyGenerator ; namespace UE::DerivedData { class FRequestOwner ; } bool)",
    "insertText": "IsExpressionClassPermitted(const UClass* const Class)"
  },
  {
    "label": "IMaterialExpressionVisitor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA enum EMaterialExpressionVisitResult { MVR_CONTINUE,MVR_STOP,} ; class IMaterialExpressionVisitor { public : ~)",
    "insertText": "IMaterialExpressionVisitor()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} EMaterialExpressionVisitResult)",
    "insertText": "Visit(UMaterialExpression* InExpression)"
  },
  {
    "label": "AtDefinition()",
    "kind": "Method",
    "detail": "Function (} ; struct FShaderCodeChunk { uint64 Hash ; uint64 MaterialAttributeMask ; FString DefinitionFinite ; FString DefinitionAnalytic ; FString SymbolName ; TRefCountPtr<FMaterialUniformExpression> UniformExpression ; TArray<int32> ScopedChunks ; TArray<int32> ReferencedCodeChunks ; EMaterialValueType Type ; int32 DeclaredScopeIndex ; int32 UsedScopeIndex ; int32 ScopeLevel ; bool bInline ; EDerivativeStatus DerivativeStatus ; FString&)",
    "insertText": "AtDefinition(ECompiledPartialDerivativeVariation Variation)"
  },
  {
    "label": "FShaderCodeChunk()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCodeChunk(uint64 InHash, FMaterialUniformExpression* InUniformExpression, const TCHAR* InDefinitionFinite, const TCHAR* InDefinitionAnalytic, EMaterialValueType InType, EDerivativeStatus InDerivativeStatus): Hash(InHash), MaterialAttributeMask(0u), DefinitionFinite(InDefinitionFinite), DefinitionAnalytic(InDefinitionAnalytic), UniformExpression(InUniformExpression), Type(InType), DeclaredScopeIndex(INDEX_NONE), UsedScopeIndex(INDEX_NONE), ScopeLevel(0), bInline(false), DerivativeStatus(InDerivativeStatus)"
  },
  {
    "label": "ReplicateScalar()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMaterialVTStackEntry { uint64 ScopeID ; uint64 CoordinateHash ; uint64 MipValue0Hash ; uint64 MipValue1Hash ; ETextureMipValueMode MipValueMode ; TextureAddress AddressU ; TextureAddress AddressV ; int32 DebugCoordinateIndex ; int32 DebugMipValue0Index ; int32 DebugMipValue1Index ; int32 PreallocatedStackTextureIndex ; bool bAdaptive ; bool bGenerateFeedback ; bool bMeshPaint ; float AspectRatio ; int32 CodeIndex ; } ; struct FMaterialCustomExpressionEntry { uint64 ScopeID ; const UMaterialExpressionCustom* Expression ; FString Implementation ; TArray<uint64> InputHash ; TArray<int32> OutputCodeIndex ; } ; struct FMaterialDerivativeVariation { FString TranslatedCodeChunkDefinitions [ CompiledMP_MAX ] ; FString TranslatedCodeChunks [ CompiledMP_MAX ] ; TArray<FString> CustomOutputImplementations ; } ; struct FMaterialLocalVariableEntry { FString Name ; int32 DeclarationCodeIndex = INDEX_NONE ; } ; enum class EMaterialCastFlags : uint32 { None = 0 u,)",
    "insertText": "ReplicateScalar(1u << 0), AllowTruncate = (1u << 1), AllowAppendZeroes = (1u << 2), AllowInteger = (1u << 3)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialCastFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum ESubstrateCompilationContext : uint8 { SCC_Default = 0 u,SCC_FullySimplified = 1 u,SCC_MAX = 2 u } ; enum class EHLSLMaterialTranslatorResult { Success,Failure,RetryWithoutDDC,} ; class FHLSLMaterialTranslator : public FMaterialCompiler { class FMaterialDerivativeAutogen ; protected : FMaterialDerivativeVariation DerivativeVariations [ CompiledPDV_MAX ] ; EShaderFrequency ShaderFrequency ; EMaterialProperty MaterialProperty ; TArray<FGuid> MaterialAttributesStack ; TArray<FMaterialParameterInfo> ParameterOwnerStack ; TArray<FShaderCodeChunk>* CurrentScopeChunks ; uint64 CurrentScopeID ; uint64 NextTempScopeID ; bool SharedPixelProperties [ CompiledMP_MAX ] ; FString ResourcesString ; TArray<FMaterialFunctionCompileState*> FunctionStacks [ SF_NumFrequencies ] ; FMaterial* Material ; FStaticParameterSet StaticParameters ; FMaterialLayersFunctions CachedMaterialLayers ; EShaderPlatform Platform ; EMaterialQualityLevel::Type QualityLevel ; ERHIFeatureLevel::Type FeatureLevel ; FString TranslatedAttributesCodeChunks [ SF_NumFrequencies ] ; uint64 MaterialAttributesReturned [ SF_NumFrequencies ] ; TArray<int32> ScopeStack ; TArray<int32> ReferencedCodeChunks ; TArray<FShaderCodeChunk> SharedPropertyCodeChunks [ SF_NumFrequencies ] ; TMap<const UMaterialExpression*,int32> ForLoopMap [ SF_NumFrequencies ] ; int32 NumForLoops [ SF_NumFrequencies ] ; TMap<FName,FMaterialLocalVariableEntry> LocalVariables [ SF_NumFrequencies ] ; TArray<FShaderCodeChunk> UniformExpressions ; TArray<TRefCountPtr<FMaterialUniformExpressionTexture>> UniformTextureExpressions [ NumMaterialTextureParameterTypes ] ; TArray<TRefCountPtr<FMaterialUniformExpressionTextureCollection>> UniformTextureCollectionExpressions ; TArray<TRefCountPtr<FMaterialUniformExpressionExternalTexture>> UniformExternalTextureExpressions ; TMap<UE::Shader::FValue,uint32> DefaultUniformValues ; uint32 UniformPreshaderOffset = 0 u ; uint32 CurrentBoolUniformOffset = ~ 0 u ; uint32 CurrentNumBoolComponents = 3 2 u ; TArray<UMaterialParameterCollection*> ParameterCollections ; int32 NextSymbolIndex ; TArray<FMaterialCustomExpressionEntry> CustomExpressions ; TArray<UMaterialExpressionVertexInterpolator*> CustomVertexInterpolators ; int32 NextVertexInterpolatorIndex ; int32 CurrentCustomVertexInterpolatorOffset ; TArray<FMaterialVTStackEntry> VTStacks ; FHashTable VTStackHash ; TArray<FString>* CompileErrorsSink ; TArray<TObjectPtr<UMaterialExpression>>* CompileErrorExpressionsSink ; FMaterialDerivativeAutogen DerivativeAutogen ; EHLSLMaterialTranslatorResult TranslationResult ; uint32 bCompileForComputeShader : 1 ; uint32 bUsesSceneDepth : 1 ; uint32 bNeedsParticlePosition : 1 ; uint32 bNeedsParticleVelocity : 1 ; uint32 bNeedsParticleTime : 1 ; uint32 bUsesParticleMotionBlur : 1 ; uint32 bNeedsParticleRandom : 1 ; uint32 bUsesSphericalParticleOpacity : 1 ; uint32 bUsesParticleSubUVs : 1 ; uint32 bUsesLightmapUVs : 1 ; uint32 bUsesAOMaterialMask : 1 ; uint32 bUsesSpeedTree : 1 ; uint32 bNeedsWorldPositionExcludingShaderOffsets : 1 ; uint32 bNeedsParticleSize : 1 ; uint32 bNeedsParticleSpriteRotation : 1 ; uint32 bNeedsSceneTexturePostProcessInputs : 1 ; uint32 bUsesAtmosphericFog : 1 ; uint32 bUsesSkyAtmosphere : 1 ; uint32 bUsesVertexColor : 1 ; uint32 bUsesParticleColor : 1 ; uint32 bUsesParticleLocalToWorld : 1 ; uint32 bUsesParticleWorldToLocal : 1 ; uint32 bUsesInstanceLocalToWorldPS : 1 ; uint32 bUsesInstanceWorldToLocalPS : 1 ; uint32 bUsesPerInstanceRandomPS : 1 ; uint32 bUsesVertexPosition : 1 ; uint32 bPotentiallyManipulateTexCoords : 1 ; uint32 bUsesTransformVector : 1 ; uint32 bCompilingPreviousFrame : 1 ; uint32 bOutputsBasePassVelocities : 1 ; uint32 bUsesPixelDepthOffset : 1 ; uint32 bUsesWorldPositionOffset : 1 ; uint32 bUsesDisplacement : 1 ; uint32 bUsesEmissiveColor : 1 ; uint32 bUsesDistanceCullFade : 1 ; uint32 bIsFullyRough : 1 ; uint32 bAllowCodeChunkGeneration : 1 ; uint32 bUsesAnisotropy : 1 ; uint32 bMaterialIsSubstrate : 1 ; uint32 bOpacityPropertyIsUsed : 1 ; uint32 bEnableExecutionFlow : 1 ; uint32 bUsesCurvature : 1 ; uint32 bUsesPerInstanceFadeAmount : 1 ; uint32 bCullIntermediateUniformExpressions : 1 ; uint32 bUsesExplicitDerivatives : 1 ; int32 AddingUniformExpression ; TBitArray<> AllocatedUserTexCoords ; TBitArray<> AllocatedUserVertexTexCoords ; uint32 DynamicParticleParameterMask ; FMaterialShadingModelField ShadingModelsFromCompilation ; struct FEnvironmentDefines ; struct FSubstrateSimplificationStatus { bool bMaterialFitsInMemoryBudget = false ; uint32 OriginalRequestedByteSize = 0 ; uint32 OriginalRequestedClosureCount = 0 ; bool bRunFullSimplification = false ; bool bFullSimplificationStepHasBeenRun = false ; bool bSlabSimplificationStepHasBeenRun = false ; struct FOperatorToSimplify { union { uint32 PackedData ; struct { uint32 Index : 1 6 ; uint32 Depth : 1 6 ; } Data ; } ; bool)",
    "insertText": "operator(FOperatorToSimplify B)"
  },
  {
    "label": "FSubstrateCompilationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubstrateCompilationContext(ESubstrateCompilationContext InCompilationContext)"
  },
  {
    "label": "SubstrateGenerateDerivedMaterialOperatorData()",
    "kind": "Method",
    "detail": "Function (ESubstrateCompilationContext CompilationContextIndex ; FString SubstratePixelNormalInitializerValues ; uint8 NextFreeSubstrateShaderNormalIndex ; uint8 FinalUsedSharedLocalBasesCount ; TMultiMap<uint64,FSubstrateSharedLocalBasesInfo> CodeChunkToSubstrateSharedLocalBasis ; TMap<FGuid,int32> SubstrateMaterialExpressionToOperatorIndex ; TArray<FSubstrateOperator> SubstrateMaterialExpressionRegisteredOperators ; FSubstrateOperator* SubstrateMaterialRootOperator ; uint32 SubstrateMaterialEffectiveClosureCount ; uint32 SubstrateMaterialRequestedSizeByte ; uint32 SubstrateMaterialClosureCount ; FSubstrateMaterialComplexity SubstrateMaterialComplexity ; bool bSubstrateMaterialIsUnlitNode ; bool bSubstrateWritesEmissive ; bool bSubstrateWritesAmbientOcclusion ; TArray<FGuid> SubstrateNodeIdentifierStack ; bool bSubstrateTreeOutOfStackDepthOccurred ; TArray<int32> SubstrateThicknessStack ; TArray<FExpressionInput*> SubstrateThicknessIndexToExpressionInput ; FSubstrateSimplificationStatus SubstrateSimplificationStatus ; bool)",
    "insertText": "SubstrateGenerateDerivedMaterialOperatorData(FHLSLMaterialTranslator* Compiler)"
  },
  {
    "label": "SubstrateEvaluateSharedLocalBases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstrateEvaluateSharedLocalBases(FHLSLMaterialTranslator* Compiler, uint8& RequestedSharedLocalBasesCount, FEnvironmentDefines* OutEnvironment)"
  },
  {
    "label": "SubstrateCompilationInfoGetMatchingSharedLocalBasisInfo()",
    "kind": "Method",
    "detail": "Function (FSubstrateSharedLocalBasesInfo)",
    "insertText": "SubstrateCompilationInfoGetMatchingSharedLocalBasisInfo(const FSubstrateRegisteredSharedLocalBasis& SearchedSharedLocalBasis)"
  },
  {
    "label": "Initialise()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialise()"
  },
  {
    "label": "AppendVersionString()",
    "kind": "Method",
    "detail": "Function (} ; FSubstrateCompilationContext SubstrateCompilationContext [ ESubstrateCompilationContext::SCC_MAX ] ; ESubstrateCompilationContext CurrentSubstrateCompilationContext = ESubstrateCompilationContext::SCC_Default ; int32 FullySimplifiedSubstrateFrontMaterialCodeChunk = INDEX_NONE ; FString FullySimplifiedSubstrateFrontMaterialTranslatedCodeChunkDefinitions ; FString FullySimplifiedSubstrateFrontMaterialTranslatedCodeChunks ; bool bSubstrateWritesEmissive ; bool bSubstrateWritesAmbientOcclusion ; bool bSubstrateUsesConversionFromLegacy ; bool bSubstrateOutputsOpaqueRoughRefractions ; uint32 NumVtSamples ; const ITargetPlatform* TargetPlatform ; FSubstrateCompilationConfig SubstrateCompilationConfig ; FIoHash DDCKeyHash ; public : void)",
    "insertText": "AppendVersionString(FString& Output, EShaderPlatform Platform)"
  },
  {
    "label": "AppendVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendVersion(FShaderKeyGenerator& KeyGen, EShaderPlatform Platform)"
  },
  {
    "label": "FHLSLMaterialTranslator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHLSLMaterialTranslator(FMaterial* InMaterial, FMaterialCompilationOutput& InMaterialCompilationOutput, const FStaticParameterSet& InStaticParameters, EShaderPlatform InPlatform, EMaterialQualityLevel::Type InQualityLevel, ERHIFeatureLevel::Type InFeatureLevel, const ITargetPlatform* InTargetPlatform = nullptr, const FSubstrateCompilationConfig* InSubstrateCompilationConfig = nullptr, FString MaterialTranslationDDCKeyString = {})"
  },
  {
    "label": "FHLSLMaterialTranslator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHLSLMaterialTranslator()"
  },
  {
    "label": "ShouldStopTranslating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStopTranslating()"
  },
  {
    "label": "GetNumUserTexCoords()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUserTexCoords()"
  },
  {
    "label": "GetNumUserVertexTexCoords()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUserVertexTexCoords()"
  },
  {
    "label": "ClearAllFunctionStacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllFunctionStacks()"
  },
  {
    "label": "ClearFunctionStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFunctionStack(uint32 Frequency)"
  },
  {
    "label": "AssignTempScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignTempScope(TArray<FShaderCodeChunk>& InScope)"
  },
  {
    "label": "AssignShaderFrequencyScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignShaderFrequencyScope(EShaderFrequency InShaderFrequency)"
  },
  {
    "label": "GatherCustomVertexInterpolators()",
    "kind": "Method",
    "detail": "Function (template<ExpressionsArrayType> void)",
    "insertText": "GatherCustomVertexInterpolators(const ExpressionsArrayType& Expressions)"
  },
  {
    "label": "CompileCustomOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileCustomOutputs(TArray<UMaterialExpressionCustomOutput*>& CustomOutputExpressions, TSet<UClass*>& SeenCustomOutputExpressionsClasses, bool bIsBeforeAttributes)"
  },
  {
    "label": "VisitExpressionsRecursive()",
    "kind": "Method",
    "detail": "Function (template<ExpressionsArrayType> EMaterialExpressionVisitResult)",
    "insertText": "VisitExpressionsRecursive(const ExpressionsArrayType& Expressions, IMaterialExpressionVisitor& InVisitor)"
  },
  {
    "label": "VisitExpressionsForProperty()",
    "kind": "Method",
    "detail": "Function (EMaterialExpressionVisitResult)",
    "insertText": "VisitExpressionsForProperty(EMaterialProperty InProperty, IMaterialExpressionVisitor& InVisitor)"
  },
  {
    "label": "ValidateVtPropertyLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateVtPropertyLimits()"
  },
  {
    "label": "ValidateShadingModelsForFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShadingModelsForFeatureLevel(const FMaterialShadingModelField& ShadingModels)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (EHLSLMaterialTranslatorResult)",
    "insertText": "Translate(bool bForceDisableDDCQuery)"
  },
  {
    "label": "GetMaterialEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialEnvironment(EShaderPlatform InPlatform, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetVertexInterpolatorsOffsets()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "GetVertexInterpolatorsOffsets(FString& VertexInterpolatorsOffsetsDefinitionCode)"
  },
  {
    "label": "GetSharedInputsMaterialCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSharedInputsMaterialCode(FString& PixelMembersDeclaration, FString& NormalAssignment, FString& PixelMembersInitializationEpilog, ECompiledPartialDerivativeVariation DerivativeVariation)"
  },
  {
    "label": "GetMaterialShaderCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMaterialShaderCode()"
  },
  {
    "label": "AtParameterCodeChunk()",
    "kind": "Method",
    "detail": "Function (const FShaderCodeChunk&)",
    "insertText": "AtParameterCodeChunk(int32 Index)"
  },
  {
    "label": "GetDerivativeStatus()",
    "kind": "Method",
    "detail": "Function (EDerivativeStatus)",
    "insertText": "GetDerivativeStatus(int32 Index)"
  },
  {
    "label": "GetDerivInfo()",
    "kind": "Method",
    "detail": "Function (FDerivInfo)",
    "insertText": "GetDerivInfo(int32 Index, bool bAllowNonFloat = false)"
  },
  {
    "label": "GetParameterOverrideValueForCurrentFunction()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "GetParameterOverrideValueForCurrentFunction(EMaterialParameterType ParameterType, FName ParameterName, FMaterialParameterMetadata& OutResult)"
  },
  {
    "label": "IsMaterialPropertyUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialPropertyUsed(EMaterialProperty Property, int32 PropertyChunkIndex, const FLinearColor& ReferenceValue, int32 NumComponents)"
  },
  {
    "label": "GenerateFunctionCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateFunctionCode(uint32 Index, ECompiledPartialDerivativeVariation Variation)"
  },
  {
    "label": "GetParameterCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetParameterCode(int32 Index, const TCHAR* Default = 0)"
  },
  {
    "label": "GetParameterCodeRaw()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetParameterCodeRaw(int32 Index, const TCHAR* Default = 0)"
  },
  {
    "label": "GetParameterCodeDeriv()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetParameterCodeDeriv(int32 Index, ECompiledPartialDerivativeVariation Variation)"
  },
  {
    "label": "GetParameterHash()",
    "kind": "Method",
    "detail": "Function (protected : uint64)",
    "insertText": "GetParameterHash(int32 Index)"
  },
  {
    "label": "GetParameterMaterialAttributeMask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetParameterMaterialAttributeMask(int32 Index)"
  },
  {
    "label": "SetParameterMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameterMaterialAttributes(int32 Index, uint64 Mask)"
  },
  {
    "label": "GetDefinitions()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefinitions(const TArray<FShaderCodeChunk>& CodeChunks, int32 StartChunk, int32 EndChunk, ECompiledPartialDerivativeVariation Variation, const TCHAR* ReturnValueSymbolName = nullptr)"
  },
  {
    "label": "GetFixedParameterCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFixedParameterCode(int32 StartChunk, int32 EndChunk, int32 ResultIndex, TArray<FShaderCodeChunk>& CodeChunks, FString& OutDefinitions, FString& OutValue, ECompiledPartialDerivativeVariation Variation, bool bReduceAfterReturnValue = false)"
  },
  {
    "label": "LinkParentScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkParentScopes(TArray<FShaderCodeChunk>& CodeChunks)"
  },
  {
    "label": "GetScopeCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScopeCode(int32 IndentLevel, int32 ScopeChunkIndex, const TArray<FShaderCodeChunk>& CodeChunks, TSet<int32>& EmittedChunks, FString& OutValue)"
  },
  {
    "label": "GetFixedParameterCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFixedParameterCode(int32 ResultIndex, TArray<FShaderCodeChunk>& CodeChunks, FString& OutDefinitions, FString& OutValue, ECompiledPartialDerivativeVariation Variation)"
  },
  {
    "label": "DescribeType()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "DescribeType(EMaterialValueType Type)"
  },
  {
    "label": "HLSLTypeString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "HLSLTypeString(EMaterialValueType Type)"
  },
  {
    "label": "HLSLTypeStringDeriv()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "HLSLTypeStringDeriv(EMaterialValueType Type, EDerivativeStatus DerivativeStatus)"
  },
  {
    "label": "NonPixelShaderExpressionError()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NonPixelShaderExpressionError()"
  },
  {
    "label": "ErrorUnlessFeatureLevelSupported()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ErrorUnlessFeatureLevelSupported(ERHIFeatureLevel::Type RequiredFeatureLevel)"
  },
  {
    "label": "ErrorUnlessPlatformSupports()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ErrorUnlessPlatformSupports(const bool (*SupportFunction)(const FStaticShaderPlatform Platform), const TCHAR* ConditionString)"
  },
  {
    "label": "NonVertexShaderExpressionError()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NonVertexShaderExpressionError()"
  },
  {
    "label": "NonVertexOrPixelShaderExpressionError()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NonVertexOrPixelShaderExpressionError()"
  },
  {
    "label": "AddEstimatedTextureSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEstimatedTextureSample(const uint32 Count = 1)"
  },
  {
    "label": "AddLWCFuncUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLWCFuncUsage(ELWCFunctionKind Kind, const uint32 Count = 1)"
  },
  {
    "label": "GetWorldPositionOrDefault()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldPositionOrDefault(int32 InWorldPosition, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "CreateSymbolName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateSymbolName(const TCHAR* SymbolNameHint)"
  },
  {
    "label": "AddCodeChunkToCurrentScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCodeChunkToCurrentScope(int32 ChunkIndex)"
  },
  {
    "label": "AddCodeChunkToScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCodeChunkToScope(int32 ChunkIndex, int32 ScopeIndex)"
  },
  {
    "label": "AddCodeChunkInner()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCodeChunkInner(uint64 Hash, const TCHAR* FormattedCode, EMaterialValueType Type, EDerivativeStatus DerivativeStatus, bool bInlined)"
  },
  {
    "label": "AddCodeChunkInnerDeriv()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "AddCodeChunkInnerDeriv(const TCHAR* FormattedCodeFinite, const TCHAR* FormattedCodeAnalytic, EMaterialValueType Type, bool bInlined, EDerivativeStatus DerivativeStatus)"
  },
  {
    "label": "AddCodeChunkInnerDeriv()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCodeChunkInnerDeriv(const TCHAR* FormattedCode, EMaterialValueType Type, bool bInlined, EDerivativeStatus DerivativeStatus)"
  },
  {
    "label": "CastValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CastValue(const FString& Code, EMaterialValueType SourceType, EMaterialValueType DestType, EMaterialCastFlags Flags)"
  },
  {
    "label": "CoerceParameter()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CoerceParameter(int32 Index, EMaterialValueType DestType, EMaterialCastFlags AdditionalCastFlags = EMaterialCastFlags::None)"
  },
  {
    "label": "CoerceValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CoerceValue(const FString& Code, EMaterialValueType SourceType, EMaterialValueType DestType, EMaterialCastFlags AdditionalCastFlags = EMaterialCastFlags::None)"
  },
  {
    "label": "CastToNonLWCIfDisabled()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CastToNonLWCIfDisabled(int32 Code)"
  },
  {
    "label": "GetArithmeticResultType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetArithmeticResultType(int32 A, int32 B)"
  },
  {
    "label": "AddCodeChunkInner()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "AddCodeChunkInner(EMaterialValueType Type, EDerivativeStatus DerivativeStatus, bool bInlined, const TCHAR* Format, ...)"
  },
  {
    "label": "AddCodeChunkWithHash()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCodeChunkWithHash(uint64 BaseHash, EMaterialValueType Type, const TCHAR* Format, ...)"
  },
  {
    "label": "AddCodeChunk()",
    "kind": "Method",
    "detail": "Function (template<. . . Types> int32)",
    "insertText": "AddCodeChunk(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddCodeChunkZeroDeriv()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> int32)",
    "insertText": "AddCodeChunkZeroDeriv(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddCodeChunkFiniteDeriv()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> int32)",
    "insertText": "AddCodeChunkFiniteDeriv(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddInlinedCodeChunk()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> int32)",
    "insertText": "AddInlinedCodeChunk(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddInlinedCodeChunkZeroDeriv()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> int32)",
    "insertText": "AddInlinedCodeChunkZeroDeriv(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddInlinedCodeChunkFiniteDeriv()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> int32)",
    "insertText": "AddInlinedCodeChunkFiniteDeriv(EMaterialValueType Type, const TCHAR* Format, Types... Args)"
  },
  {
    "label": "AddUniformExpressionInner()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddUniformExpressionInner(uint64 Hash, FMaterialUniformExpression* UniformExpression, EMaterialValueType Type, const TCHAR* FormattedCode)"
  },
  {
    "label": "AddUniformExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddUniformExpression(FAddUniformExpressionScope& Scope, FMaterialUniformExpression* UniformExpression, EMaterialValueType Type, const TCHAR* Format, ...)"
  },
  {
    "label": "AccessUniformExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AccessUniformExpression(int32 Index)"
  },
  {
    "label": "AccessMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AccessMaterialAttribute(int32 CodeIndex, const FGuid& AttributeID)"
  },
  {
    "label": "GetParameterType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetParameterType(int32 Index)"
  },
  {
    "label": "GetParameterUniformExpression()",
    "kind": "Method",
    "detail": "Function (FMaterialUniformExpression*)",
    "insertText": "GetParameterUniformExpression(int32 Index)"
  },
  {
    "label": "GetTextureForExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureForExpression(int32 Index, int32& OutTextureIndex, EMaterialSamplerType& OutSamplerType, TOptional<FName>& OutParameterName)"
  },
  {
    "label": "GetTextureCollectionForExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureCollectionForExpression(int32 Index, int32& OutTextureCollectionIndex, TOptional<FName>& OutParameterName)"
  },
  {
    "label": "GetArithmeticResultType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetArithmeticResultType(EMaterialValueType TypeA, EMaterialValueType TypeB)"
  },
  {
    "label": "GetTypeMaskedValue()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetTypeMaskedValue(EMaterialValueType Type, FLinearColor ConstValue, bool* OutSuccess)"
  },
  {
    "label": "GetConstMaskedParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConstMaskedParameterValue(EMaterialValueType Type, FMaterialUniformExpression* Expression, FLinearColor& OutConstValue)"
  },
  {
    "label": "GetConstParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConstParameterValue(FMaterialUniformExpression* Expression, FLinearColor& OutConstValue)"
  },
  {
    "label": "CoerceConstantType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CoerceConstantType(FLinearColor SourceValue, EMaterialValueType SourceType, EMaterialValueType DestinationType, FLinearColor& OutResult)"
  },
  {
    "label": "CastConstantType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CastConstantType(FLinearColor SourceValue, EMaterialValueType SourceType, EMaterialValueType DestinationType, EMaterialCastFlags Flags, FLinearColor& OutResult)"
  },
  {
    "label": "LWCCastIfNeccessary()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LWCCastIfNeccessary(EMaterialValueType ResultType, int32 ResultCode)"
  },
  {
    "label": "ConstResultValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConstResultValue(EMaterialValueType Type, FLinearColor ConstantValue)"
  },
  {
    "label": "ConstResultValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConstResultValue(EMaterialValueType Type, float ConstantValue)"
  },
  {
    "label": "ConstArithmeticResultValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConstArithmeticResultValue(int LeftEpression, int RightExpression, FLinearColor ConstantValue)"
  },
  {
    "label": "ConstArithmeticResultValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConstArithmeticResultValue(int LeftEpression, int RightExpression, float ConstantValue)"
  },
  {
    "label": "IsExpressionConstantValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpressionConstantValue(int Code, float ConstantValue)"
  },
  {
    "label": "GenericSwitch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericSwitch(const TCHAR* Function, int32 IfTrue, int32 IfFalse)"
  },
  {
    "label": "IsConstFloatOfPow2Expression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstFloatOfPow2Expression(int32 ExpressionCode)"
  },
  {
    "label": "SubstrateGetCastParameterCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SubstrateGetCastParameterCode(int32 Index, EMaterialValueType DestType)"
  },
  {
    "label": "SubstrateGetCastParameterCodeWithDeriv()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SubstrateGetCastParameterCodeWithDeriv(int32 Index, EMaterialValueType DestType)"
  },
  {
    "label": "SetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialProperty(EMaterialProperty InProperty, EShaderFrequency OverrideShaderFrequency = SF_NumFrequencies, bool bUsePreviousFrameTime = false)"
  },
  {
    "label": "PushMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMaterialAttribute(const FGuid& InAttributeID)"
  },
  {
    "label": "PopMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "PopMaterialAttribute()"
  },
  {
    "label": "GetMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (const FGuid)",
    "insertText": "GetMaterialAttribute()"
  },
  {
    "label": "SetBaseMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseMaterialAttribute(const FGuid& InAttributeID)"
  },
  {
    "label": "PushParameterOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushParameterOwner(const FMaterialParameterInfo& InOwnerInfo)"
  },
  {
    "label": "PopParameterOwner()",
    "kind": "Method",
    "detail": "Function (FMaterialParameterInfo)",
    "insertText": "PopParameterOwner()"
  },
  {
    "label": "GetCurrentShaderFrequency()",
    "kind": "Method",
    "detail": "Function (} EShaderFrequency)",
    "insertText": "GetCurrentShaderFrequency()"
  },
  {
    "label": "IsTangentSpaceNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentSpaceNormal()"
  },
  {
    "label": "GetMaterialShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetMaterialShadingModels()"
  },
  {
    "label": "GetCompiledShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetCompiledShadingModels()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Error(const TCHAR* Text)"
  },
  {
    "label": "AppendExpressionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExpressionError(UMaterialExpression* Expression, const TCHAR* Text)"
  },
  {
    "label": "CallExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CallExpression(FMaterialExpressionKey ExpressionKey, FMaterialCompiler* Compiler)"
  },
  {
    "label": "CallExpressionExec()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CallExpressionExec(UMaterialExpression* Expression)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetType(int32 Code)"
  },
  {
    "label": "GetQualityLevel()",
    "kind": "Method",
    "detail": "Function (EMaterialQualityLevel::Type)",
    "insertText": "GetQualityLevel()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "GetShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetShaderPlatform()"
  },
  {
    "label": "GetTargetPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "GetTargetPlatform()"
  },
  {
    "label": "IsMaterialPropertyUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialPropertyUsed(EMaterialProperty Property, int32 PropertyChunkIndex)"
  },
  {
    "label": "ValidCast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ValidCast(int32 Code, EMaterialValueType DestType)"
  },
  {
    "label": "ForceCast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForceCast(int32 Code, EMaterialValueType DestType, uint32 ForceCastFlags = 0)"
  },
  {
    "label": "CastShadingModelToFloat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CastShadingModelToFloat(int32 Code)"
  },
  {
    "label": "TruncateLWC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TruncateLWC(int32 Code)"
  },
  {
    "label": "PushFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFunction(FMaterialFunctionCompileState* FunctionState)"
  },
  {
    "label": "PopFunction()",
    "kind": "Method",
    "detail": "Function (FMaterialFunctionCompileState*)",
    "insertText": "PopFunction()"
  },
  {
    "label": "GetCurrentFunctionStackDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentFunctionStackDepth()"
  },
  {
    "label": "AccessCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AccessCollectionParameter(UMaterialParameterCollection* ParameterCollection, int32 ParameterIndex, int32 ComponentIndex)"
  },
  {
    "label": "NumericParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumericParameter(EMaterialParameterType ParameterType, FName ParameterName, const UE::Shader::FValue& DefaultValue)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant(float X)"
  },
  {
    "label": "Constant2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant2(float X, float Y)"
  },
  {
    "label": "Constant3()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant3(float X, float Y, float Z)"
  },
  {
    "label": "Constant4()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant4(float X, float Y, float Z, float W)"
  },
  {
    "label": "GenericConstant()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericConstant(const UE::Shader::FValue& Value)"
  },
  {
    "label": "ViewProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ViewProperty(EMaterialExposedViewProperty Property, bool InvProperty)"
  },
  {
    "label": "IsOrthographic()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IsOrthographic()"
  },
  {
    "label": "GameTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GameTime(bool bPeriodic, float Period)"
  },
  {
    "label": "RealTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RealTime(bool bPeriodic, float Period)"
  },
  {
    "label": "DeltaTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeltaTime()"
  },
  {
    "label": "PeriodicHint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PeriodicHint(int32 PeriodicCode)"
  },
  {
    "label": "Sine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sine(int32 X)"
  },
  {
    "label": "Cosine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Cosine(int32 X)"
  },
  {
    "label": "Tangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Tangent(int32 X)"
  },
  {
    "label": "Arcsine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arcsine(int32 X)"
  },
  {
    "label": "ArcsineFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArcsineFast(int32 X)"
  },
  {
    "label": "Arccosine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arccosine(int32 X)"
  },
  {
    "label": "ArccosineFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArccosineFast(int32 X)"
  },
  {
    "label": "Arctangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent(int32 X)"
  },
  {
    "label": "ArctangentFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArctangentFast(int32 X)"
  },
  {
    "label": "Arctangent2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent2(int32 Y, int32 X)"
  },
  {
    "label": "Arctangent2Fast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent2Fast(int32 Y, int32 X)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Floor(int32 X)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Ceil(int32 X)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Round(int32 X)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Truncate(int32 X)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sign(int32 X)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Frac(int32 X)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Fmod(int32 A, int32 B)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Modulo(int32 A, int32 B)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Abs(int32 X)"
  },
  {
    "label": "ReflectionVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionVector()"
  },
  {
    "label": "ReflectionAboutCustomWorldNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionAboutCustomWorldNormal(int32 CustomWorldNormal, int32 bNormalizeCustomWorldNormal)"
  },
  {
    "label": "CameraVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CameraVector()"
  },
  {
    "label": "LightVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightVector()"
  },
  {
    "label": "GetViewportUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetViewportUV()"
  },
  {
    "label": "GetPixelPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPixelPosition()"
  },
  {
    "label": "ParticleMacroUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleMacroUV()"
  },
  {
    "label": "ParticleSubUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSubUV(int32 TextureIndex, EMaterialSamplerType SamplerType, int32 MipValue0Index, int32 MipValue1Index, ETextureMipValueMode MipValueMode, bool bBlend)"
  },
  {
    "label": "ParticleSubUVProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSubUVProperty(int32 PropertyIndex)"
  },
  {
    "label": "ParticleColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleColor()"
  },
  {
    "label": "ParticlePosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticlePosition(EPositionOrigin OriginType)"
  },
  {
    "label": "ParticleRadius()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleRadius()"
  },
  {
    "label": "SphericalParticleOpacity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SphericalParticleOpacity(int32 Density)"
  },
  {
    "label": "ParticleRelativeTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleRelativeTime()"
  },
  {
    "label": "ParticleMotionBlurFade()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleMotionBlurFade()"
  },
  {
    "label": "ParticleRandom()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleRandom()"
  },
  {
    "label": "ParticleDirection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleDirection()"
  },
  {
    "label": "ParticleSpeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSpeed()"
  },
  {
    "label": "ParticleSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSize()"
  },
  {
    "label": "ParticleSpriteRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSpriteRotation()"
  },
  {
    "label": "LocalPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LocalPosition(EPositionIncludedOffsets IncludedOffsets, ELocalPositionOrigin OriginType)"
  },
  {
    "label": "WorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WorldPosition(EWorldPositionIncludedOffsets WorldPositionIncludedOffsets)"
  },
  {
    "label": "ObjectWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectWorldPosition(EPositionOrigin OriginType)"
  },
  {
    "label": "ObjectRadius()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectRadius()"
  },
  {
    "label": "ObjectBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectBounds()"
  },
  {
    "label": "ObjectLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "InstanceLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InstanceLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "PreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "DistanceCullFade()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceCullFade()"
  },
  {
    "label": "ActorWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ActorWorldPosition(EPositionOrigin OriginType)"
  },
  {
    "label": "DynamicBranch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicBranch(int32 Condition, int32 A, int32 B)"
  },
  {
    "label": "If()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "If(int32 A, int32 B, int32 AGreaterThanB, int32 AEqualsB, int32 ALessThanB, int32 ThresholdArg)"
  },
  {
    "label": "AllocateSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateSlot(TBitArray<>& InBitArray, int32 InSlotIndex, int32 InSlotCount = 1)"
  },
  {
    "label": "MaterialBakingWorldPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "MaterialBakingWorldPosition()"
  },
  {
    "label": "TextureCoordinate()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "TextureCoordinate(uint32 CoordinateIndex, bool UnMirrorU, bool UnMirrorV)"
  },
  {
    "label": "SetPotentiallyManipulateTexCoords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPotentiallyManipulateTexCoords()"
  },
  {
    "label": "AcquireVTStackIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AcquireVTStackIndex(ETextureMipValueMode MipValueMode, TextureAddress AddressU, TextureAddress AddressV, float AspectRatio, int32 CoordinateIndex, int32 MipValue0Index, int32 MipValue1Index, int32 PreallocatedStackTextureIndex, const FString& UV_Value, const FString& UV_Ddx, const FString& UV_Ddy, bool bAdaptive, bool bGenerateFeedback, bool bMeshPaint)"
  },
  {
    "label": "TextureSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureSample(int32 TextureIndex, int32 CoordinateIndex, EMaterialSamplerType SamplerType, int32 MipValue0Index = INDEX_NONE, int32 MipValue1Index = INDEX_NONE, ETextureMipValueMode MipValueMode = TMVM_None, ESamplerSourceMode SamplerSource = SSM_FromTextureAsset, int32 TextureReferenceIndex = INDEX_NONE, bool AutomaticViewMipBias = false, bool AdaptiveVirtualTexture = false, bool EnableFeedback = true)"
  },
  {
    "label": "TextureProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureProperty(int32 TextureIndex, EMaterialExposedTextureProperty Property)"
  },
  {
    "label": "TextureFromCollection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureFromCollection(int32 TextureCollectionCodeIndex, int32 IndexIntoCollection, EMaterialValueType ResultTextureType)"
  },
  {
    "label": "TextureDecalMipmapLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureDecalMipmapLevel(int32 TextureSizeInput)"
  },
  {
    "label": "TextureDecalDerivative()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureDecalDerivative(bool bDDY)"
  },
  {
    "label": "DecalColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecalColor()"
  },
  {
    "label": "DecalLifetimeOpacity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecalLifetimeOpacity()"
  },
  {
    "label": "PixelDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PixelDepth()"
  },
  {
    "label": "GetScreenAlignedUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetScreenAlignedUV(int32 Offset, int32 ViewportUV, bool bUseOffset)"
  },
  {
    "label": "SceneDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneDepth(int32 Offset, int32 ViewportUV, bool bUseOffset)"
  },
  {
    "label": "SceneTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneTextureLookup(int32 ViewportUV, uint32 InSceneTextureId, bool bFiltered, bool bClamped, bool bUnused)"
  },
  {
    "label": "GetSceneTextureViewSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSceneTextureViewSize(int32 SceneTextureId, bool InvProperty)"
  },
  {
    "label": "FindOrAddUserSceneTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddUserSceneTexture(FName UserSceneTextureName)"
  },
  {
    "label": "DBufferTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DBufferTextureLookup(int32 ViewportUV, uint32 DBufferTextureIndex)"
  },
  {
    "label": "PathTracingBufferTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingBufferTextureLookup(int32 ViewportUV, uint32 PathTracingBufferTextureIndex)"
  },
  {
    "label": "UseSceneTextureId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseSceneTextureId(ESceneTextureId SceneTextureId, bool bTextureLookup)"
  },
  {
    "label": "SceneColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneColor(int32 Offset, int32 ViewportUV, bool bUseOffset)"
  },
  {
    "label": "Switch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Switch(int32 SwitchValueInput, int32 DefaultInput, TArray<int32>& CompiledInputs)"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Texture(UTexture* InTexture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource = SSM_FromTextureAsset, ETextureMipValueMode MipValueMode = TMVM_None)"
  },
  {
    "label": "TextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureParameter(FName ParameterName, UTexture* DefaultValue, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource = SSM_FromTextureAsset)"
  },
  {
    "label": "TextureCollection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollection(UTextureCollection* TextureCollection, int32& TextureCollectionReferenceIndex)"
  },
  {
    "label": "TextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollectionParameter(FName ParameterName, UTextureCollection* DefaultValue, int32& TextureCollectionReferenceIndex)"
  },
  {
    "label": "TextureCollectionCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollectionCount(int32 InTextureCollectionCodeIndex)"
  },
  {
    "label": "VirtualTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTexture(URuntimeVirtualTexture* InTexture, int32 TextureLayerIndex, int32 PageTableLayerIndex, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureParameter(FName ParameterName, URuntimeVirtualTexture* DefaultValue, int32 TextureLayerIndex, int32 PageTableLayerIndex, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureUniform(int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "VirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureUniform(FName ParameterName, int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "VirtualTextureWorldToUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureWorldToUV(int32 WorldPositionIndex, int32 P0, int32 P1, int32 P2, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "VirtualTextureUnpack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureUnpack(int32 CodeIndex0, int32 CodeIndex1, int32 CodeIndex2, int32 P0, EVirtualTextureUnpackType UnpackType)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTexture(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTexture(UTexture* InTexture, int32& TextureReferenceIndex)"
  },
  {
    "label": "ExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureParameter(FName ParameterName, UTexture* DefaultValue, int32& TextureReferenceIndex)"
  },
  {
    "label": "ExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateScaleRotation(int32 TextureReferenceIndex, TOptional<FName> ParameterName)"
  },
  {
    "label": "ExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateScaleRotation(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "ExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateOffset(int32 TextureReferenceIndex, TOptional<FName> ParameterName)"
  },
  {
    "label": "ExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateOffset(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "SparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTexture(USparseVolumeTexture* Texture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "SparseVolumeTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureParameter(FName ParameterName, USparseVolumeTexture* InDefaultTexture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "SparseVolumeTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureUniform(int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "SparseVolumeTextureUniformParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureUniformParameter(FName ParameterName, int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "SparseVolumeTextureSamplePageTable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSamplePageTable(int32 SparseVolumeTextureIndex, int32 UVWIndex, int32 MipLevelIndex, ESamplerSourceMode SamplerSource, bool bIsManualLinearMipMapSecondSample)"
  },
  {
    "label": "SparseVolumeTextureSamplePhysicalTileData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSamplePhysicalTileData(int32 SparseVolumeTextureIndex, int32 VoxelCoordIndex, int32 PhysicalTileDataIdxIndex, bool bIsManualLinearMipMapSecondSample)"
  },
  {
    "label": "SparseVolumeTextureSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSample(int32 SparseVolumeTextureIndex, int32 UVWIndex, int32 MipValue0Index, int32 MipValue1Index, int32 PhysicalTileDataIdxIndex, ETextureMipValueMode MipValueMode, ESamplerSourceMode SamplerSource)"
  },
  {
    "label": "GetReferencedTexture()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetReferencedTexture(int32 Index)"
  },
  {
    "label": "GetReferencedTextureCollection()",
    "kind": "Method",
    "detail": "Function (UTextureCollection*)",
    "insertText": "GetReferencedTextureCollection(int32 Index)"
  },
  {
    "label": "StaticBool()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticBool(bool bValue)"
  },
  {
    "label": "StaticBoolParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticBoolParameter(FName ParameterName, bool bDefaultValue)"
  },
  {
    "label": "DynamicBoolParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicBoolParameter(FName ParameterName, bool bDefaultValue)"
  },
  {
    "label": "StaticComponentMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticComponentMask(int32 Vector, FName ParameterName, bool bDefaultR, bool bDefaultG, bool bDefaultB, bool bDefaultA)"
  },
  {
    "label": "GetMaterialLayers()",
    "kind": "Method",
    "detail": "Function (const FMaterialLayersFunctions*)",
    "insertText": "GetMaterialLayers()"
  },
  {
    "label": "GetStaticBoolValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticBoolValue(int32 BoolIndex, bool& bSucceeded)"
  },
  {
    "label": "StaticTerrainLayerWeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticTerrainLayerWeight(FName ParameterName, int32 Default, bool bTextureArray = false)"
  },
  {
    "label": "FontSignedDistanceData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FontSignedDistanceData()"
  },
  {
    "label": "VertexColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexColor()"
  },
  {
    "label": "MeshPaintTextureCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureCoordinateIndex()"
  },
  {
    "label": "MeshPaintTextureDescriptor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureDescriptor()"
  },
  {
    "label": "MeshPaintTextureReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureReplace(int32 Invalid, int32 Valid)"
  },
  {
    "label": "PreSkinnedPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedPosition()"
  },
  {
    "label": "PreSkinnedNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedNormal()"
  },
  {
    "label": "VertexInterpolator()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexInterpolator(uint32 InterpolatorIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Add(int32 A, int32 B)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sub(int32 A, int32 B)"
  },
  {
    "label": "Mul()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Mul(int32 A, int32 B)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Div(int32 A, int32 B)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Dot(int32 A, int32 B)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Cross(int32 A, int32 B)"
  },
  {
    "label": "Power()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Power(int32 Base, int32 Exponent)"
  },
  {
    "label": "Exponential()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Exponential(int32 X)"
  },
  {
    "label": "Exponential2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Exponential2(int32 X)"
  },
  {
    "label": "Logarithm()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm(int32 X)"
  },
  {
    "label": "Logarithm2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm2(int32 X)"
  },
  {
    "label": "Logarithm10()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm10(int32 X)"
  },
  {
    "label": "SquareRoot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SquareRoot(int32 X)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Length(int32 X)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Normalize(int32 X)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Step(int32 Y, int32 X)"
  },
  {
    "label": "SmoothStep()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SmoothStep(int32 X, int32 Y, int32 A)"
  },
  {
    "label": "InvLerp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InvLerp(int32 X, int32 Y, int32 A)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Lerp(int32 A, int32 B, int32 S)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Min(int32 A, int32 B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Max(int32 A, int32 B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Clamp(int32 X, int32 A, int32 B)"
  },
  {
    "label": "Saturate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Saturate(int32 X)"
  },
  {
    "label": "ComponentMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComponentMask(int32 Vector, bool R, bool G, bool B, bool A)"
  },
  {
    "label": "AppendVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendVector(int32 A, int32 B)"
  },
  {
    "label": "HsvToRgb()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HsvToRgb(int32 X)"
  },
  {
    "label": "RgbToHsv()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RgbToHsv(int32 X)"
  },
  {
    "label": "TransformBase()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformBase(EMaterialCommonBasis SourceCoordBasis, EMaterialCommonBasis DestCoordBasis, int32 A, int AWComponent)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformVector(EMaterialCommonBasis SourceCoordBasis, EMaterialCommonBasis DestCoordBasis, int32 A)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformPosition(EMaterialCommonBasis SourceCoordBasis, EMaterialCommonBasis DestCoordBasis, int32 A)"
  },
  {
    "label": "CalculatePeriodicWorldPositionOrigin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalculatePeriodicWorldPositionOrigin(int TileScaleIdx)"
  },
  {
    "label": "TransformFromPeriodicWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformFromPeriodicWorldPosition(EMaterialCommonBasis DestCoordBasis, int TileScaleIdx, int32 A)"
  },
  {
    "label": "TransformToPeriodicWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformToPeriodicWorldPosition(EMaterialCommonBasis SourceCoordBasis, int TileScaleIdx, int32 A)"
  },
  {
    "label": "TransformNormalFromRequestedBasisToWorld()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformNormalFromRequestedBasisToWorld(int32 NormalCodeChunk)"
  },
  {
    "label": "DynamicParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicParameter(FLinearColor& DefaultValue, uint32 ParameterIndex = 0)"
  },
  {
    "label": "LightmapUVs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightmapUVs()"
  },
  {
    "label": "PrecomputedAOMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PrecomputedAOMask()"
  },
  {
    "label": "GIReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GIReplace(int32 Direct, int32 StaticIndirect, int32 DynamicIndirect)"
  },
  {
    "label": "ShadowReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ShadowReplace(int32 Default, int32 Shadow)"
  },
  {
    "label": "NaniteReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NaniteReplace(int32 Default, int32 Nanite)"
  },
  {
    "label": "ReflectionCapturePassSwitch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionCapturePassSwitch(int32 Default, int32 Reflection)"
  },
  {
    "label": "RayTracingQualitySwitchReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RayTracingQualitySwitchReplace(int32 Normal, int32 RayTraced)"
  },
  {
    "label": "PathTracingQualitySwitchReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingQualitySwitchReplace(int32 Normal, int32 PathTraced)"
  },
  {
    "label": "PathTracingRayTypeSwitch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingRayTypeSwitch(int32 Main, int32 Shadow, int32 IndirectDiffuse, int32 IndirectSpecular, int32 IndirectVolume)"
  },
  {
    "label": "LightmassReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightmassReplace(int32 Realtime, int32 Lightmass)"
  },
  {
    "label": "VirtualTextureOutputReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureOutputReplace(int32 Default, int32 VirtualTexture)"
  },
  {
    "label": "ObjectOrientation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectOrientation()"
  },
  {
    "label": "RotateAboutAxis()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RotateAboutAxis(int32 NormalizedRotationAxisAndAngleIndex, int32 PositionOnAxisIndex, int32 PositionIndex)"
  },
  {
    "label": "TwoSidedSign()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TwoSidedSign()"
  },
  {
    "label": "VertexNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexNormal()"
  },
  {
    "label": "VertexTangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexTangent()"
  },
  {
    "label": "PixelNormalWS()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PixelNormalWS()"
  },
  {
    "label": "DDX()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DDX(int32 A)"
  },
  {
    "label": "DDY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DDY(int32 A)"
  },
  {
    "label": "Derivative()",
    "kind": "Method",
    "detail": "Function (enum class EDervativeComponent { X,Y,} ; int32)",
    "insertText": "Derivative(int32 A, EDervativeComponent Component)"
  },
  {
    "label": "AntialiasedTextureMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AntialiasedTextureMask(int32 Tex, int32 UV, float Threshold, uint8 Channel)"
  },
  {
    "label": "DepthOfFieldFunction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DepthOfFieldFunction(int32 Depth, int32 FunctionValueIndex)"
  },
  {
    "label": "PostVolumeUserFlagTestFunction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PostVolumeUserFlagTestFunction(int32 Input)"
  },
  {
    "label": "Sobol()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sobol(int32 Cell, int32 Index, int32 Seed)"
  },
  {
    "label": "TemporalSobol()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TemporalSobol(int32 Index, int32 Seed)"
  },
  {
    "label": "Noise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Noise(int32 Position, EPositionOrigin PositionOrigin, float Scale, int32 Quality, uint8 NoiseFunction, bool bTurbulence, int32 Levels, float OutputMin, float OutputMax, float LevelScale, int32 FilterWidth, bool bTiling, uint32 RepeatSize)"
  },
  {
    "label": "VectorNoise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VectorNoise(int32 Position, EPositionOrigin PositionOrigin, int32 Quality, uint8 NoiseFunction, bool bTiling, uint32 TileSize)"
  },
  {
    "label": "BlackBody()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BlackBody(int32 Temp)"
  },
  {
    "label": "GetHairUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairUV()"
  },
  {
    "label": "GetHairDimensions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairDimensions()"
  },
  {
    "label": "GetHairSeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairSeed()"
  },
  {
    "label": "GetHairClumpID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairClumpID()"
  },
  {
    "label": "GetHairTangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairTangent(bool bUseTangentSpace)"
  },
  {
    "label": "GetHairRootUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairRootUV()"
  },
  {
    "label": "GetHairBaseColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairBaseColor()"
  },
  {
    "label": "GetHairAO()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAO()"
  },
  {
    "label": "GetHairRoughness()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairRoughness()"
  },
  {
    "label": "GetHairDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairDepth()"
  },
  {
    "label": "GetHairCoverage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairCoverage()"
  },
  {
    "label": "GetHairAuxilaryData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAuxilaryData()"
  },
  {
    "label": "GetHairAtlasUVs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAtlasUVs()"
  },
  {
    "label": "GetHairGroupIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairGroupIndex()"
  },
  {
    "label": "GetHairColorFromMelanin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairColorFromMelanin(int32 Melanin, int32 Redness, int32 DyeColor)"
  },
  {
    "label": "DistanceToNearestSurface()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceToNearestSurface(int32 PositionArg, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "DistanceFieldGradient()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceFieldGradient(int32 PositionArg, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "DistanceFieldApproxAO()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceFieldApproxAO(int32 PositionArg, EPositionOrigin PositionOrigin, int32 NormalArg, int32 BaseDistanceArg, int32 RadiusArg, uint32 NumSteps, float StepScale)"
  },
  {
    "label": "SamplePhysicsField()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SamplePhysicsField(int32 PositionArg, EPositionOrigin PositionOrigin, const int32 OutputType, const int32 TargetIndex)"
  },
  {
    "label": "AtmosphericFogColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericFogColor(int32 WorldPosition, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "AtmosphericLightVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericLightVector()"
  },
  {
    "label": "AtmosphericLightColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericLightColor()"
  },
  {
    "label": "SkyAtmosphereLightIlluminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightIlluminance(int32 WorldPosition, EPositionOrigin PositionOrigin, int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightIlluminanceOnGround()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightIlluminanceOnGround(int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightDirection(int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightDiskLuminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightDiskLuminance(int32 LightIndex, int32 OverrideAtmosphereLightDiscCosHalfApexAngle)"
  },
  {
    "label": "SkyAtmosphereViewLuminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereViewLuminance()"
  },
  {
    "label": "SkyAtmosphereAerialPerspective()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereAerialPerspective(int32 WorldPosition, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "SkyAtmosphereDistantLightScatteredLuminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereDistantLightScatteredLuminance()"
  },
  {
    "label": "SkyLightEnvMapSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyLightEnvMapSample(int32 DirectionCodeChunk, int32 RoughnessCodeChunk)"
  },
  {
    "label": "SceneDepthWithoutWater()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneDepthWithoutWater(int32 Offset, int32 ViewportUV, bool bUseOffset, float FallbackDepth)"
  },
  {
    "label": "GetCloudSampleAltitude()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleAltitude()"
  },
  {
    "label": "GetCloudSampleAltitudeInLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleAltitudeInLayer()"
  },
  {
    "label": "GetCloudSampleNormAltitudeInLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleNormAltitudeInLayer()"
  },
  {
    "label": "GetCloudSampleShadowSampleDistance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleShadowSampleDistance()"
  },
  {
    "label": "GetVolumeSampleConservativeDensity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVolumeSampleConservativeDensity()"
  },
  {
    "label": "GetCloudEmptySpaceSkippingSphereCenterWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudEmptySpaceSkippingSphereCenterWorldPosition()"
  },
  {
    "label": "GetCloudEmptySpaceSkippingSphereRadius()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudEmptySpaceSkippingSphereRadius()"
  },
  {
    "label": "CustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomPrimitiveData(int32 OutputIndex, EMaterialValueType Type)"
  },
  {
    "label": "ShadingModel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ShadingModel(EMaterialShadingModel InSelectedShadingModel)"
  },
  {
    "label": "MapARPassthroughCameraUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MapARPassthroughCameraUV(int32 UV)"
  },
  {
    "label": "CustomExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomExpression(class UMaterialExpressionCustom* Custom, int32 OutputIndex, TArray<int32>& CompiledInputs)"
  },
  {
    "label": "CustomOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomOutput(class UMaterialExpressionCustomOutput* Custom, int32 OutputIndex, int32 OutputCode)"
  },
  {
    "label": "VirtualTextureOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureOutput(uint8 MaterialAttributeMask)"
  },
  {
    "label": "DefaultMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DefaultMaterialAttributes()"
  },
  {
    "label": "SetMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetMaterialAttribute(int32 MaterialAttributes, int32 Value, const FGuid& AttributeID)"
  },
  {
    "label": "BeginScope()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope()"
  },
  {
    "label": "BeginScope_If()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_If(int32 Condition)"
  },
  {
    "label": "BeginScope_Else()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_Else()"
  },
  {
    "label": "BeginScope_For()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_For(const UMaterialExpression* Expression, int32 StartIndex, int32 EndIndex, int32 IndexStep)"
  },
  {
    "label": "EndScope()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndScope()"
  },
  {
    "label": "ForLoopIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForLoopIndex(const UMaterialExpression* Expression)"
  },
  {
    "label": "ReturnMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReturnMaterialAttributes(int32 MaterialAttributes)"
  },
  {
    "label": "SetLocal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetLocal(const FName& LocalName, int32 Value)"
  },
  {
    "label": "GetLocal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLocal(const FName& LocalName)"
  },
  {
    "label": "NeuralOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NeuralOutput(int32 ViewportUV, uint32 NeuralIndexType)"
  },
  {
    "label": "SubstrateCreateAndRegisterNullMaterial()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateCreateAndRegisterNullMaterial()"
  },
  {
    "label": "SubstrateSlabBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateSlabBSDF(int32 DiffuseAlbedo, int32 F0, int32 F90, int32 Roughness, int32 Anisotropy, int32 SSSProfileId, int32 SSSMFP, int32 SSSMFPScale, int32 SSSPhaseAniso, int32 bUseSSSDiffusion, int32 EmissiveColor, int32 SecondRoughness, int32 SecondRoughnessWeight, int32 SecondRoughnessAsSimpleClearCoat, int32 FuzzAmount, int32 FuzzColor, int32 FuzzRoughness, int32 Thickness, int32 GlintValue, int32 GlintUV, int32 SpecularProfileId, bool bIsAtTheBottomOfTopology, int32 Normal, int32 Tangent, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateConversionFromLegacy()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateConversionFromLegacy(bool bHasDynamicShadingModel, int32 BaseColor, int32 Specular, int32 Metallic, int32 Roughness, int32 Anisotropy, int32 SubSurfaceColor, int32 SubSurfaceProfileId, int32 ClearCoat, int32 ClearCoatRoughness, int32 EmissiveColor, int32 Opacity, int32 ThinTranslucentTransmittanceColor, int32 ThinTranslucentSurfaceCoverage, int32 WaterScatteringCoefficients, int32 WaterAbsorptionCoefficients, int32 WaterPhaseG, int32 ColorScaleBehindWater, int32 ShadingModel, int32 Normal, int32 Tangent, const FString& SharedLocalBasisIndexMacro, int32 ClearCoat_Normal, int32 ClearCoat_Tangent, const FString& ClearCoat_SharedLocalBasisIndexMacro, int32 CustomTangent_Tangent, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateVolumetricFogCloudBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVolumetricFogCloudBSDF(int32 Albedo, int32 Extinction, int32 EmissiveColor, int32 AmbientOcclusion, bool bEmissiveOnly)"
  },
  {
    "label": "SubstrateUnlitBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateUnlitBSDF(int32 EmissiveColor, int32 TransmittanceColor, int32 Normal, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateUIBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateUIBSDF(int32 EmissiveColor, int32 Opacity, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateHairBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHairBSDF(int32 BaseColor, int32 Scatter, int32 Specular, int32 Roughness, int32 Backlit, int32 EmissiveColor, int32 Tangent, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateEyeBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateEyeBSDF(int32 DiffuseColor, int32 Roughness, int32 IrisMask, int32 IrisDistance, int32 EmissiveColor, int32 CorneaNormal, int32 IrisNormal, int32 IrisPlaneNormal, int32 SSSProfileId, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateSingleLayerWaterBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateSingleLayerWaterBSDF(int32 BaseColor, int32 Metallic, int32 Specular, int32 Roughness, int32 EmissiveColor, int32 TopMaterialOpacity, int32 WaterAlbedo, int32 WaterExtinction, int32 WaterPhaseG, int32 ColorScaleBehindWater, int32 Normal, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateHorizontalMixing()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixing(int32 Background, int32 Foreground, int32 Mix, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateHorizontalMixingParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixingParameterBlending(int32 Background, int32 Foreground, int32 HorizontalMixCodeChunk, int32 NormalMixCodeChunk, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateVerticalLayering()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayering(int32 Top, int32 Base, int32 Thickness, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateVerticalLayeringParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayeringParameterBlending(int32 Top, int32 Base, int32 Thickness, const FString& SharedLocalBasisIndexMacro, int32 TopBSDFNormalCodeChunk, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateAdd()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAdd(int32 A, int32 B, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateAddParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAddParameterBlending(int32 A, int32 B, int32 AMixWeight, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateWeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateWeight(int32 A, int32 Weight, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateWeightParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateWeightParameterBlending(int32 A, int32 Weight, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateTransmittanceToMFP()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateTransmittanceToMFP(int32 TransmittanceColor, int32 DesiredThickness, int32 OutputIndex)"
  },
  {
    "label": "SubstrateMetalnessToDiffuseAlbedoF0()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateMetalnessToDiffuseAlbedoF0(int32 BaseColor, int32 Specular, int32 Metallic, int32 OutputIndex)"
  },
  {
    "label": "SubstrateHazinessToSecondaryRoughness()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHazinessToSecondaryRoughness(int32 BaseRoughness, int32 Haziness, int32 OutputIndex)"
  },
  {
    "label": "SubstrateThinFilm()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThinFilm(int32 NormalCodeChunk, int32 SpecularColorCodeChunk, int32 EdgeSpecularColorCodeChunk, int32 ThicknessCodeChunk, int32 IORCodeChunk, int32 OutputIndex)"
  },
  {
    "label": "SubstrateCompilePreview()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateCompilePreview(int32 SubstrateDataCodeChunk)"
  },
  {
    "label": "SubstrateSkipsOpacityEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubstrateSkipsOpacityEvaluation()"
  },
  {
    "label": "SubstrateTreeStackPush()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackPush(UMaterialExpression* Expression, uint32 InputIndex)"
  },
  {
    "label": "SubstrateTreeStackGetPathUniqueId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackGetPathUniqueId()"
  },
  {
    "label": "SubstrateTreeStackGetParentPathUniqueId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackGetParentPathUniqueId()"
  },
  {
    "label": "SubstrateTreeStackPop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstrateTreeStackPop()"
  },
  {
    "label": "GetSubstrateTreeOutOfStackDepthOccurred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSubstrateTreeOutOfStackDepthOccurred()"
  },
  {
    "label": "SubstrateThicknessStackGetThicknessIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackGetThicknessIndex()"
  },
  {
    "label": "SubstrateThicknessStackGetThicknessCode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackGetThicknessCode(int32 Index)"
  },
  {
    "label": "SubstrateThicknessStackPush()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackPush(UMaterialExpression* Expression, FExpressionInput* Input)"
  },
  {
    "label": "SubstrateThicknessStackPop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstrateThicknessStackPop()"
  },
  {
    "label": "SubstrateCompilationRegisterOperator()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator&)",
    "insertText": "SubstrateCompilationRegisterOperator(int32 OperatorType, FGuid SubstrateExpressionGuid, UMaterialExpression* Child, UMaterialExpression* Parent, FGuid SubstrateParentExpressionGuid, bool bUseParameterBlending = false)"
  },
  {
    "label": "SubstrateCompilationGetOperator()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator&)",
    "insertText": "SubstrateCompilationGetOperator(FGuid SubstrateExpressionGuid)"
  },
  {
    "label": "SubstrateCompilationGetOperatorFromIndex()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator*)",
    "insertText": "SubstrateCompilationGetOperatorFromIndex(int32 OperatorIndex)"
  },
  {
    "label": "SubstrateCompilationInfoRegisterSharedLocalBasis()",
    "kind": "Method",
    "detail": "Function (FSubstrateRegisteredSharedLocalBasis)",
    "insertText": "SubstrateCompilationInfoRegisterSharedLocalBasis(int32 NormalCodeChunk)"
  },
  {
    "label": "SubstrateCompilationInfoRegisterSharedLocalBasis()",
    "kind": "Method",
    "detail": "Function (FSubstrateRegisteredSharedLocalBasis)",
    "insertText": "SubstrateCompilationInfoRegisterSharedLocalBasis(int32 NormalCodeChunk, int32 TangentCodeChunk)"
  },
  {
    "label": "GetSubstrateSharedLocalBasisIndexMacro()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSubstrateSharedLocalBasisIndexMacro(const FSubstrateRegisteredSharedLocalBasis& SharedLocalBasis)"
  },
  {
    "label": "SubstrateAddParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAddParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 ACodeChunk, int32 BCodeChunk)"
  },
  {
    "label": "SubstrateVerticalLayeringParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayeringParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 TopCodeChunk)"
  },
  {
    "label": "SubstrateHorizontalMixingParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixingParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 BackgroundCodeChunk, int32 ForegroundCodeChunk, int32 HorizontalMixCodeChunk)"
  },
  {
    "label": "GenerateCustomAttributeCode()",
    "kind": "Method",
    "detail": "Function (# if HANDLE_CUSTOM_OUTPUTS_AS_MATERIAL_ATTRIBUTES void)",
    "insertText": "GenerateCustomAttributeCode(int32 OutputIndex, int32 OutputCode, EMaterialValueType OutputType, FString& DisplayName)"
  },
  {
    "label": "PerInstanceRandom()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "PerInstanceRandom()"
  },
  {
    "label": "PerInstanceFadeAmount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceFadeAmount()"
  },
  {
    "label": "PerInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceCustomData(int32 DataIndex, int32 DefaultValueIndex)"
  },
  {
    "label": "PerInstanceCustomData3Vector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceCustomData3Vector(int32 DataIndex, int32 DefaultValueIndex)"
  },
  {
    "label": "RotateScaleOffsetTexCoords()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RotateScaleOffsetTexCoords(int32 TexCoordCodeIndex, int32 RotationScale, int32 Offset)"
  },
  {
    "label": "SpeedTree()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SpeedTree(int32 GeometryArg, int32 WindArg, int32 LODArg, float BillboardThreshold, bool bAccurateWindVelocities, bool bExtraBend, int32 ExtraBendArg)"
  },
  {
    "label": "EyeAdaptation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EyeAdaptation()"
  },
  {
    "label": "EyeAdaptationInverse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EyeAdaptationInverse(int32 LightValueArg, int32 AlphaArg)"
  },
  {
    "label": "CheckPrimitivePropertyCompatibity()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "CheckPrimitivePropertyCompatibity(const TCHAR* ExpressionName)"
  },
  {
    "label": "GetPrimitiveProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPrimitiveProperty(EMaterialValueType Type, const TCHAR* ExpressionName, const TCHAR* HLSLName)"
  },
  {
    "label": "IsCurrentlyCompilingForPreviousFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentlyCompilingForPreviousFrame()"
  },
  {
    "label": "IsDevelopmentFeatureEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDevelopmentFeatureEnabled(const FName& FeatureName)"
  },
  {
    "label": "TranslateMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateMaterial()"
  },
  {
    "label": "AsyncQueryDDC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncQueryDDC(UE::DerivedData::FRequestOwner& DDCRequestOwner, FSharedBuffer& EnvironmentDefinesBuffer)"
  },
  {
    "label": "PushResultsToDDC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushResultsToDDC()"
  },
  {
    "label": "PrepareMaterialSourceStringParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareMaterialSourceStringParameters()"
  },
  {
    "label": "PrepareEnvironmentDefines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareEnvironmentDefines()"
  },
  {
    "label": "FAddUniformExpressionScope()",
    "kind": "Method",
    "detail": "Function (FMaterialCompilationOutput& MaterialCompilationOutput ; FMaterialCompilationOutput DDCMaterialCompilationOutput ; TMap<FString,FString> MaterialSourceTemplateParams ; TUniquePtr<FEnvironmentDefines> EnvironmentDefines ; TAtomic<bool> DDCQueryCompleted ; TAtomic<bool> DDCQueryHit ; # ifdef STATS double DDCRequestSerializeTime = 0 ; # endif class FAddUniformExpressionScope ; } ; class FAddUniformExpressionScope { public :)",
    "insertText": "FAddUniformExpressionScope(FHLSLMaterialTranslator* InTranslator) : Translator(InTranslator)"
  },
  {
    "label": "FAddUniformExpressionScope()",
    "kind": "Method",
    "detail": "Function (Translator -> AddingUniformExpression + + ; } ~)",
    "insertText": "FAddUniformExpressionScope()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Translator -> AddingUniformExpression - - ;)",
    "insertText": "check(Translator->AddingUniformExpression >= 0)"
  }
]