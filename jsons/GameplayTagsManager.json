[
  {
    "label": "UGameplayTagsList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsList"
  },
  {
    "label": "FStreamableHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamableHandle"
  },
  {
    "label": "FNativeGameplayTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNativeGameplayTag"
  },
  {
    "label": "FGameplayTagTableRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagTableRow"
  },
  {
    "label": "FRestrictedGameplayTagTableRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRestrictedGameplayTagTableRow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayTagSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagSource"
  },
  {
    "label": "URestrictedGameplayTagsList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URestrictedGameplayTagsList"
  },
  {
    "label": "FGameplayTagSearchPathInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagSearchPathInfo"
  },
  {
    "label": "FGameplayTagNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNode"
  },
  {
    "label": "UGameplayTagsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsManager"
  },
  {
    "label": "SGameplayTagWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGameplayTagWidget"
  },
  {
    "label": "SGameplayTagPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGameplayTagPicker"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "FFilterGameplayTagContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterGameplayTagContext"
  },
  {
    "label": "FGameplayTagTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagTest"
  },
  {
    "label": "FGameplayEffectsTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayEffectsTest"
  },
  {
    "label": "FGameplayTagsModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagsModule"
  },
  {
    "label": "FGameplayTagsEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagsEditorModule"
  },
  {
    "label": "UGameplayTagsSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsSettings"
  },
  {
    "label": "SAddNewGameplayTagSourceWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAddNewGameplayTagSourceWidget"
  },
  {
    "label": "UDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataTable"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptMacros . h \" # include \" GameplayTagContainer . h \" # include \" Engine / DataTable . h \" # include \" Templates / UniquePtr . h \" # include \" Misc / TransactionallySafeScopeLock . h \" # include \" GameplayTagsManager . generated . h \" class UGameplayTagsList ; struct FStreamableHandle ; class FNativeGameplayTag ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=GameplayTag)"
  },
  {
    "label": "FGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayTagTableRow()"
  },
  {
    "label": "FGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayTagTableRow(FName InTag, const FString& InDevComment = TEXT(\"\")) : Tag(InTag), DevComment(InDevComment)"
  },
  {
    "label": "FGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayTagTableRow(FGameplayTagTableRow const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGameplayTagTableRow&)",
    "insertText": "operator(FGameplayTagTableRow const& Other)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = GameplayTag)"
  },
  {
    "label": "FRestrictedGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRestrictedGameplayTagTableRow() : bAllowNonRestrictedChildren(false)"
  },
  {
    "label": "FRestrictedGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRestrictedGameplayTagTableRow(FName InTag, const FString& InDevComment = TEXT(\"\"), bool InAllowNonRestrictedChildren = false) : FGameplayTagTableRow(InTag, InDevComment), bAllowNonRestrictedChildren(InAllowNonRestrictedChildren)"
  },
  {
    "label": "FRestrictedGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRestrictedGameplayTagTableRow(FRestrictedGameplayTagTableRow const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRestrictedGameplayTagTableRow&)",
    "insertText": "operator(FRestrictedGameplayTagTableRow const& Other)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FGameplayTagSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayTagSource() : SourceName(NAME_None), SourceType(EGameplayTagSourceType::Invalid), SourceTagList(nullptr), SourceRestrictedTagList(nullptr)"
  },
  {
    "label": "FGameplayTagSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayTagSource(FName InSourceName, EGameplayTagSourceType InSourceType, UGameplayTagsList* InSourceTagList = nullptr, URestrictedGameplayTagsList* InSourceRestrictedTagList = nullptr) : SourceName(InSourceName), SourceType(InSourceType), SourceTagList(InSourceTagList), SourceRestrictedTagList(InSourceRestrictedTagList)"
  },
  {
    "label": "GetConfigFileName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetConfigFileName()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetDefaultName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDefaultName()"
  },
  {
    "label": "GetFavoriteName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName)",
    "insertText": "GetFavoriteName()"
  },
  {
    "label": "SetFavoriteName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFavoriteName(FName TagSourceToFavorite)"
  },
  {
    "label": "GetTransientEditorName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTransientEditorName()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FGameplayTagSearchPathInfo { TArray<FName> SourcesInPath ; TArray<FString> TagIniList ; bool bWasSearched = false ; bool bWasAddedToTree = false ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bWasSearched = false ; bWasAddedToTree = false ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FGameplayTagNode()"
  },
  {
    "label": "FGameplayTagNode()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FGameplayTagNode(FName InTag, FName InFullTag, TSharedPtr<FGameplayTagNode> InParentNode, bool InIsExplicitTag, bool InIsRestrictedTag, bool InAllowNonRestrictedChildren)"
  },
  {
    "label": "GetCompleteTagName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetCompleteTagName()"
  },
  {
    "label": "GetCompleteTagString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetCompleteTagString()"
  },
  {
    "label": "GetSimpleTagName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetSimpleTagName()"
  },
  {
    "label": "GetAllowNonRestrictedChildren()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return bIsExplicitTag ; # else return true ; # endif } bool)",
    "insertText": "GetAllowNonRestrictedChildren()"
  },
  {
    "label": "IsRestrictedGameplayTag()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return bAllowNonRestrictedChildren ; # else return true ; # endif } bool)",
    "insertText": "IsRestrictedGameplayTag()"
  },
  {
    "label": "GetFirstSourceName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return bIsRestrictedTag ; # else return true ; # endif } # if WITH_EDITORONLY_DATA FName)",
    "insertText": "GetFirstSourceName()"
  },
  {
    "label": "GetAllSourceNames()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetAllSourceNames()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() GAMEPLAYTAGS_API ~UGameplayTagsManager()"
  },
  {
    "label": "InitializeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeManager()"
  },
  {
    "label": "GetIfAllocated()",
    "kind": "Method",
    "detail": "Function (} return* SingletonManager ; } UGameplayTagsManager*)",
    "insertText": "GetIfAllocated()"
  },
  {
    "label": "RequestGameplayTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "RequestGameplayTag(FName TagName, bool ErrorIfNotFound=true)"
  },
  {
    "label": "IsValidGameplayTagString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGameplayTagString(const FString& TagString, FText* OutError = nullptr, FString* OutFixedString = nullptr)"
  },
  {
    "label": "FindGameplayTagFromPartialString_Slow()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "FindGameplayTagFromPartialString_Slow(FString PartialString)"
  },
  {
    "label": "AddNativeGameplayTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "AddNativeGameplayTag(FName TagName, const FString& TagDevComment = TEXT(\"(Native)\"))"
  },
  {
    "label": "AddNativeGameplayTag()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddNativeGameplayTag(FNativeGameplayTag* TagSource)"
  },
  {
    "label": "RemoveNativeGameplayTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNativeGameplayTag(const FNativeGameplayTag* TagSource)"
  },
  {
    "label": "DoneAddingNativeTags()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DoneAddingNativeTags()"
  },
  {
    "label": "OnLastChanceToAddNativeTags()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnLastChanceToAddNativeTags()"
  },
  {
    "label": "CallOrRegister_OnDoneAddingNativeTagsDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "CallOrRegister_OnDoneAddingNativeTagsDelegate(const FSimpleMulticastDelegate::FDelegate& Delegate)"
  },
  {
    "label": "RequestGameplayTagParents()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "RequestGameplayTagParents(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "ExtractParentTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractParentTags(const FGameplayTag& GameplayTag, TArray<FGameplayTag>& UniqueParentTags)"
  },
  {
    "label": "RequestGameplayTagChildren()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "RequestGameplayTagChildren(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "RequestGameplayTagDirectParent()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "RequestGameplayTagDirectParent(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "FindTagNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FGameplayTagNode>)",
    "insertText": "FindTagNode(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FTransactionallySafeScopeLock)",
    "insertText": "Lock(&GameplayTagMapCritical)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FGameplayTagNode>* Node = GameplayTagNodeMap .)",
    "insertText": "Find(GameplayTag)"
  },
  {
    "label": "RedirectSingleGameplayTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTag RedirectedTag = GameplayTag ;)",
    "insertText": "RedirectSingleGameplayTag(RedirectedTag, nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Node = GameplayTagNodeMap .)",
    "insertText": "Find(RedirectedTag)"
  },
  {
    "label": "PossibleTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "PossibleTag(TagName)"
  },
  {
    "label": "LoadGameplayTagTables()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadGameplayTagTables(bool bAllowAsyncLoad = false)"
  },
  {
    "label": "AddTagIniSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagIniSearchPath(const FString& RootDir)"
  },
  {
    "label": "RemoveTagIniSearchPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTagIniSearchPath(const FString& RootDir)"
  },
  {
    "label": "GetTagSourceSearchPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTagSourceSearchPaths(TArray<FString>& OutPaths)"
  },
  {
    "label": "GetNumTagSourceSearchPaths()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTagSourceSearchPaths()"
  },
  {
    "label": "ConstructGameplayTagTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructGameplayTagTree()"
  },
  {
    "label": "DestroyGameplayTagTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyGameplayTagTree()"
  },
  {
    "label": "SplitGameplayTagFName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitGameplayTagFName(const FGameplayTag& Tag, TArray<FName>& OutNames)"
  },
  {
    "label": "RequestAllGameplayTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAllGameplayTags(FGameplayTagContainer& TagContainer, bool OnlyIncludeDictionaryTags)"
  },
  {
    "label": "ValidateTagCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTagCreation(FName TagName)"
  },
  {
    "label": "FindTagSource()",
    "kind": "Method",
    "detail": "Function (const FGameplayTagSource*)",
    "insertText": "FindTagSource(FName TagSourceName)"
  },
  {
    "label": "FindTagSourcesWithType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTagSourcesWithType(EGameplayTagSourceType TagSourceType, TArray<const FGameplayTagSource*>& OutArray)"
  },
  {
    "label": "FindTagsWithSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTagsWithSource(FStringView PackageNameOrPath, TArray<FGameplayTag>& OutTags)"
  },
  {
    "label": "GameplayTagsMatchDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GameplayTagsMatchDepth(const FGameplayTag& GameplayTagOne, const FGameplayTag& GameplayTagTwo)"
  },
  {
    "label": "GetNumberOfTagNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfTagNodes(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "ShouldImportTagsFromINI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImportTagsFromINI()"
  },
  {
    "label": "ShouldWarnOnInvalidTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWarnOnInvalidTags()"
  },
  {
    "label": "SetShouldUnloadTagsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldUnloadTagsOverride(bool bShouldUnloadTags)"
  },
  {
    "label": "ClearShouldUnloadTagsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearShouldUnloadTagsOverride()"
  },
  {
    "label": "SetShouldDeferGameplayTagTreeRebuilds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldDeferGameplayTagTreeRebuilds(bool bShouldDeferRebuilds)"
  },
  {
    "label": "ClearShouldDeferGameplayTagTreeRebuilds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearShouldDeferGameplayTagTreeRebuilds(bool bRebuildTree)"
  },
  {
    "label": "GetNetworkGameplayTagNodeIndexHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNetworkGameplayTagNodeIndexHash()"
  },
  {
    "label": "GetRestrictedTagSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRestrictedTagSources(TArray<const FGameplayTagSource*>& Sources)"
  },
  {
    "label": "GetOwnersForTagSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOwnersForTagSource(const FString& SourceName, TArray<FString>& OutOwners)"
  },
  {
    "label": "GameplayTagContainerLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameplayTagContainerLoaded(FGameplayTagContainer& Container, FProperty* SerializingProperty)"
  },
  {
    "label": "SingleGameplayTagLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SingleGameplayTagLoaded(FGameplayTag& Tag, FProperty* SerializingProperty)"
  },
  {
    "label": "RedirectTagsForContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedirectTagsForContainer(FGameplayTagContainer& Container, FProperty* SerializingProperty)"
  },
  {
    "label": "RedirectSingleGameplayTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedirectSingleGameplayTag(FGameplayTag& Tag, FProperty* SerializingProperty)"
  },
  {
    "label": "ImportSingleGameplayTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportSingleGameplayTag(FGameplayTag& Tag, FName ImportedTagName, bool bImportFromSerialize = false)"
  },
  {
    "label": "GetTagNameFromNetIndex()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTagNameFromNetIndex(FGameplayTagNetIndex Index)"
  },
  {
    "label": "GetNetIndexFromTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTagNetIndex)",
    "insertText": "GetNetIndexFromTag(const FGameplayTag &InTag)"
  },
  {
    "label": "GetNetIndexTrueBitNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNetIndexTrueBitNum()"
  },
  {
    "label": "PushDeferOnGameplayTagTreeChangedBroadcast()",
    "kind": "Method",
    "detail": "Function (int32 NumBitsForContainerSize ; void)",
    "insertText": "PushDeferOnGameplayTagTreeChangedBroadcast()"
  },
  {
    "label": "PopDeferOnGameplayTagTreeChangedBroadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopDeferOnGameplayTagTreeChangedBroadcast()"
  },
  {
    "label": "GetFilteredGameplayRootTags()",
    "kind": "Method",
    "detail": "Function (private : int32 NetIndexTrueBitNum ; int32 NetIndexFirstBitSegment ; FGameplayTagNetIndex InvalidTagNetIndex ; public : # if WITH_EDITOR void)",
    "insertText": "GetFilteredGameplayRootTags(const FString& InFilterString, TArray< TSharedPtr<FGameplayTagNode> >& OutTagArray)"
  },
  {
    "label": "GetCategoriesMetaFromPropertyHandle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCategoriesMetaFromPropertyHandle(TSharedPtr<class IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "StaticGetCategoriesMetaFromPropertyHandle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StaticGetCategoriesMetaFromPropertyHandle(TSharedPtr<class IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetCategoriesMetaFromField()",
    "kind": "Method",
    "detail": "Function (template<TFieldType> FString)",
    "insertText": "GetCategoriesMetaFromField(TFieldType* Field)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Field->HasMetaData(NAME_GameplayTagFilter))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FString()"
  },
  {
    "label": "GetCategoriesMetaFromFunction()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetCategoriesMetaFromFunction(const UFunction* Func, FName ParamName = NAME_None)"
  },
  {
    "label": "GetAllTagsFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTagsFromSource(FName TagSource, TArray< TSharedPtr<FGameplayTagNode> >& OutTagArray)"
  },
  {
    "label": "IsDictionaryTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDictionaryTag(FName TagName)"
  },
  {
    "label": "GetTagEditorData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTagEditorData(FName TagName, FString& OutComment, FName &OutFirstTagSource, bool& bOutIsTagExplicit, bool &bOutIsRestrictedTag, bool &bOutAllowNonRestrictedChildren)"
  },
  {
    "label": "GetTagEditorData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTagEditorData(FName TagName, FString& OutComment, TArray<FName>& OutTagSources, bool& bOutIsTagExplicit, bool &bOutIsRestrictedTag, bool &bOutAllowNonRestrictedChildren)"
  },
  {
    "label": "EditorRefreshGameplayTagTree()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate OnEditorRefreshGameplayTagTree ; void)",
    "insertText": "EditorRefreshGameplayTagTree()"
  },
  {
    "label": "SuspendEditorRefreshGameplayTagTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendEditorRefreshGameplayTagTree(FGuid SuspendToken)"
  },
  {
    "label": "ResumeEditorRefreshGameplayTagTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeEditorRefreshGameplayTagTree(FGuid SuspendToken)"
  },
  {
    "label": "RequestGameplayTagChildrenInDictionary()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "RequestGameplayTagChildrenInDictionary(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "RequestGameplayTagDirectDescendantsInDictionary()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FGameplayTagContainer)",
    "insertText": "RequestGameplayTagDirectDescendantsInDictionary(const FGameplayTag& GameplayTag, EGameplayTagSelectionType SelectionType)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnGameplayTagDoubleClickedEditor, FGameplayTag, FSimpleMulticastDelegate&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnGetCategoriesMetaFromPropertyHandle, TSharedPtr<IPropertyHandle>, FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnFilterGameplayTagChildren, const FString& , TSharedPtr<FGameplayTagNode>& , bool&)"
  },
  {
    "label": "FFilterGameplayTagContext()",
    "kind": "Method",
    "detail": "Function (struct FFilterGameplayTagContext { const FString& FilterString ; const TSharedPtr<FGameplayTagNode>& TagNode ; const FGameplayTagSource* TagSource ; const TSharedPtr<IPropertyHandle> ReferencingPropertyHandle ; const TArray<FAssetData> TagSourceAssets ;)",
    "insertText": "FFilterGameplayTagContext(const FString& InFilterString, const TSharedPtr<FGameplayTagNode>& InTagNode, const FGameplayTagSource* InTagSource, const TSharedPtr<IPropertyHandle>& InReferencingPropertyHandle) : FilterString(InFilterString), TagNode(InTagNode), TagSource(InTagSource), ReferencingPropertyHandle(InReferencingPropertyHandle)"
  },
  {
    "label": "FFilterGameplayTagContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFilterGameplayTagContext(const TSharedPtr<FGameplayTagNode>& InTagNode, const FGameplayTagSource* InTagSource, const TArray<FAssetData>& InTagSourceAssets, const FString& InFilterString = FString()) : FilterString(InFilterString), TagNode(InTagNode), TagSource(InTagSource), TagSourceAssets(InTagSourceAssets)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnFilterGameplayTag, const FFilterGameplayTagContext& , bool&)"
  },
  {
    "label": "NotifyGameplayTagDoubleClickedEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGameplayTagDoubleClickedEditor(FString TagName)"
  },
  {
    "label": "ShowGameplayTagAsHyperLinkEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowGameplayTagAsHyperLinkEditor(FString TagName)"
  },
  {
    "label": "DumpSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpSources(FOutputDevice& Out)"
  },
  {
    "label": "PrintReplicationIndices()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PrintReplicationIndices()"
  },
  {
    "label": "GetNumGameplayTagNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumGameplayTagNodes()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) GAMEPLAYTAGS_API void PrintReplicationFrequencyReport()"
  },
  {
    "label": "NotifyTagReplicated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTagReplicated(FGameplayTag Tag, bool WasInContainer)"
  },
  {
    "label": "OnDoneAddingNativeTagsDelegate()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnDoneAddingNativeTagsDelegate()"
  },
  {
    "label": "GetSingleTagContainerPtr()",
    "kind": "Method",
    "detail": "Function (UGameplayTagsManager* SingletonManager ; class FGameplayTagTest ; class FGameplayEffectsTest ; class FGameplayTagsModule ; class FGameplayTagsEditorModule ; class UGameplayTagsSettings ; class SAddNewGameplayTagSourceWidget ; class FNativeGameplayTag ; const FGameplayTagContainer*)",
    "insertText": "GetSingleTagContainerPtr(const FGameplayTag& GameplayTag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR)",
    "insertText": "if(GIsEditor && GameplayTag.IsValid())"
  },
  {
    "label": "InsertTagIntoNodeArray()",
    "kind": "Method",
    "detail": "Function (} } # endif return nullptr ; } int32)",
    "insertText": "InsertTagIntoNodeArray(FName Tag, FName FullTag, TSharedPtr<FGameplayTagNode> ParentNode, TArray< TSharedPtr<FGameplayTagNode> >& NodeArray, FName SourceName, const FString& DevComment, bool bIsExplicitTag, bool bIsRestrictedTag, bool bAllowNonRestrictedChildren)"
  },
  {
    "label": "PopulateTreeFromDataTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTreeFromDataTable(class UDataTable* Table)"
  },
  {
    "label": "AddTagTableRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagTableRow(const FGameplayTagTableRow& TagRow, FName SourceName, bool bIsRestrictedTag = false)"
  },
  {
    "label": "AddChildrenTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildrenTags(FGameplayTagContainer& TagContainer, TSharedPtr<FGameplayTagNode> GameplayTagNode, bool RecurseAll=true, bool OnlyIncludeDictionaryTags=false)"
  },
  {
    "label": "AddRestrictedGameplayTagSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRestrictedGameplayTagSource(const FString& FileName)"
  },
  {
    "label": "AddTagsFromAdditionalLooseIniFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagsFromAdditionalLooseIniFiles(const TArray<FString>& IniFileList)"
  },
  {
    "label": "GetAllParentNodeNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllParentNodeNames(TSet<FName>& NamesList, TSharedPtr<FGameplayTagNode> GameplayTag)"
  },
  {
    "label": "FindOrAddTagSource()",
    "kind": "Method",
    "detail": "Function (FGameplayTagSource*)",
    "insertText": "FindOrAddTagSource(FName TagSourceName, EGameplayTagSourceType SourceType, const FString& RootDirToUse = FString())"
  },
  {
    "label": "ConstructNetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNetIndex()"
  },
  {
    "label": "MarkChildrenOfNodeConflict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkChildrenOfNodeConflict(TSharedPtr<FGameplayTagNode> CurNode)"
  },
  {
    "label": "VerifyNetworkIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyNetworkIndex()"
  },
  {
    "label": "UGameplayTagsManager()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "UGameplayTagsManager(this)->ConstructNetIndex()"
  },
  {
    "label": "InvalidateNetworkIndex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InvalidateNetworkIndex()"
  },
  {
    "label": "BroadcastOnGameplayTagTreeChanged()",
    "kind": "Method",
    "detail": "Function (bNetworkIndexInvalidated = true ; } void)",
    "insertText": "BroadcastOnGameplayTagTreeChanged()"
  },
  {
    "label": "HandleGameplayTagTreeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGameplayTagTreeChanged(bool bRecreateTree)"
  }
]