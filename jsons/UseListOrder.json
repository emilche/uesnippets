[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "UseListOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UseListOrder"
  },
  {
    "label": "UseListOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_USELISTORDER_H # define LLVM_IR_USELISTORDER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SmallVector . h \" # include<vector> namespace llvm { class Module ; class Function ; class Value ; struct UseListOrder { const Value* V ; const Function* F ; std::vector<unsigned> Shuffle ;)",
    "insertText": "UseListOrder(const Value *V, const Function *F, size_t ShuffleSize) : V(V), F(F), Shuffle(ShuffleSize)"
  },
  {
    "label": "UseListOrder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UseListOrder() : V(0), F(0)"
  },
  {
    "label": "UseListOrder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UseListOrder(UseListOrder &&X) : V(X.V), F(X.F), Shuffle(std::move(X.Shuffle))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UseListOrder&)",
    "insertText": "operator(UseListOrder &&X)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (V = X . V ; F = X . F ; Shuffle =)",
    "insertText": "move(X.Shuffle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UseListOrder&)",
    "insertText": "operator(const UseListOrder &X)"
  }
]