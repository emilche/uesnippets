[
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "gmock_Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gmock_Impl"
  },
  {
    "label": "MATCHER()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_MATCHERS_H_ # include<iterator> # include<sstream> # include<string> # include<utility> # include<vector> # include \" gmock / gmock - matchers . h \" # define)",
    "insertText": "MATCHER(name, description)"
  },
  {
    "label": "GTEST_REFERENCE_TO_CONST_()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ template<arg_type> \\ class gmock_Impl : public::testing::MatcherInterface<\\)",
    "insertText": "GTEST_REFERENCE_TO_CONST_(arg_type)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl()"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener)"
  },
  {
    "label": "DescribeTo()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "DescribeTo(::std::ostream* gmock_os)"
  },
  {
    "label": "FormatDescription()",
    "kind": "Method",
    "detail": "Function (\\* gmock_os<<)",
    "insertText": "FormatDescription(false)"
  },
  {
    "label": "DescribeNegationTo()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "DescribeNegationTo(::std::ostream* gmock_os)"
  },
  {
    "label": "FormatDescription()",
    "kind": "Method",
    "detail": "Function (\\* gmock_os<<)",
    "insertText": "FormatDescription(true)"
  },
  {
    "label": "FormatDescription()",
    "kind": "Method",
    "detail": "Function (\\ } \\ private : \\::std::string)",
    "insertText": "FormatDescription(bool negation)"
  },
  {
    "label": "gmock_description()",
    "kind": "Method",
    "detail": "Function (\\::std::string)",
    "insertText": "gmock_description(description)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!gmock_description.empty())"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<>()))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ template<arg_type> \\ operator::testing::Matcher<)",
    "insertText": "arg_type()"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>())"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "Matcher()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ private : \\ } ; \\ name # # Matcher)",
    "insertText": "name()"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<arg_type> \\ bool name # # Matcher::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P(name, p0, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0)\\ : p0(::std::move(gmock_p0))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type>(p0)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0))"
  },
  {
    "label": "MatcherP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP(p0##_type gmock_p0) : p0(::std::move(gmock_p0))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ private : \\ } ; \\ template<p0 # # _type> \\ name # # MatcherP<p0 # # _type>)",
    "insertText": "name(p0##_type p0)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP<p0 # #)",
    "insertText": "_type(p0)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type> \\ template<arg_type> \\ bool name # # MatcherP<p0 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P2(name, p0, p1, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type>(p0, p1)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1))"
  },
  {
    "label": "MatcherP2()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP2(p0##_type gmock_p0, \\ p1##_type gmock_p1) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type> \\ name # # MatcherP2<p0 # # _type,p1 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP2<p0 # # _type,p1 # #)",
    "insertText": "_type(p0, p1)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type> \\ template<arg_type> \\ bool name # # MatcherP2<p0 # # _type,\\ p1 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P3(name, p0, p1, p2, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type>(p0, p1, p2)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2))"
  },
  {
    "label": "MatcherP3()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP3(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type> \\ name # # MatcherP3<p0 # # _type,p1 # # _type,p2 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1, p2##_type p2)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP3<p0 # # _type,p1 # # _type,p2 # #)",
    "insertText": "_type(p0, p1, p2)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type> \\ template<arg_type> \\ bool name # # MatcherP3<p0 # # _type,p1 # # _type,\\ p2 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P4(name, p0, p1, p2, p3, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type>(p0, \\ p1, p2, p3)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3))"
  },
  {
    "label": "MatcherP4()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP4(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type> \\ name # # MatcherP4<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, \\ p3##_type p3)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP4<p0 # # _type,p1 # # _type,p2 # # _type,p3 # #)",
    "insertText": "_type(p0, \\ p1, p2, p3)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type> \\ template<arg_type> \\ bool name # # MatcherP4<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P5(name, p0, p1, p2, p3, p4, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type>(p0, p1, p2, p3, p4)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4))"
  },
  {
    "label": "MatcherP5()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP5(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, \\ p4##_type gmock_p4) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type> \\ name # # MatcherP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type> \\ template<arg_type> \\ bool name # # MatcherP5<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P6(name, p0, p1, p2, p3, p4, p5, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4)), p5(::std::move(gmock_p5))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type, p5##_type>(p0, p1, p2, p3, p4, p5)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5))"
  },
  {
    "label": "MatcherP6()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP6(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ p5 # # _type const p5 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type> \\ name # # MatcherP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, \\ p3##_type p3, p4##_type p4, p5##_type p5)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type> \\ template<arg_type> \\ bool name # # MatcherP6<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P7(name, p0, p1, p2, p3, p4, p5, p6, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4)), p5(::std::move(gmock_p5)), \\ p6(::std::move(gmock_p6))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type, p5##_type, p6##_type>(p0, p1, p2, p3, p4, p5, \\ p6)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6))"
  },
  {
    "label": "MatcherP7()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP7(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ p5 # # _type const p5 ; \\ p6 # # _type const p6 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type> \\ name # # MatcherP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, \\ p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \\ p6##_type p6)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5, p6)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type> \\ template<arg_type> \\ bool name # # MatcherP7<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P8(name, p0, p1, p2, p3, p4, p5, p6, p7, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4)), p5(::std::move(gmock_p5)), \\ p6(::std::move(gmock_p6)), p7(::std::move(gmock_p7))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type, p5##_type, p6##_type, p7##_type>(p0, p1, p2, \\ p3, p4, p5, p6, p7)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7))"
  },
  {
    "label": "MatcherP8()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP8(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, \\ p7##_type gmock_p7) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ p5 # # _type const p5 ; \\ p6 # # _type const p6 ; \\ p7 # # _type const p7 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type> \\ name # # MatcherP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type>)",
    "insertText": "name(p0##_type p0, \\ p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \\ p6##_type p6, p7##_type p7)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # #)",
    "insertText": "_type(p0, p1, p2, p3, p4, p5, \\ p6, p7)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type> \\ template<arg_type> \\ bool name # # MatcherP8<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type,\\ p7 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P9(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4)), p5(::std::move(gmock_p5)), \\ p6(::std::move(gmock_p6)), p7(::std::move(gmock_p7)), \\ p8(::std::move(gmock_p8))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type, p5##_type, p6##_type, p7##_type, \\ p8##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8))"
  },
  {
    "label": "MatcherP9()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP9(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7)), p8(::std::move(gmock_p8))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ p5 # # _type const p5 ; \\ p6 # # _type const p6 ; \\ p7 # # _type const p7 ; \\ p8 # # _type const p8 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type> \\ name # # MatcherP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,\\ p8 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \\ p8##_type p8)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # #)",
    "insertText": "_type(p0, p1, p2, \\ p3, p4, p5, p6, p7, p8)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type> \\ template<arg_type> \\ bool name # # MatcherP9<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,p4 # # _type,\\ p5 # # _type,p6 # # _type,p7 # # _type,\\ p8 # # _type>::gmock_Impl<arg_type)",
    "insertText": "MatchAndExplain(\\ GTEST_REFERENCE_TO_CONST_(arg_type) arg,\\ ::testing::MatchResultListener* result_listener GTEST_ATTRIBUTE_UNUSED_)\\ const #define MATCHER_P10(name, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, description)"
  },
  {
    "label": "gmock_Impl()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \\ p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \\ p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \\ p9##_type gmock_p9)\\ : p0(::std::move(gmock_p0)), p1(::std::move(gmock_p1)), \\ p2(::std::move(gmock_p2)), p3(::std::move(gmock_p3)), \\ p4(::std::move(gmock_p4)), p5(::std::move(gmock_p5)), \\ p6(::std::move(gmock_p6)), p7(::std::move(gmock_p7)), \\ p8(::std::move(gmock_p8)), p9(::std::move(gmock_p9))"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (\\ return gmock_description ; \\ } \\ return::testing::)",
    "insertText": "FormatMatcherDescription(\\ negation, #name, \\ ::testing::internal::UniversalTersePrintTupleFieldsToStrings(\\ ::std::tuple<p0##_type, p1##_type, p2##_type, p3##_type, \\ p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \\ p9##_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)))"
  },
  {
    "label": "arg_type()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::Matcher<)",
    "insertText": "arg_type(\\ new gmock_Impl<arg_type>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))"
  },
  {
    "label": "MatcherP10()",
    "kind": "Method",
    "detail": "Function (\\ } \\ name # #)",
    "insertText": "MatcherP10(p0##_type gmock_p0, p1##_type gmock_p1, \\ p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \\ p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \\ p8##_type gmock_p8, p9##_type gmock_p9) : p0(::std::move(gmock_p0)), \\ p1(::std::move(gmock_p1)), p2(::std::move(gmock_p2)), \\ p3(::std::move(gmock_p3)), p4(::std::move(gmock_p4)), \\ p5(::std::move(gmock_p5)), p6(::std::move(gmock_p6)), \\ p7(::std::move(gmock_p7)), p8(::std::move(gmock_p8)), \\ p9(::std::move(gmock_p9))"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ p0 # # _type const p0 ; \\ p1 # # _type const p1 ; \\ p2 # # _type const p2 ; \\ p3 # # _type const p3 ; \\ p4 # # _type const p4 ; \\ p5 # # _type const p5 ; \\ p6 # # _type const p6 ; \\ p7 # # _type const p7 ; \\ p8 # # _type const p8 ; \\ p9 # # _type const p9 ; \\ private : \\ } ; \\ template<p0 # # _type,p1 # # _type,p2 # # _type,\\ p3 # # _type,p4 # # _type,p5 # # _type,\\ p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type> \\ name # # MatcherP10<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # # _type,\\ p9 # # _type>)",
    "insertText": "name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \\ p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \\ p9##_type p9)"
  },
  {
    "label": "_type()",
    "kind": "Method",
    "detail": "Function (\\ return name # # MatcherP10<p0 # # _type,p1 # # _type,p2 # # _type,p3 # # _type,\\ p4 # # _type,p5 # # _type,p6 # # _type,p7 # # _type,p8 # # _type,p9 # #)",
    "insertText": "_type(p0, \\ p1, p2, p3, p4, p5, p6, p7, p8, p9)"
  }
]