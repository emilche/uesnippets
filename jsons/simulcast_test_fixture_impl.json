[
  {
    "label": "SimulcastTestFixtureImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulcastTestFixtureImpl"
  },
  {
    "label": "TestEncodedImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEncodedImageCallback"
  },
  {
    "label": "TestDecodedImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestDecodedImageCallback"
  },
  {
    "label": "SimulcastTestFixtureImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_UTILITY_SIMULCAST_TEST_FIXTURE_IMPL_H_ # define MODULES_VIDEO_CODING_UTILITY_SIMULCAST_TEST_FIXTURE_IMPL_H_ # include<memory> # include<vector> # include \" api / test / mock_video_decoder . h \" # include \" api / test / mock_video_encoder . h \" # include \" api / test / simulcast_test_fixture . h \" # include \" api / video / i420_buffer . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" modules / video_coding / utility / simulcast_rate_allocator . h \" namespace webrtc { namespace test { class SimulcastTestFixtureImpl final : public SimulcastTestFixture { public :)",
    "insertText": "SimulcastTestFixtureImpl(std::unique_ptr<VideoEncoderFactory> encoder_factory, std::unique_ptr<VideoDecoderFactory> decoder_factory, SdpVideoFormat video_format)"
  },
  {
    "label": "SimulcastTestFixtureImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulcastTestFixtureImpl()"
  },
  {
    "label": "TestKeyFrameRequestsOnAllStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestKeyFrameRequestsOnAllStreams()"
  },
  {
    "label": "TestPaddingAllStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPaddingAllStreams()"
  },
  {
    "label": "TestPaddingTwoStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPaddingTwoStreams()"
  },
  {
    "label": "TestPaddingTwoStreamsOneMaxedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPaddingTwoStreamsOneMaxedOut()"
  },
  {
    "label": "TestPaddingOneStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPaddingOneStream()"
  },
  {
    "label": "TestPaddingOneStreamTwoMaxedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestPaddingOneStreamTwoMaxedOut()"
  },
  {
    "label": "TestSendAllStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSendAllStreams()"
  },
  {
    "label": "TestDisablingStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestDisablingStreams()"
  },
  {
    "label": "TestActiveStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestActiveStreams()"
  },
  {
    "label": "TestSwitchingToOneStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSwitchingToOneStream()"
  },
  {
    "label": "TestSwitchingToOneOddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSwitchingToOneOddStream()"
  },
  {
    "label": "TestSwitchingToOneSmallStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSwitchingToOneSmallStream()"
  },
  {
    "label": "TestSpatioTemporalLayers333PatternEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSpatioTemporalLayers333PatternEncoder()"
  },
  {
    "label": "TestSpatioTemporalLayers321PatternEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSpatioTemporalLayers321PatternEncoder()"
  },
  {
    "label": "TestStrideEncodeDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestStrideEncodeDecode()"
  },
  {
    "label": "TestDecodeWidthHeightSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestDecodeWidthHeightSet()"
  },
  {
    "label": "TestEncoderInfoForDefaultTemporalLayerProfileHasFpsAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestEncoderInfoForDefaultTemporalLayerProfileHasFpsAllocation()"
  },
  {
    "label": "DefaultSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultSettings(VideoCodec* settings, const int* temporal_layer_profile, VideoCodecType codec_type, bool reverse_layer_order = false)"
  },
  {
    "label": "SetUpCodec()",
    "kind": "Method",
    "detail": "Function (private : class TestEncodedImageCallback ; class TestDecodedImageCallback ; void)",
    "insertText": "SetUpCodec(const int* temporal_layer_profile)"
  },
  {
    "label": "SetUpRateAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpRateAllocator()"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(uint32_t bitrate_kbps, uint32_t fps)"
  },
  {
    "label": "RunActiveStreamsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunActiveStreamsTest(std::vector<bool> active_streams)"
  },
  {
    "label": "UpdateActiveStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveStreams(std::vector<bool> active_streams)"
  },
  {
    "label": "ExpectStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStreams(VideoFrameType frame_type, std::vector<bool> expected_streams_active)"
  },
  {
    "label": "ExpectStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStreams(VideoFrameType frame_type, int expected_video_streams)"
  },
  {
    "label": "VerifyTemporalIdxAndSyncForAllSpatialLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyTemporalIdxAndSyncForAllSpatialLayers(TestEncodedImageCallback* encoder_callback, const int* expected_temporal_idx, const bool* expected_layer_sync, int num_spatial_layers)"
  },
  {
    "label": "SwitchingToOneStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchingToOneStream(int width, int height)"
  }
]