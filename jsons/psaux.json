[
  {
    "label": "PS_TableRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PS_TableRec_"
  },
  {
    "label": "PS_Table_FuncsRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PS_Table_FuncsRec_"
  },
  {
    "label": "PS_ParserRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PS_ParserRec_"
  },
  {
    "label": "T1_TokenRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_TokenRec_"
  },
  {
    "label": "T1_FieldRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_FieldRec_"
  },
  {
    "label": "T1_TokenType_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "T1_TokenType_"
  },
  {
    "label": "T1_FieldType_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "T1_FieldType_"
  },
  {
    "label": "T1_FieldLocation_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "T1_FieldLocation_"
  },
  {
    "label": "PS_Parser_FuncsRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PS_Parser_FuncsRec_"
  },
  {
    "label": "T1_BuilderRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_BuilderRec_"
  },
  {
    "label": "T1_Builder_FuncsRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_Builder_FuncsRec_"
  },
  {
    "label": "T1_ParseState_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "T1_ParseState_"
  },
  {
    "label": "T1_Decoder_ZoneRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_Decoder_ZoneRec_"
  },
  {
    "label": "T1_DecoderRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_DecoderRec_"
  },
  {
    "label": "T1_Decoder_FuncsRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_Decoder_FuncsRec_"
  },
  {
    "label": "AFM_ParserRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AFM_ParserRec_"
  },
  {
    "label": "AFM_Parser_FuncsRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AFM_Parser_FuncsRec_"
  },
  {
    "label": "AFM_StreamRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AFM_StreamRec_"
  },
  {
    "label": "T1_CMap_ClassesRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T1_CMap_ClassesRec_"
  },
  {
    "label": "PSAux_ServiceRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PSAux_ServiceRec_"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (# ifndef __PSAUX_H__ # define __PSAUX_H__ # include<ft2build . h> # include FT_INTERNAL_OBJECTS_H # include FT_INTERNAL_TYPE1_TYPES_H # include FT_SERVICE_POSTSCRIPT_CMAPS_H FT_BEGIN_HEADER typedef struct PS_TableRec_* PS_Table ; typedef const struct PS_Table_FuncsRec_* PS_Table_Funcs ; typedef struct PS_Table_FuncsRec_ {)",
    "insertText": "FT_Error(*init)( PS_Table table, FT_Int count, FT_Memory memory)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*done)( PS_Table table)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*add)( PS_Table table, FT_Int idx, void* object, FT_PtrDist length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*release)( PS_Table table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} PS_Table_FuncsRec ; typedef struct PS_TableRec_ { FT_Byte* block ; FT_Offset cursor ; FT_Offset capacity ; FT_Long init ; FT_Int max_elems ; FT_Int num_elems ; FT_Byte** elements ; FT_PtrDist* lengths ; FT_Memory memory ; PS_Table_FuncsRec funcs ; } PS_TableRec ; typedef struct PS_ParserRec_* PS_Parser ; typedef struct T1_TokenRec_* T1_Token ; typedef struct T1_FieldRec_* T1_Field ; typedef enum T1_TokenType_ { T1_TOKEN_TYPE_NONE = 0,T1_TOKEN_TYPE_ANY,T1_TOKEN_TYPE_STRING,T1_TOKEN_TYPE_ARRAY,T1_TOKEN_TYPE_KEY,T1_TOKEN_TYPE_MAX } T1_TokenType ; typedef struct T1_TokenRec_ { FT_Byte* start ; FT_Byte* limit ; T1_TokenType type ; } T1_TokenRec ; typedef enum T1_FieldType_ { T1_FIELD_TYPE_NONE = 0,T1_FIELD_TYPE_BOOL,T1_FIELD_TYPE_INTEGER,T1_FIELD_TYPE_FIXED,T1_FIELD_TYPE_FIXED_1000,T1_FIELD_TYPE_STRING,T1_FIELD_TYPE_KEY,T1_FIELD_TYPE_BBOX,T1_FIELD_TYPE_MM_BBOX,T1_FIELD_TYPE_INTEGER_ARRAY,T1_FIELD_TYPE_FIXED_ARRAY,T1_FIELD_TYPE_CALLBACK,T1_FIELD_TYPE_MAX } T1_FieldType ; typedef enum T1_FieldLocation_ { T1_FIELD_LOCATION_CID_INFO,T1_FIELD_LOCATION_FONT_DICT,T1_FIELD_LOCATION_FONT_EXTRA,T1_FIELD_LOCATION_FONT_INFO,T1_FIELD_LOCATION_PRIVATE,T1_FIELD_LOCATION_BBOX,T1_FIELD_LOCATION_LOADER,T1_FIELD_LOCATION_FACE,T1_FIELD_LOCATION_BLEND,T1_FIELD_LOCATION_MAX } T1_FieldLocation ; typedef)",
    "insertText": "void(*T1_Field_ParseFunc)( FT_Face face, FT_Pointer parser)"
  },
  {
    "label": "T1_FIELD_DICT_FONTDICT()",
    "kind": "Method",
    "detail": "Function (typedef struct T1_FieldRec_ { const char* ident ; T1_FieldLocation location ; T1_FieldType type ; T1_Field_ParseFunc reader ; FT_UInt offset ; FT_Byte size ; FT_UInt array_max ; FT_UInt count_offset ; FT_UInt dict ; } T1_FieldRec ; # define)",
    "insertText": "T1_FIELD_DICT_FONTDICT(1 << 0 ) #define T1_FIELD_DICT_PRIVATE ( 1 << 1 ) #define T1_NEW_SIMPLE_FIELD( _ident, _type, _fname, _dict)"
  },
  {
    "label": "FT_FIELD_OFFSET()",
    "kind": "Method",
    "detail": "Function (\\ _ident,T1CODE,_type,\\ 0,\\)",
    "insertText": "FT_FIELD_OFFSET(_fname ), \\ FT_FIELD_SIZE( _fname ), \\ 0, 0, \\ _dict \\ }, #define T1_NEW_CALLBACK_FIELD( _ident, _reader, _dict)"
  },
  {
    "label": "T1_FIELD_TYPE_CALLBACK()",
    "kind": "Method",
    "detail": "Function (\\ _ident,T1CODE,)",
    "insertText": "T1_FIELD_TYPE_CALLBACK(T1_Field_ParseFunc)_reader, \\ 0, 0, \\ 0, 0, \\ _dict \\ }, #define T1_NEW_TABLE_FIELD( _ident, _type, _fname, _max, _dict)"
  },
  {
    "label": "FT_FIELD_OFFSET()",
    "kind": "Method",
    "detail": "Function (\\ _ident,T1CODE,_type,\\ 0,\\)",
    "insertText": "FT_FIELD_OFFSET(_fname ), \\ FT_FIELD_SIZE_DELTA( _fname ), \\ _max, \\ FT_FIELD_OFFSET( num_ ## _fname ), \\ _dict \\ }, #define T1_NEW_TABLE_FIELD2( _ident, _type, _fname, _max, _dict)"
  },
  {
    "label": "FT_FIELD_OFFSET()",
    "kind": "Method",
    "detail": "Function (\\ _ident,T1CODE,_type,\\ 0,\\)",
    "insertText": "FT_FIELD_OFFSET(_fname ), \\ FT_FIELD_SIZE_DELTA( _fname ), \\ _max, 0, \\ _dict \\ }, #define T1_FIELD_BOOL( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_BOOL, _fname, _dict ) #define T1_FIELD_NUM( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_INTEGER, _fname, _dict ) #define T1_FIELD_FIXED( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_FIXED, _fname, _dict ) #define T1_FIELD_FIXED_1000( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_FIXED_1000, _fname, \\ _dict ) #define T1_FIELD_STRING( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_STRING, _fname, _dict ) #define T1_FIELD_KEY( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_KEY, _fname, _dict ) #define T1_FIELD_BBOX( _ident, _fname, _dict ) \\ T1_NEW_SIMPLE_FIELD( _ident, T1_FIELD_TYPE_BBOX, _fname, _dict ) #define T1_FIELD_NUM_TABLE( _ident, _fname, _fmax, _dict ) \\ T1_NEW_TABLE_FIELD( _ident, T1_FIELD_TYPE_INTEGER_ARRAY, \\ _fname, _fmax, _dict ) #define T1_FIELD_FIXED_TABLE( _ident, _fname, _fmax, _dict ) \\ T1_NEW_TABLE_FIELD( _ident, T1_FIELD_TYPE_FIXED_ARRAY, \\ _fname, _fmax, _dict ) #define T1_FIELD_NUM_TABLE2( _ident, _fname, _fmax, _dict ) \\ T1_NEW_TABLE_FIELD2( _ident, T1_FIELD_TYPE_INTEGER_ARRAY, \\ _fname, _fmax, _dict ) #define T1_FIELD_FIXED_TABLE2( _ident, _fname, _fmax, _dict ) \\ T1_NEW_TABLE_FIELD2( _ident, T1_FIELD_TYPE_FIXED_ARRAY, \\ _fname, _fmax, _dict ) #define T1_FIELD_CALLBACK( _ident, _name, _dict ) \\ T1_NEW_CALLBACK_FIELD( _ident, _name, _dict)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef struct PS_Parser_FuncsRec_ {)",
    "insertText": "void(*init)( PS_Parser parser, FT_Byte* base, FT_Byte* limit, FT_Memory memory)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*done)( PS_Parser parser)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*skip_spaces)( PS_Parser parser)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*skip_PS_token)( PS_Parser parser)"
  },
  {
    "label": "FT_Long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Long(*to_int)( PS_Parser parser)"
  },
  {
    "label": "FT_Fixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Fixed(*to_fixed)( PS_Parser parser, FT_Int power_ten)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*to_bytes)( PS_Parser parser, FT_Byte* bytes, FT_Offset max_bytes, FT_Long* pnum_bytes, FT_Bool delimiters)"
  },
  {
    "label": "FT_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Int(*to_coord_array)( PS_Parser parser, FT_Int max_coords, FT_Short* coords)"
  },
  {
    "label": "FT_Int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Int(*to_fixed_array)( PS_Parser parser, FT_Int max_values, FT_Fixed* values, FT_Int power_ten)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*to_token)( PS_Parser parser, T1_Token token)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*to_token_array)( PS_Parser parser, T1_Token tokens, FT_UInt max_tokens, FT_Int* pnum_tokens)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*load_field)( PS_Parser parser, const T1_Field field, void** objects, FT_UInt max_objects, FT_ULong* pflags)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*load_field_table)( PS_Parser parser, const T1_Field field, void** objects, FT_UInt max_objects, FT_ULong* pflags)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (} PS_Parser_FuncsRec ; typedef struct PS_ParserRec_ { FT_Byte* cursor ; FT_Byte* base ; FT_Byte* limit ; FT_Error error ; FT_Memory memory ; PS_Parser_FuncsRec funcs ; } PS_ParserRec ; typedef struct T1_BuilderRec_* T1_Builder ; typedef)",
    "insertText": "FT_Error(*T1_Builder_Check_Points_Func)( T1_Builder builder, FT_Int count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*T1_Builder_Add_Point_Func)( T1_Builder builder, FT_Pos x, FT_Pos y, FT_Byte flag)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FT_Error(*T1_Builder_Add_Point1_Func)( T1_Builder builder, FT_Pos x, FT_Pos y)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FT_Error(*T1_Builder_Add_Contour_Func)( T1_Builder builder)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FT_Error(*T1_Builder_Start_Point_Func)( T1_Builder builder, FT_Pos x, FT_Pos y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*T1_Builder_Close_Contour_Func)( T1_Builder builder)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef const struct T1_Builder_FuncsRec_* T1_Builder_Funcs ; typedef struct T1_Builder_FuncsRec_ {)",
    "insertText": "void(*init)( T1_Builder builder, FT_Face face, FT_Size size, FT_GlyphSlot slot, FT_Bool hinting)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*done)( T1_Builder builder)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (T1_Builder_Check_Points_Func check_points ; T1_Builder_Add_Point_Func add_point ; T1_Builder_Add_Point1_Func add_point1 ; T1_Builder_Add_Contour_Func add_contour ; T1_Builder_Start_Point_Func start_point ; T1_Builder_Close_Contour_Func close_contour ; } T1_Builder_FuncsRec ; typedef enum T1_ParseState_ { T1_Parse_Start,T1_Parse_Have_Width,T1_Parse_Have_Moveto,T1_Parse_Have_Path } T1_ParseState ; typedef struct T1_BuilderRec_ { FT_Memory memory ; FT_Face face ; FT_GlyphSlot glyph ; FT_GlyphLoader loader ; FT_Outline* base ; FT_Outline* current ; FT_Pos pos_x ; FT_Pos pos_y ; FT_Vector left_bearing ; FT_Vector advance ; FT_BBox bbox ; T1_ParseState parse_state ; FT_Bool load_points ; FT_Bool no_recurse ; FT_Bool metrics_only ; void* hints_funcs ; void* hints_globals ; T1_Builder_FuncsRec funcs ; } T1_BuilderRec ; # if 0 # define T1_MAX_SUBRS_CALLS 8 # define T1_MAX_CHARSTRINGS_OPERANDS 3 2 # endif typedef struct T1_Decoder_ZoneRec_ { FT_Byte* cursor ; FT_Byte* base ; FT_Byte* limit ; } T1_Decoder_ZoneRec,* T1_Decoder_Zone ; typedef struct T1_DecoderRec_* T1_Decoder ; typedef const struct T1_Decoder_FuncsRec_* T1_Decoder_Funcs ; typedef)",
    "insertText": "FT_Error(*T1_Decoder_Callback)( T1_Decoder decoder, FT_UInt glyph_index)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (typedef struct T1_Decoder_FuncsRec_ {)",
    "insertText": "FT_Error(*init)( T1_Decoder decoder, FT_Face face, FT_Size size, FT_GlyphSlot slot, FT_Byte** glyph_names, PS_Blend blend, FT_Bool hinting, FT_Render_Mode hint_mode, T1_Decoder_Callback callback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*done)( T1_Decoder decoder)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*parse_charstrings)( T1_Decoder decoder, FT_Byte* base, FT_UInt len)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (} T1_Decoder_FuncsRec ; typedef struct T1_DecoderRec_ { T1_BuilderRec builder ; FT_Long stack [ T1_MAX_CHARSTRINGS_OPERANDS ] ; FT_Long* top ; T1_Decoder_ZoneRec zones [ T1_MAX_SUBRS_CALLS + 1 ] ; T1_Decoder_Zone zone ; FT_Service_PsCMaps psnames ; FT_UInt num_glyphs ; FT_Byte** glyph_names ; FT_Int lenIV ; FT_UInt num_subrs ; FT_Byte** subrs ; FT_PtrDist* subrs_len ; FT_Matrix font_matrix ; FT_Vector font_offset ; FT_Int flex_state ; FT_Int num_flex_vectors ; FT_Vector flex_vectors [ 7 ] ; PS_Blend blend ; FT_Render_Mode hint_mode ; T1_Decoder_Callback parse_callback ; T1_Decoder_FuncsRec funcs ; FT_Long* buildchar ; FT_UInt len_buildchar ; FT_Bool seac ; } T1_DecoderRec ; typedef struct AFM_ParserRec_* AFM_Parser ; typedef struct AFM_Parser_FuncsRec_ {)",
    "insertText": "FT_Error(*init)( AFM_Parser parser, FT_Memory memory, FT_Byte* base, FT_Byte* limit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*done)( AFM_Parser parser)"
  },
  {
    "label": "FT_Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_Error(*parse)( AFM_Parser parser)"
  },
  {
    "label": "FT_Int()",
    "kind": "Method",
    "detail": "Function (} AFM_Parser_FuncsRec ; typedef struct AFM_StreamRec_* AFM_Stream ; typedef struct AFM_ParserRec_ { FT_Memory memory ; AFM_Stream stream ; AFM_FontInfo FontInfo ;)",
    "insertText": "FT_Int(*get_index)( const char* name, FT_Offset len, void* user_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* user_data ; } AFM_ParserRec ; typedef const struct T1_CMap_ClassesRec_* T1_CMap_Classes ; typedef struct T1_CMap_ClassesRec_ { FT_CMap_Class standard ; FT_CMap_Class expert ; FT_CMap_Class custom ; FT_CMap_Class unicode ; } T1_CMap_ClassesRec ; typedef struct PSAux_ServiceRec_ { const PS_Table_FuncsRec* ps_table_funcs ; const PS_Parser_FuncsRec* ps_parser_funcs ; const T1_Builder_FuncsRec* t1_builder_funcs ; const T1_Decoder_FuncsRec* t1_decoder_funcs ;)",
    "insertText": "void(*t1_decrypt)( FT_Byte* buffer, FT_Offset length, FT_UShort seed)"
  }
]