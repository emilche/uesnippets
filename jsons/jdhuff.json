[
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (# include \" jconfigint . h \" # define HUFF_LOOKAHEAD 8 typedef struct { JLONG maxcode [ 1 8 ] ; JLONG valoffset [ 1 8 ] ; JHUFF_TBL* pub ; int lookup [ 1<<HUFF_LOOKAHEAD ] ; } d_derived_tbl ;)",
    "insertText": "EXTERN(void) jpeg_make_d_derived_tbl(j_decompress_ptr cinfo, boolean isDC, int tblno, d_derived_tbl **pdtbl)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_WIN32) && !defined(SIZEOF_SIZE_T) #error Cannot determine word size #endif #if SIZEOF_SIZE_T == 8 || defined(_WIN64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# define BIT_BUF_SIZE 6 4 # elif)",
    "insertText": "defined(__x86_64__) && defined(__ILP32__)"
  },
  {
    "label": "BITREAD_LOAD_STATE()",
    "kind": "Method",
    "detail": "Function (# define BIT_BUF_SIZE 6 4 # else typedef unsigned long bit_buf_type ; # define BIT_BUF_SIZE 3 2 # endif typedef struct { bit_buf_type get_buffer ; int bits_left ; } bitread_perm_state ; typedef struct { const JOCTET* next_input_byte ; size_t bytes_in_buffer ; bit_buf_type get_buffer ; int bits_left ; j_decompress_ptr cinfo ; } bitread_working_state ; # define BITREAD_STATE_VARS \\ register bit_buf_type get_buffer ; \\ register int bits_left ; \\ bitread_working_state br_state # define)",
    "insertText": "BITREAD_LOAD_STATE(cinfop, permstate)"
  },
  {
    "label": "BITREAD_SAVE_STATE()",
    "kind": "Method",
    "detail": "Function (src->next_input_byte = br_state.next_input_byte)",
    "insertText": "BITREAD_SAVE_STATE(cinfop, permstate)"
  },
  {
    "label": "CHECK_BIT_BUFFER()",
    "kind": "Method",
    "detail": "Function (\\ cinfop -> src -> bytes_in_buffer = br_state . bytes_in_buffer ; \\ permstate . get_buffer = get_buffer ; \\ permstate . bits_left = bits_left # define)",
    "insertText": "CHECK_BIT_BUFFER(state, nbits, action)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(bits_left < (nbits))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!jpeg_fill_bit_buffer(&(state), get_buffer, bits_left, nbits))"
  },
  {
    "label": "get_buffer()",
    "kind": "Method",
    "detail": "Function (action ; } \\)",
    "insertText": "get_buffer(state)"
  },
  {
    "label": "bits_left()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bits_left(state)"
  },
  {
    "label": "GET_BITS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "GET_BITS(nbits) \\ (((int)(get_buffer >> (bits_left -= (nbits)))) & ((1 << (nbits)) - 1)) #define PEEK_BITS(nbits) \\ (((int)(get_buffer >> (bits_left - (nbits)))) & ((1 << (nbits)) - 1)) #define DROP_BITS(nbits) \\ (bits_left -= (nbits)) EXTERN(boolean) jpeg_fill_bit_buffer(bitread_working_state *state, register bit_buf_type get_buffer, register int bits_left, int nbits)"
  },
  {
    "label": "HUFF_DECODE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "HUFF_DECODE(result, state, htbl, failaction, slowlabel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ register int nb,look ; \\)",
    "insertText": "if(bits_left < HUFF_LOOKAHEAD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!jpeg_fill_bit_buffer(&state, get_buffer, bits_left, 0))"
  },
  {
    "label": "PEEK_BITS()",
    "kind": "Method",
    "detail": "Function (\\ nb = 1 ; goto slowlabel ; \\ } \\ } \\ look =)",
    "insertText": "PEEK_BITS(HUFF_LOOKAHEAD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((nb = (htbl->lookup[look] >> HUFF_LOOKAHEAD)) <= HUFF_LOOKAHEAD)"
  },
  {
    "label": "DROP_BITS()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DROP_BITS(nb)"
  },
  {
    "label": "look()",
    "kind": "Method",
    "detail": "Function (\\ result = htbl -> lookup [)",
    "insertText": "look((1 << HUFF_LOOKAHEAD) - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ slowlabel : \\)",
    "insertText": "if((result = \\ jpeg_huff_decode(&state, get_buffer, bits_left, htbl, nb)) < 0)"
  },
  {
    "label": "HUFF_DECODE_FAST()",
    "kind": "Method",
    "detail": "Function (failaction ; } \\ get_buffer = state . get_buffer ; bits_left = state . bits_left ; \\ } \\ } # define)",
    "insertText": "HUFF_DECODE_FAST(s, nb, htbl)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (\\ s =)",
    "insertText": "s((1 << HUFF_LOOKAHEAD) - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(nb > HUFF_LOOKAHEAD)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "s(get_buffer >> bits_left) & ((1 << (nb)) - 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(s > htbl->maxcode[nb])"
  },
  {
    "label": "GET_BITS()",
    "kind": "Method",
    "detail": "Function (\\ s<<= 1 ; \\ s | =)",
    "insertText": "GET_BITS(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ nb + + ; \\ } \\)",
    "insertText": "if(nb > 16)"
  },
  {
    "label": "huffval()",
    "kind": "Method",
    "detail": "Function (\\ else \\ s = htbl -> pub ->)",
    "insertText": "huffval(int)(s + htbl->valoffset[nb])"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "EXTERN(int) jpeg_huff_decode(bitread_working_state *state, register bit_buf_type get_buffer, register int bits_left, d_derived_tbl *htbl, int min_bits)"
  }
]