[
  {
    "label": "dynamic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dynamic"
  },
  {
    "label": "elf32_rel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_rel"
  },
  {
    "label": "elf64_rel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_rel"
  },
  {
    "label": "elf32_rela",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_rela"
  },
  {
    "label": "elf64_rela",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_rela"
  },
  {
    "label": "elf32_sym",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_sym"
  },
  {
    "label": "elf64_sym",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_sym"
  },
  {
    "label": "elf32_hdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_hdr"
  },
  {
    "label": "elf64_hdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_hdr"
  },
  {
    "label": "elf32_phdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_phdr"
  },
  {
    "label": "elf64_phdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_phdr"
  },
  {
    "label": "elf32_shdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_shdr"
  },
  {
    "label": "elf64_shdr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_shdr"
  },
  {
    "label": "elf32_note",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf32_note"
  },
  {
    "label": "elf64_note",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "elf64_note"
  },
  {
    "label": "PT_GNU_STACK()",
    "kind": "Method",
    "detail": "Function (# ifndef _UAPI_LINUX_ELF_H # define _UAPI_LINUX_ELF_H # include<stdint . h> typedef uint32_t Elf32_Addr ; typedef uint16_t Elf32_Half ; typedef uint32_t Elf32_Off ; typedef int32_t Elf32_Sword ; typedef uint32_t Elf32_Word ; typedef uint64_t Elf64_Addr ; typedef uint16_t Elf64_Half ; typedef int16_t Elf64_SHalf ; typedef uint64_t Elf64_Off ; typedef int32_t Elf64_Sword ; typedef uint32_t Elf64_Word ; typedef uint64_t Elf64_Xword ; typedef int64_t Elf64_Sxword ; # define PT_NULL 0 # define PT_LOAD 1 # define PT_DYNAMIC 2 # define PT_INTERP 3 # define PT_NOTE 4 # define PT_SHLIB 5 # define PT_PHDR 6 # define PT_TLS 7 # define PT_LOOS 0 x60000000 # define PT_HIOS 0 x6fffffff # define PT_LOPROC 0 x70000000 # define PT_HIPROC 0 x7fffffff # define PT_GNU_EH_FRAME 0 x6474e550 # define)",
    "insertText": "PT_GNU_STACK(PT_LOOS + 0x474e551) #define PN_XNUM 0xffff #define ET_NONE 0 #define ET_REL 1 #define ET_EXEC 2 #define ET_DYN 3 #define ET_CORE 4 #define ET_LOPROC 0xff00 #define ET_HIPROC 0xffff #define DT_NULL 0 #define DT_NEEDED 1 #define DT_PLTRELSZ 2 #define DT_PLTGOT 3 #define DT_HASH 4 #define DT_STRTAB 5 #define DT_SYMTAB 6 #define DT_RELA 7 #define DT_RELASZ 8 #define DT_RELAENT 9 #define DT_STRSZ 10 #define DT_SYMENT 11 #define DT_INIT 12 #define DT_FINI 13 #define DT_SONAME 14 #define DT_RPATH 15 #define DT_SYMBOLIC 16 #define DT_REL 17 #define DT_RELSZ 18 #define DT_RELENT 19 #define DT_PLTREL 20 #define DT_DEBUG 21 #define DT_TEXTREL 22 #define DT_JMPREL 23 #define DT_ENCODING 32 #define OLD_DT_LOOS 0x60000000 #define DT_LOOS 0x6000000d #define DT_HIOS 0x6ffff000 #define DT_VALRNGLO 0x6ffffd00 #define DT_VALRNGHI 0x6ffffdff #define DT_ADDRRNGLO 0x6ffffe00 #define DT_ADDRRNGHI 0x6ffffeff #define DT_VERSYM 0x6ffffff0 #define DT_RELACOUNT 0x6ffffff9 #define DT_RELCOUNT 0x6ffffffa #define DT_FLAGS_1 0x6ffffffb #define DT_VERDEF 0x6ffffffc #define DT_VERDEFNUM 0x6ffffffd #define DT_VERNEED 0x6ffffffe #define DT_VERNEEDNUM 0x6fffffff #define OLD_DT_HIOS 0x6fffffff #define DT_LOPROC 0x70000000 #define DT_HIPROC 0x7fffffff #define STB_LOCAL 0 #define STB_GLOBAL 1 #define STB_WEAK 2 #define STT_NOTYPE 0 #define STT_OBJECT 1 #define STT_FUNC 2 #define STT_SECTION 3 #define STT_FILE 4 #define STT_COMMON 5 #define STT_TLS 6 #define ELF_ST_BIND(x) ((x) >> 4) #define ELF_ST_TYPE(x) (((unsigned int) x) & 0xf) #define ELF32_ST_BIND(x) ELF_ST_BIND(x) #define ELF32_ST_TYPE(x) ELF_ST_TYPE(x) #define ELF64_ST_BIND(x) ELF_ST_BIND(x) #define ELF64_ST_TYPE(x) ELF_ST_TYPE(x)"
  },
  {
    "label": "ELF32_R_SYM()",
    "kind": "Method",
    "detail": "Function (Elf32_Sword d_tag ; union { Elf32_Sword d_val ; Elf32_Addr d_ptr ; } d_un ; } Elf32_Dyn ; typedef struct { Elf64_Sxword d_tag ; union { Elf64_Xword d_val ; Elf64_Addr d_ptr ; } d_un ; } Elf64_Dyn ; # define)",
    "insertText": "ELF32_R_SYM(x) ((x) >> 8) #define ELF32_R_TYPE(x) ((x) & 0xff) #define ELF64_R_SYM(i) ((i) >> 32) #define ELF64_R_TYPE(i) ((i) & 0xffffffff)"
  }
]