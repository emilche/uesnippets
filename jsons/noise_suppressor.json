[
  {
    "label": "NoiseSuppressor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoiseSuppressor"
  },
  {
    "label": "ChannelState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelState"
  },
  {
    "label": "FilterBankState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterBankState"
  },
  {
    "label": "NoiseSuppressor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_NS_NOISE_SUPPRESSOR_H_ # define MODULES_AUDIO_PROCESSING_NS_NOISE_SUPPRESSOR_H_ # include<memory> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / audio_buffer . h \" # include \" modules / audio_processing / ns / noise_estimator . h \" # include \" modules / audio_processing / ns / ns_common . h \" # include \" modules / audio_processing / ns / ns_config . h \" # include \" modules / audio_processing / ns / ns_fft . h \" # include \" modules / audio_processing / ns / speech_probability_estimator . h \" # include \" modules / audio_processing / ns / wiener_filter . h \" namespace webrtc { class NoiseSuppressor { public :)",
    "insertText": "NoiseSuppressor(const NsConfig& config, size_t sample_rate_hz, size_t num_channels)"
  },
  {
    "label": "NoiseSuppressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoiseSuppressor(const NoiseSuppressor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NoiseSuppressor&)",
    "insertText": "operator(const NoiseSuppressor&)"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Analyze(const AudioBuffer& audio)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(AudioBuffer* audio)"
  },
  {
    "label": "SetCaptureOutputUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaptureOutputUsage(bool capture_output_used)"
  },
  {
    "label": "ChannelState()",
    "kind": "Method",
    "detail": "Function (capture_output_used_ = capture_output_used ; } private : const size_t num_bands_ ; const size_t num_channels_ ; const SuppressionParams suppression_params_ ; int32_t num_analyzed_frames_ = - 1 ; NrFft fft_ ; bool capture_output_used_ = true ; struct ChannelState {)",
    "insertText": "ChannelState(const SuppressionParams& suppression_params, size_t num_bands)"
  },
  {
    "label": "AggregateWienerFilters()",
    "kind": "Method",
    "detail": "Function (SpeechProbabilityEstimator speech_probability_estimator ; WienerFilter wiener_filter ; NoiseEstimator noise_estimator ; std::array<float,kFftSizeBy2Plus1> prev_analysis_signal_spectrum ; std::array<float,kFftSize - kNsFrameSize> analyze_analysis_memory ; std::array<float,kOverlapSize> process_analysis_memory ; std::array<float,kOverlapSize> process_synthesis_memory ; std::vector<std::array<float,kOverlapSize>> process_delay_memory ; } ; struct FilterBankState { std::array<float,kFftSize> real ; std::array<float,kFftSize> imag ; std::array<float,kFftSize> extended_frame ; } ; std::vector<FilterBankState> filter_bank_states_heap_ ; std::vector<float> upper_band_gains_heap_ ; std::vector<float> energies_before_filtering_heap_ ; std::vector<float> gain_adjustments_heap_ ; std::vector<std::unique_ptr<ChannelState>> channels_ ; void)",
    "insertText": "AggregateWienerFilters(rtc::ArrayView<float, kFftSizeBy2Plus1> filter)"
  }
]