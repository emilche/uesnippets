[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TimeSeriesPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeSeriesPoint"
  },
  {
    "label": "TimeSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeSeries"
  },
  {
    "label": "Interval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Interval"
  },
  {
    "label": "IntervalSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalSeries"
  },
  {
    "label": "Orientation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Orientation"
  },
  {
    "label": "Plot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Plot"
  },
  {
    "label": "PlotCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlotCollection"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_PLOT_BASE_H_ # define RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_PLOT_BASE_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / types / optional . h \" # include \" rtc_base / ignore_wundef . h \")",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #include \"rtc_tools/rtc_event_log_visualizer/proto/chart.pb.h\" RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "TimeSeriesPoint()",
    "kind": "Method",
    "detail": "Function (enum class LineStyle { kNone,kLine,kStep,kBar } ; enum class PointStyle { kNone,kHighlight } ; struct TimeSeriesPoint {)",
    "insertText": "TimeSeriesPoint(float x, float y) : x(x), y(y)"
  },
  {
    "label": "TimeSeries()",
    "kind": "Method",
    "detail": "Function (} float x ; float y ; } ; struct TimeSeries {)",
    "insertText": "TimeSeries()"
  },
  {
    "label": "TimeSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeSeries(const char* label, LineStyle line_style, PointStyle point_style = PointStyle::kNone) : label(label), line_style(line_style), point_style(point_style)"
  },
  {
    "label": "TimeSeries()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeSeries(const std::string& label, LineStyle line_style, PointStyle point_style = PointStyle::kNone) : label(label), line_style(line_style), point_style(point_style)"
  },
  {
    "label": "TimeSeries()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeSeries(TimeSeries&& other) : label(std::move(other.label)), line_style(other.line_style), point_style(other.point_style), points(std::move(other.points))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TimeSeries&)",
    "insertText": "operator(TimeSeries&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (label =)",
    "insertText": "move(other.label)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (line_style = other . line_style ; point_style = other . point_style ; points =)",
    "insertText": "move(other.points)"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Interval(double begin, double end) : begin(begin), end(end)"
  },
  {
    "label": "IntervalSeries()",
    "kind": "Method",
    "detail": "Function (} double begin ; double end ; } ; struct IntervalSeries { enum Orientation { kHorizontal,kVertical } ;)",
    "insertText": "IntervalSeries()"
  },
  {
    "label": "IntervalSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntervalSeries(const std::string& label, const std::string& color, IntervalSeries::Orientation orientation) : label(label), color(color), orientation(orientation)"
  },
  {
    "label": "Plot()",
    "kind": "Method",
    "detail": "Function (} std::string label ; std::string color ; Orientation orientation ; std::vector<Interval> intervals ; } ; class Plot { public : ~)",
    "insertText": "Plot()"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ABSL_DEPRECATED(\"Use PrintPythonCode() or ExportProtobuf() instead.\") virtual void Draw()"
  },
  {
    "label": "SetXAxis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetXAxis(float min_value, float max_value, std::string label, float left_margin = 0, float right_margin = 0)"
  },
  {
    "label": "SetSuggestedXAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuggestedXAxis(float min_value, float max_value, std::string label, float left_margin = 0, float right_margin = 0)"
  },
  {
    "label": "SetYAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetYAxis(float min_value, float max_value, std::string label, float bottom_margin = 0, float top_margin = 0)"
  },
  {
    "label": "SetSuggestedYAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuggestedYAxis(float min_value, float max_value, std::string label, float bottom_margin = 0, float top_margin = 0)"
  },
  {
    "label": "SetYAxisTickLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetYAxisTickLabels(const std::vector<std::pair<float, std::string>>& labels)"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitle(const std::string& title)"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetId(const std::string& id)"
  },
  {
    "label": "AppendTimeSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTimeSeries(TimeSeries&& time_series)"
  },
  {
    "label": "AppendIntervalSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendIntervalSeries(IntervalSeries&& interval_series)"
  },
  {
    "label": "AppendTimeSeriesIfNotEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTimeSeriesIfNotEmpty(TimeSeries&& time_series)"
  },
  {
    "label": "PrintPythonCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPythonCode()"
  },
  {
    "label": "ExportProtobuf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportProtobuf(webrtc::analytics::Chart* chart)"
  },
  {
    "label": "PlotCollection()",
    "kind": "Method",
    "detail": "Function (protected : float xaxis_min_ ; float xaxis_max_ ; std::string xaxis_label_ ; float yaxis_min_ ; float yaxis_max_ ; std::string yaxis_label_ ; std::vector<std::pair<float,std::string>> yaxis_tick_labels_ ; std::string title_ ; std::string id_ ; std::vector<TimeSeries> series_list_ ; std::vector<IntervalSeries> interval_list_ ; } ; class PlotCollection { public : ~)",
    "insertText": "PlotCollection()"
  },
  {
    "label": "AppendNewPlot()",
    "kind": "Method",
    "detail": "Function (} Plot*)",
    "insertText": "AppendNewPlot()"
  },
  {
    "label": "SetCallTimeToUtcOffsetMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCallTimeToUtcOffsetMs(int64_t calltime_to_utc_ms)"
  },
  {
    "label": "PrintPythonCode()",
    "kind": "Method",
    "detail": "Function (calltime_to_utc_ms_ = calltime_to_utc_ms ; } void)",
    "insertText": "PrintPythonCode(bool shared_xaxis)"
  },
  {
    "label": "ExportProtobuf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportProtobuf(webrtc::analytics::ChartCollection* collection)"
  }
]