[
  {
    "label": "SourceEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceEnumerator"
  },
  {
    "label": "WindowEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowEnumerator"
  },
  {
    "label": "ScreenEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScreenEnumerator"
  },
  {
    "label": "WgcCapturerWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WgcCapturerWin"
  },
  {
    "label": "IsWgcSupported()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_WGC_CAPTURER_WIN_H_ # define MODULES_DESKTOP_CAPTURE_WIN_WGC_CAPTURER_WIN_H_ # include<DispatcherQueue . h> # include<d3d11 . h> # include<wrl / client . h> # include<map> # include<memory> # include \" modules / desktop_capture / desktop_capture_options . h \" # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / win / screen_capture_utils . h \" # include \" modules / desktop_capture / win / wgc_capture_session . h \" # include \" modules / desktop_capture / win / wgc_capture_source . h \" # include \" modules / desktop_capture / win / window_capture_utils . h \" namespace webrtc { bool)",
    "insertText": "IsWgcSupported(CaptureType capture_type)"
  },
  {
    "label": "SourceEnumerator()",
    "kind": "Method",
    "detail": "Function (class SourceEnumerator { public : ~)",
    "insertText": "SourceEnumerator()"
  },
  {
    "label": "FindAllSources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAllSources(DesktopCapturer::SourceList* sources)"
  },
  {
    "label": "WindowEnumerator()",
    "kind": "Method",
    "detail": "Function (} ; class WindowEnumerator final : public SourceEnumerator { public :)",
    "insertText": "WindowEnumerator(bool enumerate_current_process_windows) : enumerate_current_process_windows_(enumerate_current_process_windows)"
  },
  {
    "label": "WindowEnumerator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WindowEnumerator(const WindowEnumerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WindowEnumerator&)",
    "insertText": "operator(const WindowEnumerator&)"
  },
  {
    "label": "WindowEnumerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WindowEnumerator()"
  },
  {
    "label": "ScreenEnumerator()",
    "kind": "Method",
    "detail": "Function (} private : WindowCaptureHelperWin window_capture_helper_ ; bool enumerate_current_process_windows_ ; } ; class ScreenEnumerator final : public SourceEnumerator { public :)",
    "insertText": "ScreenEnumerator()"
  },
  {
    "label": "ScreenEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScreenEnumerator(const ScreenEnumerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScreenEnumerator&)",
    "insertText": "operator(const ScreenEnumerator&)"
  },
  {
    "label": "WgcCapturerWin()",
    "kind": "Method",
    "detail": "Function (} } ; class WgcCapturerWin : public DesktopCapturer { public :)",
    "insertText": "WgcCapturerWin(std::unique_ptr<WgcCaptureSourceFactory> source_factory, std::unique_ptr<SourceEnumerator> source_enumerator, bool allow_delayed_capturable_check)"
  },
  {
    "label": "WgcCapturerWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WgcCapturerWin(const WgcCapturerWin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WgcCapturerWin&)",
    "insertText": "operator(const WgcCapturerWin&)"
  },
  {
    "label": "WgcCapturerWin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WgcCapturerWin()"
  },
  {
    "label": "CreateRawWindowCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateRawWindowCapturer(const DesktopCaptureOptions& options, bool allow_delayed_capturable_check = false)"
  },
  {
    "label": "CreateRawScreenCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateRawScreenCapturer(const DesktopCaptureOptions& options)"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* sources)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "FocusOnSelectedSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FocusOnSelectedSource()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Callback* callback)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "IsSourceBeingCaptured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceBeingCaptured(SourceId id)"
  },
  {
    "label": "HRESULT()",
    "kind": "Method",
    "detail": "Function (private : typedef)",
    "insertText": "HRESULT(WINAPI* CreateDispatcherQueueControllerFunc)( DispatcherQueueOptions, ABI::Windows::System::IDispatcherQueueController**)"
  }
]