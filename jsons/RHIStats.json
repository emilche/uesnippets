[
  {
    "label": "FTextureMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureMemoryStats"
  },
  {
    "label": "FRHIDrawStatsCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDrawStatsCategory"
  },
  {
    "label": "FManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManager"
  },
  {
    "label": "FRHIDrawStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDrawStats"
  },
  {
    "label": "FPerCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerCategory"
  },
  {
    "label": "FPerGPU",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerGPU"
  },
  {
    "label": "FD3DMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3DMemoryStats"
  },
  {
    "label": "AreHardwareStatsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StaticArray . h \" # include \" MultiGPU . h \" # include \" RHIDefinitions . h \" # include \" Stats / Stats . h \" struct FTextureMemoryStats { int64 DedicatedVideoMemory = - 1 ; int64 DedicatedSystemMemory = - 1 ; int64 SharedSystemMemory = - 1 ; int64 TotalGraphicsMemory = - 1 ; uint64 StreamingMemorySize = 0 ; uint64 NonStreamingMemorySize = 0 ; int64 LargestContiguousAllocation = 0 ; int64 TexturePoolSize = 0 ; bool)",
    "insertText": "AreHardwareStatsValid()"
  },
  {
    "label": "IsUsingLimitedPoolSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingLimitedPoolSize()"
  },
  {
    "label": "FRHIDrawStatsCategory()",
    "kind": "Method",
    "detail": "Function (} } ; int32 GNumDrawCallsRHI [ MAX_NUM_GPUS ] ; int32 GNumPrimitivesDrawnRHI [ MAX_NUM_GPUS ] ; # if HAS_GPU_STATS struct FRHIDrawStatsCategory {)",
    "insertText": "FRHIDrawStatsCategory()"
  },
  {
    "label": "FRHIDrawStatsCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIDrawStatsCategory(FName InName)"
  },
  {
    "label": "ShouldCountDraws()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCountDraws()"
  },
  {
    "label": "GetManager()",
    "kind": "Method",
    "detail": "Function (} ; FManager&)",
    "insertText": "GetManager()"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"DrawPrimitive calls\"), STAT_RHIDrawPrimitiveCalls, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Triangles drawn\"), STAT_RHITriangles, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Lines drawn\"), STAT_RHILines, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "RHI_DRAW_CALL_INC()",
    "kind": "Method",
    "detail": "Function (# else struct FRHIDrawStatsCategory { uint32 Index = 0 ; } ; # endif # if RHI_NEW_GPU_PROFILER # define)",
    "insertText": "RHI_DRAW_CALL_INC()"
  },
  {
    "label": "GetExecutingCommandList()",
    "kind": "Method",
    "detail": "Function (StatEvent . NumDraws + + ;)",
    "insertText": "GetExecutingCommandList().Stats_AddDraw()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define RHI_DRAW_CALL_STATS(Type,Prims)"
  },
  {
    "label": "GetExecutingCommandList()",
    "kind": "Method",
    "detail": "Function (StatEvent . NumDraws + + ; StatEvent . NumPrimitives + = Prims ;)",
    "insertText": "GetExecutingCommandList().Stats_AddDrawAndPrimitives(Type, Prims)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #else #define RHI_DRAW_CALL_INC()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false)"
  },
  {
    "label": "GetTotalPrimitives()",
    "kind": "Method",
    "detail": "Function (# if HAS_GPU_STATS int32 NumCategories = FRHIDrawStatsCategory::MAX_DRAWCALL_CATEGORY + 1 ; # else int32 NumCategories = 1 ; # endif int32 NoCategory = NumCategories - 1 ; struct FPerCategory { uint32 Draws ; uint32 Triangles ; uint32 Lines ; uint32 Quads ; uint32 Points ; uint32 Rectangles ; uint32)",
    "insertText": "GetTotalPrimitives()"
  },
  {
    "label": "GetGPU()",
    "kind": "Method",
    "detail": "Function (Draws + = RHS . Draws ; Triangles + = RHS . Triangles ; Lines + = RHS . Lines ; Quads + = RHS . Quads ; Points + = RHS . Points ; Rectangles + = RHS . Rectangles ; return* this ; } } ; struct FPerGPU { struct FRHIDrawStats ; FPerCategory Categories [ NumCategories ] ; } ; FPerGPU&)",
    "insertText": "GetGPU(uint32 GPUIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "AddDraw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDraw(FRHIGPUMask GPUMask, FRHIDrawStatsCategory const* Category)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 CategoryIndex = Category ? Category -> Index : NoCategory ;)",
    "insertText": "for(uint32 GPUIndex : GPUMask)"
  },
  {
    "label": "AddDrawAndPrimitives()",
    "kind": "Method",
    "detail": "Function (FPerCategory& Stats = GPUs [ GPUIndex ] . Categories [ CategoryIndex ] ; Stats . Draws + + ; } } void)",
    "insertText": "AddDrawAndPrimitives(FRHIGPUMask GPUMask, FRHIDrawStatsCategory const* Category, EPrimitiveType PrimitiveType, uint32 NumPrimitives)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FPerCategory& Stats = GPUs [ GPUIndex ] . Categories [ CategoryIndex ] ; Stats . Draws + + ;)",
    "insertText": "switch(PrimitiveType)"
  },
  {
    "label": "ProcessAsFrameStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsFrameStats()"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (private : FPerGPU GPUs [ MAX_NUM_GPUS ] ; } ;)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Render Target 2D Memory\"), STAT_RenderTargetMemory2D, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Render Target 3D Memory\"), STAT_RenderTargetMemory3D, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Render Target Cube Memory\"), STAT_RenderTargetMemoryCube, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"UAV Texture Memory\"), STAT_UAVTextureMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Texture 2D Memory\"), STAT_TextureMemory2D, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Texture 3D Memory\"), STAT_TextureMemory3D, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Texture Cube Memory\"), STAT_TextureMemoryCube, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Uniform Buffer Memory\"), STAT_UniformBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Index Buffer Memory\"), STAT_IndexBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Vertex Buffer Memory\"), STAT_VertexBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"RayTracing Acceleration Structure Memory\"), STAT_RTAccelerationStructureMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Structured Buffer Memory\"), STAT_StructuredBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Byte Address Buffer Memory\"), STAT_ByteAddressBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Draw Indirect Buffer Memory\"), STAT_DrawIndirectBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Misc Buffer Memory\"), STAT_MiscBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Reserved Buffer Memory (Uncommitted)\"), STAT_ReservedUncommittedBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Reserved Buffer Memory (Committed)\"), STAT_ReservedCommittedBufferMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Reserved Texture Memory (Uncommitted)\"), STAT_ReservedUncommittedTextureMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Reserved Texture Memory (Committed)\"), STAT_ReservedCommittedTextureMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Sampler Descriptors Allocated\"), STAT_SamplerDescriptorsAllocated, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Resource Descriptors Allocated\"), STAT_ResourceDescriptorsAllocated, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Bindless Sampler Heap\"), STAT_BindlessSamplerHeapMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(TEXT(\"Bindless Resource Heap\"), STAT_BindlessResourceHeapMemory, STATGROUP_RHI, FPlatformMemory::MCR_GPU, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Bindless Sampler Descriptors Allocated\"), STAT_BindlessSamplerDescriptorsAllocated, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Bindless Resource Descriptors Allocated\"), STAT_BindlessResourceDescriptorsAllocated, STATGROUP_RHI, RHI_API)"
  },
  {
    "label": "IsOverBudget()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MICROSOFT struct FD3DMemoryStats { uint64 BudgetLocal = 0 ; uint64 BudgetSystem = 0 ; uint64 UsedLocal = 0 ; uint64 UsedSystem = 0 ; uint64 DemotedLocal = 0 ; uint64 DemotedSystem = 0 ; uint64 AvailableLocal = 0 ; uint64 AvailableSystem = 0 ; bool)",
    "insertText": "IsOverBudget()"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Total Video Memory (Budget)\"), STAT_D3DTotalVideoMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Total System Memory (Budget)\"), STAT_D3DTotalSystemMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Available Video Memory\"), STAT_D3DAvailableVideoMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Available System Memory\"), STAT_D3DAvailableSystemMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Used Video Memory\"), STAT_D3DUsedVideoMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Used System Memory\"), STAT_D3DUsedSystemMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Demoted Video Memory\"), STAT_D3DDemotedVideoMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Demoted System Memory\"), STAT_D3DDemotedSystemMemory, STATGROUP_D3DMemory,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Video Memory stats update time\"), STAT_D3DUpdateVideoMemoryStats, STATGROUP_D3DMemory, RHI_API)"
  },
  {
    "label": "UpdateD3DMemoryStatsAndCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateD3DMemoryStatsAndCSV(const FD3DMemoryStats& MemoryStats, bool bUpdateCSV)"
  }
]