[
  {
    "label": "LoggedAudioPlayoutEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedAudioPlayoutEvent"
  },
  {
    "label": "RtcEventAudioPlayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventAudioPlayout"
  },
  {
    "label": "LoggedAudioPlayoutEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_AUDIO_PLAYOUT_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_AUDIO_PLAYOUT_H_ # include<stdint . h> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_definition . h \" namespace webrtc { struct LoggedAudioPlayoutEvent {)",
    "insertText": "LoggedAudioPlayoutEvent()"
  },
  {
    "label": "LoggedAudioPlayoutEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedAudioPlayoutEvent(Timestamp timestamp, uint32_t ssrc) : timestamp(timestamp), ssrc(ssrc)"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "RtcEventAudioPlayout()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc ; } ; class RtcEventAudioPlayout final : public RtcEvent { public : Type kType = Type::AudioPlayout ;)",
    "insertText": "RtcEventAudioPlayout(uint32_t ssrc)"
  },
  {
    "label": "RtcEventAudioPlayout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventAudioPlayout()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "Parse(absl::string_view encoded_bytes, bool batched, std::map<uint32_t, std::vector<LoggedAudioPlayoutEvent>>& output)"
  },
  {
    "label": "ParseBatch()",
    "kind": "Method",
    "detail": "Function (std::vector<LoggedAudioPlayoutEvent> temp_output ; auto status = RtcEventAudioPlayout::definition_ .)",
    "insertText": "ParseBatch(encoded_bytes, batched, temp_output)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (output [ event . ssrc ] .)",
    "insertText": "push_back(event)"
  },
  {
    "label": "RtcEventAudioPlayout()",
    "kind": "Method",
    "detail": "Function (} return status ; } private :)",
    "insertText": "RtcEventAudioPlayout(const RtcEventAudioPlayout& other)"
  }
]