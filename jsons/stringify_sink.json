[
  {
    "label": "StringifySink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringifySink"
  },
  {
    "label": "HasAbslStringify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasAbslStringify"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STRINGIFY_SINK_H_ # define ABSL_STRINGS_INTERNAL_STRINGIFY_SINK_H_ # include<string> # include<type_traits> # include<utility> # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { class StringifySink { public : void)",
    "insertText": "Append(size_t count, char ch)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(string_view v)"
  },
  {
    "label": "AbslFormatFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbslFormatFlush(StringifySink* sink, absl::string_view v)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (sink ->)",
    "insertText": "Append(v)"
  },
  {
    "label": "ExtractStringification()",
    "kind": "Method",
    "detail": "Function (} private : template<T> string_view)",
    "insertText": "ExtractStringification(StringifySink& sink, const T& v)"
  },
  {
    "label": "AbslStringify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbslStringify(sink, v)"
  }
]