[
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "TLinkable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / EntityGeom . h \" # include \" Topo / TopologicalEntity . h \" # include \" Topo / TopologicalLink . h \" namespace UE::CADKernel { class FModelMesh ; template<EntityType,LinkType> class TLinkable : public FTopologicalEntity { protected : TSharedPtr<LinkType> TopologicalLink ; public :)",
    "insertText": "TLinkable()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finalize()"
  },
  {
    "label": "LinkType()",
    "kind": "Method",
    "detail": "Function (TopologicalLink = FEntity::MakeShared<)",
    "insertText": "LinkType((EntityType&)(*this))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, TopologicalLink)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TopologicalLink .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetLinkActiveEntity()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<const EntityType>)",
    "insertText": "GetLinkActiveEntity()"
  },
  {
    "label": "GetActiveEntity()",
    "kind": "Method",
    "detail": "Function (EntityType* ActiveEntity = TopologicalLink ->)",
    "insertText": "GetActiveEntity()"
  },
  {
    "label": "IsActiveEntity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActiveEntity()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Activate()"
  },
  {
    "label": "ActivateEntity()",
    "kind": "Method",
    "detail": "Function (TopologicalLink ->)",
    "insertText": "ActivateEntity(*this)"
  },
  {
    "label": "GetLink()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<LinkType>)",
    "insertText": "GetLink()"
  },
  {
    "label": "IsLinkedTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedTo(const TSharedRef<EntityType>& Entity)"
  },
  {
    "label": "IsLinkedTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLinkedTo(const EntityType& Entity)"
  },
  {
    "label": "GetTwinEntityCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTwinEntityCount()"
  },
  {
    "label": "HasTwin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTwin()"
  },
  {
    "label": "GetTwinEntities()",
    "kind": "Method",
    "detail": "Function (} const TArray<EntityType*>&)",
    "insertText": "GetTwinEntities()"
  },
  {
    "label": "RemoveFromLink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromLink()"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (TopologicalLink ->)",
    "insertText": "RemoveEntity((EntityType&)*this)"
  },
  {
    "label": "ResetTopologicalLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTopologicalLink()"
  },
  {
    "label": "UnlinkTwinEntities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlinkTwinEntities()"
  },
  {
    "label": "IsThinZone()",
    "kind": "Method",
    "detail": "Function (} } const bool)",
    "insertText": "IsThinZone()"
  },
  {
    "label": "SetThinZoneMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetThinZoneMarker()"
  },
  {
    "label": "ResetThinZone()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::ThinZone ; } void)",
    "insertText": "ResetThinZone()"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::ThinZone ; } void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "MakeLink()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "MakeLink(EntityType& Twin)"
  },
  {
    "label": "ensureCADKernel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<LinkType> Link1 = TopologicalLink ; TSharedPtr<LinkType> Link2 = Twin . TopologicalLink ;)",
    "insertText": "ensureCADKernel(Link1.IsValid() && Link2.IsValid())"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Link1, Link2)"
  },
  {
    "label": "AddEntities()",
    "kind": "Method",
    "detail": "Function (} Link1 ->)",
    "insertText": "AddEntities(Link2->GetTwinEntities())"
  },
  {
    "label": "SetTopologicalLink()",
    "kind": "Method",
    "detail": "Function (Entity ->)",
    "insertText": "SetTopologicalLink(Link1)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} Link2 ->)",
    "insertText": "Delete()"
  },
  {
    "label": "SetTopologicalLink()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetTopologicalLink(TSharedPtr<LinkType> Link)"
  }
]