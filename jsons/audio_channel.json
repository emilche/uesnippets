[
  {
    "label": "AudioChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioChannel"
  },
  {
    "label": "AudioChannel()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_VOIP_AUDIO_CHANNEL_H_ # define AUDIO_VOIP_AUDIO_CHANNEL_H_ # include<map> # include<memory> # include<queue> # include<utility> # include \" api / task_queue / task_queue_factory . h \" # include \" api / voip / voip_base . h \" # include \" api / voip / voip_statistics . h \" # include \" audio / voip / audio_egress . h \" # include \" audio / voip / audio_ingress . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_impl2 . h \" # include \" rtc_base / ref_count . h \" namespace webrtc { class AudioChannel : public rtc::RefCountInterface { public :)",
    "insertText": "AudioChannel(Transport* transport, uint32_t local_ssrc, TaskQueueFactory* task_queue_factory, AudioMixer* audio_mixer, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory)"
  },
  {
    "label": "AudioChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioChannel()"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetId(ChannelId id)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (id_ = id ; } ChannelId)",
    "insertText": "GetId()"
  },
  {
    "label": "StopSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSend()"
  },
  {
    "label": "StartPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPlay()"
  },
  {
    "label": "StopPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlay()"
  },
  {
    "label": "IsSendingMedia()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSendingMedia()"
  },
  {
    "label": "GetAudioSender()",
    "kind": "Method",
    "detail": "Function (} AudioSender*)",
    "insertText": "GetAudioSender()"
  },
  {
    "label": "SetEncoder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEncoder(int payload_type, const SdpAudioFormat& encoder_format, std::unique_ptr<AudioEncoder> encoder)"
  },
  {
    "label": "SetEncoder()",
    "kind": "Method",
    "detail": "Function (egress_ ->)",
    "insertText": "SetEncoder(payload_type, encoder_format, std::move(encoder))"
  },
  {
    "label": "GetEncoderFormat()",
    "kind": "Method",
    "detail": "Function (} absl::optional<SdpAudioFormat>)",
    "insertText": "GetEncoderFormat()"
  },
  {
    "label": "RegisterTelephoneEventType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTelephoneEventType(int rtp_payload_type, int sample_rate_hz)"
  },
  {
    "label": "RegisterTelephoneEventType()",
    "kind": "Method",
    "detail": "Function (egress_ ->)",
    "insertText": "RegisterTelephoneEventType(rtp_payload_type, sample_rate_hz)"
  },
  {
    "label": "SendTelephoneEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendTelephoneEvent(int dtmf_event, int duration_ms)"
  },
  {
    "label": "SetMute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMute(bool enable)"
  },
  {
    "label": "SetMute()",
    "kind": "Method",
    "detail": "Function (egress_ ->)",
    "insertText": "SetMute(enable)"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "ReceivedRTPPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedRTPPacket(rtc::ArrayView<const uint8_t> rtp_packet)"
  },
  {
    "label": "ReceivedRTPPacket()",
    "kind": "Method",
    "detail": "Function (ingress_ ->)",
    "insertText": "ReceivedRTPPacket(rtp_packet)"
  },
  {
    "label": "ReceivedRTCPPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedRTCPPacket(rtc::ArrayView<const uint8_t> rtcp_packet)"
  },
  {
    "label": "ReceivedRTCPPacket()",
    "kind": "Method",
    "detail": "Function (ingress_ ->)",
    "insertText": "ReceivedRTCPPacket(rtcp_packet)"
  },
  {
    "label": "SetReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReceiveCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "SetReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (ingress_ ->)",
    "insertText": "SetReceiveCodecs(codecs)"
  },
  {
    "label": "GetIngressStatistics()",
    "kind": "Method",
    "detail": "Function (} IngressStatistics)",
    "insertText": "GetIngressStatistics()"
  },
  {
    "label": "GetChannelStatistics()",
    "kind": "Method",
    "detail": "Function (ChannelStatistics)",
    "insertText": "GetChannelStatistics()"
  },
  {
    "label": "GetInputTotalEnergy()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetInputTotalEnergy()"
  },
  {
    "label": "GetInputTotalDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetInputTotalDuration()"
  },
  {
    "label": "GetOutputAudioLevel()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetOutputAudioLevel()"
  },
  {
    "label": "GetOutputTotalEnergy()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetOutputTotalEnergy()"
  },
  {
    "label": "GetOutputTotalDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetOutputTotalDuration()"
  },
  {
    "label": "SendRTCPReportForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendRTCPReportForTesting(RTCPPacketType type)"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (int32_t result = rtp_rtcp_ ->)",
    "insertText": "SendRTCP(type)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(result == 0)"
  }
]