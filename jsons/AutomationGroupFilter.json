[
  {
    "label": "FAutomationGroupFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationGroupFilter"
  },
  {
    "label": "IAutomationReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationReport"
  },
  {
    "label": "FAutomationGroupFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IAutomationReport . h \" # include \" Misc / IFilter . h \" # include \" AutomationControllerSettings . h \" class FAutomationGroupFilter : public IFilter<const TSharedPtr<class IAutomationReport>&> { public :)",
    "insertText": "FAutomationGroupFilter()"
  },
  {
    "label": "FAutomationGroupFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationGroupFilter(const TArray<FAutomatedTestFilter>& InFilters) : Filters(InFilters)"
  },
  {
    "label": "FAutomationGroupFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationGroupFilter(const FAutomatedTestFilter& InFilter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Filters .)",
    "insertText": "Add(InFilter)"
  },
  {
    "label": "SetFilters()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetFilters(const TArray<FAutomatedTestFilter>& InFilters)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (Filters = InFilters ; ChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "SetTagFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTagFilter(const TArray < FAutomatedTestTagFilter>& InFilters)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DECLARE_DERIVED_EVENT(FAutomationGroupFilter, IFilter< const TSharedPtr< class IAutomationReport >& >::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool NameFilterPassing = Filters .)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NameFilterPassing = true ; break ; } })",
    "insertText": "for(const FAutomatedTestTagFilter& TagFilter : TagFilters)"
  }
]