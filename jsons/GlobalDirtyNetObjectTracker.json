[
  {
    "label": "FNetCoreModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetCoreModule"
  },
  {
    "label": "FGlobalDirtyNetObjectTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDirtyNetObjectTracker"
  },
  {
    "label": "FPollHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPollHandle"
  },
  {
    "label": "FPimpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPimpl"
  },
  {
    "label": "MarkNetObjectStateDirty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / NetBitArray . h \" # include \" Net / Core / NetHandle / NetHandle . h \" # include \" Containers / ContainersFwd . h \" class FNetCoreModule ; namespace UE::Net { void)",
    "insertText": "MarkNetObjectStateDirty(FNetHandle NetHandle)"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (class FGlobalDirtyNetObjectTracker { public : struct FPollHandle { public :)",
    "insertText": "FPollHandle()"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollHandle(FPollHandle&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPollHandle&)",
    "insertText": "operator(FPollHandle&&)"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPollHandle(const FPollHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPollHandle&)",
    "insertText": "operator(const FPollHandle&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (private : FGlobalDirtyNetObjectTracker ; enum : uint32 { InvalidIndex = ~ 0 U,} ;)",
    "insertText": "FPollHandle(uint32 InIndex)"
  },
  {
    "label": "MarkNetObjectStateDirty()",
    "kind": "Method",
    "detail": "Function (uint32 Index = InvalidIndex ; } ; public : void)",
    "insertText": "MarkNetObjectStateDirty(FNetHandle)"
  },
  {
    "label": "CreatePoller()",
    "kind": "Method",
    "detail": "Function (FPollHandle)",
    "insertText": "CreatePoller()"
  },
  {
    "label": "GetDirtyNetObjects()",
    "kind": "Method",
    "detail": "Function (const TSet<FNetHandle>&)",
    "insertText": "GetDirtyNetObjects(const FPollHandle& Handle)"
  },
  {
    "label": "LockDirtyListUntilReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockDirtyListUntilReset(const FPollHandle& Handle)"
  },
  {
    "label": "ResetDirtyNetObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDirtyNetObjects(const FPollHandle&)"
  },
  {
    "label": "ResetDirtyNetObjectsIfSinglePoller()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetDirtyNetObjectsIfSinglePoller(const FPollHandle&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : FNetCoreModule ; void)",
    "insertText": "Init()"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "DestroyPoller()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DestroyPoller(uint32 HandleIndex)"
  },
  {
    "label": "MarkNetObjectStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNetObjectStateDirty(NetHandle)"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (} FGlobalDirtyNetObjectTracker::)",
    "insertText": "FPollHandle(uint32 InIndex) : Index(InIndex)"
  },
  {
    "label": "FPollHandle()",
    "kind": "Method",
    "detail": "Function (} FGlobalDirtyNetObjectTracker::)",
    "insertText": "FPollHandle(FPollHandle&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Index = Other . Index ; Other . Index = InvalidIndex ; } FGlobalDirtyNetObjectTracker::FPollHandle& FGlobalDirtyNetObjectTracker::)",
    "insertText": "operator(FPollHandle&& Other)"
  },
  {
    "label": "DestroyPoller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPoller(Index)"
  }
]