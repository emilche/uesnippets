[
  {
    "label": "pruneL()",
    "kind": "Method",
    "detail": "Function (# ifndef SPARSELU_PRUNEL_H # define SPARSELU_PRUNEL_H namespace Eigen { namespace internal { template<Scalar,StorageIndex> void SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "pruneL(const Index jcol, const IndexVector& perm_r, const Index pivrow, const Index nseg, const IndexVector& segrep, BlockIndexVector repfnz, IndexVector& xprune, GlobalLU_t& glu)"
  },
  {
    "label": "supno()",
    "kind": "Method",
    "detail": "Function (Index jsupno = glu .)",
    "insertText": "supno(jcol)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i,irep,irep1 ; bool movnum,do_prune = false ; Index kmin = 0,kmax = 0,minloc,maxloc,krow ;)",
    "insertText": "for(i = 0; i < nseg; i++)"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (irep =)",
    "insertText": "segrep(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (irep1 = irep + 1 ; do_prune = false ;)",
    "insertText": "if(repfnz(irep) == emptyIdxLU)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (kmin = glu .)",
    "insertText": "xlsub(irep)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (kmax = glu .)",
    "insertText": "xlsub(irep1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (movnum = false ;)",
    "insertText": "if(irep == glu.xsup(glu.supno(irep)))"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (minloc = glu .)",
    "insertText": "xlusup(irep) + ( kmin - glu.xlsub(irep))"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (maxloc = glu .)",
    "insertText": "xlusup(irep) + ( kmax - glu.xlsub(irep))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(glu.lusup(minloc), glu.lusup(maxloc))"
  },
  {
    "label": "xprune()",
    "kind": "Method",
    "detail": "Function (} kmin + + ; kmax - - ; } })",
    "insertText": "xprune(irep) = StorageIndex(kmin)"
  }
]