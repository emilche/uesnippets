[
  {
    "label": "rfft_complex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rfft_complex"
  },
  {
    "label": "rfmerge3()",
    "kind": "Method",
    "detail": "Function (# ifndef RADFFT_H # define RADFFT_H # include \" egttypes . h \" # ifdef __RADCONSOLE__ # define RADFFT_ALIGN 3 2 # define RADFFT_AVX # else # define RADFFT_ALIGN 1 6 # endif # ifdef WRAP_PUBLICS # define)",
    "insertText": "rfmerge3(name,add) name##add #define rfmerge2(name,add) rfmerge3(name,add) #define rfmerge(name) rfmerge2(name,WRAP_PUBLICS) #define radfft_init rfmerge(radfft_init) #define radfft_cfft rfmerge(radfft_cfft) #define radfft_cifft rfmerge(radfft_cifft) #define radfft_rfft rfmerge(radfft_rfft) #define radfft_rifft rfmerge(radfft_rifft) #define radfft_dct rfmerge(radfft_dct) #define radfft_idct rfmerge(radfft_idct) #define radfft_idct_to_S16 rfmerge(radfft_idct_to_S16) #define radfft_idct_to_S16_stereo_interleave rfmerge(radfft_idct_to_S16_stereo_interleave)"
  },
  {
    "label": "radfft_init()",
    "kind": "Method",
    "detail": "Function (F32 re ; F32 im ; } rfft_complex ; RADDEFFUNC void RADLINK)",
    "insertText": "radfft_init()"
  },
  {
    "label": "radfft_cfft()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_cfft(rfft_complex out[], rfft_complex const in[], UINTa N)"
  },
  {
    "label": "radfft_cifft()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_cifft(rfft_complex out[], rfft_complex const in[], UINTa N)"
  },
  {
    "label": "radfft_rfft()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_rfft(rfft_complex out[], F32 const in[], UINTa N)"
  },
  {
    "label": "radfft_rifft()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_rifft(F32 out[], rfft_complex in[], UINTa N)"
  },
  {
    "label": "radfft_dct()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_dct(F32 out[], F32 in[], UINTa N)"
  },
  {
    "label": "radfft_idct()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_idct(F32 out[], F32 in[], UINTa N)"
  },
  {
    "label": "radfft_idct_to_S16()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_idct_to_S16(S16 outs16[], F32 scale, F32 tmp[], F32 in[], UINTa N)"
  },
  {
    "label": "radfft_idct_to_S16_stereo_interleave()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "radfft_idct_to_S16_stereo_interleave(S16 outs16[], S16 left[], F32 scale, F32 tmp[], F32 in[], UINTa N)"
  }
]