[
  {
    "label": "aggregator_operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregator_operation"
  },
  {
    "label": "aggregator_ext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregator_ext"
  },
  {
    "label": "aggregator_operation_status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "aggregator_operation_status"
  },
  {
    "label": "basic_operation_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_operation_base"
  },
  {
    "label": "basic_handler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_handler"
  },
  {
    "label": "basic_operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_operation"
  },
  {
    "label": "aggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "aggregator"
  },
  {
    "label": "aggregator_operation()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__aggregator_H # define __TBB__aggregator_H # if ! TBB_PREVIEW_AGGREGATOR # error Set TBB_PREVIEW_AGGREGATOR before including aggregator . h # endif # include \" atomic . h \" # include \" tbb_profiling . h \" namespace tbb { namespace interface6 { using namespace tbb::internal ; class aggregator_operation { template<handler_type> class aggregator_ext ; uintptr_t status ; aggregator_operation* my_next ; public : enum aggregator_operation_status { agg_waiting = 0,agg_finished } ;)",
    "insertText": "aggregator_operation() : status(agg_waiting), my_next(NULL)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "start()"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &status)"
  },
  {
    "label": "finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "finish()"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(status, uintptr_t(agg_finished))"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} aggregator_operation*)",
    "insertText": "next()"
  },
  {
    "label": "set_next()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_next(aggregator_operation* n)"
  },
  {
    "label": "itt_hide_store_word()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_hide_store_word(my_next, n)"
  },
  {
    "label": "apply_body()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { class basic_operation_base : public aggregator_operation { class basic_handler ; void)",
    "insertText": "apply_body()"
  },
  {
    "label": "basic_operation_base()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "basic_operation_base() : aggregator_operation()"
  },
  {
    "label": "basic_operation_base()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "basic_operation_base()"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body()"
  },
  {
    "label": "basic_operation()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "basic_operation(const Body& b) : basic_operation_base(), my_body(b)"
  },
  {
    "label": "basic_handler()",
    "kind": "Method",
    "detail": "Function (} } ; class basic_handler { public :)",
    "insertText": "basic_handler()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(aggregator_operation* op_list)"
  },
  {
    "label": "basic_operation_base()",
    "kind": "Method",
    "detail": "Function (basic_operation_base& request = static_cast<)",
    "insertText": "basic_operation_base(*op_list)"
  },
  {
    "label": "aggregator_ext()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<handler_type> class aggregator_ext : tbb::internal::no_copy { public :)",
    "insertText": "aggregator_ext(const handler_type& h) : handler_busy(0), handle_operations(h)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (mailbox = NULL ; } void)",
    "insertText": "process(aggregator_operation *op)"
  },
  {
    "label": "execute_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "execute_impl(*op)"
  },
  {
    "label": "execute_impl()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "execute_impl(aggregator_operation& op)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (aggregator_operation* res ;)",
    "insertText": "call_itt_notify(releasing, &(op.status))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &mailbox)"
  },
  {
    "label": "start_handle_operations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_handle_operations()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(op.status, NULL)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "call_itt_notify(prepare, &(op.status))"
  },
  {
    "label": "spin_wait_while_eq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spin_wait_while_eq(op.status, uintptr_t(aggregator_operation::agg_waiting))"
  },
  {
    "label": "itt_load_word_with_acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_load_word_with_acquire(op.status)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (aggregator_operation* pending_operations ;)",
    "insertText": "call_itt_notify(prepare, &handler_busy)"
  },
  {
    "label": "spin_wait_until_eq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spin_wait_until_eq(handler_busy, uintptr_t(0))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &handler_busy)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(handler_busy, uintptr_t(1))"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(releasing, &mailbox)"
  },
  {
    "label": "fetch_and_store()",
    "kind": "Method",
    "detail": "Function (pending_operations = mailbox .)",
    "insertText": "fetch_and_store(NULL)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handle_operations(pending_operations)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(handler_busy, uintptr_t(0))"
  },
  {
    "label": "aggregator()",
    "kind": "Method",
    "detail": "Function (} } ; class aggregator : private aggregator_ext<internal::basic_handler> { public :)",
    "insertText": "aggregator() : aggregator_ext<internal::basic_handler>(internal::basic_handler())"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} template<Body> void)",
    "insertText": "execute(const Body& b)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (internal::basic_operation<Body>)",
    "insertText": "op(b)"
  },
  {
    "label": "execute_impl()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "execute_impl(op)"
  }
]