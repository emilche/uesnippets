[
  {
    "label": "FWebJSScripting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebJSScripting"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FWebJSParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebJSParam"
  },
  {
    "label": "IStructWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IStructWrapper"
  },
  {
    "label": "FStructWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructWrapper"
  },
  {
    "label": "FWebJSCallbackBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebJSCallbackBase"
  },
  {
    "label": "FWebJSFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebJSFunction"
  },
  {
    "label": "FWebJSResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebJSResponse"
  },
  {
    "label": "IStructWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Misc / Guid . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsPointer . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" WebJSFunction . generated . h \" class FWebJSScripting ; class UObject ; class UStruct ; struct FWebJSParam { struct IStructWrapper { ~)",
    "insertText": "IStructWrapper()"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (} ; UStruct*)",
    "insertText": "GetTypeInfo()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetData()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (IStructWrapper*)",
    "insertText": "Clone()"
  },
  {
    "label": "FStructWrapper()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct FStructWrapper : public IStructWrapper { T StructValue ;)",
    "insertText": "FStructWrapper(const T& InValue) : StructValue(InValue)"
  },
  {
    "label": "FStructWrapper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStructWrapper()"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FWebJSParam() : Tag(PTYPE_NULL)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(bool Value) : Tag(PTYPE_BOOL), BoolValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(int8 Value) : Tag(PTYPE_INT), IntValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(int16 Value) : Tag(PTYPE_INT), IntValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(int32 Value) : Tag(PTYPE_INT), IntValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(uint8 Value) : Tag(PTYPE_INT), IntValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(uint16 Value) : Tag(PTYPE_INT), IntValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(uint32 Value) : Tag(PTYPE_DOUBLE), DoubleValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(int64 Value) : Tag(PTYPE_DOUBLE), DoubleValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(uint64 Value) : Tag(PTYPE_DOUBLE), DoubleValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(double Value) : Tag(PTYPE_DOUBLE), DoubleValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(float Value) : Tag(PTYPE_DOUBLE), DoubleValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(const FString& Value) : Tag(PTYPE_STRING), StringValue(new FString(Value))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(const FText& Value) : Tag(PTYPE_STRING), StringValue(new FString(Value.ToString()))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(const FName& Value) : Tag(PTYPE_STRING), StringValue(new FString(Value.ToString()))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(const TCHAR* Value) : Tag(PTYPE_STRING), StringValue(new FString(Value))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSParam(UObject* Value) : Tag(PTYPE_OBJECT), ObjectValue(Value)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FWebJSParam(const T& Value, typename TEnableIf<!TIsPointer<T>::Value, UStruct>::Type* InTypeInfo=T::StaticStruct()) : Tag(PTYPE_STRUCT) , StructValue(new FStructWrapper<T>(Value))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FWebJSParam(const TArray<T>& Value) : Tag(PTYPE_ARRAY)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (ArrayValue = new TArray<)",
    "insertText": "FWebJSParam()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ArrayValue ->)",
    "insertText": "Reserve(Value.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ArrayValue ->)",
    "insertText": "Add(FWebJSParam(Item))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} } template<T>)",
    "insertText": "FWebJSParam(const TMap<FString, T>& Value) : Tag(PTYPE_MAP)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MapValue ->)",
    "insertText": "Add(Pair.Key, FWebJSParam(Pair.Value))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} } template<K,T>)",
    "insertText": "FWebJSParam(const TMap<K, T>& Value) : Tag(PTYPE_MAP)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MapValue ->)",
    "insertText": "Add(Pair.Key.ToString(), FWebJSParam(Pair.Value))"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FWebJSParam(const FWebJSParam& Other)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWebJSParam(FWebJSParam&& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum { PTYPE_NULL,PTYPE_BOOL,PTYPE_INT,PTYPE_DOUBLE,PTYPE_STRING,PTYPE_OBJECT,PTYPE_STRUCT,PTYPE_ARRAY,PTYPE_MAP } Tag ; union { bool BoolValue ; double DoubleValue ; int32 IntValue ; UObject* ObjectValue ; const FString* StringValue ; IStructWrapper* StructValue ; TArray<FWebJSParam>* ArrayValue ; TMap<FString,FWebJSParam>* MapValue ; } ; } ; class FWebJSScripting ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWebJSCallbackBase()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FWebJSCallbackBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FWebJSCallbackBase(TSharedPtr<FWebJSScripting> InScripting, const FGuid& InCallbackId) : ScriptingPtr(InScripting) , CallbackId(InCallbackId)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Invoke(int32 ArgCount, FWebJSParam Arguments[], bool bIsError = false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWebJSFunction() : FWebJSCallbackBase()"
  },
  {
    "label": "FWebJSFunction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSFunction(TSharedPtr<FWebJSScripting> InScripting, const FGuid& InFunctionId) : FWebJSCallbackBase(InScripting, InFunctionId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> void)",
    "insertText": "operator()(ArgTypes... Args)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (FWebJSParam ArgArray [)",
    "insertText": "sizeof(Args)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWebJSParam(Args)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(sizeof...(Args), ArgArray)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWebJSResponse() : FWebJSCallbackBase()"
  },
  {
    "label": "FWebJSResponse()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWebJSResponse(TSharedPtr<FWebJSScripting> InScripting, const FGuid& InCallbackId) : FWebJSCallbackBase(InScripting, InCallbackId)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Success()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(0, nullptr, false)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Success(T Arg)"
  },
  {
    "label": "FWebJSParam()",
    "kind": "Method",
    "detail": "Function (FWebJSParam ArgArray [ 1 ] = {)",
    "insertText": "FWebJSParam(Arg)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(1, ArgArray, false)"
  },
  {
    "label": "Failure()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Failure(T Arg)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(1, ArgArray, true)"
  }
]