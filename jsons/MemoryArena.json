[
  {
    "label": "FHeapArena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeapArena"
  },
  {
    "label": "FMemoryArena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryArena"
  },
  {
    "label": "FArenaPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArenaPointer"
  },
  {
    "label": "TArenaPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArenaPointer"
  },
  {
    "label": "FMallocArena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocArena"
  },
  {
    "label": "FAnsiArena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnsiArena"
  },
  {
    "label": "FArenaMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArenaMap"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if !)",
    "insertText": "defined(UE_RESTRICT) # if defined _MSC_VER # define UE_RESTRICT __declspec(restrict) # else # define UE_RESTRICT # endif #endif #if !defined(UE_NOALIAS) # if defined _MSC_VER # define UE_NOALIAS __declspec(noalias)"
  },
  {
    "label": "FArenaPointer()",
    "kind": "Method",
    "detail": "Function (class FMemoryArena ; class FArenaPointer { public :)",
    "insertText": "FArenaPointer()"
  },
  {
    "label": "GetArenaIndex()",
    "kind": "Method",
    "detail": "Function (enum { NoTag = 0 } ; # if PLATFORM_32BITS private : void* Ptr = 0 ; uint16 ArenaTag = 0 ; public : const uint16)",
    "insertText": "GetArenaIndex()"
  },
  {
    "label": "FArenaPointer()",
    "kind": "Method",
    "detail": "Function (Ptr = InPtr ; ArenaTag = InArenaTag ; })",
    "insertText": "FArenaPointer(void* InPtr, uint16 InArenaTag) : Ptr(InPtr), ArenaTag(InArenaTag)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetPointer()"
  },
  {
    "label": "SetPointerAndArena()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPointerAndArena(void* InPtr, uint16 InArenaTag)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TaggedPointer = reinterpret_cast<)",
    "insertText": "void(UPTRINT(InPtr) | (UPTRINT(InArenaTag) << ArenaShift))"
  },
  {
    "label": "FArenaPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FArenaPointer(void* Ptr, uint16 ArenaIndex) : TaggedPointer(reinterpret_cast<void*>(UPTRINT(Ptr) | (UPTRINT(ArenaIndex) << ArenaShift)))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; # endif operator)",
    "insertText": "bool()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free()"
  },
  {
    "label": "Arena()",
    "kind": "Method",
    "detail": "Function (FMemoryArena&)",
    "insertText": "Arena()"
  },
  {
    "label": "TArenaPointer()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class TArenaPointer : public FArenaPointer { public :)",
    "insertText": "TArenaPointer()"
  },
  {
    "label": "TArenaPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArenaPointer(T* Ptr, uint16 ArenaIndex) : FArenaPointer(reinterpret_cast<T*>(Ptr), ArenaIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TArenaPointer&)",
    "insertText": "operator(T* Rhs)"
  },
  {
    "label": "SetPointerAndArena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPointerAndArena(Rhs, NoTag)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "T()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "FMemoryArena()",
    "kind": "Method",
    "detail": "Function (} } ; class FMemoryArena { public :)",
    "insertText": "FMemoryArena()"
  },
  {
    "label": "FMemoryArena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemoryArena(const FMemoryArena&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMemoryArena&)",
    "insertText": "operator(const FMemoryArena&)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (UE_RESTRICT UE_NOALIAS void*)",
    "insertText": "Alloc(SIZE_T Size, SIZE_T Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (UE_NOALIAS void)",
    "insertText": "Free(const void* MemoryBlock)"
  },
  {
    "label": "GetBlockSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetBlockSize(const void* MemoryBlock)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "InternalAlloc()",
    "kind": "Method",
    "detail": "Function (private : void*)",
    "insertText": "InternalAlloc(SIZE_T Size, SIZE_T Alignment)"
  },
  {
    "label": "InternalFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFree(const void* MemoryBlock, SIZE_T MemoryBlockSize)"
  },
  {
    "label": "InternalGetBlockSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "InternalGetBlockSize(const void* MemoryBlock)"
  },
  {
    "label": "InternalGetDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "InternalGetDebugName()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (enum { FlagNoFree = 1<<0 } ; uint16 ArenaFlags = 0 ; public : uint16 ArenaId = ~)",
    "insertText": "uint16(0)"
  },
  {
    "label": "ArenaRealloc()",
    "kind": "Method",
    "detail": "Function (} FArenaPointer)",
    "insertText": "ArenaRealloc(FArenaPointer InPtr, SIZE_T OldSize, SIZE_T NewSize, SIZE_T Alignment)"
  },
  {
    "label": "ArenaRealloc()",
    "kind": "Method",
    "detail": "Function (FArenaPointer)",
    "insertText": "ArenaRealloc(FMemoryArena* Arena, void* InPtr, SIZE_T OldSize, SIZE_T NewSize, SIZE_T Alignment)"
  },
  {
    "label": "FHeapArena()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_HEAPARENA class FHeapArena : public FMemoryArena { public :)",
    "insertText": "FHeapArena()"
  },
  {
    "label": "FMallocArena()",
    "kind": "Method",
    "detail": "Function (void* HeapHandle = nullptr ; } ; # endif class FMallocArena final : public FMemoryArena { public :)",
    "insertText": "FMallocArena()"
  },
  {
    "label": "FAnsiArena()",
    "kind": "Method",
    "detail": "Function (} ; class FAnsiArena final : public FMemoryArena { public :)",
    "insertText": "FAnsiArena()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; # if UE_WITH_ARENAMAP class FArenaMap { public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetRangeToArena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRangeToArena(const void* VaBase, SIZE_T VaSize, FMemoryArena* ArenaPtr)"
  },
  {
    "label": "ClearRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRange(const void* VaBase, SIZE_T VaSize)"
  },
  {
    "label": "MapPtrToArena()",
    "kind": "Method",
    "detail": "Function (FMemoryArena*)",
    "insertText": "MapPtrToArena(const void* VaBase)"
  }
]