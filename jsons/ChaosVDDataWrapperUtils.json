[
  {
    "label": "FChaosVDAABBTreeDataWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDAABBTreeDataWrapper"
  },
  {
    "label": "FChaosVDCharacterGroundConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDCharacterGroundConstraint"
  },
  {
    "label": "FChaosVDJointConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDJointConstraint"
  },
  {
    "label": "FCharacterGroundConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintHandle"
  },
  {
    "label": "FPBDJointConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraintHandle"
  },
  {
    "label": "FChaosVDSerializableNameTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDSerializableNameTable"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionConstraintMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintMaterial"
  },
  {
    "label": "FChaosVisualDebuggerTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVisualDebuggerTrace"
  },
  {
    "label": "FChaosVDCollisionMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDCollisionMaterial"
  },
  {
    "label": "FChaosVDConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDConstraint"
  },
  {
    "label": "FChaosVDParticlePairMidPhase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDParticlePairMidPhase"
  },
  {
    "label": "FChaosVDParticleDataWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDParticleDataWrapper"
  },
  {
    "label": "FChaosVDDataWrapperUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDDataWrapperUtils"
  },
  {
    "label": "TransformStaticArray()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # if WITH_CHAOS_VISUAL_DEBUGGER # include \" Chaos / AABBTree . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / ShapeInstanceFwd . h \" # include \" DataWrappers / ChaosVDCollisionDataWrappers . h \" # include \" DataWrappers / ChaosVDAccelerationStructureDataWrappers . h \" struct FChaosVDAABBTreeDataWrapper ; struct FChaosVDCharacterGroundConstraint ; struct FChaosVDJointConstraint ; namespace Chaos { class FCharacterGroundConstraintHandle ; class FPBDJointConstraintHandle ; namespace VisualDebugger { class FChaosVDSerializableNameTable ; } class FParticlePairMidPhase ; class FPBDCollisionConstraint ; class FPBDCollisionConstraintMaterial ; } class FChaosVisualDebuggerTrace ; struct FChaosVDCollisionMaterial ; struct FChaosVDConstraint ; struct FChaosVDParticlePairMidPhase ; struct FChaosVDParticleDataWrapper ; namespace Chaos::VisualDebugger::Utils { template<InType,OutType,int32 Size,TransformT> void)",
    "insertText": "TransformStaticArray(const InType (&In)[Size], OutType (&Out)[Size], TransformT Trans)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (Out [ Index ] =)",
    "insertText": "Invoke(Trans, In[Index])"
  },
  {
    "label": "CopyStaticArray()",
    "kind": "Method",
    "detail": "Function (} } template<InType,OutType,int32 Size> void)",
    "insertText": "CopyStaticArray(const InType (&In)[Size], OutType (&Out)[Size])"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Out, In, Size * sizeof(InType))"
  },
  {
    "label": "ConvertToFTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "ConvertToFTransform(const FRigidTransform3& InChaosTransform)"
  },
  {
    "label": "CopyManifoldPointResultsToDataWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyManifoldPointResultsToDataWrapper(const Chaos::FManifoldPointResult& InCopyFrom, FChaosVDManifoldPoint& OutCopyTo)"
  },
  {
    "label": "CopyCollisionMaterialToDataWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCollisionMaterialToDataWrapper(const Chaos::FPBDCollisionConstraintMaterial& InCopyFrom, FChaosVDCollisionMaterial& OutCopyTo)"
  },
  {
    "label": "BuildParticleDataWrapperFromParticle()",
    "kind": "Method",
    "detail": "Function (FChaosVDParticleDataWrapper)",
    "insertText": "BuildParticleDataWrapperFromParticle(const Chaos::FGeometryParticleHandle* ParticleHandlePtr, const TSharedRef<Chaos::VisualDebugger::FChaosVDSerializableNameTable>& InNameTableInstance)"
  },
  {
    "label": "BuildConstraintDataWrapperFromConstraint()",
    "kind": "Method",
    "detail": "Function (FChaosVDConstraint)",
    "insertText": "BuildConstraintDataWrapperFromConstraint(const Chaos::FPBDCollisionConstraint& InConstraint)"
  },
  {
    "label": "BuildMidPhaseDataWrapperFromMidPhase()",
    "kind": "Method",
    "detail": "Function (FChaosVDParticlePairMidPhase)",
    "insertText": "BuildMidPhaseDataWrapperFromMidPhase(const Chaos::FParticlePairMidPhase& InMidPhase)"
  },
  {
    "label": "BuildJointDataWrapper()",
    "kind": "Method",
    "detail": "Function (FChaosVDJointConstraint)",
    "insertText": "BuildJointDataWrapper(const Chaos::FPBDJointConstraintHandle* ConstaintHanlde)"
  },
  {
    "label": "BuildCharacterGroundConstraintDataWrapper()",
    "kind": "Method",
    "detail": "Function (FChaosVDCharacterGroundConstraint)",
    "insertText": "BuildCharacterGroundConstraintDataWrapper(const Chaos::FCharacterGroundConstraintHandle* ConstaintHanlde)"
  },
  {
    "label": "ConvertToFVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ConvertToFVector(const Chaos::FVec3f& VectorRef)"
  },
  {
    "label": "CopyShapeDataToWrapper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyShapeDataToWrapper(const Chaos::FShapeInstancePtr& ShapeDataPtr, FChaosVDShapeCollisionData& OutCopyTo)"
  },
  {
    "label": "BuildDataWrapperFromAABBStructure()",
    "kind": "Method",
    "detail": "Function (template<LeafType> void)",
    "insertText": "BuildDataWrapperFromAABBStructure(const Chaos::TAABBTree<Chaos::FAccelerationStructureHandle, LeafType>& AABBTree, FChaosVDAABBTreeDataWrapper& OutAABBTreeWrapper)"
  },
  {
    "label": "ConvertToFBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ConvertToFBox(const Chaos::TAABB<Chaos::FReal, 3>& Bounds)"
  },
  {
    "label": "ConvertedBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ConvertedBox(Bounds.Min(), Bounds.Max())"
  },
  {
    "label": "AddTreeLeaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTreeLeaves(const TConstArrayView<Chaos::TAABBTreeLeafArray<Chaos::FAccelerationStructureHandle>>& LeavesContainer, FChaosVDAABBTreeDataWrapper& InOutAABBTreeWrapper)"
  },
  {
    "label": "AddTreeLeaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTreeLeaves(const TConstArrayView<Chaos::TBoundingVolume<Chaos::FAccelerationStructureHandle>>& LeavesContainer, FChaosVDAABBTreeDataWrapper& InOutAABBTreeWrapper)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (using namespace Chaos ; OutAABBTreeWrapper . MaxTreeDepth = AABBTree . MaxTreeDepth ; OutAABBTreeWrapper . MaxChildrenInLeaf = AABBTree . MaxTreeDepth ; OutAABBTreeWrapper . MaxPayloadBounds = AABBTree . MaxPayloadBounds ; OutAABBTreeWrapper . RootNodeIndex = AABBTree . RootNode ; OutAABBTreeWrapper . bDynamicTree = AABBTree . bDynamicTree ; const int32 NodesToCopyNum = AABBTree . Nodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutAABBTreeWrapper . Nodes .)",
    "insertText": "Reserve(NodesToCopyNum)"
  },
  {
    "label": "EChaosVDAccelerationStructureType()",
    "kind": "Method",
    "detail": "Function (OutAABBTreeWrapper . NodesNum = NodesToCopyNum ; OutAABBTreeWrapper . Type = static_cast<)",
    "insertText": "EChaosVDAccelerationStructureType(AABBTree.StaticType)"
  },
  {
    "label": "TransformStaticArray()",
    "kind": "Method",
    "detail": "Function (FChaosVDAABBTreeNodeDataWrapper CVDNode ; CVDNode . bLeaf = Node . bLeaf ; CVDNode . bDirtyNode = Node . bDirtyNode ; VisualDebugger::)",
    "insertText": "TransformStaticArray(Node.ChildrenBounds, CVDNode.ChildrenBounds, &FChaosVDDataWrapperUtils::ConvertToFBox)"
  },
  {
    "label": "CopyStaticArray()",
    "kind": "Method",
    "detail": "Function (VisualDebugger::)",
    "insertText": "CopyStaticArray(Node.ChildrenNodes, CVDNode.ChildrenNodes)"
  },
  {
    "label": "MarkAsValid()",
    "kind": "Method",
    "detail": "Function (CVDNode . ParentNode = Node . ParentNode ; CVDNode .)",
    "insertText": "MarkAsValid()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutAABBTreeWrapper . Nodes .)",
    "insertText": "Emplace(CVDNode)"
  },
  {
    "label": "AddTreeLeaves()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AddTreeLeaves(MakeArrayView(AABBTree.Leaves.GetData(), AABBTree.Leaves.Num()), OutAABBTreeWrapper)"
  }
]