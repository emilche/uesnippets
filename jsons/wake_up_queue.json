[
  {
    "label": "EnqueueOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnqueueOrder"
  },
  {
    "label": "AssociatedThreadId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssociatedThreadId"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "TaskQueueImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MockWakeUpQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockWakeUpQueue"
  },
  {
    "label": "ScheduledWakeUp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScheduledWakeUp"
  },
  {
    "label": "WakeUpQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_WAKE_UP_QUEUE_H_ # define BASE_TASK_SEQUENCE_MANAGER_WAKE_UP_QUEUE_H_ # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / common / lazy_now . h \" # include \" base / task / sequence_manager / task_queue_impl . h \" # include \" base / time / time . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { class EnqueueOrder ; namespace internal { class AssociatedThreadId ; class SequenceManagerImpl ; class TaskQueueImpl ; class BASE_EXPORT WakeUpQueue { public :)",
    "insertText": "WakeUpQueue(const WakeUpQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WakeUpQueue&)",
    "insertText": "operator(const WakeUpQueue&)"
  },
  {
    "label": "WakeUpQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WakeUpQueue()"
  },
  {
    "label": "GetNextDelayedWakeUp()",
    "kind": "Method",
    "detail": "Function (absl::optional<WakeUp>)",
    "insertText": "GetNextDelayedWakeUp()"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "AsValue(TimeTicks now)"
  },
  {
    "label": "has_pending_high_resolution_tasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_pending_high_resolution_tasks()"
  },
  {
    "label": "MoveReadyDelayedTasksToWorkQueues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveReadyDelayedTasksToWorkQueues(LazyNow* lazy_now, EnqueueOrder enqueue_order)"
  },
  {
    "label": "SetNextWakeUpForQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextWakeUpForQueue(internal::TaskQueueImpl* queue, LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "UnregisterQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterQueue(internal::TaskQueueImpl* queue)"
  },
  {
    "label": "RemoveAllCanceledDelayedTasksFromFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCanceledDelayedTasksFromFront(LazyNow* lazy_now)"
  },
  {
    "label": "WakeUpQueue()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "WakeUpQueue(scoped_refptr<const internal::AssociatedThreadId> associated_thread)"
  },
  {
    "label": "OnNextWakeUpChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNextWakeUpChanged(LazyNow* lazy_now, absl::optional<WakeUp> next_wake_up)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : class MockWakeUpQueue ; struct ScheduledWakeUp { WakeUp wake_up ; internal::TaskQueueImpl* queue ; bool)",
    "insertText": "operator(const ScheduledWakeUp& other)"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeapHandle(HeapHandle handle)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(handle.IsValid())"
  },
  {
    "label": "set_heap_handle()",
    "kind": "Method",
    "detail": "Function (queue ->)",
    "insertText": "set_heap_handle(handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(queue->heap_handle().IsValid())"
  },
  {
    "label": "set_heap_handle()",
    "kind": "Method",
    "detail": "Function (queue ->)",
    "insertText": "set_heap_handle(HeapHandle())"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "DefaultWakeUpQueue()",
    "kind": "Method",
    "detail": "Function (} } ; IntrusiveHeap<ScheduledWakeUp,std::greater<>> wake_up_queue_ ; int pending_high_res_wake_up_count_ = 0 ; const scoped_refptr<const internal::AssociatedThreadId> associated_thread_ ; } ; class BASE_EXPORT DefaultWakeUpQueue : public WakeUpQueue { public :)",
    "insertText": "DefaultWakeUpQueue(scoped_refptr<internal::AssociatedThreadId> associated_thread, internal::SequenceManagerImpl* sequence_manager)"
  },
  {
    "label": "DefaultWakeUpQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultWakeUpQueue()"
  },
  {
    "label": "OnNextWakeUpChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnNextWakeUpChanged(LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "NonWakingWakeUpQueue()",
    "kind": "Method",
    "detail": "Function (raw_ptr<internal::SequenceManagerImpl> sequence_manager_ ; } ; class BASE_EXPORT NonWakingWakeUpQueue : public WakeUpQueue { public :)",
    "insertText": "NonWakingWakeUpQueue(scoped_refptr<internal::AssociatedThreadId> associated_thread)"
  },
  {
    "label": "NonWakingWakeUpQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NonWakingWakeUpQueue()"
  }
]