[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AutoPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoPtr"
  },
  {
    "label": "RefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCounted"
  },
  {
    "label": "BaseClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseClass"
  },
  {
    "label": "Pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pointer"
  },
  {
    "label": "OtherBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherBase"
  },
  {
    "label": "NV_FORBID_COPY()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_CORE_PTR_H # define NV_CORE_PTR_H # include<nvcore / nvcore . h> # include<nvcore / Debug . h> # include<stdio . h> namespace nv { template<class T> class AutoPtr {)",
    "insertText": "NV_FORBID_COPY(AutoPtr)"
  },
  {
    "label": "NV_FORBID_HEAPALLOC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_FORBID_HEAPALLOC()"
  },
  {
    "label": "AutoPtr()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AutoPtr() : m_ptr(NULL)"
  },
  {
    "label": "AutoPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoPtr(T * p ) : m_ptr(p)"
  },
  {
    "label": "AutoPtr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AutoPtr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete m_ptr ; m_ptr = NULL ; } void)",
    "insertText": "operator(T * p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete m_ptr ; m_ptr = p ; } } T*)",
    "insertText": "operator()"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(m_ptr != NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T* tmp = m_ptr ; m_ptr = NULL ; return tmp ; } bool)",
    "insertText": "operator(const AutoPtr<T> & ap, const T * const p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const T * const p, const AutoPtr<T> & ap)"
  },
  {
    "label": "NV_FORBID_COPY()",
    "kind": "Method",
    "detail": "Function (} private : T* m_ptr ; } ; # if 0 class RefCounted {)",
    "insertText": "NV_FORBID_COPY(RefCounted)"
  },
  {
    "label": "RefCounted()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RefCounted() : m_count(0), m_weak_proxy(NULL)"
  },
  {
    "label": "RefCounted()",
    "kind": "Method",
    "detail": "Function (s_total_obj_count + + ; } ~)",
    "insertText": "RefCounted()"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(m_count == 0)"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(s_total_obj_count > 0)"
  },
  {
    "label": "addRef()",
    "kind": "Method",
    "detail": "Function (s_total_obj_count - - ; } uint)",
    "insertText": "addRef()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (s_total_ref_count + + ; m_count + + ; return m_count ; } uint)",
    "insertText": "release()"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(m_count > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s_total_ref_count - - ; m_count - - ;)",
    "insertText": "if(m_count == 0)"
  },
  {
    "label": "releaseWeakProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseWeakProxy()"
  },
  {
    "label": "getWeakProxy()",
    "kind": "Method",
    "detail": "Function (delete this ; return 0 ; } return m_count ; } WeakProxy*)",
    "insertText": "getWeakProxy()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (m_weak_proxy = new WeakProxy ; m_weak_proxy ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "NotifyObjectDied()",
    "kind": "Method",
    "detail": "Function (m_weak_proxy ->)",
    "insertText": "NotifyObjectDied()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (m_weak_proxy ->)",
    "insertText": "Release()"
  },
  {
    "label": "refCount()",
    "kind": "Method",
    "detail": "Function (m_weak_proxy = NULL ; } } int)",
    "insertText": "refCount()"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} template<class OtherBase>)",
    "insertText": "Pointer(const Pointer<OtherBase> & tc)"
  },
  {
    "label": "BaseClass()",
    "kind": "Method",
    "detail": "Function (m_ptr = static_cast<)",
    "insertText": "BaseClass(tc.ptr())"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Pointer(const ThisType & bc)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (m_ptr = bc .)",
    "insertText": "ptr()"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Pointer(BaseClass * bc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_ptr = bc ;)",
    "insertText": "if(m_ptr)"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "Pointer()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(NULL)"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(m_ptr != NULL)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(static_cast<BaseClass *>(tc.ptr()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const ThisType & bc)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(bc.ptr())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(BaseClass * bc)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(bc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class OtherBase> bool)",
    "insertText": "operator(const Pointer<OtherBase> & other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const BaseClass * const bc)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "set(BaseClass * p)"
  }
]