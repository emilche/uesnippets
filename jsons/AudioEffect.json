[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "FAudioReverbEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioReverbEffect"
  },
  {
    "label": "FAudioRadioEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioRadioEffect"
  },
  {
    "label": "FAudioEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioEffectsManager"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Sound / AudioVolume . h \" # include \" Sound / ReverbSettings . h \" # include \" Sound / SoundMix . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" AudioEffect . generated . h \" class FAudioDevice ; class FSoundSource ; class UReverbEffect ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API FAudioReverbEffect()"
  },
  {
    "label": "FAudioReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioReverbEffect(float InRoom, float InRoomHF, float InRoomRolloffFactor, float InDecayTime, float InDecayHFRatio, float InReflections, float InReflectionsDelay, float InReverb, float InReverbDelay, float InDiffusion, float InDensity, float InAirAbsorption, bool bInBypassEarlyReflections, bool bInBypassLateReflections)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAudioReverbEffect&)",
    "insertText": "operator(class UReverbEffect* InReverbEffect)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Interpolate(const FAudioEffectParameters& InStart, const FAudioEffectParameters& InEnd)"
  },
  {
    "label": "PrintSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSettings()"
  },
  {
    "label": "FAudioEffectsManager()",
    "kind": "Method",
    "detail": "Function (} } ; class FAudioEffectsManager { public :)",
    "insertText": "FAudioEffectsManager(FAudioDevice* Device)"
  },
  {
    "label": "FAudioEffectsManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioEffectsManager(void)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(void)"
  },
  {
    "label": "SetReverbSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReverbSettings(const FReverbSettings& ReverbSettings, bool bForce = false)"
  },
  {
    "label": "SetMixSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMixSettings(USoundMix* Mix, bool bIgnorePriority = false, bool bForce = false)"
  },
  {
    "label": "ClearMixSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMixSettings()"
  },
  {
    "label": "SetReverbEffectParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReverbEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  },
  {
    "label": "SetEQEffectParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEQEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  },
  {
    "label": "SetRadioEffectParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRadioEffectParameters(const FAudioEffectParameters& InEffectParameters)"
  },
  {
    "label": "InitEffect()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "InitEffect(FSoundSource* Source)"
  },
  {
    "label": "UpdateEffect()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "UpdateEffect(class FSoundSource* Source)"
  },
  {
    "label": "DestroyEffect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyEffect(FSoundSource* Source)"
  },
  {
    "label": "VolumeToDeciBels()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "VolumeToDeciBels(float Volume)"
  },
  {
    "label": "VolumeToMilliBels()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "VolumeToMilliBels(float Volume, int32 MaxMilliBels)"
  },
  {
    "label": "ResetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInterpolation(void)"
  },
  {
    "label": "GetCurrentEQMix()",
    "kind": "Method",
    "detail": "Function (USoundMix*)",
    "insertText": "GetCurrentEQMix()"
  }
]