[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "BranchProbability",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchProbability"
  },
  {
    "label": "BlockFrequency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFrequency"
  },
  {
    "label": "BlockFrequency()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_BLOCKFREQUENCY_H # define LLVM_SUPPORT_BLOCKFREQUENCY_H # include \" llvm / Support / DataTypes . h \" namespace llvm { class raw_ostream ; class BranchProbability ; class BlockFrequency { uint64_t Frequency ; public :)",
    "insertText": "BlockFrequency(uint64_t Freq = 0) : Frequency(Freq)"
  },
  {
    "label": "getMaxFrequency()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getMaxFrequency()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const BlockFrequency)",
    "insertText": "operator(const BranchProbability &Prob)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockFrequency&)",
    "insertText": "operator(const BlockFrequency &Freq)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockFrequency&)",
    "insertText": "operator(const unsigned count)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const BlockFrequency &RHS)"
  }
]