[
  {
    "label": "FVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVertexStreamComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexStreamComponent"
  },
  {
    "label": "FVertexStreamComponent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" Containers / EnumAsByte . h \" class FVertexBuffer ; enum class EVertexStreamUsage : uint8 { Default = 0<<0,Instancing = 1<<0,Overridden = 1<<1,ManualFetch = 1<<2 } ; struct FVertexStreamComponent { const FVertexBuffer* VertexBuffer = nullptr ; uint32 StreamOffset = 0 ; uint8 Offset = 0 ; uint8 Stride = 0 ; TEnumAsByte<EVertexElementType> Type = VET_None ; EVertexStreamUsage VertexStreamUsage = EVertexStreamUsage::Default ;)",
    "insertText": "FVertexStreamComponent()"
  },
  {
    "label": "FVertexStreamComponent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexStreamComponent(const FVertexBuffer* InVertexBuffer, uint32 InOffset, uint32 InStride, EVertexElementType InType, EVertexStreamUsage Usage = EVertexStreamUsage::Default) : VertexBuffer(InVertexBuffer), StreamOffset(0), Offset((uint8)InOffset), Stride((uint8)InStride), Type(InType), VertexStreamUsage(Usage)"
  },
  {
    "label": "FVertexStreamComponent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexStreamComponent(const FVertexBuffer* InVertexBuffer, uint32 InStreamOffset, uint32 InOffset, uint32 InStride, EVertexElementType InType, EVertexStreamUsage Usage = EVertexStreamUsage::Default) : VertexBuffer(InVertexBuffer), StreamOffset(InStreamOffset), Offset((uint8)InOffset), Stride((uint8)InStride), Type(InType), VertexStreamUsage(Usage)"
  }
]