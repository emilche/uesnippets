[
  {
    "label": "ScopedRunLoopTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedRunLoopTimeout"
  },
  {
    "label": "ScopedDisableRunLoopTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDisableRunLoopTimeout"
  },
  {
    "label": "default_timeout()",
    "kind": "Method",
    "detail": "Function (ScopedRunLoopTimeout)",
    "insertText": "default_timeout(kDefaultRunTimeout)"
  },
  {
    "label": "specific_timeout()",
    "kind": "Method",
    "detail": "Function (ScopedRunLoopTimeout)",
    "insertText": "specific_timeout(kTestSpecificTimeout)"
  },
  {
    "label": "ScopedRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedRunLoopTimeout(const Location& timeout_enabled_from_here,\n                       TimeDelta timeout)"
  },
  {
    "label": "ExistsForCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExistsForCurrentThread()"
  },
  {
    "label": "SetAddGTestFailureOnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddGTestFailureOnTimeout()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ScopedRunLoopRunTimeoutTest, TimesOut)"
  },
  {
    "label": "ScopedDisableRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedDisableRunLoopTimeout()"
  }
]