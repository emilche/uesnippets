[
  {
    "label": "ScopedRunLoopTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedRunLoopTimeout"
  },
  {
    "label": "ScopedDisableRunLoopTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDisableRunLoopTimeout"
  },
  {
    "label": "FORWARD_DECLARE_TEST()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_RUN_LOOP_TIMEOUT_H_ # define BASE_TEST_SCOPED_RUN_LOOP_TIMEOUT_H_ # include<string> # include \" base / callback . h \" # include \" base / gtest_prod_util . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / run_loop . h \" # include \" base / time / time . h \" namespace content {)",
    "insertText": "FORWARD_DECLARE_TEST(ContentBrowserTest, RunTimeoutInstalled)"
  },
  {
    "label": "FORWARD_DECLARE_TEST()",
    "kind": "Method",
    "detail": "Function (} namespace base { namespace test {)",
    "insertText": "FORWARD_DECLARE_TEST(TaskEnvironmentTest, SetsDefaultRunTimeout)"
  },
  {
    "label": "ScopedRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (class ScopedRunLoopTimeout { public :)",
    "insertText": "ScopedRunLoopTimeout(const Location& timeout_enabled_from_here, TimeDelta timeout)"
  },
  {
    "label": "ScopedRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedRunLoopTimeout()"
  },
  {
    "label": "ScopedRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedRunLoopTimeout(const Location& timeout_enabled_from_here, TimeDelta timeout, RepeatingCallback<std::string()> on_timeout_log)"
  },
  {
    "label": "ScopedRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedRunLoopTimeout(const ScopedRunLoopTimeout&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedRunLoopTimeout&)",
    "insertText": "operator(const ScopedRunLoopTimeout&)"
  },
  {
    "label": "ExistsForCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExistsForCurrentThread()"
  },
  {
    "label": "SetAddGTestFailureOnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddGTestFailureOnTimeout()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ScopedRunLoopRunTimeoutTest, TimesOut)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ScopedRunLoopRunTimeoutTest, RunTasksUntilTimeout)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TaskEnvironmentTest, SetsDefaultRunTimeout)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(content::ContentBrowserTest, RunTimeoutInstalled)"
  },
  {
    "label": "GetTimeoutForCurrentThread()",
    "kind": "Method",
    "detail": "Function (const RunLoop::RunLoopTimeout*)",
    "insertText": "GetTimeoutForCurrentThread()"
  },
  {
    "label": "ScopedDisableRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (const RunLoop::RunLoopTimeout* const nested_timeout_ ; RunLoop::RunLoopTimeout run_timeout_ ; } ; class ScopedDisableRunLoopTimeout { public :)",
    "insertText": "ScopedDisableRunLoopTimeout()"
  },
  {
    "label": "ScopedDisableRunLoopTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDisableRunLoopTimeout(const ScopedDisableRunLoopTimeout&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDisableRunLoopTimeout&)",
    "insertText": "operator(const ScopedDisableRunLoopTimeout&)"
  }
]