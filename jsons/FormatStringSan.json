[
  {
    "label": "TEnumAsByte",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnumAsByte"
  },
  {
    "label": "EFormatStringSanStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFormatStringSanStatus"
  },
  {
    "label": "TAtArgPos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAtArgPos"
  },
  {
    "label": "FResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResult"
  },
  {
    "label": "TPresentErr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPresentErr"
  },
  {
    "label": "TValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TValue"
  },
  {
    "label": "TErrMsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TErrMsg"
  },
  {
    "label": "TIsEnumAsByte",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsEnumAsByte"
  },
  {
    "label": "TFmtArgTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFmtArgTypes"
  },
  {
    "label": "TCheckFormatString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCheckFormatString"
  },
  {
    "label": "UE_CHECK_FORMAT_STRING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" CoreTypes . h \" # define)",
    "insertText": "UE_CHECK_FORMAT_STRING(Fmt, ...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ typedef::UE::Core::Private::FormatStringSan::TCheckFormatString<)",
    "insertText": "decltype(::UE::Core::Private::FormatStringSan::GetFmtArgTypes(__VA_ARGS__))"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (\\::UE::Core::Private::FormatStringSan::FResult UE_FMT_STR_Result =)",
    "insertText": "Check(false, 0, Fmt)"
  },
  {
    "label": "UE_FMT_STR_Status()",
    "kind": "Method",
    "detail": "Function (\\ typedef::UE::Core::Private::FormatStringSan::TPresentErr<UE_FMT_STR_Result . Status> UE_FMT_STR_ErrorMsg ; \\ typedef UE_FMT_STR_ErrorMsg::template TValue<UE_FMT_STR_Result . ArgPos>)",
    "insertText": "UE_FMT_STR_Status(void)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} ; \\ })",
    "insertText": "while(false) #define UE_CHECK_FORMAT_STRING_ERR(Err, Fmt, ...) \\ (::UE::Core::Private::FormatStringSan::TCheckFormatString<decltype(::UE::Core::Private::FormatStringSan::GetFmtArgTypes(__VA_ARGS__))>::Check(false, 0, Fmt).Status == Err) #if UE_VALIDATE_FORMAT_STRINGS #define UE_VALIDATE_FORMAT_STRING UE_CHECK_FORMAT_STRING #else #define UE_VALIDATE_FORMAT_STRING(Format, ...)"
  },
  {
    "label": "bIsAConstString()",
    "kind": "Method",
    "detail": "Function (namespace UE::Core::Private { namespace FormatStringSan { template<T> bool)",
    "insertText": "bIsAConstString(std::is_convertible_v<std::decay_t<T>, char*> || std::is_convertible_v<std::decay_t<T>, TCHAR*>) && (std::is_convertible_v<std::decay_t<T>, const char*> || std::is_convertible_v<std::decay_t<T>, const TCHAR*>)"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (enum EFormatStringSanStatus { StatusOk,StatusSNeedsTCHARPtrArg,StatusHSNeedsCharPtrArg,StatusIncompleteFormatSpecifierOrUnescapedPercent,StatusCNeedsTCHARArg,StatusPNeedsPointerArg,StatusFNeedsFloatOrDoubleArg,StatusCapitalSNeedsCharPtr,StatusCapitalSNeedsTCHARPtr,StatusInvalidFormatSpec,StatusNotEnoughArguments,StatusDNeedsIntegerArg,StatusZNeedsIntegerSpec,StatusZNeedsIntegerArg,StatusDynamicLengthSpecNeedsIntegerArg,StatusLNeedsIntegerArg,StatusHNeedsIntegerArg,StatusHHNeedsIntegerSpec,StatusHHNeedsIntegerArg,StatusLLNeedsIntegerSpec,StatusLLNeedsIntegerArg,StatusI64BadSpec,StatusI64NeedsIntegerArg,StatusUTF8NeedsStringCastAndS,StatusUTF8NeedsStringCast } ; template<int N> struct TAtArgPos { } ; template<> bool bFmtStrErr = false ; struct FResult { int Status ; int ArgPos ; } ; template<int N> struct TPresentErr ; template<> struct TPresentErr<StatusOk> { template<int> struct TValue { } ; } ; # define)",
    "insertText": "FMT_STR_ERR(N, Description)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\ template<T> \\ struct TErrMsg \\ { \\)",
    "insertText": "static_assert(bFmtStrErr<T>, Description)"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ template<int ArgN> \\ using TValue = TErrMsg<TAtArgPos<ArgN>> ; \\ })",
    "insertText": "FMT_STR_ERR(StatusSNeedsTCHARPtrArg, \"'%s' expects `TCHAR*`; use '%hs' for `const char*`.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusHSNeedsCharPtrArg, \"'%hs' expects `char*`; use '%s' for `const TCHAR*`, `TEXT(...)`, etc.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusIncompleteFormatSpecifierOrUnescapedPercent, \"incomplete '%' escape sequence. (to print a percent sign, write '%%'.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusCNeedsTCHARArg, \"'%c' expects `TCHAR`. (construct a `TCHAR` from a `char` like this: 'TCHAR(my_char)'.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusPNeedsPointerArg, \"'%p' expects a pointer.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusFNeedsFloatOrDoubleArg, \"'%f' expects `float` or `double`.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusCapitalSNeedsCharPtr, \"'%S' expects 'char*' (or a `UTF8CHAR*` if enabled).\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusCapitalSNeedsTCHARPtr, \"'%S' expects 'TCHAR*'.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusInvalidFormatSpec, \"unsupported '%' format specifier. (to print a percent sign, write '%%'.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusNotEnoughArguments, \"not enough arguments provided to format string.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusDNeedsIntegerArg, \"'%d' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusZNeedsIntegerArg, \"'%z' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusZNeedsIntegerSpec, \"'%z' must have a suffix (eg. '%zd', '%zu', etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusLNeedsIntegerArg, \"'%l[ ]' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusHNeedsIntegerArg, \"'%h[ ]' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusHHNeedsIntegerSpec, \"'%hh[ ]' expects integral suffix (eg. '%hhd', '%hhu', etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusHHNeedsIntegerArg, \"'%hh[ ]' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusLLNeedsIntegerSpec, \"'%ll[ ]' expects integral suffix (eg. '%hhd', '%hhu', etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusLLNeedsIntegerArg, \"'%ll[ ]' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusI64BadSpec, \"'%I' must appear as '%I64' with an integral suffix (eg. '%I64d', '%I64u', etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusI64NeedsIntegerArg, \"'%I64[ ]' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusDynamicLengthSpecNeedsIntegerArg, \"dynamic field width specifier '*' expects integral arg (eg. `char`, `int`, `long`, etc.)\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusUTF8NeedsStringCastAndS, \"Pass UTF8 strings to WriteToString and use %s.\")"
  },
  {
    "label": "FMT_STR_ERR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMT_STR_ERR(StatusUTF8NeedsStringCast, \"'%s' expects `TCHAR*`; pass UTF8 strings to WriteToString first.\")"
  },
  {
    "label": "GetFmtArgTypes()",
    "kind": "Method",
    "detail": "Function (# undef FMT_STR_ERR template<T,V> bool bIsPointerTo = std::is_pointer_v<T>&& std::is_same_v<std::remove_cv_t<std::remove_pointer_t<T>>,V> ; template<T> bool bIsCharPtr = bIsPointerTo<T,char> ; template<T> bool bIsTCharPtr = bIsPointerTo<T,TCHAR> ; template<T> bool bIsFloatOrDouble = std::is_same_v<float,T> | | std::is_same_v<double,T> ; template<T> struct TIsEnumAsByte { bool IsEnumAsByte = false ; } ; template<T> struct TIsEnumAsByte<TEnumAsByte<T>> { bool IsEnumAsByte = true ; } ; template<T> bool bIsIntegralEnum = std::is_enum_v<T> | | TIsEnumAsByte<T>::IsEnumAsByte ; template<. . . Ts> struct TFmtArgTypes { } ; template<. . . Ts> TFmtArgTypes<Ts . . .>)",
    "insertText": "GetFmtArgTypes(Ts...)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} ; template<Arg,. . . Args> struct TCheckFormatString<TFmtArgTypes<Arg,Args . . .>> { FResult)",
    "insertText": "Check(bool bInsideFormatSpec, int CurArgPos, const TCHAR* Fmt)"
  },
  {
    "label": "CharIsDigit()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "CharIsDigit(const TCHAR C)"
  },
  {
    "label": "CharIsDigit()",
    "kind": "Method",
    "detail": "Function (} ; auto SkipInteger = [&)",
    "insertText": "CharIsDigit(const TCHAR* P)"
  },
  {
    "label": "CharIsIntegerFormatSpecifier()",
    "kind": "Method",
    "detail": "Function (+ + P ; } return P ; } ; auto)",
    "insertText": "CharIsIntegerFormatSpecifier(const TCHAR C)"
  },
  {
    "label": "CurArgPos()",
    "kind": "Method",
    "detail": "Function (FResult)",
    "insertText": "CurArgPos(const TCHAR* P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; const TCHAR* P = Fmt ;)",
    "insertText": "if(!P[0] && !bInsideFormatSpec)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; })",
    "insertText": "if(*P == TEXT('%'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; } })",
    "insertText": "if(!*P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; })",
    "insertText": "if(*P == TEXT('-'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; })",
    "insertText": "if(*P == TEXT('*'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CharIsDigit(*P))"
  },
  {
    "label": "SkipInteger()",
    "kind": "Method",
    "detail": "Function (P =)",
    "insertText": "SkipInteger(P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(*P == TEXT('.'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(P[0] == TEXT('l') && P[1] == TEXT('s'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; } else)",
    "insertText": "if(P[0] == TEXT('h') && P[1] == TEXT('s'))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "switch(P[0])"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('c'): if constexpr (!std::is_same_v<Arg, TCHAR>)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('d'): case TEXT('i'): case TEXT('X'): case TEXT('x'): case TEXT('u'): if constexpr (!(bIsIntegralEnum<Arg> || std::is_integral_v<Arg> || std::is_pointer_v<Arg>))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('z'): if (!CharIsIntegerFormatSpecifier(P[1]))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('p'): if constexpr (!std::is_pointer_v<Arg>)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('I'): if (!(P[1] == TEXT('6') && P[2] == TEXT('4')))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('l'): if (CharIsIntegerFormatSpecifier(P[1]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(P[1] == TEXT('f'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(P[1] != TEXT('l'))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('h'): if (CharIsIntegerFormatSpecifier(P[1]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(P[1] != TEXT('h'))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('f'): case TEXT('e'): case TEXT('g'): if constexpr (!bIsFloatOrDouble<Arg>)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT('S')"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case)",
    "insertText": "TEXT(' ')"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (StatusIncompleteFormatSpecifierOrUnescapedPercent,CurArgPos } ; default : return { StatusInvalidFormatSpec,CurArgPos } ; } } } ; template<> struct TCheckFormatString<TFmtArgTypes<>> { FResult)",
    "insertText": "Check(bool bInsideFormatSpec, int CurArgPos, const TCHAR* P)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + P ; continue ; })",
    "insertText": "if(P[1] == TEXT('%'))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (P + = 2 ; continue ; })",
    "insertText": "if(P[1] == 0)"
  }
]