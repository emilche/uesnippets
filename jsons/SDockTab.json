[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SDockingArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingArea"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "ETabRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETabRole"
  },
  {
    "label": "ETabActivationCause",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETabActivationCause"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "STabSidebar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabSidebar"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Styling / StyleDefaults . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Framework / Docking / TabManager . h \" class FActiveTimerHandle ; class SDockingArea ; class SDockingTabStack ; class SDockingTabWell ; class SImage ; class STextBlock ; class SToolTip ; enum ETabRole : uint8 { MajorTab,PanelTab,NomadTab,DocumentTab,NumRoles } ; enum ETabActivationCause : uint8 { UserClickedOnTab,SetDirectly } ; class FMenuBuilder ; class SDockTab : public SBorder { class FTabManager ; class STabSidebar ; public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTabClosedCallback, TSharedRef<SDockTab>)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnTabActivatedCallback, TSharedRef<SDockTab>, ETabActivationCause)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTabRenamed, TSharedRef<SDockTab>)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnPersistVisualState)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FCanCloseTab)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FExtendContextMenu, FMenuBuilder&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDockTab) : _Content() , _TabWellContentLeft() , _TabWellContentRight() , _ContentPadding(0.f) , _TabRole(ETabRole::PanelTab) , _Label() , _LabelSuffix() , _OnTabClosed() , _OnTabActivated() , _OnTabRelocated() , _OnTabDraggedOverDockArea() , _ShouldAutosize(false) , _OnCanCloseTab() , _CanEverClose(true) , _OnPersistVisualState() , _TabColorScale(FLinearColor::Transparent) , _ForegroundColor(FSlateColor::UseStyle()) , _IconColor()"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_NAMED_SLOT( FArguments, TabWellContentLeft ) SLATE_NAMED_SLOT( FArguments, TabWellContentRight ) SLATE_ATTRIBUTE( FMargin, ContentPadding ) SLATE_ARGUMENT( ETabRole, TabRole ) SLATE_ATTRIBUTE( FText, Label ) SLATE_ATTRIBUTE(FText, LabelSuffix) UE_DEPRECATED(5.0, \"Tab icons are now being managed by tab spawners and toolkits. In the rare case you need to set an icon manually, use SetTabIcon() instead\") FArguments& Icon(const FSlateBrush* InIcon)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnTabClosedCallback, OnTabClosed ) SLATE_EVENT( FOnTabActivatedCallback, OnTabActivated ) SLATE_EVENT( FSimpleDelegate, OnTabRelocated ) SLATE_EVENT( FSimpleDelegate, OnTabDraggedOverDockArea ) SLATE_ARGUMENT( bool, ShouldAutosize ) SLATE_EVENT( FCanCloseTab, OnCanCloseTab ) SLATE_ARGUMENT( bool, CanEverClose ) SLATE_EVENT( FOnPersistVisualState, OnPersistVisualState ) SLATE_EVENT( FExtendContextMenu, OnExtendContextMenu ) SLATE_EVENT( FSimpleDelegate, OnTabDrawerClosed) SLATE_ATTRIBUTE( FLinearColor, TabColorScale ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ATTRIBUTE( FLinearColor, IconColor) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetLeftContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLeftContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRightContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetTitleBarRightContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitleBarRightContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "IsForeground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForeground()"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "ExtendContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetTabRole()",
    "kind": "Method",
    "detail": "Function (ETabRole)",
    "insertText": "GetTabRole()"
  },
  {
    "label": "GetVisualTabRole()",
    "kind": "Method",
    "detail": "Function (ETabRole)",
    "insertText": "GetVisualTabRole()"
  },
  {
    "label": "GetContentAreaBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetContentAreaBrush()"
  },
  {
    "label": "GetTabWellBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTabWellBrush()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "GetLeftContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetLeftContent()"
  },
  {
    "label": "GetRightContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetRightContent()"
  },
  {
    "label": "GetTitleBarRightContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetTitleBarRightContent()"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "GetLayoutIdentifier()",
    "kind": "Method",
    "detail": "Function (const FTabId)",
    "insertText": "GetLayoutIdentifier()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(TSharedPtr<SDockingTabWell> Parent = TSharedPtr<SDockingTabWell>())"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingTabWell>)",
    "insertText": "GetParent()"
  },
  {
    "label": "GetParentDockTabStack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingTabStack>)",
    "insertText": "GetParentDockTabStack()"
  },
  {
    "label": "GetDockArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SDockingArea>)",
    "insertText": "GetDockArea()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "GetOverlapWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOverlapWidth()"
  },
  {
    "label": "GetTabLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTabLabel()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabel(const TAttribute<FText>& InTabLabel)"
  },
  {
    "label": "GetTabLabelSuffix()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTabLabelSuffix()"
  },
  {
    "label": "SetTabLabelSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabLabelSuffix(const TAttribute<FText>& InTabLabelSuffix)"
  },
  {
    "label": "SetTabToolTipWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabToolTipWidget(TSharedPtr<SToolTip> InTabToolTipWidget)"
  },
  {
    "label": "GetTabIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTabIcon()"
  },
  {
    "label": "SetTabIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabIcon(const TAttribute<const FSlateBrush*> InTabIcon)"
  },
  {
    "label": "ShouldAutosize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAutosize()"
  },
  {
    "label": "SetShouldAutosize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldAutosize(const bool bNewShouldAutosize)"
  },
  {
    "label": "CanCloseTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseTab()"
  },
  {
    "label": "RequestCloseTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestCloseTab()"
  },
  {
    "label": "PersistVisualState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistVisualState()"
  },
  {
    "label": "RemoveTabFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTabFromParent()"
  },
  {
    "label": "SDockTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDockTab()"
  },
  {
    "label": "ActivateInParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateInParent(ETabActivationCause InActivationCause)"
  },
  {
    "label": "SetTabManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabManager(const TSharedPtr<FTabManager>& InTabManager)"
  },
  {
    "label": "SetOnPersistVisualState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnPersistVisualState(const FOnPersistVisualState& Handler)"
  },
  {
    "label": "SetCanCloseTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanCloseTab(const FCanCloseTab& InOnTabClosing)"
  },
  {
    "label": "SetOnTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabClosed(const FOnTabClosedCallback& InDelegate)"
  },
  {
    "label": "SetOnTabActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabActivated(const FOnTabActivatedCallback& InDelegate)"
  },
  {
    "label": "SetOnTabRelocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabRelocated(const FSimpleDelegate InDelegate)"
  },
  {
    "label": "SetOnTabDraggedOverDockArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabDraggedOverDockArea(const FSimpleDelegate InDelegate)"
  },
  {
    "label": "SetOnTabRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabRenamed(const FOnTabRenamed& InDelegate)"
  },
  {
    "label": "SetOnTabDrawerOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabDrawerOpened(const FSimpleDelegate InDelegate)"
  },
  {
    "label": "SetOnTabDrawerClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnTabDrawerClosed(const FSimpleDelegate InDelegate)"
  },
  {
    "label": "SetOnExtendContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnExtendContextMenu(const FExtendContextMenu& Handler)"
  },
  {
    "label": "GetTabManagerPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager>)",
    "insertText": "GetTabManagerPtr()"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention()"
  },
  {
    "label": "ProvideDefaultLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProvideDefaultLabel(const FText& InDefaultLabel)"
  },
  {
    "label": "PlaySpawnAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySpawnAnim()"
  },
  {
    "label": "FlashTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlashTab()"
  },
  {
    "label": "SetDraggedOverDockArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggedOverDockArea(const TSharedPtr<SDockingArea>& Area)"
  },
  {
    "label": "HasSiblingTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSiblingTab(const FTabId& SiblingTabId, const bool TreatIndexNoneAsWildcard = true)"
  },
  {
    "label": "UpdateActivationTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActivationTime()"
  },
  {
    "label": "ProvideDefaultIcon()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ProvideDefaultIcon(const FSlateBrush* InDefaultIcon)"
  },
  {
    "label": "GetCurrentStyle()",
    "kind": "Method",
    "detail": "Function (const FDockTabStyle&)",
    "insertText": "GetCurrentStyle()"
  },
  {
    "label": "GetImageBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetImageBrush()"
  },
  {
    "label": "GetTabPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetTabPadding()"
  },
  {
    "label": "GetColorOverlayImageBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetColorOverlayImageBrush()"
  },
  {
    "label": "GetActiveTabIndicatorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetActiveTabIndicatorVisibility()"
  },
  {
    "label": "GetTabColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetTabColor()"
  },
  {
    "label": "GetIconColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetIconColor()"
  },
  {
    "label": "GetFlashOverlayImageBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetFlashOverlayImageBrush()"
  },
  {
    "label": "GetFlashColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetFlashColor()"
  },
  {
    "label": "OnCloseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCloseButtonClicked()"
  },
  {
    "label": "GetCloseButtonToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCloseButtonToolTipText()"
  },
  {
    "label": "SetLayoutIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayoutIdentifier(const FTabId& TabId)"
  },
  {
    "label": "HandleIsCloseButtonVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleIsCloseButtonVisible()"
  },
  {
    "label": "GetTabIconSize()",
    "kind": "Method",
    "detail": "Function (TOptional<FVector2D>)",
    "insertText": "GetTabIconSize()"
  },
  {
    "label": "GetTabIconBorderPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetTabIconBorderPadding()"
  },
  {
    "label": "TriggerActivateTab()",
    "kind": "Method",
    "detail": "Function (private : EActiveTimerReturnType)",
    "insertText": "TriggerActivateTab(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "OnHandleUpdateStyle()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "OnHandleUpdateStyle(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "OnParentSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParentSet()"
  },
  {
    "label": "UpdateTabStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTabStyle()"
  },
  {
    "label": "OnTabDrawerOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabDrawerOpened()"
  },
  {
    "label": "OnTabDrawerClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabDrawerClosed()"
  },
  {
    "label": "NotifyTabRelocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTabRelocated()"
  },
  {
    "label": "CheckTabAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckTabAllowed()"
  },
  {
    "label": "GetAnimatedScale()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FActiveTimerHandle> DragDropTimerHandle ; TWeakPtr<FActiveTimerHandle> UpdateStyleTimerHandle ; protected : TWeakPtr<FTabManager> MyTabManager ; TSharedRef<SWidget> Content ; TSharedRef<SWidget> TabWellContentLeft ; TSharedRef<SWidget> TabWellContentRight ; TSharedRef<SWidget> TitleBarContentRight ; FTabId LayoutIdentifier ; ETabRole TabRole ; bool bCanEverClose ; TWeakPtr<SDockingTabWell> ParentPtr ; TAttribute<FText> TabLabel ; TAttribute<FText> TabLabelSuffix ; TAttribute<const FSlateBrush*> TabIcon ; FOnTabClosedCallback OnTabClosed ; FOnTabActivatedCallback OnTabActivated ; FCanCloseTab OnCanCloseTab ; FSimpleDelegate OnTabDrawerClosedEvent ; FSimpleDelegate OnTabDrawerOpenedEvent ; FSimpleDelegate OnTabRelocated ; FSimpleDelegate OnTabDraggedOverDockArea ; FExtendContextMenu OnExtendContextMenu ; FOnPersistVisualState OnPersistVisualState ; FOnTabRenamed OnTabRenamed ; const FDockTabStyle* MajorTabStyle ; const FDockTabStyle* GenericTabStyle ; TAttribute<FMargin> ContentAreaPadding ; bool bShouldAutosize ; TAttribute<FLinearColor> TabColorScale ; TAttribute<FLinearColor> IconColor ; UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetAnimatedScale()"
  },
  {
    "label": "GetFlashValue()",
    "kind": "Method",
    "detail": "Function (FCurveSequence SpawnAnimCurve ; FCurveSequence FlashTabCurve ; float)",
    "insertText": "GetFlashValue()"
  }
]