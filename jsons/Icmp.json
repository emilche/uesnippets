[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIcmpEchoResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIcmpEchoResult"
  },
  {
    "label": "FIcmpTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIcmpTarget"
  },
  {
    "label": "FIcmpEchoManyResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIcmpEchoManyResult"
  },
  {
    "label": "FIcmpEchoManyCompleteResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIcmpEchoManyCompleteResult"
  },
  {
    "label": "FIcmp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIcmp"
  },
  {
    "label": "FUDPPing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUDPPing"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" enum class EIcmpResponseStatus { Success,Timeout,Unreachable,Unresolvable,InternalError,NotImplemented,} ; const TCHAR*)",
    "insertText": "LexToString(EIcmpResponseStatus ResponseStatus)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "FIcmpEchoResult()",
    "kind": "Method",
    "detail": "Function (} } struct FIcmpEchoResult { EIcmpResponseStatus Status ; FString ResolvedAddress ; FString ReplyFrom ; float Time ;)",
    "insertText": "FIcmpEchoResult() : Status(EIcmpResponseStatus::InternalError) , ResolvedAddress() , ReplyFrom() , Time(-1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TFunction<)",
    "insertText": "void(FIcmpEchoResult)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FIcmpEchoResultDelegate, FIcmpEchoResult)"
  },
  {
    "label": "FIcmpTarget()",
    "kind": "Method",
    "detail": "Function (struct FIcmpTarget { FString Address ; int32 Port ;)",
    "insertText": "FIcmpTarget() : Port(0)"
  },
  {
    "label": "FIcmpTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIcmpTarget(const FString& InAddress, int32 InPort) : Address(InAddress) , Port(InPort)"
  },
  {
    "label": "FIcmpEchoManyResult()",
    "kind": "Method",
    "detail": "Function (} } ; struct FIcmpEchoManyResult { FIcmpEchoResult EchoResult ; FIcmpTarget Target ;)",
    "insertText": "FIcmpEchoManyResult()"
  },
  {
    "label": "FIcmpEchoManyResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIcmpEchoManyResult(const FIcmpEchoResult& InEchoResult, const FIcmpTarget& InTarget) : EchoResult(InEchoResult) , Target(InTarget)"
  },
  {
    "label": "FIcmpEchoManyCompleteResult()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EIcmpEchoManyStatus : uint8 { Invalid,Success,Failure,Canceled } ; struct FIcmpEchoManyCompleteResult { TArray<FIcmpEchoManyResult> AllResults ; EIcmpEchoManyStatus Status ;)",
    "insertText": "FIcmpEchoManyCompleteResult() : Status(EIcmpEchoManyStatus::Invalid)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TFunction<)",
    "insertText": "void(FIcmpEchoManyCompleteResult)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FIcmpEchoManyCompleteDelegate, FIcmpEchoManyCompleteResult)"
  },
  {
    "label": "IcmpEcho()",
    "kind": "Method",
    "detail": "Function (class FIcmp { public : void)",
    "insertText": "IcmpEcho(const FString& TargetAddress, float Timeout, FIcmpEchoResultCallback HandleResult)"
  },
  {
    "label": "IcmpEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IcmpEcho(const FString& TargetAddress, float Timeout, FIcmpEchoResultDelegate ResultDelegate)"
  },
  {
    "label": "IcmpEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IcmpEcho(TargetAddress, Timeout, [ResultDelegate](FIcmpEchoResult Result) { ResultDelegate.ExecuteIfBound(Result); })"
  },
  {
    "label": "UDPEcho()",
    "kind": "Method",
    "detail": "Function (} } ; class FUDPPing { public : void)",
    "insertText": "UDPEcho(const FString& TargetAddress, float Timeout, FIcmpEchoResultCallback HandleResult)"
  },
  {
    "label": "UDPEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDPEcho(const FString& TargetAddress, float Timeout, FIcmpEchoResultDelegate ResultDelegate)"
  },
  {
    "label": "UDPEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDPEcho(TargetAddress, Timeout, [ResultDelegate](FIcmpEchoResult Result) { ResultDelegate.ExecuteIfBound(Result); })"
  },
  {
    "label": "UDPEchoMany()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UDPEchoMany(const TArray<FIcmpTarget>& Targets, float Timeout, FIcmpEchoManyCompleteCallback CompletionCallback)"
  },
  {
    "label": "UDPEchoMany()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDPEchoMany(const TArray<FIcmpTarget>& Targets, float Timeout, FIcmpEchoManyCompleteDelegate CompletionDelegate)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "EnumCase(Name) case EIcmpResponseStatus::Name : return TEXT(#Name) static const TCHAR* ToString(EIcmpResponseStatus Status)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(Success)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(Timeout)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(Unreachable)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(Unresolvable)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(InternalError)"
  },
  {
    "label": "EnumCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumCase(NotImplemented)"
  }
]