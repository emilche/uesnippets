[
  {
    "label": "FRHIDepthRenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDepthRenderTargetView"
  },
  {
    "label": "FRHIRenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRenderTargetView"
  },
  {
    "label": "FRHISetRenderTargetsInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHISetRenderTargetsInfo"
  },
  {
    "label": "FRHIShaderBindingLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderBindingLayout"
  },
  {
    "label": "FViewportBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportBounds"
  },
  {
    "label": "FRayTracingGeometryInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometryInstance"
  },
  {
    "label": "FRayTracingShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingShaderBindings"
  },
  {
    "label": "FRayTracingGeometrySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometrySegment"
  },
  {
    "label": "FRayTracingGeometryBuildParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometryBuildParams"
  },
  {
    "label": "FRayTracingSceneBuildParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingSceneBuildParams"
  },
  {
    "label": "FRayTracingLocalShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingLocalShaderBindings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIBufferRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferRange"
  },
  {
    "label": "FRHIPerCategoryDrawStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIPerCategoryDrawStats"
  },
  {
    "label": "FRHIDrawStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDrawStats"
  },
  {
    "label": "FRHICopyTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICopyTextureInfo"
  },
  {
    "label": "FUniformBufferStaticBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformBufferStaticBindings"
  },
  {
    "label": "FTransferResourceFenceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransferResourceFenceData"
  },
  {
    "label": "FCrossGPUTransferFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrossGPUTransferFence"
  },
  {
    "label": "FTransferResourceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransferResourceParams"
  },
  {
    "label": "IRHIPlatformCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHIPlatformCommandList"
  },
  {
    "label": "IRHIComputeContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHIComputeContext"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "IRHIUploadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHIUploadContext"
  },
  {
    "label": "FCopyBufferRegionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopyBufferRegionParams"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "IRHICommandContextPSOFallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContextPSOFallback"
  },
  {
    "label": "VALIDATE_UNIFORM_BUFFER_STATIC_BINDINGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / AssertionMacros . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / Box2D . h \" # include \" Math / PerspectiveMatrix . h \" # include \" Math / TranslationMatrix . h \" # include \" Math / ScaleMatrix . h \" # include \" Math / Float16Color . h \" # include \" Modules / ModuleInterface . h \" # include \" RHIBreadcrumbs . h \" # include \" RHIResources . h \" # include \" RHIShaderParameters . h \" # include \" GPUProfiler . h \" class FRHIDepthRenderTargetView ; class FRHIRenderTargetView ; class FRHISetRenderTargetsInfo ; class FRHIShaderBindingLayout ; struct FViewportBounds ; struct FRayTracingGeometryInstance ; struct FRayTracingShaderBindings ; struct FRayTracingGeometrySegment ; struct FRayTracingGeometryBuildParams ; struct FRayTracingSceneBuildParams ; struct FRayTracingLocalShaderBindings ; enum class ERayTracingBindingType : uint8 ; enum class EAsyncComputeBudget ; struct FRHIBufferRange ; struct FRHIPerCategoryDrawStats ; struct FRHIDrawStats ; struct FRHICopyTextureInfo ; # define)",
    "insertText": "VALIDATE_UNIFORM_BUFFER_STATIC_BINDINGS(!UE_BUILD_SHIPPING && !UE_BUILD_TEST)"
  },
  {
    "label": "FUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUniformBufferStaticBindings()"
  },
  {
    "label": "FUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (template<. . . TArgs>)",
    "insertText": "FUniformBufferStaticBindings(TArgs... Args)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::initializer_list<FRHIUniformBuffer*> InitList = { Args . . . } ;)",
    "insertText": "for(FRHIUniformBuffer* Buffer : InitList)"
  },
  {
    "label": "AddUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniformBuffer(Buffer)"
  },
  {
    "label": "FUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FUniformBufferStaticBindings(const FRHIShaderBindingLayout* InSRTDesc)"
  },
  {
    "label": "AddUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniformBuffer(FRHIUniformBuffer* UniformBuffer)"
  },
  {
    "label": "TryAddUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryAddUniformBuffer(FRHIUniformBuffer* UniformBuffer)"
  },
  {
    "label": "AddUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniformBuffer(UniformBuffer)"
  },
  {
    "label": "GetUniformBufferCount()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetUniformBufferCount()"
  },
  {
    "label": "GetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} FRHIUniformBuffer*)",
    "insertText": "GetUniformBuffer(int32 Index)"
  },
  {
    "label": "FTransferResourceFenceData()",
    "kind": "Method",
    "detail": "Function (private : const uint32 InlineUniformBufferCount = 8 ; TArray<FUniformBufferStaticSlot,TInlineAllocator<InlineUniformBufferCount>> Slots ; TArray<FRHIUniformBuffer*,TInlineAllocator<InlineUniformBufferCount>> UniformBuffers ; int32 SlotCount = 0 ; const FRHIShaderBindingLayout* ShaderBindingLayout = nullptr ; } ; struct FTransferResourceFenceData { TStaticArray<void*,MAX_NUM_GPUS> SyncPoints ; FRHIGPUMask Mask ;)",
    "insertText": "FTransferResourceFenceData() : SyncPoints(InPlace, nullptr)"
  },
  {
    "label": "FCrossGPUTransferFence()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCrossGPUTransferFence { uint32 SignalGPUIndex = 0 ; uint32 WaitGPUIndex = 0 ; void* SyncPoint = nullptr ;)",
    "insertText": "FCrossGPUTransferFence()"
  },
  {
    "label": "RHICreateTransferResourceFenceData()",
    "kind": "Method",
    "detail": "Function (} ; FTransferResourceFenceData*)",
    "insertText": "RHICreateTransferResourceFenceData()"
  },
  {
    "label": "RHICreateCrossGPUTransferFence()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return new FTransferResourceFenceData ; # else return nullptr ; # endif } FCrossGPUTransferFence*)",
    "insertText": "RHICreateCrossGPUTransferFence()"
  },
  {
    "label": "FTransferResourceParams()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return new FCrossGPUTransferFence ; # else return nullptr ; # endif } struct FTransferResourceParams {)",
    "insertText": "FTransferResourceParams()"
  },
  {
    "label": "FTransferResourceParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTransferResourceParams(FRHITexture* InTexture, const FIntRect& InRect, uint32 InSrcGPUIndex, uint32 InDestGPUIndex, bool InPullData, bool InLockStepGPUs) : Texture(InTexture), Buffer(nullptr), Min(InRect.Min.X, InRect.Min.Y, 0), Max(InRect.Max.X, InRect.Max.Y, 1), SrcGPUIndex(InSrcGPUIndex), DestGPUIndex(InDestGPUIndex), bPullData(InPullData), bLockStepGPUs(InLockStepGPUs)"
  },
  {
    "label": "FTransferResourceParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTransferResourceParams(FRHITexture* InTexture, uint32 InSrcGPUIndex, uint32 InDestGPUIndex, bool InPullData, bool InLockStepGPUs) : Texture(InTexture), Buffer(nullptr), Min(0, 0, 0), Max(0, 0, 0), SrcGPUIndex(InSrcGPUIndex), DestGPUIndex(InDestGPUIndex), bPullData(InPullData), bLockStepGPUs(InLockStepGPUs)"
  },
  {
    "label": "FTransferResourceParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTransferResourceParams(FRHIBuffer* InBuffer, uint32 InSrcGPUIndex, uint32 InDestGPUIndex, bool InPullData, bool InLockStepGPUs) : Texture(nullptr), Buffer(InBuffer), Min(0, 0, 0), Max(0, 0, 0), SrcGPUIndex(InSrcGPUIndex), DestGPUIndex(InDestGPUIndex), bPullData(InPullData), bLockStepGPUs(InLockStepGPUs)"
  },
  {
    "label": "IRHIPlatformCommandList()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef Texture ; FBufferRHIRef Buffer ; FIntVector Min ; FIntVector Max ; uint32 SrcGPUIndex ; uint32 DestGPUIndex ; bool bPullData = true ; bool bLockStepGPUs = true ; FTransferResourceFenceData* DelayedFence = nullptr ; FTransferResourceFenceData* PreTransferFence = nullptr ; } ; class IRHIPlatformCommandList {)",
    "insertText": "IRHIPlatformCommandList(IRHIPlatformCommandList const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IRHIPlatformCommandList&)",
    "insertText": "operator(IRHIPlatformCommandList const&)"
  },
  {
    "label": "IRHIPlatformCommandList()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "IRHIPlatformCommandList(IRHIPlatformCommandList&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IRHIPlatformCommandList&)",
    "insertText": "operator(IRHIPlatformCommandList&&)"
  },
  {
    "label": "IRHIPlatformCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRHIPlatformCommandList()"
  },
  {
    "label": "IRHIComputeContext()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbAllocatorArray BreadcrumbAllocators { } ; FRHIBreadcrumbRange BreadcrumbRange { } ; # endif } ; class IRHIComputeContext { public : ~)",
    "insertText": "IRHIComputeContext()"
  },
  {
    "label": "GetPipeline()",
    "kind": "Method",
    "detail": "Function (} ERHIPipeline)",
    "insertText": "GetPipeline()"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetAsyncComputeBudget(EAsyncComputeBudget Budget)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHISetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "RHIDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchComputeShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "RHIDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchGraphicsShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, const FRHIShaderBundleGraphicsState& BundleState, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginUAVOverlap()"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUAVOverlap()"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginUAVOverlap(TConstArrayView<FRHIUnorderedAccessView*> UAVs)"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUAVOverlap(TConstArrayView<FRHIUnorderedAccessView*> UAVs)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* ComputeShader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBatchedShaderParameters(FRHIComputeShader* InShader, FRHIBatchedShaderParameters& InBatchedParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(InShader, InBatchedParameters.ParametersData, InBatchedParameters.Parameters, InBatchedParameters.ResourceParameters, InBatchedParameters.BindlessParameters)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InBatchedParameters .)",
    "insertText": "Reset()"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderUnbinds(FRHIComputeShader* ComputeShader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStaticUniformBuffer(FUniformBufferStaticSlot Slot, FRHIUniformBuffer* UniformBuffer)"
  },
  {
    "label": "RHISetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetUniformBufferDynamicOffset(FUniformBufferStaticSlot Slot, uint32 Offset)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} # if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBufferRHI, FRHIStagingBuffer* DestinationStagingBufferRHI, uint32 InOffset, uint32 InNumBytes)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHISetGPUMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetGPUMask(FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIGetGPUMask()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask)",
    "insertText": "RHIGetGPUMask()"
  },
  {
    "label": "RHITransferResources()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MGPU void)",
    "insertText": "RHITransferResources(TConstArrayView<FTransferResourceParams> Params)"
  },
  {
    "label": "RHITransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITransferResourceSignal(TConstArrayView<FTransferResourceFenceData*> FenceDatas, FRHIGPUMask SrcGPUMask)"
  },
  {
    "label": "RHITransferResourceWait()",
    "kind": "Method",
    "detail": "Function (delete FenceData ; } } void)",
    "insertText": "RHITransferResourceWait(TConstArrayView<FTransferResourceFenceData*> FenceDatas)"
  },
  {
    "label": "RHICrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (delete FenceData ; } } void)",
    "insertText": "RHICrossGPUTransfer(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer, TConstArrayView<FCrossGPUTransferFence*> PostTransfer)"
  },
  {
    "label": "RHICrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICrossGPUTransferSignal(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer)"
  },
  {
    "label": "RHICrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (delete SyncPoint ; } } void)",
    "insertText": "RHICrossGPUTransferWait(TConstArrayView<FCrossGPUTransferFence*> SyncPoints)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (delete SyncPoint ; } } # endif void)",
    "insertText": "RHIBuildAccelerationStructures(TConstArrayView<FRayTracingGeometryBuildParams> Params, const FRHIBufferRange& ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "GetLowestLevelContext()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_RHI_VALIDATION RHIValidation::FTracker* Tracker = nullptr ; IRHIComputeContext* WrappingContext = nullptr ; IRHIComputeContext&)",
    "insertText": "GetLowestLevelContext()"
  },
  {
    "label": "GetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (Info . Resource -> TrackedAccess = Info . Access ; } ERHIAccess)",
    "insertText": "GetTrackedAccess(const FRHIViewableResource* Resource)"
  },
  {
    "label": "GetExecutingCommandList()",
    "kind": "Method",
    "detail": "Function (} private : class FRHICommandListBase* ExecutingCmdList = nullptr ; public : FRHICommandListBase&)",
    "insertText": "GetExecutingCommandList()"
  },
  {
    "label": "ShouldEmitBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (ExecutingCmdList = InCmdList ; } # if WITH_RHI_BREADCRUMBS bool)",
    "insertText": "ShouldEmitBreadcrumbs()"
  },
  {
    "label": "RHIGenerateCrossGPUPreTransferFences()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if RHI_NEW_GPU_PROFILER UE::RHI::GPUProfiler::FEvent::FStats StatEvent { } ; # endif } ; class IRHIUploadContext { } ; void)",
    "insertText": "RHIGenerateCrossGPUPreTransferFences(TConstArrayView<FTransferResourceParams> Params, TArray<FCrossGPUTransferFence*>& OutPreTransfer)"
  },
  {
    "label": "IRHICommandContext()",
    "kind": "Method",
    "detail": "Function (enum class EAccelerationStructureBuildMode { Build,Update,} ; struct FRayTracingGeometryBuildParams { FRayTracingGeometryRHIRef Geometry ; EAccelerationStructureBuildMode BuildMode = EAccelerationStructureBuildMode::Build ; TConstArrayView<FRayTracingGeometrySegment> Segments ; } ; struct FRayTracingSceneBuildParams { FRHIRayTracingScene* Scene = nullptr ; FRHIBuffer* ResultBuffer = nullptr ; uint32 ResultBufferOffset = 0 ; FRHIBuffer* ScratchBuffer = nullptr ; uint32 ScratchBufferOffset = 0 ; FRHIBuffer* InstanceBuffer = nullptr ; uint32 InstanceBufferOffset = 0 ; uint32 NumInstances = 0 ; TConstArrayView<FRHIRayTracingGeometry*> ReferencedGeometries ; TConstArrayView<FRHIRayTracingGeometry*> PerInstanceGeometries ; EAccelerationStructureBuildMode BuildMode = EAccelerationStructureBuildMode::Build ; } ; struct FCopyBufferRegionParams { FRHIBuffer* DestBuffer ; uint64 DstOffset ; FRHIBuffer* SourceBuffer ; uint64 SrcOffset ; uint64 NumBytes ; } ; class IRHICommandContext : public IRHIComputeContext { public : ~)",
    "insertText": "IRHICommandContext()"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIResummarizeHTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResummarizeHTile(FRHITexture* DepthTexture)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHICalibrateTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "RHIDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDiscardRenderTargets(bool Depth, bool Stencil, uint32 ColorBitMask)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USE_FALLBACK_PSO void)",
    "insertText": "RHISetGraphicsPipelineState(const FGraphicsPipelineStateInitializer& PsoInit, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (# endif using IRHIComputeContext::RHISetShaderParameters ; using IRHIComputeContext::RHISetBatchedShaderParameters ; using IRHIComputeContext::RHISetShaderUnbinds ; void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBatchedShaderParameters(FRHIGraphicsShader* InShader, FRHIBatchedShaderParameters& InBatchedParameters)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderUnbinds(FRHIGraphicsShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMultiDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset, FRHIBuffer* CountBuffer, uint32 CountBuffeOffset, uint32 MaxDrawArguments)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHISetShadingRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner Combiner)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHINextSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHINextSubpass()"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIRayTracingScene* Scene, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "RHIRayTraceDispatch(RayTracingPipelineState, RayGenShader, Scene->FindOrCreateShaderBindingTable(RayTracingPipelineState), GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIRayTracingScene* Scene, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "RHIRayTraceDispatchIndirect(RayTracingPipelineState, RayGenShader, Scene->FindOrCreateShaderBindingTable(RayTracingPipelineState), GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "RHICommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICommitShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHISetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetRayTracingBindings(FRHIRayTracingScene* Scene, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "RHISetBindingsOnShaderBindingTable(Scene->FindOrCreateShaderBindingTable(Pipeline), Pipeline, NumBindings, Bindings, BindingType)"
  },
  {
    "label": "RHICommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "RHICommitRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (} protected : FRHIRenderPassInfo RenderPassInfo ; } ; FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHISetBoundShaderState()",
    "kind": "Method",
    "detail": "Function (class IRHICommandContextPSOFallback : public IRHICommandContext { public : void)",
    "insertText": "RHISetBoundShaderState(FRHIBoundShaderState* BoundShaderState)"
  },
  {
    "label": "RHISetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetDepthStencilState(FRHIDepthStencilState* NewState, uint32 StencilRef)"
  },
  {
    "label": "RHISetRasterizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetRasterizerState(FRHIRasterizerState* NewState)"
  },
  {
    "label": "RHISetBlendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendState(FRHIBlendState* NewState, const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHIEnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEnableDepthBoundsTest(bool bEnable)"
  },
  {
    "label": "RHISetComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetComputeShader(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "FRHIGraphicsPipelineStateFallBack()",
    "kind": "Method",
    "detail": "Function (FRHIGraphicsPipelineStateFallBack* FallbackGraphicsState = static_cast<)",
    "insertText": "FRHIGraphicsPipelineStateFallBack(GraphicsState)"
  },
  {
    "label": "SetGraphicsPipelineStateFromInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineStateFromInitializer(FallbackGraphicsState->Initializer, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "SetGraphicsPipelineStateFromInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineStateFromInitializer(PsoInit, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "RHISetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "RHISetComputePipelineState(FRHIComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "RHISetComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetComputeShader(FallbackState->GetComputeShader())"
  },
  {
    "label": "SetGraphicsPipelineStateFromInitializer()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "SetGraphicsPipelineStateFromInitializer(const FGraphicsPipelineStateInitializer& PsoInit, uint32 StencilRef, bool bApplyAdditionalState)"
  }
]