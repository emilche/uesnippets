[
  {
    "label": "SWAPPY_LOGE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<android / log . h> # include<string> # if ENABLE_SWAPPY_LOGGING # define)",
    "insertText": "SWAPPY_LOGE(...) \\ __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__) #define SWAPPY_LOGW(...) \\ __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__) #define SWAPPY_LOGI(...) \\ __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__) #define SWAPPY_LOGW_ONCE_IF(cond, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(cond)"
  },
  {
    "label": "SWAPPY_LOGW_ONCE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SWAPPY_LOGW_ONCE(__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define SWAPPY_LOGW_ONCE(...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ bool alogw_once # # __FILE__ # # __LINE__ # # __ = true ; \\)",
    "insertText": "if(alogw_once##__FILE__##__LINE__##__)"
  },
  {
    "label": "SWAPPY_LOGW()",
    "kind": "Method",
    "detail": "Function (\\ alogw_once # # __FILE__ # # __LINE__ # # __ = false ; \\)",
    "insertText": "SWAPPY_LOGW(__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define SWAPPY_LOGE_ONCE(...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ bool aloge_once # # __FILE__ # # __LINE__ # # __ = true ; \\)",
    "insertText": "if(aloge_once##__FILE__##__LINE__##__)"
  },
  {
    "label": "SWAPPY_LOGE()",
    "kind": "Method",
    "detail": "Function (\\ aloge_once # # __FILE__ # # __LINE__ # # __ = false ; \\)",
    "insertText": "SWAPPY_LOGE(__VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define SWAPPY_LOGV(...) \\ __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__) #else #define SWAPPY_LOGE(...) #define SWAPPY_LOGW(...) #define SWAPPY_LOGI(...) #define SWAPPY_LOGV(...) #define SWAPPY_LOGW_ONCE_IF(...) #define SWAPPY_LOGW_ONCE(...) #define SWAPPY_LOGE_ONCE(...)"
  },
  {
    "label": "to_string()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "to_string(int value)"
  }
]