[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "TMovieSceneCurveChannelImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneCurveChannelImpl"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FCachedInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolation"
  },
  {
    "label": "FMovieSceneFloatValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatValue"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FMovieSceneFloatChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatChannel"
  },
  {
    "label": "TMovieSceneChannelTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelEditorData . h \" # include \" Channels / MovieSceneCurveChannelCommon . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / EnumAsByte . h \" # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / RealCurve . h \" # include \" Curves / RichCurve . h \" # include \" HAL / PlatformCrt . h \" # include \" KeyParams . h \" # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Optional . h \" # include \" MovieSceneChannel . h \" # include \" MovieSceneChannelData . h \" # include \" MovieSceneChannelTraits . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneFloatChannel . generated . h \" class FArchive ; struct FPropertyTag ; template<> struct TMovieSceneCurveChannelImpl ; template<T> struct TIsPODType ; namespace UE::MovieScene::Interpolation { struct FCachedInterpolation ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneFloatValue() : Value(0.f), InterpMode(RCIM_Cubic), TangentMode(RCTM_Auto), PaddingByte(0)"
  },
  {
    "label": "FMovieSceneFloatValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneFloatValue(float InValue) : Value(InValue), InterpMode(RCIM_Cubic), TangentMode(RCTM_Auto), PaddingByte(0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMovieSceneFloatValue& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneFloatValue& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint8 UnserializedPaddingBytes [ 1 ] = { 0 } ; } ;)",
    "insertText": "static_assert(sizeof(FMovieSceneFloatValue) == sizeof(FMovieSceneFloatValue::Value) + sizeof(FMovieSceneFloatValue::Tangent) + sizeof(FMovieSceneFloatValue::InterpMode) + sizeof(FMovieSceneFloatValue::TangentMode) + sizeof(FMovieSceneFloatValue::PaddingByte) + sizeof(FMovieSceneFloatValue::UnserializedPaddingBytes), \"Adjust padding size to avoid cooked build indeterminism with uninitialized padded data\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FMovieSceneFloatChannel()",
    "kind": "Method",
    "detail": "Function (typedef FMovieSceneFloatValue ChannelValueType ;)",
    "insertText": "FMovieSceneFloatChannel() : PreInfinityExtrap(RCCE_Constant) , PostInfinityExtrap(RCCE_Constant) , DefaultValue(0.f) , bHasDefaultValue(false) #if WITH_EDITORONLY_DATA , bShowCurve(false)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} TMovieSceneChannelData<FMovieSceneFloatValue>)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FFrameNumber>)",
    "insertText": "GetTimes()"
  },
  {
    "label": "GetInterpolationForTime()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForTime(FFrameTime InTime)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(TArray<FFrameNumber> InTimes, TArray<FMovieSceneFloatValue> InValues)"
  },
  {
    "label": "SetKeysOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeysOnly(TArrayView<FFrameNumber> InTimes, TArrayView<FMovieSceneFloatValue> InValues)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetKeys(const TRange<FFrameNumber>& WithinRange, TArray<FFrameNumber>* OutKeyTimes, TArray<FKeyHandle>* OutKeyHandles)"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<FFrameNumber> OutKeyTimes)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<const FFrameNumber> InKeyTimes)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateKeys(TArrayView<const FKeyHandle> InHandles, TArrayView<FKeyHandle> OutNewHandles)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeys(TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeysFrom(FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFrameResolution(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "ComputeEffectiveRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "ComputeEffectiveRange()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(FFrameNumber DeltaPosition)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Optimize(const FKeyDataOptimizationParams& InParameters)"
  },
  {
    "label": "ClearDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDefault()"
  },
  {
    "label": "PostEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChange()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "GetHandle(int32 Index)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndex(FKeyHandle Handle)"
  },
  {
    "label": "HasAnyData()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasAnyData()"
  },
  {
    "label": "SetDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefault(float InDefaultValue)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (bHasDefaultValue = true ; DefaultValue = InDefaultValue ; } TOptional<float>)",
    "insertText": "GetDefault()"
  },
  {
    "label": "RemoveDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDefault()"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneFloatChannel& Me)"
  },
  {
    "label": "AddConstantKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstantKey(FFrameNumber InTime, float InValue)"
  },
  {
    "label": "AddLinearKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLinearKey(FFrameNumber InTime, float InValue)"
  },
  {
    "label": "AddCubicKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCubicKey(FFrameNumber InTime, float InValue, ERichCurveTangentMode TangentMode = RCTM_Auto, const FMovieSceneTangentData& Tangent = FMovieSceneTangentData())"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSetTangents(float Tension = 0.f)"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "PopulateCurvePoints()",
    "kind": "Method",
    "detail": "Function (TickResolution = InTickSolution ; } void)",
    "insertText": "PopulateCurvePoints(double StartTimeSeconds, double EndTimeSeconds, double TimeThreshold, float ValueThreshold, FFrameRate TickResolution, TArray<TTuple<double, double>>& InOutPoints)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeys(const TArray<FFrameNumber>& InTimes, const TArray<FMovieSceneFloatValue>& InValues)"
  },
  {
    "label": "GetShowCurve()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetShowCurve()"
  },
  {
    "label": "SetShowCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowCurve(bool bInShowCurve)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (# endif struct TMovieSceneCurveChannelImpl<FMovieSceneFloatChannel> ; using FMovieSceneFloatChannelImpl = TMovieSceneCurveChannelImpl<FMovieSceneFloatChannel> ; } ; template<> struct TStructOpsTypeTraits<FMovieSceneFloatChannel> : public TStructOpsTypeTraitsBase2<FMovieSceneFloatChannel> { enum { WithStructuredSerializeFromMismatchedTag = true,WithSerializer = true,# if WITH_EDITORONLY_DATA WithPostSerialize = true,# endif } ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; template<> struct TMovieSceneChannelTraits<FMovieSceneFloatChannel> : TMovieSceneChannelTraitsBase<FMovieSceneFloatChannel> { # if WITH_EDITOR typedef TMovieSceneExternalValue<float> ExtendedEditorDataType ; # endif } ; EMovieSceneKeyInterpolation)",
    "insertText": "GetInterpolationMode(FMovieSceneFloatChannel* InChannel, const FFrameNumber& InTime, EMovieSceneKeyInterpolation DefaultInterpolationMode)"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKeyToChannel(FMovieSceneFloatChannel* Channel, FFrameNumber InFrameNumber, float InValue, EMovieSceneKeyInterpolation Interpolation)"
  },
  {
    "label": "Dilate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dilate(FMovieSceneFloatChannel* InChannel, FFrameNumber Origin, float DilationFactor)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneFloatChannel* InChannel, FFrameNumber InFrameNumber, float InValue)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValueExistsAtTime(const FMovieSceneFloatChannel* InChannel, FFrameNumber InFrameNumber, const FMovieSceneFloatValue& InValue)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(FMovieSceneFloatChannel* InChannel, FKeyHandle InKeyHandle, float InValue)"
  }
]