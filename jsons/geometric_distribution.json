[
  {
    "label": "_IntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_GEOMETRIC_DISTRIBUTION_H # define _LIBCPP___RANDOM_GEOMETRIC_DISTRIBUTION_H # include<__config> # include<__random / is_valid . h> # include<__random / negative_binomial_distribution . h> # include<iosfwd> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _IntType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { double __p_ ; public : typedef geometric_distribution distribution_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "param_type(double __p = 0.5) : __p_(__p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY double)",
    "insertText": "p()"
  },
  {
    "label": "geometric_distribution()",
    "kind": "Method",
    "detail": "Function (} } ; private : param_type __p_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "geometric_distribution() : geometric_distribution(0.5)"
  },
  {
    "label": "geometric_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "geometric_distribution(double __p) : __p_(__p)"
  },
  {
    "label": "geometric_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "geometric_distribution(double __p = 0.5) : __p_(__p)"
  },
  {
    "label": "geometric_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "geometric_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const geometric_distribution& __x, const geometric_distribution& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _CharT,class _Traits,class _IntType> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const geometric_distribution<_IntType>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _IntType> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, geometric_distribution<_IntType>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef geometric_distribution<_IntType> _Eng ; typedef _Eng::param_type param_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  }
]