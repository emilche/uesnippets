[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "UMaterialInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstance"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FLandscapeToolInteractorPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeToolInteractorPosition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLandscapeBrushData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeBrushData"
  },
  {
    "label": "FLandscapeBrush",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeBrush"
  },
  {
    "label": "FLandscapeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeTool"
  },
  {
    "label": "FLandscapeBrushSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeBrushSet"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLandscapeToolTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeToolTarget"
  },
  {
    "label": "FLandscapeToolInteractorPosition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UObject / GCObject . h \" # include \" UnrealWidgetFwd . h \" # include \" EdMode . h \" # include \" LandscapeEdit . h \" # include \" LandscapeEditTypes . h \" class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class ULandscapeInfo ; class ULandscapeLayerInfoObject ; class UMaterialInstance ; class UMaterialInterface ; class UViewportInteractor ; struct FViewportClick ; struct FLandscapeToolInteractorPosition { FVector2D Position ; bool bModifierPressed ;)",
    "insertText": "FLandscapeToolInteractorPosition(FVector2D InPosition, const bool bInModifierPressed) : Position(InPosition) , bModifierPressed(bInModifierPressed)"
  },
  {
    "label": "FLandscapeBrushData()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ELandscapeBrushType { Normal = 0,Alpha,Component,Gizmo,Splines } ; class FLandscapeBrushData { protected : FIntRect Bounds ; TArray<float> BrushAlpha ; public :)",
    "insertText": "FLandscapeBrushData() : Bounds()"
  },
  {
    "label": "FLandscapeBrushData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeBrushData(FIntRect InBounds) : Bounds(InBounds)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (BrushAlpha .)",
    "insertText": "SetNumZeroed(Bounds.Area())"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetDataPtr()",
    "kind": "Method",
    "detail": "Function (X1 = Bounds . Min . X ; Y1 = Bounds . Min . Y ; X2 = Bounds . Max . X - 1 ; Y2 = Bounds . Max . Y - 1 ; } float*)",
    "insertText": "GetDataPtr(FIntPoint Position)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeBrush : public FGCObject { public : void)",
    "insertText": "MouseMove(float LandscapeX, float LandscapeY)"
  },
  {
    "label": "GetLastMousePosition()",
    "kind": "Method",
    "detail": "Function (TOptional<FVector2D>)",
    "insertText": "GetLastMousePosition()"
  },
  {
    "label": "ApplyBrush()",
    "kind": "Method",
    "detail": "Function (} FLandscapeBrushData)",
    "insertText": "ApplyBrush(const TArray<FLandscapeToolInteractorPosition>& InteractorPositions)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "BeginStroke()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "BeginStroke(float LandscapeX, float LandscapeY, class FLandscapeTool* CurrentTool)"
  },
  {
    "label": "EndStroke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndStroke()"
  },
  {
    "label": "EnterBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterBrush()"
  },
  {
    "label": "LeaveBrush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LeaveBrush()"
  },
  {
    "label": "FLandscapeBrush()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeBrush()"
  },
  {
    "label": "GetBrushMaterial()",
    "kind": "Method",
    "detail": "Function (} UMaterialInterface*)",
    "insertText": "GetBrushMaterial()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetBrushType()",
    "kind": "Method",
    "detail": "Function (ELandscapeBrushType)",
    "insertText": "GetBrushType()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FLandscapeBrushSet()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLandscapeBrushSet {)",
    "insertText": "FLandscapeBrushSet(const TCHAR* InBrushSetName) : BrushSetName(InBrushSetName) , PreviousBrushIndex(0)"
  },
  {
    "label": "FLandscapeBrushSet()",
    "kind": "Method",
    "detail": "Function (} const FName BrushSetName ; TArray<FLandscapeBrush*> Brushes ; int32 PreviousBrushIndex ; ~)",
    "insertText": "FLandscapeBrushSet()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (delete Brushes [ BrushIdx ] ; } } } ; namespace ELandscapeToolTargetTypeMask { enum Type : uint8 { Heightmap = 1<<static_cast<)",
    "insertText": "uint8(ELandscapeToolTargetType::Heightmap), Weightmap = 1 << static_cast<uint8>(ELandscapeToolTargetType::Weightmap), Visibility = 1 << static_cast<uint8>(ELandscapeToolTargetType::Visibility)"
  },
  {
    "label": "FromType()",
    "kind": "Method",
    "detail": "Function (ELandscapeToolTargetTypeMask::Type)",
    "insertText": "FromType(ELandscapeToolTargetType TargetType)"
  },
  {
    "label": "FLandscapeToolTarget()",
    "kind": "Method",
    "detail": "Function (} } struct FLandscapeToolTarget { TWeakObjectPtr<ULandscapeInfo> LandscapeInfo ; ELandscapeToolTargetType TargetType ; TWeakObjectPtr<ULandscapeLayerInfoObject> LayerInfo ; FName LayerName ;)",
    "insertText": "FLandscapeToolTarget() : LandscapeInfo() , TargetType(ELandscapeToolTargetType::Heightmap) , LayerInfo() , LayerName(NAME_None)"
  },
  {
    "label": "EnterTool()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ELandscapeToolType { Normal = 0,Mask,} ; class FLandscapeTool : public FGCObject { public : void)",
    "insertText": "EnterTool()"
  },
  {
    "label": "IsToolActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsToolActive()"
  },
  {
    "label": "BeginTool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BeginTool(FEditorViewportClient* ViewportClient, const FLandscapeToolTarget& Target, const FVector& InHitLocation)"
  },
  {
    "label": "EndTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTool(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "MouseEnter(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 MouseX, int32 MouseY)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "FLandscapeTool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeTool()"
  },
  {
    "label": "GetToolName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetToolName()"
  },
  {
    "label": "GetDisplayMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayMessage()"
  },
  {
    "label": "SetEditRenderType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditRenderType()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "HitTrace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HitTrace(const FVector& TraceStart, const FVector& TraceEnd, FVector& OutHitLocation)"
  },
  {
    "label": "CanToolBeActivated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanToolBeActivated()"
  },
  {
    "label": "GetToolType()",
    "kind": "Method",
    "detail": "Function (} ELandscapeToolType)",
    "insertText": "GetToolType()"
  },
  {
    "label": "CreateMaterialInstance()",
    "kind": "Method",
    "detail": "Function (} public : int32 PreviousBrushIndex = INDEX_NONE ; TArray<FName> ValidBrushes ; } ; namespace UE::Landscape::Editor::Tool { UMaterialInstance*)",
    "insertText": "CreateMaterialInstance(UMaterialInterface* BaseMaterial)"
  }
]