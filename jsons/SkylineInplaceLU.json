[
  {
    "label": "SkylineInplaceLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SkylineInplaceLU"
  },
  {
    "label": "SkylineInplaceLU()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SKYLINEINPLACELU_H # define EIGEN_SKYLINEINPLACELU_H namespace Eigen { template<MatrixType> class SkylineInplaceLU { protected : typedef MatrixType::Scalar Scalar ; typedef MatrixType::Index Index ; typedef NumTraits<MatrixType::Scalar>::Real RealScalar ; public :)",
    "insertText": "SkylineInplaceLU(MatrixType& matrix, int flags = 0) : m_flags(flags), m_status(0), m_lu(matrix)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (m_precision =)",
    "insertText": "RealScalar(0.1) * Eigen::dummy_precision<RealScalar > ()"
  },
  {
    "label": "computeRowMajor()",
    "kind": "Method",
    "detail": "Function (m_lu . IsRowMajor ?)",
    "insertText": "computeRowMajor() : compute()"
  },
  {
    "label": "setPrecision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPrecision(RealScalar v)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (m_precision = v ; } RealScalar)",
    "insertText": "precision()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (m_flags = f ; } int)",
    "insertText": "flags()"
  },
  {
    "label": "orderingMethod()",
    "kind": "Method",
    "detail": "Function (m_flags = m ; } int)",
    "insertText": "orderingMethod()"
  },
  {
    "label": "computeRowMajor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRowMajor()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (template<BDerived,XDerived> bool)",
    "insertText": "solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived>* x, const int transposed = 0)"
  },
  {
    "label": "succeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "succeeded(void)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const size_t rows = m_lu .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const size_t cols = m_lu .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows == cols && \"We do not (yet) support rectangular LU.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!m_lu.IsRowMajor && \"LU decomposition does not work with rowMajor Storage\")"
  },
  {
    "label": "coeffDiag()",
    "kind": "Method",
    "detail": "Function (const double pivot = m_lu .)",
    "insertText": "coeffDiag(row)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index& col = row ;)",
    "insertText": "for(typename MatrixType::InnerLowerIterator lIt(m_lu, col); lIt; ++lIt)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (lIt .)",
    "insertText": "valueRef()"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (} MatrixType::InnerLowerIterator)",
    "insertText": "lIt(m_lu, col)"
  },
  {
    "label": "uItPivot()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerUpperIterator)",
    "insertText": "uItPivot(m_lu, row)"
  },
  {
    "label": "uIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerUpperIterator)",
    "insertText": "uIt(m_lu, rrow)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (const double coef = lIt .)",
    "insertText": "value()"
  },
  {
    "label": "uItPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uItPivot(rrow - row - 1)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (uIt .)",
    "insertText": "valueRef() -= uItPivot.value()"
  },
  {
    "label": "lIt3()",
    "kind": "Method",
    "detail": "Function (+ + uIt ; + + uItPivot ; } + + lIt ; } MatrixType::InnerLowerIterator)",
    "insertText": "lIt3(m_lu, col)"
  },
  {
    "label": "coeffRefLower()",
    "kind": "Method",
    "detail": "Function (m_lu .)",
    "insertText": "coeffRefLower(rrow, row + i + 1) -= uItPivot.value()"
  },
  {
    "label": "lIt2()",
    "kind": "Method",
    "detail": "Function (+ + uItPivot ; } + + lIt3 ; } MatrixType::InnerLowerIterator)",
    "insertText": "lIt2(m_lu, col)"
  },
  {
    "label": "coeffRefDiag()",
    "kind": "Method",
    "detail": "Function (m_lu .)",
    "insertText": "coeffRefDiag(rrow) -= uItPivot.value()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_lu.IsRowMajor && \"You're trying to apply rowMajor decomposition on a ColMajor matrix !\")"
  },
  {
    "label": "llIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerLowerIterator)",
    "insertText": "llIt(m_lu, row)"
  },
  {
    "label": "coeffDiag()",
    "kind": "Method",
    "detail": "Function (const double diag = m_lu .)",
    "insertText": "coeffDiag(col)"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerLowerIterator)",
    "insertText": "lIt(m_lu, row)"
  },
  {
    "label": "uIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerUpperIterator)",
    "insertText": "uIt(m_lu, col)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (const Index offset = lIt .)",
    "insertText": "col() - uIt.row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index stop = offset> 0 ? col - lIt .)",
    "insertText": "col() : col - uIt.row()"
  },
  {
    "label": "rowVal()",
    "kind": "Method",
    "detail": "Function (# ifdef VECTORIZE Map<VectorXd>)",
    "insertText": "rowVal(lIt.valuePtr() + (offset > 0 ? 0 : -offset), stop)"
  },
  {
    "label": "colVal()",
    "kind": "Method",
    "detail": "Function (Map<VectorXd>)",
    "insertText": "colVal(uIt.valuePtr() + (offset > 0 ? offset : 0), stop)"
  },
  {
    "label": "coeffLower()",
    "kind": "Method",
    "detail": "Function (Scalar newCoeff = m_lu .)",
    "insertText": "coeffLower(row, col) - rowVal.dot(colVal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(offset > 0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (const Scalar tmp = newCoeff ; newCoeff = tmp - lIt .)",
    "insertText": "value() * uIt.value()"
  },
  {
    "label": "coeffRefLower()",
    "kind": "Method",
    "detail": "Function (+ + lIt ; + + uIt ; } # endif m_lu .)",
    "insertText": "coeffRefLower(row, col)"
  },
  {
    "label": "uuIt()",
    "kind": "Method",
    "detail": "Function (} } const Index col = row ; MatrixType::InnerUpperIterator)",
    "insertText": "uuIt(m_lu, col)"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerLowerIterator)",
    "insertText": "lIt(m_lu, rrow)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index stop = offset> 0 ? rrow - lIt .)",
    "insertText": "col() : rrow - uIt.row()"
  },
  {
    "label": "coeffUpper()",
    "kind": "Method",
    "detail": "Function (Scalar newCoeff = m_lu .)",
    "insertText": "coeffUpper(rrow, col) - rowVal.dot(colVal)"
  },
  {
    "label": "coeffRefUpper()",
    "kind": "Method",
    "detail": "Function (+ + lIt ; + + uIt ; } # endif m_lu .)",
    "insertText": "coeffRefUpper(rrow, col)"
  },
  {
    "label": "uIt()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerUpperIterator)",
    "insertText": "uIt(m_lu, row)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index stop = offset> 0 ? lIt .)",
    "insertText": "size() : uIt.size()"
  },
  {
    "label": "coeffDiag()",
    "kind": "Method",
    "detail": "Function (Scalar newCoeff = m_lu .)",
    "insertText": "coeffDiag(row) - rowVal.dot(colVal)"
  },
  {
    "label": "coeffRefDiag()",
    "kind": "Method",
    "detail": "Function (+ + lIt ; + + uIt ; } # endif m_lu .)",
    "insertText": "coeffRefDiag(row)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType> template<BDerived,XDerived> bool SkylineInplaceLU<MatrixType)",
    "insertText": "solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived>* x, const int transposed)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (x ->)",
    "insertText": "coeffRef(row) = b.coeff(row)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar newVal = x ->)",
    "insertText": "coeff(row)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index col = lIt .)",
    "insertText": "col()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (newVal - = x ->)",
    "insertText": "coeff(col++) * lIt.value()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (+ + lIt ; } x ->)",
    "insertText": "coeffRef(row)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index col = rows - 1; col > 0; col--)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (x ->)",
    "insertText": "coeffRef(col) = x->coeff(col) / m_lu.coeffDiag(col)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const Scalar x_col = x ->)",
    "insertText": "coeff(col)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (uIt + = uIt .)",
    "insertText": "size()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (x ->)",
    "insertText": "coeffRef(uIt.row()) -= x_col * uIt.value()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (uIt + = - 1 ; } } x ->)",
    "insertText": "coeffRef(0) = x->coeff(0) / m_lu.coeffDiag(0)"
  }
]