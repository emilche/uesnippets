[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MyFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MyFile"
  },
  {
    "label": "calls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "calls"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "IOItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IOItem"
  },
  {
    "label": "MessagePumpWin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "MessagePumpWin()"
  },
  {
    "label": "MessagePumpForUI()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "MessagePumpForUI()"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObserver(Observer* observer)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(Observer* obseerver)"
  },
  {
    "label": "MessageCallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MessageCallback(UINT message,\n                       WPARAM wparam,\n                       LPARAM lparam,\n                       LRESULT* result)"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "WaitForWork(Delegate::NextWorkInfo next_work_info)"
  },
  {
    "label": "HandleWorkMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWorkMessage()"
  },
  {
    "label": "HandleTimerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimerMessage()"
  },
  {
    "label": "ScheduleNativeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNativeTimer(Delegate::NextWorkInfo next_work_info)"
  },
  {
    "label": "KillNativeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillNativeTimer()"
  },
  {
    "label": "ProcessNextWindowsMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessNextWindowsMessage()"
  },
  {
    "label": "ProcessMessageHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessageHelper(const MSG& msg)"
  },
  {
    "label": "ProcessPumpReplacementMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPumpReplacementMessage()"
  },
  {
    "label": "IOHandler()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "IOHandler(const Location& from_here)"
  },
  {
    "label": "RegisterIOHandler()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterIOHandler(HANDLE file_handle, IOHandler* handler)"
  },
  {
    "label": "RegisterJobObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterJobObject(HANDLE job_handle, IOHandler* handler)"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "WaitForWork(Delegate::NextWorkInfo next_work_info)"
  },
  {
    "label": "GetIOItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIOItem(DWORD timeout, IOItem* item)"
  },
  {
    "label": "ProcessInternalIOItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessInternalIOItem(const IOItem& item)"
  },
  {
    "label": "WaitForIOCompletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForIOCompletion(DWORD timeout)"
  }
]