[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "IOItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IOItem"
  },
  {
    "label": "MessagePumpWin()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_WIN_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_WIN_H_ # include<windows . h> # include<atomic> # include<memory> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / observer_list . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time . h \" # include \" base / win / message_window . h \" # include \" base / win / scoped_handle . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT MessagePumpWin : public MessagePump { public :)",
    "insertText": "MessagePumpWin()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "RunState()",
    "kind": "Method",
    "detail": "Function (protected : struct RunState {)",
    "insertText": "RunState(Delegate* delegate_in) : delegate(delegate_in)"
  },
  {
    "label": "DoRunLoop()",
    "kind": "Method",
    "detail": "Function (} const raw_ptr<Delegate> delegate ; bool should_quit = false ; bool is_nested = false ; } ; void)",
    "insertText": "DoRunLoop()"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (std::atomic_bool work_scheduled_ { false } ; RunState* run_state_ = nullptr ;)",
    "insertText": "THREAD_CHECKER(bound_thread_)"
  },
  {
    "label": "MessagePumpForUI()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT MessagePumpForUI : public MessagePumpWin { public :)",
    "insertText": "MessagePumpForUI()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "WillDispatchMSG()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Observer { public : void)",
    "insertText": "WillDispatchMSG(const MSG& msg)"
  },
  {
    "label": "DidDispatchMSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidDispatchMSG(const MSG& msg)"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddObserver(Observer* observer)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(Observer* obseerver)"
  },
  {
    "label": "MessageCallback()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "MessageCallback(UINT message, WPARAM wparam, LPARAM lparam, LRESULT* result)"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (NOINLINE void NOT_TAIL_CALLED)",
    "insertText": "WaitForWork(Delegate::NextWorkInfo next_work_info)"
  },
  {
    "label": "HandleWorkMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWorkMessage()"
  },
  {
    "label": "HandleTimerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimerMessage()"
  },
  {
    "label": "ScheduleNativeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNativeTimer(Delegate::NextWorkInfo next_work_info)"
  },
  {
    "label": "KillNativeTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillNativeTimer()"
  },
  {
    "label": "ProcessNextWindowsMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessNextWindowsMessage()"
  },
  {
    "label": "ProcessMessageHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessageHelper(const MSG& msg)"
  },
  {
    "label": "ProcessPumpReplacementMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPumpReplacementMessage()"
  },
  {
    "label": "IOContext()",
    "kind": "Method",
    "detail": "Function (base::win::MessageWindow message_window_ ; absl::optional<TimeTicks> installed_native_timer_ ; bool in_native_loop_ = false ; ObserverList<Observer>::Unchecked observers_ ; } ; class BASE_EXPORT MessagePumpForIO : public MessagePumpWin { public : struct BASE_EXPORT IOContext {)",
    "insertText": "IOContext()"
  },
  {
    "label": "IOHandler()",
    "kind": "Method",
    "detail": "Function (OVERLAPPED overlapped ; } ; class BASE_EXPORT IOHandler { public :)",
    "insertText": "IOHandler(const Location& from_here)"
  },
  {
    "label": "IOHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IOHandler()"
  },
  {
    "label": "IOHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IOHandler(const IOHandler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IOHandler&)",
    "insertText": "operator(const IOHandler&)"
  },
  {
    "label": "OnIOCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIOCompleted(IOContext* context, DWORD bytes_transfered, DWORD error)"
  },
  {
    "label": "io_handler_location()",
    "kind": "Method",
    "detail": "Function (const Location&)",
    "insertText": "io_handler_location()"
  },
  {
    "label": "MessagePumpForIO()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessagePumpForIO()"
  },
  {
    "label": "RegisterIOHandler()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterIOHandler(HANDLE file_handle, IOHandler* handler)"
  },
  {
    "label": "RegisterJobObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterJobObject(HANDLE job_handle, IOHandler* handler)"
  },
  {
    "label": "GetIOItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIOItem(DWORD timeout, IOItem* item)"
  },
  {
    "label": "ProcessInternalIOItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessInternalIOItem(const IOItem& item)"
  },
  {
    "label": "WaitForIOCompletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForIOCompletion(DWORD timeout)"
  }
]