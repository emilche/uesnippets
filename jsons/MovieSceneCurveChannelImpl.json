[
  {
    "label": "FCachedInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolation"
  },
  {
    "label": "TMovieSceneCurveChannelImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneCurveChannelImpl"
  },
  {
    "label": "FTimeEvaluationCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeEvaluationCache"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannel . h \" # include \" Channels / MovieSceneChannelData . h \" # include \" Channels / MovieSceneChannelProxy . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Channels / MovieSceneCurveChannelCommon . h \" # include \" Curves / RealCurve . h \" # include \" Curves / RichCurve . h \" # include \" KeyParams . h \" # include \" MovieSceneFwd . h \" namespace UE::MovieScene::Interpolation { struct FCachedInterpolation ; } template<ChannelType> struct TMovieSceneCurveChannelImpl { using ChannelValueType = ChannelType::ChannelValueType ; using CurveValueType = ChannelType::CurveValueType ; struct FTimeEvaluationCache { double InterpValue = 0 . 0 ; int32 Index1 = INDEX_NONE,Index2 = INDEX_NONE ; int32 CachedNumFrames = INDEX_NONE ; FFrameTime CacheFrameTime ; } ; bool)",
    "insertText": "Evaluate(const ChannelType* InChannel, FFrameTime InTime, CurveValueType& OutValue)"
  },
  {
    "label": "GetInterpolationForTime()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForTime(const ChannelType* InChannel, FFrameTime InTime)"
  },
  {
    "label": "GetInterpolationForTime()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForTime(const ChannelType* InChannel, FTimeEvaluationCache* InOutEvaluationCache, FFrameTime InTime)"
  },
  {
    "label": "GetInterpolationForKey()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForKey(const ChannelType* InChannel, int32 KeyIndex, const UE::MovieScene::FCycleParams* Params = nullptr)"
  },
  {
    "label": "GetInterpolationForKey()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::Interpolation::FCachedInterpolation)",
    "insertText": "GetInterpolationForKey(const ChannelType* InChannel, int32 KeyIndex1, int32 KeyIndex2, const UE::MovieScene::FCycleParams* Params = nullptr)"
  },
  {
    "label": "EvaluateWithCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateWithCache(const ChannelType* InChannel, FTimeEvaluationCache* InOutEvaluationCache, FFrameTime InTime, CurveValueType& OutValue)"
  },
  {
    "label": "PopulateCurvePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCurvePoints(const ChannelType* InChannel, double StartTimeSeconds, double EndTimeSeconds, double TimeThreshold, CurveValueType ValueThreshold, FFrameRate TickResolution, TArray<TTuple<double, double>>& InOutPoints)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValueExistsAtTime(const ChannelType* Channel, FFrameNumber InFrameNumber, typename ChannelType::CurveValueType Value)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValueExistsAtTime(const ChannelType* Channel, FFrameNumber InFrameNumber, const typename ChannelType::ChannelValueType& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ChannelType* InChannel, TArray<FFrameNumber> InTimes, TArray<ChannelValueType> InValues)"
  },
  {
    "label": "AddConstantKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddConstantKey(ChannelType* InChannel, FFrameNumber InTime, CurveValueType InValue)"
  },
  {
    "label": "AddLinearKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddLinearKey(ChannelType* InChannel, FFrameNumber InTime, CurveValueType InValue)"
  },
  {
    "label": "AddCubicKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddCubicKey(ChannelType* InChannel, FFrameNumber InTime, CurveValueType InValue, ERichCurveTangentMode TangentMode = RCTM_Auto, const FMovieSceneTangentData& Tangent = FMovieSceneTangentData())"
  },
  {
    "label": "CalcSmartTangent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcSmartTangent(ChannelType* InChannel, int32 Index)"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSetTangents(ChannelType* InChannel, float Tension = 0.f)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKeysFrom(ChannelType* InChannel, FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFrameResolution(ChannelType* InChannel, FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Optimize(ChannelType* InChannel, const FKeyDataOptimizationParams& InParameters)"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKeyToChannel(ChannelType* InChannel, FFrameNumber InFrameNumber, float InValue, EMovieSceneKeyInterpolation Interpolation)"
  },
  {
    "label": "GetTangentValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTangentValue(ChannelType* InChannel, const FFrameNumber InFrameTime, const float InValue, double InDeltaTime)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation)",
    "insertText": "GetInterpolationMode(ChannelType* InChannel, const FFrameNumber& InTime, EMovieSceneKeyInterpolation DefaultInterpolationMode)"
  },
  {
    "label": "CacheExtrapolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheExtrapolation(const ChannelType* InChannel, FFrameTime InTime, UE::MovieScene::Interpolation::FCachedInterpolation& OutValue)"
  },
  {
    "label": "Dilate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dilate(ChannelType* InChannel, FFrameNumber Origin, float DilationFactor)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(ChannelType* InChannel, FKeyHandle InKeyHandle, typename ChannelType::CurveValueType InValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(ChannelType* InChannel, FArchive& Ar)"
  },
  {
    "label": "SerializeFromRichCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromRichCurve(ChannelType* InChannel, const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "SerializeChannelValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeChannelValue(ChannelValueType& InValue, FArchive& Ar)"
  },
  {
    "label": "CopyChannel()",
    "kind": "Method",
    "detail": "Function (template<OtherChannelType> void)",
    "insertText": "CopyChannel(const OtherChannelType* InSourceChannel, ChannelType* OutDestinationChannel)"
  },
  {
    "label": "InsertKeyInternal()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "InsertKeyInternal(ChannelType* InChannel, FFrameNumber InTime)"
  },
  {
    "label": "RefineCurvePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefineCurvePoints(const ChannelType* InChannel, FFrameRate TickResolution, double TimeThreshold, CurveValueType ValueThreshold, TArray<TTuple<double, double>>& InOutPoints)"
  },
  {
    "label": "EvaluateCached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateCached(const ChannelType* InChannel, FTimeEvaluationCache* InOutEvaluationCache, FFrameTime InTime, CurveValueType& OutValue)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (using OtherChannelValueType = OtherChannelType::ChannelValueType ; using OtherCurveValueType = OtherChannelType::CurveValueType ; OutDestinationChannel -> PreInfinityExtrap = InSourceChannel -> PreInfinityExtrap ; OutDestinationChannel -> PostInfinityExtrap = InSourceChannel -> PostInfinityExtrap ; TOptional<OtherCurveValueType> OtherChannelDefaultValue = InSourceChannel ->)",
    "insertText": "GetDefault()"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (OutDestinationChannel ->)",
    "insertText": "DefaultValue(CurveValueType)OtherChannelDefaultValue.Get(0.f)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (OutDestinationChannel -> bHasDefaultValue = OtherChannelDefaultValue .)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FFrameNumber> OtherChannelTimes = InSourceChannel ->)",
    "insertText": "GetTimes()"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (TArrayView<const OtherChannelValueType> OtherChannelValues = InSourceChannel ->)",
    "insertText": "GetValues()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutDestinationChannel -> Times .)",
    "insertText": "Empty(OtherChannelTimes.Num())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutDestinationChannel -> Values .)",
    "insertText": "Empty(OtherChannelValues.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDestinationChannel -> Times .)",
    "insertText": "Add(OtherChannelTimes[Index])"
  },
  {
    "label": "NewDoubleValue()",
    "kind": "Method",
    "detail": "Function (const OtherChannelValueType& OtherChannelValue = OtherChannelValues [ Index ] ; ChannelValueType)",
    "insertText": "NewDoubleValue((CurveValueType)OtherChannelValue.Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewDoubleValue . Tangent = OtherChannelValue . Tangent ; NewDoubleValue . InterpMode = OtherChannelValue . InterpMode ; NewDoubleValue . TangentMode = OtherChannelValue . TangentMode ; OutDestinationChannel -> Values .)",
    "insertText": "Add(NewDoubleValue)"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (} OutDestinationChannel -> TickResolution = InSourceChannel ->)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "GetShowCurve()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA OutDestinationChannel -> bShowCurve = InSourceChannel ->)",
    "insertText": "GetShowCurve()"
  }
]