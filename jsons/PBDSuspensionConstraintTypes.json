[
  {
    "label": "FPBDSuspensionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionConstraints"
  },
  {
    "label": "FPBDSuspensionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionConstraintHandle"
  },
  {
    "label": "FSuspensionLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuspensionLocation"
  },
  {
    "label": "FSingleParticlePhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleParticlePhysicsProxy"
  },
  {
    "label": "FParticleProxyProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleProxyProperty"
  },
  {
    "label": "FPBDSuspensionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionSettings"
  },
  {
    "label": "FPBDSuspensionResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionResults"
  },
  {
    "label": "FPBDSuspensionSolverSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionSolverSettings"
  },
  {
    "label": "FPBDSuspensionSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Vector . h \" namespace Chaos { class FPBDSuspensionConstraints ; class FPBDSuspensionConstraintHandle ; struct FSuspensionLocation { FVec3 Location = FVec3::ZeroVector ; } ; class FSingleParticlePhysicsProxy ; struct FParticleProxyProperty { FSingleParticlePhysicsProxy* ParticleProxy = nullptr ; } ; class FPBDSuspensionSettings { public :)",
    "insertText": "FPBDSuspensionSettings() : Enabled(false) , HardstopStiffness(1) , HardstopVelocityCompensation(1) , SpringPreload(0) , SpringStiffness(0) , SpringDamping(0) , MinLength(0) , MaxLength(0) , Axis(0,0,1) , Target(0, 0, 0) , Normal(0, 0, 0)"
  },
  {
    "label": "FPBDSuspensionSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSuspensionSettings(bool InEnabled, FReal InHardstopStiffness, FReal InHardstopVelocityCompensation, FReal InSpringPreload, FReal InSpringStiffness, FReal InDamping, FReal InMinLength, FReal InMaxLength, const FVec3& InAxis, const FVec3& InTarget, const FVec3& InNormal) : Enabled(InEnabled) , HardstopStiffness(InHardstopStiffness) , HardstopVelocityCompensation(InHardstopVelocityCompensation) , SpringPreload(InSpringPreload) , SpringStiffness(InSpringStiffness) , SpringDamping(InDamping) , MinLength(InMinLength) , MaxLength(InMaxLength) , Axis(InAxis) , Target(InTarget) , Normal(InNormal)"
  },
  {
    "label": "FPBDSuspensionResults()",
    "kind": "Method",
    "detail": "Function (} bool Enabled ; FReal HardstopStiffness ; FReal HardstopVelocityCompensation ; FReal SpringPreload ; FReal SpringStiffness ; FReal SpringDamping ; FReal MinLength ; FReal MaxLength ; FVec3 Axis ; FVec3 Target ; FVec3 Normal ; } ; class FPBDSuspensionResults { public :)",
    "insertText": "FPBDSuspensionResults() : NetPushOut(FVec3(0)) , Length(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FPBDSuspensionResults()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FPBDSuspensionResults()"
  },
  {
    "label": "FPBDSuspensionSolverSettings()",
    "kind": "Method",
    "detail": "Function (} FVec3 NetPushOut ; FVec3 HardStopNetPushOut ; FVec3 HardStopNetImpulse ; FReal Length ; } ; class FPBDSuspensionSolverSettings { public :)",
    "insertText": "FPBDSuspensionSolverSettings()"
  }
]