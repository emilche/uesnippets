[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "FInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalization"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FICUCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUCultureImplementation"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FTextChronoFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextChronoFormatter"
  },
  {
    "label": "FICUBreakIteratorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUBreakIteratorManager"
  },
  {
    "label": "UEToICU()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Set . h \" # include \" Containers / Map . h \" # include \" Templates / SharedPointer . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / Culture . h \" # include \" Internationalization / CultureImplementation . h \" struct FDecimalNumberFormattingRules ; # if UE_ENABLE_ICU THIRD_PARTY_INCLUDES_START # include<unicode / locid . h> # include<unicode / brkiter . h> # include<unicode / coll . h> # include<unicode / numfmt . h> # include<unicode / decimfmt . h> PRAGMA_PUSH_PLATFORM_DEFAULT_PACKING # include<unicode / datefmt . h> PRAGMA_POP_PLATFORM_DEFAULT_PACKING # include<unicode / plurrule . h> THIRD_PARTY_INCLUDES_END struct FDecimalNumberFormattingRules ; class FInternationalization ; UColAttributeValue)",
    "insertText": "UEToICU(const ETextComparisonLevel::Type ComparisonLevel)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (UColAttributeValue Value ;)",
    "insertText": "switch(ComparisonLevel)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (icu::DateFormat::EStyle Value ;)",
    "insertText": "switch(DateTimeStyle)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (icu::DecimalFormat::ERoundingMode Value ;)",
    "insertText": "switch(RoundingMode)"
  },
  {
    "label": "FICUCultureImplementation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FICUCultureImplementation()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetEnglishName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnglishName()"
  },
  {
    "label": "GetKeyboardLayoutId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKeyboardLayoutId()"
  },
  {
    "label": "GetLCID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLCID()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetUnrealLegacyThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUnrealLegacyThreeLetterISOLanguageName()"
  },
  {
    "label": "GetThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetThreeLetterISOLanguageName()"
  },
  {
    "label": "GetTwoLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTwoLetterISOLanguageName()"
  },
  {
    "label": "GetNativeLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeLanguage()"
  },
  {
    "label": "GetNativeRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeRegion()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetScript()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScript()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVariant()"
  },
  {
    "label": "IsRightToLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightToLeft()"
  },
  {
    "label": "GetDecimalNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetDecimalNumberFormattingRules()"
  },
  {
    "label": "GetPercentFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetPercentFormattingRules()"
  },
  {
    "label": "GetCurrencyFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetCurrencyFormattingRules(const FString& InCurrencyCode)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int32 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(double Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetValidPluralForms()",
    "kind": "Method",
    "detail": "Function (const TArray<ETextPluralForm>&)",
    "insertText": "GetValidPluralForms(const ETextPluralType PluralType)"
  },
  {
    "label": "GetCanonicalName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCanonicalName(const FString& Name, FInternationalization& I18N)"
  },
  {
    "label": "GetBreakIterator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::BreakIterator>)",
    "insertText": "GetBreakIterator(const EBreakIteratorType Type)"
  },
  {
    "label": "GetCollator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::Collator,ESPMode::ThreadSafe>)",
    "insertText": "GetCollator(const ETextComparisonLevel::Type ComparisonLevel)"
  },
  {
    "label": "GetDateFormatter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::DateFormat,ESPMode::ThreadSafe>)",
    "insertText": "GetDateFormatter(const EDateTimeStyle::Type DateStyle, const FString& TimeZone)"
  },
  {
    "label": "GetTimeFormatter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::DateFormat,ESPMode::ThreadSafe>)",
    "insertText": "GetTimeFormatter(const EDateTimeStyle::Type TimeStyle, const FString& TimeZone)"
  },
  {
    "label": "GetDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::DateFormat,ESPMode::ThreadSafe>)",
    "insertText": "GetDateTimeFormatter(const EDateTimeStyle::Type DateStyle, const EDateTimeStyle::Type TimeStyle, const FString& TimeZone)"
  },
  {
    "label": "GetDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const icu::DateFormat,ESPMode::ThreadSafe>)",
    "insertText": "GetDateTimeFormatter(const FString& CustomPattern, const FString& TimeZone)"
  }
]