[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "FInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalization"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FICUCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUCultureImplementation"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FTextChronoFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextChronoFormatter"
  },
  {
    "label": "FICUBreakIteratorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUBreakIteratorManager"
  },
  {
    "label": "FICUCultureImplementation()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FICUCultureImplementation(const FString& LocaleName)"
  },
  {
    "label": "GetCanonicalName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCanonicalName(const FString& Name, FInternationalization& I18N)"
  },
  {
    "label": "GetBreakIterator()",
    "kind": "Method",
    "detail": "Function (icu::BreakIterator>)",
    "insertText": "GetBreakIterator(const EBreakIteratorType Type)"
  },
  {
    "label": "GetCollator()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetCollator(const ETextComparisonLevel::Type ComparisonLevel)"
  },
  {
    "label": "GetDateFormatter()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetDateFormatter(const EDateTimeStyle::Type DateStyle, const FString& TimeZone)"
  },
  {
    "label": "GetTimeFormatter()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetTimeFormatter(const EDateTimeStyle::Type TimeStyle, const FString& TimeZone)"
  },
  {
    "label": "GetDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetDateTimeFormatter(const EDateTimeStyle::Type DateStyle, const EDateTimeStyle::Type TimeStyle, const FString& TimeZone)"
  },
  {
    "label": "GetDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetDateTimeFormatter(const FString& CustomPattern, const FString& TimeZone)"
  }
]