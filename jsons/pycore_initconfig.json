[
  {
    "label": "pyruntimestate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pyruntimestate"
  },
  {
    "label": "_PyArgv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_PyArgv"
  },
  {
    "label": "_PyStatus_GET_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_CORECONFIG_H # define Py_INTERNAL_CORECONFIG_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif struct pyruntimestate ; # ifdef _MSC_VER # define)",
    "insertText": "_PyStatus_GET_FUNC() __FUNCTION__ #else # define _PyStatus_GET_FUNC() __func__ #endif #define _PyStatus_OK() \\ (PyStatus)"
  },
  {
    "label": "_PyStatus_ERR()",
    "kind": "Method",
    "detail": "Function (. _type = _PyStatus_TYPE_OK,} # define)",
    "insertText": "_PyStatus_ERR(ERR_MSG) \\ (PyStatus)"
  },
  {
    "label": "_PyStatus_GET_FUNC()",
    "kind": "Method",
    "detail": "Function (\\ . _type = _PyStatus_TYPE_ERROR,\\ . func =)",
    "insertText": "_PyStatus_GET_FUNC(), \\ .err_msg = (ERR_MSG)} #define _PyStatus_NO_MEMORY() _PyStatus_ERR(\"memory allocation failed\") #define _PyStatus_EXIT(EXITCODE) \\ (PyStatus)"
  },
  {
    "label": "exitcode()",
    "kind": "Method",
    "detail": "Function (\\ . _type = _PyStatus_TYPE_EXIT,\\ .)",
    "insertText": "exitcode(EXITCODE)} #define _PyStatus_IS_ERROR(err) \\ (err._type == _PyStatus_TYPE_ERROR) #define _PyStatus_IS_EXIT(err) \\ (err._type == _PyStatus_TYPE_EXIT) #define _PyStatus_EXCEPTION(err) \\ (err._type != _PyStatus_TYPE_OK) #define _PyStatus_UPDATE_FUNC(err)"
  },
  {
    "label": "_PyStatus_GET_FUNC()",
    "kind": "Method",
    "detail": "Function (err . func =)",
    "insertText": "_PyStatus_GET_FUNC()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) PyObject* _PyErr_SetFromPyStatus(PyStatus status)"
  },
  {
    "label": "_PyWideStringList_INIT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_PyWideStringList_INIT(PyWideStringList)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (. length = 0,. items = NULL } # ifndef NDEBUG)",
    "insertText": "PyAPI_FUNC(int) _PyWideStringList_CheckConsistency(const PyWideStringList *list)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PyAPI_FUNC(void) _PyWideStringList_Clear(PyWideStringList *list)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyWideStringList_Copy(PyWideStringList *list, const PyWideStringList *list2)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyStatus) _PyWideStringList_Extend(PyWideStringList *list, const PyWideStringList *list2)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _PyWideStringList_AsList(const PyWideStringList *list)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (typedef struct _PyArgv { Py_ssize_t argc ; int use_bytes_argv ; char* const* bytes_argv ; wchar_t* const* wchar_argv ; } _PyArgv ;)",
    "insertText": "PyAPI_FUNC(PyStatus) _PyArgv_AsWstrList(const _PyArgv *args, PyWideStringList *list)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _Py_str_to_int( const char *str, int *result)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(const wchar_t*) _Py_get_xoption( const PyWideStringList *xoptions, const wchar_t *name)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(const char*) _Py_GetEnv( int use_environment, const char *name)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_get_env_flag( int use_environment, int *flag, const char *name)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _Py_ClearArgcArgv(void)"
  },
  {
    "label": "_PyPreCmdline_INIT()",
    "kind": "Method",
    "detail": "Function (typedef struct { PyWideStringList argv ; PyWideStringList xoptions ; int isolated ; int use_environment ; int dev_mode ; int warn_default_encoding ; } _PyPreCmdline ; # define)",
    "insertText": "_PyPreCmdline_INIT(_PyPreCmdline)"
  },
  {
    "label": "_PyPreCmdline_Clear()",
    "kind": "Method",
    "detail": "Function (\\ . use_environment = - 1,\\ . isolated = - 1,\\ . dev_mode = - 1 } void)",
    "insertText": "_PyPreCmdline_Clear(_PyPreCmdline *cmdline)"
  },
  {
    "label": "_PyPreCmdline_SetArgv()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreCmdline_SetArgv(_PyPreCmdline *cmdline, const _PyArgv *args)"
  },
  {
    "label": "_PyPreCmdline_SetConfig()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreCmdline_SetConfig(const _PyPreCmdline *cmdline, PyConfig *config)"
  },
  {
    "label": "_PyPreCmdline_Read()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreCmdline_Read(_PyPreCmdline *cmdline, const PyPreConfig *preconfig)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyPreConfig_InitCompatConfig(PyPreConfig *preconfig)"
  },
  {
    "label": "_PyPreConfig_InitFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyPreConfig_InitFromConfig(PyPreConfig *preconfig, const PyConfig *config)"
  },
  {
    "label": "_PyPreConfig_InitFromPreConfig()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreConfig_InitFromPreConfig(PyPreConfig *preconfig, const PyPreConfig *config2)"
  },
  {
    "label": "_PyPreConfig_AsDict()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyPreConfig_AsDict(const PyPreConfig *preconfig)"
  },
  {
    "label": "_PyPreConfig_GetConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyPreConfig_GetConfig(PyPreConfig *preconfig, const PyConfig *config)"
  },
  {
    "label": "_PyPreConfig_Read()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreConfig_Read(PyPreConfig *preconfig, const _PyArgv *args)"
  },
  {
    "label": "_PyPreConfig_Write()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyPreConfig_Write(const PyPreConfig *preconfig)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (typedef enum { _PyConfig_INIT_COMPAT = 1,_PyConfig_INIT_PYTHON = 2,_PyConfig_INIT_ISOLATED = 3 } _PyConfigInitEnum ;)",
    "insertText": "PyAPI_FUNC(void) _PyConfig_InitCompatConfig(PyConfig *config)"
  },
  {
    "label": "_PyConfig_Copy()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_Copy(PyConfig *config, const PyConfig *config2)"
  },
  {
    "label": "_PyConfig_InitPathConfig()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_InitPathConfig(PyConfig *config, int compute_path_config)"
  },
  {
    "label": "_PyConfig_InitImportConfig()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_InitImportConfig(PyConfig *config)"
  },
  {
    "label": "_PyConfig_Read()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_Read(PyConfig *config, int compute_path_config)"
  },
  {
    "label": "_PyConfig_Write()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_Write(const PyConfig *config, struct pyruntimestate *runtime)"
  },
  {
    "label": "_PyConfig_SetPyArgv()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyConfig_SetPyArgv(PyConfig *config, const _PyArgv *args)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _PyConfig_AsDict(const PyConfig *config)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyConfig_FromDict(PyConfig *config, PyObject *dict)"
  },
  {
    "label": "_Py_DumpPathConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_DumpPathConfig(PyThreadState *tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyObject*) _Py_Get_Getpath_CodeObject(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (int _Py_global_config_int_max_str_digits ;)",
    "insertText": "PyAPI_FUNC(PyObject*) _Py_GetConfigsAsDict(void)"
  }
]