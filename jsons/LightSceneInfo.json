[
  {
    "label": "FLightPrimitiveInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightPrimitiveInteraction"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FMobileMovableLocalLightShadowParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileMovableLocalLightShadowParameters"
  },
  {
    "label": "FPrimitiveSceneInfoCompact",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfoCompact"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLightSceneInfoCompact",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfoCompact"
  },
  {
    "label": "FSortedLightSceneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedLightSceneInfo"
  },
  {
    "label": "FSortedLightSetSceneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedLightSetSceneInfo"
  },
  {
    "label": "TUseBitwiseSwap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUseBitwiseSwap"
  },
  {
    "label": "FLightOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightOctreeSemantics"
  },
  {
    "label": "FPersistentShadowStateKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentShadowStateKey"
  },
  {
    "label": "FPersistentShadowState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentShadowState"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Math / GenericOctree . h \" # include \" Math / GenericOctreePublic . h \" # include \" Math / UnrealMath . h \" # include \" PrimitiveSceneProxy . h \" # include \" SceneTypes . h \" class FLightPrimitiveInteraction ; class FLightSceneInfo ; class FMobileMovableLocalLightShadowParameters ; class FPrimitiveSceneInfoCompact ; class FPrimitiveSceneProxy ; class FScene ; class FViewInfo ; class FVisibleLightInfo ; namespace ECastRayTracedShadow { enum Type : int ; } class FLightSceneInfoCompact { public : VectorRegister BoundingSphereVector ; FLinearColor Color ; FLightSceneInfo* LightSceneInfo ; uint32 LightType : LightType_NumBits ; uint32 bCastDynamicShadow : 1 ; uint32 bCastStaticShadow : 1 ; uint32 bStaticLighting : 1 ; uint32 bAffectReflection : 1 ; uint32 bAffectGlobalIllumination : 1 ; uint32 bIsMovable : 1 ; uint32 bAllowMegaLights : 1 ; TEnumAsByte<EMegaLightsShadowMethod::Type> MegaLightsShadowMethod ; TEnumAsByte<ECastRayTracedShadow::Type> CastRaytracedShadow ; void)",
    "insertText": "Init(FLightSceneInfo* InLightSceneInfo)"
  },
  {
    "label": "FLightSceneInfoCompact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightSceneInfoCompact(): LightSceneInfo(NULL)"
  },
  {
    "label": "FLightSceneInfoCompact()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLightSceneInfoCompact(FLightSceneInfo* InLightSceneInfo)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InLightSceneInfo)"
  },
  {
    "label": "AffectsPrimitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AffectsPrimitive(const FBoxSphereBounds& PrimitiveBounds, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "FSortedLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FSortedLightSceneInfo { union { struct { uint32 LightType : LightType_NumBits ; uint32 bLightFunction : 1 ; uint32 bUsesLightingChannels : 1 ; uint32 bShadowed : 1 ; uint32 bIsNotSimpleLight : 1 ; uint32 bClusteredDeferredNotSupported : 1 ; uint32 bHandledByMegaLights : 1 ; } Fields ; int32 Packed ; } SortKey ; const FLightSceneInfo* LightSceneInfo ; int32 SimpleLightIndex ; bool bIsCompatibleWithLightFunctionAtlas ;)",
    "insertText": "FSortedLightSceneInfo(const FLightSceneInfo* InLightSceneInfo) : LightSceneInfo(InLightSceneInfo), SimpleLightIndex(-1), bIsCompatibleWithLightFunctionAtlas(false)"
  },
  {
    "label": "FSortedLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (SortKey . Packed = 0 ; SortKey . Fields . bIsNotSimpleLight = 1 ; })",
    "insertText": "FSortedLightSceneInfo(int32 InSimpleLightIndex) : LightSceneInfo(nullptr), SimpleLightIndex(InSimpleLightIndex), bIsCompatibleWithLightFunctionAtlas(false)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SortKey . Packed = 0 ; SortKey . Fields . bIsNotSimpleLight = 0 ; } } ; struct FSortedLightSetSceneInfo { int32 SimpleLightsEnd ; int32 ClusteredSupportedEnd ; int32 UnbatchedLightStart ; int32 MegaLightsLightStart ; bool bHasRectLights = false ; bool bHasLightFunctions = false ; bool bHasLightChannels = false ; FSimpleLightArray SimpleLights ; TArray<FSortedLightSceneInfo,SceneRenderingAllocator> SortedLights ; } ; template<> struct TUseBitwiseSwap<FSortedLightSceneInfo> { enum { Value = false } ; } ; typedef TOctree2<FLightSceneInfoCompact,struct FLightOctreeSemantics> FSceneLightOctree ; struct FPersistentShadowStateKey { int32 AtlasIndex = - 1 ; int32 ProjectionId = - 1 ; int32 SubjectPrimitiveComponentIndex = - 1 ; } ; uint32)",
    "insertText": "GetTypeHash(const FPersistentShadowStateKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPersistentShadowStateKey& A, const FPersistentShadowStateKey& B)"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene()"
  },
  {
    "label": "ShouldCreateLightPrimitiveInteraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateLightPrimitiveInteraction(const FLightSceneInfoCompact& LightSceneInfoCompact, const FPrimitiveSceneInfoCompact& PrimitiveSceneInfoCompact)"
  },
  {
    "label": "CreateLightPrimitiveInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLightPrimitiveInteraction(const FLightSceneInfoCompact& LightSceneInfoCompact, const FPrimitiveSceneInfoCompact& PrimitiveSceneInfoCompact)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBoxCenterAndExtent)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "ShouldRenderLight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLight(const FViewInfo& View, bool bOffscreen = false)"
  },
  {
    "label": "ShouldRenderLightViewIndependent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLightViewIndependent()"
  },
  {
    "label": "ShouldRenderViewIndependentWholeSceneShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderViewIndependentWholeSceneShadows()"
  },
  {
    "label": "IsPrecomputedLightingValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecomputedLightingValid()"
  },
  {
    "label": "SetDynamicShadowMapChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicShadowMapChannel(int32 NewChannel)"
  },
  {
    "label": "GetDynamicShadowMapChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDynamicShadowMapChannel()"
  },
  {
    "label": "GetInteractionShadowPrimitives()",
    "kind": "Method",
    "detail": "Function (const TArray<FLightPrimitiveInteraction*>*)",
    "insertText": "GetInteractionShadowPrimitives()"
  },
  {
    "label": "GetDynamicInteractionOftenMovingPrimitiveList()",
    "kind": "Method",
    "detail": "Function (FLightPrimitiveInteraction*)",
    "insertText": "GetDynamicInteractionOftenMovingPrimitiveList()"
  },
  {
    "label": "GetDynamicInteractionStaticPrimitiveList()",
    "kind": "Method",
    "detail": "Function (FLightPrimitiveInteraction*)",
    "insertText": "GetDynamicInteractionStaticPrimitiveList()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "SetupMobileMovableLocalLightShadowParameters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetupMobileMovableLocalLightShadowParameters(const FViewInfo& View, TConstArrayView<FVisibleLightInfo> VisibleLightInfos, FMobileMovableLocalLightShadowParameters& MobileMovableLocalLightShadowParameters)"
  },
  {
    "label": "ShouldRecordShadowSubjectsForMobile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordShadowSubjectsForMobile()"
  },
  {
    "label": "PackLightTypeAndShadowMapChannelMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackLightTypeAndShadowMapChannelMask(bool bAllowStaticLighting, bool bLightFunction = false)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (} ; struct FLightOctreeSemantics { enum { MaxElementsPerLeaf = 1 6 } ; enum { MinInclusiveElementsPerNode = 7 } ; enum { MaxNodeDepth = 1 2 } ; typedef TInlineAllocator<MaxElementsPerLeaf,TAlignedHeapAllocator<)",
    "insertText": "alignof(FLightSceneInfoCompact)"
  },
  {
    "label": "AreElementsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreElementsEqual(const FLightSceneInfoCompact& A,const FLightSceneInfoCompact& B)"
  },
  {
    "label": "ApplyOffset()",
    "kind": "Method",
    "detail": "Function (Element . LightSceneInfo -> OctreeId = Id ; } void)",
    "insertText": "ApplyOffset(FLightSceneInfoCompact& Element, FVector Offset)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (VectorRegister OffsetReg =)",
    "insertText": "VectorLoadFloat3_W0(&Offset)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Element . BoundingSphereVector =)",
    "insertText": "VectorAdd(Element.BoundingSphereVector, OffsetReg)"
  }
]