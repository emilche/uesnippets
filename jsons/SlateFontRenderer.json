[
  {
    "label": "FCompositeFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeFontCache"
  },
  {
    "label": "FFreeTypeFaceGlyphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeTypeFaceGlyphData"
  },
  {
    "label": "FSlateFontRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontRenderer"
  },
  {
    "label": "FFreeTypeFaceGlyphData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Fonts / FontCacheFreeType . h \" class FCompositeFontCache ; struct FFreeTypeFaceGlyphData { TSharedPtr<FFreeTypeFace> FaceAndMemory ; uint32 GlyphIndex ; uint32 GlyphFlags ; EFontFallback CharFallbackLevel ;)",
    "insertText": "FFreeTypeFaceGlyphData() : FaceAndMemory() , GlyphIndex(0) , GlyphFlags(0) , CharFallbackLevel(EFontFallback::FF_NoFallback)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } ; namespace SlateFontRendererUtils { const TCHAR InvalidSubChar =)",
    "insertText": "TEXT('\\uFFFD')"
  },
  {
    "label": "AppendGlyphFlags()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE void)",
    "insertText": "AppendGlyphFlags(const FFreeTypeFace& InFace, const FFontData& InFontData, uint32& InOutGlyphFlags)"
  },
  {
    "label": "FSlateFontRenderer()",
    "kind": "Method",
    "detail": "Function (# endif } class FSlateFontRenderer { public :)",
    "insertText": "FSlateFontRenderer(const FFreeTypeLibrary* InFTLibrary, FFreeTypeCacheDirectory* InFTCacheDirectory, FCompositeFontCache* InCompositeFontCache)"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMaxHeight(const FSlateFontInfo& InFontInfo, const float InScale)"
  },
  {
    "label": "GetBaseline()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseline(const FSlateFontInfo& InFontInfo, const float InScale)"
  },
  {
    "label": "GetUnderlineMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnderlineMetrics(const FSlateFontInfo& InFontInfo, const float InScale, int16& OutUnderlinePos, int16& OutUnderlineThickness)"
  },
  {
    "label": "GetStrikeMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStrikeMetrics(const FSlateFontInfo& InFontInfo, const float InScale, int16& OutStrikeLinePos, int16& OutStrikeLineThickness)"
  },
  {
    "label": "HasKerning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKerning(const FFontData& InFontData)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(const FFontData& InFontData, const float InSize, TCHAR First, TCHAR Second, const float InScale)"
  },
  {
    "label": "GetKerningCache()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFreeTypeKerningCache>)",
    "insertText": "GetKerningCache(const FFontData& InFontData, const float InSize, const float InScale)"
  },
  {
    "label": "CanLoadCodepoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLoadCodepoint(const FFontData& InFontData, const UTF32CHAR InCodepoint, EFontFallback MaxFallbackLevel)"
  },
  {
    "label": "GetFontFaceForCodepoint()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE FFreeTypeFaceGlyphData)",
    "insertText": "GetFontFaceForCodepoint(const FFontData& InFontData, const UTF32CHAR InCodepoint, EFontFallback MaxFallbackLevel)"
  },
  {
    "label": "GetRenderData()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetRenderData(const FShapedGlyphEntry& InShapedGlyph, const FFontOutlineSettings& InOutlineSettings, FCharacterRenderData& OutRenderData)"
  },
  {
    "label": "GetRenderDataInternal()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_FREETYPE bool)",
    "insertText": "GetRenderDataInternal(const FFreeTypeFaceGlyphData& InFaceGlyphData, const float InScale, const FFontOutlineSettings& InOutlineSettings, FCharacterRenderData& OutRenderData)"
  },
  {
    "label": "GetFontFace()",
    "kind": "Method",
    "detail": "Function (FT_Face)",
    "insertText": "GetFontFace(const FFontData& InFontData)"
  }
]