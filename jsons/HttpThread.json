[
  {
    "label": "FHttpRequestCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestCommon"
  },
  {
    "label": "FHttpThreadBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpThreadBase"
  },
  {
    "label": "IHttpTaskTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpTaskTimerHandle"
  },
  {
    "label": "FSingleThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleThreadRunnable"
  },
  {
    "label": "FLegacyHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyHttpThread"
  },
  {
    "label": "IHttpTaskTimerHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EventLoop / EventLoopTimer . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / Runnable . h \" # include \" HttpPackage . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Misc / Timespan . h \" # include \" Containers / Queue . h \" # include \" Containers / SpscQueue . h \" # include \" Containers / Ticker . h \" # include<atomic> class FHttpRequestCommon ; class FHttpThreadBase ; class IHttpTaskTimerHandle { public : ~)",
    "insertText": "IHttpTaskTimerHandle()"
  },
  {
    "label": "RemoveTaskFrom()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveTaskFrom(FHttpThreadBase* HttpThreadBase)"
  },
  {
    "label": "FHttpThreadBase()",
    "kind": "Method",
    "detail": "Function (} ; class FHttpThreadBase : FRunnable,FSingleThreadRunnable { public :)",
    "insertText": "FHttpThreadBase()"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartThread()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopped()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "GetCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompletedRequests(TArray<FHttpRequestCommon*>& OutCompletedRequests)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Tick()"
  },
  {
    "label": "NeedsSingleThreadTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsSingleThreadTick()"
  },
  {
    "label": "UpdateConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfigs()"
  },
  {
    "label": "AddHttpThreadTask()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IHttpTaskTimerHandle>)",
    "insertText": "AddHttpThreadTask(TFunction<void()>&& Task, float InDelay)"
  },
  {
    "label": "RemoveTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimerHandle(FTSTicker::FDelegateHandle DelegateHandle)"
  },
  {
    "label": "RemoveTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimerHandle(UE::EventLoop::FTimerHandle EventLoopTimerHandle)"
  },
  {
    "label": "HttpThreadTick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HttpThreadTick(float DeltaSeconds)"
  },
  {
    "label": "StartThreadedRequest()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "StartThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CompleteThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(TArray<FHttpRequestCommon*>& RequestsToCancel, TArray<FHttpRequestCommon*>& RequestsToComplete)"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (class FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "MoveCompletingRequestsToCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCompletingRequestsToCompletedRequests(TArray<FHttpRequestCommon*>& RequestsToComplete)"
  },
  {
    "label": "StartRequestsWaitingInQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRequestsWaitingInQueue(TArray<FHttpRequestCommon*>& RequestsToComplete)"
  },
  {
    "label": "FinishRequestsFromHttpThreadWithCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRequestsFromHttpThreadWithCallbacks(TArray<FHttpRequestCommon*>& RequestsToComplete)"
  },
  {
    "label": "UpdateThreadPriorityIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadPriorityIfNeeded()"
  },
  {
    "label": "FLegacyHttpThread()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : FRunnableThread* Thread ; private : bool bIsSingleThread ; bool bIsStopped ; double LastTime ; EThreadPriority CurrentThreadPriority ; int32 MaxConcurrentRequests ; protected : PRAGMA_DISABLE_DEPRECATION_WARNINGS TMpscQueue<FHttpRequestCommon*> NewThreadedRequests ; TMpscQueue<FHttpRequestCommon*> CancelledThreadedRequests ; TArray<FHttpRequestCommon*> RateLimitedThreadedRequests ; TArray<FHttpRequestCommon*> RunningThreadedRequests ; TSpscQueue<FHttpRequestCommon*> CompletedThreadedRequests ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } ; class FLegacyHttpThread : public FHttpThreadBase { public :)",
    "insertText": "FLegacyHttpThread()"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "AddRequest(FHttpRequestCommon* Request)"
  }
]