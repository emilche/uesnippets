[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FWaitingQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitingQueue"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Fundamental / TaskShared . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / Event . h \" # include<atomic> namespace LowLevelTasks::Private { enum class EWaitState { NotSignaled = 0,Waiting,Signaled,} ; struct)",
    "insertText": "alignas(64)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint64> Next { 0 } ; uint64 Epoch { 0 } ; std::atomic<EWaitState> State { EWaitState::NotSignaled } ; FEventRef Event { EEventMode::ManualReset } ; bool bIsStandby { false } ; } ; class FWaitingQueue { uint32 ThreadCount { 0 } ; uint32 MaxThreadCount { 0 } ; TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FWaitingQueue()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32> Oversubscription { 0 } ; std::atomic<uint64> State ; std::atomic<uint64> StandbyState ; TAlignedArray<FWaitEvent>& NodesArray ; std::atomic<bool> bIsShuttingDown { false } ; FOversubscriptionLimitReached& OversubscriptionLimitReachedEvent ; public :)",
    "insertText": "FWaitingQueue(TAlignedArray<FWaitEvent>& InNodesArray, FOversubscriptionLimitReached& InOversubscriptionLimitReachedEvent) : NodesArray(InNodesArray) , OversubscriptionLimitReachedEvent(InOversubscriptionLimitReachedEvent)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(uint32 InThreadCount, uint32 InMaxThreadCount, TFunction<void()> InCreateThread, uint32 InActiveThreadCount)"
  },
  {
    "label": "StartShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartShutdown()"
  },
  {
    "label": "FinishShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishShutdown()"
  },
  {
    "label": "PrepareStandby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareStandby(FWaitEvent* Node)"
  },
  {
    "label": "CommitStandby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommitStandby(FWaitEvent* Node, FOutOfWork& OutOfWork)"
  },
  {
    "label": "ConditionalStandby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalStandby(FWaitEvent* Node)"
  },
  {
    "label": "PrepareWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareWait(FWaitEvent* Node)"
  },
  {
    "label": "CommitWait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommitWait(FWaitEvent* Node, FOutOfWork& OutOfWork, int32 SpinCycles, int32 WaitCycles)"
  },
  {
    "label": "CancelWait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelWait(FWaitEvent* Node)"
  },
  {
    "label": "IncrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOversubscription()"
  },
  {
    "label": "DecrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementOversubscription()"
  },
  {
    "label": "IsOversubscriptionLimitReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOversubscriptionLimitReached()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Notify(int32 Count = 1)"
  },
  {
    "label": "TryStartNewThread()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "TryStartNewThread()"
  },
  {
    "label": "NotifyInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NotifyInternal(int32 Count)"
  },
  {
    "label": "Park()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Park(FWaitEvent* Node, FOutOfWork& OutOfWork, int32 SpinCycles, int32 WaitCycles)"
  },
  {
    "label": "Unpark()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Unpark(FWaitEvent* InNode)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckState(uint64 State, bool bIsWaiter = false)"
  },
  {
    "label": "CheckStandbyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckStandbyState(uint64 State)"
  }
]