[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FWaitingQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaitingQueue"
  },
  {
    "label": "StartShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartShutdown()"
  },
  {
    "label": "FinishShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishShutdown()"
  },
  {
    "label": "PrepareStandby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareStandby(FWaitEvent* Node)"
  },
  {
    "label": "CommitStandby()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommitStandby(FWaitEvent* Node, FOutOfWork& OutOfWork)"
  },
  {
    "label": "ConditionalStandby()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalStandby(FWaitEvent* Node)"
  },
  {
    "label": "PrepareWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareWait(FWaitEvent* Node)"
  },
  {
    "label": "CommitWait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommitWait(FWaitEvent* Node, FOutOfWork& OutOfWork, int32 SpinCycles, int32 WaitCycles)"
  },
  {
    "label": "CancelWait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelWait(FWaitEvent* Node)"
  },
  {
    "label": "IncrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOversubscription()"
  },
  {
    "label": "DecrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementOversubscription()"
  },
  {
    "label": "NotifyInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NotifyInternal(Count)"
  },
  {
    "label": "TryStartNewThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryStartNewThread()"
  },
  {
    "label": "NotifyInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NotifyInternal(int32 Count)"
  },
  {
    "label": "Park()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Park(FWaitEvent* Node, FOutOfWork& OutOfWork, int32 SpinCycles, int32 WaitCycles)"
  },
  {
    "label": "Unpark()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Unpark(FWaitEvent* InNode)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckState(uint64 State, bool bIsWaiter = false)"
  },
  {
    "label": "CheckStandbyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckStandbyState(uint64 State)"
  }
]