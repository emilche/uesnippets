[
  {
    "label": "SScrollBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBox"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "FHeaderAndBodyContainerArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeaderAndBodyContainerArgs"
  },
  {
    "label": "FHeaderAndBodyContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeaderAndBodyContainer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHeaderAndBodyContainerArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Widgets / Layout / SExpandableArea . h \" # include \" Layout / Containers / SlateBuilder . h \" class SScrollBox ; class SBox ; class SImage ; class FHeaderAndBodyContainerArgs { public :)",
    "insertText": "FHeaderAndBodyContainerArgs(const FName& InIdentifier = \"FHeaderAndBodyContainer\", const TSharedRef<FSlateBuilder>& InHeader = MakeShared<FSlateBuilder>(), const TSharedRef<FSlateBuilder>& InBody = MakeShared<FSlateBuilder>(), const bool bInHasToggleButtonToCollapseBody = false, const bool bIsBodyHidden = false, const bool bIsHeaderHiddenOnCreate = false)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FName Identifier ; TSharedRef<FSlateBuilder> HeaderBuilder ; TSharedRef<FSlateBuilder> BodyBuilder ; bool bHasToggleButtonToCollapseBody ; bool bIsBodyHidden ; bool bIsHeaderHiddenOnCreate ; } ; class FHeaderAndBodyContainer : public FSlateBuilder { public : enum class EBodyLifeCycleEventType { Added,Removed } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnBodyAddedOrRemoved, EBodyLifeCycleEventType LifeCycleEventType)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeader(const TSharedRef<FSlateBuilder>& InHeaderBuilder)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeader(const TSharedRef<SWidget>& HeaderWidget)"
  },
  {
    "label": "SetBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBody(const TSharedRef<FSlateBuilder>& InBodyBuilder)"
  },
  {
    "label": "SetBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBody(const TSharedRef<SWidget>& BodyWidget)"
  },
  {
    "label": "FHeaderAndBodyContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHeaderAndBodyContainer(const FHeaderAndBodyContainerArgs& Args = FHeaderAndBodyContainerArgs())"
  },
  {
    "label": "GenerateWidget()",
    "kind": "Method",
    "detail": "Function (FOnBodyAddedOrRemoved OnBodyAddedOrRemoved ; TSharedPtr<SWidget>)",
    "insertText": "GenerateWidget()"
  },
  {
    "label": "UpdateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidget()"
  },
  {
    "label": "SetHeaderHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderHidden(bool bInIsHeaderHidden)"
  },
  {
    "label": "IsBodyEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodyEmpty()"
  },
  {
    "label": "ToggleBodyExpansionState()",
    "kind": "Method",
    "detail": "Function (} private : FReply)",
    "insertText": "ToggleBodyExpansionState()"
  },
  {
    "label": "UpdateToBodyAddedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToBodyAddedState()"
  },
  {
    "label": "UpdateToBodyRemovedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToBodyRemovedState()"
  },
  {
    "label": "UpdateToHeaderRemovedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToHeaderRemovedState()"
  },
  {
    "label": "UpdateToHeaderAddedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateToHeaderAddedState()"
  },
  {
    "label": "ResetWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWidget()"
  }
]