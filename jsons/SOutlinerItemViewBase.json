[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FOptionalSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalSize"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTableRowStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableRowStyle"
  },
  {
    "label": "FEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "IRenameableExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRenameableExtension"
  },
  {
    "label": "ISequencerTreeViewRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTreeViewRow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" MVVM / ViewModelPtr . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class ISequencer ; struct FGeometry ; struct FOptionalSize ; struct FPointerEvent ; struct FSlateBrush ; struct FTableRowStyle ; namespace UE { namespace Sequencer { class FEditorViewModel ; class IOutlinerExtension ; class IRenameableExtension ; class ISequencerTreeViewRow ; enum class EOutlinerItemViewBaseStyle { Default,ContainerHeader,InsideContainer,} ; class SOutlinerItemViewBase : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SOutlinerItemViewBase) : _ItemStyle(EOutlinerItemViewBaseStyle::Default), _IsReadOnly(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EOutlinerItemViewBaseStyle, ItemStyle) SLATE_ATTRIBUTE(bool, IsReadOnly) SLATE_NAMED_SLOT(FArguments, CustomContent) SLATE_NAMED_SLOT(FArguments, AdditionalLabelContent) SLATE_NAMED_SLOT(FArguments, RightGutterContent) SLATE_END_ARGS() void Construct( const FArguments& InArgs, TWeakViewModelPtr<IOutlinerExtension> InWeakExtension, TWeakPtr<FEditorViewModel> InWeakEditor, const TSharedRef<ISequencerTreeViewRow>& InTableRow)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (protected : FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor()"
  },
  {
    "label": "GetLabelFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetLabelFont()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "IsRenameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenameValid(const FText& NewName, FText& OutErrorMessage)"
  },
  {
    "label": "OnNodeLabelTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeLabelTextCommitted(const FText& NewLabel, ETextCommit::Type CommitType)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "GetIconTint()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetIconTint()"
  },
  {
    "label": "GetIconOverlayBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconOverlayBrush()"
  },
  {
    "label": "GetIconToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIconToolTipText()"
  },
  {
    "label": "IsNodeLabelReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeLabelReadOnly()"
  },
  {
    "label": "IsDimmed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDimmed()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetForegroundBasedOnSelection()",
    "kind": "Method",
    "detail": "Function (private : FSlateColor)",
    "insertText": "GetForegroundBasedOnSelection()"
  },
  {
    "label": "GetNodeBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNodeBorderImage()"
  },
  {
    "label": "GetNodeInnerBackgroundTint()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeInnerBackgroundTint()"
  },
  {
    "label": "GetExpanderVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetExpanderVisibility()"
  }
]