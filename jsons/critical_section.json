[
  {
    "label": "critical_section_v4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "critical_section_v4"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (# ifndef _TBB_CRITICAL_SECTION_H_ # define _TBB_CRITICAL_SECTION_H_ # if _WIN32 | | _WIN64 # include \" machine / windows_api . h \" # else # include<pthread . h> # include<errno . h> # endif # include \" tbb_stddef . h \" # include \" tbb_thread . h \" # include \" tbb_exception . h \" # include \" tbb_profiling . h \" namespace tbb { namespace internal { class critical_section_v4 : internal::no_copy { # if _WIN32 | | _WIN64 CRITICAL_SECTION my_impl ; # else pthread_mutex_t my_impl ; # endif tbb_thread::id my_tid ; public : void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_construct()"
  },
  {
    "label": "critical_section_v4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "critical_section_v4()"
  },
  {
    "label": "InitializeCriticalSectionEx()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64)",
    "insertText": "InitializeCriticalSectionEx(&my_impl, 4000, 0)"
  },
  {
    "label": "pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "pthread_mutex_init(&my_impl, NULL)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_tid == tbb_thread::id(), \"Destroying a still-held critical section\")"
  },
  {
    "label": "DeleteCriticalSection()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64)",
    "insertText": "DeleteCriticalSection(&my_impl)"
  },
  {
    "label": "pthread_mutex_destroy()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "pthread_mutex_destroy(&my_impl)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (# endif } class scoped_lock : internal::no_copy { private : critical_section_v4& my_crit ; public :)",
    "insertText": "scoped_lock(critical_section_v4& lock_me) :my_crit(lock_me)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (my_crit .)",
    "insertText": "lock()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (my_crit .)",
    "insertText": "unlock()"
  },
  {
    "label": "get_id()",
    "kind": "Method",
    "detail": "Function (tbb_thread::id local_tid =)",
    "insertText": "get_id()"
  },
  {
    "label": "EnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64)",
    "insertText": "EnterCriticalSection(&my_impl)"
  },
  {
    "label": "pthread_mutex_lock()",
    "kind": "Method",
    "detail": "Function (# else int rval =)",
    "insertText": "pthread_mutex_lock(&my_impl)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(!rval, \"critical_section::lock: pthread_mutex_lock failed\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "__TBB_ASSERT(my_tid == tbb_thread::id(), NULL)"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (my_tid = local_tid ; } bool)",
    "insertText": "try_lock()"
  },
  {
    "label": "TryEnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64 gotlock =)",
    "insertText": "TryEnterCriticalSection(&my_impl)"
  },
  {
    "label": "pthread_mutex_trylock()",
    "kind": "Method",
    "detail": "Function (# else int rval =)",
    "insertText": "pthread_mutex_trylock(&my_impl)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(rval == 0 || rval == EBUSY, \"critical_section::trylock: pthread_mutex_trylock failed\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (gotlock = rval = = 0 ; # endif)",
    "insertText": "if(gotlock)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(this_tbb_thread::get_id() == my_tid, \"thread unlocking critical_section is not thread that locked it\")"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (my_tid =)",
    "insertText": "id()"
  },
  {
    "label": "LeaveCriticalSection()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64)",
    "insertText": "LeaveCriticalSection(&my_impl)"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (# else int rval =)",
    "insertText": "pthread_mutex_unlock(&my_impl)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(!rval, \"critical_section::unlock: pthread_mutex_unlock failed\")"
  }
]