[
  {
    "label": "FHapticFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHapticFeedbackValues"
  },
  {
    "label": "UHapticFeedbackEffect_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHapticFeedbackEffect_Base"
  },
  {
    "label": "FActiveHapticFeedbackEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveHapticFeedbackEffect"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" HapticFeedbackEffect_Base . generated . h \" struct FHapticFeedbackValues ;)",
    "insertText": "UCLASS(MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual void Initialize(FHapticFeedbackBuffer& HapticBuffer)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetValues(const float EvalTime, FHapticFeedbackValues& Values)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDuration()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FActiveHapticFeedbackEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActiveHapticFeedbackEffect() : HapticEffect(nullptr) , PlayTime(0.f) , Scale(1.f)"
  },
  {
    "label": "FActiveHapticFeedbackEffect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActiveHapticFeedbackEffect(UHapticFeedbackEffect_Base* InEffect, float InScale, bool bInLoop) : HapticEffect(InEffect) , bLoop(bInLoop) , PlayTime(0.f)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Scale =)",
    "insertText": "Clamp(InScale, 0.f, 10.f)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (HapticEffect ->)",
    "insertText": "Initialize(HapticBuffer)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Restart()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Update(const float DeltaTime, struct FHapticFeedbackValues& Values)"
  }
]