[
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "NFRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NFRule"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "MessageFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageFormat"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef PLURFMT # define PLURFMT # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / messagepattern . h \" # include \" unicode / numfmt . h \" # include \" unicode / plurrule . h \" U_NAMESPACE_BEGIN class Hashtable ; class NFRule ; class U_I18N_API PluralFormat : public Format { public :)",
    "insertText": "PluralFormat(UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const PluralRules& rules, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, const PluralRules& rules, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const PluralRules& rules, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, const PluralRules& rules, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const Locale& locale, UPluralType type, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PluralFormat(const PluralFormat& other)"
  },
  {
    "label": "PluralFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PluralFormat()"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString)",
    "insertText": "format(int32_t number, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "format(double number, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "setLocale()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "setLocale(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "setNumberFormat()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "setNumberFormat(const NumberFormat* format, UErrorCode& status)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PluralFormat&)",
    "insertText": "operator(const PluralFormat& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "toPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toPattern(UnicodeString& appendTo)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& parse_pos)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "PluralSelector()",
    "kind": "Method",
    "detail": "Function (private : class U_I18N_API PluralSelector : public UMemory { public : ~)",
    "insertText": "PluralSelector()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "select(void *context, double number, UErrorCode& ec)"
  },
  {
    "label": "PluralSelectorAdapter()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API PluralSelectorAdapter : public PluralSelector { public :)",
    "insertText": "PluralSelectorAdapter() : pluralRules(NULL)"
  },
  {
    "label": "PluralSelectorAdapter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PluralSelectorAdapter()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "select(void *context, double number, UErrorCode&)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const PluralRules* rules, UPluralType type, UErrorCode& status)"
  },
  {
    "label": "copyObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyObjects(const PluralFormat& other)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& numberObject, double number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "findSubMessage()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findSubMessage(const MessagePattern& pattern, int32_t partIndex, const PluralSelector& selector, void *context, double number, UErrorCode& ec)"
  },
  {
    "label": "parseType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseType(const UnicodeString& source, const NFRule *rbnfLenientScanner, Formattable& result, FieldPosition& pos)"
  }
]