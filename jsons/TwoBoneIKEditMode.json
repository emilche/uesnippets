[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UAnimGraphNode_TwoBoneIK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_TwoBoneIK"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FTwoBoneIKEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTwoBoneIKEditMode"
  },
  {
    "label": "BoneSelectModeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BoneSelectModeType"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FAnimNode_TwoBoneIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_TwoBoneIK"
  },
  {
    "label": "OnExternalNodePropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalNodePropertyChange(FPropertyChangedEvent& InPropertyEvent)"
  }
]