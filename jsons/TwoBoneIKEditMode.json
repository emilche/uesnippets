[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UAnimGraphNode_TwoBoneIK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_TwoBoneIK"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FTwoBoneIKEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTwoBoneIKEditMode"
  },
  {
    "label": "BoneSelectModeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BoneSelectModeType"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FAnimNode_TwoBoneIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_TwoBoneIK"
  },
  {
    "label": "FTwoBoneIKEditMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimNodeEditMode . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / BoneSocketReference . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Math / MathFwd . h \" # include \" UnrealWidgetFwd . h \" class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class HHitProxy ; class UAnimGraphNode_TwoBoneIK ; struct FColor ; struct FPropertyChangedEvent ; struct FViewportClick ; class FTwoBoneIKEditMode : public FAnimNodeEditMode { public : enum BoneSelectModeType { BSM_EndEffector,BSM_JointTarget,BSM_Max } ;)",
    "insertText": "FTwoBoneIKEditMode()"
  },
  {
    "label": "EnterMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterMode(class UAnimGraphNode_Base* InEditorNode, struct FAnimNode_Base* InRuntimeNode)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitMode()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetSelectedTarget()",
    "kind": "Method",
    "detail": "Function (FBoneSocketTarget)",
    "insertText": "GetSelectedTarget()"
  },
  {
    "label": "DoTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTranslation(FVector& InTranslation)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "OnExternalNodePropertyChange()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnExternalNodePropertyChange(FPropertyChangedEvent& InPropertyEvent)"
  },
  {
    "label": "DrawTargetLocation()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle NodePropertyDelegateHandle ; private : void)",
    "insertText": "DrawTargetLocation(FPrimitiveDrawInterface* PDI, BoneSelectModeType InBoneSelectMode, const FColor& TargetColor, const FColor& BoneColor)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation(BoneSelectModeType InBoneSelectMode)"
  }
]