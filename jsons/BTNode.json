[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UBTCompositeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTCompositeNode"
  },
  {
    "label": "UGameplayTasksComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTasksComponent"
  },
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UBehaviorTreeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeComponent"
  },
  {
    "label": "FBehaviorTreeSearchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBehaviorTreeSearchData"
  },
  {
    "label": "FBTInstancedNodeMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTInstancedNodeMemory"
  },
  {
    "label": "UBTNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTNode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" BehaviorTree / BehaviorTreeTypes . h \" # include \" BehaviorTree / BehaviorTreeComponent . h \" # include \" BehaviorTree / BlackboardAssetProvider . h \" # include \" GameplayTaskOwnerInterface . h \" # include \" Tasks / AITask . h \" # include<type_traits> # include \" BTNode . generated . h \" class AActor ; class ISlateStyle ; class UBehaviorTree ; class UBlackboardData ; class UBTCompositeNode ; class UGameplayTasksComponent ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBehaviorTree, Display, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class AAIController ; class UWorld ; class UBehaviorTree ; class UBehaviorTreeComponent ; class UBTCompositeNode ; class UBlackboardData ; struct FBehaviorTreeSearchData ; struct FBTInstancedNodeMemory { int32 NodeIdx ; } ;)",
    "insertText": "UCLASS(Abstract,config=Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual UWorld* GetWorld()"
  },
  {
    "label": "InitializeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNode(UBTCompositeNode* InParentNode, uint16 InExecutionIndex, uint16 InMemoryOffset, uint8 InTreeDepth)"
  },
  {
    "label": "InitializeFromAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromAsset(UBehaviorTree& Asset)"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "DescribeRuntimeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeRuntimeValues(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTDescriptionVerbosity::Type Verbosity, TArray<FString>& Values)"
  },
  {
    "label": "GetInstanceMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetInstanceMemorySize()"
  },
  {
    "label": "OnInstanceCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInstanceCreated(UBehaviorTreeComponent& OwnerComp)"
  },
  {
    "label": "OnInstanceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInstanceDestroyed(UBehaviorTreeComponent& OwnerComp)"
  },
  {
    "label": "InitializeInSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInSubtree(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, int32& NextInstancedIndex, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupInSubtree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupInSubtree(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "GetSpecialMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetSpecialMemorySize()"
  },
  {
    "label": "InitializeExecutionOrder()",
    "kind": "Method",
    "detail": "Function (# if USE_BEHAVIORTREE_DEBUGGER void)",
    "insertText": "InitializeExecutionOrder(UBTNode* NextNode)"
  },
  {
    "label": "GetNextNode()",
    "kind": "Method",
    "detail": "Function (UBTNode*)",
    "insertText": "GetNextNode()"
  },
  {
    "label": "InitializeNodeMemory()",
    "kind": "Method",
    "detail": "Function (# endif template<T> T*)",
    "insertText": "InitializeNodeMemory(uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CleanupNodeMemory(uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "GetNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetNodeMemory(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "GetNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> const T*)",
    "insertText": "GetNodeMemory(const FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "GetNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetNodeMemory(FBehaviorTreeInstance& BTInstance)"
  },
  {
    "label": "GetNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> const T*)",
    "insertText": "GetNodeMemory(const FBehaviorTreeInstance& BTInstance)"
  },
  {
    "label": "CastInstanceNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "CastInstanceNodeMemory(uint8* NodeMemory)"
  },
  {
    "label": "GetSpecialNodeMemory()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetSpecialNodeMemory(uint8* NodeMemory)"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (UBTCompositeNode*)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "GetNodeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeName()"
  },
  {
    "label": "GetExecutionIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetExecutionIndex()"
  },
  {
    "label": "GetMemoryOffset()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMemoryOffset()"
  },
  {
    "label": "GetTreeDepth()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetTreeDepth()"
  },
  {
    "label": "MarkInjectedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkInjectedNode()"
  },
  {
    "label": "IsInjected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInjected()"
  },
  {
    "label": "ForceInstancing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceInstancing(bool bEnable)"
  },
  {
    "label": "HasInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInstance()"
  },
  {
    "label": "IsInstanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanced()"
  },
  {
    "label": "GetTreeAsset()",
    "kind": "Method",
    "detail": "Function (UBehaviorTree*)",
    "insertText": "GetTreeAsset()"
  },
  {
    "label": "GetBlackboardAsset()",
    "kind": "Method",
    "detail": "Function (UBlackboardData*)",
    "insertText": "GetBlackboardAsset()"
  },
  {
    "label": "GetNodeInstance()",
    "kind": "Method",
    "detail": "Function (UBTNode*)",
    "insertText": "GetNodeInstance(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "GetNodeInstance()",
    "kind": "Method",
    "detail": "Function (UBTNode*)",
    "insertText": "GetNodeInstance(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "GetRuntimeDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRuntimeDescription(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTDescriptionVerbosity::Type Verbosity)"
  },
  {
    "label": "GetStaticDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStaticDescription()"
  },
  {
    "label": "GetNodeIconStyleSet()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const ISlateStyle&)",
    "insertText": "GetNodeIconStyleSet()"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeIconName()"
  },
  {
    "label": "UsesBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesBlueprint()"
  },
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorMessage()"
  },
  {
    "label": "OnNodeCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeCreated()"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetOwner(AActor* ActorOwner)"
  },
  {
    "label": "GetGameplayTasksComponent()",
    "kind": "Method",
    "detail": "Function (} UGameplayTasksComponent*)",
    "insertText": "GetGameplayTasksComponent(const UGameplayTask& Task)"
  },
  {
    "label": "GetGameplayTaskOwner()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetGameplayTaskOwner(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskAvatar()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetGameplayTaskAvatar(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskDefaultPriority()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetGameplayTaskDefaultPriority()"
  },
  {
    "label": "OnGameplayTaskInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskInitialized(UGameplayTask& Task)"
  },
  {
    "label": "GetBTComponentForTask()",
    "kind": "Method",
    "detail": "Function (UBehaviorTreeComponent*)",
    "insertText": "GetBTComponentForTask(UGameplayTask& Task)"
  },
  {
    "label": "NewBTAITask()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "NewBTAITask(UBehaviorTreeComponent& BTComponent)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bOwnsGameplayTasks = true ; return UAITask::NewAITask<)",
    "insertText": "T(*BTComponent.GetAIOwner(), *this, TEXT(\"Behavior\"))"
  },
  {
    "label": "NewBTAITask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewBTAITask(const UClass& Class, UBehaviorTreeComponent& BTComponent)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bOwnsGameplayTasks = true ; return UAITask::NewAITask<)",
    "insertText": "T(Class, *BTComponent.GetAIOwner(), *this, TEXT(\"Behavior\"))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(NodeMemory) T()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return CastInstanceNodeMemory<)",
    "insertText": "T(NodeMemory)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (CastInstanceNodeMemory<)",
    "insertText": "T(NodeMemory)->~T()"
  }
]