[
  {
    "label": "pixelTypeSize()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_MISC_H # define INCLUDED_IMF_MISC_H # include \" ImfForward . h \" # include \" ImfArray . h \" # include \" ImfCompressor . h \" # include \" ImfPixelType . h \" # include<cstddef> # include<vector> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER IMF_EXPORT int)",
    "insertText": "pixelTypeSize(PixelType type)"
  },
  {
    "label": "numSamples()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numSamples(int s, int a, int b)"
  },
  {
    "label": "bytesPerLineTable()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT size_t)",
    "insertText": "bytesPerLineTable(const Header& header, std::vector<size_t>& bytesPerLine)"
  },
  {
    "label": "sampleCount()",
    "kind": "Method",
    "detail": "Function (int&)",
    "insertText": "sampleCount(char* base, int xStride, int yStride, int x, int y)"
  },
  {
    "label": "ptrdiff_t()",
    "kind": "Method",
    "detail": "Function (char* ptr = base + y*)",
    "insertText": "ptrdiff_t(yStride) + x * ptrdiff_t (xStride)"
  },
  {
    "label": "intPtr()",
    "kind": "Method",
    "detail": "Function (int*)",
    "insertText": "intPtr(int*)"
  },
  {
    "label": "bytesPerDeepLineTable()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT size_t)",
    "insertText": "bytesPerDeepLineTable(const Header& header, char* base, int xStride, int yStride, std::vector<size_t>& bytesPerLine)"
  },
  {
    "label": "offsetInLineBufferTable()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "offsetInLineBufferTable(const std::vector<size_t>& bytesPerLine, int scanline1, int scanline2, int linesInLineBuffer, std::vector<size_t>& offsetInLineBuffer)"
  },
  {
    "label": "offsetInLineBufferTable()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "offsetInLineBufferTable(const std::vector<size_t>& bytesPerLine, int linesInLineBuffer, std::vector<size_t>& offsetInLineBuffer)"
  },
  {
    "label": "lineBufferMinY()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "lineBufferMinY(int y, int minY, int linesInLineBuffer)"
  },
  {
    "label": "lineBufferMaxY()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "lineBufferMaxY(int y, int minY, int linesInLineBuffer)"
  },
  {
    "label": "defaultFormat()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Compressor::Format)",
    "insertText": "defaultFormat(Compressor* compressor)"
  },
  {
    "label": "numLinesInBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numLinesInBuffer(Compressor* compressor)"
  },
  {
    "label": "copyIntoFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyIntoFrameBuffer(const char*& readPtr, char* writePtr, char* endPtr, size_t xStride, bool fill, double fillValue, Compressor::Format format, PixelType typeInFrameBuffer, PixelType typeInFile)"
  },
  {
    "label": "copyIntoDeepFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyIntoDeepFrameBuffer(const char*& readPtr, char* base, const char* sampleCountBase, ptrdiff_t sampleCountXStride, ptrdiff_t sampleCountYStride, int y, int minX, int maxX, int xOffsetForSampleCount, int yOffsetForSampleCount, int xOffsetForData, int yOffsetForData, ptrdiff_t xStride, ptrdiff_t xPointerStride, ptrdiff_t yPointerStride, bool fill, double fillValue, Compressor::Format format, PixelType typeInFrameBuffer, PixelType typeInFile)"
  },
  {
    "label": "skipChannel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "skipChannel(const char*& readPtr, PixelType typeInFile, size_t xSize)"
  },
  {
    "label": "convertInPlace()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "convertInPlace(char*& toPtr, const char*& fromPtr, PixelType type, size_t numPixels)"
  },
  {
    "label": "copyFromFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyFromFrameBuffer(char*& writePtr, const char*& readPtr, const char* endPtr, size_t xStride, Compressor::Format format, PixelType type)"
  },
  {
    "label": "copyFromDeepFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyFromDeepFrameBuffer(char*& writePtr, const char* base, char* sampleCountBase, ptrdiff_t sampleCountXStride, ptrdiff_t sampleCountYStride, int y, int xMin, int xMax, int xOffsetForSampleCount, int yOffsetForSampleCount, int xOffsetForData, int yOffsetForData, ptrdiff_t sampleStride, ptrdiff_t xStrideForData, ptrdiff_t yStrideForData, Compressor::Format format, PixelType type)"
  },
  {
    "label": "fillChannelWithZeroes()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "fillChannelWithZeroes(char*& writePtr, Compressor::Format format, PixelType type, size_t xSize)"
  },
  {
    "label": "usesLongNames()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "usesLongNames(const Header& header)"
  },
  {
    "label": "getChunkOffsetTableSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "getChunkOffsetTableSize(const Header& header)"
  },
  {
    "label": "WidenFilename()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT std::wstring)",
    "insertText": "WidenFilename(const char* filename)"
  },
  {
    "label": "getLibraryVersion()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "getLibraryVersion()"
  }
]