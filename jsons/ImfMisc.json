[
  {
    "label": "OutputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutputFile"
  },
  {
    "label": "ScanLineInputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScanLineInputFile"
  },
  {
    "label": "pixelTypeSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "pixelTypeSize(PixelType type)"
  },
  {
    "label": "numSamples()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "numSamples(int s, int a, int b)"
  },
  {
    "label": "bytesPerLineTable()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytesPerLineTable(const Header& header, std::vector<size_t>& bytesPerLine)"
  },
  {
    "label": "bytesPerDeepLineTable()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytesPerDeepLineTable(\n    const Header&        header,\n    int                  minY,\n    int                  maxY,\n    const char*          base,\n    int                  xStride,\n    int                  yStride,\n    std::vector<size_t>& bytesPerLine)"
  },
  {
    "label": "bytesPerDeepLineTable()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytesPerDeepLineTable(\n    const Header&        header,\n    char*                base,\n    int                  xStride,\n    int                  yStride,\n    std::vector<size_t>& bytesPerLine)"
  },
  {
    "label": "offsetInLineBufferTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offsetInLineBufferTable(\n    const std::vector<size_t>& bytesPerLine,\n    int                        scanline1,\n    int                        scanline2,\n    int                        linesInLineBuffer,\n    std::vector<size_t>&       offsetInLineBuffer)"
  },
  {
    "label": "offsetInLineBufferTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offsetInLineBufferTable(\n    const std::vector<size_t>& bytesPerLine,\n    int                        linesInLineBuffer,\n    std::vector<size_t>&       offsetInLineBuffer)"
  },
  {
    "label": "lineBufferMinY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "lineBufferMinY(int y, int minY, int linesInLineBuffer)"
  },
  {
    "label": "lineBufferMaxY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "lineBufferMaxY(int y, int minY, int linesInLineBuffer)"
  },
  {
    "label": "defaultFormat()",
    "kind": "Method",
    "detail": "Function (Compressor::Format)",
    "insertText": "defaultFormat(Compressor* compressor)"
  },
  {
    "label": "numLinesInBuffer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "numLinesInBuffer(Compressor* compressor)"
  },
  {
    "label": "copyIntoFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyIntoFrameBuffer(\n    const char*&       readPtr,\n    char*              writePtr,\n    char*              endPtr,\n    size_t             xStride,\n    bool               fill,\n    double             fillValue,\n    Compressor::Format format,\n    PixelType          typeInFrameBuffer,\n    PixelType          typeInFile)"
  },
  {
    "label": "copyIntoDeepFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyIntoDeepFrameBuffer(\n    const char*&       readPtr,\n    char*              base,\n    const char*        sampleCountBase,\n    ptrdiff_t          sampleCountXStride,\n    ptrdiff_t          sampleCountYStride,\n    int                y,\n    int                minX,\n    int                maxX,\n    int                xOffsetForSampleCount,\n    int                yOffsetForSampleCount,\n    int                xOffsetForData,\n    int                yOffsetForData,\n    ptrdiff_t          xStride,\n    ptrdiff_t          xPointerStride,\n    ptrdiff_t          yPointerStride,\n    bool               fill,\n    double             fillValue,\n    Compressor::Format format,\n    PixelType          typeInFrameBuffer,\n    PixelType          typeInFile)"
  },
  {
    "label": "skipChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skipChannel(const char*& readPtr, PixelType typeInFile, size_t xSize)"
  },
  {
    "label": "convertInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convertInPlace(\n    char*& toPtr, const char*& fromPtr, PixelType type, size_t numPixels)"
  },
  {
    "label": "copyFromFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFromFrameBuffer(\n    char*&             writePtr,\n    const char*&       readPtr,\n    const char*        endPtr,\n    size_t             xStride,\n    Compressor::Format format,\n    PixelType          type)"
  },
  {
    "label": "copyFromDeepFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFromDeepFrameBuffer(\n    char*&             writePtr,\n    const char*        base,\n    char*              sampleCountBase,\n    ptrdiff_t          sampleCountXStride,\n    ptrdiff_t          sampleCountYStride,\n    int                y,\n    int                xMin,\n    int                xMax,\n    int                xOffsetForSampleCount,\n    int                yOffsetForSampleCount,\n    int                xOffsetForData,\n    int                yOffsetForData,\n    ptrdiff_t          sampleStride,\n    ptrdiff_t          xStrideForData,\n    ptrdiff_t          yStrideForData,\n    Compressor::Format format,\n    PixelType          type)"
  },
  {
    "label": "fillChannelWithZeroes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fillChannelWithZeroes(\n    char*& writePtr, Compressor::Format format, PixelType type, size_t xSize)"
  },
  {
    "label": "usesLongNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "usesLongNames(const Header& header)"
  },
  {
    "label": "getChunkOffsetTableSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getChunkOffsetTableSize(const Header& header)"
  },
  {
    "label": "WidenFilename()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "WidenFilename(const char* filename)"
  }
]