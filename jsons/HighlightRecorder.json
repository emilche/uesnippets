[
  {
    "label": "FWmfMp4Writer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWmfMp4Writer"
  },
  {
    "label": "FThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThread"
  },
  {
    "label": "FHighlightRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHighlightRecorder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" WmfPrivate . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" Containers / CircularQueue . h \" # include \" HAL / Thread . h \" # include \" HAL / ThreadSafeBool . h \" # include \" WmfRingBuffer . h \" # include \" GameplayMediaEncoder . h \" class FWmfMp4Writer ; class FThread ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(HighlightRecorder, Log, VeryVerbose)"
  },
  {
    "label": "FHighlightRecorder()",
    "kind": "Method",
    "detail": "Function (class FHighlightRecorder final : private IGameplayMediaEncoderListener { public :)",
    "insertText": "FHighlightRecorder()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (enum class EState { Stopped,Recording,Paused } ; EState)",
    "insertText": "GetState()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pause(bool bPause)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "IsSaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSaving()"
  },
  {
    "label": "SaveHighlight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveHighlight(const TCHAR* Filename, FDoneCallback DoneCallback, double MaxDurationSecs = 1.0 * 60 * 60)"
  },
  {
    "label": "SaveHighlightInBackground()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SaveHighlightInBackground(const FString& Filename, double MaxDurationSecs)"
  },
  {
    "label": "SaveHighlightInBackgroundImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveHighlightInBackgroundImpl(const FString& Filename, double MaxDurationSecs)"
  },
  {
    "label": "InitialiseMp4Writer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitialiseMp4Writer(const FString& Filename, bool bHasAudio)"
  },
  {
    "label": "GetSavingStart()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "GetSavingStart(const TArray<AVEncoder::FMediaPacket>& Samples, FTimespan MaxDuration, int& OutStartIndex, FTimespan& OutStartTime)"
  },
  {
    "label": "GetRecordingTime()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FTimespan)",
    "insertText": "GetRecordingTime()"
  },
  {
    "label": "OnMediaSample()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "OnMediaSample(const AVEncoder::FMediaPacket& Sample)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS private : TAtomic<EState> State { EState::Stopped } ; TUniquePtr<FWmfMp4Writer> Mp4Writer ; FWmfRingBuffer RingBuffer ; uint64 NumPushedFrames = 0 ; FTimespan RecordingStartTime = 0 ; FTimespan PauseTimestamp = 0 ; FTimespan TotalPausedDuration = 0 ; TUniquePtr<FThread> BackgroundSaving ; FDoneCallback DoneCallback ; FThreadSafeBool bSaving = false ; DWORD AudioStreamIndex = 0 ; DWORD VideoStreamIndex = 0 ; # pragma region testing public : void)",
    "insertText": "Start(const TArray<FString>& Args, UWorld*, FOutputDevice& Output)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Args.Num() > 1)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "Logf(ELogVerbosity::Error, TEXT(\"zero or one parameter expected: Start [max_duration_secs=30.0]\"))"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (MaxDurationSecs =)",
    "insertText": "Atod(*Args[0])"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Get()->Start(MaxDurationSecs)"
  },
  {
    "label": "StopCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopCmd()"
  },
  {
    "label": "PauseCmd()",
    "kind": "Method",
    "detail": "Function (delete Singleton ; Singleton = nullptr ; } void)",
    "insertText": "PauseCmd()"
  },
  {
    "label": "ResumeCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeCmd()"
  },
  {
    "label": "SaveCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveCmd(const TArray<FString>& Args, UWorld*, FOutputDevice& Output)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "Logf(ELogVerbosity::Error, TEXT(\"0-2 parameters expected: Save [filename=\\\"test.mp4\\\"] [max_duration_secs= ring buffer duration]\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Filename = Args [ 0 ] ; } double MaxDurationSecs = 1* 6 0* 6 0 ;)",
    "insertText": "if(Args.Num() == 2)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (MaxDurationSecs =)",
    "insertText": "Atod(*Args[1])"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Get()->SaveHighlight( *Filename, [](bool bRes, const FString& InFullPathToFile) { UE_LOG(HighlightRecorder, Log, TEXT(\"saving done: %d\"), bRes); }, MaxDurationSecs)"
  },
  {
    "label": "CheckSingleton()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "CheckSingleton()"
  }
]