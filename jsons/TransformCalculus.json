[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "with"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "skeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "skeleton"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FTransformST",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformST"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "providers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "providers"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "TransformType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransformType"
  },
  {
    "label": "TransformConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformConverter"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "FTransformST()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTransformST(float InScale)"
  },
  {
    "label": "FTransformST()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FTransformST(const FVector& InTranslation)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (FTransformST)",
    "insertText": "Concatenate(float LHS, const FVector& RHS)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (FTransformST)",
    "insertText": "Concatenate(const FVector& LHS, float RHS)"
  },
  {
    "label": "TransformType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TransformType(Transform)"
  }
]