[
  {
    "label": "TransformType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransformType"
  },
  {
    "label": "TransformConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformConverter"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector . h \" template<class TransformType> struct TransformConverter { const TransformType&)",
    "insertText": "Convert(const TransformType& Transform)"
  },
  {
    "label": "TransformCast()",
    "kind": "Method",
    "detail": "Function (} } ; template<ResultType,TransformType> auto)",
    "insertText": "TransformCast(const TransformType& Transform) -> decltype(TransformConverter<ResultType>::Convert(Transform))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<TransformTypeA,TransformTypeB> struct ConcatenateRules { } ; template<TransformType> struct ConcatenateRules<TransformType,TransformType> { typedef TransformType ResultType ; } ; template<TransformTypeA,TransformTypeB> ConcatenateRules<TransformTypeA,TransformTypeB>::ResultType)",
    "insertText": "Concatenate(const TransformTypeA& LHS, const TransformTypeB& RHS)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (typedef ConcatenateRules<TransformTypeA,TransformTypeB>::ResultType ReturnType ; return)",
    "insertText": "Concatenate(TransformCast<ReturnType>(LHS), TransformCast<ReturnType>(RHS))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<ReturnType,LHSType,RHSType> ReturnType)",
    "insertText": "Concatenate(const LHSType& LHS, const RHSType& RHS)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<TransformType> auto)",
    "insertText": "Concatenate(const TransformType& LHS, const TransformType& RHS) -> decltype(LHS.Concatenate(RHS))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<TransformType1,TransformType2,TransformType3> auto)",
    "insertText": "Concatenate(const TransformType1& TransformAToB, const TransformType2& TransformBToC, const TransformType3& TransformCToD) -> decltype(Concatenate(Concatenate(TransformAToB, TransformBToC), TransformCToD))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<TransformType1,TransformType2,TransformType3,TransformType4> auto)",
    "insertText": "Concatenate(const TransformType1& TransformAToB, const TransformType2& TransformBToC, const TransformType3& TransformCToD, const TransformType4& TransformDToE) -> decltype(Concatenate(Concatenate(TransformAToB, TransformBToC, TransformCToD), TransformDToE))"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<TransformType1,TransformType2,TransformType3,TransformType4,TransformType5> auto)",
    "insertText": "Concatenate(const TransformType1& TransformAToB, const TransformType2& TransformBToC, const TransformType3& TransformCToD, const TransformType4& TransformDToE, const TransformType5& TransformEToF) -> decltype(Concatenate(Concatenate(TransformAToB, TransformBToC, TransformCToD, TransformDToE), TransformEToF))"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} template<TransformType> auto)",
    "insertText": "Inverse(const TransformType& Transform) -> decltype(Transform.Inverse())"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (} template<TransformType,PositionType> PositionType)",
    "insertText": "TransformPoint(const TransformType& Transform, const PositionType& Point)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} template<TransformType,VectorType> VectorType)",
    "insertText": "TransformVector(const TransformType& Transform, const VectorType& Vector)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<FloatType)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<FloatType>)> inline FloatType Concatenate(FloatType LHS, FloatType RHS)"
  }
]