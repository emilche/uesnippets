[
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "UserActionTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserActionTester"
  },
  {
    "label": "UserActionTester()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_METRICS_USER_ACTION_TESTER_H_ # define BASE_TEST_METRICS_USER_ACTION_TESTER_H_ # include<map> # include<string> # include<vector> # include \" base / memory / scoped_refptr . h \" # include \" base / metrics / user_metrics . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / time / time . h \" namespace base { class TimeTicks ; class UserActionTester { public :)",
    "insertText": "UserActionTester()"
  },
  {
    "label": "UserActionTester()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserActionTester(const UserActionTester&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UserActionTester&)",
    "insertText": "operator(const UserActionTester&)"
  },
  {
    "label": "GetActionCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetActionCount(const std::string& user_action)"
  },
  {
    "label": "GetActionTimes()",
    "kind": "Method",
    "detail": "Function (std::vector<TimeTicks>)",
    "insertText": "GetActionTimes(const std::string& user_action)"
  },
  {
    "label": "ResetCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCounts()"
  },
  {
    "label": "OnUserAction()",
    "kind": "Method",
    "detail": "Function (private : typedef std::multimap<std::string,TimeTicks> UserActionTimesMap ; void)",
    "insertText": "OnUserAction(const std::string& user_action, TimeTicks action_time)"
  }
]