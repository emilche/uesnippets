[
  {
    "label": "FOsAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOsAllocator"
  },
  {
    "label": "FAlignedAllocatorInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignedAllocatorInternal"
  },
  {
    "label": "TBlockAllocationCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockAllocationCache"
  },
  {
    "label": "FTLSCleanup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTLSCleanup"
  },
  {
    "label": "TBlockAllocationLockFreeCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockAllocationLockFreeCache"
  },
  {
    "label": "FDefaultBlockAllocationTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultBlockAllocationTag"
  },
  {
    "label": "TConcurrentLinearAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConcurrentLinearAllocator"
  },
  {
    "label": "FBlockHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockHeader"
  },
  {
    "label": "FAllocationHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationHeader"
  },
  {
    "label": "TConcurrentLinearObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConcurrentLinearObject"
  },
  {
    "label": "TConcurrentLinearArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConcurrentLinearArrayAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TConcurrentLinearBulkObjectAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConcurrentLinearBulkObjectAllocator"
  },
  {
    "label": "FAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocation"
  },
  {
    "label": "TObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObject"
  },
  {
    "label": "TObjectArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectArray"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<atomic> # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # endif # include \" HAL / MallocAnsi . h \" # include \" HAL / UnrealMemory . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / LockFreeFixedSizeAllocator . h \" # include \" Misc / MemStack . h \" # ifdef USE_MALLOC_BINNED3 # if USE_MALLOC_BINNED3 # define SUPPORTS_VERY_LARGE_ALIGNMENTS 0 # else # define SUPPORTS_VERY_LARGE_ALIGNMENTS 1 # endif # else # define SUPPORTS_VERY_LARGE_ALIGNMENTS 1 # endif # if PLATFORM_HAS_ASAN_INCLUDE # include<sanitizer / asan_interface . h> # if)",
    "insertText": "defined(__SANITIZE_ADDRESS__) #define IS_ASAN_ENABLED 1 #elif defined(__has_feature) #if __has_feature(address_sanitizer) #define IS_ASAN_ENABLED 1 #else #define IS_ASAN_ENABLED 0 #endif #else #define IS_ASAN_ENABLED 0 #endif #else #define ASAN_POISON_MEMORY_REGION(addr, size) ((void)(addr), (void)(size)) #define ASAN_UNPOISON_MEMORY_REGION(addr, size) ((void)(addr), (void)(size))"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (bool SupportsAlignment = false ; bool UsesFMalloc = true ; void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Pointer, SIZE_T Size)"
  },
  {
    "label": "AnsiMalloc()",
    "kind": "Method",
    "detail": "Function (void* Pointer =)",
    "insertText": "AnsiMalloc(Size, Alignment)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "check(IsAligned(Pointer, Alignment))"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "MemoryTrace_Alloc(uint64(Pointer), Size, Alignment, EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64(Pointer), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "FTLSCleanup()",
    "kind": "Method",
    "detail": "Function (} } ; using FAlignedAllocator = FAlignedAllocatorInternal ; # else using FAlignedAllocator = FOsAllocator ; # endif template<uint32 BlockSize,Allocator = FOsAllocator> class TBlockAllocationCache { struct FTLSCleanup { void* Block = nullptr ; ~)",
    "insertText": "FTLSCleanup()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Block, BlockSize)"
  },
  {
    "label": "SwapBlock()",
    "kind": "Method",
    "detail": "Function (} } } ; void*)",
    "insertText": "SwapBlock(void* NewBlock)"
  },
  {
    "label": "SwapBlock()",
    "kind": "Method",
    "detail": "Function (void* Pointer =)",
    "insertText": "SwapBlock(nullptr)"
  },
  {
    "label": "SwapBlock()",
    "kind": "Method",
    "detail": "Function (Pointer =)",
    "insertText": "SwapBlock(Pointer)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<uint32 BlockSize,Allocator = FOsAllocator> class TBlockAllocationLockFreeCache { public :)",
    "insertText": "static_assert(BlockSize == FPageAllocator::PageSize, \"Only 64k pages are supported with this cache.\")"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Malloc(Size, Alignment)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().Free(Pointer)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Free(Pointer, Size)"
  },
  {
    "label": "SupportsFastPath()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FDefaultBlockAllocationTag { uint32 BlockSize = 6 4* 1 0 2 4 ; bool AllowOversizedBlocks = true ; bool RequiresAccurateSize = true ; bool InlineBlockAllocation = false ; const char* TagName = \" DefaultLinear \" ; using Allocator = TBlockAllocationLockFreeCache<BlockSize,FOsAllocator> ; } ; template<BlockAllocationTag> class TConcurrentLinearAllocator { bool)",
    "insertText": "SupportsFastPath((BlockAllocationTag::BlockSize <= (64 * 1024)) || SUPPORTS_VERY_LARGE_ALIGNMENTS) && FMath::IsPowerOfTwo(BlockAllocationTag::BlockSize)"
  },
  {
    "label": "LLM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM(static constexpr ELLMAllocType LLMAllocationType = BlockAllocationTag::Allocator::UsesFMalloc ? ELLMAllocType::FMalloc : ELLMAllocType::None;)"
  },
  {
    "label": "FAllocationHeader()",
    "kind": "Method",
    "detail": "Function (class FAllocationHeader { public :)",
    "insertText": "FAllocationHeader(FBlockHeader* InBlockHeader, SIZE_T InAllocationSize)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Offset =)",
    "insertText": "uintptr_t(this) - uintptr_t(InBlockHeader)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (BlockHeaderOffset =)",
    "insertText": "uint32(Offset)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (AllocationSize =)",
    "insertText": "uint32(InAllocationSize)"
  },
  {
    "label": "GetBlockHeader()",
    "kind": "Method",
    "detail": "Function (} FBlockHeader*)",
    "insertText": "GetBlockHeader()"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocationSize()"
  },
  {
    "label": "GetAllocationHeader()",
    "kind": "Method",
    "detail": "Function (} private : uint32 BlockHeaderOffset ; uint32 AllocationSize ; } ; FAllocationHeader*)",
    "insertText": "GetAllocationHeader(void* Pointer)"
  },
  {
    "label": "FBlockHeader()",
    "kind": "Method",
    "detail": "Function (} } struct FBlockHeader {)",
    "insertText": "FBlockHeader() : NextAllocationPtr(uintptr_t(this) + sizeof(FBlockHeader) + sizeof(FAllocationHeader))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} std::atomic_uint NumAllocations { UINT_MAX } ; uint8 Padding [ PLATFORM_CACHE_LINE_SIZE -)",
    "insertText": "sizeof(std::atomic_uint)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (Header -> NextAllocationPtr =)",
    "insertText": "uintptr_t(Header)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 DeltaCount = UINT_MAX - Header -> Num ;)",
    "insertText": "if(Header->NumAllocations.fetch_sub(DeltaCount, std::memory_order_acq_rel) == DeltaCount)"
  },
  {
    "label": "FBlockHeader()",
    "kind": "Method",
    "detail": "Function (Header -> ~)",
    "insertText": "FBlockHeader()"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(Header, BlockAllocationTag::BlockSize)"
  },
  {
    "label": "MemoryTrace_UnmarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_UnmarkAllocAsHeap(uint64(Header), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (BlockAllocationTag::)",
    "insertText": "Free(Header, BlockAllocationTag::BlockSize)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (} } } } ; FORCENOINLINE void)",
    "insertText": "AllocateBlock(FBlockHeader*& Header)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (uint32 BlockAlignment = SupportsFastPath ? BlockAllocationTag::BlockSize :)",
    "insertText": "alignof(FBlockHeader)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Header =)",
    "insertText": "new(BlockAllocationTag::Allocator::Malloc(BlockAllocationTag::BlockSize, BlockAlignment))"
  },
  {
    "label": "MemoryTrace_MarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_MarkAllocAsHeap(uint64(Header), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_POISON_MEMORY_REGION(Header + 1, BlockAllocationTag::BlockSize - sizeof(FBlockHeader))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } thread_local FTLSCleanup Cleanup ;)",
    "insertText": "new(&Cleanup)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (Header } ; } public : template<uint32 Alignment> void*)",
    "insertText": "Malloc(SIZE_T Size)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} template<T> void*)",
    "insertText": "Malloc()"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alignment(Alignment < alignof(FAllocationHeader)) ? alignof(FAllocationHeader)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (# if IS_ASAN_ENABLED Alignment =)",
    "insertText": "Align(Alignment, 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } thread_local FBlockHeader* Header ;)",
    "insertText": "if(Header == nullptr)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (AllocateNewBlock : if)",
    "insertText": "constexpr(BlockAllocationTag::InlineBlockAllocation)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "AllocateBlock(Header)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} AllocateNewItem : if)",
    "insertText": "constexpr(SupportsFastPath)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uintptr_t AlignedOffset =)",
    "insertText": "Align(Header->NextAllocationPtr, Alignment)"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (Header -> NextAllocationPtr = AlignedOffset + Size ; Header -> Num + + ;)",
    "insertText": "MemoryTrace_Alloc(uint64(AlignedOffset), Size, Alignment)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Default, reinterpret_cast<void*>(AlignedOffset), Size, ELLMTag::LinearAllocator, LLMAllocationType))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} SIZE_T HeaderSize =)",
    "insertText": "sizeof(FBlockHeader)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FBlockHeader* LargeHeader =)",
    "insertText": "new(BlockAllocationTag::Allocator::Malloc(HeaderSize + Size + Alignment, BlockAllocationTag::BlockSize))"
  },
  {
    "label": "MemoryTrace_MarkAllocAsHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_MarkAllocAsHeap(uint64(LargeHeader), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uintptr_t LargeAlignedOffset =)",
    "insertText": "Align(LargeHeader->NextAllocationPtr, Alignment)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (LargeHeader -> NextAllocationPtr =)",
    "insertText": "uintptr_t(LargeHeader)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (LargeHeader -> NumAllocations .)",
    "insertText": "store(1, std::memory_order_release)"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(uint64(LargeAlignedOffset), Size, Alignment)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Default, reinterpret_cast<void*>(LargeAlignedOffset), Size, ELLMTag::LinearAllocator, LLMAllocationType))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(HeaderSize + Size + Alignment <= BlockAllocationTag::BlockSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Header -> NextAllocationPtr = AlignedOffset + Size +)",
    "insertText": "sizeof(FAllocationHeader)"
  },
  {
    "label": "FAllocationHeader()",
    "kind": "Method",
    "detail": "Function (Header -> Num + + ; FAllocationHeader* AllocationHeader = reinterpret_cast<)",
    "insertText": "FAllocationHeader(AlignedOffset)"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(AllocationHeader, sizeof(FAllocationHeader) + Size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(AllocationHeader) FAllocationHeader(Header, Size)"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_POISON_MEMORY_REGION(AllocationHeader, sizeof(FAllocationHeader))"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(uint64(AllocationHeader), Size + sizeof(FAllocationHeader), Alignment)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Default, AllocationHeader, Size + sizeof(FAllocationHeader), ELLMTag::LinearAllocator, LLMAllocationType))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} SIZE_T HeaderSize =)",
    "insertText": "sizeof(FBlockHeader) + sizeof(FAllocationHeader)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FBlockHeader* LargeHeader =)",
    "insertText": "new(BlockAllocationTag::Allocator::Malloc(HeaderSize + Size + Alignment, alignof(FBlockHeader)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FAllocationHeader* AllocationHeader =)",
    "insertText": "new(reinterpret_cast<FAllocationHeader*>(LargeAlignedOffset) - 1) FAllocationHeader(LargeHeader, Size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Header =)",
    "insertText": "new(Header)"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64(Pointer))"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelFree(ELLMTracker::Default, Pointer, LLMAllocationType))"
  },
  {
    "label": "FBlockHeader()",
    "kind": "Method",
    "detail": "Function (FBlockHeader* Header = reinterpret_cast<)",
    "insertText": "FBlockHeader(AlignDown(Pointer, BlockAllocationTag::BlockSize))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (BlockAllocationTag::)",
    "insertText": "Free(Header, NextAllocationPtr - uintptr_t(Header))"
  },
  {
    "label": "GetAllocationHeader()",
    "kind": "Method",
    "detail": "Function (} } else { FAllocationHeader* AllocationHeader =)",
    "insertText": "GetAllocationHeader(Pointer)"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(AllocationHeader, sizeof(FAllocationHeader))"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64(AllocationHeader))"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelFree(ELLMTracker::Default, AllocationHeader, LLMAllocationType))"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_POISON_MEMORY_REGION(AllocationHeader, sizeof(FAllocationHeader) + AllocationHeader->GetAllocationSize())"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(Header, NextAllocationPtr - uintptr_t(Header))"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} } } } SIZE_T)",
    "insertText": "GetAllocationSize(void* Pointer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* New = nullptr ;)",
    "insertText": "if(Size != 0)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T OldSize =)",
    "insertText": "GetAllocationSize(Old)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(New, Old, Size < OldSize ? Size : OldSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Free(Old)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, void* Object)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Align)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* Ptr)"
  },
  {
    "label": "OnInvalidConcurrentLinearArrayAllocatorNum()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::Core::Private { [ [ noreturn ] ] void)",
    "insertText": "OnInvalidConcurrentLinearArrayAllocatorNum(int32 NewNum, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (} template<BlockAllocationTag> class TConcurrentLinearArrayAllocator { public : using SizeType = int32 ; enum { NeedsElementType = true } ; enum { RequireRangeCheck = true } ; template<ElementType> class ForElementType { public :)",
    "insertText": "ForElementType()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (TConcurrentLinearAllocator<BlockAllocationTag)",
    "insertText": "Free(Data)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveToEmpty(ForElementType& Other)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (} Data = Other . Data ; Other . Data = nullptr ; } ElementType*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "OnInvalidConcurrentLinearArrayAllocatorNum()",
    "kind": "Method",
    "detail": "Function (UE::Core::)",
    "insertText": "OnInvalidConcurrentLinearArrayAllocatorNum(NewMax, NumBytesPerElement)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(ElementType*)TConcurrentLinearAllocator<BlockAllocationTag>::Realloc(Data, NewMax * NumBytesPerElement, alignof(ElementType))"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackReserve(SizeType NewMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackShrink(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackGrow(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "FAllocation()",
    "kind": "Method",
    "detail": "Function (ElementType* Data = nullptr ; } ; using ForAnyElementType = ForElementType<FScriptContainerElement> ; } ; template<BlockAllocationTag> struct TAllocatorTraits<TConcurrentLinearArrayAllocator<BlockAllocationTag>> : TAllocatorTraitsBase<TConcurrentLinearArrayAllocator<BlockAllocationTag>> { enum { IsZeroConstruct = true } ; } ; template<BlockAllocationTag> using TConcurrentLinearBitArrayAllocator = TInlineAllocator<4,TConcurrentLinearArrayAllocator<BlockAllocationTag>> ; template<BlockAllocationTag> using TConcurrentLinearSparseArrayAllocator = TSparseArrayAllocator<TConcurrentLinearArrayAllocator<BlockAllocationTag>,TConcurrentLinearBitArrayAllocator<BlockAllocationTag>> ; template<BlockAllocationTag> using TConcurrentLinearSetAllocator = TSetAllocator<TConcurrentLinearSparseArrayAllocator<BlockAllocationTag>,TInlineAllocator<1,TConcurrentLinearBitArrayAllocator<BlockAllocationTag>>> ; using FConcurrentLinearArrayAllocator = TConcurrentLinearArrayAllocator<FDefaultBlockAllocationTag> ; using FConcurrentLinearBitArrayAllocator = TConcurrentLinearBitArrayAllocator<FDefaultBlockAllocationTag> ; using FConcurrentLinearSparseArrayAllocator = TConcurrentLinearSparseArrayAllocator<FDefaultBlockAllocationTag> ; using FConcurrentLinearSetAllocator = TConcurrentLinearSetAllocator<FDefaultBlockAllocationTag> ; template<BlockAllocationTag> class TConcurrentLinearBulkObjectAllocator { using ThisType = TConcurrentLinearBulkObjectAllocator<BlockAllocationTag> ; struct FAllocation { ~)",
    "insertText": "FAllocation()"
  },
  {
    "label": "TObject()",
    "kind": "Method",
    "detail": "Function (FAllocation* Next = nullptr ; } ; template<T> struct TObject final : FAllocation {)",
    "insertText": "TObject()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Alloc = reinterpret_cast<)",
    "insertText": "T(uintptr_t(this) + Align(sizeof(TObject<T>), alignof(T)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using DestructorType = T ; Alloc -> DestructorType::~)",
    "insertText": "T()"
  },
  {
    "label": "TObjectArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TObjectArray final : FAllocation {)",
    "insertText": "TObjectArray(SIZE_T InNum) : Num(InNum)"
  },
  {
    "label": "TObjectArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TObjectArray()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Alloc = reinterpret_cast<)",
    "insertText": "T(uintptr_t(this) + Align(sizeof(TObjectArray<T>), alignof(T)))"
  },
  {
    "label": "TConcurrentLinearBulkObjectAllocator()",
    "kind": "Method",
    "detail": "Function (} } SIZE_T Num ; } ; std::atomic<FAllocation*> Next { nullptr } ; public :)",
    "insertText": "TConcurrentLinearBulkObjectAllocator()"
  },
  {
    "label": "BulkDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BulkDelete()"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FAllocation* Allocation = Next .)",
    "insertText": "exchange(nullptr, std::memory_order_acquire)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (TConcurrentLinearAllocator<BlockAllocationTag)",
    "insertText": "Free(Allocation)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (SIZE_T TotalSize =)",
    "insertText": "Align(sizeof(FAllocation), Alignment)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FAllocation* Allocation =)",
    "insertText": "new(TConcurrentLinearAllocator<BlockAllocationTag>::Malloc(TotalSize, FMath::Max<size_t>(alignof(FAllocation), Alignment))) FAllocation()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (void* Alloc =)",
    "insertText": "Align(Allocation + 1, Alignment)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (Allocation -> Next = Next .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "MallocAndMemset()",
    "kind": "Method",
    "detail": "Function (} return Alloc ; } void*)",
    "insertText": "MallocAndMemset(SIZE_T Size, uint32 Alignment, uint8 MemsetChar)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Ptr, MemsetChar, Size)"
  },
  {
    "label": "MallocAndMemset()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "MallocAndMemset(uint8 MemsetChar)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Ptr =)",
    "insertText": "Malloc(sizeof(T), alignof(T))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Ptr, MemsetChar, sizeof(T))"
  },
  {
    "label": "MallocArray()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "MallocArray(SIZE_T Num)"
  },
  {
    "label": "MallocAndMemsetArray()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "MallocAndMemsetArray(SIZE_T Num, uint8 MemsetChar)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Ptr =)",
    "insertText": "Malloc(sizeof(T) * Num, alignof(T))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Ptr, MemsetChar, sizeof(T) * Num)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> T*)",
    "insertText": "Create(TArgs&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)Alloc) T(Forward<TArgs>(Args)...)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Alloc = CreateArrayNoInit<)",
    "insertText": "T(Num)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)(&Alloc[i])) T(Args...)"
  },
  {
    "label": "CreateNoInit()",
    "kind": "Method",
    "detail": "Function (} return Alloc ; } private : template<T> T*)",
    "insertText": "CreateNoInit()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (SIZE_T TotalSize =)",
    "insertText": "Align(sizeof(TObject<T>), alignof(T)) + sizeof(T)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (TObject<T>* Object =)",
    "insertText": "new(TConcurrentLinearAllocator<BlockAllocationTag>::template Malloc<FMath::Max(alignof(TObject<T>), alignof(T))>(TotalSize)) TObject<T>()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Alloc = reinterpret_cast<)",
    "insertText": "T(uintptr_t(Object) + Align(sizeof(TObject<T>), alignof(T)))"
  },
  {
    "label": "CreateArrayNoInit()",
    "kind": "Method",
    "detail": "Function (} return Alloc ; } template<T> T*)",
    "insertText": "CreateArrayNoInit(SIZE_T Num)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (SIZE_T TotalSize =)",
    "insertText": "Align(sizeof(TObjectArray<T>), alignof(T)) + (sizeof(T) * Num)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (TObjectArray<T>* Array =)",
    "insertText": "new(TConcurrentLinearAllocator<BlockAllocationTag>::template Malloc<FMath::Max(alignof(TObjectArray<T>), alignof(T))>(TotalSize)) TObjectArray<T>(Num)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Alloc = reinterpret_cast<)",
    "insertText": "T(uintptr_t(Array) + Align(sizeof(TObjectArray<T>), alignof(T)))"
  }
]