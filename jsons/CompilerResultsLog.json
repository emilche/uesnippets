[
  {
    "label": "FDelegateHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelegateHandle"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectKey"
  },
  {
    "label": "FBacktrackMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBacktrackMap"
  },
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "FCompilerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompilerEvent"
  },
  {
    "label": "TSharedRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSharedRef"
  },
  {
    "label": "FScopedCompilerEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCompilerEvent"
  },
  {
    "label": "FScopedBlueprintMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedBlueprintMessageLog"
  },
  {
    "label": "NotifyIntermediateObjectCreation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformTime . h \" # include \" Internationalization / Text . h \" # include \" Misc / CString . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # if WITH_EDITOR # include \" EdGraphToken . h \" # include \" Logging / TokenizedMessage . h \" # include \" Misc / CompilationResult . h \" # endif class FDelegateHandle ; class FTokenizedMessage ; class IMessageLogListing ; class UBlueprint ; class UEdGraphNode ; class UEdGraphPin ; class UObject ; struct FObjectKey ; # if WITH_EDITOR class FBacktrackMap { protected : TMap<UObject const*,UObject*> SourceBacktrackMap ; TMap<UEdGraphPin*,UEdGraphPin*> PinSourceBacktrackMap ; public : void)",
    "insertText": "NotifyIntermediateObjectCreation(UObject* NewObject, UObject* SourceObject)"
  },
  {
    "label": "NotifyIntermediatePinCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIntermediatePinCreation(UEdGraphPin* NewPin, UEdGraphPin* SourcePin)"
  },
  {
    "label": "FindSourceObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindSourceObject(UObject* PossiblyDuplicatedObject)"
  },
  {
    "label": "FindSourceObject()",
    "kind": "Method",
    "detail": "Function (UObject const*)",
    "insertText": "FindSourceObject(UObject const* PossiblyDuplicatedObject)"
  },
  {
    "label": "FindSourcePin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindSourcePin(UEdGraphPin* PossiblyDuplicatedPin)"
  },
  {
    "label": "FindSourcePin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin const*)",
    "insertText": "FindSourcePin(UEdGraphPin const* PossiblyDuplicatedPin)"
  },
  {
    "label": "FCompilerEvent()",
    "kind": "Method",
    "detail": "Function (} ; class FCompilerResultsLog { struct FCompilerEvent { FString Name ; uint32 Counter ; double StartTime ; double FinishTime ; TSharedPtr<FCompilerEvent> ParentEventScope ; TArray<TSharedRef<FCompilerEvent>> ChildEvents ;)",
    "insertText": "FCompilerEvent(TSharedPtr<FCompilerEvent> InParentEventScope = nullptr) : Name(TEXT(\"\")) , Counter(0) , StartTime(0.0) , FinishTime(0.0) , ParentEventScope(InParentEventScope)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const TCHAR* InName)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (Name = InName ; StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finish()"
  },
  {
    "label": "FCompilerResultsLog()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedPtr<FCompilerEvent> CurrentEventScope ; public : TArray<TSharedRef<FTokenizedMessage>> Messages ; int32 NumErrors ; int32 NumWarnings ; bool bSilentMode ; bool bLogInfoOnly ; bool bAnnotateMentionedNodes ; bool bLogDetailedResults ; int EventDisplayThresholdMs ; TSet<TWeakObjectPtr<UEdGraphNode>> AnnotatedNodes ; protected : FBacktrackMap SourceBacktrackMap ; FString SourcePath ; TMap<TWeakObjectPtr<const UEdGraphNode>,TWeakObjectPtr<const UEdGraphNode>> IntermediateTunnelNodeToTunnelInstanceMap ; TMap<TWeakObjectPtr<const UEdGraphNode>,TWeakObjectPtr<UEdGraphNode>> FullMacroBacktrackMap ; public :)",
    "insertText": "FCompilerResultsLog(bool bIsCompatibleWithEvents = true)"
  },
  {
    "label": "FCompilerResultsLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCompilerResultsLog()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  },
  {
    "label": "GetLogName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLogName()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (SourcePath = InSourcePath ; } template<. . . ArgTypes> TSharedRef<FTokenizedMessage>)",
    "insertText": "Error(const TCHAR* Format, ArgTypes... Args)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (+ + NumErrors ; TSharedRef<FTokenizedMessage> Line =)",
    "insertText": "Create(EMessageSeverity::Error)"
  },
  {
    "label": "InternalLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogMessage(NAME_None, Format, Line, Args...)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (+ + NumWarnings ; TSharedRef<FTokenizedMessage> Line =)",
    "insertText": "Create(EMessageSeverity::Warning)"
  },
  {
    "label": "InternalLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogMessage(ID, Format, Line, Args...)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTokenizedMessage> Line =)",
    "insertText": "Create(EMessageSeverity::Info)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (TArray<UEdGraphNode*> SourceNodes ;)",
    "insertText": "Tokenize(Format, *Line, SourceNodes, Args...)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PotentialMessages .)",
    "insertText": "FindOrAdd(Source).Add(Line)"
  },
  {
    "label": "CommitPotentialMessages()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CommitPotentialMessages(UEdGraphNode* Source)"
  },
  {
    "label": "NotifyIntermediatePinCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIntermediatePinCreation(UEdGraphPin* NewObject, UEdGraphPin* SourceObject)"
  },
  {
    "label": "NotifyIntermediateTunnelNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIntermediateTunnelNode(const UEdGraphNode* Node, const UEdGraphNode* OuterTunnelInstance)"
  },
  {
    "label": "NotifyIntermediateMacroNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIntermediateMacroNode(UEdGraphNode* SourceNode, const UEdGraphNode* IntermediateNode)"
  },
  {
    "label": "FindSourceMacroInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindSourceMacroInstance(const UEdGraphNode* IntermediateNode)"
  },
  {
    "label": "GetIntermediateTunnelInstance()",
    "kind": "Method",
    "detail": "Function (const UEdGraphNode*)",
    "insertText": "GetIntermediateTunnelInstance(const UEdGraphNode* IntermediateNode)"
  },
  {
    "label": "CalculateStableIdentifierForLatentActionManager()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalculateStableIdentifierForLatentActionManager(const UEdGraphNode* Node)"
  },
  {
    "label": "FindSourceObjectTypeChecked()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "FindSourceObjectTypeChecked(UObject* PossiblyDuplicatedObject)"
  },
  {
    "label": "FindSourceObjectTypeChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> T const*)",
    "insertText": "FindSourceObjectTypeChecked(UObject const* PossiblyDuplicatedObject)"
  },
  {
    "label": "FindSourcePin()",
    "kind": "Method",
    "detail": "Function (const UEdGraphPin*)",
    "insertText": "FindSourcePin(const UEdGraphPin* PossiblyDuplicatedPin)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FCompilerResultsLog const& Other, bool bWriteToSystemLog = false)"
  },
  {
    "label": "BeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEvent(const TCHAR* InName)"
  },
  {
    "label": "EndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEvent()"
  },
  {
    "label": "SetSilentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSilentMode(bool bValue)"
  },
  {
    "label": "AddChildEvent()",
    "kind": "Method",
    "detail": "Function (bSilentMode = bValue ; } ; protected : void)",
    "insertText": "AddChildEvent(TSharedPtr<FCompilerEvent>& ParentEventScope, TSharedRef<FCompilerEvent>& ChildEventScope)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tokenize(const TCHAR* Text, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNode)"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (OutMessage .)",
    "insertText": "AddToken(FTextToken::Create(FText::FromString(Text)))"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . ArgTypes> void)",
    "insertText": "Tokenize(const TCHAR* Format, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNode, T First, ArgTypes... Rest)"
  },
  {
    "label": "UE_PTRDIFF_TO_INT32()",
    "kind": "Method",
    "detail": "Function (int32 TokenLength =)",
    "insertText": "UE_PTRDIFF_TO_INT32(DelimiterStr - Format)"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (OutMessage .)",
    "insertText": "AddToken(FTextToken::Create(FText::FromString(FString::ConstructFromPtrSize(Format, TokenLength))))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(First, this, OutMessage, OutSourceNode)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const TCHAR* NextChunk = DelimiterStr +)",
    "insertText": "Strlen(TEXT(\"@@\"))"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tokenize(NextChunk, OutMessage, OutSourceNode, Rest...)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "Tokenize(Format, OutMessage, OutSourceNode)"
  },
  {
    "label": "InternalLogMessage()",
    "kind": "Method",
    "detail": "Function (} } template<. . . ArgTypes> void)",
    "insertText": "InternalLogMessage(FName MessageID, const TCHAR* Format, const TSharedRef<FTokenizedMessage>& Message, ArgTypes... Args)"
  },
  {
    "label": "Tokenize()",
    "kind": "Method",
    "detail": "Function (TArray<UEdGraphNode*> SourceNodes ;)",
    "insertText": "Tokenize(Format, *Message, SourceNodes, Args...)"
  },
  {
    "label": "InternalLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogMessage(MessageID, Message, SourceNodes)"
  },
  {
    "label": "AnnotateNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnnotateNode(const TArray<UEdGraphNode*>& Nodes, TSharedRef<FTokenizedMessage> LogLine)"
  },
  {
    "label": "InternalLogSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogSummary()"
  },
  {
    "label": "InternalLogEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogEvent(const FCompilerEvent& InEvent, int32 InDepth = 0)"
  },
  {
    "label": "InternalLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLogMessage(FName MessageID, const TSharedRef<FTokenizedMessage>& Message, const TArray<UEdGraphNode*>& SourceNodes)"
  },
  {
    "label": "FEdGraphToken_Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEdGraphToken_Create(const UObject* InObject, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNodes)"
  },
  {
    "label": "FEdGraphToken_Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEdGraphToken_Create(const UEdGraphPin* InPin, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNodes)"
  },
  {
    "label": "FEdGraphToken_Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEdGraphToken_Create(const TCHAR* String, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNodes)"
  },
  {
    "label": "FEdGraphToken_Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEdGraphToken_Create(const FField* InField, FTokenizedMessage& OutMessage, TArray<UEdGraphNode*>& OutSourceNodes)"
  },
  {
    "label": "IncrementErrorCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementErrorCount()"
  },
  {
    "label": "IncrementWarningCount()",
    "kind": "Method",
    "detail": "Function (+ + NumErrors ; } void)",
    "insertText": "IncrementWarningCount()"
  },
  {
    "label": "IsMessageEnabled()",
    "kind": "Method",
    "detail": "Function (+ + NumWarnings ; } ; bool)",
    "insertText": "IsMessageEnabled(FName ID)"
  },
  {
    "label": "ParseCompilerLogDump()",
    "kind": "Method",
    "detail": "Function (private : TMap<FObjectKey,TArray<TSharedRef<FTokenizedMessage>>> PotentialMessages ; TArray<TSharedRef<FTokenizedMessage>>)",
    "insertText": "ParseCompilerLogDump(const FString& LogDump)"
  },
  {
    "label": "OnGotoError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGotoError(const class TSharedRef<IMessageToken>& Token)"
  },
  {
    "label": "GetGlobalModuleCompilerDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGlobalModuleCompilerDump(const FString& LogDump, ECompilationResult::Type CompilationResult, bool bShowLog)"
  },
  {
    "label": "GetNodesFromTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodesFromTokens(const TArray<TSharedRef<IMessageToken> >& MessageTokens, TArray<UEdGraphNode*>& OutOwnerNodes)"
  },
  {
    "label": "FScopedBlueprintMessageLog()",
    "kind": "Method",
    "detail": "Function (} } ; class FScopedBlueprintMessageLog { public :)",
    "insertText": "FScopedBlueprintMessageLog(UBlueprint* InBlueprint)"
  },
  {
    "label": "FScopedBlueprintMessageLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedBlueprintMessageLog()"
  },
  {
    "label": "BP_SCOPED_COMPILER_EVENT_STAT()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<IMessageLogListing> Log ; FName LogName ; } ; # if STATS # define)",
    "insertText": "BP_SCOPED_COMPILER_EVENT_STAT(Stat) \\ SCOPE_CYCLE_COUNTER(Stat)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(Stat)"
  },
  {
    "label": "BP_SCOPED_COMPILER_EVENT_STAT()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "BP_SCOPED_COMPILER_EVENT_STAT(Stat) \\ TRACE_CPUPROFILER_EVENT_SCOPE(Stat)"
  }
]