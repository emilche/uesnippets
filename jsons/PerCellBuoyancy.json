[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPerCellBuoyancy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPerCellBuoyancy"
  },
  {
    "label": "TPerCellBuoyancy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayND . h \" # include \" Chaos / UniformGrid . h \" # include \" Chaos / Vector . h \" namespace Chaos { template<class T,int d> class TPerCellBuoyancy { public :)",
    "insertText": "TPerCellBuoyancy(const TArrayND<T, 3>& Density, const TVector<T, d>& Direction = TVector<T, d>(0, 1, 0), const T Magnitude = (T)9.8) : MDensity(Density), MAcceleration(Magnitude * Direction)"
  },
  {
    "label": "TPerCellBuoyancy()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TPerCellBuoyancy()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(const TUniformGrid<T, d>& Grid, TArrayFaceND<T, d>& Velocity, const T Dt, const Pair<int32, TVector<int32, d>> Index)"
  },
  {
    "label": "MDensity()",
    "kind": "Method",
    "detail": "Function (T DensitySum =)",
    "insertText": "MDensity(Grid.ClampIndex(Index.Second + TVector<int32, d>::AxisVector(Index.First))) + MDensity(Index.Second)"
  },
  {
    "label": "Velocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Velocity(Index) += (T)"
  }
]