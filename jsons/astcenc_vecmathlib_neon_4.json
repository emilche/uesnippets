[
  {
    "label": "vfloat4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vfloat4"
  },
  {
    "label": "vint4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vint4"
  },
  {
    "label": "vmask4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vmask4"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_NEON_4_H_INCLUDED # define ASTC_VECMATHLIB_NEON_4_H_INCLUDED # ifndef ASTCENC_SIMD_INLINE # error \" Include astcenc_vecmathlib . h,do not include directly \" # endif # include<cstdio> struct vfloat4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4()"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(const float *p)"
  },
  {
    "label": "vld1q_f32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vld1q_f32(p)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a)"
  },
  {
    "label": "vdupq_n_f32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vdupq_n_f32(a)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a, float b, float c, float d)"
  },
  {
    "label": "vld1q_f32()",
    "kind": "Method",
    "detail": "Function (float v [ 4 ] { a,b,c,d } ; m =)",
    "insertText": "vld1q_f32(v)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float32x4_t a)"
  },
  {
    "label": "lane()",
    "kind": "Method",
    "detail": "Function (m = a ; } template<int l> ASTCENC_SIMD_INLINE float)",
    "insertText": "lane()"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (} template<int l> ASTCENC_SIMD_INLINE void)",
    "insertText": "set_lane(float a)"
  },
  {
    "label": "vld1q_lane_f32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vld1q_lane_f32(&a, m, l)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "zero()"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "load1(const float* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "loada(const float* p)"
  },
  {
    "label": "lane_id()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "lane_id()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(16)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (0 . 0 f,1 . 0 f,2 . 0 f,3 . 0 f } ; return)",
    "insertText": "vfloat4(vld1q_f32(data))"
  },
  {
    "label": "swz()",
    "kind": "Method",
    "detail": "Function (} template<int l0,int l1> ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "swz()"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} float32x4_t m ; } ; struct vint4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vint4()"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const int *p)"
  },
  {
    "label": "vld1q_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vld1q_s32(p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const uint8_t *p)"
  },
  {
    "label": "vld1_lane_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t t8 { } ; t8 =)",
    "insertText": "vld1_lane_u32(reinterpret_cast<const uint32_t*>(p), t8, 0)"
  },
  {
    "label": "vget_low_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t t16 =)",
    "insertText": "vget_low_u16(vmovl_u8(vreinterpret_u8_u32(t8)))"
  },
  {
    "label": "vreinterpretq_s32_u32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vreinterpretq_s32_u32(vmovl_u16(t16))"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a)"
  },
  {
    "label": "vdupq_n_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vdupq_n_s32(a)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a, int b, int c, int d)"
  },
  {
    "label": "vld1q_s32()",
    "kind": "Method",
    "detail": "Function (int v [ 4 ] { a,b,c,d } ; m =)",
    "insertText": "vld1q_s32(v)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int32x4_t a)"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (} template<int l> ASTCENC_SIMD_INLINE void)",
    "insertText": "set_lane(int a)"
  },
  {
    "label": "vld1q_lane_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vld1q_lane_s32(&a, m, l)"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "load1(const int* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "loada(const int* p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (0,1,2,3 } ; return)",
    "insertText": "vint4(vld1q_s32(data))"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} int32x4_t m ; } ; struct vmask4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(uint32x4_t a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (m = a ; } # if !)",
    "insertText": "defined(_MSC_VER) ASTCENC_SIMD_INLINE explicit vmask4(int32x4_t a)"
  },
  {
    "label": "vreinterpretq_u32_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vreinterpretq_u32_s32(a)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} # endif ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a)"
  },
  {
    "label": "vreinterpretq_u32_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vreinterpretq_u32_s32(vdupq_n_s32(a == true ? -1 : 0))"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a, bool b, bool c, bool d)"
  },
  {
    "label": "vreinterpretq_u32_s32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "vreinterpretq_u32_s32(ms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32x4_t m ; } ; ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a, vmask4 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "mask(vmask4 a)"
  },
  {
    "label": "vld1q_s32()",
    "kind": "Method",
    "detail": "Function (const int shifta [ 4 ] { 0,1,2,3 } ; const int32x4_t shift =)",
    "insertText": "vld1q_s32(shifta)"
  },
  {
    "label": "vshrq_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t tmp =)",
    "insertText": "vshrq_n_u32(a.m, 31)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a, vint4 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsl(vint4 a)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsr(vint4 a)"
  },
  {
    "label": "vreinterpretq_u32_s32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t ua =)",
    "insertText": "vreinterpretq_u32_s32(a.m)"
  },
  {
    "label": "vshlq_u32()",
    "kind": "Method",
    "detail": "Function (ua =)",
    "insertText": "vshlq_u32(ua, vdupq_n_s32(-s))"
  },
  {
    "label": "asr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "asr(vint4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "min(vint4 a, vint4 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "max(vint4 a, vint4 b)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmin(vint4 a)"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmax(vint4 a)"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE int)",
    "insertText": "hadd_s(vint4 a)"
  },
  {
    "label": "vadd_s32()",
    "kind": "Method",
    "detail": "Function (int32x2_t t =)",
    "insertText": "vadd_s32(vget_high_s32(a.m), vget_low_s32(a.m))"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vint4 a, int* p)"
  },
  {
    "label": "vst1q_s32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_s32(p, a.m)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vint4 a, int* p)"
  },
  {
    "label": "store_nbytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_nbytes(vint4 a, uint8_t* p)"
  },
  {
    "label": "vst1q_lane_s32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_s32(reinterpret_cast<int32_t*>(p), a.m, 0)"
  },
  {
    "label": "gatheri()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "gatheri(const int* base, vint4 indices)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(indices, idx)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (vals [ 0 ] = base [ idx [ 0 ] ] ; vals [ 1 ] = base [ idx [ 1 ] ] ; vals [ 2 ] = base [ idx [ 2 ] ] ; vals [ 3 ] = base [ idx [ 3 ] ] ; return)",
    "insertText": "vint4(vals)"
  },
  {
    "label": "pack_low_bytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "pack_low_bytes(vint4 a)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (0,4,8,1 2,0,0,0,0,0,0,0,0,0,0,0,0 } ; uint8x16_t idx =)",
    "insertText": "vld1q_u8(shuf)"
  },
  {
    "label": "vreinterpretq_s8_s32()",
    "kind": "Method",
    "detail": "Function (int8x16_t av =)",
    "insertText": "vreinterpretq_s8_s32(a.m)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "select(vint4 a, vint4 b, vmask4 cond)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "operator(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "min(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "max(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "abs(vfloat4 a)"
  },
  {
    "label": "vdupq_n_f32()",
    "kind": "Method",
    "detail": "Function (float32x4_t zero =)",
    "insertText": "vdupq_n_f32(0.0f)"
  },
  {
    "label": "vsubq_f32()",
    "kind": "Method",
    "detail": "Function (float32x4_t inv =)",
    "insertText": "vsubq_f32(zero, a.m)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "round(vfloat4 a)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmin(vfloat4 a)"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmax(vfloat4 a)"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hadd_s(vfloat4 a)"
  },
  {
    "label": "vadd_f32()",
    "kind": "Method",
    "detail": "Function (float32x2_t t =)",
    "insertText": "vadd_f32(vget_high_f32(a.m), vget_low_f32(a.m))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "sqrt(vfloat4 a)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "select_msb()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select_msb(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "vdupq_n_u32()",
    "kind": "Method",
    "detail": "Function (const uint32x4_t msb =)",
    "insertText": "vdupq_n_u32(0x80000000u)"
  },
  {
    "label": "vcgeq_u32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t mask =)",
    "insertText": "vcgeq_u32(cond.m, msb)"
  },
  {
    "label": "gatherf()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "gatherf(const float* base, vint4 indices)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vals [ 0 ] = base [ idx [ 0 ] ] ; vals [ 1 ] = base [ idx [ 1 ] ] ; vals [ 2 ] = base [ idx [ 2 ] ] ; vals [ 3 ] = base [ idx [ 3 ] ] ; return)",
    "insertText": "vfloat4(vals)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vfloat4 a, float* p)"
  },
  {
    "label": "vst1q_f32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f32(p, a.m)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vfloat4 a, float* p)"
  },
  {
    "label": "float_to_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int(vfloat4 a)"
  },
  {
    "label": "float_to_int_rtn()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int_rtn(vfloat4 a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "round(a)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "int_to_float(vint4 a)"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_float16(vfloat4 a)"
  },
  {
    "label": "vcvt_f16_f32()",
    "kind": "Method",
    "detail": "Function (float16x4_t f16 =)",
    "insertText": "vcvt_f16_f32(a.m)"
  },
  {
    "label": "vreinterpret_u16_f16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t u16 =)",
    "insertText": "vreinterpret_u16_f16(f16)"
  },
  {
    "label": "vmovl_u16()",
    "kind": "Method",
    "detail": "Function (uint32x4_t u32 =)",
    "insertText": "vmovl_u16(u16)"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "float_to_float16(float a)"
  },
  {
    "label": "av()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "av(a)"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "float16_to_float(vint4 a)"
  },
  {
    "label": "vmovn_u32()",
    "kind": "Method",
    "detail": "Function (uint16x4_t u16 =)",
    "insertText": "vmovn_u32(u32)"
  },
  {
    "label": "vreinterpret_f16_u16()",
    "kind": "Method",
    "detail": "Function (float16x4_t f16 =)",
    "insertText": "vreinterpret_f16_u16(u16)"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "float16_to_float(uint16_t a)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_as_int(vfloat4 a)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "int_as_float(vint4 v)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4& t0p)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4& t0p, vint4& t1p)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; t1p = t1 ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4& t0p, vint4& t1p, vint4& t2p, vint4& t3p)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; t1p = t1 ; t2p = t2 ; t3p = t3 ; } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 idx)"
  },
  {
    "label": "vreinterpretq_s8_s32()",
    "kind": "Method",
    "detail": "Function (int8x16_t table {)",
    "insertText": "vreinterpretq_s8_s32(t0.m)"
  },
  {
    "label": "vorrq_s32()",
    "kind": "Method",
    "detail": "Function (int32x4_t idx_masked =)",
    "insertText": "vorrq_s32(idx.m, vdupq_n_s32(0xFFFFFF00))"
  },
  {
    "label": "vreinterpretq_u8_s32()",
    "kind": "Method",
    "detail": "Function (uint8x16_t idx_bytes =)",
    "insertText": "vreinterpretq_u8_s32(idx_masked)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 idx)"
  },
  {
    "label": "vreinterpretq_s8_s32()",
    "kind": "Method",
    "detail": "Function (int8x16x2_t table {)",
    "insertText": "vreinterpretq_s8_s32(t0.m), vreinterpretq_s8_s32(t1.m)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4 idx)"
  },
  {
    "label": "vreinterpretq_s8_s32()",
    "kind": "Method",
    "detail": "Function (int8x16x4_t table {)",
    "insertText": "vreinterpretq_s8_s32(t0.m), vreinterpretq_s8_s32(t1.m), vreinterpretq_s8_s32(t2.m), vreinterpretq_s8_s32(t3.m)"
  },
  {
    "label": "interleave_rgba8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "interleave_rgba8(vint4 r, vint4 g, vint4 b, vint4 a)"
  },
  {
    "label": "store_lanes_masked()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_lanes_masked(int* base, vint4 data, vmask4 mask)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store(data, base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<2>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<1>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.lane<0>())"
  },
  {
    "label": "popcount()",
    "kind": "Method",
    "detail": "Function (} } # define ASTCENC_USE_NATIVE_POPCOUNT 1 ASTCENC_SIMD_INLINE int)",
    "insertText": "popcount(uint64_t v)"
  }
]