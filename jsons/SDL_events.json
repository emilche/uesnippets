[
  {
    "label": "SDL_CommonEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_CommonEvent"
  },
  {
    "label": "SDL_DisplayEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_DisplayEvent"
  },
  {
    "label": "SDL_WindowEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_WindowEvent"
  },
  {
    "label": "SDL_KeyboardEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_KeyboardEvent"
  },
  {
    "label": "SDL_TextEditingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_TextEditingEvent"
  },
  {
    "label": "SDL_TextEditingExtEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_TextEditingExtEvent"
  },
  {
    "label": "SDL_TextInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_TextInputEvent"
  },
  {
    "label": "SDL_MouseMotionEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_MouseMotionEvent"
  },
  {
    "label": "SDL_MouseButtonEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_MouseButtonEvent"
  },
  {
    "label": "SDL_MouseWheelEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_MouseWheelEvent"
  },
  {
    "label": "SDL_JoyAxisEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyAxisEvent"
  },
  {
    "label": "SDL_JoyBallEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyBallEvent"
  },
  {
    "label": "SDL_JoyHatEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyHatEvent"
  },
  {
    "label": "SDL_JoyButtonEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyButtonEvent"
  },
  {
    "label": "SDL_JoyDeviceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyDeviceEvent"
  },
  {
    "label": "SDL_JoyBatteryEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_JoyBatteryEvent"
  },
  {
    "label": "SDL_ControllerAxisEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_ControllerAxisEvent"
  },
  {
    "label": "SDL_ControllerButtonEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_ControllerButtonEvent"
  },
  {
    "label": "SDL_ControllerDeviceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_ControllerDeviceEvent"
  },
  {
    "label": "SDL_ControllerTouchpadEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_ControllerTouchpadEvent"
  },
  {
    "label": "SDL_ControllerSensorEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_ControllerSensorEvent"
  },
  {
    "label": "SDL_AudioDeviceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_AudioDeviceEvent"
  },
  {
    "label": "SDL_TouchFingerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_TouchFingerEvent"
  },
  {
    "label": "SDL_MultiGestureEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_MultiGestureEvent"
  },
  {
    "label": "SDL_DollarGestureEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_DollarGestureEvent"
  },
  {
    "label": "SDL_DropEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_DropEvent"
  },
  {
    "label": "SDL_SensorEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_SensorEvent"
  },
  {
    "label": "SDL_QuitEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_QuitEvent"
  },
  {
    "label": "SDL_UserEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_UserEvent"
  },
  {
    "label": "SDL_SysWMmsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_SysWMmsg"
  },
  {
    "label": "SDL_SysWMEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_SysWMEvent"
  },
  {
    "label": "SDL_TEXTEDITINGEVENT_TEXT_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_events_h_ # define SDL_events_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_video . h \" # include \" SDL_keyboard . h \" # include \" SDL_mouse . h \" # include \" SDL_joystick . h \" # include \" SDL_gamecontroller . h \" # include \" SDL_quit . h \" # include \" SDL_gesture . h \" # include \" SDL_touch . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif # define SDL_RELEASED 0 # define SDL_PRESSED 1 typedef enum { SDL_FIRSTEVENT = 0,SDL_QUIT = 0 x100,SDL_APP_TERMINATING,SDL_APP_LOWMEMORY,SDL_APP_WILLENTERBACKGROUND,SDL_APP_DIDENTERBACKGROUND,SDL_APP_WILLENTERFOREGROUND,SDL_APP_DIDENTERFOREGROUND,SDL_LOCALECHANGED,SDL_DISPLAYEVENT = 0 x150,SDL_WINDOWEVENT = 0 x200,SDL_SYSWMEVENT,SDL_KEYDOWN = 0 x300,SDL_KEYUP,SDL_TEXTEDITING,SDL_TEXTINPUT,SDL_KEYMAPCHANGED,SDL_TEXTEDITING_EXT,SDL_MOUSEMOTION = 0 x400,SDL_MOUSEBUTTONDOWN,SDL_MOUSEBUTTONUP,SDL_MOUSEWHEEL,SDL_JOYAXISMOTION = 0 x600,SDL_JOYBALLMOTION,SDL_JOYHATMOTION,SDL_JOYBUTTONDOWN,SDL_JOYBUTTONUP,SDL_JOYDEVICEADDED,SDL_JOYDEVICEREMOVED,SDL_JOYBATTERYUPDATED,SDL_CONTROLLERAXISMOTION = 0 x650,SDL_CONTROLLERBUTTONDOWN,SDL_CONTROLLERBUTTONUP,SDL_CONTROLLERDEVICEADDED,SDL_CONTROLLERDEVICEREMOVED,SDL_CONTROLLERDEVICEREMAPPED,SDL_CONTROLLERTOUCHPADDOWN,SDL_CONTROLLERTOUCHPADMOTION,SDL_CONTROLLERTOUCHPADUP,SDL_CONTROLLERSENSORUPDATE,SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3,SDL_CONTROLLERSTEAMHANDLEUPDATED,SDL_FINGERDOWN = 0 x700,SDL_FINGERUP,SDL_FINGERMOTION,SDL_DOLLARGESTURE = 0 x800,SDL_DOLLARRECORD,SDL_MULTIGESTURE,SDL_CLIPBOARDUPDATE = 0 x900,SDL_DROPFILE = 0 x1000,SDL_DROPTEXT,SDL_DROPBEGIN,SDL_DROPCOMPLETE,SDL_AUDIODEVICEADDED = 0 x1100,SDL_AUDIODEVICEREMOVED,SDL_SENSORUPDATE = 0 x1200,SDL_RENDER_TARGETS_RESET = 0 x2000,SDL_RENDER_DEVICE_RESET,SDL_POLLSENTINEL = 0 x7F00,SDL_USEREVENT = 0 x8000,SDL_LASTEVENT = 0 xFFFF } SDL_EventType ; typedef struct SDL_CommonEvent { Uint32 type ; Uint32 timestamp ; } SDL_CommonEvent ; typedef struct SDL_DisplayEvent { Uint32 type ; Uint32 timestamp ; Uint32 display ; Uint8 event ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; Sint32 data1 ; } SDL_DisplayEvent ; typedef struct SDL_WindowEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Uint8 event ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; Sint32 data1 ; Sint32 data2 ; } SDL_WindowEvent ; typedef struct SDL_KeyboardEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Uint8 state ; Uint8 repeat ; Uint8 padding2 ; Uint8 padding3 ; SDL_Keysym keysym ; } SDL_KeyboardEvent ; # define)",
    "insertText": "SDL_TEXTEDITINGEVENT_TEXT_SIZE(32)"
  },
  {
    "label": "SDL_TEXTINPUTEVENT_TEXT_SIZE()",
    "kind": "Method",
    "detail": "Function (Uint32 type ; Uint32 timestamp ; Uint32 windowID ; char text [ SDL_TEXTEDITINGEVENT_TEXT_SIZE ] ; Sint32 start ; Sint32 length ; } SDL_TextEditingEvent ; typedef struct SDL_TextEditingExtEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; char* text ; Sint32 start ; Sint32 length ; } SDL_TextEditingExtEvent ; # define)",
    "insertText": "SDL_TEXTINPUTEVENT_TEXT_SIZE(32)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Uint32 type ; Uint32 timestamp ; Uint32 windowID ; char text [ SDL_TEXTINPUTEVENT_TEXT_SIZE ] ; } SDL_TextInputEvent ; typedef struct SDL_MouseMotionEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Uint32 which ; Uint32 state ; Sint32 x ; Sint32 y ; Sint32 xrel ; Sint32 yrel ; } SDL_MouseMotionEvent ; typedef struct SDL_MouseButtonEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Uint32 which ; Uint8 button ; Uint8 state ; Uint8 clicks ; Uint8 padding1 ; Sint32 x ; Sint32 y ; } SDL_MouseButtonEvent ; typedef struct SDL_MouseWheelEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Uint32 which ; Sint32 x ; Sint32 y ; Uint32 direction ; float preciseX ; float preciseY ; Sint32 mouseX ; Sint32 mouseY ; } SDL_MouseWheelEvent ; typedef struct SDL_JoyAxisEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 axis ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; Sint16 value ; Uint16 padding4 ; } SDL_JoyAxisEvent ; typedef struct SDL_JoyBallEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 ball ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; Sint16 xrel ; Sint16 yrel ; } SDL_JoyBallEvent ; typedef struct SDL_JoyHatEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 hat ; Uint8 value ; Uint8 padding1 ; Uint8 padding2 ; } SDL_JoyHatEvent ; typedef struct SDL_JoyButtonEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 button ; Uint8 state ; Uint8 padding1 ; Uint8 padding2 ; } SDL_JoyButtonEvent ; typedef struct SDL_JoyDeviceEvent { Uint32 type ; Uint32 timestamp ; Sint32 which ; } SDL_JoyDeviceEvent ; typedef struct SDL_JoyBatteryEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; SDL_JoystickPowerLevel level ; } SDL_JoyBatteryEvent ; typedef struct SDL_ControllerAxisEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 axis ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; Sint16 value ; Uint16 padding4 ; } SDL_ControllerAxisEvent ; typedef struct SDL_ControllerButtonEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Uint8 button ; Uint8 state ; Uint8 padding1 ; Uint8 padding2 ; } SDL_ControllerButtonEvent ; typedef struct SDL_ControllerDeviceEvent { Uint32 type ; Uint32 timestamp ; Sint32 which ; } SDL_ControllerDeviceEvent ; typedef struct SDL_ControllerTouchpadEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Sint32 touchpad ; Sint32 finger ; float x ; float y ; float pressure ; } SDL_ControllerTouchpadEvent ; typedef struct SDL_ControllerSensorEvent { Uint32 type ; Uint32 timestamp ; SDL_JoystickID which ; Sint32 sensor ; float data [ 3 ] ; Uint64 timestamp_us ; } SDL_ControllerSensorEvent ; typedef struct SDL_AudioDeviceEvent { Uint32 type ; Uint32 timestamp ; Uint32 which ; Uint8 iscapture ; Uint8 padding1 ; Uint8 padding2 ; Uint8 padding3 ; } SDL_AudioDeviceEvent ; typedef struct SDL_TouchFingerEvent { Uint32 type ; Uint32 timestamp ; SDL_TouchID touchId ; SDL_FingerID fingerId ; float x ; float y ; float dx ; float dy ; float pressure ; Uint32 windowID ; } SDL_TouchFingerEvent ; typedef struct SDL_MultiGestureEvent { Uint32 type ; Uint32 timestamp ; SDL_TouchID touchId ; float dTheta ; float dDist ; float x ; float y ; Uint16 numFingers ; Uint16 padding ; } SDL_MultiGestureEvent ; typedef struct SDL_DollarGestureEvent { Uint32 type ; Uint32 timestamp ; SDL_TouchID touchId ; SDL_GestureID gestureId ; Uint32 numFingers ; float error ; float x ; float y ; } SDL_DollarGestureEvent ; typedef struct SDL_DropEvent { Uint32 type ; Uint32 timestamp ; char* file ; Uint32 windowID ; } SDL_DropEvent ; typedef struct SDL_SensorEvent { Uint32 type ; Uint32 timestamp ; Sint32 which ; float data [ 6 ] ; Uint64 timestamp_us ; } SDL_SensorEvent ; typedef struct SDL_QuitEvent { Uint32 type ; Uint32 timestamp ; } SDL_QuitEvent ; typedef struct SDL_UserEvent { Uint32 type ; Uint32 timestamp ; Uint32 windowID ; Sint32 code ; void* data1 ; void* data2 ; } SDL_UserEvent ; struct SDL_SysWMmsg ; typedef struct SDL_SysWMmsg SDL_SysWMmsg ; typedef struct SDL_SysWMEvent { Uint32 type ; Uint32 timestamp ; SDL_SysWMmsg* msg ; } SDL_SysWMEvent ; typedef union SDL_Event { Uint32 type ; SDL_CommonEvent common ; SDL_DisplayEvent display ; SDL_WindowEvent window ; SDL_KeyboardEvent key ; SDL_TextEditingEvent edit ; SDL_TextEditingExtEvent editExt ; SDL_TextInputEvent text ; SDL_MouseMotionEvent motion ; SDL_MouseButtonEvent button ; SDL_MouseWheelEvent wheel ; SDL_JoyAxisEvent jaxis ; SDL_JoyBallEvent jball ; SDL_JoyHatEvent jhat ; SDL_JoyButtonEvent jbutton ; SDL_JoyDeviceEvent jdevice ; SDL_JoyBatteryEvent jbattery ; SDL_ControllerAxisEvent caxis ; SDL_ControllerButtonEvent cbutton ; SDL_ControllerDeviceEvent cdevice ; SDL_ControllerTouchpadEvent ctouchpad ; SDL_ControllerSensorEvent csensor ; SDL_AudioDeviceEvent adevice ; SDL_SensorEvent sensor ; SDL_QuitEvent quit ; SDL_UserEvent user ; SDL_SysWMEvent syswm ; SDL_TouchFingerEvent tfinger ; SDL_MultiGestureEvent mgesture ; SDL_DollarGestureEvent dgesture ; SDL_DropEvent drop ; Uint8 padding [)",
    "insertText": "sizeof(void *) <= 8 ? 56 : sizeof(void *) == 16 ? 64 : 3 * sizeof(void *)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (} SDL_Event ;)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(SDL_Event, sizeof(SDL_Event) == sizeof(((SDL_Event *)NULL)->padding))"
  },
  {
    "label": "SDL_PumpEvents()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_PumpEvents(void)"
  },
  {
    "label": "SDL_PeepEvents()",
    "kind": "Method",
    "detail": "Function (typedef enum { SDL_ADDEVENT,SDL_PEEKEVENT,SDL_GETEVENT } SDL_eventaction ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_PeepEvents(SDL_Event * events, int numevents, SDL_eventaction action, Uint32 minType, Uint32 maxType)"
  },
  {
    "label": "SDL_HasEvent()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_HasEvent(Uint32 type)"
  },
  {
    "label": "SDL_HasEvents()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_HasEvents(Uint32 minType, Uint32 maxType)"
  },
  {
    "label": "SDL_FlushEvent()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_FlushEvent(Uint32 type)"
  },
  {
    "label": "SDL_FlushEvents()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_FlushEvents(Uint32 minType, Uint32 maxType)"
  },
  {
    "label": "SDL_PollEvent()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_PollEvent(SDL_Event * event)"
  },
  {
    "label": "SDL_WaitEvent()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_WaitEvent(SDL_Event * event)"
  },
  {
    "label": "SDL_WaitEventTimeout()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_WaitEventTimeout(SDL_Event * event, int timeout)"
  },
  {
    "label": "SDL_PushEvent()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_PushEvent(SDL_Event * event)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(SDLCALL * SDL_EventFilter) (void *userdata, SDL_Event * event)"
  },
  {
    "label": "SDL_SetEventFilter()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_SetEventFilter(SDL_EventFilter filter, void *userdata)"
  },
  {
    "label": "SDL_GetEventFilter()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GetEventFilter(SDL_EventFilter * filter, void **userdata)"
  },
  {
    "label": "SDL_AddEventWatch()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_AddEventWatch(SDL_EventFilter filter, void *userdata)"
  },
  {
    "label": "SDL_DelEventWatch()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_DelEventWatch(SDL_EventFilter filter, void *userdata)"
  },
  {
    "label": "SDL_FilterEvents()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_FilterEvents(SDL_EventFilter filter, void *userdata)"
  },
  {
    "label": "SDL_EventState()",
    "kind": "Method",
    "detail": "Function (# define SDL_QUERY - 1 # define SDL_IGNORE 0 # define SDL_DISABLE 0 # define SDL_ENABLE 1 DECLSPEC Uint8 SDLCALL)",
    "insertText": "SDL_EventState(Uint32 type, int state)"
  },
  {
    "label": "SDL_GetEventState()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_GetEventState(type) SDL_EventState(type, SDL_QUERY) extern DECLSPEC Uint32 SDLCALL SDL_RegisterEvents(int numevents)"
  }
]