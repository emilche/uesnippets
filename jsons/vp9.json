[
  {
    "label": "VP9Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9Encoder"
  },
  {
    "label": "VP9Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9Decoder"
  },
  {
    "label": "SupportedVP9Codecs()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP9_INCLUDE_VP9_H_ # define MODULES_VIDEO_CODING_CODECS_VP9_INCLUDE_VP9_H_ # include<memory> # include<vector> # include \" api / video_codecs / scalability_mode . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" media / base / codec . h \" # include \" modules / video_coding / include / video_codec_interface . h \" namespace webrtc { std::vector<SdpVideoFormat>)",
    "insertText": "SupportedVP9Codecs(bool add_scalability_modes = false)"
  },
  {
    "label": "SupportedVP9DecoderCodecs()",
    "kind": "Method",
    "detail": "Function (std::vector<SdpVideoFormat>)",
    "insertText": "SupportedVP9DecoderCodecs()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class VP9Encoder : public VideoEncoder { public : std::unique_ptr<VP9Encoder>)",
    "insertText": "Create()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VP9Encoder>)",
    "insertText": "Create(const cricket::VideoCodec& codec)"
  },
  {
    "label": "SupportsScalabilityMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsScalabilityMode(ScalabilityMode scalability_mode)"
  },
  {
    "label": "VP9Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VP9Encoder()"
  },
  {
    "label": "VP9Decoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VP9Decoder()"
  }
]