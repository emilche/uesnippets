[
  {
    "label": "FBinkAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinkAudioInfo"
  },
  {
    "label": "BinkAudioDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinkAudioDecoder"
  },
  {
    "label": "FBinkAudioInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDecompress . h \" class FBinkAudioInfo : public IStreamedCompressedInfo { public :)",
    "insertText": "FBinkAudioInfo()"
  },
  {
    "label": "ParseHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseHeader(const uint8* InSrcBufferData, uint32 InSrcBufferDataSize, FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "GetFrameSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFrameSize()"
  },
  {
    "label": "GetMaxFrameSizeSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxFrameSizeSamples()"
  },
  {
    "label": "CreateDecoder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDecoder()"
  },
  {
    "label": "SeekToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToTime(const float SeekToTimeSeconds)"
  },
  {
    "label": "SeekToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToFrame(const uint32 SeekTimeFrames)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (FDecodeResult)",
    "insertText": "Decode(const uint8* CompressedData, const int32 CompressedDataSize, uint8* OutPCMData, const int32 OutputPCMDataSize)"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasError()"
  },
  {
    "label": "NotifySeek()",
    "kind": "Method",
    "detail": "Function (protected : using Super = IStreamedCompressedInfo ; void)",
    "insertText": "NotifySeek()"
  }
]