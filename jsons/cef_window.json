[
  {
    "label": "CefWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefWindow"
  },
  {
    "label": "CreateTopLevelWindow()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_VIEWS_CEF_WINDOW_H_ # define CEF_INCLUDE_VIEWS_CEF_WINDOW_H_ # pragma once # include \" include / cef_image . h \" # include \" include / cef_menu_model . h \" # include \" include / views / cef_display . h \" # include \" include / views / cef_panel . h \" # include \" include / views / cef_window_delegate . h \" class CefWindow : public CefPanel { public : CefRefPtr<CefWindow>)",
    "insertText": "CreateTopLevelWindow(CefRefPtr<CefWindowDelegate> delegate)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "CenterWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterWindow(const CefSize& size)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "BringToTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToTop()"
  },
  {
    "label": "SetAlwaysOnTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlwaysOnTop(bool on_top)"
  },
  {
    "label": "IsAlwaysOnTop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlwaysOnTop()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "SetFullscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFullscreen(bool fullscreen)"
  },
  {
    "label": "IsMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaximized()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsFullscreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullscreen()"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitle(const CefString& title)"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetTitle()"
  },
  {
    "label": "SetWindowIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowIcon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "GetWindowIcon()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefImage>)",
    "insertText": "GetWindowIcon()"
  },
  {
    "label": "SetWindowAppIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowAppIcon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "GetWindowAppIcon()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefImage>)",
    "insertText": "GetWindowAppIcon()"
  },
  {
    "label": "ShowMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowMenu(CefRefPtr<CefMenuModel> menu_model, const CefPoint& screen_point, cef_menu_anchor_position_t anchor_position)"
  },
  {
    "label": "CancelMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelMenu()"
  },
  {
    "label": "GetDisplay()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefDisplay>)",
    "insertText": "GetDisplay()"
  },
  {
    "label": "GetClientAreaBoundsInScreen()",
    "kind": "Method",
    "detail": "Function (CefRect)",
    "insertText": "GetClientAreaBoundsInScreen()"
  },
  {
    "label": "SetDraggableRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggableRegions(const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (CefWindowHandle)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "SendKeyPress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendKeyPress(int key_code, uint32 event_flags)"
  },
  {
    "label": "SendMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMouseMove(int screen_x, int screen_y)"
  },
  {
    "label": "SendMouseEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMouseEvents(cef_mouse_button_type_t button, bool mouse_down, bool mouse_up)"
  },
  {
    "label": "SetAccelerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccelerator(int command_id, int key_code, bool shift_pressed, bool ctrl_pressed, bool alt_pressed)"
  },
  {
    "label": "RemoveAccelerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAccelerator(int command_id)"
  },
  {
    "label": "RemoveAllAccelerators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAccelerators()"
  }
]