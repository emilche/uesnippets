[
  {
    "label": "AndroidTaskTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AndroidTaskTraits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MayBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MayBlock"
  },
  {
    "label": "WithBaseSyncPrimitives",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WithBaseSyncPrimitives"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ValidTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidTrait"
  },
  {
    "label": "CheckArgumentsAreValid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckArgumentsAreValid"
  },
  {
    "label": "TaskTraitsExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTraitsExtension"
  },
  {
    "label": "ValidTrait()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_TRAITS_H_ # define BASE_TASK_TASK_TRAITS_H_ # include<stdint . h> # include<iosfwd> # include<tuple> # include<type_traits> # include<utility> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / task / task_traits_extension . h \" # include \" base / traits_bag . h \" # include \" build / build_config . h \" namespace base { class AndroidTaskTraits ; enum class TaskPriority : uint8_t { LOWEST = 0,BEST_EFFORT = LOWEST,USER_VISIBLE,USER_BLOCKING,HIGHEST = USER_BLOCKING } ; enum class TaskShutdownBehavior : uint8_t { CONTINUE_ON_SHUTDOWN,SKIP_ON_SHUTDOWN,BLOCK_SHUTDOWN,} ; enum class ThreadPolicy : uint8_t { PREFER_BACKGROUND,MUST_USE_FOREGROUND } ; struct MayBlock { } ; struct WithBaseSyncPrimitives { } ; class BASE_EXPORT TaskTraits { public : struct ValidTrait {)",
    "insertText": "ValidTrait(TaskPriority)"
  },
  {
    "label": "ValidTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTrait(TaskShutdownBehavior)"
  },
  {
    "label": "ValidTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTrait(ThreadPolicy)"
  },
  {
    "label": "ValidTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTrait(MayBlock)"
  },
  {
    "label": "ValidTrait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTrait(WithBaseSyncPrimitives)"
  },
  {
    "label": "TaskTraits()",
    "kind": "Method",
    "detail": "Function (} ; template<class . . . ArgTypes,class CheckArgumentsAreValid = std::enable_if_t<trait_helpers::AreValidTraits<ValidTrait,ArgTypes . . .>::value | | trait_helpers::AreValidTraitsForExtension<ArgTypes . . .>::value>>)",
    "insertText": "TaskTraits(ArgTypes... args) : extension_(trait_helpers::GetTaskTraitsExtension( trait_helpers::AreValidTraits<ValidTrait, ArgTypes...>{}, args...)), priority_( trait_helpers::GetEnum<TaskPriority, TaskPriority::USER_BLOCKING>( args...)), shutdown_behavior_( static_cast<uint8_t>( trait_helpers::GetEnum<TaskShutdownBehavior, TaskShutdownBehavior::SKIP_ON_SHUTDOWN>( args...)) | (trait_helpers::HasTrait<TaskShutdownBehavior, ArgTypes...>() ? kIsExplicitFlag : 0)), thread_policy_( static_cast<uint8_t>( trait_helpers::GetEnum<ThreadPolicy, ThreadPolicy::PREFER_BACKGROUND>( args...)) | (trait_helpers::HasTrait<ThreadPolicy, ArgTypes...>() ? kIsExplicitFlag : 0)), may_block_(trait_helpers::HasTrait<MayBlock, ArgTypes...>()), with_base_sync_primitives_( trait_helpers::HasTrait<WithBaseSyncPrimitives, ArgTypes...>())"
  },
  {
    "label": "TaskTraits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TaskTraits(const TaskTraits& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskTraits&)",
    "insertText": "operator(const TaskTraits& other)"
  },
  {
    "label": "priority()",
    "kind": "Method",
    "detail": "Function (priority_ = priority ; } TaskPriority)",
    "insertText": "priority()"
  },
  {
    "label": "thread_policy_set_explicitly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "thread_policy_set_explicitly()"
  },
  {
    "label": "may_block()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "may_block()"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(TaskTraitsExtension::kExtensionId, extension_.extension_id)"
  },
  {
    "label": "TaskTraits()",
    "kind": "Method",
    "detail": "Function (} private : AndroidTaskTraits ;)",
    "insertText": "TaskTraits(TaskPriority priority, bool may_block, TaskTraitsExtensionStorage extension) : extension_(extension), priority_(priority), shutdown_behavior_( static_cast<uint8_t>(TaskShutdownBehavior::SKIP_ON_SHUTDOWN)), thread_policy_(static_cast<uint8_t>(ThreadPolicy::PREFER_BACKGROUND)), may_block_(may_block), with_base_sync_primitives_(false)"
  },
  {
    "label": "TaskPriorityToString()",
    "kind": "Method",
    "detail": "Function (} uint8_t kIsExplicitFlag = 0 x80 ; TaskTraitsExtensionStorage extension_ ; TaskPriority priority_ ; uint8_t shutdown_behavior_ ; uint8_t thread_policy_ ; bool may_block_ ; bool with_base_sync_primitives_ ; } ; BASE_EXPORT const char*)",
    "insertText": "TaskPriorityToString(TaskPriority task_priority)"
  },
  {
    "label": "TaskShutdownBehaviorToString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const char*)",
    "insertText": "TaskShutdownBehaviorToString(TaskShutdownBehavior task_priority)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& os, const TaskPriority& shutdown_behavior)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& os, const TaskShutdownBehavior& shutdown_behavior)"
  }
]