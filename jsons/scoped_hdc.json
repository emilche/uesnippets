[
  {
    "label": "ScopedGetDC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedGetDC"
  },
  {
    "label": "CreateDCTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CreateDCTraits"
  },
  {
    "label": "ScopedGetDC()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_HDC_H_ # define BASE_WIN_SCOPED_HDC_H_ # include<windows . h> # include \" base / check . h \" # include \" base / debug / gdi_debug_util_win . h \" # include \" base / win / scoped_handle . h \" namespace base { namespace win { class ScopedGetDC { public :)",
    "insertText": "ScopedGetDC(HWND hwnd) : hwnd_(hwnd), hdc_(GetDC(hwnd))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsWindow(hwnd_))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(hdc_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!hdc_) base::debug::CollectGDIUsageAndDie()"
  },
  {
    "label": "ScopedGetDC()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ScopedGetDC(const ScopedGetDC&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedGetDC&)",
    "insertText": "operator(const ScopedGetDC&)"
  },
  {
    "label": "ScopedGetDC()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedGetDC()"
  },
  {
    "label": "HDC()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "HDC()"
  },
  {
    "label": "CreateDCTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDCTraits(const CreateDCTraits&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CreateDCTraits&)",
    "insertText": "operator(const CreateDCTraits&)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseHandle(HDC handle)"
  },
  {
    "label": "IsHandleValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHandleValid(HDC handle)"
  }
]