[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPointWeightMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointWeightMap"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" UObject / ObjectMacros . h \" # include \" PointWeightMap . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None = 0,MaxDistance,BackstopDistance,BackstopRadius,AnimDriveStiffness,AnimDriveDamping_DEPRECATED)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FPointWeightMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPointWeightMap() #if WITH_EDITORONLY_DATA : Name(NAME_None) , CurrentTarget((uint8)EWeightMapTargetCommon::None) , bEnabled(false)"
  },
  {
    "label": "FPointWeightMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointWeightMap(int32 NumPoints, float Value = 0.f) #if WITH_EDITORONLY_DATA : Name(NAME_None) , CurrentTarget((uint8)EWeightMapTargetCommon::None) , bEnabled(false)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Init(Value, NumPoints)"
  },
  {
    "label": "FPointWeightMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointWeightMap(const TConstArrayView<float>& InValues) : Values(InValues) #if WITH_EDITORONLY_DATA , Name(NAME_None) , CurrentTarget((uint8)EWeightMapTargetCommon::None) , bEnabled(false)"
  },
  {
    "label": "FPointWeightMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointWeightMap(const TConstArrayView<float>& InValues, float Offset, float Scale) #if WITH_EDITORONLY_DATA : Name(NAME_None) , CurrentTarget((uint8)EWeightMapTargetCommon::None) , bEnabled(false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumPoints = InValues .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "SetNumUninitialized(NumPoints)"
  },
  {
    "label": "FPointWeightMap()",
    "kind": "Method",
    "detail": "Function (Values [ Index ] = Offset + Scale* InValues [ Index ] ; } } ~)",
    "insertText": "FPointWeightMap()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const int32 NumPoints)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Init(0.f, NumPoints)"
  },
  {
    "label": "CurrentTarget()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "CurrentTarget(uint8)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (bEnabled = false ; # endif } template<T)",
    "insertText": "UE_REQUIRES(std::is_enum_v<T> || std::is_arithmetic_v<T>) > void Initialize(const FPointWeightMap& Source, T Target)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bEnabled = true ; # endif } void)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const float&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(int32 Index, float Value)"
  },
  {
    "label": "IsBelowThreshold()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBelowThreshold(const int32 Index, const float Threshold=0.1f)"
  },
  {
    "label": "AreAnyBelowThreshold()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreAnyBelowThreshold(const int32 Index0, const int32 Index1, const int32 Index2, const float Threshold=0.1f)"
  },
  {
    "label": "AreAllBelowThreshold()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreAllBelowThreshold(const int32 Index0, const int32 Index1, const int32 Index2, const float Threshold=0.1f)"
  },
  {
    "label": "IsZeroed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZeroed()"
  },
  {
    "label": "CalcRanges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalcRanges(float& MinValue, float& MaxValue)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (MinValue =)",
    "insertText": "Min(Values)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxValue =)",
    "insertText": "Max(Values)"
  }
]