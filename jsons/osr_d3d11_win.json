[
  {
    "label": "Composition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Composition"
  },
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "Effect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Effect"
  },
  {
    "label": "Geometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Geometry"
  },
  {
    "label": "SwapChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwapChain"
  },
  {
    "label": "Texture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Texture2D"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ScopedBinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedBinder"
  },
  {
    "label": "Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Device"
  },
  {
    "label": "Layer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Layer"
  },
  {
    "label": "FrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameBuffer"
  },
  {
    "label": "ScopedBinder()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_OSR_D3D11_WIN_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_OSR_D3D11_WIN_H_ # pragma once # include<d3d11_1 . h> # include<memory> # include<string> # include<vector> # include \" include / base / cef_macros . h \" namespace client { namespace d3d11 { class Composition ; class Context ; class Effect ; class Geometry ; class SwapChain ; class Texture2D ; struct Rect { float x ; float y ; float width ; float height ; } ; template<class T> class ScopedBinder { public :)",
    "insertText": "ScopedBinder(const std::shared_ptr<Context>& ctx, const std::shared_ptr<T>& target) : target_(target)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (target_ ->)",
    "insertText": "bind(ctx)"
  },
  {
    "label": "ScopedBinder()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "ScopedBinder()"
  },
  {
    "label": "unbind()",
    "kind": "Method",
    "detail": "Function (target_ ->)",
    "insertText": "unbind()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} } private : const std::shared_ptr<T> target_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ScopedBinder)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (} ; class Context { public :)",
    "insertText": "Context(ID3D11DeviceContext*)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "ID3D11DeviceContext()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "ID3D11DeviceContext()"
  },
  {
    "label": "Device()",
    "kind": "Method",
    "detail": "Function (} private : const std::shared_ptr<ID3D11DeviceContext> ctx_ ; } ; class Device { public :)",
    "insertText": "Device(ID3D11Device*, ID3D11DeviceContext*)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Device>)",
    "insertText": "create()"
  },
  {
    "label": "adapter_name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "adapter_name()"
  },
  {
    "label": "ID3D11Device()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "ID3D11Device()"
  },
  {
    "label": "immedidate_context()",
    "kind": "Method",
    "detail": "Function (} std::shared_ptr<Context>)",
    "insertText": "immedidate_context()"
  },
  {
    "label": "create_swapchain()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<SwapChain>)",
    "insertText": "create_swapchain(HWND, int width = 0, int height = 0)"
  },
  {
    "label": "create_quad()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Geometry>)",
    "insertText": "create_quad(float x, float y, float width, float height, bool flip = false)"
  },
  {
    "label": "create_texture()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Texture2D>)",
    "insertText": "create_texture(int width, int height, DXGI_FORMAT format, const void* data, size_t row_stride)"
  },
  {
    "label": "open_shared_texture()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Texture2D>)",
    "insertText": "open_shared_texture(void*)"
  },
  {
    "label": "create_default_effect()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Effect>)",
    "insertText": "create_default_effect()"
  },
  {
    "label": "create_effect()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Effect>)",
    "insertText": "create_effect(const std::string& vertex_code, const std::string& vertex_entry, const std::string& vertex_model, const std::string& pixel_code, const std::string& pixel_entry, const std::string& pixel_model)"
  },
  {
    "label": "compile_shader()",
    "kind": "Method",
    "detail": "Function (private : std::shared_ptr<ID3DBlob>)",
    "insertText": "compile_shader(const std::string& source_code, const std::string& entry_point, const std::string& model)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (HMODULE lib_compiler_ ; const std::shared_ptr<ID3D11Device> device_ ; const std::shared_ptr<Context> ctx_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Device)"
  },
  {
    "label": "SwapChain()",
    "kind": "Method",
    "detail": "Function (} ; class SwapChain { public :)",
    "insertText": "SwapChain(IDXGISwapChain*, ID3D11RenderTargetView*, ID3D11SamplerState*, ID3D11BlendState*)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bind(const std::shared_ptr<Context>& ctx)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(float red, float green, float blue, float alpha)"
  },
  {
    "label": "present()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "present(int sync_interval)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(int width, int height)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "width()"
  },
  {
    "label": "Texture2D()",
    "kind": "Method",
    "detail": "Function (} ; class Texture2D { public :)",
    "insertText": "Texture2D(ID3D11Texture2D* tex, ID3D11ShaderResourceView* srv)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bind(std::shared_ptr<Context> const& ctx)"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "height()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT)",
    "insertText": "format()"
  },
  {
    "label": "has_mutex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_mutex()"
  },
  {
    "label": "lock_key()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lock_key(uint64_t key, uint32_t timeout_ms)"
  },
  {
    "label": "unlock_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unlock_key(uint64_t key)"
  },
  {
    "label": "share_handle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "share_handle()"
  },
  {
    "label": "copy_from()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_from(const std::shared_ptr<Texture2D>&)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : HANDLE share_handle_ ; const std::shared_ptr<ID3D11Texture2D> texture_ ; const std::shared_ptr<ID3D11ShaderResourceView> srv_ ; std::shared_ptr<IDXGIKeyedMutex> keyed_mutex_ ; std::shared_ptr<Context> ctx_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Texture2D)"
  },
  {
    "label": "Effect()",
    "kind": "Method",
    "detail": "Function (} ; class Effect { public :)",
    "insertText": "Effect(ID3D11VertexShader* vsh, ID3D11PixelShader* psh, ID3D11InputLayout* layout)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : const std::shared_ptr<ID3D11VertexShader> vsh_ ; const std::shared_ptr<ID3D11PixelShader> psh_ ; const std::shared_ptr<ID3D11InputLayout> layout_ ; std::shared_ptr<Context> ctx_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Effect)"
  },
  {
    "label": "Geometry()",
    "kind": "Method",
    "detail": "Function (} ; class Geometry { public :)",
    "insertText": "Geometry(D3D_PRIMITIVE_TOPOLOGY primitive, uint32_t vertices, uint32_t stride, ID3D11Buffer*)"
  },
  {
    "label": "draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "draw()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : D3D_PRIMITIVE_TOPOLOGY primitive_ ; uint32_t vertices_ ; uint32_t stride_ ; const std::shared_ptr<ID3D11Buffer> buffer_ ; std::shared_ptr<Context> ctx_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Geometry)"
  },
  {
    "label": "Layer()",
    "kind": "Method",
    "detail": "Function (} ; class Layer { public :)",
    "insertText": "Layer(const std::shared_ptr<Device>& device, bool flip)"
  },
  {
    "label": "Layer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Layer()"
  },
  {
    "label": "attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "attach(const std::shared_ptr<Composition>&)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(float x, float y, float width, float height)"
  },
  {
    "label": "tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tick(double t)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render(const std::shared_ptr<Context>& ctx)"
  },
  {
    "label": "bounds()",
    "kind": "Method",
    "detail": "Function (Rect)",
    "insertText": "bounds()"
  },
  {
    "label": "composition()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Composition>)",
    "insertText": "composition()"
  },
  {
    "label": "render_texture()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "render_texture(const std::shared_ptr<Context>& ctx, const std::shared_ptr<Texture2D>& texture)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (const std::shared_ptr<Device> device_ ; const bool flip_ ; Rect bounds_ ; std::shared_ptr<Geometry> geometry_ ; std::shared_ptr<Effect> effect_ ; private : std::weak_ptr<Composition> composition_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Layer)"
  },
  {
    "label": "Composition()",
    "kind": "Method",
    "detail": "Function (} ; class Composition : public std::enable_shared_from_this<Composition> { public :)",
    "insertText": "Composition(const std::shared_ptr<Device>& device, int width = 0, int height = 0)"
  },
  {
    "label": "is_vsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_vsync()"
  },
  {
    "label": "tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tick(double)"
  },
  {
    "label": "render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "render(const std::shared_ptr<Context>&)"
  },
  {
    "label": "add_layer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_layer(const std::shared_ptr<Layer>& layer)"
  },
  {
    "label": "remove_layer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remove_layer(const std::shared_ptr<Layer>& layer)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(bool vsync, int width, int height)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : int width_ ; int height_ ; uint32_t frame_ ; int64_t fps_start_ ; double fps_ ; double time_ ; bool vsync_ ; const std::shared_ptr<Device> device_ ; std::vector<std::shared_ptr<Layer>> layers_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(Composition)"
  },
  {
    "label": "FrameBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FrameBuffer { public :)",
    "insertText": "FrameBuffer(const std::shared_ptr<Device>& device)"
  },
  {
    "label": "on_paint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "on_paint(void* shared_handle)"
  },
  {
    "label": "texture()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<Texture2D>)",
    "insertText": "texture()"
  }
]