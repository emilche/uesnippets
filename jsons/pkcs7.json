[
  {
    "label": "pkcs7_issuer_and_serial_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_issuer_and_serial_st"
  },
  {
    "label": "pkcs7_signer_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_signer_info_st"
  },
  {
    "label": "pkcs7_recip_info_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_recip_info_st"
  },
  {
    "label": "pkcs7_signed_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_signed_st"
  },
  {
    "label": "pkcs7_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_st"
  },
  {
    "label": "pkcs7_enc_content_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_enc_content_st"
  },
  {
    "label": "pkcs7_enveloped_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_enveloped_st"
  },
  {
    "label": "pkcs7_signedandenveloped_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_signedandenveloped_st"
  },
  {
    "label": "pkcs7_digest_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_digest_st"
  },
  {
    "label": "pkcs7_encrypted_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs7_encrypted_st"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_PKCS7_H # define HEADER_PKCS7_H # include<openssl / asn1 . h> # include<openssl / bio . h> # include<openssl / e_os2 . h> # include<openssl / symhacks . h> # include<openssl / ossl_typ . h> # include<openssl / pkcs7err . h> # ifdef __cplusplus \" C \" { # endif typedef struct pkcs7_issuer_and_serial_st { X509_NAME* issuer ; ASN1_INTEGER* serial ; } PKCS7_ISSUER_AND_SERIAL ; typedef struct pkcs7_signer_info_st { ASN1_INTEGER* version ; PKCS7_ISSUER_AND_SERIAL* issuer_and_serial ; X509_ALGOR* digest_alg ;)",
    "insertText": "STACK_OF(X509_ATTRIBUTE)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (EVP_PKEY* pkey ; } PKCS7_SIGNER_INFO ;)",
    "insertText": "DEFINE_STACK_OF(PKCS7_SIGNER_INFO)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER* version ; PKCS7_ISSUER_AND_SERIAL* issuer_and_serial ; X509_ALGOR* key_enc_algor ; ASN1_OCTET_STRING* enc_key ; X509* cert ; } PKCS7_RECIP_INFO ;)",
    "insertText": "DEFINE_STACK_OF(PKCS7_RECIP_INFO)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER* version ;)",
    "insertText": "STACK_OF(X509_ALGOR)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_CRL)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(PKCS7_SIGNER_INFO)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (struct pkcs7_st* contents ; } PKCS7_SIGNED ; typedef struct pkcs7_enc_content_st { ASN1_OBJECT* content_type ; X509_ALGOR* algorithm ; ASN1_OCTET_STRING* enc_data ; const EVP_CIPHER* cipher ; } PKCS7_ENC_CONTENT ; typedef struct pkcs7_enveloped_st { ASN1_INTEGER* version ;)",
    "insertText": "STACK_OF(PKCS7_RECIP_INFO)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (} PKCS7_SIGN_ENVELOPE ; typedef struct pkcs7_digest_st { ASN1_INTEGER* version ; X509_ALGOR* md ; struct pkcs7_st* contents ; ASN1_OCTET_STRING* digest ; } PKCS7_DIGEST ; typedef struct pkcs7_encrypted_st { ASN1_INTEGER* version ; PKCS7_ENC_CONTENT* enc_data ; } PKCS7_ENCRYPT ; typedef struct pkcs7_st { unsigned char* asn1 ; long length ; # define PKCS7_S_HEADER 0 # define PKCS7_S_BODY 1 # define PKCS7_S_TAIL 2 int state ; int detached ; ASN1_OBJECT* type ; union { char* ptr ; ASN1_OCTET_STRING* data ; PKCS7_SIGNED* sign ; PKCS7_ENVELOPE* enveloped ; PKCS7_SIGN_ENVELOPE* signed_and_enveloped ; PKCS7_DIGEST* digest ; PKCS7_ENCRYPT* encrypted ; ASN1_TYPE* other ; } d ; } PKCS7 ;)",
    "insertText": "DEFINE_STACK_OF(PKCS7) # define PKCS7_OP_SET_DETACHED_SIGNATURE 1 # define PKCS7_OP_GET_DETACHED_SIGNATURE 2 # define PKCS7_get_signed_attributes(si) ((si)->auth_attr) # define PKCS7_get_attributes(si) ((si)->unauth_attr) # define PKCS7_type_is_signed(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_signed) # define PKCS7_type_is_encrypted(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_encrypted) # define PKCS7_type_is_enveloped(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_enveloped) # define PKCS7_type_is_signedAndEnveloped(a) \\ (OBJ_obj2nid((a)->type) == NID_pkcs7_signedAndEnveloped) # define PKCS7_type_is_data(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_data) # define PKCS7_type_is_digest(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_digest) # define PKCS7_set_detached(p,v) \\ PKCS7_ctrl(p,PKCS7_OP_SET_DETACHED_SIGNATURE,v,NULL) # define PKCS7_get_detached(p) \\ PKCS7_ctrl(p,PKCS7_OP_GET_DETACHED_SIGNATURE,0,NULL) # define PKCS7_is_detached(p7) (PKCS7_type_is_signed(p7) && PKCS7_get_detached(p7)) # define PKCS7_TEXT 0x1 # define PKCS7_NOCERTS 0x2 # define PKCS7_NOSIGS 0x4 # define PKCS7_NOCHAIN 0x8 # define PKCS7_NOINTERN 0x10 # define PKCS7_NOVERIFY 0x20 # define PKCS7_DETACHED 0x40 # define PKCS7_BINARY 0x80 # define PKCS7_NOATTR 0x100 # define PKCS7_NOSMIMECAP 0x200 # define PKCS7_NOOLDMIMETYPE 0x400 # define PKCS7_CRLFEOL 0x800 # define PKCS7_STREAM 0x1000 # define PKCS7_NOCRL 0x2000 # define PKCS7_PARTIAL 0x4000 # define PKCS7_REUSE_DIGEST 0x8000 # define PKCS7_NO_DUAL_CONTENT 0x10000 # define SMIME_TEXT PKCS7_TEXT # define SMIME_NOCERTS PKCS7_NOCERTS # define SMIME_NOSIGS PKCS7_NOSIGS # define SMIME_NOCHAIN PKCS7_NOCHAIN # define SMIME_NOINTERN PKCS7_NOINTERN # define SMIME_NOVERIFY PKCS7_NOVERIFY # define SMIME_DETACHED PKCS7_DETACHED # define SMIME_BINARY PKCS7_BINARY # define SMIME_NOATTR PKCS7_NOATTR # define SMIME_ASCIICRLF 0x80000 DECLARE_ASN1_FUNCTIONS(PKCS7_ISSUER_AND_SERIAL) int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, const EVP_MD *type, unsigned char *md, unsigned int *len)"
  },
  {
    "label": "d2i_PKCS7_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO PKCS7*)",
    "insertText": "d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)"
  },
  {
    "label": "i2d_PKCS7_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)"
  },
  {
    "label": "PKCS7_dup()",
    "kind": "Method",
    "detail": "Function (# endif PKCS7*)",
    "insertText": "PKCS7_dup(PKCS7 *p7)"
  },
  {
    "label": "d2i_PKCS7_bio()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)"
  },
  {
    "label": "i2d_PKCS7_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)"
  },
  {
    "label": "i2d_PKCS7_bio_stream()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)"
  },
  {
    "label": "PEM_write_bio_PKCS7_stream()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(PKCS7_SIGNER_INFO) DECLARE_ASN1_FUNCTIONS(PKCS7_RECIP_INFO) DECLARE_ASN1_FUNCTIONS(PKCS7_SIGNED) DECLARE_ASN1_FUNCTIONS(PKCS7_ENC_CONTENT) DECLARE_ASN1_FUNCTIONS(PKCS7_ENVELOPE) DECLARE_ASN1_FUNCTIONS(PKCS7_SIGN_ENVELOPE) DECLARE_ASN1_FUNCTIONS(PKCS7_DIGEST) DECLARE_ASN1_FUNCTIONS(PKCS7_ENCRYPT) DECLARE_ASN1_FUNCTIONS(PKCS7) DECLARE_ASN1_ITEM(PKCS7_ATTR_SIGN) DECLARE_ASN1_ITEM(PKCS7_ATTR_VERIFY) DECLARE_ASN1_NDEF_FUNCTION(PKCS7) DECLARE_ASN1_PRINT_FUNCTION(PKCS7) long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg)"
  },
  {
    "label": "PKCS7_set_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_type(PKCS7 *p7, int type)"
  },
  {
    "label": "PKCS7_set0_type_other()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other)"
  },
  {
    "label": "PKCS7_set_content()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data)"
  },
  {
    "label": "PKCS7_SIGNER_INFO_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst)"
  },
  {
    "label": "PKCS7_SIGNER_INFO_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si)"
  },
  {
    "label": "PKCS7_add_signer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i)"
  },
  {
    "label": "PKCS7_add_certificate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_certificate(PKCS7 *p7, X509 *x509)"
  },
  {
    "label": "PKCS7_add_crl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509)"
  },
  {
    "label": "PKCS7_content_new()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_content_new(PKCS7 *p7, int nid)"
  },
  {
    "label": "PKCS7_dataVerify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si)"
  },
  {
    "label": "PKCS7_signatureVerify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si, X509 *x509)"
  },
  {
    "label": "PKCS7_dataInit()",
    "kind": "Method",
    "detail": "Function (BIO*)",
    "insertText": "PKCS7_dataInit(PKCS7 *p7, BIO *bio)"
  },
  {
    "label": "PKCS7_dataFinal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_dataFinal(PKCS7 *p7, BIO *bio)"
  },
  {
    "label": "PKCS7_dataDecode()",
    "kind": "Method",
    "detail": "Function (BIO*)",
    "insertText": "PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)"
  },
  {
    "label": "PKCS7_add_signature()",
    "kind": "Method",
    "detail": "Function (PKCS7_SIGNER_INFO*)",
    "insertText": "PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst)"
  },
  {
    "label": "PKCS7_cert_from_signer_info()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si)"
  },
  {
    "label": "PKCS7_set_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)"
  },
  {
    "label": "PKCS7_add_recipient()",
    "kind": "Method",
    "detail": "Function (PKCS7_RECIP_INFO*)",
    "insertText": "PKCS7_add_recipient(PKCS7 *p7, X509 *x509)"
  },
  {
    "label": "PKCS7_SIGNER_INFO_get0_algs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk, X509_ALGOR **pdig, X509_ALGOR **psig)"
  },
  {
    "label": "PKCS7_RECIP_INFO_get0_alg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc)"
  },
  {
    "label": "PKCS7_add_recipient_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri)"
  },
  {
    "label": "PKCS7_RECIP_INFO_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)"
  },
  {
    "label": "PKCS7_set_cipher()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher)"
  },
  {
    "label": "PKCS7_stream()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_stream(unsigned char ***boundary, PKCS7 *p7)"
  },
  {
    "label": "PKCS7_get_issuer_and_serial()",
    "kind": "Method",
    "detail": "Function (PKCS7_ISSUER_AND_SERIAL*)",
    "insertText": "PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx)"
  },
  {
    "label": "PKCS7_digest_from_attributes()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk)"
  },
  {
    "label": "PKCS7_add_signed_attribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type, void *data)"
  },
  {
    "label": "PKCS7_add_attribute()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype, void *value)"
  },
  {
    "label": "PKCS7_get_attribute()",
    "kind": "Method",
    "detail": "Function (ASN1_TYPE*)",
    "insertText": "PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid)"
  },
  {
    "label": "PKCS7_get_signed_attribute()",
    "kind": "Method",
    "detail": "Function (ASN1_TYPE*)",
    "insertText": "PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)"
  },
  {
    "label": "PKCS7_set_signed_attributes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si, STACK_OF(X509_ATTRIBUTE) *sk)"
  },
  {
    "label": "PKCS7_set_attributes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si, STACK_OF(X509_ATTRIBUTE) *sk)"
  },
  {
    "label": "PKCS7_sign()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data, int flags)"
  },
  {
    "label": "PKCS7_sign_add_signer()",
    "kind": "Method",
    "detail": "Function (PKCS7_SIGNER_INFO*)",
    "insertText": "PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert, EVP_PKEY *pkey, const EVP_MD *md, int flags)"
  },
  {
    "label": "PKCS7_final()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_final(PKCS7 *p7, BIO *data, int flags)"
  },
  {
    "label": "PKCS7_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs, int flags)"
  },
  {
    "label": "PKCS7_encrypt()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher, int flags)"
  },
  {
    "label": "PKCS7_decrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags)"
  },
  {
    "label": "PKCS7_add_attrib_smimecap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK_OF(X509_ALGOR) *cap)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)"
  },
  {
    "label": "PKCS7_simple_smimecap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)"
  },
  {
    "label": "PKCS7_add_attrib_content_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)"
  },
  {
    "label": "PKCS7_add0_attrib_signing_time()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)"
  },
  {
    "label": "PKCS7_add1_attrib_digest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si, const unsigned char *md, int mdlen)"
  },
  {
    "label": "SMIME_write_PKCS7()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags)"
  },
  {
    "label": "SMIME_read_PKCS7()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "SMIME_read_PKCS7(BIO *bio, BIO **bcont)"
  },
  {
    "label": "BIO_new_PKCS7()",
    "kind": "Method",
    "detail": "Function (BIO*)",
    "insertText": "BIO_new_PKCS7(BIO *out, PKCS7 *p7)"
  }
]