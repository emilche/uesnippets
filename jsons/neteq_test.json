[
  {
    "label": "NetEqTestErrorCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqTestErrorCallback"
  },
  {
    "label": "DefaultNetEqTestErrorCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultNetEqTestErrorCallback"
  },
  {
    "label": "NetEqPostInsertPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqPostInsertPacket"
  },
  {
    "label": "NetEqGetAudioCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqGetAudioCallback"
  },
  {
    "label": "NetEqSimulationEndedCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqSimulationEndedCallback"
  },
  {
    "label": "NetEqTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqTest"
  },
  {
    "label": "Callbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Callbacks"
  },
  {
    "label": "NetEqTestErrorCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_TEST_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_TEST_H_ # include<fstream> # include<map> # include<memory> # include<string> # include<utility> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / neteq / neteq . h \" # include \" api / neteq / neteq_factory . h \" # include \" api / test / neteq_simulator . h \" # include \" modules / audio_coding / neteq / tools / audio_sink . h \" # include \" modules / audio_coding / neteq / tools / neteq_input . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace test { class NetEqTestErrorCallback { public : ~)",
    "insertText": "NetEqTestErrorCallback()"
  },
  {
    "label": "OnInsertPacketError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertPacketError(const NetEqInput::PacketData& packet)"
  },
  {
    "label": "OnGetAudioError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGetAudioError()"
  },
  {
    "label": "NetEqPostInsertPacket()",
    "kind": "Method",
    "detail": "Function (} ; class NetEqPostInsertPacket { public : ~)",
    "insertText": "NetEqPostInsertPacket()"
  },
  {
    "label": "AfterInsertPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterInsertPacket(const NetEqInput::PacketData& packet, NetEq* neteq)"
  },
  {
    "label": "NetEqGetAudioCallback()",
    "kind": "Method",
    "detail": "Function (} ; class NetEqGetAudioCallback { public : ~)",
    "insertText": "NetEqGetAudioCallback()"
  },
  {
    "label": "BeforeGetAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeforeGetAudio(NetEq* neteq)"
  },
  {
    "label": "AfterGetAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterGetAudio(int64_t time_now_ms, const AudioFrame& audio_frame, bool muted, NetEq* neteq)"
  },
  {
    "label": "NetEqSimulationEndedCallback()",
    "kind": "Method",
    "detail": "Function (} ; class NetEqSimulationEndedCallback { public : ~)",
    "insertText": "NetEqSimulationEndedCallback()"
  },
  {
    "label": "SimulationEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulationEnded(int64_t simulation_time_ms)"
  },
  {
    "label": "NetEqTest()",
    "kind": "Method",
    "detail": "Function (} ; class NetEqTest : public NetEqSimulator { public : using DecoderMap = std::map<int,SdpAudioFormat> ; struct Callbacks { NetEqTestErrorCallback* error_callback = nullptr ; NetEqPostInsertPacket* post_insert_packet = nullptr ; NetEqGetAudioCallback* get_audio_callback = nullptr ; NetEqSimulationEndedCallback* simulation_ended_callback = nullptr ; } ;)",
    "insertText": "NetEqTest(const NetEq::Config& config, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory, const DecoderMap& codecs, std::unique_ptr<std::ofstream> text_log, NetEqFactory* neteq_factory, std::unique_ptr<NetEqInput> input, std::unique_ptr<AudioSink> output, Callbacks callbacks)"
  },
  {
    "label": "NetEqTest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetEqTest()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Run()"
  },
  {
    "label": "RunToNextGetAudio()",
    "kind": "Method",
    "detail": "Function (SimulationStepResult)",
    "insertText": "RunToNextGetAudio()"
  },
  {
    "label": "SetNextAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextAction(Action next_operation)"
  },
  {
    "label": "GetNetEqState()",
    "kind": "Method",
    "detail": "Function (NetEqState)",
    "insertText": "GetNetEqState()"
  },
  {
    "label": "SimulationStats()",
    "kind": "Method",
    "detail": "Function (NetEqNetworkStatistics)",
    "insertText": "SimulationStats()"
  },
  {
    "label": "LifetimeStats()",
    "kind": "Method",
    "detail": "Function (NetEqLifetimeStatistics)",
    "insertText": "LifetimeStats()"
  },
  {
    "label": "StandardDecoderMap()",
    "kind": "Method",
    "detail": "Function (DecoderMap)",
    "insertText": "StandardDecoderMap()"
  },
  {
    "label": "RegisterDecoders()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterDecoders(const DecoderMap& codecs)"
  }
]