[
  {
    "label": "UDataLayerLoadingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerLoadingPolicy"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UDataLayerSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerSubsystem"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Subsystems / WorldSubsystem . h \" # include \" WorldPartition / DataLayer / ActorDataLayer . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / DataLayer / DataLayerManager . h \" # include \" DataLayerSubsystem . generated . h \" class UDataLayerLoadingPolicy ; class UCanvas ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnDataLayerRuntimeStateChanged, const UDataLayerInstance*, DataLayer, EDataLayerRuntimeState, State)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldDataLayersPostRegister, AWorldDataLayers*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldDataLayersPreUnregister, AWorldDataLayers*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UCLASS(Config = Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: ENGINE_API virtual bool DoesSupportWorldType(const EWorldType::Type WorldType)"
  },
  {
    "label": "SetDataLayerRuntimeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataLayerRuntimeState(InDataLayer, (EDataLayerRuntimeState)InState)"
  },
  {
    "label": "SetDataLayerRuntimeStateByLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataLayerRuntimeStateByLabel(InDataLayerLabel, (EDataLayerRuntimeState)InState)"
  },
  {
    "label": "GetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (class UDataLayerManager ; } ; template<class T> UDataLayerInstance*)",
    "insertText": "GetDataLayerInstance(const T& InDataLayerIdentifier, const ULevel* InLevelContext)"
  },
  {
    "label": "GetDataLayerManager()",
    "kind": "Method",
    "detail": "Function (const UDataLayerManager* DataLayerManager =)",
    "insertText": "GetDataLayerManager(GetWorld())"
  },
  {
    "label": "GetDataLayerInstanceNames()",
    "kind": "Method",
    "detail": "Function (} template<class T> TArray<FName>)",
    "insertText": "GetDataLayerInstanceNames(const TArray<T>& InDataLayerIdentifiers, const ULevel* InLevelContext)"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (} template<class T> TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances(const TArray<T>& InDataLayerIdentifiers, const ULevel* InLevelContext)"
  }
]