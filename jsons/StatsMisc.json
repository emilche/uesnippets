[
  {
    "label": "FSimpleScopeSecondsCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleScopeSecondsCounter"
  },
  {
    "label": "FSecondsCounterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSecondsCounterData"
  },
  {
    "label": "FSecondsCounterScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSecondsCounterScope"
  },
  {
    "label": "FConditionalScopeLogTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConditionalScopeLogTime"
  },
  {
    "label": "EScopeLogTimeUnits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EScopeLogTimeUnits"
  },
  {
    "label": "FScopeLogTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeLogTime"
  },
  {
    "label": "FSimpleScopeSecondsCounter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Templates / UnrealTemplate . h \" class FSimpleScopeSecondsCounter { public :)",
    "insertText": "FSimpleScopeSecondsCounter(double& InSeconds, bool bInEnabled = true) : StartTime(bInEnabled ? FPlatformTime::Seconds() : 0.0) , Seconds(InSeconds) , bEnabled(bInEnabled) , RecursionDepth(nullptr)"
  },
  {
    "label": "FSimpleScopeSecondsCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleScopeSecondsCounter(double& InSeconds, int32* InRecursionDepth) : StartTime(FPlatformTime::Seconds()) , Seconds(InSeconds) , bEnabled(*InRecursionDepth == 0) , RecursionDepth(InRecursionDepth)"
  },
  {
    "label": "FSimpleScopeSecondsCounter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSimpleScopeSecondsCounter()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (Seconds + =)",
    "insertText": "Seconds()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RecursionDepth)"
  },
  {
    "label": "SCOPE_SECONDS_COUNTER_BASE()",
    "kind": "Method",
    "detail": "Function (} } private : double StartTime ; double& Seconds ; bool bEnabled ; int32* RecursionDepth ; } ; # define)",
    "insertText": "SCOPE_SECONDS_COUNTER_BASE(Seconds) \\ FSimpleScopeSecondsCounter SecondsCount_##Seconds(Seconds)"
  },
  {
    "label": "SCOPE_SECONDS_COUNTER_RECURSION_SAFE_BASE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_SECONDS_COUNTER_RECURSION_SAFE_BASE(Seconds)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (\\ FSimpleScopeSecondsCounter SecondsCount_ # #)",
    "insertText": "Seconds(Seconds, &SecondsCount_##Seconds##_RecursionCounter)"
  },
  {
    "label": "SCOPE_SECONDS_COUNTER()",
    "kind": "Method",
    "detail": "Function (# if STATS # define)",
    "insertText": "SCOPE_SECONDS_COUNTER(Seconds) SCOPE_SECONDS_COUNTER_BASE(Seconds) #define SCOPE_SECONDS_COUNTER_RECURSION_SAFE(Seconds) SCOPE_SECONDS_COUNTER_RECURSION_SAFE_BASE(Seconds) #else #define SCOPE_SECONDS_COUNTER(Seconds) #define SCOPE_SECONDS_COUNTER_RECURSION_SAFE(Seconds)"
  },
  {
    "label": "FSecondsCounterData()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "FSecondsCounterData() : Time(0.0) , ScopeCounter(0)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTime()"
  },
  {
    "label": "FSecondsCounterScope()",
    "kind": "Method",
    "detail": "Function (} # endif } ; class FSecondsCounterScope { # if STATS public :)",
    "insertText": "FSecondsCounterScope(FSecondsCounterData& InData) : Data(InData) , StartTime(-1.f)"
  },
  {
    "label": "FSecondsCounterScope()",
    "kind": "Method",
    "detail": "Function (} + + InData . ScopeCounter ; } ~)",
    "insertText": "FSecondsCounterScope()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Data . ScopeCounter ;)",
    "insertText": "if(Data.ScopeCounter == 0)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Time(FPlatformTime::Seconds() - StartTime)"
  },
  {
    "label": "FSecondsCounterScope()",
    "kind": "Method",
    "detail": "Function (} } private : FSecondsCounterData& Data ; double StartTime ; # else public :)",
    "insertText": "FSecondsCounterScope(FSecondsCounterData& InData)"
  },
  {
    "label": "FConditionalScopeLogTime()",
    "kind": "Method",
    "detail": "Function (} # endif } ; typedef TKeyValuePair<double,uint32> FTotalTimeAndCount ; struct FConditionalScopeLogTime { enum EScopeLogTimeUnits { ScopeLog_DontLog,ScopeLog_Milliseconds,ScopeLog_Seconds } ;)",
    "insertText": "FConditionalScopeLogTime(bool bCondition, const WIDECHAR* InName, FTotalTimeAndCount* InCumulative = nullptr, EScopeLogTimeUnits InUnits = ScopeLog_Milliseconds)"
  },
  {
    "label": "FConditionalScopeLogTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConditionalScopeLogTime(bool bCondition, const ANSICHAR* InName, FTotalTimeAndCount* InCumulative = nullptr, EScopeLogTimeUnits InUnits = ScopeLog_Milliseconds)"
  },
  {
    "label": "FConditionalScopeLogTime()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FConditionalScopeLogTime()"
  },
  {
    "label": "GetDisplayScopedTime()",
    "kind": "Method",
    "detail": "Function (protected : double)",
    "insertText": "GetDisplayScopedTime(double InScopedTime)"
  },
  {
    "label": "GetDisplayUnitsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayUnitsString()"
  },
  {
    "label": "FScopeLogTime()",
    "kind": "Method",
    "detail": "Function (const double StartTime ; const FString Name ; FTotalTimeAndCount* Cumulative ; EScopeLogTimeUnits Units ; } ; struct FScopeLogTime : public FConditionalScopeLogTime {)",
    "insertText": "FScopeLogTime(const WIDECHAR* InName, FTotalTimeAndCount* InCumulative = nullptr, EScopeLogTimeUnits InUnits = ScopeLog_Milliseconds) : FConditionalScopeLogTime(true, InName, InCumulative, InUnits)"
  },
  {
    "label": "FScopeLogTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopeLogTime(const ANSICHAR* InName, FTotalTimeAndCount* InCumulative = nullptr, EScopeLogTimeUnits InUnits = ScopeLog_Milliseconds) : FConditionalScopeLogTime(true, InName, InCumulative, InUnits)"
  },
  {
    "label": "SCOPE_LOG_TIME()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SCOPE_LOG_TIME(Name,CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(true, Name, CumulativePtr)"
  },
  {
    "label": "SCOPE_LOG_TIME_IN_SECONDS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_LOG_TIME_IN_SECONDS(Name,CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(true, Name, CumulativePtr, FScopeLogTime::ScopeLog_Seconds)"
  },
  {
    "label": "SCOPE_LOG_TIME_FUNC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_LOG_TIME_FUNC() \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(true, __FUNCTION__)"
  },
  {
    "label": "SCOPE_LOG_TIME_FUNC_WITH_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_LOG_TIME_FUNC_WITH_GLOBAL(CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(true, __FUNCTION__,CumulativePtr)"
  },
  {
    "label": "CONDITIONAL_SCOPE_LOG_TIME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_SCOPE_LOG_TIME(Condition, Name,CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(Condition, Name, CumulativePtr)"
  },
  {
    "label": "CONDITIONAL_SCOPE_LOG_TIME_IN_SECONDS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_SCOPE_LOG_TIME_IN_SECONDS(Condition, Name,CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(Condition, Name, CumulativePtr, FScopeLogTime::ScopeLog_Seconds)"
  },
  {
    "label": "CONDITIONAL_SCOPE_LOG_TIME_FUNC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_SCOPE_LOG_TIME_FUNC(Condition) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(Condition, __FUNCTION__)"
  },
  {
    "label": "CONDITIONAL_SCOPE_LOG_TIME_FUNC_WITH_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_SCOPE_LOG_TIME_FUNC_WITH_GLOBAL(Condition, CumulativePtr) \\ FConditionalScopeLogTime PREPROCESSOR_JOIN(ScopeLogTime,__LINE__)(Condition, __FUNCTION__,CumulativePtr)"
  }
]