[
  {
    "label": "CrossTrafficRouteImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CrossTrafficRouteImpl"
  },
  {
    "label": "CrossTrafficRouteImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_TRAFFIC_ROUTE_H_ # define TEST_NETWORK_TRAFFIC_ROUTE_H_ # include<memory> # include<vector> # include \" api / test / network_emulation_manager . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" system_wrappers / include / clock . h \" # include \" test / network / network_emulation . h \" namespace webrtc { namespace test { class CrossTrafficRouteImpl final : public CrossTrafficRoute { public :)",
    "insertText": "CrossTrafficRouteImpl(Clock* clock, EmulatedNetworkReceiverInterface* receiver, EmulatedEndpointImpl* endpoint)"
  },
  {
    "label": "CrossTrafficRouteImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CrossTrafficRouteImpl()"
  },
  {
    "label": "TriggerPacketBurst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerPacketBurst(size_t num_packets, size_t packet_size)"
  },
  {
    "label": "NetworkDelayedAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkDelayedAction(size_t packet_size, std::function<void()> action)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket(size_t packet_size)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SendPacket(size_t packet_size, uint16_t dest_port)"
  }
]