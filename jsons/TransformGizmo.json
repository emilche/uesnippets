[
  {
    "label": "IGizmoAxisSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoAxisSource"
  },
  {
    "label": "IGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoStateTarget"
  },
  {
    "label": "IGizmoTransformSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoTransformSource"
  },
  {
    "label": "IToolContextTransactionProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolContextTransactionProvider"
  },
  {
    "label": "IToolsContextRenderAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolsContextRenderAPI"
  },
  {
    "label": "UMultiButtonClickDragBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMultiButtonClickDragBehavior"
  },
  {
    "label": "UGizmoConstantFrameAxisSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoConstantFrameAxisSource"
  },
  {
    "label": "UGizmoElementArrow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementArrow"
  },
  {
    "label": "UGizmoElementBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementBase"
  },
  {
    "label": "UGizmoElementBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementBox"
  },
  {
    "label": "UGizmoElementCircle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementCircle"
  },
  {
    "label": "UGizmoElementCone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementCone"
  },
  {
    "label": "UGizmoElementCylinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementCylinder"
  },
  {
    "label": "UGizmoElementGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementGroup"
  },
  {
    "label": "UGizmoElementHitMultiTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementHitMultiTarget"
  },
  {
    "label": "UGizmoElementRectangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementRectangle"
  },
  {
    "label": "UGizmoElementRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementRoot"
  },
  {
    "label": "UGizmoElementTorus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementTorus"
  },
  {
    "label": "UInteractiveGizmoManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveGizmoManager"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UTransformProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformProxy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGizmosParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmosParameters"
  },
  {
    "label": "EDITORINTERACTIVETOOLSFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORINTERACTIVETOOLSFRAMEWORK_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BaseBehaviors / BehaviorTargetInterfaces . h \" # include \" BaseGizmos / GizmoElementHitTargets . h \" # include \" BaseGizmos / GizmoViewContext . h \" # include \" BaseGizmos / TransformProxy . h \" # include \" Containers / EnumAsByte . h \" # include \" CoreMinimal . h \" # include \" EditorGizmos / TransformGizmoInterfaces . h \" # include \" InputState . h \" # include \" InteractiveGizmo . h \" # include \" InteractiveToolChange . h \" # include \" Materials / MaterialInstanceDynamic . h \" # include \" Math / Axis . h \" # include \" Math / Color . h \" # include \" Math / Quat . h \" # include \" Math / Ray . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Templates / Function . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / ScriptInterface . h \" # include \" UObject / UObjectGlobals . h \" # include \" TransformGizmo . generated . h \" class IGizmoAxisSource ; class IGizmoStateTarget ; class IGizmoTransformSource ; class IToolContextTransactionProvider ; class IToolsContextRenderAPI ; class UMultiButtonClickDragBehavior ; class UGizmoConstantFrameAxisSource ; class UGizmoElementArrow ; class UGizmoElementBase ; class UGizmoElementBox ; class UGizmoElementCircle ; class UGizmoElementCone ; class UGizmoElementCylinder ; class UGizmoElementGroup ; class UGizmoElementHitMultiTarget ; class UGizmoElementRectangle ; class UGizmoElementRoot ; class UGizmoElementTorus ; class UInteractiveGizmoManager ; class UMaterialInstanceDynamic ; class UMaterialInterface ; class UObject ; class UTransformProxy ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : uint8 { Pull,Arc } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = NewTRSGizmo)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (float AxisLengthOffset = 2 0 . 0 f ; float TranslateAxisLength = 7 0 . 0 f ; float TranslateAxisConeAngle = 1 6 . 0 f ; float TranslateAxisConeHeight = 2 2 . 0 f ; float TranslateAxisConeRadius = 7 . 0 f ; float TranslateScreenSpaceHandleSize = 1 4 . 0 f ; float RotateArcballSphereRadius = 7 0 . 0 f ; float RotateAxisOuterRadius = 7 3 . 0 f ; float RotateAxisInnerRadius = 1 . 2 5 f ; int32 RotateAxisNumSegments = 6 4 ; int32 RotateAxisInnerSlices = 8 ; float RotateOuterCircleRadius = 7 3 . 0 f ; float RotateScreenSpaceRadius = 8 3 . 0 f ; float ScaleAxisLength = 7 0 . 0 f ; float ScaleAxisCubeDim = 1 2 . 0 f ; float PlanarHandleOffset = 5 5 . 0 f ; float PlanarHandleSize = 1 5 . 0 f ; float AxisTransp = 0 . 8 f ; FLinearColor AxisColorX =)",
    "insertText": "FLinearColor(0.594f, 0.0197f, 0.0f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor AxisColorY =)",
    "insertText": "FLinearColor(0.1349f, 0.3959f, 0.0f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor AxisColorZ =)",
    "insertText": "FLinearColor(0.0251f, 0.207f, 0.85f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor ScreenAxisColor =)",
    "insertText": "FLinearColor(0.76f, 0.72f, 0.14f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor PlaneColorXY =)",
    "insertText": "FLinearColor(1.0f, 1.0f, 0.0f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor ArcBallColor =)",
    "insertText": "FLinearColor(0.5f, 0.5f, 0.5f, 0.03f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor ScreenSpaceColor =)",
    "insertText": "FLinearColor(0.765f, 0.765f, 0.765f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor GreyColor =)",
    "insertText": "FLinearColor(0.50f, 0.50f, 0.50f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor WhiteColor =)",
    "insertText": "FLinearColor(1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor RotateScreenSpaceCircleColor = WhiteColor ; FLinearColor RotateOuterCircleColor = GreyColor ; FLinearColor RotateArcballCircleColor =)",
    "insertText": "FLinearColor(0.50f, 0.50f, 0.50f, 0.1f)"
  },
  {
    "label": "SetDisallowNegativeScaling()",
    "kind": "Method",
    "detail": "Function (float LargeOuterAlpha = 0 . 5 f ; public : void)",
    "insertText": "SetDisallowNegativeScaling(bool bDisallow)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "BeginHoverSequenceHitTest()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "BeginHoverSequenceHitTest(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnBeginHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnUpdateHover()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUpdateHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnEndHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndHover()"
  },
  {
    "label": "CanBeginClickDragSequence()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "CanBeginClickDragSequence(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPress(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDrag(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickRelease(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnTerminateDragSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTerminateDragSequence()"
  },
  {
    "label": "SetActiveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTarget(UTransformProxy* Target, IToolContextTransactionProvider* TransactionProvider = nullptr, IGizmoStateTarget* InStateTarget = nullptr)"
  },
  {
    "label": "ClearActiveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActiveTarget()"
  },
  {
    "label": "SetNewChildScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewChildScale(const FVector& NewChildScale)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(bool bVisible)"
  },
  {
    "label": "SetCustomizationFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomizationFunction(const TFunction<const FGizmoCustomization()>& InFunction)"
  },
  {
    "label": "HandleWidgetModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWidgetModeChanged(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "OnParametersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParametersChanged(const FGizmosParameters& InParameters)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSetActiveTarget, UTransformGizmo*, UTransformProxy*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnSetActiveTarget OnSetActiveTarget ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnClearActiveTarget, UTransformGizmo*, UTransformProxy*)"
  },
  {
    "label": "UpdateCameraAxisSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraAxisSource()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "bool()> ShouldAlignDestination = []()"
  },
  {
    "label": "SetupIndirectBehaviors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupIndirectBehaviors()"
  },
  {
    "label": "SetupMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMaterials()"
  },
  {
    "label": "SetupOnClickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupOnClickFunctions()"
  },
  {
    "label": "UpdateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMode()"
  },
  {
    "label": "EnableMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMode(EGizmoTransformMode InGizmoMode, EAxisList::Type InAxisListToDraw)"
  },
  {
    "label": "EnableTranslate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTranslate(EAxisList::Type InAxisListToDraw)"
  },
  {
    "label": "EnableRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRotate(EAxisList::Type InAxisListToDraw)"
  },
  {
    "label": "EnableScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableScale(EAxisList::Type InAxisListToDraw)"
  },
  {
    "label": "EnablePlanarObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePlanarObjects(bool bTranslate, bool bEnableX, bool bEnableY, bool bEnableZ)"
  },
  {
    "label": "MakeTranslateAxis()",
    "kind": "Method",
    "detail": "Function (UGizmoElementArrow*)",
    "insertText": "MakeTranslateAxis(ETransformGizmoPartIdentifier InPartId, const FVector& InAxisDir, const FVector& InSideDir, UMaterialInterface* InMaterial)"
  },
  {
    "label": "MakeScaleAxis()",
    "kind": "Method",
    "detail": "Function (UGizmoElementArrow*)",
    "insertText": "MakeScaleAxis(ETransformGizmoPartIdentifier InPartId, const FVector& InAxisDir, const FVector& InSideDir, UMaterialInterface* InMaterial)"
  },
  {
    "label": "MakeRotateAxis()",
    "kind": "Method",
    "detail": "Function (UGizmoElementTorus*)",
    "insertText": "MakeRotateAxis(ETransformGizmoPartIdentifier InPartId, const FVector& TorusAxis0, const FVector& TorusAxis1, UMaterialInterface* InMaterial, UMaterialInterface* InCurrentMaterial)"
  },
  {
    "label": "MakeUniformScaleHandle()",
    "kind": "Method",
    "detail": "Function (UGizmoElementBox*)",
    "insertText": "MakeUniformScaleHandle()"
  },
  {
    "label": "MakePlanarHandle()",
    "kind": "Method",
    "detail": "Function (UGizmoElementRectangle*)",
    "insertText": "MakePlanarHandle(ETransformGizmoPartIdentifier InPartId, const FVector& InUpDirection, const FVector& InSideDirection, const FVector& InPlaneNormal, UMaterialInterface* InMaterial, const FLinearColor& InVertexColor)"
  },
  {
    "label": "MakeTranslateScreenSpaceHandle()",
    "kind": "Method",
    "detail": "Function (UGizmoElementRectangle*)",
    "insertText": "MakeTranslateScreenSpaceHandle()"
  },
  {
    "label": "MakeRotateCircleHandle()",
    "kind": "Method",
    "detail": "Function (UGizmoElementCircle*)",
    "insertText": "MakeRotateCircleHandle(ETransformGizmoPartIdentifier InPartId, float InRadius, const FLinearColor& InColor, float bFill)"
  },
  {
    "label": "GetGizmoTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetGizmoTransform()"
  },
  {
    "label": "UpdateHoveredPart()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "UpdateHoveredPart(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "GetWorldAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWorldAxis(const FVector& InAxis)"
  },
  {
    "label": "GetNearestRayParamToInteractionAxis()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNearestRayParamToInteractionAxis(const FInputDeviceRay& InRay)"
  },
  {
    "label": "GetRayParamIntersectionWithInteractionPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRayParamIntersectionWithInteractionPlane(const FInputDeviceRay& InRay, float& OutHitParam)"
  },
  {
    "label": "UpdateHoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverState(const bool bInHover, const ETransformGizmoPartIdentifier InPartId)"
  },
  {
    "label": "ResetHoverStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHoverStates(const EGizmoTransformMode InMode)"
  },
  {
    "label": "UpdateInteractingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInteractingState(const bool bInInteracting, const ETransformGizmoPartIdentifier InPartId, const bool bIdOnly = false)"
  },
  {
    "label": "ResetInteractingStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInteractingStates(const EGizmoTransformMode InMode)"
  },
  {
    "label": "BeginTransformEditSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTransformEditSequence()"
  },
  {
    "label": "EndTransformEditSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransformEditSequence()"
  },
  {
    "label": "OnClickPressTranslateXAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateXAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressTranslateYAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateYAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressTranslateZAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateZAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragTranslateAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragTranslateAxis(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickReleaseTranslateAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseTranslateAxis(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnClickPressTranslateXYPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateXYPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressTranslateYZPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateYZPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressTranslateXZPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressTranslateXZPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragTranslatePlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragTranslatePlanar(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickReleaseTranslatePlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseTranslatePlanar(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "ComputeAxisTranslateDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeAxisTranslateDelta(double InStartParam, double InEndParam)"
  },
  {
    "label": "ComputePlanarTranslateDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputePlanarTranslateDelta(const FVector& InStartPoint, const FVector& InEndPoint)"
  },
  {
    "label": "OnClickPressScreenSpaceTranslate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScreenSpaceTranslate(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragScreenSpaceTranslate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScreenSpaceTranslate(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickReleaseScreenSpaceTranslate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseScreenSpaceTranslate(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnClickPressRotateXAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressRotateXAxis(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickPressRotateYAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressRotateYAxis(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickPressRotateZAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressRotateZAxis(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickPressRotateAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressRotateAxis(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickDragRotateAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragRotateAxis(const FInputDeviceRay& InDragPos)"
  },
  {
    "label": "OnClickReleaseRotateAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseRotateAxis(const FInputDeviceRay& InReleasePos)"
  },
  {
    "label": "GetScreenRotateAxisDir()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetScreenRotateAxisDir(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "ComputeAxisRotateDelta()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "ComputeAxisRotateDelta(const FVector2D& InStartPos, const FInputDeviceRay& InDragPos)"
  },
  {
    "label": "OnClickPressRotateArc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnClickPressRotateArc(const FInputDeviceRay& InPressPos, const FVector& InPlaneNormal, const FVector& InPlaneAxis1, const FVector& InPlaneAxis2)"
  },
  {
    "label": "OnClickPressScreenSpaceRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScreenSpaceRotate(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragScreenSpaceRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScreenSpaceRotate(const FInputDeviceRay& InDragPos)"
  },
  {
    "label": "OnClickReleaseScreenSpaceRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseScreenSpaceRotate(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "ComputeAngularRotateDelta()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "ComputeAngularRotateDelta(double InStartAngle, double InEndAngle)"
  },
  {
    "label": "OnClickPressArcBallRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressArcBallRotate(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragArcBallRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragArcBallRotate(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickReleaseArcBallRotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseArcBallRotate(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "GetWorldRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWorldRadius(const float InRadius)"
  },
  {
    "label": "GetSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSizeCoefficient()"
  },
  {
    "label": "OnClickPressScaleXAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleXAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleYAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleYAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleZAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleZAxis(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleXYPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleXYPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleYZPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleYZPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleXZPlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleXZPlanar(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScaleXYZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScaleXYZ(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPressScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPressScale(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDragScaleAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScaleAxis(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickDragScalePlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScalePlanar(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickDragScaleXYZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScaleXYZ(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickDragScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragScale(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickReleaseScaleAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseScaleAxis(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnClickReleaseScalePlanar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseScalePlanar(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnClickReleaseScaleXYZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickReleaseScaleXYZ(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "ComputeScaleDelta()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeScaleDelta(const FVector2D& InStartPos, const FVector2D& InEndPos, FVector2D& OutScreenDelta)"
  },
  {
    "label": "GetScreenProjectedAxis()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetScreenProjectedAxis(const UGizmoViewContext* View, const FVector& InLocalAxis, const FTransform& InLocalToWorld = FTransform::Identity)"
  },
  {
    "label": "ApplyTranslateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTranslateDelta(const FVector& InTranslateDelta)"
  },
  {
    "label": "ApplyRotateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotateDelta(const FQuat& InRotateDelta)"
  },
  {
    "label": "ApplyScaleDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyScaleDelta(const FVector& InScaleDelta)"
  },
  {
    "label": "PositionSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PositionSnapFunction(const FVector& WorldPosition, FVector& SnappedPositionOut)"
  },
  {
    "label": "RotationSnapFunction()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "RotationSnapFunction(const FQuat& DeltaRotation)"
  },
  {
    "label": "GetMaxPartIdentifier()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxPartIdentifier()"
  },
  {
    "label": "VerifyPartIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyPartIdentifier(uint32 InPartIdentifier)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void(UTransformGizmo* TransformGizmo, const FInputDeviceRay& PressPos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void(UTransformGizmo* TransformGizmo, const FInputDeviceRay& DragPos)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<TFunction<)",
    "insertText": "void(UTransformGizmo* TransformGizmo, const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "FGizmoCustomization()",
    "kind": "Method",
    "detail": "Function (TFunction<const)",
    "insertText": "FGizmoCustomization()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (ETransformGizmoPartIdentifier LastHitPartPerMode [ static_cast<)",
    "insertText": "uint8(EGizmoTransformMode::Max)"
  },
  {
    "label": "GetCurrentModeLastHitPart()",
    "kind": "Method",
    "detail": "Function (ETransformGizmoPartIdentifier)",
    "insertText": "GetCurrentModeLastHitPart()"
  },
  {
    "label": "SetModeLastHitPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModeLastHitPart(const EGizmoTransformMode InMode, const ETransformGizmoPartIdentifier InIdentifier)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()"
  }
]