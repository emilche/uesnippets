[
  {
    "label": "OutgoingDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingDirectory"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CreateForOutgoingDirectory()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_SERVICE_PROVIDER_IMPL_H_ # define BASE_FUCHSIA_SERVICE_PROVIDER_IMPL_H_ # include<fuchsia / io / cpp / fidl . h> # include<fuchsia / sys / cpp / fidl . h> # include<lib / fidl / cpp / binding_set . h> # include<lib / fidl / cpp / interface_handle . h> # include<lib / sys / cpp / component_context . h> # include<lib / zx / channel . h> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / callback . h \" namespace sys { class OutgoingDirectory ; } namespace base { class BASE_EXPORT ServiceProviderImpl : public::fuchsia::sys::ServiceProvider { public : std::unique_ptr<ServiceProviderImpl>)",
    "insertText": "CreateForOutgoingDirectory(sys::OutgoingDirectory* outgoing_directory)"
  },
  {
    "label": "ServiceProviderImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceProviderImpl(fidl::InterfaceHandle<::fuchsia::io::Directory> service_directory)"
  },
  {
    "label": "ServiceProviderImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceProviderImpl(const ServiceProviderImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ServiceProviderImpl&)",
    "insertText": "operator(const ServiceProviderImpl&)"
  },
  {
    "label": "ServiceProviderImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ServiceProviderImpl()"
  },
  {
    "label": "AddBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBinding(fidl::InterfaceRequest<::fuchsia::sys::ServiceProvider> request)"
  },
  {
    "label": "SetOnLastClientDisconnectedClosure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnLastClientDisconnectedClosure(base::OnceClosure on_last_client_disconnected)"
  },
  {
    "label": "has_clients()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_clients()"
  },
  {
    "label": "ConnectToService()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ConnectToService(std::string service_name, zx::channel client_handle)"
  },
  {
    "label": "OnBindingSetEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBindingSetEmpty()"
  }
]