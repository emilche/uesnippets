[
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "NodeHashMapPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeHashMapPolicy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "node_hash_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "node_hash_map"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "KeyEqual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyEqual"
  },
  {
    "label": "IsUnorderedContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUnorderedContainer"
  },
  {
    "label": "node_hash_map()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_NODE_HASH_MAP_H_ # define ABSL_CONTAINER_NODE_HASH_MAP_H_ # include<tuple> # include<type_traits> # include<utility> # include \" absl / algorithm / container . h \" # include \" absl / base / macros . h \" # include \" absl / container / internal / container_memory . h \" # include \" absl / container / internal / hash_function_defaults . h \" # include \" absl / container / internal / node_slot_policy . h \" # include \" absl / container / internal / raw_hash_map . h \" # include \" absl / memory / memory . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class Key,class Value> class NodeHashMapPolicy ; } template<class Key,class Value,class Hash = absl::container_internal::hash_default_hash<Key>,class Eq = absl::container_internal::hash_default_eq<Key>,class Alloc = std::allocator<std::pair<const Key,Value>>> class node_hash_map : public absl::container_internal::raw_hash_map<absl::container_internal::NodeHashMapPolicy<Key,Value>,Hash,Eq,Alloc> { using Base = node_hash_map::raw_hash_map ; public :)",
    "insertText": "node_hash_map()"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::cend ; using Base::end ; using Base::capacity ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::insert_or_assign ; using Base::emplace ; using Base::emplace_hint ; using Base::try_emplace ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::rehash ; using Base::reserve ; using Base::at ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::operator [ ] ; using Base::bucket_count ; using Base::load_factor ; using Base::max_load_factor ; using Base::get_allocator ; using Base::hash_function ; using Base::key_eq ; } ; template<K,V,H,E,A,Predicate> node_hash_map<K,V,H,E,A>::size_type)",
    "insertText": "erase_if(node_hash_map<K, V, H, E, A>& c, Predicate pred)"
  },
  {
    "label": "new_element()",
    "kind": "Method",
    "detail": "Function (} namespace container_internal { template<class Key,class Value> class NodeHashMapPolicy : public absl::container_internal::node_slot_policy<std::pair<const Key,Value>&,NodeHashMapPolicy<Key,Value>> { using value_type = std::pair<const Key,Value> ; public : using key_type = Key ; using mapped_type = Value ; using init_type = std::pair<key_type,mapped_type> ; template<class Allocator,class . . . Args> value_type*)",
    "insertText": "new_element(Allocator* alloc, Args&&... args)"
  },
  {
    "label": "pair_alloc()",
    "kind": "Method",
    "detail": "Function (using PairAlloc = absl::allocator_traits<Allocator>::template rebind_alloc<value_type> ; PairAlloc)",
    "insertText": "pair_alloc(*alloc)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (value_type* res = absl::allocator_traits<PairAlloc)",
    "insertText": "allocate(pair_alloc, 1)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<PairAlloc)",
    "insertText": "construct(pair_alloc, res, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<PairAlloc)",
    "insertText": "destroy(pair_alloc, pair)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<PairAlloc)",
    "insertText": "deallocate(pair_alloc, pair, 1)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class F,class . . . Args>)",
    "insertText": "decltype(absl::container_internal::DecomposePair( std::declval<F>(), std::declval<Args>()...)) apply(F&& f, Args&&... args)"
  },
  {
    "label": "element_space_used()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "element_space_used(const value_type*)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} Value&)",
    "insertText": "value(value_type* elem)"
  }
]