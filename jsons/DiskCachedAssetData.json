[
  {
    "label": "FDiskCachedAssetData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiskCachedAssetData"
  },
  {
    "label": "Archive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archive"
  },
  {
    "label": "FDiskCachedAssetData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" PackageDependencyData . h \" class FDiskCachedAssetData { public : FDateTime ModificationTime ; FDateTime LastGatheredTime ; FName Extension ; TArray<FAssetData> AssetDataList ; FPackageDependencyData DependencyData ;)",
    "insertText": "FDiskCachedAssetData()"
  },
  {
    "label": "FDiskCachedAssetData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDiskCachedAssetData(const FDateTime& InModificationTime, const FDateTime& InLastSeen, FName InExtension) : ModificationTime(InModificationTime) , LastGatheredTime(InLastSeen) , Extension(InExtension)"
  },
  {
    "label": "SerializeForCache()",
    "kind": "Method",
    "detail": "Function (} template<class Archive> void)",
    "insertText": "SerializeForCache(Archive&& Ar)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Ar<<ModificationTime ; Ar<<LastGatheredTime ; Ar<<Extension ; int32 AssetDataCount = AssetDataList .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<AssetDataCount ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (AssetDataList .)",
    "insertText": "SetNum(AssetDataCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 i = 0; i < AssetDataCount; i++)"
  },
  {
    "label": "SerializeForCache()",
    "kind": "Method",
    "detail": "Function (AssetDataList [ i ] .)",
    "insertText": "SerializeForCache(Ar)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  }
]