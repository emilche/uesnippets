[
  {
    "label": "IAnalyticsProviderET",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProviderET"
  },
  {
    "label": "IInstallBundleSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleSource"
  },
  {
    "label": "FContentRequestSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentRequestSharedContext"
  },
  {
    "label": "FInstallBundleProgress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleProgress"
  },
  {
    "label": "FInstallBundleRequestResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleRequestResultInfo"
  },
  {
    "label": "FInstallBundleReleaseRequestResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleReleaseRequestResultInfo"
  },
  {
    "label": "FInstallBundleRequestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleRequestInfo"
  },
  {
    "label": "FInstallBundleReleaseRequestInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleReleaseRequestInfo"
  },
  {
    "label": "FInstallBundlePauseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundlePauseInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInstallBundleChunkDownloadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleChunkDownloadInfo"
  },
  {
    "label": "IInstallBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleManager"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Union . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" InstallBundleTypes . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Misc / ConfigCacheIni . h \" # endif # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / ValueOrError . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class IAnalyticsProviderET ; class IInstallBundleSource ; namespace InstallBundleUtil { struct FContentRequestSharedContext ; using FContentRequestSharedContextPtr = TSharedPtr<FContentRequestSharedContext> ; } struct FInstallBundleProgress { FName BundleName ; EInstallBundleStatus Status = EInstallBundleStatus::Requested ; EInstallBundlePauseFlags PauseFlags = EInstallBundlePauseFlags::None ; float Install_Percent = 0 ; float Finishing_Percent = 0 ; } ; struct FInstallBundleRequestResultInfo { FName BundleName ; EInstallBundleResult Result = EInstallBundleResult::OK ; bool bIsStartup = false ; bool bContainsChunks = false ; bool bContentWasInstalled = false ; FText OptionalErrorText ; FString OptionalErrorCode ; } ; struct FInstallBundleReleaseRequestResultInfo { FName BundleName ; EInstallBundleReleaseResult Result = EInstallBundleReleaseResult::OK ; } ; struct FInstallBundleRequestInfo { EInstallBundleRequestInfoFlags InfoFlags = EInstallBundleRequestInfoFlags::None ; TArray<FName> BundlesEnqueued ; TArray<FInstallBundleRequestResultInfo> BundleResults ; } ; struct FInstallBundleReleaseRequestInfo { EInstallBundleRequestInfoFlags InfoFlags = EInstallBundleRequestInfoFlags::None ; TArray<FName> BundlesEnqueued ; } ; struct FInstallBundlePauseInfo { FName BundleName ; EInstallBundlePauseFlags PauseFlags = EInstallBundlePauseFlags::None ; } ; enum class EInstallBundleManagerInitErrorHandlerResult { NotHandled,Retry,StopInitialization,} ; struct FInstallBundleChunkDownloadInfo { FString ChunkName ; int32 ChunkFileSize ; float ChunkDownloadDuration ; } ; using FInstallBundleSourceOrCache = TUnion<FInstallBundleSourceType,FName> ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(EInstallBundleManagerInitErrorHandlerResult, FInstallBundleManagerInitErrorHandler, EInstallBundleManagerInitResult)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundleManagerInitCompleteMultiDelegate, EInstallBundleManagerInitResult)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundleChunkDownloadMetricsMultiDelegate, FInstallBundleChunkDownloadInfo)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundleCompleteMultiDelegate, FInstallBundleRequestResultInfo)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundlePausedMultiDelegate, FInstallBundlePauseInfo)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundleReleasedMultiDelegate, FInstallBundleReleaseRequestResultInfo)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInstallBundleManagerOnPatchCheckComplete, EInstallBundleManagerPatchCheckResult)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FInstallBundleManagerEnvironmentWantsPatchCheck)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInstallBundleGetInstallStateDelegate, FInstallBundleCombinedInstallState)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FInstallBundleManagerFlushCacheCompleteDelegate)"
  },
  {
    "label": "GetPlatformInstallBundleManager()",
    "kind": "Method",
    "detail": "Function (class IInstallBundleManager : public TSharedFromThis<IInstallBundleManager> { public : FInstallBundleManagerInitCompleteMultiDelegate InitCompleteDelegate ; FInstallBundleChunkDownloadMetricsMultiDelegate InstallBundleChunkDownloadMetricsDelegate ; FInstallBundleCompleteMultiDelegate InstallBundleCompleteDelegate ; FInstallBundlePausedMultiDelegate PausedBundleDelegate ; FInstallBundleReleasedMultiDelegate ReleasedDelegate ; FInstallBundleManagerOnPatchCheckComplete PatchCheckCompleteDelegate ; TSharedPtr<IInstallBundleManager>)",
    "insertText": "GetPlatformInstallBundleManager()"
  },
  {
    "label": "IInstallBundleManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IInstallBundleManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "HasBundleSource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBundleSource(FInstallBundleSourceType SourceType)"
  },
  {
    "label": "GetBundleSource()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IInstallBundleSource>)",
    "insertText": "GetBundleSource(FInstallBundleSourceType SourceType)"
  },
  {
    "label": "PushInitErrorCallback()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "PushInitErrorCallback(FInstallBundleManagerInitErrorHandler Callback)"
  },
  {
    "label": "PopInitErrorCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopInitErrorCallback()"
  },
  {
    "label": "PopInitErrorCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopInitErrorCallback(FDelegateHandle Handle)"
  },
  {
    "label": "PopInitErrorCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopInitErrorCallback(const void* InUserObject)"
  },
  {
    "label": "GetInitState()",
    "kind": "Method",
    "detail": "Function (EInstallBundleManagerInitState)",
    "insertText": "GetInitState()"
  },
  {
    "label": "RequestUpdateContent()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleRequestInfo,EInstallBundleResult>)",
    "insertText": "RequestUpdateContent(FName BundleName, EInstallBundleRequestFlags Flags, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging, InstallBundleUtil::FContentRequestSharedContextPtr RequestSharedContext = nullptr)"
  },
  {
    "label": "RequestUpdateContent()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleRequestInfo,EInstallBundleResult>)",
    "insertText": "RequestUpdateContent(TArrayView<const FName> BundleNames, EInstallBundleRequestFlags Flags, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging, InstallBundleUtil::FContentRequestSharedContextPtr RequestSharedContext = nullptr)"
  },
  {
    "label": "GetContentState()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "GetContentState(FName BundleName, EInstallBundleGetContentStateFlags Flags, bool bAddDependencies, FInstallBundleGetContentStateDelegate Callback, FName RequestTag = NAME_None)"
  },
  {
    "label": "GetContentState()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "GetContentState(TArrayView<const FName> BundleNames, EInstallBundleGetContentStateFlags Flags, bool bAddDependencies, FInstallBundleGetContentStateDelegate Callback, FName RequestTag = NAME_None)"
  },
  {
    "label": "CancelAllGetContentStateRequestsForTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllGetContentStateRequestsForTag(FName RequestTag)"
  },
  {
    "label": "CancelAllGetContentStateRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllGetContentStateRequests(FDelegateHandle Handle)"
  },
  {
    "label": "GetInstallState()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "GetInstallState(FName BundleName, bool bAddDependencies, FInstallBundleGetInstallStateDelegate Callback, FName RequestTag = NAME_None)"
  },
  {
    "label": "GetInstallState()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "GetInstallState(TArrayView<const FName> BundleNames, bool bAddDependencies, FInstallBundleGetInstallStateDelegate Callback, FName RequestTag = NAME_None)"
  },
  {
    "label": "GetInstallStateSynchronous()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleCombinedInstallState,EInstallBundleResult>)",
    "insertText": "GetInstallStateSynchronous(FName BundleName, bool bAddDependencies)"
  },
  {
    "label": "GetInstallStateSynchronous()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleCombinedInstallState,EInstallBundleResult>)",
    "insertText": "GetInstallStateSynchronous(TArrayView<const FName> BundleNames, bool bAddDependencies)"
  },
  {
    "label": "CancelAllGetInstallStateRequestsForTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllGetInstallStateRequestsForTag(FName RequestTag)"
  },
  {
    "label": "CancelAllGetInstallStateRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllGetInstallStateRequests(FDelegateHandle Handle)"
  },
  {
    "label": "RequestReleaseContent()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleReleaseRequestInfo,EInstallBundleResult>)",
    "insertText": "RequestReleaseContent(FName ReleaseName, EInstallBundleReleaseRequestFlags Flags, TArrayView<const FName> KeepNames = TArrayView<const FName>(), ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "RequestReleaseContent()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FInstallBundleReleaseRequestInfo,EInstallBundleResult>)",
    "insertText": "RequestReleaseContent(TArrayView<const FName> ReleaseNames, EInstallBundleReleaseRequestFlags Flags, TArrayView<const FName> KeepNames = TArrayView<const FName>(), ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (EInstallBundleResult)",
    "insertText": "FlushCache(FInstallBundleManagerFlushCacheCompleteDelegate Callback, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (EInstallBundleResult)",
    "insertText": "FlushCache(FInstallBundleSourceOrCache SourceOrCache, FInstallBundleManagerFlushCacheCompleteDelegate Callback, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "GetCacheStats()",
    "kind": "Method",
    "detail": "Function (TArray<FInstallBundleCacheStats>)",
    "insertText": "GetCacheStats(EInstallBundleCacheDumpToLog DumpToLog = EInstallBundleCacheDumpToLog::None, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "GetCacheStats()",
    "kind": "Method",
    "detail": "Function (TOptional<FInstallBundleCacheStats>)",
    "insertText": "GetCacheStats(FInstallBundleSourceOrCache SourceOrCache, EInstallBundleCacheDumpToLog DumpToLog = EInstallBundleCacheDumpToLog::None, ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging)"
  },
  {
    "label": "RequestRemoveContentOnNextInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRemoveContentOnNextInit(FName RemoveName, TArrayView<const FName> KeepNames = TArrayView<const FName>())"
  },
  {
    "label": "RequestRemoveContentOnNextInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRemoveContentOnNextInit(TArrayView<const FName> RemoveNames, TArrayView<const FName> KeepNames = TArrayView<const FName>())"
  },
  {
    "label": "CancelRequestRemoveContentOnNextInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequestRemoveContentOnNextInit(FName BundleName)"
  },
  {
    "label": "CancelRequestRemoveContentOnNextInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequestRemoveContentOnNextInit(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "CancelUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelUpdateContent(FName BundleName)"
  },
  {
    "label": "CancelUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelUpdateContent(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "PauseUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseUpdateContent(FName BundleName)"
  },
  {
    "label": "PauseUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseUpdateContent(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "ResumeUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeUpdateContent(FName BundleName)"
  },
  {
    "label": "ResumeUpdateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeUpdateContent(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "RequestPausedBundleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPausedBundleCallback()"
  },
  {
    "label": "GetBundleProgress()",
    "kind": "Method",
    "detail": "Function (TOptional<FInstallBundleProgress>)",
    "insertText": "GetBundleProgress(FName BundleName)"
  },
  {
    "label": "GetModifyableContentRequestFlags()",
    "kind": "Method",
    "detail": "Function (EInstallBundleRequestFlags)",
    "insertText": "GetModifyableContentRequestFlags()"
  },
  {
    "label": "UpdateContentRequestFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContentRequestFlags(FName BundleName, EInstallBundleRequestFlags AddFlags, EInstallBundleRequestFlags RemoveFlags)"
  },
  {
    "label": "UpdateContentRequestFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContentRequestFlags(TArrayView<const FName> BundleNames, EInstallBundleRequestFlags AddFlags, EInstallBundleRequestFlags RemoveFlags)"
  },
  {
    "label": "SetCellularPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCellularPreference(int32 Value)"
  },
  {
    "label": "SetCacheSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheSize(FName CacheName, uint64 CacheSize)"
  },
  {
    "label": "StartPatchCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPatchCheck()"
  },
  {
    "label": "AddEnvironmentWantsPatchCheckBackCompatDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvironmentWantsPatchCheckBackCompatDelegate(FName Tag, FInstallBundleManagerEnvironmentWantsPatchCheck Delegate)"
  },
  {
    "label": "RemoveEnvironmentWantsPatchCheckBackCompatDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEnvironmentWantsPatchCheckBackCompatDelegate(FName Tag)"
  },
  {
    "label": "SupportsEarlyStartupPatching()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsEarlyStartupPatching()"
  },
  {
    "label": "IsNullInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNullInterface()"
  },
  {
    "label": "SetErrorSimulationCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetErrorSimulationCommands(const FString& CommandLine)"
  },
  {
    "label": "GetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IAnalyticsProviderET>)",
    "insertText": "GetAnalyticsProvider()"
  },
  {
    "label": "StartSessionPersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartSessionPersistentStatTracking(const FString& SessionName, const TArray<FName>& RequiredBundles = TArray<FName>(), const FString& ExpectedAnalyticsID = FString(), bool bForceResetStatData = false, const FInstallBundleCombinedContentState* State = nullptr)"
  },
  {
    "label": "StopSessionPersistentStatTracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopSessionPersistentStatTracking(const FString& SessionName)"
  },
  {
    "label": "GetDebugText()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING void)",
    "insertText": "GetDebugText(TArray<FString>& Output)"
  }
]