[
  {
    "label": "ProcStatsFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcStatsFields"
  },
  {
    "label": "GetProcPidDir()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_INTERNAL_AIX_H_ # define BASE_PROCESS_INTERNAL_AIX_H_ # include<stddef . h> # include<stdint . h> # include<unistd . h> # include<string> # include<vector> # include \" base / files / file_path . h \" namespace base { namespace internalAIX { const char kProcDir [ ] ; const char kStatFile [ ] ; base::FilePath)",
    "insertText": "GetProcPidDir(pid_t pid)"
  },
  {
    "label": "ProcDirSlotToPid()",
    "kind": "Method",
    "detail": "Function (pid_t)",
    "insertText": "ProcDirSlotToPid(const char* d_name)"
  },
  {
    "label": "ReadProcStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadProcStats(pid_t pid, std::string* buffer)"
  },
  {
    "label": "ParseProcStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseProcStats(const std::string& stats_data, std::vector<std::string>* proc_stats)"
  },
  {
    "label": "GetProcStatsFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (enum ProcStatsFields { VM_COMM = 1,VM_PPID = 3,VM_PGRP = 4,} ; int64_t)",
    "insertText": "GetProcStatsFieldAsInt64(const std::vector<std::string>& proc_stats, ProcStatsFields field_num)"
  },
  {
    "label": "GetProcStatsFieldAsSizeT()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetProcStatsFieldAsSizeT(const std::vector<std::string>& proc_stats, ProcStatsFields field_num)"
  },
  {
    "label": "ReadProcStatsAndGetFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ReadProcStatsAndGetFieldAsInt64(pid_t pid, ProcStatsFields field_num)"
  },
  {
    "label": "ReadProcStatsAndGetFieldAsSizeT()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadProcStatsAndGetFieldAsSizeT(pid_t pid, ProcStatsFields field_num)"
  }
]