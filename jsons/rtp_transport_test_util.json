[
  {
    "label": "TransportObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportObserver"
  },
  {
    "label": "TransportObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_RTP_TRANSPORT_TEST_UTIL_H_ # define PC_TEST_RTP_TRANSPORT_TEST_UTIL_H_ # include \" call / rtp_packet_sink_interface . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" pc / rtp_transport_internal . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace webrtc { class TransportObserver : public RtpPacketSinkInterface,public sigslot::has_slots<> { public :)",
    "insertText": "TransportObserver()"
  },
  {
    "label": "TransportObserver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TransportObserver(RtpTransportInternal* rtp_transport)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (rtp_transport -> SignalRtcpPacketReceived .)",
    "insertText": "connect(this, &TransportObserver::OnRtcpPacketReceived)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (rtp_transport -> SignalReadyToSend .)",
    "insertText": "connect(this, &TransportObserver::OnReadyToSend)"
  },
  {
    "label": "OnRtpPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRtpPacket(const RtpPacketReceived& packet)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (rtp_count_ + + ; last_recv_rtp_packet_ = packet .)",
    "insertText": "Buffer()"
  },
  {
    "label": "OnRtcpPacketReceived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRtcpPacketReceived(rtc::CopyOnWriteBuffer* packet, int64_t packet_time_us)"
  },
  {
    "label": "rtp_count()",
    "kind": "Method",
    "detail": "Function (rtcp_count_ + + ; last_recv_rtcp_packet_ =* packet ; } int)",
    "insertText": "rtp_count()"
  },
  {
    "label": "ready_to_send()",
    "kind": "Method",
    "detail": "Function (ready_to_send_signal_count_ + + ; ready_to_send_ = ready ; } bool)",
    "insertText": "ready_to_send()"
  }
]