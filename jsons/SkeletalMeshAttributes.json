[
  {
    "label": "TArrayAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayAttribute"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FSkeletalMeshAttributesShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshAttributesShared"
  },
  {
    "label": "FSkeletalMeshAttributes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshAttributes"
  },
  {
    "label": "FSkeletalMeshConstAttributes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshConstAttributes"
  },
  {
    "label": "FSkeletalMeshAttributesShared()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SkeletalMeshElementTypes . h \" # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" MeshAttributeArray . h \" # include \" SkinWeightsAttributesRef . h \" # include \" StaticMeshAttributes . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" template<AttributeType> class TArrayAttribute ; struct FMeshDescription ; namespace MeshAttribute { namespace Vertex { const FName SkinWeights ; const FName ImportPointIndex ; } namespace Bone { const FName Name ; const FName ParentIndex ; const FName Pose ; const FName Color ; } namespace SourceGeometryPart { const FName Name ; const FName VertexOffsetAndCount ; } } class FSkeletalMeshAttributesShared { public : using FBoneArray = TMeshElementContainer<FBoneID> ; using FBoneNameAttributesRef = TMeshAttributesRef<FBoneID,FName> ; using FBoneNameAttributesConstRef = TMeshAttributesConstRef<FBoneID,FName> ; using FBoneParentIndexAttributesRef = TMeshAttributesRef<FBoneID,int32> ; using FBoneParentIndexAttributesConstRef = TMeshAttributesConstRef<FBoneID,int32> ; using FBonePoseAttributesRef = TMeshAttributesRef<FBoneID,FTransform> ; using FBonePoseAttributesConstRef = TMeshAttributesConstRef<FBoneID,FTransform> ; using FBoneColorAttributesRef = TMeshAttributesRef<FBoneID,FVector4f> ; using FBoneColorAttributesConstRef = TMeshAttributesConstRef<FBoneID,FVector4f> ; using FSourceGeometryPartArray = TMeshElementContainer<FSourceGeometryPartID> ; using FSourceGeometryPartNameRef = TMeshAttributesRef<FSourceGeometryPartID,FName> ; using FSourceGeometryPartNameConstRef = TMeshAttributesConstRef<FSourceGeometryPartID,FName> ; using FSourceGeometryPartVertexOffsetAndCountRef = TMeshAttributesRef<FSourceGeometryPartID,TArrayView<int32>> ; using FSourceGeometryPartVertexOffsetAndCountConstRef = TMeshAttributesConstRef<FSourceGeometryPartID,TArrayView<int32>> ; FName BonesElementName ; FName SourceGeometryPartElementName ; FName DefaultSkinWeightProfileName ;)",
    "insertText": "FSkeletalMeshAttributesShared(const FMeshDescription& InMeshDescription)"
  },
  {
    "label": "GetSkinWeightProfileNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetSkinWeightProfileNames(const bool bInUserDefinedOnly = false)"
  },
  {
    "label": "IsValidSkinWeightProfileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSkinWeightProfileName(const FName InProfileName)"
  },
  {
    "label": "IsSkinWeightAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkinWeightAttribute(const FName InAttributeName)"
  },
  {
    "label": "GetProfileNameFromAttribute()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetProfileNameFromAttribute(const FName InAttributeName)"
  },
  {
    "label": "GetVertexSkinWeights()",
    "kind": "Method",
    "detail": "Function (FSkinWeightsVertexAttributesConstRef)",
    "insertText": "GetVertexSkinWeights(const FName InProfileName = NAME_None)"
  },
  {
    "label": "GetVertexSkinWeightsFromAttributeName()",
    "kind": "Method",
    "detail": "Function (FSkinWeightsVertexAttributesConstRef)",
    "insertText": "GetVertexSkinWeightsFromAttributeName(const FName InAttributeName = NAME_None)"
  },
  {
    "label": "GetMorphTargetNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetMorphTargetNames()"
  },
  {
    "label": "IsMorphTargetAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMorphTargetAttribute(const FName InAttributeName)"
  },
  {
    "label": "GetMorphTargetNameFromAttribute()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMorphTargetNameFromAttribute(const FName InAttributeName)"
  },
  {
    "label": "GetVertexMorphPositionDelta()",
    "kind": "Method",
    "detail": "Function (TVertexAttributesConstRef<FVector3f>)",
    "insertText": "GetVertexMorphPositionDelta(const FName InMorphTargetName)"
  },
  {
    "label": "GetVertexInstanceMorphNormalDelta()",
    "kind": "Method",
    "detail": "Function (TVertexInstanceAttributesConstRef<FVector3f>)",
    "insertText": "GetVertexInstanceMorphNormalDelta(const FName InMorphTargetName)"
  },
  {
    "label": "HasMorphTargetPositionsAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMorphTargetPositionsAttribute(const FName InMorphTargetName)"
  },
  {
    "label": "HasMorphTargetNormalsAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMorphTargetNormalsAttribute(const FName InMorphTargetName)"
  },
  {
    "label": "HasBoneColorAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoneColorAttribute()"
  },
  {
    "label": "HasBoneNameAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoneNameAttribute()"
  },
  {
    "label": "HasBonePoseAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBonePoseAttribute()"
  },
  {
    "label": "HasBoneParentIndexAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoneParentIndexAttribute()"
  },
  {
    "label": "Bones()",
    "kind": "Method",
    "detail": "Function (const FBoneArray&)",
    "insertText": "Bones()"
  },
  {
    "label": "BoneAttributes()",
    "kind": "Method",
    "detail": "Function (const TAttributesSet<FBoneID>&)",
    "insertText": "BoneAttributes()"
  },
  {
    "label": "HasBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBones()"
  },
  {
    "label": "IsBoneValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneValid(const FBoneID BoneID)"
  },
  {
    "label": "GetBoneNames()",
    "kind": "Method",
    "detail": "Function (FBoneNameAttributesConstRef)",
    "insertText": "GetBoneNames()"
  },
  {
    "label": "GetBoneParentIndices()",
    "kind": "Method",
    "detail": "Function (FBoneParentIndexAttributesConstRef)",
    "insertText": "GetBoneParentIndices()"
  },
  {
    "label": "GetBonePoses()",
    "kind": "Method",
    "detail": "Function (FBonePoseAttributesConstRef)",
    "insertText": "GetBonePoses()"
  },
  {
    "label": "GetBoneColors()",
    "kind": "Method",
    "detail": "Function (FBoneColorAttributesConstRef)",
    "insertText": "GetBoneColors()"
  },
  {
    "label": "HasSourceGeometryParts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSourceGeometryParts()"
  },
  {
    "label": "SourceGeometryPartAttributes()",
    "kind": "Method",
    "detail": "Function (const TAttributesSet<FSourceGeometryPartID>&)",
    "insertText": "SourceGeometryPartAttributes()"
  },
  {
    "label": "GetNumSourceGeometryParts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSourceGeometryParts()"
  },
  {
    "label": "IsSourceGeometryPartValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceGeometryPartValid(const FSourceGeometryPartID InSourceGeometryPartID)"
  },
  {
    "label": "GetSourceGeometryPartNames()",
    "kind": "Method",
    "detail": "Function (FSourceGeometryPartNameConstRef)",
    "insertText": "GetSourceGeometryPartNames()"
  },
  {
    "label": "GetSourceGeometryPartVertexOffsetAndCounts()",
    "kind": "Method",
    "detail": "Function (FSourceGeometryPartVertexOffsetAndCountConstRef)",
    "insertText": "GetSourceGeometryPartVertexOffsetAndCounts()"
  },
  {
    "label": "CreateSkinWeightAttributeName()",
    "kind": "Method",
    "detail": "Function (protected : FName)",
    "insertText": "CreateSkinWeightAttributeName(const FName InProfileName)"
  },
  {
    "label": "CreateMorphTargetAttributeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "CreateMorphTargetAttributeName(const FName InMorphTargetName)"
  },
  {
    "label": "FSkeletalMeshAttributes()",
    "kind": "Method",
    "detail": "Function (const FMeshElementChannels* BoneElementsShared = nullptr ; const FMeshElementChannels* SourceGeometryPartElementsShared = nullptr ; private : const FMeshDescription& MeshDescriptionShared ; } ; class FSkeletalMeshAttributes : public FStaticMeshAttributes,public FSkeletalMeshAttributesShared { public :)",
    "insertText": "FSkeletalMeshAttributes(FMeshDescription& InMeshDescription)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(bool bKeepExistingAttribute = false)"
  },
  {
    "label": "IsReservedAttributeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReservedAttributeName(const FName InAttributeName)"
  },
  {
    "label": "RegisterImportPointIndexAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RegisterImportPointIndexAttribute()"
  },
  {
    "label": "UnregisterImportPointIndexAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterImportPointIndexAttribute()"
  },
  {
    "label": "RegisterSkinWeightAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSkinWeightAttribute(const FName InProfileName)"
  },
  {
    "label": "UnregisterSkinWeightAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterSkinWeightAttribute(const FName InProfileName)"
  },
  {
    "label": "RegisterMorphTargetAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterMorphTargetAttribute(const FName InMorphTargetName, const bool bIncludeNormals)"
  },
  {
    "label": "UnregisterMorphTargetAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterMorphTargetAttribute(const FName InMorphTargetName)"
  },
  {
    "label": "RegisterColorAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterColorAttribute()"
  },
  {
    "label": "ReserveNewBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNewBones(const int InNumBones)"
  },
  {
    "label": "CreateBone()",
    "kind": "Method",
    "detail": "Function (FBoneID)",
    "insertText": "CreateBone()"
  },
  {
    "label": "CreateBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBone(const FBoneID BoneID)"
  },
  {
    "label": "DeleteBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteBone(const FBoneID BoneID)"
  },
  {
    "label": "RegisterSourceGeometryPartsAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSourceGeometryPartsAttributes()"
  },
  {
    "label": "SourceGeometryParts()",
    "kind": "Method",
    "detail": "Function (FSourceGeometryPartArray&)",
    "insertText": "SourceGeometryParts()"
  },
  {
    "label": "CreateSourceGeometryPart()",
    "kind": "Method",
    "detail": "Function (FSourceGeometryPartID)",
    "insertText": "CreateSourceGeometryPart()"
  },
  {
    "label": "DeleteSourceGeometryPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSourceGeometryPart(FSourceGeometryPartID InSourceGeometryPartID)"
  },
  {
    "label": "FSkeletalMeshConstAttributes()",
    "kind": "Method",
    "detail": "Function (private : FMeshElementChannels* BoneElements = nullptr ; FMeshElementChannels* SourceGeometryPartElements = nullptr ; } ; class FSkeletalMeshConstAttributes : public FStaticMeshConstAttributes,public FSkeletalMeshAttributesShared { public :)",
    "insertText": "FSkeletalMeshConstAttributes(const FMeshDescription& InMeshDescription) : FStaticMeshConstAttributes(InMeshDescription), FSkeletalMeshAttributesShared(InMeshDescription)"
  }
]