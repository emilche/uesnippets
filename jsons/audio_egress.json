[
  {
    "label": "AudioEgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEgress"
  },
  {
    "label": "EncoderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EncoderContext"
  },
  {
    "label": "AudioEgress()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_VOIP_AUDIO_EGRESS_H_ # define AUDIO_VOIP_AUDIO_EGRESS_H_ # include<memory> # include<string> # include \" api / audio_codecs / audio_format . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" audio / audio_level . h \" # include \" audio / utility / audio_frame_operations . h \" # include \" call / audio_sender . h \" # include \" modules / audio_coding / include / audio_coding_module . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" modules / rtp_rtcp / source / rtp_sender_audio . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / time_utils . h \" namespace webrtc { class AudioEgress : public AudioSender,public AudioPacketizationCallback { public :)",
    "insertText": "AudioEgress(RtpRtcpInterface* rtp_rtcp, Clock* clock, TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "AudioEgress()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioEgress()"
  },
  {
    "label": "SetEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoder(int payload_type, const SdpAudioFormat& encoder_format, std::unique_ptr<AudioEncoder> encoder)"
  },
  {
    "label": "StartSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartSend()"
  },
  {
    "label": "StopSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSend()"
  },
  {
    "label": "IsSending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSending()"
  },
  {
    "label": "SetMute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMute(bool mute)"
  },
  {
    "label": "GetEncoderFormat()",
    "kind": "Method",
    "detail": "Function (absl::optional<SdpAudioFormat>)",
    "insertText": "GetEncoderFormat()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "SendTelephoneEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendTelephoneEvent(int dtmf_event, int duration_ms)"
  },
  {
    "label": "GetInputAudioLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInputAudioLevel()"
  },
  {
    "label": "GetInputTotalEnergy()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetInputTotalEnergy()"
  },
  {
    "label": "GetInputTotalDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetInputTotalDuration()"
  },
  {
    "label": "SendAudioData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendAudioData(std::unique_ptr<AudioFrame> audio_frame)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendData(AudioFrameType frame_type, uint8_t payload_type, uint32_t timestamp, const uint8_t* payload_data, size_t payload_size)"
  },
  {
    "label": "SetEncoderFormat()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetEncoderFormat(const SdpAudioFormat& encoder_format)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (encoder_format_ = encoder_format ; } Mutex lock_ ; absl::optional<SdpAudioFormat> encoder_format_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RtpRtcpInterface* const rtp_rtcp_ ; RTPSenderAudio rtp_sender_audio_ ; const std::unique_ptr<AudioCodingModule> audio_coding_ ; voe::AudioLevel input_audio_level_ ; struct EncoderContext { uint32_t frame_rtp_timestamp_ = 0 ; bool mute_ = false ; bool previously_muted_ = false ; } ; EncoderContext encoder_context_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  }
]