[
  {
    "label": "OpenSSLKeyPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLKeyPair"
  },
  {
    "label": "OpenSSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLCertificate"
  },
  {
    "label": "OpenSSLCertificate()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_OPENSSL_CERTIFICATE_H_ # define RTC_BASE_OPENSSL_CERTIFICATE_H_ # include<openssl / ossl_typ . h> # include<stddef . h> # include<stdint . h> # include<string> # include \" rtc_base / buffer . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" namespace rtc { class OpenSSLKeyPair ; class OpenSSLCertificate final : public SSLCertificate { public :)",
    "insertText": "OpenSSLCertificate(X509* x509)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<OpenSSLCertificate>)",
    "insertText": "Generate(OpenSSLKeyPair* key_pair, const SSLIdentityParams& params)"
  },
  {
    "label": "FromPEMString()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<OpenSSLCertificate>)",
    "insertText": "FromPEMString(absl::string_view pem_string)"
  },
  {
    "label": "OpenSSLCertificate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OpenSSLCertificate()"
  },
  {
    "label": "OpenSSLCertificate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSSLCertificate(const OpenSSLCertificate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OpenSSLCertificate&)",
    "insertText": "operator(const OpenSSLCertificate&)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertificate>)",
    "insertText": "Clone()"
  },
  {
    "label": "x509()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "x509()"
  },
  {
    "label": "ToDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDER(Buffer* der_buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const OpenSSLCertificate& other)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(const X509* x509, absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "GetSignatureDigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSignatureDigestAlgorithm(std::string* algorithm)"
  },
  {
    "label": "CertificateExpirationTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "CertificateExpirationTime()"
  }
]