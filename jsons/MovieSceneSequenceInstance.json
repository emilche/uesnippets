[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FMovieSceneTrackEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackEvaluator"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FCompiledDataVolatilityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompiledDataVolatilityManager"
  },
  {
    "label": "FPreAnimatedStateExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateExtension"
  },
  {
    "label": "FSequenceInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceInstance"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FSubSequencePath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubSequencePath"
  },
  {
    "label": "ISequenceUpdater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequenceUpdater"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedVolatilityManagerSuppression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedVolatilityManagerSuppression"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compilation / MovieSceneCompiledDataID . h \" # include \" Containers / Array . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / IDelegateInstance . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityLedger . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / UniquePtr . h \" class IMovieScenePlayer ; class UMovieSceneEntitySystemLinker ; class UObject ; struct FFrameTime ; struct FMovieSceneTrackEvaluator ; template<ElementType> class TRange ; namespace UE { namespace MovieScene { struct FCompiledDataVolatilityManager ; struct FPreAnimatedStateExtension ; struct FSequenceInstance ; struct FSharedPlaybackState ; struct FSubSequencePath ; struct ISequenceUpdater ; enum class ESequenceInstanceUpdateFlags : uint8 { None = 0,NeedsDissection = 1 u<<0,NeedsPreEvaluation = 1 u<<1,NeedsPostEvaluation = 1 u<<2,HasLegacyTemplates = 1 u<<3,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESequenceInstanceUpdateFlags)"
  },
  {
    "label": "ConditionalRecompile()",
    "kind": "Method",
    "detail": "Function (enum class ESequenceInstanceInvalidationType : uint8 { DataChanged,All } ; struct FSequenceInstance { FEntityLedger Ledger ; public : bool)",
    "insertText": "ConditionalRecompile()"
  },
  {
    "label": "DissectContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DissectContext(const FMovieSceneContext& Context, TArray<TRange<FFrameTime>>& OutDissections)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const FMovieSceneContext& InContext)"
  },
  {
    "label": "PreEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluation()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FMovieSceneContext& InContext)"
  },
  {
    "label": "CanFinishImmediately()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFinishImmediately()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  },
  {
    "label": "PostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluation()"
  },
  {
    "label": "RunLegacyTrackTemplates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunLegacyTrackTemplates()"
  },
  {
    "label": "GetSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<FSharedPlaybackState>)",
    "insertText": "GetSharedPlaybackState()"
  },
  {
    "label": "GetSequenceID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceID)",
    "insertText": "GetSequenceID()"
  },
  {
    "label": "FindEntity()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID)",
    "insertText": "FindEntity(UObject* Owner, uint32 EntityID)"
  },
  {
    "label": "FindEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindEntities(UObject* Owner, TArray<FMovieSceneEntityID>& OutEntityIDs)"
  },
  {
    "label": "GetLegacyEvaluator()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneTrackEvaluator*)",
    "insertText": "GetLegacyEvaluator()"
  },
  {
    "label": "GetSubSequencePath()",
    "kind": "Method",
    "detail": "Function (} FSubSequencePath)",
    "insertText": "GetSubSequencePath()"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetContext(const FMovieSceneContext& InContext)"
  },
  {
    "label": "SetFinished()",
    "kind": "Method",
    "detail": "Function (Context = InContext ; } void)",
    "insertText": "SetFinished(bool bInFinished)"
  },
  {
    "label": "InvalidateCachedData()",
    "kind": "Method",
    "detail": "Function (bFinished = bInFinished ; } void)",
    "insertText": "InvalidateCachedData(ESequenceInstanceInvalidationType InvalidationType = ESequenceInstanceInvalidationType::All)"
  },
  {
    "label": "DestroyImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyImmediately()"
  },
  {
    "label": "OverrideRootSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRootSequence(FMovieSceneSequenceID NewRootSequenceID)"
  },
  {
    "label": "EvaluateCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateCondition(const FGuid& BindingID, const FMovieSceneSequenceID& SequenceID, const UMovieSceneCondition* Condition, UObject* ConditionOwnerObject)"
  },
  {
    "label": "FSequenceInstance()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSequenceInstance(TSharedRef<FSharedPlaybackState> PlaybackState)"
  },
  {
    "label": "FSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequenceInstance(TSharedRef<FSharedPlaybackState> PlaybackState, FInstanceHandle ThisInstanceHandle, FInstanceHandle InParentInstanceHandle, FMovieSceneSequenceID InSequenceID)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "FSequenceInstance()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequenceInstance()"
  },
  {
    "label": "FSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequenceInstance(const FSequenceInstance&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSequenceInstance&)",
    "insertText": "operator(const FSequenceInstance&)"
  },
  {
    "label": "FSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequenceInstance(FSequenceInstance&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSequenceInstance&)",
    "insertText": "operator(FSequenceInstance&&)"
  },
  {
    "label": "InitializeLegacyEvaluator()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeLegacyEvaluator()"
  }
]