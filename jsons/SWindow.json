[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IWindowTitleBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWindowTitleBar"
  },
  {
    "label": "SPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPopupLayer"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindowTransparency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowTransparency"
  },
  {
    "label": "FOverlayPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverlayPopupLayer"
  },
  {
    "label": "FPopupLayerSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPopupLayerSlot"
  },
  {
    "label": "TPanelChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPanelChildren"
  },
  {
    "label": "FMorpher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMorpher"
  },
  {
    "label": "FScopedSwitchWorldHack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSwitchWorldHack"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CoreDelegates . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" Rendering / SlateLayoutTransform . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" GenericPlatform / GenericWindowDefinition . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" Input / Reply . h \" # include \" Rendering / RenderingCommon . h \" # include \" Types / SlateStructs . h \" # include \" Animation / CurveSequence . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SOverlay . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" FastUpdate / SlateInvalidationRoot . h \" class FActiveTimerHandle ; class FHittestGrid ; class FPaintArgs ; class FSlateWindowElementList ; class FWidgetPath ; class IWindowTitleBar ; class SPopupLayer ; class SWindow ; class SImage ; enum class EUpdateFastPathReason : uint8 ;)",
    "insertText": "DECLARE_DELEGATE(FOnWindowActivated)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnWindowActivatedEvent)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnWindowDeactivated)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnWindowDeactivatedEvent)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnWindowClosed, const TSharedRef<SWindow>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWindowClosedEvent, const TSharedRef<SWindow>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnWindowMoved, const TSharedRef<SWindow>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRequestDestroyWindowOverride, const TSharedRef<SWindow>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(int32, FOnSwitchWorldHack, int32)"
  },
  {
    "label": "FWindowTransparency()",
    "kind": "Method",
    "detail": "Function (enum class EAutoCenter : uint8 { None,PrimaryWorkArea,PreferredWorkArea,} ; enum class ESizingRule : uint8 { FixedSize,Autosized,UserSized,} ; namespace SWindowDefs { const float DefaultTitleBarSize = 3 4 . 0 f ; } struct FWindowTransparency {)",
    "insertText": "FWindowTransparency(EWindowTransparency In) : Value(In)"
  },
  {
    "label": "FOverlayPopupLayer()",
    "kind": "Method",
    "detail": "Function (} EWindowTransparency Value ; } ; class FOverlayPopupLayer : public FPopupLayer { public :)",
    "insertText": "FOverlayPopupLayer(const TSharedRef<SWindow>& InitHostWindow, const TSharedRef<SWidget>& InitPopupContent, TSharedPtr<SOverlay> InitOverlay)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove()"
  },
  {
    "label": "GetAbsoluteClientRect()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetAbsoluteClientRect()"
  },
  {
    "label": "FPopupLayerSlot()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SWindow> HostWindow ; TSharedPtr<SOverlay> Overlay ; } ; struct FPopupLayerSlot : public TSlotBase<FPopupLayerSlot> { public :)",
    "insertText": "FPopupLayerSlot() : TSlotBase<FPopupLayerSlot>() , DesktopPosition_Attribute(FVector2D::ZeroVector) , WidthOverride_Attribute() , HeightOverride_Attribute() , Scale_Attribute(1.0f) , Clamp_Attribute(false) , ClampBuffer_Attribute(FVector2D::ZeroVector)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FPopupLayerSlot, TSlotBase<FPopupLayerSlot>) SLATE_ATTRIBUTE(FVector2D, DesktopPosition) SLATE_ATTRIBUTE(float, WidthOverride) SLATE_ATTRIBUTE(float, HeightOverride) SLATE_ATTRIBUTE(float, Scale) SLATE_ATTRIBUTE(bool, ClampToWindow) SLATE_ATTRIBUTE(FVector2D, ClampBuffer) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "SetDesktopPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesktopPosition(MoveTemp(InArgs._DesktopPosition))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._WidthOverride.IsSet())"
  },
  {
    "label": "SetWidthOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidthOverride(MoveTemp(InArgs._WidthOverride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._HeightOverride.IsSet())"
  },
  {
    "label": "SetHeightOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeightOverride(MoveTemp(InArgs._HeightOverride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._Scale.IsSet())"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(MoveTemp(InArgs._Scale))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._ClampToWindow.IsSet())"
  },
  {
    "label": "SetClampToWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampToWindow(MoveTemp(InArgs._ClampToWindow))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._ClampBuffer.IsSet())"
  },
  {
    "label": "SetClampBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampBuffer(MoveTemp(InArgs._ClampBuffer))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} TSlotBase<FPopupLayerSlot)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "SetDesktopPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDesktopPosition(TAttribute<FVector2D> InDesktopPosition)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (DesktopPosition_Attribute =)",
    "insertText": "MoveTemp(InDesktopPosition)"
  },
  {
    "label": "SetWidthOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWidthOverride(TAttribute<float> InWidthOverride)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (WidthOverride_Attribute =)",
    "insertText": "MoveTemp(InWidthOverride)"
  },
  {
    "label": "SetHeightOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeightOverride(TAttribute<float> InHeightOverride)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (HeightOverride_Attribute =)",
    "insertText": "MoveTemp(InHeightOverride)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScale(TAttribute<float> InScale)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Scale_Attribute =)",
    "insertText": "MoveTemp(InScale)"
  },
  {
    "label": "SetClampToWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClampToWindow(TAttribute<bool> InClamp_Attribute)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Clamp_Attribute =)",
    "insertText": "MoveTemp(InClamp_Attribute)"
  },
  {
    "label": "SetClampBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClampBuffer(TAttribute<FVector2D> InClampBuffer_Attribute)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ClampBuffer_Attribute =)",
    "insertText": "MoveTemp(InClampBuffer_Attribute)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : class SPopupLayer ; class TPanelChildren<FPopupLayerSlot> ; TAttribute<FVector2D> DesktopPosition_Attribute ; TAttribute<float> WidthOverride_Attribute ; TAttribute<float> HeightOverride_Attribute ; TAttribute<float> Scale_Attribute ; TAttribute<bool> Clamp_Attribute ; TAttribute<FVector2D> ClampBuffer_Attribute ; } ; class SWindow : public SCompoundWidget,public FSlateInvalidationRoot { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SWindow ) : _Type( EWindowType::Normal ) , _Style( &FCoreStyle::Get().GetWidgetStyle<FWindowStyle>(\"Window\") ) , _Title() , _bDragAnywhere( false ) , _AutoCenter( EAutoCenter::PreferredWorkArea ) , _ScreenPosition( FVector2f::ZeroVector ) , _ClientSize( FVector2f::ZeroVector ) , _AdjustInitialSizeAndPositionForDPIScale(true) , _SupportsTransparency( EWindowTransparency::None ) , _InitialOpacity( 1.0f ) , _IsInitiallyMaximized( false ) , _IsInitiallyMinimized(false) , _SizingRule( ESizingRule::UserSized ) , _IsPopupWindow( false ) , _IsTopmostWindow( false ) , _FocusWhenFirstShown(true) , _ActivationPolicy( EWindowActivationPolicy::Always ) , _UseOSWindowBorder( false ) , _HasCloseButton( true ) , _SupportsMaximize( true ) , _SupportsMinimize( true ) , _ShouldPreserveAspectRatio( false ) , _CreateTitleBar( true ) , _SaneWindowPlacement( true ) , _LayoutBorder( _Style->BorderPadding ) , _UserResizeBorder(FMargin(5, 5, 5, 5)) , _bManualManageDPI( false ) , _CloseButtonToolTipText(NSLOCTEXT(\"SWindow\", \"Window_DefaultCloseButtonToolTip\", \"Close\"))"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EWindowType, Type ) SLATE_STYLE_ARGUMENT( FWindowStyle, Style ) SLATE_ATTRIBUTE( FText, Title ) SLATE_ARGUMENT( bool, bDragAnywhere ) SLATE_ARGUMENT( EAutoCenter, AutoCenter ) SLATE_ARGUMENT( UE::Slate::FDeprecateVector2DParameter, ScreenPosition ) SLATE_ARGUMENT( UE::Slate::FDeprecateVector2DParameter, ClientSize ) SLATE_ARGUMENT( bool, AdjustInitialSizeAndPositionForDPIScale ) SLATE_ARGUMENT( FWindowTransparency, SupportsTransparency ) SLATE_ARGUMENT( float, InitialOpacity ) SLATE_ARGUMENT( bool, IsInitiallyMaximized ) SLATE_ARGUMENT(bool, IsInitiallyMinimized) SLATE_ARGUMENT( ESizingRule, SizingRule ) SLATE_ARGUMENT( bool, IsPopupWindow ) SLATE_ARGUMENT(bool, IsTopmostWindow) SLATE_ARGUMENT( bool, FocusWhenFirstShown ) SLATE_ARGUMENT( EWindowActivationPolicy, ActivationPolicy ) SLATE_ARGUMENT( bool, UseOSWindowBorder ) SLATE_ARGUMENT( bool, HasCloseButton ) SLATE_ARGUMENT( bool, SupportsMaximize ) SLATE_ARGUMENT( bool, SupportsMinimize ) SLATE_ARGUMENT( bool, ShouldPreserveAspectRatio ) SLATE_ARGUMENT( TOptional<float>, MinWidth ) SLATE_ARGUMENT( TOptional<float>, MinHeight ) SLATE_ARGUMENT( TOptional<float>, MaxWidth ) SLATE_ARGUMENT( TOptional<float>, MaxHeight ) SLATE_ARGUMENT( bool, CreateTitleBar ) SLATE_ARGUMENT( bool, SaneWindowPlacement ) SLATE_ARGUMENT(FMargin, LayoutBorder) SLATE_ARGUMENT(FMargin, UserResizeBorder) SLATE_ARGUMENT(bool, bManualManageDPI) SLATE_DEFAULT_SLOT( FArguments, Content ) SLATE_ATTRIBUTE(FText, CloseButtonToolTipText) SLATE_END_ARGS() SLATECORE_API SWindow()"
  },
  {
    "label": "SWindow()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SWindow()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "MakeToolTipWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeToolTipWindow()"
  },
  {
    "label": "MakeCursorDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeCursorDecorator()"
  },
  {
    "label": "MakeStyledCursorDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeStyledCursorDecorator(const FWindowStyle& InStyle)"
  },
  {
    "label": "MakeNotificationWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeNotificationWindow()"
  },
  {
    "label": "ComputeWindowSizeForContent()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "ComputeWindowSizeForContent(UE::Slate::FDeprecateVector2DParameter ContentSize)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EWindowType)",
    "insertText": "GetType()"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTitle(const FText& InTitle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Title = InTitle ;)",
    "insertText": "if(NativeWindow.IsValid())"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (NativeWindow ->)",
    "insertText": "SetText(*InTitle.ToString())"
  },
  {
    "label": "PaintWindow()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "PaintWindow(double CurrentTime, float DeltaTime, FSlateWindowElementList& OutDrawElements, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetTitleBarSize()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetTitleBarSize()"
  },
  {
    "label": "GetDesiredSizeDesktopPixels()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetDesiredSizeDesktopPixels()"
  },
  {
    "label": "GetInitialDesiredSizeInScreen()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetInitialDesiredSizeInScreen()"
  },
  {
    "label": "GetInitialDesiredPositionInScreen()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetInitialDesiredPositionInScreen()"
  },
  {
    "label": "GetWindowGeometryInScreen()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetWindowGeometryInScreen()"
  },
  {
    "label": "GetWindowGeometryInWindow()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetWindowGeometryInWindow()"
  },
  {
    "label": "GetLocalToScreenTransform()",
    "kind": "Method",
    "detail": "Function (FSlateLayoutTransform)",
    "insertText": "GetLocalToScreenTransform()"
  },
  {
    "label": "GetLocalToWindowTransform()",
    "kind": "Method",
    "detail": "Function (FSlateLayoutTransform)",
    "insertText": "GetLocalToWindowTransform()"
  },
  {
    "label": "GetPositionInScreen()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetPositionInScreen()"
  },
  {
    "label": "GetSizeInScreen()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetSizeInScreen()"
  },
  {
    "label": "GetNonMaximizedRectInScreen()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetNonMaximizedRectInScreen()"
  },
  {
    "label": "GetRectInScreen()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetRectInScreen()"
  },
  {
    "label": "GetClientRectInScreen()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetClientRectInScreen()"
  },
  {
    "label": "GetClientSizeInScreen()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetClientSizeInScreen()"
  },
  {
    "label": "GetClippingRectangleInWindow()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetClippingRectangleInWindow()"
  },
  {
    "label": "GetWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetWindowBorderSize(bool bIncTitleBar = false)"
  },
  {
    "label": "GetNonMaximizedWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetNonMaximizedWindowBorderSize()"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(UE::Slate::FDeprecateVector2DParameter NewPosition)"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReshapeWindow(UE::Slate::FDeprecateVector2DParameter NewPosition, UE::Slate::FDeprecateVector2DParameter NewSize)"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReshapeWindow(const FSlateRect& InNewShape)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(UE::Slate::FDeprecateVector2DParameter NewClientSize)"
  },
  {
    "label": "GetFullScreenInfo()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetFullScreenInfo()"
  },
  {
    "label": "IsMorphing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMorphing()"
  },
  {
    "label": "IsMorphingSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMorphingSize()"
  },
  {
    "label": "MorphToPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MorphToPosition(const FCurveSequence& Sequence, const float TargetOpacity, const UE::Slate::FDeprecateVector2DParameter& TargetPosition)"
  },
  {
    "label": "MorphToShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MorphToShape(const FCurveSequence& Sequence, const float TargetOpacity, const FSlateRect& TargetShape)"
  },
  {
    "label": "UpdateMorphTargetShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphTargetShape(const FSlateRect& TargetShape)"
  },
  {
    "label": "UpdateMorphTargetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphTargetPosition(const UE::Slate::FDeprecateVector2DParameter& TargetPosition)"
  },
  {
    "label": "GetMorphTargetPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetMorphTargetPosition()"
  },
  {
    "label": "GetMorphTargetShape()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetMorphTargetShape()"
  },
  {
    "label": "FlashWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlashWindow()"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention(const FWindowDrawAttentionParameters& Parameters)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(bool bForce = false)"
  },
  {
    "label": "HACK_ForceToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HACK_ForceToFront()"
  },
  {
    "label": "SetCachedScreenPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedScreenPosition(UE::Slate::FDeprecateVector2DParameter NewPosition)"
  },
  {
    "label": "SetCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedSize(UE::Slate::FDeprecateVector2DParameter NewSize)"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetNativeWindow()"
  },
  {
    "label": "GetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactor()"
  },
  {
    "label": "SetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDPIScaleFactor(const float Factor)"
  },
  {
    "label": "SetManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManualManageDPIChanges(const bool bManualDPI)"
  },
  {
    "label": "IsManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsManualManageDPIChanges()"
  },
  {
    "label": "SetNativeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindow(TSharedRef<FGenericWindow> InNativeWindow)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "HasOverlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOverlay()"
  },
  {
    "label": "AddOverlaySlot()",
    "kind": "Method",
    "detail": "Function (SOverlay::FScopedWidgetSlotArguments)",
    "insertText": "AddOverlaySlot(const int32 ZOrder = INDEX_NONE)"
  },
  {
    "label": "RemoveOverlaySlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOverlaySlot(const TSharedRef<SWidget>& InContent)"
  },
  {
    "label": "OnVisualizePopup()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPopupLayer>)",
    "insertText": "OnVisualizePopup(const TSharedRef<SWidget>& PopupContent)"
  },
  {
    "label": "AddPopupLayerSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FPopupLayerSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddPopupLayerSlot()"
  },
  {
    "label": "RemovePopupLayerSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePopupLayerSlot(const TSharedRef<SWidget>& WidgetToRemove)"
  },
  {
    "label": "SetFullWindowOverlayContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFullWindowOverlayContent(TSharedPtr<SWidget> InContent)"
  },
  {
    "label": "BeginFullWindowOverlayTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFullWindowOverlayTransition()"
  },
  {
    "label": "EndFullWindowOverlayTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFullWindowOverlayTransition()"
  },
  {
    "label": "HasFullWindowOverlayContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFullWindowOverlayContent()"
  },
  {
    "label": "SetNativeWindowButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindowButtonsVisibility(bool bVisible)"
  },
  {
    "label": "AppearsInTaskbar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppearsInTaskbar()"
  },
  {
    "label": "GetOnWindowActivatedEvent()",
    "kind": "Method",
    "detail": "Function (FOnWindowActivatedEvent&)",
    "insertText": "GetOnWindowActivatedEvent()"
  },
  {
    "label": "GetOnWindowClosedEvent()",
    "kind": "Method",
    "detail": "Function (FOnWindowClosedEvent&)",
    "insertText": "GetOnWindowClosedEvent()"
  },
  {
    "label": "SetRequestDestroyWindowOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestDestroyWindowOverride(const FRequestDestroyWindowOverride& InDelegate)"
  },
  {
    "label": "RequestDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDestroyWindow()"
  },
  {
    "label": "DestroyWindowImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowImmediately()"
  },
  {
    "label": "NotifyWindowBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWindowBeingDestroyed()"
  },
  {
    "label": "ShowWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowWindow()"
  },
  {
    "label": "HideWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideWindow()"
  },
  {
    "label": "EnableWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWindow(bool bEnable)"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode(EWindowMode::Type WindowMode)"
  },
  {
    "label": "GetWindowMode()",
    "kind": "Method",
    "detail": "Function (EWindowMode::Type)",
    "insertText": "GetWindowMode()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsWindowMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowMaximized()"
  },
  {
    "label": "IsWindowMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowMinimized()"
  },
  {
    "label": "InitialMaximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialMaximize()"
  },
  {
    "label": "InitialMinimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialMinimize()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(const float InOpacity)"
  },
  {
    "label": "GetOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOpacity()"
  },
  {
    "label": "GetTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetTransparencySupport()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "SetWidgetToFocusOnActivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetToFocusOnActivate(TSharedPtr< SWidget > InWidget)"
  },
  {
    "label": "GetWidgetFocusedOnDeactivate()",
    "kind": "Method",
    "detail": "Function (WidgetToFocusOnActivate = InWidget ; } TWeakPtr<SWidget>)",
    "insertText": "GetWidgetFocusedOnDeactivate()"
  },
  {
    "label": "AcceptsInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptsInput()"
  },
  {
    "label": "IsUserSized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserSized()"
  },
  {
    "label": "IsAutosized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutosized()"
  },
  {
    "label": "SetSizingRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizingRule(ESizingRule InSizingRule)"
  },
  {
    "label": "IsRegularWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegularWindow()"
  },
  {
    "label": "IsTopmostWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopmostWindow()"
  },
  {
    "label": "SizeWillChangeOften()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SizeWillChangeOften()"
  },
  {
    "label": "HasSizingFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSizingFrame()"
  },
  {
    "label": "HasCloseBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCloseBox()"
  },
  {
    "label": "HasMaximizeBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMaximizeBox()"
  },
  {
    "label": "HasMinimizeBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMinimizeBox()"
  },
  {
    "label": "SetAsModalWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsModalWindow()"
  },
  {
    "label": "IsModalWindow()",
    "kind": "Method",
    "detail": "Function (bIsModalWindow = true ; bHasMaximizeButton = false ; bHasMinimizeButton = false ; } bool)",
    "insertText": "IsModalWindow()"
  },
  {
    "label": "SetIsHDR()",
    "kind": "Method",
    "detail": "Function (bIsMirrorWindow = bSetMirrorWindow ; } void)",
    "insertText": "SetIsHDR(bool bHDR)"
  },
  {
    "label": "GetIsHDR()",
    "kind": "Method",
    "detail": "Function (bIsHDR = bHDR ; } bool)",
    "insertText": "GetIsHDR()"
  },
  {
    "label": "ResetViewportScaleUIOverride()",
    "kind": "Method",
    "detail": "Function (ViewportScaleUIOverride = InViewportScaleUIOverride ; } void)",
    "insertText": "ResetViewportScaleUIOverride()"
  },
  {
    "label": "GetViewportScaleUIOverride()",
    "kind": "Method",
    "detail": "Function (ViewportScaleUIOverride = - 1 . 0 f ; } float)",
    "insertText": "GetViewportScaleUIOverride()"
  },
  {
    "label": "GetTitleBar()",
    "kind": "Method",
    "detail": "Function (TitleBar = InTitleBar ; } TSharedPtr<IWindowTitleBar>)",
    "insertText": "GetTitleBar()"
  },
  {
    "label": "OnIsActiveChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsActiveChanged(const FWindowActivateEvent& ActivateEvent)"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "GetCurrentWindowZone()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetCurrentWindowZone(UE::Slate::FDeprecateVector2DParameter LocalMousePosition)"
  },
  {
    "label": "GetCornerRadius()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type MoveResizeZone ; UE::Slate::FDeprecateVector2DResult MoveResizeStart ; FSlateRect MoveResizeRect ; int32)",
    "insertText": "GetCornerRadius()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "IsDrawingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawingEnabled()"
  },
  {
    "label": "Advanced_AsInvalidationRoot()",
    "kind": "Method",
    "detail": "Function (const FSlateInvalidationRoot*)",
    "insertText": "Advanced_AsInvalidationRoot()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (# endif private : FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "ResizeWindowSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeWindowSize(FVector2f NewWindowSize)"
  },
  {
    "label": "OnGlobalInvalidationToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalInvalidationToggled(bool bGlobalInvalidationEnabled)"
  },
  {
    "label": "GetWindowSizeFromClientSize()",
    "kind": "Method",
    "detail": "Function (public : UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetWindowSizeFromClientSize(UE::Slate::FDeprecateVector2DParameter InClientSize, TOptional<float> DPIScale = TOptional<float>())"
  },
  {
    "label": "IsFocusedInitially()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFocusedInitially()"
  },
  {
    "label": "GetChildWindows()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SWindow>>&)",
    "insertText": "GetChildWindows()"
  },
  {
    "label": "AddChildWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildWindow(const TSharedRef<SWindow>& ChildWindow)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "GetTopmostAncestor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetTopmostAncestor()"
  },
  {
    "label": "RemoveDescendantWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDescendantWindow(const TSharedRef<SWindow>& DescendantToRemove)"
  },
  {
    "label": "SetOnWorldSwitchHack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnWorldSwitchHack(FOnSwitchWorldHack& InOnWorldSwitchHack)"
  },
  {
    "label": "SwitchWorlds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SwitchWorlds(int32 WorldId)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "HasActiveChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveChildren()"
  },
  {
    "label": "HasActiveParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveParent()"
  },
  {
    "label": "SetViewportSizeDrivenByWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSizeDrivenByWindow(bool bDrivenByWindow)"
  },
  {
    "label": "IsViewportSizeDrivenByWindow()",
    "kind": "Method",
    "detail": "Function (ViewportSize = FVector2f::ZeroVector ; } else { ViewportSize = Size ; } } bool)",
    "insertText": "IsViewportSizeDrivenByWindow()"
  },
  {
    "label": "GetViewportSize()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetViewportSize()"
  },
  {
    "label": "SetIndependentViewportSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndependentViewportSize(const UE::Slate::FDeprecateVector2DParameter& VP)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (ViewportSize = VP ; } void)",
    "insertText": "SetViewport(TSharedRef<ISlateViewport> ViewportRef)"
  },
  {
    "label": "UnsetViewport()",
    "kind": "Method",
    "detail": "Function (Viewport = ViewportRef ; } void)",
    "insertText": "UnsetViewport(TSharedRef<ISlateViewport> ViewportRef)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Viewport .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<ISlateViewport>)",
    "insertText": "GetViewport()"
  },
  {
    "label": "GetHittestGrid()",
    "kind": "Method",
    "detail": "Function (} FHittestGrid&)",
    "insertText": "GetHittestGrid()"
  },
  {
    "label": "GetSizeLimits()",
    "kind": "Method",
    "detail": "Function (FWindowSizeLimits)",
    "insertText": "GetSizeLimits()"
  },
  {
    "label": "SetSizeLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeLimits(const FWindowSizeLimits& InSizeLimits)"
  },
  {
    "label": "SetAllowFastUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowFastUpdate(bool bInAllowFastUpdate)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetWindowVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetWindowVisibility()"
  },
  {
    "label": "GetWindowCloseButtonToolTipText()",
    "kind": "Method",
    "detail": "Function (TAttribute<FText>)",
    "insertText": "GetWindowCloseButtonToolTipText()"
  },
  {
    "label": "MakeWindowTitleBar()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "MakeWindowTitleBar(const TSharedRef<SWindow>& Window, const TSharedPtr<SWidget>& CenterContent, EHorizontalAlignment CenterContentAlignment)"
  },
  {
    "label": "GetTitleAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "GetTitleAlignment()"
  },
  {
    "label": "StartMorph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMorph()"
  },
  {
    "label": "CustomPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CustomPrepass(float LayoutScaleMultiplier)"
  },
  {
    "label": "FMorpher()",
    "kind": "Method",
    "detail": "Function (protected : EWindowType Type ; TAttribute<FText> Title ; TAttribute<FText> CloseButtonToolTipText ; bool bDragAnywhere ; float Opacity ; ESizingRule SizingRule ; EAutoCenter AutoCenterRule ; EWindowTransparency TransparencySupport ; bool bCreateTitleBar : 1 ; bool bIsPopupWindow : 1 ; bool bIsTopmostWindow : 1 ; bool bSizeWillChangeOften : 1 ; bool bInitiallyMaximized : 1 ; bool bInitiallyMinimized : 1 ; bool bHasEverBeenShown : 1 ; bool bFocusWhenFirstShown : 1 ; bool bHasOSWindowBorder : 1 ; bool bVirtualWindow : 1 ; bool bHasCloseButton : 1 ; bool bHasMinimizeButton : 1 ; bool bHasMaximizeButton : 1 ; bool bHasSizingFrame : 1 ; bool bIsModalWindow : 1 ; bool bIsMirrorWindow : 1 ; bool bShouldPreserveAspectRatio : 1 ; bool bIsHDR : 1 ; bool bManualManageDPI : 1 ; bool bAllowFastUpdate : 1 ; EWindowActivationPolicy WindowActivationPolicy ; UE::Slate::FDeprecateVector2DResult InitialDesiredScreenPosition ; UE::Slate::FDeprecateVector2DResult InitialDesiredSize ; UE::Slate::FDeprecateVector2DResult ScreenPosition ; UE::Slate::FDeprecateVector2DResult PreFullscreenPosition ; UE::Slate::FDeprecateVector2DResult Size ; UE::Slate::FDeprecateVector2DResult ViewportSize ; TWeakPtr<ISlateViewport> Viewport ; float ViewportScaleUIOverride ; float TitleBarSize ; struct FMorpher {)",
    "insertText": "FMorpher() : StartingMorphShape( FSlateRect(0,0,100,100) ) , TargetMorphShape( FSlateRect(0,0,100,100) ) , bIsActive(false) , bIsAnimatingWindowSize(false)"
  },
  {
    "label": "ConstructWindowInternals()",
    "kind": "Method",
    "detail": "Function (} float StartingOpacity ; float TargetOpacity ; FSlateRect StartingMorphShape ; FSlateRect TargetMorphShape ; FCurveSequence Sequence ; bool bIsActive : 1 ; bool bIsAnimatingWindowSize : 1 ; } Morpher ; EWindowZone::Type WindowZone ; TSharedPtr<SWidget> TitleArea ; SVerticalBox::FSlot* ContentSlot ; TWeakPtr<SWidget> WidgetToFocusOnActivate ; TWeakPtr<SWidget> WidgetFocusedOnDeactivate ; private : const FWindowStyle* Style ; const FSlateBrush* WindowBackground ; TSharedPtr<SImage> WindowBackgroundImage ; TSharedPtr<SImage> WindowBorder ; TSharedPtr<SImage> WindowOutline ; TSharedPtr<SWidget> ContentAreaVBox ; EVisibility WindowContentVisibility ; protected : FWindowSizeLimits SizeLimits ; TSharedPtr<FGenericWindow> NativeWindow ; TUniquePtr<FHittestGrid> HittestGrid ; FOnWindowActivated OnWindowActivated ; FOnWindowActivatedEvent WindowActivatedEvent ; FOnWindowDeactivated OnWindowDeactivated ; FOnWindowDeactivatedEvent WindowDeactivatedEvent ; FOnWindowClosed OnWindowClosed ; FOnWindowClosedEvent WindowClosedEvent ; FOnWindowMoved OnWindowMoved ; FRequestDestroyWindowOverride RequestDestroyWindowOverride ; TSharedPtr<SOverlay> WindowOverlay ; TSharedPtr<class SPopupLayer> PopupLayer ; TSharedPtr<SWidget> FullWindowOverlayWidget ; TWeakPtr<SWindow> ParentWindowPtr ; TArray<TSharedRef<SWindow>> ChildWindows ; FOnSwitchWorldHack OnWorldSwitchHack ; bool bShouldShowWindowContentDuringOverlay ; int32 ExpectedMaxWidth ; int32 ExpectedMaxHeight ; TSharedPtr<IWindowTitleBar> TitleBar ; FMargin LayoutBorder ; FMargin UserResizeBorder ; bool bIsDrawingEnabled ; protected : void)",
    "insertText": "ConstructWindowInternals()"
  },
  {
    "label": "TriggerPlayMorphSequence()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TriggerPlayMorphSequence(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "SetWindowBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowBackground(const FSlateBrush* InWindowBackground)"
  },
  {
    "label": "UpdateWindowContentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowContentVisibility()"
  },
  {
    "label": "GetRootWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetRootWidget()"
  },
  {
    "label": "PaintSlowPath()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintSlowPath(const FSlateInvalidationContext& InvalidationContext)"
  },
  {
    "label": "ProcessWindowInvalidation()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ProcessWindowInvalidation()"
  },
  {
    "label": "FScopedSwitchWorldHack()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FActiveTimerHandle> ActiveTimerHandle ; } ; # if WITH_EDITOR struct FScopedSwitchWorldHack {)",
    "insertText": "FScopedSwitchWorldHack(const FWidgetPath& WidgetPath)"
  },
  {
    "label": "FScopedSwitchWorldHack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedSwitchWorldHack(TSharedPtr<SWindow> InWindow ) : Window( InWindow ) , WorldId( -1)"
  },
  {
    "label": "SwitchWorlds()",
    "kind": "Method",
    "detail": "Function (WorldId = Window ->)",
    "insertText": "SwitchWorlds(WorldId)"
  },
  {
    "label": "FScopedSwitchWorldHack()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedSwitchWorldHack()"
  },
  {
    "label": "FScopedSwitchWorldHack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedSwitchWorldHack(TSharedPtr<SWindow> InWindow)"
  }
]