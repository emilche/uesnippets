[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "IWindowTitleBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWindowTitleBar"
  },
  {
    "label": "SPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPopupLayer"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindowTransparency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowTransparency"
  },
  {
    "label": "FOverlayPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverlayPopupLayer"
  },
  {
    "label": "FPopupLayerSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPopupLayerSlot"
  },
  {
    "label": "SPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPopupLayer"
  },
  {
    "label": "TPanelChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPanelChildren"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FMorpher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMorpher"
  },
  {
    "label": "SPopupLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPopupLayer"
  },
  {
    "label": "FScopedSwitchWorldHack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSwitchWorldHack"
  },
  {
    "label": "FScopedSwitchWorldHack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSwitchWorldHack"
  },
  {
    "label": "FOverlayPopupLayer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FOverlayPopupLayer(const TSharedRef<SWindow>& InitHostWindow, const TSharedRef<SWidget>& InitPopupContent, TSharedPtr<SOverlay> InitOverlay)"
  },
  {
    "label": "SWindow()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "SWindow()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "MakeToolTipWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeToolTipWindow()"
  },
  {
    "label": "MakeCursorDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeCursorDecorator()"
  },
  {
    "label": "MakeStyledCursorDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeStyledCursorDecorator(const FWindowStyle& InStyle)"
  },
  {
    "label": "MakeNotificationWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "MakeNotificationWindow()"
  },
  {
    "label": "ComputeWindowSizeForContent()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "ComputeWindowSizeForContent( UE::Slate::FDeprecateVector2DParameter ContentSize )"
  },
  {
    "label": "PaintWindow()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintWindow( double CurrentTime, float DeltaTime, FSlateWindowElementList& OutDrawElements, const FWidgetStyle& InWidgetStyle, bool bParentEnabled )"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo( UE::Slate::FDeprecateVector2DParameter NewPosition )"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReshapeWindow( UE::Slate::FDeprecateVector2DParameter NewPosition, UE::Slate::FDeprecateVector2DParameter NewSize )"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReshapeWindow( const FSlateRect& InNewShape )"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize( UE::Slate::FDeprecateVector2DParameter NewClientSize )"
  },
  {
    "label": "MorphToPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MorphToPosition( const FCurveSequence& Sequence, const float TargetOpacity, const UE::Slate::FDeprecateVector2DParameter& TargetPosition )"
  },
  {
    "label": "MorphToShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MorphToShape( const FCurveSequence& Sequence, const float TargetOpacity, const FSlateRect& TargetShape )"
  },
  {
    "label": "UpdateMorphTargetShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphTargetShape( const FSlateRect& TargetShape )"
  },
  {
    "label": "UpdateMorphTargetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphTargetPosition( const UE::Slate::FDeprecateVector2DParameter& TargetPosition )"
  },
  {
    "label": "FlashWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlashWindow()"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention(const FWindowDrawAttentionParameters& Parameters)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront( bool bForce = false )"
  },
  {
    "label": "HACK_ForceToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HACK_ForceToFront()"
  },
  {
    "label": "SetCachedScreenPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedScreenPosition(UE::Slate::FDeprecateVector2DParameter NewPosition)"
  },
  {
    "label": "SetCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedSize(UE::Slate::FDeprecateVector2DParameter NewSize)"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetNativeWindow()"
  },
  {
    "label": "SetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDPIScaleFactor(const float Factor)"
  },
  {
    "label": "SetManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManualManageDPIChanges(const bool bManualDPI)"
  },
  {
    "label": "SetNativeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindow( TSharedRef<FGenericWindow> InNativeWindow )"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent( TSharedRef<SWidget> InContent )"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "AddOverlaySlot()",
    "kind": "Method",
    "detail": "Function (SOverlay::FScopedWidgetSlotArguments)",
    "insertText": "AddOverlaySlot( const int32 ZOrder = INDEX_NONE )"
  },
  {
    "label": "RemoveOverlaySlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOverlaySlot(const TSharedRef<SWidget>& InContent)"
  },
  {
    "label": "AddPopupLayerSlot()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments)",
    "insertText": "AddPopupLayerSlot()"
  },
  {
    "label": "RemovePopupLayerSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePopupLayerSlot( const TSharedRef<SWidget>& WidgetToRemove )"
  },
  {
    "label": "SetFullWindowOverlayContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFullWindowOverlayContent( TSharedPtr<SWidget> InContent )"
  },
  {
    "label": "BeginFullWindowOverlayTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFullWindowOverlayTransition()"
  },
  {
    "label": "EndFullWindowOverlayTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFullWindowOverlayTransition()"
  },
  {
    "label": "SetNativeWindowButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindowButtonsVisibility(bool bVisible)"
  },
  {
    "label": "SetOnWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnWindowClosed( const FOnWindowClosed& InDelegate )"
  },
  {
    "label": "SetOnWindowMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnWindowMoved( const FOnWindowMoved& InDelegate)"
  },
  {
    "label": "SetRequestDestroyWindowOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestDestroyWindowOverride( const FRequestDestroyWindowOverride& InDelegate )"
  },
  {
    "label": "RequestDestroyWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDestroyWindow()"
  },
  {
    "label": "DestroyWindowImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWindowImmediately()"
  },
  {
    "label": "NotifyWindowBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWindowBeingDestroyed()"
  },
  {
    "label": "ShowWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowWindow()"
  },
  {
    "label": "HideWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideWindow()"
  },
  {
    "label": "EnableWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWindow( bool bEnable )"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode( EWindowMode::Type WindowMode )"
  },
  {
    "label": "InitialMaximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialMaximize()"
  },
  {
    "label": "InitialMinimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialMinimize()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity( const float InOpacity )"
  },
  {
    "label": "SetSizingRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizingRule( ESizingRule InSizingRule )"
  },
  {
    "label": "OnIsActiveChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsActiveChanged( const FWindowActivateEvent& ActivateEvent )"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "GetCurrentWindowZone()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetCurrentWindowZone(UE::Slate::FDeprecateVector2DParameter LocalMousePosition)"
  },
  {
    "label": "GetCornerRadius()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCornerRadius()"
  },
  {
    "label": "ResizeWindowSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeWindowSize( FVector2f NewWindowSize )"
  },
  {
    "label": "OnGlobalInvalidationToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalInvalidationToggled(bool bGlobalInvalidationEnabled)"
  },
  {
    "label": "AddChildWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildWindow( const TSharedRef<SWindow>& ChildWindow )"
  },
  {
    "label": "GetTopmostAncestor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetTopmostAncestor()"
  },
  {
    "label": "RemoveDescendantWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDescendantWindow( const TSharedRef<SWindow>& DescendantToRemove )"
  },
  {
    "label": "SetOnWorldSwitchHack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnWorldSwitchHack( FOnSwitchWorldHack& InOnWorldSwitchHack )"
  },
  {
    "label": "SetSizeLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeLimits(const FWindowSizeLimits& InSizeLimits)"
  },
  {
    "label": "SetAllowFastUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowFastUpdate(bool bInAllowFastUpdate)"
  },
  {
    "label": "MakeWindowTitleBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWindowTitleBar(const TSharedRef<SWindow>& Window, const TSharedPtr<SWidget>& CenterContent, EHorizontalAlignment CenterContentAlignment)"
  },
  {
    "label": "GetTitleAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "GetTitleAlignment()"
  },
  {
    "label": "StartMorph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMorph()"
  },
  {
    "label": "ConstructWindowInternals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWindowInternals()"
  },
  {
    "label": "TriggerPlayMorphSequence()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "TriggerPlayMorphSequence( double InCurrentTime, float InDeltaTime )"
  },
  {
    "label": "SetWindowBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowBackground(const FSlateBrush* InWindowBackground)"
  },
  {
    "label": "UpdateWindowContentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowContentVisibility()"
  },
  {
    "label": "ProcessWindowInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessWindowInvalidation()"
  },
  {
    "label": "FScopedSwitchWorldHack()",
    "kind": "Method",
    "detail": "Function (SLATECORE_API)",
    "insertText": "FScopedSwitchWorldHack( const FWidgetPath& WidgetPath )"
  }
]