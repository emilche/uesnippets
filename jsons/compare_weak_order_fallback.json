[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COMPARE_COMPARE_WEAK_ORDER_FALLBACK # define _LIBCPP___COMPARE_COMPARE_WEAK_ORDER_FALLBACK # include<__compare / ordering . h> # include<__compare / weak_order . h> # include<__config> # include<__utility / forward . h> # include<__utility / priority_tag . h> # include<type_traits> # ifndef _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER # pragma GCC system_header # endif _LIBCPP_BEGIN_NAMESPACE_STD # if _LIBCPP_STD_VER> 1 7 namespace __compare_weak_order_fallback { struct __fn { template<class _Tp,class _Up> requires is_same_v<decay_t<_Tp>,decay_t<_Up>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_Tp&& __t, _Up&& __u, __priority_tag<1>) noexcept(noexcept(_VSTD::weak_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u)))) -> decltype( _VSTD::weak_order(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u)))"
  },
  {
    "label": "__go()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> requires is_same_v<decay_t<_Tp>,decay_t<_Up>> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__go(_Tp&& __t, _Up&& __u, __priority_tag<0>) noexcept(noexcept(_VSTD::forward<_Tp>(__t) == _VSTD::forward<_Up>(__u) ? weak_ordering::equivalent : _VSTD::forward<_Tp>(__t) < _VSTD::forward<_Up>(__u) ? weak_ordering::less : weak_ordering::greater)) -> decltype( _VSTD::forward<_Tp>(__t) == _VSTD::forward<_Up>(__u) ? weak_ordering::equivalent : _VSTD::forward<_Tp>(__t) < _VSTD::forward<_Up>(__u) ? weak_ordering::less : weak_ordering::greater)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Tp&& __t, _Up&& __u) const noexcept(noexcept(__go(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u), __priority_tag<1>()))) -> decltype( __go(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u), __priority_tag<1>()))"
  }
]