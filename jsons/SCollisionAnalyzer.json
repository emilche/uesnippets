[
  {
    "label": "SCAQueryDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCAQueryDetails"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "FQueryTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueryTreeItem"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SCollisionAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCollisionAnalyzer"
  },
  {
    "label": "MakeGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" CollisionAnalyzer . h \" class SCAQueryDetails ; class SEditableTextBox ; class FQueryTreeItem { public : bool bIsGroup ; FName GroupName ; int32 FrameNum ; float TotalCPUTime ; TArray<TSharedPtr<FQueryTreeItem>> QueriesInGroup ; int32 QueryIndex ; TSharedRef<FQueryTreeItem>)",
    "insertText": "MakeGroup(FName InGroupName, int32 InFrameNum)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FQueryTreeItem> NewItem =)",
    "insertText": "MakeShareable(new FQueryTreeItem(true, InGroupName, InFrameNum, 0.f, INDEX_NONE))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FQueryTreeItem> NewItem =)",
    "insertText": "MakeShareable(new FQueryTreeItem(false, NAME_None, INDEX_NONE, 0.f, InQueryIndex))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TotalCPUTime = 0 . f ;)",
    "insertText": "for(int32 i=0; i<QueriesInGroup.Num(); i++)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FQueryTreeItem> ChildItem = QueriesInGroup [ i ] ;)",
    "insertText": "check(ChildItem.IsValid())"
  },
  {
    "label": "FQueryTreeItem()",
    "kind": "Method",
    "detail": "Function (const FCAQuery& Query = Analyzer -> Queries [ ChildItem -> QueryIndex ] ; TotalCPUTime + = Query . CPUTime ; } } } private :)",
    "insertText": "FQueryTreeItem(bool bInIsGroup, FName InGroupName, int32 InFrameNum, float InTotalCPUTime, int32 InQueryIndex) : bIsGroup(bInIsGroup) , GroupName(InGroupName) , FrameNum(InFrameNum) , TotalCPUTime(InTotalCPUTime) , QueryIndex(InQueryIndex)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; namespace EQueryGroupMode { enum Type { Ungrouped,ByFrameNum,ByTag,ByOwnerTag } ; } namespace EQuerySortMode { enum Type { ByID,ByTime } ; } class SCollisionAnalyzer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCollisionAnalyzer)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, FCollisionAnalyzer* InAnalyzer)"
  },
  {
    "label": "SCollisionAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SCollisionAnalyzer()"
  },
  {
    "label": "GetRecordButtonBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetRecordButtonBrush()"
  },
  {
    "label": "GetStatusText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStatusText()"
  },
  {
    "label": "GetDrawRecentState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetDrawRecentState()"
  },
  {
    "label": "GetGroupByFrameState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetGroupByFrameState()"
  },
  {
    "label": "GetGroupByTagState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetGroupByTagState()"
  },
  {
    "label": "GetGroupByOwnerState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetGroupByOwnerState()"
  },
  {
    "label": "GetIDSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetIDSortMode()"
  },
  {
    "label": "GetTimeSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetTimeSortMode()"
  },
  {
    "label": "OnRecordButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecordButtonClicked()"
  },
  {
    "label": "OnLoadButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLoadButtonClicked()"
  },
  {
    "label": "OnSaveButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSaveButtonClicked()"
  },
  {
    "label": "OnDrawRecentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawRecentChanged(ECheckBoxState NewState)"
  },
  {
    "label": "OnGroupByFrameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupByFrameChanged(ECheckBoxState NewState)"
  },
  {
    "label": "OnGroupByTagChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupByTagChanged(ECheckBoxState NewState)"
  },
  {
    "label": "OnGroupByOwnerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupByOwnerChanged(ECheckBoxState NewState)"
  },
  {
    "label": "FilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTextCommitted(const FText& CommentText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnSortByChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortByChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnName, const EColumnSortMode::Type NewSortMode)"
  },
  {
    "label": "QueryTreeGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "QueryTreeGenerateRow(TSharedPtr<FQueryTreeItem> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetChildrenForQueryGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenForQueryGroup(TSharedPtr<FQueryTreeItem> InItem, TArray<TSharedPtr<FQueryTreeItem> >& OutChildren)"
  },
  {
    "label": "QueryTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryTreeSelectionChanged(TSharedPtr<FQueryTreeItem> SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "QueryShapeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "QueryShapeToString(ECAQueryShape::Type QueryShape)"
  },
  {
    "label": "QueryTypeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "QueryTypeToString(ECAQueryType::Type QueryType)"
  },
  {
    "label": "QueryModeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "QueryModeToString(ECAQueryMode::Type QueryMode)"
  },
  {
    "label": "OnQueriesChanged()",
    "kind": "Method",
    "detail": "Function (FCollisionAnalyzer* Analyzer ; EQueryGroupMode::Type GroupBy ; EQuerySortMode::Type SortBy ; EColumnSortMode::Type SortDirection ; private : void)",
    "insertText": "OnQueriesChanged()"
  },
  {
    "label": "OnQueryAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueryAdded()"
  },
  {
    "label": "RebuildFilteredList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildFilteredList()"
  },
  {
    "label": "AddQueryToGroupedQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueryToGroupedQueries(int32 NewQueryIndex, bool bPerformSort)"
  },
  {
    "label": "FindQueryGroup()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FQueryTreeItem>)",
    "insertText": "FindQueryGroup(FName InGroupName, int32 InFrameNum)"
  },
  {
    "label": "UpdateDrawnQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDrawnQueries()"
  },
  {
    "label": "UpdateFilterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterInfo()"
  },
  {
    "label": "ShouldDisplayQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisplayQuery(const FCAQuery& Query)"
  }
]