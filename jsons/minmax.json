[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MINMAX_H # define _LIBCPP___ALGORITHM_MINMAX_H # include<__algorithm / comp . h> # include<__algorithm / minmax_element . h> # include<__config> # include<__functional / identity . h> # include<__type_traits / is_callable . h> # include<__utility / pair . h> # include<initializer_list> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template<class _Tp, class _Compare> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<const _Tp&, const _Tp&> minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)"
  },
  {
    "label": "minmax()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<const _Tp&,const _Tp&>)",
    "insertText": "minmax(const _Tp& __a, const _Tp& __b)"
  },
  {
    "label": "minmax()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class _Tp,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Tp,_Tp>)",
    "insertText": "minmax(initializer_list<_Tp> __t, _Compare __comp)"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (__identity __proj ; auto __ret =)",
    "insertText": "__minmax_element_impl(__t.begin(), __t.end(), __comp, __proj)"
  },
  {
    "label": "minmax()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Tp,_Tp>)",
    "insertText": "minmax(initializer_list<_Tp> __t)"
  }
]