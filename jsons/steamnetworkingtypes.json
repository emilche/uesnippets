[
  {
    "label": "SteamDatagramRelayAuthTicket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamDatagramRelayAuthTicket"
  },
  {
    "label": "SteamDatagramHostedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamDatagramHostedAddress"
  },
  {
    "label": "SteamDatagramGameCoordinatorServerLogin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamDatagramGameCoordinatorServerLogin"
  },
  {
    "label": "SteamNetConnectionStatusChangedCallback_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetConnectionStatusChangedCallback_t"
  },
  {
    "label": "SteamNetAuthenticationStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetAuthenticationStatus_t"
  },
  {
    "label": "SteamRelayNetworkStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamRelayNetworkStatus_t"
  },
  {
    "label": "SteamNetworkingMessagesSessionRequest_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingMessagesSessionRequest_t"
  },
  {
    "label": "SteamNetworkingMessagesSessionFailed_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingMessagesSessionFailed_t"
  },
  {
    "label": "SteamNetworkingFakeIPResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingFakeIPResult_t"
  },
  {
    "label": "ESteamNetworkingAvailability",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingAvailability"
  },
  {
    "label": "ESteamNetworkingIdentityType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingIdentityType"
  },
  {
    "label": "ESteamNetworkingFakeIPType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingFakeIPType"
  },
  {
    "label": "SteamNetworkingIPAddr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingIPAddr"
  },
  {
    "label": "IPv4MappedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPv4MappedAddress"
  },
  {
    "label": "SteamNetworkingIdentity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingIdentity"
  },
  {
    "label": "ESteamNetworkingConnectionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingConnectionState"
  },
  {
    "label": "ESteamNetConnectionEnd",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetConnectionEnd"
  },
  {
    "label": "SteamNetConnectionInfo_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetConnectionInfo_t"
  },
  {
    "label": "SteamNetConnectionRealTimeStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetConnectionRealTimeStatus_t"
  },
  {
    "label": "SteamNetConnectionRealTimeLaneStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetConnectionRealTimeLaneStatus_t"
  },
  {
    "label": "SteamNetworkingMessage_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingMessage_t"
  },
  {
    "label": "SteamNetworkPingLocation_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkPingLocation_t"
  },
  {
    "label": "ESteamNetworkingConfigScope",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingConfigScope"
  },
  {
    "label": "ESteamNetworkingConfigDataType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingConfigDataType"
  },
  {
    "label": "ESteamNetworkingConfigValue",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingConfigValue"
  },
  {
    "label": "SteamNetworkingConfigValue_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingConfigValue_t"
  },
  {
    "label": "ESteamNetworkingGetConfigValueResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingGetConfigValueResult"
  },
  {
    "label": "ESteamNetworkingSocketsDebugOutputType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamNetworkingSocketsDebugOutputType"
  },
  {
    "label": "SteamNetworkingPOPIDRender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingPOPIDRender"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAMNETWORKINGTYPES # define STEAMNETWORKINGTYPES # pragma once # include<string . h> # include<stdint . h> # include \" steamtypes . h \" # include \" steamclientpublic . h \" # if !)",
    "insertText": "defined(STEAMNETWORKINGSOCKETS_STANDALONELIB) && !defined(STEAMNETWORKINGSOCKETS_STEAMAPI) #define STEAMNETWORKINGSOCKETS_STEAMAPI #endif #ifdef NN_NINTENDO_SDK #define STEAMNETWORKINGSOCKETS_STATIC_LINK #endif #if defined( STEAMNETWORKINGSOCKETS_STATIC_LINK ) #define STEAMNETWORKINGSOCKETS_INTERFACE extern \"C\" #elif defined( STEAMNETWORKINGSOCKETS_FOREXPORT ) #ifdef _WIN32 #define STEAMNETWORKINGSOCKETS_INTERFACE extern \"C\" __declspec( dllexport ) #else #define STEAMNETWORKINGSOCKETS_INTERFACE extern \"C\" __attribute__((visibility(\"default\"))) #endif #else #ifdef _WIN32 #define STEAMNETWORKINGSOCKETS_INTERFACE extern \"C\" __declspec( dllimport ) #else #define STEAMNETWORKINGSOCKETS_INTERFACE extern \"C\" #endif #endif #if defined( VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct SteamDatagramHostedAddress ; struct SteamDatagramGameCoordinatorServerLogin ; struct SteamNetConnectionStatusChangedCallback_t ; struct SteamNetAuthenticationStatus_t ; struct SteamRelayNetworkStatus_t ; struct SteamNetworkingMessagesSessionRequest_t ; struct SteamNetworkingMessagesSessionFailed_t ; struct SteamNetworkingFakeIPResult_t ; typedef)",
    "insertText": "void(*FnSteamNetConnectionStatusChanged)( SteamNetConnectionStatusChangedCallback_t *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FnSteamNetAuthenticationStatusChanged)( SteamNetAuthenticationStatus_t *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FnSteamRelayNetworkStatusChanged)(SteamRelayNetworkStatus_t *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FnSteamNetworkingMessagesSessionRequest)(SteamNetworkingMessagesSessionRequest_t *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FnSteamNetworkingMessagesSessionFailed)(SteamNetworkingMessagesSessionFailed_t *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FnSteamNetworkingFakeIPResult)(SteamNetworkingFakeIPResult_t *)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (typedef uint32 HSteamNetConnection ; const HSteamNetConnection k_HSteamNetConnection_Invalid = 0 ; typedef uint32 HSteamListenSocket ; const HSteamListenSocket k_HSteamListenSocket_Invalid = 0 ; typedef uint32 HSteamNetPollGroup ; const HSteamNetPollGroup k_HSteamNetPollGroup_Invalid = 0 ; const int k_cchMaxSteamNetworkingErrMsg = 1 0 2 4 ; typedef char SteamNetworkingErrMsg [ k_cchMaxSteamNetworkingErrMsg ] ; typedef uint32 SteamNetworkingPOPID ; typedef int64 SteamNetworkingMicroseconds ; enum ESteamNetworkingAvailability { k_ESteamNetworkingAvailability_CannotTry = - 1 0 2,k_ESteamNetworkingAvailability_Failed = - 1 0 1,k_ESteamNetworkingAvailability_Previously = - 1 0 0,k_ESteamNetworkingAvailability_Retrying = - 1 0,k_ESteamNetworkingAvailability_NeverTried = 1,k_ESteamNetworkingAvailability_Waiting = 2,k_ESteamNetworkingAvailability_Attempting = 3,k_ESteamNetworkingAvailability_Current = 1 0 0,k_ESteamNetworkingAvailability_Unknown = 0,k_ESteamNetworkingAvailability__Force32bit = 0 x7fffffff,} ; enum ESteamNetworkingIdentityType { k_ESteamNetworkingIdentityType_Invalid = 0,k_ESteamNetworkingIdentityType_SteamID = 1 6,k_ESteamNetworkingIdentityType_XboxPairwiseID = 1 7,k_ESteamNetworkingIdentityType_SonyPSN = 1 8,k_ESteamNetworkingIdentityType_GoogleStadia = 1 9,k_ESteamNetworkingIdentityType_IPAddress = 1,k_ESteamNetworkingIdentityType_GenericString = 2,k_ESteamNetworkingIdentityType_GenericBytes = 3,k_ESteamNetworkingIdentityType_UnknownType = 4,k_ESteamNetworkingIdentityType__Force32bit = 0 x7fffffff,} ; enum ESteamNetworkingFakeIPType { k_ESteamNetworkingFakeIPType_Invalid,k_ESteamNetworkingFakeIPType_NotFake,k_ESteamNetworkingFakeIPType_GlobalIPv4,k_ESteamNetworkingFakeIPType_LocalIPv4,k_ESteamNetworkingFakeIPType__Force32Bit = 0 x7fffffff } ; # pragma)",
    "insertText": "pack(push,1)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsIPv6AllZeros()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIPv6AllZeros()"
  },
  {
    "label": "SetIPv6()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv6(const uint8 *ipv6, uint16 nPort)"
  },
  {
    "label": "SetIPv4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv4(uint32 nIP, uint16 nPort)"
  },
  {
    "label": "IsIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIPv4()"
  },
  {
    "label": "GetIPv4()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetIPv4()"
  },
  {
    "label": "SetIPv6LocalHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv6LocalHost(uint16 nPort = 0)"
  },
  {
    "label": "IsLocalHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalHost()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum { k_cchMaxString = 4 8 } ; void)",
    "insertText": "ToString(char *buf, size_t cbBuf, bool bWithPort)"
  },
  {
    "label": "ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseString(const char *pszStr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct IPv4MappedAddress { uint64 m_8zeros ; uint16 m_0000 ; uint16 m_ffff ; uint8 m_ip [ 4 ] ; } ; union { uint8 m_ipv6 [ 1 6 ] ; IPv4MappedAddress m_ipv4 ; } ; uint16 m_port ; bool)",
    "insertText": "operator(const SteamNetworkingIPAddr &x)"
  },
  {
    "label": "GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "GetFakeIPType()"
  },
  {
    "label": "IsFakeIP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFakeIP()"
  },
  {
    "label": "IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalid()"
  },
  {
    "label": "SetSteamID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSteamID(CSteamID steamID)"
  },
  {
    "label": "GetSteamID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetSteamID()"
  },
  {
    "label": "SetSteamID64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSteamID64(uint64 steamID)"
  },
  {
    "label": "GetSteamID64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetSteamID64()"
  },
  {
    "label": "SetXboxPairwiseID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetXboxPairwiseID(const char *pszString)"
  },
  {
    "label": "GetXboxPairwiseID()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetXboxPairwiseID()"
  },
  {
    "label": "SetPSNID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPSNID(uint64 id)"
  },
  {
    "label": "GetPSNID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPSNID()"
  },
  {
    "label": "SetStadiaID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStadiaID(uint64 id)"
  },
  {
    "label": "GetStadiaID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetStadiaID()"
  },
  {
    "label": "SetIPAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPAddr(const SteamNetworkingIPAddr &addr)"
  },
  {
    "label": "GetIPAddr()",
    "kind": "Method",
    "detail": "Function (const SteamNetworkingIPAddr*)",
    "insertText": "GetIPAddr()"
  },
  {
    "label": "SetIPv4Addr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIPv4Addr(uint32 nIPv4, uint16 nPort)"
  },
  {
    "label": "SetLocalHost()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalHost()"
  },
  {
    "label": "SetGenericString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGenericString(const char *pszString)"
  },
  {
    "label": "GetGenericString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetGenericString()"
  },
  {
    "label": "SetGenericBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGenericBytes(const void *data, size_t cbLen)"
  },
  {
    "label": "GetGenericBytes()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetGenericBytes(int &cbLen)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SteamNetworkingIdentity &x)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(char *buf, size_t cbBuf)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (enum { k_cchMaxString = 1 2 8,k_cchMaxGenericString = 3 2,k_cchMaxXboxPairwiseID = 3 3,k_cbMaxGenericBytes = 3 2,} ; int m_cbSize ; union { uint64 m_steamID64 ; uint64 m_PSNID ; uint64 m_stadiaID ; char m_szGenericString [ k_cchMaxGenericString ] ; char m_szXboxPairwiseID [ k_cchMaxXboxPairwiseID ] ; uint8 m_genericBytes [ k_cbMaxGenericBytes ] ; char m_szUnknownRawString [ k_cchMaxString ] ; SteamNetworkingIPAddr m_ip ; uint32 m_reserved [ 3 2 ] ; } ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct SteamNetworkingMessage_t { void* m_pData ; int m_cbSize ; HSteamNetConnection m_conn ; SteamNetworkingIdentity m_identityPeer ; int64 m_nConnUserData ; SteamNetworkingMicroseconds m_usecTimeReceived ; int64 m_nMessageNumber ;)",
    "insertText": "void(*m_pfnFreeData)( SteamNetworkingMessage_t *pMsg)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*m_pfnRelease)( SteamNetworkingMessage_t *pMsg)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int m_nChannel ; int m_nFlags ; int64 m_nUserData ; uint16 m_idxLane ; uint16 _pad1__ ; void)",
    "insertText": "Release()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (# ifndef API_GEN uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "SetInt32()",
    "kind": "Method",
    "detail": "Function (} } ; const int k_nSteamNetworkingSend_Unreliable = 0 ; const int k_nSteamNetworkingSend_NoNagle = 1 ; const int k_nSteamNetworkingSend_UnreliableNoNagle = k_nSteamNetworkingSend_Unreliable | k_nSteamNetworkingSend_NoNagle ; const int k_nSteamNetworkingSend_NoDelay = 4 ; const int k_nSteamNetworkingSend_UnreliableNoDelay = k_nSteamNetworkingSend_Unreliable | k_nSteamNetworkingSend_NoDelay | k_nSteamNetworkingSend_NoNagle ; const int k_nSteamNetworkingSend_Reliable = 8 ; const int k_nSteamNetworkingSend_ReliableNoNagle = k_nSteamNetworkingSend_Reliable | k_nSteamNetworkingSend_NoNagle ; const int k_nSteamNetworkingSend_UseCurrentThread = 1 6 ; const int k_nSteamNetworkingSend_AutoRestartBrokenSession = 3 2 ; struct SteamNetworkPingLocation_t { uint8 m_data [ 5 1 2 ] ; } ; const int k_cchMaxSteamNetworkingPingLocationString = 1 0 2 4 ; const int k_nSteamNetworkingPing_Failed = - 1 ; const int k_nSteamNetworkingPing_Unknown = - 2 ; enum ESteamNetworkingConfigScope { k_ESteamNetworkingConfig_Global = 1,k_ESteamNetworkingConfig_SocketsInterface = 2,k_ESteamNetworkingConfig_ListenSocket = 3,k_ESteamNetworkingConfig_Connection = 4,k_ESteamNetworkingConfigScope__Force32Bit = 0 x7fffffff } ; enum ESteamNetworkingConfigDataType { k_ESteamNetworkingConfig_Int32 = 1,k_ESteamNetworkingConfig_Int64 = 2,k_ESteamNetworkingConfig_Float = 3,k_ESteamNetworkingConfig_String = 4,k_ESteamNetworkingConfig_Ptr = 5,k_ESteamNetworkingConfigDataType__Force32Bit = 0 x7fffffff } ; enum ESteamNetworkingConfigValue { k_ESteamNetworkingConfig_Invalid = 0,k_ESteamNetworkingConfig_TimeoutInitial = 2 4,k_ESteamNetworkingConfig_TimeoutConnected = 2 5,k_ESteamNetworkingConfig_SendBufferSize = 9,k_ESteamNetworkingConfig_ConnectionUserData = 4 0,k_ESteamNetworkingConfig_SendRateMin = 1 0,k_ESteamNetworkingConfig_SendRateMax = 1 1,k_ESteamNetworkingConfig_NagleTime = 1 2,k_ESteamNetworkingConfig_IP_AllowWithoutAuth = 2 3,k_ESteamNetworkingConfig_MTU_PacketSize = 3 2,k_ESteamNetworkingConfig_MTU_DataSize = 3 3,k_ESteamNetworkingConfig_Unencrypted = 3 4,k_ESteamNetworkingConfig_SymmetricConnect = 3 7,k_ESteamNetworkingConfig_LocalVirtualPort = 3 8,k_ESteamNetworkingConfig_DualWifi_Enable = 3 9,k_ESteamNetworkingConfig_EnableDiagnosticsUI = 4 6,k_ESteamNetworkingConfig_FakePacketLoss_Send = 2,k_ESteamNetworkingConfig_FakePacketLoss_Recv = 3,k_ESteamNetworkingConfig_FakePacketLag_Send = 4,k_ESteamNetworkingConfig_FakePacketLag_Recv = 5,k_ESteamNetworkingConfig_FakePacketReorder_Send = 6,k_ESteamNetworkingConfig_FakePacketReorder_Recv = 7,k_ESteamNetworkingConfig_FakePacketReorder_Time = 8,k_ESteamNetworkingConfig_FakePacketDup_Send = 2 6,k_ESteamNetworkingConfig_FakePacketDup_Recv = 2 7,k_ESteamNetworkingConfig_FakePacketDup_TimeMax = 2 8,k_ESteamNetworkingConfig_PacketTraceMaxBytes = 4 1,k_ESteamNetworkingConfig_FakeRateLimit_Send_Rate = 4 2,k_ESteamNetworkingConfig_FakeRateLimit_Send_Burst = 4 3,k_ESteamNetworkingConfig_FakeRateLimit_Recv_Rate = 4 4,k_ESteamNetworkingConfig_FakeRateLimit_Recv_Burst = 4 5,k_ESteamNetworkingConfig_Callback_ConnectionStatusChanged = 2 0 1,k_ESteamNetworkingConfig_Callback_AuthStatusChanged = 2 0 2,k_ESteamNetworkingConfig_Callback_RelayNetworkStatusChanged = 2 0 3,k_ESteamNetworkingConfig_Callback_MessagesSessionRequest = 2 0 4,k_ESteamNetworkingConfig_Callback_MessagesSessionFailed = 2 0 5,k_ESteamNetworkingConfig_Callback_CreateConnectionSignaling = 2 0 6,k_ESteamNetworkingConfig_Callback_FakeIPResult = 2 0 7,k_ESteamNetworkingConfig_P2P_STUN_ServerList = 1 0 3,k_ESteamNetworkingConfig_P2P_Transport_ICE_Enable = 1 0 4,k_ESteamNetworkingConfig_P2P_Transport_ICE_Penalty = 1 0 5,k_ESteamNetworkingConfig_P2P_Transport_SDR_Penalty = 1 0 6,k_ESteamNetworkingConfig_P2P_TURN_ServerList = 1 0 7,k_ESteamNetworkingConfig_P2P_TURN_UserList = 1 0 8,k_ESteamNetworkingConfig_P2P_TURN_PassList = 1 0 9,k_ESteamNetworkingConfig_P2P_Transport_ICE_Implementation = 1 1 0,k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFailInitial = 1 9,k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFail = 2 0,k_ESteamNetworkingConfig_SDRClient_MinPingsBeforePingAccurate = 2 1,k_ESteamNetworkingConfig_SDRClient_SingleSocket = 2 2,k_ESteamNetworkingConfig_SDRClient_ForceRelayCluster = 2 9,k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress = 3 0,k_ESteamNetworkingConfig_SDRClient_ForceProxyAddr = 3 1,k_ESteamNetworkingConfig_SDRClient_FakeClusterPing = 3 6,k_ESteamNetworkingConfig_LogLevel_AckRTT = 1 3,k_ESteamNetworkingConfig_LogLevel_PacketDecode = 1 4,k_ESteamNetworkingConfig_LogLevel_Message = 1 5,k_ESteamNetworkingConfig_LogLevel_PacketGaps = 1 6,k_ESteamNetworkingConfig_LogLevel_P2PRendezvous = 1 7,k_ESteamNetworkingConfig_LogLevel_SDRRelayPings = 1 8,k_ESteamNetworkingConfig_DELETED_EnumerateDevVars = 3 5,k_ESteamNetworkingConfigValue__Force32Bit = 0 x7fffffff } ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Default = - 1 ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Disable = 0 ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Relay = 1 ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Private = 2 ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_Public = 4 ; const int k_nSteamNetworkingConfig_P2P_Transport_ICE_Enable_All = 0 x7fffffff ; struct SteamNetworkingConfigValue_t { ESteamNetworkingConfigValue m_eValue ; ESteamNetworkingConfigDataType m_eDataType ; union { int32_t m_int32 ; int64_t m_int64 ; float m_float ; const char* m_string ; void* m_ptr ; } m_val ; void)",
    "insertText": "SetInt32(ESteamNetworkingConfigValue eVal, int32_t data)"
  },
  {
    "label": "SetInt64()",
    "kind": "Method",
    "detail": "Function (m_eValue = eVal ; m_eDataType = k_ESteamNetworkingConfig_Int32 ; m_val . m_int32 = data ; } void)",
    "insertText": "SetInt64(ESteamNetworkingConfigValue eVal, int64_t data)"
  },
  {
    "label": "SetFloat()",
    "kind": "Method",
    "detail": "Function (m_eValue = eVal ; m_eDataType = k_ESteamNetworkingConfig_Int64 ; m_val . m_int64 = data ; } void)",
    "insertText": "SetFloat(ESteamNetworkingConfigValue eVal, float data)"
  },
  {
    "label": "SetPtr()",
    "kind": "Method",
    "detail": "Function (m_eValue = eVal ; m_eDataType = k_ESteamNetworkingConfig_Float ; m_val . m_float = data ; } void)",
    "insertText": "SetPtr(ESteamNetworkingConfigValue eVal, void *data)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (m_eValue = eVal ; m_eDataType = k_ESteamNetworkingConfig_Ptr ; m_val . m_ptr = data ; } void)",
    "insertText": "SetString(ESteamNetworkingConfigValue eVal, const char *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (m_eValue = eVal ; m_eDataType = k_ESteamNetworkingConfig_Ptr ; m_val . m_string = data ; } } ; enum ESteamNetworkingGetConfigValueResult { k_ESteamNetworkingGetConfigValue_BadValue = - 1,k_ESteamNetworkingGetConfigValue_BadScopeObj = - 2,k_ESteamNetworkingGetConfigValue_BufferTooSmall = - 3,k_ESteamNetworkingGetConfigValue_OK = 1,k_ESteamNetworkingGetConfigValue_OKInherited = 2,k_ESteamNetworkingGetConfigValueResult__Force32Bit = 0 x7fffffff } ; enum ESteamNetworkingSocketsDebugOutputType { k_ESteamNetworkingSocketsDebugOutputType_None = 0,k_ESteamNetworkingSocketsDebugOutputType_Bug = 1,k_ESteamNetworkingSocketsDebugOutputType_Error = 2,k_ESteamNetworkingSocketsDebugOutputType_Important = 3,k_ESteamNetworkingSocketsDebugOutputType_Warning = 4,k_ESteamNetworkingSocketsDebugOutputType_Msg = 5,k_ESteamNetworkingSocketsDebugOutputType_Verbose = 6,k_ESteamNetworkingSocketsDebugOutputType_Debug = 7,k_ESteamNetworkingSocketsDebugOutputType_Everything = 8,k_ESteamNetworkingSocketsDebugOutputType__Force32Bit = 0 x7fffffff } ; typedef)",
    "insertText": "void(*FSteamNetworkingSocketsDebugOutput)( ESteamNetworkingSocketsDebugOutputType nType, const char *pszMsg)"
  },
  {
    "label": "CalculateSteamNetworkingPOPIDFromString()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingPOPID)",
    "insertText": "CalculateSteamNetworkingPOPIDFromString(const char *pszCode)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingPOPID)",
    "insertText": "result(uint32)(uint8)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result((uint32)(uint8)pszCode[1] << 8U)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(uint32)(uint8)pszCode[2] | ( (uint32)(uint8)pszCode[3] << 24U)"
  },
  {
    "label": "GetSteamNetworkingLocationPOPStringFromID()",
    "kind": "Method",
    "detail": "Function (} } return result ; } template<int N> void)",
    "insertText": "GetSteamNetworkingLocationPOPStringFromID(SteamNetworkingPOPID id, char (&szCode)[N])"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (szCode [ 0 ] =)",
    "insertText": "char(id >> 16U)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (szCode [ 1 ] =)",
    "insertText": "char(id >> 8U)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (szCode [ 2 ] =)",
    "insertText": "char(id)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (szCode [ 3 ] =)",
    "insertText": "char(id >> 24U)"
  },
  {
    "label": "k_SteamDatagramPOPID_dev()",
    "kind": "Method",
    "detail": "Function (szCode [ 4 ] = 0 ; } const SteamNetworkingPOPID)",
    "insertText": "k_SteamDatagramPOPID_dev((uint32)'d' << 16U ) | ( (uint32)'e' << 8U ) | (uint32)"
  },
  {
    "label": "SteamNetworkingPOPIDRender()",
    "kind": "Method",
    "detail": "Function (# ifndef API_GEN struct SteamNetworkingPOPIDRender {)",
    "insertText": "SteamNetworkingPOPIDRender(SteamNetworkingPOPID x)"
  },
  {
    "label": "GetSteamNetworkingLocationPOPStringFromID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSteamNetworkingLocationPOPStringFromID(x, buf)"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "c_str()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(*this))"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (const uint64*)",
    "insertText": "q(const uint64 *)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_ipv6, ipv6, 16)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (m_ipv4 . m_8zeros = 0 ; m_ipv4 . m_0000 = 0 ; m_ipv4 . m_ffff = 0 xffff ; m_ipv4 . m_ip [ 0 ] =)",
    "insertText": "uint8(nIP>>24)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (m_ipv4 . m_ip [ 1 ] =)",
    "insertText": "uint8(nIP>>16)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (m_ipv4 . m_ip [ 2 ] =)",
    "insertText": "uint8(nIP>>8)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (m_ipv4 . m_ip [ 3 ] =)",
    "insertText": "uint8(nIP)"
  },
  {
    "label": "SetIPv6LocalHost()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIPv6LocalHost(uint16 nPort)"
  },
  {
    "label": "SetSteamID64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSteamID64(steamID.ConvertToUint64())"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_SteamID ; m_cbSize =)",
    "insertText": "sizeof(m_steamID64)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (size_t l =)",
    "insertText": "strlen(pszString)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_XboxPairwiseID ; m_cbSize =)",
    "insertText": "int(l+1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_szXboxPairwiseID, pszString, m_cbSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_SonyPSN ; m_cbSize =)",
    "insertText": "sizeof(m_PSNID)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_GoogleStadia ; m_cbSize =)",
    "insertText": "sizeof(m_stadiaID)"
  },
  {
    "label": "m_cbSize()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_IPAddress ;)",
    "insertText": "m_cbSize(int)sizeof(m_ip)"
  },
  {
    "label": "SetIPv4()",
    "kind": "Method",
    "detail": "Function (m_ip .)",
    "insertText": "SetIPv4(nIPv4, nPort)"
  },
  {
    "label": "SetIPv6LocalHost()",
    "kind": "Method",
    "detail": "Function (m_ip .)",
    "insertText": "SetIPv6LocalHost()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_szGenericString, pszString, m_cbSize)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (m_eType = k_ESteamNetworkingIdentityType_GenericBytes ; m_cbSize =)",
    "insertText": "int(cbLen)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_genericBytes, data, m_cbSize)"
  }
]