[
  {
    "label": "scalar_igamma_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_igamma_op"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "scalar_igamma_der_a_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_igamma_der_a_op"
  },
  {
    "label": "scalar_gamma_sample_der_alpha_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_gamma_sample_der_alpha_op"
  },
  {
    "label": "scalar_igammac_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_igammac_op"
  },
  {
    "label": "scalar_betainc_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_betainc_op"
  },
  {
    "label": "scalar_lgamma_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_lgamma_op"
  },
  {
    "label": "scalar_digamma_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_digamma_op"
  },
  {
    "label": "scalar_zeta_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_zeta_op"
  },
  {
    "label": "scalar_polygamma_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_polygamma_op"
  },
  {
    "label": "scalar_erf_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_erf_op"
  },
  {
    "label": "scalar_erfc_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_erfc_op"
  },
  {
    "label": "scalar_ndtri_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_ndtri_op"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPECIALFUNCTIONS_FUNCTORS_H # define EIGEN_SPECIALFUNCTIONS_FUNCTORS_H namespace Eigen { namespace internal { template<Scalar> struct scalar_igamma_op : binary_op_base<Scalar,Scalar> {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_igamma_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& x)"
  },
  {
    "label": "igamma()",
    "kind": "Method",
    "detail": "Function (using numext::igamma ; return)",
    "insertText": "igamma(a, x)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& a, const Packet& x)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_igamma_op<Scalar>> { enum { Cost = 2 0* NumTraits<Scalar>::MulCost + 1 0* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasIGamma } ; } ; template<Scalar> struct scalar_igamma_der_a_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_igamma_der_a_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator()(const Scalar& a, const Scalar& x)"
  },
  {
    "label": "igamma_der_a()",
    "kind": "Method",
    "detail": "Function (using numext::igamma_der_a ; return)",
    "insertText": "igamma_der_a(a, x)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_igamma_der_a_op<Scalar>> { enum { Cost = 4 0* NumTraits<Scalar>::MulCost + 2 0* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasIGammaDerA } ; } ; template<Scalar> struct scalar_gamma_sample_der_alpha_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_gamma_sample_der_alpha_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator()(const Scalar& alpha, const Scalar& sample)"
  },
  {
    "label": "gamma_sample_der_alpha()",
    "kind": "Method",
    "detail": "Function (using numext::gamma_sample_der_alpha ; return)",
    "insertText": "gamma_sample_der_alpha(alpha, sample)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& alpha, const Packet& sample)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_gamma_sample_der_alpha_op<Scalar>> { enum { Cost = 3 0* NumTraits<Scalar>::MulCost + 1 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasGammaSampleDerAlpha } ; } ; template<Scalar> struct scalar_igammac_op : binary_op_base<Scalar,Scalar> {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_igammac_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& x)"
  },
  {
    "label": "igammac()",
    "kind": "Method",
    "detail": "Function (using numext::igammac ; return)",
    "insertText": "igammac(a, x)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_igammac_op<Scalar>> { enum { Cost = 2 0* NumTraits<Scalar>::MulCost + 1 0* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasIGammac } ; } ; template<Scalar> struct scalar_betainc_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_betainc_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& x, const Scalar& a, const Scalar& b)"
  },
  {
    "label": "betainc()",
    "kind": "Method",
    "detail": "Function (using numext::betainc ; return)",
    "insertText": "betainc(x, a, b)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& x, const Packet& a, const Packet& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_betainc_op<Scalar>> { enum { Cost = 4 0 0* NumTraits<Scalar>::MulCost + 4 0 0* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasBetaInc } ; } ; template<Scalar> struct scalar_lgamma_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_lgamma_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a)"
  },
  {
    "label": "lgamma()",
    "kind": "Method",
    "detail": "Function (using numext::lgamma ; return)",
    "insertText": "lgamma(a)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} typedef packet_traits<Scalar>::type Packet ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "packetOp(const Packet& a)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_lgamma_op<Scalar>> { enum { Cost = 1 0* NumTraits<Scalar>::MulCost + 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasLGamma } ; } ; template<Scalar> struct scalar_digamma_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_digamma_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a)"
  },
  {
    "label": "digamma()",
    "kind": "Method",
    "detail": "Function (using numext::digamma ; return)",
    "insertText": "digamma(a)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_digamma_op<Scalar>> { enum { Cost = 1 0* NumTraits<Scalar>::MulCost + 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasDiGamma } ; } ; template<Scalar> struct scalar_zeta_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_zeta_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& x, const Scalar& q)"
  },
  {
    "label": "zeta()",
    "kind": "Method",
    "detail": "Function (using numext::zeta ; return)",
    "insertText": "zeta(x, q)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} typedef packet_traits<Scalar>::type Packet ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "packetOp(const Packet& x, const Packet& q)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_zeta_op<Scalar>> { enum { Cost = 1 0* NumTraits<Scalar>::MulCost + 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasZeta } ; } ; template<Scalar> struct scalar_polygamma_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_polygamma_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& n, const Scalar& x)"
  },
  {
    "label": "polygamma()",
    "kind": "Method",
    "detail": "Function (using numext::polygamma ; return)",
    "insertText": "polygamma(n, x)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} typedef packet_traits<Scalar>::type Packet ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "packetOp(const Packet& n, const Packet& x)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_polygamma_op<Scalar>> { enum { Cost = 1 0* NumTraits<Scalar>::MulCost + 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasPolygamma } ; } ; template<Scalar> struct scalar_erf_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_erf_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator()(const Scalar& a)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "packetOp(const Packet& x)"
  },
  {
    "label": "Cost()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_erf_op<Scalar>> { enum { PacketAccess = packet_traits<Scalar>::HasErf,)",
    "insertText": "Cost(PacketAccess #ifdef EIGEN_VECTORIZE_FMA ? (2 * NumTraits<Scalar>::AddCost + 7 * NumTraits<Scalar>::MulCost + scalar_div_cost<Scalar, packet_traits<Scalar>::HasDiv>::value) #else ? (12 * NumTraits<Scalar>::AddCost + 12 * NumTraits<Scalar>::MulCost + scalar_div_cost<Scalar, packet_traits<Scalar>::HasDiv>::value) #endif : (functor_traits<scalar_exp_op<Scalar> >::Cost))"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar> struct scalar_erfc_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_erfc_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a)"
  },
  {
    "label": "erfc()",
    "kind": "Method",
    "detail": "Function (using numext::erfc ; return)",
    "insertText": "erfc(a)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_erfc_op<Scalar>> { enum { Cost = 1 0* NumTraits<Scalar>::MulCost + 5* NumTraits<Scalar>::AddCost,PacketAccess = packet_traits<Scalar>::HasErfc } ; } ; template<Scalar> struct scalar_ndtri_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_ndtri_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a)"
  },
  {
    "label": "ndtri()",
    "kind": "Method",
    "detail": "Function (using numext::ndtri ; return)",
    "insertText": "ndtri(a)"
  }
]