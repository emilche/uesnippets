[
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCompositeSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositeSection"
  },
  {
    "label": "UAnimMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMetaData"
  },
  {
    "label": "FSlotAnimationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotAnimationTrack"
  },
  {
    "label": "FBranchingPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranchingPoint"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBranchingPointMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBranchingPointMarker"
  },
  {
    "label": "FMontageSubStepper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageSubStepper"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FMontageBlendSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageBlendSettings"
  },
  {
    "label": "FRootMotionMovementParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionMovementParams"
  },
  {
    "label": "UAnimMontageFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontageFactory"
  },
  {
    "label": "FMarkerSyncData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkerSyncData"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Animation / AnimLinkableElement . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" AlphaBlend . h \" # include \" Animation / AnimCompositeBase . h \" # include \" Animation / TimeStretchCurve . h \" # include \" AnimMontage . generated . h \" class UAnimInstance ; class UAnimMontage ; class UAnimSequence ; class UBlendProfile ; class USkeletalMeshComponent ; enum class EBlendProfileMode : uint8 ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=Section)"
  },
  {
    "label": "FCompositeSection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCompositeSection() : FAnimLinkableElement() , SectionName(NAME_None) #if WITH_EDITORONLY_DATA , StartTime_DEPRECATED(0.0f) #endif , NextSectionName(NAME_None)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (} const TArray<class UAnimMetaData*>&)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=Slot)"
  },
  {
    "label": "FSlotAnimationTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlotAnimationTrack()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=BranchingPoint)"
  },
  {
    "label": "GetTriggerTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTriggerTime()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FBranchingPointMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBranchingPointMarker() : NotifyIndex(INDEX_NONE) , TriggerTime(0.f) , NotifyEventType(EAnimNotifyEventType::Begin)"
  },
  {
    "label": "FBranchingPointMarker()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBranchingPointMarker(int32 InNotifyIndex, float InTriggerTime, EAnimNotifyEventType::Type InNotifyEventType) : NotifyIndex(InNotifyIndex) , TriggerTime(InTriggerTime) , NotifyEventType(InNotifyEventType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (Moved,NotMoved,InvalidSection,InvalidMontage,} ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnMontageEnded, class UAnimMontage*, bool ) DECLARE_DELEGATE_TwoParams( FOnMontageBlendingOutStarted, class UAnimMontage*, bool ) DECLARE_DELEGATE_OneParam(FOnMontageBlendedInEnded, class UAnimMontage*)"
  },
  {
    "label": "FMontageSubStepper()",
    "kind": "Method",
    "detail": "Function (private : const struct FAnimMontageInstance* MontageInstance ; const class UAnimMontage* Montage ; float TimeRemaining ; float Cached_CombinedPlayRate ; float PlayRate ; float DeltaMove ; bool bPlayingForward ; int32 CurrentSectionIndex ; float CurrentSectionStartTime ; float CurrentSectionLength ; bool bReachedEndOfSection ; bool bHasValidTimeStretchCurveData ; int32 TimeStretchMarkerIndex ; TArray<float> SectionStartPositions_Target ; TArray<float> SectionEndPositions_Target ; float Cached_P_Target ; float Cached_P_Original ; FTimeStretchCurveInstance TimeStretchCurveInstance ; public :)",
    "insertText": "FMontageSubStepper() : MontageInstance(nullptr) , Montage(nullptr) , TimeRemaining(0.f) , Cached_CombinedPlayRate(0.f) , PlayRate(0.f) , DeltaMove(0.f) , bPlayingForward(true) , CurrentSectionIndex(INDEX_NONE) , CurrentSectionStartTime(0.f) , CurrentSectionLength(0.f) , bReachedEndOfSection(false) , bHasValidTimeStretchCurveData(false) , TimeStretchMarkerIndex(INDEX_NONE) , Cached_P_Target(FLT_MAX) , Cached_P_Original(FLT_MAX)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const struct FAnimMontageInstance& InAnimInstance)"
  },
  {
    "label": "AddEvaluationTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvaluationTime(float InDeltaTime)"
  },
  {
    "label": "HasTimeRemaining()",
    "kind": "Method",
    "detail": "Function (TimeRemaining + = InDeltaTime ; } bool)",
    "insertText": "HasTimeRemaining()"
  },
  {
    "label": "GetRemainingTime()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRemainingTime()"
  },
  {
    "label": "HasReachedEndOfSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReachedEndOfSection()"
  },
  {
    "label": "GetbPlayingForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetbPlayingForward()"
  },
  {
    "label": "ConditionallyUpdateTimeStretchCurveCachedData()",
    "kind": "Method",
    "detail": "Function (Cached_CombinedPlayRate = FLT_MAX ; } private : void)",
    "insertText": "ConditionallyUpdateTimeStretchCurveCachedData()"
  },
  {
    "label": "FindMontagePosition_Target()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindMontagePosition_Target(float In_P_Original)"
  },
  {
    "label": "FindMontagePosition_Original()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindMontagePosition_Original(float In_P_Target)"
  },
  {
    "label": "GetCurrSectionEndPosition_Target()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrSectionEndPosition_Target()"
  },
  {
    "label": "GetCurrSectionStartPosition_Target()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrSectionStartPosition_Target()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API FMontageBlendSettings()"
  },
  {
    "label": "FMontageBlendSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMontageBlendSettings(float BlendTime)"
  },
  {
    "label": "FMontageBlendSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMontageBlendSettings(const FAlphaBlendArgs& BlendArgs)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "MontageSync_Follow()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "MontageSync_Follow(struct FAnimMontageInstance* NewLeaderMontageInstance)"
  },
  {
    "label": "MontageSync_StopLeading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_StopLeading()"
  },
  {
    "label": "MontageSync_StopFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_StopFollowing()"
  },
  {
    "label": "MontageSync_PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_PreUpdate()"
  },
  {
    "label": "MontageSync_PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_PostUpdate()"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWeight()"
  },
  {
    "label": "GetDesiredWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDesiredWeight()"
  },
  {
    "label": "GetBlendTime()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBlendTime()"
  },
  {
    "label": "SetAlpha()",
    "kind": "Method",
    "detail": "Function (Blend .)",
    "insertText": "SetAlpha(InValue)"
  },
  {
    "label": "SetDesiredWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDesiredWeight(float InValue)"
  },
  {
    "label": "SetDesiredValue()",
    "kind": "Method",
    "detail": "Function (Blend .)",
    "insertText": "SetDesiredValue(InValue)"
  },
  {
    "label": "GetBlend()",
    "kind": "Method",
    "detail": "Function (} const FAlphaBlend&)",
    "insertText": "GetBlend()"
  },
  {
    "label": "MontageSync_GetFrameCounter()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "MontageSync_GetFrameCounter()"
  },
  {
    "label": "MontageSync_PerformSyncToLeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_PerformSyncToLeader()"
  },
  {
    "label": "InitializeBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBlend(const FAlphaBlend& InAlphaBlend)"
  },
  {
    "label": "ValidateInstanceAfterNotifyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateInstanceAfterNotifyState(const TWeakObjectPtr<UAnimInstance>& InAnimInstance, const UAnimNotifyState* InNotifyStateClass)"
  },
  {
    "label": "FAnimMontageInstance()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimMontageInstance()"
  },
  {
    "label": "FAnimMontageInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimMontageInstance(UAnimInstance * InAnimInstance)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(float InPlayRate = 1.f)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(float InPlayRate, const FMontageBlendSettings& BlendInSettings)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(const FAlphaBlend& InBlendOut, bool bInterrupt=true)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(const FMontageBlendSettings& InBlendOutSettings, bool bInterrupt=true)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(class UAnimMontage * InMontage)"
  },
  {
    "label": "JumpToSectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JumpToSectionName(FName const & SectionName, bool bEndOfSection = false)"
  },
  {
    "label": "SetNextSectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNextSectionName(FName const & SectionName, FName const & NewNextSectionName)"
  },
  {
    "label": "SetNextSectionID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNextSectionID(int32 const & SectionID, int32 const & NewNextSectionID)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "SetPlaying()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlaying(bool bInPlaying)"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (bPlaying = bInPlaying ; } bool)",
    "insertText": "IsStopped()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Terminate()"
  },
  {
    "label": "CanUseMarkerSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseMarkerSync()"
  },
  {
    "label": "GetInstanceID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceID()"
  },
  {
    "label": "GetBlendStartAlpha()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetBlendStartAlpha()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ; MarkerTickRecord .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetPlayRate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlayRate(float const & InPlayRate)"
  },
  {
    "label": "PushDisableRootMotion()",
    "kind": "Method",
    "detail": "Function (PlayRate = InPlayRate ; } void)",
    "insertText": "PushDisableRootMotion()"
  },
  {
    "label": "PopDisableRootMotion()",
    "kind": "Method",
    "detail": "Function (DisableRootMotionCount + + ; } void)",
    "insertText": "PopDisableRootMotion()"
  },
  {
    "label": "IsRootMotionDisabled()",
    "kind": "Method",
    "detail": "Function (DisableRootMotionCount - - ; } bool)",
    "insertText": "IsRootMotionDisabled()"
  },
  {
    "label": "EditorOnly_PreAdvance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EditorOnly_PreAdvance()"
  },
  {
    "label": "SimulateAdvance()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "SimulateAdvance(float DeltaTime, float& InOutPosition, struct FRootMotionMovementParams & OutRootMotionParams)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(float DeltaTime, struct FRootMotionMovementParams * OutRootMotionParams, bool bBlendRootMotion)"
  },
  {
    "label": "GetCurrentSection()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCurrentSection()"
  },
  {
    "label": "GetNextSection()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNextSection()"
  },
  {
    "label": "GetNextSectionID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextSectionID(int32 const & CurrentSectionID)"
  },
  {
    "label": "GetSectionNameFromID()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSectionNameFromID(int32 const & SectionID)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "HandleEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEvents(float PreviousTrackPos, float CurrentTrackPos, const FBranchingPointMarker* BranchingPointMarker)"
  },
  {
    "label": "OnMontagePositionChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnMontagePositionChanged(FName const & ToSectionName)"
  },
  {
    "label": "UpdateActiveStateBranchingPoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateActiveStateBranchingPoints(float CurrentTrackPosition)"
  },
  {
    "label": "BranchingPointEventHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchingPointEventHandler(const FBranchingPointMarker* BranchingPointMarker)"
  },
  {
    "label": "RefreshNextPrevSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNextPrevSections()"
  },
  {
    "label": "GetRemainingPlayTimeToSectionEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRemainingPlayTimeToSectionEnd(const FMontageSubStepper& MontageSubStepper)"
  },
  {
    "label": "SetSequencerMontagePosition()",
    "kind": "Method",
    "detail": "Function (public : UAnimMontage*)",
    "insertText": "SetSequencerMontagePosition(FName SlotName, USkeletalMeshComponent* SkeletalMeshComponent, int32& InOutInstanceId, UAnimSequenceBase* InAnimSequence, float InFromPosition, float InToPosition, float Weight, bool bLooping, bool bPlaying)"
  },
  {
    "label": "PreviewSequencerMontagePosition()",
    "kind": "Method",
    "detail": "Function (UAnimMontage*)",
    "insertText": "PreviewSequencerMontagePosition(FName SlotName, USkeletalMeshComponent* SkeletalMeshComponent, int32& InOutInstanceId, UAnimSequenceBase* InAnimSequence, float InFromPosition, float InToPosition, float Weight, bool bLooping, bool bFireNotifies, bool bPlaying)"
  },
  {
    "label": "SetSequencerMontagePosition()",
    "kind": "Method",
    "detail": "Function (UAnimMontage*)",
    "insertText": "SetSequencerMontagePosition(FName SlotName, UAnimInstance* AnimInstance, int32& InOutInstanceId, UAnimSequenceBase* InAnimSequence, float InFromPosition, float InToPosition, float Weight, bool bLooping, bool bPlaying)"
  },
  {
    "label": "PreviewSequencerMontagePosition()",
    "kind": "Method",
    "detail": "Function (UAnimMontage*)",
    "insertText": "PreviewSequencerMontagePosition(FName SlotName, USkeletalMeshComponent* SkeletalMeshComponent, UAnimInstance* AnimInstance, int32& InOutInstanceId, UAnimSequenceBase* InAnimSequence, float InFromPosition, float InToPosition, float Weight, bool bLooping, bool bFireNotifies, bool bPlaying)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config=Engine, hidecategories=(UObject, Length), MinimalAPI, BlueprintType, meta= (LoadBehavior = \"LazyOnDemand\"))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (# endif FSlotAnimationTrack&)",
    "insertText": "AddSlot(FName SlotName)"
  },
  {
    "label": "IsValidSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSlot(FName InSlotName)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "GetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetSamplingFrameRate()"
  },
  {
    "label": "CalculateSequenceLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateSequenceLength()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "IsValidAdditive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAdditive()"
  },
  {
    "label": "CalculateOffsetForNotify()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EAnimEventTriggerOffsets::Type)",
    "insertText": "CalculateOffsetForNotify(float NotifyDisplayTime)"
  },
  {
    "label": "GetMarkerIndicesForTime()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetMarkerIndicesForTime(float CurrentTime, bool bLooping, const TArray<FName>& ValidMarkerNames, FMarkerPair& OutPrevMarker, FMarkerPair& OutNextMarker)"
  },
  {
    "label": "GetMarkerSyncPositionFromMarkerIndicies()",
    "kind": "Method",
    "detail": "Function (} FMarkerSyncAnimPosition)",
    "insertText": "GetMarkerSyncPositionFromMarkerIndicies(int32 PrevMarker, int32 NextMarker, float CurrentTime, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "TickAssetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetPlayer(FAnimTickRecord& Instance, struct FAnimNotifyQueue& NotifyQueue, FAnimAssetTickContext& Context)"
  },
  {
    "label": "GetUniqueMarkerNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>*)",
    "insertText": "GetUniqueMarkerNames()"
  },
  {
    "label": "CanBeUsedInComposition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedInComposition()"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive = true)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "UpdateLinkableElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinkableElements()"
  },
  {
    "label": "UpdateLinkableElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLinkableElements(int32 SlotIdx, int32 SegmentIdx)"
  },
  {
    "label": "GetAnimCompositeSection()",
    "kind": "Method",
    "detail": "Function (FCompositeSection&)",
    "insertText": "GetAnimCompositeSection(int32 SectionIndex)"
  },
  {
    "label": "GetSectionStartAndEndTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionStartAndEndTime(int32 SectionIndex, float& OutStartTime, float& OutEndTime)"
  },
  {
    "label": "GetSectionLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionLength(int32 SectionIndex)"
  },
  {
    "label": "IsValidSectionIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSectionIndex(int32 SectionIndex)"
  },
  {
    "label": "GetSectionIndexFromPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSectionIndexFromPosition(float Position)"
  },
  {
    "label": "GetSectionMetaData()",
    "kind": "Method",
    "detail": "Function (const TArray<class UAnimMetaData*>)",
    "insertText": "GetSectionMetaData(FName SectionName, bool bIncludeSequence=true, FName SlotName = NAME_None)"
  },
  {
    "label": "GetAnimCompositeSectionIndexFromPos()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAnimCompositeSectionIndexFromPos(float CurrentTime, float& PosWithinCompositeSection)"
  },
  {
    "label": "GetSectionTimeLeftFromPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionTimeLeftFromPos(float Position)"
  },
  {
    "label": "CalculatePos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculatePos(FCompositeSection &Section, float PosWithinCompositeSection)"
  },
  {
    "label": "GetAnimationData()",
    "kind": "Method",
    "detail": "Function (const FAnimTrack*)",
    "insertText": "GetAnimationData(FName SlotName)"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "ExtractRootMotionFromTrackRange()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotionFromTrackRange(float StartTrackPosition, float EndTrackPosition)"
  },
  {
    "label": "HasValidSlotSetup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidSlotSetup()"
  },
  {
    "label": "IsWithinPos()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsWithinPos(int32 FirstIndex, int32 SecondIndex, float CurrentTime)"
  },
  {
    "label": "CalculateOffsetFromSections()",
    "kind": "Method",
    "detail": "Function (EAnimEventTriggerOffsets::Type)",
    "insertText": "CalculateOffsetFromSections(float Time)"
  },
  {
    "label": "AddAnimCompositeSection()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR int32)",
    "insertText": "AddAnimCompositeSection(FName InSectionName, float StartPos)"
  },
  {
    "label": "DeleteAnimCompositeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteAnimCompositeSection(int32 SectionIndex)"
  },
  {
    "label": "SortAnimCompositeSectionByPos()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SortAnimCompositeSectionByPos()"
  },
  {
    "label": "RefreshParentAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshParentAssetData()"
  },
  {
    "label": "PropagateChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateChanges()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnMontageChangedMulticaster)"
  },
  {
    "label": "RegisterOnMontageChanged()",
    "kind": "Method",
    "detail": "Function (FOnMontageChangedMulticaster OnMontageChanged ; public : typedef FOnMontageChangedMulticaster::FDelegate FOnMontageChanged ; void)",
    "insertText": "RegisterOnMontageChanged(const FOnMontageChanged& Delegate)"
  },
  {
    "label": "UnregisterOnMontageChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnMontageChanged(void* Unregister)"
  },
  {
    "label": "ConvertBranchingPointsToAnimNotifies()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "ConvertBranchingPointsToAnimNotifies()"
  },
  {
    "label": "RefreshBranchingPointMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBranchingPointMarkers()"
  },
  {
    "label": "AddBranchingPointMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBranchingPointMarker(FBranchingPointMarker Marker, TMap<float, FAnimNotifyEvent*>& TriggerTimes)"
  },
  {
    "label": "FindFirstBranchingPointMarker()",
    "kind": "Method",
    "detail": "Function (const FBranchingPointMarker*)",
    "insertText": "FindFirstBranchingPointMarker(float StartTrackPos, float EndTrackPos)"
  },
  {
    "label": "FilterOutNotifyBranchingPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutNotifyBranchingPoints(TArray<FAnimNotifyEventReference>& InAnimNotifies)"
  },
  {
    "label": "CollectMarkers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CollectMarkers()"
  },
  {
    "label": "InvalidateRecursiveAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRecursiveAsset()"
  },
  {
    "label": "ContainRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainRecursive(TArray<UAnimCompositeBase*>& CurrentAccumulatedList)"
  },
  {
    "label": "SetCompositeLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositeLength(float InLength)"
  },
  {
    "label": "PopulateWithExistingModel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PopulateWithExistingModel(TScriptInterface<IAnimationDataModel> ExistingDataModel)"
  },
  {
    "label": "CreateSlotAnimationAsDynamicMontage()",
    "kind": "Method",
    "detail": "Function (# endif UAnimMontage*)",
    "insertText": "CreateSlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime = 0.25f, float BlendOutTime = 0.25f, float InPlayRate = 1.f, int32 LoopCount = 1, float BlendOutTriggerTime = -1.f, float InTimeToStartMontageAt = 0.f)"
  },
  {
    "label": "BakeTimeStretchCurve()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "BakeTimeStretchCurve()"
  },
  {
    "label": "UpdateCommonTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCommonTargetFrameRate()"
  }
]