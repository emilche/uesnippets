[
  {
    "label": "RadAContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RadAContainer"
  },
  {
    "label": "SeekTableEnumerationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SeekTableEnumerationState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RR_STRING_JOIN3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<stdint . h> # include<stddef . h> # include \" rada_file_header . h \" struct RadAContainer ; # define RADA_LIBRARY_VERSION 1 # ifndef RR_STRING_JOIN3 # define)",
    "insertText": "RR_STRING_JOIN3(arg1, arg2, arg3) RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) #define RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) #define RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) arg1 ## arg2 ## arg3 #endif #ifndef RR_STRING_JOIN #define RR_STRING_JOIN(arg1, arg2) RR_STRING_JOIN_DELAY(arg1, arg2) #define RR_STRING_JOIN_DELAY(arg1, arg2) RR_STRING_JOIN_IMMEDIATE(arg1, arg2) #define RR_STRING_JOIN_IMMEDIATE(arg1, arg2) arg1 ## arg2 #endif #ifdef RADA_WRAP #define RADA_NAME(name) RR_STRING_JOIN3(RADA_WRAP, name##_, RADA_LIBRARY_VERSION ) #else #error RADA_WRAP must be defined (MIRA or UERA) #endif #define RadAGetFileHeader RADA_NAME(RadAGetFileHeader) #define RadAGetSeekTableHeader RADA_NAME(RadAGetSeekTableHeader) #define RadAStripSeekTable RADA_NAME(RadAStripSeekTable) #define RadAGetMemoryNeededToOpen RADA_NAME(RadAGetMemoryNeededToOpen) #define RadAOpenDecoder RADA_NAME(RadAOpenDecoder) #define RadADecodeSeekTable RADA_NAME(RadADecodeSeekTable) #define RadADirectSeekTableLookup RADA_NAME(RadADirectSeekTableLookup) #define RadASeekTableLookup RADA_NAME(RadASeekTableLookup) #define RadAExamineBlock RADA_NAME(RadAExamineBlock) #define RadANotifySeek RADA_NAME(RadANotifySeek) #define RadADecodeBlock RADA_NAME(RadADecodeBlock) static uint32_t RadAGetSeekTableSizeOnDisk(const RadAFileHeader* FileHeader)"
  },
  {
    "label": "seek_table_bytes()",
    "kind": "Method",
    "detail": "Function (uint32_t seek_table_bits = FileHeader -> bits_for_seek_table_samples + FileHeader -> bits_for_seek_table_bytes ; uint32_t)",
    "insertText": "seek_table_bytes((seek_table_bits * FileHeader->seek_table_entry_count + 63) / 64)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (rada_header_bytes)",
    "insertText": "sizeof(RadAFileHeader)"
  },
  {
    "label": "RadAGetOffsetToSeekTable()",
    "kind": "Method",
    "detail": "Function (} return SizeWithoutSeekTable ; } uint32_t)",
    "insertText": "RadAGetOffsetToSeekTable(const RadAFileHeader* FileHeader)"
  },
  {
    "label": "RadAGetFileHeader()",
    "kind": "Method",
    "detail": "Function (} const RadAFileHeader*)",
    "insertText": "RadAGetFileHeader(const uint8_t* InFileData, size_t InFileDataLenBytes)"
  },
  {
    "label": "RadAGetSeekTableHeader()",
    "kind": "Method",
    "detail": "Function (const RadASeekTableHeader*)",
    "insertText": "RadAGetSeekTableHeader(const uint8_t* InFileData, size_t InFileDataLenBytes)"
  },
  {
    "label": "RadAGetFileHeaderFromContainer()",
    "kind": "Method",
    "detail": "Function (const RadAFileHeader*)",
    "insertText": "RadAGetFileHeaderFromContainer(const RadAContainer* InContainer)"
  },
  {
    "label": "RadAStripSeekTable()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "RadAStripSeekTable(uint8_t* InFileData, size_t InFileDataLenBytes)"
  },
  {
    "label": "RadAGetMemoryNeededToOpen()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RadAGetMemoryNeededToOpen(const uint8_t* InFileData, size_t InFileDataLenBytes, uint32_t* OutMemoryRequired)"
  },
  {
    "label": "RadAOpenDecoder()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RadAOpenDecoder(const uint8_t* InFileData, size_t InFileDataLenBytes, RadAContainer* InContainer, size_t InContainerBytes)"
  },
  {
    "label": "SeekTableEnumerationState()",
    "kind": "Method",
    "detail": "Function (struct SeekTableEnumerationState { uint64_t state [ 2 ] ;)",
    "insertText": "SeekTableEnumerationState()"
  },
  {
    "label": "RadADecodeSeekTable()",
    "kind": "Method",
    "detail": "Function (state [ 0 ] = state [ 1 ] = 0 ; } } ; enum class RadASeekTableReturn { Done,InvalidParam,InvalidData,NeedsMoreData,Needs64Bits } ; RadASeekTableReturn)",
    "insertText": "RadADecodeSeekTable(const RadAFileHeader* InFileHeader, const RadASeekTableHeader* InSeekHeader, uint8_t* InSeekTableData, size_t InSeekTableDataLenBytes, bool InSeekTableIs64Bits, SeekTableEnumerationState* InOutEnumerationState, uint8_t* OutSeekTableSamples, uint8_t* OutSeekTableBytes, size_t* OutConsumed)"
  },
  {
    "label": "RadADirectSeekTableLookup()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RadADirectSeekTableLookup(const uint8_t* InFileData, size_t InFileDataLenBytes, uint64_t InTargetFrame, size_t* OutFrameAtLocation, size_t* OutFrameBlockSize)"
  },
  {
    "label": "RadASeekTableLookup()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RadASeekTableLookup(const RadAContainer* InContainer, uint64_t InTargetFrame, size_t* OutFrameAtLocation, size_t* OutFrameBlockSize)"
  },
  {
    "label": "RadAExamineBlock()",
    "kind": "Method",
    "detail": "Function (enum class RadAExamineBlockResult : uint8_t { Valid,Incomplete,Invalid,} ; RadAExamineBlockResult)",
    "insertText": "RadAExamineBlock(const RadAContainer* InContainer, const uint8_t* InBuffer, size_t InBufferLenBytes, uint32_t* OutBufferLenBytesNeeded)"
  },
  {
    "label": "RadANotifySeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RadANotifySeek(RadAContainer* InContainer)"
  },
  {
    "label": "RadADecodeBlock()",
    "kind": "Method",
    "detail": "Function (uint32_t RadADecodeBlock_MaxOutputFrames = 1 0 2 4 ; # define RadADecodeBlock_Error - 2 # define RadADecodeBlock_Done - 1 int16_t)",
    "insertText": "RadADecodeBlock(RadAContainer* InContainer, const uint8_t* InBuffer, size_t InBufferLenBytes, float* InOutputBuffer, size_t InOutBufferStrideInFloats, size_t* OutConsumedBytes)"
  }
]