[
  {
    "label": "FMeshMergeDataTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMergeDataTracker"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "FMeshLODKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshLODKey"
  },
  {
    "label": "FMeshMergeUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMergeUtilities"
  },
  {
    "label": "FProxyGenerationProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProxyGenerationProcessor"
  },
  {
    "label": "FMeshProxySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshProxySettings"
  },
  {
    "label": "FFlattenMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlattenMaterial"
  },
  {
    "label": "FPropertyEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyEntry"
  },
  {
    "label": "FMeshMergeUtilities()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IMeshMergeUtilities . h \" # include \" SceneTypes . h \" # include \" StaticMeshComponentAdapter . h \" # include \" MaterialShared . h \" class FMeshMergeDataTracker ; class FMaterialUpdateContext ; struct FMeshLODKey ; typedef TPair<uint32,uint32> MaterialRemapPair ; class FMeshMergeUtilities : public IMeshMergeUtilities { public : class FProxyGenerationProcessor ;)",
    "insertText": "FMeshMergeUtilities()"
  },
  {
    "label": "BakeMaterialsForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterialsForComponent(TArray<TWeakObjectPtr<UObject>>& OptionObjects, IMaterialBakingAdapter* Adapter)"
  },
  {
    "label": "BakeMaterialsForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterialsForComponent(UStaticMeshComponent* StaticMeshComponent)"
  },
  {
    "label": "BakeMaterialsForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterialsForComponent(USkeletalMeshComponent* SkeletalMeshComponent)"
  },
  {
    "label": "BakeMaterialsForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterialsForMesh(UStaticMesh* Mesh)"
  },
  {
    "label": "MergeComponentsToStaticMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeComponentsToStaticMesh(const TArray<UPrimitiveComponent*>& ComponentsToMerge, UWorld* World, const FMeshMergingSettings& InSettings, UMaterialInterface* InBaseMaterial, UPackage* InOuter, const FString& InBasePackageName, TArray<UObject*>& OutAssetsToSync, FVector& OutMergedActorLocation, const float ScreenSize, bool bSilent)"
  },
  {
    "label": "MergeComponentsToInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeComponentsToInstances(const TArray<UPrimitiveComponent*>& ComponentsToMerge, UWorld* World, ULevel* Level, const FMeshInstancingSettings& InSettings, bool bActuallyMerge = true, bool bReplaceSourceActors = false, FText* OutResultsText = nullptr)"
  },
  {
    "label": "CreateProxyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProxyMesh(const TArray<AActor*>& InActors, const struct FMeshProxySettings& InMeshProxySettings, UMaterialInterface* InBaseMaterial, UPackage* InOuter, const FString& InProxyBasePackageName, const FGuid InGuid, const FCreateProxyDelegate& InProxyCreatedDelegate, const bool bAllowAsync = false, const float ScreenSize = 1.0f)"
  },
  {
    "label": "CreateProxyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProxyMesh(const TArray<UStaticMeshComponent*>& InStaticMeshComps, const struct FMeshProxySettings& InMeshProxySettings, UMaterialInterface* InBaseMaterial, UPackage* InOuter, const FString& InProxyBasePackageName, const FGuid InGuid, const FCreateProxyDelegate& InProxyCreatedDelegate, const bool bAllowAsync = false, const float ScreenSize = 1.0f)"
  },
  {
    "label": "CreateProxyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProxyMesh(const TArray<AActor*>& InActors, const struct FMeshProxySettings& InMeshProxySettings, UPackage* InOuter, const FString& InProxyBasePackageName, const FGuid InGuid, const FCreateProxyDelegate& InProxyCreatedDelegate, const bool bAllowAsync = false, const float ScreenSize = 1.0f)"
  },
  {
    "label": "CreateProxyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProxyMesh(const TArray<UStaticMeshComponent*>& InStaticMeshComps, const struct FMeshProxySettings& InMeshProxySettings, UPackage* InOuter, const FString& InProxyBasePackageName, const FGuid InGuid, const FCreateProxyDelegate& InProxyCreatedDelegate, const bool bAllowAsync = false, const float ScreenSize = 1.0f)"
  },
  {
    "label": "RetrieveMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveMeshDescription(const UStaticMeshComponent* InStaticMeshComponent, int32 LODIndex, FMeshDescription& InOutMeshDescription, bool bPropagateVertexColours)"
  },
  {
    "label": "RetrieveMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveMeshDescription(const USkeletalMeshComponent* InSkeletalMeshComponent, int32 LODIndex, FMeshDescription& InOutMeshDescription, bool bPropagateVertexColours)"
  },
  {
    "label": "RetrieveMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveMeshDescription(const UStaticMesh* InStaticMesh, int32 LODIndex, FMeshDescription& InOutMeshDescription)"
  },
  {
    "label": "RetrievePhysicsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrievePhysicsData(const TArray<UPrimitiveComponent*>& InComponents, TArray<FKAggregateGeom>& InOutPhysicsGeometry, UBodySetup*& OutBodySetupSource)"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtension(IMeshMergeExtension* InExtension)"
  },
  {
    "label": "UnregisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExtension(IMeshMergeExtension* InExtension)"
  },
  {
    "label": "CreateProxyMaterial()",
    "kind": "Method",
    "detail": "Function (protected : UMaterialInterface*)",
    "insertText": "CreateProxyMaterial(const FString &InBasePackageName, FString MergedAssetPackageName, UMaterialInterface* InBaseMaterial, UPackage* InOuter, const FMeshMergingSettings &InSettings, const FFlattenMaterial& OutMaterial, TArray<UObject *>& OutAssetsToSync, FMaterialUpdateContext* InMaterialUpdateContext = nullptr)"
  },
  {
    "label": "MergeFlattenedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeFlattenedMaterials(TArray<struct FFlattenMaterial>& InMaterialList, int32 InGutter, FFlattenMaterial& OutMergedMaterial, TArray<FUVOffsetScalePair>& OutUVTransforms)"
  },
  {
    "label": "FlattenBinnedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlattenBinnedMaterials(TArray<struct FFlattenMaterial>& InMaterialList, const TArray<FBox2D>& InMaterialBoxes, int32 InGutter, bool bCopyOnlyMaskedPixels, FFlattenMaterial& OutMergedMaterial, TArray<FUVOffsetScalePair>& OutUVTransforms)"
  },
  {
    "label": "CreateMergedMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMergedMaterial(FMeshMergeDataTracker& InDataTracker, const FMeshMergingSettings& InSettings, const TArray<UStaticMeshComponent*>& InStaticMeshComponentsToMerge, TArray<FStaticMeshComponentAdapter>& InAdapters, const TArray<UMaterialInterface*>& InUniqueMaterials, const TMap<UMaterialInterface*, UMaterialInterface*>& InCollapsedMaterialMap, TMultiMap<FMeshLODKey, MaterialRemapPair>& InOutputMaterialsMap, bool bInMergeAllLODs, bool bInMergeMaterialData, const FVector& InMergedAssetPivot, FFlattenMaterial& OutFlattenMaterial)"
  },
  {
    "label": "CreateMergedRawMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMergedRawMeshes(FMeshMergeDataTracker& InDataTracker, const FMeshMergingSettings& InSettings, const TArray<UStaticMeshComponent*>& InStaticMeshComponentsToMerge, const TArray<UMaterialInterface*>& InUniqueMaterials, const TMap<UMaterialInterface*, UMaterialInterface*>& InCollapsedMaterialMap, const TMultiMap<FMeshLODKey, MaterialRemapPair>& InOutputMaterialsMap, bool bInMergeAllLODs, bool bInMergeMaterialData, const FVector& InMergedAssetPivot, TArray<FMeshDescription>& OutMergedRawMeshes)"
  },
  {
    "label": "FlattenEmissivescale()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "FlattenEmissivescale(TArray<struct FFlattenMaterial>& InMaterialList)"
  },
  {
    "label": "PopulateMaterialOptions()",
    "kind": "Method",
    "detail": "Function (UMaterialOptions*)",
    "insertText": "PopulateMaterialOptions(const FMaterialProxySettings& MaterialSettings)"
  },
  {
    "label": "PopulatePropertyEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulatePropertyEntry(const FMaterialProxySettings& MaterialSettings, EMaterialProperty MaterialProperty, struct FPropertyEntry& InOutPropertyEntry)"
  },
  {
    "label": "CopyTextureRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureRect(const FColor* Src, const FIntPoint& SrcSize, FColor* Dst, const FIntPoint& DstSize, const FIntPoint& DstPos, bool bCopyOnlyMaskedPixels = false)"
  },
  {
    "label": "SetTextureRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureRect(const FColor& ColorValue, const FIntPoint& SrcSize, FColor* Dst, const FIntPoint& DstSize, const FIntPoint& DstPos)"
  },
  {
    "label": "ConditionalImageResize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "ConditionalImageResize(const FIntPoint& SrcSize, const FIntPoint& DesiredSize, TArray<FColor>& InOutImage, bool bLinearSpace)"
  },
  {
    "label": "ConvertOutputToFlatMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOutputToFlatMaterials(const TArray<FBakeOutput>& BakeOutputs, const TArray<FMaterialData>& MaterialData, TArray<FFlattenMaterial> &FlattenedMaterials)"
  },
  {
    "label": "TransferOutputToFlatMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferOutputToFlatMaterials(const TArray<FMaterialData>& InMaterialData, TArray<FBakeOutput>& InOutBakeOutputs, TArray<FFlattenMaterial> &OutFlattenedMaterials)"
  },
  {
    "label": "ToFlattenProperty()",
    "kind": "Method",
    "detail": "Function (EFlattenMaterialProperties)",
    "insertText": "ToFlattenProperty(EMaterialProperty MaterialProperty)"
  }
]