[
  {
    "label": "rsa_pss_params_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_pss_params_st"
  },
  {
    "label": "rsa_oaep_params_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rsa_oaep_params_st"
  },
  {
    "label": "EVP_PKEY_CTX_set_rsa_padding()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_RSA_H # define HEADER_RSA_H # include<openssl / opensslconf . h> # ifndef OPENSSL_NO_RSA # include<openssl / asn1 . h> # include<openssl / bio . h> # include<openssl / crypto . h> # include<openssl / ossl_typ . h> # if OPENSSL_API_COMPAT<0 x10100000L # include<openssl / bn . h> # endif # include<openssl / rsaerr . h> # ifdef __cplusplus \" C \" { # endif # ifndef OPENSSL_RSA_MAX_MODULUS_BITS # define OPENSSL_RSA_MAX_MODULUS_BITS 1 6 3 8 4 # endif # define OPENSSL_RSA_FIPS_MIN_MODULUS_BITS 1 0 2 4 # ifndef OPENSSL_RSA_SMALL_MODULUS_BITS # define OPENSSL_RSA_SMALL_MODULUS_BITS 3 0 7 2 # endif # ifndef OPENSSL_RSA_MAX_PUBEXP_BITS # define OPENSSL_RSA_MAX_PUBEXP_BITS 6 4 # endif # define RSA_3 0 x3L # define RSA_F4 0 x10001L # define RSA_ASN1_VERSION_DEFAULT 0 # define RSA_ASN1_VERSION_MULTI 1 # define RSA_DEFAULT_PRIME_NUM 2 # define RSA_METHOD_FLAG_NO_CHECK 0 x0001 # define RSA_FLAG_CACHE_PUBLIC 0 x0002 # define RSA_FLAG_CACHE_PRIVATE 0 x0004 # define RSA_FLAG_BLINDING 0 x0008 # define RSA_FLAG_THREAD_SAFE 0 x0010 # define RSA_FLAG_EXT_PKEY 0 x0020 # define RSA_FLAG_NO_BLINDING 0 x0080 # if OPENSSL_API_COMPAT<0 x10100000L # define RSA_FLAG_NO_CONSTTIME 0 x0000 # endif # if OPENSSL_API_COMPAT<0 x00908000L # define RSA_FLAG_NO_EXP_CONSTTIME RSA_FLAG_NO_CONSTTIME # endif # define)",
    "insertText": "EVP_PKEY_CTX_set_rsa_padding(ctx, pad) \\ RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_RSA_PADDING, pad, NULL) # define EVP_PKEY_CTX_get_rsa_padding(ctx, ppad) \\ RSA_pkey_ctx_ctrl(ctx, -1, EVP_PKEY_CTRL_GET_RSA_PADDING, 0, ppad) # define EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, len) \\ RSA_pkey_ctx_ctrl(ctx, (EVP_PKEY_OP_SIGN|EVP_PKEY_OP_VERIFY), \\ EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL) # define RSA_PSS_SALTLEN_DIGEST -1 # define RSA_PSS_SALTLEN_AUTO -2 # define RSA_PSS_SALTLEN_MAX -3 # define RSA_PSS_SALTLEN_MAX_SIGN -2 # define EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx, len) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_RSA_PSS_SALTLEN, len, NULL) # define EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx, plen) \\ RSA_pkey_ctx_ctrl(ctx, (EVP_PKEY_OP_SIGN|EVP_PKEY_OP_VERIFY), \\ EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN, 0, plen) # define EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits) \\ RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_RSA_KEYGEN_BITS, bits, NULL) # define EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx, pubexp) \\ RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP, 0, pubexp) # define EVP_PKEY_CTX_set_rsa_keygen_primes(ctx, primes) \\ RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES, primes, NULL) # define EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, md) \\ RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (void *)(md)) # define EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx, md) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, EVP_PKEY_OP_KEYGEN, \\ EVP_PKEY_CTRL_RSA_MGF1_MD, 0, (void *)(md)) # define EVP_PKEY_CTX_set_rsa_oaep_md(ctx, md) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_RSA_OAEP_MD, 0, (void *)(md)) # define EVP_PKEY_CTX_get_rsa_mgf1_md(ctx, pmd) \\ RSA_pkey_ctx_ctrl(ctx, EVP_PKEY_OP_TYPE_SIG | EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_GET_RSA_MGF1_MD, 0, (void *)(pmd)) # define EVP_PKEY_CTX_get_rsa_oaep_md(ctx, pmd) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_GET_RSA_OAEP_MD, 0, (void *)(pmd)) # define EVP_PKEY_CTX_set0_rsa_oaep_label(ctx, l, llen) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_RSA_OAEP_LABEL, llen, (void *)(l)) # define EVP_PKEY_CTX_get0_rsa_oaep_label(ctx, l) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA, EVP_PKEY_OP_TYPE_CRYPT, \\ EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL, 0, (void *)(l)) # define EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx, md) \\ EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_RSA_PSS, \\ EVP_PKEY_OP_KEYGEN, EVP_PKEY_CTRL_MD, \\ 0, (void *)(md)) # define EVP_PKEY_CTRL_RSA_PADDING (EVP_PKEY_ALG_CTRL + 1) # define EVP_PKEY_CTRL_RSA_PSS_SALTLEN (EVP_PKEY_ALG_CTRL + 2) # define EVP_PKEY_CTRL_RSA_KEYGEN_BITS (EVP_PKEY_ALG_CTRL + 3) # define EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP (EVP_PKEY_ALG_CTRL + 4) # define EVP_PKEY_CTRL_RSA_MGF1_MD (EVP_PKEY_ALG_CTRL + 5) # define EVP_PKEY_CTRL_GET_RSA_PADDING (EVP_PKEY_ALG_CTRL + 6) # define EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN (EVP_PKEY_ALG_CTRL + 7) # define EVP_PKEY_CTRL_GET_RSA_MGF1_MD (EVP_PKEY_ALG_CTRL + 8) # define EVP_PKEY_CTRL_RSA_OAEP_MD (EVP_PKEY_ALG_CTRL + 9) # define EVP_PKEY_CTRL_RSA_OAEP_LABEL (EVP_PKEY_ALG_CTRL + 10) # define EVP_PKEY_CTRL_GET_RSA_OAEP_MD (EVP_PKEY_ALG_CTRL + 11) # define EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL (EVP_PKEY_ALG_CTRL + 12) # define EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES (EVP_PKEY_ALG_CTRL + 13) # define RSA_PKCS1_PADDING 1 # define RSA_SSLV23_PADDING 2 # define RSA_NO_PADDING 3 # define RSA_PKCS1_OAEP_PADDING 4 # define RSA_X931_PADDING 5 # define RSA_PKCS1_PSS_PADDING 6 # define RSA_PKCS1_PADDING_SIZE 11 # define RSA_set_app_data(s,arg) RSA_set_ex_data(s,0,arg) # define RSA_get_app_data(s) RSA_get_ex_data(s,0) RSA *RSA_new(void)"
  },
  {
    "label": "RSA_new_method()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "RSA_new_method(ENGINE *engine)"
  },
  {
    "label": "RSA_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_bits(const RSA *rsa)"
  },
  {
    "label": "RSA_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_size(const RSA *rsa)"
  },
  {
    "label": "RSA_security_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_security_bits(const RSA *rsa)"
  },
  {
    "label": "RSA_set0_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)"
  },
  {
    "label": "RSA_set0_factors()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)"
  },
  {
    "label": "RSA_set0_crt_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_set0_crt_params(RSA *r,BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)"
  },
  {
    "label": "RSA_set0_multi_prime_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[], BIGNUM *coeffs[], int pnum)"
  },
  {
    "label": "RSA_get0_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_get0_key(const RSA *r, const BIGNUM **n, const BIGNUM **e, const BIGNUM **d)"
  },
  {
    "label": "RSA_get0_factors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)"
  },
  {
    "label": "RSA_get_multi_prime_extra_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_get_multi_prime_extra_count(const RSA *r)"
  },
  {
    "label": "RSA_get0_multi_prime_factors()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[])"
  },
  {
    "label": "RSA_get0_crt_params()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_get0_crt_params(const RSA *r, const BIGNUM **dmp1, const BIGNUM **dmq1, const BIGNUM **iqmp)"
  },
  {
    "label": "RSA_get0_multi_prime_crt_params()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[], const BIGNUM *coeffs[])"
  },
  {
    "label": "RSA_get0_n()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_n(const RSA *d)"
  },
  {
    "label": "RSA_get0_e()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_e(const RSA *d)"
  },
  {
    "label": "RSA_get0_d()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_d(const RSA *d)"
  },
  {
    "label": "RSA_get0_p()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_p(const RSA *d)"
  },
  {
    "label": "RSA_get0_q()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_q(const RSA *d)"
  },
  {
    "label": "RSA_get0_dmp1()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_dmp1(const RSA *r)"
  },
  {
    "label": "RSA_get0_dmq1()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_dmq1(const RSA *r)"
  },
  {
    "label": "RSA_get0_iqmp()",
    "kind": "Method",
    "detail": "Function (const BIGNUM*)",
    "insertText": "RSA_get0_iqmp(const RSA *r)"
  },
  {
    "label": "RSA_get0_pss_params()",
    "kind": "Method",
    "detail": "Function (const RSA_PSS_PARAMS*)",
    "insertText": "RSA_get0_pss_params(const RSA *r)"
  },
  {
    "label": "RSA_clear_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_clear_flags(RSA *r, int flags)"
  },
  {
    "label": "RSA_test_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_test_flags(const RSA *r, int flags)"
  },
  {
    "label": "RSA_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_set_flags(RSA *r, int flags)"
  },
  {
    "label": "RSA_get_version()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_get_version(RSA *r)"
  },
  {
    "label": "RSA_get0_engine()",
    "kind": "Method",
    "detail": "Function (ENGINE*)",
    "insertText": "RSA_get0_engine(const RSA *r)"
  },
  {
    "label": "DEPRECATEDIN_0_9_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATEDIN_0_9_8(RSA *RSA_generate_key(int bits, unsigned long e, void (*callback) (int, int, void *), void *cb_arg)) int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_generate_multi_prime_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_X931_derive_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1, BIGNUM *q2, const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *Xq1, const BIGNUM *Xq2, const BIGNUM *Xq, const BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_X931_generate_key_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_check_key()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_check_key(const RSA *)"
  },
  {
    "label": "RSA_check_key_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_check_key_ex(const RSA *, BN_GENCB *cb)"
  },
  {
    "label": "RSA_public_encrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_private_encrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_private_encrypt(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_public_decrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_private_decrypt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_private_decrypt(int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_free(RSA *r)"
  },
  {
    "label": "RSA_up_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_up_ref(RSA *r)"
  },
  {
    "label": "RSA_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_flags(const RSA *r)"
  },
  {
    "label": "RSA_set_default_method()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_set_default_method(const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_get_default_method()",
    "kind": "Method",
    "detail": "Function (const RSA_METHOD*)",
    "insertText": "RSA_get_default_method(void)"
  },
  {
    "label": "RSA_null_method()",
    "kind": "Method",
    "detail": "Function (const RSA_METHOD*)",
    "insertText": "RSA_null_method(void)"
  },
  {
    "label": "RSA_get_method()",
    "kind": "Method",
    "detail": "Function (const RSA_METHOD*)",
    "insertText": "RSA_get_method(const RSA *rsa)"
  },
  {
    "label": "RSA_set_method()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_set_method(RSA *rsa, const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_PKCS1_OpenSSL()",
    "kind": "Method",
    "detail": "Function (const RSA_METHOD*)",
    "insertText": "RSA_PKCS1_OpenSSL(void)"
  },
  {
    "label": "RSA_pkey_ctx_ctrl()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_pkey_ctx_ctrl(EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2)"
  },
  {
    "label": "DECLARE_ASN1_ENCODE_FUNCTIONS_const()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_ENCODE_FUNCTIONS_const(RSA, RSAPublicKey) DECLARE_ASN1_ENCODE_FUNCTIONS_const(RSA, RSAPrivateKey)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR* hashAlgorithm ; X509_ALGOR* maskGenAlgorithm ; ASN1_INTEGER* saltLength ; ASN1_INTEGER* trailerField ; X509_ALGOR* maskHash ; } ;)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(RSA_PSS_PARAMS)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (X509_ALGOR* hashFunc ; X509_ALGOR* maskGenFunc ; X509_ALGOR* pSourceFunc ; X509_ALGOR* maskHash ; } RSA_OAEP_PARAMS ;)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(RSA_OAEP_PARAMS) # ifndef OPENSSL_NO_STDIO int RSA_print_fp(FILE *fp, const RSA *r, int offset)"
  },
  {
    "label": "RSA_print()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "RSA_print(BIO *bp, const RSA *r, int offset)"
  },
  {
    "label": "RSA_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_sign(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, RSA *rsa)"
  },
  {
    "label": "RSA_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_verify(int type, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, RSA *rsa)"
  },
  {
    "label": "RSA_sign_ASN1_OCTET_STRING()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_sign_ASN1_OCTET_STRING(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, RSA *rsa)"
  },
  {
    "label": "RSA_verify_ASN1_OCTET_STRING()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigbuf, unsigned int siglen, RSA *rsa)"
  },
  {
    "label": "RSA_blinding_on()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_blinding_on(RSA *rsa, BN_CTX *ctx)"
  },
  {
    "label": "RSA_blinding_off()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_blinding_off(RSA *rsa)"
  },
  {
    "label": "RSA_setup_blinding()",
    "kind": "Method",
    "detail": "Function (BN_BLINDING*)",
    "insertText": "RSA_setup_blinding(RSA *rsa, BN_CTX *ctx)"
  },
  {
    "label": "RSA_padding_add_PKCS1_type_1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen, const unsigned char *f, int fl)"
  },
  {
    "label": "RSA_padding_check_PKCS1_type_1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len)"
  },
  {
    "label": "RSA_padding_add_PKCS1_type_2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen, const unsigned char *f, int fl)"
  },
  {
    "label": "RSA_padding_check_PKCS1_type_2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len)"
  },
  {
    "label": "PKCS1_MGF1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS1_MGF1(unsigned char *mask, long len, const unsigned char *seed, long seedlen, const EVP_MD *dgst)"
  },
  {
    "label": "RSA_padding_add_PKCS1_OAEP()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen, const unsigned char *f, int fl, const unsigned char *p, int pl)"
  },
  {
    "label": "RSA_padding_check_PKCS1_OAEP()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len, const unsigned char *p, int pl)"
  },
  {
    "label": "RSA_padding_add_PKCS1_OAEP_mgf1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen, const unsigned char *from, int flen, const unsigned char *param, int plen, const EVP_MD *md, const EVP_MD *mgf1md)"
  },
  {
    "label": "RSA_padding_check_PKCS1_OAEP_mgf1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen, const unsigned char *from, int flen, int num, const unsigned char *param, int plen, const EVP_MD *md, const EVP_MD *mgf1md)"
  },
  {
    "label": "RSA_padding_add_SSLv23()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_SSLv23(unsigned char *to, int tlen, const unsigned char *f, int fl)"
  },
  {
    "label": "RSA_padding_check_SSLv23()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_SSLv23(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len)"
  },
  {
    "label": "RSA_padding_add_none()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_none(unsigned char *to, int tlen, const unsigned char *f, int fl)"
  },
  {
    "label": "RSA_padding_check_none()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_none(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len)"
  },
  {
    "label": "RSA_padding_add_X931()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_X931(unsigned char *to, int tlen, const unsigned char *f, int fl)"
  },
  {
    "label": "RSA_padding_check_X931()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_check_X931(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len)"
  },
  {
    "label": "RSA_X931_hash_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_X931_hash_id(int nid)"
  },
  {
    "label": "RSA_verify_PKCS1_PSS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash, const EVP_MD *Hash, const unsigned char *EM, int sLen)"
  },
  {
    "label": "RSA_padding_add_PKCS1_PSS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM, const unsigned char *mHash, const EVP_MD *Hash, int sLen)"
  },
  {
    "label": "RSA_verify_PKCS1_PSS_mgf1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash, const EVP_MD *Hash, const EVP_MD *mgf1Hash, const unsigned char *EM, int sLen)"
  },
  {
    "label": "RSA_padding_add_PKCS1_PSS_mgf1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM, const unsigned char *mHash, const EVP_MD *Hash, const EVP_MD *mgf1Hash, int sLen)"
  },
  {
    "label": "RSA_get_ex_new_index()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RSA_get_ex_new_index(l, p, newf, dupf, freef) \\ CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, l, p, newf, dupf, freef) int RSA_set_ex_data(RSA *r, int idx, void *arg)"
  },
  {
    "label": "RSA_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RSA_get_ex_data(const RSA *r, int idx)"
  },
  {
    "label": "RSAPublicKey_dup()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "RSAPublicKey_dup(RSA *rsa)"
  },
  {
    "label": "RSAPrivateKey_dup()",
    "kind": "Method",
    "detail": "Function (RSA*)",
    "insertText": "RSAPrivateKey_dup(RSA *rsa)"
  },
  {
    "label": "RSA_meth_new()",
    "kind": "Method",
    "detail": "Function (# define RSA_FLAG_FIPS_METHOD 0 x0400 # define RSA_FLAG_NON_FIPS_ALLOW 0 x0400 # define RSA_FLAG_CHECKED 0 x0800 RSA_METHOD*)",
    "insertText": "RSA_meth_new(const char *name, int flags)"
  },
  {
    "label": "RSA_meth_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RSA_meth_free(RSA_METHOD *meth)"
  },
  {
    "label": "RSA_meth_dup()",
    "kind": "Method",
    "detail": "Function (RSA_METHOD*)",
    "insertText": "RSA_meth_dup(const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_meth_get0_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "RSA_meth_get0_name(const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_meth_set1_name()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set1_name(RSA_METHOD *meth, const char *name)"
  },
  {
    "label": "RSA_meth_get_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_get_flags(const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_meth_set_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_flags(RSA_METHOD *meth, int flags)"
  },
  {
    "label": "RSA_meth_get0_app_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RSA_meth_get0_app_data(const RSA_METHOD *meth)"
  },
  {
    "label": "RSA_meth_set0_app_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_pub_enc(const RSA_METHOD *meth)) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_meth_set_pub_enc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_pub_enc(RSA_METHOD *rsa, int (*pub_enc) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_pub_dec(const RSA_METHOD *meth)) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_meth_set_pub_dec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_pub_dec(RSA_METHOD *rsa, int (*pub_dec) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_priv_enc(const RSA_METHOD *meth)) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_meth_set_priv_enc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_priv_enc(RSA_METHOD *rsa, int (*priv_enc) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_priv_dec(const RSA_METHOD *meth)) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding)"
  },
  {
    "label": "RSA_meth_set_priv_dec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_priv_dec(RSA_METHOD *rsa, int (*priv_dec) (int flen, const unsigned char *from, unsigned char *to, RSA *rsa, int padding))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_mod_exp(const RSA_METHOD *meth)) (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx)"
  },
  {
    "label": "RSA_meth_set_mod_exp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_mod_exp(RSA_METHOD *rsa, int (*mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth)) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)"
  },
  {
    "label": "RSA_meth_set_bn_mod_exp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa, int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa)"
  },
  {
    "label": "RSA_meth_set_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_init(RSA_METHOD *rsa, int (*init) (RSA *rsa))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa)"
  },
  {
    "label": "RSA_meth_set_finish()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_finish(RSA_METHOD *rsa, int (*finish) (RSA *rsa))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_sign(const RSA_METHOD *meth)) (int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, const RSA *rsa)"
  },
  {
    "label": "RSA_meth_set_sign()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_sign(RSA_METHOD *rsa, int (*sign) (int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, const RSA *rsa))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_verify(const RSA_METHOD *meth)) (int dtype, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, const RSA *rsa)"
  },
  {
    "label": "RSA_meth_set_verify()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_verify(RSA_METHOD *rsa, int (*verify) (int dtype, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, const RSA *rsa))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_keygen(const RSA_METHOD *meth)) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_meth_set_keygen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_keygen(RSA_METHOD *rsa, int (*keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth)) (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)"
  },
  {
    "label": "RSA_meth_set_multi_prime_keygen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth, int (*keygen) (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb))"
  }
]