[
  {
    "label": "ComputeEditDistance()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_EDIT_DISTANCE_H # define LLVM_ADT_EDIT_DISTANCE_H # include \" llvm / ADT / ArrayRef . h \" # include<algorithm> # include<memory> namespace llvm { template<T> unsigned)",
    "insertText": "ComputeEditDistance(ArrayRef<T> FromArray, ArrayRef<T> ToArray, bool AllowReplacements = true, unsigned MaxEditDistance = 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (ArrayRef<T>::size_type m = FromArray .)",
    "insertText": "size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const unsigned SmallBufferSize = 6 4 ; unsigned SmallBuffer [ SmallBufferSize ] ; std::unique_ptr<unsigned [ ]> Allocated ; unsigned* Row = SmallBuffer ;)",
    "insertText": "if(n + 1 > SmallBufferSize)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (Row = new unsigned [ n + 1 ] ; Allocated .)",
    "insertText": "reset(Row)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(unsigned i = 1; i <= n; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Row [ 0 ] = y ; unsigned BestThisRow = Row [ 0 ] ; unsigned Previous = y - 1 ;)",
    "insertText": "for(typename ArrayRef<T>::size_type x = 1; x <= n; ++x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int OldRow = Row [ x ] ;)",
    "insertText": "if(AllowReplacements)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (Row [ x ] =)",
    "insertText": "min(Previous + (FromArray[y-1] == ToArray[x-1] ? 0u : 1u), std::min(Row[x-1], Row[x])+1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(FromArray[y-1] == ToArray[x-1])"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} Previous = OldRow ; BestThisRow =)",
    "insertText": "min(BestThisRow, Row[x])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MaxEditDistance && BestThisRow > MaxEditDistance)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} # pragma)",
    "insertText": "warning(push ) #pragma warning( disable : 28199)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "warning(pop)"
  }
]