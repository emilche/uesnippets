[
  {
    "label": "TDisambiguater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDisambiguater"
  },
  {
    "label": "FNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNull"
  },
  {
    "label": "TUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUnion"
  },
  {
    "label": "TEMPLATE_PARAMETERS2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Templates / References . h \" # include \" uLang / Common / Templates / Storage . h \" # define)",
    "insertText": "TEMPLATE_PARAMETERS2(X,Y)"
  },
  {
    "label": "TDisambiguater()",
    "kind": "Method",
    "detail": "Function (template<uint32_t> struct TDisambiguater {)",
    "insertText": "TDisambiguater()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; class FNull { public : bool)",
    "insertText": "operator(const FNull&)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeA>::ParamType InValue, TDisambiguater<0> Disambiguater = TDisambiguater<0>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeA()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeA(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeB>::ParamType InValue, TDisambiguater<1> Disambiguater = TDisambiguater<1>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeB()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeB(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeC>::ParamType InValue, TDisambiguater<2> Disambiguater = TDisambiguater<2>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeC()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeC(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeD>::ParamType InValue, TDisambiguater<3> Disambiguater = TDisambiguater<3>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeD()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeD(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeE>::ParamType InValue, TDisambiguater<4> Disambiguater = TDisambiguater<4>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeE()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeE(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(typename TCallTraits<TypeF>::ParamType InValue, TDisambiguater<5> Disambiguater = TDisambiguater<5>()) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TypeF()",
    "kind": "Method",
    "detail": "Function (SetSubtype<)",
    "insertText": "TypeF(InValue)"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUnion(const TUnion& Other) : CurrentSubtypeIndex(uint8_t(-1))"
  },
  {
    "label": "TUnion()",
    "kind": "Method",
    "detail": "Function (* this = Other ; } ~)",
    "insertText": "TUnion()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "HasSubtype()",
    "kind": "Method",
    "detail": "Function (} template<Subtype> bool)",
    "insertText": "HasSubtype()"
  },
  {
    "label": "Subtype()",
    "kind": "Method",
    "detail": "Function (int32_t SubtypeIndex ; const Subtype* SubtypeValuePointer ; GetSubtypeIndexAndReference<Subtype,const)",
    "insertText": "Subtype(*this, SubtypeIndex, SubtypeValuePointer)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (CurrentSubtypeIndex =)",
    "insertText": "uint8_t(-1)"
  },
  {
    "label": "Subtype()",
    "kind": "Method",
    "detail": "Function (SubtypeValuePointer -> ~)",
    "insertText": "Subtype()"
  },
  {
    "label": "GetSubtype()",
    "kind": "Method",
    "detail": "Function (} } template<Subtype> const Subtype&)",
    "insertText": "GetSubtype()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(CurrentSubtypeIndex == SubtypeIndex, \"Union is not of this type\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(SubtypeValuePointer) Subtype(NewValue)"
  },
  {
    "label": "CurrentSubtypeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentSubtypeIndex(uint8_t)"
  },
  {
    "label": "TypeB()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : ResetSubtype<)",
    "insertText": "TypeB()"
  },
  {
    "label": "TypeC()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : ResetSubtype<)",
    "insertText": "TypeC()"
  },
  {
    "label": "TypeD()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : ResetSubtype<)",
    "insertText": "TypeD()"
  },
  {
    "label": "TypeE()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : ResetSubtype<)",
    "insertText": "TypeE()"
  },
  {
    "label": "TypeF()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : ResetSubtype<)",
    "insertText": "TypeF()"
  },
  {
    "label": "FatalErrorUndefinedSubtype()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "FatalErrorUndefinedSubtype()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; } ; } TUnion&)",
    "insertText": "operator(const TUnion& Other)"
  },
  {
    "label": "TypeB()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : SetSubtype<)",
    "insertText": "TypeB(Other.GetSubtype<TypeB>())"
  },
  {
    "label": "TypeC()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : SetSubtype<)",
    "insertText": "TypeC(Other.GetSubtype<TypeC>())"
  },
  {
    "label": "TypeD()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : SetSubtype<)",
    "insertText": "TypeD(Other.GetSubtype<TypeD>())"
  },
  {
    "label": "TypeE()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : SetSubtype<)",
    "insertText": "TypeE(Other.GetSubtype<TypeE>())"
  },
  {
    "label": "TypeF()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : SetSubtype<)",
    "insertText": "TypeF(Other.GetSubtype<TypeF>())"
  },
  {
    "label": "TypeB()",
    "kind": "Method",
    "detail": "Function (break ; case 1 : return GetSubtype<)",
    "insertText": "TypeB() == Other.GetSubtype<TypeB>()"
  },
  {
    "label": "TypeC()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : return GetSubtype<)",
    "insertText": "TypeC() == Other.GetSubtype<TypeC>()"
  },
  {
    "label": "TypeD()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : return GetSubtype<)",
    "insertText": "TypeD() == Other.GetSubtype<TypeD>()"
  },
  {
    "label": "TypeE()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : return GetSubtype<)",
    "insertText": "TypeE() == Other.GetSubtype<TypeE>()"
  },
  {
    "label": "TypeF()",
    "kind": "Method",
    "detail": "Function (break ; case 5 : return GetSubtype<)",
    "insertText": "TypeF() == Other.GetSubtype<TypeF>()"
  },
  {
    "label": "InitSubtype()",
    "kind": "Method",
    "detail": "Function (break ; } ; } return false ; } private : union { TTypeCompatibleBytes<TypeA> A ; TTypeCompatibleBytes<TypeB> B ; TTypeCompatibleBytes<TypeC> C ; TTypeCompatibleBytes<TypeD> D ; TTypeCompatibleBytes<TypeE> E ; TTypeCompatibleBytes<TypeF> F ; } Values ; uint8_t CurrentSubtypeIndex ; template<Subtype> Subtype&)",
    "insertText": "InitSubtype()"
  },
  {
    "label": "GetSubtypeIndexAndReference()",
    "kind": "Method",
    "detail": "Function (} template<Subtype,PointerType> void)",
    "insertText": "GetSubtypeIndexAndReference(const TUnion& Union, int32_t& OutIndex, PointerType& OutValuePointer)"
  },
  {
    "label": "OutValuePointer()",
    "kind": "Method",
    "detail": "Function (OutIndex = 0 ;)",
    "insertText": "OutValuePointer(PointerType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TAreTypesEqual<TypeB, Subtype>::Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TAreTypesEqual<TypeC, Subtype>::Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TAreTypesEqual<TypeD, Subtype>::Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TAreTypesEqual<TypeE, Subtype>::Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TAreTypesEqual<TypeF, Subtype>::Value)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeA, Subtype)>::Value || TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeB, Subtype)>::Value || TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeC, Subtype)>::Value || TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeD, Subtype)>::Value || TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeE, Subtype)>::Value || TAreTypesEqual<TEMPLATE_PARAMETERS2(TypeF, Subtype)>::Value, \"Type is not subtype of union.\")"
  },
  {
    "label": "ULANG_ERRORF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ERRORF(\"Unrecognized TUnion subtype\")"
  }
]