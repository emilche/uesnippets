[
  {
    "label": "StatsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsReporter"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "InitConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InitConfig"
  },
  {
    "label": "PCScanThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanThread"
  },
  {
    "label": "PCScanTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanTask"
  },
  {
    "label": "PartitionAllocPCScanTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionAllocPCScanTestBase"
  },
  {
    "label": "PCScanInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanInternal"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_H_ # include<atomic> # include \" base / allocator / partition_allocator / page_allocator . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_direct_map_extent . h \" # include \" base / allocator / partition_allocator / partition_page . h \" # include \" base / allocator / partition_allocator / starscan / pcscan_scheduling . h \" # include \" base / allocator / partition_allocator / tagging . h \" # define PA_STARSCAN_EAGER_DOUBLE_FREE_DETECTION_ENABLED 0 namespace partition_alloc { class StatsReporter ; namespace internal { [ [ noreturn ] ])",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) PA_NOINLINE PA_NOT_TAIL_CALLED void DoubleFreeAttempt()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PCScan()",
    "kind": "Method",
    "detail": "Function (public : using Root = PartitionRoot<ThreadSafe> ; using SlotSpan = SlotSpanMetadata<ThreadSafe> ; enum class InvocationMode { kBlocking,kNonBlocking,kForcedBlocking,kScheduleOnlyForTesting,} ; enum class ClearType : uint8_t { kLazy,kEager,} ; struct InitConfig { enum class WantedWriteProtectionMode : uint8_t { kDisabled,kEnabled,} write_protection = WantedWriteProtectionMode::kDisabled ; enum class SafepointMode : uint8_t { kDisabled,kEnabled,} safepoint = SafepointMode::kDisabled ; } ;)",
    "insertText": "PCScan(const PCScan&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PCScan&)",
    "insertText": "operator(const PCScan&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(InitConfig)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "Reenable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reenable()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "RegisterScannableRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterScannableRoot(Root* root)"
  },
  {
    "label": "RegisterNonScannableRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNonScannableRoot(Root* root)"
  },
  {
    "label": "RegisterNewSuperPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNewSuperPage(Root* root, uintptr_t super_page_base)"
  },
  {
    "label": "MoveToQuarantine()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "MoveToQuarantine(void* object, size_t usable_size, uintptr_t slot_start, size_t slot_size)"
  },
  {
    "label": "PerformScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformScan(InvocationMode invocation_mode)"
  },
  {
    "label": "PerformScanIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformScanIfNeeded(InvocationMode invocation_mode)"
  },
  {
    "label": "PerformDelayedScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformDelayedScan(int64_t delay_in_microseconds)"
  },
  {
    "label": "EnableSafepoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSafepoints()"
  },
  {
    "label": "JoinScanIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinScanIfNeeded()"
  },
  {
    "label": "IsInProgress()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsInProgress()"
  },
  {
    "label": "SetProcessName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessName(const char* name)"
  },
  {
    "label": "EnableStackScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableStackScanning()"
  },
  {
    "label": "DisableStackScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableStackScanning()"
  },
  {
    "label": "IsStackScanningEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStackScanningEnabled()"
  },
  {
    "label": "EnableImmediateFreeing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableImmediateFreeing()"
  },
  {
    "label": "NotifyThreadCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyThreadCreated(void* stack_top)"
  },
  {
    "label": "NotifyThreadDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyThreadDestroyed()"
  },
  {
    "label": "SetClearType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearType(ClearType)"
  },
  {
    "label": "UninitForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitForTesting()"
  },
  {
    "label": "scheduler()",
    "kind": "Method",
    "detail": "Function (PCScanScheduler&)",
    "insertText": "scheduler()"
  },
  {
    "label": "RegisterStatsReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatsReporter(partition_alloc::StatsReporter* reporter)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (private : class PCScanThread ; class PCScanTask ; class PartitionAllocPCScanTestBase ; class PCScanInternal ; enum class State : uint8_t { kNotRunning,kScheduled,kScanning,kSweepingAndFinishing } ; PA_ALWAYS_INLINE PCScan&)",
    "insertText": "Instance()"
  },
  {
    "label": "IsJoinable()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsJoinable()"
  },
  {
    "label": "SetJoinableIfSafepointEnabled()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "SetJoinableIfSafepointEnabled(bool)"
  },
  {
    "label": "PCScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCScan()"
  },
  {
    "label": "JoinScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinScan()"
  },
  {
    "label": "FinishScanForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishScanForTesting()"
  },
  {
    "label": "ReinitForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitForTesting(InitConfig)"
  },
  {
    "label": "epoch()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "epoch()"
  },
  {
    "label": "SetJoinableIfSafepointEnabled()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "SetJoinableIfSafepointEnabled(bool value)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!is_joinable_.load(std::memory_order_relaxed))"
  },
  {
    "label": "SecureMemset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SecureMemset(object, 0, usable_size)"
  },
  {
    "label": "StateBitmapFromAddr()",
    "kind": "Method",
    "detail": "Function (} auto* state_bitmap =)",
    "insertText": "StateBitmapFromAddr(slot_start)"
  },
  {
    "label": "Quarantine()",
    "kind": "Method",
    "detail": "Function ([ [ maybe_unused ] ] const bool succeeded = state_bitmap ->)",
    "insertText": "Quarantine(slot_start, instance.epoch())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PA_STARSCAN_EAGER_DOUBLE_FREE_DETECTION_ENABLED)",
    "insertText": "if(PA_UNLIKELY(!succeeded)) DoubleFreeAttempt()"
  },
  {
    "label": "AccountFreed()",
    "kind": "Method",
    "detail": "Function (# else # endif const bool is_limit_reached = instance . scheduler_ .)",
    "insertText": "AccountFreed(slot_size)"
  },
  {
    "label": "PerformScan()",
    "kind": "Method",
    "detail": "Function (instance .)",
    "insertText": "PerformScan(InvocationMode::kNonBlocking)"
  }
]