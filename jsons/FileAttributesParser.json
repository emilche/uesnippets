[
  {
    "label": "FFileAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileAttributes"
  },
  {
    "label": "FFileAttributesParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileAttributesParser"
  },
  {
    "label": "FFileAttributesParserFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileAttributesParserFactory"
  },
  {
    "label": "FFileAttributes()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformFileManager . h \" namespace BuildPatchServices { struct FFileAttributes { bool bReadOnly ; bool bCompressed ; bool bUnixExecutable ; TSet<FString> InstallTags ;)",
    "insertText": "FFileAttributes()"
  },
  {
    "label": "ParseFileAttributes()",
    "kind": "Method",
    "detail": "Function (} ; class FFileAttributesParser { public : bool)",
    "insertText": "ParseFileAttributes(const FString& MetaFilename, TMap<FString, FFileAttributes>& FileAttributes)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedRef<FFileAttributesParser,ESPMode::ThreadSafe> FFileAttributesParserRef ; typedef TSharedPtr<FFileAttributesParser,ESPMode::ThreadSafe> FFileAttributesParserPtr ; class FFileAttributesParserFactory { public : FFileAttributesParserRef)",
    "insertText": "Create(IPlatformFile& PlatformFile = FPlatformFileManager::Get().GetPlatformFile())"
  }
]