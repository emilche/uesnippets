[
  {
    "label": "FMeshSimplifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshSimplifier"
  },
  {
    "label": "FPerMaterialDeltas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerMaterialDeltas"
  },
  {
    "label": "FPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPair"
  },
  {
    "label": "ECornerFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECornerFlags"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Murmur32( {\n\t\tPosition.X == 0.0f ? 0u : x.i,\n\t\tPosition.Y == 0.0f ? 0u : y.i,\n\t\tPosition.Z == 0.0f ? 0u : z.i\n\t} )"
  },
  {
    "label": "FMeshSimplifier()",
    "kind": "Method",
    "detail": "Function (QUADRICMESHREDUCTION_API)",
    "insertText": "FMeshSimplifier( float* Verts, uint32 NumVerts, uint32* Indexes, uint32 NumIndexes, int32* MaterialIndexes, uint32 NumAttributes )"
  },
  {
    "label": "LockPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockPosition( const FVector3f& Position )"
  },
  {
    "label": "Simplify()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Simplify(\n\t\tuint32 TargetNumVerts, uint32 TargetNumTris, float TargetError,\n\t\tuint32 LimitNumVerts, uint32 LimitNumTris, float LimitError )"
  },
  {
    "label": "PreserveSurfaceArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreserveSurfaceArea()"
  },
  {
    "label": "DumpOBJ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpOBJ( const char* Filename )"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "AddUniquePair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUniquePair( FPair& Pair, uint32 PairIndex )"
  },
  {
    "label": "CalcTriQuadric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTriQuadric( uint32 TriIndex )"
  },
  {
    "label": "CalcEdgeQuadric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcEdgeQuadric( uint32 EdgeIndex )"
  },
  {
    "label": "EvaluateMerge()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateMerge( const FVector3f& Position0, const FVector3f& Position1, bool bMoveVerts )"
  },
  {
    "label": "BeginMovePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginMovePosition( const FVector3f& Position )"
  },
  {
    "label": "EndMovePositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMovePositions()"
  },
  {
    "label": "RemoveTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTri( uint32 TriIndex )"
  },
  {
    "label": "FixUpTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixUpTri( uint32 TriIndex )"
  },
  {
    "label": "SetVertIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertIndex( uint32 Corner, uint32 NewVertIndex )"
  },
  {
    "label": "RemoveDuplicateVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateVerts( uint32 Corner )"
  }
]