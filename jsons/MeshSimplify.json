[
  {
    "label": "FMeshSimplifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshSimplifier"
  },
  {
    "label": "FPerMaterialDeltas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerMaterialDeltas"
  },
  {
    "label": "FPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPair"
  },
  {
    "label": "ECornerFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECornerFlags"
  },
  {
    "label": "HashPosition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # define SIMP_REBASE 1 # include \" Quadric . h \" # include \" Containers / HashTable . h \" # include \" Containers / BinaryHeap . h \" # include \" DisjointSet . h \" uint32)",
    "insertText": "HashPosition(const FVector3f& Position)"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (union { float f ; uint32 i ; } x ; union { float f ; uint32 i ; } y ; union { float f ; uint32 i ; } z ; x . f = Position . X ; y . f = Position . Y ; z . f = Position . Z ; return)",
    "insertText": "Murmur32({ Position.X == 0.0f ? 0u : x.i, Position.Y == 0.0f ? 0u : y.i, Position.Z == 0.0f ? 0u : z.i })"
  },
  {
    "label": "Cycle3()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Cycle3(uint32 Value)"
  },
  {
    "label": "Value1Mod3()",
    "kind": "Method",
    "detail": "Function (uint32 ValueMod3 = Value % 3 ; uint32)",
    "insertText": "Value1Mod3(1 << ValueMod3)"
  },
  {
    "label": "FMeshSimplifier()",
    "kind": "Method",
    "detail": "Function (} class FMeshSimplifier { public :)",
    "insertText": "FMeshSimplifier(float* Verts, uint32 NumVerts, uint32* Indexes, uint32 NumIndexes, int32* MaterialIndexes, uint32 NumAttributes)"
  },
  {
    "label": "FMeshSimplifier()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMeshSimplifier()"
  },
  {
    "label": "SetAttributeWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeWeights(const float* Weights)"
  },
  {
    "label": "SetEdgeWeight()",
    "kind": "Method",
    "detail": "Function (AttributeWeights = Weights ; } void)",
    "insertText": "SetEdgeWeight(float Weight)"
  },
  {
    "label": "SetMaxEdgeLengthFactor()",
    "kind": "Method",
    "detail": "Function (EdgeWeight = Weight ; } void)",
    "insertText": "SetMaxEdgeLengthFactor(float Factor)"
  },
  {
    "label": "SetCorrectAttributes()",
    "kind": "Method",
    "detail": "Function (MaxEdgeLengthFactor = Factor ; } void)",
    "insertText": "SetCorrectAttributes(void (*Function)( float* ))"
  },
  {
    "label": "SetLimitErrorToSurfaceArea()",
    "kind": "Method",
    "detail": "Function (CorrectAttributes = Function ; } void)",
    "insertText": "SetLimitErrorToSurfaceArea(bool Value)"
  },
  {
    "label": "LockPosition()",
    "kind": "Method",
    "detail": "Function (bLimitErrorToSurfaceArea = Value ; } void)",
    "insertText": "LockPosition(const FVector3f& Position)"
  },
  {
    "label": "Simplify()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Simplify(uint32 TargetNumVerts, uint32 TargetNumTris, float TargetError, uint32 LimitNumVerts, uint32 LimitNumTris, float LimitError)"
  },
  {
    "label": "PreserveSurfaceArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreserveSurfaceArea()"
  },
  {
    "label": "DumpOBJ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpOBJ(const char* Filename)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "GetRemainingNumVerts()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRemainingNumVerts()"
  },
  {
    "label": "AdjTriMask()",
    "kind": "Method",
    "detail": "Function (bool bLimitErrorToSurfaceArea = true ; bool bZeroWeights = false ; FHashTable VertHash ; FHashTable CornerHash ; TArray<uint32> VertRefCount ; TArray<uint8> CornerFlags ; TBitArray<> TriRemoved ; struct FPerMaterialDeltas { float SurfaceArea ; int32 NumTris ; int32 NumDisjoint ; } ; TArray<FPerMaterialDeltas> PerMaterialDeltas ; struct FPair { FVector3f Position0 ; FVector3f Position1 ; } ; TArray<FPair> Pairs ; FHashTable PairHash0 ; FHashTable PairHash1 ; FBinaryHeap<float> PairHeap ; TArray<uint32> MovedVerts ; TArray<uint32> MovedCorners ; TArray<uint32> MovedPairs ; TArray<uint32> ReevaluatePairs ; TArray64<uint8> TriQuadrics ; TArray<FEdgeQuadric> EdgeQuadrics ; TBitArray<> EdgeQuadricsValid ; TArray<float> WedgeAttributes ; FDisjointSet WedgeDisjointSet ; enum ECornerFlags { MergeMask = 3,)",
    "insertText": "AdjTriMask(1 << 2), LockedVertMask = (1 << 3), RemoveTriMask = (1 << 4)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (protected : FVector3f&)",
    "insertText": "GetPosition(uint32 VertIndex)"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "GetAttributes(uint32 VertIndex)"
  },
  {
    "label": "GetTriQuadric()",
    "kind": "Method",
    "detail": "Function (FQuadricAttr&)",
    "insertText": "GetTriQuadric(uint32 TriIndex)"
  },
  {
    "label": "ForAllVerts()",
    "kind": "Method",
    "detail": "Function (template<FuncType> void)",
    "insertText": "ForAllVerts(const FVector3f& Position, FuncType&& Function)"
  },
  {
    "label": "ForAllCorners()",
    "kind": "Method",
    "detail": "Function (template<FuncType> void)",
    "insertText": "ForAllCorners(const FVector3f& Position, FuncType&& Function)"
  },
  {
    "label": "ForAllPairs()",
    "kind": "Method",
    "detail": "Function (template<FuncType> void)",
    "insertText": "ForAllPairs(const FVector3f& Position, FuncType&& Function)"
  },
  {
    "label": "AddUniquePair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUniquePair(FPair& Pair, uint32 PairIndex)"
  },
  {
    "label": "CalcTriQuadric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTriQuadric(uint32 TriIndex)"
  },
  {
    "label": "CalcEdgeQuadric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcEdgeQuadric(uint32 EdgeIndex)"
  },
  {
    "label": "EvaluateMerge()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvaluateMerge(const FVector3f& Position0, const FVector3f& Position1, bool bMoveVerts)"
  },
  {
    "label": "BeginMovePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginMovePosition(const FVector3f& Position)"
  },
  {
    "label": "EndMovePositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMovePositions()"
  },
  {
    "label": "CornerIndexMoved()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CornerIndexMoved(uint32 TriIndex)"
  },
  {
    "label": "TriWillInvert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriWillInvert(uint32 TriIndex, const FVector3f& NewPosition)"
  },
  {
    "label": "RemoveTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTri(uint32 TriIndex)"
  },
  {
    "label": "FixUpTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixUpTri(uint32 TriIndex)"
  },
  {
    "label": "IsDuplicateTri()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDuplicateTri(uint32 TriIndex)"
  },
  {
    "label": "SetVertIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertIndex(uint32 Corner, uint32 NewVertIndex)"
  },
  {
    "label": "RemoveDuplicateVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateVerts(uint32 Corner)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T QuadricSize =)",
    "insertText": "sizeof(FQuadricAttr ) + NumAttributes * 4 * sizeof( QScalar)"
  },
  {
    "label": "HashPosition()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "HashPosition(Position)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(VertIndex)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Corner)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(PairIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(uint32 PairIndex = PairHash1.First( Hash ); PairHash1.IsValid( PairIndex ); PairIndex = PairHash1.Next( PairIndex ))"
  }
]