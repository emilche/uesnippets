[
  {
    "label": "FWideCustomResolveVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWideCustomResolveVS"
  },
  {
    "label": "FWideCustomResolvePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWideCustomResolvePS"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" # include \" DataDrivenShaderPlatformInfo . h \" class FWideCustomResolveVS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FWideCustomResolveVS,Global)"
  },
  {
    "label": "FWideCustomResolveVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWideCustomResolveVS()"
  },
  {
    "label": "FWideCustomResolveVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWideCustomResolveVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader( Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned MSAASampleCount,unsigned Width,bool UseFMask> class FWideCustomResolvePS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FWideCustomResolvePS,Global)"
  },
  {
    "label": "FWideCustomResolvePS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWideCustomResolvePS()"
  },
  {
    "label": "FWideCustomResolvePS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWideCustomResolvePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader( Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Tex .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"Tex\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (FMaskTex .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"FMaskTex\"), SPF_Optional)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} ResolveOrigin .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ResolveOrigin\"))"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHITexture* Texture2DMS, FRHIShaderResourceView* FmaskSRV, FIntPoint Origin)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, Tex, Texture2DMS)"
  },
  {
    "label": "SetSRVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRVParameter(BatchedParameters, FMaskTex, FmaskSRV)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetShaderValue(BatchedParameters, ResolveOrigin, FVector2f(Origin))"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"WIDE_RESOLVE_WIDTH\"), Width)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MSAA_SAMPLE_COUNT\"), MSAASampleCount)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_FMASK\"), UseFMask)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, Tex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, FMaskTex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ResolveOrigin)"
  },
  {
    "label": "ResolveFilterWide()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ResolveFilterWide(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, const ERHIFeatureLevel::Type CurrentFeatureLevel, const FTextureRHIRef& SrcTexture, FRHIShaderResourceView* FmaskSRV, const FIntPoint& SrcOrigin, int32 NumSamples, int32 WideFilterWidth, FRHIBuffer* DummyVB)"
  }
]