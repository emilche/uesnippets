[
  {
    "label": "PatchTableFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTableFactory"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "EndCapType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EndCapType"
  },
  {
    "label": "PatchFaceTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatchFaceTag"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_PATCH_TABLE_FACTORY_H # define OPENSUBDIV3_FAR_PATCH_TABLE_FACTORY_H # include \" . . / version . h \" # include \" . . / far / topologyRefiner . h \" # include \" . . / far / patchTable . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchTableFactory { public : struct Options { enum EndCapType { ENDCAP_NONE = 0,ENDCAP_BILINEAR_BASIS,ENDCAP_BSPLINE_BASIS,ENDCAP_GREGORY_BASIS,ENDCAP_LEGACY_GREGORY } ;)",
    "insertText": "Options(unsigned int maxIsolation=10) : generateAllLevels(false), includeBaseLevelIndices(true), includeFVarBaseLevelIndices(false), triangulateQuads(false), useSingleCreasePatch(false), useInfSharpPatch(false), maxIsolationLevel(maxIsolation & 0xf), endCapType(ENDCAP_GREGORY_BASIS), shareEndCapPatchPoints(true), generateVaryingTables(true), generateVaryingLocalPoints(true), generateFVarTables(false), patchPrecisionDouble(false), fvarPatchPrecisionDouble(false), generateFVarLegacyLinearPatches(true), generateLegacySharpCornerPatches(true), numFVarChannels(-1), fvarChannelIndices(0)"
  },
  {
    "label": "GetEndCapType()",
    "kind": "Method",
    "detail": "Function (} EndCapType)",
    "insertText": "GetEndCapType()"
  },
  {
    "label": "SetEndCapType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEndCapType(EndCapType e)"
  },
  {
    "label": "SetMaxIsolationLevel()",
    "kind": "Method",
    "detail": "Function (endCapType = e& 0 x7 ; } void)",
    "insertText": "SetMaxIsolationLevel(unsigned int level)"
  },
  {
    "label": "SetPatchPrecision()",
    "kind": "Method",
    "detail": "Function (maxIsolationLevel = level& 0 xf ; } template<REAL> void)",
    "insertText": "SetPatchPrecision()"
  },
  {
    "label": "SetFVarPatchPrecision()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "SetFVarPatchPrecision()"
  },
  {
    "label": "GetRefineAdaptiveOptions()",
    "kind": "Method",
    "detail": "Function (TopologyRefiner::AdaptiveOptions)",
    "insertText": "GetRefineAdaptiveOptions()"
  },
  {
    "label": "adaptiveOptions()",
    "kind": "Method",
    "detail": "Function (TopologyRefiner::AdaptiveOptions)",
    "insertText": "adaptiveOptions(maxIsolationLevel)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (adaptiveOptions . useInfSharpPatch = useInfSharpPatch ; adaptiveOptions . useSingleCreasePatch = useSingleCreasePatch ; adaptiveOptions . considerFVarChannels = generateFVarTables&& ! generateFVarLegacyLinearPatches ; return adaptiveOptions ; } unsigned int generateAllLevels : 1,includeBaseLevelIndices : 1,includeFVarBaseLevelIndices : 1,triangulateQuads : 1,useSingleCreasePatch : 1,useInfSharpPatch : 1,maxIsolationLevel : 4,endCapType : 3,shareEndCapPatchPoints : 1,generateVaryingTables : 1,generateVaryingLocalPoints : 1,generateFVarTables : 1,patchPrecisionDouble : 1,fvarPatchPrecisionDouble : 1,generateFVarLegacyLinearPatches : 1,generateLegacySharpCornerPatches : 1 ; int numFVarChannels ; int const* fvarChannelIndices ; } ; PatchTable*)",
    "insertText": "Create(TopologyRefiner const & refiner, Options options = Options(), ConstIndexArray selectedFaces = ConstIndexArray())"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (public : struct PatchFaceTag { public : unsigned int _hasPatch : 1 ; unsigned int _isRegular : 1 ; unsigned int _transitionMask : 4 ; unsigned int _boundaryMask : 4 ; unsigned int _boundaryIndex : 2 ; unsigned int _boundaryCount : 3 ; unsigned int _hasBoundaryEdge : 3 ; unsigned int _isSingleCrease : 1 ; void)",
    "insertText": "clear()"
  },
  {
    "label": "assignBoundaryPropertiesFromEdgeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignBoundaryPropertiesFromEdgeMask(int boundaryEdgeMask)"
  },
  {
    "label": "assignBoundaryPropertiesFromVertexMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignBoundaryPropertiesFromVertexMask(int boundaryVertexMask)"
  },
  {
    "label": "assignTransitionPropertiesFromEdgeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignTransitionPropertiesFromEdgeMask(int boundaryVertexMask)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::vector<PatchFaceTag> PatchTagVector ; } ; template<> void PatchTableFactory::Options::SetPatchPrecision<)",
    "insertText": "float()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (fvarPatchPrecisionDouble = false ; } template<> void PatchTableFactory::Options::SetPatchPrecision<)",
    "insertText": "double()"
  }
]