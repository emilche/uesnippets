[
  {
    "label": "MachineBranchProbabilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBranchProbabilityInfo"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEBRANCHPROBABILITYINFO_H # define LLVM_CODEGEN_MACHINEBRANCHPROBABILITYINFO_H # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / BranchProbability . h \" # include<climits> namespace llvm { class MachineBranchProbabilityInfo : public ImmutablePass { void)",
    "insertText": "anchor()"
  },
  {
    "label": "MachineBranchProbabilityInfo()",
    "kind": "Method",
    "detail": "Function (const uint32_t DEFAULT_WEIGHT = 1 6 ; public : char ID ;)",
    "insertText": "MachineBranchProbabilityInfo() : ImmutablePass(ID)"
  },
  {
    "label": "getPassRegistry()",
    "kind": "Method",
    "detail": "Function (PassRegistry& Registry =*)",
    "insertText": "getPassRegistry()"
  },
  {
    "label": "initializeMachineBranchProbabilityInfoPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeMachineBranchProbabilityInfoPass(Registry)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "getEdgeWeight()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getEdgeWeight(const MachineBasicBlock *Src, const MachineBasicBlock *Dst)"
  },
  {
    "label": "getEdgeWeight()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getEdgeWeight(const MachineBasicBlock *Src, MachineBasicBlock::const_succ_iterator Dst)"
  },
  {
    "label": "getSumForBlock()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSumForBlock(const MachineBasicBlock *MBB, uint32_t &Scale)"
  },
  {
    "label": "isEdgeHot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEdgeHot(const MachineBasicBlock *Src, const MachineBasicBlock *Dst)"
  },
  {
    "label": "getHotSucc()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock*)",
    "insertText": "getHotSucc(MachineBasicBlock *MBB)"
  },
  {
    "label": "getEdgeProbability()",
    "kind": "Method",
    "detail": "Function (BranchProbability)",
    "insertText": "getEdgeProbability(const MachineBasicBlock *Src, const MachineBasicBlock *Dst)"
  },
  {
    "label": "printEdgeProbability()",
    "kind": "Method",
    "detail": "Function (raw_ostream&)",
    "insertText": "printEdgeProbability(raw_ostream &OS, const MachineBasicBlock *Src, const MachineBasicBlock *Dst)"
  }
]