[
  {
    "label": "Rec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rec"
  },
  {
    "label": "TestStress()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCoordinatorWrapper . h \" # include \" UbaScheduler . h \" # include \" UbaSessionServer . h \" # include \" UbaStorageServer . h \" namespace uba { bool)",
    "insertText": "TestStress(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "networkBackend()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "networkBackend(logWriter)"
  },
  {
    "label": "networkServer()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "networkServer(ctorSuccess, { logWriter })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> rootDir ; rootDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"Uba\"))"
  },
  {
    "label": "storageServerInfo()",
    "kind": "Method",
    "detail": "Function (StorageServerCreateInfo)",
    "insertText": "storageServerInfo(networkServer, rootDir.data, logWriter)"
  },
  {
    "label": "storageServer()",
    "kind": "Method",
    "detail": "Function (storageServerInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; StorageServer)",
    "insertText": "storageServer(storageServerInfo)"
  },
  {
    "label": "sessionServerInfo()",
    "kind": "Method",
    "detail": "Function (SessionServerCreateInfo)",
    "insertText": "sessionServerInfo(storageServer, networkServer, logWriter)"
  },
  {
    "label": "sessionServer()",
    "kind": "Method",
    "detail": "Function (sessionServerInfo . checkMemory = false ; sessionServerInfo . rootDir = rootDir . data ; sessionServerInfo . traceEnabled = true ; SessionServer)",
    "insertText": "sessionServer(sessionServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto sg =)",
    "insertText": "MakeGuard([&]() { networkServer.DisconnectClients(); })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> workingDir ; workingDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"WorkingDir\"))"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (workingDir .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (SchedulerCreateInfo)",
    "insertText": "info(sessionServer)"
  },
  {
    "label": "scheduler()",
    "kind": "Method",
    "detail": "Function (info . enableProcessReuse = true ; info . maxLocalProcessors = 1 ; Scheduler)",
    "insertText": "scheduler(info)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (scheduler .)",
    "insertText": "Start()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CoordinatorWrapper coordinator ; bool useCoordinator = true ;)",
    "insertText": "if(useCoordinator)"
  },
  {
    "label": "coordinatorWorkDir()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2>)",
    "insertText": "coordinatorWorkDir(testRootDir)"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (coordinatorWorkDir .)",
    "insertText": "EnsureEndsWithSlash().Append(TC(\"Horde\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> binariesDir ;)",
    "insertText": "if(!GetDirectoryOfCurrentModule(logger, binariesDir))"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (CoordinatorCreateInfo cinfo ; cinfo . workDir = coordinatorWorkDir . data ; cinfo . binariesDir = binariesDir . data ; cinfo . pool =)",
    "insertText": "TC(\"PoolToUse\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cinfo . maxCoreCount = 4 0 0 ; cinfo . logging = true ;)",
    "insertText": "if(!coordinator.Create(logger, TC(\"Horde\"), cinfo, networkBackend, networkServer))"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (} auto cg =)",
    "insertText": "MakeGuard([&]() { coordinator.Destroy(); })"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> testApp ;)",
    "insertText": "GetTestAppPath(logger, testApp)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u32 counter = 0 ; Atomic<u32> activeCount ; Atomic<bool> error ;)",
    "insertText": "while(true)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> fileName ; fileName .)",
    "insertText": "Append(workingDir).Append(TC(\"File_\")).AppendValue(counter++).Append(TC(\".in\"))"
  },
  {
    "label": "fa()",
    "kind": "Method",
    "detail": "Function ({ FileAccessor)",
    "insertText": "fa(logger, fileName.data)"
  },
  {
    "label": "CreateWrite()",
    "kind": "Method",
    "detail": "Function (fa .)",
    "insertText": "CreateWrite()"
  },
  {
    "label": "CreateGuid()",
    "kind": "Method",
    "detail": "Function (Guid g ;)",
    "insertText": "CreateGuid(g)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (fa .)",
    "insertText": "Write(&g, sizeof(g))"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (fa .)",
    "insertText": "Close()"
  },
  {
    "label": "RegisterNewFile()",
    "kind": "Method",
    "detail": "Function (} sessionServer .)",
    "insertText": "RegisterNewFile(fileName.data)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> args ; args .)",
    "insertText": "Append(TC(\"-file=\")).Append(fileName)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (ProcessStartInfo pi ; pi . application = testApp . data ; pi . arguments = args . data ; pi . workingDir = workingDir . data ; pi . description = fileName .)",
    "insertText": "Last(PathSeparator)"
  },
  {
    "label": "exitedFunc()",
    "kind": "Method",
    "detail": "Function (struct Rec { Logger& logger ; StringBuffer<2 5 6> inFile ; Atomic<u32>& activeCount ; Atomic<bool>& error ; } ; pi . userData = new Rec { logger,fileName,activeCount,error } ; pi .)",
    "insertText": "exitedFunc(void* userData, const ProcessHandle& ph)"
  },
  {
    "label": "rec()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "rec(Rec*)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (rec -> logger .)",
    "insertText": "Error(TC(\"Process %s failed with exit code %u\"), ph.GetStartInfo().GetDescription(), exitCode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (rec -> error = true ; } else { auto& logger = rec -> logger ;)",
    "insertText": "if(!DeleteFileW(rec->inFile.data))"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Error(TC(\"Failed to delete file %s\"), rec->inFile.data)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (rec -> error = true ; } StringBuffer<2 5 6> outFile ; outFile .)",
    "insertText": "Append(rec->inFile.data, rec->inFile.count - 2).Append(TC(\"out\"))"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Error(TC(\"Couldn't find output file %s\"), outFile.data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (rec -> error = true ; })",
    "insertText": "if(!DeleteFileW(outFile.data))"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Error(TC(\"Failed to delete file %s\"), outFile.data)"
  },
  {
    "label": "epi()",
    "kind": "Method",
    "detail": "Function (rec -> error = true ; } } - - rec -> activeCount ; delete rec ; } ; EnqueueProcessInfo)",
    "insertText": "epi(pi)"
  },
  {
    "label": "EnqueueProcess()",
    "kind": "Method",
    "detail": "Function (scheduler .)",
    "insertText": "EnqueueProcess(epi)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + activeCount ;)",
    "insertText": "while(activeCount > 800) Sleep(100)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (u32 queued ; u32 activeLocal ; u32 activeRemote ; u32 finished ; scheduler .)",
    "insertText": "GetStats(queued, activeLocal, activeRemote, finished)"
  },
  {
    "label": "StopListen()",
    "kind": "Method",
    "detail": "Function (} break ; } networkBackend .)",
    "insertText": "StopListen()"
  },
  {
    "label": "DisconnectClients()",
    "kind": "Method",
    "detail": "Function (networkServer .)",
    "insertText": "DisconnectClients()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (scheduler .)",
    "insertText": "Stop()"
  }
]