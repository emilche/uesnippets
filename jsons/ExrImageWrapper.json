[
  {
    "label": "FExrImageWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExrImageWrapper"
  },
  {
    "label": "FExrImageWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" ImageWrapperBase . h \" # if WITH_UNREALEXR | | WITH_UNREALEXR_MINIMAL # if WITH_UNREALEXR THIRD_PARTY_INCLUDES_START # include \" Imath / ImathBox . h \" # include \" OpenEXR / ImfArray . h \" # include \" OpenEXR / ImfChannelList . h \" # include \" OpenEXR / ImfHeader . h \" # include \" OpenEXR / ImfIO . h \" # include \" OpenEXR / ImfInputFile . h \" # include \" OpenEXR / ImfOutputFile . h \" # include \" OpenEXR / ImfRgbaFile . h \" # include \" OpenEXR / ImfStandardAttributes . h \" # include \" OpenEXR / ImfStdIO . h \" # include \" OpenEXR / ImfVersion . h \" THIRD_PARTY_INCLUDES_END # endif class FExrImageWrapper : public FImageWrapperBase { public :)",
    "insertText": "FExrImageWrapper()"
  },
  {
    "label": "SetCompressed()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SetCompressed(const void* InCompressedData, int64 InCompressedSize)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress(int32 Quality)"
  },
  {
    "label": "Uncompress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uncompress(const ERGBFormat InFormat, int32 InBitDepth)"
  },
  {
    "label": "CanSetRawFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetRawFormat(const ERGBFormat InFormat, const int32 InBitDepth)"
  },
  {
    "label": "GetSupportedRawFormat()",
    "kind": "Method",
    "detail": "Function (ERawImageFormat::Type)",
    "insertText": "GetSupportedRawFormat(const ERawImageFormat::Type InFormat)"
  },
  {
    "label": "MakeUniqueCString()",
    "kind": "Method",
    "detail": "Function (typedef TUniquePtr<char [ ]> FUniqueCString ; FUniqueCString)",
    "insertText": "MakeUniqueCString(const char *str)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (size_t num =)",
    "insertText": "strlen(str)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (FUniqueCString Ret = MakeUnique<)",
    "insertText": "char(num)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(Ret.Get(),str,num)"
  }
]