[
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "GCOVOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCOVOptions"
  },
  {
    "label": "InstrProfOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstrProfOptions"
  },
  {
    "label": "SanitizerCoverageOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SanitizerCoverageOptions"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_INSTRUMENTATION_H # define LLVM_TRANSFORMS_INSTRUMENTATION_H # include \" llvm / ADT / StringRef . h \" # include<vector> # if)",
    "insertText": "defined(__GNUC__) && defined(__linux__) && !defined(ANDROID) inline void *getDFSanArgTLSPtrForJIT()"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (__thread)",
    "insertText": "__attribute__((tls_model(\"initial-exec\")))"
  },
  {
    "label": "getDFSanRetValTLSPtrForJIT()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "getDFSanRetValTLSPtrForJIT()"
  },
  {
    "label": "getDefault()",
    "kind": "Method",
    "detail": "Function (} # endif namespace llvm { class ModulePass ; class FunctionPass ; struct GCOVOptions { GCOVOptions)",
    "insertText": "getDefault()"
  },
  {
    "label": "createGCOVProfilerPass()",
    "kind": "Method",
    "detail": "Function (bool EmitNotes ; bool EmitData ; char Version [ 4 ] ; bool UseCfgChecksum ; bool NoRedZone ; bool FunctionNamesInData ; bool ExitBlockBeforeBody ; } ; ModulePass*)",
    "insertText": "createGCOVProfilerPass(const GCOVOptions &Options = GCOVOptions::getDefault())"
  },
  {
    "label": "InstrProfOptions()",
    "kind": "Method",
    "detail": "Function (struct InstrProfOptions {)",
    "insertText": "InstrProfOptions() : NoRedZone(false)"
  },
  {
    "label": "createInstrProfilingPass()",
    "kind": "Method",
    "detail": "Function (} bool NoRedZone ; std::string InstrProfileOutput ; } ; ModulePass*)",
    "insertText": "createInstrProfilingPass(const InstrProfOptions &Options = InstrProfOptions())"
  },
  {
    "label": "createAddressSanitizerFunctionPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createAddressSanitizerFunctionPass(bool CompileKernel = false)"
  },
  {
    "label": "createAddressSanitizerModulePass()",
    "kind": "Method",
    "detail": "Function (ModulePass*)",
    "insertText": "createAddressSanitizerModulePass(bool CompileKernel = false)"
  },
  {
    "label": "createMemorySanitizerPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createMemorySanitizerPass(int TrackOrigins = 0)"
  },
  {
    "label": "createThreadSanitizerPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createThreadSanitizerPass()"
  },
  {
    "label": "createDataFlowSanitizerPass()",
    "kind": "Method",
    "detail": "Function (ModulePass*)",
    "insertText": "createDataFlowSanitizerPass(const std::vector<std::string> &ABIListFiles = std::vector<std::string>(), void *(*getArgTLS)() = nullptr, void *(*getRetValTLS)() = nullptr)"
  },
  {
    "label": "SanitizerCoverageOptions()",
    "kind": "Method",
    "detail": "Function (struct SanitizerCoverageOptions {)",
    "insertText": "SanitizerCoverageOptions() : CoverageType(SCK_None), IndirectCalls(false), TraceBB(false), TraceCmp(false), Use8bitCounters(false)"
  },
  {
    "label": "createSanitizerCoverageModulePass()",
    "kind": "Method",
    "detail": "Function (} enum Type { SCK_None = 0,SCK_Function,SCK_BB,SCK_Edge } CoverageType ; bool IndirectCalls ; bool TraceBB ; bool TraceCmp ; bool Use8bitCounters ; } ; ModulePass*)",
    "insertText": "createSanitizerCoverageModulePass(const SanitizerCoverageOptions &Options = SanitizerCoverageOptions())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && defined(__linux__) && !defined(ANDROID) inline ModulePass *createDataFlowSanitizerPassForJIT( const std::vector<std::string> &ABIListFiles = std::vector<std::string>())"
  },
  {
    "label": "createBoundsCheckingPass()",
    "kind": "Method",
    "detail": "Function (} # endif FunctionPass*)",
    "insertText": "createBoundsCheckingPass()"
  },
  {
    "label": "createSafeStackPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createSafeStackPass()"
  }
]