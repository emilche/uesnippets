[
  {
    "label": "Mangler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mangler"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "ObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectFile"
  },
  {
    "label": "IRObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRObjectFile"
  },
  {
    "label": "IRObjectFile()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_IROBJECTFILE_H # define LLVM_OBJECT_IROBJECTFILE_H # include \" llvm / Object / SymbolicFile . h \" namespace llvm { class Mangler ; class Module ; class GlobalValue ; namespace object { class ObjectFile ; class IRObjectFile : public SymbolicFile { std::unique_ptr<Module> M ; std::unique_ptr<Mangler> Mang ; std::vector<std::pair<std::string,uint32_t>> AsmSymbols ; public :)",
    "insertText": "IRObjectFile(MemoryBufferRef Object, std::unique_ptr<Module> M)"
  },
  {
    "label": "IRObjectFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IRObjectFile()"
  },
  {
    "label": "moveSymbolNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveSymbolNext(DataRefImpl &Symb)"
  },
  {
    "label": "printSymbolName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "printSymbolName(raw_ostream &OS, DataRefImpl Symb)"
  },
  {
    "label": "getSymbolFlags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSymbolFlags(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolGV()",
    "kind": "Method",
    "detail": "Function (GlobalValue*)",
    "insertText": "getSymbolGV(DataRefImpl Symb)"
  },
  {
    "label": "symbol_begin_impl()",
    "kind": "Method",
    "detail": "Function (} basic_symbol_iterator)",
    "insertText": "symbol_begin_impl()"
  },
  {
    "label": "symbol_end_impl()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_end_impl()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (const Module&)",
    "insertText": "getModule()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Binary *v)"
  },
  {
    "label": "findBitcodeInObject()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<MemoryBufferRef>)",
    "insertText": "findBitcodeInObject(const ObjectFile &Obj)"
  },
  {
    "label": "findBitcodeInMemBuffer()",
    "kind": "Method",
    "detail": "Function (ErrorOr<MemoryBufferRef>)",
    "insertText": "findBitcodeInMemBuffer(MemoryBufferRef Object)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<IRObjectFile>>)",
    "insertText": "create(MemoryBufferRef Object, LLVMContext &Context)"
  }
]