[
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FWidgetRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetRenderer"
  },
  {
    "label": "SVirtualWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualWindow"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FWidgetComponentInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetComponentInstanceData"
  },
  {
    "label": "FWidget3DHitTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidget3DHitTester"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Layout / ArrangedWidget . h \" # include \" WorldCollision . h \" # include \" Components / MeshComponent . h \" # include \" Blueprint / UserWidget . h \" # include \" WidgetComponent . generated . h \" class FHittestGrid ; class FPrimitiveSceneProxy ; class FWidgetRenderer ; class SVirtualWindow ; class SWindow ; class UBodySetup ; class UMaterialInstanceDynamic ; class UTextureRenderTarget2D ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Disabled,Enabled,Automatic } ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=\"UserInterface\", hidecategories=(Object,Activation,\"Components|Activation\",Sockets,Base,Lighting,LOD,Mesh), editinlinenew, meta=(BlueprintSpawnableComponent) , MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UMG_API virtual void Serialize(FArchive& Ar)"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform & LocalToWorld)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "GetCollisionShape()",
    "kind": "Method",
    "detail": "Function (FCollisionShape)",
    "insertText": "GetCollisionShape(float Inflation)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "DestroyComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyComponent(bool bPromoteChildren = false)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, UMaterialInterface* Material)"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FWidgetComponentInstanceData* ComponentInstanceData)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "InitWidget()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitWidget()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "UpdateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidget()"
  },
  {
    "label": "UpdateRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderTarget(FIntPoint DesiredRenderTargetSize)"
  },
  {
    "label": "UpdateBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBodySetup(bool bDrawSizeChanged = false)"
  },
  {
    "label": "GetLocalHitLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalHitLocation(FVector WorldHitLocation, FVector2D& OutLocalHitLocation)"
  },
  {
    "label": "GetCylinderHitLocation()",
    "kind": "Method",
    "detail": "Function (TTuple<FVector,FVector2D>)",
    "insertText": "GetCylinderHitLocation(FVector WorldHitLocation, FVector WorldHitDirection)"
  },
  {
    "label": "GetLastLocalHitLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetLastLocalHitLocation()"
  },
  {
    "label": "GetSlateWidget()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SWidget>&)",
    "insertText": "GetSlateWidget()"
  },
  {
    "label": "GetHitWidgetPath()",
    "kind": "Method",
    "detail": "Function (TArray<FWidgetAndPointer>)",
    "insertText": "GetHitWidgetPath(FVector WorldHitLocation, bool bIgnoreEnabledStatus, float CursorRadius = 0.0f)"
  },
  {
    "label": "GetHitWidgetPath()",
    "kind": "Method",
    "detail": "Function (TArray<FWidgetAndPointer>)",
    "insertText": "GetHitWidgetPath(FVector2D WidgetSpaceHitCoordinate, bool bIgnoreEnabledStatus, float CursorRadius = 0.0f)"
  },
  {
    "label": "GetSlateWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetSlateWindow()"
  },
  {
    "label": "SetSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateWidget(const TSharedPtr<SWidget>& InSlateWidget)"
  },
  {
    "label": "GetBlendMode()",
    "kind": "Method",
    "detail": "Function (EWidgetBlendMode)",
    "insertText": "GetBlendMode()"
  },
  {
    "label": "SetOpacityFromTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacityFromTexture(const float NewOpacityFromTexture)"
  },
  {
    "label": "GetVirtualWindow()",
    "kind": "Method",
    "detail": "Function (RedrawTime = InRedrawTime ; } TSharedPtr<SWindow>)",
    "insertText": "GetVirtualWindow()"
  },
  {
    "label": "UpdateMaterialInstanceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialInstanceParameters()"
  },
  {
    "label": "SetWidgetClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetClass(TSubclassOf<UUserWidget> InWidgetClass)"
  },
  {
    "label": "GetEditTimeUsable()",
    "kind": "Method",
    "detail": "Function (Space = NewSpace ; } bool)",
    "insertText": "GetEditTimeUsable()"
  },
  {
    "label": "GetReceiveHardwareInput()",
    "kind": "Method",
    "detail": "Function (GeometryMode = InGeometryMode ; } bool)",
    "insertText": "GetReceiveHardwareInput()"
  },
  {
    "label": "SetInitialSharedLayerName()",
    "kind": "Method",
    "detail": "Function (CylinderArcAngle = InCylinderArcAngle ; } void)",
    "insertText": "SetInitialSharedLayerName(FName NewSharedLayerName)"
  },
  {
    "label": "SetInitialLayerZOrder()",
    "kind": "Method",
    "detail": "Function (SharedLayerName = NewSharedLayerName ; } void)",
    "insertText": "SetInitialLayerZOrder(int32 NewLayerZOrder)"
  },
  {
    "label": "ModifyProjectedLocalPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ModifyProjectedLocalPosition(const FGeometry& ViewportGeometry, const FVector2D& LocalPosition)"
  },
  {
    "label": "CanReceiveHardwareInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveHardwareInput()"
  },
  {
    "label": "RegisterHitTesterWithViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterHitTesterWithViewport(TSharedPtr<SViewport> ViewportWidget)"
  },
  {
    "label": "UnregisterHitTesterWithViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterHitTesterWithViewport(TSharedPtr<SViewport> ViewportWidget)"
  },
  {
    "label": "RegisterWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWindow()"
  },
  {
    "label": "UnregisterWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWindow()"
  },
  {
    "label": "RemoveWidgetFromScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidgetFromScreen()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "DrawWidgetToRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWidgetToRenderTarget(float DeltaTime)"
  },
  {
    "label": "ComputeComponentWidth()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ComputeComponentWidth()"
  },
  {
    "label": "UpdateMaterialInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialInstance()"
  },
  {
    "label": "OnHiddenInGameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHiddenInGameChanged()"
  },
  {
    "label": "ShouldReenableComponentTickWhenWidgetBecomesVisible()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SVirtualWindow> SlateWindow ; FVector2D LastLocalHitLocation ; TSharedPtr<class FWidget3DHitTester> WidgetHitTester ; class FWidgetRenderer* WidgetRenderer ; private : bool)",
    "insertText": "ShouldReenableComponentTickWhenWidgetBecomesVisible()"
  },
  {
    "label": "ConvertWindowVisibilityToVisibility()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> SlateWidget ; TWeakPtr<SWidget> CurrentSlateWidget ; EVisibility)",
    "insertText": "ConvertWindowVisibilityToVisibility(EWindowVisibility visibility)"
  },
  {
    "label": "OnWidgetVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetVisibilityChanged(ESlateVisibility InVisibility)"
  },
  {
    "label": "UpdateWidgetOnScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidgetOnScreen()"
  },
  {
    "label": "AddWidgetToScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetToScreen(ULocalPlayer* TargetPlayer)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (bool bRenderCleared ; bool bOnWidgetVisibilityChangedRegistered ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FWidgetComponentInstanceData() : RenderTarget(nullptr)"
  },
  {
    "label": "FWidgetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetComponentInstanceData(const UWidgetComponent* SourceComponent) : FSceneComponentInstanceData(SourceComponent) , WidgetClass(SourceComponent->GetWidgetClass()) , RenderTarget(SourceComponent->GetRenderTarget())"
  },
  {
    "label": "FWidgetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWidgetComponentInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(Component, CacheApplyPhase)"
  },
  {
    "label": "UWidgetComponent()",
    "kind": "Method",
    "detail": "Function (CastChecked<)",
    "insertText": "UWidgetComponent(Component)->ApplyComponentInstanceData(this)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(WidgetClass.GetGCPtr())"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(RenderTarget)"
  }
]