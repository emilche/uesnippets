[
  {
    "label": "AsmToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmToken"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCParsedAsmOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCParsedAsmOperand"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "SMLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMLoc"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "AsmRewriteKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AsmRewriteKind"
  },
  {
    "label": "AsmRewrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AsmRewrite"
  },
  {
    "label": "ParseInstructionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParseInstructionInfo"
  },
  {
    "label": "MCTargetAsmParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetAsmParser"
  },
  {
    "label": "MatchResultTy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatchResultTy"
  },
  {
    "label": "AsmRewrite()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCTARGETASMPARSER_H # define LLVM_MC_MCTARGETASMPARSER_H # include \" llvm / MC / MCExpr . h \" # include \" llvm / MC / MCParser / MCAsmParserExtension . h \" # include \" llvm / MC / MCTargetOptions . h \" # include<memory> namespace llvm { class AsmToken ; class MCInst ; class MCParsedAsmOperand ; class MCStreamer ; class SMLoc ; class StringRef ; template<T> class SmallVectorImpl ; typedef SmallVectorImpl<std::unique_ptr<MCParsedAsmOperand>> OperandVector ; enum AsmRewriteKind { AOK_Delete = 0,AOK_Align,AOK_DotOperator,AOK_Emit,AOK_Imm,AOK_ImmPrefix,AOK_Input,AOK_Output,AOK_SizeDirective,AOK_Label,AOK_Skip } ; const char AsmRewritePrecedence [ ] = { 0,2,2,2,4,4,3,3,5,1,2 } ; struct AsmRewrite { AsmRewriteKind Kind ; SMLoc Loc ; unsigned Len ; unsigned Val ; StringRef Label ; public :)",
    "insertText": "AsmRewrite(AsmRewriteKind kind, SMLoc loc, unsigned len = 0, unsigned val = 0) : Kind(kind), Loc(loc), Len(len), Val(val)"
  },
  {
    "label": "AsmRewrite()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsmRewrite(AsmRewriteKind kind, SMLoc loc, unsigned len, StringRef label) : Kind(kind), Loc(loc), Len(len), Val(0), Label(label)"
  },
  {
    "label": "ParseInstructionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct ParseInstructionInfo { SmallVectorImpl<AsmRewrite>* AsmRewrites ;)",
    "insertText": "ParseInstructionInfo() : AsmRewrites(nullptr)"
  },
  {
    "label": "ParseInstructionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ParseInstructionInfo(SmallVectorImpl<AsmRewrite> *rewrites) : AsmRewrites(rewrites)"
  },
  {
    "label": "MCTargetAsmParser()",
    "kind": "Method",
    "detail": "Function (} } ; class MCTargetAsmParser : public MCAsmParserExtension { public : enum MatchResultTy { Match_InvalidOperand,Match_MissingFeature,Match_MnemonicFail,Match_Success,FIRST_TARGET_MATCH_RESULT_TY } ; private :)",
    "insertText": "MCTargetAsmParser(const MCTargetAsmParser &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCTargetAsmParser &)"
  },
  {
    "label": "MCTargetAsmParser()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "MCTargetAsmParser()"
  },
  {
    "label": "getAvailableFeatures()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getAvailableFeatures()"
  },
  {
    "label": "isParsingInlineAsm()",
    "kind": "Method",
    "detail": "Function (AvailableFeatures = Value ; } bool)",
    "insertText": "isParsingInlineAsm()"
  },
  {
    "label": "getTargetOptions()",
    "kind": "Method",
    "detail": "Function (ParsingInlineAsm = Value ; } MCTargetOptions)",
    "insertText": "getTargetOptions()"
  },
  {
    "label": "ParseRegister()",
    "kind": "Method",
    "detail": "Function (SemaCallback = Callback ; } bool)",
    "insertText": "ParseRegister(unsigned &RegNo, SMLoc &StartLoc, SMLoc &EndLoc)"
  },
  {
    "label": "SetFrameRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameRegister(unsigned RegNo)"
  },
  {
    "label": "ParseInstruction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ParseInstruction(ParseInstructionInfo &Info, StringRef Name, SMLoc NameLoc, OperandVector &Operands)"
  },
  {
    "label": "ParseDirective()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDirective(AsmToken DirectiveID)"
  },
  {
    "label": "mnemonicIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mnemonicIsValid(StringRef Mnemonic, unsigned VariantID)"
  },
  {
    "label": "MatchAndEmitInstruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode, OperandVector &Operands, MCStreamer &Out, uint64_t &ErrorInfo, bool MatchingInlineAsm)"
  },
  {
    "label": "OmitRegisterFromClobberLists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OmitRegisterFromClobberLists(unsigned RegNo)"
  },
  {
    "label": "applyModifierToExpr()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "applyModifierToExpr(const MCExpr *E, MCSymbolRefExpr::VariantKind, MCContext &Ctx)"
  }
]