[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FDecompositionQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecompositionQuery"
  },
  {
    "label": "FWeightedValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedValue"
  },
  {
    "label": "FAccumulatedWeightedValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatedWeightedValue"
  },
  {
    "label": "FDecomposedValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecomposedValue"
  },
  {
    "label": "FResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MS_ALIGN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MS_ALIGN"
  },
  {
    "label": "FValueDecompositionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueDecompositionParams"
  },
  {
    "label": "TRecompositionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRecompositionResult"
  },
  {
    "label": "UMovieSceneValueDecomposer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneValueDecomposer"
  },
  {
    "label": "IMovieSceneValueDecomposer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieSceneValueDecomposer"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" HAL / Platform . h \" # include \" Templates / Tuple . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" UObject / Interface . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneDecompositionQuery . generated . h \" class UObject ; namespace UE { namespace MovieScene { struct FDecompositionQuery { TArrayView<const FMovieSceneEntityID> Entities ; bool bConvertFromSourceEntityIDs = true ; UObject* Object = nullptr ; } ; struct FWeightedValue { double Value = 0 . f ; float Weight = 0 . f ; double BaseValue = 0 . f ; int32 BlendingOrder = INDEX_NONE ; bool bIsAdditive = true ; double)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FWeightedValue& RHS)"
  },
  {
    "label": "AccumulateThis()",
    "kind": "Method",
    "detail": "Function (TotalWeight + = Other . Weight ; return* this ; } FORCENOINLINE FAccumulatedWeightedValue&)",
    "insertText": "AccumulateThis(const FAccumulatedWeightedValue& Other)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Total + = Other . Total ; TotalWeight + = Other . TotalWeight ; return* this ; } FORCENOINLINE FAccumulatedWeightedValue)",
    "insertText": "Accumulate(const FWeightedValue& Other)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE FAccumulatedWeightedValue)",
    "insertText": "Accumulate(const FAccumulatedWeightedValue& Other)"
  },
  {
    "label": "Decompose()",
    "kind": "Method",
    "detail": "Function (private : enum class EDecomposedValueBlendType { Absolute,Additive,AdditiveFromBase,Override,} ; void)",
    "insertText": "Decompose(FMovieSceneEntityID EntityID, FWeightedValue& ThisValue, EDecomposedValueBlendType& OutBlendType, FAccumulatedWeightedValue& Absolutes, FAccumulatedWeightedValue& Additives)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (} ; struct)",
    "insertText": "MS_ALIGN(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (FDecomposedValue Value ; })",
    "insertText": "GCC_ALIGN(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "TRecompositionResult()",
    "kind": "Method",
    "detail": "Function (struct FValueDecompositionParams { FDecompositionQuery Query ; uint16 DecomposeBlendChannel ; FMovieSceneEntityID PropertyEntityID ; FComponentTypeID ResultComponentType ; FComponentTypeID PropertyTag ; } ; template<PropertyType> struct TRecompositionResult {)",
    "insertText": "TRecompositionResult(const PropertyType& InCurrentValue, int32 Num)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Add(InCurrentValue)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} } TArray<PropertyType,TInlineAllocator<1>> Values ; } ; } })",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IMovieSceneValueDecomposer { public :)",
    "insertText": "GENERATED_BODY() virtual FGraphEventRef DispatchDecomposeTask(const UE::MovieScene::FValueDecompositionParams& Params, UE::MovieScene::FAlignedDecomposedValue* Output)"
  }
]