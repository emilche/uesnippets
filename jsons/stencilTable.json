[
  {
    "label": "PatchTableBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTableBuilder"
  },
  {
    "label": "StencilTableFactoryReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTableFactoryReal"
  },
  {
    "label": "LimitStencilTableFactoryReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTableFactoryReal"
  },
  {
    "label": "StencilReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilReal"
  },
  {
    "label": "Stencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stencil"
  },
  {
    "label": "StencilTableReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTableReal"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "Far",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Far"
  },
  {
    "label": "StencilTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTable"
  },
  {
    "label": "LimitStencilReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilReal"
  },
  {
    "label": "LimitStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencil"
  },
  {
    "label": "LimitStencilTableReal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTableReal"
  },
  {
    "label": "LimitStencilTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitStencilTable"
  },
  {
    "label": "StencilReal()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_STENCILTABLE_H # define OPENSUBDIV3_FAR_STENCILTABLE_H # include \" . . / version . h \" # include \" . . / far / types . h \" # include<cassert> # include<cstring> # include<vector> # include<iostream> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchTableBuilder ; template<REAL> class StencilTableFactoryReal ; template<REAL> class LimitStencilTableFactoryReal ; template<REAL> class StencilReal { public :)",
    "insertText": "StencilReal()"
  },
  {
    "label": "StencilReal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StencilReal(int * size, Index * indices, REAL * weights) : _size(size), _indices(indices), _weights(weights)"
  },
  {
    "label": "StencilReal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StencilReal(StencilReal const & other)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (_size = other . _size ; _indices = other . _indices ; _weights = other . _weights ; } int)",
    "insertText": "GetSize()"
  },
  {
    "label": "Stencil()",
    "kind": "Method",
    "detail": "Function (int stride =* _size ; + + _size ; _indices + = stride ; _weights + = stride ; } protected : class StencilTableFactoryReal<REAL> ; class LimitStencilTableFactoryReal<REAL> ; int* _size ; Index* _indices ; REAL* _weights ; } ; class Stencil : public StencilReal<float> { protected : typedef StencilReal<float> BaseStencil ; public :)",
    "insertText": "Stencil() : BaseStencil()"
  },
  {
    "label": "Stencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Stencil(BaseStencil const & other) : BaseStencil(other)"
  },
  {
    "label": "Stencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Stencil(int * size, Index * indices, float * weights) : BaseStencil(size, indices, weights)"
  },
  {
    "label": "StencilTableReal()",
    "kind": "Method",
    "detail": "Function (} } ; template<REAL> class StencilTableReal { protected :)",
    "insertText": "StencilTableReal(int numControlVerts, std::vector<int> const& offsets, std::vector<int> const& sizes, std::vector<int> const& sources, std::vector<REAL> const& weights, bool includeCoarseVerts, size_t firstOffset)"
  },
  {
    "label": "StencilTableReal()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "StencilTableReal()"
  },
  {
    "label": "GetNumStencils()",
    "kind": "Method",
    "detail": "Function (} ; int)",
    "insertText": "GetNumStencils()"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumControlVertices()"
  },
  {
    "label": "GetSizes()",
    "kind": "Method",
    "detail": "Function (std::vector<int> const&)",
    "insertText": "GetSizes()"
  },
  {
    "label": "UpdateValues()",
    "kind": "Method",
    "detail": "Function (template<class T,class U> void)",
    "insertText": "UpdateValues(T const &srcValues, U &dstValues, Index start=-1, Index end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, dstValues, _weights, start, end)"
  },
  {
    "label": "UpdateValues()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "UpdateValues(T1 const &srcBase, int numBase, T2 const &srcRef, U &dstValues, Index start=-1, Index end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, dstValues, _weights, start, end)"
  },
  {
    "label": "UpdateValues()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> void)",
    "insertText": "UpdateValues(T const *src, U *dst, Index start=-1, Index end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, dst, _weights, start, end)"
  },
  {
    "label": "UpdateValues()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "UpdateValues(T1 const *srcBase, int numBase, T2 const *srcRef, U *dst, Index start=-1, Index end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, dst, _weights, start, end)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (protected : template<class T,class U> void)",
    "insertText": "update(T const &srcValues, U &dstValues, std::vector<REAL> const & valueWeights, Index start, Index end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (template<class T1,class T2,class U> void)",
    "insertText": "update(T1 const &srcBase, int numBase, T2 const &srcRef, U &dstValues, std::vector<REAL> const & valueWeights, Index start, Index end)"
  },
  {
    "label": "generateOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generateOffsets()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(int nstencils, int nelems)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(int nstencils, int nelems)"
  },
  {
    "label": "shrinkToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrinkToFit()"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finalize()"
  },
  {
    "label": "StencilTableReal()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "StencilTableReal() : _numControlVertices(0)"
  },
  {
    "label": "StencilTableReal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StencilTableReal(int numControlVerts) : _numControlVertices(numControlVerts)"
  },
  {
    "label": "GetStencil()",
    "kind": "Method",
    "detail": "Function (} class StencilTableFactoryReal<REAL> ; class Far::PatchTableBuilder ; int _numControlVertices ; std::vector<int> _sizes ; std::vector<Index> _offsets,_indices ; std::vector<REAL> _weights ; } ; class StencilTable : public StencilTableReal<float> { protected : typedef StencilTableReal<float> BaseTable ; public : Stencil)",
    "insertText": "GetStencil(Index index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Stencil)",
    "insertText": "operator(Index index)"
  },
  {
    "label": "StencilTable()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "StencilTable() : BaseTable()"
  },
  {
    "label": "StencilTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StencilTable(int numControlVerts) : BaseTable(numControlVerts)"
  },
  {
    "label": "StencilTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StencilTable(int numControlVerts, std::vector<int> const& offsets, std::vector<int> const& sizes, std::vector<int> const& sources, std::vector<float> const& weights, bool includeCoarseVerts, size_t firstOffset) : BaseTable(numControlVerts, offsets, sizes, sources, weights, includeCoarseVerts, firstOffset)"
  },
  {
    "label": "LimitStencilReal()",
    "kind": "Method",
    "detail": "Function (} } ; template<REAL> class LimitStencilReal : public StencilReal<REAL> { public :)",
    "insertText": "LimitStencilReal(int* size, Index * indices, REAL * weights, REAL * duWeights=0, REAL * dvWeights=0, REAL * duuWeights=0, REAL * duvWeights=0, REAL * dvvWeights=0) : StencilReal<REAL>(size, indices, weights), _duWeights(duWeights), _dvWeights(dvWeights), _duuWeights(duuWeights), _duvWeights(duvWeights), _dvvWeights(dvvWeights)"
  },
  {
    "label": "GetDuWeights()",
    "kind": "Method",
    "detail": "Function (} REAL const*)",
    "insertText": "GetDuWeights()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int stride =* this -> _size ; + + this -> _size ; this -> _indices + = stride ; this -> _weights + = stride ;)",
    "insertText": "if(_duWeights)"
  },
  {
    "label": "LimitStencil()",
    "kind": "Method",
    "detail": "Function (} private : class StencilTableFactoryReal<REAL> ; class LimitStencilTableFactoryReal<REAL> ; REAL* _duWeights,* _dvWeights,* _duuWeights,* _duvWeights,* _dvvWeights ; } ; class LimitStencil : public LimitStencilReal<float> { protected : typedef LimitStencilReal<float> BaseStencil ; public :)",
    "insertText": "LimitStencil(BaseStencil const & other) : BaseStencil(other)"
  },
  {
    "label": "LimitStencil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LimitStencil(int* size, Index * indices, float * weights, float * duWeights=0, float * dvWeights=0, float * duuWeights=0, float * duvWeights=0, float * dvvWeights=0) : BaseStencil(size, indices, weights, duWeights, dvWeights, duuWeights, duvWeights, dvvWeights)"
  },
  {
    "label": "LimitStencilTableReal()",
    "kind": "Method",
    "detail": "Function (} } ; template<REAL> class LimitStencilTableReal : public StencilTableReal<REAL> { protected :)",
    "insertText": "LimitStencilTableReal(int numControlVerts, std::vector<int> const& offsets, std::vector<int> const& sizes, std::vector<int> const& sources, std::vector<REAL> const& weights, std::vector<REAL> const& duWeights, std::vector<REAL> const& dvWeights, std::vector<REAL> const& duuWeights, std::vector<REAL> const& duvWeights, std::vector<REAL> const& dvvWeights, bool includeCoarseVerts, size_t firstOffset)"
  },
  {
    "label": "GetLimitStencil()",
    "kind": "Method",
    "detail": "Function (public : LimitStencilReal<REAL>)",
    "insertText": "GetLimitStencil(Index i)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, uderivs, _duWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, vderivs, _dvWeights, start, end)"
  },
  {
    "label": "UpdateDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "UpdateDerivs(T1 const & srcBase, int numBase, T2 const & srcRef, U & uderivs, U & vderivs, int start=-1, int end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, uderivs, _duWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, vderivs, _dvWeights, start, end)"
  },
  {
    "label": "UpdateDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> void)",
    "insertText": "UpdateDerivs(T const *src, U *uderivs, U *vderivs, int start=-1, int end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, uderivs, _duWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, vderivs, _dvWeights, start, end)"
  },
  {
    "label": "UpdateDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "UpdateDerivs(T1 const *srcBase, int numBase, T2 const *srcRef, U *uderivs, U *vderivs, int start=-1, int end=-1)"
  },
  {
    "label": "Update2ndDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> void)",
    "insertText": "Update2ndDerivs(T const & srcValues, U & uuderivs, U & uvderivs, U & vvderivs, int start=-1, int end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, uuderivs, _duuWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, uvderivs, _duvWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcValues, vvderivs, _dvvWeights, start, end)"
  },
  {
    "label": "Update2ndDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "Update2ndDerivs(T1 const & srcBase, int numBase, T2 const & srcRef, U & uuderivs, U & uvderivs, U & vvderivs, int start=-1, int end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, uuderivs, _duuWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, uvderivs, _duvWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(srcBase, numBase, srcRef, vvderivs, _dvvWeights, start, end)"
  },
  {
    "label": "Update2ndDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> void)",
    "insertText": "Update2ndDerivs(T const *src, T *uuderivs, U *uvderivs, U *vvderivs, int start=-1, int end=-1)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, uuderivs, _duuWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, uvderivs, _duvWeights, start, end)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "update(src, vvderivs, _dvvWeights, start, end)"
  },
  {
    "label": "Update2ndDerivs()",
    "kind": "Method",
    "detail": "Function (} template<class T1,class T2,class U> void)",
    "insertText": "Update2ndDerivs(T1 const *srcBase, int numBase, T2 const *srcRef, U *uuderivs, U *uvderivs, U *vvderivs, int start=-1, int end=-1)"
  },
  {
    "label": "GetLimitStencil()",
    "kind": "Method",
    "detail": "Function (private : std::vector<REAL> _duWeights,_dvWeights,_duuWeights,_duvWeights,_dvvWeights ; } ; class LimitStencilTable : public LimitStencilTableReal<float> { protected : typedef LimitStencilTableReal<float> BaseTable ; public : LimitStencil)",
    "insertText": "GetLimitStencil(Index index)"
  },
  {
    "label": "LimitStencilTable()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "LimitStencilTable(int numControlVerts, std::vector<int> const& offsets, std::vector<int> const& sizes, std::vector<int> const& sources, std::vector<float> const& weights, std::vector<float> const& duWeights, std::vector<float> const& dvWeights, std::vector<float> const& duuWeights, std::vector<float> const& duvWeights, std::vector<float> const& dvvWeights, bool includeCoarseVerts, size_t firstOffset) : BaseTable(numControlVerts, offsets, sizes, sources, weights, duWeights, dvWeights, duuWeights, duvWeights, dvvWeights, includeCoarseVerts, firstOffset)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (} } ; template<REAL> template<class T1,class T2,class U> void StencilTableReal<REAL)",
    "insertText": "update(T1 const &srcBase, int numBase, T2 const &srcRef, U &dstValues, std::vector<REAL> const &valueWeights, Index start, Index end)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (int const* sizes =& _sizes .)",
    "insertText": "at(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(start < (Index)_offsets.size())"
  },
  {
    "label": "nstencils()",
    "kind": "Method",
    "detail": "Function (sizes + = start ; indices + = _offsets [ start ] ; weights + = _offsets [ start ] ; } else { start = 0 ; } int)",
    "insertText": "nstencils((end < start) ? GetNumStencils() : end)"
  },
  {
    "label": "AddWithWeight()",
    "kind": "Method",
    "detail": "Function (dstValues [ start + i ] .)",
    "insertText": "AddWithWeight(srcBase[*indices], *weights)"
  },
  {
    "label": "AddWithWeight()",
    "kind": "Method",
    "detail": "Function (} else { dstValues [ start + i ] .)",
    "insertText": "AddWithWeight(srcRef[*indices - numBase], *weights)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (} } } } template<REAL> template<class T,class U> void StencilTableReal<REAL)",
    "insertText": "update(T const &srcValues, U &dstValues, std::vector<REAL> const &valueWeights, Index start, Index end)"
  },
  {
    "label": "AddWithWeight()",
    "kind": "Method",
    "detail": "Function (dstValues [ start + i ] .)",
    "insertText": "AddWithWeight(srcValues[*indices], *weights)"
  },
  {
    "label": "noffsets()",
    "kind": "Method",
    "detail": "Function (Index offset = 0 ; int)",
    "insertText": "noffsets(int)_sizes.size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_offsets .)",
    "insertText": "resize(noffsets)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_sizes .)",
    "insertText": "resize(nstencils)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_indices .)",
    "insertText": "resize(nelems)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (_sizes .)",
    "insertText": "reserve(nstencils)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (_indices .)",
    "insertText": "reserve(nelems)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (std::vector<)",
    "insertText": "int(_sizes).swap(_sizes)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (std::vector<)",
    "insertText": "Index(_indices).swap(_indices)"
  },
  {
    "label": "REAL()",
    "kind": "Method",
    "detail": "Function (std::vector<)",
    "insertText": "REAL(_weights).swap(_weights)"
  },
  {
    "label": "GetStencil()",
    "kind": "Method",
    "detail": "Function (} template<REAL> StencilReal<REAL> StencilTableReal<REAL)",
    "insertText": "GetStencil(Index i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((! _offsets.empty()) && i<(int)_offsets.size())"
  },
  {
    "label": "REAL()",
    "kind": "Method",
    "detail": "Function (Index ofs = _offsets [ i ] ; return StencilReal<)",
    "insertText": "REAL(const_cast<int*>(&_sizes[i]), const_cast<Index*>(&_indices[ofs]), const_cast<REAL*>(&_weights[ofs]))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (StencilTableReal<REAL)",
    "insertText": "resize(nstencils, nelems)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((! this->GetOffsets().empty()) && i<(int)this->GetOffsets().size())"
  },
  {
    "label": "GetOffsets()",
    "kind": "Method",
    "detail": "Function (Index ofs = this ->)",
    "insertText": "GetOffsets()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!_duWeights.empty() && !_dvWeights.empty())"
  },
  {
    "label": "REAL()",
    "kind": "Method",
    "detail": "Function (} else { return LimitStencilReal<)",
    "insertText": "REAL(const_cast<int *>(&this->GetSizes()[i]), const_cast<Index *>(&this->GetControlIndices()[ofs]), const_cast<REAL *>(&this->GetWeights()[ofs]))"
  }
]