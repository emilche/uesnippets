[
  {
    "label": "graph_task",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "graph_task"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "graph_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_iterator"
  },
  {
    "label": "reset_flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "reset_flags"
  },
  {
    "label": "graph_task_comparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "graph_task_comparator"
  },
  {
    "label": "priority_task_selector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "priority_task_selector"
  },
  {
    "label": "run_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_task"
  },
  {
    "label": "run_and_put_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_and_put_task"
  },
  {
    "label": "wait_functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "wait_functor"
  },
  {
    "label": "spawn_functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "spawn_functor"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "FLOW_SPAWN()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_flow_graph_impl_H # define __TBB_flow_graph_impl_H # include \" . . / tbb_stddef . h \" # include \" . . / task . h \" # include \" . . / task_arena . h \" # include \" . . / flow_graph_abstractions . h \" # if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES # include \" . . / concurrent_priority_queue . h \" # endif # include<list> # if TBB_DEPRECATED_FLOW_ENQUEUE # define)",
    "insertText": "FLOW_SPAWN(a) tbb::task::enqueue((a)) #else #define FLOW_SPAWN(a) tbb::task::spawn((a)) #endif #if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES #define __TBB_FLOW_GRAPH_PRIORITY_EXPR( expr ) expr #define __TBB_FLOW_GRAPH_PRIORITY_ARG0( priority ) , priority #define __TBB_FLOW_GRAPH_PRIORITY_ARG1( arg1, priority ) arg1, priority #else #define __TBB_FLOW_GRAPH_PRIORITY_EXPR( expr ) #define __TBB_FLOW_GRAPH_PRIORITY_ARG0( priority ) #define __TBB_FLOW_GRAPH_PRIORITY_ARG1( arg1, priority ) arg1 #endif #if TBB_DEPRECATED_LIMITER_NODE_CONSTRUCTOR #define __TBB_DEPRECATED_LIMITER_EXPR( expr ) expr #define __TBB_DEPRECATED_LIMITER_ARG2( arg1, arg2 ) arg1, arg2 #define __TBB_DEPRECATED_LIMITER_ARG4( arg1, arg2, arg3, arg4 ) arg1, arg3, arg4 #else #define __TBB_DEPRECATED_LIMITER_EXPR( expr ) #define __TBB_DEPRECATED_LIMITER_ARG2( arg1, arg2 ) arg1 #define __TBB_DEPRECATED_LIMITER_ARG4( arg1, arg2, arg3, arg4)"
  },
  {
    "label": "SUCCESSFULLY_ENQUEUED()",
    "kind": "Method",
    "detail": "Function (namespace flow { namespace internal { tbb::task* const)",
    "insertText": "SUCCESSFULLY_ENQUEUED(task *)"
  },
  {
    "label": "node_priority_t()",
    "kind": "Method",
    "detail": "Function (# if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES typedef unsigned int node_priority_t ; const node_priority_t no_priority =)",
    "insertText": "node_priority_t(0)"
  },
  {
    "label": "graph_task()",
    "kind": "Method",
    "detail": "Function (# endif } namespace interface10 { using tbb::flow::internal::SUCCESSFULLY_ENQUEUED ; # if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES using tbb::flow::internal::node_priority_t ; using tbb::flow::internal::no_priority ; struct graph_task : public task {)",
    "insertText": "graph_task(node_priority_t node_priority = no_priority ) : priority( node_priority)"
  },
  {
    "label": "graph_iterator()",
    "kind": "Method",
    "detail": "Function (} node_priority_t priority ; } ; # else typedef task graph_task ; # endif class graph ; class graph_node ; template<GraphContainerType,GraphNodeType> class graph_iterator { class graph ; class graph_node ; public : typedef size_t size_type ; typedef GraphNodeType value_type ; typedef GraphNodeType* pointer ; typedef GraphNodeType& reference ; typedef const GraphNodeType& const_reference ; typedef std::forward_iterator_tag iterator_category ;)",
    "insertText": "graph_iterator() : my_graph(NULL), current_node(NULL)"
  },
  {
    "label": "graph_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "graph_iterator(const graph_iterator& other) : my_graph(other.my_graph), current_node(other.current_node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} graph_iterator&)",
    "insertText": "operator(const graph_iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (my_graph = other . my_graph ; current_node = other . current_node ; } return* this ; } reference)",
    "insertText": "operator()"
  },
  {
    "label": "internal_forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_forward()"
  },
  {
    "label": "activate_graph()",
    "kind": "Method",
    "detail": "Function (} ; enum reset_flags { rf_reset_protocol = 0,rf_reset_bodies = 1<<0,rf_clear_edges = 1<<1 } ; namespace internal { void)",
    "insertText": "activate_graph(graph& g)"
  },
  {
    "label": "deactivate_graph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deactivate_graph(graph& g)"
  },
  {
    "label": "is_graph_active()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_graph_active(graph& g)"
  },
  {
    "label": "prioritize_task()",
    "kind": "Method",
    "detail": "Function (tbb::task&)",
    "insertText": "prioritize_task(graph& g, tbb::task& arena_task)"
  },
  {
    "label": "spawn_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_in_graph_arena(graph& g, tbb::task& arena_task)"
  },
  {
    "label": "enqueue_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueue_in_graph_arena(graph &g, tbb::task& arena_task)"
  },
  {
    "label": "add_task_to_graph_reset_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_task_to_graph_reset_list(graph& g, tbb::task *tp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES struct graph_task_comparator { bool)",
    "insertText": "operator()(const graph_task* left, const graph_task* right)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "execute()"
  },
  {
    "label": "try_pop()",
    "kind": "Method",
    "detail": "Function (graph_task* t = NULL ; bool result = my_priority_queue .)",
    "insertText": "try_pop(t)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(result, \"Number of critical tasks for scheduler and tasks\" \" in graph's priority queue mismatched\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(t && t != SUCCESSFULLY_ENQUEUED, \"Incorrect task submitted to graph priority queue\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(t->priority != tbb::flow::internal::no_priority, \"Tasks from graph's priority queue must have priority\")"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(*t)"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body()"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (tbb::task* res = my_receiver .)",
    "insertText": "try_put_task(my_body())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()()"
  },
  {
    "label": "wait_for_all()",
    "kind": "Method",
    "detail": "Function (graph_root_task ->)",
    "insertText": "wait_for_all()"
  },
  {
    "label": "spawn_functor()",
    "kind": "Method",
    "detail": "Function (} } ; class spawn_functor : tbb::internal::no_assign { tbb::task& spawn_task ; public :)",
    "insertText": "spawn_functor(tbb::task& t) : spawn_task(t)"
  },
  {
    "label": "FLOW_SPAWN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLOW_SPAWN(spawn_task)"
  },
  {
    "label": "prepare_task_arena()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "prepare_task_arena(bool reinit = false)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_task_arena, \"task arena is NULL\")"
  },
  {
    "label": "terminate()",
    "kind": "Method",
    "detail": "Function (my_task_arena ->)",
    "insertText": "terminate()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (my_task_arena ->)",
    "insertText": "initialize(tbb::task_arena::attach())"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__TBB_ASSERT(my_task_arena == NULL, \"task arena is not NULL\")"
  },
  {
    "label": "task_arena()",
    "kind": "Method",
    "detail": "Function (my_task_arena = new)",
    "insertText": "task_arena(tbb::task_arena::attach())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!my_task_arena->is_active()) my_task_arena->initialize()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_task_arena->is_active(), \"task arena is not active\")"
  },
  {
    "label": "graph()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "graph()"
  },
  {
    "label": "graph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "graph(tbb::task_group_context& use_this_context)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (# if TBB_PREVIEW_FLOW_GRAPH_TRACE void)",
    "insertText": "set_name(const char *name)"
  },
  {
    "label": "increment_wait_count()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "increment_wait_count()"
  },
  {
    "label": "reserve_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve_wait()"
  },
  {
    "label": "decrement_wait_count()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "decrement_wait_count()"
  },
  {
    "label": "release_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release_wait()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Receiver,Body> void)",
    "insertText": "run(Receiver &r, Body body)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (task* rtask =)",
    "insertText": "new(task::allocate_additional_child_of(*root_task())) run_and_put_task< Receiver, Body >(r, body)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_task_arena ->)",
    "insertText": "execute(spawn_functor(*rtask))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } template<Body> void)",
    "insertText": "run(Body body)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (task* rtask =)",
    "insertText": "new(task::allocate_additional_child_of(*root_task())) run_task< Body >(body)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cancelled = false ; caught_exception = false ;)",
    "insertText": "if(my_root_task)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_EXCEPTIONS try { # endif my_task_arena ->)",
    "insertText": "execute(wait_functor(my_root_task))"
  },
  {
    "label": "is_group_execution_cancelled()",
    "kind": "Method",
    "detail": "Function (cancelled = my_context ->)",
    "insertText": "is_group_execution_cancelled()"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_EXCEPTIONS })",
    "insertText": "catch(...)"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (my_root_task ->)",
    "insertText": "set_ref_count(1)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (my_context ->)",
    "insertText": "reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (caught_exception = true ; cancelled = true ; throw ; } # endif)",
    "insertText": "if(!(my_context->traits() & tbb::task_group_context::concurrent_wait))"
  },
  {
    "label": "root_task()",
    "kind": "Method",
    "detail": "Function (} } } tbb::task*)",
    "insertText": "root_task()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "is_cancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_cancelled()"
  },
  {
    "label": "register_node()",
    "kind": "Method",
    "detail": "Function (private : tbb::task* my_root_task ; tbb::task_group_context* my_context ; bool own_context ; bool cancelled ; bool caught_exception ; bool my_is_active ; task_list_type my_reset_task_list ; graph_node* my_nodes,* my_nodes_last ; tbb::spin_mutex nodelist_mutex ; void)",
    "insertText": "register_node(graph_node *n)"
  },
  {
    "label": "remove_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove_node(graph_node *n)"
  },
  {
    "label": "graph_node()",
    "kind": "Method",
    "detail": "Function (class tbb::interface7::internal::task_arena_base ; } ; class graph_node : tbb::internal::no_copy { class graph ; template<C,N> class graph_iterator ; protected : graph& my_graph ; graph_node* next,* prev ; public :)",
    "insertText": "graph_node(graph& g)"
  },
  {
    "label": "graph_node()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "graph_node()"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (# endif # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION void)",
    "insertText": "extract()"
  },
  {
    "label": "reset_node()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "reset_node(reset_flags f = rf_reset_protocol)"
  },
  {
    "label": "graph_task()",
    "kind": "Method",
    "detail": "Function (task* critical_task =& t ; graph_task* gt = static_cast<)",
    "insertText": "graph_task(&t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (critical_task =)",
    "insertText": "new(gt->allocate_continuation() ) priority_task_selector(g.my_priority_queue)"
  },
  {
    "label": "make_critical()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "make_critical(*critical_task)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (g . my_priority_queue .)",
    "insertText": "push(gt)"
  },
  {
    "label": "prioritize_task()",
    "kind": "Method",
    "detail": "Function (} return* critical_task ; } # else tbb::task&)",
    "insertText": "prioritize_task(graph&, tbb::task& t)"
  },
  {
    "label": "s_fn()",
    "kind": "Method",
    "detail": "Function (graph::spawn_functor)",
    "insertText": "s_fn(prioritize_task(g, arena_task))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(g.my_task_arena && g.my_task_arena->is_active(), NULL)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (g . my_task_arena ->)",
    "insertText": "execute(s_fn)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(g.my_task_arena && g.my_task_arena->is_active(), \"Is graph's arena initialized and active?\")"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueue(prioritize_task(g, arena_task), *g.my_task_arena)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (g . my_reset_task_list .)",
    "insertText": "push_back(tp)"
  }
]