[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "graph_task",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "graph_task"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "graph_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_iterator"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "graph_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_iterator"
  },
  {
    "label": "reset_flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "reset_flags"
  },
  {
    "label": "graph_task_comparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "graph_task_comparator"
  },
  {
    "label": "priority_task_selector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "priority_task_selector"
  },
  {
    "label": "serves",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "serves"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "run_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_task"
  },
  {
    "label": "run_and_put_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_and_put_task"
  },
  {
    "label": "wait_functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "wait_functor"
  },
  {
    "label": "spawn_functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "spawn_functor"
  },
  {
    "label": "graph_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_iterator"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "graph_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_iterator"
  },
  {
    "label": "graph_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph_node"
  },
  {
    "label": "graph_iterator()",
    "kind": "Method",
    "detail": "Function (iterators)",
    "insertText": "graph_iterator(GraphContainerType *g, bool begin)"
  },
  {
    "label": "internal_forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_forward()"
  },
  {
    "label": "activate_graph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "activate_graph(graph& g)"
  },
  {
    "label": "deactivate_graph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deactivate_graph(graph& g)"
  },
  {
    "label": "is_graph_active()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_graph_active(graph& g)"
  },
  {
    "label": "spawn_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_in_graph_arena(graph& g, tbb::task& arena_task)"
  },
  {
    "label": "enqueue_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enqueue_in_graph_arena(graph &g, tbb::task& arena_task)"
  },
  {
    "label": "add_task_to_graph_reset_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_task_to_graph_reset_list(graph& g, tbb::task *tp)"
  },
  {
    "label": "graph()",
    "kind": "Method",
    "detail": "Function (task_group_context)",
    "insertText": "graph()"
  },
  {
    "label": "graph()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "graph(tbb::task_group_context& use_this_context)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_name(const char *name)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(reset_flags f = rf_reset_protocol)"
  },
  {
    "label": "register_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "register_node(graph_node *n)"
  },
  {
    "label": "remove_node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove_node(graph_node *n)"
  },
  {
    "label": "graph_node()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "graph_node(graph& g)"
  }
]