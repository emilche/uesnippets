[
  {
    "label": "TGenericWindowsTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericWindowsTargetPlatformControls"
  },
  {
    "label": "TGenericWindowsTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformControlsBase . h \" # include \" AnalyticsEventAttribute . h \" # if PLATFORM_WINDOWS # include \" LocalPcTargetDevice . h \" # endif # if WITH_ENGINE # include \" TextureResource . h \" # endif # include \" SteamDeck / SteamDeckDevice . h \" # include \" GenericWindowsTargetPlatformSettings . h \" # define LOCTEXT_NAMESPACE \" TGenericWindowsTargetPlatformControls \" # if PLATFORM_WINDOWS template<TProperties,TTargetDevice = FLocalPcTargetDevice> # else template<TProperties> # endif class TGenericWindowsTargetPlatformControls : public TTargetPlatformControlsBase<TProperties> { public : typedef TTargetPlatformControlsBase<TProperties> TSuper ; typedef TTargetPlatformSettingsBase<TProperties> TSuperSettings ;)",
    "insertText": "TGenericWindowsTargetPlatformControls(ITargetPlatformSettings* TargetPlatformSettings) : TSuper(TargetPlatformSettings)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS LocalDevice =)",
    "insertText": "MakeShareable(new TTargetDevice(*this))"
  },
  {
    "label": "DiscoverDevices()",
    "kind": "Method",
    "detail": "Function (SteamDevices = TSteamDeckDevice<FLocalPcTargetDevice)",
    "insertText": "DiscoverDevices(*this, TEXT(\"Proton\"))"
  },
  {
    "label": "GenericWindowsTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "GenericWindowsTargetPlatformSettings(TSuperSettings*)"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllDevices(TArray<ITargetDevicePtr>& OutDevices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(LocalDevice)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const ITargetDevicePtr& SteamDeck : SteamDevices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(SteamDeck)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetShaderCompilerDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderCompilerDependencies(TArray<FString>& OutDependencies)"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/Windows/DirectX/x64/d3dcompiler_47.dll\"))"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/ShaderConductor/Win64/ShaderConductor.dll\"))"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/ShaderConductor/Win64/dxcompiler.dll\"))"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/ShaderConductor/Win64/dxil.dll\"))"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (OutSection =)",
    "insertText": "TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InStringKeys .)",
    "insertText": "Add(TEXT(\"MinimumOSVersion\"))"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(AnalyticsParamArray)"
  },
  {
    "label": "AppendAnalyticsEventAttributeArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventAttributeArray(AnalyticsParamArray, TEXT(\"UsesRayTracing\"), GenericWindowsTargetPlatformSettings->UsesRayTracing())"
  },
  {
    "label": "AppendAnalyticsEventConfigString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigString(AnalyticsParamArray, TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"DefaultGraphicsRHI\"), GEngineIni)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"D3D12TargetedShaderFormats\"), GEngineIni)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"D3D11TargetedShaderFormats\"), GEngineIni)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"VulkanTargetedShaderFormats\"), GEngineIni)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"TargetedRHIs\"), GEngineIni, TEXT(\"TargetedRHIs_Deprecated\"))"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE void)",
    "insertText": "GetTextureFormats(const UTexture* InTexture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetDefaultTextureFormatNamePerLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultTextureFormatNamePerLayer(OutFormats.AddDefaulted_GetRef(), GenericWindowsTargetPlatformSettings, this, InTexture, true, 4, true)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllDefaultTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDefaultTextureFormats(GenericWindowsTargetPlatformSettings, OutFormats)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (} } # endif bool)",
    "insertText": "SupportsVariants()"
  }
]