[
  {
    "label": "FAppleHTTPIOAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAppleHTTPIOAccess"
  },
  {
    "label": "FAppleHTTPIOManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAppleHTTPIOManager"
  },
  {
    "label": "FParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParams"
  },
  {
    "label": "FAppleEventLoopHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAppleEventLoopHttpThread"
  },
  {
    "label": "FAppleHTTPIOAccess()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / ManualResetEvent . h \" # include \" EventLoop / EventLoop . h \" # include \" EventLoop / IEventLoopIOManager . h \" # include \" Misc / Timespan . h \" # include \" Misc / MonotonicTime . h \" # include \" EventLoopHttpThread . h \" class FAppleHTTPIOAccess final { public :)",
    "insertText": "FAppleHTTPIOAccess(TSharedRef<UE::FManualResetEvent> Event) :SharedEvent(MoveTemp(Event))"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Notify()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<UE::FManualResetEvent> SharedEvent ; } ; class FAppleHTTPIOManager final : public UE::EventLoop::IIOManager { public : using FIOAccess = FAppleHTTPIOAccess ; struct FParams { TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FAppleHTTPIOManager()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FAppleHTTPIOManager(UE::EventLoop::IEventLoop& EventLoop, FParams&& Params) : Event(MakeShared<UE::FManualResetEvent>()) , IOAccess(Event) , Params(MoveTemp(Params))"
  },
  {
    "label": "FAppleHTTPIOManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAppleHTTPIOManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Poll(FTimespan WaitTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Event ->)",
    "insertText": "Reset()"
  },
  {
    "label": "ProcessRequests()",
    "kind": "Method",
    "detail": "Function (Params .)",
    "insertText": "ProcessRequests()"
  },
  {
    "label": "GetIOAccess()",
    "kind": "Method",
    "detail": "Function (} } FIOAccess&)",
    "insertText": "GetIOAccess()"
  },
  {
    "label": "CompleteThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CreateEventLoop()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : void)",
    "insertText": "CreateEventLoop()"
  },
  {
    "label": "DestroyEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEventLoop()"
  },
  {
    "label": "UpdateEventLoopConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventLoopConfigs()"
  },
  {
    "label": "GetEventLoop()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop*)",
    "insertText": "GetEventLoop()"
  },
  {
    "label": "GetEventLoopChecked()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop&)",
    "insertText": "GetEventLoopChecked()"
  }
]