[
  {
    "label": "FMarqueeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarqueeOperation"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMarqueeOperation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GraphEditor . h \" # include \" Framework / MarqueeRect . h \" struct FMarqueeOperation ; struct Rect ; struct FMarqueeOperation {)",
    "insertText": "FMarqueeOperation() : Operation(Add)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} enum Type { Remove,Add,Replace,Invert,} Operation ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const FVector2D& InStartLocation, FMarqueeOperation::Type InOperationType)"
  },
  {
    "label": "FMarqueeRect()",
    "kind": "Method",
    "detail": "Function (Rect =)",
    "insertText": "FMarqueeRect(InStartLocation)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (Operation = InOperationType ; } void)",
    "insertText": "End()"
  },
  {
    "label": "FMarqueeRect()",
    "kind": "Method",
    "detail": "Function (Rect =)",
    "insertText": "FMarqueeRect()"
  },
  {
    "label": "OperationTypeFromMouseEvent()",
    "kind": "Method",
    "detail": "Function (} FMarqueeOperation::Type)",
    "insertText": "OperationTypeFromMouseEvent(const FPointerEvent& MouseEvent)"
  }
]