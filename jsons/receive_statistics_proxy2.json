[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "CodecSpecificInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfo"
  },
  {
    "label": "VideoFrameMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFrameMetaData"
  },
  {
    "label": "ReceiveStatisticsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatisticsProxy"
  },
  {
    "label": "QpCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QpCounters"
  },
  {
    "label": "ContentSpecificStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentSpecificStats"
  },
  {
    "label": "ReceiveStatisticsProxy()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_RECEIVE_STATISTICS_PROXY2_H_ # define VIDEO_RECEIVE_STATISTICS_PROXY2_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / timestamp . h \" # include \" api / video_codecs / video_decoder . h \" # include \" call / video_receive_stream . h \" # include \" modules / include / module_common_types . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" rtc_base / numerics / histogram_percentile_counter . h \" # include \" rtc_base / numerics / moving_max_counter . h \" # include \" rtc_base / numerics / sample_counter . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / rate_tracker . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / quality_threshold . h \" # include \" video / stats_counter . h \" # include \" video / video_quality_observer2 . h \" namespace webrtc { class Clock ; struct CodecSpecificInfo ; namespace internal { struct VideoFrameMetaData ; class ReceiveStatisticsProxy : public VCMReceiveStatisticsCallback,public RtcpCnameCallback,public RtcpPacketTypeCounterObserver { public :)",
    "insertText": "ReceiveStatisticsProxy(uint32_t remote_ssrc, Clock* clock, TaskQueueBase* worker_thread)"
  },
  {
    "label": "ReceiveStatisticsProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ReceiveStatisticsProxy()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (VideoReceiveStreamInterface::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "OnDecodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecodedFrame(const VideoFrame& frame, absl::optional<uint8_t> qp, TimeDelta decode_time, VideoContentType content_type)"
  },
  {
    "label": "OnDecodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecodedFrame(const VideoFrameMetaData& frame_meta, absl::optional<uint8_t> qp, TimeDelta decode_time, TimeDelta processing_delay, TimeDelta assembly_time, VideoContentType content_type)"
  },
  {
    "label": "OnSyncOffsetUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSyncOffsetUpdated(int64_t video_playout_ntp_ms, int64_t sync_offset_ms, double estimated_freq_khz)"
  },
  {
    "label": "OnRenderedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderedFrame(const VideoFrameMetaData& frame_meta)"
  },
  {
    "label": "OnIncomingPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncomingPayloadType(int payload_type)"
  },
  {
    "label": "OnDecoderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecoderInfo(const VideoDecoder::DecoderInfo& decoder_info)"
  },
  {
    "label": "OnPreDecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreDecode(VideoCodecType codec_type, int qp)"
  },
  {
    "label": "OnUniqueFramesCounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUniqueFramesCounted(int num_unique_frames)"
  },
  {
    "label": "OnStreamInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamInactive()"
  },
  {
    "label": "OnCompleteFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompleteFrame(bool is_keyframe, size_t size_bytes, VideoContentType content_type)"
  },
  {
    "label": "OnDroppedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrames(uint32_t frames_dropped)"
  },
  {
    "label": "OnFrameBufferTimingsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameBufferTimingsUpdated(int max_decode_ms, int current_delay_ms, int target_delay_ms, int jitter_buffer_ms, int min_playout_delay_ms, int render_delay_ms)"
  },
  {
    "label": "OnTimingFrameInfoUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimingFrameInfoUpdated(const TimingFrameInfo& info)"
  },
  {
    "label": "OnCname()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCname(uint32_t ssrc, absl::string_view cname)"
  },
  {
    "label": "RtcpPacketTypesCounterUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpPacketTypesCounterUpdated(uint32_t ssrc, const RtcpPacketTypeCounter& packet_counter)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t avg_rtt_ms)"
  },
  {
    "label": "DecoderThreadStarting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecoderThreadStarting()"
  },
  {
    "label": "DecoderThreadStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecoderThreadStopped()"
  },
  {
    "label": "UpdateHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHistograms(absl::optional<int> fraction_lost, const StreamDataCounters& rtp_stats, const StreamDataCounters* rtx_stats)"
  },
  {
    "label": "ContentSpecificStats()",
    "kind": "Method",
    "detail": "Function (private : struct QpCounters { rtc::SampleCounter vp8 ; } ; struct ContentSpecificStats {)",
    "insertText": "ContentSpecificStats()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const ContentSpecificStats& other)"
  },
  {
    "label": "QualitySample()",
    "kind": "Method",
    "detail": "Function (rtc::SampleCounter e2e_delay_counter ; rtc::SampleCounter interframe_delay_counter ; int64_t flow_duration_ms = 0 ; int64_t total_media_bytes = 0 ; rtc::SampleCounter received_width ; rtc::SampleCounter received_height ; rtc::SampleCounter qp_counter ; FrameCounts frame_counts ; rtc::HistogramPercentileCounter interframe_delay_percentiles ; } ; void)",
    "insertText": "QualitySample(Timestamp now)"
  },
  {
    "label": "UpdateFramerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFramerate(int64_t now_ms)"
  },
  {
    "label": "GetCurrentEstimatedPlayoutNtpTimestampMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "GetCurrentEstimatedPlayoutNtpTimestampMs(int64_t now_ms)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const int64_t start_ms_ ; int64_t last_sample_time_)",
    "insertText": "RTC_GUARDED_BY(main_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoContentType last_content_type_)",
    "insertText": "RTC_GUARDED_BY(&main_thread_)"
  }
]