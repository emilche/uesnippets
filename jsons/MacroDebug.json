[
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef MACRO_DEBUG_H # define MACRO_DEBUG_H #)",
    "insertText": "if(defined (FIXED_DEBUG) || ( 0 && defined (_DEBUG) ) ) && !defined (silk_MACRO_COUNT) #undef silk_ADD16 #define silk_ADD16(a,b) silk_ADD16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_ADD16_(opus_int16 a, opus_int16 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ret = a + b ;)",
    "insertText": "if(ret != silk_ADD_SAT16( a, b ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD16(%d, %d) in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (# ifdef FIXED_DEBUG_ASSERT)",
    "insertText": "silk_assert(0)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD32 # define)",
    "insertText": "silk_ADD32(a,b) silk_ADD32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_ADD32_(opus_int32 a, opus_int32 b, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ;)",
    "insertText": "ret(opus_int32)((opus_uint32)a + (opus_uint32)b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD32(%d, %d) in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "silk_ADD64()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD64 # define)",
    "insertText": "silk_ADD64(a,b) silk_ADD64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_ADD64_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ret = a + b ;)",
    "insertText": "if(ret != silk_ADD_SAT64( a, b ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD64(%lld, %lld) in %s: line %d\\n\", (long long)a, (long long)b, file, line)"
  },
  {
    "label": "silk_SUB16()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SUB16 # define)",
    "insertText": "silk_SUB16(a,b) silk_SUB16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_SUB16_(opus_int16 a, opus_int16 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ret = a - b ;)",
    "insertText": "if(ret != silk_SUB_SAT16( a, b ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB16(%d, %d) in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SUB32 # define)",
    "insertText": "silk_SUB32(a,b) silk_SUB32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SUB32_(opus_int32 a, opus_int32 b, char *file, int line)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ret =)",
    "insertText": "a(opus_int64)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB32(%d, %d) in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "silk_SUB64()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SUB64 # define)",
    "insertText": "silk_SUB64(a,b) silk_SUB64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_SUB64_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; ret = a - b ;)",
    "insertText": "if(ret != silk_SUB_SAT64( a, b ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB64(%lld, %lld) in %s: line %d\\n\", (long long)a, (long long)b, file, line)"
  },
  {
    "label": "silk_ADD_SAT16()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_SAT16 # define)",
    "insertText": "silk_ADD_SAT16(a,b) silk_ADD_SAT16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_ADD_SAT16_( opus_int16 a16, opus_int16 b16, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int16 res ;)",
    "insertText": "res(opus_int16)silk_SAT16( silk_ADD32( (opus_int32)(a16), (b16) ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_SAT16(%d, %d) in %s: line %d\\n\", a16, b16, file, line)"
  },
  {
    "label": "silk_ADD_SAT32()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_ADD_SAT32 # define)",
    "insertText": "silk_ADD_SAT32(a,b) silk_ADD_SAT32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_ADD_SAT32_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int32 res ;)",
    "insertText": "res((((opus_uint32)(a32) + (opus_uint32)(b32)) & 0x80000000) == 0 ? \\ ((((a32) & (b32)) & 0x80000000) != 0 ? silk_int32_MIN : (a32)+(b32)) : \\ ((((a32) | (b32)) & 0x80000000) == 0 ? silk_int32_MAX : (a32)+(b32)))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_SAT32(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_ADD_SAT64()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_ADD_SAT64 # define)",
    "insertText": "silk_ADD_SAT64(a,b) silk_ADD_SAT64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_ADD_SAT64_( opus_int64 a64, opus_int64 b64, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ; int fail = 0 ;)",
    "insertText": "res((((a64) + (b64)) & 0x8000000000000000LL) == 0 ? \\ ((((a64) & (b64)) & 0x8000000000000000LL) != 0 ? silk_int64_MIN : (a64)+(b64)) : \\ ((((a64) | (b64)) & 0x8000000000000000LL) == 0 ? silk_int64_MAX : (a64)+(b64)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fail = 1 ; } } else { fail = res ! = a64 + b64 ; })",
    "insertText": "if(fail)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_SAT64(%lld, %lld) in %s: line %d\\n\", (long long)a64, (long long)b64, file, line)"
  },
  {
    "label": "silk_SUB_SAT16()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_SUB_SAT16 # define)",
    "insertText": "silk_SUB_SAT16(a,b) silk_SUB_SAT16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_SUB_SAT16_( opus_int16 a16, opus_int16 b16, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int16 res ;)",
    "insertText": "res(opus_int16)silk_SAT16( silk_SUB32( (opus_int32)(a16), (b16) ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB_SAT16(%d, %d) in %s: line %d\\n\", a16, b16, file, line)"
  },
  {
    "label": "silk_SUB_SAT32()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_SUB_SAT32 # define)",
    "insertText": "silk_SUB_SAT32(a,b) silk_SUB_SAT32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SUB_SAT32_( opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int32 res ;)",
    "insertText": "res((((opus_uint32)(a32)-(opus_uint32)(b32)) & 0x80000000) == 0 ? \\ (( (a32) & ((b32)^0x80000000) & 0x80000000) ? silk_int32_MIN : (a32)-(b32)) : \\ ((((a32)^0x80000000) & (b32) & 0x80000000) ? silk_int32_MAX : (a32)-(b32)))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB_SAT32(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_SUB_SAT64()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_SUB_SAT64 # define)",
    "insertText": "silk_SUB_SAT64(a,b) silk_SUB_SAT64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_SUB_SAT64_( opus_int64 a64, opus_int64 b64, char *file, int line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ; int fail = 0 ;)",
    "insertText": "res((((a64)-(b64)) & 0x8000000000000000LL) == 0 ? \\ (( (a64) & ((b64)^0x8000000000000000LL) & 0x8000000000000000LL) ? silk_int64_MIN : (a64)-(b64)) : \\ ((((a64)^0x8000000000000000LL) & (b64) & 0x8000000000000000LL) ? silk_int64_MAX : (a64)-(b64)))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB_SAT64(%lld, %lld) in %s: line %d\\n\", (long long)a64, (long long)b64, file, line)"
  },
  {
    "label": "silk_MUL()",
    "kind": "Method",
    "detail": "Function (# endif } return res ; } # undef silk_MUL # define)",
    "insertText": "silk_MUL(a,b) silk_MUL_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_MUL_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; opus_int64 ret64 ;)",
    "insertText": "ret(opus_int32)((opus_uint32)a32 * (opus_uint32)b32)"
  },
  {
    "label": "ret64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ret64(opus_int64)a32 * (opus_int64)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_MUL(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_MUL_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_MUL_uint # define)",
    "insertText": "silk_MUL_uint(a,b) silk_MUL_uint_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_uint32 silk_MUL_uint_(opus_uint32 a32, opus_uint32 b32, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ret = a32* b32 ;)",
    "insertText": "if((opus_uint64)ret != (opus_uint64)a32 * (opus_uint64)b32)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_MUL_uint(%u, %u) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_MLA()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_MLA # define)",
    "insertText": "silk_MLA(a,b,c) silk_MLA_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_MLA_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret = a32 + b32* c32 ;)",
    "insertText": "if((opus_int64)ret != (opus_int64)a32 + (opus_int64)b32 * (opus_int64)c32)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_MLA(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_MLA_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_MLA_uint # define)",
    "insertText": "silk_MLA_uint(a,b,c) silk_MLA_uint_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_MLA_uint_(opus_uint32 a32, opus_uint32 b32, opus_uint32 c32, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_MLA_uint(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMULWB # define)",
    "insertText": "silk_SMULWB(a,b) silk_SMULWB_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMULWB_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ;)",
    "insertText": "ret(a32 >> 16) * (opus_int32)((opus_int16)b32) + (((a32 & 0x0000FFFF) * (opus_int32)((opus_int16)b32)) >> 16)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMULWB(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMLAWB # define)",
    "insertText": "silk_SMLAWB(a,b,c) silk_SMLAWB_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLAWB_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "silk_ADD32_ovflw()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_ADD32_ovflw(a32, silk_SMULWB( b32, c32 ))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLAWB(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMULWT()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMULWT # define)",
    "insertText": "silk_SMULWT(a,b) silk_SMULWT_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMULWT_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ;)",
    "insertText": "ret(a32 >> 16) * (b32 >> 16) + (((a32 & 0x0000FFFF) * (b32 >> 16)) >> 16)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMULWT(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_SMLAWT()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMLAWT # define)",
    "insertText": "silk_SMLAWT(a,b,c) silk_SMLAWT_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLAWT_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "a32((b32 >> 16) * (c32 >> 16)) + (((b32 & 0x0000FFFF) * ((c32 >> 16)) >> 16))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLAWT(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMULL()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMULL # define)",
    "insertText": "silk_SMULL(a,b) silk_SMULL_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_SMULL_(opus_int64 a64, opus_int64 b64, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret64 ; int fail = 0 ; ret64 = a64* b64 ;)",
    "insertText": "if(b64 != 0)"
  },
  {
    "label": "a64()",
    "kind": "Method",
    "detail": "Function (fail =)",
    "insertText": "a64(ret64 / b64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(a64 != 0)"
  },
  {
    "label": "b64()",
    "kind": "Method",
    "detail": "Function (fail =)",
    "insertText": "b64(ret64 / a64)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMULL(%lld, %lld) in %s: line %d\\n\", (long long)a64, (long long)b64, file, line)"
  },
  {
    "label": "silk_SMLABB()",
    "kind": "Method",
    "detail": "Function (# endif } return ret64 ; } # undef silk_SMLABB # define)",
    "insertText": "silk_SMLABB(a,b,c) silk_SMLABB_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLABB_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "a32(opus_int32)((opus_int16)b32) * (opus_int32)((opus_int16)c32)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLABB(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMLABT()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMLABT # define)",
    "insertText": "silk_SMLABT(a,b,c) silk_SMLABT_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLABT_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "a32((opus_int32)((opus_int16)b32)) * (c32 >> 16)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLABT(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMLATT()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMLATT # define)",
    "insertText": "silk_SMLATT(a,b,c) silk_SMLATT_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLATT_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "a32()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "a32(b32 >> 16) * (c32 >> 16)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLATT(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_SMULWW()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMULWW # define)",
    "insertText": "silk_SMULWW(a,b) silk_SMULWW_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMULWW_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret,tmp1,tmp2 ; opus_int64 ret64 ; int fail = 0 ; ret =)",
    "insertText": "silk_SMULWB(a32, b32)"
  },
  {
    "label": "silk_RSHIFT_ROUND()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_RSHIFT_ROUND(b32, 16)"
  },
  {
    "label": "silk_MUL()",
    "kind": "Method",
    "detail": "Function (tmp2 =)",
    "insertText": "silk_MUL(a32, tmp1)"
  },
  {
    "label": "fail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fail(opus_int64)tmp2 != (opus_int64) a32 * (opus_int64)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (tmp1 = ret ; ret =)",
    "insertText": "silk_ADD32(tmp1, tmp2)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (fail | =)",
    "insertText": "silk_ADD32(tmp1, tmp2 ) != silk_ADD_SAT32( tmp1, tmp2)"
  },
  {
    "label": "silk_RSHIFT64()",
    "kind": "Method",
    "detail": "Function (ret64 =)",
    "insertText": "silk_RSHIFT64(silk_SMULL( a32, b32 ), 16)"
  },
  {
    "label": "fail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fail(opus_int64)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMULWW(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_SMLAWW()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SMLAWW # define)",
    "insertText": "silk_SMLAWW(a,b,c) silk_SMLAWW_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SMLAWW_(opus_int32 a32, opus_int32 b32, opus_int32 c32, char *file, int line)"
  },
  {
    "label": "silk_SMULWW()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret,tmp ; tmp =)",
    "insertText": "silk_SMULWW(b32, c32)"
  },
  {
    "label": "silk_ADD32()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "silk_ADD32(a32, tmp)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SMLAWW(%d, %d, %d) in %s: line %d\\n\", a32, b32, c32, file, line)"
  },
  {
    "label": "silk_DIV32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_DIV32 # define)",
    "insertText": "silk_DIV32(a,b) silk_DIV32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_DIV32_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_DIV32(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_DIV32_16()",
    "kind": "Method",
    "detail": "Function (# endif } return a32 / b32 ; } # undef silk_DIV32_16 # define)",
    "insertText": "silk_DIV32_16(a,b) silk_DIV32_16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_DIV32_16_(opus_int32 a32, opus_int32 b32, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_DIV32_16(%d, %d) in %s: line %d\\n\", a32, b32, file, line)"
  },
  {
    "label": "silk_LSHIFT8()",
    "kind": "Method",
    "detail": "Function (# endif } return a32 / b32 ; } # undef silk_LSHIFT8 # define)",
    "insertText": "silk_LSHIFT8(a,b) silk_LSHIFT8_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int8 silk_LSHIFT8_(opus_int8 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int8 ret ; int fail = 0 ;)",
    "insertText": "ret(opus_int8)((opus_uint8)a << shift)"
  },
  {
    "label": "fail()",
    "kind": "Method",
    "detail": "Function (fail | = shift<0 ; fail | = shift> = 8 ;)",
    "insertText": "fail(opus_int64)ret != (opus_int64)(((opus_uint64)a) << shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT8(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_LSHIFT16()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_LSHIFT16 # define)",
    "insertText": "silk_LSHIFT16(a,b) silk_LSHIFT16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_LSHIFT16_(opus_int16 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; int fail = 0 ;)",
    "insertText": "ret(opus_int16)((opus_uint16)a << shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT16(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_LSHIFT32 # define)",
    "insertText": "silk_LSHIFT32(a,b) silk_LSHIFT32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_LSHIFT32_(opus_int32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; int fail = 0 ;)",
    "insertText": "ret(opus_int32)((opus_uint32)a << shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT32(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_LSHIFT64()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_LSHIFT64 # define)",
    "insertText": "silk_LSHIFT64(a,b) silk_LSHIFT64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_LSHIFT64_(opus_int64 a, opus_int shift, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ; int fail = 0 ;)",
    "insertText": "ret(opus_int64)((opus_uint64)a << shift)"
  },
  {
    "label": "fail()",
    "kind": "Method",
    "detail": "Function (fail | = shift<0 ; fail | = shift> = 6 4 ;)",
    "insertText": "fail(ret>>shift) != ((opus_int64)a)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT64(%lld, %d) in %s: line %d\\n\", (long long)a, shift, file, line)"
  },
  {
    "label": "silk_LSHIFT_ovflw()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_LSHIFT_ovflw # define)",
    "insertText": "silk_LSHIFT_ovflw(a,b) silk_LSHIFT_ovflw_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_LSHIFT_ovflw_(opus_int32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT_ovflw(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_LSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return a<<shift ; } # undef silk_LSHIFT_uint # define)",
    "insertText": "silk_LSHIFT_uint(a,b) silk_LSHIFT_uint_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_uint32 silk_LSHIFT_uint_(opus_uint32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ret = a<<shift ;)",
    "insertText": "if((shift < 0) || ((opus_int64)ret != ((opus_int64)a) << shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_LSHIFT_uint(%u, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_RSHITF8()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_RSHIFT8 # define)",
    "insertText": "silk_RSHITF8(a,b) silk_RSHIFT8_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int8 silk_RSHIFT8_(opus_int8 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHITF8(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_RSHITF16()",
    "kind": "Method",
    "detail": "Function (# endif } return a>> shift ; } # undef silk_RSHIFT16 # define)",
    "insertText": "silk_RSHITF16(a,b) silk_RSHIFT16_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_RSHIFT16_(opus_int16 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHITF16(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_RSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return a>> shift ; } # undef silk_RSHIFT32 # define)",
    "insertText": "silk_RSHIFT32(a,b) silk_RSHIFT32_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_RSHIFT32_(opus_int32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHITF32(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_RSHIFT64()",
    "kind": "Method",
    "detail": "Function (# endif } return a>> shift ; } # undef silk_RSHIFT64 # define)",
    "insertText": "silk_RSHIFT64(a,b) silk_RSHIFT64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_RSHIFT64_(opus_int64 a, opus_int64 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHITF64(%lld, %lld) in %s: line %d\\n\", (long long)a, (long long)shift, file, line)"
  },
  {
    "label": "silk_RSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return a>> shift ; } # undef silk_RSHIFT_uint # define)",
    "insertText": "silk_RSHIFT_uint(a,b) silk_RSHIFT_uint_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_uint32 silk_RSHIFT_uint_(opus_uint32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHIFT_uint(%u, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_ADD_LSHIFT()",
    "kind": "Method",
    "detail": "Function (# endif } return a>> shift ; } # undef silk_ADD_LSHIFT # define)",
    "insertText": "silk_ADD_LSHIFT(a,b,c) silk_ADD_LSHIFT_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE int silk_ADD_LSHIFT_(int a, int b, int shift, char *file, int line)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ret =)",
    "insertText": "a(opus_int16)((opus_uint16)b << shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_LSHIFT(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_ADD_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_LSHIFT32 # define)",
    "insertText": "silk_ADD_LSHIFT32(a,b,c) silk_ADD_LSHIFT32_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_ADD_LSHIFT32_(opus_int32 a, opus_int32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "silk_ADD32_ovflw()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_ADD32_ovflw(a, (opus_int32)((opus_uint32)b << shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_LSHIFT32(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_ADD_LSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_LSHIFT_uint # define)",
    "insertText": "silk_ADD_LSHIFT_uint(a,b,c) silk_ADD_LSHIFT_uint_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_uint32 silk_ADD_LSHIFT_uint_(opus_uint32 a, opus_uint32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_uint32 ret ; ret =)",
    "insertText": "a(b << shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_LSHIFT_uint(%u, %u, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_ADD_RSHIFT()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_RSHIFT # define)",
    "insertText": "silk_ADD_RSHIFT(a,b,c) silk_ADD_RSHIFT_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE int silk_ADD_RSHIFT_(int a, int b, int shift, char *file, int line)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ; ret =)",
    "insertText": "a(b >> shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_RSHIFT(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_ADD_RSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_RSHIFT32 # define)",
    "insertText": "silk_ADD_RSHIFT32(a,b,c) silk_ADD_RSHIFT32_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_ADD_RSHIFT32_(opus_int32 a, opus_int32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "silk_ADD32_ovflw()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_ADD32_ovflw(a, (b >> shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_RSHIFT32(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_ADD_RSHIFT_uint()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_ADD_RSHIFT_uint # define)",
    "insertText": "silk_ADD_RSHIFT_uint(a,b,c) silk_ADD_RSHIFT_uint_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_uint32 silk_ADD_RSHIFT_uint_(opus_uint32 a, opus_uint32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_ADD_RSHIFT_uint(%u, %u, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_SUB_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SUB_LSHIFT32 # define)",
    "insertText": "silk_SUB_LSHIFT32(a,b,c) silk_SUB_LSHIFT32_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SUB_LSHIFT32_(opus_int32 a, opus_int32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "silk_SUB32_ovflw()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_SUB32_ovflw(a, (opus_int32)((opus_uint32)b << shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB_LSHIFT32(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_SUB_RSHIFT32()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_SUB_RSHIFT32 # define)",
    "insertText": "silk_SUB_RSHIFT32(a,b,c) silk_SUB_RSHIFT32_((a), (b), (c), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_SUB_RSHIFT32_(opus_int32 a, opus_int32 b, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "silk_SUB32_ovflw()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "silk_SUB32_ovflw(a, (b >> shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_SUB_RSHIFT32(%d, %d, %d) in %s: line %d\\n\", a, b, shift, file, line)"
  },
  {
    "label": "silk_RSHIFT_ROUND()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_RSHIFT_ROUND # define)",
    "insertText": "silk_RSHIFT_ROUND(a,b) silk_RSHIFT_ROUND_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_RSHIFT_ROUND_(opus_int32 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ; ret =)",
    "insertText": "shift(a >> 1) + (a & 1) : ((a >> (shift - 1)) + 1)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHIFT_ROUND(%d, %d) in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "silk_RSHIFT_ROUND64()",
    "kind": "Method",
    "detail": "Function (# endif } return ret ; } # undef silk_RSHIFT_ROUND64 # define)",
    "insertText": "silk_RSHIFT_ROUND64(a,b) silk_RSHIFT_ROUND64_((a), (b), __FILE__, __LINE__) static OPUS_INLINE opus_int64 silk_RSHIFT_ROUND64_(opus_int64 a, opus_int32 shift, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 ret ;)",
    "insertText": "if((shift <= 0) || (shift>=64))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_RSHIFT_ROUND64(%lld, %d) in %s: line %d\\n\", (long long)a, shift, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_abs_int64(%lld) in %s: line %d\\n\", (long long)a, file, line)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "return(((a) > 0) ? (a) : -(a))"
  },
  {
    "label": "silk_abs_int32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_abs_int32 # define)",
    "insertText": "silk_abs_int32(a) silk_abs_int32_((a), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_abs_int32_(opus_int32 a, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_abs_int32(%d) in %s: line %d\\n\", a, file, line)"
  },
  {
    "label": "silk_abs()",
    "kind": "Method",
    "detail": "Function (# endif } return)",
    "insertText": "silk_abs(a)"
  },
  {
    "label": "silk_CHECK_FIT8()",
    "kind": "Method",
    "detail": "Function (} # undef silk_CHECK_FIT8 # define)",
    "insertText": "silk_CHECK_FIT8(a) silk_CHECK_FIT8_((a), __FILE__, __LINE__) static OPUS_INLINE opus_int8 silk_CHECK_FIT8_( opus_int64 a, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int8 ret ;)",
    "insertText": "ret(opus_int8)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_CHECK_FIT8(%lld) in %s: line %d\\n\", (long long)a, file, line)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "return(ret)"
  },
  {
    "label": "silk_CHECK_FIT16()",
    "kind": "Method",
    "detail": "Function (} # undef silk_CHECK_FIT16 # define)",
    "insertText": "silk_CHECK_FIT16(a) silk_CHECK_FIT16_((a), __FILE__, __LINE__) static OPUS_INLINE opus_int16 silk_CHECK_FIT16_( opus_int64 a, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int16 ret ;)",
    "insertText": "ret(opus_int16)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_CHECK_FIT16(%lld) in %s: line %d\\n\", (long long)a, file, line)"
  },
  {
    "label": "silk_CHECK_FIT32()",
    "kind": "Method",
    "detail": "Function (} # undef silk_CHECK_FIT32 # define)",
    "insertText": "silk_CHECK_FIT32(a) silk_CHECK_FIT32_((a), __FILE__, __LINE__) static OPUS_INLINE opus_int32 silk_CHECK_FIT32_( opus_int64 a, char *file, int line)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (opus_int32 ret ;)",
    "insertText": "ret(opus_int32)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"silk_CHECK_FIT32(%lld) in %s: line %d\\n\", (long long)a, file, line)"
  }
]