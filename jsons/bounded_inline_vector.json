[
  {
    "label": "BoundedInlineVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoundedInlineVector"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BOUNDED_INLINE_VECTOR_H_ # define RTC_BASE_BOUNDED_INLINE_VECTOR_H_ # include<stdint . h> # include<memory> # include<type_traits> # include<utility> # include \" rtc_base / bounded_inline_vector_impl . h \" # include \" rtc_base / checks . h \" namespace webrtc { template<T,int fixed_capacity> class BoundedInlineVector {)",
    "insertText": "static_assert(!std::is_const<T>::value, \"T may not be const\")"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (public : using size_type = int ; using value_type = T ; using const_iterator = const T* ;)",
    "insertText": "BoundedInlineVector()"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoundedInlineVector(const BoundedInlineVector&)"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoundedInlineVector(BoundedInlineVector&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BoundedInlineVector&)",
    "insertText": "operator(const BoundedInlineVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BoundedInlineVector&)",
    "insertText": "operator(BoundedInlineVector&&)"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (template<. . . Ts,std::enable_if_t<bounded_inline_vector_impl::AllConvertible<T,Ts . . .>::value>* = nullptr>)",
    "insertText": "BoundedInlineVector(Ts&&... elements) : storage_(std::forward<Ts>(elements)...)"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (} template<int other_capacity,std::enable_if_t<other_capacity ! = fixed_capacity>* = nullptr>)",
    "insertText": "BoundedInlineVector(const BoundedInlineVector<T, other_capacity>& other)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(other.size(), fixed_capacity)"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyElements(other.data(), other.size(), storage_.data, &storage_.size)"
  },
  {
    "label": "BoundedInlineVector()",
    "kind": "Method",
    "detail": "Function (} template<int other_capacity,std::enable_if_t<other_capacity ! = fixed_capacity>* = nullptr>)",
    "insertText": "BoundedInlineVector(BoundedInlineVector<T, other_capacity>&& other)"
  },
  {
    "label": "MoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveElements(other.data(), other.size(), storage_.data, &storage_.size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<int other_capacity,std::enable_if_t<other_capacity ! = fixed_capacity>* = nullptr> BoundedInlineVector&)",
    "insertText": "operator(const BoundedInlineVector<T, other_capacity>& other)"
  },
  {
    "label": "DestroyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyElements(storage_.data, storage_.size)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(new_size, 0)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(new_size, fixed_capacity)"
  },
  {
    "label": "DefaultInitializeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultInitializeElements(storage_.data + storage_.size, new_size - storage_.size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(new_size < storage_.size)"
  },
  {
    "label": "DestroyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyElements(storage_.data + new_size, storage_.size - new_size)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} storage_ . size = new_size ; } const T*)",
    "insertText": "data()"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(index, 0)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(index, storage_.size)"
  }
]