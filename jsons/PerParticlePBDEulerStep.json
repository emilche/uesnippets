[
  {
    "label": "FPerParticlePBDEulerStep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticlePBDEulerStep"
  },
  {
    "label": "T_PARTICLES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_PARTICLES"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticlePBDEulerStep()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Particle / ParticleUtilities . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PerParticleRule . h \" namespace Chaos { class FPerParticlePBDEulerStep : public FPerParticleRule { public :)",
    "insertText": "FPerParticlePBDEulerStep()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} template<class T_PARTICLES> void)",
    "insertText": "ApplyHelper(T_PARTICLES& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetP(Index, InParticles.GetX(Index) + InParticles.GetV(Index) * Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelper(InParticles, Dt, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TPBDRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "XCom()",
    "kind": "Method",
    "detail": "Function (FVec3 PCoM = InParticles .)",
    "insertText": "XCom(Index)"
  },
  {
    "label": "RCom()",
    "kind": "Method",
    "detail": "Function (FRotation3 QCoM = InParticles .)",
    "insertText": "RCom(Index)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (PCoM = PCoM + InParticles .)",
    "insertText": "GetV(Index)"
  },
  {
    "label": "IntegrateRotationWithAngularVelocity()",
    "kind": "Method",
    "detail": "Function (QCoM =)",
    "insertText": "IntegrateRotationWithAngularVelocity(QCoM, InParticles.GetW(Index), Dt)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetTransformPQCom(Index, PCoM, QCoM)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "XCom()",
    "kind": "Method",
    "detail": "Function (FVec3 PCoM = Particle .)",
    "insertText": "XCom()"
  },
  {
    "label": "RCom()",
    "kind": "Method",
    "detail": "Function (FRotation3 QCoM = Particle .)",
    "insertText": "RCom()"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (PCoM = PCoM + Particle .)",
    "insertText": "GetV()"
  },
  {
    "label": "IntegrateRotationWithAngularVelocity()",
    "kind": "Method",
    "detail": "Function (QCoM =)",
    "insertText": "IntegrateRotationWithAngularVelocity(QCoM, Particle.GetW(), Dt)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetTransformPQCom(PCoM, QCoM)"
  }
]