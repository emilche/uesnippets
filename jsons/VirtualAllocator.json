[
  {
    "label": "FVirtualAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualAllocator"
  },
  {
    "label": "FFreeLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeLink"
  },
  {
    "label": "FPerBlockSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerBlockSize"
  },
  {
    "label": "FVirtualAllocatorStatsPerBlockSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualAllocatorStatsPerBlockSize"
  },
  {
    "label": "FVirtualAllocatorStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualAllocatorStats"
  },
  {
    "label": "FreeVirtualByBlock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / PlatformProcess . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / AlignmentTemplates . h \" class FVirtualAllocator { struct FFreeLink { void* Ptr = nullptr ; FFreeLink* Next = nullptr ; } ; struct FPerBlockSize { int64 AllocBlocksSize = 0 ; int64 FreeBlocksSize = 0 ; FFreeLink* FirstFree = nullptr ; } ; FCriticalSection CriticalSection ; uint8* LowAddress ; uint8* HighAddress ; size_t TotalSize ; size_t PageSize ; size_t MaximumAlignment ; uint8* NextAlloc ; FFreeLink* RecycledLinks ; int64 LinkSize ; bool bBacksMalloc ; FPerBlockSize Blocks [ 6 4 ] ; void)",
    "insertText": "FreeVirtualByBlock(void* Ptr, FPerBlockSize& Block, size_t AlignedSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* Alloc ;)",
    "insertText": "if(bBacksMalloc)"
  },
  {
    "label": "AllocNewVM()",
    "kind": "Method",
    "detail": "Function (Alloc =)",
    "insertText": "AllocNewVM(MaximumAlignment)"
  },
  {
    "label": "GetVirtualSizeAlignment()",
    "kind": "Method",
    "detail": "Function (uint32 Pages = MaximumAlignment / FPlatformMemory::)",
    "insertText": "GetVirtualSizeAlignment()"
  },
  {
    "label": "VMBlock()",
    "kind": "Method",
    "detail": "Function (FPlatformMemory::FPlatformVirtualMemoryBlock)",
    "insertText": "VMBlock(Alloc, Pages)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (VMBlock .)",
    "insertText": "Commit()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} else { Alloc =)",
    "insertText": "Malloc(MaximumAlignment)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = 0; (Index + 1) * sizeof(FFreeLink) <= MaximumAlignment; Index++)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FFreeLink* NewLink =)",
    "insertText": "new((void*)(((uint8*)Alloc + Index * sizeof(FFreeLink))))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NewLink -> Next = RecycledLinks ; RecycledLinks = NewLink ; } LinkSize + = MaximumAlignment ; } FFreeLink* Link = RecycledLinks ; RecycledLinks = Link -> Next ;)",
    "insertText": "check(!Link->Ptr && Ptr)"
  },
  {
    "label": "AllocNewVM()",
    "kind": "Method",
    "detail": "Function (Link -> Ptr = Ptr ; Link -> Next = Block . FirstFree ; Block . FirstFree = Link ; Block . FreeBlocksSize + = AlignedSize ; } protected : size_t SpaceConsumed ; uint8*)",
    "insertText": "AllocNewVM(size_t AlignedSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint8* Result = NextAlloc ;)",
    "insertText": "check(IsAligned(Result, MaximumAlignment) && IsAligned(AlignedSize, MaximumAlignment))"
  },
  {
    "label": "FVirtualAllocator()",
    "kind": "Method",
    "detail": "Function (NextAlloc = Result + AlignedSize ; SpaceConsumed = NextAlloc - LowAddress ; return Result ; } public :)",
    "insertText": "FVirtualAllocator(void *InLowAdress, void* InHighAddress, size_t InPageSize, size_t InMaximumAlignment, bool bInBacksMalloc) : LowAddress((uint8*)InLowAdress) , HighAddress((uint8*)InHighAddress) , PageSize(InPageSize) , MaximumAlignment(FMath::Max(InMaximumAlignment, InPageSize)) , NextAlloc((uint8*)InLowAdress) , RecycledLinks(nullptr) , LinkSize(0) , bBacksMalloc(bInBacksMalloc) , SpaceConsumed(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TotalSize = HighAddress - LowAddress ;)",
    "insertText": "check(LowAddress && HighAddress && LowAddress < HighAddress && IsAligned(LowAddress, MaximumAlignment))"
  },
  {
    "label": "FVirtualAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVirtualAllocator()"
  },
  {
    "label": "GetPagesForSizeAndAlignment()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPagesForSizeAndAlignment(size_t Size, size_t Alignment = 1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (size_t SizeAndAlignment =)",
    "insertText": "Max(Align(Size, Alignment), PageSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (size_t Pages = SizeAndAlignment / PageSize ;)",
    "insertText": "check(Pages == uint32(Pages))"
  },
  {
    "label": "CeilLogTwo64()",
    "kind": "Method",
    "detail": "Function (} size_t BlockIndex =)",
    "insertText": "CeilLogTwo64(FMath::Max(SizeAndAlignment, PageSize))"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t AlignedSize =)",
    "insertText": "size_t(1)"
  },
  {
    "label": "AllocateVirtualPages()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "AllocateVirtualPages(uint32 NumPages, size_t AlignmentForCheck = 1)"
  },
  {
    "label": "CeilLogTwo64()",
    "kind": "Method",
    "detail": "Function (size_t BlockIndex =)",
    "insertText": "CeilLogTwo64(NumPages * PageSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHackForHugeBlock = false ;)",
    "insertText": "if(size_t(NumPages) * PageSize * 2 >= TotalSize)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (AlignedSize =)",
    "insertText": "size_t(NumPages)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bHackForHugeBlock = true ; } FPerBlockSize& Block = Blocks [ BlockIndex ] ; FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8* Result ;)",
    "insertText": "if(Block.FirstFree)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "Result(uint8*)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Block . FirstFree -> Ptr = nullptr ; FFreeLink* Next = RecycledLinks ; RecycledLinks = Block . FirstFree ; Block . FirstFree = Block . FirstFree -> Next ;)",
    "insertText": "check(!Block.FirstFree || Block.FirstFree->Ptr)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (RecycledLinks -> Next = Next ;)",
    "insertText": "check(IsAligned(Result, FMath::Min(AlignedSize, MaximumAlignment)))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Block . FreeBlocksSize - = AlignedSize ; } else { size_t AllocSize =)",
    "insertText": "Max(AlignedSize, MaximumAlignment)"
  },
  {
    "label": "AllocNewVM()",
    "kind": "Method",
    "detail": "Function (uint8* LocalNextAlloc =)",
    "insertText": "AllocNewVM(AllocSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8* NewNextAlloc = LocalNextAlloc + AllocSize ;)",
    "insertText": "if(NewNextAlloc > HighAddress)"
  },
  {
    "label": "OnOutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutOfMemory(HighAddress - LowAddress, 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} Block . AllocBlocksSize + = AllocSize ; Result = LocalNextAlloc ;)",
    "insertText": "check(Result)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (LocalNextAlloc + = AlignedSize ;)",
    "insertText": "while(LocalNextAlloc < NewNextAlloc && !bHackForHugeBlock)"
  },
  {
    "label": "FreeVirtualByBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtualByBlock(LocalNextAlloc, Block, AlignedSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (LocalNextAlloc + = AlignedSize ; } })",
    "insertText": "check(IsAligned(Result, AlignmentForCheck))"
  },
  {
    "label": "FreeVirtualByBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtualByBlock(Ptr, Block, AlignedSize)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} struct FVirtualAllocatorStatsPerBlockSize { size_t AllocBlocksSize ; size_t FreeBlocksSize ; } ; struct FVirtualAllocatorStats { size_t PageSize ; size_t MaximumAlignment ; size_t VMSpaceTotal ; size_t VMSpaceConsumed ; size_t VMSpaceConsumedPeak ; size_t FreeListLinks ; FVirtualAllocatorStatsPerBlockSize BlockStats [ 6 4 ] ; } ; void)",
    "insertText": "GetStats(FVirtualAllocatorStats& OutStats)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OutStats . PageSize = PageSize ; OutStats . MaximumAlignment = MaximumAlignment ; OutStats . VMSpaceTotal = HighAddress - LowAddress ; OutStats . VMSpaceConsumed = SpaceConsumed ; OutStats . FreeListLinks = LinkSize ;)",
    "insertText": "for(int32 Index = 0; Index < 64; Index++)"
  }
]