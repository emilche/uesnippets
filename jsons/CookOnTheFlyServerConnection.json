[
  {
    "label": "FArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayReader"
  },
  {
    "label": "ICookOnTheFlyServerTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServerTransport"
  },
  {
    "label": "ICookOnTheFlyServerTransport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CookOnTheFly . h \" class FArrayReader ; class ICookOnTheFlyServerTransport { public :)",
    "insertText": "ICookOnTheFlyServerTransport()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "Initialize(const TCHAR*)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "SendPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPayload(const TArray<uint8>& Payload)"
  },
  {
    "label": "HasPendingPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingPayload()"
  },
  {
    "label": "ReceivePayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivePayload(FArrayReader& Payload)"
  },
  {
    "label": "MakeCookOnTheFlyServerConnection()",
    "kind": "Method",
    "detail": "Function (} ; UE::Cook::ICookOnTheFlyServerConnection*)",
    "insertText": "MakeCookOnTheFlyServerConnection(TUniquePtr<ICookOnTheFlyServerTransport> InTransport, const FString& InHost)"
  }
]