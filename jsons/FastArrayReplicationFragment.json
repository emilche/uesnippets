[
  {
    "label": "TFastArrayReplicationFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastArrayReplicationFragment"
  },
  {
    "label": "EAllowAdditionalPropertiesType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAllowAdditionalPropertiesType"
  },
  {
    "label": "TNativeFastArrayReplicationFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNativeFastArrayReplicationFragment"
  },
  {
    "label": "TFastArrayReplicationFragment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / ReplicationFragment . h \" # include \" Iris / ReplicationSystem / Private / FastArrayReplicationFragmentInternal . h \" # include \" Iris / ReplicationState / IrisFastArraySerializer . h \" # include \" Iris / ReplicationState / Private / IrisFastArraySerializerInternal . h \" # include \" Iris / ReplicationState / PropertyReplicationState . h \" # include \" Iris / ReplicationState / ReplicationStateUtil . h \" # include \" Iris / ReplicationState / ReplicationStateDescriptor . h \" # include \" Net / Core / NetBitArray . h \" # include \" Templates / UnrealTemplate . h \" namespace UE::Net { template<FastArrayItemType,FastArrayType> class TFastArrayReplicationFragment : public Private::FFastArrayReplicationFragmentBase { public : typedef TArray<FastArrayItemType> ItemArrayType ;)",
    "insertText": "TFastArrayReplicationFragment(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor, bool bValidateDescriptor = true)"
  },
  {
    "label": "TFastArrayReplicationFragment()",
    "kind": "Method",
    "detail": "Function (protected : enum EAllowAdditionalPropertiesType { AllowAdditionalProperties } ;)",
    "insertText": "TFastArrayReplicationFragment(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor, const EAllowAdditionalPropertiesType) : TFastArrayReplicationFragment(InTraits, InOwner, InDescriptor, false)"
  },
  {
    "label": "ApplyReplicatedStateForExtraProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyReplicatedStateForExtraProperties(FReplicationStateApplyContext& Context)"
  },
  {
    "label": "ApplyReplicatedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyReplicatedState(FReplicationStateApplyContext& Context)"
  },
  {
    "label": "CallRepNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallRepNotifies(FReplicationStateApplyContext& Context)"
  },
  {
    "label": "PollReplicatedState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollReplicatedState(EReplicationFragmentPollFlags PollOption)"
  },
  {
    "label": "ReplicatedStateToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicatedStateToString(FStringBuilderBase& StringBuilder, FReplicationStateApplyContext& Context, EReplicationStateToStringFlags Flags)"
  },
  {
    "label": "PollAllState()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PollAllState(bool bForceFullCompare = false)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "GetFastArraySerializerFromOwner()",
    "kind": "Method",
    "detail": "Function (FastArrayType*)",
    "insertText": "GetFastArraySerializerFromOwner()"
  },
  {
    "label": "GetFastArraySerializerFromReplicationState()",
    "kind": "Method",
    "detail": "Function (FastArrayType*)",
    "insertText": "GetFastArraySerializerFromReplicationState()"
  },
  {
    "label": "GetFastArraySerializerFromApplyContext()",
    "kind": "Method",
    "detail": "Function (FastArrayType*)",
    "insertText": "GetFastArraySerializerFromApplyContext(FReplicationStateApplyContext& Context)"
  },
  {
    "label": "TNativeFastArrayReplicationFragment()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FastArrayType> AccumulatedReceivedState ; } ; template<FastArrayItemType,FastArrayType,PollingPolicyType = FastArrayPollingPolicies::FNoPollingPolicy> class TNativeFastArrayReplicationFragment final : public Private::FNativeFastArrayReplicationFragmentBase { public : typedef TArray<FastArrayItemType> ItemArrayType ;)",
    "insertText": "TNativeFastArrayReplicationFragment(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(FFragmentRegistrationContext& Fragments, EReplicationFragmentTraits Traits = EReplicationFragmentTraits::None)"
  },
  {
    "label": "PollAllState()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PollAllState()"
  },
  {
    "label": "TFastArrayReplicationFragment()",
    "kind": "Method",
    "detail": "Function (private : PollingPolicyType PollingPolicy ; } ; template<FastArrayItemType,FastArrayType> TFastArrayReplicationFragment<FastArrayItemType,FastArrayType)",
    "insertText": "TFastArrayReplicationFragment(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor, bool bValidateDescriptor) : FFastArrayReplicationFragmentBase(InTraits, InOwner, InDescriptor, bValidateDescriptor)"
  },
  {
    "label": "FastArrayType()",
    "kind": "Method",
    "detail": "Function (AccumulatedReceivedState = MakeUnique<)",
    "insertText": "FastArrayType()"
  },
  {
    "label": "ItemArrayType()",
    "kind": "Method",
    "detail": "Function (ItemArrayType* DstWrappedArray = reinterpret_cast<)",
    "insertText": "ItemArrayType(reinterpret_cast<uint8*>(DstArraySerializer) + WrappedArrayOffsetRelativeFastArraySerializerProperty)"
  },
  {
    "label": "InternalPartialDequantizeFastArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalPartialDequantizeFastArray(Context, reinterpret_cast<uint8*>(AccumulatedReceivedState.Get()), Context.StateBufferData.RawStateBuffer, GetFastArrayPropertyStructDescriptor())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FastArrayType* SrcArraySerializer = AccumulatedReceivedState .)",
    "insertText": "Get()"
  },
  {
    "label": "ItemArrayType()",
    "kind": "Method",
    "detail": "Function (const ItemArrayType* SrcWrappedArray = reinterpret_cast<const)",
    "insertText": "ItemArrayType(reinterpret_cast<uint8*>(SrcArraySerializer) + WrappedArrayOffsetRelativeFastArraySerializerProperty)"
  },
  {
    "label": "ApplyReplicatedState()",
    "kind": "Method",
    "detail": "Function (Private::)",
    "insertText": "ApplyReplicatedState(DstArraySerializer, DstWrappedArray, SrcArraySerializer, SrcWrappedArray, GetArrayElementDescriptor(), Context)"
  },
  {
    "label": "InternalDequantizeExtraProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDequantizeExtraProperties(*Context.NetSerializationContext, reinterpret_cast<uint8*>(GetFastArraySerializerFromOwner()), Context.StateBufferData.RawStateBuffer, GetFastArrayPropertyStructDescriptor())"
  },
  {
    "label": "PollAllState()",
    "kind": "Method",
    "detail": "Function (bool bForceFullCompare = true ; return)",
    "insertText": "PollAllState(bForceFullCompare)"
  },
  {
    "label": "PollAllState()",
    "kind": "Method",
    "detail": "Function (} } template<FastArrayItemType,FastArrayType> bool TFastArrayReplicationFragment<FastArrayItemType,FastArrayType)",
    "insertText": "PollAllState(bool bForceFullCompare)"
  },
  {
    "label": "IRIS_PROFILER_PROTOCOL_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRIS_PROFILER_PROTOCOL_NAME(ReplicationStateDescriptor->DebugName->Name)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} bool bMarkArrayDirty = false ; const uint32 ElementCount = SrcWrappedArray ->)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (DstWrappedArray ->)",
    "insertText": "SetNum(ElementCount)"
  },
  {
    "label": "GetArrayElementDescriptor()",
    "kind": "Method",
    "detail": "Function (bMarkArrayDirty = true ; } const FReplicationStateDescriptor* ArrayElementDescriptor =)",
    "insertText": "GetArrayElementDescriptor()"
  },
  {
    "label": "GetMemberChangeMask()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateMemberDescriptor* MemberDescriptors = ArrayElementDescriptor -> MemberDescriptors ; FNetBitArrayView MemberChangeMask = UE::Net::)",
    "insertText": "GetMemberChangeMask(ReplicationState->GetStateBuffer(), ReplicationStateDescriptor)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateMemberChangeMaskDescriptor& MemberChangeMaskDescriptor = ReplicationStateDescriptor -> MemberChangeMaskDescriptors [ 0 ] ; const uint32 ChangeMaskBitOffset = MemberChangeMaskDescriptor . BitOffset + FIrisFastArraySerializer::IrisFastArrayChangeMaskBitOffset ; const uint32 ChangeMaskBitCount = MemberChangeMaskDescriptor . BitCount - FIrisFastArraySerializer::IrisFastArrayChangeMaskBitOffset ; FastArrayItemType* DstItems = DstWrappedArray ->)",
    "insertText": "GetData()"
  },
  {
    "label": "DisablePushModel()",
    "kind": "Method",
    "detail": "Function ({ # if WITH_PUSH_MODEL TGuardValue)",
    "insertText": "DisablePushModel(SrcArraySerializer->RepIndex, (int32)INDEX_NONE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(int32 ElementIt = 0, ElementEndIt = ElementCount; ElementIt < ElementEndIt; ++ElementIt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FastArrayItemType& SrcItem = SrcItems [ ElementIt ] ; FastArrayItemType& DstItem = DstItems [ ElementIt ] ; const bool bIsWritingOnClient = false ;)",
    "insertText": "if(SrcArraySerializer->template ShouldWriteFastArrayItem<FastArrayItemType, FastArrayType>(SrcItem, bIsWritingOnClient))"
  },
  {
    "label": "MarkItemDirty()",
    "kind": "Method",
    "detail": "Function (SrcArraySerializer ->)",
    "insertText": "MarkItemDirty(SrcItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const bool bReplicationKeyChanged = SrcItem . ReplicationKey ! = DstItem . ReplicationKey | | SrcItem . ReplicationID ! = DstItem . ReplicationID ;)",
    "insertText": "if(bReplicationKeyChanged || (bForceFullCompare && !InternalCompareArrayElement(ArrayElementDescriptor, &DstItem, &SrcItem)))"
  },
  {
    "label": "InternalCopyArrayElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCopyArrayElement(ArrayElementDescriptor, &DstItem, &SrcItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DstItem . ReplicationKey = SrcItem . ReplicationKey ;)",
    "insertText": "if(ChangeMaskBitCount)"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (MemberChangeMask .)",
    "insertText": "SetBit((ElementIt % ChangeMaskBitCount) + ChangeMaskBitOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bMarkArrayDirty = true ; } } } } DstArraySerializer -> ArrayReplicationKey = SrcArraySerializer -> ArrayReplicationKey ;)",
    "insertText": "if(bMarkArrayDirty && ReplicationState->IsCustomConditionEnabled(FIrisFastArraySerializer::IrisFastArrayPropertyBitIndex))"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (MemberChangeMask .)",
    "insertText": "SetBit(FIrisFastArraySerializer::IrisFastArrayPropertyBitIndex)"
  },
  {
    "label": "MarkNetObjectStateHeaderDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNetObjectStateHeaderDirty(UE::Net::Private::GetReplicationStateHeader(ReplicationState->GetStateBuffer(), ReplicationStateDescriptor))"
  },
  {
    "label": "InternalDequantizeFastArray()",
    "kind": "Method",
    "detail": "Function (FastArrayType ReceivedState ;)",
    "insertText": "InternalDequantizeFastArray(*Context.NetSerializationContext, reinterpret_cast<uint8*>(&ReceivedState), Context.StateBufferData.RawStateBuffer, GetFastArrayPropertyStructDescriptor())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(StringBuilder, reinterpret_cast<uint8*>(&ReceivedState), GetFastArrayPropertyStructDescriptor())"
  },
  {
    "label": "GetReplicationStateHeader()",
    "kind": "Method",
    "detail": "Function (FReplicationStateHeader& ReplicationStateHeader =)",
    "insertText": "GetReplicationStateHeader(ReplicationState->GetStateBuffer(), ReplicationStateDescriptor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = ReplicationStateDescriptor ;)",
    "insertText": "if(const UFunction* RepNotifyFunction = Descriptor->MemberPropertyDescriptors[0].RepNotifyFunction)"
  },
  {
    "label": "InternalDequantizeExtraProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDequantizeExtraProperties(*Context.NetSerializationContext, reinterpret_cast<uint8*>(&ReceivedState), Context.StateBufferData.RawStateBuffer, GetFastArrayPropertyStructDescriptor())"
  },
  {
    "label": "TNativeFastArrayReplicationFragment()",
    "kind": "Method",
    "detail": "Function (} } template<FastArrayItemType,FastArrayType,PollingPolicyType> TNativeFastArrayReplicationFragment<FastArrayItemType,FastArrayType,PollingPolicyType)",
    "insertText": "TNativeFastArrayReplicationFragment(EReplicationFragmentTraits InTraits, UObject* InOwner, const FReplicationStateDescriptor* InDescriptor) : FNativeFastArrayReplicationFragmentBase(InTraits, InOwner, InDescriptor)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (Traits | = EReplicationFragmentTraits::NeedsPoll ; } } template<FastArrayItemType,FastArrayType,PollingPolicyType> void TNativeFastArrayReplicationFragment<FastArrayItemType,FastArrayType,PollingPolicyType)",
    "insertText": "Register(FFragmentRegistrationContext& Context, EReplicationFragmentTraits InTraits)"
  },
  {
    "label": "RegisterReplicationFragment()",
    "kind": "Method",
    "detail": "Function (Traits | = InTraits ; Context .)",
    "insertText": "RegisterReplicationFragment(this, ReplicationStateDescriptor.GetReference(), reinterpret_cast<uint8*>(GetFastArraySerializerFromOwner()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using FPollingState = FastArrayPollingPolicies::FPollingState ;)",
    "insertText": "if(FPollingState* PollingState = PollingPolicy.GetPollingState())"
  },
  {
    "label": "GetChangeMask()",
    "kind": "Method",
    "detail": "Function (bMarkArrayDirty = true ; } FNetBitArrayView MemberChangeMask = UE::Net::Private::)",
    "insertText": "GetChangeMask(*SrcArraySerializer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SrcItem.ReplicationKey != DstItem.ReplicationKey || SrcItem.ReplicationID != DstItem.ReplicationID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bMarkArrayDirty = true ; } } } PollingState -> ArrayReplicationKey = SrcArraySerializer -> ArrayReplicationKey ;)",
    "insertText": "if(bMarkArrayDirty)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (const bool bHasCustomConditionals =)",
    "insertText": "EnumHasAnyFlags(ReplicationStateDescriptor->Traits, EReplicationStateTraits::HasLifetimeConditionals)"
  },
  {
    "label": "MarkArrayDirty()",
    "kind": "Method",
    "detail": "Function (UE::Net::Private::)",
    "insertText": "MarkArrayDirty(*SrcArraySerializer)"
  },
  {
    "label": "GetReplicationStateHeader()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateHeader& ReplicationStateHeader = Private::)",
    "insertText": "GetReplicationStateHeader(*SrcArraySerializer)"
  },
  {
    "label": "FastArrayType()",
    "kind": "Method",
    "detail": "Function (FastArrayType* DstArraySerializer = reinterpret_cast<)",
    "insertText": "FastArrayType(reinterpret_cast<uint8*>(Owner) + ReplicationStateDescriptor->MemberProperties[0]->GetOffset_ForGC())"
  },
  {
    "label": "ItemArrayType()",
    "kind": "Method",
    "detail": "Function (ItemArrayType* DstWrappedArray = reinterpret_cast<)",
    "insertText": "ItemArrayType((uint8*)(DstArraySerializer) + WrappedArrayOffsetRelativeFastArraySerializerProperty)"
  },
  {
    "label": "ItemArrayType()",
    "kind": "Method",
    "detail": "Function (FastArrayType* SrcArraySerializer =& ReceivedState ; const ItemArrayType* SrcWrappedArray = reinterpret_cast<const)",
    "insertText": "ItemArrayType(reinterpret_cast<uint8*>(&ReceivedState) + WrappedArrayOffsetRelativeFastArraySerializerProperty)"
  },
  {
    "label": "CreateAndRegisterFragment()",
    "kind": "Method",
    "detail": "Function (} namespace Private { template<FastArrayType> FReplicationFragment*)",
    "insertText": "CreateAndRegisterFragment(UObject* Owner, const FReplicationStateDescriptor* Descriptor, FFragmentRegistrationContext& Context)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net ;)",
    "insertText": "static_assert(TFastArrayTypeHelper<FastArrayType>::HasValidFastArrayItemType(), \"Invalid FastArrayItemType detected. Make sure that FastArraySerializer has a single replicated property that is a dynamic array of the expected type\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef TNativeFastArrayReplicationFragment<TFastArrayTypeHelper<FastArrayType>::FastArrayItemType,FastArrayType,FastArrayPollingPolicies::FNeedPollingPolicy> FFragmentType ;)",
    "insertText": "if(FFragmentType* Fragment = new FFragmentType(Context.GetFragmentTraits(), Owner, Descriptor))"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (Fragment ->)",
    "insertText": "Register(Context, EReplicationFragmentTraits::DeleteWithInstanceProtocol)"
  }
]