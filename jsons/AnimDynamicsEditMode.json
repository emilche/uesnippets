[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimDynamicsViewportObjectReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimDynamicsViewportObjectReference"
  },
  {
    "label": "FAnimDynamicsEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimDynamicsEditMode"
  },
  {
    "label": "UAnimGraphNode_AnimDynamics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_AnimDynamics"
  },
  {
    "label": "FAnimDynamicsViewportObjectReference()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimNodeEditMode . h \" # include \" Containers / Array . h \" # include \" Math / Matrix . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" UObject / NameTypes . h \" # include \" UnrealWidgetFwd . h \" class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class HHitProxy ; struct FViewportClick ; enum class FAnimDynamicsViewportObjectType { PlaneLimit,SphericalLimit,SphericalColisionVolume,BoxExtents } ; struct FAnimDynamicsViewportObjectReference {)",
    "insertText": "FAnimDynamicsViewportObjectReference(const uint32 InEditorNodeUniqueId, const FAnimDynamicsViewportObjectType InType, const uint32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 EditorNodeUniqueId ; FAnimDynamicsViewportObjectType Type ; uint32 Index ; } ; const bool)",
    "insertText": "operator(const FAnimDynamicsViewportObjectReference& Lhs, const FAnimDynamicsViewportObjectReference& Rhs)"
  },
  {
    "label": "FAnimDynamicsEditMode()",
    "kind": "Method",
    "detail": "Function (class FAnimDynamicsEditMode : public FAnimNodeEditMode { public :)",
    "insertText": "FAnimDynamicsEditMode()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitMode()"
  },
  {
    "label": "GetWidgetCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordinateSystem()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "ChangeToNextWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "ChangeToNextWidgetMode(UE::Widget::EWidgetMode InCurWidgetMode)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetSelectedBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSelectedBone()"
  },
  {
    "label": "DoTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTranslation(FVector& InTranslation)"
  },
  {
    "label": "DoRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRotation(FRotator& InRotation)"
  },
  {
    "label": "DoScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoScale(FVector& InScale)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "FindValidWidgetMode()",
    "kind": "Method",
    "detail": "Function (private : UE::Widget::EWidgetMode)",
    "insertText": "FindValidWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "FindSelectedEditorAnimNode()",
    "kind": "Method",
    "detail": "Function (const class UAnimGraphNode_AnimDynamics* const)",
    "insertText": "FindSelectedEditorAnimNode(const int32 InEditorNodeId)"
  },
  {
    "label": "IsValidWidgetMode()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsValidWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetNextWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetNextWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetActiveViewportObjectTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform)",
    "insertText": "GetActiveViewportObjectTransform()"
  },
  {
    "label": "GetViewportObjectTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform)",
    "insertText": "GetViewportObjectTransform(const FAnimDynamicsViewportObjectReference* const SelectedObjectRef)"
  },
  {
    "label": "GetViewportObjectLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform)",
    "insertText": "GetViewportObjectLocalSpaceTransform(const FAnimDynamicsViewportObjectReference* const SelectedObjectRef)"
  },
  {
    "label": "GetActiveViewportObject()",
    "kind": "Method",
    "detail": "Function (const FAnimDynamicsViewportObjectReference* const)",
    "insertText": "GetActiveViewportObject()"
  }
]