[
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFilterVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterVertex"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FHMDViewMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHMDViewMesh"
  },
  {
    "label": "EHMDMeshType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHMDMeshType"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpectatorScreenModeTexturePlusEyeLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpectatorScreenModeTexturePlusEyeLayout"
  },
  {
    "label": "UHandKeypointConversion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHandKeypointConversion"
  },
  {
    "label": "FXRHMDData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRHMDData"
  },
  {
    "label": "FXRMotionControllerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRMotionControllerData"
  },
  {
    "label": "FXRMotionControllerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRMotionControllerState"
  },
  {
    "label": "FXRHandTrackingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXRHandTrackingState"
  },
  {
    "label": "FHMDViewMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" IMotionController . h \" # include \" InputCoreTypes . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Math / IntRect . h \" # include \" Math / Quat . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Misc / Guid . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" HeadMountedDisplayTypes . generated . h \" class FRHICommandListImmediate ; class UObject ; struct FFilterVertex ; struct FFrame ; class FHMDViewMesh { public : enum EHMDMeshType { MT_HiddenArea,MT_VisibleArea } ;)",
    "insertText": "FHMDViewMesh()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef VertexBufferRHI ; FBufferRHIRef IndexBufferRHI ; unsigned NumVertices ; unsigned NumIndices ; unsigned NumTriangles ; } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogHMD, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLoadingSplash, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Orientation)",
    "insertText": "UMETA(DisplayName = \"Orientation\"), Position UMETA(DisplayName = \"Position\"), OrientationAndPosition UMETA(DisplayName = \"Orientation and Position\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { View)",
    "insertText": "UMETA(ToolTip = \"Previously sometimes used Eye space to query for the view transform, this space is fixed to the HMD, meaning that as the hmd moves this space moves relative to other spaces. This isn't used as a tracking origin.\") , LocalFloor UMETA(ToolTip = \"For standing stationary experiences. Typically centered around HMDs initial position either at app startup or device startup, with Z 0 set to match the floor as in the Stage Space. Falls back to local.\") , Local UMETA(ToolTip = \"For seated experiences. Always Supported. Typically centered around the HMDs initial position either at app startup or device startup. Useful for seated experiences. Previously called Eye Space. \") , Stage UMETA(ToolTip = \"For walking-around experiences. The origin will be at floor level and typically within a defined play areas who's bounds will be available. Falls back to local.\") , CustomOpenXR UMETA(ToolTip = \"Custom OpenXR tracking space of some kind. You cannot set this space explictly, it is automatically used by some platform plugin extensions.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Unknown)",
    "insertText": "UMETA(DisplayName = \"Unknown\"), Worn UMETA(DisplayName = \"Worn\"), NotWorn UMETA(DisplayName = \"Not Worn\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { NoFlags = 0 x00)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Disabled)",
    "insertText": "UMETA(DisplayName = \"Disabled\"), SingleEyeLetterboxed UMETA(DisplayName = \"SingleEyeLetterboxed\"), Undistorted UMETA(DisplayName = \"Undistorted\"), Distorted UMETA(DisplayName = \"Distorted\"), SingleEye UMETA(DisplayName = \"SingleEye\"), SingleEyeCroppedToFill UMETA(DisplayName = \"SingleEyeCroppedToFill\"), Texture UMETA(DisplayName = \"Texture\"), TexturePlusEye UMETA(DisplayName = \"TexturePlusEye\")"
  },
  {
    "label": "ESpectatorScreenModeFirst()",
    "kind": "Method",
    "detail": "Function (const uint8)",
    "insertText": "ESpectatorScreenModeFirst(uint8)"
  },
  {
    "label": "ESpectatorScreenModeLast()",
    "kind": "Method",
    "detail": "Function (const uint8)",
    "insertText": "ESpectatorScreenModeLast(uint8)"
  },
  {
    "label": "FSpectatorScreenModeTexturePlusEyeLayout()",
    "kind": "Method",
    "detail": "Function (struct FSpectatorScreenModeTexturePlusEyeLayout {)",
    "insertText": "FSpectatorScreenModeTexturePlusEyeLayout() : EyeRectMin(0.0f, 0.0f) , EyeRectMax(1.0f, 1.0f) , TextureRectMin(0.125f, 0.125f) , TextureRectMax(0.25f, 0.25f) , bDrawEyeFirst(true) , bUseAlpha(false) , bClearBlack(false)"
  },
  {
    "label": "FSpectatorScreenModeTexturePlusEyeLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSpectatorScreenModeTexturePlusEyeLayout(FVector2D InEyeRectMin, FVector2D InEyeRectMax, FVector2D InTextureRectMin, FVector2D InTextureRectMax, bool InbDrawEyeFirst, bool InbClearBlack, bool InbUseAlpha) : EyeRectMin(InEyeRectMin) , EyeRectMax(InEyeRectMax) , TextureRectMin(InTextureRectMin) , TextureRectMax(InTextureRectMax) , bDrawEyeFirst(InbDrawEyeFirst) , bUseAlpha(InbUseAlpha) , bClearBlack(InbClearBlack)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bValid = true ;)",
    "insertText": "if((EyeRectMax.X <= EyeRectMin.X) || (EyeRectMax.Y <= EyeRectMin.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bValid = false ; })",
    "insertText": "if((TextureRectMax.X <= TextureRectMin.X) || (TextureRectMax.Y <= TextureRectMin.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bValid = false ; })",
    "insertText": "if(EyeRectMin.X > 1.0f || EyeRectMin.X < 0.0f || EyeRectMin.Y > 1.0f || EyeRectMin.Y < 0.0f || EyeRectMax.X > 1.0f || EyeRectMax.X < 0.0f || EyeRectMax.Y > 1.0f || EyeRectMax.Y < 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bValid = false ; })",
    "insertText": "if(TextureRectMin.X > 1.0f || TextureRectMin.X < 0.0f || TextureRectMin.Y > 1.0f || TextureRectMin.Y < 0.0f || TextureRectMax.X > 1.0f || TextureRectMax.X < 0.0f || TextureRectMax.Y > 1.0f || TextureRectMax.Y < 0.0f)"
  },
  {
    "label": "GetScaledEyeRect()",
    "kind": "Method",
    "detail": "Function (bValid = false ; } return bValid ; } FIntRect)",
    "insertText": "GetScaledEyeRect(int SizeX, int SizeY)"
  },
  {
    "label": "GetScaledTextureRect()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetScaledTextureRect(int SizeX, int SizeY)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (HeadMountedDisplay,Controller,TrackingReference,Tracker,Other,)",
    "insertText": "Invalid(uint8)-2 UMETA(Hidden), Any = (uint8)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Palm,Wrist,ThumbMetacarpal,ThumbProximal,ThumbDistal,ThumbTip,IndexMetacarpal,IndexProximal,IndexIntermediate,IndexDistal,IndexTip,MiddleMetacarpal,MiddleProximal,MiddleIntermediate,MiddleDistal,MiddleTip,RingMetacarpal,RingProximal,RingIntermediate,RingDistal,RingTip,LittleMetacarpal,LittleProximal,LittleIntermediate,LittleDistal,LittleTip } ; const int32 EHandKeypointCount = static_cast<)",
    "insertText": "int32(EHandKeypoint::LittleTip)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintPure, BlueprintInternalUseOnly, meta = (CompactNodeTitle = \"->\", BlueprintAutocast)) static int32 Conv_HandKeypointToInt32(EHandKeypoint input)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Aim,Grip,Palm } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType, meta=(Deprecated=\"5.5\", DeprecationMessage=\"Use FXRMotionControllerState and FXRHandTrackingState instead.\"))"
  }
]