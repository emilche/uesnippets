[
  {
    "label": "Initializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Initializer"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_INITIALIZER_H # define EIGEN_CXX11_TENSOR_TENSOR_INITIALIZER_H # if EIGEN_HAS_VARIADIC_TEMPLATES # include<initializer_list> namespace Eigen { namespace internal { template<Derived,int N> struct Initializer { typedef std::initializer_list<Initializer<Derived,N - 1>::InitList> InitList ; void)",
    "insertText": "run(TensorEvaluator<Derived, DefaultDevice>& tensor, Eigen::array<typename traits<Derived>::Index, traits<Derived>::NumDimensions>* indices, const InitList& vals)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i = 0 ;)",
    "insertText": "for(const auto& v : vals)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Initializer<Derived,N - 1)",
    "insertText": "run(tensor, indices, v)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tensor .)",
    "insertText": "coeffRef(*indices)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Derived> struct Initializer<Derived,0> { typedef traits<Derived>::Scalar InitList ; void)",
    "insertText": "run(TensorEvaluator<Derived, DefaultDevice>& tensor, Eigen::array<typename traits<Derived>::Index, traits<Derived>::NumDimensions>*, const InitList& v)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tensor .)",
    "insertText": "coeffRef(0)"
  },
  {
    "label": "initialize_tensor()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived,int N> void)",
    "insertText": "initialize_tensor(TensorEvaluator<Derived, DefaultDevice>& tensor, const typename Initializer<Derived, traits<Derived>::NumDimensions>::InitList& vals)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Eigen::array<traits<Derived>::Index,traits<Derived>::NumDimensions> indices ; Initializer<Derived,traits<Derived>::NumDimensions)",
    "insertText": "run(tensor, &indices, vals)"
  }
]