[
  {
    "label": "ByteSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteSink"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "Normalizer2()",
    "kind": "Method",
    "detail": "Function (# ifndef __NORMALIZER2_H__ # define __NORMALIZER2_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_NORMALIZATION # include \" unicode / stringpiece . h \" # include \" unicode / uniset . h \" # include \" unicode / unistr . h \" # include \" unicode / unorm2 . h \" U_NAMESPACE_BEGIN class ByteSink ; class Normalizer2 : public UObject { public : ~)",
    "insertText": "Normalizer2()"
  },
  {
    "label": "getNFCInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getNFCInstance(UErrorCode &errorCode)"
  },
  {
    "label": "getNFDInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getNFDInstance(UErrorCode &errorCode)"
  },
  {
    "label": "getNFKCInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getNFKCInstance(UErrorCode &errorCode)"
  },
  {
    "label": "getNFKDInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getNFKDInstance(UErrorCode &errorCode)"
  },
  {
    "label": "getNFKCCasefoldInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getNFKCCasefoldInstance(UErrorCode &errorCode)"
  },
  {
    "label": "getInstance()",
    "kind": "Method",
    "detail": "Function (const Normalizer2*)",
    "insertText": "getInstance(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &errorCode)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "normalize(const UnicodeString &src, UErrorCode &errorCode)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (UnicodeString result ;)",
    "insertText": "normalize(src, result, errorCode)"
  },
  {
    "label": "normalizeUTF8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalizeUTF8(uint32_t options, StringPiece src, ByteSink &sink, Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "normalizeSecondAndAppend()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "normalizeSecondAndAppend(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode)"
  },
  {
    "label": "getDecomposition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getDecomposition(UChar32 c, UnicodeString &decomposition)"
  },
  {
    "label": "getRawDecomposition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getRawDecomposition(UChar32 c, UnicodeString &decomposition)"
  },
  {
    "label": "composePair()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "composePair(UChar32 a, UChar32 b)"
  },
  {
    "label": "getCombiningClass()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "getCombiningClass(UChar32 c)"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNormalized(const UnicodeString &s, UErrorCode &errorCode)"
  },
  {
    "label": "isNormalizedUTF8()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNormalizedUTF8(StringPiece s, UErrorCode &errorCode)"
  },
  {
    "label": "quickCheck()",
    "kind": "Method",
    "detail": "Function (UNormalizationCheckResult)",
    "insertText": "quickCheck(const UnicodeString &s, UErrorCode &errorCode)"
  },
  {
    "label": "spanQuickCheckYes()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode)"
  },
  {
    "label": "hasBoundaryBefore()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasBoundaryBefore(UChar32 c)"
  },
  {
    "label": "hasBoundaryAfter()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasBoundaryAfter(UChar32 c)"
  },
  {
    "label": "isInert()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isInert(UChar32 c)"
  },
  {
    "label": "FilteredNormalizer2()",
    "kind": "Method",
    "detail": "Function (} ; class FilteredNormalizer2 : public Normalizer2 { public :)",
    "insertText": "FilteredNormalizer2(const Normalizer2 &n2, const UnicodeSet &filterSet) : norm2(n2), set(filterSet)"
  },
  {
    "label": "FilteredNormalizer2()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FilteredNormalizer2()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "normalize(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (private : UnicodeString&)",
    "insertText": "normalize(const UnicodeString &src, UnicodeString &dest, USetSpanCondition spanCondition, UErrorCode &errorCode)"
  },
  {
    "label": "normalizeUTF8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalizeUTF8(uint32_t options, const char *src, int32_t length, ByteSink &sink, Edits *edits, USetSpanCondition spanCondition, UErrorCode &errorCode)"
  },
  {
    "label": "normalizeSecondAndAppend()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "normalizeSecondAndAppend(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode)"
  }
]