[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DxilMatrixAnnotation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilMatrixAnnotation"
  },
  {
    "label": "DxilFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFieldAnnotation"
  },
  {
    "label": "DxilTemplateArgAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTemplateArgAnnotation"
  },
  {
    "label": "DxilStructAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilStructAnnotation"
  },
  {
    "label": "DxilTypeSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTypeSystem"
  },
  {
    "label": "DxilPayloadFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilPayloadFieldAnnotation"
  },
  {
    "label": "DxilPayloadAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilPayloadAnnotation"
  },
  {
    "label": "DxilParameterAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilParameterAnnotation"
  },
  {
    "label": "DxilFunctionAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFunctionAnnotation"
  },
  {
    "label": "DxilStructTypeIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilStructTypeIterator"
  },
  {
    "label": "DxilMatrixAnnotation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilCompType . h \" # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / DXIL / DxilInterpolationMode . h \" # include \" dxc / DXIL / DxilResourceProperties . h \" # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / StringRef . h \" # include<memory> # include<string> # include<vector> namespace llvm { class LLVMContext ; class Module ; class Function ; class MDNode ; class Type ; class StructType ; } namespace hlsl { enum class MatrixOrientation { Undefined = 0,RowMajor,ColumnMajor,LastEntry } ; struct DxilMatrixAnnotation { unsigned Rows ; unsigned Cols ; MatrixOrientation Orientation ;)",
    "insertText": "DxilMatrixAnnotation()"
  },
  {
    "label": "DxilFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (} ; class DxilFieldAnnotation { public :)",
    "insertText": "DxilFieldAnnotation()"
  },
  {
    "label": "IsPrecise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecise()"
  },
  {
    "label": "SetPrecise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrecise(bool b = true)"
  },
  {
    "label": "HasMatrixAnnotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMatrixAnnotation()"
  },
  {
    "label": "GetMatrixAnnotation()",
    "kind": "Method",
    "detail": "Function (const DxilMatrixAnnotation&)",
    "insertText": "GetMatrixAnnotation()"
  },
  {
    "label": "SetMatrixAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatrixAnnotation(const DxilMatrixAnnotation &MA)"
  },
  {
    "label": "GetVectorSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetVectorSize()"
  },
  {
    "label": "SetVectorSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorSize(unsigned size)"
  },
  {
    "label": "HasResourceProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasResourceProperties()"
  },
  {
    "label": "GetResourceProperties()",
    "kind": "Method",
    "detail": "Function (const DxilResourceProperties&)",
    "insertText": "GetResourceProperties()"
  },
  {
    "label": "SetResourceProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceProperties(const DxilResourceProperties &RP)"
  },
  {
    "label": "HasCBufferOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCBufferOffset()"
  },
  {
    "label": "GetCBufferOffset()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetCBufferOffset()"
  },
  {
    "label": "SetCBufferOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCBufferOffset(unsigned Offset)"
  },
  {
    "label": "HasCompType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompType()"
  },
  {
    "label": "GetCompType()",
    "kind": "Method",
    "detail": "Function (const CompType&)",
    "insertText": "GetCompType()"
  },
  {
    "label": "SetCompType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompType(CompType::Kind kind)"
  },
  {
    "label": "HasSemanticString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSemanticString()"
  },
  {
    "label": "GetSemanticString()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetSemanticString()"
  },
  {
    "label": "GetSemanticStringRef()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetSemanticStringRef()"
  },
  {
    "label": "SetSemanticString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSemanticString(const std::string &SemString)"
  },
  {
    "label": "HasInterpolationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInterpolationMode()"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (const InterpolationMode&)",
    "insertText": "GetInterpolationMode()"
  },
  {
    "label": "SetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolationMode(const InterpolationMode &IM)"
  },
  {
    "label": "HasFieldName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFieldName()"
  },
  {
    "label": "GetFieldName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetFieldName()"
  },
  {
    "label": "SetFieldName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFieldName(const std::string &FieldName)"
  },
  {
    "label": "IsCBVarUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCBVarUsed()"
  },
  {
    "label": "SetCBVarUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCBVarUsed(bool used)"
  },
  {
    "label": "HasBitFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBitFields()"
  },
  {
    "label": "GetBitFields()",
    "kind": "Method",
    "detail": "Function (const std::vector<DxilFieldAnnotation>&)",
    "insertText": "GetBitFields()"
  },
  {
    "label": "SetBitFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitFields(const std::vector<DxilFieldAnnotation> &Fields)"
  },
  {
    "label": "HasBitFieldWidth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBitFieldWidth()"
  },
  {
    "label": "GetBitFieldWidth()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetBitFieldWidth()"
  },
  {
    "label": "SetBitFieldWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitFieldWidth(const unsigned BitWidth)"
  },
  {
    "label": "DxilTemplateArgAnnotation()",
    "kind": "Method",
    "detail": "Function (private : bool m_bPrecise ; CompType m_CompType ; DxilMatrixAnnotation m_Matrix ; DxilResourceProperties m_ResourceProps ; unsigned m_CBufferOffset ; std::string m_Semantic ; InterpolationMode m_InterpMode ; std::string m_FieldName ; bool m_bCBufferVarUsed ; std::vector<DxilFieldAnnotation> m_BitFields ; unsigned m_BitFieldWidth ; unsigned m_VectorSize ; } ; class DxilTemplateArgAnnotation { public :)",
    "insertText": "DxilTemplateArgAnnotation()"
  },
  {
    "label": "IsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsType()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const llvm::Type*)",
    "insertText": "GetType()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const llvm::Type *pType)"
  },
  {
    "label": "IsIntegral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntegral()"
  },
  {
    "label": "GetIntegral()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetIntegral()"
  },
  {
    "label": "SetIntegral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntegral(int64_t i64)"
  },
  {
    "label": "GetNumFields()",
    "kind": "Method",
    "detail": "Function (private : const llvm::Type* m_Type ; int64_t m_Integral ; } ; class DxilStructAnnotation { class DxilTypeSystem ; public : unsigned)",
    "insertText": "GetNumFields()"
  },
  {
    "label": "GetFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilFieldAnnotation&)",
    "insertText": "GetFieldAnnotation(unsigned FieldIdx)"
  },
  {
    "label": "GetStructType()",
    "kind": "Method",
    "detail": "Function (const llvm::StructType*)",
    "insertText": "GetStructType()"
  },
  {
    "label": "SetStructType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStructType(const llvm::StructType *Ty)"
  },
  {
    "label": "GetCBufferSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetCBufferSize()"
  },
  {
    "label": "SetCBufferSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCBufferSize(unsigned size)"
  },
  {
    "label": "MarkEmptyStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkEmptyStruct()"
  },
  {
    "label": "IsEmptyStruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyStruct()"
  },
  {
    "label": "IsEmptyBesidesResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmptyBesidesResources()"
  },
  {
    "label": "ContainsResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsResources()"
  },
  {
    "label": "GetNumTemplateArgs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetNumTemplateArgs()"
  },
  {
    "label": "SetNumTemplateArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumTemplateArgs(unsigned count)"
  },
  {
    "label": "GetTemplateArgAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilTemplateArgAnnotation&)",
    "insertText": "GetTemplateArgAnnotation(unsigned argIdx)"
  },
  {
    "label": "SetContainsResources()",
    "kind": "Method",
    "detail": "Function (private : const llvm::StructType* m_pStructType = nullptr ; std::vector<DxilFieldAnnotation> m_FieldAnnotations ; unsigned m_CBufferSize = 0 ; std::vector<DxilTemplateArgAnnotation> m_TemplateAnnotations ; void)",
    "insertText": "SetContainsResources()"
  },
  {
    "label": "GetBitOffsetForShaderStage()",
    "kind": "Method",
    "detail": "Function (enum class HasResources { True,False,Only } m_ResourcesContained = HasResources::False ; } ; class DxilPayloadFieldAnnotation { public : unsigned)",
    "insertText": "GetBitOffsetForShaderStage(DXIL::PayloadAccessShaderStage shaderStage)"
  },
  {
    "label": "DxilPayloadFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilPayloadFieldAnnotation()"
  },
  {
    "label": "GetPayloadFieldQualifierMask()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetPayloadFieldQualifierMask()"
  },
  {
    "label": "SetPayloadFieldQualifierMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadFieldQualifierMask(uint32_t fieldBitmask)"
  },
  {
    "label": "AddPayloadFieldQualifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayloadFieldQualifier(DXIL::PayloadAccessShaderStage shaderStage, DXIL::PayloadAccessQualifier qualifier)"
  },
  {
    "label": "GetPayloadFieldQualifier()",
    "kind": "Method",
    "detail": "Function (DXIL::PayloadAccessQualifier)",
    "insertText": "GetPayloadFieldQualifier(DXIL::PayloadAccessShaderStage shaderStage)"
  },
  {
    "label": "HasAnnotations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnnotations()"
  },
  {
    "label": "DxilParameterAnnotation()",
    "kind": "Method",
    "detail": "Function (private : const llvm::StructType* m_pStructType ; std::vector<DxilPayloadFieldAnnotation> m_FieldAnnotations ; } ; enum class DxilParamInputQual { In,Out,Inout,InputPatch,OutputPatch,OutStream0,OutStream1,OutStream2,OutStream3,InputPrimitive,OutIndices,OutVertices,OutPrimitives,InPayload,NodeIO } ; class DxilParameterAnnotation : public DxilFieldAnnotation { public :)",
    "insertText": "DxilParameterAnnotation()"
  },
  {
    "label": "GetParamInputQual()",
    "kind": "Method",
    "detail": "Function (DxilParamInputQual)",
    "insertText": "GetParamInputQual()"
  },
  {
    "label": "SetParamInputQual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParamInputQual(DxilParamInputQual qual)"
  },
  {
    "label": "GetSemanticIndexVec()",
    "kind": "Method",
    "detail": "Function (const std::vector<unsigned>&)",
    "insertText": "GetSemanticIndexVec()"
  },
  {
    "label": "SetSemanticIndexVec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSemanticIndexVec(const std::vector<unsigned> &Vec)"
  },
  {
    "label": "AppendSemanticIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSemanticIndex(unsigned SemIdx)"
  },
  {
    "label": "IsParamInputQualNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParamInputQualNode()"
  },
  {
    "label": "GetNumParameters()",
    "kind": "Method",
    "detail": "Function (private : DxilParamInputQual m_inputQual ; std::vector<unsigned> m_semanticIndex ; } ; class DxilFunctionAnnotation { class DxilTypeSystem ; public : unsigned)",
    "insertText": "GetNumParameters()"
  },
  {
    "label": "GetParameterAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilParameterAnnotation&)",
    "insertText": "GetParameterAnnotation(unsigned ParamIdx)"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (const llvm::Function*)",
    "insertText": "GetFunction()"
  },
  {
    "label": "GetRetTypeAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilParameterAnnotation&)",
    "insertText": "GetRetTypeAnnotation()"
  },
  {
    "label": "ContainsResourceArgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsResourceArgs()"
  },
  {
    "label": "DxilTypeSystem()",
    "kind": "Method",
    "detail": "Function (m_bContainsResourceArgs = true ; } bool m_bContainsResourceArgs = false ; } ; class DxilTypeSystem { public : using StructAnnotationMap = llvm::MapVector<const llvm::StructType*,std::unique_ptr<DxilStructAnnotation>> ; using PayloadAnnotationMap = llvm::MapVector<const llvm::StructType*,std::unique_ptr<DxilPayloadAnnotation>> ; using FunctionAnnotationMap = llvm::MapVector<const llvm::Function*,std::unique_ptr<DxilFunctionAnnotation>> ;)",
    "insertText": "DxilTypeSystem(llvm::Module *pModule)"
  },
  {
    "label": "AddStructAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilStructAnnotation*)",
    "insertText": "AddStructAnnotation(const llvm::StructType *pStructType, unsigned numTemplateArgs = 0)"
  },
  {
    "label": "FinishStructAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishStructAnnotation(DxilStructAnnotation &SA)"
  },
  {
    "label": "GetStructAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilStructAnnotation*)",
    "insertText": "GetStructAnnotation(const llvm::StructType *pStructType)"
  },
  {
    "label": "EraseStructAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseStructAnnotation(const llvm::StructType *pStructType)"
  },
  {
    "label": "EraseUnusedStructAnnotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseUnusedStructAnnotations()"
  },
  {
    "label": "GetStructAnnotationMap()",
    "kind": "Method",
    "detail": "Function (StructAnnotationMap&)",
    "insertText": "GetStructAnnotationMap()"
  },
  {
    "label": "AddPayloadAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilPayloadAnnotation*)",
    "insertText": "AddPayloadAnnotation(const llvm::StructType *pStructType)"
  },
  {
    "label": "GetPayloadAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilPayloadAnnotation*)",
    "insertText": "GetPayloadAnnotation(const llvm::StructType *pStructType)"
  },
  {
    "label": "ErasePayloadAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ErasePayloadAnnotation(const llvm::StructType *pStructType)"
  },
  {
    "label": "GetPayloadAnnotationMap()",
    "kind": "Method",
    "detail": "Function (PayloadAnnotationMap&)",
    "insertText": "GetPayloadAnnotationMap()"
  },
  {
    "label": "AddFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilFunctionAnnotation*)",
    "insertText": "AddFunctionAnnotation(const llvm::Function *pFunction)"
  },
  {
    "label": "FinishFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishFunctionAnnotation(DxilFunctionAnnotation &FA)"
  },
  {
    "label": "GetFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (DxilFunctionAnnotation*)",
    "insertText": "GetFunctionAnnotation(const llvm::Function *pFunction)"
  },
  {
    "label": "EraseFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseFunctionAnnotation(const llvm::Function *pFunction)"
  },
  {
    "label": "GetFunctionAnnotationMap()",
    "kind": "Method",
    "detail": "Function (FunctionAnnotationMap&)",
    "insertText": "GetFunctionAnnotationMap()"
  },
  {
    "label": "GetSNormF32Type()",
    "kind": "Method",
    "detail": "Function (llvm::StructType*)",
    "insertText": "GetSNormF32Type(unsigned NumComps)"
  },
  {
    "label": "GetUNormF32Type()",
    "kind": "Method",
    "detail": "Function (llvm::StructType*)",
    "insertText": "GetUNormF32Type(unsigned NumComps)"
  },
  {
    "label": "CopyTypeAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTypeAnnotation(const llvm::Type *Ty, const DxilTypeSystem &src)"
  },
  {
    "label": "CopyFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFunctionAnnotation(const llvm::Function *pDstFunction, const llvm::Function *pSrcFunction, const DxilTypeSystem &src)"
  },
  {
    "label": "UseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMinPrecision()"
  },
  {
    "label": "SetMinPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinPrecision(bool bMinPrecision)"
  },
  {
    "label": "IsResourceContained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceContained(llvm::Type *Ty)"
  },
  {
    "label": "GetNormFloatType()",
    "kind": "Method",
    "detail": "Function (private : llvm::Module* m_pModule ; StructAnnotationMap m_StructAnnotations ; PayloadAnnotationMap m_PayloadAnnotations ; FunctionAnnotationMap m_FunctionAnnotations ; DXIL::LowPrecisionMode m_LowPrecisionMode ; llvm::StructType*)",
    "insertText": "GetNormFloatType(CompType CT, unsigned NumComps)"
  },
  {
    "label": "SigPointFromInputQual()",
    "kind": "Method",
    "detail": "Function (} ; DXIL::SigPointKind)",
    "insertText": "SigPointFromInputQual(DxilParamInputQual Q, DXIL::ShaderKind SK, bool isPC)"
  },
  {
    "label": "RemapObsoleteSemantic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapObsoleteSemantic(DxilParameterAnnotation &paramInfo, DXIL::SigPointKind sigPoint, llvm::LLVMContext &Context)"
  },
  {
    "label": "DxilStructTypeIterator()",
    "kind": "Method",
    "detail": "Function (class DxilStructTypeIterator { private : llvm::StructType* STy ; DxilStructAnnotation* SAnnotation ; unsigned index ; public : using iterator_category = std::input_iterator_tag ; using value_type = std::pair<llvm::Type*,DxilFieldAnnotation*> ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "DxilStructTypeIterator(llvm::StructType *sTy, DxilStructAnnotation *sAnnotation, unsigned idx = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DxilStructTypeIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DxilStructTypeIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(DxilStructTypeIterator iter)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; DxilStructTypeIterator)",
    "insertText": "begin(llvm::StructType *STy, DxilStructAnnotation *SAnno)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (DxilStructTypeIterator)",
    "insertText": "end(llvm::StructType *STy, DxilStructAnnotation *SAnno)"
  }
]