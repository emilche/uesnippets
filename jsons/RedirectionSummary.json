[
  {
    "label": "FRedirectionSummary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRedirectionSummary"
  },
  {
    "label": "FCompareRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRedirect"
  },
  {
    "label": "FRedirectContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRedirectContainer"
  },
  {
    "label": "FRedirectionSummary()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" HAL / CriticalSection . h \" # include \" Hash / Blake3 . h \" # include \" UObject / CoreRedirects . h \" # include \" UObject / NameTypes . h \" class FRedirectionSummary { public :)",
    "insertText": "FRedirectionSummary()"
  },
  {
    "label": "FRedirectionSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRedirectionSummary(FRedirectionSummary&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRedirectionSummary&)",
    "insertText": "operator(FRedirectionSummary&& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FCoreRedirect& CoreRedirect, bool bIsWildcardMatch)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FCoreRedirect& CoreRedirect, bool bIsWildcardMatch)"
  },
  {
    "label": "AppendHashAffectingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashAffectingPackages(FBlake3& Hasher, TConstArrayView<FName> PackageNames)"
  },
  {
    "label": "AppendHashGlobal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashGlobal(FBlake3& Hasher)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct FCompareRedirect { bool)",
    "insertText": "operator()(const FCoreRedirect& A, const FCoreRedirect& B)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; struct FRedirectContainer { public : void)",
    "insertText": "Add(FCoreRedirect&& Redirect)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FCoreRedirect& Redirect)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "TryAppendHashInReadLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAppendHashInReadLock(FBlake3& Hasher)"
  },
  {
    "label": "AppendHashInWriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashInWriteLock(FBlake3& Hasher)"
  },
  {
    "label": "CalculateHash()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CalculateHash()"
  },
  {
    "label": "AppendHashWithoutDirtyCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHashWithoutDirtyCheck(FBlake3& Hasher)"
  },
  {
    "label": "GetAffectedPackages()",
    "kind": "Method",
    "detail": "Function (private : TSortedMap<FCoreRedirect,bool,FDefaultAllocator,FCompareRedirect> Redirects ; FBlake3Hash Hash ; bool bHashDirty = false ; } ; private : TArray<FName,TInlineAllocator<2>>)",
    "insertText": "GetAffectedPackages(const FCoreRedirect& Redirect)"
  }
]