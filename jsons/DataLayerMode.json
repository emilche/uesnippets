[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSceneOutlinerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneOutlinerFilter"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ISceneOutlinerHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerHierarchy"
  },
  {
    "label": "SDataLayerBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDataLayerBrowser"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UDataLayerEditorSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerEditorSubsystem"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FDataLayerModeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataLayerModeParams"
  },
  {
    "label": "FDataLayerMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerMode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDataLayerPickingMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerPickingMode"
  },
  {
    "label": "FDataLayerModeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" DataLayer / DataLayerDragDropOp . h \" # include \" Delegates / Delegate . h \" # include \" Folder . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" HAL / Platform . h \" # include \" ISceneOutlinerMode . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" SSceneOutliner . h \" # include \" SceneOutlinerDragDrop . h \" # include \" SceneOutlinerFwd . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class AActor ; class AWorldDataLayers ; class FDragDropEvent ; class FDragDropOperation ; class FMenuBuilder ; class FSceneOutlinerFilter ; class FUICommandList ; class ISceneOutlinerHierarchy ; class SDataLayerBrowser ; class SWidget ; class UDataLayerAsset ; class UDataLayerEditorSubsystem ; class UDataLayerInstance ; class UObject ; class UToolMenu ; class UWorld ; struct FKeyEvent ; struct FPointerEvent ; struct FDataLayerModeParams {)",
    "insertText": "FDataLayerModeParams()"
  },
  {
    "label": "FDataLayerModeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDataLayerModeParams(SSceneOutliner* InSceneOutliner, SDataLayerBrowser* InDataLayerBrowser, const TWeakObjectPtr<UWorld>& InSpecifiedWorldToDisplay = nullptr, FOnSceneOutlinerItemPicked InOnItemPicked = FOnSceneOutlinerItemPicked())"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UWorld> SpecifiedWorldToDisplay = nullptr ; SDataLayerBrowser* DataLayerBrowser ; SSceneOutliner* SceneOutliner ; FOnSceneOutlinerItemPicked OnItemPicked ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDataLayerInstancePicked, UDataLayerInstance*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnShouldFilterDataLayerInstance, const UDataLayerInstance*)"
  },
  {
    "label": "FDataLayerMode()",
    "kind": "Method",
    "detail": "Function (class FDataLayerMode : public ISceneOutlinerMode { public : enum class EItemSortOrder : int32 { WorldDataLayers = 0,DataLayer = 1 0,Actor = 2 0,} ;)",
    "insertText": "FDataLayerMode(const FDataLayerModeParams& Params)"
  },
  {
    "label": "FDataLayerMode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDataLayerMode()"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenu()"
  },
  {
    "label": "InitializeViewMenuExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeViewMenuExtender(TSharedPtr<FExtender> Extender)"
  },
  {
    "label": "GetTypeSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTypeSortPriority(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (ESelectionMode::Type)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "CanCustomizeToolbar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCustomizeToolbar()"
  },
  {
    "label": "GetStatusTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetStatusTextColor()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (} FFolder::FRootObject)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "SynchronizeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeSelection()"
  },
  {
    "label": "OnItemDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClick(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemAdded(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemRemoved(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemPassesFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemPassesFilters(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelectionChanged(FSceneOutlinerTreeItemPtr TreeItem, ESelectInfo::Type SelectionType, const FSceneOutlinerItemSelection& Selection)"
  },
  {
    "label": "CanSupportDragAndDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSupportDragAndDrop()"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerDragValidationInfo)",
    "insertText": "ValidateDrop(const ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload, const FSceneOutlinerDragValidationInfo& ValidationInfo)"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation(const FPointerEvent& MouseEvent, const TArray<FSceneOutlinerTreeItemPtr>& InTreeItems)"
  },
  {
    "label": "OnDragOverItem()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOverItem(const FDragDropEvent& Event, const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "DeleteItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteItems(const TArray<TWeakPtr<ISceneOutlinerTreeItem>>& Items)"
  },
  {
    "label": "GetDataLayerBrowser()",
    "kind": "Method",
    "detail": "Function (SDataLayerBrowser*)",
    "insertText": "GetDataLayerBrowser()"
  },
  {
    "label": "BuildWorldPickerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWorldPickerMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CreateHierarchy()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<ISceneOutlinerHierarchy>)",
    "insertText": "CreateHierarchy()"
  },
  {
    "label": "RegisterContextMenu()",
    "kind": "Method",
    "detail": "Function (bool bHideEditorDataLayers ; bool bHideRuntimeDataLayers ; bool bHideDataLayerActors ; bool bHideUnloadedActors ; bool bShowOnlySelectedActors ; bool bHighlightSelectedDataLayers ; bool bHideLevelInstanceContent ; FOnSceneOutlinerItemPicked OnItemPicked ; private : void)",
    "insertText": "RegisterContextMenu()"
  },
  {
    "label": "ChooseRepresentingWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseRepresentingWorld()"
  },
  {
    "label": "OnSelectWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectWorld(TWeakObjectPtr<UWorld> World)"
  },
  {
    "label": "IsWorldChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldChecked(TWeakObjectPtr<UWorld> World)"
  },
  {
    "label": "GetDataLayerActorPairsFromOperation()",
    "kind": "Method",
    "detail": "Function (TArray<FDataLayerActorMoveElement>)",
    "insertText": "GetDataLayerActorPairsFromOperation(const FDragDropOperation& Operation)"
  },
  {
    "label": "GetActorsFromOperation()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetActorsFromOperation(const FDragDropOperation& Operation, bool bOnlyFindFirst = false)"
  },
  {
    "label": "GetDataLayerInstancesFromOperation()",
    "kind": "Method",
    "detail": "Function (TArray<UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstancesFromOperation(const FDragDropOperation& Operation, bool bOnlyFindFirst = false)"
  },
  {
    "label": "GetDataLayerAssetsFromOperation()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerAsset*>)",
    "insertText": "GetDataLayerAssetsFromOperation(const FDragDropOperation& InDragDrop, bool bOnlyFindFirst = false)"
  },
  {
    "label": "GetSelectedDataLayers()",
    "kind": "Method",
    "detail": "Function (TArray<UDataLayerInstance*>)",
    "insertText": "GetSelectedDataLayers(SSceneOutliner* InSceneOutliner)"
  },
  {
    "label": "SetParentDataLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentDataLayer(const TArray<UDataLayerInstance*> DataLayers, UDataLayerInstance* ParentDataLayer)"
  },
  {
    "label": "OnLevelSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelSelectionChanged(UObject* Obj)"
  },
  {
    "label": "OnPostLoadMapWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMapWithWorld(UWorld* World)"
  },
  {
    "label": "CreateDataLayerPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDataLayerPicker(UToolMenu* InMenu, FOnDataLayerInstancePicked OnDataLayerInstancePicked, FOnShouldFilterDataLayerInstance OnShouldFilterDataLayerInstance, bool bInShowRoot = false)"
  },
  {
    "label": "ShouldExpandDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExpandDataLayer(const UDataLayerInstance* DataLayer)"
  },
  {
    "label": "ContainsSelectedChildDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsSelectedChildDataLayer(const UDataLayerInstance* DataLayer)"
  },
  {
    "label": "DeleteDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDataLayers(const TArray<UDataLayerInstance*>& InDataLayersToDelete)"
  },
  {
    "label": "RefreshSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelection()"
  },
  {
    "label": "CacheSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheSelectedItems(const FSceneOutlinerItemSelection& Selection)"
  },
  {
    "label": "GetOwningWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOwningWorld()"
  },
  {
    "label": "GetOwningWorldAWorldDataLayers()",
    "kind": "Method",
    "detail": "Function (AWorldDataLayers*)",
    "insertText": "GetOwningWorldAWorldDataLayers()"
  },
  {
    "label": "GetWorldDataLayersFromTreeItem()",
    "kind": "Method",
    "detail": "Function (AWorldDataLayers*)",
    "insertText": "GetWorldDataLayersFromTreeItem(const ISceneOutlinerTreeItem& TreeItem)"
  },
  {
    "label": "GetDataLayerInstanceFromTreeItem()",
    "kind": "Method",
    "detail": "Function (UDataLayerInstance*)",
    "insertText": "GetDataLayerInstanceFromTreeItem(const ISceneOutlinerTreeItem& TreeItem)"
  },
  {
    "label": "ValidateActorDrop()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerDragValidationInfo)",
    "insertText": "ValidateActorDrop(const ISceneOutlinerTreeItem& DropTarget, TArray<AActor*> PayloadActors, bool bMoveOperation = false)"
  },
  {
    "label": "ValidateDataLayerAssetDrop()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerDragValidationInfo)",
    "insertText": "ValidateDataLayerAssetDrop(const ISceneOutlinerTreeItem& DropTarget, const TArray<const UDataLayerAsset*>& DataLayerAssetsToDrop, bool bIsMovingDataLayerInstances = false)"
  },
  {
    "label": "CanReferenceDataLayerAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReferenceDataLayerAssets(const AWorldDataLayers* InWorldDataLayers, const TArray<const UDataLayerAsset*>& InReferencedDataLayerAssets, FText* OutFailureReason = nullptr)"
  },
  {
    "label": "OnDataLayerAssetDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataLayerAssetDropped(const TArray<const UDataLayerAsset*>& DroppedDataLayerAsset, ISceneOutlinerTreeItem& DropTarget)"
  },
  {
    "label": "CreateShowOnlySelectedActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateShowOnlySelectedActorsFilter()"
  },
  {
    "label": "CreateHideEditorDataLayersFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideEditorDataLayersFilter()"
  },
  {
    "label": "CreateHideRuntimeDataLayersFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideRuntimeDataLayersFilter()"
  },
  {
    "label": "CreateHideDataLayerActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideDataLayerActorsFilter()"
  },
  {
    "label": "CreateHideUnloadedActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideUnloadedActorsFilter()"
  },
  {
    "label": "CreateHideLevelInstancesFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideLevelInstancesFilter()"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "CanFindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindInContentBrowser()"
  },
  {
    "label": "FDataLayerPickingMode()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UWorld> RepresentingWorld ; TWeakObjectPtr<UWorld> UserChosenWorld ; SDataLayerBrowser* DataLayerBrowser ; UDataLayerEditorSubsystem* DataLayerEditorSubsystem ; const TWeakObjectPtr<UWorld> SpecifiedWorldToDisplay ; uint32 FilteredDataLayerCount = 0 ; TSet<TWeakObjectPtr<UDataLayerInstance>> ApplicableDataLayers ; FString PickDataLayerDialogPath ; TSharedPtr<FUICommandList> Commands ; TSet<TWeakObjectPtr<const UDataLayerInstance>> SelectedDataLayersSet ; typedef TPair<TWeakObjectPtr<const UDataLayerInstance>,TWeakObjectPtr<const AActor>> FSelectedDataLayerActor ; TSet<FSelectedDataLayerActor> SelectedDataLayerActors ; } ; class FDataLayerPickingMode : public FDataLayerMode { public :)",
    "insertText": "FDataLayerPickingMode(const FDataLayerModeParams& Params)"
  },
  {
    "label": "CreateDataLayerPickerWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "CreateDataLayerPickerWidget(FOnDataLayerInstancePicked OnDataLayerInstancePicked, FOnShouldFilterDataLayerInstance OnShouldFilterDataLayerInstance = FOnShouldFilterDataLayerInstance())"
  }
]