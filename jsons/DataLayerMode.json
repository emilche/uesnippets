[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSceneOutlinerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneOutlinerFilter"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ISceneOutlinerHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerHierarchy"
  },
  {
    "label": "SDataLayerBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDataLayerBrowser"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UDataLayerEditorSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerEditorSubsystem"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FDataLayerModeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataLayerModeParams"
  },
  {
    "label": "FDataLayerMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerMode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDataLayerPickingMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerPickingMode"
  },
  {
    "label": "DeleteItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteItems(const TArray<TWeakPtr<ISceneOutlinerTreeItem>>& Items)"
  },
  {
    "label": "BuildWorldPickerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWorldPickerMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "RegisterContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterContextMenu()"
  },
  {
    "label": "ChooseRepresentingWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseRepresentingWorld()"
  },
  {
    "label": "OnSelectWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectWorld(TWeakObjectPtr<UWorld> World)"
  },
  {
    "label": "OnLevelSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelSelectionChanged(UObject* Obj)"
  },
  {
    "label": "OnPostLoadMapWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMapWithWorld(UWorld* World)"
  },
  {
    "label": "CreateDataLayerPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDataLayerPicker(UToolMenu* InMenu, FOnDataLayerInstancePicked OnDataLayerInstancePicked, FOnShouldFilterDataLayerInstance OnShouldFilterDataLayerInstance, bool bInShowRoot = false)"
  },
  {
    "label": "DeleteDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDataLayers(const TArray<UDataLayerInstance*>& InDataLayersToDelete)"
  },
  {
    "label": "RefreshSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelection()"
  },
  {
    "label": "CacheSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheSelectedItems(const FSceneOutlinerItemSelection& Selection)"
  },
  {
    "label": "CreateShowOnlySelectedActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateShowOnlySelectedActorsFilter()"
  },
  {
    "label": "CreateHideEditorDataLayersFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideEditorDataLayersFilter()"
  },
  {
    "label": "CreateHideRuntimeDataLayersFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideRuntimeDataLayersFilter()"
  },
  {
    "label": "CreateHideDataLayerActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideDataLayerActorsFilter()"
  },
  {
    "label": "CreateHideUnloadedActorsFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideUnloadedActorsFilter()"
  },
  {
    "label": "CreateHideLevelInstancesFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSceneOutlinerFilter>)",
    "insertText": "CreateHideLevelInstancesFilter()"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "FDataLayerPickingMode()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FDataLayerPickingMode(const FDataLayerModeParams& Params)"
  }
]