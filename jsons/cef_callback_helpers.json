[
  {
    "label": "IsBaseCallbackImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsBaseCallbackImpl"
  },
  {
    "label": "IsOnceCallbackImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsOnceCallbackImpl"
  },
  {
    "label": "CallbackType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackType"
  },
  {
    "label": "OnceCallbackHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnceCallbackHolder"
  },
  {
    "label": "ScopedClosureRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedClosureRunner"
  },
  {
    "label": "NullCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NullCallback"
  },
  {
    "label": "DoNothing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DoNothing"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_CALLBACK_HELPERS_H_ # define CEF_INCLUDE_BASE_CEF_CALLBACK_HELPERS_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<T> struct IsBaseCallbackImpl : std::false_type { } ; template<R,. . . Args> struct IsBaseCallbackImpl<OnceCallback<)",
    "insertText": "R(Args...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> using IsBaseCallback = internal::IsBaseCallbackImpl<std::decay_t<T>> ; template<T> using IsOnceCallback = internal::IsOnceCallbackImpl<std::decay_t<T>> ; template<template<> class CallbackType> using EnableIfIsBaseCallback = std::enable_if_t<IsBaseCallback<CallbackType<)",
    "insertText": "void()"
  },
  {
    "label": "OnceCallbackHolder()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<. . . Args> class OnceCallbackHolder final { public :)",
    "insertText": "OnceCallbackHolder(OnceCallback<void(Args...)> callback, bool ignore_extra_runs) : callback_(std::move(callback)), ignore_extra_runs_(ignore_extra_runs)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(callback_)"
  },
  {
    "label": "OnceCallbackHolder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnceCallbackHolder(const OnceCallbackHolder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OnceCallbackHolder&)",
    "insertText": "operator(const OnceCallbackHolder&)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Args... args)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(callback_).Run(std::forward<Args>(args)...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : volatile std::atomic_bool has_run_ { false } ; base::OnceCallback<)",
    "insertText": "void(Args...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const bool ignore_extra_runs_ ; } ; } template<. . . Args> RepeatingCallback<)",
    "insertText": "void(Args...)> AdaptCallbackForRepeating( OnceCallback<void(Args...)> callback)"
  },
  {
    "label": "BindRepeating()",
    "kind": "Method",
    "detail": "Function (using Helper = internal::OnceCallbackHolder<Args . . .> ; return)",
    "insertText": "BindRepeating(&Helper::Run, std::make_unique<Helper>(std::move(callback), true))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> std::pair<OnceCallback<)",
    "insertText": "void(Args...)>, OnceCallback<void(Args...)>> SplitOnceCallback(OnceCallback<void(Args...)> callback)"
  },
  {
    "label": "BindRepeating()",
    "kind": "Method",
    "detail": "Function (using Helper = internal::OnceCallbackHolder<Args . . .> ; auto wrapped_once =)",
    "insertText": "BindRepeating(&Helper::Run, std::make_unique<Helper>(std::move(callback), false))"
  },
  {
    "label": "ScopedClosureRunner()",
    "kind": "Method",
    "detail": "Function (} class ScopedClosureRunner { public :)",
    "insertText": "ScopedClosureRunner()"
  },
  {
    "label": "ScopedClosureRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedClosureRunner(OnceClosure closure)"
  },
  {
    "label": "ScopedClosureRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedClosureRunner(ScopedClosureRunner&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedClosureRunner&)",
    "insertText": "operator(ScopedClosureRunner&& other)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "ReplaceClosure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceClosure(OnceClosure closure)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (OnceClosure)",
    "insertText": "Release()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (private : OnceClosure closure_ ; } ; class NullCallback { public : template<R,. . . Args> operator RepeatingCallback<)",
    "insertText": "R(Args...)>()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; class DoNothing { public : template<. . . Args> operator RepeatingCallback<)",
    "insertText": "void(Args...)>()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> RepeatingCallback<)",
    "insertText": "void(Args...)> Repeatedly()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> OnceCallback<)",
    "insertText": "void(Args...)> Once()"
  },
  {
    "label": "DeletePointer()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> void)",
    "insertText": "DeletePointer(T* obj)"
  }
]