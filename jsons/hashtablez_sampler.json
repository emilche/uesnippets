[
  {
    "label": "HashtablezInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashtablezInfo"
  },
  {
    "label": "SamplingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SamplingState"
  },
  {
    "label": "HashtablezInfoHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HashtablezInfoHandle"
  },
  {
    "label": "HashtablezInfoHandlePeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HashtablezInfoHandlePeer"
  },
  {
    "label": "HashtablezInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASHTABLEZ_SAMPLER_H_ # define ABSL_CONTAINER_INTERNAL_HASHTABLEZ_SAMPLER_H_ # include<atomic> # include<functional> # include<memory> # include<vector> # include \" absl / base / config . h \" # include \" absl / base / internal / per_thread_tls . h \" # include \" absl / base / optimization . h \" # include \" absl / profiling / internal / sample_recorder . h \" # include \" absl / synchronization / mutex . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { struct HashtablezInfo : public profiling_internal::Sample<HashtablezInfo> {)",
    "insertText": "HashtablezInfo()"
  },
  {
    "label": "HashtablezInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashtablezInfo(const HashtablezInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HashtablezInfo&)",
    "insertText": "operator(const HashtablezInfo&)"
  },
  {
    "label": "PrepareForSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForSampling(int64_t stride, size_t inline_element_size_value) ABSL_EXCLUSIVE_LOCKS_REQUIRED(init_mu)"
  },
  {
    "label": "RecordRehashSlow()",
    "kind": "Method",
    "detail": "Function (std::atomic<size_t> capacity ; std::atomic<size_t> size ; std::atomic<size_t> num_erases ; std::atomic<size_t> num_rehashes ; std::atomic<size_t> max_probe_length ; std::atomic<size_t> total_probe_length ; std::atomic<size_t> hashes_bitwise_or ; std::atomic<size_t> hashes_bitwise_and ; std::atomic<size_t> hashes_bitwise_xor ; std::atomic<size_t> max_reserve ; int kMaxStackDepth = 6 4 ; absl::Time create_time ; int32_t depth ; void* stack [ kMaxStackDepth ] ; size_t inline_element_size ; } ; void)",
    "insertText": "RecordRehashSlow(HashtablezInfo* info, size_t total_probe_length)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_INTERNAL_HAVE_SSE2 total_probe_length / = 1 6 ; # else total_probe_length / = 8 ; # endif info -> total_probe_length .)",
    "insertText": "store(total_probe_length, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> num_erases .)",
    "insertText": "store(0, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> num_rehashes .)",
    "insertText": "store(1 + info->num_rehashes.load(std::memory_order_relaxed), std::memory_order_relaxed)"
  },
  {
    "label": "RecordReservationSlow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordReservationSlow(HashtablezInfo* info, size_t target_capacity)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> max_reserve .)",
    "insertText": "store((std::max)(info->max_reserve.load(std::memory_order_relaxed), target_capacity), std::memory_order_relaxed)"
  },
  {
    "label": "RecordClearedReservationSlow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordClearedReservationSlow(HashtablezInfo* info)"
  },
  {
    "label": "RecordStorageChangedSlow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordStorageChangedSlow(HashtablezInfo* info, size_t size, size_t capacity)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> size .)",
    "insertText": "store(size, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> capacity .)",
    "insertText": "store(capacity, std::memory_order_relaxed)"
  },
  {
    "label": "RecordInsertSlow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RecordInsertSlow(HashtablezInfo* info, size_t hash, size_t distance_from_desired)"
  },
  {
    "label": "RecordEraseSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEraseSlow(HashtablezInfo* info)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (info -> size .)",
    "insertText": "fetch_sub(1, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (info -> num_erases .)",
    "insertText": "store(1 + info->num_erases.load(std::memory_order_relaxed), std::memory_order_relaxed)"
  },
  {
    "label": "SampleSlow()",
    "kind": "Method",
    "detail": "Function (} struct SamplingState { int64_t next_sample ; int64_t sample_stride ; } ; HashtablezInfo*)",
    "insertText": "SampleSlow(SamplingState& next_sample, size_t inline_element_size)"
  },
  {
    "label": "UnsampleSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsampleSlow(HashtablezInfo* info)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ABSL_INTERNAL_HASHTABLEZ_SAMPLE) #error ABSL_INTERNAL_HASHTABLEZ_SAMPLE cannot be directly set #endif #if defined(ABSL_INTERNAL_HASHTABLEZ_SAMPLE)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "HashtablezInfoHandle() : info_(nullptr)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HashtablezInfoHandle(HashtablezInfo* info) : info_(info)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HashtablezInfoHandle()"
  },
  {
    "label": "UnsampleSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsampleSlow(info_)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HashtablezInfoHandle(const HashtablezInfoHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HashtablezInfoHandle&)",
    "insertText": "operator(const HashtablezInfoHandle&)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashtablezInfoHandle(HashtablezInfoHandle&& o) noexcept : info_(absl::exchange(o.info_, nullptr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} HashtablezInfoHandle&)",
    "insertText": "operator(HashtablezInfoHandle&& o)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (} info_ =)",
    "insertText": "exchange(o.info_, nullptr)"
  },
  {
    "label": "RecordStorageChangedSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStorageChangedSlow(info_, size, capacity)"
  },
  {
    "label": "RecordRehash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordRehash(size_t total_probe_length)"
  },
  {
    "label": "RecordRehashSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordRehashSlow(info_, total_probe_length)"
  },
  {
    "label": "RecordReservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordReservation(size_t target_capacity)"
  },
  {
    "label": "RecordReservationSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordReservationSlow(info_, target_capacity)"
  },
  {
    "label": "RecordClearedReservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordClearedReservation()"
  },
  {
    "label": "RecordClearedReservationSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordClearedReservationSlow(info_)"
  },
  {
    "label": "RecordInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordInsert(size_t hash, size_t distance_from_desired)"
  },
  {
    "label": "RecordInsertSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordInsertSlow(info_, hash, distance_from_desired)"
  },
  {
    "label": "RecordErase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordErase()"
  },
  {
    "label": "RecordEraseSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEraseSlow(info_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(HashtablezInfoHandle& lhs, HashtablezInfoHandle& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lhs.info_, rhs.info_)"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashtablezInfoHandle(std::nullptr_t)"
  },
  {
    "label": "RecordStorageChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordStorageChanged(size_t , size_t)"
  },
  {
    "label": "RecordRehash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordRehash(size_t)"
  },
  {
    "label": "RecordReservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordReservation(size_t)"
  },
  {
    "label": "RecordInsert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordInsert(size_t , size_t)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(HashtablezInfoHandle& , HashtablezInfoHandle&)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # if)",
    "insertText": "defined(ABSL_INTERNAL_HASHTABLEZ_SAMPLE)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# endif HashtablezInfoHandle)",
    "insertText": "Sample(size_t inline_element_size ABSL_ATTRIBUTE_UNUSED)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ABSL_INTERNAL_HASHTABLEZ_SAMPLE) if (ABSL_PREDICT_TRUE(--global_next_sample.next_sample > 0))"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "HashtablezInfoHandle(SampleSlow(global_next_sample, inline_element_size))"
  },
  {
    "label": "HashtablezInfoHandle()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "HashtablezInfoHandle(nullptr)"
  },
  {
    "label": "GlobalHashtablezSampler()",
    "kind": "Method",
    "detail": "Function (# endif } using HashtablezSampler =::absl::profiling_internal::SampleRecorder<HashtablezInfo> ; HashtablezSampler&)",
    "insertText": "GlobalHashtablezSampler()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using HashtablezConfigListener =)",
    "insertText": "void(*)()"
  },
  {
    "label": "SetHashtablezConfigListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezConfigListener(HashtablezConfigListener l)"
  },
  {
    "label": "IsHashtablezEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHashtablezEnabled()"
  },
  {
    "label": "SetHashtablezEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezEnabled(bool enabled)"
  },
  {
    "label": "SetHashtablezEnabledInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezEnabledInternal(bool enabled)"
  },
  {
    "label": "GetHashtablezSampleParameter()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetHashtablezSampleParameter()"
  },
  {
    "label": "SetHashtablezSampleParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezSampleParameter(int32_t rate)"
  },
  {
    "label": "SetHashtablezSampleParameterInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezSampleParameterInternal(int32_t rate)"
  },
  {
    "label": "GetHashtablezMaxSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetHashtablezMaxSamples()"
  },
  {
    "label": "SetHashtablezMaxSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezMaxSamples(size_t max)"
  },
  {
    "label": "SetHashtablezMaxSamplesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHashtablezMaxSamplesInternal(size_t max)"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (\" C \" bool)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslContainerInternalSampleEverything)()"
  }
]