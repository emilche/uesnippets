[
  {
    "label": "MarkNetObjectStateHeaderDirty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Net / Core / NetBitArray . h \" # include \" Net / Core / NetHandle / NetHandleManager . h \" # include \" Net / Core / DirtyNetObjectTracker / GlobalDirtyNetObjectTracker . h \" # include \" Iris / ReplicationState / ReplicationStateDescriptor . h \" # include \" Iris / ReplicationState / ReplicationStateFwd . h \" namespace UE::Net { void)",
    "insertText": "MarkNetObjectStateHeaderDirty(FReplicationStateHeader& Header)"
  },
  {
    "label": "MarkStateDirty()",
    "kind": "Method",
    "detail": "Function (Private::)",
    "insertText": "MarkStateDirty(Header)"
  },
  {
    "label": "GetReplicationStateHeader()",
    "kind": "Method",
    "detail": "Function (} } namespace UE::Net::Private { UE::Net::FReplicationStateHeader&)",
    "insertText": "GetReplicationStateHeader(void* StateBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "ReplicationStateHeaderOffset()",
    "kind": "Method",
    "detail": "Function (const SIZE_T)",
    "insertText": "ReplicationStateHeaderOffset(EnumHasAnyFlags(Descriptor->Traits, EReplicationStateTraits::IsNativeFastArrayReplicationState) ? SIZE_T(Descriptor->ChangeMasksExternalOffset - sizeof(FReplicationStateHeader)) : SIZE_T(0))"
  },
  {
    "label": "IsReplicationStateBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReplicationStateBound(void* StateBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "GetMemberChangeMask()",
    "kind": "Method",
    "detail": "Function (} FNetBitArrayView)",
    "insertText": "GetMemberChangeMask(uint8* StateBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "GetMemberConditionalChangeMask()",
    "kind": "Method",
    "detail": "Function (} FNetBitArrayView)",
    "insertText": "GetMemberConditionalChangeMask(uint8* StateBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkDirty(UE::Net::FReplicationStateHeader& InternalState, FNetBitArrayView& MemberChangeMask, const FReplicationStateMemberChangeMaskDescriptor& ChangeMaskInfo)"
  },
  {
    "label": "MarkStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkStateDirty(InternalState)"
  },
  {
    "label": "MarkNetObjectStateHeaderDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNetObjectStateHeaderDirty(InternalState)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (} MemberChangeMask .)",
    "insertText": "SetBits(ChangeMaskInfo.BitOffset, ChangeMaskInfo.BitCount)"
  }
]