[
  {
    "label": "DWRITE_FONT_FILE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_FILE_TYPE"
  },
  {
    "label": "DWRITE_FONT_FACE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_FACE_TYPE"
  },
  {
    "label": "DWRITE_FONT_SIMULATIONS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_SIMULATIONS"
  },
  {
    "label": "DWRITE_FONT_WEIGHT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_WEIGHT"
  },
  {
    "label": "DWRITE_FONT_STRETCH",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_STRETCH"
  },
  {
    "label": "DWRITE_FONT_STYLE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_STYLE"
  },
  {
    "label": "DWRITE_INFORMATIONAL_STRING_ID",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_INFORMATIONAL_STRING_ID"
  },
  {
    "label": "DWRITE_FONT_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_FONT_METRICS"
  },
  {
    "label": "DWRITE_GLYPH_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_GLYPH_METRICS"
  },
  {
    "label": "DWRITE_GLYPH_OFFSET",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_GLYPH_OFFSET"
  },
  {
    "label": "DWRITE_FACTORY_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FACTORY_TYPE"
  },
  {
    "label": "DWRITE_PIXEL_GEOMETRY",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_PIXEL_GEOMETRY"
  },
  {
    "label": "DWRITE_RENDERING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_RENDERING_MODE"
  },
  {
    "label": "DWRITE_MATRIX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_MATRIX"
  },
  {
    "label": "DWRITE_READING_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_READING_DIRECTION"
  },
  {
    "label": "DWRITE_FLOW_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FLOW_DIRECTION"
  },
  {
    "label": "DWRITE_TEXT_ALIGNMENT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_TEXT_ALIGNMENT"
  },
  {
    "label": "DWRITE_PARAGRAPH_ALIGNMENT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_PARAGRAPH_ALIGNMENT"
  },
  {
    "label": "DWRITE_WORD_WRAPPING",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_WORD_WRAPPING"
  },
  {
    "label": "DWRITE_LINE_SPACING_METHOD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_LINE_SPACING_METHOD"
  },
  {
    "label": "DWRITE_TRIMMING_GRANULARITY",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_TRIMMING_GRANULARITY"
  },
  {
    "label": "DWRITE_FONT_FEATURE_TAG",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_FONT_FEATURE_TAG"
  },
  {
    "label": "DWRITE_TEXT_RANGE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_TEXT_RANGE"
  },
  {
    "label": "DWRITE_FONT_FEATURE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_FONT_FEATURE"
  },
  {
    "label": "DWRITE_TYPOGRAPHIC_FEATURES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_TYPOGRAPHIC_FEATURES"
  },
  {
    "label": "DWRITE_TRIMMING",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_TRIMMING"
  },
  {
    "label": "DWRITE_SCRIPT_SHAPES",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_SCRIPT_SHAPES"
  },
  {
    "label": "DWRITE_SCRIPT_ANALYSIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_SCRIPT_ANALYSIS"
  },
  {
    "label": "DWRITE_BREAK_CONDITION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_BREAK_CONDITION"
  },
  {
    "label": "DWRITE_LINE_BREAKPOINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_LINE_BREAKPOINT"
  },
  {
    "label": "DWRITE_NUMBER_SUBSTITUTION_METHOD",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_NUMBER_SUBSTITUTION_METHOD"
  },
  {
    "label": "DWRITE_SHAPING_TEXT_PROPERTIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_SHAPING_TEXT_PROPERTIES"
  },
  {
    "label": "DWRITE_SHAPING_GLYPH_PROPERTIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_SHAPING_GLYPH_PROPERTIES"
  },
  {
    "label": "DWRITE_GLYPH_RUN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_GLYPH_RUN"
  },
  {
    "label": "DWRITE_GLYPH_RUN_DESCRIPTION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_GLYPH_RUN_DESCRIPTION"
  },
  {
    "label": "DWRITE_UNDERLINE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_UNDERLINE"
  },
  {
    "label": "DWRITE_STRIKETHROUGH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_STRIKETHROUGH"
  },
  {
    "label": "DWRITE_LINE_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_LINE_METRICS"
  },
  {
    "label": "DWRITE_CLUSTER_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_CLUSTER_METRICS"
  },
  {
    "label": "DWRITE_TEXT_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_TEXT_METRICS"
  },
  {
    "label": "DWRITE_INLINE_OBJECT_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_INLINE_OBJECT_METRICS"
  },
  {
    "label": "DWRITE_OVERHANG_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_OVERHANG_METRICS"
  },
  {
    "label": "DWRITE_HIT_TEST_METRICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DWRITE_HIT_TEST_METRICS"
  },
  {
    "label": "DWRITE_TEXTURE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DWRITE_TEXTURE_TYPE"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef DWRITE_H_INCLUDED # define DWRITE_H_INCLUDED # if _MSC_VER> 1 0 0 0 # pragma once # endif # ifndef DWRITE_NO_WINDOWS_H # include<specstrings . h> # include<unknwn . h> # endif # include<dcommon . h> # ifndef DWRITE_DECLARE_INTERFACE # define)",
    "insertText": "DWRITE_DECLARE_INTERFACE(iid) DECLSPEC_UUID(iid) DECLSPEC_NOVTABLE #endif #ifndef DWRITE_EXPORT #define DWRITE_EXPORT __declspec(dllimport)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (DWRITE_FONT_FILE_TYPE_UNKNOWN,DWRITE_FONT_FILE_TYPE_CFF,DWRITE_FONT_FILE_TYPE_TRUETYPE,DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION,DWRITE_FONT_FILE_TYPE_TYPE1_PFM,DWRITE_FONT_FILE_TYPE_TYPE1_PFB,DWRITE_FONT_FILE_TYPE_VECTOR,DWRITE_FONT_FILE_TYPE_BITMAP } ; enum DWRITE_FONT_FACE_TYPE { DWRITE_FONT_FACE_TYPE_CFF,DWRITE_FONT_FACE_TYPE_TRUETYPE,DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION,DWRITE_FONT_FACE_TYPE_TYPE1,DWRITE_FONT_FACE_TYPE_VECTOR,DWRITE_FONT_FACE_TYPE_BITMAP,DWRITE_FONT_FACE_TYPE_UNKNOWN } ; enum DWRITE_FONT_SIMULATIONS { DWRITE_FONT_SIMULATIONS_NONE = 0 x0000,DWRITE_FONT_SIMULATIONS_BOLD = 0 x0001,DWRITE_FONT_SIMULATIONS_OBLIQUE = 0 x0002 } ; # ifdef DEFINE_ENUM_FLAG_OPERATORS)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(DWRITE_FONT_SIMULATIONS)"
  },
  {
    "label": "DWRITE_MAKE_OPENTYPE_TAG()",
    "kind": "Method",
    "detail": "Function (# endif enum DWRITE_FONT_WEIGHT { DWRITE_FONT_WEIGHT_THIN = 1 0 0,DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 2 0 0,DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 2 0 0,DWRITE_FONT_WEIGHT_LIGHT = 3 0 0,DWRITE_FONT_WEIGHT_NORMAL = 4 0 0,DWRITE_FONT_WEIGHT_REGULAR = 4 0 0,DWRITE_FONT_WEIGHT_MEDIUM = 5 0 0,DWRITE_FONT_WEIGHT_DEMI_BOLD = 6 0 0,DWRITE_FONT_WEIGHT_SEMI_BOLD = 6 0 0,DWRITE_FONT_WEIGHT_BOLD = 7 0 0,DWRITE_FONT_WEIGHT_EXTRA_BOLD = 8 0 0,DWRITE_FONT_WEIGHT_ULTRA_BOLD = 8 0 0,DWRITE_FONT_WEIGHT_BLACK = 9 0 0,DWRITE_FONT_WEIGHT_HEAVY = 9 0 0,DWRITE_FONT_WEIGHT_EXTRA_BLACK = 9 5 0,DWRITE_FONT_WEIGHT_ULTRA_BLACK = 9 5 0 } ; enum DWRITE_FONT_STRETCH { DWRITE_FONT_STRETCH_UNDEFINED = 0,DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1,DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2,DWRITE_FONT_STRETCH_CONDENSED = 3,DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4,DWRITE_FONT_STRETCH_NORMAL = 5,DWRITE_FONT_STRETCH_MEDIUM = 5,DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6,DWRITE_FONT_STRETCH_EXPANDED = 7,DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8,DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9 } ; enum DWRITE_FONT_STYLE { DWRITE_FONT_STYLE_NORMAL,DWRITE_FONT_STYLE_OBLIQUE,DWRITE_FONT_STYLE_ITALIC } ; enum DWRITE_INFORMATIONAL_STRING_ID { DWRITE_INFORMATIONAL_STRING_NONE,DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE,DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS,DWRITE_INFORMATIONAL_STRING_TRADEMARK,DWRITE_INFORMATIONAL_STRING_MANUFACTURER,DWRITE_INFORMATIONAL_STRING_DESIGNER,DWRITE_INFORMATIONAL_STRING_DESIGNER_URL,DWRITE_INFORMATIONAL_STRING_DESCRIPTION,DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL,DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION,DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL,DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES,DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES,DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES,DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES,DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT } ; struct DWRITE_FONT_METRICS { UINT16 designUnitsPerEm ; UINT16 ascent ; UINT16 descent ; INT16 lineGap ; UINT16 capHeight ; UINT16 xHeight ; INT16 underlinePosition ; UINT16 underlineThickness ; INT16 strikethroughPosition ; UINT16 strikethroughThickness ; } ; struct DWRITE_GLYPH_METRICS { INT32 leftSideBearing ; UINT32 advanceWidth ; INT32 rightSideBearing ; INT32 topSideBearing ; UINT32 advanceHeight ; INT32 bottomSideBearing ; INT32 verticalOriginY ; } ; struct DWRITE_GLYPH_OFFSET { FLOAT advanceOffset ; FLOAT ascenderOffset ; } ; enum DWRITE_FACTORY_TYPE { DWRITE_FACTORY_TYPE_SHARED,DWRITE_FACTORY_TYPE_ISOLATED } ; # define)",
    "insertText": "DWRITE_MAKE_OPENTYPE_TAG(a,b,c,d) ( \\ (static_cast<UINT32>(static_cast<UINT8>(d)) << 24) | \\ (static_cast<UINT32>(static_cast<UINT8>(c)) << 16) | \\ (static_cast<UINT32>(static_cast<UINT8>(b)) << 8) | \\ static_cast<UINT32>(static_cast<UINT8>(a)))"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"727cad4e-d6af-4c9e-8a08-d695b11caa49\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateStreamFromKey)( __in_bcount(fontFileReferenceKeySize) void const* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, __out IDWriteFontFileStream** fontFileStream)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFilePathLengthFromKey)( __in_bcount(fontFileReferenceKeySize) void const* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, __out UINT32* filePathLength)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFilePathFromKey)( __in_bcount(fontFileReferenceKeySize) void const* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, __out_ecount_z(filePathSize) WCHAR* filePath, UINT32 filePathSize)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLastWriteTimeFromKey)( __in_bcount(fontFileReferenceKeySize) void const* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, __out FILETIME* lastWriteTime)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ReadFileFragment)( __deref_out_bcount(fragmentSize) void const** fragmentStart, UINT64 fileOffset, UINT64 fragmentSize, __out void** fragmentContext)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(void, ReleaseFileFragment)( void* fragmentContext)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFileSize)( __out UINT64* fileSize)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLastWriteTime)( __out UINT64* lastWriteTime)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"739d886a-cef5-47dc-8769-1a8b41bebbb0\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetReferenceKey)( __deref_out_bcount(*fontFileReferenceKeySize) void const** fontFileReferenceKey, __out UINT32* fontFileReferenceKeySize)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLoader)( __out IDWriteFontFileLoader** fontFileLoader)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Analyze)( __out BOOL* isSupportedFontType, __out DWRITE_FONT_FILE_TYPE* fontFileType, __out_opt DWRITE_FONT_FACE_TYPE* fontFaceType, __out UINT32* numberOfFaces)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef DWRITE_PIXEL_GEOMETRY_DEFINED enum DWRITE_PIXEL_GEOMETRY { DWRITE_PIXEL_GEOMETRY_FLAT,DWRITE_PIXEL_GEOMETRY_RGB,DWRITE_PIXEL_GEOMETRY_BGR } ; # define DWRITE_PIXEL_GEOMETRY_DEFINED # endif enum DWRITE_RENDERING_MODE { DWRITE_RENDERING_MODE_DEFAULT,DWRITE_RENDERING_MODE_ALIASED,DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC,DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL,DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL,DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC,DWRITE_RENDERING_MODE_OUTLINE } ; struct DWRITE_MATRIX { FLOAT m11 ; FLOAT m12 ; FLOAT m21 ; FLOAT m22 ; FLOAT dx ; FLOAT dy ; } ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"2f0da53a-2add-47cd-82ee-d9ec34688e75\")"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetGamma)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetEnhancedContrast)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetClearTypeLevel)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_PIXEL_GEOMETRY, GetPixelGeometry)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_RENDERING_MODE, GetRenderingMode)()"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface ID2D1SimplifiedGeometrySink ; typedef ID2D1SimplifiedGeometrySink IDWriteGeometrySink ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"5f49804d-7024-4d43-bfa9-d25984f53849\")"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_FACE_TYPE, GetType)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFiles)( __inout UINT32* numberOfFiles, __out_ecount_opt(*numberOfFiles) IDWriteFontFile** fontFiles)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetIndex)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_SIMULATIONS, GetSimulations)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(BOOL, IsSymbolFont)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(void, GetMetrics)( __out DWRITE_FONT_METRICS* fontFaceMetrics)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT16, GetGlyphCount)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetDesignGlyphMetrics)( __in_ecount(glyphCount) UINT16 const* glyphIndices, UINT32 glyphCount, __out_ecount(glyphCount) DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways = FALSE)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGlyphIndices)( __in_ecount(codePointCount) UINT32 const* codePoints, UINT32 codePointCount, __out_ecount(codePointCount) UINT16* glyphIndices)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(TryGetFontTable)( __in UINT32 openTypeTableTag, __deref_out_bcount(*tableSize) const void** tableData, __out UINT32* tableSize, __out void** tableContext, __out BOOL* exists)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(void, ReleaseFontTable)( __in void* tableContext)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGlyphRunOutline)( FLOAT emSize, __in_ecount(glyphCount) UINT16 const* glyphIndices, __in_ecount_opt(glyphCount) FLOAT const* glyphAdvances, __in_ecount_opt(glyphCount) DWRITE_GLYPH_OFFSET const* glyphOffsets, UINT32 glyphCount, BOOL isSideways, BOOL isRightToLeft, IDWriteGeometrySink* geometrySink)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetRecommendedRenderingMode)( FLOAT emSize, FLOAT pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams* renderingParams, __out DWRITE_RENDERING_MODE* renderingMode)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGdiCompatibleMetrics)( FLOAT emSize, FLOAT pixelsPerDip, __in_opt DWRITE_MATRIX const* transform, __out DWRITE_FONT_METRICS* fontFaceMetrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGdiCompatibleGlyphMetrics)( FLOAT emSize, FLOAT pixelsPerDip, __in_opt DWRITE_MATRIX const* transform, BOOL useGdiNatural, __in_ecount(glyphCount) UINT16 const* glyphIndices, UINT32 glyphCount, __out_ecount(glyphCount) DWRITE_GLYPH_METRICS* glyphMetrics, BOOL isSideways = FALSE)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface IDWriteFactory ; interface IDWriteFontFileEnumerator ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"cca920e4-52f0-492b-bfa8-29c72ee0a468\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateEnumeratorFromKey)( IDWriteFactory* factory, __in_bcount(collectionKeySize) void const* collectionKey, UINT32 collectionKeySize, __out IDWriteFontFileEnumerator** fontFileEnumerator)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"72755049-5ff7-435d-8348-4be97cfa6c7c\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(MoveNext)( __out BOOL* hasCurrentFile)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetCurrentFontFile)( __out IDWriteFontFile** fontFile)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"08256209-099a-4b34-b86d-c22b110e7771\")"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetCount)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(FindLocaleName)( __in_z WCHAR const* localeName, __out UINT32* index, __out BOOL* exists)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleNameLength)( UINT32 index, __out UINT32* length)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleName)( UINT32 index, __out_ecount_z(size) WCHAR* localeName, UINT32 size)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetStringLength)( UINT32 index, __out UINT32* length)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetString)( UINT32 index, __out_ecount_z(size) WCHAR* stringBuffer, UINT32 size)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface IDWriteFontFamily ; interface IDWriteFont ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"a84cee02-3eea-4eee-a827-87c1a02a0fcc\")"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetFontFamilyCount)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFamily)( UINT32 index, __out IDWriteFontFamily** fontFamily)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(FindFamilyName)( __in_z WCHAR const* familyName, __out UINT32* index, __out BOOL* exists)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFromFontFace)( IDWriteFontFace* fontFace, __out IDWriteFont** font)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontCollection)( __out IDWriteFontCollection** fontCollection)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetFontCount)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFont)( UINT32 index, __out IDWriteFont** font)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"da20d8ef-812a-4c43-9802-62ec4abd7add\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFamilyNames)( __out IDWriteLocalizedStrings** names)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFirstMatchingFont)( DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, __out IDWriteFont** matchingFont)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetMatchingFonts)( DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, __out IDWriteFontList** matchingFonts)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"acd16696-8c14-4f5d-877e-fe3fc1d32737\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFamily)( __out IDWriteFontFamily** fontFamily)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_WEIGHT, GetWeight)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_STRETCH, GetStretch)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_STYLE, GetStyle)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFaceNames)( __out IDWriteLocalizedStrings** names)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetInformationalStrings)( DWRITE_INFORMATIONAL_STRING_ID informationalStringID, __out IDWriteLocalizedStrings** informationalStrings, __out BOOL* exists)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(void, GetMetrics)( __out DWRITE_FONT_METRICS* fontMetrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(HasCharacter)( UINT32 unicodeValue, __out BOOL* exists)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateFontFace)( __out IDWriteFontFace** fontFace)"
  },
  {
    "label": "__field_ecount()",
    "kind": "Method",
    "detail": "Function (} ; enum DWRITE_READING_DIRECTION { DWRITE_READING_DIRECTION_LEFT_TO_RIGHT,DWRITE_READING_DIRECTION_RIGHT_TO_LEFT } ; enum DWRITE_FLOW_DIRECTION { DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM } ; enum DWRITE_TEXT_ALIGNMENT { DWRITE_TEXT_ALIGNMENT_LEADING,DWRITE_TEXT_ALIGNMENT_TRAILING,DWRITE_TEXT_ALIGNMENT_CENTER } ; enum DWRITE_PARAGRAPH_ALIGNMENT { DWRITE_PARAGRAPH_ALIGNMENT_NEAR,DWRITE_PARAGRAPH_ALIGNMENT_FAR,DWRITE_PARAGRAPH_ALIGNMENT_CENTER } ; enum DWRITE_WORD_WRAPPING { DWRITE_WORD_WRAPPING_WRAP,DWRITE_WORD_WRAPPING_NO_WRAP } ; enum DWRITE_LINE_SPACING_METHOD { DWRITE_LINE_SPACING_METHOD_DEFAULT,DWRITE_LINE_SPACING_METHOD_UNIFORM } ; enum DWRITE_TRIMMING_GRANULARITY { DWRITE_TRIMMING_GRANULARITY_NONE,DWRITE_TRIMMING_GRANULARITY_CHARACTER,DWRITE_TRIMMING_GRANULARITY_WORD } ; enum DWRITE_FONT_FEATURE_TAG { DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 0 x63726661,DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 0 x63703263,DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 0 x63733263,DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 0 x746c6163,DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 0 x65736163,DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 0 x706d6363,DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 0 x67696c63,DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 0 x70737063,DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 0 x68777363,DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 0 x73727563,DWRITE_FONT_FEATURE_TAG_DEFAULT = 0 x746c6664,DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 0 x67696c64,DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 0 x74707865,DWRITE_FONT_FEATURE_TAG_FRACTIONS = 0 x63617266,DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 0 x64697766,DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 0 x666c6168,DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 0 x6e6c6168,DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 0 x746c6168,DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 0 x74736968,DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 0 x616e6b68,DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 0 x67696c68,DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 0 x64697768,DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 0 x6f6a6f68,DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 0 x3430706a,DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 0 x3837706a,DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 0 x3338706a,DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 0 x3039706a,DWRITE_FONT_FEATURE_TAG_KERNING = 0 x6e72656b,DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 0 x6167696c,DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 0 x6d756e6c,DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 0 x6c636f6c,DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 0 x6b72616d,DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 0 x6b72676d,DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 0 x6b6d6b6d,DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 0 x746c616e,DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 0 x6b636c6e,DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 0 x6d756e6f,DWRITE_FONT_FEATURE_TAG_ORDINALS = 0 x6e64726f,DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 0 x746c6170,DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 0 x70616370,DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 0 x6d756e70,DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 0 x64697770,DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 0 x64697771,DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 0 x67696c72,DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 0 x79627572,DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 0 x746c6173,DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 0 x666e6973,DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 0 x70636d73,DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 0 x6c706d73,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 0 x31307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 0 x32307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 0 x33307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 0 x34307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 0 x35307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 0 x36307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 0 x37307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 0 x38307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 0 x39307373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 0 x30317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 0 x31317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 0 x32317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 0 x33317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 0 x34317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 0 x35317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 0 x36317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 0 x37317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 0 x38317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 0 x39317373,DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 0 x30327373,DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 0 x73627573,DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 0 x73707573,DWRITE_FONT_FEATURE_TAG_SWASH = 0 x68737773,DWRITE_FONT_FEATURE_TAG_TITLING = 0 x6c746974,DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 0 x6d616e74,DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 0 x6d756e74,DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 0 x64617274,DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 0 x64697774,DWRITE_FONT_FEATURE_TAG_UNICASE = 0 x63696e75,DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 0 x6f72657a,} ; struct DWRITE_TEXT_RANGE { UINT32 startPosition ; UINT32 length ; } ; struct DWRITE_FONT_FEATURE { DWRITE_FONT_FEATURE_TAG nameTag ; UINT32 parameter ; } ; struct DWRITE_TYPOGRAPHIC_FEATURES {)",
    "insertText": "__field_ecount(featureCount)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (UINT32 featureCount ; } ; struct DWRITE_TRIMMING { DWRITE_TRIMMING_GRANULARITY granularity ; UINT32 delimiter ; UINT32 delimiterCount ; } ; interface IDWriteTypography ; interface IDWriteInlineObject ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"9c906818-31d7-4fd3-a151-7c5e225db55a\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetTextAlignment)( DWRITE_TEXT_ALIGNMENT textAlignment)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetParagraphAlignment)( DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetWordWrapping)( DWRITE_WORD_WRAPPING wordWrapping)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetReadingDirection)( DWRITE_READING_DIRECTION readingDirection)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFlowDirection)( DWRITE_FLOW_DIRECTION flowDirection)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetIncrementalTabStop)( FLOAT incrementalTabStop)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetTrimming)( __in DWRITE_TRIMMING const* trimmingOptions, IDWriteInlineObject* trimmingSign)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetLineSpacing)( DWRITE_LINE_SPACING_METHOD lineSpacingMethod, FLOAT lineSpacing, FLOAT baseline)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_TEXT_ALIGNMENT, GetTextAlignment)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_PARAGRAPH_ALIGNMENT, GetParagraphAlignment)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_WORD_WRAPPING, GetWordWrapping)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_READING_DIRECTION, GetReadingDirection)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FLOW_DIRECTION, GetFlowDirection)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetIncrementalTabStop)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetTrimming)( __out DWRITE_TRIMMING* trimmingOptions, __out IDWriteInlineObject** trimmingSign)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLineSpacing)( __out DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, __out FLOAT* lineSpacing, __out FLOAT* baseline)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetFontFamilyNameLength)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFamilyName)( __out_ecount_z(nameSize) WCHAR* fontFamilyName, UINT32 nameSize)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_WEIGHT, GetFontWeight)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_STYLE, GetFontStyle)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_FONT_STRETCH, GetFontStretch)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetFontSize)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetLocaleNameLength)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleName)( __out_ecount_z(nameSize) WCHAR* localeName, UINT32 nameSize)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"55f1112b-1dc2-4b3c-9541-f46894ed85b6\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AddFontFeature)( DWRITE_FONT_FEATURE fontFeature)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(UINT32, GetFontFeatureCount)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFeature)( UINT32 fontFeatureIndex, __out DWRITE_FONT_FEATURE* fontFeature)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (} ; enum DWRITE_SCRIPT_SHAPES { DWRITE_SCRIPT_SHAPES_DEFAULT = 0,DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1 } ; # ifdef DEFINE_ENUM_FLAG_OPERATORS)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(DWRITE_SCRIPT_SHAPES)"
  },
  {
    "label": "DECLSPEC_UUID()",
    "kind": "Method",
    "detail": "Function (# endif struct DWRITE_SCRIPT_ANALYSIS { UINT16 script ; DWRITE_SCRIPT_SHAPES shapes ; } ; enum DWRITE_BREAK_CONDITION { DWRITE_BREAK_CONDITION_NEUTRAL,DWRITE_BREAK_CONDITION_CAN_BREAK,DWRITE_BREAK_CONDITION_MAY_NOT_BREAK,DWRITE_BREAK_CONDITION_MUST_BREAK } ; struct DWRITE_LINE_BREAKPOINT { UINT8 breakConditionBefore : 2 ; UINT8 breakConditionAfter : 2 ; UINT8 isWhitespace : 1 ; UINT8 isSoftHyphen : 1 ; UINT8 padding : 2 ; } ; enum DWRITE_NUMBER_SUBSTITUTION_METHOD { DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE,DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL,DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE,DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL,DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL } ; interface)",
    "insertText": "DECLSPEC_UUID(\"14885CC9-BAB0-4f90-B6ED-5C366A2CD03D\")"
  },
  {
    "label": "DECLSPEC_UUID()",
    "kind": "Method",
    "detail": "Function (} ; struct DWRITE_SHAPING_TEXT_PROPERTIES { UINT16 isShapedAlone : 1 ; UINT16 reserved : 1 5 ; } ; struct DWRITE_SHAPING_GLYPH_PROPERTIES { UINT16 justification : 4 ; UINT16 isClusterStart : 1 ; UINT16 isDiacritic : 1 ; UINT16 isZeroWidthSpace : 1 ; UINT16 reserved : 9 ; } ; interface)",
    "insertText": "DECLSPEC_UUID(\"688e1a58-5094-47c8-adc8-fbcea60ae92b\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetTextAtPosition)( UINT32 textPosition, __out WCHAR const** textString, __out UINT32* textLength)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetTextBeforePosition)( UINT32 textPosition, __out WCHAR const** textString, __out UINT32* textLength)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(DWRITE_READING_DIRECTION, GetParagraphReadingDirection)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleName)( UINT32 textPosition, __out UINT32* textLength, __out_z WCHAR const** localeName)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetNumberSubstitution)( UINT32 textPosition, __out UINT32* textLength, __out IDWriteNumberSubstitution** numberSubstitution)"
  },
  {
    "label": "DECLSPEC_UUID()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DECLSPEC_UUID(\"5810cd44-0ca0-4701-b3fa-bec5182ae4f6\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetScriptAnalysis)( UINT32 textPosition, UINT32 textLength, __in DWRITE_SCRIPT_ANALYSIS const* scriptAnalysis)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetLineBreakpoints)( UINT32 textPosition, UINT32 textLength, __in_ecount(textLength) DWRITE_LINE_BREAKPOINT const* lineBreakpoints)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetBidiLevel)( UINT32 textPosition, UINT32 textLength, UINT8 explicitLevel, UINT8 resolvedLevel)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetNumberSubstitution)( UINT32 textPosition, UINT32 textLength, __notnull IDWriteNumberSubstitution* numberSubstitution)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"b7e6163e-7f46-43b4-84b3-e4e6249c365d\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AnalyzeScript)( IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AnalyzeBidi)( IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AnalyzeNumberSubstitution)( IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(AnalyzeLineBreakpoints)( IDWriteTextAnalysisSource* analysisSource, UINT32 textPosition, UINT32 textLength, IDWriteTextAnalysisSink* analysisSink)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGlyphs)( __in_ecount(textLength) WCHAR const* textString, UINT32 textLength, IDWriteFontFace* fontFace, BOOL isSideways, BOOL isRightToLeft, __in DWRITE_SCRIPT_ANALYSIS const* scriptAnalysis, __in_z_opt WCHAR const* localeName, __maybenull IDWriteNumberSubstitution* numberSubstitution, __in_ecount_opt(featureRanges) DWRITE_TYPOGRAPHIC_FEATURES const** features, __in_ecount_opt(featureRanges) UINT32 const* featureRangeLengths, UINT32 featureRanges, UINT32 maxGlyphCount, __out_ecount(textLength) UINT16* clusterMap, __out_ecount(textLength) DWRITE_SHAPING_TEXT_PROPERTIES* textProps, __out_ecount(maxGlyphCount) UINT16* glyphIndices, __out_ecount(maxGlyphCount) DWRITE_SHAPING_GLYPH_PROPERTIES* glyphProps, __out UINT32* actualGlyphCount)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGlyphPlacements)( __in_ecount(textLength) WCHAR const* textString, __in_ecount(textLength) UINT16 const* clusterMap, __in_ecount(textLength) DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, __in_ecount(glyphCount) UINT16 const* glyphIndices, __in_ecount(glyphCount) DWRITE_SHAPING_GLYPH_PROPERTIES const* glyphProps, UINT32 glyphCount, IDWriteFontFace * fontFace, FLOAT fontEmSize, BOOL isSideways, BOOL isRightToLeft, __in DWRITE_SCRIPT_ANALYSIS const* scriptAnalysis, __in_z_opt WCHAR const* localeName, __in_ecount_opt(featureRanges) DWRITE_TYPOGRAPHIC_FEATURES const** features, __in_ecount_opt(featureRanges) UINT32 const* featureRangeLengths, UINT32 featureRanges, __out_ecount(glyphCount) FLOAT* glyphAdvances, __out_ecount(glyphCount) DWRITE_GLYPH_OFFSET* glyphOffsets)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGdiCompatibleGlyphPlacements)( __in_ecount(textLength) WCHAR const* textString, __in_ecount(textLength) UINT16 const* clusterMap, __in_ecount(textLength) DWRITE_SHAPING_TEXT_PROPERTIES* textProps, UINT32 textLength, __in_ecount(glyphCount) UINT16 const* glyphIndices, __in_ecount(glyphCount) DWRITE_SHAPING_GLYPH_PROPERTIES const* glyphProps, UINT32 glyphCount, IDWriteFontFace * fontFace, FLOAT fontEmSize, FLOAT pixelsPerDip, __in_opt DWRITE_MATRIX const* transform, BOOL useGdiNatural, BOOL isSideways, BOOL isRightToLeft, __in DWRITE_SCRIPT_ANALYSIS const* scriptAnalysis, __in_z_opt WCHAR const* localeName, __in_ecount_opt(featureRanges) DWRITE_TYPOGRAPHIC_FEATURES const** features, __in_ecount_opt(featureRanges) UINT32 const* featureRangeLengths, UINT32 featureRanges, __out_ecount(glyphCount) FLOAT* glyphAdvances, __out_ecount(glyphCount) DWRITE_GLYPH_OFFSET* glyphOffsets)"
  },
  {
    "label": "__field_ecount()",
    "kind": "Method",
    "detail": "Function (} ; struct DWRITE_GLYPH_RUN { __notnull IDWriteFontFace* fontFace ; FLOAT fontEmSize ; UINT32 glyphCount ;)",
    "insertText": "__field_ecount(glyphCount)"
  },
  {
    "label": "__field_ecount_opt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__field_ecount_opt(glyphCount)"
  },
  {
    "label": "__field_ecount()",
    "kind": "Method",
    "detail": "Function (BOOL isSideways ; UINT32 bidiLevel ; } ; struct DWRITE_GLYPH_RUN_DESCRIPTION { __nullterminated WCHAR const* localeName ;)",
    "insertText": "__field_ecount(stringLength)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (UINT32 textPosition ; } ; struct DWRITE_UNDERLINE { FLOAT width ; FLOAT thickness ; FLOAT offset ; FLOAT runHeight ; DWRITE_READING_DIRECTION readingDirection ; DWRITE_FLOW_DIRECTION flowDirection ; __nullterminated WCHAR const* localeName ; DWRITE_MEASURING_MODE measuringMode ; } ; struct DWRITE_STRIKETHROUGH { FLOAT width ; FLOAT thickness ; FLOAT offset ; DWRITE_READING_DIRECTION readingDirection ; DWRITE_FLOW_DIRECTION flowDirection ; __nullterminated WCHAR const* localeName ; DWRITE_MEASURING_MODE measuringMode ; } ; struct DWRITE_LINE_METRICS { UINT32 length ; UINT32 trailingWhitespaceLength ; UINT32 newlineLength ; FLOAT height ; FLOAT baseline ; BOOL isTrimmed ; } ; struct DWRITE_CLUSTER_METRICS { FLOAT width ; UINT16 length ; UINT16 canWrapLineAfter : 1 ; UINT16 isWhitespace : 1 ; UINT16 isNewline : 1 ; UINT16 isSoftHyphen : 1 ; UINT16 isRightToLeft : 1 ; UINT16 padding : 1 1 ; } ; struct DWRITE_TEXT_METRICS { FLOAT left ; FLOAT top ; FLOAT width ; FLOAT widthIncludingTrailingWhitespace ; FLOAT height ; FLOAT layoutWidth ; FLOAT layoutHeight ; UINT32 maxBidiReorderingDepth ; UINT32 lineCount ; } ; struct DWRITE_INLINE_OBJECT_METRICS { FLOAT width ; FLOAT height ; FLOAT baseline ; BOOL supportsSideways ; } ; struct DWRITE_OVERHANG_METRICS { FLOAT left ; FLOAT top ; FLOAT right ; FLOAT bottom ; } ; struct DWRITE_HIT_TEST_METRICS { UINT32 textPosition ; UINT32 length ; FLOAT left ; FLOAT top ; FLOAT width ; FLOAT height ; UINT32 bidiLevel ; BOOL isText ; BOOL isTrimmed ; } ; interface IDWriteTextRenderer ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"8339FDE3-106F-47ab-8373-1C6295EB10B3\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Draw)( __maybenull void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY, BOOL isSideways, BOOL isRightToLeft, __maybenull IUnknown* clientDrawingEffect)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetMetrics)( __out DWRITE_INLINE_OBJECT_METRICS* metrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetOverhangMetrics)( __out DWRITE_OVERHANG_METRICS* overhangs)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetBreakConditions)( __out DWRITE_BREAK_CONDITION* breakConditionBefore, __out DWRITE_BREAK_CONDITION* breakConditionAfter)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"eaf3a2da-ecf4-4d24-b644-b34f6842024b\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(IsPixelSnappingDisabled)( __maybenull void* clientDrawingContext, __out BOOL* isDisabled)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetCurrentTransform)( __maybenull void* clientDrawingContext, __out DWRITE_MATRIX* transform)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetPixelsPerDip)( __maybenull void* clientDrawingContext, __out FLOAT* pixelsPerDip)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"ef8a8135-5cc6-45fe-8825-c5a0724eb819\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DrawGlyphRun)( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, __maybenull IUnknown* clientDrawingEffect)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DrawUnderline)( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_UNDERLINE const* underline, __maybenull IUnknown* clientDrawingEffect)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DrawStrikethrough)( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_STRIKETHROUGH const* strikethrough, __maybenull IUnknown* clientDrawingEffect)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DrawInlineObject)( __maybenull void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, __maybenull IUnknown* clientDrawingEffect)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"53737037-6d14-410b-9bfe-0b182bb70961\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetMaxWidth)( FLOAT maxWidth)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetMaxHeight)( FLOAT maxHeight)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontCollection)( IDWriteFontCollection* fontCollection, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontFamilyName)( __in_z WCHAR const* fontFamilyName, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontWeight)( DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontStyle)( DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontStretch)( DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetFontSize)( FLOAT fontSize, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetUnderline)( BOOL hasUnderline, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetStrikethrough)( BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetDrawingEffect)( IUnknown* drawingEffect, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetInlineObject)( IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetTypography)( IDWriteTypography* typography, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetLocaleName)( __in_z WCHAR const* localeName, DWRITE_TEXT_RANGE textRange)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetMaxWidth)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetMaxHeight)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontCollection)( UINT32 currentPosition, __out IDWriteFontCollection** fontCollection, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFamilyNameLength)( UINT32 currentPosition, __out UINT32* nameLength, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontFamilyName)( UINT32 currentPosition, __out_ecount_z(nameSize) WCHAR* fontFamilyName, UINT32 nameSize, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontWeight)( UINT32 currentPosition, __out DWRITE_FONT_WEIGHT* fontWeight, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontStyle)( UINT32 currentPosition, __out DWRITE_FONT_STYLE* fontStyle, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontStretch)( UINT32 currentPosition, __out DWRITE_FONT_STRETCH* fontStretch, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetFontSize)( UINT32 currentPosition, __out FLOAT* fontSize, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetUnderline)( UINT32 currentPosition, __out BOOL* hasUnderline, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetStrikethrough)( UINT32 currentPosition, __out BOOL* hasStrikethrough, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetDrawingEffect)( UINT32 currentPosition, __out IUnknown** drawingEffect, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetInlineObject)( UINT32 currentPosition, __out IDWriteInlineObject** inlineObject, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetTypography)( UINT32 currentPosition, __out IDWriteTypography** typography, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleNameLength)( UINT32 currentPosition, __out UINT32* nameLength, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLocaleName)( UINT32 currentPosition, __out_ecount_z(nameSize) WCHAR* localeName, UINT32 nameSize, __out_opt DWRITE_TEXT_RANGE* textRange = NULL)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Draw)( __maybenull void* clientDrawingContext, IDWriteTextRenderer* renderer, FLOAT originX, FLOAT originY)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetLineMetrics)( __out_ecount_opt(maxLineCount) DWRITE_LINE_METRICS* lineMetrics, UINT32 maxLineCount, __out UINT32* actualLineCount)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetMetrics)( __out DWRITE_TEXT_METRICS* textMetrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetClusterMetrics)( __out_ecount_opt(maxClusterCount) DWRITE_CLUSTER_METRICS* clusterMetrics, UINT32 maxClusterCount, __out UINT32* actualClusterCount)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DetermineMinWidth)( __out FLOAT* minWidth)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(HitTestPoint)( FLOAT pointX, FLOAT pointY, __out BOOL* isTrailingHit, __out BOOL* isInside, __out DWRITE_HIT_TEST_METRICS* hitTestMetrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(HitTestTextPosition)( UINT32 textPosition, BOOL isTrailingHit, __out FLOAT* pointX, __out FLOAT* pointY, __out DWRITE_HIT_TEST_METRICS* hitTestMetrics)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(HitTestTextRange)( UINT32 textPosition, UINT32 textLength, FLOAT originX, FLOAT originY, __out_ecount_opt(maxHitTestMetricsCount) DWRITE_HIT_TEST_METRICS* hitTestMetrics, UINT32 maxHitTestMetricsCount, __out UINT32* actualHitTestMetricsCount)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"5e5a32a3-8dff-4773-9ff6-0696eab77267\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(DrawGlyphRun)( FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, IDWriteRenderingParams* renderingParams, COLORREF textColor, __out_opt RECT* blackBoxRect = NULL)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(HDC, GetMemoryDC)()"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(FLOAT, GetPixelsPerDip)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetPixelsPerDip)( FLOAT pixelsPerDip)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetCurrentTransform)( __out DWRITE_MATRIX* transform)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetCurrentTransform)( __in_opt DWRITE_MATRIX const* transform)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetSize)( __out SIZE* size)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Resize)( UINT32 width, UINT32 height)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"1edd9491-9853-4299-898f-6432983b6f3a\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateFontFromLOGFONT)( __in LOGFONTW const* logFont, __out IDWriteFont** font)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ConvertFontToLOGFONT)( IDWriteFont* font, __out LOGFONTW* logFont, __out BOOL* isSystemFont)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ConvertFontFaceToLOGFONT)( IDWriteFontFace* font, __out LOGFONTW* logFont)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateFontFaceFromHdc)( HDC hdc, __out IDWriteFontFace** fontFace)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateBitmapRenderTarget)( __in_opt HDC hdc, UINT32 width, UINT32 height, __out IDWriteBitmapRenderTarget** renderTarget)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; enum DWRITE_TEXTURE_TYPE { DWRITE_TEXTURE_ALIASED_1x1,DWRITE_TEXTURE_CLEARTYPE_3x1 } ; # define DWRITE_ALPHA_MAX 2 5 5 interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"7d97dbf7-e085-42d4-81e3-6a883bded118\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetAlphaTextureBounds)( DWRITE_TEXTURE_TYPE textureType, __out RECT* textureBounds)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateAlphaTexture)( DWRITE_TEXTURE_TYPE textureType, __in RECT const* textureBounds, __out_bcount(bufferSize) BYTE* alphaValues, UINT32 bufferSize)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetAlphaBlendParams)( IDWriteRenderingParams* renderingParams, __out FLOAT* blendGamma, __out FLOAT* blendEnhancedContrast, __out FLOAT* blendClearTypeLevel)"
  },
  {
    "label": "DWRITE_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DWRITE_DECLARE_INTERFACE(\"b859ee5a-d838-4b5b-a2e8-1adc7d93db48\")"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetSystemFontCollection)( __out IDWriteFontCollection** fontCollection, BOOL checkForUpdates = FALSE)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateCustomFontCollection)( IDWriteFontCollectionLoader* collectionLoader, __in_bcount(collectionKeySize) void const* collectionKey, UINT32 collectionKeySize, __out IDWriteFontCollection** fontCollection)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(RegisterFontCollectionLoader)( IDWriteFontCollectionLoader* fontCollectionLoader)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(UnregisterFontCollectionLoader)( IDWriteFontCollectionLoader* fontCollectionLoader)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateFontFileReference)( __in_z WCHAR const* filePath, __in_opt FILETIME const* lastWriteTime, __out IDWriteFontFile** fontFile)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateCustomFontFileReference)( __in_bcount(fontFileReferenceKeySize) void const* fontFileReferenceKey, UINT32 fontFileReferenceKeySize, IDWriteFontFileLoader* fontFileLoader, __out IDWriteFontFile** fontFile)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateFontFace)( DWRITE_FONT_FACE_TYPE fontFaceType, UINT32 numberOfFiles, __in_ecount(numberOfFiles) IDWriteFontFile* const* fontFiles, UINT32 faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, __out IDWriteFontFace** fontFace)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateRenderingParams)( __out IDWriteRenderingParams** renderingParams)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateMonitorRenderingParams)( HMONITOR monitor, __out IDWriteRenderingParams** renderingParams)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateCustomRenderingParams)( FLOAT gamma, FLOAT enhancedContrast, FLOAT clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, __out IDWriteRenderingParams** renderingParams)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(RegisterFontFileLoader)( IDWriteFontFileLoader* fontFileLoader)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(UnregisterFontFileLoader)( IDWriteFontFileLoader* fontFileLoader)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateTextFormat)( __in_z WCHAR const* fontFamilyName, __maybenull IDWriteFontCollection* fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, FLOAT fontSize, __in_z WCHAR const* localeName, __out IDWriteTextFormat** textFormat)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateTypography)( __out IDWriteTypography** typography)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetGdiInterop)( __out IDWriteGdiInterop** gdiInterop)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateTextLayout)( __in_ecount(stringLength) WCHAR const* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT maxWidth, FLOAT maxHeight, __out IDWriteTextLayout** textLayout)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateGdiCompatibleTextLayout)( __in_ecount(stringLength) WCHAR const* string, UINT32 stringLength, IDWriteTextFormat* textFormat, FLOAT layoutWidth, FLOAT layoutHeight, FLOAT pixelsPerDip, __in_opt DWRITE_MATRIX const* transform, BOOL useGdiNatural, __out IDWriteTextLayout** textLayout)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateEllipsisTrimmingSign)( IDWriteTextFormat* textFormat, __out IDWriteInlineObject** trimmingSign)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateTextAnalyzer)( __out IDWriteTextAnalyzer** textAnalyzer)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateNumberSubstitution)( __in DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, __in_z WCHAR const* localeName, __in BOOL ignoreUserOverride, __out IDWriteNumberSubstitution** numberSubstitution)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(CreateGlyphRunAnalysis)( __in DWRITE_GLYPH_RUN const* glyphRun, FLOAT pixelsPerDip, __in_opt DWRITE_MATRIX const* transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, FLOAT baselineOriginX, FLOAT baselineOriginY, __out IDWriteGlyphRunAnalysis** glyphRunAnalysis)"
  },
  {
    "label": "DWriteCreateFactory()",
    "kind": "Method",
    "detail": "Function (} ; EXTERN_C HRESULT DWRITE_EXPORT)",
    "insertText": "DWriteCreateFactory(__in DWRITE_FACTORY_TYPE factoryType, __in REFIID iid, __out IUnknown **factory)"
  }
]