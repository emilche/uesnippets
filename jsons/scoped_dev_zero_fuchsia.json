[
  {
    "label": "ScopedDevZero",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDevZero"
  },
  {
    "label": "RefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCounted"
  },
  {
    "label": "Server",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Server"
  },
  {
    "label": "REQUIRE_ADOPTION_FOR_REFCOUNTED_TYPE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_DEV_ZERO_FUCHSIA_H_ # define BASE_TEST_SCOPED_DEV_ZERO_FUCHSIA_H_ # include<lib / fdio / namespace . h> # include \" base / memory / ref_counted . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / threading / sequence_bound . h \" # include \" base / threading / thread . h \" namespace base { class ScopedDevZero final : public RefCounted<ScopedDevZero> { public :)",
    "insertText": "REQUIRE_ADOPTION_FOR_REFCOUNTED_TYPE()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<ScopedDevZero>)",
    "insertText": "Get()"
  },
  {
    "label": "ScopedDevZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDevZero(const ScopedDevZero&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDevZero)",
    "insertText": "operator(const ScopedDevZero&)"
  },
  {
    "label": "ScopedDevZero()",
    "kind": "Method",
    "detail": "Function (private : class RefCounted<ScopedDevZero> ; class Server ;)",
    "insertText": "ScopedDevZero()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  }
]