[
  {
    "label": "CheckedMulFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedMulFastAsmOp"
  },
  {
    "label": "ClampedAddFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedAddFastAsmOp"
  },
  {
    "label": "ClampedSubFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedSubFastAsmOp"
  },
  {
    "label": "ClampedMulFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedMulFastAsmOp"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_SAFE_MATH_ARM_IMPL_H_ # define BASE_NUMERICS_SAFE_MATH_ARM_IMPL_H_ # include<cassert> # include<type_traits> # include \" base / numerics / safe_conversions . h \" namespace base { namespace internal { template<T,U> struct CheckedMulFastAsmOp { const bool is_supported = kEnableAsmCode&& FastIntegerArithmeticPromotion<T,U>::is_contained ; template<V> bool)",
    "insertText": "Do(T x, U y, V* result)"
  },
  {
    "label": "Promotion()",
    "kind": "Method",
    "detail": "Function (using Promotion = FastIntegerArithmeticPromotion<T,U>::type ; Promotion presult ; presult = static_cast<)",
    "insertText": "Promotion(x) * static_cast<Promotion>(y)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (* result = static_cast<)",
    "insertText": "V(presult)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t result ; int32_t x_i32 = checked_cast<)",
    "insertText": "int32_t(x)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (int32_t y_i32 = checked_cast<)",
    "insertText": "int32_t(y)"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "asm(\"qadd %[result], %[first], %[second]\" : [result] \"=r\"(result) : [first] \"r\"(x_i32), [second] \"r\"(y_i32))"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct ClampedSubFastAsmOp { const bool is_supported = kEnableAsmCode&& BigEnoughPromotion<T,U>::is_contained&& IsTypeInRangeForNumericType<int32_t,BigEnoughPromotion<T,U>::type>::value ; template<V>)",
    "insertText": "__attribute__((always_inline)) static V Do(T x, U y)"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "asm(\"qsub %[result], %[first], %[second]\" : [result] \"=r\"(result) : [first] \"r\"(x_i32), [second] \"r\"(y_i32))"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (V result ; return CheckedMulFastAsmOp<T,U)",
    "insertText": "Do(x, y, &result) ? result : CommonMaxOrMin<V>(IsValueNegative(x) ^ IsValueNegative(y))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert((FastIntegerArithmeticPromotion<T, U>::is_contained))"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (using Promotion = FastIntegerArithmeticPromotion<T,U>::type ; return saturated_cast<)",
    "insertText": "V(static_cast<Promotion>(x) * static_cast<Promotion>(y))"
  }
]