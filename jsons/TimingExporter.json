[
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FTimingProfilerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingProfilerEvent"
  },
  {
    "label": "FTimingExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingExporter"
  },
  {
    "label": "FExportThreadsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportThreadsParams"
  },
  {
    "label": "FExportTimersParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportTimersParams"
  },
  {
    "label": "FExportTimingEventsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportTimingEventsParams"
  },
  {
    "label": "FExportTimerStatisticsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportTimerStatisticsParams"
  },
  {
    "label": "FExportTimerCalleesParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportTimerCalleesParams"
  },
  {
    "label": "FExportCountersParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportCountersParams"
  },
  {
    "label": "FExportCounterParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportCounterParams"
  },
  {
    "label": "FTimeRegionInterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeRegionInterval"
  },
  {
    "label": "FTimeRegionGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeRegionGroup"
  },
  {
    "label": "FUtf8Writer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUtf8Writer"
  },
  {
    "label": "FExportTimingEventsInternalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportTimingEventsInternalParams"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" # include<limits> class IFileHandle ; namespace TraceServices { class IAnalysisSession ; struct FTimingProfilerEvent ; } namespace UE::Insights::TimingProfiler { class FTimingExporter { public : typedef TFunction<)",
    "insertText": "bool(const FName)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(uint32)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(double , double , uint32 , const TraceServices::FTimingProfilerEvent&)"
  },
  {
    "label": "infinity()",
    "kind": "Method",
    "detail": "Function (struct FExportThreadsParams { const TArray<FName>* Columns = nullptr ; } ; struct FExportTimersParams { const TArray<FName>* Columns = nullptr ; } ; struct FExportTimingEventsParams { const TArray<FName>* Columns = nullptr ; FThreadFilterFunc ThreadFilter = nullptr ; FTimingEventFilterFunc TimingEventFilter = nullptr ; double IntervalStartTime = - std::numeric_limits<double)",
    "insertText": "infinity()"
  },
  {
    "label": "FUtf8Writer()",
    "kind": "Method",
    "detail": "Function (FString Region ; bool bExportOps = false ; } ; struct FTimeRegionInterval { double StartTime ; double EndTime ; } ; struct FTimeRegionGroup { TArray<FTimeRegionInterval> Intervals ; } ; private : int32 StringBuilderBufferSize = 3 2* 1 0 2 4 ; typedef TUtf8StringBuilder<StringBuilderBufferSize> FUtf8StringBuilder ; class FUtf8Writer { public :)",
    "insertText": "FUtf8Writer(IFileHandle* InFileHandle, bool bIsCSV) : FileHandle(InFileHandle) , Separator(bIsCSV ? UTF8CHAR(',') : UTF8CHAR('\\t'))"
  },
  {
    "label": "FUtf8Writer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUtf8Writer()"
  },
  {
    "label": "GetStringBuilder()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringBuilder&)",
    "insertText": "GetStringBuilder()"
  },
  {
    "label": "AppendSeparator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendSeparator()"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (StringBuilder .)",
    "insertText": "AppendChar(Separator)"
  },
  {
    "label": "AppendLineEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendLineEnd()"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (StringBuilder .)",
    "insertText": "AppendChar(UTF8CHAR('\\n'))"
  },
  {
    "label": "WriteStringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringBuilder(StringBuilderBufferSize - 1024)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendString(const TCHAR* InString)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FString& InString)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuilder .)",
    "insertText": "Append(InString)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "WriteStringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringBuilder(0)"
  },
  {
    "label": "WriteStringBuilder()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "WriteStringBuilder(int32 CacheLen)"
  },
  {
    "label": "FTimingExporter()",
    "kind": "Method",
    "detail": "Function (private : IFileHandle* FileHandle ; FUtf8StringBuilder StringBuilder ; UTF8CHAR Separator ; } ; struct FExportTimingEventsInternalParams { const FTimingExporter& Exporter ; const FExportTimingEventsParams& UserParams ; const TArray<FName>& Columns ; FUtf8Writer& Writer ; uint32 ThreadId ; const TCHAR* ThreadName ; } ; public :)",
    "insertText": "FTimingExporter(const TraceServices::IAnalysisSession& InSession)"
  },
  {
    "label": "FTimingExporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingExporter()"
  },
  {
    "label": "ExportThreadsAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportThreadsAsText(const FString& Filename, FExportThreadsParams& Params)"
  },
  {
    "label": "ExportTimersAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimersAsText(const FString& Filename, FExportTimersParams& Params)"
  },
  {
    "label": "ExportTimingEventsAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimingEventsAsText(const FString& Filename, FExportTimingEventsParams& Params)"
  },
  {
    "label": "ExportTimerStatisticsAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimerStatisticsAsText(const FString& Filename, FExportTimerStatisticsParams& Params)"
  },
  {
    "label": "ExportTimerCalleesAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimerCalleesAsText(const FString& Filename, const FExportTimerCalleesParams& Params)"
  },
  {
    "label": "ExportCountersAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportCountersAsText(const FString& Filename, FExportCountersParams& Params)"
  },
  {
    "label": "ExportCounterAsText()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportCounterAsText(const FString& Filename, uint32 CounterId, FExportCounterParams& Params)"
  },
  {
    "label": "MakeExportTimingEventsColumnList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeExportTimingEventsColumnList(const FString& InColumnsString, TArray<FName>& OutColumnList)"
  },
  {
    "label": "GetRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRegions(const FString& InRegionNamePattern, TMap<FString, FTimeRegionGroup>& OutRegionGroups)"
  },
  {
    "label": "EnumerateRegions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EnumerateRegions(const TMap<FString, FTimeRegionGroup>& InRegionGroups, const FString& InFilenamePattern, TFunction<void(const FString& , const FString& , double , double )> InCallback)"
  },
  {
    "label": "MakeThreadFilterInclusive()",
    "kind": "Method",
    "detail": "Function (FThreadFilterFunc)",
    "insertText": "MakeThreadFilterInclusive(const FString& InFilterString, TSet<uint32>& OutIncludedThreads)"
  },
  {
    "label": "MakeThreadFilterInclusive()",
    "kind": "Method",
    "detail": "Function (FThreadFilterFunc)",
    "insertText": "MakeThreadFilterInclusive(const TSet<uint32>& IncludedThreads)"
  },
  {
    "label": "MakeThreadFilterExclusive()",
    "kind": "Method",
    "detail": "Function (FThreadFilterFunc)",
    "insertText": "MakeThreadFilterExclusive(const TSet<uint32>& ExcludedThreads)"
  },
  {
    "label": "MakeTimingEventFilterByTimersInclusive()",
    "kind": "Method",
    "detail": "Function (FTimingEventFilterFunc)",
    "insertText": "MakeTimingEventFilterByTimersInclusive(const FString& InFilterString, TSet<uint32>& OutIncludedTimers)"
  },
  {
    "label": "MakeTimingEventFilterByTimersInclusive()",
    "kind": "Method",
    "detail": "Function (FTimingEventFilterFunc)",
    "insertText": "MakeTimingEventFilterByTimersInclusive(const TSet<uint32>& IncludedTimers)"
  },
  {
    "label": "MakeTimingEventFilterByTimersExclusive()",
    "kind": "Method",
    "detail": "Function (FTimingEventFilterFunc)",
    "insertText": "MakeTimingEventFilterByTimersExclusive(const TSet<uint32>& ExcludedTimers)"
  },
  {
    "label": "OpenExportFile()",
    "kind": "Method",
    "detail": "Function (private : IFileHandle*)",
    "insertText": "OpenExportFile(const TCHAR* InFilename)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(const FText& InMessage)"
  },
  {
    "label": "ExportTimingEvents_InitColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportTimingEvents_InitColumns()"
  },
  {
    "label": "ExportTimingEvents_WriteHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportTimingEvents_WriteHeader(FExportTimingEventsInternalParams& Params)"
  },
  {
    "label": "ExportTimingEvents_WriteEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimingEvents_WriteEvents(FExportTimingEventsInternalParams& Params)"
  },
  {
    "label": "ExportTimingEventsAsTextByRegions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimingEventsAsTextByRegions(const FString& FilenamePattern, FExportTimingEventsParams& Params)"
  },
  {
    "label": "ExportTimerStatisticsAsTextByRegions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimerStatisticsAsTextByRegions(const FString& Filename, FExportTimerStatisticsParams& Params)"
  },
  {
    "label": "ExportTimerCalleesByRegions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportTimerCalleesByRegions(const FString& FilenamePattern, const FExportTimerCalleesParams& Params)"
  },
  {
    "label": "ExportCounterAsTextByRegions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExportCounterAsTextByRegions(const FString& Filename, uint32 CounterId, FExportCounterParams& Params)"
  }
]