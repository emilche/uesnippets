[
  {
    "label": "FAutomationWorkerMessageBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerMessageBase"
  },
  {
    "label": "FAutomationWorkerFindWorkers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerFindWorkers"
  },
  {
    "label": "FAutomationWorkerFindWorkersResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerFindWorkersResponse"
  },
  {
    "label": "FAutomationWorkerWorkerOffline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerWorkerOffline"
  },
  {
    "label": "FAutomationWorkerPing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPing"
  },
  {
    "label": "FAutomationWorkerStartTestSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStartTestSession"
  },
  {
    "label": "FAutomationWorkerStopTestSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStopTestSession"
  },
  {
    "label": "FAutomationWorkerStopTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerStopTests"
  },
  {
    "label": "FAutomationWorkerPong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPong"
  },
  {
    "label": "FAutomationWorkerRequestTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRequestTests"
  },
  {
    "label": "FAutomationWorkerSingleTestReply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerSingleTestReply"
  },
  {
    "label": "FAutomationWorkerRequestTestsReplyComplete",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRequestTestsReplyComplete"
  },
  {
    "label": "FAutomationWorkerRunTests",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRunTests"
  },
  {
    "label": "FAutomationWorkerRunTestsReply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRunTestsReply"
  },
  {
    "label": "FAutomationWorkerRequestNextNetworkCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerRequestNextNetworkCommand"
  },
  {
    "label": "FAutomationWorkerNextNetworkCommandReply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerNextNetworkCommandReply"
  },
  {
    "label": "FAutomationScreenshotMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationScreenshotMetadata"
  },
  {
    "label": "FAutomationWorkerScreenImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerScreenImage"
  },
  {
    "label": "FAutomationWorkerImageComparisonResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerImageComparisonResults"
  },
  {
    "label": "FAutomationWorkerTestDataRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerTestDataRequest"
  },
  {
    "label": "FAutomationWorkerTestDataResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerTestDataResponse"
  },
  {
    "label": "FAutomationWorkerPerformanceDataRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPerformanceDataRequest"
  },
  {
    "label": "FAutomationWorkerPerformanceDataResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerPerformanceDataResponse"
  },
  {
    "label": "FAutomationWorkerTelemetryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerTelemetryItem"
  },
  {
    "label": "FAutomationWorkerTelemetryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWorkerTelemetryData"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AutomationState . h \" # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Misc / AutomationTest . h \" # include \" Misc / Guid . h \" # include \" UObject / ObjectMacros . h \" # include \" AutomationWorkerMessages . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, Category = \"Message\")"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=\"Message\")"
  },
  {
    "label": "FAutomationWorkerFindWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerFindWorkers() : Changelist(0)"
  },
  {
    "label": "FAutomationWorkerFindWorkers()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerFindWorkers(int32 InChangelist, const FString& InGameName, const FString& InProcessName, const FGuid& InSessionId) : Changelist(InChangelist) , GameName(InGameName) , ProcessName(InProcessName) , SessionId(InSessionId)"
  },
  {
    "label": "FAutomationWorkerFindWorkersResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerFindWorkersResponse() : RAMInGB(0)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAutomationWorkerRequestTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerRequestTests()"
  },
  {
    "label": "FAutomationWorkerRequestTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerRequestTests(bool InDeveloperDirectoryIncluded, EAutomationTestFlags InRequestedTestFlags) : DeveloperDirectoryIncluded(InDeveloperDirectoryIncluded) , RequestedTestFlags((uint32)InRequestedTestFlags)"
  },
  {
    "label": "FAutomationWorkerSingleTestReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerSingleTestReply()"
  },
  {
    "label": "FAutomationWorkerSingleTestReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerSingleTestReply(const FAutomationTestInfo& InTestInfo)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (DisplayName = InTestInfo .)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetFullTestPath()",
    "kind": "Method",
    "detail": "Function (FullTestPath = InTestInfo .)",
    "insertText": "GetFullTestPath()"
  },
  {
    "label": "GetTestName()",
    "kind": "Method",
    "detail": "Function (TestName = InTestInfo .)",
    "insertText": "GetTestName()"
  },
  {
    "label": "GetTestParameter()",
    "kind": "Method",
    "detail": "Function (TestParameter = InTestInfo .)",
    "insertText": "GetTestParameter()"
  },
  {
    "label": "GetSourceFile()",
    "kind": "Method",
    "detail": "Function (SourceFile = InTestInfo .)",
    "insertText": "GetSourceFile()"
  },
  {
    "label": "GetSourceFileLine()",
    "kind": "Method",
    "detail": "Function (SourceFileLine = InTestInfo .)",
    "insertText": "GetSourceFileLine()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (AssetPath = InTestInfo .)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "GetOpenCommand()",
    "kind": "Method",
    "detail": "Function (OpenCommand = InTestInfo .)",
    "insertText": "GetOpenCommand()"
  },
  {
    "label": "TestFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestFlags(uint32)InTestInfo.GetTestFlags()"
  },
  {
    "label": "GetNumParticipantsRequired()",
    "kind": "Method",
    "detail": "Function (NumParticipantsRequired = InTestInfo .)",
    "insertText": "GetNumParticipantsRequired()"
  },
  {
    "label": "GetTestTags()",
    "kind": "Method",
    "detail": "Function (TestTags = InTestInfo .)",
    "insertText": "GetTestTags()"
  },
  {
    "label": "GetTestInfo()",
    "kind": "Method",
    "detail": "Function (} FAutomationTestInfo)",
    "insertText": "GetTestInfo()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = \"Message\")"
  },
  {
    "label": "FAutomationWorkerRunTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerRunTests() :ExecutionCount(0), RoleIndex(0), bSendAnalytics(false), bPruneLogsOnSuccess(false)"
  },
  {
    "label": "FAutomationWorkerRunTests()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerRunTests(uint32 InExecutionCount, int32 InRoleIndex, FString InTestName, FString InBeautifiedTestName, FString InFullTestPath, bool InSendAnalytics, bool InPruneLogsOnSuccess) : ExecutionCount(InExecutionCount) , RoleIndex(InRoleIndex) , TestName(InTestName) , BeautifiedTestName(InBeautifiedTestName) , FullTestPath(InFullTestPath) , bSendAnalytics(InSendAnalytics) , bPruneLogsOnSuccess(InPruneLogsOnSuccess)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, Category=\"Message\")"
  },
  {
    "label": "FAutomationWorkerRequestNextNetworkCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerRequestNextNetworkCommand() : ExecutionCount(0)"
  },
  {
    "label": "FAutomationWorkerRequestNextNetworkCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerRequestNextNetworkCommand(uint32 InExecutionCount) : ExecutionCount(InExecutionCount)"
  },
  {
    "label": "FAutomationScreenshotMetadata()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAutomationScreenshotMetadata() : Width(0) , Height(0) , bIsStereo(false) , ResolutionQuality(0.0f) , ViewDistanceQuality(0) , AntiAliasingQuality(0) , ShadowQuality(0) , GlobalIlluminationQuality(0) , ReflectionQuality(0) , PostProcessQuality(0) , TextureQuality(0) , EffectsQuality(0) , FoliageQuality(0) , ShadingQuality(0) , bHasComparisonRules(0) , ToleranceRed(0) , ToleranceGreen(0) , ToleranceBlue(0) , ToleranceAlpha(0) , ToleranceMinBrightness(0) , ToleranceMaxBrightness(0) , MaximumLocalError(0.0f) , MaximumGlobalError(0.0f) , bIgnoreAntiAliasing(false) , bIgnoreColors(false)"
  },
  {
    "label": "FAutomationScreenshotMetadata()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationScreenshotMetadata(const FAutomationScreenshotData& Data)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (ScreenShotName = Data . ScreenShotName ; VariantName = Data . VariantName ; Context = Data . Context ; TestName = Data . TestName ; Notes = Data . Notes ; Id = Data . Id ; Commit = Data . Commit ; Width = Data . Width ; Height = Data . Height ; Rhi = Data . Rhi ; Platform = Data . Platform ; FeatureLevel = Data . FeatureLevel ; bIsStereo = Data . bIsStereo ; Vendor = Data . Vendor ; AdapterName = Data . AdapterName ; AdapterInternalDriverVersion = Data . AdapterInternalDriverVersion ; AdapterUserDriverVersion = Data . AdapterUserDriverVersion ; UniqueDeviceId = Data . UniqueDeviceId ; ResolutionQuality = Data . ResolutionQuality ; ViewDistanceQuality = Data . ViewDistanceQuality ; AntiAliasingQuality = Data . AntiAliasingQuality ; ShadowQuality = Data . ShadowQuality ; GlobalIlluminationQuality = Data . GlobalIlluminationQuality ; ReflectionQuality = Data . ReflectionQuality ; PostProcessQuality = Data . PostProcessQuality ; TextureQuality = Data . TextureQuality ; EffectsQuality = Data . EffectsQuality ; FoliageQuality = Data . FoliageQuality ; ShadingQuality = Data . ShadingQuality ; bHasComparisonRules = Data . bHasComparisonRules ; ToleranceRed = Data . ToleranceRed ; ToleranceGreen = Data . ToleranceGreen ; ToleranceBlue = Data . ToleranceBlue ; ToleranceAlpha = Data . ToleranceAlpha ; ToleranceMinBrightness = Data . ToleranceMinBrightness ; ToleranceMaxBrightness = Data . ToleranceMaxBrightness ; MaximumLocalError = Data . MaximumLocalError ; MaximumGlobalError = Data . MaximumGlobalError ; bIgnoreAntiAliasing = Data . bIgnoreAntiAliasing ; bIgnoreColors = Data . bIgnoreColors ; } int32)",
    "insertText": "Compare(const FAutomationScreenshotMetadata& OtherMetadata)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Score = 0 ;)",
    "insertText": "if(Width != OtherMetadata.Width || Height != OtherMetadata.Height || bIsStereo != OtherMetadata.bIsStereo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 0 ; })",
    "insertText": "if(FeatureLevel == OtherMetadata.FeatureLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 0 ; })",
    "insertText": "if(UniqueDeviceId == OtherMetadata.UniqueDeviceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 0 ; })",
    "insertText": "if(Rhi == OtherMetadata.Rhi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 0 ; })",
    "insertText": "if(Platform == OtherMetadata.Platform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(AdapterName == OtherMetadata.AdapterName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(AdapterInternalDriverVersion == OtherMetadata.AdapterInternalDriverVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(AdapterUserDriverVersion == OtherMetadata.AdapterUserDriverVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(ResolutionQuality == OtherMetadata.ResolutionQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(ViewDistanceQuality == OtherMetadata.ViewDistanceQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(AntiAliasingQuality == OtherMetadata.AntiAliasingQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(ShadowQuality == OtherMetadata.ShadowQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(GlobalIlluminationQuality == OtherMetadata.GlobalIlluminationQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(ReflectionQuality == OtherMetadata.ReflectionQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(PostProcessQuality == OtherMetadata.PostProcessQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(TextureQuality == OtherMetadata.TextureQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(EffectsQuality == OtherMetadata.EffectsQuality)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Score + = 1 0 ; })",
    "insertText": "if(FoliageQuality == OtherMetadata.FoliageQuality)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FAutomationWorkerImageComparisonResults(FGuid InInstanceId = FGuid{})"
  },
  {
    "label": "bNew()",
    "kind": "Method",
    "detail": "Function (InInstanceId },)",
    "insertText": "bNew(false) , bSimilar(false) , MaxLocalDifference(0.0) , GlobalDifference(0.0)"
  },
  {
    "label": "FAutomationWorkerImageComparisonResults()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerImageComparisonResults(FGuid InInstanceId, FGuid InUniqueId, const FString& InScreenshotPath, bool InIsNew, bool InAreSimilar, double InMaxLocalDifference, double InGlobalDifference, const FString& InErrorMessage, const FString& InIncomingFilePath, const FString& InReportComparisonFilePath, const FString& InReportApprovedFilePath, const FString& InReportIncomingFilePath)"
  },
  {
    "label": "UniqueId()",
    "kind": "Method",
    "detail": "Function (InInstanceId },)",
    "insertText": "UniqueId(InUniqueId) , ScreenshotPath(InScreenshotPath) , bNew(InIsNew) , bSimilar(InAreSimilar) , MaxLocalDifference(InMaxLocalDifference) , GlobalDifference(InGlobalDifference) , ErrorMessage(InErrorMessage) , IncomingFilePath(InIncomingFilePath) , ReportComparisonFilePath(InReportComparisonFilePath) , ReportApprovedFilePath(InReportApprovedFilePath) , ReportIncomingFilePath(InReportIncomingFilePath)"
  },
  {
    "label": "FAutomationWorkerTelemetryItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAutomationWorkerTelemetryItem() : Measurement(0.0)"
  },
  {
    "label": "FAutomationWorkerTelemetryItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerTelemetryItem(FString& InDataPoint, double InMeasurement, FString& InContext) : DataPoint(InDataPoint) , Measurement(InMeasurement) , Context(InContext)"
  },
  {
    "label": "FAutomationWorkerTelemetryItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutomationWorkerTelemetryItem(const FAutomationTelemetryData& InItem) : DataPoint(InItem.DataPoint) , Measurement(InItem.Measurement) , Context(InItem.Context)"
  }
]