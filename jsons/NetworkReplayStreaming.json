[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FReplayEventListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplayEventListItem"
  },
  {
    "label": "FReplayEventList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplayEventList"
  },
  {
    "label": "FNetworkReplayStreamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkReplayStreamInfo"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamingResultBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingResultBase"
  },
  {
    "label": "FStartStreamingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStartStreamingResult"
  },
  {
    "label": "FReplayCheckpointInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayCheckpointInfo"
  },
  {
    "label": "FGotoResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGotoResult"
  },
  {
    "label": "FDeleteFinishedStreamResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleteFinishedStreamResult"
  },
  {
    "label": "FEnumerateStreamsResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumerateStreamsResult"
  },
  {
    "label": "FEnumerateEventsResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumerateEventsResult"
  },
  {
    "label": "FRequestEventDataResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestEventDataResult"
  },
  {
    "label": "FRequestEventGroupDataResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestEventGroupDataResult"
  },
  {
    "label": "FDownloadHeaderResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDownloadHeaderResult"
  },
  {
    "label": "FSearchEventsResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchEventsResult"
  },
  {
    "label": "FKeepReplayResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeepReplayResult"
  },
  {
    "label": "FRenameReplayResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenameReplayResult"
  },
  {
    "label": "FStartStreamingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStartStreamingParameters"
  },
  {
    "label": "INetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkReplayStreamer"
  },
  {
    "label": "INetworkReplayStreamingFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetworkReplayStreamingFactory"
  },
  {
    "label": "FNetworkReplayStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkReplayStreaming"
  },
  {
    "label": "FReplayEventListItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnalyticsEventAttribute . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Misc / CoreMisc . h \" # include \" Misc / DateTime . h \" # include \" Misc / NetworkVersion . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Net / Core / Connection / NetResult . h \" # include \" Net / Core / Connection / NetResultManager . h \" # include \" Serialization / JsonSerializerMacros . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FArchive ; class FOutputDevice ; class IAnalyticsProvider ; class UWorld ; struct FAnalyticsEventAttribute ; class FReplayEventListItem : public FJsonSerializable { public :)",
    "insertText": "FReplayEventListItem() : Time1(0), Time2(0)"
  },
  {
    "label": "FReplayEventListItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReplayEventListItem()"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} FString ID ; FString Group ; FString Metadata ; uint32 Time1 ; uint32 Time2 ; BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"id\", ID)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"group\", Group)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"meta\", Metadata)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"time1\", Time1)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"time2\", Time2)"
  },
  {
    "label": "FReplayEventList()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER } ; class FReplayEventList : public FJsonSerializable { public :)",
    "insertText": "FReplayEventList()"
  },
  {
    "label": "JSON_SERIALIZE_ARRAY_SERIALIZABLE()",
    "kind": "Method",
    "detail": "Function (} TArray<FReplayEventListItem> ReplayEvents ; BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE_ARRAY_SERIALIZABLE(\"events\", ReplayEvents, FReplayEventListItem)"
  },
  {
    "label": "FNetworkReplayStreamInfo()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER } ; struct FNetworkReplayStreamInfo {)",
    "insertText": "FNetworkReplayStreamInfo() : Timestamp( 0 ), SizeInBytes( 0 ), LengthInMS( 0 ), NumViewers( 0 ), Changelist( 0 ), bIsLive(false), bShouldKeep( false)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (None,ServiceUnavailable,} ; PRAGMA_DISABLE_DEPRECATION_WARNINGS const TCHAR*)",
    "insertText": "ToString(const ENetworkReplayError::Type FailureType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown ENetworkReplayError error\")"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS })",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnStreamReadyDelegate, const bool, const bool)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnCheckpointReadyDelegate, const bool, const int64)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDeleteFinishedStreamComplete, const bool)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnEnumerateStreamsComplete, const TArray<FNetworkReplayStreamInfo>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FEnumerateEventsCompleteDelegate, const FReplayEventList&, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnRequestEventDataComplete, const TArray<uint8>&, bool) DECLARE_DELEGATE_OneParam(FOnDownloadHeaderComplete, const bool)"
  },
  {
    "label": "FStreamingResultBase()",
    "kind": "Method",
    "detail": "Function (enum class EStreamingOperationResult { Success,Unsupported,ReplayNotFound,ReplayCorrupt,NotEnoughSpace,NotEnoughSlots,Unspecified,UnfinishedTask,EventNotFound,DecryptFailure,} ; struct FStreamingResultBase { EStreamingOperationResult Result = EStreamingOperationResult::Unspecified ; ~)",
    "insertText": "FStreamingResultBase()"
  },
  {
    "label": "WasSuccessful()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasSuccessful()"
  },
  {
    "label": "UpgradeStartStreamingDelegate()",
    "kind": "Method",
    "detail": "Function (FStartStreamingCallback)",
    "insertText": "UpgradeStartStreamingDelegate(const FOnStreamReadyDelegate& OldDelegate)"
  },
  {
    "label": "FStartStreamingCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FStartStreamingCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FReplayCheckpointInfo { uint32 INVALID_CHECKPOINT = - 2 ; uint32 NO_CHECKPOINT = - 1 ; uint32 CheckpointStartTime = INVALID_CHECKPOINT ; uint32 CheckpointIndex = INVALID_CHECKPOINT ; } ; struct FGotoResult : public FStreamingResultBase { int64 ExtraTimeMS = - 1 ; FReplayCheckpointInfo CheckpointInfo ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FGotoCallback, const FGotoResult&)"
  },
  {
    "label": "UpgradeGotoDelegate()",
    "kind": "Method",
    "detail": "Function (FGotoCallback)",
    "insertText": "UpgradeGotoDelegate(const FOnCheckpointReadyDelegate& OldDelegate)"
  },
  {
    "label": "FGotoCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FGotoCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FDeleteFinishedStreamResult : public FStreamingResultBase { } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FDeleteFinishedStreamCallback, const FDeleteFinishedStreamResult&)"
  },
  {
    "label": "UpgradeDeleteFinishedStreamDelegate()",
    "kind": "Method",
    "detail": "Function (FDeleteFinishedStreamCallback)",
    "insertText": "UpgradeDeleteFinishedStreamDelegate(const FOnDeleteFinishedStreamComplete& OldDelegate)"
  },
  {
    "label": "FDeleteFinishedStreamCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FDeleteFinishedStreamCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FEnumerateStreamsResult : public FStreamingResultBase { TArray<FNetworkReplayStreamInfo> FoundStreams ; TArray<FString> CorruptedStreams ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FEnumerateStreamsCallback, const FEnumerateStreamsResult&)"
  },
  {
    "label": "UpgradeEnumerateStreamsDelegate()",
    "kind": "Method",
    "detail": "Function (FEnumerateStreamsCallback)",
    "insertText": "UpgradeEnumerateStreamsDelegate(const FOnEnumerateStreamsComplete& OldDelegate)"
  },
  {
    "label": "FEnumerateStreamsCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FEnumerateStreamsCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FEnumerateEventsResult : public FStreamingResultBase { FReplayEventList ReplayEventList ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FEnumerateEventsCallback, const FEnumerateEventsResult&)"
  },
  {
    "label": "UpgradeEnumerateEventsDelegate()",
    "kind": "Method",
    "detail": "Function (FEnumerateEventsCallback)",
    "insertText": "UpgradeEnumerateEventsDelegate(const FEnumerateEventsCompleteDelegate& OldDelegate)"
  },
  {
    "label": "FEnumerateEventsCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FEnumerateEventsCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FRequestEventDataResult : public FStreamingResultBase { TArray<uint8> ReplayEventListItem ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRequestEventDataCallback, const FRequestEventDataResult&)"
  },
  {
    "label": "UpgradeRequestEventDelegate()",
    "kind": "Method",
    "detail": "Function (FRequestEventDataCallback)",
    "insertText": "UpgradeRequestEventDelegate(const FOnRequestEventDataComplete& OldDelegate)"
  },
  {
    "label": "FRequestEventDataCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FRequestEventDataCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FRequestEventGroupDataResult : public FStreamingResultBase { TArray<FReplayEventListItem> ReplayEventListItems ; TArray<FRequestEventDataResult> ReplayEventListResults ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRequestEventGroupDataCallback, const FRequestEventGroupDataResult&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (struct FDownloadHeaderResult : public FStreamingResultBase { } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FDownloadHeaderCallback, const FDownloadHeaderResult&)"
  },
  {
    "label": "UpgradeDownloadHeaderDelegate()",
    "kind": "Method",
    "detail": "Function (FDownloadHeaderCallback)",
    "insertText": "UpgradeDownloadHeaderDelegate(const FOnDownloadHeaderComplete& OldDelegate)"
  },
  {
    "label": "FDownloadHeaderCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FDownloadHeaderCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FSearchEventsResult : public FStreamingResultBase { TArray<FNetworkReplayStreamInfo> FoundStreams ; TArray<FString> CorruptedStreams ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSearchEventsCallback, const FSearchEventsResult&)"
  },
  {
    "label": "UpgradeSearchEventsDelegate()",
    "kind": "Method",
    "detail": "Function (FSearchEventsCallback)",
    "insertText": "UpgradeSearchEventsDelegate(const FOnEnumerateStreamsComplete& OldDelegate)"
  },
  {
    "label": "FSearchEventsCallback()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FSearchEventsCallback()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } struct FKeepReplayResult : public FStreamingResultBase { FString NewReplayName ; int64 RequiredSpace = 0 ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FKeepReplayCallback, const FKeepReplayResult&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (struct FRenameReplayResult : public FStreamingResultBase { } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRenameReplayCallback, const FRenameReplayResult&)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EReplayCheckpointType : uint8 { Full,Delta } ; struct FStartStreamingParameters { FString CustomName ; FString FriendlyName ; FString DemoURL ; TArray<int32> UserIndices ; FNetworkReplayVersion ReplayVersion ; bool bRecord ; } ; enum class EReplayStreamerState : uint8 { Idle,Recording,Playback,} ; FString)",
    "insertText": "LexToString(const EReplayStreamerState State)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnReplayGetAnalyticsAttributes, const class INetworkReplayStreamer* , TArray<FAnalyticsEventAttribute>&)"
  },
  {
    "label": "INetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (class INetworkReplayStreamer { public :)",
    "insertText": "INetworkReplayStreamer()"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStreaming(const FStartStreamingParameters& Params, const FStartStreamingCallback& Delegate)"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "GetHeaderArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetHeaderArchive()"
  },
  {
    "label": "GetStreamingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetStreamingArchive()"
  },
  {
    "label": "GetCheckpointArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCheckpointArchive()"
  },
  {
    "label": "FlushCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpoint(const uint32 TimeInMS)"
  },
  {
    "label": "GotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "GotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "IsCheckpointTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckpointTypeSupported(EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "UpdateTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalDemoTime(uint32 TimeInMS)"
  },
  {
    "label": "UpdatePlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackTime(uint32 TimeInMS)"
  },
  {
    "label": "GetTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTotalDemoTime()"
  },
  {
    "label": "IsDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailable()"
  },
  {
    "label": "SetHighPriorityTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriorityTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsDataAvailableForTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailableForTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsLoadingCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingCheckpoint()"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventID, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SearchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchEvents(const FString& EventGroup, const FSearchEventsCallback& Delegate)"
  },
  {
    "label": "RefreshHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshHeader()"
  },
  {
    "label": "DownloadHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DownloadHeader(const FDownloadHeaderCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "IsLive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLive()"
  },
  {
    "label": "GetReplayID()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayID()"
  },
  {
    "label": "GetReplayStreamerState()",
    "kind": "Method",
    "detail": "Function (EReplayStreamerState)",
    "insertText": "GetReplayStreamerState()"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FString& MetaString, const TArray< FString >& ExtraParms, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "EnumerateRecentStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRecentStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "HasError()"
  },
  {
    "label": "HandleLastError()",
    "kind": "Method",
    "detail": "Function (UE::Net::EHandleNetResult)",
    "insertText": "HandleLastError(UE::Net::FNetResultManager& ResultManager)"
  },
  {
    "label": "SetExtendedError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtendedError(UE::Net::FNetResult&& Result)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "SetTimeBufferHintSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeBufferHintSeconds(const float InTimeBufferHintSeconds)"
  },
  {
    "label": "GetMaxFriendlyNameSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxFriendlyNameSize()"
  },
  {
    "label": "SetDemoPath()",
    "kind": "Method",
    "detail": "Function (EStreamingOperationResult)",
    "insertText": "SetDemoPath(const FString& DemoPath)"
  },
  {
    "label": "GetDemoPath()",
    "kind": "Method",
    "detail": "Function (EStreamingOperationResult)",
    "insertText": "GetDemoPath(FString& DemoPath)"
  },
  {
    "label": "SetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsProvider(TSharedPtr<IAnalyticsProvider>& InProvider)"
  },
  {
    "label": "AppendCommonReplayAttributes()",
    "kind": "Method",
    "detail": "Function (} TArray<FAnalyticsEventAttribute>)",
    "insertText": "AppendCommonReplayAttributes(TArray<FAnalyticsEventAttribute>&& Attrs)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exec(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "CreateReplayStreamer()",
    "kind": "Method",
    "detail": "Function (} FOnReplayGetAnalyticsAttributes OnReplayGetAnalyticsAttributes ; private : TPimplPtr<UE::Net::FNetResult,EPimplPtrMode::DeepCopy> ExtendedError ; } ; class INetworkReplayStreamingFactory : public IModuleInterface { public : TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "CreateReplayStreamer()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FNetworkReplayStreaming()",
    "kind": "Method",
    "detail": "Function (} } ; class FNetworkReplayStreaming : public IModuleInterface,public FSelfRegisteringExec { public :)",
    "insertText": "FNetworkReplayStreaming()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FNetworkReplayStreaming&)",
    "insertText": "Get()"
  },
  {
    "label": "GetFactory()",
    "kind": "Method",
    "detail": "Function (INetworkReplayStreamingFactory&)",
    "insertText": "GetFactory(const TCHAR* FactoryNameOverride = nullptr)"
  },
  {
    "label": "GetAutomaticReplayPrefixExtern()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetAutomaticReplayPrefixExtern()"
  },
  {
    "label": "GetMaxNumberOfAutomaticReplaysExtern()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetMaxNumberOfAutomaticReplaysExtern()"
  },
  {
    "label": "GetMaxNumberOfAutomaticReplays()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumberOfAutomaticReplays()"
  },
  {
    "label": "GetAutomaticReplayPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAutomaticReplayPrefix()"
  },
  {
    "label": "UseDateTimeAsAutomaticReplayPostfix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseDateTimeAsAutomaticReplayPostfix()"
  },
  {
    "label": "GetReplayFileExtension()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayFileExtension()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  }
]