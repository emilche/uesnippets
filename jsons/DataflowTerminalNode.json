[
  {
    "label": "FDataflowInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowInput"
  },
  {
    "label": "FDataflowOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowOutput"
  },
  {
    "label": "FDataflowTerminalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowTerminalNode"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosLog . h \" # include \" CoreMinimal . h \" # include \" Dataflow / DataflowConnection . h \" # include \" Dataflow / DataflowNodeParameters . h \" # include \" Dataflow / DataflowNode . h \" # include \" DataflowTerminalNode . generated . h \" struct FDataflowInput ; struct FDataflowOutput ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FDataflowTerminalNode() : Super()"
  },
  {
    "label": "FDataflowTerminalNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDataflowTerminalNode(const UE::Dataflow::FNodeParameters& Param, FGuid InGuid = FGuid::NewGuid()) : Super(Param,InGuid)"
  },
  {
    "label": "FDataflowTerminalNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDataflowTerminalNode()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "StaticType()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(FName InType)"
  },
  {
    "label": "GetTerminalAsset()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UObject>)",
    "insertText": "GetTerminalAsset()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate(UE::Dataflow::FContext& Context)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Evaluate(UE::Dataflow::FContext& Context, const FDataflowOutput* Out)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(Context)"
  }
]