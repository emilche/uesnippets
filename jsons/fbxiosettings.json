[
  {
    "label": "FbxManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxManager"
  },
  {
    "label": "FbxIOSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxIOSettings"
  },
  {
    "label": "FbxIOPropInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxIOPropInfo"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EImpExp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EImpExp"
  },
  {
    "label": "ELanguage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELanguage"
  },
  {
    "label": "ELoadMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoadMode"
  },
  {
    "label": "EQuaternionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EQuaternionMode"
  },
  {
    "label": "EObjectDerivation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EObjectDerivation"
  },
  {
    "label": "ESysUnits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESysUnits"
  },
  {
    "label": "ESysFrameRate",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESysFrameRate"
  },
  {
    "label": "EEnveloppeSystem",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EEnveloppeSystem"
  },
  {
    "label": "EGeometryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGeometryType"
  },
  {
    "label": "EIKType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EIKType"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_FILEIO_IO_SETTINGS_H_ # define _FBXSDK_FILEIO_IO_SETTINGS_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / fileio / fbxiosettingspath . h> # include<fbxsdk / fbxsdk_nsbegin . h> #)",
    "insertText": "if(defined(_MSC_VER) || defined(__MINGW32__)) && defined(mkdir)"
  },
  {
    "label": "FbxIOPropInfo()",
    "kind": "Method",
    "detail": "Function (class FbxIOSettings ; # ifndef DOXYGEN_SHOULD_SKIP_THIS class FbxIOPropInfo { public :)",
    "insertText": "FbxIOPropInfo()"
  },
  {
    "label": "FbxIOInfo()",
    "kind": "Method",
    "detail": "Function (void* UIWidget ; void* cbValueChanged ; void* cbDirty ; FbxStringList labels ; } ; class FBXSDK_DLL FbxIOInfo { public : enum EImpExp { eImport,eExport } ;)",
    "insertText": "FbxIOInfo()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(EImpExp pImpExp)"
  },
  {
    "label": "SetTimeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeMode(FbxTime::EMode pTimeMode, double pCustomFrameRate = 0.0)"
  },
  {
    "label": "GetTimeMode()",
    "kind": "Method",
    "detail": "Function (FbxTime::EMode)",
    "insertText": "GetTimeMode()"
  },
  {
    "label": "SetASFScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetASFScene(FbxObject* pASFScene, bool pASFSceneOwned = false)"
  },
  {
    "label": "GetASFScene()",
    "kind": "Method",
    "detail": "Function (FbxObject*)",
    "insertText": "GetASFScene()"
  },
  {
    "label": "SetImportExportMode()",
    "kind": "Method",
    "detail": "Function (ios = pIOS ; } void)",
    "insertText": "SetImportExportMode(EImpExp pImpExp)"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (mImpExp = pImpExp ; } private : FbxTime::EMode mTimeMode ; FbxObject* mASFScene ; EImpExp mImpExp ; FbxIOSettings* ios ; } ; # endif class FBXSDK_DLL FbxIOSettings : public FbxObject {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxIOSettings, FbxObject)"
  },
  {
    "label": "AddPropertyGroup()",
    "kind": "Method",
    "detail": "Function (public : enum ELanguage { eENU,eDEU,eFRA,eJPN,eKOR,eCHS,ePTB,eLanguageCount } ; FbxProperty)",
    "insertText": "AddPropertyGroup(const char* pName, const FbxDataType& pDataType=FbxDataType(), const char* pLabel=\"\")"
  },
  {
    "label": "AddPropertyGroup()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "AddPropertyGroup(const FbxProperty& pParentProperty, const char* pName, const FbxDataType& pDataType = FbxDataType(), const char* pLabel = \"\", bool pVisible = true, bool pSavable = true, bool pEnabled = true)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "AddProperty(const FbxProperty& pParentProperty, const char* pName, const FbxDataType& pDataType = FbxDataType(), const char* pLabel = \"\", const void* pValue = NULL, bool pVisible = true, bool pSavable = true, bool pEnabled = true)"
  },
  {
    "label": "AddPropertyMinMax()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "AddPropertyMinMax(const FbxProperty& pParentProperty, const char* pName, const FbxDataType& pDataType = FbxDataType(), const char* pLabel = \"\", const void* pValue = NULL, const double* pMinValue = NULL, const double* pMaxValue = NULL, bool pVisible = true, bool pSavable = true, bool pEnabled = true)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "GetProperty(const char* pName)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "GetProperty(const FbxProperty& pParentProperty, const char* pName)"
  },
  {
    "label": "GetBoolProp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoolProp(const char* pName, bool pDefValue)"
  },
  {
    "label": "SetBoolProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolProp(const char* pName, bool pValue)"
  },
  {
    "label": "SetDoubleProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoubleProp(const char* pName, double pValue)"
  },
  {
    "label": "GetIntProp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIntProp(const char* pName, int pDefValue)"
  },
  {
    "label": "SetIntProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntProp(const char* pName, int pValue)"
  },
  {
    "label": "GetTimeProp()",
    "kind": "Method",
    "detail": "Function (FbxTime)",
    "insertText": "GetTimeProp(const char* pName, FbxTime pDefValue)"
  },
  {
    "label": "SetTimeProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeProp(const char* pName, FbxTime pValue)"
  },
  {
    "label": "GetEnumProp()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "GetEnumProp(const char* pName, FbxString pDefValue)"
  },
  {
    "label": "GetEnumProp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEnumProp(const char* pName, int pDefValue)"
  },
  {
    "label": "GetEnumIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEnumIndex(const char* pName, FbxString pValue)"
  },
  {
    "label": "SetEnumProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnumProp(const char* pName, FbxString pValue)"
  },
  {
    "label": "SetEnumProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnumProp(const char* pName, int pValue)"
  },
  {
    "label": "RemoveEnumPropValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnumPropValue(const char* pName, FbxString pValue)"
  },
  {
    "label": "EmptyEnumProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyEnumProp(const char* pName)"
  },
  {
    "label": "IsEnumExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnumExist(FbxProperty& pProp, const FbxString& enumString)"
  },
  {
    "label": "GetEnumIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEnumIndex(FbxProperty& pProp, const FbxString& enumString, bool pNoCase = false)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFlag(const char* pName, FbxPropertyFlags::EFlags propFlag, bool pValue)"
  },
  {
    "label": "GetStringProp()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "GetStringProp(const char* pName, FbxString pDefValue)"
  },
  {
    "label": "SetStringProp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringProp(const char* pName, FbxString pValue)"
  },
  {
    "label": "ReadXMLFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadXMLFile(const FbxString& path)"
  },
  {
    "label": "WriteXMLFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteXMLFile(const FbxString& path)"
  },
  {
    "label": "WriteXmlPropToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteXmlPropToFile(const FbxString& pFullPath, const FbxString& propPath)"
  },
  {
    "label": "GetPropInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxIOPropInfo*)",
    "insertText": "GetPropInfo(FbxProperty &pProp)"
  },
  {
    "label": "GetLanguageLabel()",
    "kind": "Method",
    "detail": "Function (ELanguage UILanguage ; FbxString)",
    "insertText": "GetLanguageLabel(FbxProperty& pProp)"
  },
  {
    "label": "SetLanguageLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLanguageLabel(FbxProperty& pProp, FbxString& pLabel)"
  },
  {
    "label": "GetUserMyDocumentDir()",
    "kind": "Method",
    "detail": "Function (FbxIOInfo impInfo ; FbxIOInfo expInfo ; FbxString)",
    "insertText": "GetUserMyDocumentDir()"
  },
  {
    "label": "SetPropVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropVisible(FbxProperty& pProp, bool pWithChildren, bool pVisible)"
  },
  {
    "label": "ReadXmlPropFromMyDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadXmlPropFromMyDocument(const FbxString& subDir, const FbxString& filename)"
  },
  {
    "label": "WriteXmlPropToMyDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteXmlPropToMyDocument(const FbxString& subDir, const FbxString& filename, const FbxString& propPath)"
  },
  {
    "label": "GetFileMergeDescription()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFileMergeDescription(int pIndex)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (enum ELoadMode { eCreate,eMerge,eExclusiveMerge } ; enum EQuaternionMode { eAsQuaternion,eAsEuler,eResample } ; enum EObjectDerivation { eByLayer,eByEntity,eByBlock } ; enum ESysUnits { eUnitsUser,eUnitsInches,eUnitsFeet,eUnitYards,eUnitsMiles,eUnitsMillimeters,eUnitsCentimeters,eUnitsMeters,eUnitsKilometers } ; enum ESysFrameRate { eFrameRateUser,eFrameRateHours,eFrameRateMinutes,eFrameRateSeconds,eFrameRateMilliseconds,eFrameRateGames15,eFrameRateFilm24,eFrameRatePAL25,eFrameRateNTSC30,eFrameRateShowScan48,eFrameRatePALField50,eFrameRateNTSCField60 } ; enum EEnveloppeSystem { eSkinModifier,ePhysic,eBonePro,eEnveloppeSystemCount } ; enum EGeometryType { eTriangle,eSimplifiedPoly,ePolygon,eNurbs,ePatch,eGeometryTypeCount } ; enum EIKType { eNone,eFBIK,eHumanIK } ; protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "AddNewPropInfo()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddNewPropInfo(FbxProperty& pProp)"
  },
  {
    "label": "DeletePropInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePropInfo(FbxProperty& pProp)"
  },
  {
    "label": "DeleteAllPropInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllPropInfo(FbxProperty& pProp)"
  }
]