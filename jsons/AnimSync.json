[
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "FAnimSyncParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSyncParams"
  },
  {
    "label": "FAnimSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSync"
  },
  {
    "label": "FAnimSyncParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimNodeMessages . h \" # include \" Animation / AnimationAsset . h \" struct FAnimationBaseContext ; struct FAnimInstanceProxy ; class UAnimInstance ; class UMirrorDataTable ; namespace UE { namespace Anim { struct FAnimSyncParams {)",
    "insertText": "FAnimSyncParams(FName InGroupName = NAME_None, EAnimGroupRole::Type InRole = EAnimGroupRole::CanBeLeader, EAnimSyncMethod InMethod = EAnimSyncMethod::DoNotSync, bool InOverridePositionWhenJoiningSyncGroupAsLeader = false) : GroupName(InGroupName) , Role(InRole) , Method(InMethod) , bOverridePositionWhenJoiningSyncGroupAsLeader(InOverridePositionWhenJoiningSyncGroupAsLeader)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FName GroupName = NAME_None ; EAnimGroupRole::Type Role = EAnimGroupRole::CanBeLeader ; EAnimSyncMethod Method = EAnimSyncMethod::DoNotSync ; bool bOverridePositionWhenJoiningSyncGroupAsLeader = false ; } ; struct FAnimSync { const FName Attribute ; using FSyncGroupMap = TMap<FName,FAnimGroupInstance> ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAll()"
  },
  {
    "label": "AddTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTickRecord(const FAnimTickRecord& InTickRecord, const FAnimSyncParams& InSyncParams = FAnimSyncParams())"
  },
  {
    "label": "SetMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMirror(const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "TickAssetPlayerInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetPlayerInstances(FAnimInstanceProxy& InProxy, float InDeltaSeconds)"
  },
  {
    "label": "GetTimeToClosestMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime)"
  },
  {
    "label": "HasMarkerBeenHitThisFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName)"
  },
  {
    "label": "IsSyncGroupBetweenMarkers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder = true)"
  },
  {
    "label": "GetSyncGroupPosition()",
    "kind": "Method",
    "detail": "Function (FMarkerSyncAnimPosition)",
    "insertText": "GetSyncGroupPosition(FName InSyncGroupName)"
  },
  {
    "label": "IsSyncGroupValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyncGroupValid(FName InSyncGroupName)"
  },
  {
    "label": "TickSyncGroupWriteIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickSyncGroupWriteIndex()"
  },
  {
    "label": "GetSyncGroupReadIndex()",
    "kind": "Method",
    "detail": "Function (SyncGroupWriteIndex =)",
    "insertText": "GetSyncGroupReadIndex()"
  },
  {
    "label": "GetUngroupedActivePlayersRead()",
    "kind": "Method",
    "detail": "Function (} const TArray<FAnimTickRecord>&)",
    "insertText": "GetUngroupedActivePlayersRead()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UAnimInstance* InAnimInstance, FReferenceCollector& Collector)"
  }
]