[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "TUniqueFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFunction"
  },
  {
    "label": "FBuildOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildOutput"
  },
  {
    "label": "FBuildCompleteParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildCompleteParams"
  },
  {
    "label": "FCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheKey"
  },
  {
    "label": "IBuildPolicyShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildPolicyShared"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBuildValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildValuePolicy"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FBuildPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPolicy"
  },
  {
    "label": "FBuildPolicyBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPolicyBuilder"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" DerivedDataRequestTypes . h \" # include \" DerivedDataValueId . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / RefCounting . h \" # define template<FuncType> class TFunctionRef ; template<FuncType> class TUniqueFunction ; namespace UE::DerivedData { class FBuildOutput ; } namespace UE::DerivedData { struct FBuildCompleteParams ; } namespace UE::DerivedData { struct FCacheKey ; } namespace UE::DerivedData::Private { class IBuildPolicyShared ; } namespace UE::DerivedData { using FOnBuildComplete = TUniqueFunction<)",
    "insertText": "void(FBuildCompleteParams&& Params)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EBuildPolicy : uint32 { None = 0,BuildLocal = 1<<0,BuildRemote = 1<<1,Build = BuildLocal | BuildRemote,CacheQuery = 1<<2,CacheStoreOnQuery = 1<<3,CacheStoreOnBuild = 1<<4,CacheStore = CacheStoreOnQuery | CacheStoreOnBuild,Cache = CacheQuery | CacheStore,CacheKeepAlive = 1<<5,SkipData = 1<<6,Default = Build | Cache,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EBuildPolicy)"
  },
  {
    "label": "IBuildPolicyShared()",
    "kind": "Method",
    "detail": "Function (struct FBuildValuePolicy { FValueId Id ; EBuildPolicy Policy = EBuildPolicy::Default ; } ; class Private::IBuildPolicyShared { public : ~)",
    "insertText": "IBuildPolicyShared()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "GetValuePolicies()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FBuildValuePolicy>)",
    "insertText": "GetValuePolicies()"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy(const FBuildValuePolicy& Policy)"
  },
  {
    "label": "FBuildPolicy()",
    "kind": "Method",
    "detail": "Function (} ; class FBuildPolicy { public :)",
    "insertText": "FBuildPolicy()"
  },
  {
    "label": "FBuildPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBuildPolicy(EBuildPolicy Policy) : CombinedPolicy(Policy) , DefaultPolicy(Policy)"
  },
  {
    "label": "IsUniform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUniform()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} FBuildPolicy)",
    "insertText": "Transform(TFunctionRef<EBuildPolicy (EBuildPolicy)> Op)"
  },
  {
    "label": "FBuildPolicyBuilder()",
    "kind": "Method",
    "detail": "Function (private : class FBuildPolicyBuilder ; EBuildPolicy CombinedPolicy = EBuildPolicy::Default ; EBuildPolicy DefaultPolicy = EBuildPolicy::Default ; TRefCountPtr<const Private::IBuildPolicyShared> Shared ; } ; class FBuildPolicyBuilder { public :)",
    "insertText": "FBuildPolicyBuilder()"
  },
  {
    "label": "FBuildPolicyBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBuildPolicyBuilder(EBuildPolicy Policy) : BasePolicy(Policy)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddValuePolicy(const FBuildValuePolicy& Value)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy(const FValueId& Id, EBuildPolicy Policy)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy({Id, Policy})"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} FBuildPolicy)",
    "insertText": "Build()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : EBuildPolicy BasePolicy = EBuildPolicy::Default ; TRefCountPtr<Private::IBuildPolicyShared> Shared ; } ; enum class EBuildStatus : uint32 { None = 0,BuildLocal = 1<<0,BuildRemote = 1<<1,BuildExport = 1<<2,BuildTryRemote = 1<<3,BuildTryExport = 1<<4,CacheQuery = 1<<5,CacheQueryHit = 1<<6,CacheStore = 1<<7,CacheStoreHit = 1<<8,CacheKey = 1<<9,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EBuildStatus)"
  }
]