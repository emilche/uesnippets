[
  {
    "label": "TChaosProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TChaosProperty"
  },
  {
    "label": "TShapeProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShapeProperty"
  },
  {
    "label": "TChaosProperty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleDirtyFlags . h \" # include \" Framework / PhysicsProxyBase . h \" # include \" Framework / PhysicsSolverBase . h \" namespace Chaos { template<T,EChaosProperty PropName> class TChaosProperty { public :)",
    "insertText": "TChaosProperty()"
  },
  {
    "label": "TChaosProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TChaosProperty(const T& Val) : Property(Val)"
  },
  {
    "label": "TChaosProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TChaosProperty(const TChaosProperty<T,PropName>& Rhs)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty(const FDirtyChaosPropertyFlags& Flags)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "Read()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (Property = Val ;)",
    "insertText": "MarkDirty(bInvalidate, Dirty, Proxy)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "Modify(bool bInvalidate, FDirtyChaosPropertyFlags& Dirty,IPhysicsProxyBase* Proxy,const Lambda& LambdaFunc)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(Property)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(FDirtyChaosPropertyFlags& Dirty, IPhysicsProxyBase* Proxy)"
  },
  {
    "label": "MarkClean()",
    "kind": "Method",
    "detail": "Function (Dirty .)",
    "insertText": "MarkClean(PropertyFlag)"
  },
  {
    "label": "RemoveDirtyProxyIfNoShapesAreDirty()",
    "kind": "Method",
    "detail": "Function (PhysicsSolverBase ->)",
    "insertText": "RemoveDirtyProxyIfNoShapesAreDirty(Proxy)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SyncRemote(FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyChaosProperties& Remote)"
  },
  {
    "label": "PropName()",
    "kind": "Method",
    "detail": "Function (Remote . SyncRemote<T,)",
    "insertText": "PropName(Manager, DataIdx, Property)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "ChaosPropertyToFlag()",
    "kind": "Method",
    "detail": "Function (Ar<<Property ; } private : T Property ; EChaosPropertyFlags PropertyFlag =)",
    "insertText": "ChaosPropertyToFlag(PropName)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(bool bInvalidate, FDirtyChaosPropertyFlags& Dirty, IPhysicsProxyBase* Proxy)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (Dirty .)",
    "insertText": "MarkDirty(PropertyFlag)"
  },
  {
    "label": "AddDirtyProxy()",
    "kind": "Method",
    "detail": "Function (PhysicsSolverBase ->)",
    "insertText": "AddDirtyProxy(Proxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } } TChaosProperty<T,PropName>&)",
    "insertText": "operator(const TChaosProperty<T,PropName>& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<T,EChaosProperty PropName> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TChaosProperty<T, PropName>& Prop)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Prop .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "TShapeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TShapeProperty(const T& Val) : Property(Val)"
  },
  {
    "label": "TShapeProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShapeProperty(TShapeProperty<T, PropName>&& Other) : Property(MoveTemp(Other.Property))"
  },
  {
    "label": "TShapeProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShapeProperty(const TShapeProperty<T,PropName>& Rhs)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (Property = Val ;)",
    "insertText": "MarkDirty(bInvalidate,Dirty,Proxy, ShapeIdx)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "Modify(bool bInvalidate,FShapeDirtyFlags& Dirty,IPhysicsProxyBase* Proxy, int32 ShapeIdx, const Lambda& LambdaFunc)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SyncRemote(FDirtyPropertiesManager& Manager, int32 DataIdx, FShapeDirtyData& Remote)"
  },
  {
    "label": "ShapePropToFlag()",
    "kind": "Method",
    "detail": "Function (Ar<<Property ; } private : T Property ; EShapeFlags PropertyFlag =)",
    "insertText": "ShapePropToFlag(PropName)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(bool bInvalidate, FShapeDirtyFlags& Dirty,IPhysicsProxyBase* Proxy, int32 ShapeIdx)"
  },
  {
    "label": "IsClean()",
    "kind": "Method",
    "detail": "Function (const bool bFirstDirty = Dirty .)",
    "insertText": "IsClean()"
  },
  {
    "label": "AddDirtyProxyShape()",
    "kind": "Method",
    "detail": "Function (PhysicsSolverBase ->)",
    "insertText": "AddDirtyProxyShape(Proxy, ShapeIdx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } } TShapeProperty<T,PropName>&)",
    "insertText": "operator(const TShapeProperty<T, PropName>& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<T,EShapeProperty PropName> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar,TShapeProperty<T,PropName>& Prop)"
  }
]