[
  {
    "label": "FNewStatsReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNewStatsReader"
  },
  {
    "label": "FProfilerClientManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerClientManager"
  },
  {
    "label": "FProfilerServiceAuthorize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerServiceAuthorize"
  },
  {
    "label": "FProfilerServiceData2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerServiceData2"
  },
  {
    "label": "FProfilerServiceFileChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerServiceFileChunk"
  },
  {
    "label": "FProfilerServicePing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerServicePing"
  },
  {
    "label": "FProfilerServicePreviewAck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerServicePreviewAck"
  },
  {
    "label": "FServiceConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FServiceConnection"
  },
  {
    "label": "FReceivedFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReceivedFileInfo"
  },
  {
    "label": "FServiceConnection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Misc / Guid . h \" # include \" IProfilerClient . h \" # include \" IMessageContext . h \" # include \" Containers / Ticker . h \" # include \" IProfilerServiceManager . h \" # include \" IMessageBus . h \" # include \" MessageEndpoint . h \" # include \" Stats / StatsFile . h \" # include \" Tasks / Pipe . h \" class FNewStatsReader ; class FProfilerClientManager ; struct FProfilerServiceAuthorize ; struct FProfilerServiceData2 ; struct FProfilerServiceFileChunk ; struct FProfilerServicePing ; struct FProfilerServicePreviewAck ; struct FServiceConnection {)",
    "insertText": "FServiceConnection()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FGuid InstanceId ; FMessageAddress ProfilerServiceAddress ; FStatMetaData StatMetaData ; FProfilerDataFrame CurrentData ; void)",
    "insertText": "Initialize(const FProfilerServiceAuthorize& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "GenerateCycleGraphs()",
    "kind": "Method",
    "detail": "Function (# if STATS FStatsLoadedState CurrentThreadState ; # endif TMap<FName,int32> GroupNameArray ; TMap<FName,int32> LongNameToStatID ; # if STATS FStatsReadStream Stream ; TArray<FStatMessage> PendingStatMessagesMessages ; # endif TArray<FProfilerDataFrame> DataFrames ; TMap<int64,TArray<uint8>*> ReceivedData ; # if STATS void)",
    "insertText": "GenerateCycleGraphs(const FRawStatStackNode& Root, TMap<uint32, FProfilerCycleGraph>& Graphs)"
  },
  {
    "label": "CreateGraphRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGraphRecursively(const FRawStatStackNode* Root, FProfilerCycleGraph& Graph, uint32 InStartCycles)"
  },
  {
    "label": "GenerateAccumulators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAccumulators(TArray<FStatMessage>& Stats, TArray<FProfilerCountAccumulator>& CountAccumulators, TArray<FProfilerFloatAccumulator>& FloatAccumulators)"
  },
  {
    "label": "FindOrAddStat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddStat(const FStatNameAndInfo& StatNameAndInfo, uint32 StatType)"
  },
  {
    "label": "FindOrAddThread()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddThread(const FStatNameAndInfo& Thread)"
  },
  {
    "label": "GenerateProfilerDataFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateProfilerDataFrame()"
  },
  {
    "label": "LoadCapture()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LoadCapture(const FString& DataFilepath, FProfilerClientManager* ProfilerClientManager)"
  },
  {
    "label": "FProfilerClientManager()",
    "kind": "Method",
    "detail": "Function (FNewStatsReader* StatsReader ; } ; class FProfilerClientManager : public IProfilerClient { class FNewStatsReader ; public :)",
    "insertText": "FProfilerClientManager(const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InMessageBus)"
  },
  {
    "label": "FProfilerClientManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FProfilerClientManager()"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Subscribe(const FGuid& Session)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Track(const FGuid& Instance)"
  },
  {
    "label": "Untrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Untrack(const FGuid& Instance)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unsubscribe()"
  },
  {
    "label": "SetCaptureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaptureState(const bool bRequestedCaptureState, const FGuid& InstanceId = FGuid())"
  },
  {
    "label": "SetPreviewState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewState(const bool bRequestedPreviewState, const FGuid& InstanceId = FGuid())"
  },
  {
    "label": "LoadCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCapture(const FString& DataFilepath, const FGuid& ProfileId)"
  },
  {
    "label": "RequestLastCapturedFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLastCapturedFile(const FGuid& InstanceId = FGuid())"
  },
  {
    "label": "GetStatMetaData()",
    "kind": "Method",
    "detail": "Function (const FStatMetaData&)",
    "insertText": "GetStatMetaData(const FGuid& InstanceId)"
  },
  {
    "label": "OnProfilerData()",
    "kind": "Method",
    "detail": "Function (FProfilerClientDataDelegate&)",
    "insertText": "OnProfilerData()"
  },
  {
    "label": "OnProfilerFileTransfer()",
    "kind": "Method",
    "detail": "Function (FProfilerFileTransferDelegate&)",
    "insertText": "OnProfilerFileTransfer()"
  },
  {
    "label": "OnProfilerClientConnected()",
    "kind": "Method",
    "detail": "Function (FProfilerClientConnectedDelegate&)",
    "insertText": "OnProfilerClientConnected()"
  },
  {
    "label": "OnProfilerClientDisconnected()",
    "kind": "Method",
    "detail": "Function (FProfilerClientDisconnectedDelegate&)",
    "insertText": "OnProfilerClientDisconnected()"
  },
  {
    "label": "OnMetaDataUpdated()",
    "kind": "Method",
    "detail": "Function (FProfilerMetaDataUpdateDelegate&)",
    "insertText": "OnMetaDataUpdated()"
  },
  {
    "label": "OnLoadStarted()",
    "kind": "Method",
    "detail": "Function (FProfilerLoadStartedDelegate&)",
    "insertText": "OnLoadStarted()"
  },
  {
    "label": "OnLoadCompleted()",
    "kind": "Method",
    "detail": "Function (FProfilerLoadCompletedDelegate&)",
    "insertText": "OnLoadCompleted()"
  },
  {
    "label": "OnLoadCancelled()",
    "kind": "Method",
    "detail": "Function (FProfilerLoadCancelledDelegate&)",
    "insertText": "OnLoadCancelled()"
  },
  {
    "label": "HandleMessageBusShutdown()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleMessageBusShutdown()"
  },
  {
    "label": "HandleServiceAuthorizeMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleServiceAuthorizeMessage(const FProfilerServiceAuthorize& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleServiceFileChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleServiceFileChunk(const FProfilerServiceFileChunk& FileChunk, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleServicePingMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleServicePingMessage(const FProfilerServicePing& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTicker(float DeltaTime)"
  },
  {
    "label": "HandleProfilerServiceData2Message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProfilerServiceData2Message(const FProfilerServiceData2& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleServicePreviewAckMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleServicePreviewAckMessage(const FProfilerServicePreviewAck& Messsage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleMessagesTicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMessagesTicker(float DeltaTime)"
  },
  {
    "label": "CheckHashAndWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckHashAndWrite(const FProfilerServiceFileChunk& FileChunk, const FProfilerFileChunkHeader& FileChunkHeader, FArchive* Writer)"
  },
  {
    "label": "FinalizeLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeLoading(const FGuid InstanceId)"
  },
  {
    "label": "CancelLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelLoading(const FGuid InstanceId)"
  },
  {
    "label": "DecompressDataAndSendToGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressDataAndSendToGame(FProfilerServiceData2* ToProcess)"
  },
  {
    "label": "SendDataToGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDataToGame(TArray<uint8>* DataToGame, int64 Frame, const FGuid InstanceId)"
  },
  {
    "label": "SendProfilerDataFrameToGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendProfilerDataFrameToGame(FProfilerDataFrame* NewData, FStatMetaData* MetaDataPtr, const FGuid InstanceId)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FReceivedFileInfo()",
    "kind": "Method",
    "detail": "Function (private : FGuid ActiveSessionId ; FGuid PendingSessionId ; TArray<FGuid> PendingInstances ; TMap<FGuid,FServiceConnection> Connections ; struct FReceivedFileInfo {)",
    "insertText": "FReceivedFileInfo(FArchive* InFileWriter, const int64 InProgress, const FString& InDestFilepath) : FileWriter(InFileWriter) , Progress(InProgress) , DestFilepath(InDestFilepath) , LastReceivedChunkTime(FPlatformTime::Seconds())"
  },
  {
    "label": "IsTimedOut()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimedOut()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (const double TimeOut = 1 5 . 0 f ; return LastReceivedChunkTime + TimeOut<)",
    "insertText": "Seconds()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update()"
  }
]