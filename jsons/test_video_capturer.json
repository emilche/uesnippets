[
  {
    "label": "TestVideoCapturer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestVideoCapturer"
  },
  {
    "label": "FramePreprocessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FramePreprocessor"
  },
  {
    "label": "FramePreprocessor()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TEST_VIDEO_CAPTURER_H_ # define TEST_TEST_VIDEO_CAPTURER_H_ # include<stddef . h> # include<memory> # include \" api / video / video_frame . h \" # include \" api / video / video_source_interface . h \" # include \" media / base / video_adapter . h \" # include \" media / base / video_broadcaster . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace test { class TestVideoCapturer : public rtc::VideoSourceInterface<VideoFrame> { public : class FramePreprocessor { public : ~)",
    "insertText": "FramePreprocessor()"
  },
  {
    "label": "Preprocess()",
    "kind": "Method",
    "detail": "Function (VideoFrame)",
    "insertText": "Preprocess(const VideoFrame& frame)"
  },
  {
    "label": "TestVideoCapturer()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "TestVideoCapturer()"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<VideoFrame>* sink)"
  },
  {
    "label": "SetFramePreprocessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFramePreprocessor(std::unique_ptr<FramePreprocessor> preprocessor)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (preprocessor_ =)",
    "insertText": "move(preprocessor)"
  },
  {
    "label": "OnOutputFormatRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnOutputFormatRequest(int width, int height, const absl::optional<int>& max_fps)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnFrame(const VideoFrame& frame)"
  },
  {
    "label": "GetSinkWants()",
    "kind": "Method",
    "detail": "Function (rtc::VideoSinkWants)",
    "insertText": "GetSinkWants()"
  },
  {
    "label": "UpdateVideoAdapter()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateVideoAdapter()"
  },
  {
    "label": "MaybePreprocess()",
    "kind": "Method",
    "detail": "Function (VideoFrame)",
    "insertText": "MaybePreprocess(const VideoFrame& frame)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex lock_ ; std::unique_ptr<FramePreprocessor> preprocessor_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]