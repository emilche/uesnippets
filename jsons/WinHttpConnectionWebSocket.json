[
  {
    "label": "FWinHttpConnectionWebSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWinHttpConnectionWebSocket"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_WEBSOCKETS&& WITH_WINHTTPWEBSOCKETS # include \" CoreMinimal . h \" # include \" WinHttp / Support / WinHttpConnectionHttp . h \" # include \" WinHttp / Support / WinHttpWebSocketTypes . h \" # include \" Containers / Queue . h \")",
    "insertText": "DECLARE_DELEGATE(FWinHttpConnectionWebSocketOnConnected)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FWinHttpConnectionWebSocketOnMessage, EWebSocketMessageType , TArray<uint8>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FWinHttpConnectionWebSocketOnClosed, uint16 , const FString& , bool)"
  },
  {
    "label": "CreateWebSocketConnection()",
    "kind": "Method",
    "detail": "Function (class FWinHttpConnectionWebSocket : public FWinHttpConnectionHttp { public : TSharedPtr<FWinHttpConnectionWebSocket,ESPMode::ThreadSafe>)",
    "insertText": "CreateWebSocketConnection(FWinHttpSession& Session, const FString& RequestUrl, const TArray<FString>& Protocols, const TMap<FString, FString>& UpgradeHeaders)"
  },
  {
    "label": "FWinHttpConnectionWebSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWinHttpConnectionWebSocket()"
  },
  {
    "label": "FWinHttpConnectionWebSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWinHttpConnectionWebSocket(const FWinHttpConnectionWebSocket& Other)"
  },
  {
    "label": "FWinHttpConnectionWebSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWinHttpConnectionWebSocket(FWinHttpConnectionWebSocket&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWinHttpConnectionWebSocket&)",
    "insertText": "operator(const FWinHttpConnectionWebSocket& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWinHttpConnectionWebSocket&)",
    "insertText": "operator(FWinHttpConnectionWebSocket&& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages()"
  },
  {
    "label": "PumpStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpStates()"
  },
  {
    "label": "SetWebSocketConnectedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWebSocketConnectedHandler(FWinHttpConnectionWebSocketOnConnected&& Handler)"
  },
  {
    "label": "SetWebSocketMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWebSocketMessageHandler(FWinHttpConnectionWebSocketOnMessage&& Handler)"
  },
  {
    "label": "SetWebSocketClosedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWebSocketClosedHandler(FWinHttpConnectionWebSocketOnClosed&& Handler)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessage(EWebSocketMessageType MessageType, TArray<uint8>&& Message)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseConnection(const uint16 Code, const FString& Reason)"
  },
  {
    "label": "FWinHttpConnectionWebSocket()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FWinHttpConnectionWebSocket(FWinHttpSession& Session, const FString& RequestUrl, const bool bIsSecure, const FString& Domain, const TOptional<uint16> Port, const FString& PathAndQuery, const TArray<FString>& Protocols, const TMap<FString, FString>& UpgradeHeaders)"
  },
  {
    "label": "IsReadInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadInProgress()"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadData(const int32 MaxMessagesToRead)"
  },
  {
    "label": "IsWriteInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWriteInProgress()"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteData(const int32 MaxMessagesToWrite)"
  },
  {
    "label": "FinishRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishRequest(const EHttpRequestStatus::Type FinalState)"
  },
  {
    "label": "HandleHeadersAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeadersAvailable()"
  },
  {
    "label": "HandleHandleClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHandleClosing()"
  },
  {
    "label": "HandleWebSocketReadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketReadComplete(const uint32 BytesRead, const EWebSocketMessageType MessageType, const bool bIsFragment)"
  },
  {
    "label": "HandleWebSocketWriteComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketWriteComplete(const uint32 BytesWritten, const EWebSocketMessageType MessageType)"
  },
  {
    "label": "HandleWebSocketCloseComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketCloseComplete()"
  },
  {
    "label": "HandleWebSocketRequestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWebSocketRequestError(const int32 WebSocketOperationId, const uint32 ErrorCode)"
  },
  {
    "label": "HandleWebSocketStatusCallback()",
    "kind": "Method",
    "detail": "Function (private : using FWinHttpConnectionHttp::CreateHttpConnection ; using FWinHttpConnectionHttp::SetDataTransferredHandler ; using FWinHttpConnectionHttp::SetHeaderReceivedHandler ; using FWinHttpConnectionHttp::SetRequestCompletedHandler ; void)",
    "insertText": "HandleWebSocketStatusCallback(HINTERNET ResourceHandle, EWinHttpCallbackStatus Status, void* StatusInformation, uint32 StatusInformationLength)"
  },
  {
    "label": "UE_WinHttpWebSocketStatusCallback()",
    "kind": "Method",
    "detail": "Function (void CALLBACK)",
    "insertText": "UE_WinHttpWebSocketStatusCallback(HINTERNET, DWORD_PTR, DWORD, LPVOID, DWORD)"
  }
]