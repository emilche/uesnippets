[
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "FSkeletonTreeBuilderArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonTreeBuilderArgs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SKELETONEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKELETONEDITOR_API"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "FSkeletonTreeBuilderArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISkeletonTreeBuilder . h \" # include \" IEditableSkeleton . h \" # include \" ISkeletonTreeItem . h \" class IPersonaPreviewScene ; class ISkeletonTree ; class USkeletalMeshSocket ; struct FSkeletonTreeBuilderArgs {)",
    "insertText": "FSkeletonTreeBuilderArgs(bool bInShowBones = true, bool bInShowSockets = true, bool bInShowAttachedAssets = true, bool bInShowVirtualBones = true) : bShowBones(bInShowBones) , bShowSockets(bInShowSockets) , bShowAttachedAssets(bInShowAttachedAssets) , bShowVirtualBones(bInShowVirtualBones)"
  },
  {
    "label": "FSkeletonTreeBuilder()",
    "kind": "Method",
    "detail": "Function (} bool bShowBones ; bool bShowSockets ; bool bShowAttachedAssets ; bool bShowVirtualBones ; } ; enum class EBoneFilter : int32 { All,Mesh,LOD,Weighted,None,Count } ; enum class ESocketFilter : int32 { Active,Mesh,Skeleton,All,None,Count } ; class FSkeletonTreeBuilder : public ISkeletonTreeBuilder { public :)",
    "insertText": "FSkeletonTreeBuilder(const FSkeletonTreeBuilderArgs& InBuilderArgs)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TSharedRef<class ISkeletonTree>& InSkeletonTree, const TSharedPtr<class IPersonaPreviewScene>& InPreviewScene, FOnFilterSkeletonTreeItem InOnFilterSkeletonTreeItem)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Filter(const FSkeletonTreeFilterArgs& InArgs, const TArray<TSharedPtr<class ISkeletonTreeItem>>& InItems, TArray<TSharedPtr<class ISkeletonTreeItem>>& OutFilteredItems)"
  },
  {
    "label": "FilterItem()",
    "kind": "Method",
    "detail": "Function (ESkeletonTreeFilterResult)",
    "insertText": "FilterItem(const FSkeletonTreeFilterArgs& InArgs, const TSharedPtr<class ISkeletonTreeItem>& InItem)"
  },
  {
    "label": "IsShowingBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingBones()"
  },
  {
    "label": "IsShowingSockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingSockets()"
  },
  {
    "label": "IsShowingAttachedAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingAttachedAssets()"
  },
  {
    "label": "AddBones()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddBones(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "AddSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSockets(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "AddAttachedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttachedAssets(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "AddSocketsFromData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSocketsFromData(const TArray< USkeletalMeshSocket* >& SocketArray, ESocketParentType ParentType, FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "AddAttachedAssetContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttachedAssetContainer(const FPreviewAssetAttachContainer& AttachedObjects, FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "AddVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVirtualBones(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "CreateBoneTreeItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTreeItem>)",
    "insertText": "CreateBoneTreeItem(const FName& InBoneName)"
  },
  {
    "label": "CreateSocketTreeItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTreeItem>)",
    "insertText": "CreateSocketTreeItem(USkeletalMeshSocket* InSocket, ESocketParentType ParentType, bool bIsCustomized)"
  },
  {
    "label": "CreateAttachedAssetTreeItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTreeItem>)",
    "insertText": "CreateAttachedAssetTreeItem(UObject* InAsset, const FName& InAttachedTo)"
  },
  {
    "label": "CreateVirtualBoneTreeItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTreeItem>)",
    "insertText": "CreateVirtualBoneTreeItem(const FName& InBoneName)"
  },
  {
    "label": "FilterRecursive()",
    "kind": "Method",
    "detail": "Function (ESkeletonTreeFilterResult)",
    "insertText": "FilterRecursive(const FSkeletonTreeFilterArgs& InArgs, const TSharedPtr<ISkeletonTreeItem>& InItem, TArray<TSharedPtr<ISkeletonTreeItem>>& OutFilteredItems)"
  }
]