[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ICultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICultureImplementation"
  },
  {
    "label": "ICultureImplementation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" struct FDecimalNumberFormattingRules ; enum class ETextPluralForm : uint8 ; enum class ETextPluralType : uint8 ; class ICultureImplementation { public : ~)",
    "insertText": "ICultureImplementation()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetEnglishName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEnglishName()"
  },
  {
    "label": "GetKeyboardLayoutId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKeyboardLayoutId()"
  },
  {
    "label": "GetLCID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLCID()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetUnrealLegacyThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUnrealLegacyThreeLetterISOLanguageName()"
  },
  {
    "label": "GetThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetThreeLetterISOLanguageName()"
  },
  {
    "label": "GetTwoLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTwoLetterISOLanguageName()"
  },
  {
    "label": "GetNativeLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeLanguage()"
  },
  {
    "label": "GetNativeRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeRegion()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetScript()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScript()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVariant()"
  },
  {
    "label": "IsRightToLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightToLeft()"
  },
  {
    "label": "GetDecimalNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetDecimalNumberFormattingRules()"
  },
  {
    "label": "GetPercentFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetPercentFormattingRules()"
  },
  {
    "label": "GetCurrencyFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetCurrencyFormattingRules(const FString& InCurrencyCode)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int32 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(double Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetValidPluralForms()",
    "kind": "Method",
    "detail": "Function (const TArray<ETextPluralForm>&)",
    "insertText": "GetValidPluralForms(const ETextPluralType PluralType)"
  }
]