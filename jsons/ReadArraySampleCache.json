[
  {
    "label": "ReadArraySampleID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReadArraySampleID"
  },
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ReadArraySampleID()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_ReadArraySampleCache_h # define Alembic_AbcCoreAbstract_ReadArraySampleCache_h # include<Alembic / Util / Export . h> # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / ArraySample . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { class ReadArraySampleID { public : typedef ReadArraySampleID this_type ;)",
    "insertText": "ReadArraySampleID()"
  },
  {
    "label": "ReadArraySampleID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReadArraySampleID(const ArraySample::Key &iSampleKey, ArraySamplePtr iSample ) : m_sampleKey( iSampleKey ), m_sample( iSample)"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (} const ArraySample::Key&)",
    "insertText": "getKey()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "ReadArraySampleCache()",
    "kind": "Method",
    "detail": "Function (private : ArraySample::Key m_sampleKey ; ArraySamplePtr m_sample ; } ; class ALEMBIC_EXPORT ReadArraySampleCache : private Alembic::Util::noncopyable,public Alembic::Util::enable_shared_from_this<ReadArraySampleCache> { public : ~)",
    "insertText": "ReadArraySampleCache()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (ReadArraySampleID)",
    "insertText": "find(const ArraySample::Key &iKey)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (ReadArraySampleID)",
    "insertText": "store(const ArraySample::Key &iKey, ArraySamplePtr iSamp)"
  }
]