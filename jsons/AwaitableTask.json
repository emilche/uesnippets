[
  {
    "label": "TAwaitableTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAwaitableTask"
  },
  {
    "label": "FPromiseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPromiseBase"
  },
  {
    "label": "TPromiseVTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromiseVTableBase"
  },
  {
    "label": "TPromiseVTableDummy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromiseVTableDummy"
  },
  {
    "label": "TPromiseVTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromiseVTable"
  },
  {
    "label": "TPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPromise"
  },
  {
    "label": "MakeDummyValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Fundamental / Task . h \" # include \" Async / Fundamental / Scheduler . h \" # include \" Async / ManualResetEvent . h \" # include \" Misc / Launder . h \" template<> class TAwaitableTask ; namespace AwaitableTask_Detail { template<ReturnType> ReturnType)",
    "insertText": "MakeDummyValue()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<> void MakeDummyValue<)",
    "insertText": "void()"
  },
  {
    "label": "TPromiseVTableBase()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TPromiseVTableBase()"
  },
  {
    "label": "TryLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLaunch()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "GetResult()"
  },
  {
    "label": "IsLaunched()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLaunched()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TPromiseVTableBase&)",
    "insertText": "operator(const TPromiseVTableBase& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPromiseVTableBase&)",
    "insertText": "operator(TPromiseVTableBase&& Other)"
  },
  {
    "label": "TPromiseVTableDummy()",
    "kind": "Method",
    "detail": "Function (} ; template<ReturnType> class TPromiseVTableDummy final : public TPromiseVTableBase<ReturnType> { public :)",
    "insertText": "TPromiseVTableDummy() : TPromiseVTableBase<ReturnType>(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<ReturnType> TPromiseVTableBase<ReturnType>& TPromiseVTableBase<ReturnType)",
    "insertText": "operator(const TPromiseVTableBase<ReturnType>& Other)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy((void*)this, (void*)&Other, sizeof(TPromiseVTableBase<ReturnType>))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Other) TPromiseVTableDummy<ReturnType>()"
  },
  {
    "label": "PromiseType()",
    "kind": "Method",
    "detail": "Function (PromiseType* LocalPromise = static_cast<)",
    "insertText": "PromiseType(this->Promise)"
  },
  {
    "label": "IncrementRefCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncrementRefCount()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finish()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) TPromiseVTableDummy<ReturnType>()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} } ; template<TReturnType,CallableType> class TPromise final : public FPromiseBase { public : using ReturnType = TReturnType ; private : using ThisType = TPromise<ReturnType,CallableType> ; private : CallableType Callable ; LowLevelTasks::FTask Task ; ReturnType ReturnValue ; std::atomic_int ReferenceCounter { 2 } ; UE::FManualResetEvent Completed ; void)",
    "insertText": "Execute()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (Completed .)",
    "insertText": "Notify()"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPromise(const TPromise&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPromise&)",
    "insertText": "operator(const TPromise& Other)"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (public : template<CallableT>)",
    "insertText": "TPromise(const TCHAR* DebugName, LowLevelTasks::ETaskPriority Priority, CallableT&& InCallable) : Callable(Forward<CallableT>(InCallable))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Task .)",
    "insertText": "Init(DebugName, Priority, [this, Deleter(LowLevelTasks::TDeleter<ThisType, &ThisType::Finish>(this))]() { Execute(); })"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (ReferenceCounter .)",
    "insertText": "fetch_add(1, std::memory_order_release)"
  },
  {
    "label": "IsCompleted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompleted()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (int LocalCounter = ReferenceCounter .)",
    "insertText": "fetch_sub(1, std::memory_order_release)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(Callable)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LocalCounter == 1)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} else { Completed .)",
    "insertText": "Wait()"
  },
  {
    "label": "TAwaitableTask()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<ReturnType> class TAwaitableTask final { template<R> using TPromiseVTableBase = AwaitableTask_Detail::TPromiseVTableBase<R> ; template<R> using TPromiseVTableDummy = AwaitableTask_Detail::TPromiseVTableDummy<R> ; template<R,C> using TPromise = AwaitableTask_Detail::TPromise<R,C> ; template<P> using TPromiseVTable = AwaitableTask_Detail::TPromiseVTable<P> ; using ThisClass = TAwaitableTask<ReturnType> ; TPromiseVTableBase<ReturnType> PromiseVTable ; public :)",
    "insertText": "TAwaitableTask()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&PromiseVTable) TPromiseVTableDummy<ReturnType>()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TAwaitableTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAwaitableTask(const ThisClass& Other)"
  },
  {
    "label": "GetVtable()",
    "kind": "Method",
    "detail": "Function (PromiseVTable = Other . PromiseVTable ;)",
    "insertText": "GetVtable()->IncrementRefCount()"
  },
  {
    "label": "TAwaitableTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAwaitableTask(ThisClass&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PromiseVTable =)",
    "insertText": "MoveTemp(Other.PromiseVTable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ThisClass&)",
    "insertText": "operator(const ThisClass& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ThisClass&)",
    "insertText": "operator(ThisClass&& Other)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} return* this ; } public : template<CallableT> void)",
    "insertText": "Init(const TCHAR* DebugName, LowLevelTasks::ETaskPriority Priority, CallableT&& Callable)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using CallableType = std::decay_t<CallableT> ;)",
    "insertText": "static_assert(TIsInvocable<CallableType>::Value, \"Callable is not invocable\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (using PromiseType = TPromise<ReturnType,CallableType> ;)",
    "insertText": "new(&PromiseVTable) TPromiseVTable<PromiseType>(new PromiseType(DebugName, Priority, Forward<CallableT>(Callable)))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<CallableT> void)",
    "insertText": "Init(const TCHAR* DebugName, CallableT&& Callable)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(DebugName, LowLevelTasks::ETaskPriority::Default, Forward<CallableT>(Callable))"
  },
  {
    "label": "InitAndLaunch()",
    "kind": "Method",
    "detail": "Function (} template<CallableT> bool)",
    "insertText": "InitAndLaunch(const TCHAR* DebugName, LowLevelTasks::ETaskPriority Priority, CallableT&& Callable)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(DebugName, Priority, Forward<CallableT>(Callable))"
  },
  {
    "label": "PromiseVTableType()",
    "kind": "Method",
    "detail": "Function (using CallableType = std::decay_t<CallableT> ; using PromiseVTableType = TPromiseVTable<TPromise<ReturnType,CallableType>> ; return GetVtable<)",
    "insertText": "PromiseVTableType()->TryLaunch()"
  },
  {
    "label": "InitAndLaunch()",
    "kind": "Method",
    "detail": "Function (} template<CallableT> bool)",
    "insertText": "InitAndLaunch(const TCHAR* DebugName, CallableT&& Callable)"
  },
  {
    "label": "GetVtable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVtable()->Finish()"
  },
  {
    "label": "Await()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "Await()"
  },
  {
    "label": "GetVtable()",
    "kind": "Method",
    "detail": "Function (} private : template<PromiseType = TPromiseVTableBase<ReturnType>> PromiseType*)",
    "insertText": "GetVtable()"
  }
]