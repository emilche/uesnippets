[
  {
    "label": "FCookOnTheFlyPackageStoreBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyPackageStoreBackend"
  },
  {
    "label": "FEntryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntryInfo"
  },
  {
    "label": "FPackageStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStats"
  },
  {
    "label": "FCookOnTheFlyPackageStoreBackend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_COTF # include \" IO / PackageStore . h \" # include \" CookOnTheFly . h \" # include \" Misc / ScopeRWLock . h \" class FCookOnTheFlyPackageStoreBackend final : public IPackageStoreBackend { public : struct FEntryInfo { EPackageStoreEntryStatus Status = EPackageStoreEntryStatus::None ; int32 EntryIndex = INDEX_NONE ; } ; struct FPackageStats { TAtomic<uint32> Cooked { 0 } ; TAtomic<uint32> Failed { 0 } ; } ;)",
    "insertText": "FCookOnTheFlyPackageStoreBackend(UE::Cook::ICookOnTheFlyServerConnection& InCookOnTheFlyServerConnection)"
  },
  {
    "label": "OnMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMounted(TSharedRef<const FPackageStoreBackendContext> InContext)"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (Context = InContext ; } void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(FPackageId PackageId)"
  },
  {
    "label": "GetPackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (EPackageStoreEntryStatus)",
    "insertText": "GetPackageStoreEntry(FPackageId PackageId, FName PackageName, FPackageStoreEntry& OutPackageStoreEntry)"
  },
  {
    "label": "GetPackageRedirectInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageRedirectInfo(FPackageId PackageId, FName& OutSourcePackageName, FPackageId& OutRedirectedToPackageId)"
  },
  {
    "label": "CreatePackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (EPackageStoreEntryStatus)",
    "insertText": "CreatePackageStoreEntry(const FEntryInfo& EntryInfo, FPackageStoreEntry& OutPackageStoreEntry)"
  },
  {
    "label": "AddPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackages(TArray<FPackageStoreEntryResource> Entries, TArray<FPackageId> FailedPackageIds, TArray<TPair<FPackageId, FName>> PackageIdsAndNames)"
  },
  {
    "label": "OnCookOnTheFlyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookOnTheFlyMessage(const UE::Cook::FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "CheckActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckActivity()"
  }
]