[
  {
    "label": "FSlateRenderBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderBatch"
  },
  {
    "label": "FSlateDrawLayerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawLayerHandle"
  },
  {
    "label": "FSlateResourceHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateResourceHandle"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDataPayload"
  },
  {
    "label": "FSlateGradientStop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateGradientStop"
  },
  {
    "label": "FSlateDrawElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawElement"
  },
  {
    "label": "ERotationSpace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERotationSpace"
  },
  {
    "label": "FSlateShaderResourceProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResourceProxy"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FSlateTintableElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateTintableElement"
  },
  {
    "label": "FSlateBoxElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBoxElement"
  },
  {
    "label": "FSlateRoundedBoxElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateRoundedBoxElement"
  },
  {
    "label": "FSlateTextElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateTextElement"
  },
  {
    "label": "FSlateShapedTextElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateShapedTextElement"
  },
  {
    "label": "FSlateGradientElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateGradientElement"
  },
  {
    "label": "FSlateSplineElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateSplineElement"
  },
  {
    "label": "FSlateLineElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateLineElement"
  },
  {
    "label": "FSlateViewportElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateViewportElement"
  },
  {
    "label": "FSlateCustomDrawerElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCustomDrawerElement"
  },
  {
    "label": "FSlateLayerElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateLayerElement"
  },
  {
    "label": "FSlateCachedBufferElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedBufferElement"
  },
  {
    "label": "FSlateRenderDataHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderDataHandle"
  },
  {
    "label": "FSlateCustomVertsElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCustomVertsElement"
  },
  {
    "label": "FSlatePostProcessElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostProcessElement"
  },
  {
    "label": "MakeDebugQuad()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DrawElementTextOverflowArgs . h \" # include \" Fonts / FontCache . h \" # include \" Fonts / ShapedTextFwd . h \" # include \" SlateRenderBatch . h \" # include \" Styling / SlateBrush . h \" # include \" Types / SlateVector2 . h \" # include \" UObject / GCObject . h \" # include \" Fonts / ShapedTextFwd . h \" # include \" Misc / MemStack . h \" # include \" Styling / WidgetStyle . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Clipping . h \" # include \" Types / PaintArgs . h \" # include \" Types / SlateVector2 . h \" # include \" Layout / Geometry . h \" # include \" Rendering / RenderingCommon . h \" # include \" Debugging / SlateDebugging . h \" # include \" Rendering / SlateRenderBatch . h \" # include \" DrawElementTextOverflowArgs . h \" # include \" ElementBatcher . h \" # include \" Widgets / WidgetPixelSnapping . h \" # include \" Types / SlateVector2 . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Fonts / FontCache . h \" # include \" Rendering / ShaderResourceManager . h \" # endif class FSlateRenderBatch ; class FSlateDrawLayerHandle ; class FSlateResourceHandle ; class FSlateWindowElementList ; class SWidget ; class SWindow ; struct FSlateBrush ; struct FSlateDataPayload ; struct FSlateGradientStop ; class FSlateDrawElement { class FSlateWindowElementList ; public : enum ERotationSpace { RelativeToElement,RelativeToWorld,} ; void)",
    "insertText": "MakeDebugQuad(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, FLinearColor Tint = FLinearColor::White)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FSlateBrush* InBrush, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White)"
  },
  {
    "label": "MakeRotatedBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRotatedBox(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FSlateBrush* InBrush, ESlateDrawEffect, float Angle, UE::Slate::FDeprecateOptionalVector2DParameter InRotationPoint = TOptional<FVector2f>(), ERotationSpace RotationSpace = RelativeToElement, const FLinearColor& InTint = FLinearColor::White)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FString& InText, const int32 StartIndex, const int32 EndIndex, const FSlateFontInfo& InFontInfo, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FString& InText, const FSlateFontInfo& InFontInfo, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White)"
  },
  {
    "label": "MakeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeText(ElementList, InLayer, PaintGeometry, InText.ToString(), InFontInfo, InDrawEffects, InTint)"
  },
  {
    "label": "MakeShapedText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeShapedText(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FShapedGlyphSequenceRef& InShapedGlyphSequence, ESlateDrawEffect InDrawEffects, const FLinearColor& BaseTint, const FLinearColor& OutlineTint, FTextOverflowArgs TextOverflowArgs = FTextOverflowArgs())"
  },
  {
    "label": "MakeRotatedShapedText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRotatedShapedText(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FShapedGlyphSequenceRef& InShapedGlyphSequence, ESlateDrawEffect InDrawEffects, const FLinearColor& BaseTint, const FLinearColor& OutlineTint, float Angle2D, const UE::Slate::FDeprecateOptionalVector2DParameter& InRotationPoint = TOptional<FVector2f>(), ERotationSpace RotationSpace = RelativeToElement, const FTextOverflowArgs& TextOverflowArgs = FTextOverflowArgs())"
  },
  {
    "label": "MakeGradient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeGradient(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TArray<FSlateGradientStop> InGradientStops, EOrientation InGradientType, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, FVector4f CornerRadius = FVector4f(0.0f))"
  },
  {
    "label": "MakeSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSpline(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness = 0.0f, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White)"
  },
  {
    "label": "MakeCubicBezierSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCubicBezierSpline(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const UE::Slate::FDeprecateVector2DParameter P0, const UE::Slate::FDeprecateVector2DParameter P1, const UE::Slate::FDeprecateVector2DParameter P2, const UE::Slate::FDeprecateVector2DParameter P3, float InThickness = 0.0f, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White)"
  },
  {
    "label": "MakeDrawSpaceSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDrawSpaceSpline(FSlateWindowElementList& ElementList, uint32 InLayer, const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness = 0.0f, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_SLATE_VECTOR_DEPRECATION_MECHANISMS void)",
    "insertText": "MakeLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const TArray<FVector2d>& Points, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MakeLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TArray<FVector2f> Points, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeDashedLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDashedLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TArray<FVector2f>&& Points, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White, float Thickness = 1.0f, float DashLengthPx = 10.0f, float DashScreenOffset = 0.f)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_SLATE_VECTOR_DEPRECATION_MECHANISMS void)",
    "insertText": "MakeLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const TArray<FVector2d>& Points, const TArray<FLinearColor>& PointColors, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeLines()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MakeLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TArray<FVector2f> Points, TArray<FLinearColor> PointColors, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White, bool bAntialias = true, float Thickness = 1.0f)"
  },
  {
    "label": "MakeDashedLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDashedLines(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TArray<FVector2f>&& Points, TArray<FLinearColor>&& PointColors, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint = FLinearColor::White, float Thickness = 1.0f, float DashLengthPx = 10.0f, float DashScreenOffset = 0.f)"
  },
  {
    "label": "MakeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeViewport(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, TSharedPtr<const ISlateViewport> Viewport, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None, const FLinearColor& InTint=FLinearColor::White)"
  },
  {
    "label": "MakeCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCustom(FSlateWindowElementList& ElementList, uint32 InLayer, TSharedPtr<ICustomSlateElement, ESPMode::ThreadSafe> CustomDrawer)"
  },
  {
    "label": "MakeCustomVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCustomVerts(FSlateWindowElementList& ElementList, uint32 InLayer, const FSlateResourceHandle& InRenderResourceHandle, const TArray<FSlateVertex>& InVerts, const TArray<SlateIndex>& InIndexes, ISlateUpdatableInstanceBuffer* InInstanceData, uint32 InInstanceOffset, uint32 InNumInstances, ESlateDrawEffect InDrawEffects = ESlateDrawEffect::None)"
  },
  {
    "label": "MakePostProcessBlur()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakePostProcessBlur(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FVector4f& Params, int32 DownsampleAmount, const FVector4f CornerRadius = FVector4f(0.0f))"
  },
  {
    "label": "FSlateDrawElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateDrawElement()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (RenderTransform = InRenderTransform ; } UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetPosition()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosition(UE::Slate::FDeprecateVector2DParameter InPosition)"
  },
  {
    "label": "GetLocalSize()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ; } UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetLocalSize()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetScale()"
  },
  {
    "label": "GetPrecachedClippingIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPrecachedClippingIndex()"
  },
  {
    "label": "SetPrecachedClippingIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPrecachedClippingIndex(int32 InClippingIndex)"
  },
  {
    "label": "SetPreCachedClipIndex()",
    "kind": "Method",
    "detail": "Function (ClipStateHandle .)",
    "insertText": "SetPreCachedClipIndex(InClippingIndex)"
  },
  {
    "label": "SetCachedClippingState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCachedClippingState(const FSlateClippingState* CachedState)"
  },
  {
    "label": "SetCachedClipState()",
    "kind": "Method",
    "detail": "Function (ClipStateHandle .)",
    "insertText": "SetCachedClipState(CachedState)"
  },
  {
    "label": "GetClippingHandle()",
    "kind": "Method",
    "detail": "Function (} const FClipStateHandle&)",
    "insertText": "GetClippingHandle()"
  },
  {
    "label": "IsCached()",
    "kind": "Method",
    "detail": "Function (bIsCached = bInIsCached ; } bool)",
    "insertText": "IsCached()"
  },
  {
    "label": "ApplyPositionOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPositionOffset(UE::Slate::FDeprecateVector2DParameter InOffset)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Init(FSlateWindowElementList& ElementList, EElementType InElementType, uint32 InLayer, const FPaintGeometry& PaintGeometry, ESlateDrawEffect InDrawEffects)"
  },
  {
    "label": "GetRotationPoint()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetRotationPoint(const FPaintGeometry& PaintGeometry, const TOptional<FVector2f>& UserRotationPoint, ERotationSpace RotationSpace)"
  },
  {
    "label": "MakeBoxInternal()",
    "kind": "Method",
    "detail": "Function (FSlateDrawElement&)",
    "insertText": "MakeBoxInternal(FSlateWindowElementList& ElementList, uint32 InLayer, const FPaintGeometry& PaintGeometry, const FSlateBrush* InBrush, ESlateDrawEffect InDrawEffects, const FLinearColor& InTint)"
  },
  {
    "label": "FSlateGradientStop()",
    "kind": "Method",
    "detail": "Function (private : FSlateRenderTransform RenderTransform ; FVector2f Position ; FVector2f LocalSize ; int32 LayerId ; FClipStateHandle ClipStateHandle ; float Scale ; int8 SceneIndex ; ESlateDrawEffect DrawEffects ; EElementType ElementType ; ESlateBatchDrawFlag BatchFlags ; uint8 bIsCached : 1 ; } ; class FSlateShaderResourceProxy ; struct FSlateGradientStop { FVector2f Position ; FLinearColor Color ; template<VectorType>)",
    "insertText": "FSlateGradientStop(const VectorType& InPosition, const FLinearColor InColor) : Position(UE::Slate::CastToVector2f(InPosition)) , Color(InColor)"
  },
  {
    "label": "SetTint()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TIsPODType<FSlateGradientStop> { enum { Value = true } ; } ; struct FSlateTintableElement { FLinearColor Tint ; void)",
    "insertText": "SetTint(const FLinearColor& InTint)"
  },
  {
    "label": "GetTint()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; } FLinearColor)",
    "insertText": "GetTint()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (Margin = InBrush ->)",
    "insertText": "GetMargin()"
  },
  {
    "label": "GetUVRegion()",
    "kind": "Method",
    "detail": "Function (UVRegion = InBrush ->)",
    "insertText": "GetUVRegion()"
  },
  {
    "label": "GetTiling()",
    "kind": "Method",
    "detail": "Function (Tiling = InBrush ->)",
    "insertText": "GetTiling()"
  },
  {
    "label": "GetMirroring()",
    "kind": "Method",
    "detail": "Function (Mirroring = InBrush ->)",
    "insertText": "GetMirroring()"
  },
  {
    "label": "GetDrawType()",
    "kind": "Method",
    "detail": "Function (DrawType = InBrush ->)",
    "insertText": "GetDrawType()"
  },
  {
    "label": "GetRenderingResource()",
    "kind": "Method",
    "detail": "Function (const FSlateResourceHandle& Handle = InBrush ->)",
    "insertText": "GetRenderingResource(InLocalSize, DrawScale)"
  },
  {
    "label": "GetResourceProxy()",
    "kind": "Method",
    "detail": "Function (ResourceProxy = Handle .)",
    "insertText": "GetResourceProxy()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (} else { ResourceProxy = nullptr ; } } } ; struct FSlateRoundedBoxElement : public FSlateBoxElement { FLinearColor OutlineColor ; FVector4f Radius ; float OutlineWeight ; void)",
    "insertText": "SetRadius(FVector4f InRadius)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (Radius = InRadius ; } FVector4f)",
    "insertText": "GetRadius()"
  },
  {
    "label": "GetOutlineColor()",
    "kind": "Method",
    "detail": "Function (OutlineColor = InOutlineColor ; OutlineWeight = InOutlineWeight ; } FLinearColor)",
    "insertText": "GetOutlineColor()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetText(const FString& InText, const FSlateFontInfo& InFontInfo, int32 InStartIndex, int32 InEndIndex)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FontInfo = InFontInfo ; const int32 StartIndex = FMath::Min<)",
    "insertText": "int32(InStartIndex, InText.Len())"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 EndIndex = FMath::Min<)",
    "insertText": "int32(InEndIndex, InText.Len())"
  },
  {
    "label": "TextLength()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "TextLength(EndIndex > StartIndex)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (ImmutableText = InText .)",
    "insertText": "Mid(StartIndex, TextLength)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetText(const FString& InText, const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (FontInfo = InFontInfo ; ImmutableText = InText ; } void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (FontInfo .)",
    "insertText": "AddReferencedObjects(Collector)"
  },
  {
    "label": "GetShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateShapedTextElement : public FSlateDrawElement,public FSlateTintableElement { FShapedGlyphSequencePtr ShapedGlyphSequence ; FLinearColor OutlineTint ; FTextOverflowArgs OverflowArgs ; const FShapedGlyphSequencePtr&)",
    "insertText": "GetShapedGlyphSequence()"
  },
  {
    "label": "SetOverflowArgs()",
    "kind": "Method",
    "detail": "Function (ShapedGlyphSequence = InShapedGlyphSequence ; OutlineTint = InOutlineTint ; } void)",
    "insertText": "SetOverflowArgs(const FTextOverflowArgs& InArgs)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (OverflowArgs = InArgs ;)",
    "insertText": "check(InArgs.OverflowDirection == ETextOverflowDirection::NoOverflow || InArgs.OverflowTextPtr.IsValid())"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FShapedGlyphSequence(ShapedGlyphSequence.Get())->AddReferencedObjects(Collector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OverflowArgs.OverflowTextPtr.IsValid())"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FShapedGlyphSequence(OverflowArgs.OverflowTextPtr.Get())->AddReferencedObjects(Collector)"
  },
  {
    "label": "SetGradient()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FSlateGradientElement : public FSlateDrawElement { TArray<FSlateGradientStop> GradientStops ; EOrientation GradientType ; FVector4f CornerRadius ; void)",
    "insertText": "SetGradient(TArray<FSlateGradientStop> InGradientStops, EOrientation InGradientType, FVector4f InCornerRadius)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (GradientStops =)",
    "insertText": "MoveTemp(InGradientStops)"
  },
  {
    "label": "SetThickness()",
    "kind": "Method",
    "detail": "Function (GradientType = InGradientType ; CornerRadius = InCornerRadius ; } } ; struct FSlateSplineElement : public FSlateDrawElement,public FSlateTintableElement { TArray<FSlateGradientStop> GradientStops ; FVector2f P0 ; FVector2f P1 ; FVector2f P2 ; FVector2f P3 ; float Thickness ; void)",
    "insertText": "SetThickness(float InThickness)"
  },
  {
    "label": "GetThickness()",
    "kind": "Method",
    "detail": "Function (Thickness = InThickness ; } float)",
    "insertText": "GetThickness()"
  },
  {
    "label": "SetHermiteSpline()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; P0 = InP0 ; P1 = InP1 ; P2 = InP2 ; P3 = InP3 ; Thickness = InThickness ; } void)",
    "insertText": "SetHermiteSpline(const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness, const FLinearColor InTint)"
  },
  {
    "label": "SetGradientHermiteSpline()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; P0 = InStart ; P1 = InStart + InStartDir / 3 . 0 f ; P2 = InEnd - InEndDir / 3 . 0 f ; P3 = InEnd ; Thickness = InThickness ; } void)",
    "insertText": "SetGradientHermiteSpline(const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness, TArray<FSlateGradientStop> InGradientStops)"
  },
  {
    "label": "IsAntialiased()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateLineElement : public FSlateDrawElement,public FSlateTintableElement { TArray<FVector2f> Points ; TArray<FLinearColor> PointColors ; float Thickness ; float DashLength = 0 . f ; float DashOffset = 0 . f ; bool bAntialias ; bool)",
    "insertText": "IsAntialiased()"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (Thickness = InThickness ; } # if UE_ENABLE_SLATE_VECTOR_DEPRECATION_MECHANISMS void)",
    "insertText": "SetLines(const TArray<FVector2D>& InPoints, bool bInAntialias, const TArray<FLinearColor>* InPointColors = nullptr)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2f> NewPoints ; NewPoints .)",
    "insertText": "Reserve(InPoints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewPoints .)",
    "insertText": "Add(UE::Slate::CastToVector2f(Vect))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InPointColors)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLines(MoveTemp(NewPoints), bInAntialias, *InPointColors)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetLines(MoveTemp(NewPoints), bInAntialias)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "SetLines(TArray<FVector2f> InPoints, bool bInAntialias)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (bAntialias = bInAntialias ; Points =)",
    "insertText": "MoveTemp(InPoints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PointColors .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLines(TArray<FVector2f> InPoints, bool bInAntialias, TArray<FLinearColor> InPointColors)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PointColors =)",
    "insertText": "MoveTemp(InPointColors)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateViewportElement : public FSlateDrawElement,public FSlateTintableElement { FSlateShaderResource* RenderTargetResource ; uint8 bAllowViewportScaling : 1 ; uint8 bViewportTextureAlphaOnly : 1 ; uint8 bRequiresVSync : 1 ; void)",
    "insertText": "SetViewport(const TSharedPtr<const ISlateViewport>& InViewport, const FLinearColor& InTint)"
  },
  {
    "label": "GetViewportRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; RenderTargetResource = InViewport ->)",
    "insertText": "GetViewportRenderTargetTexture()"
  },
  {
    "label": "AllowScaling()",
    "kind": "Method",
    "detail": "Function (bAllowViewportScaling = InViewport ->)",
    "insertText": "AllowScaling()"
  },
  {
    "label": "IsViewportTextureAlphaOnly()",
    "kind": "Method",
    "detail": "Function (bViewportTextureAlphaOnly = InViewport ->)",
    "insertText": "IsViewportTextureAlphaOnly()"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (bRequiresVSync = InViewport ->)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "SetCustomDrawer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateCustomDrawerElement : public FSlateDrawElement { TWeakPtr<ICustomSlateElement,ESPMode::ThreadSafe> CustomDrawer ; void)",
    "insertText": "SetCustomDrawer(const TSharedPtr<ICustomSlateElement, ESPMode::ThreadSafe>& InCustomDrawer)"
  },
  {
    "label": "SetLayer()",
    "kind": "Method",
    "detail": "Function (CustomDrawer = InCustomDrawer ; } } ; struct FSlateLayerElement : public FSlateDrawElement { class FSlateDrawLayerHandle* LayerHandle ; void)",
    "insertText": "SetLayer(FSlateDrawLayerHandle* InLayerHandle)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (LayerHandle = InLayerHandle ;)",
    "insertText": "checkSlow(LayerHandle)"
  },
  {
    "label": "SetCachedBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSlateCachedBufferElement : public FSlateDrawElement { class FSlateRenderDataHandle* CachedRenderData ; FVector2f CachedRenderDataOffset ; void)",
    "insertText": "SetCachedBuffer(FSlateRenderDataHandle* InRenderDataHandle, const UE::Slate::FDeprecateVector2DParameter Offset)"
  },
  {
    "label": "SetCustomVerts()",
    "kind": "Method",
    "detail": "Function (CachedRenderData = InRenderDataHandle ; CachedRenderDataOffset = Offset ; } } ; struct FSlateCustomVertsElement : public FSlateDrawElement { const FSlateShaderResourceProxy* ResourceProxy ; TArray<FSlateVertex> Vertices ; TArray<SlateIndex> Indices ; ISlateUpdatableInstanceBufferRenderProxy* InstanceData ; uint32 InstanceOffset ; uint32 NumInstances ; void)",
    "insertText": "SetCustomVerts(const FSlateShaderResourceProxy* InRenderProxy, TArray<FSlateVertex> InVerts, TArray<SlateIndex> InIndices, ISlateUpdatableInstanceBufferRenderProxy* InInstanceData, uint32 InInstanceOffset, uint32 InNumInstances)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ResourceProxy = InRenderProxy ; Vertices =)",
    "insertText": "MoveTemp(InVerts)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Indices =)",
    "insertText": "MoveTemp(InIndices)"
  }
]