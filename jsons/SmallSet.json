[
  {
    "label": "SmallSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallSet"
  },
  {
    "label": "SmallSet()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SMALLSET_H # define LLVM_ADT_SMALLSET_H # include \" llvm / ADT / None . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include<set> namespace llvm { template<T,unsigned N,C = std::less<T>> class SmallSet { SmallVector<T,N> Vector ; std::set<T,C> Set ; typedef SmallVector<T,N>::const_iterator VIterator ; typedef SmallVector<T,N>::iterator mutable_iterator ; public : typedef size_t size_type ;)",
    "insertText": "SmallSet()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const T &V)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} else { return Set .)",
    "insertText": "count(V)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} } std::pair<NoneType,bool>)",
    "insertText": "insert(const T &V)"
  },
  {
    "label": "vfind()",
    "kind": "Method",
    "detail": "Function (VIterator I =)",
    "insertText": "vfind(V)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "push_back(V)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!Vector.empty())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Set .)",
    "insertText": "insert(Vector.back())"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "pop_back()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} Set .)",
    "insertText": "insert(V)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<IterT> void)",
    "insertText": "insert(IterT I, IterT E)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(const T &V)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "erase(I)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "clear()"
  },
  {
    "label": "isSmall()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "isSmall()"
  },
  {
    "label": "vfind()",
    "kind": "Method",
    "detail": "Function (} VIterator)",
    "insertText": "vfind(const T &V)"
  }
]