[
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FSequencerCoreSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCoreSelection"
  },
  {
    "label": "TSelectionSetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectionSetBase"
  },
  {
    "label": "TFilteredViewModelSelectionIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFilteredViewModelSelectionIterator"
  },
  {
    "label": "TSelectionSetIteratorImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSelectionSetIteratorImpl"
  },
  {
    "label": "TSelectionSetIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSelectionSetIteratorState"
  },
  {
    "label": "TFilteredSelectionSetIteratorImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFilteredSelectionSetIteratorImpl"
  },
  {
    "label": "TUniqueFragmentSelectionSetIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUniqueFragmentSelectionSetIterator"
  },
  {
    "label": "TUniqueFragmentSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFragmentSelectionSet"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModelPtr . h \" namespace UE::Sequencer { class FViewModel ; class FSequencerCoreSelection ; template<MixinType,KeyType> class TSelectionSetBase ; template<StorageKeyType,FilterType> struct TFilteredViewModelSelectionIterator ; template<T> struct TSelectionSetIteratorImpl { const T&)",
    "insertText": "operator()"
  },
  {
    "label": "SkipInvalid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SkipInvalid()"
  },
  {
    "label": "TSelectionSetIteratorState()",
    "kind": "Method",
    "detail": "Function (} TSet<T>::TRangedForConstIterator Iterator ; } ; template<T,ImplType = TSelectionSetIteratorImpl<T>> struct TSelectionSetIteratorState : ImplType {)",
    "insertText": "TSelectionSetIteratorState(typename TSet<T>::TRangedForConstIterator InIterator) : ImplType(InIterator)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TSelectionSetIteratorState<T, ImplType>& A, const TSelectionSetIteratorState<T, ImplType>& B)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CurrentValue = nullptr ;)",
    "insertText": "while(Iterator)"
  },
  {
    "label": "FilterType()",
    "kind": "Method",
    "detail": "Function (CurrentValue = CastViewModel<)",
    "insertText": "FilterType(Iterator->Pin())"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "KeyType()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TSet<KeyType>::TRangedForConstIterator Iterator ; } ; template<StorageKeyType,FilterType> struct TFilteredViewModelSelectionIterator { const TSet<StorageKeyType>* SelectionSet ; TFilteredViewModelSelectionIteratorState<StorageKeyType,FilterType>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TFilteredViewModelSelectionIteratorState<StorageKeyType,FilterType>)",
    "insertText": "end()"
  },
  {
    "label": "TSelectionSetIteratorImpl()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TSelectionSetIteratorImpl(typename TSet<TWeakPtr<T>>::TRangedForConstIterator InIterator) : Iterator(InIterator)"
  },
  {
    "label": "TSelectionSetIteratorImpl()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TSelectionSetIteratorImpl(typename TSet<TWeakViewModelPtr<T>>::TRangedForConstIterator InIterator) : Iterator(InIterator)"
  }
]