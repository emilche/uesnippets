[
  {
    "label": "IChannelFormatConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChannelFormatConverter"
  },
  {
    "label": "FInputFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputFormat"
  },
  {
    "label": "FOutputFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputFormat"
  },
  {
    "label": "FBaseChannelFormatConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseChannelFormatConverter"
  },
  {
    "label": "FChannelMixEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelMixEntry"
  },
  {
    "label": "FOutputGainState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputGainState"
  },
  {
    "label": "FChannelMixState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelMixState"
  },
  {
    "label": "FChannelMixKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelMixKey"
  },
  {
    "label": "IChannelFormatConverter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / SortedMap . h \" # include \" DSP / BufferVectorOperations . h \" namespace Audio { class IChannelFormatConverter { public : struct FInputFormat { int32 NumChannels = 0 ; } ; struct FOutputFormat { int32 NumChannels = 0 ; } ; ~)",
    "insertText": "IChannelFormatConverter()"
  },
  {
    "label": "GetInputFormat()",
    "kind": "Method",
    "detail": "Function (const FInputFormat&)",
    "insertText": "GetInputFormat()"
  },
  {
    "label": "GetOutputFormat()",
    "kind": "Method",
    "detail": "Function (const FOutputFormat&)",
    "insertText": "GetOutputFormat()"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const TArray<FAlignedFloatBuffer>& InInputBuffers, TArray<FAlignedFloatBuffer>& OutOutputBuffers)"
  },
  {
    "label": "FBaseChannelFormatConverter()",
    "kind": "Method",
    "detail": "Function (} ; class FBaseChannelFormatConverter : public IChannelFormatConverter { public : struct FChannelMixEntry { int32 InputChannelIndex = 0 ; int32 OutputChannelIndex = 0 ; float Gain = 0 . f ; } ; ~)",
    "insertText": "FBaseChannelFormatConverter()"
  },
  {
    "label": "SetOutputGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputGain(float InOutputGain, bool bFadeToGain=true)"
  },
  {
    "label": "SetMixGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMixGain(const FChannelMixEntry& InEntry, bool bFadeToGain=true)"
  },
  {
    "label": "SetMixGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMixGain(int32 InInputChannelIndex, int32 InOutputChannelIndex, float InGain, bool bFadeToGain=true)"
  },
  {
    "label": "GetTargetMixGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTargetMixGain(int32 InInputChannelIndex, int32 InOutputChannelIndex)"
  },
  {
    "label": "GetTargetOutputGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTargetOutputGain()"
  },
  {
    "label": "CreateBaseFormatConverter()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FBaseChannelFormatConverter>)",
    "insertText": "CreateBaseFormatConverter(const FInputFormat& InInputFormat, const FOutputFormat& InOutputFormat, TArrayView<const FChannelMixEntry> InMixEntries, int32 InNumFramesPerCall)"
  },
  {
    "label": "FBaseChannelFormatConverter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FBaseChannelFormatConverter(const FInputFormat& InInputFormat, const FOutputFormat& InOutputFormat, TArrayView<const FChannelMixEntry> InMixEntries, int32 InNumFramesPerCall)"
  },
  {
    "label": "FChannelMixState()",
    "kind": "Method",
    "detail": "Function (private : struct FOutputGainState { float Gain = 1 . f ; float NextGain = 0 . f ; bool bFadeToNextGain = false ; } ; struct FChannelMixState : FChannelMixEntry {)",
    "insertText": "FChannelMixState()"
  },
  {
    "label": "FChannelMixState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChannelMixState(const FChannelMixEntry& InEntry) : FChannelMixEntry(InEntry)"
  },
  {
    "label": "FChannelMixKey()",
    "kind": "Method",
    "detail": "Function (} bool bFadeToNextGain = false ; float NextGain = 0 . f ; } ; struct FChannelMixKey { const int32 InputChannelIndex = 0 ; const int32 OutputChannelIndex = 0 ;)",
    "insertText": "FChannelMixKey(int32 InInputChannelIndex, int32 InOutputChannelIndex) : InputChannelIndex(InInputChannelIndex) , OutputChannelIndex(InOutputChannelIndex)"
  },
  {
    "label": "FChannelMixKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChannelMixKey(const FChannelMixEntry& InEntry) : InputChannelIndex(InEntry.InputChannelIndex) , OutputChannelIndex(InEntry.OutputChannelIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FChannelMixKey& InLHS, const FChannelMixKey& InRHS)"
  }
]