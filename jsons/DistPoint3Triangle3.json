[
  {
    "label": "TDistPoint3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistPoint3Triangle3"
  },
  {
    "label": "TDistPoint3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistPoint3Triangle3 { public : TVector<Real> Point ; TTriangle3<Real> Triangle ; TVector<Real> TriangleBaryCoords ; TVector<Real> ClosestTrianglePoint ;)",
    "insertText": "TDistPoint3Triangle3(const TVector<Real>& PointIn, const TTriangle3<Real>& TriangleIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Point = PointIn ; Triangle = TriangleIn ; } Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (TVector<Real> diff = Point - Triangle . V [ 0 ] ; TVector<Real> edge0 = Triangle . V [ 1 ] - Triangle . V [ 0 ] ; TVector<Real> edge1 = Triangle . V [ 2 ] - Triangle . V [ 0 ] ; Real a00 = edge0 .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real a01 = edge0 .)",
    "insertText": "Dot(edge1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real b0 = - diff .)",
    "insertText": "Dot(edge0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real f00 = b0 ; Real f10 = b0 + a00 ; Real f01 = b0 + a01 ; TVector2<Real> p0,p1,p ; Real dt1,h0,h1 ;)",
    "insertText": "if(f00 >= (Real)0)"
  },
  {
    "label": "GetMinEdge02()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinEdge02(a11, b1, p)"
  },
  {
    "label": "p0()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "p0(Real)"
  },
  {
    "label": "f00()",
    "kind": "Method",
    "detail": "Function (p0 [ 1 ] =)",
    "insertText": "f00(f00 - f01)"
  },
  {
    "label": "f01()",
    "kind": "Method",
    "detail": "Function (p1 [ 0 ] =)",
    "insertText": "f01(f01 - f10)"
  },
  {
    "label": "p1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p1(Real)"
  },
  {
    "label": "dt1()",
    "kind": "Method",
    "detail": "Function (dt1 = p1 [ 1 ] - p0 [ 1 ] ; h0 =)",
    "insertText": "dt1(a11 * p0[1] + b1)"
  },
  {
    "label": "dt1()",
    "kind": "Method",
    "detail": "Function (} else { h1 =)",
    "insertText": "dt1(a01 * p1[0] + a11 * p1[1] + b1)"
  },
  {
    "label": "GetMinEdge12()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinEdge12(a01, a11, b1, f10, f01, p)"
  },
  {
    "label": "GetMinInterior()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetMinInterior(p0, h0, p1, h1, p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(f01 <= (Real)0)"
  },
  {
    "label": "f00()",
    "kind": "Method",
    "detail": "Function (} else { p0 [ 0 ] =)",
    "insertText": "f00(f00 - f10)"
  },
  {
    "label": "p1()",
    "kind": "Method",
    "detail": "Function (h0 =)",
    "insertText": "p1(a01 * p0[0] + b1)"
  },
  {
    "label": "p1()",
    "kind": "Method",
    "detail": "Function (p = p0 ; } else { h1 =)",
    "insertText": "p1(a01 * p1[0] + a11 * p1[1] + b1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(f10 <= (Real)0)"
  },
  {
    "label": "p1()",
    "kind": "Method",
    "detail": "Function (p = p0 ; } else { h1 =)",
    "insertText": "p1(a11 * p1[1] + b1)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (} } } TriangleBaryCoords = TVector<)",
    "insertText": "Real((Real)1 - p[0] - p[1], p[0], p[1])"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (ClosestTrianglePoint = Triangle . V [ 0 ] + p [ 0 ]* edge0 + p [ 1 ]* edge1 ; return)",
    "insertText": "DistanceSquared(Point, ClosestTrianglePoint)"
  },
  {
    "label": "GetMinEdge02()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "GetMinEdge02(Real const& a11, Real const& b1, TVector2<Real>& p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(Real)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(a11 + b1 <= (Real)0)"
  },
  {
    "label": "GetMinEdge12()",
    "kind": "Method",
    "detail": "Function (} else { p [ 1 ] = - b1 / a11 ; } } void)",
    "insertText": "GetMinEdge12(Real const& a01, Real const& a11, Real const& b1, Real const& f10, Real const& f01, TVector2<Real>& p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real h0 = a01 + b1 - f10 ;)",
    "insertText": "if(h0 >= (Real)0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Real h1 = a11 + b1 - f01 ;)",
    "insertText": "if(h1 <= (Real)0)"
  },
  {
    "label": "h0()",
    "kind": "Method",
    "detail": "Function (} else { p [ 1 ] =)",
    "insertText": "h0(h0 - h1)"
  },
  {
    "label": "GetMinInterior()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMinInterior(TVector2<Real> const& p0, Real const& h0, TVector2<Real> const& p1, Real const& h1, TVector2<Real>& p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p((Real)1 - z)"
  }
]