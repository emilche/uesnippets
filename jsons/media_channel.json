[
  {
    "label": "Timing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timing"
  },
  {
    "label": "AudioSinkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSinkInterface"
  },
  {
    "label": "VideoFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrame"
  },
  {
    "label": "AudioSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSource"
  },
  {
    "label": "VideoCapturer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCapturer"
  },
  {
    "label": "RtpHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpHeader"
  },
  {
    "label": "VideoFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFormat"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "VideoOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoOptions"
  },
  {
    "label": "MediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaChannel"
  },
  {
    "label": "NetworkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkInterface"
  },
  {
    "label": "SocketType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SocketType"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SsrcSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SsrcSenderInfo"
  },
  {
    "label": "SsrcReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SsrcReceiverInfo"
  },
  {
    "label": "MediaSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaSenderInfo"
  },
  {
    "label": "MediaReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaReceiverInfo"
  },
  {
    "label": "VoiceSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceSenderInfo"
  },
  {
    "label": "VoiceReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceReceiverInfo"
  },
  {
    "label": "VideoSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSenderInfo"
  },
  {
    "label": "VideoReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoReceiverInfo"
  },
  {
    "label": "BandwidthEstimationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BandwidthEstimationInfo"
  },
  {
    "label": "VoiceMediaInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceMediaInfo"
  },
  {
    "label": "VideoMediaInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoMediaInfo"
  },
  {
    "label": "RtcpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpParameters"
  },
  {
    "label": "Codec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Codec"
  },
  {
    "label": "RtpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpParameters"
  },
  {
    "label": "Codec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Codec"
  },
  {
    "label": "RtpSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSendParameters"
  },
  {
    "label": "AudioSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioSendParameters"
  },
  {
    "label": "AudioRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioRecvParameters"
  },
  {
    "label": "VoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceMediaChannel"
  },
  {
    "label": "VideoSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendParameters"
  },
  {
    "label": "VideoRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoRecvParameters"
  },
  {
    "label": "VideoMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoMediaChannel"
  },
  {
    "label": "ReceiveDataParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiveDataParams"
  },
  {
    "label": "SendDataResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SendDataResult"
  },
  {
    "label": "MediaChannel()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "MediaChannel(webrtc::TaskQueueBase* network_thread,\n                        bool enable_dscp = false)"
  },
  {
    "label": "SetInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterface(NetworkInterface* iface)"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(\n      uint32_t ssrc,\n      rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(\n      uint32_t ssrc,\n      rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetVideoCodecSwitchingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecSwitchingEnabled(bool enabled)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacket(rtc::CopyOnWriteBuffer* packet,\n                  const rtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(rtc::CopyOnWriteBuffer* packet,\n                const rtc::PacketOptions& options)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(NetworkInterface::SocketType type,\n                rtc::Socket::Option opt,\n                int option)"
  },
  {
    "label": "SetExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtmapAllowMixed(bool extmap_allow_mixed)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(\n      uint32_t ssrc,\n      rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(\n      uint32_t ssrc,\n      rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetPreferredDscp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreferredDscp(rtc::DiffServCodePoint new_dscp)"
  },
  {
    "label": "network_safety()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag>)",
    "insertText": "network_safety()"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtp(const uint8_t* data,\n               size_t len,\n               const webrtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtcp(const uint8_t* data, size_t len)"
  },
  {
    "label": "DoSendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSendPacket(rtc::CopyOnWriteBuffer* packet,\n                    bool rtcp,\n                    const rtc::PacketOptions& options)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (network_safety_)",
    "insertText": "RTC_PT_GUARDED_BY(network_thread_)"
  },
  {
    "label": "connected()",
    "kind": "Method",
    "detail": "Function (use)",
    "insertText": "connected()"
  }
]