[
  {
    "label": "Timing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timing"
  },
  {
    "label": "AudioSinkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSinkInterface"
  },
  {
    "label": "VideoFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrame"
  },
  {
    "label": "AudioSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSource"
  },
  {
    "label": "VideoCapturer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCapturer"
  },
  {
    "label": "RtpHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpHeader"
  },
  {
    "label": "VideoFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFormat"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "VideoOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoOptions"
  },
  {
    "label": "MediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaChannel"
  },
  {
    "label": "NetworkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkInterface"
  },
  {
    "label": "SocketType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SocketType"
  },
  {
    "label": "SsrcSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SsrcSenderInfo"
  },
  {
    "label": "SsrcReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SsrcReceiverInfo"
  },
  {
    "label": "MediaSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaSenderInfo"
  },
  {
    "label": "MediaReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaReceiverInfo"
  },
  {
    "label": "VoiceSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceSenderInfo"
  },
  {
    "label": "VoiceReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceReceiverInfo"
  },
  {
    "label": "VideoSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSenderInfo"
  },
  {
    "label": "VideoReceiverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoReceiverInfo"
  },
  {
    "label": "BandwidthEstimationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BandwidthEstimationInfo"
  },
  {
    "label": "VoiceMediaInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoiceMediaInfo"
  },
  {
    "label": "VideoMediaInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoMediaInfo"
  },
  {
    "label": "RtcpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpParameters"
  },
  {
    "label": "Codec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Codec"
  },
  {
    "label": "RtpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpParameters"
  },
  {
    "label": "RtpSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSendParameters"
  },
  {
    "label": "AudioSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioSendParameters"
  },
  {
    "label": "AudioRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioRecvParameters"
  },
  {
    "label": "VoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceMediaChannel"
  },
  {
    "label": "VideoSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendParameters"
  },
  {
    "label": "VideoRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoRecvParameters"
  },
  {
    "label": "VideoMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoMediaChannel"
  },
  {
    "label": "ReceiveDataParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReceiveDataParams"
  },
  {
    "label": "SendDataResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SendDataResult"
  },
  {
    "label": "ToStringIfSet()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_MEDIA_CHANNEL_H_ # define MEDIA_BASE_MEDIA_CHANNEL_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / audio_options . h \" # include \" api / crypto / frame_decryptor_interface . h \" # include \" api / crypto / frame_encryptor_interface . h \" # include \" api / frame_transformer_interface . h \" # include \" api / media_stream_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtp_parameters . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / data_channel_transport_interface . h \" # include \" api / transport / rtp / rtp_source . h \" # include \" api / units / time_delta . h \" # include \" api / video / video_content_type . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" api / video / video_timing . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" call / video_receive_stream . h \" # include \" common_video / include / quality_limitation_reason . h \" # include \" media / base / codec . h \" # include \" media / base / delayable . h \" # include \" media / base / media_constants . h \" # include \" media / base / stream_params . h \" # include \" modules / audio_processing / include / audio_processing_statistics . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / dscp . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / string_encode . h \" # include \" rtc_base / strings / string_builder . h \" # include \" video / config / video_encoder_config . h \" namespace rtc { class Timing ; } namespace webrtc { class AudioSinkInterface ; class VideoFrame ; } namespace cricket { class AudioSource ; class VideoCapturer ; struct RtpHeader ; struct VideoFormat ; const int kScreencastDefaultFps = 5 ; template<class T> std::string)",
    "insertText": "ToStringIfSet(const char* key, const absl::optional<T>& val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string str ;)",
    "insertText": "if(val)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (str = key ; str + = \" : \" ; str + = val ?)",
    "insertText": "ToString(*val)"
  },
  {
    "label": "VectorToString()",
    "kind": "Method",
    "detail": "Function (str + = \",\" ; } return str ; } template<class T> std::string)",
    "insertText": "VectorToString(const std::vector<T>& vals)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder ost ; ost<<\" [ \" ;)",
    "insertText": "for(size_t i = 0; i < vals.size(); ++i)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (ost<<\",\" ; } ost<<vals [ i ] .)",
    "insertText": "ToString()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} ost<<\" ] \" ; return ost .)",
    "insertText": "Release()"
  },
  {
    "label": "VideoOptions()",
    "kind": "Method",
    "detail": "Function (} struct VideoOptions {)",
    "insertText": "VideoOptions()"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAll(const VideoOptions& change)"
  },
  {
    "label": "SetFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrom(&video_noise_reduction, change.video_noise_reduction)"
  },
  {
    "label": "SetFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrom(&screencast_min_bitrate_kbps, change.screencast_min_bitrate_kbps)"
  },
  {
    "label": "SetFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrom(&is_screencast, change.is_screencast)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const VideoOptions& o)"
  },
  {
    "label": "ToStringIfSet()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder ost ; ost<<\" VideoOptions { \" ; ost<<)",
    "insertText": "ToStringIfSet(\"noise reduction\", video_noise_reduction)"
  },
  {
    "label": "ToStringIfSet()",
    "kind": "Method",
    "detail": "Function (ost<<)",
    "insertText": "ToStringIfSet(\"screencast min bitrate kbps\", screencast_min_bitrate_kbps)"
  },
  {
    "label": "ToStringIfSet()",
    "kind": "Method",
    "detail": "Function (ost<<)",
    "insertText": "ToStringIfSet(\"is_screencast \", is_screencast)"
  },
  {
    "label": "SetFrom()",
    "kind": "Method",
    "detail": "Function (} absl::optional<bool> video_noise_reduction ; absl::optional<int> screencast_min_bitrate_kbps ; absl::optional<bool> is_screencast ; webrtc::VideoTrackInterface::ContentHint content_hint ; private : template<T> void)",
    "insertText": "SetFrom(absl::optional<T>* s, const absl::optional<T>& o)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (* s = o ; } } } ; class MediaChannel { public : class NetworkInterface { public : enum SocketType { ST_RTP,ST_RTCP } ; bool)",
    "insertText": "SendPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(SocketType type, rtc::Socket::Option opt, int option)"
  },
  {
    "label": "NetworkInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkInterface()"
  },
  {
    "label": "MediaChannel()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "MediaChannel(webrtc::TaskQueueBase* network_thread, bool enable_dscp = false)"
  },
  {
    "label": "MediaChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MediaChannel()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "SetInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterface(NetworkInterface* iface)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(bool ready)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "AddSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSendStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSendStream(uint32_t ssrc)"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRecvStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRecvStream(uint32_t ssrc)"
  },
  {
    "label": "ResetUnsignaledRecvStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetUnsignaledRecvStream()"
  },
  {
    "label": "OnDemuxerCriteriaUpdatePending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdatePending()"
  },
  {
    "label": "OnDemuxerCriteriaUpdateComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdateComplete()"
  },
  {
    "label": "GetRtpSendTimeExtnId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRtpSendTimeExtnId()"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetVideoCodecSwitchingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecSwitchingEnabled(bool enabled)"
  },
  {
    "label": "SetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelector(uint32_t ssrc, webrtc::VideoEncoderFactory::EncoderSelectorInterface* encoder_selector)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(NetworkInterface::SocketType type, rtc::Socket::Option opt, int option)"
  },
  {
    "label": "SetExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtmapAllowMixed(bool extmap_allow_mixed)"
  },
  {
    "label": "ExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtmapAllowMixed()"
  },
  {
    "label": "HasNetworkInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetworkInterface()"
  },
  {
    "label": "GetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpSendParameters(uint32_t ssrc)"
  },
  {
    "label": "SetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRtpSendParameters(uint32_t ssrc, const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetOptionLocked()",
    "kind": "Method",
    "detail": "Function (protected : int)",
    "insertText": "SetOptionLocked(NetworkInterface::SocketType type, rtc::Socket::Option opt, int option) RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "DscpEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DscpEnabled()"
  },
  {
    "label": "PreferredDscp()",
    "kind": "Method",
    "detail": "Function (rtc::DiffServCodePoint)",
    "insertText": "PreferredDscp()"
  },
  {
    "label": "SetPreferredDscp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreferredDscp(rtc::DiffServCodePoint new_dscp)"
  },
  {
    "label": "network_safety()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag>)",
    "insertText": "network_safety()"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtp(const uint8_t* data, size_t len, const webrtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtcp(const uint8_t* data, size_t len)"
  },
  {
    "label": "UpdateDscp()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateDscp() RTC_RUN_ON(network_thread_)"
  },
  {
    "label": "DoSendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSendPacket(rtc::CopyOnWriteBuffer* packet, bool rtcp, const rtc::PacketOptions& options)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const bool enable_dscp_ ; const rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> network_safety_)",
    "insertText": "RTC_PT_GUARDED_BY(network_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase* const network_thread_ ; NetworkInterface* network_interface_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "MediaSenderInfo()",
    "kind": "Method",
    "detail": "Function (bool extmap_allow_mixed_ = false ; } ; struct SsrcSenderInfo { uint32_t ssrc = 0 ; double timestamp = 0 . 0 ; } ; struct SsrcReceiverInfo { uint32_t ssrc = 0 ; double timestamp = 0 . 0 ; } ; struct MediaSenderInfo {)",
    "insertText": "MediaSenderInfo()"
  },
  {
    "label": "add_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_ssrc(const SsrcSenderInfo& stat)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (local_stats .)",
    "insertText": "push_back(stat)"
  },
  {
    "label": "add_ssrc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add_ssrc(uint32_t ssrc)"
  },
  {
    "label": "add_ssrc()",
    "kind": "Method",
    "detail": "Function (SsrcSenderInfo stat ; stat . ssrc = ssrc ;)",
    "insertText": "add_ssrc(stat)"
  },
  {
    "label": "ssrcs()",
    "kind": "Method",
    "detail": "Function (} std::vector<uint32_t>)",
    "insertText": "ssrcs()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<uint32_t> retval ;)",
    "insertText": "for(std::vector<SsrcSenderInfo>::const_iterator it = local_stats.begin(); it != local_stats.end(); ++it)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (retval .)",
    "insertText": "push_back(it->ssrc)"
  },
  {
    "label": "connected()",
    "kind": "Method",
    "detail": "Function (} return retval ; } bool)",
    "insertText": "connected()"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "MediaReceiverInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct MediaReceiverInfo {)",
    "insertText": "MediaReceiverInfo()"
  },
  {
    "label": "add_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_ssrc(const SsrcReceiverInfo& stat)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<uint32_t> retval ;)",
    "insertText": "for(std::vector<SsrcReceiverInfo>::const_iterator it = local_stats.begin(); it != local_stats.end(); ++it)"
  },
  {
    "label": "VoiceSenderInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VoiceSenderInfo()"
  },
  {
    "label": "VoiceReceiverInfo()",
    "kind": "Method",
    "detail": "Function (int jitter_ms = 0 ; int audio_level = 0 ; double total_input_energy = 0 . 0 ; double total_input_duration = 0 . 0 ; webrtc::ANAStats ana_statistics ; webrtc::AudioProcessingStats apm_statistics ; } ; struct VoiceReceiverInfo : public MediaReceiverInfo {)",
    "insertText": "VoiceReceiverInfo()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (int jitter_ms = 0 ; int jitter_buffer_ms = 0 ; int jitter_buffer_preferred_ms = 0 ; int delay_estimate_ms = 0 ; int audio_level = 0 ; double total_output_energy = 0 . 0 ; uint64_t total_samples_received = 0 ; double total_output_duration = 0 . 0 ; uint64_t concealed_samples = 0 ; uint64_t silent_concealed_samples = 0 ; uint64_t concealment_events = 0 ; uint64_t inserted_samples_for_deceleration = 0 ; uint64_t removed_samples_for_acceleration = 0 ; uint64_t fec_packets_received = 0 ; uint64_t fec_packets_discarded = 0 ; uint64_t packets_discarded = 0 ; float expand_rate = 0 . 0 f ; float speech_expand_rate = 0 . 0 f ; float secondary_decoded_rate = 0 . 0 f ; float secondary_discarded_rate = 0 . 0 f ; float accelerate_rate = 0 . 0 f ; float preemptive_expand_rate = 0 . 0 f ; int decoding_calls_to_silence_generator = 0 ; int decoding_calls_to_neteq = 0 ; int decoding_normal = 0 ; int decoding_plc = 0 ; int decoding_codec_plc = 0 ; int decoding_cng = 0 ; int decoding_plc_cng = 0 ; int decoding_muted_output = 0 ; int64_t capture_start_ntp_time_ms = - 1 ; uint64_t jitter_buffer_flushes = 0 ; uint64_t delayed_packet_outage_samples = 0 ; double relative_packet_arrival_delay_seconds = 0 . 0 ; int32_t interruption_count = 0 ; int32_t total_interruption_duration_ms = 0 ; absl::optional<int64_t> last_sender_report_timestamp_ms ; absl::optional<int64_t> last_sender_report_remote_timestamp_ms ; uint32_t sender_reports_packets_sent = 0 ; uint64_t sender_reports_bytes_sent = 0 ; uint64_t sender_reports_reports_count = 0 ; absl::optional<webrtc::TimeDelta> round_trip_time ; webrtc::TimeDelta total_round_trip_time = webrtc::)",
    "insertText": "Zero()"
  },
  {
    "label": "VideoSenderInfo()",
    "kind": "Method",
    "detail": "Function (int round_trip_time_measurements = 0 ; } ; struct VideoSenderInfo : public MediaSenderInfo {)",
    "insertText": "VideoSenderInfo()"
  },
  {
    "label": "VideoReceiverInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<SsrcGroup> ssrc_groups ; std::string encoder_implementation_name ; int firs_rcvd = 0 ; int plis_rcvd = 0 ; int send_frame_width = 0 ; int send_frame_height = 0 ; int frames = 0 ; double framerate_input = 0 ; int framerate_sent = 0 ; int aggregated_framerate_sent = 0 ; int nominal_bitrate = 0 ; int adapt_reason = 0 ; int adapt_changes = 0 ; webrtc::QualityLimitationReason quality_limitation_reason = webrtc::QualityLimitationReason::kNone ; std::map<webrtc::QualityLimitationReason,int64_t> quality_limitation_durations_ms ; uint32_t quality_limitation_resolution_changes = 0 ; int avg_encode_ms = 0 ; int encode_usage_percent = 0 ; uint32_t frames_encoded = 0 ; uint32_t key_frames_encoded = 0 ; uint64_t total_encode_time_ms = 0 ; uint64_t total_encoded_bytes_target = 0 ; uint64_t avg_send_delay = 0 ; bool has_entered_low_resolution = false ; absl::optional<uint64_t> qp_sum ; webrtc::VideoContentType content_type = webrtc::VideoContentType::UNSPECIFIED ; uint32_t frames_sent = 0 ; uint32_t huge_frames_sent = 0 ; uint32_t aggregated_huge_frames_sent = 0 ; absl::optional<std::string> rid ; absl::optional<bool> power_efficient_encoder ; } ; struct VideoReceiverInfo : public MediaReceiverInfo {)",
    "insertText": "VideoReceiverInfo()"
  },
  {
    "label": "VoiceMediaInfo()",
    "kind": "Method",
    "detail": "Function (uint32_t frames_assembled_from_multiple_packets = 0 ; double total_inter_frame_delay = 0 ; double total_squared_inter_frame_delay = 0 ; int64_t interframe_delay_max_ms = - 1 ; uint32_t freeze_count = 0 ; uint32_t pause_count = 0 ; uint32_t total_freezes_duration_ms = 0 ; uint32_t total_pauses_duration_ms = 0 ; uint32_t total_frames_duration_ms = 0 ; double sum_squared_frame_durations = 0 . 0 ; uint32_t jitter_ms = 0 ; webrtc::VideoContentType content_type = webrtc::VideoContentType::UNSPECIFIED ; int decode_ms = 0 ; int max_decode_ms = 0 ; int jitter_buffer_ms = 0 ; int min_playout_delay_ms = 0 ; int render_delay_ms = 0 ; int target_delay_ms = 0 ; int current_delay_ms = 0 ; int64_t capture_start_ntp_time_ms = - 1 ; int64_t first_frame_received_to_decoded_ms = - 1 ; absl::optional<webrtc::TimingFrameInfo> timing_frame_info ; } ; struct BandwidthEstimationInfo { int available_send_bandwidth = 0 ; int available_recv_bandwidth = 0 ; int target_enc_bitrate = 0 ; int actual_enc_bitrate = 0 ; int retransmit_bitrate = 0 ; int transmit_bitrate = 0 ; int64_t bucket_delay = 0 ; } ; typedef std::map<int,webrtc::RtpCodecParameters> RtpCodecParametersMap ; struct VoiceMediaInfo {)",
    "insertText": "VoiceMediaInfo()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (senders .)",
    "insertText": "clear()"
  },
  {
    "label": "VideoMediaInfo()",
    "kind": "Method",
    "detail": "Function (} std::vector<VoiceSenderInfo> senders ; std::vector<VoiceReceiverInfo> receivers ; RtpCodecParametersMap send_codecs ; RtpCodecParametersMap receive_codecs ; int32_t device_underrun_count = 0 ; } ; struct VideoMediaInfo {)",
    "insertText": "VideoMediaInfo()"
  },
  {
    "label": "RtpParameters()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoSenderInfo> senders ; std::vector<VideoSenderInfo> aggregated_senders ; std::vector<VideoReceiverInfo> receivers ; RtpCodecParametersMap send_codecs ; RtpCodecParametersMap receive_codecs ; } ; struct RtcpParameters { bool reduced_size = false ; bool remote_estimate = false ; } ; template<class Codec> struct RtpParameters { ~)",
    "insertText": "RtpParameters()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder ost ; ost<<\" { \" ; const char* separator = \" \" ;)",
    "insertText": "for(const auto& entry : ToStringMap())"
  },
  {
    "label": "ToStringMap()",
    "kind": "Method",
    "detail": "Function (} protected : std::map<std::string,std::string>)",
    "insertText": "ToStringMap()"
  },
  {
    "label": "VectorToString()",
    "kind": "Method",
    "detail": "Function (\" extensions \",)",
    "insertText": "VectorToString(extensions)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (params [ \" max_bandwidth_bps \" ] =)",
    "insertText": "ToString(max_bandwidth_bps)"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (params [ \")",
    "insertText": "mid(mid.empty() ? \"<not set>\" : mid)"
  },
  {
    "label": "AudioSendParameters()",
    "kind": "Method",
    "detail": "Function (params [ \" extmap - allow - mixed \" ] = extmap_allow_mixed ? \" true \" : \" false \" ; return params ; } } ; struct AudioSendParameters : RtpSendParameters<AudioCodec> {)",
    "insertText": "AudioSendParameters()"
  },
  {
    "label": "VoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (} ; struct AudioRecvParameters : RtpParameters<AudioCodec> { } ; class VoiceMediaChannel : public MediaChannel,public Delayable { public :)",
    "insertText": "VoiceMediaChannel(webrtc::TaskQueueBase* network_thread, bool enable_dscp = false) : MediaChannel(network_thread, enable_dscp)"
  },
  {
    "label": "VoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VoiceMediaChannel()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendParameters(const AudioSendParameters& params)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const AudioRecvParameters& params)"
  },
  {
    "label": "GetRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpReceiveParameters(uint32_t ssrc)"
  },
  {
    "label": "GetDefaultRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetDefaultRtpReceiveParameters()"
  },
  {
    "label": "SetPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayout(bool playout)"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSend(bool send)"
  },
  {
    "label": "SetAudioSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAudioSend(uint32_t ssrc, bool enable, const AudioOptions* options, AudioSource* source)"
  },
  {
    "label": "SetOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOutputVolume(uint32_t ssrc, double volume)"
  },
  {
    "label": "SetDefaultOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDefaultOutputVolume(double volume)"
  },
  {
    "label": "CanInsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertDtmf()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(uint32_t ssrc, int event, int duration)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VoiceMediaInfo* info, bool get_and_clear_legacy_stats)"
  },
  {
    "label": "SetRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawAudioSink(uint32_t ssrc, std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "SetDefaultRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultRawAudioSink(std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources(uint32_t ssrc)"
  },
  {
    "label": "VideoSendParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct VideoSendParameters : RtpSendParameters<VideoCodec> {)",
    "insertText": "VideoSendParameters()"
  },
  {
    "label": "VideoMediaChannel()",
    "kind": "Method",
    "detail": "Function (} ; struct VideoRecvParameters : RtpParameters<VideoCodec> { } ; class VideoMediaChannel : public MediaChannel,public Delayable { public :)",
    "insertText": "VideoMediaChannel(webrtc::TaskQueueBase* network_thread, bool enable_dscp = false) : MediaChannel(network_thread, enable_dscp)"
  },
  {
    "label": "VideoMediaChannel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VideoMediaChannel()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendParameters(const VideoSendParameters& params)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const VideoRecvParameters& params)"
  },
  {
    "label": "GetSendCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSendCodec(VideoCodec* send_codec)"
  },
  {
    "label": "SetVideoSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoSend(uint32_t ssrc, const VideoOptions* options, rtc::VideoSourceInterface<webrtc::VideoFrame>* source)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSink(uint32_t ssrc, rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "SetDefaultSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "FillBitrateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBitrateInfo(BandwidthEstimationInfo* bwe_info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VideoMediaInfo* info)"
  },
  {
    "label": "SetRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordableEncodedFrameCallback(uint32_t ssrc, std::function<void(const webrtc::RecordableEncodedFrame&)> callback)"
  },
  {
    "label": "ClearRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecordableEncodedFrameCallback(uint32_t ssrc)"
  },
  {
    "label": "RequestRecvKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRecvKeyFrame(uint32_t ssrc)"
  },
  {
    "label": "GenerateSendKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSendKeyFrame(uint32_t ssrc, const std::vector<std::string>& rids)"
  }
]