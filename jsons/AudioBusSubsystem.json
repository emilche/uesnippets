[
  {
    "label": "UAudioBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioBus"
  },
  {
    "label": "FMixerAudioBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerAudioBus"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FAudioBusKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioBusKey"
  },
  {
    "label": "UAudioBusSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioBusSubsystem"
  },
  {
    "label": "FActiveBusData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveBusData"
  },
  {
    "label": "FPendingConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingConnection"
  },
  {
    "label": "FSoundInstanceConnections",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundInstanceConnections"
  },
  {
    "label": "FAudioBusKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / MultithreadedPatching . h \" # include \" Misc / TVariant . h \" # include \" Subsystems / AudioEngineSubsystem . h \" # include \" Templates / TypeHash . h \" # include \" UObject / StrongObjectPtr . h \" # include \" AudioBusSubsystem . generated . h \" class UAudioBus ; namespace Audio { class FMixerAudioBus ; class FMixerSourceManager ; struct FAudioBusKey { uint32 ObjectId = INDEX_NONE ; uint32 InstanceId = INDEX_NONE ;)",
    "insertText": "FAudioBusKey() : InstanceId(InstanceIdCounter++)"
  },
  {
    "label": "FAudioBusKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioBusKey(uint32 InObjectId) : ObjectId(InObjectId)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAudioBusKey& InLHS, const FAudioBusKey& InRHS)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<uint32> InstanceIdCounter ; } ; })",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AUDIOMIXER_API UAudioBusSubsystem()"
  },
  {
    "label": "UAudioBusSubsystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UAudioBusSubsystem()"
  },
  {
    "label": "ShouldCreateSubsystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateSubsystem(UObject* Outer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "StartAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAudioBus(Audio::FAudioBusKey InAudioBusKey, int32 InNumChannels, bool bInIsAutomatic)"
  },
  {
    "label": "StopAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAudioBus(Audio::FAudioBusKey InAudioBusKey)"
  },
  {
    "label": "IsAudioBusActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioBusActive(Audio::FAudioBusKey InAudioBusKey)"
  },
  {
    "label": "AddPatchInputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchInput)",
    "insertText": "AddPatchInputForAudioBus(Audio::FAudioBusKey InAudioBusKey, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "AddPatchOutputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchOutputForAudioBus(Audio::FAudioBusKey InAudioBusKey, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "AddPatchInputForSoundAndAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchInput)",
    "insertText": "AddPatchInputForSoundAndAudioBus(uint64 SoundInstanceID, Audio::FAudioBusKey AudioBusKey, int32 InFrames, int32 NumChannels, float InGain = 1.f)"
  },
  {
    "label": "AddPatchOutputForSoundAndAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchOutputForSoundAndAudioBus(uint64 SoundInstanceID, Audio::FAudioBusKey AudioBusKey, int32 InFrames, int32 NumChannels, float InGain = 1.f)"
  },
  {
    "label": "ConnectPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectPatches(uint64 SoundInstanceID)"
  },
  {
    "label": "RemoveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSound(uint64 SoundInstanceID)"
  },
  {
    "label": "InitDefaultAudioBuses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDefaultAudioBuses()"
  },
  {
    "label": "ShutdownDefaultAudioBuses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownDefaultAudioBuses()"
  },
  {
    "label": "AddPendingConnection()",
    "kind": "Method",
    "detail": "Function (private : struct FActiveBusData { Audio::FAudioBusKey BusKey = 0 ; int32 NumChannels = 0 ; bool bIsAutomatic = false ; } ; TArray<TStrongObjectPtr<UAudioBus>> DefaultAudioBuses ; TMap<Audio::FAudioBusKey,FActiveBusData> ActiveAudioBuses_GameThread ; struct FPendingConnection { using FPatchVariant = TVariant<Audio::FPatchInput,Audio::FPatchOutputStrongPtr> ; FPatchVariant PatchVariant ; Audio::FAudioBusKey AudioBusKey ; int32 BlockSizeFrames = 0 ; int32 NumChannels = 0 ; bool bIsAutomatic = false ; } ; void)",
    "insertText": "AddPendingConnection(uint64 SoundInstanceID, FPendingConnection&& PendingConnection)"
  },
  {
    "label": "ExtractPendingConnectionsIfReady()",
    "kind": "Method",
    "detail": "Function (struct FSoundInstanceConnections { TArray<FPendingConnection> PendingConnections ; } ; TArray<FPendingConnection>)",
    "insertText": "ExtractPendingConnectionsIfReady(uint64 SoundInstanceID)"
  }
]