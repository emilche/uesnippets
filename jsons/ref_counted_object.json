[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "RefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedObject"
  },
  {
    "label": "P0",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P0"
  },
  {
    "label": "P1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P1"
  },
  {
    "label": "FinalRefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FinalRefCountedObject"
  },
  {
    "label": "RefCountedObject()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_REF_COUNTED_OBJECT_H_ # define RTC_BASE_REF_COUNTED_OBJECT_H_ # include \" api / scoped_refptr . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / ref_counter . h \" namespace rtc { template<class T> class RefCountedObject : public T { public :)",
    "insertText": "RefCountedObject()"
  },
  {
    "label": "RefCountedObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedObject(const RefCountedObject&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RefCountedObject&)",
    "insertText": "operator(const RefCountedObject&)"
  },
  {
    "label": "RefCountedObject()",
    "kind": "Method",
    "detail": "Function (template<class P0>)",
    "insertText": "RefCountedObject(P0&& p0) : T(std::forward<P0>(p0))"
  },
  {
    "label": "RefCountedObject()",
    "kind": "Method",
    "detail": "Function (} template<class P0,class P1,class . . . Args>)",
    "insertText": "RefCountedObject(P0&& p0, P1&& p1, Args&&... args) : T(std::forward<P0>(p0), std::forward<P1>(p1), std::forward<Args>(args)...)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRef()"
  },
  {
    "label": "IncRef()",
    "kind": "Method",
    "detail": "Function (ref_count_ .)",
    "insertText": "IncRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} RefCountReleaseStatus)",
    "insertText": "Release()"
  },
  {
    "label": "DecRef()",
    "kind": "Method",
    "detail": "Function (const auto status = ref_count_ .)",
    "insertText": "DecRef()"
  },
  {
    "label": "HasOneRef()",
    "kind": "Method",
    "detail": "Function (delete this ; } return status ; } bool)",
    "insertText": "HasOneRef()"
  },
  {
    "label": "FinalRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} webrtc::webrtc_impl::RefCounter ref_count_ { 0 } ; } ; template<class T> class FinalRefCountedObject final : public T { public : using T::T ;)",
    "insertText": "FinalRefCountedObject(T&& other) : T(std::move(other))"
  },
  {
    "label": "FinalRefCountedObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FinalRefCountedObject(const FinalRefCountedObject&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FinalRefCountedObject&)",
    "insertText": "operator(const FinalRefCountedObject&)"
  },
  {
    "label": "FinalRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} private : ~)",
    "insertText": "FinalRefCountedObject()"
  }
]