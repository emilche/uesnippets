[
  {
    "label": "CopyGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyGroupOp"
  },
  {
    "label": "SetGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupOp"
  },
  {
    "label": "SetGroupFromIndexOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupFromIndexOp"
  },
  {
    "label": "SetGroupByFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupByFilterOp"
  },
  {
    "label": "deleteMissingPointGroups()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_GROUP_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_GROUP_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include \" IndexIterator . h \" # include \" IndexFilter . h \" # include \" AttributeSet . h \" # include \" PointDataGrid . h \" # include \" PointAttribute . h \" # include \" PointCount . h \" # include<tbb / parallel_reduce . h> # include<algorithm> # include<random> # include<string> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { void)",
    "insertText": "deleteMissingPointGroups(std::vector<std::string>& groups, const AttributeSet::Descriptor& descriptor)"
  },
  {
    "label": "appendGroup()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "appendGroup(PointDataTreeT& tree, const Name& group)"
  },
  {
    "label": "appendGroups()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "appendGroups(PointDataTreeT& tree, const std::vector<Name>& groups)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropGroup(PointDataTreeT& tree, const Name& group, const bool compact = true)"
  },
  {
    "label": "dropGroups()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropGroups(PointDataTreeT& tree, const std::vector<Name>& groups)"
  },
  {
    "label": "dropGroups()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropGroups(PointDataTreeT& tree)"
  },
  {
    "label": "compactGroups()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "compactGroups(PointDataTreeT& tree)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT,PointIndexTreeT> void)",
    "insertText": "setGroup(PointDataTreeT& tree, const PointIndexTreeT& indexTree, const std::vector<short>& membership, const Name& group, const bool remove = false)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "setGroup(PointDataTreeT& tree, const Name& group, const bool member = true)"
  },
  {
    "label": "setGroupByFilter()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT,FilterT> void)",
    "insertText": "setGroupByFilter(PointDataTreeT& tree, const Name& group, const FilterT& filter)"
  },
  {
    "label": "CopyGroupOp()",
    "kind": "Method",
    "detail": "Function (namespace point_group_internal { template<PointDataTreeType> struct CopyGroupOp { using LeafManagerT = tree::LeafManager<PointDataTreeType> ; using LeafRangeT = LeafManagerT::LeafRange ; using GroupIndex = AttributeSet::Descriptor::GroupIndex ;)",
    "insertText": "CopyGroupOp(const GroupIndex& targetIndex, const GroupIndex& sourceIndex) : mTargetIndex(targetIndex) , mSourceIndex(sourceIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const typename LeafManagerT::LeafRange& range)"
  },
  {
    "label": "groupHandle()",
    "kind": "Method",
    "detail": "Function (GroupHandle sourceGroup = leaf ->)",
    "insertText": "groupHandle(mSourceIndex)"
  },
  {
    "label": "groupWriteHandle()",
    "kind": "Method",
    "detail": "Function (GroupWriteHandle targetGroup = leaf ->)",
    "insertText": "groupWriteHandle(mTargetIndex)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const bool groupOn = sourceGroup .)",
    "insertText": "get(*iter)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (targetGroup .)",
    "insertText": "set(*iter, groupOn)"
  },
  {
    "label": "SetGroupOp()",
    "kind": "Method",
    "detail": "Function (} } } const GroupIndex mTargetIndex ; const GroupIndex mSourceIndex ; } ; template<PointDataTreeT,bool Member> struct SetGroupOp { using LeafManagerT = tree::LeafManager<PointDataTreeT> ; using GroupIndex = AttributeSet::Descriptor::GroupIndex ;)",
    "insertText": "SetGroupOp(const AttributeSet::Descriptor::GroupIndex& index) : mIndex(index)"
  },
  {
    "label": "group()",
    "kind": "Method",
    "detail": "Function (GroupWriteHandle)",
    "insertText": "group(leaf->groupWriteHandle(mIndex))"
  },
  {
    "label": "collapse()",
    "kind": "Method",
    "detail": "Function (group .)",
    "insertText": "collapse(Member)"
  },
  {
    "label": "SetGroupFromIndexOp()",
    "kind": "Method",
    "detail": "Function (} } const GroupIndex& mIndex ; } ; template<PointDataTreeT,PointIndexTreeT,bool Remove> struct SetGroupFromIndexOp { using LeafManagerT = tree::LeafManager<PointDataTreeT> ; using LeafRangeT = LeafManagerT::LeafRange ; using PointIndexLeafNode = PointIndexTreeT::LeafNodeType ; using IndexArray = PointIndexLeafNode::IndexArray ; using GroupIndex = AttributeSet::Descriptor::GroupIndex ; using MembershipArray = std::vector<short> ;)",
    "insertText": "SetGroupFromIndexOp(const PointIndexTreeT& indexTree, const MembershipArray& membership, const GroupIndex& index) : mIndexTree(indexTree) , mMembership(membership) , mIndex(index)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const PointIndexLeafNode* pointIndexLeaf = mIndexTree .)",
    "insertText": "probeConstLeaf(leaf->origin())"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (Index64 index = 0 ; const IndexArray& indices = pointIndexLeaf ->)",
    "insertText": "indices()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (group .)",
    "insertText": "set(static_cast<Index>(index), mMembership[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mMembership[i] == short(1))"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (group .)",
    "insertText": "set(static_cast<Index>(index), short(1))"
  },
  {
    "label": "compact()",
    "kind": "Method",
    "detail": "Function (} index + + ; } group .)",
    "insertText": "compact()"
  },
  {
    "label": "SetGroupByFilterOp()",
    "kind": "Method",
    "detail": "Function (} } const PointIndexTreeT& mIndexTree ; const MembershipArray& mMembership ; const GroupIndex& mIndex ; } ; template<PointDataTreeT,FilterT,IterT = PointDataTreeT::LeafNodeType::ValueAllCIter> struct SetGroupByFilterOp { using LeafManagerT = tree::LeafManager<PointDataTreeT> ; using LeafRangeT = LeafManagerT::LeafRange ; using LeafNodeT = PointDataTreeT::LeafNodeType ; using GroupIndex = AttributeSet::Descriptor::GroupIndex ;)",
    "insertText": "SetGroupByFilterOp(const GroupIndex& index, const FilterT& filter) : mIndex(index) , mFilter(filter)"
  },
  {
    "label": "FilterT()",
    "kind": "Method",
    "detail": "Function (auto iter = leaf -> template beginIndex<IterT,)",
    "insertText": "FilterT(mFilter)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (group .)",
    "insertText": "set(*iter, true)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot use an empty group name as a key.\")"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (} auto iter = tree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const AttributeSet& attributeSet = iter ->)",
    "insertText": "attributeSet()"
  },
  {
    "label": "descriptorPtr()",
    "kind": "Method",
    "detail": "Function (auto descriptor = attributeSet .)",
    "insertText": "descriptorPtr()"
  },
  {
    "label": "unusedGroups()",
    "kind": "Method",
    "detail": "Function (const bool hasUnusedGroup = descriptor ->)",
    "insertText": "unusedGroups()"
  },
  {
    "label": "uniqueName()",
    "kind": "Method",
    "detail": "Function (const Name groupName = descriptor ->)",
    "insertText": "uniqueName(\"__group\")"
  },
  {
    "label": "duplicateAppend()",
    "kind": "Method",
    "detail": "Function (descriptor = descriptor ->)",
    "insertText": "duplicateAppend(groupName, GroupAttributeArray::attributeType())"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const size_t pos = descriptor ->)",
    "insertText": "find(groupName)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<PointDataTreeT>)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](typename PointDataTreeT::LeafNodeType& leaf, size_t ) { auto expected = leaf.attributeSet().descriptorPtr(); leaf.appendAttribute(*expected, descriptor, pos); }, true)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "makeDescriptorUnique(tree)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(descriptor->unusedGroups() > 0)"
  },
  {
    "label": "unusedGroupOffset()",
    "kind": "Method",
    "detail": "Function (const size_t offset = descriptor ->)",
    "insertText": "unusedGroupOffset()"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (descriptor ->)",
    "insertText": "setGroup(group, offset)"
  },
  {
    "label": "appendGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendGroup(tree, name)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (} } template<PointDataTreeT> void)",
    "insertText": "dropGroup(PointDataTreeT& tree, const Name& group, const bool compact)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Descriptor = AttributeSet::Descriptor ;)",
    "insertText": "if(group.empty())"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (descriptor ->)",
    "insertText": "dropGroup(group)"
  },
  {
    "label": "compactGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compactGroups(tree)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroup(tree, name, false)"
  },
  {
    "label": "clearGroups()",
    "kind": "Method",
    "detail": "Function (descriptor ->)",
    "insertText": "clearGroups()"
  },
  {
    "label": "groupAttributeIndices()",
    "kind": "Method",
    "detail": "Function (std::vector<size_t> indices = attributeSet .)",
    "insertText": "groupAttributeIndices()"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(tree, indices)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Name sourceName ; size_t sourceOffset,targetOffset ;)",
    "insertText": "while(descriptor->requiresGroupMove(sourceName, sourceOffset, targetOffset))"
  },
  {
    "label": "groupIndex()",
    "kind": "Method",
    "detail": "Function (const GroupIndex sourceIndex = attributeSet .)",
    "insertText": "groupIndex(sourceOffset)"
  },
  {
    "label": "groupIndex()",
    "kind": "Method",
    "detail": "Function (const GroupIndex targetIndex = attributeSet .)",
    "insertText": "groupIndex(targetOffset)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (CopyGroupOp<PointDataTreeT>)",
    "insertText": "copy(targetIndex, sourceIndex)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafManager.leafRange(), copy)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (descriptor ->)",
    "insertText": "setGroup(sourceName, targetOffset)"
  },
  {
    "label": "unusedGroups()",
    "kind": "Method",
    "detail": "Function (const size_t totalAttributesToDrop = descriptor ->)",
    "insertText": "unusedGroups() / descriptor->groupBits()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(totalAttributesToDrop <= indices.size())"
  },
  {
    "label": "indicesToDrop()",
    "kind": "Method",
    "detail": "Function (const std::vector<size_t>)",
    "insertText": "indicesToDrop(indices.end() - totalAttributesToDrop, indices.end())"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropAttributes(tree, indicesToDrop)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (} template<PointDataTreeT,PointIndexTreeT> void)",
    "insertText": "setGroup(PointDataTreeT& tree, const PointIndexTreeT& indexTree, const std::vector<short>& membership, const Name& group, const bool remove)"
  },
  {
    "label": "descriptor()",
    "kind": "Method",
    "detail": "Function (const Descriptor& descriptor = attributeSet .)",
    "insertText": "descriptor()"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(LookupError, \"Group must exist on Tree before defining membership.\")"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (} { using IndexTreeManager = tree::LeafManager<const PointIndexTreeT> ; IndexTreeManager)",
    "insertText": "leafManager(indexTree)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (const int64_t max =)",
    "insertText": "parallel_reduce(leafManager.leafRange(), -1, [](const typename IndexTreeManager::LeafRange& range, int64_t value) -> int64_t { for (auto leaf = range.begin(); leaf; ++leaf) { auto it = std::max_element(leaf->indices().begin(), leaf->indices().end()); value = std::max(value, static_cast<int64_t>(*it)); } return value; }, [](const int64_t a, const int64_t b) { return std::max(a, b); })"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(IndexError, \"Group membership vector size must be larger than \" \" the maximum index within the provided index tree.\")"
  },
  {
    "label": "groupIndex()",
    "kind": "Method",
    "detail": "Function (} } const Descriptor::GroupIndex index = attributeSet .)",
    "insertText": "groupIndex(group)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (SetGroupFromIndexOp<PointDataTreeT,PointIndexTreeT,true>)",
    "insertText": "set(indexTree, membership, index)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafManager.leafRange(), set)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (} } template<PointDataTreeT> void)",
    "insertText": "setGroup(PointDataTreeT& tree, const Name& group, const bool member)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (SetGroupByFilterOp<PointDataTreeT,FilterT>)",
    "insertText": "set(index, filter)"
  },
  {
    "label": "setGroupByRandomTarget()",
    "kind": "Method",
    "detail": "Function (} template<PointDataTreeT> void)",
    "insertText": "setGroupByRandomTarget(PointDataTreeT& tree, const Name& group, const Index64 targetPoints, const unsigned int seed = 0)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (using RandomFilter = RandomLeafFilter<PointDataTreeT,std::mt19937> ; RandomFilter)",
    "insertText": "filter(tree, targetPoints, seed)"
  },
  {
    "label": "RandomFilter()",
    "kind": "Method",
    "detail": "Function (setGroupByFilter<PointDataTreeT,)",
    "insertText": "RandomFilter(tree, group, filter)"
  },
  {
    "label": "setGroupByRandomPercentage()",
    "kind": "Method",
    "detail": "Function (} template<PointDataTreeT> void)",
    "insertText": "setGroupByRandomPercentage(PointDataTreeT& tree, const Name& group, const float percentage = 10.0f, const unsigned int seed = 0)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (using RandomFilter = RandomLeafFilter<PointDataTreeT,std::mt19937> ; const int currentPoints = static_cast<)",
    "insertText": "int(pointCount(tree))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int targetPoints =)",
    "insertText": "int(math::Round((percentage * float(currentPoints))/100.0f))"
  }
]