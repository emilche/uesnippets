[
  {
    "label": "CopyGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyGroupOp"
  },
  {
    "label": "SetGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupOp"
  },
  {
    "label": "SetGroupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupOp"
  },
  {
    "label": "SetGroupFromIndexOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupFromIndexOp"
  },
  {
    "label": "SetGroupFromIndexOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupFromIndexOp"
  },
  {
    "label": "SetGroupByFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupByFilterOp"
  },
  {
    "label": "SetGroupByFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetGroupByFilterOp"
  },
  {
    "label": "deleteMissingPointGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteMissingPointGroups(   std::vector<std::string>& groups,\n                                        const AttributeSet::Descriptor& descriptor)"
  },
  {
    "label": "appendGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendGroup(PointDataTreeT& tree,\n                        const Name& group)"
  },
  {
    "label": "appendGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendGroups(PointDataTreeT& tree,\n                         const std::vector<Name>& groups)"
  },
  {
    "label": "dropGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroup(  PointDataTreeT& tree,\n                        const Name& group,\n                        const bool compact = true)"
  },
  {
    "label": "dropGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroups( PointDataTreeT& tree,\n                        const std::vector<Name>& groups)"
  },
  {
    "label": "dropGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroups( PointDataTreeT& tree)"
  },
  {
    "label": "compactGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compactGroups(PointDataTreeT& tree)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroup(   PointDataTreeT& tree,\n                        const PointIndexTreeT& indexTree,\n                        const std::vector<short>& membership,\n                        const Name& group,\n                        const bool remove = false)"
  },
  {
    "label": "setGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroup(   PointDataTreeT& tree,\n                        const Name& group,\n                        const bool member = true)"
  },
  {
    "label": "setGroupByFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroupByFilter(   PointDataTreeT& tree,\n                                const Name& group,\n                                const FilterT& filter)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<PointDataTreeT>)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (map)",
    "insertText": "makeDescriptorUnique(tree)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (map)",
    "insertText": "makeDescriptorUnique(tree)"
  },
  {
    "label": "compactGroups()",
    "kind": "Method",
    "detail": "Function (efficiency)",
    "insertText": "compactGroups(tree)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (map)",
    "insertText": "makeDescriptorUnique(tree)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (arrays)",
    "insertText": "dropAttributes(tree, indices)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (map)",
    "insertText": "makeDescriptorUnique(tree)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (CopyGroupOp<PointDataTreeT>)",
    "insertText": "copy(targetIndex, sourceIndex)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (IndexTreeManager)",
    "insertText": "leafManager(indexTree)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (true>)",
    "insertText": "set(indexTree, membership, index)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (false>)",
    "insertText": "set(indexTree, membership, index)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (FilterT>)",
    "insertText": "set(index, filter)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (RandomFilter)",
    "insertText": "filter(tree, targetPoints, seed)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (RandomFilter)",
    "insertText": "filter(tree, targetPoints, seed)"
  }
]