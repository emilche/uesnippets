[
  {
    "label": "FTimecode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimecode"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" GenericPlatform / GenericPlatformMath . h \" # include \" HAL / Platform . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Timespan . h \" struct FTimecode {)",
    "insertText": "FTimecode() : Hours(0) , Minutes(0) , Seconds(0) , Frames(0) , Subframe(0) , bDropFrameFormat(false)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimecode(int32 InHours, int32 InMinutes, int32 InSeconds, int32 InFrames, bool InbDropFrame) : Hours(InHours) , Minutes(InMinutes) , Seconds(InSeconds) , Frames(InFrames) , bDropFrameFormat(InbDropFrame)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimecode(int32 InHours, int32 InMinutes, int32 InSeconds, int32 InFrames, float InSubframe, bool InbDropFrame) : Hours(InHours) , Minutes(InMinutes) , Seconds(InSeconds) , Frames(InFrames) , Subframe(InSubframe) , bDropFrameFormat(InbDropFrame)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimecode(double InSeconds, const FFrameRate& InFrameRate, bool InbDropFrame, bool InbRollover)"
  },
  {
    "label": "Modf()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfSecondsPerDay = 6 0* 6 0* 2 4 ; double IntegralPart = 0 . 0 ; double Fractional =)",
    "insertText": "Modf(InSeconds, &IntegralPart)"
  },
  {
    "label": "CurrentRolloverSeconds()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "CurrentRolloverSeconds(int32)"
  },
  {
    "label": "InSeconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InSeconds(double)"
  },
  {
    "label": "NumberOfFrames()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "NumberOfFrames(int32)FMath::RoundToDouble(InSeconds * InFrameRate.AsDecimal())"
  },
  {
    "label": "FromFrameNumber()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FromFrameNumber(FFrameNumber(NumberOfFrames), InFrameRate, InbDropFrame)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimecode(double InSeconds, const FFrameRate& InFrameRate, bool InbRollover) : FTimecode(InSeconds, InFrameRate, UseDropFormatTimecode(InFrameRate), InbRollover)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFrameRate& A, const FFrameRate& B)"
  },
  {
    "label": "ToFrameNumber()",
    "kind": "Method",
    "detail": "Function (public : FFrameNumber)",
    "insertText": "ToFrameNumber(const FFrameRate& InFrameRate)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfFramesInSecond =)",
    "insertText": "CeilToInt((float)InFrameRate.AsDecimal())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfFramesInMinute = NumberOfFramesInSecond* 6 0 ; const int32 NumberOfFramesInHour = NumberOfFramesInMinute* 6 0 ;)",
    "insertText": "if(NumberOfFramesInSecond <= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int32 SafeSeconds = Seconds + Frames / NumberOfFramesInSecond ; int32 SafeFrames = Frames % NumberOfFramesInSecond ; int32 SafeMinutes = Minutes + SafeSeconds / 6 0 ; SafeSeconds = SafeSeconds % 6 0 ; int32 SafeHours = Hours + SafeMinutes / 6 0 ; SafeMinutes = SafeMinutes % 6 0 ;)",
    "insertText": "if(bDropFrameFormat)"
  },
  {
    "label": "TotalMinutes()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfTimecodesToDrop = NumberOfFramesInSecond<= 3 0 ? 2 : 4 ; int32)",
    "insertText": "TotalMinutes(SafeHours * 60)"
  },
  {
    "label": "NumberOfTimecodesToDrop()",
    "kind": "Method",
    "detail": "Function (int32 TotalDroppedFrames =)",
    "insertText": "NumberOfTimecodesToDrop(TotalMinutes - (int32)FMath::RoundToZero(TotalMinutes / 10.0))"
  },
  {
    "label": "TotalFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TotalFrames(SafeHours * NumberOfFramesInHour) + (SafeMinutes * NumberOfFramesInMinute) + (SafeSeconds * NumberOfFramesInSecond)"
  },
  {
    "label": "TotalFrames()",
    "kind": "Method",
    "detail": "Function (} else { int32)",
    "insertText": "TotalFrames(SafeHours *NumberOfFramesInHour) + (SafeMinutes * NumberOfFramesInMinute) + (SafeSeconds * NumberOfFramesInSecond)"
  },
  {
    "label": "FromFrameNumber()",
    "kind": "Method",
    "detail": "Function (} } FTimecode)",
    "insertText": "FromFrameNumber(const FFrameNumber& InFrameNumber, const FFrameRate& InFrameRate, bool InbDropFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InbDropFrame)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 NumberOfTimecodesToDrop = NumberOfFramesInSecond<= 3 0 ? 2 : 4 ; const int32 NumTrueFramesPerTenMinutes =)",
    "insertText": "FloorToInt((float)((60 * 10) * InFrameRate.AsDecimal()))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const int32 NumTimesSkippedDroppingFrames =)",
    "insertText": "Abs(InFrameNumber.Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int FrameInTrueFrames = OffsetFrame % NumTrueFramesPerTenMinutes ;)",
    "insertText": "if(FrameInTrueFrames < NumberOfTimecodesToDrop)"
  },
  {
    "label": "NumTrueFramesPerMinute()",
    "kind": "Method",
    "detail": "Function (OffsetFrame + = NumFramesSkippedTotal ; } else { const uint32)",
    "insertText": "NumTrueFramesPerMinute(uint32)FMath::FloorToInt(60 * (float)InFrameRate.AsDecimal())"
  },
  {
    "label": "CurrentMinuteOfTen()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CurrentMinuteOfTen(FrameInTrueFrames - NumberOfTimecodesToDrop)"
  },
  {
    "label": "NumFramesSkippedTotal()",
    "kind": "Method",
    "detail": "Function (int NumAddedFrames =)",
    "insertText": "NumFramesSkippedTotal(NumberOfTimecodesToDrop * CurrentMinuteOfTen)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (OffsetFrame + = NumAddedFrames ; } OffsetFrame* =)",
    "insertText": "Sign(InFrameNumber.Value)"
  },
  {
    "label": "Hours()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Hours(int32)FMath::RoundToZero(OffsetFrame / (double)NumberOfFramesInHour)"
  },
  {
    "label": "Minutes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Minutes(int32)FMath::RoundToZero(OffsetFrame / (double)NumberOfFramesInMinute)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Seconds(int32)FMath::RoundToZero(OffsetFrame / (double)NumberOfFramesInSecond)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (int32 Frames = OffsetFrame % NumberOfFramesInSecond ; return)",
    "insertText": "FTimecode(Hours, Minutes, Seconds, Frames, true)"
  },
  {
    "label": "Hours()",
    "kind": "Method",
    "detail": "Function (} else { int32)",
    "insertText": "Hours(int32)FMath::RoundToZero(InFrameNumber.Value / (double)NumberOfFramesInHour)"
  },
  {
    "label": "Minutes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Minutes(int32)FMath::RoundToZero(InFrameNumber.Value / (double)NumberOfFramesInMinute)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Seconds(int32)FMath::RoundToZero(InFrameNumber.Value / (double)NumberOfFramesInSecond)"
  },
  {
    "label": "FTimecode()",
    "kind": "Method",
    "detail": "Function (int32 Frames = InFrameNumber . Value % NumberOfFramesInSecond ; return)",
    "insertText": "FTimecode(Hours, Minutes, Seconds, Frames, false)"
  },
  {
    "label": "FromFrameNumber()",
    "kind": "Method",
    "detail": "Function (} } FTimecode)",
    "insertText": "FromFrameNumber(const FFrameNumber& InFrameNumber, const FFrameRate& InFrameRate)"
  },
  {
    "label": "FromFrameTime()",
    "kind": "Method",
    "detail": "Function (} FTimecode)",
    "insertText": "FromFrameTime(const FFrameTime& InFrameTime, const FFrameRate& InFrameRate, TOptional<bool> bDropFrame = {})"
  },
  {
    "label": "UseDropFormatTimecode()",
    "kind": "Method",
    "detail": "Function (bool bShouldUseDropFrame = bDropFrame ?* bDropFrame :)",
    "insertText": "UseDropFormatTimecode(InFrameRate)"
  },
  {
    "label": "FromFrameNumber()",
    "kind": "Method",
    "detail": "Function (FTimecode Timecode =)",
    "insertText": "FromFrameNumber(InFrameTime.FloorToFrame(), InFrameRate, bShouldUseDropFrame)"
  },
  {
    "label": "GetSubFrame()",
    "kind": "Method",
    "detail": "Function (Timecode . Subframe = InFrameTime .)",
    "insertText": "GetSubFrame()"
  },
  {
    "label": "ToFrameNumber()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber ConvertedFrameNumber =)",
    "insertText": "ToFrameNumber(InFrameRate)"
  },
  {
    "label": "AsInterval()",
    "kind": "Method",
    "detail": "Function (const double NumberOfSeconds = ConvertedFrameNumber . Value* InFrameRate .)",
    "insertText": "AsInterval()"
  },
  {
    "label": "FromTimespan()",
    "kind": "Method",
    "detail": "Function (} FTimecode)",
    "insertText": "FromTimespan(const FTimespan& InTimespan, const FFrameRate& InFrameRate, bool InbDropFrame, bool InbRollover)"
  },
  {
    "label": "FromTimespan()",
    "kind": "Method",
    "detail": "Function (} FTimecode)",
    "insertText": "FromTimespan(const FTimespan& InTimespan, const FFrameRate& InFrameRate, bool InbRollover)"
  },
  {
    "label": "IsDropFormatTimecodeSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDropFormatTimecodeSupported(const double InRate)"
  },
  {
    "label": "IsDropFormatTimecodeSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDropFormatTimecodeSupported(const FFrameRate& InFrameRate)"
  },
  {
    "label": "AsDecimal()",
    "kind": "Method",
    "detail": "Function (const double InRate = InFrameRate .)",
    "insertText": "AsDecimal()"
  },
  {
    "label": "UseDropFormatTimecode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseDropFormatTimecode(const FFrameRate& InFrameRate)"
  },
  {
    "label": "UseDropFormatTimecodeByDefaultWhenSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseDropFormatTimecodeByDefaultWhenSupported()"
  },
  {
    "label": "IsValidDropFormatTimecodeRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidDropFormatTimecodeRate(const FString& InRateString)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FString NTSC_30_DF = \" 2 9 . 9 7 df \" ; const FString NTSC_60_DF = \" 5 9 . 9 4 df \" ;)",
    "insertText": "return(InRateString == NTSC_30_DF || InRateString == NTSC_60_DF)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(bool bForceSignDisplay = false, bool bAlwaysDisplaySubframe = false)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (bool bHasNegativeComponent = Hours<0 | | Minutes<0 | | Seconds<0 | | Frames<0 ; const TCHAR* NegativeSign =)",
    "insertText": "TEXT(\"- \")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* PositiveSign =)",
    "insertText": "TEXT(\"+ \")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* SignText =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SignText = NegativeSign ; } else)",
    "insertText": "if(bForceSignDisplay)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Appendf(TEXT(\"%s%02d:%02d:%02d;%02d\"), SignText, FMath::Abs(Hours), FMath::Abs(Minutes), FMath::Abs(Seconds), FMath::Abs(Frames))"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (} else { Builder .)",
    "insertText": "Appendf(TEXT(\"%s%02d:%02d:%02d:%02d\"), SignText, FMath::Abs(Hours), FMath::Abs(Minutes), FMath::Abs(Seconds), FMath::Abs(Frames))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bAlwaysDisplaySubframe || Subframe > 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 ClampedSubframe = static_cast<)",
    "insertText": "int32(FMath::Clamp(100*Subframe,0,99))"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Appendf(TEXT(\".%02d\"), ClampedSubframe)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} return Builder .)",
    "insertText": "ToString()"
  },
  {
    "label": "ParseTimecode()",
    "kind": "Method",
    "detail": "Function (} TOptional<FTimecode>)",
    "insertText": "ParseTimecode(const FStringView InTimecodeString)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "InAbsRange()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "InAbsRange(int32 Val, int32 MinVal, int32 MaxVal)"
  },
  {
    "label": "InAbsRange()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "InAbsRange(Hours,0,23) && InAbsRange(Minutes, 0, 59) && InAbsRange(Seconds, 0, 59)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : int32 Hours ; int32 Minutes ; int32 Seconds ; int32 Frames ; float Subframe = 0 ; bool bDropFrameFormat ; bool)",
    "insertText": "operator(const FTimecode& A, const FTimecode& B)"
  }
]