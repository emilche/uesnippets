[
  {
    "label": "pivotL()",
    "kind": "Method",
    "detail": "Function (# ifndef SPARSELU_PIVOTL_H # define SPARSELU_PIVOTL_H namespace Eigen { namespace internal { template<Scalar,StorageIndex> Index SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "pivotL(const Index jcol, const RealScalar& diagpivotthresh, IndexVector& perm_r, IndexVector& iperm_c, Index& pivrow, GlobalLU_t& glu)"
  },
  {
    "label": "fsupc()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "fsupc(glu.xsup)((glu.supno)(jcol))"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (Index nsupc = jcol - fsupc ; Index lptr = glu .)",
    "insertText": "xlsub(fsupc)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (Index nsupr = glu .)",
    "insertText": "xlsub(fsupc+1)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (Index lda = glu .)",
    "insertText": "xlusup(fsupc+1) - glu.xlusup(fsupc)"
  },
  {
    "label": "lu_sup_ptr()",
    "kind": "Method",
    "detail": "Function (Scalar*)",
    "insertText": "lu_sup_ptr(glu.lusup.data()[glu.xlusup(fsupc)])"
  },
  {
    "label": "lu_col_ptr()",
    "kind": "Method",
    "detail": "Function (Scalar*)",
    "insertText": "lu_col_ptr(glu.lusup.data()[glu.xlusup(jcol)])"
  },
  {
    "label": "lsub_ptr()",
    "kind": "Method",
    "detail": "Function (StorageIndex*)",
    "insertText": "lsub_ptr(glu.lsub.data()[lptr])"
  },
  {
    "label": "iperm_c()",
    "kind": "Method",
    "detail": "Function (Index diagind =)",
    "insertText": "iperm_c(jcol)"
  },
  {
    "label": "pivmax()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "pivmax(-1.0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index pivptr = nsupc ; Index diag = emptyIdxLU ; RealScalar rtemp ; Index isub,icol,itemp,k ;)",
    "insertText": "for(isub = nsupc; isub < nsupr; ++isub)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (using std::abs ; rtemp =)",
    "insertText": "abs(lu_col_ptr[isub])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pivmax = rtemp ; pivptr = isub ; })",
    "insertText": "if(lsub_ptr[isub] == diagind)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pivmax <= RealScalar(0.0))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (pivrow = pivmax<)",
    "insertText": "RealScalar(0.0)"
  },
  {
    "label": "perm_r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "perm_r(pivrow) = StorageIndex(jcol)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} RealScalar thresh = diagpivotthresh* pivmax ; {)",
    "insertText": "if(diag >= 0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (using std::abs ; rtemp =)",
    "insertText": "abs(lu_col_ptr[diag])"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lsub_ptr[pivptr], lsub_ptr[nsupc])"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (itemp = pivptr + icol* lda ;)",
    "insertText": "swap(lu_sup_ptr[itemp], lu_sup_ptr[nsupc + icol * lda])"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} } Scalar temp =)",
    "insertText": "Scalar(1.0)"
  }
]