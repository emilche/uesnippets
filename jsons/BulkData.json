[
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FIoChunkId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoChunkId"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "FIoOffsetAndLength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoOffsetAndLength"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "IMappedFileRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileRegion"
  },
  {
    "label": "IBulkDataIORequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBulkDataIORequest"
  },
  {
    "label": "EBulkDataFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataFlags"
  },
  {
    "label": "EBulkDataLockStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataLockStatus"
  },
  {
    "label": "EBulkDataLockFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataLockFlags"
  },
  {
    "label": "FOwnedBulkDataPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOwnedBulkDataPtr"
  },
  {
    "label": "FBulkMetaResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkMetaResource"
  },
  {
    "label": "FBulkMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkMetaData"
  },
  {
    "label": "FBulkDataSerializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkDataSerializationParams"
  },
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FAllocatedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocatedPtr"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FExportArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportArchive"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FBulkDataBatchRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataBatchRequest"
  },
  {
    "label": "TBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBulkData"
  },
  {
    "label": "FFormatContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatContainer"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FBulkDataRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRequest"
  },
  {
    "label": "IHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHandle"
  },
  {
    "label": "FBatchHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchHandle"
  },
  {
    "label": "FBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuilder"
  },
  {
    "label": "FBatchBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchBuilder"
  },
  {
    "label": "FScatterGatherBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScatterGatherBuilder"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequest"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncFileHandle . h \" # include \" BulkDataBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / StringView . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / MemoryBase . h \" # include \" IO / IoChunkId . h \" # include \" IO / IoDispatcherPriority . h \" # include \" IO / PackageId . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CompressionFlags . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / OptionalFwd . h \" # include \" Misc / PackagePath . h \" # include \" Misc / PackageSegment . h \" # include \" Serialization / Archive . h \" # include \" Serialization / BulkDataCookedIndex . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / FileRegions . h \" # include \" Templates / Function . h \" # include \" Templates / IsPODType . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / PimplPtr . h \" # include \" UObject / NameTypes . h \" class FIoBuffer ; class FIoChunkId ; class FLinkerLoad ; class FOutputDevice ; class IAsyncReadFileHandle ; class IAsyncReadRequest ; class UObject ; struct FTimespan ; struct FIoOffsetAndLength ; namespace UE { namespace Serialization { class FEditorBulkData ; } } enum class EFileRegionType : uint8 ; # if WITH_EDITOR = = 0&& WITH_EDITORONLY_DATA = = 0 # define USE_RUNTIME_BULKDATA 1 # else # define USE_RUNTIME_BULKDATA 0 # endif # define UE_KEEP_INLINE_RELOADING_CONSISTENT 0 class IMappedFileHandle ; class IMappedFileRegion ; using FIoFilenameHash = uint32 ; const FIoFilenameHash INVALID_IO_FILENAME_HASH = 0 ; FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FString& Filename)"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FPackagePath& Filename)"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FIoChunkId& ChunkID)"
  },
  {
    "label": "IBulkDataIORequest()",
    "kind": "Method",
    "detail": "Function (class IBulkDataIORequest { public : ~)",
    "insertText": "IBulkDataIORequest()"
  },
  {
    "label": "PollCompletion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PollCompletion()"
  },
  {
    "label": "WaitCompletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitCompletion(float TimeLimitSeconds = 0.0f)"
  },
  {
    "label": "GetReadResults()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetReadResults()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetSize()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FStringBuilderBase&)",
    "insertText": "LexToString(EBulkDataFlags Flags, FStringBuilderBase& Sb)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EBulkDataFlags Flags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, EBulkDataFlags& Flags)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar(uint32&)"
  },
  {
    "label": "FOwnedBulkDataPtr()",
    "kind": "Method",
    "detail": "Function (struct FOwnedBulkDataPtr {)",
    "insertText": "FOwnedBulkDataPtr(void* InAllocatedData) : AllocatedData(InAllocatedData) , MappedHandle(nullptr) , MappedRegion(nullptr)"
  },
  {
    "label": "FOwnedBulkDataPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOwnedBulkDataPtr(IMappedFileHandle* Handle, IMappedFileRegion* Region) : AllocatedData(nullptr) , MappedHandle(Handle) , MappedRegion(Region)"
  },
  {
    "label": "FOwnedBulkDataPtr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOwnedBulkDataPtr()"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetPointer()"
  },
  {
    "label": "GetMappedHandle()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "GetMappedHandle()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void* AllocatedData ; IMappedFileHandle* MappedHandle ; IMappedFileRegion* MappedRegion ; } ; namespace UE::BulkData::Private { struct FBulkMetaResource { EBulkDataFlags Flags = BULKDATA_None ; int64 ElementCount = - 1 ; int64 SizeOnDisk = - 1 ; int64 Offset = - 1 ; EBulkDataFlags DuplicateFlags = BULKDATA_None ; int64 DuplicateSizeOnDisk = - 1 ; int64 DuplicateOffset = - 1 ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBulkMetaResource& BulkMeta)"
  },
  {
    "label": "FBulkMetaData()",
    "kind": "Method",
    "detail": "Function (} ; class FBulkMetaData { public : int64 MaxSize = 0 xFFffFFffFF ; int64 MaxOffset = 0 xFFffFFffFE ;)",
    "insertText": "FBulkMetaData()"
  },
  {
    "label": "SetOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffset(-1)"
  },
  {
    "label": "SetSizeOnDisk()",
    "kind": "Method",
    "detail": "Function (# if ! USE_RUNTIME_BULKDATA)",
    "insertText": "SetSizeOnDisk(-1)"
  },
  {
    "label": "FBulkMetaData()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FBulkMetaData(EBulkDataFlags Flags) : FBulkMetaData()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(Flags)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSize(int64 Size)"
  },
  {
    "label": "WriteUInt40()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUInt40(Data, uint64(Size))"
  },
  {
    "label": "GetSizeOnDisk()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetSizeOnDisk()"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "int64(*reinterpret_cast<const int64*>(&Data[16]))"
  },
  {
    "label": "SetSizeOnDisk()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "SetSizeOnDisk(int64 SizeOnDisk)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (# if ! USE_RUNTIME_BULKDATA* reinterpret_cast<)",
    "insertText": "int64(&Data[16])"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (# endif } int64)",
    "insertText": "GetOffset()"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 Offset = static_cast<)",
    "insertText": "int64(ReadUInt40(Data + 5))"
  },
  {
    "label": "WriteUInt40()",
    "kind": "Method",
    "detail": "Function (Offset = MAX_int64 ; })",
    "insertText": "WriteUInt40(Data + 5, uint64(Offset))"
  },
  {
    "label": "GetOffsetAndLength()",
    "kind": "Method",
    "detail": "Function (} FIoOffsetAndLength)",
    "insertText": "GetOffsetAndLength()"
  },
  {
    "label": "GetLockStatus()",
    "kind": "Method",
    "detail": "Function (EBulkDataLockStatus)",
    "insertText": "GetLockStatus()"
  },
  {
    "label": "SetLockStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLockStatus(EBulkDataLockStatus Status)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Data [ 1 1 ] =)",
    "insertText": "uint8(Status)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} EBulkDataFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(EBulkDataFlags Flags)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint32(&Data[12]) = static_cast<uint32>(Flags)"
  },
  {
    "label": "AddFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddFlags(EBulkDataFlags Flags)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint32(&Data[12]) |= static_cast<uint32>(Flags)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearFlags(EBulkDataFlags Flags)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint32(&Data[12]) &= ~static_cast<uint32>(Flags)"
  },
  {
    "label": "HasAnyFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyFlags(EBulkDataFlags Flags)"
  },
  {
    "label": "HasAllFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllFlags(EBulkDataFlags Flags)"
  },
  {
    "label": "FromSerialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromSerialized(FArchive& Ar, int64 ElementSize, FBulkMetaData& OutMetaData, int64& OutDuplicateOffset)"
  },
  {
    "label": "FromSerialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromSerialized(FArchive& Ar, int64 ElementSize, FBulkMetaData& OutMetaData)"
  },
  {
    "label": "FromSerialized()",
    "kind": "Method",
    "detail": "Function (int64 DuplicateOffset = INDEX_NONE ; return)",
    "insertText": "FromSerialized(Ar, ElementSize, OutMetaData, DuplicateOffset)"
  },
  {
    "label": "ReadUInt40()",
    "kind": "Method",
    "detail": "Function (} private : uint64)",
    "insertText": "ReadUInt40(const uint8* Memory)"
  },
  {
    "label": "WriteUInt40()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteUInt40(uint8* Memory, uint64 Value)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Memory [ 0 ] =)",
    "insertText": "uint8(Value)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Memory [ 1 ] =)",
    "insertText": "uint8(Value >> 8)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Memory [ 2 ] =)",
    "insertText": "uint8(Value >> 16)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Memory [ 3 ] =)",
    "insertText": "uint8(Value >> 24)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Memory [ 4 ] =)",
    "insertText": "uint8(Value >> 32)"
  },
  {
    "label": "FAllocatedPtr()",
    "kind": "Method",
    "detail": "Function (} # if USE_RUNTIME_BULKDATA uint8 Data [ 1 6 ] = { 0 } ; # else uint8 Data [ 2 4 ] = { 0 } ; # endif } ; } struct FBulkDataSerializationParams { UObject* Owner = nullptr ; int32 ElementSize = 0 ; EFileRegionType RegionType ; bool bAttemptMemoryMapping = false ; FBulkDataCookedIndex CookedIndex ; } ; class FBulkData { struct FAllocatedPtr {)",
    "insertText": "FAllocatedPtr()"
  },
  {
    "label": "IsLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoaded()"
  },
  {
    "label": "ReallocateData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ReallocateData(FBulkData* Owner, int64 SizeInBytes)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FBulkData* Owner, void* Buffer)"
  },
  {
    "label": "SetMemoryMappedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMemoryMappedData(FBulkData* Owner, IMappedFileHandle* MappedHandle, IMappedFileRegion* MappedRegion)"
  },
  {
    "label": "GetAllocationForWrite()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetAllocationForWrite(const FBulkData* Owner)"
  },
  {
    "label": "GetAllocationReadOnly()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetAllocationReadOnly(const FBulkData* Owner)"
  },
  {
    "label": "StealFileMapping()",
    "kind": "Method",
    "detail": "Function (FOwnedBulkDataPtr*)",
    "insertText": "StealFileMapping(FBulkData* Owner)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FBulkData* Owner, void** DstBuffer)"
  },
  {
    "label": "MaxBulkDataSize()",
    "kind": "Method",
    "detail": "Function (private : union FAllocation { void* RawData ; FOwnedBulkDataPtr* MemoryMappedData ; } ; FAllocation Allocation { nullptr } ; } ; public : class FLinkerLoad ; class FLinkerSave ; class FExportArchive ; class UE::Serialization::FEditorBulkData ; class FBulkDataBatchRequest ; using BulkDataRangeArray = TArray<FBulkData*,TInlineAllocator<8>> ; SIZE_T)",
    "insertText": "MaxBulkDataSize(1ull << 40)"
  },
  {
    "label": "FBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBulkData()"
  },
  {
    "label": "FBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBulkData(const FBulkData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBulkData&)",
    "insertText": "operator(const FBulkData& Other)"
  },
  {
    "label": "DumpBulkDataUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBulkDataUsage(FOutputDevice& Log)"
  },
  {
    "label": "GetBulkDataSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBulkDataSize()"
  },
  {
    "label": "GetBulkDataSizeOnDisk()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBulkDataSizeOnDisk()"
  },
  {
    "label": "GetBulkDataOffsetInFile()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBulkDataOffsetInFile()"
  },
  {
    "label": "IsStoredCompressedOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStoredCompressedOnDisk()"
  },
  {
    "label": "CanLoadFromDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLoadFromDisk()"
  },
  {
    "label": "DoesExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesExist()"
  },
  {
    "label": "GetDecompressionFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDecompressionFormat()"
  },
  {
    "label": "IsBulkDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBulkDataLoaded()"
  }
]