[
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FIoChunkId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoChunkId"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "FIoOffsetAndLength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoOffsetAndLength"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "IMappedFileRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileRegion"
  },
  {
    "label": "IBulkDataIORequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBulkDataIORequest"
  },
  {
    "label": "EBulkDataFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataFlags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EBulkDataLockStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataLockStatus"
  },
  {
    "label": "EBulkDataLockFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBulkDataLockFlags"
  },
  {
    "label": "FOwnedBulkDataPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOwnedBulkDataPtr"
  },
  {
    "label": "FBulkMetaResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkMetaResource"
  },
  {
    "label": "FBulkMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkMetaData"
  },
  {
    "label": "FBulkDataSerializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkDataSerializationParams"
  },
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "represents"
  },
  {
    "label": "FAllocatedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocatedPtr"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FExportArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportArchive"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FBulkDataBatchRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataBatchRequest"
  },
  {
    "label": "TBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBulkData"
  },
  {
    "label": "FFormatContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatContainer"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FBulkDataRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRequest"
  },
  {
    "label": "IHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBulkDataBatchRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataBatchRequest"
  },
  {
    "label": "FBulkDataBatchRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataBatchRequest"
  },
  {
    "label": "FBatchHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchHandle"
  },
  {
    "label": "FBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuilder"
  },
  {
    "label": "FBatchBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchBuilder"
  },
  {
    "label": "FScatterGatherBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScatterGatherBuilder"
  },
  {
    "label": "FRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequest"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FString& Filename)"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FPackagePath& Filename)"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (FIoFilenameHash)",
    "insertText": "MakeIoFilenameHash(const FIoChunkId& ChunkID)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EBulkDataFlags Flags)"
  },
  {
    "label": "SetSizeOnDisk()",
    "kind": "Method",
    "detail": "Function (USE_RUNTIME_BULKDATA)",
    "insertText": "SetSizeOnDisk(-1)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSize()"
  },
  {
    "label": "FromSerialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromSerialized(FArchive& Ar, int64 ElementSize, FBulkMetaData& OutMetaData, int64& OutDuplicateOffset)"
  },
  {
    "label": "FromSerialized()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FromSerialized(Ar, ElementSize, OutMetaData, DuplicateOffset)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FBulkData* Owner)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FBulkData* Owner, void* Buffer)"
  },
  {
    "label": "SetMemoryMappedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMemoryMappedData(FBulkData* Owner, IMappedFileHandle* MappedHandle, IMappedFileRegion* MappedRegion)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FBulkData* Owner, void** DstBuffer)"
  },
  {
    "label": "FBulkData()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FBulkData( const FBulkData& Other )"
  },
  {
    "label": "DumpBulkDataUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBulkDataUsage( FOutputDevice& Log )"
  },
  {
    "label": "SetBulkDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBulkDataFlags( uint32 BulkDataFlagsToSet )"
  },
  {
    "label": "ResetBulkDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBulkDataFlags(uint32 BulkDataFlagsToSet)"
  },
  {
    "label": "SetCookedIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookedIndex(FBulkDataCookedIndex Index)"
  },
  {
    "label": "ClearBulkDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBulkDataFlags( uint32 BulkDataFlagsToClear )"
  },
  {
    "label": "MakeIoFilenameHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeIoFilenameHash(BulkChunkId)"
  },
  {
    "label": "GetCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCopy( void** Dest, bool bDiscardInternalCopy = true )"
  },
  {
    "label": "RemoveBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBulkData()"
  },
  {
    "label": "LoadBulkDataWithFileReader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadBulkDataWithFileReader()"
  },
  {
    "label": "ForceBulkDataResident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBulkDataResident()"
  },
  {
    "label": "StoreCompressedOnDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreCompressedOnDisk( FName CompressionFormat )"
  },
  {
    "label": "UnloadBulkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnloadBulkData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bAttemptFileMapping, int32 ElementSize, EFileRegionType FileRegionType)"
  },
  {
    "label": "SetFlagsFromDiskWrittenValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlagsFromDiskWrittenValues(EBulkDataFlags InBulkDataFlags, int64 InBulkDataOffsetInFile, int64 InBulkDataSizeOnDisk, int64 LinkerSummaryBulkDataStartOffset)"
  },
  {
    "label": "SetBulkDataFlagsOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBulkDataFlagsOn(EBulkDataFlags& InOutAccumulator, EBulkDataFlags FlagsToSet)"
  },
  {
    "label": "ClearBulkDataFlagsOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBulkDataFlagsOn(EBulkDataFlags& InOutAccumulator, EBulkDataFlags FlagsToClear)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFlags(EBulkDataFlags Flags, EBulkDataFlags Contains)"
  },
  {
    "label": "GetDecompressionFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDecompressionFormat(EBulkDataFlags InFlags)"
  },
  {
    "label": "SerializeBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBulkData(FArchive& Ar, void* Data, int64 DataSize, EBulkDataFlags InBulkDataFlags)"
  },
  {
    "label": "SerializePayload()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SerializePayload(FArchive& Ar, EBulkDataFlags SerializationFlags, const TOptional<EFileRegionType>& RegionType)"
  },
  {
    "label": "DetachFromArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromArchive( FArchive* Ar, bool bEnsureBulkDataIsLoaded )"
  },
  {
    "label": "MakeSureBulkDataIsLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSureBulkDataIsLoaded()"
  },
  {
    "label": "TryLoadDataIntoMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadDataIntoMemory(FIoBuffer Dest)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(TIsPODType<ElementType>::Value, \"Bulk data is limited to POD types\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, const TArray<FName>* FormatsToSave = nullptr, bool bSingleUse = true, uint16 InAlignment = DEFAULT_ALIGNMENT, bool bInline = true, bool bMapped = false)"
  },
  {
    "label": "SerializeAttemptMappedLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeAttemptMappedLoad(FArchive& Ar, UObject* Owner)"
  },
  {
    "label": "FBulkDataRequest()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FBulkDataRequest()"
  },
  {
    "label": "FBulkDataRequest()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FBulkDataRequest(FBulkDataRequest&&)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FBulkDataRequest()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FBulkDataRequest(IHandle* InHandle)"
  },
  {
    "label": "FBuilder()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FBuilder(int32 MaxCount)"
  },
  {
    "label": "IssueBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueBatch(FBulkDataBatchRequest* OutRequest, FCompletionCallback&& Callback)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitFor(uint32 Milliseconds)"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitFor(const FTimespan& WaitTime)"
  },
  {
    "label": "FBatchBuilder()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FBatchBuilder(int32 MaxCount)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Read(BulkData, Offset, Size, Priority, Dst, nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Read(BulkData, Offset, Size, Priority, Dst, &OutRequest)"
  },
  {
    "label": "Issue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Issue(FCompletionCallback&& Callback, FBulkDataBatchRequest& OutRequest)"
  },
  {
    "label": "Issue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Issue(FBulkDataBatchRequest& OutRequest)"
  },
  {
    "label": "Issue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Issue()"
  },
  {
    "label": "FScatterGatherBuilder()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FScatterGatherBuilder(int32 MaxCount)"
  },
  {
    "label": "Issue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Issue(FIoBuffer& Dst, EAsyncIOPriorityAndFlags Priority, FCompletionCallback&& Callback, FBulkDataBatchRequest& OutRequest)"
  },
  {
    "label": "FBatchBuilder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FBatchBuilder(MaxCount)"
  },
  {
    "label": "FScatterGatherBuilder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FScatterGatherBuilder(MaxCount)"
  }
]