[
  {
    "label": "ConvList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvList"
  },
  {
    "label": "ConvListT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvListT"
  },
  {
    "label": "Integer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Integer"
  },
  {
    "label": "ConvParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConvParser"
  },
  {
    "label": "FormatParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatParser"
  },
  {
    "label": "ABSL_HAVE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_FORMAT_CHECKER_H_ # define ABSL_STRINGS_INTERNAL_STR_FORMAT_CHECKER_H_ # include \" absl / base / attributes . h \" # include \" absl / strings / internal / str_format / arg . h \" # include \" absl / strings / internal / str_format / extension . h \" # ifndef ABSL_INTERNAL_ENABLE_FORMAT_CHECKER # if)",
    "insertText": "ABSL_HAVE_ATTRIBUTE(enable_if) && !defined(__native_client__) && \\ !defined(__INTELLISENSE__)"
  },
  {
    "label": "AllOf()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace str_format_internal { bool)",
    "insertText": "AllOf()"
  },
  {
    "label": "ContainsChar()",
    "kind": "Method",
    "detail": "Function (} # ifdef ABSL_INTERNAL_ENABLE_FORMAT_CHECKER bool)",
    "insertText": "ContainsChar(const char* chars, char c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct ConvList { const FormatConversionCharSet* array ; int count ; FormatConversionCharSet)",
    "insertText": "operator(int i)"
  },
  {
    "label": "ConsumeFront()",
    "kind": "Method",
    "detail": "Function (} ; } string_view)",
    "insertText": "ConsumeFront(string_view str, size_t len = 1)"
  },
  {
    "label": "ConsumeAnyOf()",
    "kind": "Method",
    "detail": "Function (} string_view)",
    "insertText": "ConsumeAnyOf(string_view format, const char* chars)"
  },
  {
    "label": "IsDigit()",
    "kind": "Method",
    "detail": "Function (} return format ; } bool)",
    "insertText": "IsDigit(char c)"
  },
  {
    "label": "ParseDigits()",
    "kind": "Method",
    "detail": "Function (} else { return Integer { format,0 } ; } } } ; Integer)",
    "insertText": "ParseDigits(string_view format)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int value = 0 ;)",
    "insertText": "while(IsDigit(GetChar(format, 0)))"
  },
  {
    "label": "GetChar()",
    "kind": "Method",
    "detail": "Function (value = 1 0* value +)",
    "insertText": "GetChar(format, 0)"
  },
  {
    "label": "ParsePositional()",
    "kind": "Method",
    "detail": "Function (} return Integer { format,value } ; } Integer)",
    "insertText": "ParsePositional(string_view format)"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (} class ConvParser { ConvParser)",
    "insertText": "SetFormat(string_view format)"
  },
  {
    "label": "SetArgs()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "SetArgs(ConvList args)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "SetError(bool error)"
  },
  {
    "label": "SetArgPosition()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "SetArgPosition(int arg_position)"
  },
  {
    "label": "ConsumeNextArg()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "ConsumeNextArg(char conv)"
  },
  {
    "label": "VerifyPositional()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "VerifyPositional(Integer i, char conv)"
  },
  {
    "label": "ParseArgPosition()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "ParseArgPosition(Integer arg)"
  },
  {
    "label": "ParseFlags()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "ParseFlags()"
  },
  {
    "label": "ParseWidth()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "ParseWidth()"
  },
  {
    "label": "GetChar()",
    "kind": "Method",
    "detail": "Function (char first_char =)",
    "insertText": "GetChar(format_, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(first_char == '*')"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SetFormat(ConsumeFront(format_)).ConsumeNextArg('*')"
  },
  {
    "label": "ParsePrecision()",
    "kind": "Method",
    "detail": "Function (} } else { return* this ; } } ConvParser)",
    "insertText": "ParsePrecision()"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SetFormat(ConsumeFront(format_, 2)).ConsumeNextArg('*')"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (} } else { return)",
    "insertText": "SetFormat(ParseDigits(ConsumeFront(format_)).format)"
  },
  {
    "label": "ParseLength()",
    "kind": "Method",
    "detail": "Function (} } ConvParser)",
    "insertText": "ParseLength()"
  },
  {
    "label": "ParseConversion()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "ParseConversion()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(is_positional_)"
  },
  {
    "label": "ConsumeNextArg()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ConsumeNextArg(first_char).SetFormat(ConsumeFront(format_))"
  },
  {
    "label": "ConvParser()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ConvParser(string_view format, ConvList args, bool error, int arg_position, bool is_positional) : format_(format), args_(args), error_(error), arg_position_(arg_position), is_positional_(is_positional)"
  },
  {
    "label": "ConvParser()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "ConvParser(string_view format, ConvList args, bool is_positional) : format_(format), args_(args), error_(false), arg_position_(0), is_positional_(is_positional)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} ConvParser)",
    "insertText": "Run()"
  },
  {
    "label": "ParseArgPosition()",
    "kind": "Method",
    "detail": "Function (parser =)",
    "insertText": "ParseArgPosition(ParsePositional(format_))"
  },
  {
    "label": "ParseFlags()",
    "kind": "Method",
    "detail": "Function (} return parser .)",
    "insertText": "ParseFlags() .ParseWidth() .ParsePrecision() .ParseLength() .ParseConversion()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} string_view)",
    "insertText": "format()"
  },
  {
    "label": "ConsumeNonPercentInner()",
    "kind": "Method",
    "detail": "Function (} string_view)",
    "insertText": "ConsumeNonPercentInner(string_view format)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int limit = 2 0 ;)",
    "insertText": "while(!FoundPercent(format) && limit != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t len = 0 ;)",
    "insertText": "if(GetChar(format, 0) == '%' && GetChar(format, 1) == '%')"
  },
  {
    "label": "ConsumeFront()",
    "kind": "Method",
    "detail": "Function (len = 2 ; } else { len = 1 ; } format =)",
    "insertText": "ConsumeFront(format, len)"
  },
  {
    "label": "ConsumeNonPercent()",
    "kind": "Method",
    "detail": "Function (- - limit ; } return format ; } string_view)",
    "insertText": "ConsumeNonPercent(string_view format)"
  },
  {
    "label": "IsPositional()",
    "kind": "Method",
    "detail": "Function (} return format ; } bool)",
    "insertText": "IsPositional(string_view format)"
  },
  {
    "label": "RunImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunImpl(bool is_positional)"
  },
  {
    "label": "ValidateArg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateArg(ConvParser conv)"
  },
  {
    "label": "FormatParser()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FormatParser(string_view format, ConvList args) : format_(ConsumeNonPercent(format)), args_(args)"
  },
  {
    "label": "ValidFormatImpl()",
    "kind": "Method",
    "detail": "Function (} private : string_view format_ ; ConvList args_ ; } ; template<FormatConversionCharSet . . . C> bool)",
    "insertText": "ValidFormatImpl(string_view format)"
  }
]