[
  {
    "label": "FMetalCompiledShaderCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalCompiledShaderCache"
  },
  {
    "label": "FMetalCompiledShaderCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalCompiledShaderKey . h \" # include \" Misc / ScopeRWLock . h \" # include \" MetalRHIPrivate . h \" struct FMetalCompiledShaderCache { public :)",
    "insertText": "FMetalCompiledShaderCache()"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (} MTLFunctionPtr)",
    "insertText": "FindRef(FMetalCompiledShaderKey const& Key)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FRWScopeLock)",
    "insertText": "ScopedLock(Lock, SLT_ReadOnly)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (MTLFunctionPtr Func = Cache .)",
    "insertText": "FindRef(Key)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (MTLLibraryPtr Lib = LibCache .)",
    "insertText": "FindRef(Function->functionType())"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FRWScopeLock)",
    "insertText": "ScopedLock(Lock, SLT_Write)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Cache .)",
    "insertText": "Add(Key, Function)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LibCache .)",
    "insertText": "Add(Function->functionType(), Lib)"
  },
  {
    "label": "GetMetalCompiledShaderCache()",
    "kind": "Method",
    "detail": "Function (} } private : FRWLock Lock ; TMap<FMetalCompiledShaderKey,MTLFunctionPtr> Cache ; TMap<MTL::FunctionType,MTLLibraryPtr> LibCache ; } ; FMetalCompiledShaderCache&)",
    "insertText": "GetMetalCompiledShaderCache()"
  }
]