[
  {
    "label": "Writer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Writer"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ENDIANSTREAM_H # define LLVM_SUPPORT_ENDIANSTREAM_H # include \" llvm / Support / Endian . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { namespace support { namespace endian { template<endianness endian> struct Writer { raw_ostream& OS ;)",
    "insertText": "Writer(raw_ostream &OS) : OS(OS)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (} template<value_type> void)",
    "insertText": "write(value_type Val)"
  },
  {
    "label": "endian()",
    "kind": "Method",
    "detail": "Function (Val = byte_swap<value_type,)",
    "insertText": "endian(Val)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (OS .)",
    "insertText": "write((const char *)&Val, sizeof(value_type))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} } ; template<> template<> void Writer<little>::write<)",
    "insertText": "float(float Val)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(FloatToBits(Val))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> template<> void Writer<little>::write<)",
    "insertText": "double(double Val)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(DoubleToBits(Val))"
  }
]