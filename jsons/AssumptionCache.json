[
  {
    "label": "AnalysisManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisManager"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "AssumptionAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionAnalysis"
  },
  {
    "label": "AssumptionPrinterPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionPrinterPass"
  },
  {
    "label": "AssumptionCacheTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCacheTracker"
  },
  {
    "label": "FunctionCallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionCallbackVH"
  },
  {
    "label": "scanFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_ASSUMPTIONCACHE_H # define LLVM_ANALYSIS_ASSUMPTIONCACHE_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallSet . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Pass . h \" # include<memory> namespace llvm { template<IRUnitT> class AnalysisManager ; class PreservedAnalyses ; class AssumptionCache { Function& F ; SmallVector<WeakVH,4> AssumeHandles ; bool Scanned ; void)",
    "insertText": "scanFunction()"
  },
  {
    "label": "AssumptionCache()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AssumptionCache(Function &F) : F(F), Scanned(false)"
  },
  {
    "label": "registerAssumption()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "registerAssumption(CallInst *CI)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "assumptions()",
    "kind": "Method",
    "detail": "Function (Scanned = false ; } MutableArrayRef<WeakVH>)",
    "insertText": "assumptions()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "name()"
  },
  {
    "label": "AssumptionAnalysis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssumptionAnalysis(const AssumptionAnalysis &Arg)"
  },
  {
    "label": "AssumptionAnalysis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AssumptionAnalysis(AssumptionAnalysis &&Arg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AssumptionAnalysis&)",
    "insertText": "operator(const AssumptionAnalysis &RHS)"
  },
  {
    "label": "AssumptionPrinterPass()",
    "kind": "Method",
    "detail": "Function (} } ; class AssumptionPrinterPass { raw_ostream& OS ; public :)",
    "insertText": "AssumptionPrinterPass(raw_ostream &OS) : OS(OS)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} PreservedAnalyses)",
    "insertText": "run(Function &F, AnalysisManager<Function> *AM)"
  },
  {
    "label": "FunctionCallbackVH()",
    "kind": "Method",
    "detail": "Function (public : typedef DenseMapInfo<Value*> DMI ;)",
    "insertText": "FunctionCallbackVH(Value *V, AssumptionCacheTracker *ACT = nullptr) : CallbackVH(V), ACT(ACT)"
  },
  {
    "label": "getAssumptionCache()",
    "kind": "Method",
    "detail": "Function (} } ; FunctionCallbackVH ; typedef DenseMap<FunctionCallbackVH,std::unique_ptr<AssumptionCache>,FunctionCallbackVH::DMI> FunctionCallsMap ; FunctionCallsMap AssumptionCaches ; public : AssumptionCache&)",
    "insertText": "getAssumptionCache(Function &F)"
  },
  {
    "label": "AssumptionCacheTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssumptionCacheTracker()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "shrink_and_clear()",
    "kind": "Method",
    "detail": "Function (AssumptionCaches .)",
    "insertText": "shrink_and_clear()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization(Module &)"
  }
]