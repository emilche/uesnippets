[
  {
    "label": "FDataEventScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataEventScope"
  },
  {
    "label": "TIntrusiveEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveEventHandler"
  },
  {
    "label": "TNonIntrusiveEventHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNonIntrusiveEventHandler"
  },
  {
    "label": "TDataEventContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDataEventContainer"
  },
  {
    "label": "FDataEventScope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneFwd . h \" # include \" Delegates / Delegate . h \" # include \" Containers / List . h \" namespace UE { namespace MovieScene { struct FDataEventScope { FSimpleMulticastDelegate OnBracketClosed ;)",
    "insertText": "FDataEventScope()"
  },
  {
    "label": "TIntrusiveEventHandler()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class TIntrusiveEventHandler : public TIntrusiveLinkedList<TIntrusiveEventHandler<T>>,public T { protected : ~)",
    "insertText": "TIntrusiveEventHandler()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Unlink()"
  },
  {
    "label": "TNonIntrusiveEventHandler()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TNonIntrusiveEventHandler : public TLinkedList<T*> {)",
    "insertText": "TNonIntrusiveEventHandler()"
  },
  {
    "label": "TNonIntrusiveEventHandler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TNonIntrusiveEventHandler(T* InInstance) : TLinkedList<T*>(InInstance)"
  },
  {
    "label": "TDataEventContainer()",
    "kind": "Method",
    "detail": "Function (} } ; template<EventInterface> struct TDataEventContainer { # if UE_MOVIESCENE_EVENTS ~)",
    "insertText": "TDataEventContainer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NonIntrusiveHandlers)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (} } template<FuncType,. . . ArgTypes> void)",
    "insertText": "Trigger(FuncType&& Func, ArgTypes&&... Args)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(Func, *It, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(typename TNonIntrusiveEventHandler<EventInterface>::TIterator It(NonIntrusiveHandlers); It; ++It)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Link(TIntrusiveEventHandler<EventInterface>* InLink)"
  },
  {
    "label": "LinkHead()",
    "kind": "Method",
    "detail": "Function (InLink ->)",
    "insertText": "LinkHead(IntrusiveHandlers)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Link(TNonIntrusiveEventHandler<EventInterface>& InLink, EventInterface* Instance)"
  },
  {
    "label": "EventInterface()",
    "kind": "Method",
    "detail": "Function (InLink = TNonIntrusiveEventHandler<)",
    "insertText": "EventInterface(Instance)"
  },
  {
    "label": "LinkHead()",
    "kind": "Method",
    "detail": "Function (InLink .)",
    "insertText": "LinkHead(NonIntrusiveHandlers)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (} private : TIntrusiveEventHandler<EventInterface>* IntrusiveHandlers = nullptr ; TLinkedList<EventInterface*>* NonIntrusiveHandlers = nullptr ; # else template<. . . ArgTypes> void)",
    "insertText": "Trigger(ArgTypes&&...)"
  }
]