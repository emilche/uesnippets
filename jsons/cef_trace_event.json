[
  {
    "label": "CefTraceEndOnScopeClose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefTraceEndOnScopeClose"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_TRACE_EVENT_H_ # define CEF_INCLUDE_BASE_CEF_TRACE_EVENT_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES) #include \"base/trace_event/trace_event.h\" #else #include \"include/internal/cef_trace_event_internal.h\" #define TRACE_EVENT0(category, name) \\ cef_trace_event_begin(category, name, NULL, 0, NULL, 0, false)"
  },
  {
    "label": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE(category, name) #define TRACE_EVENT1(category, name, arg1_name, arg1_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, NULL, 0, false)"
  },
  {
    "label": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE(category, name) #define TRACE_EVENT2(category, name, arg1_name, arg1_val, arg2_name, arg2_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, false)"
  },
  {
    "label": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE(category, name) #define CEF_INTERNAL_TRACE_EVENT_UID3(a, b) cef_trace_event_unique_##a##b #define CEF_INTERNAL_TRACE_EVENT_UID2(a, b) CEF_INTERNAL_TRACE_EVENT_UID3(a, b) #define CEF_INTERNAL_TRACE_EVENT_UID(name_prefix) \\ CEF_INTERNAL_TRACE_EVENT_UID2(name_prefix, __LINE__) #define CEF_INTERNAL_TRACE_END_ON_SCOPE_CLOSE(category, name) \\ cef_trace_event::CefTraceEndOnScopeClose CEF_INTERNAL_TRACE_EVENT_UID( \\ profileScope)(category, name) #define TRACE_EVENT_INSTANT0(category, name) \\ cef_trace_event_instant(category, name, NULL, 0, NULL, 0, false) #define TRACE_EVENT_INSTANT1(category, name, arg1_name, arg1_val) \\ cef_trace_event_instant(category, name, arg1_name, arg1_val, NULL, 0, false) #define TRACE_EVENT_INSTANT2(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ cef_trace_event_instant(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, false) #define TRACE_EVENT_COPY_INSTANT0(category, name) \\ cef_trace_event_instant(category, name, NULL, 0, NULL, 0, true) #define TRACE_EVENT_COPY_INSTANT1(category, name, arg1_name, arg1_val) \\ cef_trace_event_instant(category, name, arg1_name, arg1_val, NULL, 0, true) #define TRACE_EVENT_COPY_INSTANT2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_instant(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, true) #define TRACE_EVENT_BEGIN0(category, name) \\ cef_trace_event_begin(category, name, NULL, 0, NULL, 0, false) #define TRACE_EVENT_BEGIN1(category, name, arg1_name, arg1_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, NULL, 0, false) #define TRACE_EVENT_BEGIN2(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, false) #define TRACE_EVENT_COPY_BEGIN0(category, name) \\ cef_trace_event_begin(category, name, NULL, 0, NULL, 0, true) #define TRACE_EVENT_COPY_BEGIN1(category, name, arg1_name, arg1_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, NULL, 0, true) #define TRACE_EVENT_COPY_BEGIN2(category, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_begin(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, true) #define TRACE_EVENT_END0(category, name) \\ cef_trace_event_end(category, name, NULL, 0, NULL, 0, false) #define TRACE_EVENT_END1(category, name, arg1_name, arg1_val) \\ cef_trace_event_end(category, name, arg1_name, arg1_val, NULL, 0, false) #define TRACE_EVENT_END2(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ cef_trace_event_end(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, false) #define TRACE_EVENT_COPY_END0(category, name) \\ cef_trace_event_end(category, name, NULL, 0, NULL, 0, true) #define TRACE_EVENT_COPY_END1(category, name, arg1_name, arg1_val) \\ cef_trace_event_end(category, name, arg1_name, arg1_val, NULL, 0, true) #define TRACE_EVENT_COPY_END2(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ cef_trace_event_end(category, name, arg1_name, arg1_val, arg2_name, \\ arg2_val, true) #define TRACE_COUNTER1(category, name, value) \\ cef_trace_counter(category, name, NULL, value, NULL, 0, false) #define TRACE_COPY_COUNTER1(category, name, value) \\ cef_trace_counter(category, name, NULL, value, NULL, 0, true) #define TRACE_COUNTER2(category, name, value1_name, value1_val, value2_name, \\ value2_val) \\ cef_trace_counter(category, name, value1_name, value1_val, value2_name, \\ value2_val, false) #define TRACE_COPY_COUNTER2(category, name, value1_name, value1_val, \\ value2_name, value2_val) \\ cef_trace_counter(category, name, value1_name, value1_val, value2_name, \\ value2_val, true) #define TRACE_COUNTER_ID1(category, name, id, value) \\ cef_trace_counter_id(category, name, id, NULL, value, NULL, 0, false) #define TRACE_COPY_COUNTER_ID1(category, name, id, value) \\ cef_trace_counter_id(category, name, id, NULL, value, NULL, 0, true) #define TRACE_COUNTER_ID2(category, name, id, value1_name, value1_val, \\ value2_name, value2_val) \\ cef_trace_counter_id(category, name, id, value1_name, value1_val, \\ value2_name, value2_val, false) #define TRACE_COPY_COUNTER_ID2(category, name, id, value1_name, value1_val, \\ value2_name, value2_val) \\ cef_trace_counter_id(category, name, id, value1_name, value1_val, \\ value2_name, value2_val, true) #define TRACE_EVENT_ASYNC_BEGIN0(category, name, id) \\ cef_trace_event_async_begin(category, name, id, NULL, 0, NULL, 0, false) #define TRACE_EVENT_ASYNC_BEGIN1(category, name, id, arg1_name, arg1_val) \\ cef_trace_event_async_begin(category, name, id, arg1_name, arg1_val, NULL, \\ 0, false) #define TRACE_EVENT_ASYNC_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_async_begin(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val, false) #define TRACE_EVENT_COPY_ASYNC_BEGIN0(category, name, id) \\ cef_trace_event_async_begin(category, name, id, NULL, 0, NULL, 0, true) #define TRACE_EVENT_COPY_ASYNC_BEGIN1(category, name, id, arg1_name, arg1_val) \\ cef_trace_event_async_begin(category, name, id, arg1_name, arg1_val, NULL, \\ 0, true) #define TRACE_EVENT_COPY_ASYNC_BEGIN2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_async_begin(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val, true) #define TRACE_EVENT_ASYNC_STEP_INTO0(category, name, id, step) \\ cef_trace_event_async_step_into(category, name, id, step, NULL, 0, false) #define TRACE_EVENT_ASYNC_STEP_INTO1(category, name, id, step, arg1_name, \\ arg1_val) \\ cef_trace_event_async_step_into(category, name, id, step, arg1_name, \\ arg1_val, false) #define TRACE_EVENT_COPY_ASYNC_STEP_INTO0(category, name, id, step) \\ cef_trace_event_async_step_into(category, name, id, step, NULL, 0, true) #define TRACE_EVENT_COPY_ASYNC_STEP_INTO1(category, name, id, step, arg1_name, \\ arg1_val) \\ cef_trace_event_async_step_into(category, name, id, step, arg1_name, \\ arg1_val, true) #define TRACE_EVENT_ASYNC_STEP_PAST0(category, name, id, step) \\ cef_trace_event_async_step_past(category, name, id, step, NULL, 0, false) #define TRACE_EVENT_ASYNC_STEP_PAST1(category, name, id, step, arg1_name, \\ arg1_val) \\ cef_trace_event_async_step_past(category, name, id, step, arg1_name, \\ arg1_val, false) #define TRACE_EVENT_COPY_ASYNC_STEP_PAST0(category, name, id, step) \\ cef_trace_event_async_step_past(category, name, id, step, NULL, 0, true) #define TRACE_EVENT_COPY_ASYNC_STEP_PAST1(category, name, id, step, arg1_name, \\ arg1_val) \\ cef_trace_event_async_step_past(category, name, id, step, arg1_name, \\ arg1_val, true) #define TRACE_EVENT_ASYNC_END0(category, name, id) \\ cef_trace_event_async_end(category, name, id, NULL, 0, NULL, 0, false) #define TRACE_EVENT_ASYNC_END1(category, name, id, arg1_name, arg1_val) \\ cef_trace_event_async_end(category, name, id, arg1_name, arg1_val, NULL, 0, \\ false) #define TRACE_EVENT_ASYNC_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_async_end(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val, false) #define TRACE_EVENT_COPY_ASYNC_END0(category, name, id) \\ cef_trace_event_async_end(category, name, id, NULL, 0, NULL, 0, true) #define TRACE_EVENT_COPY_ASYNC_END1(category, name, id, arg1_name, arg1_val) \\ cef_trace_event_async_end(category, name, id, arg1_name, arg1_val, NULL, 0, \\ true) #define TRACE_EVENT_COPY_ASYNC_END2(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ cef_trace_event_async_end(category, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val, true)"
  },
  {
    "label": "CefTraceEndOnScopeClose()",
    "kind": "Method",
    "detail": "Function (class CefTraceEndOnScopeClose { public :)",
    "insertText": "CefTraceEndOnScopeClose(const char* category, const char* name) : category_(category), name_(name)"
  },
  {
    "label": "CefTraceEndOnScopeClose()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CefTraceEndOnScopeClose()"
  },
  {
    "label": "cef_trace_event_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_trace_event_end(category_, name_, NULL, 0, NULL, 0, false)"
  }
]