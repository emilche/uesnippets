[
  {
    "label": "MakePointer_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MakePointer_"
  },
  {
    "label": "CoeffLoader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoeffLoader"
  },
  {
    "label": "BaseTensorContractionMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseTensorContractionMapper"
  },
  {
    "label": "SimpleTensorContractionMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTensorContractionMapper"
  },
  {
    "label": "TensorContractionSubMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorContractionSubMapper"
  },
  {
    "label": "TensorContractionInputMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorContractionInputMapper"
  },
  {
    "label": "TensorContractionInputMapperTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorContractionInputMapperTrait"
  },
  {
    "label": "CoeffLoader()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_MAPPER_H # define EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_MAPPER_H namespace Eigen { namespace internal { enum { Rhs = 0,Lhs = 1 } ; template<Tensor,bool HasRawAccess,template<class> class MakePointer_ = MakePointer> struct CoeffLoader ; template<Scalar,Index,int side,Tensor,nocontract_t,contract_t,int packet_size,bool inner_dim_contiguous,bool inner_dim_reordered,int Alignment,template<class> class MakePointer_ = MakePointer> class BaseTensorContractionMapper ; template<Tensor,bool HasRawAccess,template<class> class MakePointer_> struct CoeffLoader { enum { DirectOffsets = false } ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "CoeffLoader(const Tensor& tensor) : m_tensor(tensor)"
  },
  {
    "label": "offsetBuffer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "offsetBuffer(typename Tensor::Index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"unsupported\")"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE const MakePointer_<const Tensor::Scalar>::Type)",
    "insertText": "data()"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor::PacketReturnType)",
    "insertText": "packet(typename Tensor::Index index)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_SYCL EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_tensor .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "CoeffLoader()",
    "kind": "Method",
    "detail": "Function (} # endif private : const Tensor m_tensor ; } ; template<Tensor,template<class> class MakePointer_> struct CoeffLoader<Tensor,true,MakePointer_> { enum { DirectOffsets = true } ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "CoeffLoader(const Tensor& tensor) : m_data(tensor.data())"
  },
  {
    "label": "offsetBuffer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "offsetBuffer(typename Tensor::Index offset)"
  },
  {
    "label": "SimpleTensorContractionMapper()",
    "kind": "Method",
    "detail": "Function (} # endif private : typedef Tensor::Scalar Scalar ; MakePointer_<const Scalar>::Type m_data ; } ; template<Scalar,Index,int side,Tensor,nocontract_t,contract_t,int packet_size,bool inner_dim_contiguous,int Alignment,template<class> class MakePointer_ = MakePointer> class SimpleTensorContractionMapper { public : EIGEN_DEVICE_FUNC)",
    "insertText": "SimpleTensorContractionMapper(const Tensor& tensor, const nocontract_t& nocontract_strides, const nocontract_t& ij_strides, const contract_t& contract_strides, const contract_t& k_strides) : m_tensor(tensor), m_nocontract_strides(nocontract_strides), m_ij_strides(ij_strides), m_contract_strides(contract_strides), m_k_strides(k_strides)"
  },
  {
    "label": "offsetBuffer()",
    "kind": "Method",
    "detail": "Function (m_tensor .)",
    "insertText": "offsetBuffer(offset)"
  },
  {
    "label": "prefetch()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "prefetch(Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "operator()(Index row)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "operator()(Index row, Index col)"
  },
  {
    "label": "computeIndex()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "computeIndex(Index row, Index col)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "left(side == Lhs)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(left)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index nocontract_val = left ? row : col ; Index linidx = 0 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = static_cast<int>(array_size<nocontract_t>::value) - 1; i > 0; i--)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = nocontract_val / m_ij_strides [ i ] ; linidx + = idx* m_nocontract_strides [ i ] ; nocontract_val - = idx* m_ij_strides [ i ] ; })",
    "insertText": "if(array_size<typename Tensor::Dimensions>::value > array_size<contract_t>::value)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_nocontract_strides[0] == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (linidx + = nocontract_val ; } else { linidx + = nocontract_val* m_nocontract_strides [ 0 ] ; } } Index contract_val = left ? col : row ;)",
    "insertText": "if(array_size<contract_t>::value > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = static_cast<int>(array_size<contract_t>::value) - 1; i > 0; i--)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = contract_val / m_k_strides [ i ] ; linidx + = idx* m_contract_strides [ i ] ; contract_val - = idx* m_k_strides [ i ] ; })",
    "insertText": "if(side == Rhs && inner_dim_contiguous)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_contract_strides[0] == 1)"
  },
  {
    "label": "computeIndexPair()",
    "kind": "Method",
    "detail": "Function (linidx + = contract_val ; } else { linidx + = contract_val* m_contract_strides [ 0 ] ; } } return linidx ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE IndexPair<Index>)",
    "insertText": "computeIndexPair(Index row, Index col, const Index distance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = nocontract_val [ 0 ] / m_ij_strides [ i ] ; const Index idx1 = nocontract_val [ 1 ] / m_ij_strides [ i ] ; linidx [ 0 ] + = idx0* m_nocontract_strides [ i ] ; linidx [ 1 ] + = idx1* m_nocontract_strides [ i ] ; nocontract_val [ 0 ] - = idx0* m_ij_strides [ i ] ; nocontract_val [ 1 ] - = idx1* m_ij_strides [ i ] ; })",
    "insertText": "if(side == Lhs && inner_dim_contiguous)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (linidx [ 0 ] + = nocontract_val [ 0 ] ; linidx [ 1 ] + = nocontract_val [ 1 ] ; } else { linidx [ 0 ] + = nocontract_val [ 0 ]* m_nocontract_strides [ 0 ] ; linidx [ 1 ] + = nocontract_val [ 1 ]* m_nocontract_strides [ 0 ] ; } } Index contract_val [ 2 ] = { left ? col : row,left ? col : row + distance } ;)",
    "insertText": "if(array_size<contract_t>::value> 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (linidx [ 0 ] + = contract_val [ 0 ] ; linidx [ 1 ] + = contract_val [ 1 ] ; } else { linidx [ 0 ] + = contract_val [ 0 ]* m_contract_strides [ 0 ] ; linidx [ 1 ] + = contract_val [ 1 ]* m_contract_strides [ 0 ] ; } } return IndexPair<)",
    "insertText": "Index(linidx[0], linidx[1])"
  },
  {
    "label": "firstAligned()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Index)",
    "insertText": "firstAligned(Index size)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Index)",
    "insertText": "stride()"
  },
  {
    "label": "tensor()",
    "kind": "Method",
    "detail": "Function (} # endif const CoeffLoader<Tensor,Tensor::RawAccess,MakePointer_>&)",
    "insertText": "tensor()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} template<PacketT,int AlignmentType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::enable_if<internal::unpacket_traits<PacketT>::size = = packet_size,PacketT>::type)",
    "insertText": "load(Index i, Index j)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(packet_size % 2 == 0, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "computeIndex()",
    "kind": "Method",
    "detail": "Function (const Index index = this ->)",
    "insertText": "computeIndex(i, j)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->computeIndex(i+packet_size-1, j) == index + packet_size-1)"
  },
  {
    "label": "computeIndexPair()",
    "kind": "Method",
    "detail": "Function (} const IndexPair<Index> indexPair = this ->)",
    "insertText": "computeIndexPair(i, j, packet_size - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index first = indexPair . first ; const Index lastIdx = indexPair . second ;)",
    "insertText": "if(Tensor::PacketAccess && (side == Lhs || internal::array_size<contract_t>::value <= 1 || !inner_dim_reordered) && (lastIdx - first) == (packet_size - 1))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_ALIGN_MAX Scalar data [ packet_size ] ; data [ 0 ] = this -> m_tensor .)",
    "insertText": "coeff(first)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(Index k = 1; k < packet_size - 1; k += 2)"
  },
  {
    "label": "computeIndexPair()",
    "kind": "Method",
    "detail": "Function (const IndexPair<Index> internal_pair = this ->)",
    "insertText": "computeIndexPair(i + k, j, 1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (data [ k ] = this -> m_tensor .)",
    "insertText": "coeff(internal_pair.first)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (data [ k + 1 ] = this -> m_tensor .)",
    "insertText": "coeff(internal_pair.second)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} data [ packet_size - 1 ] = this -> m_tensor .)",
    "insertText": "coeff(lastIdx)"
  },
  {
    "label": "computeIndexPair()",
    "kind": "Method",
    "detail": "Function (const Index requested_packet_size = internal::unpacket_traits<PacketT>::size ; EIGEN_ALIGN_MAX Scalar data [ requested_packet_size ] ; const IndexPair<Index> indexPair = this ->)",
    "insertText": "computeIndexPair(i, j, requested_packet_size - 1)"
  },
  {
    "label": "loadPacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketT,int AlignmentType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketT)",
    "insertText": "loadPacket(Index i, Index j)"
  },
  {
    "label": "BaseTensorContractionMapper()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int side,Tensor,nocontract_t,contract_t,bool inner_dim_contiguous,bool inner_dim_reordered,int Alignment,template<class> class MakePointer_> class BaseTensorContractionMapper<Scalar,Index,side,Tensor,nocontract_t,contract_t,1,inner_dim_contiguous,inner_dim_reordered,Alignment,MakePointer_> : public SimpleTensorContractionMapper<Scalar,Index,side,Tensor,nocontract_t,contract_t,1,inner_dim_contiguous,Alignment,MakePointer_> { public : typedef SimpleTensorContractionMapper<Scalar,Index,side,Tensor,nocontract_t,contract_t,1,inner_dim_contiguous,Alignment,MakePointer_> ParentMapper ; EIGEN_DEVICE_FUNC)",
    "insertText": "BaseTensorContractionMapper(const Tensor& tensor, const nocontract_t& nocontract_strides, const nocontract_t& ij_strides, const contract_t& contract_strides, const contract_t& k_strides) : ParentMapper(tensor, nocontract_strides, ij_strides, contract_strides, k_strides)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX Scalar data [ 1 ] ; data [ 0 ] = this -> m_tensor .)",
    "insertText": "coeff(this->computeIndex(i, j))"
  },
  {
    "label": "DirectOffsets()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Index,int side,Tensor,nocontract_t,contract_t,int packet_size,bool inner_dim_contiguous,bool inner_dim_reordered,int Alignment,template<class> class MakePointer_ = MakePointer> class TensorContractionSubMapper { public : typedef BaseTensorContractionMapper<Scalar,Index,side,Tensor,nocontract_t,contract_t,packet_size,inner_dim_contiguous,inner_dim_reordered,Alignment,MakePointer_> ParentMapper ; typedef TensorContractionSubMapper<Scalar,Index,side,Tensor,nocontract_t,contract_t,packet_size,inner_dim_contiguous,inner_dim_reordered,Alignment,MakePointer_> Self ; typedef Self LinearMapper ; enum { UseDirectOffsets =)",
    "insertText": "DirectOffsets(side == Lhs) && inner_dim_contiguous && (array_size<contract_t>::value > 0)"
  },
  {
    "label": "TensorContractionSubMapper()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "TensorContractionSubMapper(const ParentMapper& base_mapper, Index vert_offset, Index horiz_offset) : m_base_mapper(base_mapper), m_vert_offset(vert_offset), m_horiz_offset(horiz_offset)"
  },
  {
    "label": "offsetBuffer()",
    "kind": "Method",
    "detail": "Function (m_base_mapper .)",
    "insertText": "offsetBuffer(vert_offset + horiz_offset * stride)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Scalar)",
    "insertText": "operator()(Index i)"
  },
  {
    "label": "m_base_mapper()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "m_base_mapper(i + m_vert_offset, m_horiz_offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE Scalar)",
    "insertText": "operator()(Index i, Index j)"
  },
  {
    "label": "m_base_mapper()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "m_base_mapper(i + m_vert_offset, j + m_horiz_offset)"
  },
  {
    "label": "loadPacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketT> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketT)",
    "insertText": "loadPacket(Index i)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (} return m_base_mapper . template loadPacket<PacketT,)",
    "insertText": "Alignment(i + m_vert_offset, m_horiz_offset)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (} return m_base_mapper . template loadPacket<PacketT,)",
    "insertText": "Alignment(i + m_vert_offset, j + m_horiz_offset)"
  },
  {
    "label": "AlignmentType()",
    "kind": "Method",
    "detail": "Function (} return m_base_mapper . template loadPacket<PacketT,)",
    "insertText": "AlignmentType(i + m_vert_offset, j + m_horiz_offset)"
  },
  {
    "label": "storePacket()",
    "kind": "Method",
    "detail": "Function (} template<PacketT> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "storePacket(Index i, const PacketT& p)"
  },
  {
    "label": "storePacket()",
    "kind": "Method",
    "detail": "Function (m_base_mapper .)",
    "insertText": "storePacket(i, 0, p)"
  },
  {
    "label": "storePacket()",
    "kind": "Method",
    "detail": "Function (} m_base_mapper .)",
    "insertText": "storePacket(i + m_vert_offset, m_horiz_offset, p)"
  },
  {
    "label": "getLinearMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE LinearMapper)",
    "insertText": "getLinearMapper(Index i, Index j)"
  },
  {
    "label": "LinearMapper()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LinearMapper(m_base_mapper, i + m_vert_offset, j + m_horiz_offset)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} template<PacketT,int AlignmentType> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketT)",
    "insertText": "load(Index i)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<PacketT, PacketT>::value), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "ActualAlignment()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "ActualAlignment(AlignmentType == Aligned) && (Alignment == Aligned)"
  },
  {
    "label": "ActualAlignment()",
    "kind": "Method",
    "detail": "Function (} return m_base_mapper . template loadPacket<PacketT,)",
    "insertText": "ActualAlignment(i + m_vert_offset, m_horiz_offset)"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (} template<PacketT> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE bool)",
    "insertText": "aligned(Index)"
  },
  {
    "label": "base_mapper()",
    "kind": "Method",
    "detail": "Function (} # endif const ParentMapper&)",
    "insertText": "base_mapper()"
  },
  {
    "label": "getSubMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE SubMapper)",
    "insertText": "getSubMapper(Index i, Index j)"
  },
  {
    "label": "getVectorMapper()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE VectorMapper)",
    "insertText": "getVectorMapper(Index i, Index j)"
  },
  {
    "label": "get_tensor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE const CoeffLoader<Tensor,Tensor::RawAccess,MakePointer_>&)",
    "insertText": "get_tensor()"
  }
]