[
  {
    "label": "FTextLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextLocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMoveCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoveCursor"
  },
  {
    "label": "FActiveTextEditContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTextEditContextMenu"
  },
  {
    "label": "ISlateEditableTextWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateEditableTextWidget"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Application / IMenu . h \" # include \" Widgets / Input / IVirtualKeyboardEntry . h \" # include \" ISlateEditableTextWidget . generated . h \" struct FTextLocation ; enum class ECursorMoveMethod { Cardinal,ScreenPosition } ; enum class ECursorMoveGranularity { Character,Word } ; enum class ECursorAction { MoveCursor,SelectText } ; enum class ETextLocation { BeginningOfDocument,EndOfDocument,BeginningOfLine,EndOfLine,PreviousPage,NextPage,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "Cardinal()",
    "kind": "Method",
    "detail": "Function (TextChangeOnDismiss,TextCommitOnAccept,TextCommitOnDismiss,} ; class FMoveCursor { public : FMoveCursor)",
    "insertText": "Cardinal(ECursorMoveGranularity Granularity, FIntPoint Direction, ECursorAction Action)"
  },
  {
    "label": "ViaScreenPointer()",
    "kind": "Method",
    "detail": "Function (FMoveCursor)",
    "insertText": "ViaScreenPointer(FVector2D LocalPosition, float GeometryScale, ECursorAction Action)"
  },
  {
    "label": "GetMoveMethod()",
    "kind": "Method",
    "detail": "Function (ECursorMoveMethod)",
    "insertText": "GetMoveMethod()"
  },
  {
    "label": "IsVerticalMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVerticalMovement()"
  },
  {
    "label": "IsHorizontalMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHorizontalMovement()"
  },
  {
    "label": "GetAction()",
    "kind": "Method",
    "detail": "Function (ECursorAction)",
    "insertText": "GetAction()"
  },
  {
    "label": "GetMoveDirection()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetMoveDirection()"
  },
  {
    "label": "GetLocalPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetLocalPosition()"
  },
  {
    "label": "GetGranularity()",
    "kind": "Method",
    "detail": "Function (ECursorMoveGranularity)",
    "insertText": "GetGranularity()"
  },
  {
    "label": "GetGeometryScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGeometryScale()"
  },
  {
    "label": "FMoveCursor()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMoveCursor(ECursorMoveGranularity InGranularity, ECursorMoveMethod InMethod, FVector2D InDirectionOrPosition, float InGeometryScale, ECursorAction InAction)"
  },
  {
    "label": "FActiveTextEditContextMenu()",
    "kind": "Method",
    "detail": "Function (ECursorMoveGranularity Granularity ; ECursorMoveMethod Method ; FVector2f DirectionOrPosition ; ECursorAction Action ; float GeometryScale ; } ; class FActiveTextEditContextMenu { public :)",
    "insertText": "FActiveTextEditContextMenu() : bIsPendingSummon(false) , ActiveMenu()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "PrepareToSummon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareToSummon()"
  },
  {
    "label": "SummonSucceeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SummonSucceeded(const TSharedRef<IMenu>& InMenu)"
  },
  {
    "label": "SummonFailed()",
    "kind": "Method",
    "detail": "Function (bIsPendingSummon = false ; ActiveMenu = InMenu ; } void)",
    "insertText": "SummonFailed()"
  },
  {
    "label": "Dismiss()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dismiss()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (auto ActiveMenuPin = ActiveMenu .)",
    "insertText": "Pin()"
  },
  {
    "label": "IsTextReadOnly()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsPendingSummon ; TWeakPtr<IMenu> ActiveMenu ; } ; class ISlateEditableTextWidget { public : bool)",
    "insertText": "IsTextReadOnly()"
  },
  {
    "label": "IsTextPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextPassword()"
  },
  {
    "label": "IsMultiLineTextEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultiLineTextEdit()"
  },
  {
    "label": "ShouldJumpCursorToEndWhenFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldJumpCursorToEndWhenFocused()"
  },
  {
    "label": "ShouldSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextWhenFocused()"
  },
  {
    "label": "ShouldClearTextSelectionOnFocusLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearTextSelectionOnFocusLoss()"
  },
  {
    "label": "ShouldRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRevertTextOnEscape()"
  },
  {
    "label": "ShouldClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClearKeyboardFocusOnCommit()"
  },
  {
    "label": "ShouldSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectAllTextOnCommit()"
  },
  {
    "label": "ShouldSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSelectWordOnMouseDoubleClick()"
  },
  {
    "label": "CanInsertCarriageReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertCarriageReturn()"
  },
  {
    "label": "CanTypeCharacter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTypeCharacter(const TCHAR InChar)"
  },
  {
    "label": "EnsureActiveTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureActiveTick()"
  },
  {
    "label": "GetVirtualKeyboardType()",
    "kind": "Method",
    "detail": "Function (EKeyboardType)",
    "insertText": "GetVirtualKeyboardType()"
  },
  {
    "label": "GetVirtualKeyboardOptions()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardOptions)",
    "insertText": "GetVirtualKeyboardOptions()"
  },
  {
    "label": "GetVirtualKeyboardTrigger()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardTrigger)",
    "insertText": "GetVirtualKeyboardTrigger()"
  },
  {
    "label": "GetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (EVirtualKeyboardDismissAction)",
    "insertText": "GetVirtualKeyboardDismissAction()"
  },
  {
    "label": "GetSlateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSlateWidget()"
  },
  {
    "label": "GetSlateWidgetPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSlateWidgetPtr()"
  },
  {
    "label": "BuildContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildContextMenuContent()"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, const ETextCommit::Type InTextAction)"
  },
  {
    "label": "OnCursorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCursorMoved(const FTextLocation& InLocation)"
  },
  {
    "label": "UpdateAndClampHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampHorizontalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  },
  {
    "label": "UpdateAndClampVerticalScrollBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateAndClampVerticalScrollBar(const float InViewOffset, const float InViewFraction, const EVisibility InVisiblityOverride)"
  }
]