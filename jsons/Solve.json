[
  {
    "label": "SolveImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolveImpl"
  },
  {
    "label": "solve_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "solve_traits"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Solve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Solve"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SOLVE_H # define EIGEN_SOLVE_H namespace Eigen { template<Decomposition,RhsType,StorageKind> class SolveImpl ; namespace internal { template<Decomposition,RhsType,StorageKind> struct solve_traits ; template<Decomposition,RhsType> struct solve_traits<Decomposition,RhsType,Dense> { typedef make_proper_matrix_type<RhsType::Scalar,Decomposition::ColsAtCompileTime,RhsType::ColsAtCompileTime,RhsType::PlainObject::Options,Decomposition::MaxColsAtCompileTime,RhsType::MaxColsAtCompileTime>::type PlainObject ; } ; template<Decomposition,RhsType> struct traits<Solve<Decomposition,RhsType>> : traits<solve_traits<Decomposition,RhsType,internal::traits<RhsType>::StorageKind>::PlainObject> { typedef solve_traits<Decomposition,RhsType,internal::traits<RhsType>::StorageKind>::PlainObject PlainObject ; typedef promote_index_type<Decomposition::StorageIndex,RhsType::StorageIndex>::type StorageIndex ; typedef traits<PlainObject> BaseTraits ; enum { Flags = BaseTraits::Flags& RowMajorBit,CoeffReadCost = HugeCost } ; } ; } template<Decomposition,RhsType> class Solve : public SolveImpl<Decomposition,RhsType,internal::traits<RhsType>::StorageKind> { public : typedef internal::traits<Solve>::PlainObject PlainObject ; typedef internal::traits<Solve>::StorageIndex StorageIndex ;)",
    "insertText": "Solve(const Decomposition &dec, const RhsType &rhs) : m_dec(dec), m_rhs(rhs)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Decomposition&)",
    "insertText": "dec()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} ; template<Decomposition,RhsType,StorageKind> class SolveImpl : public internal::generic_xpr_base<Solve<Decomposition,RhsType>,MatrixXpr,StorageKind>::type { public : typedef internal::generic_xpr_base<Solve<Decomposition,RhsType>,MatrixXpr,StorageKind>::type Base ; } ; namespace internal { template<Decomposition,RhsType> struct evaluator<Solve<Decomposition,RhsType>> : public evaluator<Solve<Decomposition,RhsType>::PlainObject> { typedef Solve<Decomposition,RhsType> SolveType ; typedef SolveType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ; enum { Flags = Base::Flags | EvalBeforeNestingBit } ; EIGEN_DEVICE_FUNC)",
    "insertText": "evaluator(const SolveType& solve) : m_result(solve.rows(), solve.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (solve .)",
    "insertText": "dec()._solve_impl(solve.rhs(), m_result)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} protected : PlainObject m_result ; } ; template<DstXprType,DecType,RhsType,Scalar> struct Assignment<DstXprType,Solve<DecType,RhsType>,internal::assign_op<Scalar,Scalar>,Dense2Dense> { typedef Solve<DecType,RhsType> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "dec()._solve_impl(src.rhs(), dst)"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "dec().nestedExpression().template _solve_impl_transposed<false>(src.rhs(), dst)"
  },
  {
    "label": "dec()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "dec().nestedExpression().nestedExpression().template _solve_impl_transposed<true>(src.rhs(), dst)"
  }
]