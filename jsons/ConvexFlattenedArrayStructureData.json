[
  {
    "label": "FLegacyConvexStructureDataLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyConvexStructureDataLoader"
  },
  {
    "label": "FConvexFlattenedArrayStructureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexFlattenedArrayStructureData"
  },
  {
    "label": "TConvexFlattenedArrayStructureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConvexFlattenedArrayStructureData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConvexFlattenedArrayStructureData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ConvexHalfEdgeStructureData . h \" # include \" ChaosArchive . h \" # include \" ChaosCheck . h \" # include \" ChaosLog . h \" # include \" UObject / FortniteMainBranchObjectVersion . h \" # include \" UObject / PhysicsObjectVersion . h \" namespace Chaos { namespace Legacy { class FLegacyConvexStructureDataLoader ; class FConvexFlattenedArrayStructureData { public :)",
    "insertText": "FConvexFlattenedArrayStructureData()"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (} } ; template<T_INDEX,T_OFFSETINDEX> class TConvexFlattenedArrayStructureData : public FConvexFlattenedArrayStructureData { public : using FIndex = T_INDEX ; using FOffsetIndex = T_OFFSETINDEX ; int32)",
    "insertText": "NumVertices()"
  },
  {
    "label": "NumPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlanes()"
  },
  {
    "label": "NumVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVertexPlanes(int32 VertexIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int32 VertexPlaneFlatArrayIndex = VertexPlanesOffsetCount [ VertexIndex ] . Key + VertexPlaneIndex ;)",
    "insertText": "return(int32)"
  },
  {
    "label": "NumPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlaneVertices(int32 PlaneIndex)"
  },
  {
    "label": "SetPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlaneVertices(const TArray<TArray<int32>>& InPlaneVertices, int32 NumVerts)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (PlaneVerticesOffsetCount .)",
    "insertText": "SetNumZeroed(InPlaneVertices.Num())"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (VertexPlanesOffsetCount .)",
    "insertText": "SetNumZeroed(NumVerts)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int FlatArrayIndexCount = 0 ;)",
    "insertText": "for(int32 PlaneIndex = 0; PlaneIndex < InPlaneVertices.Num(); ++PlaneIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FlatArrayIndexCount + = InPlaneVertices [ PlaneIndex ] .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndex = InPlaneVertices [ PlaneIndex ] [ PlaneVertexIndex ] ; VertexPlanesOffsetCount [ VertexIndex ] . Value + + ; } } int VertexPlanesArrayStart = 0 ;)",
    "insertText": "for(int32 VertexIndex = 0; VertexIndex < NumVerts; ++VertexIndex)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (VertexPlanesOffsetCount [ VertexIndex ] . Key = VertexPlanesArrayStart ; VertexPlanesArrayStart + = VertexPlanesOffsetCount [ VertexIndex ] . Value ; VertexPlanesOffsetCount [ VertexIndex ] . Value = 0 ; } PlaneVertices .)",
    "insertText": "SetNumZeroed(FlatArrayIndexCount)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<PlaneVerticesOffsetCount ; Ar<<VertexPlanesOffsetCount ; Ar<<PlaneVertices ; Ar<<VertexPlanes ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, TConvexFlattenedArrayStructureData<T_INDEX, T_OFFSETINDEX>& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "CustomVer()",
    "kind": "Method",
    "detail": "Function (bool bUseVariableSizeStructureDataUE4 = Ar .)",
    "insertText": "CustomVer(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "CustomVer()",
    "kind": "Method",
    "detail": "Function (bool bUseVariableSizeStructureDataFN = Ar .)",
    "insertText": "CustomVer(FFortniteMainBranchObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bUseVariableSizeStructureData = bUseVariableSizeStructureDataUE4 | | bUseVariableSizeStructureDataFN ;)",
    "insertText": "if(!bUseVariableSizeStructureData)"
  },
  {
    "label": "LoadFixedSizeRaggedArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFixedSizeRaggedArrays(Ar, OutPlaneVertices, OutNumVertices)"
  },
  {
    "label": "LoadVariableSizePackedArrays()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "LoadVariableSizePackedArrays(Ar, OutPlaneVertices, OutNumVertices)"
  },
  {
    "label": "LoadFixedSizeRaggedArrays()",
    "kind": "Method",
    "detail": "Function (} } private : enum class EIndexType : int8 { None,S32,U8,} ; void)",
    "insertText": "LoadFixedSizeRaggedArrays(FArchive& Ar, TArray<TArray<int32>>& OutPlaneVertices, int32& OutNumVertices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> OldPlaneVertices ; TArray<TArray<int32>> OldVertexPlanes ; Ar<<OldPlaneVertices ; Ar<<OldVertexPlanes ; OutPlaneVertices =)",
    "insertText": "MoveTemp(OldPlaneVertices)"
  },
  {
    "label": "LoadVariableSizePackedArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadVariableSizePackedArrays(FArchive& Ar, TArray<TArray<int32>>& OutPlaneVertices, int32& OutNumVertices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EIndexType OldIndexType ; TArray<TArray<int32>> OldPlaneVertices ; int32 OldNumVertices = 0 ; Ar<<OldIndexType ;)",
    "insertText": "if(OldIndexType == EIndexType::S32)"
  },
  {
    "label": "ExtractData()",
    "kind": "Method",
    "detail": "Function (FConvexFlattenedArrayStructureDataS32 OldData ; Ar<<OldData ;)",
    "insertText": "ExtractData(OldData, OldPlaneVertices, OldNumVertices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(OldIndexType == EIndexType::U8)"
  },
  {
    "label": "ExtractData()",
    "kind": "Method",
    "detail": "Function (OutNumVertices = OldNumVertices ; } template<T_OLDCONTAINER> void)",
    "insertText": "ExtractData(const T_OLDCONTAINER& OldData, TArray<TArray<int32>>& OldPlaneVertices, int32& OldNumVertices)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OldPlaneVertices .)",
    "insertText": "SetNum(OldData.NumPlanes())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OldPlaneVertices [ PlaneIndex ] .)",
    "insertText": "SetNum(OldData.NumPlaneVertices(PlaneIndex))"
  },
  {
    "label": "PlaneVertexIndex()",
    "kind": "Method",
    "detail": "Function (OldPlaneVertices [ PlaneIndex ] [)",
    "insertText": "PlaneVertexIndex(int32)OldData.GetPlaneVertex(PlaneIndex, PlaneVertexIndex)"
  }
]