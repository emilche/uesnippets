[
  {
    "label": "VDSOSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VDSOSupport"
  },
  {
    "label": "VDSOSupport()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_DEBUGGING_INTERNAL_VDSO_SUPPORT_H_ # define ABSL_DEBUGGING_INTERNAL_VDSO_SUPPORT_H_ # include<atomic> # include \" absl / base / attributes . h \" # include \" absl / debugging / internal / elf_mem_image . h \" # ifdef ABSL_HAVE_ELF_MEM_IMAGE # ifdef ABSL_HAVE_VDSO_SUPPORT # error ABSL_HAVE_VDSO_SUPPORT cannot be directly set # else # define ABSL_HAVE_VDSO_SUPPORT 1 # endif namespace absl { ABSL_NAMESPACE_BEGIN namespace debugging_internal { class VDSOSupport { public :)",
    "insertText": "VDSOSupport()"
  },
  {
    "label": "IsPresent()",
    "kind": "Method",
    "detail": "Function (typedef ElfMemImage::SymbolInfo SymbolInfo ; typedef ElfMemImage::SymbolIterator SymbolIterator ; # ifdef __powerpc64__ enum { kVDSOSymbolType = STT_NOTYPE } ; # else enum { kVDSOSymbolType = STT_FUNC } ; # endif bool)",
    "insertText": "IsPresent()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} SymbolIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} SymbolIterator)",
    "insertText": "end()"
  },
  {
    "label": "LookupSymbol()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LookupSymbol(const char *name, const char *version, int symbol_type, SymbolInfo *info_out)"
  },
  {
    "label": "LookupSymbolByAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LookupSymbolByAddress(const void *address, SymbolInfo *info_out)"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "SetBase(const void *s)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "Init()"
  },
  {
    "label": "InitAndGetCPU()",
    "kind": "Method",
    "detail": "Function (private : ElfMemImage image_ ; std::atomic<const void*> vdso_base_ ; long)",
    "insertText": "InitAndGetCPU(unsigned *cpu, void *cache, void *unused)"
  },
  {
    "label": "GetCPUViaSyscall()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetCPUViaSyscall(unsigned *cpu, void *cache, void *unused)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "long(*GetCpuFn)(unsigned *cpu, void *cache, void *unused)"
  },
  {
    "label": "GetCPU()",
    "kind": "Method",
    "detail": "Function (ABSL_CONST_INIT std::atomic<GetCpuFn> getcpu_fn_ ; int)",
    "insertText": "GetCPU(void)"
  },
  {
    "label": "VDSOSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VDSOSupport(const VDSOSupport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VDSOSupport&)",
    "insertText": "operator(const VDSOSupport&)"
  },
  {
    "label": "GetCPU()",
    "kind": "Method",
    "detail": "Function (} ; int)",
    "insertText": "GetCPU()"
  }
]