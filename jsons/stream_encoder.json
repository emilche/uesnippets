[
  {
    "label": "FLAC__StreamEncoderProtected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderProtected"
  },
  {
    "label": "FLAC__StreamEncoderPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderPrivate"
  },
  {
    "label": "FLAC__StreamEncoderReadStatus()",
    "kind": "Method",
    "detail": "Function (# ifndef FLAC__STREAM_ENCODER_H # define FLAC__STREAM_ENCODER_H # include<stdio . h> # include \" export . h \" # include \" format . h \" # include \" stream_decoder . h \" # ifdef __cplusplus \" C \" { # endif typedef enum { FLAC__STREAM_ENCODER_OK = 0,FLAC__STREAM_ENCODER_UNINITIALIZED,FLAC__STREAM_ENCODER_OGG_ERROR,FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR,FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA,FLAC__STREAM_ENCODER_CLIENT_ERROR,FLAC__STREAM_ENCODER_IO_ERROR,FLAC__STREAM_ENCODER_FRAMING_ERROR,FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR } FLAC__StreamEncoderState ; const char* const FLAC__StreamEncoderStateString [ ] ; typedef enum { FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0,FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR,FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION,FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER,FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE,FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA,FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED } FLAC__StreamEncoderInitStatus ; const char* const FLAC__StreamEncoderInitStatusString [ ] ; typedef enum { FLAC__STREAM_ENCODER_READ_STATUS_CONTINUE,FLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM,FLAC__STREAM_ENCODER_READ_STATUS_ABORT,FLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED } FLAC__StreamEncoderReadStatus ; const char* const FLAC__StreamEncoderReadStatusString [ ] ; typedef enum { FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0,FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR } FLAC__StreamEncoderWriteStatus ; const char* const FLAC__StreamEncoderWriteStatusString [ ] ; typedef enum { FLAC__STREAM_ENCODER_SEEK_STATUS_OK,FLAC__STREAM_ENCODER_SEEK_STATUS_ERROR,FLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED } FLAC__StreamEncoderSeekStatus ; const char* const FLAC__StreamEncoderSeekStatusString [ ] ; typedef enum { FLAC__STREAM_ENCODER_TELL_STATUS_OK,FLAC__STREAM_ENCODER_TELL_STATUS_ERROR,FLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED } FLAC__StreamEncoderTellStatus ; const char* const FLAC__StreamEncoderTellStatusString [ ] ; struct FLAC__StreamEncoderProtected ; struct FLAC__StreamEncoderPrivate ; typedef struct { struct FLAC__StreamEncoderProtected* protected_ ; struct FLAC__StreamEncoderPrivate* private_ ; } FLAC__StreamEncoder ; typedef)",
    "insertText": "FLAC__StreamEncoderReadStatus(*FLAC__StreamEncoderReadCallback)(const FLAC__StreamEncoder *encoder, FLAC__byte buffer[], size_t *bytes, void *client_data)"
  },
  {
    "label": "FLAC__StreamEncoderWriteStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamEncoderWriteStatus(*FLAC__StreamEncoderWriteCallback)(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, uint32_t samples, uint32_t current_frame, void *client_data)"
  },
  {
    "label": "FLAC__StreamEncoderSeekStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamEncoderSeekStatus(*FLAC__StreamEncoderSeekCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 absolute_byte_offset, void *client_data)"
  },
  {
    "label": "FLAC__StreamEncoderTellStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamEncoderTellStatus(*FLAC__StreamEncoderTellCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_byte_offset, void *client_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FLAC__StreamEncoderMetadataCallback)(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FLAC__StreamEncoderProgressCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 bytes_written, FLAC__uint64 samples_written, uint32_t frames_written, uint32_t total_frames_estimate, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_new()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoder*)",
    "insertText": "FLAC__stream_encoder_new(void)"
  },
  {
    "label": "FLAC__stream_encoder_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLAC__stream_encoder_delete(FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_set_ogg_serial_number()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_ogg_serial_number(FLAC__StreamEncoder *encoder, long serial_number)"
  },
  {
    "label": "FLAC__stream_encoder_set_verify()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_verify(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_streamable_subset()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_streamable_subset(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_channels()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_channels(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_bits_per_sample()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_bits_per_sample(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_sample_rate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_sample_rate(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_compression_level()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_compression_level(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_blocksize()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_blocksize(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_mid_side_stereo(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_loose_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_loose_mid_side_stereo(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_apodization()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_apodization(FLAC__StreamEncoder *encoder, const char *specification)"
  },
  {
    "label": "FLAC__stream_encoder_set_max_lpc_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_max_lpc_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_qlp_coeff_precision()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_qlp_coeff_precision(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_qlp_coeff_prec_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_qlp_coeff_prec_search(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_escape_coding()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_escape_coding(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_exhaustive_model_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_exhaustive_model_search(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_min_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_min_residual_partition_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_max_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_max_residual_partition_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_rice_parameter_search_dist()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_rice_parameter_search_dist(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_total_samples_estimate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_total_samples_estimate(FLAC__StreamEncoder *encoder, FLAC__uint64 value)"
  },
  {
    "label": "FLAC__stream_encoder_set_metadata()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_metadata(FLAC__StreamEncoder *encoder, FLAC__StreamMetadata **metadata, uint32_t num_blocks)"
  },
  {
    "label": "FLAC__stream_encoder_set_limit_min_bitrate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_limit_min_bitrate(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_get_state()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderState)",
    "insertText": "FLAC__stream_encoder_get_state(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify_decoder_state()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderState)",
    "insertText": "FLAC__stream_encoder_get_verify_decoder_state(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_resolved_state_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FLAC__stream_encoder_get_resolved_state_string(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify_decoder_error_stats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLAC__stream_encoder_get_verify_decoder_error_stats(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_sample, uint32_t *frame_number, uint32_t *channel, uint32_t *sample, FLAC__int32 *expected, FLAC__int32 *got)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_verify(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_streamable_subset()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_streamable_subset(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_channels()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_channels(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_bits_per_sample()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_bits_per_sample(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_sample_rate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_sample_rate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_blocksize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_blocksize(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_mid_side_stereo(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_loose_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_loose_mid_side_stereo(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_max_lpc_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_max_lpc_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_qlp_coeff_precision()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_qlp_coeff_precision(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_qlp_coeff_prec_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_qlp_coeff_prec_search(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_escape_coding()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_escape_coding(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_exhaustive_model_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_exhaustive_model_search(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_min_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_min_residual_partition_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_max_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_max_residual_partition_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_rice_parameter_search_dist()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_rice_parameter_search_dist(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_total_samples_estimate()",
    "kind": "Method",
    "detail": "Function (FLAC__uint64)",
    "insertText": "FLAC__stream_encoder_get_total_samples_estimate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_limit_min_bitrate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_limit_min_bitrate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_init_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_stream(FLAC__StreamEncoder *encoder, FLAC__StreamEncoderWriteCallback write_callback, FLAC__StreamEncoderSeekCallback seek_callback, FLAC__StreamEncoderTellCallback tell_callback, FLAC__StreamEncoderMetadataCallback metadata_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_stream(FLAC__StreamEncoder *encoder, FLAC__StreamEncoderReadCallback read_callback, FLAC__StreamEncoderWriteCallback write_callback, FLAC__StreamEncoderSeekCallback seek_callback, FLAC__StreamEncoderTellCallback tell_callback, FLAC__StreamEncoderMetadataCallback metadata_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_FILE(FLAC__StreamEncoder *encoder, FILE *file, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_FILE(FLAC__StreamEncoder *encoder, FILE *file, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_file(FLAC__StreamEncoder *encoder, const char *filename, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_file(FLAC__StreamEncoder *encoder, const char *filename, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_finish()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_process()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_process(FLAC__StreamEncoder *encoder, const FLAC__int32 * const buffer[], uint32_t samples)"
  },
  {
    "label": "FLAC__stream_encoder_process_interleaved()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_process_interleaved(FLAC__StreamEncoder *encoder, const FLAC__int32 buffer[], uint32_t samples)"
  }
]