[
  {
    "label": "FLAC__StreamEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLAC__StreamEncoder"
  },
  {
    "label": "FLAC__StreamEncoderProtected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderProtected"
  },
  {
    "label": "FLAC__StreamEncoderPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderPrivate"
  },
  {
    "label": "FLAC__StreamEncoderProtected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderProtected"
  },
  {
    "label": "FLAC__StreamEncoderPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamEncoderPrivate"
  },
  {
    "label": "method",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "method"
  },
  {
    "label": "FLAC__stream_encoder_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLAC__stream_encoder_delete(FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_set_ogg_serial_number()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_ogg_serial_number(FLAC__StreamEncoder *encoder, long serial_number)"
  },
  {
    "label": "FLAC__stream_encoder_set_verify()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_verify(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_streamable_subset()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_streamable_subset(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_channels()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_channels(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_bits_per_sample()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_bits_per_sample(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_sample_rate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_sample_rate(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_compression_level()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_compression_level(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_blocksize()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_blocksize(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_mid_side_stereo(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_loose_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_loose_mid_side_stereo(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_apodization()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_apodization(FLAC__StreamEncoder *encoder, const char *specification)"
  },
  {
    "label": "FLAC__stream_encoder_set_max_lpc_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_max_lpc_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_qlp_coeff_precision()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_qlp_coeff_precision(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_qlp_coeff_prec_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_qlp_coeff_prec_search(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_escape_coding()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_escape_coding(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_do_exhaustive_model_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_do_exhaustive_model_search(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_set_min_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_min_residual_partition_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_max_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_max_residual_partition_order(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_rice_parameter_search_dist()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_rice_parameter_search_dist(FLAC__StreamEncoder *encoder, uint32_t value)"
  },
  {
    "label": "FLAC__stream_encoder_set_total_samples_estimate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_total_samples_estimate(FLAC__StreamEncoder *encoder, FLAC__uint64 value)"
  },
  {
    "label": "FLAC__stream_encoder_set_metadata()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_metadata(FLAC__StreamEncoder *encoder, FLAC__StreamMetadata **metadata, uint32_t num_blocks)"
  },
  {
    "label": "FLAC__stream_encoder_set_limit_min_bitrate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_set_limit_min_bitrate(FLAC__StreamEncoder *encoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_encoder_get_state()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderState)",
    "insertText": "FLAC__stream_encoder_get_state(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify_decoder_state()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderState)",
    "insertText": "FLAC__stream_encoder_get_verify_decoder_state(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify_decoder_error_stats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLAC__stream_encoder_get_verify_decoder_error_stats(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_sample, uint32_t *frame_number, uint32_t *channel, uint32_t *sample, FLAC__int32 *expected, FLAC__int32 *got)"
  },
  {
    "label": "FLAC__stream_encoder_get_verify()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_verify(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_streamable_subset()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_streamable_subset(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_channels()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_channels(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_bits_per_sample()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_bits_per_sample(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_sample_rate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_sample_rate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_blocksize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_blocksize(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_mid_side_stereo(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_loose_mid_side_stereo()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_loose_mid_side_stereo(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_max_lpc_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_max_lpc_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_qlp_coeff_precision()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_qlp_coeff_precision(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_qlp_coeff_prec_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_qlp_coeff_prec_search(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_escape_coding()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_escape_coding(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_do_exhaustive_model_search()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_do_exhaustive_model_search(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_min_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_min_residual_partition_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_max_residual_partition_order()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_max_residual_partition_order(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_rice_parameter_search_dist()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_encoder_get_rice_parameter_search_dist(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_total_samples_estimate()",
    "kind": "Method",
    "detail": "Function (FLAC__uint64)",
    "insertText": "FLAC__stream_encoder_get_total_samples_estimate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_get_limit_min_bitrate()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_get_limit_min_bitrate(const FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_init_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_stream(FLAC__StreamEncoder *encoder, FLAC__StreamEncoderWriteCallback write_callback, FLAC__StreamEncoderSeekCallback seek_callback, FLAC__StreamEncoderTellCallback tell_callback, FLAC__StreamEncoderMetadataCallback metadata_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_stream(FLAC__StreamEncoder *encoder, FLAC__StreamEncoderReadCallback read_callback, FLAC__StreamEncoderWriteCallback write_callback, FLAC__StreamEncoderSeekCallback seek_callback, FLAC__StreamEncoderTellCallback tell_callback, FLAC__StreamEncoderMetadataCallback metadata_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_FILE(FLAC__StreamEncoder *encoder, FILE *file, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_FILE(FLAC__StreamEncoder *encoder, FILE *file, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_file(FLAC__StreamEncoder *encoder, const char *filename, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_init_ogg_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamEncoderInitStatus)",
    "insertText": "FLAC__stream_encoder_init_ogg_file(FLAC__StreamEncoder *encoder, const char *filename, FLAC__StreamEncoderProgressCallback progress_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_encoder_finish()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)"
  },
  {
    "label": "FLAC__stream_encoder_process()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_process(FLAC__StreamEncoder *encoder, const FLAC__int32 * const buffer[], uint32_t samples)"
  },
  {
    "label": "FLAC__stream_encoder_process_interleaved()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_encoder_process_interleaved(FLAC__StreamEncoder *encoder, const FLAC__int32 buffer[], uint32_t samples)"
  }
]