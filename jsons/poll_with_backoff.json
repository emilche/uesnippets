[
  {
    "label": "_Fn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn"
  },
  {
    "label": "_BFn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BFn"
  },
  {
    "label": "__spinning_backoff_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__spinning_backoff_policy"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___THREAD_POLL_WITH_BACKOFF_H # define _LIBCPP___THREAD_POLL_WITH_BACKOFF_H # include<__availability> # include<__chrono / duration . h> # include<__chrono / high_resolution_clock . h> # include<__chrono / steady_clock . h> # include<__chrono / time_point . h> # include<__config> # include<__filesystem / file_time_type . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__libcpp_thread_poll_with_backoff()",
    "kind": "Method",
    "detail": "Function (template<class _Fn,class _BFn> _LIBCPP_AVAILABILITY_SYNC _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__libcpp_thread_poll_with_backoff(_Fn&& __f, _BFn&& __bf, chrono::nanoseconds __max_elapsed = chrono::nanoseconds::zero())"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (auto const __start = chrono::)",
    "insertText": "now()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } struct __spinning_backoff_policy { _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator()(chrono::nanoseconds const&)"
  }
]