[
  {
    "label": "OpenSSLAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLAdapter"
  },
  {
    "label": "EarlyExitCatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EarlyExitCatcher"
  },
  {
    "label": "SSLState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLState"
  },
  {
    "label": "ssl_verify_result_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ssl_verify_result_t"
  },
  {
    "label": "OpenSSLStreamAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLStreamAdapter"
  },
  {
    "label": "OpenSSLAdapterFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLAdapterFactory"
  },
  {
    "label": "StrJoin()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_OPENSSL_ADAPTER_H_ # define RTC_BASE_OPENSSL_ADAPTER_H_ # include<openssl / ossl_typ . h> # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" rtc_base / buffer . h \" # ifdef OPENSSL_IS_BORINGSSL # include \" rtc_base / boringssl_identity . h \" # else # include \" rtc_base / openssl_identity . h \" # endif # include \" rtc_base / openssl_session_cache . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / ssl_adapter . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / ssl_stream_adapter . h \" namespace rtc { namespace webrtc_openssl_adapter_internal { std::string)",
    "insertText": "StrJoin(const std::vector<std::string>& list, char delimiter)"
  },
  {
    "label": "InitializeSSL()",
    "kind": "Method",
    "detail": "Function (} class OpenSSLAdapter final : public SSLAdapter { public : bool)",
    "insertText": "InitializeSSL()"
  },
  {
    "label": "CleanupSSL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanupSSL()"
  },
  {
    "label": "OpenSSLAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSSLAdapter(Socket* socket, OpenSSLSessionCache* ssl_session_cache = nullptr, SSLCertificateVerifier* ssl_cert_verifier = nullptr)"
  },
  {
    "label": "OpenSSLAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OpenSSLAdapter()"
  },
  {
    "label": "SetIgnoreBadCert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreBadCert(bool ignore)"
  },
  {
    "label": "SetAlpnProtocols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlpnProtocols(const std::vector<std::string>& protos)"
  },
  {
    "label": "SetEllipticCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEllipticCurves(const std::vector<std::string>& curves)"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(SSLMode mode)"
  },
  {
    "label": "SetCertVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCertVerifier(SSLCertificateVerifier* ssl_cert_verifier)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(std::unique_ptr<SSLIdentity> identity)"
  },
  {
    "label": "SetRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRole(SSLRole role)"
  },
  {
    "label": "StartSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartSSL(absl::string_view hostname)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Recv(void* pv, size_t cb, int64_t* timestamp)"
  },
  {
    "label": "RecvFrom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecvFrom(void* pv, size_t cb, SocketAddress* paddr, int64_t* timestamp)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (ConnState)",
    "insertText": "GetState()"
  },
  {
    "label": "IsResumedSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResumedSession()"
  },
  {
    "label": "CreateContext()",
    "kind": "Method",
    "detail": "Function (SSL_CTX*)",
    "insertText": "CreateContext(SSLMode mode, bool enable_cache)"
  },
  {
    "label": "OnConnectEvent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnConnectEvent(Socket* socket)"
  },
  {
    "label": "OnReadEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadEvent(Socket* socket)"
  },
  {
    "label": "OnWriteEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWriteEvent(Socket* socket)"
  },
  {
    "label": "OnCloseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseEvent(Socket* socket, int err)"
  },
  {
    "label": "EarlyExitCatcher()",
    "kind": "Method",
    "detail": "Function (private : class EarlyExitCatcher { public :)",
    "insertText": "EarlyExitCatcher(OpenSSLAdapter& adapter_ptr)"
  },
  {
    "label": "disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disable()"
  },
  {
    "label": "EarlyExitCatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EarlyExitCatcher()"
  },
  {
    "label": "BeginSSL()",
    "kind": "Method",
    "detail": "Function (private : bool disabled_ = false ; OpenSSLAdapter& adapter_ptr_ ; } ; enum SSLState { SSL_NONE,SSL_WAIT,SSL_CONNECTING,SSL_CONNECTED,SSL_ERROR } ; int)",
    "insertText": "BeginSSL()"
  },
  {
    "label": "ContinueSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ContinueSSL()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(absl::string_view context, int err, bool signal = true)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "OnTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeout()"
  },
  {
    "label": "DoSslWrite()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DoSslWrite(const void* pv, size_t cb, int* error)"
  },
  {
    "label": "SSLPostConnectionCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SSLPostConnectionCheck(SSL* ssl, absl::string_view host)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(NDEBUG) static void SSLInfoCallback(const SSL* ssl, int where, int ret)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(OPENSSL_IS_BORINGSSL) && \\ defined(WEBRTC_EXCLUDE_BUILT_IN_SSL_ROOT_CERTS) static enum ssl_verify_result_t SSLVerifyCallback(SSL* ssl, uint8_t* out_alert)"
  },
  {
    "label": "SSLVerifyInternal()",
    "kind": "Method",
    "detail": "Function (enum ssl_verify_result_t)",
    "insertText": "SSLVerifyInternal(SSL* ssl, uint8_t* out_alert)"
  },
  {
    "label": "SSLVerifyCallback()",
    "kind": "Method",
    "detail": "Function (# else int)",
    "insertText": "SSLVerifyCallback(int ok, X509_STORE_CTX* store)"
  },
  {
    "label": "SSLVerifyInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SSLVerifyInternal(int status_on_error, SSL* ssl, X509_STORE_CTX* store)"
  },
  {
    "label": "NewSSLSessionCallback()",
    "kind": "Method",
    "detail": "Function (# endif class OpenSSLStreamAdapter ; int)",
    "insertText": "NewSSLSessionCallback(SSL* ssl, SSL_SESSION* session)"
  },
  {
    "label": "OpenSSLAdapterFactory()",
    "kind": "Method",
    "detail": "Function (OpenSSLSessionCache* ssl_session_cache_ = nullptr ; SSLCertificateVerifier* ssl_cert_verifier_ = nullptr ; SSLState state_ ; # ifdef OPENSSL_IS_BORINGSSL std::unique_ptr<BoringSSLIdentity> identity_ ; # else std::unique_ptr<OpenSSLIdentity> identity_ ; # endif SSLRole role_ ; bool ssl_read_needs_write_ ; bool ssl_write_needs_read_ ; Buffer pending_data_ ; SSL* ssl_ ; SSL_CTX* ssl_ctx_ ; std::string ssl_host_name_ ; SSLMode ssl_mode_ ; bool ignore_bad_cert_ ; std::vector<std::string> alpn_protocols_ ; std::vector<std::string> elliptic_curves_ ; bool custom_cert_verifier_status_ ; webrtc::ScopedTaskSafety timer_ ; } ; class OpenSSLAdapterFactory : public SSLAdapterFactory { public :)",
    "insertText": "OpenSSLAdapterFactory()"
  },
  {
    "label": "CreateAdapter()",
    "kind": "Method",
    "detail": "Function (OpenSSLAdapter*)",
    "insertText": "CreateAdapter(Socket* socket)"
  },
  {
    "label": "TransformAlpnProtocols()",
    "kind": "Method",
    "detail": "Function (private : SSLMode ssl_mode_ = SSL_MODE_TLS ; SSLRole ssl_role_ = SSL_CLIENT ; bool ignore_bad_cert_ = false ; std::unique_ptr<SSLIdentity> identity_ ; std::unique_ptr<OpenSSLSessionCache> ssl_session_cache_ ; SSLCertificateVerifier* ssl_cert_verifier_ = nullptr ; class OpenSSLAdapter ; } ; std::string)",
    "insertText": "TransformAlpnProtocols(const std::vector<std::string>& protos)"
  }
]