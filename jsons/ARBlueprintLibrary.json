[
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DEFINE_AR_BPLIB_DELEGATE_FUNCS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Kismet / BlueprintAsyncActionBase . h \" # include \" ARTypes . h \" # include \" ARSupportInterface . h \" # include \" ARSystem . h \" # include \" ARTraceResult . h \" # include \" ARSessionConfig . h \" # include \" ARTrackable . h \" # include \" ARTextures . h \" # include \" ARBlueprintLibrary . generated . h \" # define)",
    "insertText": "DEFINE_AR_BPLIB_DELEGATE_FUNCS(DelegateName) \\ public: \\ static FDelegateHandle Add##DelegateName##Delegate_Handle(const F##DelegateName##Delegate& Delegate)"
  },
  {
    "label": "GetARSystem()",
    "kind": "Method",
    "detail": "Function (\\ auto ARSystem =)",
    "insertText": "GetARSystem()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ARSystem.IsValid())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (\\ return ARSystem .)",
    "insertText": "Pin()->Add##DelegateName##Delegate_Handle(Delegate)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return Delegate .)",
    "insertText": "GetHandle()"
  },
  {
    "label": "Delegate_Handle()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void Clear # # DelegateName # #)",
    "insertText": "Delegate_Handle(FDelegateHandle& Handle)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (\\ ARSystem .)",
    "insertText": "Pin()->Clear##DelegateName##Delegate_Handle(Handle)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (\\ return ; \\ } \\ Handle .)",
    "insertText": "Reset()"
  },
  {
    "label": "Delegates()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void Clear # # DelegateName # #)",
    "insertText": "Delegates(void* Object)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (\\ ARSystem .)",
    "insertText": "Pin()->Clear##DelegateName##Delegates(Object)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "UCLASS(meta=(ScriptName=\"ARLibrary\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category = \"AR AugmentedReality|Session\", meta = (DisplayName=\"Is AR Supported\", Keywords = \"ar augmentedreality augmented reality session start run running\")) static bool IsARSupported()"
  },
  {
    "label": "SaveWorld()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FARSaveWorldAsyncTask,ESPMode::ThreadSafe>)",
    "insertText": "SaveWorld()"
  },
  {
    "label": "GetCandidateObject()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FARGetCandidateObjectAsyncTask,ESPMode::ThreadSafe>)",
    "insertText": "GetCandidateObject(FVector Location, FVector Extent)"
  },
  {
    "label": "DEFINE_AR_BPLIB_DELEGATE_FUNCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_AR_BPLIB_DELEGATE_FUNCS(OnTrackableAdded) DEFINE_AR_BPLIB_DELEGATE_FUNCS(OnTrackableUpdated) DEFINE_AR_BPLIB_DELEGATE_FUNCS(OnTrackableRemoved) UFUNCTION(BlueprintCallable, Category = Alignment) static void CalculateClosestIntersection(const TArray<FVector>& StartPoints, const TArray<FVector>& EndPoints, FVector& ClosestIntersection)"
  },
  {
    "label": "GetAllGeometriesByClass()",
    "kind": "Method",
    "detail": "Function (template<class T> TArray<T*>)",
    "insertText": "GetAllGeometriesByClass()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<T*> Geometries ;)",
    "insertText": "for(auto Geometry : GetAllGeometries())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Geometries .)",
    "insertText": "Add(CastedGeometry)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MoveTemp(Geometries)"
  },
  {
    "label": "RegisterAsARSystem()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "RegisterAsARSystem(const TSharedRef<FARSupportInterface , ESPMode::ThreadSafe>& NewArSystem)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FARSupportInterface,ESPMode::ThreadSafe> RegisteredARSystem ; } ;)",
    "insertText": "UCLASS(meta=(ScriptName=\"ARTraceResultLibrary\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION( BlueprintPure, Category = \"AR AugmentedReality|Trace Result\" ) static float GetDistanceFromCamera( const FARTraceResult& TraceResult)"
  }
]