[
  {
    "label": "UChildConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildConnection"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / NetConnection . h \" # include \" Net / Core / Connection / NetCloseResult . h \" # include \" ChildConnection . generated . h \")",
    "insertText": "UCLASS(MinimalAPI,transient,config=Engine)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetParentConnection()",
    "kind": "Method",
    "detail": "Function (public : UNetConnection*)",
    "insertText": "GetParentConnection()"
  },
  {
    "label": "LowLevelDescribe()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LowLevelDescribe()"
  },
  {
    "label": "LowLevelSend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LowLevelSend(void* Data, int32 CountBits, FOutPacketTraits& Traits)"
  },
  {
    "label": "InitSendBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitSendBuffer()"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertValid()"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushNet(bool bIgnoreSimulation = false)"
  },
  {
    "label": "FlushNet()",
    "kind": "Method",
    "detail": "Function (Parent ->)",
    "insertText": "FlushNet(bIgnoreSimulation)"
  },
  {
    "label": "IsNetReady()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "IsNetReady(bool Saturate)"
  },
  {
    "label": "IsEncryptionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEncryptionEnabled()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "SetConnectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnectionState(Parent->GetConnectionState())"
  },
  {
    "label": "GracefulClose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GracefulClose(FNetCloseResult&& CloseReason)"
  },
  {
    "label": "HandleClientPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleClientPlayer(class APlayerController* PC, class UNetConnection* NetConnection)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "InitRemoteConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRemoteConnection(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, const class FInternetAddr& InRemoteAddr, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0)"
  },
  {
    "label": "InitLocalConnection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitLocalConnection(UNetDriver* InDriver, class FSocket* InSocket, const FURL& InURL, EConnectionState InState, int32 InMaxPacket = 0, int32 InPacketOverhead = 0)"
  },
  {
    "label": "InitChildConnection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitChildConnection(UNetDriver* InDriver, UNetConnection* InParent)"
  },
  {
    "label": "AssignConnectionHandle()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AssignConnectionHandle()"
  }
]