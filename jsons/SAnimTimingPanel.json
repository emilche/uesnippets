[
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FAnimModel_AnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel_AnimMontage"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTimingRelevantElementBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingRelevantElementBase"
  },
  {
    "label": "FTimingRelevantElement_Notify",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingRelevantElement_Notify"
  },
  {
    "label": "FTimingRelevantElement_NotifyStateEnd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingRelevantElement_NotifyStateEnd"
  },
  {
    "label": "FTimingRelevantElement_Section",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingRelevantElement_Section"
  },
  {
    "label": "SAnimTimingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTimingNode"
  },
  {
    "label": "SAnimTimingTrackNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTimingTrackNode"
  },
  {
    "label": "SAnimTimingPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTimingPanel"
  },
  {
    "label": "FTimingRelevantElementBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" SAnimTrackPanel . h \" # include \" STrack . h \" class SBorder ; class UAnimMontage ; class UAnimSequenceBase ; class FAnimModel ; class FAnimModel_AnimMontage ; namespace ETimingElementType { enum Type { QueuedNotify,BranchPointNotify,NotifyStateBegin,NotifyStateEnd,Section,Max,} ; } ; struct FTimingRelevantElementBase { ~)",
    "insertText": "FTimingRelevantElementBase()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetElementTime()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetElementTime()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Compare(const FTimingRelevantElementBase& Other)"
  },
  {
    "label": "GetElementTime()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetElementTime() < Other.GetElementTime()"
  },
  {
    "label": "GetElementSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetElementSortPriority()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (ETimingElementType::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "GetDescriptionItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescriptionItems(TMap<FString, FText>& Items)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(EVisibility, FOnGetTimingNodeVisibility, ETimingElementType::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimTimingNode) : _InElement() , _bUseTooltip(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FTimingRelevantElementBase>, InElement) SLATE_ARGUMENT(bool, bUseTooltip) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<FTimingRelevantElementBase> Element ; } ; class SAnimTimingTrackNode : public STrackNode { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimTimingTrackNode) : _bUseTooltip(true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(float, ViewInputMin) SLATE_ATTRIBUTE(float, ViewInputMax) SLATE_ATTRIBUTE(float, DataStartPos) SLATE_ATTRIBUTE(FString, NodeName) SLATE_ATTRIBUTE(FLinearColor, NodeColor) SLATE_ARGUMENT(TSharedPtr<FTimingRelevantElementBase>, Element) SLATE_ARGUMENT(bool, bUseTooltip) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimTimingPanel : public SAnimTrackPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimTimingPanel) : _InSequence(nullptr) , _WidgetWidth(0) , _CurrentPosition(0) , _ViewInputMin(0) , _ViewInputMax(0) , _InputMin(0) , _InputMax(0) , _OnSetInputViewRange()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UAnimSequenceBase*, InSequence) SLATE_ARGUMENT(float, WidgetWidth) SLATE_ATTRIBUTE(float, CurrentPosition) SLATE_ATTRIBUTE(float, ViewInputMin) SLATE_ATTRIBUTE(float, ViewInputMax) SLATE_ATTRIBUTE(float, InputMin) SLATE_ATTRIBUTE(float, InputMax) SLATE_EVENT(FOnSetInputViewRange, OnSetInputViewRange) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<FAnimModel_AnimMontage>& InModel)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "IsElementDisplayEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementDisplayEnabled(ETimingElementType::Type ElementType)"
  },
  {
    "label": "IsElementDisplayChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsElementDisplayChecked(ETimingElementType::Type ElementType)"
  },
  {
    "label": "IsElementDisplayVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsElementDisplayVisible(ETimingElementType::Type ElementType)"
  },
  {
    "label": "OnElementDisplayEnabledChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementDisplayEnabledChanged(ETimingElementType::Type ElementType)"
  },
  {
    "label": "GetTimingRelevantElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimingRelevantElements(UAnimSequenceBase* Sequence, TArray<TSharedPtr<FTimingRelevantElementBase>>& Elements)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RefreshTrackNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTrackNodes()"
  }
]