[
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FDFRelativeViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFRelativeViewMatrices"
  },
  {
    "label": "FSimpleElementVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementVS"
  },
  {
    "label": "FSimpleElementPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementPS"
  },
  {
    "label": "FSimpleElementAlphaOnlyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementAlphaOnlyPS"
  },
  {
    "label": "FSimpleElementGammaBasePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaBasePS"
  },
  {
    "label": "FSimpleElementGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaPS"
  },
  {
    "label": "FSimpleElementGammaAlphaOnlyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaAlphaOnlyPS"
  },
  {
    "label": "FSimpleElementMaskedGammaBasePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementMaskedGammaBasePS"
  },
  {
    "label": "FSimpleElementMaskedGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementMaskedGammaPS"
  },
  {
    "label": "FSimpleElementDistanceFieldGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementDistanceFieldGammaPS"
  },
  {
    "label": "FSimpleElementHitProxyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementHitProxyPS"
  },
  {
    "label": "FSimpleElementColorChannelMaskPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementColorChannelMaskPS"
  },
  {
    "label": "FSimpleElementVS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMatrix& WorldToClipMatrix)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FDFRelativeViewMatrices& Matrices)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, RelativeTransform)"
  },
  {
    "label": "FSimpleElementPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* TextureValue)"
  },
  {
    "label": "SetEditorCompositingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorCompositingParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* TextureValue)"
  },
  {
    "label": "FSimpleElementAlphaOnlyPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementAlphaOnlyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementGammaBasePS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementGammaBasePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, float GammaValue, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* Texture, float GammaValue, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "FSimpleElementMaskedGammaBasePS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementMaskedGammaBasePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture,float Gamma,float ClipRefValue,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* Texture,float Gamma,float ClipRefValue,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "FSimpleElementDistanceFieldGammaPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementDistanceFieldGammaPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(\n\t\tFRHIBatchedShaderParameters& BatchedParameters,\n\t\tconst FTexture* Texture,\n\t\tfloat Gamma,\n\t\tfloat ClipRef,\n\t\tfloat SmoothWidthValue,\n\t\tbool EnableShadowValue,\n\t\tconst FVector2D& ShadowDirectionValue,\n\t\tconst FLinearColor& ShadowColorValue,\n\t\tfloat ShadowSmoothWidthValue,\n\t\tconst FDepthFieldGlowInfo& GlowInfo,\n\t\tESimpleElementBlendMode BlendMode\n\t\t)"
  },
  {
    "label": "FSimpleElementHitProxyPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementHitProxyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* TextureValue)"
  },
  {
    "label": "FSimpleElementColorChannelMaskPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FSimpleElementColorChannelMaskPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* TextureValue, const FMatrix& ColorWeightsValue, float GammaValue)"
  }
]