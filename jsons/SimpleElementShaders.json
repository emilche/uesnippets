[
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FDFRelativeViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFRelativeViewMatrices"
  },
  {
    "label": "FSimpleElementVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementVS"
  },
  {
    "label": "FSimpleElementPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementPS"
  },
  {
    "label": "FSimpleElementAlphaOnlyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementAlphaOnlyPS"
  },
  {
    "label": "FSimpleElementGammaBasePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaBasePS"
  },
  {
    "label": "FSimpleElementGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaPS"
  },
  {
    "label": "FSimpleElementGammaAlphaOnlyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementGammaAlphaOnlyPS"
  },
  {
    "label": "FSimpleElementMaskedGammaBasePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementMaskedGammaBasePS"
  },
  {
    "label": "FSimpleElementMaskedGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementMaskedGammaPS"
  },
  {
    "label": "FSimpleElementDistanceFieldGammaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementDistanceFieldGammaPS"
  },
  {
    "label": "FSimpleElementHitProxyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementHitProxyPS"
  },
  {
    "label": "FSimpleElementColorChannelMaskPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementColorChannelMaskPS"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" SceneTypes . h \" # include \" Engine / EngineTypes . h \" # include \" DataDrivenShaderPlatformInfo . h \" class FSceneView ; struct FDFRelativeViewMatrices ; class FSimpleElementVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FSimpleElementVS, ENGINE_API)"
  },
  {
    "label": "FSimpleElementVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementVS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMatrix& WorldToClipMatrix)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FDFRelativeViewMatrices& Matrices)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, RelativeTransform)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, TransformPositionHigh)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FSimpleElementPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementPS, Global)"
  },
  {
    "label": "FSimpleElementPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementPS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* TextureValue)"
  },
  {
    "label": "SetEditorCompositingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorCompositingParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* TextureValue)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture) LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler) LAYOUT_FIELD(FShaderParameter, TextureComponentReplicate) LAYOUT_FIELD(FShaderParameter, TextureComponentReplicateAlpha) LAYOUT_FIELD(FShaderParameter, EditorCompositeDepthTestParameter) LAYOUT_FIELD(FShaderParameter, ScreenToPixel)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (class FSimpleElementAlphaOnlyPS : public FSimpleElementPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementAlphaOnlyPS, Global)"
  },
  {
    "label": "FSimpleElementAlphaOnlyPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementAlphaOnlyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementAlphaOnlyPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementAlphaOnlyPS()"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleElementGammaBasePS : public FSimpleElementPS {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FSimpleElementGammaBasePS, NonVirtual)"
  },
  {
    "label": "FSimpleElementGammaBasePS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementGammaBasePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementGammaBasePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementGammaBasePS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, float GammaValue, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* Texture, float GammaValue, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Gamma)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (template<bool bSRGBTexture> class FSimpleElementGammaPS : public FSimpleElementGammaBasePS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementGammaPS, Global)"
  },
  {
    "label": "FSimpleElementGammaPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementGammaPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FSimpleElementGammaBasePS(Initializer)"
  },
  {
    "label": "FSimpleElementGammaPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleElementGammaPS()"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SRGB_INPUT_TEXTURE\"), bSRGBTexture)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleElementGammaAlphaOnlyPS : public FSimpleElementGammaBasePS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementGammaAlphaOnlyPS, Global)"
  },
  {
    "label": "FSimpleElementGammaAlphaOnlyPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementGammaAlphaOnlyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FSimpleElementGammaBasePS(Initializer)"
  },
  {
    "label": "FSimpleElementGammaAlphaOnlyPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleElementGammaAlphaOnlyPS()"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleElementMaskedGammaBasePS : public FSimpleElementGammaBasePS {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FSimpleElementMaskedGammaBasePS, NonVirtual)"
  },
  {
    "label": "FSimpleElementMaskedGammaBasePS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementMaskedGammaBasePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementMaskedGammaBasePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementMaskedGammaBasePS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture,float Gamma,float ClipRefValue,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView* View, const FTexture* Texture,float Gamma,float ClipRefValue,ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ClipRef)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (template<bool bSRGBTexture> class FSimpleElementMaskedGammaPS : public FSimpleElementMaskedGammaBasePS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementMaskedGammaPS, Global)"
  },
  {
    "label": "FSimpleElementMaskedGammaPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementMaskedGammaPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FSimpleElementMaskedGammaBasePS(Initializer)"
  },
  {
    "label": "FSimpleElementMaskedGammaPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleElementMaskedGammaPS()"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleElementDistanceFieldGammaPS : public FSimpleElementMaskedGammaBasePS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementDistanceFieldGammaPS,Global)"
  },
  {
    "label": "FSimpleElementDistanceFieldGammaPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementDistanceFieldGammaPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementDistanceFieldGammaPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementDistanceFieldGammaPS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, float Gamma, float ClipRef, float SmoothWidthValue, bool EnableShadowValue, const FVector2D& ShadowDirectionValue, const FLinearColor& ShadowColorValue, float ShadowSmoothWidthValue, const FDepthFieldGlowInfo& GlowInfo, ESimpleElementBlendMode BlendMode)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SmoothWidth) LAYOUT_FIELD(FShaderParameter, EnableShadow) LAYOUT_FIELD(FShaderParameter, ShadowDirection) LAYOUT_FIELD(FShaderParameter, ShadowColor) LAYOUT_FIELD(FShaderParameter, ShadowSmoothWidth) LAYOUT_FIELD(FShaderParameter, EnableGlow) LAYOUT_FIELD(FShaderParameter, GlowColor) LAYOUT_FIELD(FShaderParameter, GlowOuterRadius) LAYOUT_FIELD(FShaderParameter, GlowInnerRadius)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (class FSimpleElementHitProxyPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementHitProxyPS,Global)"
  },
  {
    "label": "FSimpleElementHitProxyPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementHitProxyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementHitProxyPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementHitProxyPS()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture) LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (class FSimpleElementColorChannelMaskPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FSimpleElementColorChannelMaskPS,Global)"
  },
  {
    "label": "FSimpleElementColorChannelMaskPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSimpleElementColorChannelMaskPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "FSimpleElementColorChannelMaskPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleElementColorChannelMaskPS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* TextureValue, const FMatrix& ColorWeightsValue, float GammaValue)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture) LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler) LAYOUT_FIELD(FShaderParameter, ColorWeights) LAYOUT_FIELD(FShaderParameter, Gamma)"
  }
]