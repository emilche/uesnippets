[
  {
    "label": "FakeWebRtcVideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeWebRtcVideoDecoderFactory"
  },
  {
    "label": "FakeWebRtcVideoEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeWebRtcVideoEncoderFactory"
  },
  {
    "label": "FakeWebRtcVideoDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeWebRtcVideoDecoder"
  },
  {
    "label": "FakeWebRtcVideoEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeWebRtcVideoEncoder"
  },
  {
    "label": "FakeWebRtcVideoDecoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_FAKE_WEBRTC_VIDEO_ENGINE_H_ # define MEDIA_ENGINE_FAKE_WEBRTC_VIDEO_ENGINE_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / event . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace cricket { class FakeWebRtcVideoDecoderFactory ; class FakeWebRtcVideoEncoderFactory ; class FakeWebRtcVideoDecoder : public webrtc::VideoDecoder { public :)",
    "insertText": "FakeWebRtcVideoDecoder(FakeWebRtcVideoDecoderFactory* factory)"
  },
  {
    "label": "FakeWebRtcVideoDecoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeWebRtcVideoDecoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Configure(const Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const webrtc::EncodedImage&, bool, int64_t)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterDecodeCompleteCallback(webrtc::DecodedImageCallback*)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "GetNumFramesReceived()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumFramesReceived()"
  },
  {
    "label": "FakeWebRtcVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (private : int num_frames_received_ ; FakeWebRtcVideoDecoderFactory* factory_ ; } ; class FakeWebRtcVideoDecoderFactory : public webrtc::VideoDecoderFactory { public :)",
    "insertText": "FakeWebRtcVideoDecoderFactory()"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "CreateVideoDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::VideoDecoder>)",
    "insertText": "CreateVideoDecoder(const webrtc::SdpVideoFormat& format)"
  },
  {
    "label": "DecoderDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecoderDestroyed(FakeWebRtcVideoDecoder* decoder)"
  },
  {
    "label": "AddSupportedVideoCodecType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSupportedVideoCodecType(const std::string& name)"
  },
  {
    "label": "GetNumCreatedDecoders()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumCreatedDecoders()"
  },
  {
    "label": "decoders()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeWebRtcVideoDecoder*>&)",
    "insertText": "decoders()"
  },
  {
    "label": "FakeWebRtcVideoEncoder()",
    "kind": "Method",
    "detail": "Function (private : std::vector<webrtc::SdpVideoFormat> supported_codec_formats_ ; std::vector<FakeWebRtcVideoDecoder*> decoders_ ; int num_created_decoders_ ; } ; class FakeWebRtcVideoEncoder : public webrtc::VideoEncoder { public :)",
    "insertText": "FakeWebRtcVideoEncoder(FakeWebRtcVideoEncoderFactory* factory)"
  },
  {
    "label": "FakeWebRtcVideoEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeWebRtcVideoEncoder()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(webrtc::FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const webrtc::VideoCodec* codecSettings, const VideoEncoder::Settings& settings)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Encode(const webrtc::VideoFrame& inputImage, const std::vector<webrtc::VideoFrameType>* frame_types)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterEncodeCompleteCallback(webrtc::EncodedImageCallback* callback)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoEncoder::EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "WaitForInitEncode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForInitEncode()"
  },
  {
    "label": "GetCodecSettings()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoCodec)",
    "insertText": "GetCodecSettings()"
  },
  {
    "label": "GetNumEncodedFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumEncodedFrames()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : webrtc::Mutex mutex_ ; rtc::Event init_encode_event_ ; int num_frames_encoded_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "FakeWebRtcVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (FakeWebRtcVideoEncoderFactory* factory_ ; } ; class FakeWebRtcVideoEncoderFactory : public webrtc::VideoEncoderFactory { public :)",
    "insertText": "FakeWebRtcVideoEncoderFactory()"
  },
  {
    "label": "CreateVideoEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::VideoEncoder>)",
    "insertText": "CreateVideoEncoder(const webrtc::SdpVideoFormat& format)"
  },
  {
    "label": "WaitForCreatedVideoEncoders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForCreatedVideoEncoders(int num_encoders)"
  },
  {
    "label": "EncoderDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderDestroyed(FakeWebRtcVideoEncoder* encoder)"
  },
  {
    "label": "set_encoders_have_internal_sources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_encoders_have_internal_sources(bool internal_source)"
  },
  {
    "label": "AddSupportedVideoCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSupportedVideoCodec(const webrtc::SdpVideoFormat& format)"
  },
  {
    "label": "GetNumCreatedEncoders()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumCreatedEncoders()"
  },
  {
    "label": "encoders()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeWebRtcVideoEncoder*>)",
    "insertText": "encoders()"
  }
]