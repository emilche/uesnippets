[
  {
    "label": "FIntRangeNetSerializerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntRangeNetSerializerBase"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / Serialization / IntNetSerializerBase . h \" namespace UE::Net::Private { template<InSourceType,IntRangeNetSerializerConfig> struct FIntRangeNetSerializerBase { const uint32 Version = 0 ; typedef InSourceType SourceType ; typedef TUnsignedIntType<)",
    "insertText": "sizeof(InSourceType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (typedef IntRangeNetSerializerConfig ConfigType ; void)",
    "insertText": "Serialize(FNetSerializationContext& Context, const FNetSerializeArgs& Args)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deserialize(FNetSerializationContext& Context, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeDelta(FNetSerializationContext& Context, const FNetSerializeDeltaArgs& Args)"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeserializeDelta(FNetSerializationContext& Context, const FNetDeserializeDeltaArgs& Args)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Quantize(FNetSerializationContext& Context, const FNetQuantizeArgs& Args)"
  },
  {
    "label": "ConfigType()",
    "kind": "Method",
    "detail": "Function (const ConfigType* Config = static_cast<const)",
    "insertText": "ConfigType(Args.NetSerializerConfig)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType Value =* reinterpret_cast<const)",
    "insertText": "SourceType(Args.Source)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const SourceType ClampedValue =)",
    "insertText": "Clamp(Value, Config->LowerBound, Config->UpperBound)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType RebasedValue = static_cast<)",
    "insertText": "QuantizedType(static_cast<QuantizedType>(ClampedValue) - static_cast<QuantizedType>(Config->LowerBound))"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "QuantizedType(Args.Target)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dequantize(FNetSerializationContext& Context, const FNetDequantizeArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType RebasedValue =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType Value = static_cast<)",
    "insertText": "SourceType(static_cast<QuantizedType>(RebasedValue + static_cast<QuantizedType>(Config->LowerBound)))"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetError(GNetError_InvalidValue)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(FNetSerializationContext& Context, const FNetIsEqualArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType Value0 =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source0)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType Value1 =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const SourceType ClampedValue0 =)",
    "insertText": "Clamp(Value0, Config->LowerBound, Config->UpperBound)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType Value1 =* reinterpret_cast<const)",
    "insertText": "SourceType(Args.Source1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const SourceType ClampedValue1 =)",
    "insertText": "Clamp(Value1, Config->LowerBound, Config->UpperBound)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 BitCount = Config -> BitCount ;)",
    "insertText": "if(BitCount > sizeof(SourceType)*8U)"
  }
]