[
  {
    "label": "VideoReceiver2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiver2"
  },
  {
    "label": "VideoReceiver2()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_VIDEO_RECEIVER2_H_ # define MODULES_VIDEO_CODING_VIDEO_RECEIVER2_H_ # include<memory> # include<vector> # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / video_codecs / video_decoder . h \" # include \" modules / video_coding / decoder_database . h \" # include \" modules / video_coding / encoded_frame . h \" # include \" modules / video_coding / generic_decoder . h \" # include \" modules / video_coding / timing / timing . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class VideoReceiver2 { public :)",
    "insertText": "VideoReceiver2(Clock* clock, VCMTiming* timing, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoReceiver2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoReceiver2()"
  },
  {
    "label": "RegisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiveCodec(uint8_t payload_type, const VideoDecoder::Settings& decoder_settings)"
  },
  {
    "label": "DeregisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeregisterReceiveCodec(uint8_t payload_type)"
  },
  {
    "label": "DeregisterReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeregisterReceiveCodecs()"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(std::unique_ptr<VideoDecoder> decoder, uint8_t payload_type)"
  },
  {
    "label": "IsExternalDecoderRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalDecoderRegistered(uint8_t payload_type)"
  },
  {
    "label": "RegisterReceiveCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterReceiveCallback(VCMReceiveCallback* receive_callback)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const VCMEncodedFrame* frame)"
  }
]