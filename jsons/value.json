[
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "Argument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Argument"
  },
  {
    "label": "AssemblyAnnotationWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssemblyAnnotationWriter"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalAlias"
  },
  {
    "label": "GlobalObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalObject"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "InlineAsm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineAsm"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ModuleSlotTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleSlotTracker"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "ValueHandleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueHandleBase"
  },
  {
    "label": "ValueSymbolTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueSymbolTable"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "StringMapEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapEntry"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ValueAsMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueAsMetadata"
  },
  {
    "label": "ValueHandleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueHandleBase"
  },
  {
    "label": "other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "other"
  },
  {
    "label": "use_iterator_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "use_iterator_impl"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "user_iterator_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "user_iterator_impl"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ValueTy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ValueTy"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "isa_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isa_impl"
  },
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Preincrement)",
    "insertText": "assert(U && \"Cannot increment end iterator!\")"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "Value(Type *Ty, unsigned scid)"
  },
  {
    "label": "setValueName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueName(ValueName *VN)"
  },
  {
    "label": "destroyValueName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyValueName()"
  },
  {
    "label": "setNameImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNameImpl(const Twine &Name)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const Twine &Name)"
  },
  {
    "label": "takeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "takeName(Value *V)"
  },
  {
    "label": "replaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceAllUsesWith(Value *V)"
  },
  {
    "label": "replaceUsesOutsideBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceUsesOutsideBlock(Value *V, BasicBlock *BB)"
  },
  {
    "label": "use_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "use_iterator(UseList)"
  },
  {
    "label": "const_use_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_use_iterator(UseList)"
  },
  {
    "label": "use_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "use_iterator()"
  },
  {
    "label": "const_use_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_use_iterator()"
  },
  {
    "label": "user_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "user_iterator(UseList)"
  },
  {
    "label": "const_user_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_user_iterator(UseList)"
  },
  {
    "label": "user_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "user_iterator()"
  },
  {
    "label": "const_user_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_user_iterator()"
  },
  {
    "label": "sortUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortUseList(Compare Cmp)"
  },
  {
    "label": "reverseUseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reverseUseList()"
  },
  {
    "label": "mergeUseListsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mergeUseListsImpl(Use *L, Use *R, Use **Next, Compare Cmp)"
  }
]