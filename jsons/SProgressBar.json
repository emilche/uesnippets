[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SProgressBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProgressBar"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" SProgressBar . generated . h \" class FActiveTimerHandle ; class FPaintArgs ; class FSlateWindowElementList ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Mask,Scale,} ; } class SProgressBar : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProgressBar) : _Style( &FAppStyle::Get().GetWidgetStyle<FProgressBarStyle>(\"ProgressBar\") ) , _BarFillType(EProgressBarFillType::LeftToRight) , _BarFillStyle(EProgressBarFillStyle::Mask) , _Percent( TOptional<float>() ) , _FillColorAndOpacity( FLinearColor::White ) , _BorderPadding( FVector2D(0,0) ) , _BackgroundImage(nullptr) , _FillImage(nullptr) , _MarqueeImage(nullptr) , _RefreshRate(2.0f)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_STYLE_ARGUMENT(FProgressBarStyle, Style ) SLATE_ARGUMENT( EProgressBarFillType::Type, BarFillType ) SLATE_ARGUMENT( EProgressBarFillStyle::Type, BarFillStyle ) SLATE_ATTRIBUTE( TOptional<float>, Percent ) SLATE_ATTRIBUTE( FSlateColor, FillColorAndOpacity ) SLATE_ATTRIBUTE( FVector2D, BorderPadding ) SLATE_ARGUMENT(const FSlateBrush*, BackgroundImage) SLATE_ARGUMENT(const FSlateBrush*, FillImage) SLATE_ARGUMENT(const FSlateBrush*, MarqueeImage) SLATE_ARGUMENT(float, RefreshRate) SLATE_END_ARGS() SLATE_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "SetPercent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPercent(TAttribute< TOptional<float> > InPercent)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FProgressBarStyle* InStyle)"
  },
  {
    "label": "SetBarFillType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBarFillType(EProgressBarFillType::Type InBarFillType)"
  },
  {
    "label": "SetBarFillStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBarFillStyle(EProgressBarFillStyle::Type InBarFillStyle)"
  },
  {
    "label": "SetFillColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFillColorAndOpacity(TAttribute< FSlateColor > InFillColorAndOpacity)"
  },
  {
    "label": "SetBorderPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBorderPadding(TAttribute< FVector2D > InBorderPadding)"
  },
  {
    "label": "SetBackgroundImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundImage(const FSlateBrush* InBackgroundImage)"
  },
  {
    "label": "SetFillImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFillImage(const FSlateBrush* InFillImage)"
  },
  {
    "label": "SetMarqueeImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarqueeImage(const FSlateBrush* InMarqueeImage)"
  },
  {
    "label": "SetActiveTimerTickRate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetActiveTimerTickRate(float TickRate)"
  },
  {
    "label": "UpdateMarqueeActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMarqueeActiveTimer()"
  },
  {
    "label": "ActiveTick()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "ActiveTick(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "GetBackgroundImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBackgroundImage()"
  },
  {
    "label": "GetFillImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetFillImage()"
  },
  {
    "label": "GetMarqueeImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMarqueeImage()"
  }
]