[
  {
    "label": "IStructureDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStructureDataProvider"
  },
  {
    "label": "FStructOnScopeStructureDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScopeStructureDataProvider"
  },
  {
    "label": "IStructureDataProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / StructOnScope . h \" class IStructureDataProvider { public : ~)",
    "insertText": "IStructureDataProvider()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetBaseStructure()",
    "kind": "Method",
    "detail": "Function (const UStruct*)",
    "insertText": "GetBaseStructure()"
  },
  {
    "label": "GetInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstances(TArray<TSharedPtr<FStructOnScope>>& OutInstances, const UStruct* ExpectedBaseStructure)"
  },
  {
    "label": "IsPropertyIndirection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyIndirection()"
  },
  {
    "label": "FStructOnScopeStructureDataProvider()",
    "kind": "Method",
    "detail": "Function (} } ; class FStructOnScopeStructureDataProvider : public IStructureDataProvider { public :)",
    "insertText": "FStructOnScopeStructureDataProvider()"
  },
  {
    "label": "FStructOnScopeStructureDataProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructOnScopeStructureDataProvider(const TSharedPtr<FStructOnScope>& InStructData) : StructDataInstances( {InStructData})"
  },
  {
    "label": "FStructOnScopeStructureDataProvider()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructOnScopeStructureDataProvider(const TArray<TSharedPtr<FStructOnScope>>& InStructDataInstances) : StructDataInstances(InStructDataInstances)"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStructData(const TSharedPtr<FStructOnScope>& InStructData)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StructDataInstances .)",
    "insertText": "Reset(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StructDataInstances .)",
    "insertText": "Add(InStructData)"
  },
  {
    "label": "SetStructData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStructData(const TArray<TSharedPtr<FStructOnScope>>& InStructData)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (StructDataInstances .)",
    "insertText": "Reset(InStructData.Num())"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (const UStruct* Struct = StructInstance ->)",
    "insertText": "GetStruct()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutInstances .)",
    "insertText": "Add(StructData)"
  },
  {
    "label": "FindBaseStructure()",
    "kind": "Method",
    "detail": "Function (} } } } } template<ContainerType> const UStruct*)",
    "insertText": "FindBaseStructure(const TArray<TSharedPtr<ContainerType>>& StructDataInstances)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const UStruct* BaseStructure = nullptr ; const int32 NumInstances = StructDataInstances .)",
    "insertText": "Num()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 InstanceIndex = 0 ;)",
    "insertText": "while(!(StructDataInstances[InstanceIndex].IsValid() && StructDataInstances[InstanceIndex]->IsValid()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + InstanceIndex ;)",
    "insertText": "if(InstanceIndex == NumInstances)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<ContainerType>& StructData = StructDataInstances [ i ] ;)",
    "insertText": "if(StructData.IsValid() && StructData->IsValid())"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (BaseStructure = Cast<)",
    "insertText": "UStruct(BaseStructure->GetSuperStruct())"
  }
]