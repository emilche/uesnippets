[
  {
    "label": "IForwardTsnChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IForwardTsnChunkConfig"
  },
  {
    "label": "IForwardTsnChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IForwardTsnChunk"
  },
  {
    "label": "IForwardTsnChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_IFORWARD_TSN_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_IFORWARD_TSN_CHUNK_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_common . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct IForwardTsnChunkConfig : ChunkConfig { int kType = 1 9 4 ; size_t kHeaderSize = 8 ; size_t kVariableLengthAlignment = 8 ; } ; class IForwardTsnChunk : public AnyForwardTsnChunk,public TLVTrait<IForwardTsnChunkConfig> { public : int kType = IForwardTsnChunkConfig::kType ;)",
    "insertText": "IForwardTsnChunk(TSN new_cumulative_tsn, std::vector<SkippedStream> skipped_streams) : AnyForwardTsnChunk(new_cumulative_tsn, std::move(skipped_streams))"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<IForwardTsnChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  }
]