[
  {
    "label": "ToIntPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" FIntPoint)",
    "insertText": "ToIntPoint(const FVector3f& V)"
  },
  {
    "label": "RasterizeTri()",
    "kind": "Method",
    "detail": "Function (} template<FWritePixel> void)",
    "insertText": "RasterizeTri(const FVector3f Verts[3], const FIntRect& ScissorRect, uint32 SubpixelDilate, bool bBackFaceCull, FWritePixel WritePixel)"
  },
  {
    "label": "ToIntPoint()",
    "kind": "Method",
    "detail": "Function (uint32 SubpixelBits = 8 ; uint32 SubpixelSamples = 1<<SubpixelBits ; FIntPoint Vert0 =)",
    "insertText": "ToIntPoint(Verts[0] * SubpixelSamples)"
  },
  {
    "label": "ToIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint Vert1 =)",
    "insertText": "ToIntPoint(Verts[1] * SubpixelSamples)"
  },
  {
    "label": "ToIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint Vert2 =)",
    "insertText": "ToIntPoint(Verts[2] * SubpixelSamples)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FIntPoint Edge01 = Vert0 - Vert1 ; FIntPoint Edge12 = Vert1 - Vert2 ; FIntPoint Edge20 = Vert2 - Vert0 ; int64 DetXY = Edge01 . Y* Edge20 . X - Edge01 . X* Edge20 . Y ; bool bBackFace = DetXY> = 0 ;)",
    "insertText": "if(bBackFace)"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (RectSubpixel .)",
    "insertText": "Include(Vert1)"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (RectSubpixel .)",
    "insertText": "Include(Vert2)"
  },
  {
    "label": "InflateRect()",
    "kind": "Method",
    "detail": "Function (RectSubpixel .)",
    "insertText": "InflateRect(SubpixelDilate)"
  },
  {
    "label": "RectPixel()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "RectPixel(( RectSubpixel + (SubpixelSamples / 2) - 1 ))"
  },
  {
    "label": "Clip()",
    "kind": "Method",
    "detail": "Function (RectPixel .)",
    "insertText": "Clip(ScissorRect)"
  },
  {
    "label": "SubpixelSamples()",
    "kind": "Method",
    "detail": "Function (const FIntPoint BaseSubpixel = RectPixel . Min*)",
    "insertText": "SubpixelSamples(SubpixelSamples / 2)"
  },
  {
    "label": "EdgeC()",
    "kind": "Method",
    "detail": "Function (Vert0 - = BaseSubpixel ; Vert1 - = BaseSubpixel ; Vert2 - = BaseSubpixel ; auto)",
    "insertText": "EdgeC(const FIntPoint& Edge, const FIntPoint& Vert)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (int64 ex = Edge . X ; int64 ey = Edge . Y ; int64 vx = Vert . X ; int64 vy = Vert . Y ; int64 C = ey* vx - ex* vy ;)",
    "insertText": "C(Edge.Y < 0 || ( Edge.Y == 0 && Edge.X > 0 ))"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C(FMath::Abs( Edge.X ) + FMath::Abs( Edge.Y ))"
  },
  {
    "label": "EdgeC()",
    "kind": "Method",
    "detail": "Function (} ; int32 C0 =)",
    "insertText": "EdgeC(Edge12, Vert1)"
  },
  {
    "label": "EdgeC()",
    "kind": "Method",
    "detail": "Function (int32 C1 =)",
    "insertText": "EdgeC(Edge20, Vert2)"
  },
  {
    "label": "EdgeC()",
    "kind": "Method",
    "detail": "Function (int32 C2 =)",
    "insertText": "EdgeC(Edge01, Vert0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CY0 = C0 ; int32 CY1 = C1 ; int32 CY2 = C2 ;)",
    "insertText": "for(int32 y = RectPixel.Min.Y; y < RectPixel.Max.Y; y++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CX0 = CY0 ; int32 CX1 = CY1 ; int32 CX2 = CY2 ;)",
    "insertText": "for(int32 x = RectPixel.Min.X; x < RectPixel.Max.X; x++)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "p(FIntPoint(x,y) - RectPixel.Min)"
  },
  {
    "label": "Barycentrics()",
    "kind": "Method",
    "detail": "Function (FVector2f p0 = Vert0 - p ; FVector2f p1 = Vert1 - p ; FVector2f p2 = Vert2 - p ; FVector3f)",
    "insertText": "Barycentrics((float)Edge12.Y * p1.X - (float)Edge12.X * p1.Y, (float)Edge20.Y * p2.X - (float)Edge20.X * p2.Y, (float)Edge01.Y * p0.X - (float)Edge01.X * p0.Y)"
  },
  {
    "label": "WritePixel()",
    "kind": "Method",
    "detail": "Function (Barycentrics / = Barycentrics [ 0 ] + Barycentrics [ 1 ] + Barycentrics [ 2 ] ; float Depth = Verts [ 0 ] . Z* Barycentrics [ 0 ] + Verts [ 1 ] . Z* Barycentrics [ 1 ] + Verts [ 2 ] . Z* Barycentrics [ 2 ] ;)",
    "insertText": "WritePixel(x, y, Depth, Barycentrics)"
  },
  {
    "label": "VoxelizeTri()",
    "kind": "Method",
    "detail": "Function (} CX0 - = Edge12 . Y ; CX1 - = Edge20 . Y ; CX2 - = Edge01 . Y ; } CY0 + = Edge12 . X ; CY1 + = Edge20 . X ; CY2 + = Edge01 . X ; } } template<FWriteVoxel> void)",
    "insertText": "VoxelizeTri(const FVector3f Triangle[3], FIntVector3 ScissorMin, FIntVector3 ScissorMax, FWriteVoxel WriteVoxel)"
  },
  {
    "label": "Scissor()",
    "kind": "Method",
    "detail": "Function ({ FIntRect)",
    "insertText": "Scissor(ScissorMin.X, ScissorMin.Y, ScissorMax.X, ScissorMax.Y)"
  },
  {
    "label": "RasterizeTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeTri(Triangle, Scissor, 0, false, [&]( int32 x, int32 y, float fz, const FVector3f& Barycentrics ) { int32 z = FMath::RoundToInt( fz ); if( ScissorMin.Z <= z && z < ScissorMax.Z ) WriteVoxel( x, y, z, Barycentrics ); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} { FVector3f TriangleYZX [ 3 ] ;)",
    "insertText": "for(int i = 0; i < 3; i++ ) TriangleYZX[i] = FVector3f( Triangle[i].Y, Triangle[i].Z, Triangle[i].X)"
  },
  {
    "label": "Scissor()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "Scissor(ScissorMin.Y, ScissorMin.Z, ScissorMax.Y, ScissorMax.Z)"
  },
  {
    "label": "RasterizeTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeTri(TriangleYZX, Scissor, 0, false, [&]( int32 y, int32 z, float fx, const FVector3f& Barycentrics ) { int32 x = FMath::RoundToInt( fx ); if( ScissorMin.X <= x && x < ScissorMax.X ) WriteVoxel( x, y, z, Barycentrics ); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} { FVector3f TriangleZXY [ 3 ] ;)",
    "insertText": "for(int i = 0; i < 3; i++ ) TriangleZXY[i] = FVector3f( Triangle[i].Z, Triangle[i].X, Triangle[i].Y)"
  },
  {
    "label": "Scissor()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "Scissor(ScissorMin.Z, ScissorMin.X, ScissorMax.Z, ScissorMax.X)"
  },
  {
    "label": "RasterizeTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeTri(TriangleZXY, Scissor, 0, false, [&]( int32 z, int32 x, float fy, const FVector3f& Barycentrics ) { int32 y = FMath::RoundToInt( fy ); if( ScissorMin.Y <= y && y < ScissorMax.Y ) WriteVoxel( x, y, z, Barycentrics ); })"
  }
]