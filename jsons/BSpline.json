[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FNURBSCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNURBSCurve"
  },
  {
    "label": "FNURBSSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNURBSSurface"
  },
  {
    "label": "FSurfacicBoundary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurfacicBoundary"
  },
  {
    "label": "FCoordinateGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoordinateGrid"
  },
  {
    "label": "FCurvePoint2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint2D"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FLinearBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearBoundary"
  },
  {
    "label": "FSurfacicPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicPoint"
  },
  {
    "label": "FSurfacicSampling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfacicSampling"
  },
  {
    "label": "Bernstein()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Boundary . h \" # include \" Math / Point . h \" namespace UE::CADKernel { class FGrid ; class FNURBSCurve ; class FNURBSSurface ; class FNURBSSurface ; class FSurfacicBoundary ; struct FCoordinateGrid ; struct FCurvePoint2D ; struct FCurvePoint ; struct FLinearBoundary ; struct FSurfacicPoint ; struct FSurfacicSampling ; namespace BSpline { void)",
    "insertText": "Bernstein(int32 Degree, double InCoordinateU, double* BernsteinValuesAtU, double* BernsteinGradientsAtU, double* BernsteinLaplaciansAtU)"
  },
  {
    "label": "FindNotDerivableParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableParameters(const FNURBSCurve&, int32 InDerivativeOrder, const FLinearBoundary& Boundary, TArray<double>& OutNotDerivableParameters)"
  },
  {
    "label": "FindNotDerivableParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableParameters(const FNURBSSurface&, int32 InDerivativeOrder, const FSurfacicBoundary& Boundary, FCoordinateGrid& OutNotDerivableParameters)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoint(const FNURBSCurve&, double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FNURBSCurve&, double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FNURBSSurface&, const FPoint2D& InPoint2D, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGrid(const FNURBSSurface&, const FCoordinateGrid& Coords, FSurfacicSampling& OutPoints, bool bComputeNormals)"
  },
  {
    "label": "DuplicateNurbsCurveWithHigherDegree()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNURBSCurve>)",
    "insertText": "DuplicateNurbsCurveWithHigherDegree(int32 degre, const FNURBSCurve& InCurve)"
  }
]