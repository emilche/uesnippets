[
  {
    "label": "TaskRunnerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TaskRunnerTraits"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskCallbackType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskCallbackType"
  },
  {
    "label": "ReplyCallbackType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReplyCallbackType"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_RUNNER_H_ # define BASE_TASK_TASK_RUNNER_H_ # include<stddef . h> # include \" base / base_export . h \" # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / callback_helpers . h \" # include \" base / check . h \" # include \" base / location . h \" # include \" base / memory / ref_counted . h \" # include \" base / task / post_task_and_reply_with_result_internal . h \" namespace base { struct TaskRunnerTraits ; class TimeDelta ; class BASE_EXPORT TaskRunner : public RefCountedThreadSafe<TaskRunner,TaskRunnerTraits> { public : bool)",
    "insertText": "PostTask(const Location& from_here, OnceClosure task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "PostTaskAndReply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTaskAndReply(const Location& from_here, OnceClosure task, OnceClosure reply)"
  },
  {
    "label": "PostTaskAndReplyWithResult()",
    "kind": "Method",
    "detail": "Function (template<TaskReturnType,ReplyArgType,template<> class TaskCallbackType,template<> class ReplyCallbackType,= EnableIfIsBaseCallback<TaskCallbackType>,= EnableIfIsBaseCallback<ReplyCallbackType>> bool)",
    "insertText": "PostTaskAndReplyWithResult(const Location& from_here, TaskCallbackType<TaskReturnType()> task, ReplyCallbackType<void(ReplyArgType)> reply)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(task)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(reply)"
  },
  {
    "label": "TaskReturnType()",
    "kind": "Method",
    "detail": "Function (auto* result = new std::unique_ptr<)",
    "insertText": "TaskReturnType()"
  },
  {
    "label": "TaskRunner()",
    "kind": "Method",
    "detail": "Function (} protected : struct TaskRunnerTraits ;)",
    "insertText": "TaskRunner()"
  },
  {
    "label": "OnDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestruct()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (} ; struct BASE_EXPORT TaskRunnerTraits { void)",
    "insertText": "Destruct(const TaskRunner* task_runner)"
  }
]