[
  {
    "label": "AbsoluteCaptureTimeInterpolator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbsoluteCaptureTimeInterpolator"
  },
  {
    "label": "AbsoluteCaptureTimeSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbsoluteCaptureTimeSender"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_INTERPOLATOR_H_ # define MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_INTERPOLATOR_H_ # include \" api / array_view . h \" # include \" api / rtp_headers . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class AbsoluteCaptureTimeInterpolator { public : TimeDelta kInterpolationMaxInterval =)",
    "insertText": "Millis(5000)"
  },
  {
    "label": "AbsoluteCaptureTimeInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteCaptureTimeInterpolator(Clock* clock)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetSource(uint32_t ssrc, rtc::ArrayView<const uint32_t> csrcs)"
  },
  {
    "label": "OnReceivePacket()",
    "kind": "Method",
    "detail": "Function (absl::optional<AbsoluteCaptureTime>)",
    "insertText": "OnReceivePacket(uint32_t source, uint32_t rtp_timestamp, uint32_t rtp_clock_frequency, const absl::optional<AbsoluteCaptureTime>& received_extension)"
  },
  {
    "label": "InterpolateAbsoluteCaptureTimestamp()",
    "kind": "Method",
    "detail": "Function (private : class AbsoluteCaptureTimeSender ; uint64_t)",
    "insertText": "InterpolateAbsoluteCaptureTimestamp(uint32_t rtp_timestamp, uint32_t rtp_clock_frequency, uint32_t last_rtp_timestamp, uint64_t last_absolute_capture_timestamp)"
  },
  {
    "label": "ShouldInterpolateExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldInterpolateExtension(Timestamp receive_time, uint32_t source, uint32_t rtp_timestamp, uint32_t rtp_clock_frequency) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; Mutex mutex_ ; Timestamp last_receive_time_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]