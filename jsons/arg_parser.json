[
  {
    "label": "ArgParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgParser"
  },
  {
    "label": "OptionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OptionType"
  },
  {
    "label": "OptionValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OptionValue"
  },
  {
    "label": "Option",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Option"
  },
  {
    "label": "ArgParser()",
    "kind": "Method",
    "detail": "Function (# ifndef __VERIFLECT_ARG_PARSER_H__ # define __VERIFLECT_ARG_PARSER_H__ # include<iostream> # include<string> # include<vector> # include<unordered_map> class ArgParser { public : enum OptionType { OPTION_TYPE_UNDEFINED = 0,OPTION_TYPE_FLAG,OPTION_TYPE_STRING,OPTION_TYPE_INT,OPTION_TYPE_FLOAT } ; struct OptionValue { std::string str ; union { int i32 ; float f32 ; } ; } ; struct Option { std::string short_name ; std::string long_name ; OptionType type ; std::string desc ; OptionValue value ; OptionValue default_value ; bool parsed ; } ;)",
    "insertText": "ArgParser()"
  },
  {
    "label": "AddFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFlag(const std::string& short_name, const std::string& long_name, const std::string& desc)"
  },
  {
    "label": "AddOptionString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddOptionString(const std::string& short_name, const std::string& long_name, const std::string& desc, const std::string& default_value = \"\")"
  },
  {
    "label": "AddOptionInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddOptionInt(const std::string& short_name, const std::string& long_name, const std::string& desc, int default_value = 0)"
  },
  {
    "label": "AddOptionFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddOptionFloat(const std::string& short_name, const std::string& long_name, const std::string& desc, float default_value = 0)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(int argc, char** argv, std::ostream& os)"
  },
  {
    "label": "GetArgCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetArgCount()"
  },
  {
    "label": "GetArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetArg(size_t i, std::string* p_value)"
  },
  {
    "label": "GetArgs()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::string>&)",
    "insertText": "GetArgs()"
  },
  {
    "label": "GetFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFlag(const std::string& short_name, const std::string& long_name)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetString(const std::string& short_name, const std::string& long_name, std::string* p_value)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInt(const std::string& short_name, const std::string& long_name, int* p_value)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFloat(const std::string& short_name, const std::string& long_name, float* p_value)"
  },
  {
    "label": "PrintHelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintHelp(std::ostream& os)"
  },
  {
    "label": "FindOptionByShortName()",
    "kind": "Method",
    "detail": "Function (private : ArgParser::Option*)",
    "insertText": "FindOptionByShortName(const std::string& short_name)"
  },
  {
    "label": "FindOptionByLongName()",
    "kind": "Method",
    "detail": "Function (ArgParser::Option*)",
    "insertText": "FindOptionByLongName(const std::string& long_name)"
  }
]