[
  {
    "label": "TaskQueueTimeoutFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueTimeoutFactory"
  },
  {
    "label": "TaskQueueTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueTimeout"
  },
  {
    "label": "TaskQueueTimeoutFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TIMER_TASK_QUEUE_TIMEOUT_H_ # define NET_DCSCTP_TIMER_TASK_QUEUE_TIMEOUT_H_ # include<memory> # include<utility> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / timeout . h \" namespace dcsctp { class TaskQueueTimeoutFactory { public :)",
    "insertText": "TaskQueueTimeoutFactory(webrtc::TaskQueueBase& task_queue, std::function<TimeMs()> get_time, std::function<void(TimeoutID timeout_id)> on_expired) : task_queue_(task_queue), get_time_(std::move(get_time)), on_expired_(std::move(on_expired))"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Timeout>)",
    "insertText": "CreateTimeout(webrtc::TaskQueueBase::DelayPrecision precision = webrtc::TaskQueueBase::DelayPrecision::kLow)"
  },
  {
    "label": "TaskQueueTimeout()",
    "kind": "Method",
    "detail": "Function (} private : class TaskQueueTimeout : public Timeout { public :)",
    "insertText": "TaskQueueTimeout(TaskQueueTimeoutFactory& parent, webrtc::TaskQueueBase::DelayPrecision precision)"
  },
  {
    "label": "TaskQueueTimeout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueueTimeout()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(DurationMs duration_ms, TimeoutID timeout_id)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (private : TaskQueueTimeoutFactory& parent_ ; const webrtc::TaskQueueBase::DelayPrecision precision_ ; rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> pending_task_safety_flag_ ; TimeMs posted_task_expiration_ =)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "TimeoutID()",
    "kind": "Method",
    "detail": "Function (TimeoutID timeout_id_ =)",
    "insertText": "TimeoutID(0)"
  },
  {
    "label": "TimeMs()",
    "kind": "Method",
    "detail": "Function (} ; RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker thread_checker_ ; webrtc::TaskQueueBase& task_queue_ ; const std::function<)",
    "insertText": "TimeMs()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void(TimeoutID)"
  }
]