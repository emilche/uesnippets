[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Tuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "WithConstructedImplF",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WithConstructedImplF"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "S",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "S"
  },
  {
    "label": "Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Arg"
  },
  {
    "label": "Pair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pair"
  },
  {
    "label": "OffsetOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetOf"
  },
  {
    "label": "IsLayoutCompatible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsLayoutCompatible"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "map_slot_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "map_slot_policy"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_CONTAINER_MEMORY_H_ # define ABSL_CONTAINER_INTERNAL_CONTAINER_MEMORY_H_ # include<cassert> # include<cstddef> # include<cstring> # include<memory> # include<new> # include<tuple> # include<type_traits> # include<utility> # include \" absl / base / config . h \" # include \" absl / memory / memory . h \" # include \" absl / meta / type_traits . h \" # include \" absl / utility / utility . h \" # ifdef ABSL_HAVE_ADDRESS_SANITIZER # include<sanitizer / asan_interface . h> # endif # ifdef ABSL_HAVE_MEMORY_SANITIZER # include<sanitizer / msan_interface . h> # endif namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<size_t Alignment> struct)",
    "insertText": "alignas(Alignment)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} ; template<size_t Alignment,class Alloc> void*)",
    "insertText": "Allocate(Alloc* alloc, size_t n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n && \"n must be positive\")"
  },
  {
    "label": "my_mem_alloc()",
    "kind": "Method",
    "detail": "Function (using M = AlignedType<Alignment> ; using A = absl::allocator_traits<Alloc>::template rebind_alloc<M> ; using AT = absl::allocator_traits<Alloc>::template rebind_traits<M> ; A)",
    "insertText": "my_mem_alloc(*alloc)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void* p =)",
    "insertText": "allocate(my_mem_alloc, (n + sizeof(M) - 1) / sizeof(M))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(reinterpret_cast<uintptr_t>(p) % Alignment == 0 && \"allocator does not respect alignment\")"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(my_mem_alloc, static_cast<M*>(p), (n + sizeof(M) - 1) / sizeof(M))"
  },
  {
    "label": "ConstructFromTupleImpl()",
    "kind": "Method",
    "detail": "Function (} namespace memory_internal { template<class Alloc,class T,class Tuple,size_t . . . I> void)",
    "insertText": "ConstructFromTupleImpl(Alloc* alloc, T* ptr, Tuple&& t, absl::index_sequence<I...>)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Alloc)",
    "insertText": "construct(*alloc, ptr, std::get<I>(std::forward<Tuple>(t))...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class T,class F> struct WithConstructedImplF { template<class . . . Args>)",
    "insertText": "decltype(std::declval<F>()(std::declval<T>())) operator()( Args&&... args)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} F&& f ; } ; template<class T,class Tuple,size_t . . . Is,class F>)",
    "insertText": "decltype(std::declval<F>()(std::declval<T>())) WithConstructedImpl( Tuple&& t, absl::index_sequence<Is...>, F&& f)"
  },
  {
    "label": "TupleRefImpl()",
    "kind": "Method",
    "detail": "Function (} template<class T,size_t . . . Is> auto)",
    "insertText": "TupleRefImpl(T&& t, absl::index_sequence<Is...>) -> decltype(std::forward_as_tuple(std::get<Is>(std::forward<T>(t))...))"
  },
  {
    "label": "TupleRef()",
    "kind": "Method",
    "detail": "Function (} template<class T> auto)",
    "insertText": "TupleRef(T&& t) -> decltype( TupleRefImpl(std::forward<T>(t), absl::make_index_sequence< std::tuple_size<typename std::decay<T>::type>::value>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class F,class K,class V>)",
    "insertText": "decltype(std::declval<F>()(std::declval<const K&>(), std::piecewise_construct, std::declval<std::tuple<K>>(), std::declval<V>())) DecomposePairImpl(F&& f, std::pair<std::tuple<K>, V> p)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const auto& key =)",
    "insertText": "get(p.first)"
  },
  {
    "label": "ConstructFromTuple()",
    "kind": "Method",
    "detail": "Function (} } template<class Alloc,class T,class Tuple> void)",
    "insertText": "ConstructFromTuple(Alloc* alloc, T* ptr, Tuple&& t)"
  },
  {
    "label": "ConstructFromTupleImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructFromTupleImpl(alloc, ptr, std::forward<Tuple>(t), absl::make_index_sequence< std::tuple_size<typename std::decay<Tuple>::type>::value>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class T,class Tuple,class F>)",
    "insertText": "decltype(std::declval<F>()(std::declval<T>())) WithConstructed( Tuple&& t, F&& f)"
  },
  {
    "label": "PairArgs()",
    "kind": "Method",
    "detail": "Function (} std::pair<std::tuple<>,std::tuple<>>)",
    "insertText": "PairArgs()"
  },
  {
    "label": "PairArgs()",
    "kind": "Method",
    "detail": "Function (} template<class F,class S> std::pair<std::tuple<const F&>,std::tuple<const S&>>)",
    "insertText": "PairArgs(const std::pair<F, S>& p)"
  },
  {
    "label": "PairArgs()",
    "kind": "Method",
    "detail": "Function (} template<class F,class S> std::pair<std::tuple<F&&>,std::tuple<S&&>>)",
    "insertText": "PairArgs(std::pair<F, S>&& p)"
  },
  {
    "label": "PairArgs()",
    "kind": "Method",
    "detail": "Function (} template<class F,class S> auto)",
    "insertText": "PairArgs(std::piecewise_construct_t, F&& f, S&& s) -> decltype(std::make_pair(memory_internal::TupleRef(std::forward<F>(f)), memory_internal::TupleRef(std::forward<S>(s))))"
  },
  {
    "label": "DecomposePair()",
    "kind": "Method",
    "detail": "Function (} template<class F,class . . . Args> auto)",
    "insertText": "DecomposePair(F&& f, Args&&... args) -> decltype(memory_internal::DecomposePairImpl( std::forward<F>(f), PairArgs(std::forward<Args>(args)...)))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class F,class Arg>)",
    "insertText": "decltype(std::declval<F>()(std::declval<const Arg&>(), std::declval<Arg>())) DecomposeValue(F&& f, Arg&& arg)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const auto& key = arg ; return std::forward<)",
    "insertText": "F(f)(key, std::forward<Arg>(arg))"
  },
  {
    "label": "SanitizerPoisonMemoryRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SanitizerPoisonMemoryRegion(const void* m, size_t s)"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_ADDRESS_SANITIZER)",
    "insertText": "ASAN_POISON_MEMORY_REGION(m, s)"
  },
  {
    "label": "__msan_poison()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef ABSL_HAVE_MEMORY_SANITIZER)",
    "insertText": "__msan_poison(m, s)"
  },
  {
    "label": "endif()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "endif(void)"
  },
  {
    "label": "SanitizerUnpoisonMemoryRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SanitizerUnpoisonMemoryRegion(const void* m, size_t s)"
  },
  {
    "label": "ASAN_UNPOISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_ADDRESS_SANITIZER)",
    "insertText": "ASAN_UNPOISON_MEMORY_REGION(m, s)"
  },
  {
    "label": "__msan_unpoison()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef ABSL_HAVE_MEMORY_SANITIZER)",
    "insertText": "__msan_unpoison(m, s)"
  },
  {
    "label": "SanitizerPoisonObject()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SanitizerPoisonObject(const T* object)"
  },
  {
    "label": "SanitizerPoisonMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizerPoisonMemoryRegion(object, sizeof(T))"
  },
  {
    "label": "SanitizerUnpoisonObject()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SanitizerUnpoisonObject(const T* object)"
  },
  {
    "label": "SanitizerUnpoisonMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizerUnpoisonMemoryRegion(object, sizeof(T))"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} namespace memory_internal { template<class Pair,class = std::true_type> struct OffsetOf { size_t kFirst = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (} ; template<class Pair> struct OffsetOf<Pair,std::is_standard_layout<Pair>::type> { size_t kFirst =)",
    "insertText": "offsetof(Pair, first)"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (size_t kSecond =)",
    "insertText": "offsetof(Pair, second)"
  },
  {
    "label": "LayoutCompatible()",
    "kind": "Method",
    "detail": "Function (} ; template<class K,class V> struct IsLayoutCompatible { private : struct Pair { K first ; V second ; } ; template<class P> bool)",
    "insertText": "LayoutCompatible()"
  },
  {
    "label": "K()",
    "kind": "Method",
    "detail": "Function (} public : bool value = std::is_standard_layout<)",
    "insertText": "K() && std::is_standard_layout<Pair>() && memory_internal::OffsetOf<Pair>::kFirst == 0 && LayoutCompatible<std::pair<K, V>>() && LayoutCompatible<std::pair<const K, V>>()"
  },
  {
    "label": "map_slot_type()",
    "kind": "Method",
    "detail": "Function (} ; } template<class K,class V> union map_slot_type {)",
    "insertText": "map_slot_type()"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (using value_type = std::pair<const K,V> ; using mutable_value_type = std::pair<absl::remove_const_t<K>,absl::remove_const_t<V>> ; value_type value ; mutable_value_type mutable_value ; absl::remove_const_t<K> key ; } ; template<class K,class V> struct map_slot_policy { using slot_type = map_slot_type<K,V> ; using value_type = std::pair<const K,V> ; using mutable_value_type = std::pair<absl::remove_const_t<K>,absl::remove_const_t<V>> ; private : void)",
    "insertText": "emplace(slot_type* slot)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(slot)"
  },
  {
    "label": "element()",
    "kind": "Method",
    "detail": "Function (} using kMutableKeys = memory_internal::IsLayoutCompatible<K,V> ; public : value_type&)",
    "insertText": "element(slot_type* slot)"
  },
  {
    "label": "mutable_key()",
    "kind": "Method",
    "detail": "Function (} # else const K&)",
    "insertText": "mutable_key(slot_type* slot)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} # endif const K&)",
    "insertText": "key(const slot_type* slot)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace(slot)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &slot->mutable_value, std::forward<Args>(args)...)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else { absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &slot->value, std::forward<Args>(args)...)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } template<class Allocator> void)",
    "insertText": "construct(Allocator* alloc, slot_type* slot, slot_type* other)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &slot->mutable_value, std::move(other->mutable_value))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else { absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &slot->value, std::move(other->value))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } template<class Allocator> void)",
    "insertText": "construct(Allocator* alloc, slot_type* slot, const slot_type* other)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &slot->value, other->value)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<class Allocator> void)",
    "insertText": "destroy(Allocator* alloc, slot_type* slot)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Allocator)",
    "insertText": "destroy(*alloc, &slot->mutable_value)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} else { absl::allocator_traits<Allocator)",
    "insertText": "destroy(*alloc, &slot->value)"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (} } template<class Allocator> void)",
    "insertText": "transfer(Allocator* alloc, slot_type* new_slot, slot_type* old_slot)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace(new_slot)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__cpp_lib_launder) && __cpp_lib_launder >= 201606 if (absl::is_trivially_relocatable<value_type>())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(std::launder(&new_slot->value)), static_cast<const void*>(&old_slot->value), sizeof(value_type))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &new_slot->mutable_value, std::move(old_slot->mutable_value))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else { absl::allocator_traits<Allocator)",
    "insertText": "construct(*alloc, &new_slot->value, std::move(old_slot->value))"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "destroy(alloc, old_slot)"
  }
]