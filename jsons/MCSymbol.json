[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFragment"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SymbolKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolKind"
  },
  {
    "label": "Contents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Contents"
  },
  {
    "label": "MCSymbol()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSYMBOL_H # define LLVM_MC_MCSYMBOL_H # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / PointerUnion . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / MC / MCAssembler . h \" # include \" llvm / Support / Compiler . h \" namespace llvm { class MCAsmInfo ; class MCExpr ; class MCSymbol ; class MCFragment ; class MCSection ; class MCContext ; class raw_ostream ; class MCSymbol { protected : enum SymbolKind { SymbolKindUnset,SymbolKindCOFF,SymbolKindELF,SymbolKindMachO,} ; enum Contents : uint8_t { SymContentsUnset,SymContentsOffset,SymContentsVariable,SymContentsCommon,} ; MCSection* AbsolutePseudoSection ; PointerIntPair<PointerUnion<MCSection*,MCFragment*>,1> SectionOrFragmentAndHasName ; unsigned IsTemporary : 1 ; unsigned IsRedefinable : 1 ; unsigned IsUsed : 1 ; bool IsRegistered : 1 ; unsigned IsExternal : 1 ; unsigned IsPrivateExtern : 1 ; unsigned Kind : 2 ; unsigned IsUsedInReloc : 1 ; unsigned SymbolContents : 2 ; enum : unsigned { NumCommonAlignmentBits = 5 } ; unsigned CommonAlignLog2 : NumCommonAlignmentBits ; enum : unsigned { NumFlagsBits = 1 6 } ; uint32_t Flags : NumFlagsBits ; uint32_t Index = 0 ; union { uint64_t Offset ; uint64_t CommonSize ; const MCExpr* Value ; } ; protected : class MCExpr ; class MCContext ; typedef union { const StringMapEntry<bool>* NameEntry ; uint64_t AlignmentPadding ; } NameEntryStorageTy ;)",
    "insertText": "MCSymbol(SymbolKind Kind, const StringMapEntry<bool> *Name, bool isTemporary) : IsTemporary(isTemporary), IsRedefinable(false), IsUsed(false), IsRegistered(false), IsExternal(false), IsPrivateExtern(false), Kind(Kind), IsUsedInReloc(false), SymbolContents(SymContentsUnset), CommonAlignLog2(0), Flags(0)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (Offset = 0 ; SectionOrFragmentAndHasName .)",
    "insertText": "setInt(!!Name)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t s, const StringMapEntry<bool> *Name, MCContext &Ctx)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (private : void operator)",
    "insertText": "delete(void *)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void*, unsigned)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Constructor throws?\")"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void*, unsigned, bool)"
  },
  {
    "label": "MCSymbol()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCSymbol(const MCSymbol &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCSymbol &)"
  },
  {
    "label": "getSectionPtr()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "getSectionPtr()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (const auto& SectionOrFragment = SectionOrFragmentAndHasName .)",
    "insertText": "getPointer()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!SectionOrFragment.is<MCFragment *>() && \"Section or null expected\")"
  },
  {
    "label": "MCSection()",
    "kind": "Method",
    "detail": "Function (MCSection* Section = SectionOrFragment . dyn_cast<)",
    "insertText": "MCSection()"
  },
  {
    "label": "getNameEntryPtr()",
    "kind": "Method",
    "detail": "Function (} const StringMapEntry<bool>*&)",
    "insertText": "getNameEntryPtr()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SectionOrFragmentAndHasName.getInt() && \"Name is required\")"
  },
  {
    "label": "NameEntryStorageTy()",
    "kind": "Method",
    "detail": "Function (NameEntryStorageTy* Name = reinterpret_cast<)",
    "insertText": "NameEntryStorageTy(this)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} public : StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "isRegistered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegistered()"
  },
  {
    "label": "setUsedInReloc()",
    "kind": "Method",
    "detail": "Function (IsRegistered = Value ; } void)",
    "insertText": "setUsedInReloc()"
  },
  {
    "label": "isUsedInReloc()",
    "kind": "Method",
    "detail": "Function (IsUsedInReloc = true ; } bool)",
    "insertText": "isUsedInReloc()"
  },
  {
    "label": "isRedefinable()",
    "kind": "Method",
    "detail": "Function (IsUsed = Value ; } bool)",
    "insertText": "isRedefinable()"
  },
  {
    "label": "redefineIfPossible()",
    "kind": "Method",
    "detail": "Function (IsRedefinable = Value ; } void)",
    "insertText": "redefineIfPossible()"
  },
  {
    "label": "setUndefined()",
    "kind": "Method",
    "detail": "Function (Value = nullptr ; SymbolContents = SymContentsUnset ; })",
    "insertText": "setUndefined()"
  },
  {
    "label": "isDefined()",
    "kind": "Method",
    "detail": "Function (IsRedefinable = false ; } } bool)",
    "insertText": "isDefined()"
  },
  {
    "label": "isInSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInSection()"
  },
  {
    "label": "isUndefined()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUndefined()"
  },
  {
    "label": "isAbsolute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAbsolute()"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (} MCSection&)",
    "insertText": "getSection()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isInSection() && \"Invalid accessor!\")"
  },
  {
    "label": "setSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSection(MCSection &S)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isVariable() && \"Cannot set section of variable\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!SectionOrFragmentAndHasName.getPointer().is<MCFragment *>() && \"Section or null expected\")"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (SectionOrFragmentAndHasName .)",
    "insertText": "setPointer(&S)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (SectionOrFragmentAndHasName .)",
    "insertText": "setPointer(PointerUnion<MCSection *, MCFragment *>())"
  },
  {
    "label": "isELF()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isELF()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isVariable() && \"Invalid accessor!\")"
  },
  {
    "label": "setVariableValue()",
    "kind": "Method",
    "detail": "Function (IsUsed = true ; return Value ; } void)",
    "insertText": "setVariableValue(const MCExpr *Value)"
  },
  {
    "label": "getIndex()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getIndex()"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (Index = Value ; } uint64_t)",
    "insertText": "getOffset()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((SymbolContents == SymContentsUnset || SymbolContents == SymContentsOffset) && \"Cannot get offset for a common/variable symbol\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((SymbolContents == SymContentsUnset || SymbolContents == SymContentsOffset) && \"Cannot set offset for a common/variable symbol\")"
  },
  {
    "label": "getCommonSize()",
    "kind": "Method",
    "detail": "Function (Offset = Value ; SymbolContents = SymContentsOffset ; } uint64_t)",
    "insertText": "getCommonSize()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isCommon() && \"Not a 'common' symbol!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getOffset() == 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (CommonSize = Size ; SymbolContents = SymContentsCommon ;)",
    "insertText": "assert((!Align || isPowerOf2_32(Align)) && \"Alignment must be a power of 2\")"
  },
  {
    "label": "Log2_32()",
    "kind": "Method",
    "detail": "Function (unsigned Log2Align =)",
    "insertText": "Log2_32(Align)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Log2Align < (1U << NumCommonAlignmentBits) && \"Out of range alignment\")"
  },
  {
    "label": "getCommonAlignment()",
    "kind": "Method",
    "detail": "Function (CommonAlignLog2 = Log2Align ; } unsigned)",
    "insertText": "getCommonAlignment()"
  },
  {
    "label": "declareCommon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "declareCommon(uint64_t Size, unsigned Align)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isCommon() || getOffset() == 0)"
  },
  {
    "label": "setCommon()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "setCommon(Size, Align)"
  },
  {
    "label": "setFragment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFragment(MCFragment *Value)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (SectionOrFragmentAndHasName .)",
    "insertText": "setPointer(Value)"
  },
  {
    "label": "isExternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExternal()"
  },
  {
    "label": "isPrivateExtern()",
    "kind": "Method",
    "detail": "Function (IsExternal = Value ; } bool)",
    "insertText": "isPrivateExtern()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (IsPrivateExtern = Value ; } void)",
    "insertText": "print(raw_ostream &OS, const MCAsmInfo *MAI)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (protected : uint32_t)",
    "insertText": "getFlags()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Value < (1U << NumFlagsBits) && \"Out of range flags\")"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (Flags = Value ; } void)",
    "insertText": "modifyFlags(uint32_t Value, uint32_t Mask)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~Mask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const MCSymbol &Sym)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (Sym .)",
    "insertText": "print(OS, nullptr)"
  }
]