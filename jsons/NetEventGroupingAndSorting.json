[
  {
    "label": "FNetEventNodeSortingByEventType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetEventNodeSortingByEventType"
  },
  {
    "label": "FNetEventNodeSortingByInstanceCount",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetEventNodeSortingByInstanceCount"
  },
  {
    "label": "FNetEventNodeSortingByTotalInclusiveSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetEventNodeSortingByTotalInclusiveSize"
  },
  {
    "label": "FNetEventNodeSortingByTotalExclusiveSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetEventNodeSortingByTotalExclusiveSize"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetEventNodeSortingByEventType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InsightsCore / Table / ViewModels / TableColumn . h \" # include \" InsightsCore / Table / ViewModels / TableCellValueSorter . h \" # include \" InsightsCore / Table / ViewModels / TreeNodeGrouping . h \" # include \" Insights / NetworkingProfiler / ViewModels / NetEventNode . h \" namespace UE::Insights::NetworkingProfiler { class FNetEventNodeSortingByEventType : public FTableCellValueSorter { public :)",
    "insertText": "FNetEventNodeSortingByEventType(TSharedRef<FTableColumn> InColumnRef)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(TArray<FBaseTreeNodePtr>& NodesToSort, ESortMode SortMode)"
  },
  {
    "label": "FNetEventNodeSortingByInstanceCount()",
    "kind": "Method",
    "detail": "Function (} ; class FNetEventNodeSortingByInstanceCount : public FTableCellValueSorter { public :)",
    "insertText": "FNetEventNodeSortingByInstanceCount(TSharedRef<FTableColumn> InColumnRef)"
  },
  {
    "label": "FNetEventNodeSortingByTotalInclusiveSize()",
    "kind": "Method",
    "detail": "Function (} ; class FNetEventNodeSortingByTotalInclusiveSize : public FTableCellValueSorter { public :)",
    "insertText": "FNetEventNodeSortingByTotalInclusiveSize(TSharedRef<FTableColumn> InColumnRef)"
  },
  {
    "label": "FNetEventNodeSortingByTotalExclusiveSize()",
    "kind": "Method",
    "detail": "Function (} ; class FNetEventNodeSortingByTotalExclusiveSize : public FTableCellValueSorter { public :)",
    "insertText": "FNetEventNodeSortingByTotalExclusiveSize(TSharedRef<FTableColumn> InColumnRef)"
  }
]