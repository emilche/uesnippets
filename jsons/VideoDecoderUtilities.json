[
  {
    "label": "FEventSignal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventSignal"
  },
  {
    "label": "FEventSignal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Event . h \" # include \" HAL / PlatformProcess . h \" namespace AVEncoder { namespace DecoderUtilities { class FEventSignal { public :)",
    "insertText": "FEventSignal(): Event(FPlatformProcess::GetSynchEventFromPool(true))"
  },
  {
    "label": "FEventSignal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventSignal(const FEventSignal&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEventSignal&)",
    "insertText": "operator(const FEventSignal&)"
  },
  {
    "label": "FEventSignal()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEventSignal()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (Event ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSynchEventToPool(Event)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitAndReset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitAndReset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Event ->)",
    "insertText": "Reset()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Signal()"
  },
  {
    "label": "IsSignaled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSignaled()"
  },
  {
    "label": "WaitTimeout()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitTimeout(int64 InMicroSeconds)"
  },
  {
    "label": "WaitTimeoutAndReset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitTimeoutAndReset(int64 InMicroSeconds)"
  }
]