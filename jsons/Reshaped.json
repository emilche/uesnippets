[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "ReshapedImpl_dense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReshapedImpl_dense"
  },
  {
    "label": "ReshapedImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReshapedImpl"
  },
  {
    "label": "Reshaped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Reshaped"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "reshaped_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "reshaped_evaluator"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "XpxStorageOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_RESHAPED_H # define EIGEN_RESHAPED_H namespace Eigen { namespace internal { template<XprType,int Rows,int Cols,int Order> struct traits<Reshaped<XprType,Rows,Cols,Order>> : traits<XprType> { typedef traits<XprType>::Scalar Scalar ; typedef traits<XprType>::StorageKind StorageKind ; typedef traits<XprType>::XprKind XprKind ; enum { MatrixRows = traits<XprType>::RowsAtCompileTime,MatrixCols = traits<XprType>::ColsAtCompileTime,RowsAtCompileTime = Rows,ColsAtCompileTime = Cols,MaxRowsAtCompileTime = Rows,MaxColsAtCompileTime = Cols,)",
    "insertText": "XpxStorageOrder((int(traits<XprType>::Flags) & RowMajorBit) == RowMajorBit) ? RowMajor : ColMajor, ReshapedStorageOrder = (RowsAtCompileTime == 1 && ColsAtCompileTime != 1) ? RowMajor : (ColsAtCompileTime == 1 && RowsAtCompileTime != 1) ? ColMajor : XpxStorageOrder, HasSameStorageOrderAsXprType = (ReshapedStorageOrder == XpxStorageOrder), InnerSize = (ReshapedStorageOrder==int(RowMajor)) ? int(ColsAtCompileTime) : int(RowsAtCompileTime), InnerStrideAtCompileTime = HasSameStorageOrderAsXprType ? int(inner_stride_at_compile_time<XprType>::ret) : Dynamic, OuterStrideAtCompileTime = Dynamic, HasDirectAccess = internal::has_direct_access<XprType>::ret && (Order==int(XpxStorageOrder)) && ((evaluator<XprType>::Flags&LinearAccessBit)==LinearAccessBit), MaskPacketAccessBit = (InnerSize == Dynamic || (InnerSize % packet_traits<Scalar>::size) == 0) && (InnerStrideAtCompileTime == 1) ? PacketAccessBit : 0, FlagsLinearAccessBit = (RowsAtCompileTime == 1 || ColsAtCompileTime == 1) ? LinearAccessBit : 0, FlagsLvalueBit = is_lvalue<XprType>::value ? LvalueBit : 0, FlagsRowMajorBit = (ReshapedStorageOrder==int(RowMajor)) ? RowMajorBit : 0, FlagsDirectAccessBit = HasDirectAccess ? DirectAccessBit : 0, Flags0 = traits<XprType>::Flags & ( (HereditaryBits & ~RowMajorBit) | MaskPacketAccessBit), Flags = (Flags0 | FlagsLinearAccessBit | FlagsLvalueBit | FlagsRowMajorBit | FlagsDirectAccessBit)"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; template<XprType,int Rows,int Cols,int Order,bool HasDirectAccess> class ReshapedImpl_dense ; } template<XprType,int Rows,int Cols,int Order,StorageKind> class ReshapedImpl ; template<XprType,int Rows,int Cols,int Order> class Reshaped : public ReshapedImpl<XprType,Rows,Cols,Order,internal::traits<XprType>::StorageKind> { typedef ReshapedImpl<XprType,Rows,Cols,Order,internal::traits<XprType>::StorageKind> Impl ; public : typedef Impl Base ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(Reshaped) EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Reshaped) EIGEN_DEVICE_FUNC inline Reshaped(XprType& xpr) : Impl(xpr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(RowsAtCompileTime!=Dynamic && ColsAtCompileTime!=Dynamic,THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE) eigen_assert(Rows * Cols == xpr.rows() * xpr.cols())"
  },
  {
    "label": "Reshaped()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Reshaped(XprType& xpr, Index reshapeRows, Index reshapeCols) : Impl(xpr, reshapeRows, reshapeCols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((RowsAtCompileTime==Dynamic || RowsAtCompileTime==reshapeRows) && (ColsAtCompileTime==Dynamic || ColsAtCompileTime==reshapeCols))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(reshapeRows * reshapeCols == xpr.rows() * xpr.cols())"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<XprType,int Rows,int Cols,int Order> class ReshapedImpl<XprType,Rows,Cols,Order,Dense> : public internal::ReshapedImpl_dense<XprType,Rows,Cols,Order,internal::traits<Reshaped<XprType,Rows,Cols,Order>>::HasDirectAccess> { typedef internal::ReshapedImpl_dense<XprType,Rows,Cols,Order,internal::traits<Reshaped<XprType,Rows,Cols,Order>>::HasDirectAccess> Impl ; public : typedef Impl Base ;)",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(ReshapedImpl) EIGEN_DEVICE_FUNC inline ReshapedImpl(XprType& xpr) : Impl(xpr)"
  },
  {
    "label": "ReshapedImpl()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "ReshapedImpl(XprType& xpr, Index reshapeRows, Index reshapeCols) : Impl(xpr, reshapeRows, reshapeCols)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<XprType,int Rows,int Cols,int Order> class ReshapedImpl_dense<XprType,Rows,Cols,Order,false> : public internal::dense_xpr_base<Reshaped<XprType,Rows,Cols,Order>>::type { typedef Reshaped<XprType,Rows,Cols,Order> ReshapedType ; public : typedef internal::dense_xpr_base<ReshapedType>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(ReshapedType) EIGEN_INHERIT_ASSIGNMENT_OPERATORS(ReshapedImpl_dense)"
  },
  {
    "label": "ReshapedImpl_dense()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_all<XprType>::type NestedExpression ; class InnerIterator ; EIGEN_DEVICE_FUNC)",
    "insertText": "ReshapedImpl_dense(XprType& xpr) : m_xpr(xpr), m_rows(Rows), m_cols(Cols)"
  },
  {
    "label": "ReshapedImpl_dense()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "ReshapedImpl_dense(XprType& xpr, Index nRows, Index nCols) : m_xpr(xpr), m_rows(nRows), m_cols(nCols)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "rows()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Index)",
    "insertText": "innerStride()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (# endif EIGEN_DEVICE_FUNC const internal::remove_all<XprType>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "ReshapedImpl_dense()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "ReshapedImpl_dense(XprType& xpr, Index nRows, Index nCols) : Base(xpr.data(), nRows, nCols), m_xpr(xpr)"
  },
  {
    "label": "FlagsLinearAccessBit()",
    "kind": "Method",
    "detail": "Function (} protected : XprTypeNested m_xpr ; } ; template<ArgType,int Rows,int Cols,int Order,bool HasDirectAccess> struct reshaped_evaluator ; template<ArgType,int Rows,int Cols,int Order> struct evaluator<Reshaped<ArgType,Rows,Cols,Order>> : reshaped_evaluator<ArgType,Rows,Cols,Order,traits<Reshaped<ArgType,Rows,Cols,Order>>::HasDirectAccess> { typedef Reshaped<ArgType,Rows,Cols,Order> XprType ; typedef XprType::Scalar Scalar ; typedef packet_traits<Scalar>::type PacketScalar ; enum { CoeffReadCost = evaluator<ArgType>::CoeffReadCost,HasDirectAccess = traits<XprType>::HasDirectAccess,)",
    "insertText": "FlagsLinearAccessBit(traits<XprType>::RowsAtCompileTime == 1 || traits<XprType>::ColsAtCompileTime == 1 || HasDirectAccess) ? LinearAccessBit : 0, FlagsRowMajorBit = (traits<XprType>::ReshapedStorageOrder==int(RowMajor)) ? RowMajorBit : 0, FlagsDirectAccessBit = HasDirectAccess ? DirectAccessBit : 0, Flags0 = evaluator<ArgType>::Flags & (HereditaryBits & ~RowMajorBit)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (typedef reshaped_evaluator<ArgType,Rows,Cols,Order,HasDirectAccess> reshaped_evaluator_type ; EIGEN_DEVICE_FUNC)",
    "insertText": "evaluator(const XprType& xpr) : reshaped_evaluator_type(xpr)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (} } ; template<ArgType,int Rows,int Cols,int Order> struct reshaped_evaluator<ArgType,Rows,Cols,Order,false> : evaluator_base<Reshaped<ArgType,Rows,Cols,Order>> { typedef Reshaped<ArgType,Rows,Cols,Order> XprType ; enum { CoeffReadCost = evaluator<ArgType>::CoeffReadCost,)",
    "insertText": "Flags(evaluator<ArgType>::Flags & (HereditaryBits ))"
  },
  {
    "label": "reshaped_evaluator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "reshaped_evaluator(const XprType& xpr) : m_argImpl(xpr.nestedExpression()), m_xpr(xpr)"
  },
  {
    "label": "index_remap()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef std::pair<Index,Index> RowCol ; RowCol)",
    "insertText": "index_remap(Index rowId, Index colId)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} else { const Index nth_elem_idx = colId + rowId* m_xpr .)",
    "insertText": "cols()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index rowId, Index colId)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(XprType) const RowCol row_col = index_remap(rowId, colId)"
  },
  {
    "label": "index_remap()",
    "kind": "Method",
    "detail": "Function (const RowCol row_col =)",
    "insertText": "index_remap(rowId, colId)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType)",
    "insertText": "coeff(Index rowId, Index colId)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(XprType) const RowCol row_col = index_remap(Rows == 1 ? 0 : index, Rows == 1 ? index : 0)"
  },
  {
    "label": "index_remap()",
    "kind": "Method",
    "detail": "Function (const RowCol row_col =)",
    "insertText": "index_remap(Rows == 1 ? 0 : index, Rows == 1 ? index : 0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} # if 0 EIGEN_DEVICE_FUNC template<int LoadMode> PacketScalar)",
    "insertText": "packet(Index rowId, Index colId)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC void)",
    "insertText": "writePacket(Index rowId, Index colId, const PacketScalar& val)"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (m_argImpl .)",
    "insertText": "const_cast_derived().template writePacket<Unaligned> (row_col.first, row_col.second, val)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC PacketScalar)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "index_remap()",
    "kind": "Method",
    "detail": "Function (const RowCol row_col =)",
    "insertText": "index_remap(RowsAtCompileTime == 1 ? 0 : index, RowsAtCompileTime == 1 ? index : 0)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC void)",
    "insertText": "writePacket(Index index, const PacketScalar& val)"
  },
  {
    "label": "reshaped_evaluator()",
    "kind": "Method",
    "detail": "Function (} # endif protected : evaluator<ArgType> m_argImpl ; const XprType& m_xpr ; } ; template<ArgType,int Rows,int Cols,int Order> struct reshaped_evaluator<ArgType,Rows,Cols,Order,true> : mapbase_evaluator<Reshaped<ArgType,Rows,Cols,Order>,Reshaped<ArgType,Rows,Cols,Order>::PlainObject> { typedef Reshaped<ArgType,Rows,Cols,Order> XprType ; typedef XprType::Scalar Scalar ; EIGEN_DEVICE_FUNC)",
    "insertText": "reshaped_evaluator(const XprType& xpr) : mapbase_evaluator<XprType, typename XprType::PlainObject>(xpr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(((internal::UIntPtr(xpr.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && \"data is not aligned\")"
  }
]