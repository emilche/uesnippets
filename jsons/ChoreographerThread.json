[
  {
    "label": "ChoreographerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChoreographerThread"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<jni . h> # include<mutex> # include \" SwappyDisplayManager . h \" # include \" Thread . h \" namespace swappy { class ChoreographerThread { public : enum class Type { App,Swappy,} ; const char* CT_CLASS ; const JNINativeMethod CTNativeMethods [ ] ; int CTNativeMethodsSize = 1 ; using RefreshRateChangedCallback = std::function<)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ChoreographerCallback = std::function<)",
    "insertText": "void(std::optional<std::chrono::nanoseconds> sfToVsyncDelay)"
  },
  {
    "label": "createChoreographerThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ChoreographerThread>)",
    "insertText": "createChoreographerThread(Type type, JavaVM* vm, jobject jactivity, ChoreographerCallback onChoreographer, RefreshRateChangedCallback onRefreshRateChanged, SdkVersion sdkVersion)"
  },
  {
    "label": "ChoreographerThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ChoreographerThread()"
  },
  {
    "label": "postFrameCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postFrameCallbacks()"
  },
  {
    "label": "isInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInitialized()"
  },
  {
    "label": "scheduleNextFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scheduleNextFrameCallback() REQUIRES(mWaitingMutex)"
  },
  {
    "label": "onChoreographer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onChoreographer(std::optional<std::chrono::nanoseconds> sfToVsyncDelay)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::mutex mWaitingMutex ; int mCallbacksBeforeIdle)",
    "insertText": "GUARDED_BY(mWaitingMutex)"
  }
]