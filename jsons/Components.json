[
  {
    "label": "FRHIShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderResourceView"
  },
  {
    "label": "FStaticMeshBuildVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshBuildVertex"
  },
  {
    "label": "FStaticMeshDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshDataType"
  },
  {
    "label": "FConstMeshBuildVertexView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstMeshBuildVertexView"
  },
  {
    "label": "FMeshBuildVertexView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBuildVertexView"
  },
  {
    "label": "FMeshBuildVertexData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBuildVertexData"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Containers / StridedView . h \" # include \" MeshUVChannelInfo . h \" # include \" VertexStreamComponent . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NaniteDefinitions . h \" # endif class FRHIShaderResourceView ; enum { MAX_STATIC_TEXCOORDS = 8 } ; struct FStaticMeshBuildVertex { FVector3f Position ; FVector3f TangentX ; FVector3f TangentY ; FVector3f TangentZ ; FVector2f UVs [ MAX_STATIC_TEXCOORDS ] ; FColor Color ; } ; struct FStaticMeshDataType { FVertexStreamComponent PositionComponent ; FVertexStreamComponent TangentBasisComponents [ 2 ] ; TArray<FVertexStreamComponent,TFixedAllocator<MAX_STATIC_TEXCOORDS / 2>> TextureCoordinates ; FVertexStreamComponent LightMapCoordinateComponent ; FVertexStreamComponent ColorComponent ; FRHIShaderResourceView* PositionComponentSRV = nullptr ; FRHIShaderResourceView* TangentsSRV = nullptr ; FRHIShaderResourceView* TextureCoordinatesSRV = nullptr ; FRHIShaderResourceView* ColorComponentsSRV = nullptr ; uint32 ColorIndexMask = ~ 0 u ; int8 LightMapCoordinateIndex = - 1 ; uint8 NumTexCoords = 0 ; uint8 LODLightmapDataIndex = 0 ; } ; struct FConstMeshBuildVertexView { TStridedView<const FVector3f> Position ; TStridedView<const FVector3f> TangentX ; TStridedView<const FVector3f> TangentY ; TStridedView<const FVector3f> TangentZ ; TArray<TStridedView<const uint16>> BoneIndices ; TArray<TStridedView<const uint16>> BoneWeights ; TArray<TStridedView<const FVector2f>,TInlineAllocator<1>> UVs ; TStridedView<const FColor> Color ; } ; struct FMeshBuildVertexView { TStridedView<FVector3f> Position ; TStridedView<FVector3f> TangentX ; TStridedView<FVector3f> TangentY ; TStridedView<FVector3f> TangentZ ; TArray<TStridedView<uint16>> BoneIndices ; TArray<TStridedView<uint16>> BoneWeights ; TArray<TStridedView<FVector2f>,TInlineAllocator<1>> UVs ; TStridedView<FColor> Color ; } ; struct FMeshBuildVertexData { TArray<FVector3f> Position ; TArray<FVector3f> TangentX ; TArray<FVector3f> TangentY ; TArray<FVector3f> TangentZ ; TArray<TArray<uint16>> BoneIndices ; TArray<TArray<uint16>> BoneWeights ; TArray<TArray<FVector2f>,TInlineAllocator<1>> UVs ; TArray<FColor> Color ; void)",
    "insertText": "Empty(int32 Slack = 0, int32 NumTexCoords = 0, int32 NumBoneInfluences = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Position .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (BoneIndices .)",
    "insertText": "SetNum(NumBoneInfluences)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} UVs .)",
    "insertText": "SetNum(NumTexCoords)"
  },
  {
    "label": "RemoveInvalidVertexColor()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "RemoveInvalidVertexColor(FMeshBuildVertexView& VertexView)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Channel = 2 5 5 ;)",
    "insertText": "for(const FColor& Color : VertexView.Color)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Channel& = Color . R ; Channel& = Color . G ; Channel& = Color . B ; Channel& = Color . A ;)",
    "insertText": "if(Channel != 255)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(Channel == 255)"
  },
  {
    "label": "RemoveInvalidVertexColor()",
    "kind": "Method",
    "detail": "Function (VertexView . Color = { } ; } } } void)",
    "insertText": "RemoveInvalidVertexColor(FConstMeshBuildVertexView& VertexView)"
  },
  {
    "label": "MakeMeshBuildVertexView()",
    "kind": "Method",
    "detail": "Function (VertexView . Color = { } ; } } } FMeshBuildVertexView)",
    "insertText": "MakeMeshBuildVertexView(TArray<FStaticMeshBuildVertex>& InVertices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMeshBuildVertexView View { } ;)",
    "insertText": "if(InVertices.Num() > 0)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . Position =)",
    "insertText": "MakeStridedView(InVertices, &FStaticMeshBuildVertex::Position)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentX =)",
    "insertText": "MakeStridedView(InVertices, &FStaticMeshBuildVertex::TangentX)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentY =)",
    "insertText": "MakeStridedView(InVertices, &FStaticMeshBuildVertex::TangentY)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentZ =)",
    "insertText": "MakeStridedView(InVertices, &FStaticMeshBuildVertex::TangentZ)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (View . UVs .)",
    "insertText": "Add(MakeStridedView(sizeof(FStaticMeshBuildVertex), &InVertices[0].UVs[UVCoord], InVertices.Num()))"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (} View . Color =)",
    "insertText": "MakeStridedView(InVertices, &FStaticMeshBuildVertex::Color)"
  },
  {
    "label": "RemoveInvalidVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInvalidVertexColor(View)"
  },
  {
    "label": "MakeConstMeshBuildVertexView()",
    "kind": "Method",
    "detail": "Function (} return View ; } FConstMeshBuildVertexView)",
    "insertText": "MakeConstMeshBuildVertexView(const TConstArrayView<FStaticMeshBuildVertex>& InVertices)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (View . Position =)",
    "insertText": "MakeConstStridedView(InVertices, &FStaticMeshBuildVertex::Position)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentX =)",
    "insertText": "MakeConstStridedView(InVertices, &FStaticMeshBuildVertex::TangentX)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentY =)",
    "insertText": "MakeConstStridedView(InVertices, &FStaticMeshBuildVertex::TangentY)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentZ =)",
    "insertText": "MakeConstStridedView(InVertices, &FStaticMeshBuildVertex::TangentZ)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (View . UVs .)",
    "insertText": "Add(MakeConstStridedView(sizeof(FStaticMeshBuildVertex), &InVertices[0].UVs[UVCoord], InVertices.Num()))"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (} View . Color =)",
    "insertText": "MakeConstStridedView(InVertices, &FStaticMeshBuildVertex::Color)"
  },
  {
    "label": "MakeMeshBuildVertexView()",
    "kind": "Method",
    "detail": "Function (} return View ; } FMeshBuildVertexView)",
    "insertText": "MakeMeshBuildVertexView(FMeshBuildVertexData& InVertexData)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (FMeshBuildVertexView View { } ; { View . Position =)",
    "insertText": "MakeStridedView(InVertexData.Position)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentX =)",
    "insertText": "MakeStridedView(InVertexData.TangentX)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentY =)",
    "insertText": "MakeStridedView(InVertexData.TangentY)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . TangentZ =)",
    "insertText": "MakeStridedView(InVertexData.TangentZ)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (View . Color =)",
    "insertText": "MakeStridedView(InVertexData.Color)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (View . BoneIndices .)",
    "insertText": "Reserve(InVertexData.BoneIndices.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (View . BoneIndices .)",
    "insertText": "Add(MakeStridedView(sizeof(uint16), &InVertexData.BoneIndices[Influence][0], InVertexData.BoneIndices[Influence].Num()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { View . BoneIndices .)",
    "insertText": "Add({})"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } View . BoneWeights .)",
    "insertText": "Reserve(InVertexData.BoneWeights.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (View . BoneWeights .)",
    "insertText": "Add(MakeStridedView(sizeof(uint16), &InVertexData.BoneWeights[Influence][0], InVertexData.BoneWeights[Influence].Num()))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } View . UVs .)",
    "insertText": "Reserve(InVertexData.UVs.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (View . UVs .)",
    "insertText": "Add(MakeStridedView(sizeof(FVector2f), &InVertexData.UVs[UVCoord][0], InVertexData.UVs[UVCoord].Num()))"
  },
  {
    "label": "MakeConstMeshBuildVertexView()",
    "kind": "Method",
    "detail": "Function (} return View ; } FConstMeshBuildVertexView)",
    "insertText": "MakeConstMeshBuildVertexView(const FMeshBuildVertexData& InVertexData)"
  },
  {
    "label": "MakeStaticMeshVertex()",
    "kind": "Method",
    "detail": "Function (} return View ; } FStaticMeshBuildVertex)",
    "insertText": "MakeStaticMeshVertex(const FMeshBuildVertexView& View, int32 Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FStaticMeshBuildVertex Vertex ; Vertex . Position = View . Position [ Index ] ; Vertex . TangentX = View . TangentX [ Index ] ; Vertex . TangentY = View . TangentZ [ Index ] ; Vertex . TangentZ = View . TangentY [ Index ] ;)",
    "insertText": "for(int32 UVCoord = 0; UVCoord < View.UVs.Num(); ++UVCoord)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vertex . UVs [ UVCoord ] = View . UVs [ UVCoord ] [ Index ] ; })",
    "insertText": "for(int32 UVCoord = View.UVs.Num(); UVCoord < MAX_STATIC_TEXCOORDS; ++UVCoord)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Vertex . UVs [ UVCoord ] = FVector2f::ZeroVector ; })",
    "insertText": "if(View.Color.Num() > 0)"
  },
  {
    "label": "MakeStaticMeshVertex()",
    "kind": "Method",
    "detail": "Function (Vertex . Color = View . Color [ Index ] ; } else { Vertex . Color = FColor::White ; } return Vertex ; } FStaticMeshBuildVertex)",
    "insertText": "MakeStaticMeshVertex(const FMeshBuildVertexData& InVertexData, int32 Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FStaticMeshBuildVertex Output ; Output . Position = InVertexData . Position [ Index ] ; Output . TangentX = InVertexData . TangentX [ Index ] ; Output . TangentY = InVertexData . TangentY [ Index ] ; Output . TangentZ = InVertexData . TangentZ [ Index ] ; Output . Color = InVertexData . Color .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Output . UVs [ UVCoord ] = InVertexData . UVs [ UVCoord ] [ Index ] ; })",
    "insertText": "for(int32 UVCoord = InVertexData.UVs.Num(); UVCoord < MAX_STATIC_TEXCOORDS; ++UVCoord)"
  }
]