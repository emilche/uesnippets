[
  {
    "label": "FFrameStatsCachedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameStatsCachedEvent"
  },
  {
    "label": "FFrameStatsHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameStatsHelper"
  },
  {
    "label": "FFrameStatsCachedEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include<atomic> namespace UE::Insights::TimingProfiler { struct FFrameStatsCachedEvent {)",
    "insertText": "FFrameStatsCachedEvent() : FrameStartTime(0.0f) , FrameEndTime(0.0f)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Duration .)",
    "insertText": "store(0.0f)"
  },
  {
    "label": "FFrameStatsCachedEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameStatsCachedEvent(const FFrameStatsCachedEvent& Other) : FrameStartTime(Other.FrameStartTime) , FrameEndTime(Other.FrameEndTime)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Duration .)",
    "insertText": "store(Other.Duration.load())"
  },
  {
    "label": "ComputeFrameStatsForTimer()",
    "kind": "Method",
    "detail": "Function (} double FrameStartTime ; double FrameEndTime ; std::atomic<double> Duration ; } ; class FFrameStatsHelper { public : void)",
    "insertText": "ComputeFrameStatsForTimer(TArray<FFrameStatsCachedEvent>& FrameStatsEvents, uint32 TimerId, const TSet<uint32>& Timelines)"
  },
  {
    "label": "ComputeFrameStatsForTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrameStatsForTimer(TArray<FFrameStatsCachedEvent>& FrameStatsEvents, uint32 TimerId)"
  },
  {
    "label": "ProcessTimeline()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessTimeline(TArray<FFrameStatsCachedEvent>& FrameStatsEvents, uint32 TimerId, uint32 TimelineIndex)"
  }
]