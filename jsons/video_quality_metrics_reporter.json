[
  {
    "label": "VideoBweStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoBweStats"
  },
  {
    "label": "VideoQualityMetricsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoQualityMetricsReporter"
  },
  {
    "label": "StatsSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsSample"
  },
  {
    "label": "VideoQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_METRICS_REPORTER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_METRICS_REPORTER_H_ # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / peerconnection_quality_test_fixture . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace webrtc_pc_e2e { struct VideoBweStats { SamplesStatsCounter available_send_bandwidth ; SamplesStatsCounter transmission_bitrate ; SamplesStatsCounter retransmission_bitrate ; } ; class VideoQualityMetricsReporter : public PeerConnectionE2EQualityTestFixture::QualityMetricsReporter { public :)",
    "insertText": "VideoQualityMetricsReporter(Clock* const clock, test::MetricsLogger* const metrics_logger)"
  },
  {
    "label": "VideoQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoQualityMetricsReporter()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(absl::string_view test_case_name, const TrackIdStreamInfoMap* reporter_helper)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "StopAndReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndReportResults()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (private : struct StatsSample { DataSize bytes_sent =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (} ; std::string)",
    "insertText": "GetTestCaseName(const std::string& peer_name)"
  },
  {
    "label": "ReportVideoBweResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportVideoBweResults(const std::string& peer_name, const VideoBweStats& video_bwe_stats)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} Clock* const clock_ ; test::MetricsLogger* const metrics_logger_ ; std::string test_case_name_ ; absl::optional<Timestamp> start_time_ ; Mutex video_bwe_stats_lock_ ; std::map<std::string,VideoBweStats> video_bwe_stats_)",
    "insertText": "RTC_GUARDED_BY(video_bwe_stats_lock_)"
  }
]