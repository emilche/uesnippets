[
  {
    "label": "set_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "set_traits"
  },
  {
    "label": "concurrent_multiset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_multiset"
  },
  {
    "label": "concurrent_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_set"
  },
  {
    "label": "InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIt"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_set_H # define __TBB_concurrent_set_H # if ! TBB_PREVIEW_CONCURRENT_ORDERED_CONTAINERS # error Set TBB_PREVIEW_CONCURRENT_ORDERED_CONTAINERS to include concurrent_set . h # endif # include \" tbb / tbb_config . h \" # if __TBB_CONCURRENT_ORDERED_CONTAINERS_PRESENT # include \" internal / _concurrent_skip_list_impl . h \" namespace tbb { namespace interface10 { template<Key,KeyCompare,RandomGenerator,size_t MAX_LEVELS,Allocator,bool AllowMultimapping> class set_traits { public : size_t MAX_LEVEL = MAX_LEVELS ; using random_level_generator_type = RandomGenerator ; using key_type = Key ; using value_type = key_type ; using compare_type = KeyCompare ; using value_compare = compare_type ; using reference = value_type& ; using const_reference = const value_type& ; using allocator_type = Allocator ; using mutex_type = tbb::spin_mutex ; using node_type = tbb::internal::node_handle<key_type,value_type,internal::skip_list_node<value_type,mutex_type>,allocator_type> ; const bool allow_multimapping = AllowMultimapping ; const key_type&)",
    "insertText": "get_key(const_reference val)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_set(const key_compare& comp, const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_set(const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_set(InputIt first, InputIt last, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(first, last, comp, alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_set(InputIt first, InputIt last, const allocator_type& alloc) : base_type(first, last, key_compare(), alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_set(const concurrent_set&)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_set(const concurrent_set& other, const allocator_type& alloc) : base_type(other, alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_set(concurrent_set&&)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_set(concurrent_set&& other, const allocator_type& alloc) : base_type(std::move(other), alloc)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_set(std::initializer_list<value_type> init, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(init)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_set(std::initializer_list<value_type> init, const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_set&)",
    "insertText": "operator(const concurrent_set& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_set&)",
    "insertText": "operator(concurrent_set&& other)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_set<key_type, C2, Allocator>& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_set<key_type, C2, Allocator>&& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(std::move(source))"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_multiset<key_type, C2, Allocator>& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_multiset<key_type, C2, Allocator>&& source)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_CPP17_DEDUCTION_GUIDES_PRESENT namespace internal { using namespace tbb::internal ; template<template<. . .> Set,Key,. . . Args> using c_set_t = Set<Key,)",
    "insertText": "conditional_t(sizeof...(Args) > 0) && !is_allocator_v<pack_element_t<0, Args...> >, pack_element_t<0, Args...>, std::less<Key> >, std::conditional_t< (sizeof...(Args) > 0) && is_allocator_v<pack_element_t<sizeof...(Args)-1, Args...> >, pack_element_t<sizeof...(Args)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (internal::c_set_t<concurrent_set, internal::iterator_value_t<It>, Args...>)",
    "insertText": "concurrent_set(It, It, Args...)"
  },
  {
    "label": "concurrent_set()",
    "kind": "Method",
    "detail": "Function (internal::c_set_t<concurrent_set, Key, Args...>)",
    "insertText": "concurrent_set(std::initializer_list<Key>, Args...)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (# endif template<Key,Comp = std::less<Key>,Allocator = tbb_allocator<Key>> class concurrent_multiset : public internal::concurrent_skip_list<set_traits<Key,Comp,internal::concurrent_geometric_level_generator<6 4>,6 4,Allocator,true>> { using traits_type = set_traits<Key,Comp,internal::concurrent_geometric_level_generator<6 4>,6 4,Allocator,true> ; using base_type = internal::concurrent_skip_list<traits_type> ; # if __TBB_EXTRA_DEBUG public : # endif using base_type::allow_multimapping ; public : using key_type = Key ; using value_type = traits_type::value_type ; using size_type = base_type::size_type ; using difference_type = base_type::difference_type ; using key_compare = Comp ; using value_compare = base_type::value_compare ; using allocator_type = Allocator ; using reference = base_type::reference ; using const_reference = base_type::const_reference ; using pointer = base_type::pointer ; using const_pointer = base_type::pointer ; using iterator = base_type::iterator ; using const_iterator = base_type::const_iterator ; using reverse_iterator = base_type::reverse_iterator ; using const_reverse_iterator = base_type::const_reverse_iterator ; using node_type = base_type::node_type ; using base_type::insert ;)",
    "insertText": "concurrent_multiset()"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multiset(const key_compare& comp, const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multiset(const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_multiset(InputIt first, InputIt last, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(first, last)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_multiset(InputIt first, InputIt last, const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multiset(const concurrent_multiset&)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multiset(const concurrent_multiset& other, const allocator_type& alloc) : base_type(other, alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multiset(concurrent_multiset&&)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multiset(concurrent_multiset&& other, const allocator_type& alloc) : base_type(std::move(other), alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multiset(std::initializer_list<value_type> init, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multiset(std::initializer_list<value_type> init, const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_multiset&)",
    "insertText": "operator(const concurrent_multiset& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_multiset&)",
    "insertText": "operator(concurrent_multiset&& other)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (internal::c_set_t<concurrent_multiset, internal::iterator_value_t<It>, Args...>)",
    "insertText": "concurrent_multiset(It, It, Args...)"
  },
  {
    "label": "concurrent_multiset()",
    "kind": "Method",
    "detail": "Function (internal::c_set_t<concurrent_multiset, Key, Args...>)",
    "insertText": "concurrent_multiset(std::initializer_list<Key>, Args...)"
  }
]