[
  {
    "label": "VectorWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorWrapper"
  },
  {
    "label": "DeleteByFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeleteByFilterOp"
  },
  {
    "label": "deleteFromGroups()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_DELETE_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_DELETE_HAS_BEEN_INCLUDED # include \" PointDataGrid . h \" # include \" PointGroup . h \" # include \" IndexIterator . h \" # include \" IndexFilter . h \" # include<openvdb / tools / Prune . h> # include<openvdb / tree / LeafManager . h> # include<memory> # include<string> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { template<PointDataTreeT> void)",
    "insertText": "deleteFromGroups(PointDataTreeT& pointTree, const std::vector<std::string>& groups, bool invert = false, bool drop = true)"
  },
  {
    "label": "deleteFromGroup()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "deleteFromGroup(PointDataTreeT& pointTree, const std::string& group, bool invert = false, bool drop = true)"
  },
  {
    "label": "VectorWrapper()",
    "kind": "Method",
    "detail": "Function (namespace point_delete_internal { struct VectorWrapper { using T = std::vector<std::pair<Index,Index>> ;)",
    "insertText": "VectorWrapper(const T& _data) : data(_data)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} VectorWrapper&)",
    "insertText": "operator()"
  },
  {
    "label": "sourceIndex()",
    "kind": "Method",
    "detail": "Function (index + + ; return* this ; } Index)",
    "insertText": "sourceIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const LeafRangeT& range)"
  },
  {
    "label": "iterCount()",
    "kind": "Method",
    "detail": "Function (const size_t newSize =)",
    "insertText": "iterCount(leaf->template beginIndexAll<FilterT>(mFilter))"
  },
  {
    "label": "clearAttributes()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "clearAttributes(true, mLock)"
  },
  {
    "label": "getLastValue()",
    "kind": "Method",
    "detail": "Function (continue ; } const size_t currentSize = leaf ->)",
    "insertText": "getLastValue()"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const AttributeSet& existingAttributeSet = leaf ->)",
    "insertText": "attributeSet()"
  },
  {
    "label": "AttributeSet()",
    "kind": "Method",
    "detail": "Function (AttributeSet* newAttributeSet = new)",
    "insertText": "AttributeSet(existingAttributeSet, static_cast<Index>(newSize), mLock)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t attributeSetSize = existingAttributeSet .)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<AttributeArray*> newAttributeArrays ; std::vector<const AttributeArray*> existingAttributeArrays ;)",
    "insertText": "for(size_t i = 0; i < attributeSetSize; i++)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (AttributeArray* newArray = newAttributeSet ->)",
    "insertText": "get(i)"
  },
  {
    "label": "getConst()",
    "kind": "Method",
    "detail": "Function (const AttributeArray* existingArray = existingAttributeSet .)",
    "insertText": "getConst(i)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(openvdb::NotImplementedError, \"Transfer of attribute values for dynamic arrays not currently supported.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(newArray->stride() != existingArray->stride())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(openvdb::LookupError, \"Cannot transfer attribute values with mis-matching strides.\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} newAttributeArrays .)",
    "insertText": "push_back(newArray)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (existingAttributeArrays .)",
    "insertText": "push_back(existingArray)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} Index attributeIndex = 0 ; std::vector<ValueType> endOffsets ; endOffsets .)",
    "insertText": "reserve(LeafNodeT::NUM_VALUES)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<Index,Index>> indexMapping ; indexMapping .)",
    "insertText": "reserve(newSize)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (indexMapping .)",
    "insertText": "emplace_back(*iter, attributeIndex++)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} endOffsets .)",
    "insertText": "push_back(static_cast<ValueType>(attributeIndex))"
  },
  {
    "label": "indexMappingWrapper()",
    "kind": "Method",
    "detail": "Function (VectorWrapper)",
    "insertText": "indexMappingWrapper(indexMapping)"
  },
  {
    "label": "copyValues()",
    "kind": "Method",
    "detail": "Function (newAttributeArrays [ i ] ->)",
    "insertText": "copyValues(*(existingAttributeArrays[i]), indexMappingWrapper)"
  },
  {
    "label": "replaceAttributeSet()",
    "kind": "Method",
    "detail": "Function (} leaf ->)",
    "insertText": "replaceAttributeSet(newAttributeSet)"
  },
  {
    "label": "setOffsets()",
    "kind": "Method",
    "detail": "Function (leaf ->)",
    "insertText": "setOffsets(endOffsets)"
  },
  {
    "label": "deleteFromGroups()",
    "kind": "Method",
    "detail": "Function (} } private : const FilterT& mFilter ; const AttributeArray::ScopedRegistryLock* mLock ; } ; } template<PointDataTreeT> void)",
    "insertText": "deleteFromGroups(PointDataTreeT& pointTree, const std::vector<std::string>& groups, bool invert, bool drop)"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (const PointDataTreeT::LeafCIter leafIter = pointTree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "descriptor()",
    "kind": "Method",
    "detail": "Function (const AttributeSet::Descriptor& descriptor = attributeSet .)",
    "insertText": "descriptor()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string> availableGroups ;)",
    "insertText": "for(const auto& groupName : groups)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (availableGroups .)",
    "insertText": "push_back(groupName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(availableGroups.empty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string> empty ; std::unique_ptr<MultiGroupFilter> filter ;)",
    "insertText": "if(invert)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (filter .)",
    "insertText": "reset(new MultiGroupFilter(groups, empty, leafIter->attributeSet()))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} else { filter .)",
    "insertText": "reset(new MultiGroupFilter(empty, groups, leafIter->attributeSet()))"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (} { AttributeArray::ScopedRegistryLock lock ; tree::LeafManager<PointDataTreeT>)",
    "insertText": "leafManager(pointTree)"
  },
  {
    "label": "deleteOp()",
    "kind": "Method",
    "detail": "Function (point_delete_internal::DeleteByFilterOp<PointDataTreeT,MultiGroupFilter>)",
    "insertText": "deleteOp(*filter, &lock)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(leafManager.leafRange(), deleteOp)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pruneInactive(pointTree)"
  },
  {
    "label": "dropGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dropGroups(pointTree, availableGroups)"
  },
  {
    "label": "deleteFromGroup()",
    "kind": "Method",
    "detail": "Function (} } template<PointDataTreeT> void)",
    "insertText": "deleteFromGroup(PointDataTreeT& pointTree, const std::string& group, bool invert, bool drop)"
  },
  {
    "label": "groups()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "groups(1, group)"
  },
  {
    "label": "deleteFromGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteFromGroups(pointTree, groups, invert, drop)"
  }
]