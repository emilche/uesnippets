[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "RtcpTransceiverImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpTransceiverImpl"
  },
  {
    "label": "PacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSender"
  },
  {
    "label": "RemoteSenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoteSenderState"
  },
  {
    "label": "LocalSenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalSenderState"
  },
  {
    "label": "RrtrTimes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RrtrTimes"
  },
  {
    "label": "ReservedBytes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReservedBytes"
  },
  {
    "label": "RtcpTransceiverImpl()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RtcpTransceiverImpl(const RtcpTransceiverConfig& config)"
  },
  {
    "label": "AddMediaReceiverRtcpObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMediaReceiverRtcpObserver(uint32_t remote_ssrc,\n                                    MediaReceiverRtcpObserver* observer)"
  },
  {
    "label": "RemoveMediaReceiverRtcpObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMediaReceiverRtcpObserver(uint32_t remote_ssrc,\n                                       MediaReceiverRtcpObserver* observer)"
  },
  {
    "label": "AddMediaSender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMediaSender(uint32_t local_ssrc, RtpStreamRtcpHandler* handler)"
  },
  {
    "label": "RemoveMediaSender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveMediaSender(uint32_t local_ssrc)"
  },
  {
    "label": "SetReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadyToSend(bool ready)"
  },
  {
    "label": "ReceivePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivePacket(rtc::ArrayView<const uint8_t> packet, Timestamp now)"
  },
  {
    "label": "SendCompoundPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCompoundPacket()"
  },
  {
    "label": "SetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "UnsetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetRemb()"
  },
  {
    "label": "SendRawPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRawPacket(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "SendNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNack(uint32_t ssrc, std::vector<uint16_t> sequence_numbers)"
  },
  {
    "label": "SendPictureLossIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPictureLossIndication(uint32_t ssrc)"
  },
  {
    "label": "SendFullIntraRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendFullIntraRequest(rtc::ArrayView<const uint32_t> ssrcs,\n                            bool new_request)"
  },
  {
    "label": "SendCombinedRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCombinedRtcpPacket(\n      std::vector<std::unique_ptr<rtcp::RtcpPacket>> rtcp_packets)"
  },
  {
    "label": "HandleReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedPacket(const rtcp::CommonHeader& rtcp_packet_header,\n                            Timestamp now,\n                            std::vector<rtcp::ReportBlock>& report_blocks)"
  },
  {
    "label": "HandleBye()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBye(const rtcp::CommonHeader& rtcp_packet_header)"
  },
  {
    "label": "HandleSenderReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSenderReport(const rtcp::CommonHeader& rtcp_packet_header,\n                          Timestamp now,\n                          std::vector<rtcp::ReportBlock>& report_blocks)"
  },
  {
    "label": "HandleReceiverReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiverReport(const rtcp::CommonHeader& rtcp_packet_header,\n                            std::vector<rtcp::ReportBlock>& report_blocks)"
  },
  {
    "label": "CallbackOnReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackOnReportBlocks(\n      uint32_t sender_ssrc,\n      rtc::ArrayView<const rtcp::ReportBlock> report_blocks)"
  },
  {
    "label": "HandlePayloadSpecificFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePayloadSpecificFeedback(\n      const rtcp::CommonHeader& rtcp_packet_header,\n      Timestamp now)"
  },
  {
    "label": "HandleRtpFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRtpFeedback(const rtcp::CommonHeader& rtcp_packet_header,\n                         Timestamp now)"
  },
  {
    "label": "HandleFir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFir(const rtcp::CommonHeader& rtcp_packet_header)"
  },
  {
    "label": "HandlePli()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePli(const rtcp::CommonHeader& rtcp_packet_header)"
  },
  {
    "label": "HandleRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemb(const rtcp::CommonHeader& rtcp_packet_header, Timestamp now)"
  },
  {
    "label": "HandleNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNack(const rtcp::CommonHeader& rtcp_packet_header)"
  },
  {
    "label": "HandleTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransportFeedback(const rtcp::CommonHeader& rtcp_packet_header,\n                               Timestamp now)"
  },
  {
    "label": "HandleExtendedReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExtendedReports(const rtcp::CommonHeader& rtcp_packet_header,\n                             Timestamp now)"
  },
  {
    "label": "HandleDlrr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDlrr(const rtcp::Dlrr& dlrr, Timestamp now)"
  },
  {
    "label": "HandleTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTargetBitrate(const rtcp::TargetBitrate& target_bitrate,\n                           uint32_t remote_ssrc)"
  },
  {
    "label": "ProcessReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReportBlocks(\n      Timestamp now,\n      rtc::ArrayView<const rtcp::ReportBlock> report_blocks)"
  },
  {
    "label": "ReschedulePeriodicCompoundPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReschedulePeriodicCompoundPackets()"
  },
  {
    "label": "SchedulePeriodicCompoundPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchedulePeriodicCompoundPackets(TimeDelta delay)"
  },
  {
    "label": "FillReports()",
    "kind": "Method",
    "detail": "Function (std::vector<uint32_t>)",
    "insertText": "FillReports(Timestamp now,\n                                    ReservedBytes reserved_bytes,\n                                    PacketSender& rtcp_sender)"
  },
  {
    "label": "CreateCompoundPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCompoundPacket(Timestamp now,\n                            size_t reserved_bytes,\n                            PacketSender& rtcp_sender)"
  },
  {
    "label": "SendPeriodicCompoundPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPeriodicCompoundPacket()"
  },
  {
    "label": "SendImmediateFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendImmediateFeedback(const rtcp::RtcpPacket& rtcp_packet)"
  },
  {
    "label": "CreateReportBlocks()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::ReportBlock>)",
    "insertText": "CreateReportBlocks(Timestamp now,\n                                                    size_t num_max_blocks)"
  }
]