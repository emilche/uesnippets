[
  {
    "label": "FMassFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassFragment"
  },
  {
    "label": "FMassTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassTag"
  },
  {
    "label": "FMassChunkFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassChunkFragment"
  },
  {
    "label": "FMassSharedFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassSharedFragment"
  },
  {
    "label": "FMassConstSharedFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassConstSharedFragment"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeCompositionDescriptor"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMassGenericPayloadView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassGenericPayloadView"
  },
  {
    "label": "FMassGenericPayloadViewSlice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassGenericPayloadViewSlice"
  },
  {
    "label": "TMultiTypeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMultiTypeList"
  },
  {
    "label": "TMultiArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMultiArray"
  },
  {
    "label": "FMassArchetypeCreationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeCreationParams"
  },
  {
    "label": "FMassArchetypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeData"
  },
  {
    "label": "testableCheckfReturn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StructUtils / StructTypeBitSet . h \" # include \" MassProcessingTypes . h \" # include \" StructUtils / StructArrayView . h \" # include \" Subsystems / Subsystem . h \" # include \" MassExternalSubsystemTraits . h \" # include \" StructUtils / SharedStruct . h \" # include \" MassEntityTypes . generated . h \" # ifdef WITH_AITESTSUITE # include \" TestableEnsures . h \" # else # define testableEnsureMsgf ensureMsgf # define testableCheckf checkf # define)",
    "insertText": "testableCheckfReturn(InExpression, ReturnValue, InFormat, ... ) checkf(InExpression, InFormat, ##__VA_ARGS__) #endif MASSENTITY_API DECLARE_LOG_CATEGORY_EXTERN(LogMass, Warning, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Mass\"), STATGROUP_Mass, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Mass Total Frame Time\"), STAT_Mass_Total, STATGROUP_Mass, MASSENTITY_API)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassFragment()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassTag()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassChunkFragment()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassSharedFragment()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassConstSharedFragment()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT() struct alignas(8)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMassEntityHandle()"
  },
  {
    "label": "FMassEntityHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassEntityHandle(const int32 InIndex, const int32 InSerialNumber) : Index(InIndex), SerialNumber(InSerialNumber)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMassEntityHandle Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (Index = SerialNumber = 0 ; } uint64)",
    "insertText": "AsNumber()"
  },
  {
    "label": "FromNumber()",
    "kind": "Method",
    "detail": "Function (} FMassEntityHandle)",
    "insertText": "FromNumber(uint64 Value)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (FMassEntityHandle Result ;* reinterpret_cast<)",
    "insertText": "uint64_t(&Result)"
  },
  {
    "label": "DebugGetDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DebugGetDescription()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(sizeof(FMassEntityHandle) == sizeof(uint64), \"Expected FMassEntityHandle to be convertable to a 64-bit integer value, so size needs to be 8 bytes.\")"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(MASSENTITY_API, FMassFragmentBitSet, FMassFragment)"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(MASSENTITY_API, FMassTagBitSet, FMassTag)"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(MASSENTITY_API, FMassChunkFragmentBitSet, FMassChunkFragment)"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(MASSENTITY_API, FMassSharedFragmentBitSet, FMassSharedFragment)"
  },
  {
    "label": "DECLARE_STRUCTTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STRUCTTYPEBITSET_EXPORTED(MASSENTITY_API, FMassConstSharedFragmentBitSet, FMassConstSharedFragment)"
  },
  {
    "label": "DECLARE_CLASSTYPEBITSET_EXPORTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CLASSTYPEBITSET_EXPORTED(MASSENTITY_API, FMassExternalSubsystemBitSet, USubsystem)"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (struct FMassArchetypeCompositionDescriptor {)",
    "insertText": "FMassArchetypeCompositionDescriptor()"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeCompositionDescriptor(const FMassFragmentBitSet& InFragments, const FMassTagBitSet& InTags, const FMassChunkFragmentBitSet& InChunkFragments, const FMassSharedFragmentBitSet& InSharedFragments, const FMassConstSharedFragmentBitSet& InConstSharedFragments) : Fragments(InFragments) , Tags(InTags) , ChunkFragments(InChunkFragments) , SharedFragments(InSharedFragments) , ConstSharedFragments(InConstSharedFragments)"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassArchetypeCompositionDescriptor(TConstArrayView<const UScriptStruct*> InFragments, const FMassTagBitSet& InTags, const FMassChunkFragmentBitSet& InChunkFragments, const FMassSharedFragmentBitSet& InSharedFragments, const FMassConstSharedFragmentBitSet& InConstSharedFragments) : FMassArchetypeCompositionDescriptor(FMassFragmentBitSet(InFragments), InTags, InChunkFragments, InSharedFragments, InConstSharedFragments)"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassArchetypeCompositionDescriptor(TConstArrayView<FInstancedStruct> InFragmentInstances, const FMassTagBitSet& InTags, const FMassChunkFragmentBitSet& InChunkFragments, const FMassSharedFragmentBitSet& InSharedFragments, const FMassConstSharedFragmentBitSet& InConstSharedFragments) : FMassArchetypeCompositionDescriptor(FMassFragmentBitSet(InFragmentInstances), InTags, InChunkFragments, InSharedFragments, InConstSharedFragments)"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassArchetypeCompositionDescriptor(FMassFragmentBitSet&& InFragments, FMassTagBitSet&& InTags, FMassChunkFragmentBitSet&& InChunkFragments, FMassSharedFragmentBitSet&& InSharedFragments, FMassConstSharedFragmentBitSet&& InConstSharedFragments) : Fragments(MoveTemp(InFragments)) , Tags(MoveTemp(InTags)) , ChunkFragments(MoveTemp(InChunkFragments)) , SharedFragments(MoveTemp(InSharedFragments)) , ConstSharedFragments(MoveTemp(InConstSharedFragments))"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassArchetypeCompositionDescriptor(FMassFragmentBitSet&& InFragments) : Fragments(MoveTemp(InFragments))"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassArchetypeCompositionDescriptor(FMassTagBitSet&& InTags) : Tags(MoveTemp(InTags))"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(const FMassArchetypeCompositionDescriptor& OtherDescriptor)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "HasAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAll(const FMassArchetypeCompositionDescriptor& OtherDescriptor)"
  },
  {
    "label": "CalculateHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CalculateHash(const FMassFragmentBitSet& InFragments, const FMassTagBitSet& InTags , const FMassChunkFragmentBitSet& InChunkFragments, const FMassSharedFragmentBitSet& InSharedFragmentBitSet , const FMassConstSharedFragmentBitSet& InConstSharedFragmentBitSet)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 FragmentsHash =)",
    "insertText": "GetTypeHash(InFragments)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 TagsHash =)",
    "insertText": "GetTypeHash(InTags)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 ChunkFragmentsHash =)",
    "insertText": "GetTypeHash(InChunkFragments)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 SharedFragmentsHash =)",
    "insertText": "GetTypeHash(InSharedFragmentBitSet)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 ConstSharedFragmentsHash =)",
    "insertText": "GetTypeHash(InConstSharedFragmentBitSet)"
  },
  {
    "label": "CalculateHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CalculateHash()"
  },
  {
    "label": "CountStoredTypes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountStoredTypes()"
  },
  {
    "label": "DebugOutputDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugOutputDescription(FOutputDevice& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_MASSENTITY_DEBUG)",
    "insertText": "if(Fragments.IsEmpty() && Tags.IsEmpty() && ChunkFragments.IsEmpty())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"Empty\"))"
  },
  {
    "label": "SetAutoEmitLineTerminator()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetAutoEmitLineTerminator(false)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"Fragments:\\n\"))"
  },
  {
    "label": "DebugGetStringDesc()",
    "kind": "Method",
    "detail": "Function (Fragments .)",
    "insertText": "DebugGetStringDesc(Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Tags.IsEmpty())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"Tags:\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ChunkFragments.IsEmpty())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"ChunkFragments:\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!SharedFragments.IsEmpty())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"SharedFragments:\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ConstSharedFragments.IsEmpty())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"ConstSharedFragments:\\n\"))"
  },
  {
    "label": "SetAutoEmitLineTerminator()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "SetAutoEmitLineTerminator(bAutoLineEnd)"
  },
  {
    "label": "FMassArchetypeSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMassArchetypeSharedFragmentValues {)",
    "insertText": "FMassArchetypeSharedFragmentValues()"
  },
  {
    "label": "FMassArchetypeSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeSharedFragmentValues(const FMassArchetypeSharedFragmentValues& OtherFragmentValues)"
  },
  {
    "label": "FMassArchetypeSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeSharedFragmentValues(FMassArchetypeSharedFragmentValues&& OtherFragmentValues)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeSharedFragmentValues&)",
    "insertText": "operator(const FMassArchetypeSharedFragmentValues& OtherFragmentValues)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeSharedFragmentValues&)",
    "insertText": "operator(FMassArchetypeSharedFragmentValues&& OtherFragmentValues)"
  },
  {
    "label": "HasExactSharedFragmentTypesMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasExactSharedFragmentTypesMatch(const FMassSharedFragmentBitSet& InSharedFragmentBitSet)"
  },
  {
    "label": "HasAllRequiredSharedFragmentTypes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllRequiredSharedFragmentTypes(const FMassSharedFragmentBitSet& InSharedFragmentBitSet)"
  },
  {
    "label": "HasExactConstSharedFragmentTypesMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasExactConstSharedFragmentTypesMatch(const FMassConstSharedFragmentBitSet& InConstSharedFragmentBitSet)"
  },
  {
    "label": "HasAllRequiredConstSharedFragmentTypes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllRequiredConstSharedFragmentTypes(const FMassConstSharedFragmentBitSet& InConstSharedFragmentBitSet)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(const FMassArchetypeSharedFragmentValues& OtherSharedFragmentValues)"
  },
  {
    "label": "HasSameValues()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSameValues(const FMassArchetypeSharedFragmentValues& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FragmentType->IsChildOf(FMassConstSharedFragment::StaticStruct()))"
  },
  {
    "label": "ContainsType()",
    "kind": "Method",
    "detail": "Function (} } return false ; } template<T> bool)",
    "insertText": "ContainsType()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsDerivedFrom<T, FMassSharedFragment>::IsDerived)"
  },
  {
    "label": "AddConstSharedFragment()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } } FConstSharedStruct)",
    "insertText": "AddConstSharedFragment(const FConstSharedStruct& Fragment)"
  },
  {
    "label": "AddSharedFragment()",
    "kind": "Method",
    "detail": "Function (FSharedStruct)",
    "insertText": "AddSharedFragment(const FSharedStruct& Fragment)"
  },
  {
    "label": "ReplaceSharedFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSharedFragments(TConstArrayView<FSharedStruct> Fragments)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Append(const FMassArchetypeSharedFragmentValues& Other)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FMassSharedFragmentBitSet& SharedFragmentToRemoveBitSet)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const FMassConstSharedFragmentBitSet& ConstSharedFragmentToRemoveBitSet)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (const int32 FragmentIndex = ConstSharedFragments .)",
    "insertText": "IndexOfByPredicate(FStructTypeEqualOperator(StructType))"
  },
  {
    "label": "GetSharedFragmentStruct()",
    "kind": "Method",
    "detail": "Function (} FSharedStruct)",
    "insertText": "GetSharedFragmentStruct(const UScriptStruct* StructType)"
  },
  {
    "label": "GetSharedFragmentBitSet()",
    "kind": "Method",
    "detail": "Function (} const FMassSharedFragmentBitSet&)",
    "insertText": "GetSharedFragmentBitSet()"
  },
  {
    "label": "bSorted()",
    "kind": "Method",
    "detail": "Function (HashCache = UINT32_MAX ;)",
    "insertText": "bSorted(SharedFragments.Num() + ConstSharedFragments.Num() <= 1)"
  },
  {
    "label": "CacheHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheHash()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetTypeHash(const FMassArchetypeSharedFragmentValues& SharedFragmentValues)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (ConstSharedFragments .)",
    "insertText": "Sort(FStructTypeSortOperator())"
  },
  {
    "label": "IsSorted()",
    "kind": "Method",
    "detail": "Function (bSorted = true ; } } bool)",
    "insertText": "IsSorted()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FMassGenericPayloadView()",
    "kind": "Method",
    "detail": "Function (Add,Remove,MAX } ; enum class EMassExecutionContextType : uint8 { Local,Processor,MAX } ; struct FMassGenericPayloadView {)",
    "insertText": "FMassGenericPayloadView()"
  },
  {
    "label": "FMassGenericPayloadView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassGenericPayloadView(TArray<FStructArrayView>&SourceData) : Content(SourceData)"
  },
  {
    "label": "FMassGenericPayloadView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassGenericPayloadView(TArrayView<FStructArrayView> SourceData) : Content(SourceData)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (Content = TArrayView<)",
    "insertText": "FStructArrayView()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(const int32 A, const int32 B)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "Swap(A, B)"
  },
  {
    "label": "SwapElementsToEnd()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SwapElementsToEnd(int32 StartIndex, int32 NumToMove)"
  },
  {
    "label": "FMassGenericPayloadViewSlice()",
    "kind": "Method",
    "detail": "Function (TArrayView<FStructArrayView> Content ; } ; struct FMassGenericPayloadViewSlice {)",
    "insertText": "FMassGenericPayloadViewSlice()"
  },
  {
    "label": "FMassGenericPayloadViewSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassGenericPayloadViewSlice(const FMassGenericPayloadView& InSource, const int32 InStartIndex, const int32 InCount) : Source(InSource), StartIndex(InStartIndex), Count(InCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStructArrayView)",
    "insertText": "operator(const int32 Index)"
  },
  {
    "label": "PopulateBitSet()",
    "kind": "Method",
    "detail": "Function (} private : FMassGenericPayloadView Source ; const int32 StartIndex = 0 ; const int32 Count = 0 ; } ; namespace UE::Mass { template<T,. . . TOthers> struct TMultiTypeList : TMultiTypeList<TOthers . . .> { using Super = TMultiTypeList<TOthers . . .> ; using FType = std::remove_const_t<TRemoveReference<T>::Type> ; enum { Ordinal = Super::Ordinal + 1 } ; template<TBitSetType> void)",
    "insertText": "PopulateBitSet(TBitSetType& OutBitSet)"
  },
  {
    "label": "PopulateBitSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateBitSet(OutBitSet)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (OutBitSet + = TBitSetType::template GetTypeBitSet<)",
    "insertText": "FType()"
  },
  {
    "label": "GetNumArrays()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumArrays()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FragmentInstances .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Rest...)"
  },
  {
    "label": "GetAsGenericMultiArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAsGenericMultiArray(TArray<FStructArrayView>& A)"
  },
  {
    "label": "GetAsGenericMultiArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAsGenericMultiArray(A)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "Add(FStructArrayView(FragmentInstances))"
  },
  {
    "label": "GetheredAffectedFragments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetheredAffectedFragments(FMassFragmentBitSet& OutBitSet)"
  },
  {
    "label": "GetheredAffectedFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetheredAffectedFragments(OutBitSet)"
  },
  {
    "label": "FMassArchetypeCreationParams()",
    "kind": "Method",
    "detail": "Function (} TArray<FType> FragmentInstances ; } ; } struct FMassArchetypeCreationParams {)",
    "insertText": "FMassArchetypeCreationParams()"
  },
  {
    "label": "FMassArchetypeCreationParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassArchetypeCreationParams(const struct FMassArchetypeData& Archetype)"
  }
]