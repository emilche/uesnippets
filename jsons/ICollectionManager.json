[
  {
    "label": "ITextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextFilterExpressionContext"
  },
  {
    "label": "ICollectionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICollectionManager"
  },
  {
    "label": "paths",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "paths"
  },
  {
    "label": "ICollectionManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" CollectionManagerTypes . h \" class ITextFilterExpressionContext ; class ICollectionManager { public : ~)",
    "insertText": "ICollectionManager()"
  },
  {
    "label": "HasCollections()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCollections()"
  },
  {
    "label": "GetCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollections(TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollections(FName CollectionName, TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionNames(ECollectionShareType::Type ShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetRootCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootCollections(TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetRootCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootCollectionNames(ECollectionShareType::Type ShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetChildCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildCollections(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetChildCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildCollectionNames(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionShareType::Type ChildShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetParentCollection()",
    "kind": "Method",
    "detail": "Function (TOptional<FCollectionNameType>)",
    "insertText": "GetParentCollection(FName CollectionName, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "CollectionExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectionExists(FName CollectionName, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "GetAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FSoftObjectPath>& OutAssetPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetClassesInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClassesInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FTopLevelAssetPath>& ClassPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetObjectsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetObjectsInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FSoftObjectPath>& ObjectPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(const FSoftObjectPath& ObjectPath, ECollectionShareType::Type ShareType, TArray<FName>& OutCollectionNames, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(const FSoftObjectPath& ObjectPath, TArray<FCollectionNameType>& OutCollections, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObjects(const TArray<FSoftObjectPath>& ObjectPaths, TMap<FCollectionNameType, TArray<FSoftObjectPath>>& OutCollectionsAndMatchedObjects, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsStringForObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCollectionsStringForObject(const FSoftObjectPath& ObjectPath, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self, bool bFullPaths = true)"
  },
  {
    "label": "CreateUniqueCollectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUniqueCollectionName(const FName& BaseName, ECollectionShareType::Type ShareType, FName& OutCollectionName)"
  },
  {
    "label": "IsValidCollectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCollectionName(const FString& CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "CreateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollection(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionStorageMode::Type StorageMode, FText* OutError = nullptr)"
  },
  {
    "label": "RenameCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameCollection(FName CurrentCollectionName, ECollectionShareType::Type CurrentShareType, FName NewCollectionName, ECollectionShareType::Type NewShareType, FText* OutError = nullptr)"
  },
  {
    "label": "ReparentCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReparentCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ParentCollectionName, ECollectionShareType::Type ParentShareType, FText* OutError = nullptr)"
  },
  {
    "label": "DestroyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, TConstArrayView<FSoftObjectPath> ObjectPaths, int32* OutNumAdded = nullptr, FText* OutError = nullptr)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, TConstArrayView<FSoftObjectPath> ObjectPaths, int32* OutNumRemoved = nullptr, FText* OutError = nullptr)"
  },
  {
    "label": "SetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDynamicQueryText(FName CollectionName, ECollectionShareType::Type ShareType, const FString& InQueryText, FText* OutError = nullptr)"
  },
  {
    "label": "GetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDynamicQueryText(FName CollectionName, ECollectionShareType::Type ShareType, FString& OutQueryText, FText* OutError = nullptr)"
  },
  {
    "label": "TestDynamicQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestDynamicQuery(FName CollectionName, ECollectionShareType::Type ShareType, const ITextFilterExpressionContext& InContext, bool& OutResult, FText* OutError = nullptr)"
  },
  {
    "label": "EmptyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmptyCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "SaveCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "UpdateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "GetCollectionStatusInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionStatusInfo(FName CollectionName, ECollectionShareType::Type ShareType, FCollectionStatusInfo& OutStatusInfo, FText* OutError = nullptr)"
  },
  {
    "label": "HasCollectionColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCollectionColors(TArray<FLinearColor>* OutColors = nullptr)"
  },
  {
    "label": "GetCollectionColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionColor(FName CollectionName, ECollectionShareType::Type ShareType, TOptional<FLinearColor>& OutColor, FText* OutError = nullptr)"
  },
  {
    "label": "SetCollectionColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCollectionColor(FName CollectionName, ECollectionShareType::Type ShareType, const TOptional<FLinearColor>& NewColor, FText* OutError = nullptr)"
  },
  {
    "label": "GetCollectionStorageMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionStorageMode(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionStorageMode::Type& OutStorageMode, FText* OutError = nullptr)"
  },
  {
    "label": "IsObjectInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInCollection(const FSoftObjectPath& ObjectPath, FName CollectionName, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self, FText* OutError = nullptr)"
  },
  {
    "label": "IsValidParentCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidParentCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ParentCollectionName, ECollectionShareType::Type ParentShareType, FText* OutError = nullptr)"
  },
  {
    "label": "HandleFixupRedirectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFixupRedirectors(ICollectionRedirectorFollower& InRedirectorFollower)"
  },
  {
    "label": "HandleRedirectorDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRedirectorDeleted(const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "HandleRedirectorsDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRedirectorsDeleted(TConstArrayView<FSoftObjectPath> ObjectPaths, FText* OutError = nullptr)"
  },
  {
    "label": "HandleObjectRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectRenamed(const FSoftObjectPath& OldObjectPath, const FSoftObjectPath& NewObjectPath)"
  },
  {
    "label": "HandleObjectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectDeleted(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "HandleObjectsDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsDeleted(TConstArrayView<FSoftObjectPath> ObjectPaths)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ICollectionManager, FCollectionCreatedEvent, const FCollectionNameType&)"
  },
  {
    "label": "OnCollectionCreated()",
    "kind": "Method",
    "detail": "Function (FCollectionCreatedEvent&)",
    "insertText": "OnCollectionCreated()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ICollectionManager, FCollectionDestroyedEvent, const FCollectionNameType&)"
  },
  {
    "label": "OnCollectionDestroyed()",
    "kind": "Method",
    "detail": "Function (FCollectionDestroyedEvent&)",
    "insertText": "OnCollectionDestroyed()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnAssetsAddedToCollection, const FCollectionNameType&, TConstArrayView<FSoftObjectPath>)"
  },
  {
    "label": "OnAssetsAddedToCollection()",
    "kind": "Method",
    "detail": "Function (FOnAssetsAddedToCollection&)",
    "insertText": "OnAssetsAddedToCollection()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnAssetsRemovedFromCollection, const FCollectionNameType&, TConstArrayView<FSoftObjectPath>)"
  },
  {
    "label": "OnAssetsRemovedFromCollection()",
    "kind": "Method",
    "detail": "Function (FOnAssetsRemovedFromCollection&)",
    "insertText": "OnAssetsRemovedFromCollection()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(ICollectionManager, FCollectionRenamedEvent, const FCollectionNameType&, const FCollectionNameType&)"
  },
  {
    "label": "OnCollectionRenamed()",
    "kind": "Method",
    "detail": "Function (FCollectionRenamedEvent&)",
    "insertText": "OnCollectionRenamed()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(ICollectionManager, FCollectionReparentedEvent, const FCollectionNameType&, const TOptional<FCollectionNameType>&, const TOptional<FCollectionNameType>&)"
  },
  {
    "label": "OnCollectionReparented()",
    "kind": "Method",
    "detail": "Function (FCollectionReparentedEvent&)",
    "insertText": "OnCollectionReparented()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ICollectionManager, FCollectionUpdatedEvent, const FCollectionNameType&)"
  },
  {
    "label": "OnCollectionUpdated()",
    "kind": "Method",
    "detail": "Function (FCollectionUpdatedEvent&)",
    "insertText": "OnCollectionUpdated()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(ICollectionManager, FAddToCollectionCheckinDescriptionEvent, const FName& , TArray<FText>&)"
  },
  {
    "label": "OnAddToCollectionCheckinDescriptionEvent()",
    "kind": "Method",
    "detail": "Function (FAddToCollectionCheckinDescriptionEvent&)",
    "insertText": "OnAddToCollectionCheckinDescriptionEvent()"
  },
  {
    "label": "SuppressObjectDeletionHandling()",
    "kind": "Method",
    "detail": "Function (UE_INTERNAL void)",
    "insertText": "SuppressObjectDeletionHandling()"
  },
  {
    "label": "ResumeObjectDeletionHandling()",
    "kind": "Method",
    "detail": "Function (UE_INTERNAL void)",
    "insertText": "ResumeObjectDeletionHandling()"
  }
]