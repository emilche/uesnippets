[
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "UMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMultiLineEditableTextBox"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / SWidget . h \" # include \" Components / TextWidgetTypes . h \" # include \" Widgets / Text / ISlateEditableTextWidget . h \" # include \" MultiLineEditableTextBox . generated . h \" class SMultiLineEditableTextBox ; class USlateWidgetStyleAsset ;)",
    "insertText": "UCLASS(meta=(DisplayName=\"Text Box (Multi-Line)\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMultiLineEditableTextBoxChangedEvent, const FText&, Text)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnMultiLineEditableTextBoxCommittedEvent, const FText&, Text, ETextCommit::Type, CommitMethod)"
  },
  {
    "label": "GetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsReadOnly()"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "OnShapedTextOptionsChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnShapedTextOptionsChanged(FShapedTextOptions InShapedTextOptions)"
  },
  {
    "label": "OnJustificationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnJustificationChanged(ETextJustify::Type InJustification)"
  },
  {
    "label": "OnWrappingPolicyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWrappingPolicyChanged(ETextWrappingPolicy InWrappingPolicy)"
  },
  {
    "label": "OnAutoWrapTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoWrapTextChanged(bool InAutoWrapText)"
  },
  {
    "label": "OnWrapTextAtChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWrapTextAtChanged(float InWrapTextAt)"
  },
  {
    "label": "OnLineHeightPercentageChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLineHeightPercentageChanged(float InLineHeightPercentage)"
  },
  {
    "label": "OnApplyLineHeightToBottomLineChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyLineHeightToBottomLineChanged(bool InApplyLineHeightToBottomLine)"
  },
  {
    "label": "OnMarginChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMarginChanged(const FMargin& InMargin)"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "RebuildWidget()"
  },
  {
    "label": "HandleOnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextChanged(const FText& Text)"
  },
  {
    "label": "HandleOnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextCommitted(const FText& Text, ETextCommit::Type CommitMethod)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SMultiLineEditableTextBox> MyEditableTextBlock ;)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, HintText)"
  },
  {
    "label": "SetTextInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SetTextInternal(const FText& InText)"
  }
]