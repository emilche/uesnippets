[
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SampleMetadata()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_SAMPLE_METADATA_H_ # define BASE_PROFILER_SAMPLE_METADATA_H_ # include \" base / base_export . h \" # include \" base / profiler / metadata_recorder . h \" # include \" base / strings / string_piece . h \" # include \" base / threading / platform_thread . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class TimeTicks ; enum class SampleMetadataScope { kProcess,kThread } ; class BASE_EXPORT SampleMetadata { public :)",
    "insertText": "SampleMetadata(StringPiece name, SampleMetadataScope scope)"
  },
  {
    "label": "SampleMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleMetadata(const SampleMetadata&)"
  },
  {
    "label": "SampleMetadata()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleMetadata()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SampleMetadata&)",
    "insertText": "operator(const SampleMetadata&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int64_t key, int64_t value)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(int64_t key)"
  },
  {
    "label": "ScopedSampleMetadata()",
    "kind": "Method",
    "detail": "Function (private : const uint64_t name_hash_ ; const SampleMetadataScope scope_ ; } ; class BASE_EXPORT ScopedSampleMetadata { public :)",
    "insertText": "ScopedSampleMetadata(StringPiece name, int64_t value, SampleMetadataScope scope)"
  },
  {
    "label": "ScopedSampleMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSampleMetadata(StringPiece name, int64_t key, int64_t value, SampleMetadataScope scope)"
  },
  {
    "label": "ScopedSampleMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSampleMetadata(const ScopedSampleMetadata&)"
  },
  {
    "label": "ScopedSampleMetadata()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSampleMetadata()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSampleMetadata&)",
    "insertText": "operator(const ScopedSampleMetadata&)"
  },
  {
    "label": "ApplyMetadataToPastSamples()",
    "kind": "Method",
    "detail": "Function (private : const uint64_t name_hash_ ; absl::optional<int64_t> key_ ; absl::optional<PlatformThreadId> thread_id_ ; } ; BASE_EXPORT void)",
    "insertText": "ApplyMetadataToPastSamples(TimeTicks period_start, TimeTicks period_end, StringPiece name, int64_t value, SampleMetadataScope scope)"
  },
  {
    "label": "ApplyMetadataToPastSamples()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ApplyMetadataToPastSamples(TimeTicks period_start, TimeTicks period_end, StringPiece name, int64_t key, int64_t value, SampleMetadataScope scope)"
  },
  {
    "label": "GetSampleMetadataRecorder()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT MetadataRecorder*)",
    "insertText": "GetSampleMetadataRecorder()"
  }
]