[
  {
    "label": "PointsToMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointsToMask"
  },
  {
    "label": "AddPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddPoints"
  },
  {
    "label": "ReducePool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReducePool"
  },
  {
    "label": "maskPoints()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_POINTSTOMASK_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_POINTSTOMASK_HAS_BEEN_INCLUDED # include<tbb / enumerable_thread_specific . h> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<tbb / blocked_range . h> # include<openvdb / openvdb . h> # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / util / NullInterrupter . h> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT = MaskGrid,InterrupterT = util::NullInterrupter> class PointsToMask ; template<PointListT,GridT> void)",
    "insertText": "maskPoints(const PointListT& points, GridT& grid)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (PointsToMask<GridT,util::NullInterrupter>)",
    "insertText": "tmp(grid, nullptr)"
  },
  {
    "label": "addPoints()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "addPoints(points)"
  },
  {
    "label": "createPointMask()",
    "kind": "Method",
    "detail": "Function (} template<PointListT> MaskGrid::Ptr)",
    "insertText": "createPointMask(const PointListT& points, const math::Transform& xform)"
  },
  {
    "label": "MaskGrid()",
    "kind": "Method",
    "detail": "Function (MaskGrid::Ptr grid = createGrid<)",
    "insertText": "MaskGrid(false)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTransform(xform.copy())"
  },
  {
    "label": "maskPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "maskPoints(points, *grid)"
  },
  {
    "label": "addPoints()",
    "kind": "Method",
    "detail": "Function (} template<PointListT> void)",
    "insertText": "addPoints(const PointListT& points, size_t grainSize = 1024)"
  },
  {
    "label": "copyWithNewTree()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr examplar = mGrid ->)",
    "insertText": "copyWithNewTree()"
  },
  {
    "label": "pool()",
    "kind": "Method",
    "detail": "Function (PoolType)",
    "insertText": "pool(*examplar)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (AddPoints<PointListT>)",
    "insertText": "tmp(points, pool, grainSize, *this)"
  },
  {
    "label": "reducePool()",
    "kind": "Method",
    "detail": "Function (ReducePool)",
    "insertText": "reducePool(pool, mGrid, size_t(0))"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} else { const math::Transform& xform = mGrid ->)",
    "insertText": "transform()"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (GridT::Accessor acc = mGrid ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec3R wPos ;)",
    "insertText": "for(size_t i = 0, n = points.size(); i < n; ++i)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (points .)",
    "insertText": "getPos(i, wPos)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "setValueOn(xform.worldToIndexCellCentered( wPos ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(mInterrupter) mInterrupter->end()"
  },
  {
    "label": "PointsToMask()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "PointsToMask(const PointsToMask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PointsToMask&)",
    "insertText": "operator(const PointsToMask&)"
  },
  {
    "label": "interrupt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "interrupt()"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, mPoints->size(), grainSize), *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (GridT& grid = mPool ->)",
    "insertText": "local()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec3R wPos ;)",
    "insertText": "for(size_t i=range.begin(), n=range.end(); i!=n; ++i)"
  },
  {
    "label": "ReducePool()",
    "kind": "Method",
    "detail": "Function (} } const PointListT* mPoints ; const PointsToMask* mParent ; PoolType* mPool ; } ; template<GridT,InterrupterT> struct PointsToMask<GridT,InterrupterT>::ReducePool { using VecT = std::vector<GridT*> ; using IterT = VecT::iterator ; using RangeT = tbb::blocked_range<IterT> ;)",
    "insertText": "ReducePool(PoolType& pool, GridT* grid, size_t grainSize = 1) : mOwnsGrid(false) , mGrid(grid)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (mGrid ->)",
    "insertText": "topologyUnion(*i)"
  },
  {
    "label": "grids()",
    "kind": "Method",
    "detail": "Function (} } else { VecT)",
    "insertText": "grids(pool.size())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (PoolType::iterator i = pool .)",
    "insertText": "begin()"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(RangeT( grids.begin(), grids.end(), grainSize ), *this)"
  },
  {
    "label": "ReducePool()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ReducePool(const ReducePool&, tbb::split) : mOwnsGrid(true) , mGrid(new GridT())"
  },
  {
    "label": "ReducePool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ReducePool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const RangeT& r)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(ReducePool& other)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (mGrid ->)",
    "insertText": "topologyUnion(*other.mGrid)"
  }
]