[
  {
    "label": "general_matrix_vector_product_gemv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_vector_product_gemv"
  },
  {
    "label": "general_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_vector_product"
  },
  {
    "label": "EIGEN_BLAS_GEMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_VECTOR_BLAS_H # define EIGEN_GENERAL_MATRIX_VECTOR_BLAS_H namespace Eigen { namespace internal { template<Index,LhsScalar,int StorageOrder,bool ConjugateLhs,RhsScalar,bool ConjugateRhs> struct general_matrix_vector_product_gemv ; # define)",
    "insertText": "EIGEN_BLAS_GEMV_SPECIALIZE(Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(\\ Index rows, Index cols, \\ const const_blas_data_mapper<Scalar,Index,ColMajor> &lhs, \\ const const_blas_data_mapper<Scalar,Index,RowMajor> &rhs, \\ Scalar* res, Index resIncr, Scalar alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ConjugateLhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ general_matrix_vector_product<Index,Scalar,const_blas_data_mapper<Scalar,Index,ColMajor>,ColMajor,ConjugateLhs,Scalar,const_blas_data_mapper<Scalar,Index,RowMajor>,ConjugateRhs,BuiltIn)",
    "insertText": "run(\\ rows, cols, lhs, rhs, res, resIncr, alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ general_matrix_vector_product_gemv<Index,Scalar,ColMajor,ConjugateLhs,Scalar,ConjugateRhs)",
    "insertText": "run(\\ rows, cols, lhs.data(), lhs.stride(), rhs.data(), rhs.stride(), res, resIncr, alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } ; \\ template<Index,bool ConjugateLhs,bool ConjugateRhs> \\ struct general_matrix_vector_product<Index,Scalar,const_blas_data_mapper<Scalar,Index,RowMajor>,RowMajor,ConjugateLhs,Scalar,const_blas_data_mapper<Scalar,Index,ColMajor>,ConjugateRhs,Specialized> { \\ void)",
    "insertText": "run(\\ Index rows, Index cols, \\ const const_blas_data_mapper<Scalar,Index,RowMajor> &lhs, \\ const const_blas_data_mapper<Scalar,Index,ColMajor> &rhs, \\ Scalar* res, Index resIncr, Scalar alpha)"
  },
  {
    "label": "EIGEN_BLAS_GEMV_SPECIALIZE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\)",
    "insertText": "EIGEN_BLAS_GEMV_SPECIALIZE(double) EIGEN_BLAS_GEMV_SPECIALIZE(float) EIGEN_BLAS_GEMV_SPECIALIZE(dcomplex) EIGEN_BLAS_GEMV_SPECIALIZE(scomplex) #define EIGEN_BLAS_GEMV_SPECIALIZATION(EIGTYPE,BLASTYPE,BLASFUNC)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ typedef Matrix<EIGTYPE,Dynamic,1,ColMajor> GEMVVector ; \\ \\ void)",
    "insertText": "run(\\ Index rows, Index cols, \\ const EIGTYPE* lhs, Index lhsStride, \\ const EIGTYPE* rhs, Index rhsIncr, \\ EIGTYPE* res, Index resIncr, EIGTYPE alpha)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ BlasIndex m = convert_index<)",
    "insertText": "BlasIndex(rows), n=convert_index<BlasIndex>(cols), \\ lda=convert_index<BlasIndex>(lhsStride), incx=convert_index<BlasIndex>(rhsIncr), incy=convert_index<BlasIndex>(resIncr)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ const EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "trans()",
    "kind": "Method",
    "detail": "Function (\\ const EIGTYPE* x_ptr ; \\ char)",
    "insertText": "trans(LhsStorageOrder==ColMajor) ? 'N' : (ConjugateLhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(LhsStorageOrder==RowMajor)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ m = convert_index<)",
    "insertText": "BlasIndex(cols)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "BlasIndex(rows)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ GEMVVector x_tmp ; \\)",
    "insertText": "if(ConjugateRhs)"
  },
  {
    "label": "map_x()",
    "kind": "Method",
    "detail": "Function (\\ Map<const GEMVVector,0,InnerStride<>>)",
    "insertText": "map_x(rhs,cols,1,InnerStride<>(incx))"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ x_tmp = map_x .)",
    "insertText": "conjugate()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ x_ptr = x_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ incx = 1 ; \\ } else x_ptr = rhs ; \\)",
    "insertText": "BLASFUNC(&trans, &m, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)lhs, &lda, (const BLASTYPE*)x_ptr, &incx, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)res, &incy)"
  }
]