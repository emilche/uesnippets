[
  {
    "label": "FMessageLogModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLogModel"
  },
  {
    "label": "FMessageLogListingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLogListingModel"
  },
  {
    "label": "FMessageLogModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Model / MessageLogListingModel . h \" class FMessageLogModel { public : ~)",
    "insertText": "FMessageLogModel()"
  },
  {
    "label": "UnregisterLogListingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterLogListingModel(const FName& LogName)"
  },
  {
    "label": "IsRegisteredLogListingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegisteredLogListingModel(const FName& LogName)"
  },
  {
    "label": "GetLogListingModel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FMessageLogListingModel>)",
    "insertText": "GetLogListingModel(const FName& LogName)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FMessageLogModel, FChangedEvent ) FChangedEvent& OnChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "RegisterOrGetLogListingModel()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<class FMessageLogListingModel>)",
    "insertText": "RegisterOrGetLogListingModel(const FName& LogName)"
  },
  {
    "label": "FindLogListingModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FMessageLogListingModel>)",
    "insertText": "FindLogListingModel(const FName& LogName)"
  }
]