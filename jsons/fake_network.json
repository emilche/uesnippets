[
  {
    "label": "FakeNetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeNetworkManager"
  },
  {
    "label": "Iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Iface"
  },
  {
    "label": "FakeNetworkManager()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FAKE_NETWORK_H_ # define RTC_BASE_FAKE_NETWORK_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / memory / memory . h \" # include \" rtc_base / mdns_responder_interface . h \" # include \" rtc_base / network . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / string_encode . h \" # include \" rtc_base / thread . h \" namespace rtc { const int kFakeIPv4NetworkPrefixLength = 2 4 ; const int kFakeIPv6NetworkPrefixLength = 6 4 ; class FakeNetworkManager : public NetworkManagerBase { public :)",
    "insertText": "FakeNetworkManager()"
  },
  {
    "label": "AddInterface()",
    "kind": "Method",
    "detail": "Function (} struct Iface { SocketAddress socket_address ; AdapterType adapter_type ; absl::optional<AdapterType> underlying_vpn_adapter_type ; } ; typedef std::vector<Iface> IfaceList ; void)",
    "insertText": "AddInterface(const SocketAddress& iface)"
  },
  {
    "label": "AddInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInterface(iface, \"test\" + rtc::ToString(next_index_++))"
  },
  {
    "label": "AddInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddInterface(const SocketAddress& iface, absl::string_view if_name)"
  },
  {
    "label": "AddInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInterface(iface, if_name, ADAPTER_TYPE_UNKNOWN)"
  },
  {
    "label": "AddInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddInterface(const SocketAddress& iface, absl::string_view if_name, AdapterType type, absl::optional<AdapterType> underlying_vpn_adapter_type = absl::nullopt)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "address(if_name, 0)"
  },
  {
    "label": "SetResolvedIP()",
    "kind": "Method",
    "detail": "Function (address .)",
    "insertText": "SetResolvedIP(iface.ipaddr())"
  },
  {
    "label": "RemoveInterface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInterface(const SocketAddress& iface)"
  },
  {
    "label": "DoUpdateNetworks()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "DoUpdateNetworks()"
  },
  {
    "label": "StartUpdating()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartUpdating()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + start_count_ ;)",
    "insertText": "if(start_count_ == 1)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (sent_first_update_ = false ;)",
    "insertText": "Current()->PostTask([this] { DoUpdateNetworks(); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(sent_first_update_)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Current()->PostTask([this] { SignalNetworksChanged(); })"
  },
  {
    "label": "StopUpdating()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "StopUpdating()"
  },
  {
    "label": "GetMdnsResponder()",
    "kind": "Method",
    "detail": "Function (- - start_count_ ; } using NetworkManagerBase::set_default_local_addresses ; using NetworkManagerBase::set_enumeration_permission ; webrtc::MdnsResponderInterface*)",
    "insertText": "GetMdnsResponder()"
  },
  {
    "label": "set_mdns_responder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_mdns_responder(std::unique_ptr<webrtc::MdnsResponderInterface> mdns_responder)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (mdns_responder_ =)",
    "insertText": "move(mdns_responder)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Network>> networks ;)",
    "insertText": "for(IfaceList::iterator it = ifaces_.begin(); it != ifaces_.end(); ++it)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int prefix_length = 0 ;)",
    "insertText": "if(it->socket_address.ipaddr().family() == AF_INET)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (prefix_length = kFakeIPv4NetworkPrefixLength ; } else)",
    "insertText": "if(it->socket_address.ipaddr().family() == AF_INET6)"
  },
  {
    "label": "TruncateIP()",
    "kind": "Method",
    "detail": "Function (prefix_length = kFakeIPv6NetworkPrefixLength ; } IPAddress prefix =)",
    "insertText": "TruncateIP(it->socket_address.ipaddr(), prefix_length)"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (auto net = std::make_unique<)",
    "insertText": "Network(it->socket_address.hostname(), it->socket_address.hostname(), prefix, prefix_length, it->adapter_type, nullptr)"
  },
  {
    "label": "set_underlying_type_for_vpn()",
    "kind": "Method",
    "detail": "Function (net ->)",
    "insertText": "set_underlying_type_for_vpn(*it->underlying_vpn_adapter_type)"
  },
  {
    "label": "set_default_local_address_provider()",
    "kind": "Method",
    "detail": "Function (} net ->)",
    "insertText": "set_default_local_address_provider(this)"
  },
  {
    "label": "AddIP()",
    "kind": "Method",
    "detail": "Function (net ->)",
    "insertText": "AddIP(it->socket_address.ipaddr())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (networks .)",
    "insertText": "push_back(std::move(net))"
  },
  {
    "label": "MergeNetworkList()",
    "kind": "Method",
    "detail": "Function (} bool changed ;)",
    "insertText": "MergeNetworkList(std::move(networks), &changed)"
  },
  {
    "label": "SignalNetworksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalNetworksChanged()"
  }
]