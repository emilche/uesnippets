[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_FREESLOT_BITMAP_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_FREESLOT_BITMAP_H_ # include<climits> # include<cstdint> # include<utility> # include \" base / allocator / partition_allocator / freeslot_bitmap_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # if)",
    "insertText": "BUILDFLAG(USE_FREESLOT_BITMAP)"
  },
  {
    "label": "GetFreeSlotBitmapAddressForPointer()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "GetFreeSlotBitmapAddressForPointer(uintptr_t ptr)"
  },
  {
    "label": "SuperPageFreeSlotBitmapAddr()",
    "kind": "Method",
    "detail": "Function (uintptr_t super_page = ptr& kSuperPageBaseMask ; return)",
    "insertText": "SuperPageFreeSlotBitmapAddr(super_page)"
  },
  {
    "label": "GetFreeSlotBitmapCellPtrAndBitIndex()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE std::pair<FreeSlotBitmapCellType*,size_t>)",
    "insertText": "GetFreeSlotBitmapCellPtrAndBitIndex(uintptr_t slot_start)"
  },
  {
    "label": "GetFreeSlotBitmapAddressForPointer()",
    "kind": "Method",
    "detail": "Function (uintptr_t slot_superpage_offset = slot_start& kSuperPageOffsetMask ; uintptr_t superpage_bitmap_start =)",
    "insertText": "GetFreeSlotBitmapAddressForPointer(slot_start)"
  },
  {
    "label": "AlignDown()",
    "kind": "Method",
    "detail": "Function (uintptr_t cell_addr = base::)",
    "insertText": "AlignDown(superpage_bitmap_start + (slot_superpage_offset / kSmallestBucket) / CHAR_BIT, sizeof(FreeSlotBitmapCellType))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(cell_addr < superpage_bitmap_start + kFreeSlotBitmapSize)"
  },
  {
    "label": "bit_index()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bit_index(slot_superpage_offset / kSmallestBucket)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(bit_index < kFreeSlotBitmapBitsPerCell)"
  },
  {
    "label": "CellWithAOne()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE FreeSlotBitmapCellType)",
    "insertText": "CellWithAOne(size_t n)"
  },
  {
    "label": "CellWithTrailingOnes()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE FreeSlotBitmapCellType)",
    "insertText": "CellWithTrailingOnes(size_t n)"
  },
  {
    "label": "FreeSlotBitmapSlotIsUsed()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "FreeSlotBitmapSlotIsUsed(uintptr_t slot_start)"
  },
  {
    "label": "GetFreeSlotBitmapCellPtrAndBitIndex()",
    "kind": "Method",
    "detail": "Function (auto [ cell,bit_index ] =)",
    "insertText": "GetFreeSlotBitmapCellPtrAndBitIndex(slot_start)"
  },
  {
    "label": "FreeSlotBitmapMarkSlotAsUsed()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "FreeSlotBitmapMarkSlotAsUsed(uintptr_t slot_start)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(!FreeSlotBitmapSlotIsUsed(slot_start))"
  },
  {
    "label": "CellWithAOne()",
    "kind": "Method",
    "detail": "Function (* cell& = ~)",
    "insertText": "CellWithAOne(bit_index)"
  },
  {
    "label": "FreeSlotBitmapMarkSlotAsFree()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "FreeSlotBitmapMarkSlotAsFree(uintptr_t slot_start)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(FreeSlotBitmapSlotIsUsed(slot_start))"
  },
  {
    "label": "FreeSlotBitmapReset()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "FreeSlotBitmapReset(uintptr_t begin_addr, uintptr_t end_addr, uintptr_t slot_size)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(begin_addr <= end_addr)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((end_addr & (kSmallestBucket - 1)) == 0u)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) auto [begin_cell, begin_bit_index] = GetFreeSlotBitmapCellPtrAndBitIndex(begin_addr)"
  },
  {
    "label": "GetFreeSlotBitmapCellPtrAndBitIndex()",
    "kind": "Method",
    "detail": "Function (auto [ end_cell,end_bit_index ] =)",
    "insertText": "GetFreeSlotBitmapCellPtrAndBitIndex(end_addr)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((*begin_cell & (~CellWithTrailingOnes(begin_bit_index) & CellWithTrailingOnes(end_bit_index))) == 0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(begin_bit_index != 0)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((*begin_cell & ~CellWithTrailingOnes(begin_bit_index)) == 0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + begin_cell ; })",
    "insertText": "if(end_bit_index != 0)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((*end_cell & CellWithTrailingOnes(end_bit_index)) == 0u)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FreeSlotBitmapCellType* cell = begin_cell; cell != end_cell; ++cell)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(*cell == 0u)"
  }
]