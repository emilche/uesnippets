[
  {
    "label": "TurnCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCustomizer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RelayCredentials",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelayCredentials"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "PortAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PortAllocator"
  },
  {
    "label": "RelayCredentials()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_PORT_ALLOCATOR_H_ # define P2P_BASE_PORT_ALLOCATOR_H_ # include<deque> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / sequence_checker . h \" # include \" api / transport / enums . h \" # include \" p2p / base / port . h \" # include \" p2p / base / port_interface . h \" # include \" rtc_base / helpers . h \" # include \" rtc_base / proxy_info . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" namespace webrtc { class TurnCustomizer ; } namespace cricket { enum { PORTALLOCATOR_DISABLE_UDP = 0 x01,PORTALLOCATOR_DISABLE_STUN = 0 x02,PORTALLOCATOR_DISABLE_RELAY = 0 x04,PORTALLOCATOR_DISABLE_TCP = 0 x08,PORTALLOCATOR_ENABLE_IPV6 = 0 x40,PORTALLOCATOR_ENABLE_SHARED_SOCKET = 0 x100,PORTALLOCATOR_ENABLE_STUN_RETRANSMIT_ATTRIBUTE = 0 x200,PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION = 0 x400,PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE = 0 x800,PORTALLOCATOR_DISABLE_UDP_RELAY = 0 x1000,PORTALLOCATOR_DISABLE_COSTLY_NETWORKS = 0 x2000,PORTALLOCATOR_ENABLE_IPV6_ON_WIFI = 0 x4000,PORTALLOCATOR_ENABLE_ANY_ADDRESS_PORTS = 0 x8000,PORTALLOCATOR_DISABLE_LINK_LOCAL_NETWORKS = 0 x10000,} ; enum class IceRegatheringReason { NETWORK_CHANGE,NETWORK_FAILURE,OCCASIONAL_REFRESH,MAX_VALUE } ; const uint32_t kDefaultPortAllocatorFlags = 0 ; const uint32_t kDefaultStepDelay = 1 0 0 0 ; const uint32_t kMinimumStepDelay = 5 0 ; int kDefaultMaxIPv6Networks = 5 ; enum : uint32_t { CF_NONE = 0 x0,CF_HOST = 0 x1,CF_REFLEXIVE = 0 x2,CF_RELAY = 0 x4,CF_ALL = 0 x7,} ; enum class TlsCertPolicy { TLS_CERT_POLICY_SECURE,TLS_CERT_POLICY_INSECURE_NO_CHECK,} ; struct RelayCredentials {)",
    "insertText": "RelayCredentials()"
  },
  {
    "label": "RelayCredentials()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RelayCredentials(absl::string_view username, absl::string_view password) : username(username), password(password)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RelayCredentials& o)"
  },
  {
    "label": "RelayServerConfig()",
    "kind": "Method",
    "detail": "Function (} std::string username ; std::string password ; } ; typedef std::vector<ProtocolAddress> PortList ; struct RTC_EXPORT RelayServerConfig {)",
    "insertText": "RelayServerConfig()"
  },
  {
    "label": "RelayServerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelayServerConfig(const rtc::SocketAddress& address, absl::string_view username, absl::string_view password, ProtocolType proto)"
  },
  {
    "label": "RelayServerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelayServerConfig(absl::string_view address, int port, absl::string_view username, absl::string_view password, ProtocolType proto)"
  },
  {
    "label": "RelayServerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelayServerConfig(absl::string_view address, int port, absl::string_view username, absl::string_view password, ProtocolType proto, bool secure)"
  },
  {
    "label": "RelayServerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelayServerConfig(const RelayServerConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RelayServerConfig& o)"
  },
  {
    "label": "PortAllocatorSession()",
    "kind": "Method",
    "detail": "Function (} PortList ports ; RelayCredentials credentials ; TlsCertPolicy tls_cert_policy = TlsCertPolicy::TLS_CERT_POLICY_SECURE ; std::vector<std::string> tls_alpn_protocols ; std::vector<std::string> tls_elliptic_curves ; rtc::SSLCertificateVerifier* tls_cert_verifier = nullptr ; std::string turn_logging_id ; } ; class RTC_EXPORT PortAllocatorSession : public sigslot::has_slots<> { public :)",
    "insertText": "PortAllocatorSession(absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd, uint32_t flags)"
  },
  {
    "label": "PortAllocatorSession()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PortAllocatorSession()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "flags()"
  },
  {
    "label": "content_name()",
    "kind": "Method",
    "detail": "Function (flags_ = flags ; } std::string)",
    "insertText": "content_name()"
  },
  {
    "label": "ice_tiebreaker()",
    "kind": "Method",
    "detail": "Function (tiebreaker_ = tiebreaker ; } uint64_t)",
    "insertText": "ice_tiebreaker()"
  },
  {
    "label": "StartGettingPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartGettingPorts()"
  },
  {
    "label": "StopGettingPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopGettingPorts()"
  },
  {
    "label": "IsGettingPorts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGettingPorts()"
  },
  {
    "label": "ClearGettingPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGettingPorts()"
  },
  {
    "label": "IsCleared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCleared()"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopped()"
  },
  {
    "label": "RegatherOnFailedNetworks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegatherOnFailedNetworks()"
  },
  {
    "label": "GetCandidateStatsFromReadyPorts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCandidateStatsFromReadyPorts(CandidateStatsList* candidate_stats_list)"
  },
  {
    "label": "SetStunKeepaliveIntervalForReadyPorts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStunKeepaliveIntervalForReadyPorts(const absl::optional<int>& stun_keepalive_interval)"
  },
  {
    "label": "ReadyPorts()",
    "kind": "Method",
    "detail": "Function (} std::vector<PortInterface*>)",
    "insertText": "ReadyPorts()"
  },
  {
    "label": "ReadyCandidates()",
    "kind": "Method",
    "detail": "Function (std::vector<Candidate>)",
    "insertText": "ReadyCandidates()"
  },
  {
    "label": "CandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CandidatesAllocationDone()"
  },
  {
    "label": "PruneAllPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneAllPorts()"
  },
  {
    "label": "generation()",
    "kind": "Method",
    "detail": "Function (} sigslot::signal2<PortAllocatorSession*,PortInterface*> SignalPortReady ; sigslot::signal2<PortAllocatorSession*,const std::vector<PortInterface*>&> SignalPortsPruned ; sigslot::signal2<PortAllocatorSession*,const std::vector<Candidate>&> SignalCandidatesReady ; sigslot::signal2<PortAllocatorSession*,const IceCandidateErrorEvent&> SignalCandidateError ; sigslot::signal2<PortAllocatorSession*,const std::vector<Candidate>&> SignalCandidatesRemoved ; sigslot::signal1<PortAllocatorSession*> SignalCandidatesAllocationDone ; sigslot::signal2<PortAllocatorSession*,IceRegatheringReason> SignalIceRegathering ; uint32_t)",
    "insertText": "generation()"
  },
  {
    "label": "set_generation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_generation(uint32_t generation)"
  },
  {
    "label": "UpdateIceParametersInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateIceParametersInternal()"
  },
  {
    "label": "username()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "username()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (content_name_ =)",
    "insertText": "string(content_name)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (component_ = component ; ice_ufrag_ =)",
    "insertText": "string(ice_ufrag)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (ice_pwd_ =)",
    "insertText": "string(ice_pwd)"
  },
  {
    "label": "set_pooled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_pooled(bool value)"
  },
  {
    "label": "PortAllocator()",
    "kind": "Method",
    "detail": "Function (pooled_ = value ; } uint32_t flags_ ; uint32_t generation_ ; std::string content_name_ ; int component_ ; std::string ice_ufrag_ ; std::string ice_pwd_ ; bool pooled_ = false ; uint64_t tiebreaker_ ; class PortAllocator ; } ; class RTC_EXPORT PortAllocator : public sigslot::has_slots<> { public :)",
    "insertText": "PortAllocator()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "set_restrict_ice_credentials_change()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_restrict_ice_credentials_change(bool value)"
  },
  {
    "label": "SetConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConfiguration(const ServerAddresses& stun_servers, const std::vector<RelayServerConfig>& turn_servers, int candidate_pool_size, bool prune_turn_ports, webrtc::TurnCustomizer* turn_customizer = nullptr, const absl::optional<int>& stun_candidate_keepalive_interval = absl::nullopt)"
  },
  {
    "label": "SetConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConfiguration(const ServerAddresses& stun_servers, const std::vector<RelayServerConfig>& turn_servers, int candidate_pool_size, webrtc::PortPrunePolicy turn_port_prune_policy, webrtc::TurnCustomizer* turn_customizer = nullptr, const absl::optional<int>& stun_candidate_keepalive_interval = absl::nullopt)"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "IceTiebreaker()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "IceTiebreaker()"
  },
  {
    "label": "SetVpnPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVpnPreference(webrtc::VpnPreference preference)"
  },
  {
    "label": "SetVpnList()",
    "kind": "Method",
    "detail": "Function (vpn_preference_ = preference ; } void)",
    "insertText": "SetVpnList(const std::vector<rtc::NetworkMask>& vpn_list)"
  },
  {
    "label": "CreateSession()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<PortAllocatorSession>)",
    "insertText": "CreateSession(absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "TakePooledSession()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PortAllocatorSession>)",
    "insertText": "TakePooledSession(absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "GetPooledSession()",
    "kind": "Method",
    "detail": "Function (const PortAllocatorSession*)",
    "insertText": "GetPooledSession(const IceParameters* ice_credentials = nullptr)"
  },
  {
    "label": "FreezeCandidatePool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreezeCandidatePool()"
  },
  {
    "label": "DiscardCandidatePool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardCandidatePool()"
  },
  {
    "label": "SanitizeCandidate()",
    "kind": "Method",
    "detail": "Function (Candidate)",
    "insertText": "SanitizeCandidate(const Candidate& c)"
  },
  {
    "label": "user_agent()",
    "kind": "Method",
    "detail": "Function (flags_ = flags ; } const std::string&)",
    "insertText": "user_agent()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (agent_ =)",
    "insertText": "string(agent)"
  },
  {
    "label": "min_port()",
    "kind": "Method",
    "detail": "Function (proxy_ = proxy ; } int)",
    "insertText": "min_port()"
  },
  {
    "label": "max_ipv6_networks()",
    "kind": "Method",
    "detail": "Function (max_ipv6_networks_ = networks ; } int)",
    "insertText": "max_ipv6_networks()"
  },
  {
    "label": "allow_tcp_listen()",
    "kind": "Method",
    "detail": "Function (step_delay_ = delay ; } bool)",
    "insertText": "allow_tcp_listen()"
  },
  {
    "label": "candidate_filter()",
    "kind": "Method",
    "detail": "Function (allow_tcp_listen_ = allow_tcp_listen ; } uint32_t)",
    "insertText": "candidate_filter()"
  },
  {
    "label": "set_candidate_filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_candidate_filter(uint32_t filter)"
  },
  {
    "label": "SetCandidateFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCandidateFilter(filter)"
  },
  {
    "label": "prune_turn_ports()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "prune_turn_ports()"
  },
  {
    "label": "GetPooledIceCredentials()",
    "kind": "Method",
    "detail": "Function (std::vector<IceParameters>)",
    "insertText": "GetPooledIceCredentials()"
  },
  {
    "label": "CreateSessionInternal()",
    "kind": "Method",
    "detail": "Function (sigslot::signal2<uint32_t,uint32_t> SignalCandidateFilterChanged ; protected : PortAllocatorSession*)",
    "insertText": "CreateSessionInternal(absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "pooled_sessions()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<PortAllocatorSession>>&)",
    "insertText": "pooled_sessions()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!initialized_ || thread_checker_.IsCurrent())"
  },
  {
    "label": "CheckRunOnValidThreadAndInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckRunOnValidThreadAndInitialized()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(initialized_ && thread_checker_.IsCurrent())"
  },
  {
    "label": "FindPooledSession()",
    "kind": "Method",
    "detail": "Function (} bool initialized_ = false ; uint32_t flags_ ; std::string agent_ ; rtc::ProxyInfo proxy_ ; int min_port_ ; int max_port_ ; int max_ipv6_networks_ ; uint32_t step_delay_ ; bool allow_tcp_listen_ ; uint32_t candidate_filter_ ; std::string origin_ ; webrtc::SequenceChecker thread_checker_ ; webrtc::VpnPreference vpn_preference_ = webrtc::VpnPreference::kDefault ; private : ServerAddresses stun_servers_ ; std::vector<RelayServerConfig> turn_servers_ ; int candidate_pool_size_ = 0 ; std::vector<std::unique_ptr<PortAllocatorSession>> pooled_sessions_ ; bool candidate_pool_frozen_ = false ; webrtc::PortPrunePolicy turn_port_prune_policy_ = webrtc::NO_PRUNE ; webrtc::TurnCustomizer* turn_customizer_ = nullptr ; absl::optional<int> stun_candidate_keepalive_interval_ ; bool restrict_ice_credentials_change_ = false ; std::vector<std::unique_ptr<PortAllocatorSession>>::const_iterator)",
    "insertText": "FindPooledSession(const IceParameters* ice_credentials = nullptr)"
  }
]