[
  {
    "label": "StackMapV1Parser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackMapV1Parser"
  },
  {
    "label": "AccessorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AccessorIterator"
  },
  {
    "label": "FunctionAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionAccessor"
  },
  {
    "label": "ConstantAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantAccessor"
  },
  {
    "label": "RecordAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordAccessor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LocationAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocationAccessor"
  },
  {
    "label": "LiveOutAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveOutAccessor"
  },
  {
    "label": "AccessorIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_STACKMAPPARSER_H # define LLVM_CODEGEN_STACKMAPPARSER_H # include \" llvm / Support / Debug . h \" # include \" llvm / Support / Endian . h \" # include<map> # include<vector> namespace llvm { template<support::endianness Endianness> class StackMapV1Parser { public : template<AccessorT> class AccessorIterator { public :)",
    "insertText": "AccessorIterator(AccessorT A) : A(A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AccessorIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (A = A .)",
    "insertText": "next()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (auto tmp =* this ; + +* this ; return tmp ; } bool)",
    "insertText": "operator(const AccessorIterator &Other)"
  },
  {
    "label": "getStackSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getStackSize()"
  },
  {
    "label": "FunctionAccessor()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FunctionAccessor(const uint8_t *P) : P(P)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} const int FunctionAccessorSize = 2*)",
    "insertText": "sizeof(uint64_t)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const uint8_t* P ; } ; class ConstantAccessor { class StackMapV1Parser ; public : uint64_t)",
    "insertText": "getValue()"
  },
  {
    "label": "ConstantAccessor()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ConstantAccessor(const uint8_t *P) : P(P)"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} const uint8_t* P ; } ; class RecordAccessor ; enum class LocationKind : uint8_t { Register = 1,Direct = 2,Indirect = 3,Constant = 4,ConstantIndex = 5 } ; class LocationAccessor { class StackMapV1Parser ; class RecordAccessor ; public : LocationKind)",
    "insertText": "getKind()"
  },
  {
    "label": "getDwarfRegNum()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "getDwarfRegNum()"
  },
  {
    "label": "getSmallConstant()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getSmallConstant()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getKind() == LocationKind::Constant && \"Not a small constant.\")"
  },
  {
    "label": "getConstantIndex()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getConstantIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getKind() == LocationKind::ConstantIndex && \"Not a constant-index.\")"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getOffset()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getKind() == LocationKind::Direct || getKind() == LocationKind::Indirect) && \"Not direct or indirect.\")"
  },
  {
    "label": "LocationAccessor()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LocationAccessor(const uint8_t *P) : P(P)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} const int KindOffset = 0 ; const int DwarfRegNumOffset = KindOffset +)",
    "insertText": "sizeof(uint16_t)"
  },
  {
    "label": "getSizeInBytes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSizeInBytes()"
  },
  {
    "label": "LiveOutAccessor()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LiveOutAccessor(const uint8_t *P) : P(P)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} const int DwarfRegNumOffset = 0 ; const int SizeOffset = DwarfRegNumOffset +)",
    "insertText": "sizeof(uint16_t) + sizeof(uint8_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const int LiveOutAccessorSize =)",
    "insertText": "sizeof(uint32_t)"
  },
  {
    "label": "getID()",
    "kind": "Method",
    "detail": "Function (const uint8_t* P ; } ; class RecordAccessor { class StackMapV1Parser ; public : typedef AccessorIterator<LocationAccessor> location_iterator ; typedef AccessorIterator<LiveOutAccessor> liveout_iterator ; uint64_t)",
    "insertText": "getID()"
  },
  {
    "label": "getInstructionOffset()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getInstructionOffset()"
  },
  {
    "label": "getNumLocations()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "getNumLocations()"
  },
  {
    "label": "getLocation()",
    "kind": "Method",
    "detail": "Function (} LocationAccessor)",
    "insertText": "getLocation(unsigned LocationIndex)"
  },
  {
    "label": "LocationAccessor()",
    "kind": "Method",
    "detail": "Function (unsigned LocationOffset = LocationListOffset + LocationIndex* LocationSize ; return)",
    "insertText": "LocationAccessor(P + LocationOffset)"
  },
  {
    "label": "location_begin()",
    "kind": "Method",
    "detail": "Function (} location_iterator)",
    "insertText": "location_begin()"
  },
  {
    "label": "location_end()",
    "kind": "Method",
    "detail": "Function (} location_iterator)",
    "insertText": "location_end()"
  },
  {
    "label": "locations()",
    "kind": "Method",
    "detail": "Function (} iterator_range<location_iterator>)",
    "insertText": "locations()"
  },
  {
    "label": "getNumLiveOuts()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "getNumLiveOuts()"
  },
  {
    "label": "getLiveOut()",
    "kind": "Method",
    "detail": "Function (} LiveOutAccessor)",
    "insertText": "getLiveOut(unsigned LiveOutIndex)"
  },
  {
    "label": "getNumLiveOutsOffset()",
    "kind": "Method",
    "detail": "Function (unsigned LiveOutOffset =)",
    "insertText": "getNumLiveOutsOffset() + sizeof(uint16_t)"
  },
  {
    "label": "liveouts_begin()",
    "kind": "Method",
    "detail": "Function (} liveout_iterator)",
    "insertText": "liveouts_begin()"
  },
  {
    "label": "liveouts_end()",
    "kind": "Method",
    "detail": "Function (} liveout_iterator)",
    "insertText": "liveouts_end()"
  },
  {
    "label": "liveouts()",
    "kind": "Method",
    "detail": "Function (} iterator_range<liveout_iterator>)",
    "insertText": "liveouts()"
  },
  {
    "label": "RecordAccessor()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RecordAccessor(const uint8_t *P) : P(P)"
  },
  {
    "label": "getNumLiveOutsOffset()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumLiveOutsOffset()"
  },
  {
    "label": "getNumLiveOutsOffset()",
    "kind": "Method",
    "detail": "Function (unsigned RecordSize =)",
    "insertText": "getNumLiveOutsOffset() + sizeof(uint16_t) + getNumLiveOuts()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const unsigned NumLocationsOffset = InstructionOffsetOffset +)",
    "insertText": "sizeof(uint32_t) + sizeof(uint16_t)"
  },
  {
    "label": "StackMapV1Parser()",
    "kind": "Method",
    "detail": "Function (const uint8_t* P ; } ;)",
    "insertText": "StackMapV1Parser(ArrayRef<uint8_t> StackMapSection) : StackMapSection(StackMapSection)"
  },
  {
    "label": "getNumFunctions()",
    "kind": "Method",
    "detail": "Function (ConstantsListOffset = FunctionListOffset +)",
    "insertText": "getNumFunctions()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(StackMapSection[0] == 1 && \"StackMapV1Parser can only parse version 1 stackmaps\")"
  },
  {
    "label": "getNumConstants()",
    "kind": "Method",
    "detail": "Function (unsigned CurrentRecordOffset = ConstantsListOffset +)",
    "insertText": "getNumConstants()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (StackMapRecordOffsets .)",
    "insertText": "push_back(CurrentRecordOffset)"
  },
  {
    "label": "RecordAccessor()",
    "kind": "Method",
    "detail": "Function (CurrentRecordOffset + =)",
    "insertText": "RecordAccessor(&StackMapSection[CurrentRecordOffset]).getSizeInBytes()"
  },
  {
    "label": "getVersion()",
    "kind": "Method",
    "detail": "Function (} } typedef AccessorIterator<FunctionAccessor> function_iterator ; typedef AccessorIterator<ConstantAccessor> constant_iterator ; typedef AccessorIterator<RecordAccessor> record_iterator ; unsigned)",
    "insertText": "getVersion()"
  },
  {
    "label": "getNumRecords()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getNumRecords()"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (} FunctionAccessor)",
    "insertText": "getFunction(unsigned FunctionIndex)"
  },
  {
    "label": "functions_begin()",
    "kind": "Method",
    "detail": "Function (} function_iterator)",
    "insertText": "functions_begin()"
  },
  {
    "label": "functions_end()",
    "kind": "Method",
    "detail": "Function (} function_iterator)",
    "insertText": "functions_end()"
  },
  {
    "label": "functions()",
    "kind": "Method",
    "detail": "Function (} iterator_range<function_iterator>)",
    "insertText": "functions()"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (} ConstantAccessor)",
    "insertText": "getConstant(unsigned ConstantIndex)"
  },
  {
    "label": "constants_begin()",
    "kind": "Method",
    "detail": "Function (} constant_iterator)",
    "insertText": "constants_begin()"
  },
  {
    "label": "constants_end()",
    "kind": "Method",
    "detail": "Function (} constant_iterator)",
    "insertText": "constants_end()"
  },
  {
    "label": "constants()",
    "kind": "Method",
    "detail": "Function (} iterator_range<constant_iterator>)",
    "insertText": "constants()"
  },
  {
    "label": "getRecord()",
    "kind": "Method",
    "detail": "Function (} RecordAccessor)",
    "insertText": "getRecord(unsigned RecordIndex)"
  },
  {
    "label": "RecordAccessor()",
    "kind": "Method",
    "detail": "Function (std::size_t RecordOffset = StackMapRecordOffsets [ RecordIndex ] ; return)",
    "insertText": "RecordAccessor(StackMapSection.data() + RecordOffset)"
  },
  {
    "label": "records_begin()",
    "kind": "Method",
    "detail": "Function (} record_iterator)",
    "insertText": "records_begin()"
  },
  {
    "label": "records_end()",
    "kind": "Method",
    "detail": "Function (} record_iterator)",
    "insertText": "records_end()"
  },
  {
    "label": "records()",
    "kind": "Method",
    "detail": "Function (} iterator_range<record_iterator>)",
    "insertText": "records()"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (} private : template<T> T)",
    "insertText": "read(const uint8_t *P)"
  },
  {
    "label": "getFunctionOffset()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "getFunctionOffset(unsigned FunctionIndex)"
  }
]