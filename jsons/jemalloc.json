[
  {
    "label": "MALLOCX_LG_ALIGN()",
    "kind": "Method",
    "detail": "Function (# ifndef JEMALLOC_H_ # define JEMALLOC_H_ # ifdef __cplusplus \" C \" { # endif # define JEMALLOC_HAVE_ATTR # define JEMALLOC_EXPERIMENTAL # define JEMALLOC_OVERRIDE_MEMALIGN # define JEMALLOC_OVERRIDE_VALLOC # define JEMALLOC_USABLE_SIZE_CONST # define LG_SIZEOF_PTR 3 # ifndef JEMALLOC_NO_RENAME # define je_yes # define je_malloc_conf je_malloc_conf # define je_malloc_message je_malloc_message # define je_malloc je_malloc # define je_calloc je_calloc # define je_posix_memalign je_posix_memalign # define je_aligned_alloc je_aligned_alloc # define je_realloc je_realloc # define je_free je_free # define je_mallocx je_mallocx # define je_rallocx je_rallocx # define je_xallocx je_xallocx # define je_sallocx je_sallocx # define je_dallocx je_dallocx # define je_nallocx je_nallocx # define je_mallctl je_mallctl # define je_mallctlnametomib je_mallctlnametomib # define je_mallctlbymib je_mallctlbymib # define je_malloc_stats_print je_malloc_stats_print # define je_malloc_usable_size je_malloc_usable_size # define je_memalign je_memalign # define je_valloc je_valloc # define je_allocm je_allocm # define je_dallocm je_dallocm # define je_nallocm je_nallocm # define je_rallocm je_rallocm # define je_sallocm je_sallocm # endif # include<limits . h> # include<strings . h> # define JEMALLOC_VERSION \" 3 . 6 . 0 - 0 - g46c0af68bd248b04df75e4f92d5fb804c3d75340 \" # define JEMALLOC_VERSION_MAJOR 3 # define JEMALLOC_VERSION_MINOR 6 # define JEMALLOC_VERSION_BUGFIX 0 # define JEMALLOC_VERSION_NREV 0 # define JEMALLOC_VERSION_GID \" 4 6 c0af68bd248b04df75e4f92d5fb804c3d75340 \" # define)",
    "insertText": "MALLOCX_LG_ALIGN(la) (la) # if LG_SIZEOF_PTR == 2 # define MALLOCX_ALIGN(a) (ffs(a)-1) # else # define MALLOCX_ALIGN(a) \\ ((a < (size_t)INT_MAX) ? ffs(a)-1 : ffs(a>>32)+31) # endif # define MALLOCX_ZERO ((int)0x40) # define MALLOCX_ARENA(a) ((int)(((a)+1) << 8)) #ifdef JEMALLOC_EXPERIMENTAL # define ALLOCM_LG_ALIGN(la) (la) # if LG_SIZEOF_PTR == 2 # define ALLOCM_ALIGN(a) (ffs(a)-1) # else # define ALLOCM_ALIGN(a) \\ ((a < (size_t)INT_MAX) ? ffs(a)-1 : ffs(a>>32)+31) # endif # define ALLOCM_ZERO ((int)0x40) # define ALLOCM_NO_MOVE ((int)0x80) # define ALLOCM_ARENA(a) ((int)(((a)+1) << 8)) # define ALLOCM_SUCCESS 0 # define ALLOCM_ERR_OOM 1 # define ALLOCM_ERR_NOT_MOVED 2 #endif #ifdef JEMALLOC_HAVE_ATTR # define JEMALLOC_ATTR(s) __attribute__((s)) # define JEMALLOC_EXPORT JEMALLOC_ATTR(visibility(\"default\")) # define JEMALLOC_ALIGNED(s) JEMALLOC_ATTR(aligned(s)) # define JEMALLOC_SECTION(s) JEMALLOC_ATTR(section(s)) # define JEMALLOC_NOINLINE JEMALLOC_ATTR(noinline) #elif _MSC_VER # define JEMALLOC_ATTR(s) # ifdef DLLEXPORT # define JEMALLOC_EXPORT __declspec(dllexport) # else # define JEMALLOC_EXPORT __declspec(dllimport) # endif # define JEMALLOC_ALIGNED(s) __declspec(align(s)) # define JEMALLOC_SECTION(s) __declspec(allocate(s)) # define JEMALLOC_NOINLINE __declspec(noinline) #else # define JEMALLOC_ATTR(s) # define JEMALLOC_EXPORT # define JEMALLOC_ALIGNED(s) # define JEMALLOC_SECTION(s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT)",
    "insertText": "void(*je_malloc_message)(void *cbopaque, const char *s)"
  },
  {
    "label": "je_malloc()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_malloc(size_t size) JEMALLOC_ATTR(malloc)"
  },
  {
    "label": "je_calloc()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_calloc(size_t num, size_t size) JEMALLOC_ATTR(malloc)"
  },
  {
    "label": "je_posix_memalign()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_posix_memalign(void **memptr, size_t alignment, size_t size) JEMALLOC_ATTR(nonnull(1))"
  },
  {
    "label": "je_aligned_alloc()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_aligned_alloc(size_t alignment, size_t size) JEMALLOC_ATTR(malloc)"
  },
  {
    "label": "je_realloc()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_realloc(void *ptr, size_t size)"
  },
  {
    "label": "je_free()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void)",
    "insertText": "je_free(void *ptr)"
  },
  {
    "label": "je_mallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_mallocx(size_t size, int flags)"
  },
  {
    "label": "je_rallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void*)",
    "insertText": "je_rallocx(void *ptr, size_t size, int flags)"
  },
  {
    "label": "je_xallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT size_t)",
    "insertText": "je_xallocx(void *ptr, size_t size, size_t extra, int flags)"
  },
  {
    "label": "je_sallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT size_t)",
    "insertText": "je_sallocx(const void *ptr, int flags)"
  },
  {
    "label": "je_dallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void)",
    "insertText": "je_dallocx(void *ptr, int flags)"
  },
  {
    "label": "je_nallocx()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT size_t)",
    "insertText": "je_nallocx(size_t size, int flags)"
  },
  {
    "label": "je_mallctl()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_mallctl(const char *name, void *oldp, size_t *oldlenp, void *newp, size_t newlen)"
  },
  {
    "label": "je_mallctlnametomib()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_mallctlnametomib(const char *name, size_t *mibp, size_t *miblenp)"
  },
  {
    "label": "je_mallctlbymib()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_mallctlbymib(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp, void *newp, size_t newlen)"
  },
  {
    "label": "je_malloc_stats_print()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT void)",
    "insertText": "je_malloc_stats_print(void (*write_cb)(void *, const char *), void *je_cbopaque, const char *opts)"
  },
  {
    "label": "je_malloc_usable_size()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT size_t)",
    "insertText": "je_malloc_usable_size(JEMALLOC_USABLE_SIZE_CONST void *ptr)"
  },
  {
    "label": "je_memalign()",
    "kind": "Method",
    "detail": "Function (# ifdef JEMALLOC_OVERRIDE_MEMALIGN JEMALLOC_EXPORT void*)",
    "insertText": "je_memalign(size_t alignment, size_t size) JEMALLOC_ATTR(malloc)"
  },
  {
    "label": "je_valloc()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef JEMALLOC_OVERRIDE_VALLOC JEMALLOC_EXPORT void*)",
    "insertText": "je_valloc(size_t size) JEMALLOC_ATTR(malloc)"
  },
  {
    "label": "je_allocm()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef JEMALLOC_EXPERIMENTAL JEMALLOC_EXPORT int)",
    "insertText": "je_allocm(void **ptr, size_t *rsize, size_t size, int flags) JEMALLOC_ATTR(nonnull(1))"
  },
  {
    "label": "je_rallocm()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_rallocm(void **ptr, size_t *rsize, size_t size, size_t extra, int flags) JEMALLOC_ATTR(nonnull(1))"
  },
  {
    "label": "je_sallocm()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_sallocm(const void *ptr, size_t *rsize, int flags) JEMALLOC_ATTR(nonnull(1))"
  },
  {
    "label": "je_dallocm()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_dallocm(void *ptr, int flags) JEMALLOC_ATTR(nonnull(1))"
  },
  {
    "label": "je_nallocm()",
    "kind": "Method",
    "detail": "Function (JEMALLOC_EXPORT int)",
    "insertText": "je_nallocm(size_t *rsize, size_t size, int flags)"
  }
]