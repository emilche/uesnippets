[
  {
    "label": "Metadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Metadata"
  },
  {
    "label": "MetadataAsValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetadataAsValue"
  },
  {
    "label": "MetadataTracking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetadataTracking"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_METADATATRACKING_H # define LLVM_IR_METADATATRACKING_H # include \" llvm / ADT / PointerUnion . h \" # include \" llvm / Support / Casting . h \" # include<type_traits> namespace llvm { class Metadata ; class MetadataAsValue ; class MetadataTracking { public : bool)",
    "insertText": "track(Metadata *&MD)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "track(void *Ref, Metadata &MD, Metadata &Owner)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "track(void *Ref, Metadata &MD, MetadataAsValue &Owner)"
  },
  {
    "label": "untrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "untrack(Metadata *&MD)"
  },
  {
    "label": "untrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "untrack(&MD, *MD)"
  },
  {
    "label": "untrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "untrack(void *Ref, Metadata &MD)"
  },
  {
    "label": "retrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "retrack(Metadata *&MD, Metadata *&New)"
  },
  {
    "label": "retrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "retrack(void *Ref, Metadata &MD, void *New)"
  },
  {
    "label": "isReplaceable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isReplaceable(const Metadata &MD)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (typedef PointerUnion<MetadataAsValue*,Metadata*> OwnerTy ; private : bool)",
    "insertText": "track(void *Ref, Metadata &MD, OwnerTy Owner)"
  }
]