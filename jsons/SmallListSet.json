[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FSmallListSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSmallListSet"
  },
  {
    "label": "ValueIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueIterator"
  },
  {
    "label": "BaseValueIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseValueIterator"
  },
  {
    "label": "ValueEnumerable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueEnumerable"
  },
  {
    "label": "MappedValueIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedValueIterator"
  },
  {
    "label": "MappedValueEnumerable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedValueEnumerable"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Util / DynamicVector . h \" class FArchive ; namespace UE { namespace Geometry { class FSmallListSet { protected : const int32 NullValue ; int32 BLOCKSIZE = 8 ; int32 BLOCK_LIST_OFFSET = BLOCKSIZE + 1 ; TDynamicVector<int32> ListHeads { } ; TDynamicVector<int32> ListBlocks { } ; TDynamicVector<int32> FreeBlocks { } ; int32 AllocatedCount { 0 } ; TDynamicVector<int32> LinkedListElements { } ; int32 FreeHeadIndex { NullValue } ; public : size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Resize(int32 NewSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (ListHeads .)",
    "insertText": "Clear()"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (FreeHeadIndex = NullValue ; } void)",
    "insertText": "Compact(int32 MaxListIndex)"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocated(int32 ListIndex)"
  },
  {
    "label": "AllocateAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateAt(int32 ListIndex)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(int32 ListIndex, int32 Value)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(int32 ListIndex, int32 Value)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(int32 FromIndex, int32 ToIndex)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(int32 ListIndex)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCount(int32 ListIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int32 block_ptr = ListHeads [ ListIndex ] ;)",
    "insertText": "return(block_ptr == NullValue)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "First(int32 ListIndex)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (int32 block_ptr = ListHeads [ ListIndex ] ; return ListBlocks [ block_ptr + 1 ] ; } bool)",
    "insertText": "Contains(int32 ListIndex, int32 Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (template<IntToBoolFunc> int32)",
    "insertText": "Find(int32 ListIndex, const IntToBoolFunc& PredicateFunc, int32 InvalidValue = -1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 block_ptr = ListHeads [ ListIndex ] ;)",
    "insertText": "if(block_ptr != NullValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 N = ListBlocks [ block_ptr ] ;)",
    "insertText": "if(N < BLOCKSIZE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 iEnd = block_ptr + N ;)",
    "insertText": "for(int32 i = block_ptr + 1; i <= iEnd; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Value = ListBlocks [ i ] ;)",
    "insertText": "if(PredicateFunc(Value))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ListBlocks [ i ] = NewValue ; return true ; } } int32 cur_ptr = ListBlocks [ block_ptr + BLOCK_LIST_OFFSET ] ;)",
    "insertText": "while(cur_ptr != NullValue)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (LinkedListElements [ cur_ptr ] = NewValue ; return true ; } cur_ptr = LinkedListElements [ cur_ptr + 1 ] ; } } } return false ; } template<IntToVoidFunc> void)",
    "insertText": "Enumerate(int32 ListIndex, const IntToVoidFunc& ApplyFunc)"
  },
  {
    "label": "ApplyFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFunc(ListBlocks[i])"
  },
  {
    "label": "ApplyFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFunc(LinkedListElements[cur_ptr])"
  },
  {
    "label": "EnumerateEarlyOut()",
    "kind": "Method",
    "detail": "Function (cur_ptr = LinkedListElements [ cur_ptr + 1 ] ; } } } } bool)",
    "insertText": "EnumerateEarlyOut(int32 ListIndex, TFunctionRef<bool(int32)> ApplyFunc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSmallListSet& Set)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Set .)",
    "insertText": "Serialize(Ar, false, false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSmallListSet& Lhs, const FSmallListSet& Rhs)"
  },
  {
    "label": "BeginValues()",
    "kind": "Method",
    "detail": "Function (ValueIterator ItRhs = Rhs .)",
    "insertText": "BeginValues(ListIndex)"
  },
  {
    "label": "EndValues()",
    "kind": "Method",
    "detail": "Function (const ValueIterator ItLhsEnd = Lhs .)",
    "insertText": "EndValues(ListIndex)"
  },
  {
    "label": "BaseValueIterator()",
    "kind": "Method",
    "detail": "Function (} class ValueIterator ; class BaseValueIterator ; class BaseValueIterator { public :)",
    "insertText": "BaseValueIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ListSet = nullptr ; ListIndex = 0 ; } bool)",
    "insertText": "operator(const BaseValueIterator& Other)"
  },
  {
    "label": "SetToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToEnd()"
  },
  {
    "label": "GotoNextOverflow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GotoNextOverflow()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur_value = ListSet -> ListBlocks [ iCur ] ; iCur + + ; } else)",
    "insertText": "if(cur_ptr != NullValue)"
  },
  {
    "label": "BaseValueIterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "BaseValueIterator(const FSmallListSet* ListSetIn, int32 ListIndex, bool is_end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> ListSet = ListSetIn ; this -> ListIndex = ListIndex ;)",
    "insertText": "if(is_end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { block_ptr = ListSet -> ListHeads [ ListIndex ] ;)",
    "insertText": "if(block_ptr != ListSet->NullValue)"
  },
  {
    "label": "iEnd()",
    "kind": "Method",
    "detail": "Function (N = ListSet -> ListBlocks [ block_ptr ] ;)",
    "insertText": "iEnd(N < BLOCKSIZE) ? (block_ptr + N) : (block_ptr + BLOCKSIZE)"
  },
  {
    "label": "cur_ptr()",
    "kind": "Method",
    "detail": "Function (ListBlocks[block_ptr + BLOCK_LIST_OFFSET])",
    "insertText": "cur_ptr(N < BLOCKSIZE)"
  },
  {
    "label": "ValueIterator()",
    "kind": "Method",
    "detail": "Function (block_ptr = ListSet -> NullValue ; N = 0 ; iCur = - 1 ; cur_ptr = - 1 ; } const FSmallListSet* ListSet ; int32 ListIndex ; int32 block_ptr ; int32 N ; int32 iEnd ; int32 iCur ; int32 cur_ptr ; int32 cur_value ; class FSmallListSet ; } ; class ValueIterator : public BaseValueIterator { public :)",
    "insertText": "ValueIterator() : BaseValueIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "operator()"
  },
  {
    "label": "GotoNext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GotoNext()"
  },
  {
    "label": "BeginValues()",
    "kind": "Method",
    "detail": "Function (} class FSmallListSet ; } ; ValueIterator)",
    "insertText": "BeginValues(int32 ListIndex)"
  },
  {
    "label": "EndValues()",
    "kind": "Method",
    "detail": "Function (} ValueIterator)",
    "insertText": "EndValues(int32 ListIndex)"
  },
  {
    "label": "ValueEnumerable()",
    "kind": "Method",
    "detail": "Function (} class ValueEnumerable { public : const FSmallListSet* ListSet ; int32 ListIndex ;)",
    "insertText": "ValueEnumerable()"
  },
  {
    "label": "ValueEnumerable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueEnumerable(const FSmallListSet* ListSetIn, int32 ListIndex)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (this -> ListSet = ListSetIn ; this -> ListIndex = ListIndex ; } FSmallListSet::ValueIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FSmallListSet::ValueIterator)",
    "insertText": "end()"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (} } ; ValueEnumerable)",
    "insertText": "Values(int32 ListIndex)"
  },
  {
    "label": "MappedValueIterator()",
    "kind": "Method",
    "detail": "Function (} class MappedValueIterator ; class MappedValueIterator : public BaseValueIterator { public :)",
    "insertText": "MappedValueIterator() : BaseValueIterator()"
  },
  {
    "label": "MapFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapFunc(int32 value)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (MapFunc = MapFuncIn ; } TFunction<)",
    "insertText": "int32(int32)"
  },
  {
    "label": "BeginMappedValues()",
    "kind": "Method",
    "detail": "Function (class FSmallListSet ; } ; MappedValueIterator)",
    "insertText": "BeginMappedValues(int32 ListIndex, const TFunction<int32(int32)>& MapFunc)"
  },
  {
    "label": "EndMappedValues()",
    "kind": "Method",
    "detail": "Function (} MappedValueIterator)",
    "insertText": "EndMappedValues(int32 ListIndex, const TFunction<int32(int32)>& MapFunc)"
  },
  {
    "label": "MappedValueEnumerable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MappedValueEnumerable()"
  },
  {
    "label": "MappedValueEnumerable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MappedValueEnumerable(const FSmallListSet* ListSetIn, int32 ListIndex, TFunction<int32(int32)> MapFunc)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> ListSet = ListSetIn ; this -> ListIndex = ListIndex ; this -> MapFunc =)",
    "insertText": "MoveTemp(MapFunc)"
  },
  {
    "label": "MappedValues()",
    "kind": "Method",
    "detail": "Function (} } ; MappedValueEnumerable)",
    "insertText": "MappedValues(int32 ListIndex, TFunction<int32(int32)> MapFunc)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "AllocateBlock()"
  },
  {
    "label": "AddFreeLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFreeLink(int32 ptr)"
  },
  {
    "label": "RemoveFromLinkedList()",
    "kind": "Method",
    "detail": "Function (LinkedListElements [ ptr + 1 ] = FreeHeadIndex ; FreeHeadIndex = ptr ; } bool)",
    "insertText": "RemoveFromLinkedList(int32 block_ptr, int32 val)"
  },
  {
    "label": "MemoryUsage()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "MemoryUsage()"
  }
]