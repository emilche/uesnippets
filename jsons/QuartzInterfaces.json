[
  {
    "label": "FQuartzQuantizedCommandDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandDelegateData"
  },
  {
    "label": "FQuartzMetronomeDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzMetronomeDelegateData"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FQuartzQueueCommandData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" QuartzQuantizationUtilities . h \" # include \" QuartzCommandQueue . h \" namespace Audio { struct FQuartzQuantizedCommandDelegateData : public FQuartzCrossThreadMessage { EQuartzCommandType CommandType ; EQuartzCommandDelegateSubType DelegateSubType ; int32 DelegateID { - 1 } ; } ; struct FQuartzMetronomeDelegateData : public FQuartzCrossThreadMessage { int32 Bar ; int32 Beat ; float BeatFraction ; EQuartzCommandQuantization Quantization ; FName ClockName ; int32 FrameOffset = 0 ; } ; struct FQuartzQueueCommandData : public FQuartzCrossThreadMessage { FAudioComponentCommandInfo AudioComponentCommandInfo ; FName ClockName ;)",
    "insertText": "FQuartzQueueCommandData(const FAudioComponentCommandInfo& InAudioComponentCommandInfo, FName InClockName) : AudioComponentCommandInfo(InAudioComponentCommandInfo) , ClockName(InClockName)"
  },
  {
    "label": "IMetronomeEventListener()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace Audio::Quartz { class IMetronomeEventListener { public : ~)",
    "insertText": "IMetronomeEventListener()"
  },
  {
    "label": "OnMetronomeEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMetronomeEvent(const FQuartzMetronomeDelegateData&)"
  },
  {
    "label": "ICommandListener()",
    "kind": "Method",
    "detail": "Function (} ; class ICommandListener { public : ~)",
    "insertText": "ICommandListener()"
  },
  {
    "label": "OnCommandEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommandEvent(const FQuartzQuantizedCommandDelegateData&)"
  },
  {
    "label": "IQueueCommandListener()",
    "kind": "Method",
    "detail": "Function (} ; class IQueueCommandListener { public : ~)",
    "insertText": "IQueueCommandListener()"
  },
  {
    "label": "OnQueueCommandEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueueCommandEvent(const FQuartzQueueCommandData&)"
  },
  {
    "label": "IQuartzClock()",
    "kind": "Method",
    "detail": "Function (} ; class IQuartzClock { public : ~)",
    "insertText": "IQuartzClock()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(bool bPause = true)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(bool CancelPendingEvents)"
  },
  {
    "label": "SubscribeToTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToTimeDivision(FQuartzGameThreadSubscriber InSubscriber, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "SubscribeToAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllTimeDivisions(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(FQuartzGameThreadSubscriber InSubscriber, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizedRequestData& InQuantizedRequestData)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizedCommandInitInfo& InQuantizationCommandInitInfo)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizationBoundary InQuantizationBoundary, TSharedPtr<IQuartzQuantizedCommand> InNewEvent)"
  }
]