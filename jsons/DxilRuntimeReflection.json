[
  {
    "label": "RuntimeDataVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RuntimeDataVersion"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RuntimeDataHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RuntimeDataHeader"
  },
  {
    "label": "RuntimeDataPartHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RuntimeDataPartHeader"
  },
  {
    "label": "RuntimeDataTableHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RuntimeDataTableHeader"
  },
  {
    "label": "TableReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TableReader"
  },
  {
    "label": "IndexTableReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexTableReader"
  },
  {
    "label": "IndexRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexRow"
  },
  {
    "label": "StringTableReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringTableReader"
  },
  {
    "label": "RawBytesReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawBytesReader"
  },
  {
    "label": "RecordTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordTraits"
  },
  {
    "label": "RDATContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RDATContext"
  },
  {
    "label": "BaseRecordReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseRecordReader"
  },
  {
    "label": "RecordArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordArrayReader"
  },
  {
    "label": "StringArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringArrayReader"
  },
  {
    "label": "RecordRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RecordRef"
  },
  {
    "label": "RecordArrayRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RecordArrayRef"
  },
  {
    "label": "RDATString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RDATString"
  },
  {
    "label": "RDATStringArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RDATStringArray"
  },
  {
    "label": "IndexArrayRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexArrayRef"
  },
  {
    "label": "BytesRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BytesRef"
  },
  {
    "label": "BytesPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BytesPtr"
  },
  {
    "label": "RecordReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordReader"
  },
  {
    "label": "RecordTableReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordTableReader"
  },
  {
    "label": "DxilRuntimeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilRuntimeData"
  },
  {
    "label": "RDAT_NULL_REF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include<cstddef> # define)",
    "insertText": "RDAT_NULL_REF((uint32_t)0xFFFFFFFF)"
  },
  {
    "label": "RDAT_PART_ID_WITH_GROUP()",
    "kind": "Method",
    "detail": "Function (namespace RDAT { enum RuntimeDataVersion { RDAT_Version_10 = 0 x10,} ; enum class RuntimeDataGroup : uint32_t { Core = 0,PdbInfo = 1,} ; uint32_t)",
    "insertText": "RDAT_PART_ID_WITH_GROUP(RuntimeDataGroup group, uint32_t id)"
  },
  {
    "label": "RDAT_PART_ID_WITH_GROUP()",
    "kind": "Method",
    "detail": "Function (} enum class RuntimeDataPartType : uint32_t { Invalid = 0,StringBuffer = 1,IndexArrays = 2,ResourceTable = 3,FunctionTable = 4,Last_1_3 = FunctionTable,RawBytes = 5,SubobjectTable = 6,Last_1_4 = SubobjectTable,NodeIDTable = 7,NodeShaderIOAttribTable = 8,NodeShaderFuncAttribTable = 9,IONodeTable = 1 0,NodeShaderInfoTable = 1 1,Last_1_8 = NodeShaderInfoTable,SignatureElementTable,VSInfoTable,PSInfoTable,HSInfoTable,DSInfoTable,GSInfoTable,CSInfoTable,MSInfoTable,ASInfoTable,LastPlus1,LastExperimental = LastPlus1 - 1,DxilPdbInfoTable =)",
    "insertText": "RDAT_PART_ID_WITH_GROUP(RuntimeDataGroup::PdbInfo, 1), DxilPdbInfoSourceTable = RDAT_PART_ID_WITH_GROUP(RuntimeDataGroup::PdbInfo, 2), DxilPdbInfoLibraryTable = RDAT_PART_ID_WITH_GROUP(RuntimeDataGroup::PdbInfo, 3)"
  },
  {
    "label": "MaxPartTypeForValVer()",
    "kind": "Method",
    "detail": "Function (RuntimeDataPartType)",
    "insertText": "MaxPartTypeForValVer(unsigned Major, unsigned Minor)"
  },
  {
    "label": "TableReader()",
    "kind": "Method",
    "detail": "Function (} enum class RecordTableIndex : unsigned { ResourceTable,FunctionTable,SubobjectTable,NodeIDTable,NodeShaderIOAttribTable,NodeShaderFuncAttribTable,IONodeTable,NodeShaderInfoTable,DxilPdbInfoTable,DxilPdbInfoSourceTable,DxilPdbInfoLibraryTable,SignatureElementTable,VSInfoTable,PSInfoTable,HSInfoTable,DSInfoTable,GSInfoTable,CSInfoTable,MSInfoTable,ASInfoTable,RecordTableCount } ; struct RuntimeDataHeader { uint32_t Version ; uint32_t PartCount ; } ; struct RuntimeDataPartHeader { RuntimeDataPartType Type ; uint32_t Size ; } ; struct RuntimeDataTableHeader { uint32_t RecordCount ; uint32_t RecordStride ; } ; class TableReader { const char* m_table ; uint32_t m_count ; uint32_t m_stride ; public :)",
    "insertText": "TableReader() : TableReader(nullptr, 0, 0)"
  },
  {
    "label": "TableReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TableReader(const char *table, uint32_t count, uint32_t stride) : m_table(table), m_count(count), m_stride(stride)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const char *table, uint32_t count, uint32_t stride)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (m_table = table ; m_count = count ; m_stride = stride ; } const char*)",
    "insertText": "Data()"
  },
  {
    "label": "IndexRow()",
    "kind": "Method",
    "detail": "Function (} } ; class IndexTableReader { private : const uint32_t* m_table ; uint32_t m_size ; public : class IndexRow { private : const uint32_t* m_values ; const uint32_t m_count ; public :)",
    "insertText": "IndexRow() : m_values(nullptr), m_count(0)"
  },
  {
    "label": "IndexRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IndexRow(const uint32_t *values, uint32_t count) : m_values(values), m_count(count)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Count()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const uint32_t&)",
    "insertText": "operator(uint32_t i)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "IndexTableReader()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "IndexTableReader() : IndexTableReader(nullptr, 0)"
  },
  {
    "label": "IndexTableReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IndexTableReader(const uint32_t *table, uint32_t size) : m_table(table), m_size(size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const uint32_t *table, uint32_t size)"
  },
  {
    "label": "getRow()",
    "kind": "Method",
    "detail": "Function (m_table = table ; m_size = size ; } IndexRow)",
    "insertText": "getRow(uint32_t i)"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Valid()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } ; class StringTableReader { const char* m_table = nullptr ; uint32_t m_size = 0 ; public : void)",
    "insertText": "Init(const char *table, uint32_t size)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (m_table = table ; m_size = size ; } const char*)",
    "insertText": "Get(uint32_t offset)"
  },
  {
    "label": "RawBytesReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RawBytesReader() : RawBytesReader(nullptr, 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const void *table, uint32_t size)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (m_table = table ; m_size = size ; } uint32_t)",
    "insertText": "Size()"
  },
  {
    "label": "TypeName()",
    "kind": "Method",
    "detail": "Function (} } ; template<_T> class RecordTraits { public : const char*)",
    "insertText": "TypeName()"
  },
  {
    "label": "PartType()",
    "kind": "Method",
    "detail": "Function (RuntimeDataPartType)",
    "insertText": "PartType()"
  },
  {
    "label": "TableIndex()",
    "kind": "Method",
    "detail": "Function (RecordTableIndex)",
    "insertText": "TableIndex()"
  },
  {
    "label": "RecordSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RecordSize()"
  },
  {
    "label": "MaxRecordSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "MaxRecordSize()"
  },
  {
    "label": "DerivedRecordSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "DerivedRecordSize()"
  },
  {
    "label": "Tables()",
    "kind": "Method",
    "detail": "Function (} } ; struct RDATContext { StringTableReader StringBuffer ; IndexTableReader IndexTable ; RawBytesReader RawBytes ; TableReader)",
    "insertText": "Tables(unsigned)"
  },
  {
    "label": "Table()",
    "kind": "Method",
    "detail": "Function (const TableReader&)",
    "insertText": "Table(RecordTableIndex idx)"
  },
  {
    "label": "Table()",
    "kind": "Method",
    "detail": "Function (} template<RecordType> const TableReader&)",
    "insertText": "Table()"
  },
  {
    "label": "asReader()",
    "kind": "Method",
    "detail": "Function (} } ; class BaseRecordReader { protected : const RDATContext* m_pContext = nullptr ; const void* m_pRecord = nullptr ; uint32_t m_Size = 0 ; template<_ReaderTy> const _ReaderTy)",
    "insertText": "asReader()"
  },
  {
    "label": "InvalidateReader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateReader()"
  },
  {
    "label": "BaseRecordReader()",
    "kind": "Method",
    "detail": "Function (m_pContext = nullptr ; m_pRecord = nullptr ; m_Size = 0 ; } public :)",
    "insertText": "BaseRecordReader(const RDATContext *ctx, const void *record, uint32_t size) : m_pContext(ctx), m_pRecord(record), m_Size(size)"
  },
  {
    "label": "BaseRecordReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BaseRecordReader() : BaseRecordReader(nullptr, nullptr, 0)"
  },
  {
    "label": "RecordType()",
    "kind": "Method",
    "detail": "Function (typedef _ReaderTy::RecordType RecordType ; const TableReader& Table = m_pContext -> Table<)",
    "insertText": "RecordType()"
  },
  {
    "label": "RecordArrayReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RecordArrayReader() : RecordArrayReader(nullptr, 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const _ReaderTy)",
    "insertText": "operator(uint32_t idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef _ReaderTy::RecordType RecordType ;)",
    "insertText": "if(*this)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (m_pContext = nullptr ; } const RDATContext*)",
    "insertText": "GetContext()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RecordRef&)",
    "insertText": "operator(uint32_t index)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (Index = index ; return* this ; } operator)",
    "insertText": "uint32_t()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RDATString&)",
    "insertText": "operator(uint32_t offset)"
  },
  {
    "label": "GetAs()",
    "kind": "Method",
    "detail": "Function (} template<_T> const _T*)",
    "insertText": "GetAs(const RDATContext &ctx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32_t*)",
    "insertText": "operator()"
  },
  {
    "label": "BytesPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BytesPtr() : BytesPtr(nullptr, 0)"
  },
  {
    "label": "GetAs()",
    "kind": "Method",
    "detail": "Function (} template<_T> const _T*)",
    "insertText": "GetAs()"
  },
  {
    "label": "RecordReader()",
    "kind": "Method",
    "detail": "Function (} } ; template<_RecordReader> class RecordReader : public BaseRecordReader { public : typedef _RecordReader ThisReaderType ;)",
    "insertText": "RecordReader(const BaseRecordReader &base) : BaseRecordReader(base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef _RecordReader::RecordType RecordType ;)",
    "insertText": "if((m_pContext || m_pRecord) && m_Size < RecordTraits<RecordType>::RecordSize()) InvalidateReader()"
  },
  {
    "label": "RecordReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RecordReader() : BaseRecordReader()"
  },
  {
    "label": "as()",
    "kind": "Method",
    "detail": "Function (} template<_ReaderType> _ReaderType)",
    "insertText": "as()"
  },
  {
    "label": "_ReaderType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_ReaderType(*this)"
  },
  {
    "label": "GetField_RecordValue()",
    "kind": "Method",
    "detail": "Function (} protected : template<_FieldRecordReader> _FieldRecordReader)",
    "insertText": "GetField_RecordValue(const void *pField)"
  },
  {
    "label": "GetField_RecordRef()",
    "kind": "Method",
    "detail": "Function (} return { } ; } template<_FieldRecordReader> _FieldRecordReader)",
    "insertText": "GetField_RecordRef(const void *pIndex)"
  },
  {
    "label": "GetField_RecordArrayRef()",
    "kind": "Method",
    "detail": "Function (} return { } ; } template<_FieldRecordReader> RecordArrayReader<_FieldRecordReader>)",
    "insertText": "GetField_RecordArrayRef(const void *pIndex)"
  },
  {
    "label": "GetField_Value()",
    "kind": "Method",
    "detail": "Function (} return { } ; } template<_T,_StorageTy> _T)",
    "insertText": "GetField_Value(const _StorageTy *value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_T result = { } ;)",
    "insertText": "if(*this) result = (_T)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} return { } ; } template<_T,size_t _ArraySize>)",
    "insertText": "decltype(auto) GetField_ValueArray(_T const (&value)[_ArraySize])"
  },
  {
    "label": "GetField_String()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetField_String(const void *pIndex)"
  },
  {
    "label": "GetField_StringArray()",
    "kind": "Method",
    "detail": "Function (} StringArrayReader)",
    "insertText": "GetField_StringArray(const void *pIndex)"
  },
  {
    "label": "GetField_Bytes()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetField_Bytes(const void *pIndex)"
  },
  {
    "label": "GetField_BytesSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetField_BytesSize(const void *pIndex)"
  },
  {
    "label": "RecordTableReader()",
    "kind": "Method",
    "detail": "Function (} } ; template<_RecordReader> class RecordTableReader { const RDATContext* m_pContext ; public :)",
    "insertText": "RecordTableReader(const RDATContext *pContext) : m_pContext(pContext)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (} template<RecordReaderType = _RecordReader> RecordReaderType)",
    "insertText": "Row(uint32_t index)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "size()"
  },
  {
    "label": "DxilRuntimeData()",
    "kind": "Method",
    "detail": "Function (} } ; # define DEF_RDAT_ENUMS DEF_RDAT_ENUM_CLASS # define DEF_RDAT_TYPES DEF_RDAT_TYPES_FORWARD_DECL # include \" dxc / DxilContainer / RDAT_Macros . inl \" # define DEF_RDAT_TYPES DEF_RDAT_TYPES_USE_HELPERS # include \" dxc / DxilContainer / RDAT_Macros . inl \" # define DEF_RDAT_TYPES DEF_RDAT_TRAITS # include \" dxc / DxilContainer / RDAT_Macros . inl \" # define DEF_RDAT_TYPES DEF_RDAT_READER_DECL # include \" dxc / DxilContainer / RDAT_Macros . inl \" class DxilRuntimeData { private : RDATContext m_Context ; size_t m_DataSize = 0 ; public :)",
    "insertText": "DxilRuntimeData()"
  },
  {
    "label": "DxilRuntimeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilRuntimeData(const void *ptr, size_t size)"
  },
  {
    "label": "InitFromRDAT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromRDAT(const void *pRDAT, size_t size)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "GetDataSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetDataSize()"
  },
  {
    "label": "_Reader()",
    "kind": "Method",
    "detail": "Function (\\ return RecordTableReader<type # #)",
    "insertText": "_Reader(&m_Context)"
  }
]