[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCOPED_LOCKABLE"
  },
  {
    "label": "ItemInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ItemInternal"
  },
  {
    "label": "MetadataRecorder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_METADATA_RECORDER_H_ # define BASE_PROFILER_METADATA_RECORDER_H_ # include<array> # include<atomic> # include<utility> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" # include \" base / threading / platform_thread . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT MetadataRecorder { public :)",
    "insertText": "MetadataRecorder()"
  },
  {
    "label": "MetadataRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MetadataRecorder(const MetadataRecorder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MetadataRecorder&)",
    "insertText": "operator(const MetadataRecorder&)"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT Item {)",
    "insertText": "Item(uint64_t name_hash, absl::optional<int64_t> key, absl::optional<PlatformThreadId> thread_id, int64_t value)"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Item()"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Item(const Item& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Item&)",
    "insertText": "operator(const Item& other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (uint64_t name_hash ; absl::optional<int64_t> key ; absl::optional<PlatformThreadId> thread_id ; int64_t value ; } ; size_t MAX_METADATA_COUNT = 5 0 ; typedef std::array<Item,MAX_METADATA_COUNT> ItemArray ; void)",
    "insertText": "Set(uint64_t name_hash, absl::optional<int64_t> key, absl::optional<PlatformThreadId> thread_id, int64_t value)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(uint64_t name_hash, absl::optional<int64_t> key, absl::optional<PlatformThreadId> thread_id)"
  },
  {
    "label": "MetadataProvider()",
    "kind": "Method",
    "detail": "Function (class SCOPED_LOCKABLE BASE_EXPORT MetadataProvider { public :)",
    "insertText": "MetadataProvider(MetadataRecorder* metadata_recorder, PlatformThreadId thread_id) EXCLUSIVE_LOCK_FUNCTION(metadata_recorder_->read_lock_)"
  },
  {
    "label": "MetadataProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MetadataProvider() UNLOCK_FUNCTION()"
  },
  {
    "label": "MetadataProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MetadataProvider(const MetadataProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MetadataProvider&)",
    "insertText": "operator(const MetadataProvider&)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetItems(ItemArray* const items)"
  },
  {
    "label": "ItemInternal()",
    "kind": "Method",
    "detail": "Function (private : const raw_ptr<const MetadataRecorder> metadata_recorder_ ; PlatformThreadId thread_id_ ; base::AutoLock auto_lock_ ; } ; private : struct ItemInternal {)",
    "insertText": "ItemInternal()"
  },
  {
    "label": "TryReclaimInactiveSlots()",
    "kind": "Method",
    "detail": "Function (std::atomic<bool> is_active { false } ; uint64_t name_hash ; absl::optional<int64_t> key ; absl::optional<PlatformThreadId> thread_id ; std::atomic<int64_t> value ; } ; size_t)",
    "insertText": "TryReclaimInactiveSlots(size_t item_slots_used) EXCLUSIVE_LOCKS_REQUIRED(write_lock_) LOCKS_EXCLUDED(read_lock_)"
  },
  {
    "label": "ReclaimInactiveSlots()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReclaimInactiveSlots(size_t item_slots_used) EXCLUSIVE_LOCKS_REQUIRED(write_lock_) EXCLUSIVE_LOCKS_REQUIRED(read_lock_)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetItems(ItemArray* const items, PlatformThreadId thread_id) const EXCLUSIVE_LOCKS_REQUIRED(read_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::array<ItemInternal,MAX_METADATA_COUNT> items_ ; std::atomic<size_t> item_slots_used_ { 0 } ; size_t inactive_item_count_)",
    "insertText": "GUARDED_BY(write_lock_)"
  }
]