[
  {
    "label": "CD3DX12_STATE_OBJECT_DESC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_STATE_OBJECT_DESC"
  },
  {
    "label": "SUBOBJECT_WRAPPER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SUBOBJECT_WRAPPER"
  },
  {
    "label": "StringContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringContainer"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUBOBJECT_HELPER_BASE"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT"
  },
  {
    "label": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT"
  },
  {
    "label": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION"
  },
  {
    "label": "CD3DX12_HIT_GROUP_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_HIT_GROUP_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT"
  },
  {
    "label": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_NODE_MASK_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_NODE_MASK_SUBOBJECT"
  },
  {
    "label": "CD3DX12_GENERIC_PROGRAM_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_GENERIC_PROGRAM_SUBOBJECT"
  },
  {
    "label": "CD3DX12_WORK_GRAPH_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_WORK_GRAPH_SUBOBJECT"
  },
  {
    "label": "CD3DX12_STREAM_OUTPUT_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_STREAM_OUTPUT_SUBOBJECT"
  },
  {
    "label": "CD3DX12_BLEND_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_BLEND_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RASTERIZER_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RASTERIZER_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL2_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DEPTH_STENCIL2_SUBOBJECT"
  },
  {
    "label": "CD3DX12_INPUT_LAYOUT_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_INPUT_LAYOUT_SUBOBJECT"
  },
  {
    "label": "CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT"
  },
  {
    "label": "CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT"
  },
  {
    "label": "CD3DX12_SAMPLE_DESC_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_SAMPLE_DESC_SUBOBJECT"
  },
  {
    "label": "CD3DX12_FLAGS_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_FLAGS_SUBOBJECT"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_VIEW_INSTANCING_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DEPTH_STENCIL_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL1_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DEPTH_STENCIL1_SUBOBJECT"
  },
  {
    "label": "CD3DX12_SAMPLE_MASK_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_SAMPLE_MASK_SUBOBJECT"
  },
  {
    "label": "CD3DX12_NODE_OUTPUT_OVERRIDES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_NODE_OUTPUT_OVERRIDES"
  },
  {
    "label": "CD3DX12_SHADER_NODE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_SHADER_NODE"
  },
  {
    "label": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES"
  },
  {
    "label": "CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES"
  },
  {
    "label": "CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES"
  },
  {
    "label": "CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES"
  },
  {
    "label": "CD3DX12_NODE_HELPER_BASE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_NODE_HELPER_BASE"
  },
  {
    "label": "UINT3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UINT3"
  },
  {
    "label": "D3DX12_COM_PTR_GET()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef __cplusplus # error D3DX12 requires C + + # endif # include \" d3dx12_default . h \" # include \" d3d12 . h \" # include \" d3dx12_core . h \" # include<list> # include<forward_list> # include<vector> # include<memory> # include<string> # include<vector> # ifndef D3DX12_USE_ATL # include<wrl / client . h> # define D3DX12_COM_PTR Microsoft::WRL::ComPtr # define)",
    "insertText": "D3DX12_COM_PTR_GET(x) x.Get() #define D3DX12_COM_PTR_ADDRESSOF(x) x.GetAddressOf() #else #include <atlbase.h> #define D3DX12_COM_PTR ATL::CComPtr #define D3DX12_COM_PTR_GET(x) x.p #define D3DX12_COM_PTR_ADDRESSOF(x)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CD3DX12_STATE_OBJECT_DESC()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(D3D12_STATE_OBJECT_TYPE_COLLECTION)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATE_OBJECT_DESC(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Type)"
  },
  {
    "label": "SetStateObjectType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateObjectType(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (m_Desc . Type = Type ; })",
    "insertText": "CD3DX12_STATE_OBJECT_DESC(const CD3DX12_STATE_OBJECT_DESC& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CD3DX12_STATE_OBJECT_DESC&)",
    "insertText": "operator(const CD3DX12_STATE_OBJECT_DESC& other)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_STATE_OBJECT_DESC(CD3DX12_STATE_OBJECT_DESC&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CD3DX12_STATE_OBJECT_DESC&)",
    "insertText": "operator(CD3DX12_STATE_OBJECT_DESC&& other)"
  },
  {
    "label": "D3D12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "D3D12_STATE_OBJECT_DESC()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (ownedSubobject ->)",
    "insertText": "Finalize()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} m_RepointedSubobjectVectors .)",
    "insertText": "clear()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_SubobjectArray .)",
    "insertText": "reserve(m_Desc.NumSubobjects)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_SubobjectArray .)",
    "insertText": "push_back(*Iter)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (Iter -> pSubobjectArrayLocation =& m_SubobjectArray .)",
    "insertText": "back()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(UINT i = 0; i < m_Desc.NumSubobjects; i++)"
  },
  {
    "label": "D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION()",
    "kind": "Method",
    "detail": "Function (auto pOriginalSubobjectAssociation = static_cast<const)",
    "insertText": "D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION(m_SubobjectArray[i].pDesc)"
  },
  {
    "label": "SUBOBJECT_WRAPPER()",
    "kind": "Method",
    "detail": "Function (D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION Repointed =* pOriginalSubobjectAssociation ; auto pWrapper = static_cast<const)",
    "insertText": "SUBOBJECT_WRAPPER(pOriginalSubobjectAssociation->pSubobjectToAssociate)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Repointed . pSubobjectToAssociate = pWrapper -> pSubobjectArrayLocation ; m_RepointedAssociations .)",
    "insertText": "push_back(Repointed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(m_SubobjectArray[i].Type == D3D12_STATE_SUBOBJECT_TYPE_GENERIC_PROGRAM)"
  },
  {
    "label": "D3D12_GENERIC_PROGRAM_DESC()",
    "kind": "Method",
    "detail": "Function (auto originalGenericProgramDesc = static_cast<const)",
    "insertText": "D3D12_GENERIC_PROGRAM_DESC(m_SubobjectArray[i].pDesc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (D3D12_GENERIC_PROGRAM_DESC Repointed =* originalGenericProgramDesc ;)",
    "insertText": "if(originalGenericProgramDesc->NumSubobjects > 0)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_RepointedSubobjectVectors .)",
    "insertText": "emplace_back(std::vector<const D3D12_STATE_SUBOBJECT*>())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (repointedGenericProgramSubobjects .)",
    "insertText": "resize(originalGenericProgramDesc->NumSubobjects)"
  },
  {
    "label": "SUBOBJECT_WRAPPER()",
    "kind": "Method",
    "detail": "Function (auto pWrapper = static_cast<const)",
    "insertText": "SUBOBJECT_WRAPPER(originalGenericProgramDesc->ppSubobjects[s])"
  },
  {
    "label": "CreateSubobject()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "CreateSubobject()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* pSubobject = new)",
    "insertText": "T(*this)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_OwnedSubobjectHelpers .)",
    "insertText": "emplace_back(pSubobject)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SUBOBJECT_WRAPPER Subobject ; Subobject . pSubobjectArrayLocation = nullptr ; Subobject . Type = Type ; Subobject . pDesc = pDesc ; m_SubobjectList .)",
    "insertText": "push_back(Subobject)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "SetStateObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateObjectType(Type)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (} typedef struct SUBOBJECT_WRAPPER : public D3D12_STATE_SUBOBJECT { D3D12_STATE_SUBOBJECT* pSubobjectArrayLocation ; } SUBOBJECT_WRAPPER ; D3D12_STATE_OBJECT_DESC m_Desc ; std::list<SUBOBJECT_WRAPPER> m_SubobjectList ; std::vector<D3D12_STATE_SUBOBJECT> m_SubobjectArray ; std::list<D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION> m_RepointedAssociations ; std::list<std::vector<D3D12_STATE_SUBOBJECT const*>> m_RepointedSubobjectVectors ; std::list<D3D12_GENERIC_PROGRAM_DESC> m_RepointedPrograms ; template<CStr,StdStr> class StringContainer { public : CStr)",
    "insertText": "LocalCopy(CStr string, bool bSingleString = false)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_Strings .)",
    "insertText": "push_back(string)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} return m_Strings .)",
    "insertText": "back().c_str()"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE()",
    "kind": "Method",
    "detail": "Function (} private : std::list<StdStr> m_Strings ; } ; public : class SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "SUBOBJECT_HELPER_BASE()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (D3D12_STATE_SUBOBJECT_TYPE)",
    "insertText": "Type()"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SUBOBJECT_HELPER_BASE(const SUBOBJECT_HELPER_BASE& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SUBOBJECT_HELPER_BASE&)",
    "insertText": "operator(const SUBOBJECT_HELPER_BASE& other)"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SUBOBJECT_HELPER_BASE(SUBOBJECT_HELPER_BASE&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SUBOBJECT_HELPER_BASE&)",
    "insertText": "operator(SUBOBJECT_HELPER_BASE&& other)"
  },
  {
    "label": "AddToStateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToStateObject(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "TrackSubobject()",
    "kind": "Method",
    "detail": "Function (m_pSubobject = ContainingStateObject .)",
    "insertText": "TrackSubobject(Type(), Data())"
  },
  {
    "label": "D3D12_STATE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (} ; operator const)",
    "insertText": "D3D12_STATE_SUBOBJECT()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (m_pSubobject = nullptr ; } D3D12_STATE_SUBOBJECT* m_pSubobject ; } ; private : std::list<std::unique_ptr<SUBOBJECT_HELPER_BASE>> m_OwnedSubobjectHelpers ; class CD3DX12_DXIL_LIBRARY_SUBOBJECT ; class CD3DX12_EXISTING_COLLECTION_SUBOBJECT ; class CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT ; class CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION ; class CD3DX12_HIT_GROUP_SUBOBJECT ; class CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT ; class CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT ; class CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT ; class CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT ; class CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT ; class CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT ; class CD3DX12_NODE_MASK_SUBOBJECT ; # if)",
    "insertText": "defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 612)"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (class CD3DX12_WORK_GRAPH_SUBOBJECT ; class CD3DX12_STREAM_OUTPUT_SUBOBJECT ; class CD3DX12_BLEND_SUBOBJECT ; class CD3DX12_RASTERIZER_SUBOBJECT ; class CD3DX12_DEPTH_STENCIL2_SUBOBJECT ; class CD3DX12_INPUT_LAYOUT_SUBOBJECT ; class CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT ; class CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT ; class CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT ; class CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT ; class CD3DX12_SAMPLE_DESC_SUBOBJECT ; class CD3DX12_FLAGS_SUBOBJECT ; class CD3DX12_VIEW_INSTANCING_SUBOBJECT ; class CD3DX12_DEPTH_STENCIL_SUBOBJECT ; class CD3DX12_DEPTH_STENCIL1_SUBOBJECT ; class CD3DX12_SAMPLE_MASK_SUBOBJECT ; class CD3DX12_NODE_OUTPUT_OVERRIDES ; class CD3DX12_SHADER_NODE ; class CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES ; class CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES ; class CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES ; class CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES ; # endif } ; class CD3DX12_DXIL_LIBRARY_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "AddToStateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToStateObject(ContainingStateObject)"
  },
  {
    "label": "SetDXILLibrary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDXILLibrary(const D3D12_SHADER_BYTECODE* pCode)"
  },
  {
    "label": "DefineExport()",
    "kind": "Method",
    "detail": "Function (const D3D12_SHADER_BYTECODE Default = { } ; m_Desc . DXILLibrary = pCode ?* pCode : Default ; } void)",
    "insertText": "DefineExport(LPCWSTR Name, LPCWSTR ExportToRename = nullptr, D3D12_EXPORT_FLAGS Flags = D3D12_EXPORT_FLAG_NONE)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (D3D12_EXPORT_DESC Export ; Export . Name = m_Strings .)",
    "insertText": "LocalCopy(Name)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (Export . ExportToRename = m_Strings .)",
    "insertText": "LocalCopy(ExportToRename)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Export . Flags = Flags ; m_Exports .)",
    "insertText": "push_back(Export)"
  },
  {
    "label": "UINT()",
    "kind": "Method",
    "detail": "Function (m_Desc . pExports =& m_Exports [ 0 ] ; m_Desc . NumExports = static_cast<)",
    "insertText": "UINT(m_Exports.size())"
  },
  {
    "label": "DefineExports()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> void)",
    "insertText": "DefineExports(LPCWSTR(&Exports)[N])"
  },
  {
    "label": "DefineExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineExport(Exports[i])"
  },
  {
    "label": "DefineExports()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DefineExports(const LPCWSTR* Exports, UINT N)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Data()"
  },
  {
    "label": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetExistingCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExistingCollection(ID3D12StateObject*pExistingCollection)"
  },
  {
    "label": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetSubobjectToAssociate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubobjectToAssociate(const D3D12_STATE_SUBOBJECT& SubobjectToAssociate)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (m_Desc . pSubobjectToAssociate =& SubobjectToAssociate ; } void)",
    "insertText": "AddExport(LPCWSTR Export)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_Desc . NumExports + + ; m_Exports .)",
    "insertText": "push_back(m_Strings.LocalCopy(Export))"
  },
  {
    "label": "AddExports()",
    "kind": "Method",
    "detail": "Function (m_Desc . pExports =& m_Exports [ 0 ] ; } template<size_t N> void)",
    "insertText": "AddExports(LPCWSTR (&Exports)[N])"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExport(Exports[i])"
  },
  {
    "label": "AddExports()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddExports(const LPCWSTR* Exports, UINT N)"
  },
  {
    "label": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetSubobjectNameToAssociate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubobjectNameToAssociate(LPCWSTR SubobjectToAssociate)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . SubobjectToAssociate = m_SubobjectName .)",
    "insertText": "LocalCopy(SubobjectToAssociate, true)"
  },
  {
    "label": "CD3DX12_HIT_GROUP_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_HIT_GROUP_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetHitGroupExport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHitGroupExport(LPCWSTR exportName)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . HitGroupExport = m_Strings [ 0 ] .)",
    "insertText": "LocalCopy(exportName, true)"
  },
  {
    "label": "SetHitGroupType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHitGroupType(D3D12_HIT_GROUP_TYPE Type)"
  },
  {
    "label": "SetAnyHitShaderImport()",
    "kind": "Method",
    "detail": "Function (m_Desc . Type = Type ; } void)",
    "insertText": "SetAnyHitShaderImport(LPCWSTR importName)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . AnyHitShaderImport = m_Strings [ 1 ] .)",
    "insertText": "LocalCopy(importName, true)"
  },
  {
    "label": "SetClosestHitShaderImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClosestHitShaderImport(LPCWSTR importName)"
  },
  {
    "label": "SetIntersectionShaderImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIntersectionShaderImport(LPCWSTR importName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_Desc = { } ;)",
    "insertText": "for(UINT i = 0; i < m_NumStrings; i++)"
  },
  {
    "label": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Config(UINT MaxPayloadSizeInBytes, UINT MaxAttributeSizeInBytes)"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Config(UINT MaxTraceRecursionDepth)"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Config(UINT MaxTraceRecursionDepth, D3D12_RAYTRACING_PIPELINE_FLAGS Flags)"
  },
  {
    "label": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetRootSignature()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRootSignature(ID3D12RootSignature* pRootSig)"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (} D3DX12_COM_PTR<ID3D12RootSignature> m_pRootSig ; } ; class CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (} D3DX12_COM_PTR<ID3D12RootSignature> m_pRootSig ; } ; class CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(D3D12_STATE_OBJECT_FLAGS Flags)"
  },
  {
    "label": "CD3DX12_NODE_MASK_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_NODE_MASK_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetNodeMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNodeMask(UINT NodeMask)"
  },
  {
    "label": "CD3DX12_STREAM_OUTPUT_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CD3DX12_STREAM_OUTPUT_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_STREAM_OUTPUT_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STREAM_OUTPUT_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetSODeclEntries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSODeclEntries(const D3D12_SO_DECLARATION_ENTRY* soDeclEntries, UINT numEntries)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_soDecalEntries .)",
    "insertText": "resize(numEntries)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_soDecalEntries [ i ] = D3D12_SO_DECLARATION_ENTRY { soDeclEntries [ i ] . Stream,m_Strings .)",
    "insertText": "LocalCopy(soDeclEntries[i].SemanticName)"
  },
  {
    "label": "SetBufferStrides()",
    "kind": "Method",
    "detail": "Function (} m_Desc . pSODeclaration =& m_soDecalEntries [ 0 ] ; m_Desc . NumEntries = numEntries ; } void)",
    "insertText": "SetBufferStrides(const UINT* bufferStrides, UINT numStrides)"
  },
  {
    "label": "SetRasterizedStream()",
    "kind": "Method",
    "detail": "Function (m_Desc . pBufferStrides = bufferStrides ; m_Desc . NumStrides = numStrides ; } void)",
    "insertText": "SetRasterizedStream(UINT rasterizedStream)"
  },
  {
    "label": "CD3DX12_BLEND_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_BLEND_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetAlphaToCoverageEnable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlphaToCoverageEnable(bool alphaToCoverageEnable)"
  },
  {
    "label": "SetIndependentBlendEnable()",
    "kind": "Method",
    "detail": "Function (m_Desc . AlphaToCoverageEnable = alphaToCoverageEnable ; } void)",
    "insertText": "SetIndependentBlendEnable(bool independentBlendEnable)"
  },
  {
    "label": "SetRenderTarget()",
    "kind": "Method",
    "detail": "Function (m_Desc . IndependentBlendEnable = independentBlendEnable ; } void)",
    "insertText": "SetRenderTarget(UINT renderTargetIndex, const D3D12_RENDER_TARGET_BLEND_DESC& renderTargetBlendDesc)"
  },
  {
    "label": "CD3DX12_BLEND_DESC()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_BLEND_DESC(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_RASTERIZER_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RASTERIZER_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetFillMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillMode(D3D12_FILL_MODE fillMode)"
  },
  {
    "label": "SetCullMode()",
    "kind": "Method",
    "detail": "Function (m_Desc . FillMode = fillMode ; } void)",
    "insertText": "SetCullMode(D3D12_CULL_MODE cullMode)"
  },
  {
    "label": "SetFrontCounterClockwise()",
    "kind": "Method",
    "detail": "Function (m_Desc . CullMode = cullMode ; } void)",
    "insertText": "SetFrontCounterClockwise(BOOL frontCounterClockwise)"
  },
  {
    "label": "SetDepthBias()",
    "kind": "Method",
    "detail": "Function (m_Desc . FrontCounterClockwise = frontCounterClockwise ; } void)",
    "insertText": "SetDepthBias(FLOAT depthBias)"
  },
  {
    "label": "SetDepthBiasClamp()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthBias = depthBias ; } void)",
    "insertText": "SetDepthBiasClamp(FLOAT depthBiasClamp)"
  },
  {
    "label": "SetSlopeScaledDepthBias()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthBiasClamp = depthBiasClamp ; } void)",
    "insertText": "SetSlopeScaledDepthBias(FLOAT slopeScaledDepthBias)"
  },
  {
    "label": "SetDepthClipEnable()",
    "kind": "Method",
    "detail": "Function (m_Desc . SlopeScaledDepthBias = slopeScaledDepthBias ; } void)",
    "insertText": "SetDepthClipEnable(BOOL depthClipEnable)"
  },
  {
    "label": "SetLineRasterizationMode()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthClipEnable = depthClipEnable ; } void)",
    "insertText": "SetLineRasterizationMode(D3D12_LINE_RASTERIZATION_MODE lineRasterizationMode)"
  },
  {
    "label": "SetForcedSampleCount()",
    "kind": "Method",
    "detail": "Function (m_Desc . LineRasterizationMode = lineRasterizationMode ; } void)",
    "insertText": "SetForcedSampleCount(UINT forcedSampleCount)"
  },
  {
    "label": "SetConservativeRaster()",
    "kind": "Method",
    "detail": "Function (m_Desc . ForcedSampleCount = forcedSampleCount ; } void)",
    "insertText": "SetConservativeRaster(D3D12_CONSERVATIVE_RASTERIZATION_MODE conservativeRaster)"
  },
  {
    "label": "CD3DX12_RASTERIZER_DESC2()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_RASTERIZER_DESC2(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL2_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DEPTH_STENCIL2_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetDepthEnable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepthEnable(BOOL depthEnable)"
  },
  {
    "label": "SetDepthWriteMask()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthEnable = depthEnable ; } void)",
    "insertText": "SetDepthWriteMask(D3D12_DEPTH_WRITE_MASK depthWriteMask)"
  },
  {
    "label": "SetDepthFunc()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthWriteMask = depthWriteMask ; } void)",
    "insertText": "SetDepthFunc(D3D12_COMPARISON_FUNC depthFunc)"
  },
  {
    "label": "SetStencilEnable()",
    "kind": "Method",
    "detail": "Function (m_Desc . DepthFunc = depthFunc ; } void)",
    "insertText": "SetStencilEnable(BOOL stencilEnable)"
  },
  {
    "label": "SetFrontFace()",
    "kind": "Method",
    "detail": "Function (m_Desc . StencilEnable = stencilEnable ; } void)",
    "insertText": "SetFrontFace(D3D12_DEPTH_STENCILOP_DESC1 frontFace)"
  },
  {
    "label": "SetBackFace()",
    "kind": "Method",
    "detail": "Function (m_Desc . FrontFace = { frontFace . StencilFailOp,frontFace . StencilDepthFailOp,frontFace . StencilPassOp,frontFace . StencilFunc,frontFace . StencilReadMask,frontFace . StencilWriteMask } ; } void)",
    "insertText": "SetBackFace(D3D12_DEPTH_STENCILOP_DESC1 backFace)"
  },
  {
    "label": "SetDepthBoundsTestEnable()",
    "kind": "Method",
    "detail": "Function (m_Desc . BackFace = { backFace . StencilFailOp,backFace . StencilDepthFailOp,backFace . StencilPassOp,backFace . StencilFunc,backFace . StencilReadMask,backFace . StencilWriteMask } ; } void)",
    "insertText": "SetDepthBoundsTestEnable(BOOL depthBoundsTestEnable)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_DESC2()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_DEPTH_STENCIL_DESC2(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_INPUT_LAYOUT_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_INPUT_LAYOUT_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "AddInputLayoutElementDesc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddInputLayoutElementDesc(D3D12_INPUT_ELEMENT_DESC inputLayoutElementDesc)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_inputLayoutElements .)",
    "insertText": "emplace_back(D3D12_INPUT_ELEMENT_DESC{ m_Strings.LocalCopy(inputLayoutElementDesc.SemanticName), inputLayoutElementDesc.SemanticIndex, inputLayoutElementDesc.Format, inputLayoutElementDesc.InputSlot, inputLayoutElementDesc.AlignedByteOffset, inputLayoutElementDesc.InputSlotClass, inputLayoutElementDesc.InstanceDataStepRate })"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (std::list<D3D12_INPUT_ELEMENT_DESC>::iterator inputLayoutIt = m_inputLayoutElements .)",
    "insertText": "begin()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_inputLayoutElementsVector .)",
    "insertText": "resize(m_numElements)"
  },
  {
    "label": "CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetIBStripCutValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIBStripCutValue(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE ibStripCutValue)"
  },
  {
    "label": "CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetPrimitiveTopologyType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPrimitiveTopologyType(D3D12_PRIMITIVE_TOPOLOGY_TYPE primitiveTopologytype)"
  },
  {
    "label": "CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetNumRenderTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumRenderTargets(UINT numRenderTargets)"
  },
  {
    "label": "SetRenderTargetFormat()",
    "kind": "Method",
    "detail": "Function (m_Desc . NumRenderTargets = numRenderTargets ; } void)",
    "insertText": "SetRenderTargetFormat(UINT renderTarget, DXGI_FORMAT renderTargetFormat)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetDepthStencilFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepthStencilFormat(DXGI_FORMAT depthStencilFormat)"
  },
  {
    "label": "CD3DX12_SAMPLE_DESC_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SAMPLE_DESC_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCount(UINT count)"
  },
  {
    "label": "SetQuality()",
    "kind": "Method",
    "detail": "Function (m_Desc . Count = count ; } void)",
    "insertText": "SetQuality(UINT quality)"
  },
  {
    "label": "CD3DX12_FLAGS_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_FLAGS_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(D3D12_PIPELINE_STATE_FLAGS flags)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VIEW_INSTANCING_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "AddViewInstanceLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddViewInstanceLocation(D3D12_VIEW_INSTANCE_LOCATION viewInstanceLocation)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_viewInstanceCount + + ; m_viewInstanceLocations .)",
    "insertText": "emplace_back(D3D12_VIEW_INSTANCE_LOCATION { viewInstanceLocation.ViewportArrayIndex, viewInstanceLocation.RenderTargetArrayIndex })"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(D3D12_VIEW_INSTANCING_FLAGS flags)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_viewInstanceLocationsVector .)",
    "insertText": "resize(m_viewInstanceCount)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DEPTH_STENCIL_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetStencilReadMask()",
    "kind": "Method",
    "detail": "Function (m_Desc . StencilEnable = stencilEnable ; } void)",
    "insertText": "SetStencilReadMask(UINT8 stencilReadMask)"
  },
  {
    "label": "SetStencilWriteMask()",
    "kind": "Method",
    "detail": "Function (m_Desc . StencilReadMask = stencilReadMask ; } void)",
    "insertText": "SetStencilWriteMask(UINT8 stencilWriteMask)"
  },
  {
    "label": "SetFrontFace()",
    "kind": "Method",
    "detail": "Function (m_Desc . StencilWriteMask = stencilWriteMask ; } void)",
    "insertText": "SetFrontFace(D3D12_DEPTH_STENCILOP_DESC frontFace)"
  },
  {
    "label": "SetBackFace()",
    "kind": "Method",
    "detail": "Function (m_Desc . FrontFace = { frontFace . StencilFailOp,frontFace . StencilDepthFailOp,frontFace . StencilPassOp,frontFace . StencilFunc } ; } void)",
    "insertText": "SetBackFace(D3D12_DEPTH_STENCILOP_DESC backFace)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_DESC()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL1_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DEPTH_STENCIL1_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_DESC1()",
    "kind": "Method",
    "detail": "Function (m_Desc =)",
    "insertText": "CD3DX12_DEPTH_STENCIL_DESC1(D3D12_DEFAULT)"
  },
  {
    "label": "CD3DX12_SAMPLE_MASK_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SAMPLE_MASK_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetSampleMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSampleMask(UINT sampleMask)"
  },
  {
    "label": "CD3DX12_GENERIC_PROGRAM_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GENERIC_PROGRAM_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "SetProgramName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProgramName(LPCWSTR ProgramName)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . ProgramName = m_Strings .)",
    "insertText": "LocalCopy(ProgramName)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExport(LPCWSTR exportName)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Exports .)",
    "insertText": "emplace_back(m_Strings.LocalCopy(exportName))"
  },
  {
    "label": "AddSubobject()",
    "kind": "Method",
    "detail": "Function (m_numExports + + ; } void)",
    "insertText": "AddSubobject(const D3D12_STATE_SUBOBJECT& subobject)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Subobjects .)",
    "insertText": "emplace_back(&subobject)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_ExportsVector .)",
    "insertText": "resize(m_numExports)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_ExportsVector [ i ] =* exportIt ; } m_Desc . pExports =& m_ExportsVector [ 0 ] ; } else { m_Desc . pExports = nullptr ; } m_Desc . NumExports = m_numExports ;)",
    "insertText": "if(m_numSubobjects > 0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_SubobjectsVector .)",
    "insertText": "resize(m_numSubobjects)"
  },
  {
    "label": "NewOutputOverride()",
    "kind": "Method",
    "detail": "Function (m_ppOwner = ppOwner ;* m_ppOwner = nullptr ; m_pNumOutputOverrides = pNumOutputOverrides ;* m_pNumOutputOverrides = 0 ; } void)",
    "insertText": "NewOutputOverride()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Desc .)",
    "insertText": "emplace_back(D3D12_NODE_OUTPUT_OVERRIDES{})"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (* m_ppOwner = m_Desc .)",
    "insertText": "data()"
  },
  {
    "label": "OutputIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OutputIndex(UINT index)"
  },
  {
    "label": "NewName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NewName(LPCWSTR Name, UINT ArrayIndex = 0)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_NodeIDs .)",
    "insertText": "emplace_front(D3D12_NODE_ID{ m_Strings.LocalCopy(Name),ArrayIndex })"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (m_Desc .)",
    "insertText": "back().pNewName = &m_NodeIDs.front()"
  },
  {
    "label": "AllowSparseNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllowSparseNodes(BOOL bAllow)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINTs .)",
    "insertText": "emplace_front((UINT)bAllow)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (m_Desc .)",
    "insertText": "back().pAllowSparseNodes = (BOOL*)&m_UINTs.front()"
  },
  {
    "label": "MaxOutputRecords()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaxOutputRecords(UINT maxOutputRecords)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINTs .)",
    "insertText": "emplace_front(maxOutputRecords)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (m_Desc .)",
    "insertText": "back().pMaxRecords = &m_UINTs.front()"
  },
  {
    "label": "MaxOutputRecordsSharedWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaxOutputRecordsSharedWith(UINT outputIndex)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINTs .)",
    "insertText": "emplace_front(outputIndex)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (m_Desc .)",
    "insertText": "back().pMaxRecordsSharedWithOutputIndex = &m_UINTs.front()"
  },
  {
    "label": "CD3DX12_NODE_HELPER_BASE()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<D3D12_NODE_OUTPUT_OVERRIDES> m_Desc ; CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR,std::wstring> m_Strings ; std::forward_list<UINT> m_UINTs ; std::forward_list<D3D12_NODE_ID> m_NodeIDs ; const D3D12_NODE_OUTPUT_OVERRIDES** m_ppOwner ; UINT* m_pNumOutputOverrides ; } ; class CD3DX12_NODE_HELPER_BASE { public : ~)",
    "insertText": "CD3DX12_NODE_HELPER_BASE()"
  },
  {
    "label": "CD3DX12_SHADER_NODE()",
    "kind": "Method",
    "detail": "Function (} ; class CD3DX12_SHADER_NODE : public CD3DX12_NODE_HELPER_BASE { public :)",
    "insertText": "CD3DX12_SHADER_NODE(D3D12_NODE* pNode, LPCWSTR _Shader = nullptr)"
  },
  {
    "label": "Shader()",
    "kind": "Method",
    "detail": "Function (m_pDesc = pNode ; m_pDesc -> NodeType = D3D12_NODE_TYPE_SHADER ;)",
    "insertText": "Shader(_Shader)"
  },
  {
    "label": "Shader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shader(LPCWSTR _Shader)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_pDesc -> Shader . Shader = m_Strings .)",
    "insertText": "LocalCopy(_Shader)"
  },
  {
    "label": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (} D3D12_NODE* m_pDesc ; private : CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR,std::wstring> m_Strings ; } ; class CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES : public CD3DX12_NODE_HELPER_BASE { public :)",
    "insertText": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES(D3D12_NODE* pNode, LPCWSTR _Shader = nullptr) : m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)"
  },
  {
    "label": "LocalRootArgumentsTableIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LocalRootArgumentsTableIndex(UINT index)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINTs .)",
    "insertText": "emplace_front(index)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (Overrides . pLocalRootArgumentsTableIndex =& m_UINTs .)",
    "insertText": "front()"
  },
  {
    "label": "ProgramEntry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramEntry(BOOL bIsProgramEntry)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINTs .)",
    "insertText": "emplace_front(bIsProgramEntry)"
  },
  {
    "label": "pProgramEntry()",
    "kind": "Method",
    "detail": "Function (Overrides .)",
    "insertText": "pProgramEntry(BOOL*)&m_UINTs.front()"
  },
  {
    "label": "NewName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NewName(D3D12_NODE_ID NodeID)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_NodeIDs .)",
    "insertText": "emplace_front(D3D12_NODE_ID{ m_Strings.LocalCopy(NodeID.Name),NodeID.ArrayIndex })"
  },
  {
    "label": "ShareInputOf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShareInputOf(D3D12_NODE_ID NodeID)"
  },
  {
    "label": "DispatchGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchGrid(UINT x, UINT y, UINT z)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINT3s .)",
    "insertText": "emplace_front(UINT3{ x,y,z })"
  },
  {
    "label": "pDispatchGrid()",
    "kind": "Method",
    "detail": "Function (Overrides .)",
    "insertText": "pDispatchGrid(UINT*)&m_UINT3s.front()"
  },
  {
    "label": "MaxDispatchGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaxDispatchGrid(UINT x, UINT y, UINT z)"
  },
  {
    "label": "emplace_front()",
    "kind": "Method",
    "detail": "Function (m_UINT3s .)",
    "insertText": "emplace_front(UINT3{x,y,z})"
  },
  {
    "label": "pMaxDispatchGrid()",
    "kind": "Method",
    "detail": "Function (Overrides .)",
    "insertText": "pMaxDispatchGrid(UINT*)&m_UINT3s.front()"
  },
  {
    "label": "NodeOutputOverrides()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_NODE_OUTPUT_OVERRIDES&)",
    "insertText": "NodeOutputOverrides()"
  },
  {
    "label": "CD3DX12_WORK_GRAPH_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_WORK_GRAPH_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)"
  },
  {
    "label": "AddEntrypoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEntrypoint(D3D12_NODE_ID Entrypoint)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Entrypoints .)",
    "insertText": "emplace_back(D3D12_NODE_ID{ m_Strings.LocalCopy(Entrypoint.Name),Entrypoint.ArrayIndex })"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (m_NumEntrypoints + + ; } template<T> T*)",
    "insertText": "CreateNode()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_NodeDescs .)",
    "insertText": "push_back({})"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_NumNodes + + ; T* pNodeHelper = new)",
    "insertText": "T(&m_NodeDescs.back())"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_OwnedNodeHelpers .)",
    "insertText": "emplace_back(pNodeHelper)"
  },
  {
    "label": "CD3DX12_SHADER_NODE()",
    "kind": "Method",
    "detail": "Function (auto pNode = CreateNode<)",
    "insertText": "CD3DX12_SHADER_NODE()"
  },
  {
    "label": "Shader()",
    "kind": "Method",
    "detail": "Function (pNode ->)",
    "insertText": "Shader(Shader)"
  },
  {
    "label": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (auto pNode = CreateNode<)",
    "insertText": "CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES()"
  },
  {
    "label": "CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (auto pNode = CreateNode<)",
    "insertText": "CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES()"
  },
  {
    "label": "CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (auto pNode = CreateNode<)",
    "insertText": "CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES()"
  },
  {
    "label": "CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES()",
    "kind": "Method",
    "detail": "Function (auto pNode = CreateNode<)",
    "insertText": "CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_EntrypointsVector .)",
    "insertText": "resize(m_NumEntrypoints)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_NodeDescsVector .)",
    "insertText": "resize(m_NumNodes)"
  }
]