[
  {
    "label": "FThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThread"
  },
  {
    "label": "FConditionVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConditionVariable"
  },
  {
    "label": "FMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMutex"
  },
  {
    "label": "pas_heap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pas_heap"
  },
  {
    "label": "FHeapIterationSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeapIterationSet"
  },
  {
    "label": "FCollectionCycleRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionCycleRequest"
  },
  {
    "label": "FGlobalHeapRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalHeapRoot"
  },
  {
    "label": "FGlobalHeapCensusRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalHeapCensusRoot"
  },
  {
    "label": "FHeapPageHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapPageHeader"
  },
  {
    "label": "FIOContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIOContext"
  },
  {
    "label": "FMarkStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStack"
  },
  {
    "label": "FSubspace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubspace"
  },
  {
    "label": "VEmergentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VEmergentType"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeap"
  },
  {
    "label": "FContextImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextImpl"
  },
  {
    "label": "FWeakKeyMapGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakKeyMapGuard"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (namespace UE { class FConditionVariable ; class FMutex ; } \" C \" struct pas_heap ; namespace Verse { class FHeapIterationSet ; struct FCollectionCycleRequest ; struct FGlobalHeapRoot ; struct FGlobalHeapCensusRoot ; struct FHeapPageHeader ; struct FIOContext ; struct FMarkStack ; class FSubspace ; struct VEmergentType ; template<T> struct)",
    "insertText": "alignas(alignof(T))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (enum class EWeakBarrierState { Inactive,MarkOnRead,AttemptingToTerminate,CheckMarkedOnRead } ; class FHeap final { public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "IsMarking()",
    "kind": "Method",
    "detail": "Function (FSubspace* FastSpace ; FSubspace* AuxSpace ; FSubspace* DestructorSpace ; FSubspace* CensusSpace ; FSubspace* DestructorAndCensusSpace ; FSubspace* EmergentSpace ; FHeapIterationSet* DestructorIterationSet ; FHeapIterationSet* CensusIterationSet ; size_t MinimumTrigger ; bool)",
    "insertText": "IsMarking()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Address = reinterpret_cast<)",
    "insertText": "uintptr_t(Ptr)"
  },
  {
    "label": "Address()",
    "kind": "Method",
    "detail": "Function (uintptr_t ChunkBase =)",
    "insertText": "Address(static_cast<uintptr_t>(VERSE_HEAP_CHUNK_SIZE) - 1)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uintptr_t BitIndex = ChunkOffset>> VERSE_HEAP_MIN_ALIGN_SHIFT ; uintptr_t WordIndex = BitIndex>> 5 ; return reinterpret_cast<std::atomic<)",
    "insertText": "uint32(ChunkBase)"
  },
  {
    "label": "GetMarkBitIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMarkBitIndex(const void* Ptr)"
  },
  {
    "label": "GetMarkBitMask()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMarkBitMask(const void* Ptr)"
  },
  {
    "label": "IsMarked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMarked(const void* Ptr)"
  },
  {
    "label": "GetMarkBitWord()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32>* Word =)",
    "insertText": "GetMarkBitWord(Ptr)"
  },
  {
    "label": "GetMarkBitMask()",
    "kind": "Method",
    "detail": "Function (uint32 Mask =)",
    "insertText": "GetMarkBitMask(Ptr)"
  },
  {
    "label": "EmergentTypePtrToOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "EmergentTypePtrToOffset(const VEmergentType* EmergentType)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Offset(BitCast<uint8*>(EmergentType) - BitCast<uint8*>(FHeap::EmergentTypeBase))"
  },
  {
    "label": "ReportAllocatedNativeBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportAllocatedNativeBytes(ptrdiff_t Bytes)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (LiveNativeBytes + = static_cast<)",
    "insertText": "size_t(Bytes)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(static_cast<ptrdiff_t>(LiveNativeBytes) < 0)"
  },
  {
    "label": "ReportDeallocatedNativeBytes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReportDeallocatedNativeBytes(size_t Bytes)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t AllocatedBytes = static_cast<)",
    "insertText": "size_t(-static_cast<ptrdiff_t>(Bytes))"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(AllocatedBytes == Bytes)"
  },
  {
    "label": "ReportAllocatedNativeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportAllocatedNativeBytes(AllocatedBytes)"
  },
  {
    "label": "GetLiveNativeBytes()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetLiveNativeBytes()"
  },
  {
    "label": "RequestFreshCollectionCycle()",
    "kind": "Method",
    "detail": "Function (FCollectionCycleRequest)",
    "insertText": "RequestFreshCollectionCycle()"
  },
  {
    "label": "GetCompletedCycleVersion()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCompletedCycleVersion()"
  },
  {
    "label": "DisableExternalControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableExternalControl()"
  },
  {
    "label": "IsExternallyControlled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternallyControlled()"
  },
  {
    "label": "ExternallySynchronouslyStartGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternallySynchronouslyStartGC(FIOContext Context)"
  },
  {
    "label": "IsGCTerminationPendingExternalSignal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGCTerminationPendingExternalSignal(FIOContext Context)"
  },
  {
    "label": "ExternallySynchronouslyTerminateGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternallySynchronouslyTerminateGC(FIOContext Context)"
  },
  {
    "label": "TryToExternallySynchronouslyTerminateGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToExternallySynchronouslyTerminateGC(FIOContext Context)"
  },
  {
    "label": "AddExternalMarkStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalMarkStack(FMarkStack&&)"
  },
  {
    "label": "OwnsAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OwnsAddress(void*)"
  },
  {
    "label": "GetTotalTimeSpentCollecting()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTotalTimeSpentCollecting()"
  },
  {
    "label": "IsWithoutThreadingDuringCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithoutThreadingDuringCollection()"
  },
  {
    "label": "NormalizeWithoutThreadingAtCollectionStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NormalizeWithoutThreadingAtCollectionStart()"
  },
  {
    "label": "CollectorThreadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectorThreadMain()"
  },
  {
    "label": "CollectorThreadBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectorThreadBody(FIOContext Context)"
  },
  {
    "label": "WaitForTrigger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTrigger(FIOContext Context)"
  },
  {
    "label": "RunCollectionCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCollectionCycle(FIOContext Context)"
  },
  {
    "label": "RunPreMarking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPreMarking(FIOContext Context)"
  },
  {
    "label": "RunPostMarking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPostMarking(FIOContext Context)"
  },
  {
    "label": "MarkForExternalControlWithoutThreading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkForExternalControlWithoutThreading(FIOContext Context)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate()"
  },
  {
    "label": "CancelTermination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTermination()"
  },
  {
    "label": "BeginCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCollection(FIOContext Context)"
  },
  {
    "label": "MarkRoots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRoots(FIOContext Context)"
  },
  {
    "label": "Mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mark(FIOContext Context)"
  },
  {
    "label": "AttemptToTerminate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptToTerminate(FIOContext Context)"
  },
  {
    "label": "ConductCensus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConductCensus(FIOContext Context)"
  },
  {
    "label": "RunDestructors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDestructors(FIOContext Context)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sweep(FIOContext Context)"
  },
  {
    "label": "EndCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCollection(FIOContext Context)"
  },
  {
    "label": "LiveBytesTriggerCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LiveBytesTriggerCallback()"
  },
  {
    "label": "CensusCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CensusCallback(void* Object, void* Arg)"
  },
  {
    "label": "DestructorCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructorCallback(void* Object, void* Arg)"
  },
  {
    "label": "CheckCycleTriggerInvariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckCycleTriggerInvariants()"
  },
  {
    "label": "RequestCollectionCycle()",
    "kind": "Method",
    "detail": "Function (FCollectionCycleRequest)",
    "insertText": "RequestCollectionCycle(uint64 DesiredRequestCompleteDelta)"
  },
  {
    "label": "IsGCTerminationPendingExternalSignalImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGCTerminationPendingExternalSignalImpl()"
  },
  {
    "label": "ReportMarkedNativeBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMarkedNativeBytes(size_t Bytes)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (MarkedNativeBytes + = Bytes ;)",
    "insertText": "V_DIE_IF(static_cast<ptrdiff_t>(MarkedNativeBytes) < 0)"
  }
]