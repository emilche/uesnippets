[
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SDockingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingNode"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Docking / SDockingNode . h \" class SDockingTabStack ; class SDockingSplitter : public SDockingNode { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDockingSplitter)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs, const TSharedRef<FTabManager::FSplitter>& PersistentNode)"
  },
  {
    "label": "GetNodeType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetNodeType()"
  },
  {
    "label": "ReplaceChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceChild(const TSharedRef<SDockingNode>& InChildToReplace, const TSharedRef<SDockingNode>& Replacement)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild(const TSharedRef<SDockingNode>& ChildToRemove)"
  },
  {
    "label": "RemoveChildAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildAt(int32 IndexOfChildToRemove)"
  },
  {
    "label": "PlaceNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceNode(const TSharedRef<SDockingNode>& NodeToPlace, SDockingNode::RelativeDirection Direction, const TSharedRef<SDockingNode>& RelativeToMe)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation NewOrientation)"
  },
  {
    "label": "GetChildNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<SDockingNode>>&)",
    "insertText": "GetChildNodes()"
  },
  {
    "label": "GetChildNodesRecursively()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SDockingNode>>)",
    "insertText": "GetChildNodesRecursively()"
  },
  {
    "label": "GetAllChildTabs()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SDockTab>>)",
    "insertText": "GetAllChildTabs()"
  },
  {
    "label": "GetNumTabs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTabs()"
  },
  {
    "label": "GetSizeRule()",
    "kind": "Method",
    "detail": "Function (SSplitter::ESizeRule)",
    "insertText": "GetSizeRule()"
  },
  {
    "label": "GetSizeCoefficientForSlot()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSizeCoefficientForSlot(int32 Index)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "GatherPersistentLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayoutNode>)",
    "insertText": "GatherPersistentLayout()"
  },
  {
    "label": "FindTabStackToHouseWindowControls()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockingTabStack>)",
    "insertText": "FindTabStackToHouseWindowControls()"
  },
  {
    "label": "FindTabStackToHouseWindowIcon()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockingTabStack>)",
    "insertText": "FindTabStackToHouseWindowIcon()"
  },
  {
    "label": "DoesDirectionMatchOrientation()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "DoesDirectionMatchOrientation(SDockingNode::RelativeDirection InDirection, EOrientation InOrientation)"
  },
  {
    "label": "MostResponsibility()",
    "kind": "Method",
    "detail": "Function (SDockingNode::ECleanupRetVal)",
    "insertText": "MostResponsibility(SDockingNode::ECleanupRetVal A, SDockingNode::ECleanupRetVal B)"
  },
  {
    "label": "CleanUpNodes()",
    "kind": "Method",
    "detail": "Function (SDockingNode::ECleanupRetVal)",
    "insertText": "CleanUpNodes()"
  },
  {
    "label": "OnResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResized()"
  },
  {
    "label": "ComputeChildCoefficientTotal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeChildCoefficientTotal()"
  },
  {
    "label": "FindTabStack()",
    "kind": "Method",
    "detail": "Function (enum class ETabStackToFind { UpperLeft,UpperRight } ; TSharedRef<SDockingNode>)",
    "insertText": "FindTabStack(ETabStackToFind FindMe)"
  },
  {
    "label": "AdjustDockedTabsIfNeeded()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SSplitter> Splitter ; TArray<TSharedRef<class SDockingNode>> Children ; void)",
    "insertText": "AdjustDockedTabsIfNeeded()"
  }
]