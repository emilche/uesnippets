[
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SDockingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingNode"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, const TSharedRef<FTabManager::FSplitter>& PersistentNode )"
  },
  {
    "label": "AddChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildNode( const TSharedRef<SDockingNode>& InChild, int32 InLocation = INDEX_NONE)"
  },
  {
    "label": "ReplaceChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceChild( const TSharedRef<SDockingNode>& InChildToReplace, const TSharedRef<SDockingNode>& Replacement )"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild( const TSharedRef<SDockingNode>& ChildToRemove )"
  },
  {
    "label": "RemoveChildAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildAt( int32 IndexOfChildToRemove )"
  },
  {
    "label": "PlaceNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceNode( const TSharedRef<SDockingNode>& NodeToPlace, SDockingNode::RelativeDirection Direction, const TSharedRef<SDockingNode>& RelativeToMe )"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation NewOrientation)"
  },
  {
    "label": "DoesDirectionMatchOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesDirectionMatchOrientation( SDockingNode::RelativeDirection InDirection, EOrientation InOrientation )"
  },
  {
    "label": "MostResponsibility()",
    "kind": "Method",
    "detail": "Function (SDockingNode::ECleanupRetVal)",
    "insertText": "MostResponsibility( SDockingNode::ECleanupRetVal A, SDockingNode::ECleanupRetVal B )"
  },
  {
    "label": "AdjustDockedTabsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustDockedTabsIfNeeded()"
  }
]