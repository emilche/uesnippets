[
  {
    "label": "AudioFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioFrame"
  },
  {
    "label": "AudioLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioLevel"
  },
  {
    "label": "AudioLevel()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_AUDIO_LEVEL_H_ # define AUDIO_AUDIO_LEVEL_H_ # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class AudioFrame ; namespace voe { class AudioLevel { public :)",
    "insertText": "AudioLevel()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "LevelFullRange()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "LevelFullRange()"
  },
  {
    "label": "ResetLevelFullRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLevelFullRange()"
  },
  {
    "label": "ComputeLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLevel(const AudioFrame& audioFrame, double duration)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : enum { kUpdateFrequency = 1 0 } ; Mutex mutex_ ; int16_t abs_max_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]