[
  {
    "label": "NetworkBackendTcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBackendTcp"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Connection"
  },
  {
    "label": "ListenEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListenEntry"
  },
  {
    "label": "NetworkBackendTcp()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogger . h \" # include \" UbaNetworkBackend . h \" # include \" UbaThread . h \" namespace uba { class NetworkBackendTcp : public NetworkBackend { public :)",
    "insertText": "NetworkBackendTcp(LogWriter& writer, const tchar* prefix = TC(\"NetworkBackendTcp\"))"
  },
  {
    "label": "NetworkBackendTcp()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkBackendTcp()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(void* connection)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(Logger& logger, void* connection, const void* data, u32 dataSize, SendContext& sendContext)"
  },
  {
    "label": "SetDataSentCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSentCallback(void* connection, void* context, DataSentCallback* callback)"
  },
  {
    "label": "SetRecvCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvCallbacks(void* connection, void* context, u32 headerSize, RecvHeaderCallback* h, RecvBodyCallback* b, const tchar* recvHint)"
  },
  {
    "label": "SetRecvTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvTimeout(void* connection, u32 timeoutMs)"
  },
  {
    "label": "SetDisconnectCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisconnectCallback(void* connection, void* context, DisconnectCallback* callback)"
  },
  {
    "label": "SetAllowLessThanBodySize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowLessThanBodySize(void* connection, bool allow)"
  },
  {
    "label": "StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListen(Logger& logger, u16 port, const tchar* ip, const ListenConnectedFunc& connectedFunc)"
  },
  {
    "label": "StopListen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListen()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const tchar* ip, const ConnectedFunc& connectedFunc, u16 port = DefaultPort, bool* timedOut = nullptr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const sockaddr& remoteSocketAddr, const ConnectedFunc& connectedFunc, bool* timedOut = nullptr, const tchar* nameHint = nullptr)"
  },
  {
    "label": "GetTotalSendAndRecv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTotalSendAndRecv(u64& outSend, u64& outRecv)"
  },
  {
    "label": "EnsureInitialized()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "EnsureInitialized(Logger& logger)"
  },
  {
    "label": "ThreadListen()",
    "kind": "Method",
    "detail": "Function (struct Connection ; struct ListenEntry ; bool)",
    "insertText": "ThreadListen(Logger& logger, ListenEntry& entry)"
  },
  {
    "label": "ThreadRecv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadRecv(Connection& connection)"
  }
]