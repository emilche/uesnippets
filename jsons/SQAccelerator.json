[
  {
    "label": "FOverlapHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapHit"
  },
  {
    "label": "FPTOverlapHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTOverlapHit"
  },
  {
    "label": "FPTRaycastHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTRaycastHit"
  },
  {
    "label": "FPTSweepHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPTSweepHit"
  },
  {
    "label": "FRaycastHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRaycastHit"
  },
  {
    "label": "FSweepHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSweepHit"
  },
  {
    "label": "FSQHitBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSQHitBuffer"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "ISpatialAcceleration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAcceleration"
  },
  {
    "label": "FSQAccelerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSQAccelerator"
  },
  {
    "label": "ICollisionQueryFilterCallbackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICollisionQueryFilterCallbackBase"
  },
  {
    "label": "FCollisionFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionFilterData"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FChaosSQAccelerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosSQAccelerator"
  },
  {
    "label": "ISQAccelerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISQAccelerator"
  },
  {
    "label": "FSQAcceleratorUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSQAcceleratorUnion"
  },
  {
    "label": "FChaosSQAccelerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Real . h \" # include \" ChaosInterfaceWrapperCore . h \" # include \" ChaosSQTypes . h \" # include \" Containers / Array . h \" # include \" Math / BoxSphereBounds . h \" # include \" Math / MathFwd . h \" # include \" Math / Transform . h \" # include \" PhysicsInterfaceDeclaresCore . h \" # include \" PhysicsInterfaceWrapperShared . h \" namespace ChaosInterface { struct FOverlapHit ; } namespace ChaosInterface { struct FPTOverlapHit ; } namespace ChaosInterface { struct FPTRaycastHit ; } namespace ChaosInterface { struct FPTSweepHit ; } namespace ChaosInterface { struct FRaycastHit ; } namespace ChaosInterface { struct FSweepHit ; } namespace ChaosInterface { template<HitType> class FSQHitBuffer ; } namespace Chaos { class FAccelerationStructureHandle ; class FImplicitObject ; template<TPayload,T,int d> class ISpatialAcceleration ; } class FSQAccelerator ; class ICollisionQueryFilterCallbackBase ; struct FCollisionFilterData ; struct FCollisionQueryParams ; struct FCollisionQueryParams ; class FChaosSQAccelerator { public :)",
    "insertText": "FChaosSQAccelerator(const Chaos::ISpatialAcceleration<Chaos::FAccelerationStructureHandle,Chaos::FReal, 3>& InSpatialAcceleration)"
  },
  {
    "label": "FChaosSQAccelerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChaosSQAccelerator()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Raycast(const FVector& Start, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<ChaosInterface::FRaycastHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Raycast(const FVector& Start, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<ChaosInterface::FPTRaycastHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sweep(const Chaos::FImplicitObject& QueryGeom, const FTransform& StartTM, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<ChaosInterface::FSweepHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sweep(const Chaos::FImplicitObject& QueryGeom, const FTransform& StartTM, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<ChaosInterface::FPTSweepHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Overlap(const Chaos::FImplicitObject& QueryGeom, const FTransform& GeomPose, ChaosInterface::FSQHitBuffer<ChaosInterface::FOverlapHit>& HitBuffer, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Overlap(const Chaos::FImplicitObject& QueryGeom, const FTransform& GeomPose, ChaosInterface::FSQHitBuffer<ChaosInterface::FPTOverlapHit>& HitBuffer, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams = {})"
  },
  {
    "label": "RaycastImp()",
    "kind": "Method",
    "detail": "Function (private : const Chaos::ISpatialAcceleration<Chaos::FAccelerationStructureHandle,Chaos::FReal,3>& SpatialAcceleration ; template<TRaycastHit> void)",
    "insertText": "RaycastImp(const FVector& Start, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<TRaycastHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams)"
  },
  {
    "label": "ISQAccelerator()",
    "kind": "Method",
    "detail": "Function (} ; class ISQAccelerator { public : ~)",
    "insertText": "ISQAccelerator()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Raycast(const FVector& Start, const FVector& Dir, const float DeltaMagnitude, FPhysicsHitCallback<FHitRaycast>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sweep(const FPhysicsGeometry& QueryGeom, const FTransform& StartTM, const FVector& Dir, const float DeltaMagnitude, FPhysicsHitCallback<FHitSweep>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Overlap(const FPhysicsGeometry& QueryGeom, const FTransform& GeomPose, FPhysicsHitCallback<FHitOverlap>& HitBuffer, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback)"
  },
  {
    "label": "AddSQAccelerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSQAccelerator(ISQAccelerator* InAccelerator)"
  },
  {
    "label": "RemoveSQAccelerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSQAccelerator(ISQAccelerator* AcceleratorToRemove)"
  }
]