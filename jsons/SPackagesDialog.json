[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPackageButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageButton"
  },
  {
    "label": "FPackageItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageItem"
  },
  {
    "label": "SPackagesDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPackagesDialog"
  },
  {
    "label": "SPackageItemsListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPackageItemsListRow"
  },
  {
    "label": "FPackageButton()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" ISourceControlModule . h \" # include \" ISourceControlProvider . h \" # include \" ISourceControlState . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Misc / PackageName . h \" # include \" PackagesDialog . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Package . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" class ITableRow ; class SCheckBox ; class SHorizontalBox ; class STableViewBase ; class SWidget ; class UObject ; struct FGeometry ; struct FKeyEvent ; class FPackageButton : public TSharedFromThis<FPackageButton> { public :)",
    "insertText": "FPackageButton(FPackagesDialogModule* InModule, EDialogReturnType InType, EDialogButtonStyle InStyle, const FText& InName, const FText& InToolTip, TAttribute<bool> InDisabled = false) : Module(InModule) , Name(InName) , ToolTip(InToolTip) , Type(InType) , Style(InStyle) , Clicked(false) , Disabled(InDisabled)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnButtonClicked()"
  },
  {
    "label": "RemovePackagesDialog()",
    "kind": "Method",
    "detail": "Function (Clicked = true ; Module ->)",
    "insertText": "RemovePackagesDialog()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetName()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Disabled .)",
    "insertText": "Set(InDisabled)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "FPackageItem()",
    "kind": "Method",
    "detail": "Function (Clicked = false ; } private : FPackagesDialogModule* Module ; FText Name ; FText ToolTip ; EDialogReturnType Type ; EDialogButtonStyle Style ; bool Clicked ; TAttribute<bool> Disabled ; } ; class FPackageItem : public TSharedFromThis<FPackageItem> { public :)",
    "insertText": "FPackageItem(UPackage* InPackage, const FString& InAssetName, const FString& InFileName, const FString& InOwnerName, ECheckBoxState InState, bool InDisabled = false, FString InIconName=TEXT(\"\"), FString InIconToolTip=TEXT(\"\")) : Package(InPackage) , AssetName(InAssetName) , PackageName(FPackageName::ObjectPathToPackageName(InPackage->GetName())) , FileName(InFileName) , OwnerName(InOwnerName) , State(InState) , Disabled(InDisabled) , IconName(InIconName) , IconToolTip(InIconToolTip)"
  },
  {
    "label": "OnGetDisplayCheckState()",
    "kind": "Method",
    "detail": "Function (State = ECheckBoxState::Undetermined ; } } ECheckBoxState)",
    "insertText": "OnGetDisplayCheckState()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (RefreshButtonCallback .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = InNewState ;)",
    "insertText": "if(State == ECheckBoxState::Checked && Disabled)"
  },
  {
    "label": "SetRefreshCallback()",
    "kind": "Method",
    "detail": "Function (State = ECheckBoxState::Undetermined ; } } void)",
    "insertText": "SetRefreshCallback(FSimpleDelegate InRefreshButtonCallback)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (RefreshButtonCallback = InRefreshButtonCallback ; } ECheckBoxState)",
    "insertText": "GetState()"
  },
  {
    "label": "HasMultipleAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMultipleAssets()"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisabled()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ISourceControlProvider& SourceControlProvider =)",
    "insertText": "Get().GetProvider()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (FSourceControlStatePtr SourceControlState = SourceControlProvider .)",
    "insertText": "GetState(Package, EStateCacheUsage::Use)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString CheckedOutBy ;)",
    "insertText": "if(SourceControlState.IsValid())"
  },
  {
    "label": "IsCheckedOutOther()",
    "kind": "Method",
    "detail": "Function (SourceControlState ->)",
    "insertText": "IsCheckedOutOther(&CheckedOutBy)"
  },
  {
    "label": "GetOtherBranchHeadModification()",
    "kind": "Method",
    "detail": "Function (FString HeadBranch,HeadAction ; int32 HeadCL ; SourceControlState ->)",
    "insertText": "GetOtherBranchHeadModification(HeadBranch, HeadAction, HeadCL)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FNumberFormattingOptions NoCommas ; NoCommas . UseGrouping = false ; return)",
    "insertText": "Format(TEXT(\"Modified in {0} CL:{1} ({2})\"), { HeadBranch, FText::AsNumber(HeadCL, &NoCommas).ToString(), HeadAction })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SourceControlState->IsCheckedOutInOtherBranch())"
  },
  {
    "label": "GetTypeNameAndColor()",
    "kind": "Method",
    "detail": "Function (} } } return CheckedOutBy ; } bool)",
    "insertText": "GetTypeNameAndColor(FText& OutName, FColor& OutColor)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetTypeNameAndColor()",
    "kind": "Method",
    "detail": "Function (FText OutName ; FColor OutColor ;)",
    "insertText": "GetTypeNameAndColor(OutName, OutColor)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (State = NewState ; } private : UPackage* Package ; FString AssetName ; FString PackageName ; FString FileName ; FString OwnerName ; ECheckBoxState State ; bool Disabled ; FString IconName ; FString IconToolTip ; FSimpleDelegate RefreshButtonCallback ; TWeakObjectPtr<UObject> Object ; } ; class SPackagesDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPackagesDialog) : _ReadOnly(false) , _AllowSourceControlConnection(false) , _Message() , _Warning()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, ReadOnly) SLATE_ATTRIBUTE(bool, AllowSourceControlConnection) SLATE_ARGUMENT(FText, Message) SLATE_ARGUMENT(FText, Warning) SLATE_EVENT(FSimpleDelegate, OnSourceControlStateChanged) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GenerateWidgetForItemAndColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForItemAndColumn(TSharedPtr<FPackageItem> Item, const FName ColumnID)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TSharedPtr<FPackageItem> Item)"
  },
  {
    "label": "AddButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddButton(TSharedPtr<FPackageButton> Button)"
  },
  {
    "label": "SetMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessage(const FText& InMessage)"
  },
  {
    "label": "SetWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWarning(const FText& InMessage)"
  },
  {
    "label": "GetReturnType()",
    "kind": "Method",
    "detail": "Function (EDialogReturnType)",
    "insertText": "GetReturnType(OUT TArray<UPackage*>& OutCheckedPackages, OUT TArray<UPackage*>& OutUncheckedPackages, OUT TArray<UPackage*>& OutUndeterminedPackages)"
  },
  {
    "label": "GetWidgetToFocusOnActivate()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetWidgetToFocusOnActivate()"
  },
  {
    "label": "GetConnectToSourceControlVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetConnectToSourceControlVisibility()"
  },
  {
    "label": "OnConnectToSourceControlClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnConnectToSourceControlClicked()"
  },
  {
    "label": "PopulateIgnoreForSaveItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateIgnoreForSaveItems(const TSet<FString>& InIgnorePackages)"
  },
  {
    "label": "PopulateIgnoreForSaveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateIgnoreForSaveArray(OUT TSet<FString>& InOutIgnorePackages)"
  },
  {
    "label": "IsSourceControlConnectionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceControlConnectionAllowed()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "RefreshButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshButtons()"
  },
  {
    "label": "GetToggleSelectedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetToggleSelectedState()"
  },
  {
    "label": "OnToggleSelectedCheckBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSelectedCheckBox(ECheckBoxState InNewState)"
  },
  {
    "label": "MakePackageListItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakePackageListItemWidget(TSharedPtr<FPackageItem> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "MakePackageListContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakePackageListContextMenu()"
  },
  {
    "label": "CanExecuteSCCDiffAgainstDepot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSCCDiffAgainstDepot()"
  },
  {
    "label": "ExecuteSCCDiffAgainstDepot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSCCDiffAgainstDepot()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FPackageItem>>)",
    "insertText": "GetSelectedItems(bool bAllIfNone)"
  },
  {
    "label": "GetMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMessage()"
  },
  {
    "label": "GetWarning()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetWarning()"
  },
  {
    "label": "GetWarningVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetWarningVisibility()"
  },
  {
    "label": "GetColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetColumnSortMode(const FName ColumnId)"
  },
  {
    "label": "OnColumnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "RequestSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSort()"
  },
  {
    "label": "SortTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTree()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SCheckBox> ToggleSelectedCheckBox ; TArray<TSharedPtr<FPackageItem>> Items ; TSharedPtr<SListView<TSharedPtr<FPackageItem>>> ItemListView ; TArray<TSharedPtr<FPackageButton>> Buttons ; TSharedPtr<SHorizontalBox> ButtonsBox ; FSimpleDelegate RefreshButtonsCallback ; TSharedPtr<SHorizontalBox> MessageBox ; bool bReadOnly ; bool bAllowSourceControlConnection ; bool bShowWarning ; bool bSortDirty ; FText Message ; FText Warning ; FName SortByColumn ; EColumnSortMode::Type SortMode ; FSimpleDelegate OnSourceControlStateChanged ; } ; class SPackageItemsListRow : public SMultiColumnTableRow<TSharedPtr<FPackageItem>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPackageItemsListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr< SPackagesDialog >, PackagesDialog ) SLATE_ARGUMENT( TSharedPtr< FPackageItem >, Item ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  }
]