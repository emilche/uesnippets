[
  {
    "label": "FArchiveEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveEntry"
  },
  {
    "label": "FInternationalizationArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalizationArchive"
  },
  {
    "label": "FLocMetadataObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocMetadataObject"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ILocFileNotifies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILocFileNotifies"
  },
  {
    "label": "LOCALIZATION_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LOCALIZATION_API"
  },
  {
    "label": "FConflict",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConflict"
  },
  {
    "label": "FRowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRowData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / InternationalizationArchive . h \" # include \" Internationalization / InternationalizationManifest . h \" # include \" Internationalization / LocKeyFuncs . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / ObjectMacros . h \" # include \" LocTextHelper . generated . h \" class FArchiveEntry ; class FInternationalizationArchive ; class FLocMetadataObject ; class FText ; class FJsonObject ; enum class ELocTextHelperLoadFlags : uint8 { Load = 1<<0,Create = 1<<1,LoadOrCreate = Load | Create,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELocTextHelperLoadFlags)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum class ELocTextExportSourceMethod : uint8 { SourceText,NativeText,} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ILocFileNotifies()",
    "kind": "Method",
    "detail": "Function (None,Confidential,All,} ; class ILocFileNotifies { public : ~)",
    "insertText": "ILocFileNotifies()"
  },
  {
    "label": "PreFileRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreFileRead(const FString& InFilename)"
  },
  {
    "label": "PostFileRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFileRead(const FString& InFilename)"
  },
  {
    "label": "PreFileWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreFileWrite(const FString& InFilename)"
  },
  {
    "label": "PostFileWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFileWrite(const FString& InFilename)"
  },
  {
    "label": "ShouldSplitPlatformData()",
    "kind": "Method",
    "detail": "Function (} ; struct FLocTextPlatformSplitUtils { bool)",
    "insertText": "ShouldSplitPlatformData(const ELocTextPlatformSplitMode& InSplitMode)"
  },
  {
    "label": "GetPlatformsToSplit()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetPlatformsToSplit(const ELocTextPlatformSplitMode& InSplitMode)"
  },
  {
    "label": "FConflict()",
    "kind": "Method",
    "detail": "Function (} ; enum class EConflictReportFormat : uint8 { None,Txt,CSV } ; class FLocTextConflicts { private : struct FConflict { public :)",
    "insertText": "FConflict(FLocKey InNamespace, FLocKey InKey, TSharedPtr<FLocMetadataObject> InKeyMetadataObj) : Namespace(MoveTemp(InNamespace)) , Key(MoveTemp(InKey)) , KeyMetadataObj(MoveTemp(InKeyMetadataObj))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FLocItem& Source, const FString& SourceLocation)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (EntriesBySourceLocation .)",
    "insertText": "AddUnique(SourceLocation, Source)"
  },
  {
    "label": "FLocTextConflicts()",
    "kind": "Method",
    "detail": "Function (} const FLocKey Namespace ; const FLocKey Key ; TSharedPtr<FLocMetadataObject> KeyMetadataObj ; TMultiMap<FString,FLocItem> EntriesBySourceLocation ; } ; typedef TMultiMap<FLocKey,TSharedRef<FConflict>> FConflictMap ; public :)",
    "insertText": "FLocTextConflicts()"
  },
  {
    "label": "AddConflict()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConflict(const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject>& InKeyMetadata, const FLocItem& InSource, const FString& InSourceLocation)"
  },
  {
    "label": "GetConflictReport()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConflictReport()"
  },
  {
    "label": "GetConflictReportAsCSV()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConflictReportAsCSV()"
  },
  {
    "label": "FLocTextConflicts()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FLocTextConflicts(const FLocTextConflicts&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLocTextConflicts&)",
    "insertText": "operator(const FLocTextConflicts&)"
  },
  {
    "label": "FindEntryByKey()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FConflict>)",
    "insertText": "FindEntryByKey(const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadata)"
  },
  {
    "label": "FRowData()",
    "kind": "Method",
    "detail": "Function (private : FConflictMap EntriesByKey ; } ; class FLocTextWordCounts { public : struct FRowData { FDateTime Timestamp ; int32 SourceWordCount ; TMap<FString,int32> PerCultureWordCounts ;)",
    "insertText": "FRowData() : Timestamp() , SourceWordCount(0) , PerCultureWordCounts()"
  },
  {
    "label": "ResetWordCounts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetWordCounts()"
  },
  {
    "label": "IdenticalWordCounts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IdenticalWordCounts(const FRowData& InOther)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (} ; FRowData&)",
    "insertText": "AddRow(int32* OutIndex = nullptr)"
  },
  {
    "label": "GetRow()",
    "kind": "Method",
    "detail": "Function (FRowData*)",
    "insertText": "GetRow(const int32 InIndex)"
  },
  {
    "label": "GetRowCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRowCount()"
  },
  {
    "label": "TrimReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimReport()"
  },
  {
    "label": "FromCSV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromCSV(const FString& InCSVString, FText* OutError = nullptr)"
  },
  {
    "label": "ToCSV()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToCSV()"
  },
  {
    "label": "SortRowsByDate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SortRowsByDate()"
  },
  {
    "label": "FLocTextHelper()",
    "kind": "Method",
    "detail": "Function (const FString ColHeadingDateTime ; const FString ColHeadingWordCount ; TArray<FRowData> Rows ; } ; class FLocTextHelper { public :)",
    "insertText": "FLocTextHelper(FString InTargetName, TSharedPtr<ILocFileNotifies> InLocFileNotifies, const ELocTextPlatformSplitMode InPlatformSplitMode = ELocTextPlatformSplitMode::None)"
  },
  {
    "label": "FLocTextHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLocTextHelper(FString InTargetPath, FString InManifestName, FString InArchiveName, FString InNativeCulture, TArray<FString> InForeignCultures, TSharedPtr<ILocFileNotifies> InLocFileNotifies, const ELocTextPlatformSplitMode InPlatformSplitMode = ELocTextPlatformSplitMode::None)"
  },
  {
    "label": "ShouldSplitPlatformData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSplitPlatformData()"
  },
  {
    "label": "GetPlatformSplitMode()",
    "kind": "Method",
    "detail": "Function (ELocTextPlatformSplitMode)",
    "insertText": "GetPlatformSplitMode()"
  },
  {
    "label": "GetPlatformsToSplit()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetPlatformsToSplit()"
  },
  {
    "label": "GetTargetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetTargetName()"
  },
  {
    "label": "GetTargetPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetTargetPath()"
  },
  {
    "label": "GetLocFileNotifies()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ILocFileNotifies>)",
    "insertText": "GetLocFileNotifies()"
  },
  {
    "label": "SetCopyrightNotice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCopyrightNotice(const FString& InCopyrightNotice)"
  },
  {
    "label": "GetCopyrightNotice()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCopyrightNotice()"
  },
  {
    "label": "GetNativeCulture()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetNativeCulture()"
  },
  {
    "label": "GetForeignCultures()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetForeignCultures()"
  },
  {
    "label": "GetAllCultures()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAllCultures(const bool bSingleCultureMode = false)"
  },
  {
    "label": "HasManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasManifest()"
  },
  {
    "label": "LoadManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadManifest(const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "LoadManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadManifest(const FString& InManifestFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifest(FText* OutError = nullptr)"
  },
  {
    "label": "SerializeManifestToJson()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeManifestToJson(TSharedRef<FJsonObject> JsonObject)"
  },
  {
    "label": "SaveManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifest(const FString& InManifestFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "TrimManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimManifest()"
  },
  {
    "label": "HasNativeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeArchive()"
  },
  {
    "label": "LoadNativeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadNativeArchive(const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "LoadNativeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadNativeArchive(const FString& InArchiveFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveNativeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveNativeArchive(FText* OutError = nullptr)"
  },
  {
    "label": "SaveNativeArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveNativeArchive(const FString& InArchiveFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "HasForeignArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasForeignArchive(const FString& InCulture)"
  },
  {
    "label": "LoadForeignArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadForeignArchive(const FString& InCulture, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "LoadForeignArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadForeignArchive(const FString& InCulture, const FString& InArchiveFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveForeignArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveForeignArchive(const FString& InCulture, FText* OutError = nullptr)"
  },
  {
    "label": "SaveForeignArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveForeignArchive(const FString& InCulture, const FString& InArchiveFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "HasArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasArchive(const FString& InCulture)"
  },
  {
    "label": "LoadArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadArchive(const FString& InCulture, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "LoadArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadArchive(const FString& InCulture, const FString& InArchiveFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveArchive(const FString& InCulture, FText* OutError = nullptr)"
  },
  {
    "label": "SaveArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveArchive(const FString& InCulture, const FString& InArchiveFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "LoadAllArchives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAllArchives(const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveAllArchives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAllArchives(FText* OutError = nullptr)"
  },
  {
    "label": "TrimArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimArchive(const FString& InCulture)"
  },
  {
    "label": "LoadAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAll(const ELocTextHelperLoadFlags InLoadFlags, FText* OutError = nullptr)"
  },
  {
    "label": "SaveAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAll(FText* OutError = nullptr)"
  },
  {
    "label": "AddDependency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDependency(const FString& InDependencyFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "FindDependencyEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FManifestEntry>)",
    "insertText": "FindDependencyEntry(const FLocKey& InNamespace, const FLocKey& InKey, const FString* InSourceText = nullptr, FString* OutDependencyFilePath = nullptr)"
  },
  {
    "label": "FindDependencyEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FManifestEntry>)",
    "insertText": "FindDependencyEntry(const FLocKey& InNamespace, const FManifestContext& InContext, FString* OutDependencyFilePath = nullptr)"
  },
  {
    "label": "AddSourceText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSourceText(const FLocKey& InNamespace, const FLocItem& InSource, const FManifestContext& InContext, const FString* InDescription = nullptr)"
  },
  {
    "label": "UpdateSourceText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSourceText(const TSharedRef<FManifestEntry>& InOldEntry, TSharedRef<FManifestEntry>& InNewEntry)"
  },
  {
    "label": "FindSourceText()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FManifestEntry>)",
    "insertText": "FindSourceText(const FLocKey& InNamespace, const FLocKey& InKey, const FString* InSourceText = nullptr)"
  },
  {
    "label": "FindSourceText()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FManifestEntry>)",
    "insertText": "FindSourceText(const FLocKey& InNamespace, const FManifestContext& InContext)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(TSharedRef<FManifestEntry>)"
  },
  {
    "label": "EnumerateSourceTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSourceTexts(const FEnumerateSourceTextsFuncPtr& InCallback, const bool InCheckDependencies)"
  },
  {
    "label": "AddTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTranslation(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject>& InKeyMetadataObj, const FLocItem& InSource, const FLocItem& InTranslation, const bool InOptional)"
  },
  {
    "label": "AddTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTranslation(const FString& InCulture, const TSharedRef<FArchiveEntry>& InEntry)"
  },
  {
    "label": "UpdateTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTranslation(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject>& InKeyMetadataObj, const FLocItem& InSource, const FLocItem& InTranslation)"
  },
  {
    "label": "UpdateTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTranslation(const FString& InCulture, const TSharedRef<FArchiveEntry>& InOldEntry, const TSharedRef<FArchiveEntry>& InNewEntry)"
  },
  {
    "label": "ImportTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTranslation(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj, const FLocItem& InSource, const FLocItem& InTranslation, const bool InOptional)"
  },
  {
    "label": "FindTranslation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchiveEntry>)",
    "insertText": "FindTranslation(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(TSharedRef<FArchiveEntry>)"
  },
  {
    "label": "EnumerateTranslations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTranslations(const FString& InCulture, const FEnumerateTranslationsFuncPtr& InCallback, const bool InCheckDependencies)"
  },
  {
    "label": "GetExportText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExportText(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj, const ELocTextExportSourceMethod InSourceMethod, const FLocItem& InSource, FLocItem& OutSource, FLocItem& OutTranslation)"
  },
  {
    "label": "GetRuntimeText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRuntimeText(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj, const ELocTextExportSourceMethod InSourceMethod, const FLocItem& InSource, FLocItem& OutTranslation, const bool bSkipSourceCheck)"
  },
  {
    "label": "SaveConflictReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveConflictReport(const FString& InReportFilePath, EConflictReportFormat InConflictReportFormat, FText* OutError = nullptr)"
  },
  {
    "label": "GetWordCountReport()",
    "kind": "Method",
    "detail": "Function (FLocTextWordCounts)",
    "insertText": "GetWordCountReport(const FDateTime& InTimestamp, const TCHAR* InBaseReportFilePath = nullptr)"
  },
  {
    "label": "SaveWordCountReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveWordCountReport(const FDateTime& InTimestamp, const FString& InReportFilePath, FText* OutError = nullptr)"
  },
  {
    "label": "SanitizeLogOutput()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeLogOutput(FStringView InString)"
  },
  {
    "label": "SanitizeLogOutput()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeLogOutput(FString&& InString)"
  },
  {
    "label": "FindKeysForLegacyTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindKeysForLegacyTranslation(const FString& InCulture, const FLocKey& InNamespace, const FString& InSource, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj, TArray<FLocKey>& OutKeys)"
  },
  {
    "label": "FindKeysForLegacyTranslation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindKeysForLegacyTranslation(const TSharedRef<const FInternationalizationManifest>& InManifest, const TSharedPtr<const FInternationalizationArchive>& InNativeArchive, const FLocKey& InNamespace, const FString& InSource, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj, TArray<FLocKey>& OutKeys)"
  },
  {
    "label": "FLocTextHelper()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FLocTextHelper(const FLocTextHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLocTextHelper&)",
    "insertText": "operator(const FLocTextHelper&)"
  },
  {
    "label": "LoadManifestImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternationalizationManifest>)",
    "insertText": "LoadManifestImpl(const FString& InManifestFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError)"
  },
  {
    "label": "SaveManifestImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifestImpl(const TSharedRef<const FInternationalizationManifest>& InManifest, const FString& InManifestFilePath, FText* OutError)"
  },
  {
    "label": "LoadArchiveImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternationalizationArchive>)",
    "insertText": "LoadArchiveImpl(const FString& InArchiveFilePath, const ELocTextHelperLoadFlags InLoadFlags, FText* OutError)"
  },
  {
    "label": "SaveArchiveImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveArchiveImpl(const TSharedRef<const FInternationalizationArchive>& InArchive, const FString& InArchiveFilePath, FText* OutError)"
  },
  {
    "label": "FindTranslationImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchiveEntry>)",
    "insertText": "FindTranslationImpl(const FString& InCulture, const FLocKey& InNamespace, const FLocKey& InKey, const TSharedPtr<FLocMetadataObject> InKeyMetadataObj)"
  }
]