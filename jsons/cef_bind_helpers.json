[
  {
    "label": "SupportsAddRefAndRelease",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsAddRefAndRelease"
  },
  {
    "label": "BaseMixin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BaseMixin"
  },
  {
    "label": "Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Base"
  },
  {
    "label": "Helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Helper"
  },
  {
    "label": "UnsafeBindtoRefCountedArgHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnsafeBindtoRefCountedArgHelper"
  },
  {
    "label": "UnsafeBindtoRefCountedArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnsafeBindtoRefCountedArg"
  },
  {
    "label": "HasIsMethodTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HasIsMethodTag"
  },
  {
    "label": "UnretainedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnretainedWrapper"
  },
  {
    "label": "ConstRefWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstRefWrapper"
  },
  {
    "label": "IgnoreResultHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IgnoreResultHelper"
  },
  {
    "label": "OwnedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OwnedWrapper"
  },
  {
    "label": "PassedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassedWrapper"
  },
  {
    "label": "UnwrapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnwrapTraits"
  },
  {
    "label": "MaybeRefcount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaybeRefcount"
  },
  {
    "label": "IsWeakMethod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsWeakMethod"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_BIND_HELPERS_H_ # define CEF_INCLUDE_BASE_CEF_BIND_HELPERS_H_ # pragma once # if)",
    "insertText": "defined(BASE_BIND_HELPERS_H_) #elif defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (namespace cef_internal { template<T> class SupportsAddRefAndRelease { typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; struct BaseMixin { void)",
    "insertText": "AddRef()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(OS_WIN) #pragma warning(push) #pragma warning(disable : 4624)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(OS_WIN) #pragma warning(pop) #endif template <void (BaseMixin::*)(void)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} ; template<C> No&)",
    "insertText": "Check(Helper<&C::AddRef>*)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (template<> Yes&)",
    "insertText": "Check(...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : const bool value =)",
    "insertText": "sizeof(Check<Base>(0)) == sizeof(Yes)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} ; template<bool IsClasstype,T> struct UnsafeBindtoRefCountedArgHelper : false_type { } ; template<T> struct UnsafeBindtoRefCountedArgHelper<true,T> : integral_constant<bool,SupportsAddRefAndRelease<T>::value> { } ; template<T> struct UnsafeBindtoRefCountedArg : false_type { } ; template<T> struct UnsafeBindtoRefCountedArg<T*> : UnsafeBindtoRefCountedArgHelper<is_class<T>::value,T> { } ; template<T> class HasIsMethodTag { typedef char Yes [ 1 ] ; typedef char No [ 2 ] ; template<U> Yes&)",
    "insertText": "Check(typename U::IsMethod*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : const bool value =)",
    "insertText": "sizeof(Check<T>(0)) == sizeof(Yes)"
  },
  {
    "label": "UnretainedWrapper()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class UnretainedWrapper { public :)",
    "insertText": "UnretainedWrapper(T* o) : ptr_(o)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "get()"
  },
  {
    "label": "IgnoreResultHelper()",
    "kind": "Method",
    "detail": "Function (} T functor_ ; } ; template<T> struct IgnoreResultHelper<Callback<T>> {)",
    "insertText": "IgnoreResultHelper(const Callback<T>& functor) : functor_(functor)"
  },
  {
    "label": "OwnedWrapper()",
    "kind": "Method",
    "detail": "Function (} const Callback<T>& functor_ ; } ; template<T> class OwnedWrapper { public :)",
    "insertText": "OwnedWrapper(T* o) : ptr_(o)"
  },
  {
    "label": "OwnedWrapper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OwnedWrapper()"
  },
  {
    "label": "PassedWrapper()",
    "kind": "Method",
    "detail": "Function (ptr_ = other . ptr_ ; other . ptr_ = NULL ; } private : T* ptr_ ; } ; template<T> class PassedWrapper { public :)",
    "insertText": "PassedWrapper(T scoper) : is_valid_(true), scoper_(scoper.Pass())"
  },
  {
    "label": "PassedWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassedWrapper(const PassedWrapper& other) : is_valid_(other.is_valid_), scoper_(other.scoper_.Pass())"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Pass()"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} private : bool is_valid_ ; T scoper_ ; } ; template<T> struct UnwrapTraits { typedef const T& ForwardType ; ForwardType)",
    "insertText": "Unwrap(const T& o)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct UnwrapTraits<ConstRefWrapper<T>> { typedef const T& ForwardType ; ForwardType)",
    "insertText": "Unwrap(ConstRefWrapper<T> const_ref)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct UnwrapTraits<scoped_refptr<T>> { typedef T* ForwardType ; ForwardType)",
    "insertText": "Unwrap(const scoped_refptr<T>& o)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct UnwrapTraits<WeakPtr<T>> { typedef const WeakPtr<T>& ForwardType ; ForwardType)",
    "insertText": "Unwrap(const WeakPtr<T>& o)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct UnwrapTraits<PassedWrapper<T>> { typedef T ForwardType ; T)",
    "insertText": "Unwrap(PassedWrapper<T>& o)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool is_method,T> struct MaybeRefcount ; template<T> struct MaybeRefcount<false,T> { void)",
    "insertText": "AddRef(const T&)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(const T&)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t n> struct MaybeRefcount<false,T [ n ]> { void)",
    "insertText": "AddRef(const T*)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(const T*)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct MaybeRefcount<true,T*> { void)",
    "insertText": "AddRef(T* o)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(T* o)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (o ->)",
    "insertText": "Release()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct MaybeRefcount<true,scoped_refptr<T>> { void)",
    "insertText": "AddRef(const scoped_refptr<T>& o)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(const scoped_refptr<T>& o)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct MaybeRefcount<true,const T*> { void)",
    "insertText": "AddRef(const T* o)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(const T* o)"
  },
  {
    "label": "Unretained()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool IsMethod,P1> struct IsWeakMethod : public false_type { } ; template<T> struct IsWeakMethod<true,WeakPtr<T>> : public true_type { } ; template<T> struct IsWeakMethod<true,ConstRefWrapper<WeakPtr<T>>> : public true_type { } ; } template<T> cef_internal::UnretainedWrapper<T>)",
    "insertText": "Unretained(T* o)"
  },
  {
    "label": "ConstRef()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::ConstRefWrapper<T>)",
    "insertText": "ConstRef(const T& o)"
  },
  {
    "label": "Owned()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::OwnedWrapper<T>)",
    "insertText": "Owned(T* o)"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::PassedWrapper<T>)",
    "insertText": "Passed(T scoper)"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::PassedWrapper<T>)",
    "insertText": "Passed(T* scoper)"
  },
  {
    "label": "IgnoreResult()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::IgnoreResultHelper<T>)",
    "insertText": "IgnoreResult(T data)"
  },
  {
    "label": "IgnoreResult()",
    "kind": "Method",
    "detail": "Function (} template<T> cef_internal::IgnoreResultHelper<Callback<T>>)",
    "insertText": "IgnoreResult(const Callback<T>& data)"
  },
  {
    "label": "DoNothing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoNothing()"
  },
  {
    "label": "DeletePointer()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "DeletePointer(T* obj)"
  }
]