[
  {
    "label": "LegacyStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LegacyStatsCollector"
  },
  {
    "label": "LegacyStatsCollectorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LegacyStatsCollectorTest"
  },
  {
    "label": "TransportStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportStats"
  },
  {
    "label": "SessionStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SessionStats"
  },
  {
    "label": "IceCandidateTypeToStatsType()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_LEGACY_STATS_COLLECTOR_H_ # define PC_LEGACY_STATS_COLLECTOR_H_ # include<stdint . h> # include<algorithm> # include<cstdint> # include<map> # include<memory> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / media_stream_interface . h \" # include \" api / peer_connection_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / stats_types . h \" # include \" p2p / base / connection_info . h \" # include \" p2p / base / port . h \" # include \" pc / legacy_stats_collector_interface . h \" # include \" pc / peer_connection_internal . h \" # include \" pc / rtp_transceiver . h \" # include \" pc / transport_stats . h \" # include \" rtc_base / network_constants . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { const char*)",
    "insertText": "IceCandidateTypeToStatsType(const std::string& candidate_type)"
  },
  {
    "label": "AdapterTypeToStatsType()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "AdapterTypeToStatsType(rtc::AdapterType type)"
  },
  {
    "label": "LegacyStatsCollector()",
    "kind": "Method",
    "detail": "Function (typedef std::map<std::string,StatsReport*> TrackIdMap ; class LegacyStatsCollector : public LegacyStatsCollectorInterface { public :)",
    "insertText": "LegacyStatsCollector(PeerConnectionInternal* pc)"
  },
  {
    "label": "LegacyStatsCollector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LegacyStatsCollector()"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStream(MediaStreamInterface* stream)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(MediaStreamTrackInterface* track)"
  },
  {
    "label": "AddLocalAudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalAudioTrack(AudioTrackInterface* audio_track, uint32_t ssrc)"
  },
  {
    "label": "RemoveLocalAudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLocalAudioTrack(AudioTrackInterface* audio_track, uint32_t ssrc)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(PeerConnectionInterface::StatsOutputLevel level)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(MediaStreamTrackInterface* track, StatsReports* reports)"
  },
  {
    "label": "PrepareReport()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "PrepareReport(bool local, uint32_t ssrc, const std::string& track_id, const StatsReport::Id& transport_id, StatsReport::Direction direction)"
  },
  {
    "label": "PrepareADMReport()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "PrepareADMReport()"
  },
  {
    "label": "IsValidTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTrack(const std::string& track_id)"
  },
  {
    "label": "InvalidateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCache()"
  },
  {
    "label": "UseStandardBytesStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseStandardBytesStats()"
  },
  {
    "label": "TransportStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportStats(std::string transport_name, cricket::TransportStats transport_stats) : name(std::move(transport_name)), stats(std::move(transport_stats))"
  },
  {
    "label": "TransportStats()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TransportStats(TransportStats&&)"
  },
  {
    "label": "TransportStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransportStats(const TransportStats&)"
  },
  {
    "label": "SessionStats()",
    "kind": "Method",
    "detail": "Function (std::string name ; cricket::TransportStats stats ; std::unique_ptr<rtc::SSLCertificateStats> local_cert_stats ; std::unique_ptr<rtc::SSLCertificateStats> remote_cert_stats ; } ; struct SessionStats {)",
    "insertText": "SessionStats()"
  },
  {
    "label": "SessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionStats(SessionStats&&)"
  },
  {
    "label": "SessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionStats(const SessionStats&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SessionStats&)",
    "insertText": "operator(SessionStats&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SessionStats&)",
    "insertText": "operator(SessionStats&)"
  },
  {
    "label": "GetTimeNow()",
    "kind": "Method",
    "detail": "Function (cricket::CandidateStatsList candidate_stats ; std::vector<TransportStats> transport_stats ; std::map<std::string,std::string> transport_names_by_mid ; } ; double)",
    "insertText": "GetTimeNow()"
  },
  {
    "label": "CopySelectedReports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopySelectedReports(const std::string& selector, StatsReports* reports)"
  },
  {
    "label": "AddCandidateReport()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "AddCandidateReport(const cricket::CandidateStats& candidate_stats, bool local)"
  },
  {
    "label": "AddCertificateReports()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "AddCertificateReports(std::unique_ptr<rtc::SSLCertificateStats> cert_stats)"
  },
  {
    "label": "AddConnectionInfoReport()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "AddConnectionInfoReport(const std::string& content_name, int component, int connection_id, const StatsReport::Id& channel_report_id, const cricket::ConnectionInfo& info)"
  },
  {
    "label": "ExtractDataInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractDataInfo()"
  },
  {
    "label": "ExtractSessionInfo()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,std::string>)",
    "insertText": "ExtractSessionInfo()"
  },
  {
    "label": "ExtractBweInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractBweInfo()"
  },
  {
    "label": "ExtractMediaInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractMediaInfo(const std::map<std::string, std::string>& transport_names_by_mid)"
  },
  {
    "label": "ExtractSenderInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSenderInfo()"
  },
  {
    "label": "GetReport()",
    "kind": "Method",
    "detail": "Function (webrtc::StatsReport*)",
    "insertText": "GetReport(const StatsReport::StatsType& type, const std::string& id, StatsReport::Direction direction)"
  },
  {
    "label": "UpdateStatsFromExistingLocalAudioTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsFromExistingLocalAudioTracks(bool has_remote_tracks)"
  },
  {
    "label": "UpdateReportFromAudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReportFromAudioTrack(AudioTrackInterface* track, StatsReport* report, bool has_remote_tracks)"
  },
  {
    "label": "UpdateTrackReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackReports()"
  },
  {
    "label": "ExtractSessionInfo_n()",
    "kind": "Method",
    "detail": "Function (SessionStats)",
    "insertText": "ExtractSessionInfo_n(const std::vector<rtc::scoped_refptr< RtpTransceiverProxyWithInternal<RtpTransceiver>>>& transceivers, absl::optional<std::string> sctp_transport_name, absl::optional<std::string> sctp_mid)"
  },
  {
    "label": "ExtractSessionInfo_s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSessionInfo_s(SessionStats& session_stats)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (StatsCollection reports_ ; TrackIdMap track_ids_ ; PeerConnectionInternal* const pc_ ; int64_t cache_timestamp_ms_)",
    "insertText": "RTC_GUARDED_BY(pc_->signaling_thread())"
  }
]