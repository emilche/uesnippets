[
  {
    "label": "ArgList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgList"
  },
  {
    "label": "Option",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Option"
  },
  {
    "label": "arg_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "arg_iterator"
  },
  {
    "label": "InputArgList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputArgList"
  },
  {
    "label": "DerivedArgList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DerivedArgList"
  },
  {
    "label": "SkipToNextArg()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OPTION_ARGLIST_H # define LLVM_OPTION_ARGLIST_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / SmallString . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / Option / Arg . h \" # include \" llvm / Option / OptSpecifier . h \" # include \" llvm / Option / Option . h \" # include<list> # include<memory> # include<string> # include<vector> namespace llvm { namespace opt { class ArgList ; class Option ; class arg_iterator { SmallVectorImpl<Arg*>::const_iterator Current ; const ArgList& Args ; OptSpecifier Id0,Id1,Id2 ; void)",
    "insertText": "SkipToNextArg()"
  },
  {
    "label": "arg_iterator()",
    "kind": "Method",
    "detail": "Function (public : typedef Arg* const* value_type ; typedef Arg* const& reference ; typedef Arg* const* pointer ; typedef std::forward_iterator_tag iterator_category ; typedef std::ptrdiff_t difference_type ;)",
    "insertText": "arg_iterator(SmallVectorImpl<Arg *>::const_iterator it, const ArgList &Args, OptSpecifier Id0 = 0U, OptSpecifier Id1 = 0U, OptSpecifier Id2 = 0U) : Current(it), Args(Args), Id0(Id0), Id1(Id1), Id2(Id2)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "Arg()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (arg_iterator)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "ArgList()",
    "kind": "Method",
    "detail": "Function (} } ; class ArgList { public : typedef SmallVector<Arg*,1 6> arglist_type ; typedef arglist_type::iterator iterator ; typedef arglist_type::const_iterator const_iterator ; typedef arglist_type::reverse_iterator reverse_iterator ; typedef arglist_type::const_reverse_iterator const_reverse_iterator ; private : arglist_type Args ; protected :)",
    "insertText": "ArgList()"
  },
  {
    "label": "ArgList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArgList(ArgList &&RHS) : Args(std::move(RHS.Args))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (RHS . Args .)",
    "insertText": "clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ArgList&)",
    "insertText": "operator(ArgList &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Args =)",
    "insertText": "move(RHS.Args)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "append(Arg *A)"
  },
  {
    "label": "getArgs()",
    "kind": "Method",
    "detail": "Function (arglist_type&)",
    "insertText": "getArgs()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "filtered_begin()",
    "kind": "Method",
    "detail": "Function (} arg_iterator)",
    "insertText": "filtered_begin(OptSpecifier Id0 = 0U, OptSpecifier Id1 = 0U, OptSpecifier Id2 = 0U)"
  },
  {
    "label": "filtered_end()",
    "kind": "Method",
    "detail": "Function (} arg_iterator)",
    "insertText": "filtered_end()"
  },
  {
    "label": "filtered()",
    "kind": "Method",
    "detail": "Function (} iterator_range<arg_iterator>)",
    "insertText": "filtered(OptSpecifier Id0 = 0U, OptSpecifier Id1 = 0U, OptSpecifier Id2 = 0U)"
  },
  {
    "label": "eraseArg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eraseArg(OptSpecifier Id)"
  },
  {
    "label": "hasArgNoClaim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasArgNoClaim(OptSpecifier Id)"
  },
  {
    "label": "hasArg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasArg(OptSpecifier Id)"
  },
  {
    "label": "hasArg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasArg(OptSpecifier Id0, OptSpecifier Id1)"
  },
  {
    "label": "hasArg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2)"
  },
  {
    "label": "getLastArgNoClaim()",
    "kind": "Method",
    "detail": "Function (} Arg*)",
    "insertText": "getLastArgNoClaim(OptSpecifier Id)"
  },
  {
    "label": "getLastArgNoClaim()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArgNoClaim(OptSpecifier Id0, OptSpecifier Id1)"
  },
  {
    "label": "getLastArgNoClaim()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArgNoClaim(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2)"
  },
  {
    "label": "getLastArgNoClaim()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArgNoClaim(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3, OptSpecifier Id4)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3, OptSpecifier Id4, OptSpecifier Id5)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3, OptSpecifier Id4, OptSpecifier Id5, OptSpecifier Id6)"
  },
  {
    "label": "getLastArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "getLastArg(OptSpecifier Id0, OptSpecifier Id1, OptSpecifier Id2, OptSpecifier Id3, OptSpecifier Id4, OptSpecifier Id5, OptSpecifier Id6, OptSpecifier Id7)"
  },
  {
    "label": "getArgString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getArgString(unsigned Index)"
  },
  {
    "label": "getNumInputArgStrings()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumInputArgStrings()"
  },
  {
    "label": "getLastArgValue()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getLastArgValue(OptSpecifier Id, StringRef Default = \"\")"
  },
  {
    "label": "getAllArgValues()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "getAllArgValues(OptSpecifier Id)"
  },
  {
    "label": "hasFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFlag(OptSpecifier Pos, OptSpecifier Neg, bool Default=true)"
  },
  {
    "label": "hasFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFlag(OptSpecifier Pos, OptSpecifier PosAlias, OptSpecifier Neg, bool Default = true)"
  },
  {
    "label": "AddLastArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLastArg(ArgStringList &Output, OptSpecifier Id0)"
  },
  {
    "label": "AddLastArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLastArg(ArgStringList &Output, OptSpecifier Id0, OptSpecifier Id1)"
  },
  {
    "label": "AddAllArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllArgs(ArgStringList &Output, OptSpecifier Id0, OptSpecifier Id1 = 0U, OptSpecifier Id2 = 0U)"
  },
  {
    "label": "AddAllArgValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllArgValues(ArgStringList &Output, OptSpecifier Id0, OptSpecifier Id1 = 0U, OptSpecifier Id2 = 0U)"
  },
  {
    "label": "AddAllArgsTranslated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllArgsTranslated(ArgStringList &Output, OptSpecifier Id0, const char *Translation, bool Joined = false)"
  },
  {
    "label": "ClaimAllArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClaimAllArgs(OptSpecifier Id0)"
  },
  {
    "label": "ClaimAllArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClaimAllArgs()"
  },
  {
    "label": "MakeArgStringRef()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "MakeArgStringRef(StringRef Str)"
  },
  {
    "label": "MakeArgString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "MakeArgString(const Twine &Str)"
  },
  {
    "label": "MakeArgStringRef()",
    "kind": "Method",
    "detail": "Function (SmallString<2 5 6> Buf ; return)",
    "insertText": "MakeArgStringRef(Str.toStringRef(Buf))"
  },
  {
    "label": "GetOrMakeJoinedArgString()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetOrMakeJoinedArgString(unsigned Index, StringRef LHS, StringRef RHS)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (} ; class InputArgList final : public ArgList { private : ArgStringList ArgStrings ; std::list<std::string> SynthesizedStrings ; unsigned NumInputArgStrings ; void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "InputArgList()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "InputArgList(const char* const *ArgBegin, const char* const *ArgEnd)"
  },
  {
    "label": "InputArgList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputArgList(InputArgList &&RHS) : ArgList(std::move(RHS)), ArgStrings(std::move(RHS.ArgStrings)), SynthesizedStrings(std::move(RHS.SynthesizedStrings)), NumInputArgStrings(RHS.NumInputArgStrings)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InputArgList&)",
    "insertText": "operator(InputArgList &&RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(std::move(RHS))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (ArgStrings =)",
    "insertText": "move(RHS.ArgStrings)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (SynthesizedStrings =)",
    "insertText": "move(RHS.SynthesizedStrings)"
  },
  {
    "label": "InputArgList()",
    "kind": "Method",
    "detail": "Function (NumInputArgStrings = RHS . NumInputArgStrings ; return* this ; } ~)",
    "insertText": "InputArgList()"
  },
  {
    "label": "MakeIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "MakeIndex(StringRef String0, StringRef String1)"
  },
  {
    "label": "DerivedArgList()",
    "kind": "Method",
    "detail": "Function (} ; class DerivedArgList final : public ArgList { const InputArgList& BaseArgs ; SmallVector<std::unique_ptr<Arg>,1 6> SynthesizedArgs ; public :)",
    "insertText": "DerivedArgList(const InputArgList &BaseArgs)"
  },
  {
    "label": "getBaseArgs()",
    "kind": "Method",
    "detail": "Function (} const InputArgList&)",
    "insertText": "getBaseArgs()"
  },
  {
    "label": "AddFlagArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFlagArg(const Arg *BaseArg, const Option Opt)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(MakeFlagArg(BaseArg, Opt))"
  },
  {
    "label": "AddPositionalArg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPositionalArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(MakePositionalArg(BaseArg, Opt, Value))"
  },
  {
    "label": "AddSeparateArg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSeparateArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(MakeSeparateArg(BaseArg, Opt, Value))"
  },
  {
    "label": "AddJoinedArg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddJoinedArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(MakeJoinedArg(BaseArg, Opt, Value))"
  },
  {
    "label": "MakeFlagArg()",
    "kind": "Method",
    "detail": "Function (} Arg*)",
    "insertText": "MakeFlagArg(const Arg *BaseArg, const Option Opt)"
  },
  {
    "label": "MakePositionalArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "MakePositionalArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  },
  {
    "label": "MakeSeparateArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "MakeSeparateArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  },
  {
    "label": "MakeJoinedArg()",
    "kind": "Method",
    "detail": "Function (Arg*)",
    "insertText": "MakeJoinedArg(const Arg *BaseArg, const Option Opt, StringRef Value)"
  }
]