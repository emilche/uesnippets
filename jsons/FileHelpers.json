[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "EFileInteraction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileInteraction"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "UEditorLoadingAndSavingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorLoadingAndSavingUtils"
  },
  {
    "label": "FEditorFileUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorFileUtils"
  },
  {
    "label": "FShouldIgnorePackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShouldIgnorePackage"
  },
  {
    "label": "EGarbageCollectionOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGarbageCollectionOption"
  },
  {
    "label": "EPromptReturnCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPromptReturnCode"
  },
  {
    "label": "FPromptForCheckoutAndSaveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPromptForCheckoutAndSaveParams"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "SaveMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveMap(UWorld* World, const FString& AssetPath)"
  },
  {
    "label": "SavePackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackages(const TArray<UPackage*>& PackagesToSave, bool bOnlyDirty)"
  },
  {
    "label": "SavePackagesWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackagesWithDialog(const TArray<UPackage*>& PackagesToSave, bool bOnlyDirty)"
  },
  {
    "label": "SaveDirtyPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDirtyPackages(const bool bSaveMapPackages, const bool bSaveContentPackages)"
  },
  {
    "label": "SaveDirtyPackagesWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDirtyPackagesWithDialog(const bool bSaveMapPackages, const bool bSaveContentPackages)"
  },
  {
    "label": "SaveCurrentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCurrentLevel()"
  },
  {
    "label": "GetDirtyMapPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyMapPackages(TArray<UPackage*>& OutDirtyPackages)"
  },
  {
    "label": "GetDirtyContentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyContentPackages(TArray<UPackage*>& OutDirtyPackages)"
  },
  {
    "label": "ImportScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportScene(const FString& Filename)"
  },
  {
    "label": "ExportScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportScene(bool bExportSelectedActorsOnly)"
  },
  {
    "label": "UnloadPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadPackages(const TArray<UPackage*>& PackagesToUnload, bool& bOutAnyPackagesUnloaded, FText& OutErrorMessage)"
  },
  {
    "label": "ReloadPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadPackages(const TArray<UPackage*>& PackagesToReload, bool& bOutAnyPackagesReloaded, FText& OutErrorMessage, const EReloadPackagesInteractionMode InteractionMode = EReloadPackagesInteractionMode::Interactive)"
  },
  {
    "label": "RegisterLevelFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLevelFilename(UObject* Object, const FString& NewLevelFilename)"
  },
  {
    "label": "ResetLevelFilenames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLevelFilenames()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (Loading)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnLevelsChosen, const TArray<FAssetData>& /*SelectedLevels*/)"
  },
  {
    "label": "OpenLevelPickingDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLevelPickingDialog(const FOnLevelsChosen& OnLevelsChosen, const FOnLevelPickingCancelled& OnLevelPickingCancelled, bool bAllowMultipleSelection)"
  },
  {
    "label": "IsValidMapFilename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidMapFilename(const FString& MapFilename, FText& OutErrorMessage)"
  },
  {
    "label": "AttemptUnloadInactiveWorldPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptUnloadInactiveWorldPackage(UPackage* PackageToUnload, FText& OutErrorMessage)"
  },
  {
    "label": "LoadMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadMap()"
  },
  {
    "label": "LoadMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadMap(const FString& Filename, bool LoadAsTemplate = false, const bool bShowProgress=true)"
  },
  {
    "label": "SaveMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveMap(UWorld* World, const FString& Filename )"
  },
  {
    "label": "SaveMapDataPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveMapDataPackages(UWorld* World, bool bCheckDirty)"
  },
  {
    "label": "SaveAssetsAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAssetsAs(const TArray<UObject*>& Assets, TArray<UObject*>& OutSavedAssets)"
  },
  {
    "label": "SaveLevelAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveLevelAs(ULevel* Level, FString* OutSavedFilename = nullptr)"
  },
  {
    "label": "GetAutoSaveFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAutoSaveFilename(UPackage* const Package, const FString& AbsoluteAutosaveDir, const int32 AutoSaveIndex, const FString& PackageExt)"
  },
  {
    "label": "AutosaveMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutosaveMap(const FString& AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet< TWeakObjectPtr<UPackage>, TWeakObjectPtrSetKeyFuncs<TWeakObjectPtr<UPackage>> >& DirtyPackagesForAutoSave)"
  },
  {
    "label": "AutosaveMapEx()",
    "kind": "Method",
    "detail": "Function (EAutosaveContentPackagesResult::Type)",
    "insertText": "AutosaveMapEx(const FString& AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet< TWeakObjectPtr<UPackage>, TWeakObjectPtrSetKeyFuncs<TWeakObjectPtr<UPackage>> >& DirtyPackagesForAutoSave)"
  },
  {
    "label": "AutosaveContentPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutosaveContentPackages(const FString& AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet< TWeakObjectPtr<UPackage>, TWeakObjectPtrSetKeyFuncs<TWeakObjectPtr<UPackage>> >& DirtyPackagesForAutoSave)"
  },
  {
    "label": "AutosaveContentPackagesEx()",
    "kind": "Method",
    "detail": "Function (EAutosaveContentPackagesResult::Type)",
    "insertText": "AutosaveContentPackagesEx(const FString& AbsoluteAutosaveDir, const int32 AutosaveIndex, const bool bForceIfNotInList, const TSet< TWeakObjectPtr<UPackage>, TWeakObjectPtrSetKeyFuncs<TWeakObjectPtr<UPackage>> >& DirtyPackagesForAutoSave)"
  },
  {
    "label": "SaveDirtyPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDirtyPackages(const bool bPromptUserToSave, const bool bSaveMapPackages, const bool bSaveContentPackages, const bool bFastSave = false, const bool bNotifyNoPackagesSaved = false, const bool bCanBeDeclined = true, bool* bOutPackagesNeededSaving = NULL, const FShouldIgnorePackageFunctionRef& ShouldIgnorePackageFunction = FShouldIgnorePackage::Default, bool bSkipExternalObjectSave = false)"
  },
  {
    "label": "SaveDirtyContentPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDirtyContentPackages(TArray<UClass*>& SaveContentClasses, const bool bPromptUserToSave, const bool bFastSave = false, const bool bNotifyNoPackagesSaved = false, const bool bCanBeDeclined = true)"
  },
  {
    "label": "GetDirtyWorldPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyWorldPackages(TArray<UPackage*>& OutDirtyPackages, const FShouldIgnorePackageFunctionRef& ShouldIgnorePackageFunction = FShouldIgnorePackage::Default)"
  },
  {
    "label": "GetDirtyContentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyContentPackages(TArray<UPackage*>& OutDirtyPackages, const FShouldIgnorePackageFunctionRef& ShouldIgnorePackageFunction = FShouldIgnorePackage::Default)"
  },
  {
    "label": "GetDirtyPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyPackages(TArray<UPackage*>& OutDirtyPackages, const FShouldIgnorePackageFunctionRef& ShouldIgnorePackageFunction = FShouldIgnorePackage::Default)"
  },
  {
    "label": "PrepareWorldsForExplicitSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareWorldsForExplicitSave(TArray<UWorld*> Worlds)"
  },
  {
    "label": "SaveCurrentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCurrentLevel()"
  },
  {
    "label": "PromptForCheckoutAndSave()",
    "kind": "Method",
    "detail": "Function (EPromptReturnCode)",
    "insertText": "PromptForCheckoutAndSave(const TArray<UPackage*>& PackagesToSave, FPromptForCheckoutAndSaveParams& InOutParams)"
  },
  {
    "label": "PromptForCheckoutAndSave()",
    "kind": "Method",
    "detail": "Function (EPromptReturnCode)",
    "insertText": "PromptForCheckoutAndSave(const TArray<UPackage*>& PackagesToSave, bool bCheckDirty, bool bPromptToSave, const FText& Title, const FText& Message, TArray<UPackage*>* OutFailedPackages = NULL, bool bAlreadyCheckedOut = false, bool bCanBeDeclined = true)"
  },
  {
    "label": "PromptForCheckoutAndSave()",
    "kind": "Method",
    "detail": "Function (EPromptReturnCode)",
    "insertText": "PromptForCheckoutAndSave( const TArray<UPackage*>& PackagesToSave, bool bCheckDirty, bool bPromptToSave, TArray<UPackage*>* OutFailedPackages = NULL, bool bAlreadyCheckedOut = false, bool bCanBeDeclined = true )"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Import()"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Import(const FString& InFilename)"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Export(bool bExportSelectedActorsOnly)"
  },
  {
    "label": "PromptToCheckoutPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToCheckoutPackages(bool bCheckDirty, const TArray<UPackage*>& PackagesToCheckOut, TArray< UPackage* >* OutPackagesCheckedOutOrMadeWritable = NULL, TArray< UPackage* >* OutPackagesNotNeedingCheckout = NULL, const bool bPromptingAfterModify = false, const bool bAllowSkip = false )"
  },
  {
    "label": "CheckoutPackages()",
    "kind": "Method",
    "detail": "Function (ECommandResult::Type)",
    "insertText": "CheckoutPackages(const TArray<UPackage*>& PkgsToCheckOut, TArray<UPackage*>* OutPackagesCheckedOut = NULL, const bool bErrorIfAlreadyCheckedOut = true, const bool bConfirmPackageBranchCheckOutStatus = true)"
  },
  {
    "label": "CheckoutPackages()",
    "kind": "Method",
    "detail": "Function (ECommandResult::Type)",
    "insertText": "CheckoutPackages(const TArray<FString>& PkgsToCheckOut, TArray<FString>* OutPackagesCheckedOut = NULL, const bool bErrorIfAlreadyCheckedOut = true)"
  },
  {
    "label": "files()",
    "kind": "Method",
    "detail": "Function (some)",
    "insertText": "files(or if there is\n\t *\t\t\tno source control integration)"
  },
  {
    "label": "PromptToCheckoutLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToCheckoutLevels(bool bCheckDirty, const TArray<ULevel*>& SpecificLevelsToCheckOut, TArray<UPackage*>* OutPackagesNotNeedingCheckout = NULL)"
  },
  {
    "label": "files()",
    "kind": "Method",
    "detail": "Function (some)",
    "insertText": "files(or if there is\n\t *\t\t\tno source control integration)"
  },
  {
    "label": "PromptToCheckoutLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToCheckoutLevels(bool bCheckDirty, ULevel* SpecificLevelToCheckOut)"
  },
  {
    "label": "LoadDefaultMapAtStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultMapAtStartup()"
  },
  {
    "label": "SaveWorlds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveWorlds(UWorld* InWorld, const FString& RootPath, const TCHAR* Prefix, TArray<FString>& OutFilenames)"
  },
  {
    "label": "GetFilterString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilterString(EFileInteraction Interaction)"
  },
  {
    "label": "FindAllPackageFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllPackageFiles(TArray<FString>& OutPackages)"
  },
  {
    "label": "FindAllSubmittablePackageFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllSubmittablePackageFiles(TMap<FString, FSourceControlStatePtr>& OutPackages, const bool bIncludeMaps)"
  },
  {
    "label": "FindAllSubmittableProjectFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllSubmittableProjectFiles(TMap<FString, FSourceControlStatePtr>& OutProjectFiles)"
  },
  {
    "label": "FindAllConfigFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllConfigFiles(TArray<FString>& OutConfigFiles)"
  },
  {
    "label": "FindAllSubmittableConfigFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllSubmittableConfigFiles(TMap<FString, FSourceControlStatePtr>& OutConfigFiles)"
  },
  {
    "label": "IsMapPackageAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMapPackageAsset(const FString& ObjectPath)"
  },
  {
    "label": "IsMapPackageAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMapPackageAsset(const FString& ObjectPath, FString& MapFilePath)"
  },
  {
    "label": "ExtractPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ExtractPackageName(const FString& ObjectPath)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilename(const FName& PackageName)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilename(UObject* LevelObject)"
  },
  {
    "label": "AddCheckoutPackageItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCheckoutPackageItems(bool bCheckDirty, TArray<UPackage*> PackagesToCheckOut, TArray<UPackage*>* OutPackagesNotNeedingCheckout, bool* bOutHavePackageToCheckOut)"
  },
  {
    "label": "UpdateCheckoutPackageItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCheckoutPackageItems(bool bCheckDirty, TArray<UPackage*> PackagesToCheckOut, TArray<UPackage*>* OutPackagesNotNeedingCheckout)"
  },
  {
    "label": "PromptToCheckoutPackagesInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToCheckoutPackagesInternal(bool bCheckDirty, const TArray<UPackage*>& PackagesToCheckOut, TArray<UPackage*>* OutPackagesCheckedOutOrMadeWritable, TArray<UPackage*>* OutPackagesNotNeedingCheckout, const bool bPromptingAfterModify, const bool bAllowSkip)"
  },
  {
    "label": "AutomaticCheckoutOrPromptToRevertPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutomaticCheckoutOrPromptToRevertPackages(const TArray<UPackage*>& PackagesToCheckOut, TArray<UPackage*>* OutPackagesCheckedOutOrMadeWritable, TArray<UPackage*>* OutPackagesNotNeedingCheckout, TArray<UPackage*>* OutPackagesToRevert)"
  },
  {
    "label": "MakePackagesWritable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakePackagesWritable(const TArray<UPackage*>& PackagesToMakeWritable, TArray<UPackage*>* OutPackagesMadeWritable, TArray<UPackage*>* OutPackagesMadeWritableFailed)"
  }
]