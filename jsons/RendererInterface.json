[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FCanvasRenderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasRenderContext"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FSceneTextureUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureUniformParameters"
  },
  {
    "label": "FMobileSceneTextureUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileSceneTextureUniformParameters"
  },
  {
    "label": "FGlobalDistanceFieldParameterData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceFieldParameterData"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FSynthBenchmarkResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSynthBenchmarkResults"
  },
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMatrices"
  },
  {
    "label": "FShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShader"
  },
  {
    "label": "FShaderMapPointerTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapPointerTable"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FGPUScenePrimitiveCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScenePrimitiveCollector"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "TShaderRefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShaderRefBase"
  },
  {
    "label": "FSceneUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneUniformBuffer"
  },
  {
    "label": "FBatchedPrimitiveParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedPrimitiveParameters"
  },
  {
    "label": "ISceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneRenderer"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FRHITransientTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientTexture"
  },
  {
    "label": "FSceneRenderingBlockAllocationTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneRenderingBlockAllocationTag"
  },
  {
    "label": "FPooledRenderTargetDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPooledRenderTargetDesc"
  },
  {
    "label": "FSceneRenderTargetItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneRenderTargetItem"
  },
  {
    "label": "IPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPooledRenderTarget"
  },
  {
    "label": "EDrawRectangleFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDrawRectangleFlags"
  },
  {
    "label": "FPostOpaqueRenderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPostOpaqueRenderParameters"
  },
  {
    "label": "ICustomVisibilityQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomVisibilityQuery"
  },
  {
    "label": "ICustomCulling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomCulling"
  },
  {
    "label": "FPixelInspectorRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPixelInspectorRequest"
  },
  {
    "label": "IPersistentViewUniformBufferExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersistentViewUniformBufferExtension"
  },
  {
    "label": "IScenePrimitiveRenderingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IScenePrimitiveRenderingContext"
  },
  {
    "label": "FScenePrimitiveRenderingContextScopeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScenePrimitiveRenderingContextScopeHelper"
  },
  {
    "label": "IRendererModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRendererModule"
  },
  {
    "label": "FSceneViewInitOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewInitOptions"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FLightCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightCacheInterface"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "FHitProxyId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyId"
  },
  {
    "label": "FPooledRenderTargetDesc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / RefCounting . h \" # include \" Misc / MemStack . h \" # include \" Modules / ModuleInterface . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" RenderUtils . h \" # include \" Misc / EnumClassFlags . h \" # include \" UniformBuffer . h \" # include \" VirtualTexturing . h \" # include \" RenderGraphDefinitions . h \" class FCanvas ; class FCanvasRenderContext ; class FMaterial ; class FSceneInterface ; class FSceneView ; class FSceneViewFamily ; class FSceneTextureUniformParameters ; class FMobileSceneTextureUniformParameters ; class FGlobalDistanceFieldParameterData ; struct FMeshBatch ; struct FSynthBenchmarkResults ; struct FSceneTextures ; struct FViewMatrices ; class FShader ; class FShaderMapPointerTable ; class FRDGBuilder ; class FMaterialRenderProxy ; class FGPUScenePrimitiveCollector ; class FViewInfo ; template<ShaderType,PointerTableType> class TShaderRefBase ; class FSceneUniformBuffer ; class FBatchedPrimitiveParameters ; class ISceneRenderer ; namespace Nanite { struct FResources ; } ; class FRHITransientTexture ; struct FSceneRenderingBlockAllocationTag { uint32 BlockSize = 6 4* 1 0 2 4 ; bool AllowOversizedBlocks = true ; bool RequiresAccurateSize = true ; bool InlineBlockAllocation = false ; const char* TagName = \" SceneRenderingAllocator \" ; using Allocator = TBlockAllocationLockFreeCache<BlockSize,FOsAllocator> ; } ; using FSceneRenderingBulkObjectAllocator = TConcurrentLinearBulkObjectAllocator<FSceneRenderingBlockAllocationTag> ; template<T> using FSceneRenderingAllocatorObject = TConcurrentLinearObject<T,FSceneRenderingBlockAllocationTag> ; using FSceneRenderingAllocator = TConcurrentLinearAllocator<FSceneRenderingBlockAllocationTag> ; using FSceneRenderingArrayAllocator = TConcurrentLinearArrayAllocator<FSceneRenderingBlockAllocationTag> ; using SceneRenderingAllocator = TConcurrentLinearArrayAllocator<FSceneRenderingBlockAllocationTag> ; using SceneRenderingBitArrayAllocator = TConcurrentLinearBitArrayAllocator<FSceneRenderingBlockAllocationTag> ; using SceneRenderingSparseArrayAllocator = TConcurrentLinearSparseArrayAllocator<FSceneRenderingBlockAllocationTag> ; using SceneRenderingSetAllocator = TConcurrentLinearSetAllocator<FSceneRenderingBlockAllocationTag> ; struct FPooledRenderTargetDesc { public :)",
    "insertText": "FPooledRenderTargetDesc() : PackedBits(0)"
  },
  {
    "label": "Create2DDesc()",
    "kind": "Method",
    "detail": "Function (} FPooledRenderTargetDesc)",
    "insertText": "Create2DDesc(FIntPoint InExtent, EPixelFormat InFormat, const FClearValueBinding& InClearValue, ETextureCreateFlags InFlags, ETextureCreateFlags InTargetableFlags, bool bInForceSeparateTargetAndShaderResource, uint8 InNumMips = 1, bool InAutowritable = true, bool InCreateRTWriteMask = false, bool InCreateFmask = false)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc NewDesc ; NewDesc . ClearValue = InClearValue ; NewDesc . Extent = InExtent ; NewDesc . Depth = 0 ; NewDesc . ArraySize = 1 ; NewDesc . bIsArray = false ; NewDesc . bIsCubemap = false ; NewDesc . NumMips = InNumMips ; NewDesc . NumSamples = 1 ; NewDesc . Format = InFormat ; NewDesc . Flags = InFlags | InTargetableFlags ; NewDesc . DebugName =)",
    "insertText": "TEXT(\"UnknownTexture2D\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc NewDesc ; NewDesc . ClearValue = InClearValue ; NewDesc . Extent = InExtent ; NewDesc . Depth = 0 ; NewDesc . ArraySize = InArraySize ; NewDesc . bIsArray = true ; NewDesc . bIsCubemap = false ; NewDesc . NumMips = InNumMips ; NewDesc . NumSamples = 1 ; NewDesc . Format = InFormat ; NewDesc . Flags = InFlags | InTargetableFlags ; NewDesc . DebugName =)",
    "insertText": "TEXT(\"UnknownTexture2DArray\")"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc NewDesc ; NewDesc . ClearValue = InClearValue ; NewDesc . Extent =)",
    "insertText": "FIntPoint(InSizeX,InSizeY)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (NewDesc . Depth = InSizeZ ; NewDesc . ArraySize = 1 ; NewDesc . bIsArray = false ; NewDesc . bIsCubemap = false ; NewDesc . NumMips = InNumMips ; NewDesc . NumSamples = 1 ; NewDesc . Format = InFormat ; NewDesc . Flags = InFlags | InTargetableFlags ; NewDesc . DebugName =)",
    "insertText": "TEXT(\"UnknownTextureVolume\")"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc NewDesc ; NewDesc . ClearValue = InClearValue ; NewDesc . Extent =)",
    "insertText": "FIntPoint(InExtent, InExtent)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (NewDesc . Depth = 0 ; NewDesc . ArraySize = InArraySize ; NewDesc . bIsArray = InArraySize> 1 ; NewDesc . bIsCubemap = true ; NewDesc . NumMips = InNumMips ; NewDesc . NumSamples = 1 ; NewDesc . Format = InFormat ; NewDesc . Flags = InFlags | InTargetableFlags ; NewDesc . DebugName =)",
    "insertText": "TEXT(\"UnknownTextureCube\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (NewDesc . Depth = 0 ; NewDesc . ArraySize = InArraySize ; NewDesc . bIsArray = true ; NewDesc . bIsCubemap = true ; NewDesc . NumMips = InNumMips ; NewDesc . NumSamples = 1 ; NewDesc . Format = InFormat ; NewDesc . Flags = InFlags | InTargetableFlags ; NewDesc . DebugName =)",
    "insertText": "TEXT(\"UnknownTextureCubeArray\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto LhsFlags = Flags ; auto RhsFlags = rhs . Flags ;)",
    "insertText": "if(!bExact || !FPlatformMemory::SupportsFastVRAMMemory())"
  },
  {
    "label": "LhsFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LhsFlags(~TexCreate_FastVRAM)"
  },
  {
    "label": "RhsFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RhsFlags(~TexCreate_FastVRAM)"
  },
  {
    "label": "IsCubemap()",
    "kind": "Method",
    "detail": "Function (} return ClearValue = = rhs . ClearValue&& LhsFlags = = RhsFlags&& Format = = rhs . Format&& UAVFormat = = rhs . UAVFormat&& Extent = = rhs . Extent&& Depth = = rhs . Depth&& ArraySize = = rhs . ArraySize&& NumMips = = rhs . NumMips&& NumSamples = = rhs . NumSamples&& PackedBits = = rhs . PackedBits&& FastVRAMPercentage = = rhs . FastVRAMPercentage ; } bool)",
    "insertText": "IsCubemap()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetSize()"
  },
  {
    "label": "GenerateInfoString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateInfoString()"
  },
  {
    "label": "GetPixelFormatString()",
    "kind": "Method",
    "detail": "Function (const TCHAR* FormatString =)",
    "insertText": "GetPixelFormatString(Format)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString FlagsString =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags LocalFlags = Flags ;)",
    "insertText": "if(EnumHasAnyFlags(LocalFlags, TexCreate_RenderTargetable))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FlagsString + =)",
    "insertText": "TEXT(\" RT\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EnumHasAnyFlags(LocalFlags, TexCreate_SRGB))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FlagsString + =)",
    "insertText": "TEXT(\" sRGB\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumSamples > 1)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FlagsString + =)",
    "insertText": "Printf(TEXT(\" %dxMSAA\"), NumSamples)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EnumHasAnyFlags(LocalFlags, TexCreate_UAV))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FlagsString + =)",
    "insertText": "TEXT(\" UAV\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EnumHasAnyFlags(LocalFlags, TexCreate_FastVRAM))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FlagsString + =)",
    "insertText": "TEXT(\" VRam\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FString ArrayString ;)",
    "insertText": "if(IsArray())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ArrayString =)",
    "insertText": "Printf(TEXT(\"[%d]\"), ArraySize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Is2DTexture())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Is3DTexture())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsCubemap())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TEXT(\"(INVALID)\")"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (NumSamples = 1 ; Flags | = TexCreate_RenderTargetable ;)",
    "insertText": "Flags(~TexCreate_UAV)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* DebugName =)",
    "insertText": "TEXT(\"UnknownTexture\")"
  },
  {
    "label": "FSceneRenderTargetItem()",
    "kind": "Method",
    "detail": "Function (FClearValueBinding ClearValue ; ETextureCreateFlags Flags = TexCreate_None ; EPixelFormat Format = PF_Unknown ; EPixelFormat UAVFormat = PF_Unknown ; FIntPoint Extent = FIntPoint::ZeroValue ; uint16 Depth = 0 ; uint16 ArraySize = 1 ; uint8 NumMips = 0 ; uint8 NumSamples = 1 ; uint8 FastVRAMPercentage = 0 xFF ; union { struct { uint8 bIsArray : 1 ; uint8 bIsCubemap : 1 ; uint8 bReserved0 : 6 ; } ; uint8 PackedBits ; } ; } ; struct FSceneRenderTargetItem {)",
    "insertText": "FSceneRenderTargetItem()"
  },
  {
    "label": "FSceneRenderTargetItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneRenderTargetItem(FRHITexture* InTargetableTexture, FRHITexture* InShaderResourceTexture, FUnorderedAccessViewRHIRef InUAV) : TargetableTexture(InTargetableTexture) , ShaderResourceTexture(InShaderResourceTexture) , UAV(InUAV)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsFree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFree()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (const FPooledRenderTargetDesc&)",
    "insertText": "GetDesc()"
  },
  {
    "label": "ComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeMemorySize()"
  },
  {
    "label": "IsTracked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTracked()"
  },
  {
    "label": "GetTransientTexture()",
    "kind": "Method",
    "detail": "Function (FRHITransientTexture*)",
    "insertText": "GetTransientTexture()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (FRHITexture*)",
    "insertText": "GetRHI()"
  },
  {
    "label": "CacheRenderTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheRenderTarget(FRHITexture* Texture, const TCHAR* Name, TRefCountPtr<IPooledRenderTarget>& OutPooledRenderTarget)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (enum EDrawRectangleFlags { EDRF_Default,EDRF_UseTriangleOptimization,EDRF_UseTesselatedIndexBuffer } ; class FPostOpaqueRenderParameters { public : FIntRect ViewportRect ; FMatrix ViewMatrix ; FMatrix ProjMatrix ; FRDGTexture* ColorTexture = nullptr ; FRDGTexture* DepthTexture = nullptr ; FRDGTexture* NormalTexture = nullptr ; FRDGTexture* VelocityTexture = nullptr ; FRDGTexture* SmallDepthTexture = nullptr ; FRDGBuilder* GraphBuilder = nullptr ; FRHIUniformBuffer* ViewUniformBuffer = nullptr ; TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformParams = nullptr ; TRDGUniformBufferRef<FMobileSceneTextureUniformParameters> MobileSceneTexturesUniformParams = nullptr ; const FGlobalDistanceFieldParameterData* GlobalDistanceFieldParams = nullptr ; void* Uid = nullptr ; const FViewInfo* View = nullptr ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPostOpaqueRender, class FPostOpaqueRenderParameters&)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (typedef FOnPostOpaqueRender::FDelegate FPostOpaqueRenderDelegate ; class ICustomVisibilityQuery : public IRefCountedObject { public : bool)",
    "insertText": "Prepare()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible(int32 VisibilityId, const FBoxSphereBounds& Bounds)"
  },
  {
    "label": "IsThreadsafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadsafe()"
  },
  {
    "label": "FPixelInspectorRequest()",
    "kind": "Method",
    "detail": "Function (} ; class FPixelInspectorRequest { public :)",
    "insertText": "FPixelInspectorRequest()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (SourceViewportUV =)",
    "insertText": "FVector2f(-1, -1)"
  },
  {
    "label": "SetRequestData()",
    "kind": "Method",
    "detail": "Function (BufferIndex = - 1 ; RenderingCommandSend = false ; RequestComplete = true ; ViewId = - 1 ; GBufferPrecision = 1 ; AllowStaticLighting = true ; FrameCountAfterRenderingCommandSend = 0 ; RequestTickSinceCreation = 0 ; PreExposure = 1 ; } void)",
    "insertText": "SetRequestData(FVector2f SrcViewportUV, int32 TargetBufferIndex, int32 ViewUniqueId, int32 GBufferFormat, bool StaticLightingEnable, float InPreExposure)"
  },
  {
    "label": "MarkSendToRendering()",
    "kind": "Method",
    "detail": "Function (SourceViewportUV = SrcViewportUV ; BufferIndex = TargetBufferIndex ; RenderingCommandSend = false ; RequestComplete = false ; ViewId = ViewUniqueId ; GBufferPrecision = GBufferFormat ; AllowStaticLighting = StaticLightingEnable ; PreExposure = InPreExposure ; FrameCountAfterRenderingCommandSend = 0 ; RequestTickSinceCreation = 0 ; } void)",
    "insertText": "MarkSendToRendering()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (} bool RenderingCommandSend ; int32 FrameCountAfterRenderingCommandSend ; int32 RequestTickSinceCreation ; bool RequestComplete ; FVector2f SourceViewportUV ; int32 BufferIndex ; int32 ViewId ; int32 GBufferPrecision ; bool AllowStaticLighting ; float PreExposure ; } ; class IPersistentViewUniformBufferExtension { public : void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "PrepareView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareView(const FSceneView* View)"
  },
  {
    "label": "BeginRenderView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderView(const FSceneView* View, bool bShouldWaitForJobs = true)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "IScenePrimitiveRenderingContext()",
    "kind": "Method",
    "detail": "Function (} } ; class IScenePrimitiveRenderingContext { public : ~)",
    "insertText": "IScenePrimitiveRenderingContext()"
  },
  {
    "label": "GetSceneRenderer()",
    "kind": "Method",
    "detail": "Function (} ISceneRenderer*)",
    "insertText": "GetSceneRenderer()"
  },
  {
    "label": "FScenePrimitiveRenderingContextScopeHelper()",
    "kind": "Method",
    "detail": "Function (} ; struct FScenePrimitiveRenderingContextScopeHelper {)",
    "insertText": "FScenePrimitiveRenderingContextScopeHelper(IScenePrimitiveRenderingContext* InScenePrimitiveRenderingContext) : ScenePrimitiveRenderingContext(InScenePrimitiveRenderingContext)"
  },
  {
    "label": "FScenePrimitiveRenderingContextScopeHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScenePrimitiveRenderingContextScopeHelper()"
  },
  {
    "label": "BeginRenderingViewFamily()",
    "kind": "Method",
    "detail": "Function (delete ScenePrimitiveRenderingContext ; } IScenePrimitiveRenderingContext* ScenePrimitiveRenderingContext ; } ; class IRendererModule : public IModuleInterface { public : void)",
    "insertText": "BeginRenderingViewFamily(FCanvas* Canvas, FSceneViewFamily* ViewFamily)"
  },
  {
    "label": "CreateAndInitSingleView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndInitSingleView(FRHICommandListImmediate& RHICmdList, class FSceneViewFamily* ViewFamily, const struct FSceneViewInitOptions* ViewInitOptions)"
  },
  {
    "label": "AllocateScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface*)",
    "insertText": "AllocateScene(UWorld* World, bool bInRequiresHitProxies, bool bCreateFXSystem, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "RemoveScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveScene(FSceneInterface* Scene)"
  },
  {
    "label": "UpdateStaticDrawLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticDrawLists()"
  },
  {
    "label": "UpdateStaticDrawListsForMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticDrawListsForMaterials(const TArray<const FMaterial*>& Materials)"
  },
  {
    "label": "AllocateViewState()",
    "kind": "Method",
    "detail": "Function (class FSceneViewStateInterface*)",
    "insertText": "AllocateViewState(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "AllocateViewState()",
    "kind": "Method",
    "detail": "Function (class FSceneViewStateInterface*)",
    "insertText": "AllocateViewState(ERHIFeatureLevel::Type FeatureLevel, FSceneViewStateInterface* ShareOriginTarget)"
  },
  {
    "label": "GetNumDynamicLightsAffectingPrimitive()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumDynamicLightsAffectingPrimitive(const class FPrimitiveSceneInfo* PrimitiveSceneInfo,const class FLightCacheInterface* LCI)"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup(UWorld* World, bool bSessionEnded, bool bCleanupResources, bool bWorldChanged)"
  },
  {
    "label": "InitializeSystemTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSystemTextures(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "CreateSinglePrimitiveSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FSceneUniformBuffer*)",
    "insertText": "CreateSinglePrimitiveSceneUniformBuffer(FRDGBuilder& GraphBuilder, const FViewInfo& SceneView, FMeshBatch& Mesh)"
  },
  {
    "label": "CreateSinglePrimitiveUniformView()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FBatchedPrimitiveParameters>)",
    "insertText": "CreateSinglePrimitiveUniformView(FRDGBuilder& GraphBuilder, const FViewInfo& SceneView, FMeshBatch& Mesh)"
  },
  {
    "label": "DrawTileMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTileMesh(FCanvasRenderContext& RenderContext, struct FMeshPassProcessorRenderState& DrawRenderState, const FSceneView& View, FMeshBatch& Mesh, bool bIsHitTesting, const class FHitProxyId& HitProxyId, bool bUse128bitRT = false)"
  },
  {
    "label": "GetAllocatedScenes()",
    "kind": "Method",
    "detail": "Function (const TSet<FSceneInterface*>&)",
    "insertText": "GetAllocatedScenes()"
  },
  {
    "label": "DebugLogOnCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugLogOnCrash()"
  },
  {
    "label": "GPUBenchmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GPUBenchmark(FSynthBenchmarkResults& InOut, float WorkScale = 10.0f)"
  },
  {
    "label": "ExecVisualizeTextureCmd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecVisualizeTextureCmd(const FString& Cmd)"
  },
  {
    "label": "UpdateMapNeedsLightingFullyRebuiltState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMapNeedsLightingFullyRebuiltState(UWorld* World)"
  },
  {
    "label": "DrawRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRectangle(FRHICommandList& RHICmdList, float X, float Y, float SizeX, float SizeY, float U, float V, float SizeU, float SizeV, FIntPoint TargetSize, FIntPoint TextureSize, const TShaderRefBase<FShader, FShaderMapPointerTable>& VertexShader, EDrawRectangleFlags Flags = EDRF_Default)"
  },
  {
    "label": "RegisterCustomCullingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomCullingImpl(ICustomCulling* impl)"
  },
  {
    "label": "UnregisterCustomCullingImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCustomCullingImpl(ICustomCulling* impl)"
  },
  {
    "label": "RegisterPostOpaqueRenderDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterPostOpaqueRenderDelegate(const FPostOpaqueRenderDelegate& PostOpaqueRenderDelegate)"
  },
  {
    "label": "RemovePostOpaqueRenderDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePostOpaqueRenderDelegate(FDelegateHandle PostOpaqueRenderDelegate)"
  },
  {
    "label": "RegisterOverlayRenderDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOverlayRenderDelegate(const FPostOpaqueRenderDelegate& OverlayRenderDelegate)"
  },
  {
    "label": "RemoveOverlayRenderDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlayRenderDelegate(FDelegateHandle OverlayRenderDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnResolvedSceneColor, FRDGBuilder& , const FSceneTextures&)"
  },
  {
    "label": "GetResolvedSceneColorCallbacks()",
    "kind": "Method",
    "detail": "Function (FOnResolvedSceneColor&)",
    "insertText": "GetResolvedSceneColorCallbacks()"
  },
  {
    "label": "PostRenderAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRenderAllViewports()"
  },
  {
    "label": "PerFrameCleanupIfSkipRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerFrameCleanupIfSkipRenderer()"
  },
  {
    "label": "AllocateVirtualTexture()",
    "kind": "Method",
    "detail": "Function (IAllocatedVirtualTexture*)",
    "insertText": "AllocateVirtualTexture(FRHICommandListBase& RHICmdList, const FAllocatedVTDescription& Desc)"
  },
  {
    "label": "AllocateVirtualTexture()",
    "kind": "Method",
    "detail": "Function (IAllocatedVirtualTexture*)",
    "insertText": "AllocateVirtualTexture(const FAllocatedVTDescription& Desc)"
  },
  {
    "label": "DestroyVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVirtualTexture(IAllocatedVirtualTexture* AllocatedVT)"
  },
  {
    "label": "AllocateAdaptiveVirtualTexture()",
    "kind": "Method",
    "detail": "Function (IAdaptiveVirtualTexture*)",
    "insertText": "AllocateAdaptiveVirtualTexture(FRHICommandListBase& RHICmdList, const FAdaptiveVTDescription& AdaptiveVTDesc, const FAllocatedVTDescription& AllocatedVTDesc)"
  },
  {
    "label": "AllocateAdaptiveVirtualTexture()",
    "kind": "Method",
    "detail": "Function (IAdaptiveVirtualTexture*)",
    "insertText": "AllocateAdaptiveVirtualTexture(const FAdaptiveVTDescription& AdaptiveVTDesc, const FAllocatedVTDescription& AllocatedVTDesc)"
  },
  {
    "label": "DestroyAdaptiveVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAdaptiveVirtualTexture(IAdaptiveVirtualTexture* AdaptiveVT)"
  },
  {
    "label": "RegisterVirtualTextureProducer()",
    "kind": "Method",
    "detail": "Function (FVirtualTextureProducerHandle)",
    "insertText": "RegisterVirtualTextureProducer(FRHICommandListBase& RHICmdList, const FVTProducerDescription& Desc, IVirtualTexture* Producer)"
  },
  {
    "label": "RegisterVirtualTextureProducer()",
    "kind": "Method",
    "detail": "Function (FVirtualTextureProducerHandle)",
    "insertText": "RegisterVirtualTextureProducer(const FVTProducerDescription& Desc, IVirtualTexture* Producer)"
  },
  {
    "label": "ReleaseVirtualTextureProducer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseVirtualTextureProducer(const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "AddVirtualTextureProducerDestroyedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVirtualTextureProducerDestroyedCallback(const FVirtualTextureProducerHandle& Handle, FVTProducerDestroyedFunction* Function, void* Baton)"
  },
  {
    "label": "RemoveAllVirtualTextureProducerDestroyedCallbacks()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveAllVirtualTextureProducerDestroyedCallbacks(const void* Baton)"
  },
  {
    "label": "ReleaseVirtualTexturePendingResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseVirtualTexturePendingResources()"
  },
  {
    "label": "RequestVirtualTextureTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestVirtualTextureTiles(const FVector2D& InScreenSpaceSize, int32 InMipLevel)"
  },
  {
    "label": "RequestVirtualTextureTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestVirtualTextureTiles(const FMaterialRenderProxy* InMaterialRenderProxy, const FVector2D& InScreenSpaceSize, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "RequestVirtualTextureTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestVirtualTextureTiles(IAllocatedVirtualTexture* AllocatedVT, const FVector2D& InScreenSpaceSize, const FVector2D& InViewportPosition, const FVector2D& InViewportSize, const FVector2D& InUV0, const FVector2D& InUV1, int32 InMipLevel)"
  },
  {
    "label": "LoadPendingVirtualTextureTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPendingVirtualTextureTiles(FRHICommandListImmediate& RHICmdList, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "SetVirtualTextureRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualTextureRequestRecordBuffer(uint64 Handle)"
  },
  {
    "label": "GetVirtualTextureRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetVirtualTextureRequestRecordBuffer(TSet<uint64>& OutPageRequests)"
  },
  {
    "label": "RequestVirtualTextureTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestVirtualTextureTiles(TArray<uint64>&& InPageRequests)"
  },
  {
    "label": "FlushVirtualTextureCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushVirtualTextureCache()"
  },
  {
    "label": "FlushVirtualTextureCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushVirtualTextureCache(IAllocatedVirtualTexture* AllocatedVT, const FVector2f& InUV0, const FVector2f& InUV1)"
  },
  {
    "label": "SetNaniteRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNaniteRequestRecordBuffer(uint64 Handle)"
  },
  {
    "label": "GetNaniteRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetNaniteRequestRecordBuffer(TArray<uint32>& OutRequestData)"
  },
  {
    "label": "RequestNanitePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestNanitePages(TArrayView<uint32> InRequestData)"
  },
  {
    "label": "PrefetchNaniteResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchNaniteResource(const Nanite::FResources* Resource, uint32 NumFramesUntilRender)"
  },
  {
    "label": "BeginScenePrimitiveRendering()",
    "kind": "Method",
    "detail": "Function (IScenePrimitiveRenderingContext*)",
    "insertText": "BeginScenePrimitiveRendering(FRDGBuilder& GraphBuilder, FSceneViewFamily* ViewFamily)"
  },
  {
    "label": "BeginScenePrimitiveRendering()",
    "kind": "Method",
    "detail": "Function (IScenePrimitiveRenderingContext*)",
    "insertText": "BeginScenePrimitiveRendering(FRDGBuilder& GraphBuilder, FSceneInterface& Scene)"
  },
  {
    "label": "InvalidatePathTracedOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePathTracedOutput()"
  },
  {
    "label": "BeginRenderingViewFamilies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderingViewFamilies(FCanvas* Canvas, TArrayView<FSceneViewFamily*> ViewFamilies)"
  },
  {
    "label": "ResetSceneTextureExtentHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSceneTextureExtentHistory()"
  },
  {
    "label": "GetPreviousViewMatrices()",
    "kind": "Method",
    "detail": "Function (const FViewMatrices&)",
    "insertText": "GetPreviousViewMatrices(const FSceneView& View)"
  },
  {
    "label": "GetGlobalDistanceFieldParameterData()",
    "kind": "Method",
    "detail": "Function (const FGlobalDistanceFieldParameterData*)",
    "insertText": "GetGlobalDistanceFieldParameterData(const FSceneView& View)"
  },
  {
    "label": "RequestStaticMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStaticMeshUpdate(FPrimitiveSceneInfo* Info)"
  },
  {
    "label": "AddMeshBatchToGPUScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatchToGPUScene(FGPUScenePrimitiveCollector* Collector, FMeshBatch& MeshBatch)"
  }
]