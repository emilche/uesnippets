[
  {
    "label": "EMontagePreviewType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMontagePreviewType"
  },
  {
    "label": "ANIMGRAPH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANIMGRAPH_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_ModifyBone . h \" # include \" Animation / AnimSingleNodeInstance . h \" # include \" Animation / AnimSingleNodeInstanceProxy . h \" # include \" AnimNodes / AnimNode_CurveSource . h \" # include \" AnimNodes / AnimNode_PoseBlendNode . h \" # include \" AnimNodes / AnimNode_CopyPoseFromMesh . h \" # include \" AnimPreviewInstance . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (EMPT_Normal,EMPT_AllSections,EMPT_MAX,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FAnimPreviewInstanceProxy()"
  },
  {
    "label": "FAnimPreviewInstanceProxy()",
    "kind": "Method",
    "detail": "Function (bCanProcessAdditiveAnimations = true ; })",
    "insertText": "FAnimPreviewInstanceProxy(UAnimInstance* InAnimInstance) : FAnimSingleNodeInstanceProxy(InAnimInstance) , SkeletalControlAlpha(1.0f) , bEnableControllers(true) , bSetKey(false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bCanProcessAdditiveAnimations = true ; } void)",
    "insertText": "Initialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(float DeltaSeconds)"
  },
  {
    "label": "UpdateAnimationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimationNode(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(FPoseContext& Output)"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdate(UAnimInstance* InAnimInstance, float DeltaSeconds)"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationAsset(UAnimationAsset* NewAsset, USkeletalMeshComponent* MeshComponent, bool bIsLooping, float InPlayRate)"
  },
  {
    "label": "ResetModifiedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModifiedBone(bool bCurveController = false)"
  },
  {
    "label": "FindModifiedBone()",
    "kind": "Method",
    "detail": "Function (FAnimNode_ModifyBone*)",
    "insertText": "FindModifiedBone(const FName& InBoneName, bool bCurveController = false)"
  },
  {
    "label": "ModifyBone()",
    "kind": "Method",
    "detail": "Function (FAnimNode_ModifyBone&)",
    "insertText": "ModifyBone(const FName& InBoneName, bool bCurveController = false)"
  },
  {
    "label": "RemoveBoneModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBoneModification(const FName& InBoneName, bool bCurveController = false)"
  },
  {
    "label": "EnableControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableControllers(bool bEnable)"
  },
  {
    "label": "SetSkeletalControlAlpha()",
    "kind": "Method",
    "detail": "Function (bEnableControllers = bEnable ; } void)",
    "insertText": "SetSkeletalControlAlpha(float InSkeletalControlAlpha)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SkeletalControlAlpha = FMath::Clamp<)",
    "insertText": "float(InSkeletalControlAlpha, 0.f, 1.f)"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "SetKey()"
  },
  {
    "label": "AddKeyCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (bSetKey = true ; } FDelegateHandle)",
    "insertText": "AddKeyCompleteDelegate(FSimpleMulticastDelegate::FDelegate InOnSetKeyCompleteDelegate)"
  },
  {
    "label": "RemoveKeyCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveKeyCompleteDelegate(FDelegateHandle InDelegateHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnSetKeyCompleteDelegate .)",
    "insertText": "Remove(InDelegateHandle)"
  },
  {
    "label": "RefreshCurveBoneControllers()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "RefreshCurveBoneControllers(UAnimationAsset* AssetToRefreshFrom)"
  },
  {
    "label": "GetBoneControllers()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNode_ModifyBone>&)",
    "insertText": "GetBoneControllers()"
  },
  {
    "label": "SetDebugSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDebugSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent)"
  },
  {
    "label": "GetDebugSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshComponent*)",
    "insertText": "GetDebugSkeletalMeshComponent()"
  },
  {
    "label": "UpdateCurveController()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCurveController()"
  },
  {
    "label": "ApplyBoneControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBoneControllers(TArray<FAnimNode_ModifyBone> &InBoneControllers, FComponentSpacePoseContext& ComponentSpacePoseContext)"
  },
  {
    "label": "SetKeyImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyImplementation(const FCompactPose& PreControllerInLocalSpace, const FCompactPose& PostControllerInLocalSpace)"
  },
  {
    "label": "AddKeyToSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyToSequence(UAnimSequence* Sequence, float Time, const FName& BoneName, const FTransform& AdditiveTransform)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : TArray<FAnimNode_ModifyBone> BoneControllers ; TArray<FAnimNode_ModifyBone> CurveBoneControllers ; FAnimNode_CurveSource CurveSource ; FAnimNode_PoseBlendNode PoseBlendNode ; FAnimNode_CopyPoseFromMesh CopyPoseNode ; FSimpleMulticastDelegate OnSetKeyCompleteDelegate ; float SkeletalControlAlpha ; bool bEnableControllers ; bool bSetKey ; } ;)",
    "insertText": "UCLASS(transient, NotBlueprintable, noteditinlinenew)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(transient)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "NativeInitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeInitializeAnimation()"
  },
  {
    "label": "CreateAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (FAnimInstanceProxy*)",
    "insertText": "CreateAnimInstanceProxy()"
  },
  {
    "label": "CanRunParallelWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRunParallelWork()"
  },
  {
    "label": "SetSkeletalControlAlpha()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetSkeletalControlAlpha(float SkeletalControlAlpha)"
  },
  {
    "label": "GetAnimSequence()",
    "kind": "Method",
    "detail": "Function (UAnimSequence*)",
    "insertText": "GetAnimSequence()"
  },
  {
    "label": "RestartMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartMontage(UAnimMontage* Montage, FName FromSection = FName())"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping = true, float InPlayRate = 1.f)"
  },
  {
    "label": "MontagePreview_JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_JumpToStart()"
  },
  {
    "label": "MontagePreview_JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_JumpToEnd()"
  },
  {
    "label": "MontagePreview_JumpToPreviewStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_JumpToPreviewStart()"
  },
  {
    "label": "MontagePreview_Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_Restart()"
  },
  {
    "label": "MontagePreview_PreviewNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_PreviewNormal(int32 FromSectionIdx = INDEX_NONE, bool bPlay = true)"
  },
  {
    "label": "MontagePreview_SetLoopNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetLoopNormal(bool bIsLooping, int32 PreferSectionIdx = INDEX_NONE)"
  },
  {
    "label": "MontagePreview_PreviewAllSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_PreviewAllSections(bool bPlay = true)"
  },
  {
    "label": "MontagePreview_SetLoopAllSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetLoopAllSections(bool bIsLooping)"
  },
  {
    "label": "MontagePreview_SetLoopAllSetupSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetLoopAllSetupSections(bool bIsLooping)"
  },
  {
    "label": "MontagePreview_ResetSectionsOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_ResetSectionsOrder()"
  },
  {
    "label": "MontagePreview_SetLooping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetLooping(bool bIsLooping)"
  },
  {
    "label": "MontagePreview_SetPlaying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetPlaying(bool bIsPlaying)"
  },
  {
    "label": "MontagePreview_SetReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_SetReverse(bool bInReverse)"
  },
  {
    "label": "MontagePreview_StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_StepForward()"
  },
  {
    "label": "MontagePreview_StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_StepBackward()"
  },
  {
    "label": "MontagePreview_JumpToPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_JumpToPosition(float NewPosition)"
  },
  {
    "label": "MontagePreview_FindFirstSectionAsInMontage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MontagePreview_FindFirstSectionAsInMontage(int32 AnySectionIdx)"
  },
  {
    "label": "MontagePreview_FindLastSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MontagePreview_FindLastSection(int32 StartSectionIdx)"
  },
  {
    "label": "MontagePreview_CalculateStepLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MontagePreview_CalculateStepLength()"
  },
  {
    "label": "MontagePreview_RemoveBlendOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontagePreview_RemoveBlendOut()"
  },
  {
    "label": "IsPlayingMontage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingMontage()"
  },
  {
    "label": "FindModifiedBone()",
    "kind": "Method",
    "detail": "Function (} FAnimNode_ModifyBone*)",
    "insertText": "FindModifiedBone(const FName& InBoneName, bool bCurveController=false)"
  },
  {
    "label": "ModifyBone()",
    "kind": "Method",
    "detail": "Function (FAnimNode_ModifyBone&)",
    "insertText": "ModifyBone(const FName& InBoneName, bool bCurveController=false)"
  },
  {
    "label": "RemoveBoneModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBoneModification(const FName& InBoneName, bool bCurveController=false)"
  },
  {
    "label": "ResetModifiedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModifiedBone(bool bCurveController=false)"
  },
  {
    "label": "RefreshCurveBoneControllers()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RefreshCurveBoneControllers()"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName = NAME_None)"
  }
]