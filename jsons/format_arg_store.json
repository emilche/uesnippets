[
  {
    "label": "_Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Context"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ptr"
  },
  {
    "label": "__packed_format_arg_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__packed_format_arg_store"
  },
  {
    "label": "__unpacked_format_arg_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unpacked_format_arg_store"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMAT_ARG_STORE_H # define _LIBCPP___FORMAT_FORMAT_ARG_STORE_H # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__determine_arg_t()",
    "kind": "Method",
    "detail": "Function (template<class _Context,class _Tp> consteval __arg_t)",
    "insertText": "__determine_arg_t()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_INT128 else if)",
    "insertText": "constexpr(sizeof(_Tp) == sizeof(__int128_t))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif else)",
    "insertText": "static_assert(sizeof(_Tp) == 0, \"an unsupported signed integer was used\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_INT128 else if)",
    "insertText": "constexpr(sizeof(_Tp) == sizeof(__uint128_t))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif else)",
    "insertText": "static_assert(sizeof(_Tp) == 0, \"an unsupported unsigned integer was used\")"
  },
  {
    "label": "__create_format_arg()",
    "kind": "Method",
    "detail": "Function (template<class _Context,class _Tp> _LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context>)",
    "insertText": "__create_format_arg(_Tp&& __value)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (__arg_t __arg = __determine_arg_t<_Context,remove_cvref_t<)",
    "insertText": "_Tp()"
  },
  {
    "label": "char_type()",
    "kind": "Method",
    "detail": "Function (__arg,static_cast<)",
    "insertText": "char_type(__value)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (__arg,static_cast<)",
    "insertText": "int(__value)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (__arg,static_cast<long)",
    "insertText": "long(__value)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (__arg,static_cast<)",
    "insertText": "unsigned(__value)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (__arg,basic_string_view<_Context::char_type> { __value,extent_v<remove_cvref_t<_Tp>> - 1 } } ; else return basic_format_arg<_Context> { __arg,basic_string_view<_Context::char_type> { __value .)",
    "insertText": "data(), __value.size()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (__arg,static_cast<const)",
    "insertText": "void(__value)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (__arg,__basic_format_arg_value<_Context>::__handle { _VSTD::forward<)",
    "insertText": "_Tp(__value)"
  },
  {
    "label": "__shift()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "__shift([&] { basic_format_arg<_Context> __arg = __create_format_arg<_Context>(__args); if (__shift != 0) __types |= static_cast<uint64_t>(__arg.__type_) << __shift; else __types = static_cast<uint64_t>(__arg.__type_); __shift += __packed_arg_t_bits; *__values++ = __arg.__value_; }(), ...)"
  },
  {
    "label": "__store_basic_format_arg()",
    "kind": "Method",
    "detail": "Function (} template<class _Context,class . . . _Args> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__store_basic_format_arg(basic_format_arg<_Context>* __data, _Args&&... __args)"
  },
  {
    "label": "__format_arg_store()",
    "kind": "Method",
    "detail": "Function (} template<class _Context,size_t N> struct __packed_format_arg_store { __basic_format_arg_value<_Context> __values_ [ N ] ; uint64_t __types_ ; } ; template<class _Context,size_t N> struct __unpacked_format_arg_store { basic_format_arg<_Context> __args_ [ N ] ; } ; } template<class _Context,class . . . _Args> struct _LIBCPP_TEMPLATE_VIS __format_arg_store { _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__format_arg_store(_Args&... __args)"
  },
  {
    "label": "__use_packed_format_arg_store()",
    "kind": "Method",
    "detail": "Function (} } using _Storage = conditional_t<)",
    "insertText": "__use_packed_format_arg_store(sizeof...(_Args)), __format::__packed_format_arg_store<_Context, sizeof...(_Args)>, __format::__unpacked_format_arg_store<_Context, sizeof...(_Args)"
  }
]