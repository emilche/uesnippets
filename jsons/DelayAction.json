[
  {
    "label": "FDelayAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelayAction"
  },
  {
    "label": "FDelayUntilNextTickAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelayUntilNextTickAction"
  },
  {
    "label": "FDelayAction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Engine / LatentActionManager . h \" # include \" LatentActions . h \" class FDelayAction : public FPendingLatentAction { public : float TimeRemaining ; FName ExecutionFunction ; int32 OutputLink ; FWeakObjectPtr CallbackTarget ;)",
    "insertText": "FDelayAction(float Duration, const FLatentActionInfo& LatentInfo) : TimeRemaining(Duration) , ExecutionFunction(LatentInfo.ExecutionFunction) , OutputLink(LatentInfo.Linkage) , CallbackTarget(LatentInfo.CallbackTarget)"
  },
  {
    "label": "UpdateOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateOperation(FLatentResponse& Response)"
  },
  {
    "label": "ElapsedTime()",
    "kind": "Method",
    "detail": "Function (TimeRemaining - = Response .)",
    "insertText": "ElapsedTime()"
  },
  {
    "label": "FinishAndTriggerIf()",
    "kind": "Method",
    "detail": "Function (Response .)",
    "insertText": "FinishAndTriggerIf(TimeRemaining <= 0.0f, ExecutionFunction, OutputLink, CallbackTarget)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FNumberFormattingOptions()",
    "kind": "Method",
    "detail": "Function (const FNumberFormattingOptions DelayTimeFormatOptions =)",
    "insertText": "FNumberFormattingOptions() .SetMinimumFractionalDigits(3) .SetMaximumFractionalDigits(3)"
  },
  {
    "label": "FDelayUntilNextTickAction()",
    "kind": "Method",
    "detail": "Function (} # endif } ; class FDelayUntilNextTickAction : public FPendingLatentAction { public : uint8 InitialFrameParity ; FName ExecutionFunction ; int32 OutputLink ; FWeakObjectPtr CallbackTarget ;)",
    "insertText": "FDelayUntilNextTickAction(const FLatentActionInfo& LatentInfo) : InitialFrameParity((uint8)GFrameCounter & 1) , ExecutionFunction(LatentInfo.ExecutionFunction) , OutputLink(LatentInfo.Linkage) , CallbackTarget(LatentInfo.CallbackTarget)"
  },
  {
    "label": "GuaranteeEngineTickDelay()",
    "kind": "Method",
    "detail": "Function (const bool bShouldFinish = !)",
    "insertText": "GuaranteeEngineTickDelay(((uint8)GFrameCounter & 1) != InitialFrameParity)"
  },
  {
    "label": "FinishAndTriggerIf()",
    "kind": "Method",
    "detail": "Function (Response .)",
    "insertText": "FinishAndTriggerIf(bShouldFinish, ExecutionFunction, OutputLink, CallbackTarget)"
  }
]