[
  {
    "label": "FSlateTextUnderlineLineHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextUnderlineLineHighlighter"
  },
  {
    "label": "FSlateTextStrikeLineHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextStrikeLineHighlighter"
  },
  {
    "label": "IRichTextMarkupParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRichTextMarkupParser"
  },
  {
    "label": "IRichTextMarkupWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRichTextMarkupWriter"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "FTextBlockStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextBlockStyle"
  },
  {
    "label": "FRichTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRichTextLayoutMarshaller"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateGlobals . h \" # include \" Framework / Text / TextLineHighlight . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / ITextDecorator . h \" # if WITH_FANCY_TEXT # include \" Framework / Text / BaseTextLayoutMarshaller . h \" # endif class FSlateTextUnderlineLineHighlighter ; class FSlateTextStrikeLineHighlighter ; class IRichTextMarkupParser ; class IRichTextMarkupWriter ; class ISlateStyle ; struct FTextBlockStyle ; # if WITH_FANCY_TEXT class FRichTextLayoutMarshaller : public FBaseTextLayoutMarshaller { public : TSharedRef<FRichTextLayoutMarshaller>)",
    "insertText": "Create(TArray< TSharedRef< ITextDecorator > > InDecorators, const ISlateStyle* const InDecoratorStyleSet)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FRichTextLayoutMarshaller>)",
    "insertText": "Create(TSharedPtr< IRichTextMarkupParser > InParser, TSharedPtr< IRichTextMarkupWriter > InWriter, TArray< TSharedRef< ITextDecorator > > InDecorators, const ISlateStyle* const InDecoratorStyleSet)"
  },
  {
    "label": "FRichTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRichTextLayoutMarshaller()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const FString& SourceString, FTextLayout& TargetTextLayout)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetText(FString& TargetString, const FTextLayout& SourceTextLayout)"
  },
  {
    "label": "SetFontSizeMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFontSizeMultiplier(const float NewFontSizeMultiplier)"
  },
  {
    "label": "SetDecorators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecorators(TArrayView<TSharedRef<ITextDecorator>> InDecorators)"
  },
  {
    "label": "AppendInlineDecorator()",
    "kind": "Method",
    "detail": "Function (Decorators = InDecorators ; } FRichTextLayoutMarshaller&)",
    "insertText": "AppendInlineDecorator(const TSharedRef< ITextDecorator >& DecoratorToAdd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InlineDecorators .)",
    "insertText": "Add(DecoratorToAdd)"
  },
  {
    "label": "FRichTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (DecoratorStyleSet = InStyleSet ; } protected :)",
    "insertText": "FRichTextLayoutMarshaller(TArray< TSharedRef< ITextDecorator > > InDecorators, const ISlateStyle* const InDecoratorStyleSet)"
  },
  {
    "label": "FRichTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichTextLayoutMarshaller(TSharedPtr< IRichTextMarkupParser > InParser, TSharedPtr< IRichTextMarkupWriter > InWriter, TArray< TSharedRef< ITextDecorator > > InDecorators, const ISlateStyle* const InDecoratorStyleSet)"
  },
  {
    "label": "TryGetDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITextDecorator>)",
    "insertText": "TryGetDecorator(const FString& Line, const FTextRunParseResults& TextRun)"
  },
  {
    "label": "AppendRunsForText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRunsForText(const int32 LineIndex, const FTextRunParseResults& TextRun, const FString& ProcessedString, const FTextBlockStyle& DefaultTextStyle, const TSharedRef<FString>& InOutModelText, FTextLayout& TargetTextLayout, TArray<TSharedRef<IRun>>& Runs, TArray<FTextLineHighlight>& LineHighlights, TMap<const FTextBlockStyle*, TSharedPtr<FSlateTextUnderlineLineHighlighter>>& CachedUnderlineHighlighters, TMap<const FTextBlockStyle*, TSharedPtr<FSlateTextStrikeLineHighlighter>>& CachedStrikeLineHighlighters)"
  }
]