[
  {
    "label": "FSingleThreadEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleThreadEvent"
  },
  {
    "label": "FSingleThreadEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / Event . h \" class FSingleThreadEvent : public FEvent { bool bTriggered ; bool bManualReset ; public :)",
    "insertText": "FSingleThreadEvent() : bTriggered(false) , bManualReset(false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Create(bool bIsManualReset = false)"
  },
  {
    "label": "IsManualReset()",
    "kind": "Method",
    "detail": "Function (bManualReset = bIsManualReset ; return true ; } bool)",
    "insertText": "IsManualReset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bTriggered = true ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bTriggered = false ; } bool)",
    "insertText": "Wait(uint32 WaitTime, const bool bIgnoreThreadIdleStats = false)"
  }
]