[
  {
    "label": "Block4x4EncodingBits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits"
  },
  {
    "label": "Block4x4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcColor . h \" # include \" EtcColorFloatRGBA . h \" # include \" EtcErrorMetric . h \" # include \" EtcImage . h \" # include \" EtcBlock4x4Encoding . h \" namespace Etc { class Block4x4EncodingBits ; class Block4x4 { public : const unsigned int ROWS = 4 ; const unsigned int COLUMNS = 4 ; const unsigned int PIXELS = ROWS* COLUMNS ; enum class SourceAlphaMix { UNKNOWN,OPAQUE,TRANSPARENT,TRANSLUCENT } ; typedef)",
    "insertText": "void(Block4x4::*EncoderFunctionPtr)(void)"
  },
  {
    "label": "Block4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Block4x4(void)"
  },
  {
    "label": "Block4x4()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Block4x4()"
  },
  {
    "label": "InitFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromSource(Image *a_pimageSource, unsigned int a_uiSourceH, unsigned int a_uiSourceV, unsigned char *a_paucEncodingBits, ErrorMetric a_errormetric)"
  },
  {
    "label": "InitFromEtcEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromEtcEncodingBits(Image::Format a_imageformat, unsigned int a_uiSourceH, unsigned int a_uiSourceV, unsigned char *a_paucEncodingBits, Image *a_pimageSource, ErrorMetric a_errormetric)"
  },
  {
    "label": "PerformEncodingIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformEncodingIteration(float a_fEffort)"
  },
  {
    "label": "PerformIteration()",
    "kind": "Method",
    "detail": "Function (m_pencoding ->)",
    "insertText": "PerformIteration(a_fEffort)"
  },
  {
    "label": "SetEncodingBitsFromEncoding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEncodingBitsFromEncoding(void)"
  },
  {
    "label": "SetEncodingBits()",
    "kind": "Method",
    "detail": "Function (m_pencoding ->)",
    "insertText": "SetEncodingBits()"
  },
  {
    "label": "GetSourceH()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "GetSourceH(void)"
  },
  {
    "label": "GetDecodedColors()",
    "kind": "Method",
    "detail": "Function (} const unsigned int s_auiPixelOrderHScan [ PIXELS ] ; ColorFloatRGBA*)",
    "insertText": "GetDecodedColors(void)"
  },
  {
    "label": "GetDecodedAlphas()",
    "kind": "Method",
    "detail": "Function (} float*)",
    "insertText": "GetDecodedAlphas(void)"
  },
  {
    "label": "GetEncodingMode()",
    "kind": "Method",
    "detail": "Function (} Block4x4Encoding::Mode)",
    "insertText": "GetEncodingMode(void)"
  },
  {
    "label": "GetFlip()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetFlip(void)"
  },
  {
    "label": "IsDifferential()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDifferential(void)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (} ColorFloatRGBA*)",
    "insertText": "GetSource()"
  },
  {
    "label": "GetEncoding()",
    "kind": "Method",
    "detail": "Function (Block4x4Encoding*)",
    "insertText": "GetEncoding(void)"
  }
]