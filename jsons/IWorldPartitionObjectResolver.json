[
  {
    "label": "FWorldPartitionResolveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionResolveData"
  },
  {
    "label": "UWorldPartitionObjectResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionObjectResolver"
  },
  {
    "label": "IWorldPartitionObjectResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionObjectResolver"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Interface . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" WorldPartition / WorldPartitionActorContainerID . h \" # include \" IWorldPartitionObjectResolver . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FWorldPartitionResolveData()"
  },
  {
    "label": "FWorldPartitionResolveData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionResolveData(const FActorContainerID& InContainerID, const FTopLevelAssetPath& InSourceWorldAssetPath) : ContainerID(InContainerID), SourceWorldAssetPath(InSourceWorldAssetPath)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ResolveObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ResolveObject(UWorld* InWorld, const FSoftObjectPath& InObjectPath, UObject*& OutObject)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IWorldPartitionObjectResolver { public :)",
    "insertText": "GENERATED_BODY() #if WITH_EDITOR virtual void SetWorldPartitionResolveData(const FWorldPartitionResolveData& InEmbeddingData)"
  },
  {
    "label": "GetWorldPartitionResolveData()",
    "kind": "Method",
    "detail": "Function (# endif const FWorldPartitionResolveData&)",
    "insertText": "GetWorldPartitionResolveData()"
  }
]