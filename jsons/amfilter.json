[
  {
    "label": "CBaseMediaFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseMediaFilter"
  },
  {
    "label": "CBaseFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseFilter"
  },
  {
    "label": "CBasePin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBasePin"
  },
  {
    "label": "CEnumPins",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumPins"
  },
  {
    "label": "CEnumMediaTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumMediaTypes"
  },
  {
    "label": "CBaseOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseOutputPin"
  },
  {
    "label": "CBaseInputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseInputPin"
  },
  {
    "label": "CMediaSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMediaSample"
  },
  {
    "label": "CBaseAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseAllocator"
  },
  {
    "label": "CMemAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMemAllocator"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CDynamicOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDynamicOutputPin"
  },
  {
    "label": "BLOCK_STATE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BLOCK_STATE"
  },
  {
    "label": "CAutoUsingOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAutoUsingOutputPin"
  },
  {
    "label": "CSampleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSampleList"
  },
  {
    "label": "QueryFilterInfoReleaseGraph()",
    "kind": "Method",
    "detail": "Function (# ifndef __FILTER__ # define __FILTER__ class CBaseMediaFilter ; class CBaseFilter ; class CBasePin ; class CEnumPins ; class CEnumMediaTypes ; class CBaseOutputPin ; class CBaseInputPin ; class CMediaSample ; class CBaseAllocator ; class CMemAllocator ; # define)",
    "insertText": "QueryFilterInfoReleaseGraph(fi) if ((fi).pGraph) (fi).pGraph->Release()"
  },
  {
    "label": "QueryPinInfoReleaseFilter()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "QueryPinInfoReleaseFilter(pi) if ((pi).pFilter) (pi).pFilter->Release()"
  },
  {
    "label": "CBaseMediaFilter()",
    "kind": "Method",
    "detail": "Function (class AM_NOVTABLE CBaseMediaFilter : public CUnknown,public IMediaFilter { protected : FILTER_STATE m_State ; IReferenceClock* m_pClock ; CRefTime m_tStart ; CLSID m_clsid ; CCritSec* m_pLock ; public :)",
    "insertText": "CBaseMediaFilter(__in_opt LPCTSTR pName, __inout_opt LPUNKNOWN pUnk, __in CCritSec *pLock, REFCLSID clsid)"
  },
  {
    "label": "CBaseMediaFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CBaseMediaFilter()"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "GetClassID()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetClassID(__out CLSID *pClsID)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetState(DWORD dwMSecs, __out FILTER_STATE *State)"
  },
  {
    "label": "SetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncSource(__inout_opt IReferenceClock *pClock)"
  },
  {
    "label": "GetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetSyncSource(__deref_out_opt IReferenceClock **pClock)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Pause()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Run(REFERENCE_TIME tStart)"
  },
  {
    "label": "StreamTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StreamTime(CRefTime& rtStream)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "IsActive()"
  },
  {
    "label": "cObjectLock()",
    "kind": "Method",
    "detail": "Function (CAutoLock)",
    "insertText": "cObjectLock(m_pLock)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (} ; } ; class AM_NOVTABLE CBaseFilter : public CUnknown,public IBaseFilter,public IAMovieSetup { class CBasePin ; protected : FILTER_STATE m_State ; IReferenceClock* m_pClock ; CRefTime m_tStart ; CLSID m_clsid ; CCritSec* m_pLock ; WCHAR* m_pName ; IFilterGraph* m_pGraph ; IMediaEventSink* m_pSink ; LONG m_PinVersion ; public :)",
    "insertText": "CBaseFilter(__in_opt LPCTSTR pName, __inout_opt LPUNKNOWN pUnk, __in CCritSec *pLock, REFCLSID clsid)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CBaseFilter(__in_opt LPCTSTR pName, __in_opt LPUNKNOWN pUnk, __in CCritSec *pLock, REFCLSID clsid, __inout HRESULT *phr)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CBaseFilter(__in_opt LPCSTR pName, __in_opt LPUNKNOWN pUnk, __in CCritSec *pLock, REFCLSID clsid)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CBaseFilter(__in_opt LPCSTR pName, __in_opt LPUNKNOWN pUnk, __in CCritSec *pLock, REFCLSID clsid, __inout HRESULT *phr)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CBaseFilter()"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG)",
    "insertText": "STDMETHODIMP_(ULONG) NonDelegatingRelease()"
  },
  {
    "label": "SetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncSource(__in_opt IReferenceClock *pClock)"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (} ; BOOL)",
    "insertText": "IsStopped()"
  },
  {
    "label": "EnumPins()",
    "kind": "Method",
    "detail": "Function (} ; STDMETHODIMP)",
    "insertText": "EnumPins(__deref_out IEnumPins ** ppEnum)"
  },
  {
    "label": "FindPin()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "FindPin(LPCWSTR Id, __deref_out IPin ** ppPin)"
  },
  {
    "label": "QueryFilterInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryFilterInfo(__out FILTER_INFO * pInfo)"
  },
  {
    "label": "JoinFilterGraph()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "JoinFilterGraph(__inout_opt IFilterGraph * pGraph, __in_opt LPCWSTR pName)"
  },
  {
    "label": "QueryVendorInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryVendorInfo(__deref_out LPWSTR* pVendorInfo)"
  },
  {
    "label": "NotifyEvent()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "NotifyEvent(long EventCode, LONG_PTR EventParam1, LONG_PTR EventParam2)"
  },
  {
    "label": "GetFilterGraph()",
    "kind": "Method",
    "detail": "Function (__out_opt IFilterGraph*)",
    "insertText": "GetFilterGraph()"
  },
  {
    "label": "GetPinVersion()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetPinVersion()"
  },
  {
    "label": "IncrementPinVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementPinVersion()"
  },
  {
    "label": "GetPinCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPinCount()"
  },
  {
    "label": "GetPin()",
    "kind": "Method",
    "detail": "Function (CBasePin*)",
    "insertText": "GetPin(int n)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Register()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Unregister()"
  },
  {
    "label": "GetSetupData()",
    "kind": "Method",
    "detail": "Function (__out_opt LPAMOVIESETUP_FILTER)",
    "insertText": "GetSetupData()"
  },
  {
    "label": "DisplayTypeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTypeInfo(IPin *pPin, const CMediaType *pmt)"
  },
  {
    "label": "DisplayPinInfo()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "DisplayPinInfo(IPin *pReceivePin)"
  },
  {
    "label": "AttemptConnection()",
    "kind": "Method",
    "detail": "Function (} ; # endif HRESULT)",
    "insertText": "AttemptConnection(IPin* pReceivePin, const CMediaType* pmt)"
  },
  {
    "label": "TryMediaTypes()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "TryMediaTypes(IPin *pReceivePin, __in_opt const CMediaType *pmt, IEnumMediaTypes *pEnum)"
  },
  {
    "label": "AgreeMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AgreeMediaType(IPin *pReceivePin, const CMediaType *pmt)"
  },
  {
    "label": "CBasePin()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CBasePin(__in_opt LPCTSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName, PIN_DIRECTION dir)"
  },
  {
    "label": "CBasePin()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CBasePin(__in_opt LPCSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName, PIN_DIRECTION dir)"
  },
  {
    "label": "CBasePin()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CBasePin()"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHODIMP_(ULONG) NonDelegatingAddRef()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Connect(IPin * pReceivePin, __in_opt const AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "ReceiveConnection()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReceiveConnection(IPin * pConnector, const AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Disconnect()"
  },
  {
    "label": "ConnectedTo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConnectedTo(__deref_out IPin **pPin)"
  },
  {
    "label": "ConnectionMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConnectionMediaType(__out AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "QueryPinInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryPinInfo(__out PIN_INFO * pInfo)"
  },
  {
    "label": "QueryDirection()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryDirection(__out PIN_DIRECTION * pPinDir)"
  },
  {
    "label": "QueryId()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryId(__deref_out LPWSTR * Id)"
  },
  {
    "label": "QueryAccept()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryAccept(const AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "EnumMediaTypes()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EnumMediaTypes(__deref_out IEnumMediaTypes **ppEnum)"
  },
  {
    "label": "QueryInternalConnections()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryInternalConnections(__out_ecount_part(*nPin,*nPin) IPin* *apPin, __inout ULONG *nPin)"
  },
  {
    "label": "NewSegment()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NewSegment(REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter * pSender, Quality q)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSink(IQualityControl * piqc)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "IsConnected(void)"
  },
  {
    "label": "GetConnected()",
    "kind": "Method",
    "detail": "Function (} ; IPin*)",
    "insertText": "GetConnected()"
  },
  {
    "label": "GetMediaTypeVersion()",
    "kind": "Method",
    "detail": "Function (} ; LONG)",
    "insertText": "GetMediaTypeVersion()"
  },
  {
    "label": "IncrementTypeVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementTypeVersion()"
  },
  {
    "label": "Active()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Active(void)"
  },
  {
    "label": "Inactive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Inactive(void)"
  },
  {
    "label": "CheckMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckMediaType(const CMediaType *)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(const CMediaType *)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckConnect(IPin *)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect()"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(IPin *pReceivePin)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaType(int iPosition, __inout CMediaType *pMediaType)"
  },
  {
    "label": "CurrentStopTime()",
    "kind": "Method",
    "detail": "Function (REFERENCE_TIME)",
    "insertText": "CurrentStopTime()"
  },
  {
    "label": "CanReconnectWhenActive()",
    "kind": "Method",
    "detail": "Function (m_bCanReconnectWhenActive = bCanReconnect ; } bool)",
    "insertText": "CanReconnectWhenActive()"
  },
  {
    "label": "AreWeOutOfSync()",
    "kind": "Method",
    "detail": "Function (} ; class CEnumPins : public IEnumPins { int m_Position ; int m_PinCount ; CBaseFilter* m_pFilter ; LONG m_Version ; LONG m_cRef ; typedef CGenericList<CBasePin> CPinList ; CPinList m_PinCache ; # ifdef DEBUG DWORD m_dwCookie ; # endif BOOL)",
    "insertText": "AreWeOutOfSync()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} ; STDMETHODIMP)",
    "insertText": "Refresh()"
  },
  {
    "label": "CEnumPins()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CEnumPins(__in CBaseFilter *pFilter, __in_opt CEnumPins *pEnumPins)"
  },
  {
    "label": "CEnumPins()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CEnumPins()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHODIMP_(ULONG) AddRef()"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHODIMP_(ULONG) Release()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Next(ULONG cPins, __out_ecount(cPins) IPin ** ppPins, __out_opt ULONG * pcFetched)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Skip(ULONG cPins)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Reset()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Clone(__deref_out IEnumPins **ppEnum)"
  },
  {
    "label": "CEnumMediaTypes()",
    "kind": "Method",
    "detail": "Function (} ; public :)",
    "insertText": "CEnumMediaTypes(__in CBasePin *pPin, __in_opt CEnumMediaTypes *pEnumMediaTypes)"
  },
  {
    "label": "CEnumMediaTypes()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CEnumMediaTypes()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Next(ULONG cMediaTypes, __out_ecount(cMediaTypes) AM_MEDIA_TYPE ** ppMediaTypes, __out_opt ULONG * pcFetched)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Skip(ULONG cMediaTypes)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Clone(__deref_out IEnumMediaTypes **ppEnum)"
  },
  {
    "label": "CBaseOutputPin()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CBaseOutputPin : public CBasePin { protected : IMemAllocator* m_pAllocator ; IMemInputPin* m_pInputPin ; public :)",
    "insertText": "CBaseOutputPin(__in_opt LPCTSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CBaseOutputPin()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CBaseOutputPin(__in_opt LPCSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "DecideAllocator()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideAllocator(IMemInputPin * pPin, __deref_out IMemAllocator ** pAlloc)"
  },
  {
    "label": "DecideBufferSize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideBufferSize(IMemAllocator * pAlloc, __inout ALLOCATOR_PROPERTIES * ppropInputRequest)"
  },
  {
    "label": "GetDeliveryBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDeliveryBuffer(__deref_out IMediaSample ** ppSample, __in_opt REFERENCE_TIME * pStartTime, __in_opt REFERENCE_TIME * pEndTime, DWORD dwFlags)"
  },
  {
    "label": "Deliver()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Deliver(IMediaSample *)"
  },
  {
    "label": "InitAllocator()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "InitAllocator(__deref_out IMemAllocator **ppAlloc)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckConnect(IPin *pPin)"
  },
  {
    "label": "EndOfStream()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndOfStream(void)"
  },
  {
    "label": "DeliverEndOfStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndOfStream(void)"
  },
  {
    "label": "BeginFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "BeginFlush(void)"
  },
  {
    "label": "EndFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndFlush(void)"
  },
  {
    "label": "DeliverBeginFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverBeginFlush(void)"
  },
  {
    "label": "DeliverEndFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndFlush(void)"
  },
  {
    "label": "DeliverNewSegment()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverNewSegment(REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate)"
  },
  {
    "label": "CBaseInputPin()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CBaseInputPin : public CBasePin,public IMemInputPin { protected : IMemAllocator* m_pAllocator ; BYTE m_bReadOnly ; BYTE m_bFlushing ; AM_SAMPLE2_PROPERTIES m_SampleProps ; public :)",
    "insertText": "CBaseInputPin(__in_opt LPCTSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CBaseInputPin()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CBaseInputPin(__in_opt LPCSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CBaseInputPin()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CBaseInputPin()"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAllocator(__deref_out IMemAllocator ** ppAllocator)"
  },
  {
    "label": "NotifyAllocator()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NotifyAllocator(IMemAllocator * pAllocator, BOOL bReadOnly)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Receive(IMediaSample *pSample)"
  },
  {
    "label": "ReceiveMultiple()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReceiveMultiple(__in_ecount(nSamples) IMediaSample **pSamples, long nSamples, __out long *nSamplesProcessed)"
  },
  {
    "label": "ReceiveCanBlock()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReceiveCanBlock()"
  },
  {
    "label": "GetAllocatorRequirements()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAllocatorRequirements(__out ALLOCATOR_PROPERTIES*pProps)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "PassNotify()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PassNotify(Quality& q)"
  },
  {
    "label": "SampleProps()",
    "kind": "Method",
    "detail": "Function (AM_SAMPLE2_PROPERTIES*)",
    "insertText": "SampleProps()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(m_SampleProps.cbData != 0)"
  },
  {
    "label": "CDynamicOutputPin()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CDynamicOutputPin(__in_opt LPCTSTR pObjectName, __in CBaseFilter *pFilter, __in CCritSec *pLock, __inout HRESULT *phr, __in_opt LPCWSTR pName)"
  },
  {
    "label": "CDynamicOutputPin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CDynamicOutputPin()"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Disconnect(void)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Block(DWORD dwBlockFlags, HANDLE hEvent)"
  },
  {
    "label": "SetConfigInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConfigInfo(IGraphConfig *pGraphConfig, HANDLE hStopEvent)"
  },
  {
    "label": "Deliver()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG HRESULT)",
    "insertText": "Deliver(IMediaSample *pSample)"
  },
  {
    "label": "StartUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StartUsingOutputPin(void)"
  },
  {
    "label": "StopUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopUsingOutputPin(void)"
  },
  {
    "label": "StreamingThreadUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamingThreadUsingOutputPin(void)"
  },
  {
    "label": "ChangeOutputFormat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeOutputFormat(const AM_MEDIA_TYPE *pmt, REFERENCE_TIME tSegmentStart, REFERENCE_TIME tSegmentStop, double dSegmentRate)"
  },
  {
    "label": "ChangeMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeMediaType(const CMediaType *pmt)"
  },
  {
    "label": "DynamicReconnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DynamicReconnect(const CMediaType *pmt)"
  },
  {
    "label": "SynchronousBlockOutputPin()",
    "kind": "Method",
    "detail": "Function (protected : HRESULT)",
    "insertText": "SynchronousBlockOutputPin(void)"
  },
  {
    "label": "AsynchronousBlockOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AsynchronousBlockOutputPin(HANDLE hNotifyCallerPinBlockedEvent)"
  },
  {
    "label": "UnblockOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "UnblockOutputPin(void)"
  },
  {
    "label": "BlockOutputPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOutputPin(void)"
  },
  {
    "label": "ResetBlockState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBlockState(void)"
  },
  {
    "label": "WaitEvent()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "WaitEvent(HANDLE hEvent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (enum BLOCK_STATE { NOT_BLOCKED,PENDING,BLOCKED } ; CCritSec m_BlockStateLock ; HANDLE m_hUnblockOutputPinEvent ; HANDLE m_hNotifyCallerPinBlockedEvent ; BLOCK_STATE m_BlockState ; DWORD m_dwBlockCallerThreadID ; DWORD m_dwNumOutstandingOutputPinUsers ; HANDLE m_hStopEvent ; IGraphConfig* m_pGraphConfig ; BOOL m_bPinUsesReadOnlyAllocator ; private : HRESULT)",
    "insertText": "Initialize(void)"
  },
  {
    "label": "ChangeMediaTypeHelper()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeMediaTypeHelper(const CMediaType *pmt)"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG void)",
    "insertText": "AssertValid(void)"
  },
  {
    "label": "CAutoUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (# endif } ; class CAutoUsingOutputPin { public :)",
    "insertText": "CAutoUsingOutputPin(__in CDynamicOutputPin* pOutputPin, __inout HRESULT* phr)"
  },
  {
    "label": "CAutoUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CAutoUsingOutputPin()"
  },
  {
    "label": "CAutoUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (private : CDynamicOutputPin* m_pOutputPin ; } ;)",
    "insertText": "CAutoUsingOutputPin(__in CDynamicOutputPin* pOutputPin, __inout HRESULT* phr ) : m_pOutputPin(NULL)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(NULL != pOutputPin)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(NULL != phr)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(S_OK == *phr)"
  },
  {
    "label": "StartUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = pOutputPin ->)",
    "insertText": "StartUsingOutputPin()"
  },
  {
    "label": "StopUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (m_pOutputPin ->)",
    "insertText": "StopUsingOutputPin()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(StreamingThreadUsingOutputPin())"
  },
  {
    "label": "__field_ecount_opt()",
    "kind": "Method",
    "detail": "Function (} # endif class CMediaSample : public IMediaSample2 { protected : class CBaseAllocator ; enum { Sample_SyncPoint = 0 x01,Sample_Preroll = 0 x02,Sample_Discontinuity = 0 x04,Sample_TypeChanged = 0 x08,Sample_TimeValid = 0 x10,Sample_MediaTimeValid = 0 x20,Sample_TimeDiscontinuity = 0 x40,Sample_StopValid = 0 x100,Sample_ValidFlags = 0 x1FF } ; DWORD m_dwFlags ; DWORD m_dwTypeSpecificFlags ;)",
    "insertText": "__field_ecount_opt(m_cbBuffer)"
  },
  {
    "label": "CMediaSample()",
    "kind": "Method",
    "detail": "Function (LONG m_lActual ; LONG m_cbBuffer ; CBaseAllocator* m_pAllocator ; CMediaSample* m_pNext ; REFERENCE_TIME m_Start ; REFERENCE_TIME m_End ; LONGLONG m_MediaStart ; LONG m_MediaEnd ; AM_MEDIA_TYPE* m_pMediaType ; DWORD m_dwStreamId ; public : LONG m_cRef ; public :)",
    "insertText": "CMediaSample(__in_opt LPCTSTR pName, __in_opt CBaseAllocator *pAllocator, __inout_opt HRESULT *phr, __in_bcount_opt(length) LPBYTE pBuffer = NULL, LONG length = 0)"
  },
  {
    "label": "CMediaSample()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CMediaSample(__in_opt LPCSTR pName, __in_opt CBaseAllocator *pAllocator, __inout_opt HRESULT *phr, __in_bcount_opt(length) LPBYTE pBuffer = NULL, LONG length = 0)"
  },
  {
    "label": "CMediaSample()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CMediaSample()"
  },
  {
    "label": "SetPointer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetPointer(__in_bcount(cBytes) BYTE * ptr, LONG cBytes)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPointer(__deref_out BYTE ** ppBuffer)"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHODIMP_(LONG) GetSize(void)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTime(__out REFERENCE_TIME * pTimeStart, __out REFERENCE_TIME * pTimeEnd)"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTime(__in_opt REFERENCE_TIME * pTimeStart, __in_opt REFERENCE_TIME * pTimeEnd)"
  },
  {
    "label": "IsSyncPoint()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsSyncPoint(void)"
  },
  {
    "label": "SetSyncPoint()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncPoint(BOOL bIsSyncPoint)"
  },
  {
    "label": "IsPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsPreroll(void)"
  },
  {
    "label": "SetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetPreroll(BOOL bIsPreroll)"
  },
  {
    "label": "STDMETHODIMP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHODIMP_(LONG) GetActualDataLength(void)"
  },
  {
    "label": "SetActualDataLength()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetActualDataLength(LONG lActual)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetMediaType(__deref_out AM_MEDIA_TYPE **ppMediaType)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetMediaType(__in_opt AM_MEDIA_TYPE *pMediaType)"
  },
  {
    "label": "IsDiscontinuity()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsDiscontinuity(void)"
  },
  {
    "label": "SetDiscontinuity()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetDiscontinuity(BOOL bDiscontinuity)"
  },
  {
    "label": "GetMediaTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetMediaTime(__out LONGLONG * pTimeStart, __out LONGLONG * pTimeEnd)"
  },
  {
    "label": "SetMediaTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetMediaTime(__in_opt LONGLONG * pTimeStart, __in_opt LONGLONG * pTimeEnd)"
  },
  {
    "label": "GetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetProperties(DWORD cbProperties, __out_bcount(cbProperties) BYTE * pbProperties)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetProperties(DWORD cbProperties, __in_bcount(cbProperties) const BYTE * pbProperties)"
  },
  {
    "label": "NextSample()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CBaseAllocator : public CUnknown,public IMemAllocatorCallbackTemp,public CCritSec { class CSampleList ; class CSampleList ; CMediaSample*&)",
    "insertText": "NextSample(__in CMediaSample *pSample)"
  },
  {
    "label": "CSampleList()",
    "kind": "Method",
    "detail": "Function (} ; # ifdef DEBUG ~)",
    "insertText": "CSampleList()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(m_nOnList == 0)"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (} ; # endif CMediaSample*)",
    "insertText": "Head()"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} ; int)",
    "insertText": "GetCount()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(pSample != NULL)"
  },
  {
    "label": "NextSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextSample(pSample)"
  },
  {
    "label": "RemoveHead()",
    "kind": "Method",
    "detail": "Function (m_List = pSample ; m_nOnList + + ; } ; CMediaSample*)",
    "insertText": "RemoveHead()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CMediaSample* pSample = m_List ;)",
    "insertText": "if(pSample != NULL)"
  },
  {
    "label": "NextSample()",
    "kind": "Method",
    "detail": "Function (m_List =)",
    "insertText": "NextSample(m_List)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (m_nOnList - - ; } return pSample ; } ; void)",
    "insertText": "Remove(__inout CMediaSample *pSample)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (public : CMediaSample* m_List ; int m_nOnList ; } ; protected : CSampleList m_lFree ; HANDLE m_hSem ; long m_lWaiting ; long m_lCount ; long m_lAllocated ; long m_lSize ; long m_lAlignment ; long m_lPrefix ; BOOL m_bChanged ; BOOL m_bCommitted ; BOOL m_bDecommitInProgress ; IMemAllocatorNotifyCallbackTemp* m_pNotify ; BOOL m_fEnableReleaseCallback ; void)",
    "insertText": "Free(void)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Alloc(void)"
  },
  {
    "label": "CBaseAllocator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CBaseAllocator(__in_opt LPCTSTR , __inout_opt LPUNKNOWN, __inout HRESULT *, BOOL bEvent = TRUE, BOOL fEnableReleaseCallback = FALSE)"
  },
  {
    "label": "CBaseAllocator()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CBaseAllocator(__in_opt LPCSTR , __inout_opt LPUNKNOWN, __inout HRESULT *, BOOL bEvent = TRUE, BOOL fEnableReleaseCallback = FALSE)"
  },
  {
    "label": "CBaseAllocator()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CBaseAllocator()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetProperties(__in ALLOCATOR_PROPERTIES* pRequest, __out ALLOCATOR_PROPERTIES* pActual)"
  },
  {
    "label": "GetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetProperties(__out ALLOCATOR_PROPERTIES* pProps)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Commit()"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Decommit()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetBuffer(__deref_out IMediaSample **ppBuffer, __in_opt REFERENCE_TIME * pStartTime, __in_opt REFERENCE_TIME * pEndTime, DWORD dwFlags)"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReleaseBuffer(IMediaSample *pBuffer)"
  },
  {
    "label": "SetNotify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetNotify(IMemAllocatorNotifyCallbackTemp *pNotify)"
  },
  {
    "label": "GetFreeCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetFreeCount(__out LONG *plBuffersFree)"
  },
  {
    "label": "NotifySample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySample()"
  },
  {
    "label": "SetWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaiting()"
  },
  {
    "label": "CreateMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (m_lWaiting + + ; } ; } ; STDAPI)",
    "insertText": "CreateMemoryAllocator(__deref_out IMemAllocator **ppAllocator)"
  },
  {
    "label": "ReallyFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallyFree(void)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (public : CUnknown*)",
    "insertText": "CreateInstance(__inout_opt LPUNKNOWN, __inout HRESULT *)"
  },
  {
    "label": "CMemAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CMemAllocator(__in_opt LPCTSTR , __inout_opt LPUNKNOWN, __inout HRESULT *)"
  },
  {
    "label": "CMemAllocator()",
    "kind": "Method",
    "detail": "Function (# ifdef UNICODE)",
    "insertText": "CMemAllocator(__in_opt LPCSTR , __inout_opt LPUNKNOWN, __inout HRESULT *)"
  },
  {
    "label": "CMemAllocator()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "CMemAllocator()"
  },
  {
    "label": "AMovieSetupRegisterFilter()",
    "kind": "Method",
    "detail": "Function (} ; STDAPI)",
    "insertText": "AMovieSetupRegisterFilter(const AMOVIESETUP_FILTER * const psetupdata , IFilterMapper * pIFM , BOOL bRegister)"
  }
]