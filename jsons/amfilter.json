[
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "CBaseMediaFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseMediaFilter"
  },
  {
    "label": "CBaseFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseFilter"
  },
  {
    "label": "CBasePin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBasePin"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CEnumPins",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumPins"
  },
  {
    "label": "CEnumMediaTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumMediaTypes"
  },
  {
    "label": "CBaseOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseOutputPin"
  },
  {
    "label": "CBaseInputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseInputPin"
  },
  {
    "label": "CMediaSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMediaSample"
  },
  {
    "label": "CBaseAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseAllocator"
  },
  {
    "label": "CMemAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMemAllocator"
  },
  {
    "label": "implementing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implementing"
  },
  {
    "label": "id",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "id"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "providing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "providing"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CBasePin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBasePin"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "CEnumPins",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumPins"
  },
  {
    "label": "CEnumMediaTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumMediaTypes"
  },
  {
    "label": "derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "derived"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CDynamicOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDynamicOutputPin"
  },
  {
    "label": "BLOCK_STATE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BLOCK_STATE"
  },
  {
    "label": "members",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "members"
  },
  {
    "label": "CAutoUsingOutputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAutoUsingOutputPin"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "CMediaSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMediaSample"
  },
  {
    "label": "CBaseAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseAllocator"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "CSampleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSampleList"
  },
  {
    "label": "CSampleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSampleList"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CSampleList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSampleList"
  },
  {
    "label": "CMemAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMemAllocator"
  },
  {
    "label": "CBaseMediaFilter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseMediaFilter(\n        __in_opt LPCTSTR pName,\n        __inout_opt LPUNKNOWN pUnk,\n        __in CCritSec  *pLock,\n\tREFCLSID   clsid)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "GetClassID()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetClassID(__out CLSID *pClsID)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetState(DWORD dwMSecs, __out FILTER_STATE *State)"
  },
  {
    "label": "SetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncSource(__inout_opt IReferenceClock *pClock)"
  },
  {
    "label": "GetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetSyncSource(__deref_out_opt IReferenceClock **pClock)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Pause()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Run(REFERENCE_TIME tStart)"
  },
  {
    "label": "StreamTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StreamTime(CRefTime& rtStream)"
  },
  {
    "label": "cObjectLock()",
    "kind": "Method",
    "detail": "Function (CAutoLock)",
    "insertText": "cObjectLock(m_pLock)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseFilter(\n        __in_opt LPCTSTR pName,   // Object description\n        __inout_opt LPUNKNOWN pUnk,  // IUnknown of delegating object\n        __in CCritSec  *pLock,    // Object who maintains lock\n\tREFCLSID   clsid)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (filter)",
    "insertText": "CBaseFilter(\n        __in_opt LPCTSTR pName,    // Object description\n        __in_opt LPUNKNOWN pUnk,  // IUnknown of delegating object\n        __in CCritSec  *pLock,    // Object who maintains lock\n\tREFCLSID   clsid,         // The clsid to be used to serialize this filter\n        __inout HRESULT   *phr)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CBaseFilter(\n        __in_opt LPCSTR pName,    // Object description\n        __in_opt LPUNKNOWN pUnk,  // IUnknown of delegating object\n        __in CCritSec  *pLock,    // Object who maintains lock\n\tREFCLSID   clsid)"
  },
  {
    "label": "CBaseFilter()",
    "kind": "Method",
    "detail": "Function (filter)",
    "insertText": "CBaseFilter(\n        __in_opt LPCSTR pName,     // Object description\n        __in_opt LPUNKNOWN pUnk,  // IUnknown of delegating object\n        __in CCritSec  *pLock,    // Object who maintains lock\n\tREFCLSID   clsid,         // The clsid to be used to serialize this filter\n        __inout HRESULT   *phr)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "GetClassID()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetClassID(__out CLSID *pClsID)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetState(DWORD dwMSecs, __out FILTER_STATE *State)"
  },
  {
    "label": "SetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncSource(__in_opt IReferenceClock *pClock)"
  },
  {
    "label": "GetSyncSource()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetSyncSource(__deref_out_opt IReferenceClock **pClock)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Pause()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Run(REFERENCE_TIME tStart)"
  },
  {
    "label": "StreamTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StreamTime(CRefTime& rtStream)"
  },
  {
    "label": "cObjectLock()",
    "kind": "Method",
    "detail": "Function (CAutoLock)",
    "insertText": "cObjectLock(m_pLock)"
  },
  {
    "label": "EnumPins()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EnumPins(\n                    __deref_out IEnumPins ** ppEnum)"
  },
  {
    "label": "FindPin()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "FindPin(\n        LPCWSTR Id,\n        __deref_out IPin ** ppPin\n    )"
  },
  {
    "label": "QueryFilterInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryFilterInfo(\n                    __out FILTER_INFO * pInfo)"
  },
  {
    "label": "JoinFilterGraph()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "JoinFilterGraph(\n                    __inout_opt IFilterGraph * pGraph,\n                    __in_opt LPCWSTR pName)"
  },
  {
    "label": "QueryVendorInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryVendorInfo(\n                    __deref_out LPWSTR* pVendorInfo\n            )"
  },
  {
    "label": "NotifyEvent()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "NotifyEvent(\n        long EventCode,\n        LONG_PTR EventParam1,\n        LONG_PTR EventParam2)"
  },
  {
    "label": "ReconnectPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ReconnectPin(IPin *pPin, __in_opt AM_MEDIA_TYPE const *pmt)"
  },
  {
    "label": "GetPinVersion()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetPinVersion()"
  },
  {
    "label": "IncrementPinVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementPinVersion()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Register()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Unregister()"
  },
  {
    "label": "DisplayPinInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPinInfo(IPin *pReceivePin)"
  },
  {
    "label": "DisplayTypeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTypeInfo(IPin *pPin, const CMediaType *pmt)"
  },
  {
    "label": "AttemptConnection()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AttemptConnection(\n        IPin* pReceivePin,      // connect to this pin\n        const CMediaType* pmt   // using this type\n    )"
  },
  {
    "label": "TryMediaTypes()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "TryMediaTypes(\n                        IPin *pReceivePin,          // connect to this pin\n                        __in_opt const CMediaType *pmt,  // proposed type from Connect\n                        IEnumMediaTypes *pEnum)"
  },
  {
    "label": "AgreeMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AgreeMediaType(\n                        IPin *pReceivePin,      // connect to this pin\n                        const CMediaType *pmt)"
  },
  {
    "label": "CBasePin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBasePin(\n        __in_opt LPCTSTR pObjectName,         // Object description\n        __in CBaseFilter *pFilter,       // Owning filter who knows about pins\n        __in CCritSec *pLock,            // Object who implements the lock\n        __inout HRESULT *phr,               // General OLE return code\n        __in_opt LPCWSTR pName,              // Pin name for us\n        PIN_DIRECTION dir)"
  },
  {
    "label": "CBasePin()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CBasePin(\n        __in_opt LPCSTR pObjectName,         // Object description\n        __in CBaseFilter *pFilter,       // Owning filter who knows about pins\n        __in CCritSec *pLock,            // Object who implements the lock\n        __inout HRESULT *phr,               // General OLE return code\n        __in_opt LPCWSTR pName,              // Pin name for us\n        PIN_DIRECTION dir)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Connect(\n        IPin * pReceivePin,\n        __in_opt const AM_MEDIA_TYPE *pmt   // optional media type\n    )"
  },
  {
    "label": "ReceiveConnection()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReceiveConnection(\n        IPin * pConnector,      // this is the initiating connecting pin\n        const AM_MEDIA_TYPE *pmt   // this is the media type we will exchange\n    )"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Disconnect()"
  },
  {
    "label": "ConnectedTo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConnectedTo(__deref_out IPin **pPin)"
  },
  {
    "label": "ConnectionMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConnectionMediaType(__out AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "QueryPinInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryPinInfo(\n        __out PIN_INFO * pInfo\n    )"
  },
  {
    "label": "QueryDirection()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryDirection(\n    \t__out PIN_DIRECTION * pPinDir\n    )"
  },
  {
    "label": "QueryId()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryId(\n        __deref_out LPWSTR * Id\n    )"
  },
  {
    "label": "QueryAccept()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryAccept(\n        const AM_MEDIA_TYPE *pmt\n    )"
  },
  {
    "label": "EnumMediaTypes()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EnumMediaTypes(\n        __deref_out IEnumMediaTypes **ppEnum\n    )"
  },
  {
    "label": "EndOfStream()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndOfStream(void)"
  },
  {
    "label": "NewSegment()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NewSegment(\n                    REFERENCE_TIME tStart,\n                    REFERENCE_TIME tStop,\n                    double dRate)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter * pSender, Quality q)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSink(IQualityControl * piqc)"
  },
  {
    "label": "GetMediaTypeVersion()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetMediaTypeVersion()"
  },
  {
    "label": "IncrementTypeVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementTypeVersion()"
  },
  {
    "label": "Active()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Active(void)"
  },
  {
    "label": "Inactive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Inactive(void)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Run(REFERENCE_TIME tStart)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetMediaType(const CMediaType *)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckConnect(IPin *)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect()"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(IPin *pReceivePin)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaType(int iPosition, __inout CMediaType *pMediaType)"
  },
  {
    "label": "DisconnectInternal()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "DisconnectInternal()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Refresh()"
  },
  {
    "label": "CEnumPins()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CEnumPins(\n        __in CBaseFilter *pFilter,\n        __in_opt CEnumPins *pEnumPins)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Skip(ULONG cPins)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Reset()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Clone(__deref_out IEnumPins **ppEnum)"
  },
  {
    "label": "CEnumMediaTypes()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CEnumMediaTypes(\n        __in CBasePin *pPin,\n        __in_opt CEnumMediaTypes *pEnumMediaTypes)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Skip(ULONG cMediaTypes)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Reset()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Clone(__deref_out IEnumMediaTypes **ppEnum)"
  },
  {
    "label": "CBaseOutputPin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseOutputPin(\n        __in_opt LPCTSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "CBaseOutputPin()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CBaseOutputPin(\n        __in_opt LPCSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(IPin *pReceivePin)"
  },
  {
    "label": "DecideAllocator()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DecideAllocator(IMemInputPin * pPin, __deref_out IMemAllocator ** pAlloc)"
  },
  {
    "label": "GetDeliveryBuffer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDeliveryBuffer(__deref_out IMediaSample ** ppSample,\n                                      __in_opt REFERENCE_TIME * pStartTime,\n                                      __in_opt REFERENCE_TIME * pEndTime,\n                                      DWORD dwFlags)"
  },
  {
    "label": "Deliver()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Deliver(IMediaSample *)"
  },
  {
    "label": "InitAllocator()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "InitAllocator(__deref_out IMemAllocator **ppAlloc)"
  },
  {
    "label": "CheckConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckConnect(IPin *pPin)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect()"
  },
  {
    "label": "Active()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Active(void)"
  },
  {
    "label": "Inactive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Inactive(void)"
  },
  {
    "label": "EndOfStream()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndOfStream(void)"
  },
  {
    "label": "DeliverEndOfStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndOfStream(void)"
  },
  {
    "label": "BeginFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "BeginFlush(void)"
  },
  {
    "label": "EndFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndFlush(void)"
  },
  {
    "label": "DeliverBeginFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverBeginFlush(void)"
  },
  {
    "label": "DeliverEndFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndFlush(void)"
  },
  {
    "label": "DeliverNewSegment()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverNewSegment(\n                        REFERENCE_TIME tStart,\n                        REFERENCE_TIME tStop,\n                        double dRate)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter * pSender, Quality q)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSink(IQualityControl * piqc)"
  },
  {
    "label": "CBaseInputPin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseInputPin(\n        __in_opt LPCTSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "CBaseInputPin()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CBaseInputPin(\n        __in_opt LPCSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAllocator(__deref_out IMemAllocator ** ppAllocator)"
  },
  {
    "label": "NotifyAllocator()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NotifyAllocator(\n                    IMemAllocator * pAllocator,\n                    BOOL bReadOnly)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Receive(IMediaSample *pSample)"
  },
  {
    "label": "ReceiveCanBlock()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReceiveCanBlock()"
  },
  {
    "label": "BeginFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "BeginFlush(void)"
  },
  {
    "label": "EndFlush()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "EndFlush(void)"
  },
  {
    "label": "GetAllocatorRequirements()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAllocatorRequirements(__out ALLOCATOR_PROPERTIES*pProps)"
  },
  {
    "label": "BreakConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "BreakConnect()"
  },
  {
    "label": "CheckStreaming()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckStreaming()"
  },
  {
    "label": "PassNotify()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PassNotify(Quality& q)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Notify(IBaseFilter * pSender, Quality q)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSink(IQualityControl * piqc)"
  },
  {
    "label": "Inactive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Inactive(void)"
  },
  {
    "label": "CDynamicOutputPin()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CDynamicOutputPin(\n        __in_opt LPCSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "CDynamicOutputPin()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "CDynamicOutputPin(\n        __in_opt LPCTSTR pObjectName,\n        __in CBaseFilter *pFilter,\n        __in CCritSec *pLock,\n        __inout HRESULT *phr,\n        __in_opt LPCWSTR pName)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Disconnect(void)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Block(DWORD dwBlockFlags, HANDLE hEvent)"
  },
  {
    "label": "SetConfigInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConfigInfo(IGraphConfig *pGraphConfig, HANDLE hStopEvent)"
  },
  {
    "label": "Deliver()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Deliver(IMediaSample *pSample)"
  },
  {
    "label": "DeliverEndOfStream()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndOfStream(void)"
  },
  {
    "label": "DeliverNewSegment()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverNewSegment(REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate)"
  },
  {
    "label": "DeliverBeginFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverBeginFlush(void)"
  },
  {
    "label": "DeliverEndFlush()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DeliverEndFlush(void)"
  },
  {
    "label": "Inactive()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Inactive(void)"
  },
  {
    "label": "Active()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Active(void)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect(IPin *pReceivePin)"
  },
  {
    "label": "StartUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "StartUsingOutputPin(void)"
  },
  {
    "label": "StopUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopUsingOutputPin(void)"
  },
  {
    "label": "StreamingThreadUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamingThreadUsingOutputPin(void)"
  },
  {
    "label": "ChangeOutputFormat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeOutputFormat(\n        const AM_MEDIA_TYPE *pmt,\n        REFERENCE_TIME tSegmentStart,\n        REFERENCE_TIME tSegmentStop,\n        double dSegmentRate\n        )"
  },
  {
    "label": "ChangeMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeMediaType(const CMediaType *pmt)"
  },
  {
    "label": "DynamicReconnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DynamicReconnect(const CMediaType *pmt)"
  },
  {
    "label": "SynchronousBlockOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SynchronousBlockOutputPin(void)"
  },
  {
    "label": "AsynchronousBlockOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AsynchronousBlockOutputPin(HANDLE hNotifyCallerPinBlockedEvent)"
  },
  {
    "label": "UnblockOutputPin()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "UnblockOutputPin(void)"
  },
  {
    "label": "BlockOutputPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOutputPin(void)"
  },
  {
    "label": "ResetBlockState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBlockState(void)"
  },
  {
    "label": "WaitEvent()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "WaitEvent(HANDLE hEvent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Initialize(void)"
  },
  {
    "label": "ChangeMediaTypeHelper()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeMediaTypeHelper(const CMediaType *pmt)"
  },
  {
    "label": "AssertValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertValid(void)"
  },
  {
    "label": "CAutoUsingOutputPin()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CAutoUsingOutputPin( __in CDynamicOutputPin* pOutputPin, __inout HRESULT* phr )"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPointer(__deref_out BYTE ** ppBuffer)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTime(\n        __out REFERENCE_TIME * pTimeStart,     // put time here\n        __out REFERENCE_TIME * pTimeEnd\n    )"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTime(\n        __in_opt REFERENCE_TIME * pTimeStart,     // put time here\n        __in_opt REFERENCE_TIME * pTimeEnd\n    )"
  },
  {
    "label": "IsSyncPoint()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsSyncPoint(void)"
  },
  {
    "label": "SetSyncPoint()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetSyncPoint(BOOL bIsSyncPoint)"
  },
  {
    "label": "IsPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsPreroll(void)"
  },
  {
    "label": "SetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetPreroll(BOOL bIsPreroll)"
  },
  {
    "label": "SetActualDataLength()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetActualDataLength(LONG lActual)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetMediaType(__deref_out AM_MEDIA_TYPE **ppMediaType)"
  },
  {
    "label": "SetMediaType()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetMediaType(__in_opt AM_MEDIA_TYPE *pMediaType)"
  },
  {
    "label": "IsDiscontinuity()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsDiscontinuity(void)"
  },
  {
    "label": "SetDiscontinuity()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetDiscontinuity(BOOL bDiscontinuity)"
  },
  {
    "label": "GetMediaTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetMediaTime(\n    \t__out LONGLONG * pTimeStart,\n\t    __out LONGLONG * pTimeEnd\n    )"
  },
  {
    "label": "SetMediaTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetMediaTime(\n    \t__in_opt LONGLONG * pTimeStart,\n\t    __in_opt LONGLONG * pTimeEnd\n    )"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(__inout CMediaSample *pSample)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Alloc(void)"
  },
  {
    "label": "CBaseAllocator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseAllocator(\n        __in_opt LPCTSTR , __inout_opt LPUNKNOWN, __inout HRESULT *,\n        BOOL bEvent = TRUE, BOOL fEnableReleaseCallback = FALSE)"
  },
  {
    "label": "CBaseAllocator()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CBaseAllocator(\n        __in_opt LPCSTR , __inout_opt LPUNKNOWN, __inout HRESULT *,\n        BOOL bEvent = TRUE, BOOL fEnableReleaseCallback = FALSE)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetProperties(\n\t\t    __in ALLOCATOR_PROPERTIES* pRequest,\n\t\t    __out ALLOCATOR_PROPERTIES* pActual)"
  },
  {
    "label": "GetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetProperties(\n\t\t    __out ALLOCATOR_PROPERTIES* pProps)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Commit()"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Decommit()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetBuffer(__deref_out IMediaSample **ppBuffer,\n                           __in_opt REFERENCE_TIME * pStartTime,\n                           __in_opt REFERENCE_TIME * pEndTime,\n                           DWORD dwFlags)"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ReleaseBuffer(IMediaSample *pBuffer)"
  },
  {
    "label": "PutOnFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutOnFreeList(CMediaSample * pSample)"
  },
  {
    "label": "SetNotify()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetNotify(IMemAllocatorNotifyCallbackTemp *pNotify)"
  },
  {
    "label": "GetFreeCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetFreeCount(__out LONG *plBuffersFree)"
  },
  {
    "label": "NotifySample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySample()"
  },
  {
    "label": "CreateMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "CreateMemoryAllocator(__deref_out IMemAllocator **ppAllocator)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void)"
  },
  {
    "label": "ReallyFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallyFree(void)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Alloc(void)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetProperties(\n\t\t    __in ALLOCATOR_PROPERTIES* pRequest,\n\t\t    __out ALLOCATOR_PROPERTIES* pActual)"
  },
  {
    "label": "CMemAllocator()",
    "kind": "Method",
    "detail": "Function (UNICODE)",
    "insertText": "CMemAllocator(__in_opt LPCSTR , __inout_opt LPUNKNOWN, __inout HRESULT *)"
  },
  {
    "label": "AMovieSetupRegisterFilter()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "AMovieSetupRegisterFilter( const AMOVIESETUP_FILTER * const psetupdata\n                         , IFilterMapper *                  pIFM\n                         , BOOL                             bRegister  )"
  }
]