[
  {
    "label": "ITypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementWorldInterface"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdMode"
  },
  {
    "label": "UInteractiveGizmoManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveGizmoManager"
  },
  {
    "label": "UInputRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputRouter"
  },
  {
    "label": "UModeManagerInteractiveToolsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModeManagerInteractiveToolsContext"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoStateTarget"
  },
  {
    "label": "UEditorGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorGizmoStateTarget"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "InterfaceToCastTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterfaceToCastTo"
  },
  {
    "label": "FEditorModeTools()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UObject / GCObject . h \" # include \" UnrealWidgetFwd . h \" # include \" Editor . h \" # include \" EditorUndoClient . h \" # include \" Widgets / Layout / SWidgetSwitcher . h \" # include \" EdMode . h \" # include \" Elements / Framework / TypedElementSelectionSet . h \" class ITypedElementWorldInterface ; class FCanvas ; class FEditorViewportClient ; class FEdMode ; class FModeTool ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class IToolkitHost ; class USelection ; struct FConvexVolume ; struct FViewportClick ; class UEdMode ; class UInteractiveGizmoManager ; class UInputRouter ; class UModeManagerInteractiveToolsContext ; class UTypedElementSelectionSet ; class IGizmoStateTarget ; class UEditorGizmoStateTarget ; struct FGizmoState ; class FEditorModeTools : public FGCObject,public FEditorUndoClient,public TSharedFromThis<FEditorModeTools> { public :)",
    "insertText": "FEditorModeTools()"
  },
  {
    "label": "SetDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMode(const FEditorModeID DefaultModeID)"
  },
  {
    "label": "AddDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultMode(const FEditorModeID DefaultModeID)"
  },
  {
    "label": "RemoveDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefaultMode(const FEditorModeID DefaultModeID)"
  },
  {
    "label": "IsDefaultMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultMode(const FEditorModeID ModeID)"
  },
  {
    "label": "ActivateDefaultMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateDefaultMode()"
  },
  {
    "label": "IsDefaultModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultModeActive()"
  },
  {
    "label": "ActivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateMode(FEditorModeID InID, bool bToggle = false)"
  },
  {
    "label": "DeactivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateMode(FEditorModeID InID)"
  },
  {
    "label": "DestroyMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMode(FEditorModeID InID)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ExitMode(UEdMode* InMode)"
  },
  {
    "label": "OnModeUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModeUnregistered(FEditorModeID ModeID)"
  },
  {
    "label": "DeactivateModeAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateModeAtIndex(int32 Index)"
  },
  {
    "label": "DeactivateAllModes()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DeactivateAllModes()"
  },
  {
    "label": "GetActiveScriptableMode()",
    "kind": "Method",
    "detail": "Function (UEdMode*)",
    "insertText": "GetActiveScriptableMode(FEditorModeID InID)"
  },
  {
    "label": "GetVertexTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "GetVertexTexture()"
  },
  {
    "label": "EnsureNotInMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureNotInMode(FEditorModeID ModeID, const FText& ErrorMsg = FText::GetEmpty(), bool bNotifyUser = false)"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetCustomDrawingCoordinateSystem()"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetCustomInputCoordinateSystem()"
  },
  {
    "label": "GetLocalCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetLocalCoordinateSystem()"
  },
  {
    "label": "GetParentSpaceCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetParentSpaceCoordinateSystem()"
  },
  {
    "label": "IsModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModeActive(FEditorModeID InID)"
  },
  {
    "label": "GetActiveMode()",
    "kind": "Method",
    "detail": "Function (FEdMode*)",
    "insertText": "GetActiveMode(FEditorModeID InID)"
  },
  {
    "label": "GetActiveModeTyped()",
    "kind": "Method",
    "detail": "Function (template<SpecificModeType> SpecificModeType*)",
    "insertText": "GetActiveModeTyped(FEditorModeID InID)"
  },
  {
    "label": "GetActiveTool()",
    "kind": "Method",
    "detail": "Function (} const FModeTool*)",
    "insertText": "GetActiveTool(FEditorModeID InID)"
  },
  {
    "label": "SetShowWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowWidget(bool InShowWidget)"
  },
  {
    "label": "GetShowWidget()",
    "kind": "Method",
    "detail": "Function (bShowWidget = InShowWidget ; } bool)",
    "insertText": "GetShowWidget()"
  },
  {
    "label": "CycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleWidgetMode(void)"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "SaveWidgetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveWidgetSettings()"
  },
  {
    "label": "LoadWidgetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadWidgetSettings()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "IsTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTracking()"
  },
  {
    "label": "MapChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapChangeNotify()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelect(FBox& InBox, bool InSelect)"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect)"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis(EAxisList::Type NewAxis)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "ComputeBoundingBoxForViewportFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBoundingBoxForViewportFocus(AActor* Actor, UPrimitiveComponent* PrimitiveComponent, FBox& InOutBox)"
  },
  {
    "label": "ShouldDrawBrushWireframe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawBrushWireframe(AActor* InActor)"
  },
  {
    "label": "ShouldDrawBrushVertices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawBrushVertices()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient,FViewport* InViewport,FVector& InDrag,FRotator& InRot,FVector& InScale)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove(FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves(FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event, bool bRouteToToolsContext = true)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 X, int32 Y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* InViewportClient, FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 X, int32 Y)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedFocus(FEditorViewportClient* InViewportClient, FViewport* Viewport)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* InViewportClient, FViewport* Viewport)"
  },
  {
    "label": "DrawActiveModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawActiveModes(const FSceneView* InView, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* InView, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* InViewportClient,FViewport* Viewport,const FSceneView* View,FCanvas* Canvas)"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& OutPivot)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "DisallowMouseDeltaTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisallowMouseDeltaTracking()"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "GetOverrideCursorVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOverrideCursorVisibility(bool& bWantsOverride, bool& bHardwareCursorVisible, bool bSoftwareCursorVisible)"
  },
  {
    "label": "PreConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "PostConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "SetWidgetModeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetModeOverride(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "SetWidgetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetScale(float InScale)"
  },
  {
    "label": "GetWidgetScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWidgetScale()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadConfig(void)"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig(void)"
  },
  {
    "label": "SetPivotLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivotLocation(const FVector& Location, const bool bIncGridBase)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(FEditorModeTools, FEditorModeIDChangedEvent, const FEditorModeID&, bool)"
  },
  {
    "label": "OnEditorModeIDChanged()",
    "kind": "Method",
    "detail": "Function (FEditorModeIDChangedEvent&)",
    "insertText": "OnEditorModeIDChanged()"
  },
  {
    "label": "OnWidgetModeChanged()",
    "kind": "Method",
    "detail": "Function (FWidgetModeChangedEvent&)",
    "insertText": "OnWidgetModeChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (WidgetModeChangedEvent .)",
    "insertText": "Broadcast(InWidgetMode)"
  },
  {
    "label": "BroadcastEditorModeIDChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastEditorModeIDChanged(const FEditorModeID& ModeID, bool IsEnteringMode)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (EditorModeIDChangedEvent .)",
    "insertText": "Broadcast(ModeID, IsEnteringMode)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(FEditorModeTools, FCoordSystemChangedEvent, ECoordSystem)"
  },
  {
    "label": "OnCoordSystemChanged()",
    "kind": "Method",
    "detail": "Function (FCoordSystemChangedEvent&)",
    "insertText": "OnCoordSystemChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (CoordSystemChangedEvent .)",
    "insertText": "Broadcast(InCoordSystem)"
  },
  {
    "label": "GetCoordSystem()",
    "kind": "Method",
    "detail": "Function (} ECoordSystem)",
    "insertText": "GetCoordSystem(bool bGetRawValue = false)"
  },
  {
    "label": "SetCoordSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoordSystem(ECoordSystem NewCoordSystem)"
  },
  {
    "label": "SetHideViewportUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHideViewportUI(bool bInHideViewportUI)"
  },
  {
    "label": "IsViewportUIHidden()",
    "kind": "Method",
    "detail": "Function (bHideViewportUI = bInHideViewportUI ; } bool)",
    "insertText": "IsViewportUIHidden()"
  },
  {
    "label": "SetToolkitHost()",
    "kind": "Method",
    "detail": "Function (bool PivotShown ; bool Snapping ; bool SnappedActor ; FVector CachedLocation ; FVector PivotLocation ; FVector SnappedLocation ; FVector GridBase ; float TranslateRotateXAxisAngle ; float TranslateRotate2DAngle ; FString InfoString ; void)",
    "insertText": "SetToolkitHost(TSharedRef<IToolkitHost> Host)"
  },
  {
    "label": "GetToolkitHost()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolkitHost>)",
    "insertText": "GetToolkitHost()"
  },
  {
    "label": "HasToolkitHost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasToolkitHost()"
  },
  {
    "label": "GetSelectedActors()",
    "kind": "Method",
    "detail": "Function (USelection*)",
    "insertText": "GetSelectedActors()"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (USelection*)",
    "insertText": "GetSelectedObjects()"
  },
  {
    "label": "GetSelectedComponents()",
    "kind": "Method",
    "detail": "Function (USelection*)",
    "insertText": "GetSelectedComponents()"
  },
  {
    "label": "GetEditorSelectionSet()",
    "kind": "Method",
    "detail": "Function (UTypedElementSelectionSet*)",
    "insertText": "GetEditorSelectionSet()"
  },
  {
    "label": "StoreSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSelection(FName SelectionStoreKey, bool bClearSelection = true)"
  },
  {
    "label": "RestoreSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSelection(FName SelectionStoreKey)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetHoveredViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient*)",
    "insertText": "GetHoveredViewportClient()"
  },
  {
    "label": "GetFocusedViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient*)",
    "insertText": "GetFocusedViewportClient()"
  },
  {
    "label": "SelectionHasSceneComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectionHasSceneComponent()"
  },
  {
    "label": "SetSelectionHasSceneComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionHasSceneComponent(bool bHasSceneComponent)"
  },
  {
    "label": "IsSelectionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionAllowed(AActor* InActor, const bool bInSelected)"
  },
  {
    "label": "IsSelectionHandled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionHandled(AActor* InActor, const bool bInSelected)"
  },
  {
    "label": "ProcessEditDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDuplicate()"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "ProcessEditCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCut()"
  },
  {
    "label": "ProcessEditCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCopy()"
  },
  {
    "label": "ProcessEditPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditPaste()"
  },
  {
    "label": "GetActionEditDuplicate()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDuplicate()"
  },
  {
    "label": "GetActionEditDelete()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDelete()"
  },
  {
    "label": "GetActionEditCut()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCut()"
  },
  {
    "label": "GetActionEditCopy()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCopy()"
  },
  {
    "label": "GetActionEditPaste()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditPaste()"
  },
  {
    "label": "IsSnapRotationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnapRotationEnabled()"
  },
  {
    "label": "SnapRotatorToGridOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SnapRotatorToGridOverride(FRotator& InRotation)"
  },
  {
    "label": "ActorsDuplicatedNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorsDuplicatedNotify(TArray<AActor*>& InPreDuplicateSelection, TArray<AActor*>& InPostDuplicateSelection, const bool bOffsetLocations)"
  },
  {
    "label": "ActorMoveNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorMoveNotify()"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "ActorPropChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorPropChangeNotify()"
  },
  {
    "label": "UpdateInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternalData()"
  },
  {
    "label": "IsOnlyVisibleActiveMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnlyVisibleActiveMode(FEditorModeID InMode)"
  },
  {
    "label": "IsOnlyActiveMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnlyActiveMode(FEditorModeID InMode)"
  },
  {
    "label": "CanAutoSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAutoSave()"
  },
  {
    "label": "IsOperationSupportedForCurrentAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOperationSupportedForCurrentAsset(EAssetOperation InOperation)"
  },
  {
    "label": "RemoveAllDelegateHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllDelegateHandlers()"
  },
  {
    "label": "GetInteractiveToolsContext()",
    "kind": "Method",
    "detail": "Function (UModeManagerInteractiveToolsContext*)",
    "insertText": "GetInteractiveToolsContext()"
  },
  {
    "label": "GetGizmoStateTarget()",
    "kind": "Method",
    "detail": "Function (IGizmoStateTarget*)",
    "insertText": "GetGizmoStateTarget()"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "HasOngoingTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOngoingTransform()"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnEditorSelectionChanged(UObject* NewSelection)"
  },
  {
    "label": "OnEditorSelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectNone()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup(UWorld* InWorld, bool bSessionEnded, bool bCleanupResources)"
  },
  {
    "label": "DrawBrackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBrackets(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "ForEachEdMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEdMode(TFunctionRef<bool(UEdMode*)> InCalllback)"
  },
  {
    "label": "TestAllModes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestAllModes(TFunctionRef<bool(UEdMode*)> InCalllback, bool bExpected)"
  },
  {
    "label": "ForEachEdMode()",
    "kind": "Method",
    "detail": "Function (template<class InterfaceToCastTo> void)",
    "insertText": "ForEachEdMode(TFunctionRef<bool(InterfaceToCastTo*)> InCallback)"
  },
  {
    "label": "GetCustomCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (} FMatrix)",
    "insertText": "GetCustomCoordinateSystem(TUniqueFunction<void(const TTypedElement<ITypedElementWorldInterface>&, FTransform&)>&& InGetTransformFunc)"
  },
  {
    "label": "ExitAllModesPendingDeactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitAllModesPendingDeactivate()"
  }
]