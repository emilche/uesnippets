[
  {
    "label": "ITypedElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementWorldInterface"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdMode"
  },
  {
    "label": "UInteractiveGizmoManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveGizmoManager"
  },
  {
    "label": "UInputRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputRouter"
  },
  {
    "label": "UModeManagerInteractiveToolsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModeManagerInteractiveToolsContext"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoStateTarget"
  },
  {
    "label": "UEditorGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorGizmoStateTarget"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "InterfaceToCastTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterfaceToCastTo"
  },
  {
    "label": "FEditorModeTools()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FEditorModeTools()"
  },
  {
    "label": "SetDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultMode( const FEditorModeID DefaultModeID )"
  },
  {
    "label": "AddDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultMode( const FEditorModeID DefaultModeID )"
  },
  {
    "label": "RemoveDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDefaultMode( const FEditorModeID DefaultModeID )"
  },
  {
    "label": "ActivateDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateDefaultMode()"
  },
  {
    "label": "ActivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateMode( FEditorModeID InID, bool bToggle = false )"
  },
  {
    "label": "DeactivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateMode(FEditorModeID InID)"
  },
  {
    "label": "DestroyMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMode(FEditorModeID InID)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitMode(UEdMode* InMode)"
  },
  {
    "label": "OnModeUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModeUnregistered(FEditorModeID ModeID)"
  },
  {
    "label": "DeactivateModeAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateModeAtIndex(int32 Index)"
  },
  {
    "label": "DeactivateAllModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateAllModes()"
  },
  {
    "label": "CycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleWidgetMode(void)"
  },
  {
    "label": "SaveWidgetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveWidgetSettings()"
  },
  {
    "label": "LoadWidgetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadWidgetSettings()"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "MapChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapChangeNotify()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelect( FBox& InBox, bool InSelect )"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect( const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect )"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis( EAxisList::Type NewAxis )"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient,  HHitProxy *HitProxy, const FViewportClick &Click )"
  },
  {
    "label": "ComputeBoundingBoxForViewportFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBoundingBoxForViewportFocus(AActor* Actor, UPrimitiveComponent* PrimitiveComponent, FBox& InOutBox)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( FEditorViewportClient* ViewportClient, float DeltaTime )"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta( FEditorViewportClient* InViewportClient,FViewport* InViewport,FVector& InDrag,FRotator& InRot,FVector& InScale )"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapturedMouseMove( FEditorViewportClient* InViewportClient, FViewport* InViewport, int32 InMouseX, int32 InMouseY )"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves( FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves )"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey( FEditorViewportClient* InViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event, bool bRouteToToolsContext = true)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis( FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter( FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 X, int32 Y )"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave( FEditorViewportClient* InViewportClient, FViewport* Viewport )"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove( FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 X, int32 Y )"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedFocus( FEditorViewportClient* InViewportClient, FViewport* Viewport )"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus( FEditorViewportClient* InViewportClient, FViewport* Viewport )"
  },
  {
    "label": "DrawActiveModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawActiveModes( const FSceneView* InView, FPrimitiveDrawInterface* PDI )"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render( const FSceneView* InView, FViewport* Viewport, FPrimitiveDrawInterface* PDI )"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD( FEditorViewportClient* InViewportClient,FViewport* Viewport,const FSceneView* View,FCanvas* Canvas )"
  },
  {
    "label": "PreConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "PostConvertMouseMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostConvertMouseMovement(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode( UE::Widget::EWidgetMode InWidgetMode )"
  },
  {
    "label": "SetWidgetModeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetModeOverride( UE::Widget::EWidgetMode InWidgetMode )"
  },
  {
    "label": "SetWidgetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetScale(float InScale)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"FEditorModeTools\")"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadConfig(void)"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig(void)"
  },
  {
    "label": "SetPivotLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivotLocation( const FVector& Location, const bool bIncGridBase )"
  },
  {
    "label": "SetCoordSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoordSystem(ECoordSystem NewCoordSystem)"
  },
  {
    "label": "OnRequestClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestClose()"
  },
  {
    "label": "SetToolkitHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolkitHost(TSharedRef<IToolkitHost> Host)"
  },
  {
    "label": "StoreSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSelection(FName SelectionStoreKey, bool bClearSelection = true)"
  },
  {
    "label": "RestoreSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSelection(FName SelectionStoreKey)"
  },
  {
    "label": "SetSelectionHasSceneComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionHasSceneComponent(bool bHasSceneComponent)"
  },
  {
    "label": "ProcessEditDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDuplicate()"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "ProcessEditCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCut()"
  },
  {
    "label": "ProcessEditCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditCopy()"
  },
  {
    "label": "ProcessEditPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditPaste()"
  },
  {
    "label": "GetActionEditDuplicate()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDuplicate()"
  },
  {
    "label": "GetActionEditDelete()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditDelete()"
  },
  {
    "label": "GetActionEditCut()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCut()"
  },
  {
    "label": "GetActionEditCopy()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditCopy()"
  },
  {
    "label": "GetActionEditPaste()",
    "kind": "Method",
    "detail": "Function (EEditAction::Type)",
    "insertText": "GetActionEditPaste()"
  },
  {
    "label": "DeactivateOtherVisibleModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateOtherVisibleModes(FEditorModeID InMode)"
  },
  {
    "label": "ActorsDuplicatedNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorsDuplicatedNotify(TArray<AActor*>& InPreDuplicateSelection, TArray<AActor*>& InPostDuplicateSelection, const bool bOffsetLocations)"
  },
  {
    "label": "ActorMoveNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorMoveNotify()"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "ActorPropChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorPropChangeNotify()"
  },
  {
    "label": "UpdateInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternalData()"
  },
  {
    "label": "InvokeToolPaletteTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeToolPaletteTab(FEditorModeID InMode, FName InPaletteName)"
  },
  {
    "label": "RemoveAllDelegateHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllDelegateHandlers()"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectionChanged(UObject* NewSelection)"
  },
  {
    "label": "OnEditorSelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectNone()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup(UWorld* InWorld, bool bSessionEnded, bool bCleanupResources)"
  },
  {
    "label": "DrawBrackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBrackets(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "InCallback()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InCallback(CastedMode)"
  },
  {
    "label": "ExitAllModesPendingDeactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitAllModesPendingDeactivate()"
  }
]