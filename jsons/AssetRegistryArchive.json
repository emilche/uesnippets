[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetRegistrySerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistrySerializationOptions"
  },
  {
    "label": "FAssetRegistryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryHeader"
  },
  {
    "label": "FAssetRegistryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReader"
  },
  {
    "label": "FAssetRegistryWriterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryWriterBase"
  },
  {
    "label": "FAssetRegistryWriterOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryWriterOptions"
  },
  {
    "label": "FAssetRegistryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryWriter"
  },
  {
    "label": "SerializeHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetDataTagMapSerializationDetails . h \" # include \" Serialization / LargeMemoryWriter . h \" # include \" UObject / NameBatchSerialization . h \" struct FAssetData ; struct FAssetRegistrySerializationOptions ; struct FAssetRegistryHeader { FAssetRegistryVersion::Type Version = FAssetRegistryVersion::LatestVersion ; bool bFilterEditorOnlyData = false ; void)",
    "insertText": "SerializeHeader(FArchive& Ar)"
  },
  {
    "label": "FAssetRegistryReader()",
    "kind": "Method",
    "detail": "Function (} ; class FAssetRegistryReader : public FArchiveProxy { public :)",
    "insertText": "FAssetRegistryReader(FArchive& Inner, int32 NumWorkers, FAssetRegistryHeader Header)"
  },
  {
    "label": "FAssetRegistryReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetRegistryReader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FName& Value)"
  },
  {
    "label": "SerializeTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTagsAndBundles(FAssetData& Out)"
  },
  {
    "label": "SerializeTagsAndBundlesOldVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTagsAndBundlesOldVersion(FAssetData& Out, FAssetRegistryVersion::Type Version)"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTasks()"
  },
  {
    "label": "LoadTags()",
    "kind": "Method",
    "detail": "Function (private : TArray<FDisplayNameEntryId> Names ; TRefCountPtr<const FixedTagPrivate::FStore> Tags ; TFuture<void> Task ; FAssetDataTagMapSharedView)",
    "insertText": "LoadTags(FAssetRegistryReader& Reader)"
  },
  {
    "label": "FAssetRegistryWriterOptions()",
    "kind": "Method",
    "detail": "Function (} ; # if ALLOW_NAME_BATCH_SAVING class FAssetRegistryWriterBase { protected : FLargeMemoryWriter MemWriter ; } ; struct FAssetRegistryWriterOptions {)",
    "insertText": "FAssetRegistryWriterOptions()"
  },
  {
    "label": "FAssetRegistryWriterOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRegistryWriterOptions(const FAssetRegistrySerializationOptions& Options)"
  },
  {
    "label": "FAssetRegistryWriter()",
    "kind": "Method",
    "detail": "Function (FixedTagPrivate::FOptions Tags ; } ; class FAssetRegistryWriter : public FAssetRegistryWriterBase,public FArchiveProxy { public :)",
    "insertText": "FAssetRegistryWriter(const FAssetRegistryWriterOptions& Options, FArchive& Out)"
  },
  {
    "label": "FAssetRegistryWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetRegistryWriter()"
  },
  {
    "label": "SerializeTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTagsAndBundles(const FAssetData& In)"
  },
  {
    "label": "SaveTags()",
    "kind": "Method",
    "detail": "Function (private : TMap<FDisplayNameEntryId,uint32> Names ; FixedTagPrivate::FStoreBuilder Tags ; FArchive& TargetAr ; void)",
    "insertText": "SaveTags(FAssetRegistryWriter& Writer, const FAssetDataTagMapSharedView& Map)"
  }
]