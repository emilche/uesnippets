[
  {
    "label": "AsmToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmToken"
  },
  {
    "label": "TokenKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TokenKind"
  },
  {
    "label": "MCAsmLexer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLexer"
  },
  {
    "label": "AsmToken()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCPARSER_MCASMLEXER_H # define LLVM_MC_MCPARSER_MCASMLEXER_H # include \" llvm / ADT / APInt . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / SMLoc . h \" namespace llvm { class AsmToken { public : enum TokenKind { Eof,Error,Identifier,String,Integer,BigNum,Real,EndOfStatement,Colon,Space,Plus,Minus,Tilde,Slash,BackSlash,LParen,RParen,LBrac,RBrac,LCurly,RCurly,Star,Dot,Comma,Dollar,Equal,EqualEqual,Pipe,PipePipe,Caret,Amp,AmpAmp,Exclaim,ExclaimEqual,Percent,Hash,Less,LessEqual,LessLess,LessGreater,Greater,GreaterEqual,GreaterGreater,At } ; private : TokenKind Kind ; StringRef Str ; APInt IntVal ; public :)",
    "insertText": "AsmToken()"
  },
  {
    "label": "AsmToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsmToken(TokenKind Kind, StringRef Str, APInt IntVal) : Kind(Kind), Str(Str), IntVal(IntVal)"
  },
  {
    "label": "AsmToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsmToken(TokenKind Kind, StringRef Str, int64_t IntVal = 0) : Kind(Kind), Str(Str), IntVal(64, IntVal, true)"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} TokenKind)",
    "insertText": "getKind()"
  },
  {
    "label": "getEndLoc()",
    "kind": "Method",
    "detail": "Function (SMLoc)",
    "insertText": "getEndLoc()"
  },
  {
    "label": "getLocRange()",
    "kind": "Method",
    "detail": "Function (SMRange)",
    "insertText": "getLocRange()"
  },
  {
    "label": "getStringContents()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getStringContents()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Kind == String && \"This token isn't a string!\")"
  },
  {
    "label": "getIdentifier()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getIdentifier()"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getString()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Kind == Integer && \"This token isn't an integer!\")"
  },
  {
    "label": "getAPIntVal()",
    "kind": "Method",
    "detail": "Function (} APInt)",
    "insertText": "getAPIntVal()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Kind == Integer || Kind == BigNum) && \"This token isn't an integer!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCAsmLexer &)"
  },
  {
    "label": "MCAsmLexer()",
    "kind": "Method",
    "detail": "Function (protected : const char* TokStart ; bool SkipSpace ; bool AllowAtInIdentifier ;)",
    "insertText": "MCAsmLexer()"
  },
  {
    "label": "LexToken()",
    "kind": "Method",
    "detail": "Function (AsmToken)",
    "insertText": "LexToken()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const SMLoc &errLoc, const std::string &err)"
  },
  {
    "label": "Lex()",
    "kind": "Method",
    "detail": "Function (const AsmToken&)",
    "insertText": "Lex()"
  },
  {
    "label": "LexUntilEndOfStatement()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "LexUntilEndOfStatement()"
  },
  {
    "label": "getLoc()",
    "kind": "Method",
    "detail": "Function (SMLoc)",
    "insertText": "getLoc()"
  },
  {
    "label": "getTok()",
    "kind": "Method",
    "detail": "Function (const AsmToken&)",
    "insertText": "getTok()"
  },
  {
    "label": "getErrLoc()",
    "kind": "Method",
    "detail": "Function (const SMLoc&)",
    "insertText": "getErrLoc()"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is(AsmToken::TokenKind K)"
  },
  {
    "label": "isNot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNot(AsmToken::TokenKind K)"
  },
  {
    "label": "setSkipSpace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSkipSpace(bool val)"
  },
  {
    "label": "getAllowAtInIdentifier()",
    "kind": "Method",
    "detail": "Function (SkipSpace = val ; } bool)",
    "insertText": "getAllowAtInIdentifier()"
  }
]