[
  {
    "label": "CEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumeration"
  },
  {
    "label": "CExprEnumLiteral",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprEnumLiteral"
  },
  {
    "label": "CExprEnumDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExprEnumDefinition"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CEnumerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Semantics / Attributable . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / MemberOrigin . h \" # include \" uLang / Semantics / SemanticScope . h \" # include \" uLang / Semantics / SemanticTypes . h \" # include \" uLang / Semantics / SmallDefinitionArray . h \" # include \" uLang / Semantics / VisitStamp . h \" namespace uLang { class CEnumeration ; class CExprEnumLiteral ; class CExprEnumDefinition ; class CEnumerator : public CDefinition { public : EKind StaticDefinitionKind = EKind::Enumerator ; const int32_t _Value ; CEnumeration* _Enumeration { nullptr } ;)",
    "insertText": "CEnumerator(CEnumeration& Enumeration, const CSymbol& Name, int32_t Value)"
  },
  {
    "label": "AsCode()",
    "kind": "Method",
    "detail": "Function (CUTF8String)",
    "insertText": "AsCode()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(CExprEnumLiteral* AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (CExprEnumLiteral*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(CExprEnumLiteral* AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (CExprEnumLiteral*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  },
  {
    "label": "CEnumeration()",
    "kind": "Method",
    "detail": "Function (} ; class CEnumeration : public CDefinition,public CLogicalScope,public CNominalType { public : const ETypeKind StaticTypeKind = ETypeKind::Enumeration ; const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::Enumeration ; CAttributable _EffectAttributable ;)",
    "insertText": "CEnumeration(const CSymbol& Name, CScope& EnclosingScope)"
  },
  {
    "label": "CreateEnumerator()",
    "kind": "Method",
    "detail": "Function (CEnumerator&)",
    "insertText": "CreateEnumerator(const CSymbol& EnumeratorName, int32_t Value)"
  },
  {
    "label": "FindTypeMember()",
    "kind": "Method",
    "detail": "Function (using CTypeBase::GetProgram ; SmallDefinitionArray)",
    "insertText": "FindTypeMember(const CSymbol& Name, EMemberOrigin Origin, const SQualifier& Qualifier = SQualifier::Unknown(), VisitStampType VisitStamp = CScope::GenerateNewVisitStamp())"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (EComparability)",
    "insertText": "GetComparability()"
  },
  {
    "label": "CanBeCustomAccessorDataType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeCustomAccessorDataType()"
  },
  {
    "label": "ScopeAsDefinition()",
    "kind": "Method",
    "detail": "Function (} const CDefinition*)",
    "insertText": "ScopeAsDefinition()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(CExprEnumDefinition* AstNode)"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(CExprEnumDefinition* AstNode)"
  },
  {
    "label": "DefinitionAsLogicalScopeNullable()",
    "kind": "Method",
    "detail": "Function (const CLogicalScope*)",
    "insertText": "DefinitionAsLogicalScopeNullable()"
  }
]