[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FDControllerAndCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDControllerAndCallback"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACING_PERFETTO_TASK_RUNNER_H_ # define BASE_TRACING_PERFETTO_TASK_RUNNER_H_ # include \" base / base_export . h \" # include \" base / cancelable_callback . h \" # include \" base / synchronization / lock . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / timer / timer . h \" # include \" build / build_config . h \" # include \" third_party / perfetto / include / perfetto / base / task_runner . h \" #)",
    "insertText": "if(BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_NACL)) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "PerfettoTaskRunner()",
    "kind": "Method",
    "detail": "Function (namespace tracing { class BASE_EXPORT PerfettoTaskRunner : public perfetto::base::TaskRunner { public :)",
    "insertText": "PerfettoTaskRunner(scoped_refptr<base::SequencedTaskRunner> task_runner)"
  },
  {
    "label": "PerfettoTaskRunner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PerfettoTaskRunner()"
  },
  {
    "label": "PerfettoTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerfettoTaskRunner(const PerfettoTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const PerfettoTaskRunner&)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(std::function<void()> task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(std::function<void()> task, uint32_t delay_ms)"
  },
  {
    "label": "RunsTasksOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksOnCurrentThread()"
  },
  {
    "label": "SetTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskRunner(scoped_refptr<base::SequencedTaskRunner> task_runner)"
  },
  {
    "label": "GetOrCreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<base::SequencedTaskRunner>)",
    "insertText": "GetOrCreateTaskRunner()"
  },
  {
    "label": "HasTaskRunner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTaskRunner()"
  },
  {
    "label": "RemoveFileDescriptorWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFileDescriptorWatch(perfetto::base::PlatformHandle)"
  },
  {
    "label": "ResetTaskRunnerForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTaskRunnerForTesting(scoped_refptr<base::SequencedTaskRunner> task_runner)"
  },
  {
    "label": "OnDeferredTasksDrainTimer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnDeferredTasksDrainTimer()"
  },
  {
    "label": "FDControllerAndCallback()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::FileDescriptorWatcher::Controller> controller ; base::CancelableOnceClosure callback ;)",
    "insertText": "FDControllerAndCallback()"
  }
]