[
  {
    "label": "PacketOverhead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketOverhead"
  },
  {
    "label": "TransportControllerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportControllerConfig"
  },
  {
    "label": "Rates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rates"
  },
  {
    "label": "CallClientConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallClientConfig"
  },
  {
    "label": "PacketStreamConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketStreamConfig"
  },
  {
    "label": "VideoStreamConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoStreamConfig"
  },
  {
    "label": "Source",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Source"
  },
  {
    "label": "Capture",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Capture"
  },
  {
    "label": "Slides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Slides"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Generator"
  },
  {
    "label": "Images",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Images"
  },
  {
    "label": "Crop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Crop"
  },
  {
    "label": "VideoFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFile"
  },
  {
    "label": "Encoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Encoder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Implementation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Implementation"
  },
  {
    "label": "Fake",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Fake"
  },
  {
    "label": "SingleLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SingleLayer"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stream"
  },
  {
    "label": "Rendering",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rendering"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Hooks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hooks"
  },
  {
    "label": "AudioStreamConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioStreamConfig"
  },
  {
    "label": "NetworkAdaptation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkAdaptation"
  },
  {
    "label": "FrameLength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameLength"
  },
  {
    "label": "NetworkSimulationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkSimulationConfig"
  },
  {
    "label": "Rates()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_SCENARIO_CONFIG_H_ # define TEST_SCENARIO_SCENARIO_CONFIG_H_ # include<stddef . h> # include<string> # include \" absl / types / optional . h \" # include \" api / fec_controller . h \" # include \" api / rtp_parameters . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / transport / network_control . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / video / video_codec_type . h \" # include \" api / video_codecs / scalability_mode . h \" # include \" test / scenario / performance_stats . h \" namespace webrtc { namespace test { struct PacketOverhead { size_t kSrtp = 1 0 ; size_t kStun = 4 ; size_t kTurnChannelMessage = 4 ; size_t kTurnIndicationMessage = 3 6 ; size_t kDefault = kSrtp ; } ; struct TransportControllerConfig { struct Rates {)",
    "insertText": "Rates()"
  },
  {
    "label": "Rates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rates(const Rates&)"
  },
  {
    "label": "KilobitsPerSec()",
    "kind": "Method",
    "detail": "Function (DataRate min_rate =)",
    "insertText": "KilobitsPerSec(30)"
  },
  {
    "label": "KilobitsPerSec()",
    "kind": "Method",
    "detail": "Function (DataRate max_rate =)",
    "insertText": "KilobitsPerSec(3000)"
  },
  {
    "label": "KilobitsPerSec()",
    "kind": "Method",
    "detail": "Function (DataRate start_rate =)",
    "insertText": "KilobitsPerSec(300)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (} rates ; NetworkControllerFactoryInterface* cc_factory = nullptr ; TimeDelta state_log_interval =)",
    "insertText": "Millis(100)"
  },
  {
    "label": "PacketStreamConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct CallClientConfig { TransportControllerConfig transport ; const FieldTrialsView* field_trials = nullptr ; } ; struct PacketStreamConfig {)",
    "insertText": "PacketStreamConfig()"
  },
  {
    "label": "PacketStreamConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketStreamConfig(const PacketStreamConfig&)"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (int frame_rate = 3 0 ; DataRate max_data_rate =)",
    "insertText": "Infinity()"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (DataSize max_packet_size =)",
    "insertText": "Bytes(1400)"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (DataSize min_frame_size =)",
    "insertText": "Bytes(100)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (} ; struct VideoStreamConfig { bool autostart = true ; struct Source { enum Capture { kGenerator,kVideoFile,kGenerateSlides,kImageSlides,} capture = Capture::kGenerator ; struct Slides { TimeDelta change_interval =)",
    "insertText": "Seconds(10)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (struct Generator { int width = 1 6 0 0 ; int height = 1 2 0 0 ; } generator ; struct Images { struct Crop { TimeDelta scroll_duration =)",
    "insertText": "Seconds(0)"
  },
  {
    "label": "Encoder()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> width ; absl::optional<int> height ; } crop ; int width = 1 8 5 0 ; int height = 1 1 1 0 ; std::vector<std::string> paths = { \" web_screenshot_1850_1110 \",\" presentation_1850_1110 \",\" photo_1850_1110 \",\" difficult_photo_1850_1110 \",} ; } images ; } slides ; struct Generator { using PixelFormat = FrameGeneratorInterface::OutputType ; PixelFormat pixel_format = PixelFormat::kI420 ; int width = 3 2 0 ; int height = 1 8 0 ; } generator ; struct VideoFile { std::string name ; int width = 0 ; int height = 0 ; } video_file ; int framerate = 3 0 ; } source ; struct Encoder {)",
    "insertText": "Encoder()"
  },
  {
    "label": "Encoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encoder(const Encoder&)"
  },
  {
    "label": "Stream()",
    "kind": "Method",
    "detail": "Function (} fake ; using Codec = VideoCodecType ; Codec codec = Codec::kVideoCodecGeneric ; absl::optional<DataRate> max_data_rate ; absl::optional<DataRate> min_data_rate ; absl::optional<int> max_framerate ; absl::optional<int> key_frame_interval = 3 0 0 0 ; bool frame_dropping = true ; struct SingleLayer { bool denoising = true ; bool automatic_scaling = true ; } single ; std::vector<webrtc::ScalabilityMode> simulcast_streams = { webrtc::ScalabilityMode::kL1T1 } ; DegradationPreference degradation_preference = DegradationPreference::MAINTAIN_FRAMERATE ; bool suspend_below_min_bitrate = false ; } encoder ; struct Stream {)",
    "insertText": "Stream()"
  },
  {
    "label": "Stream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stream(const Stream&)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (bool abs_send_time = false ; bool packet_feedback = true ; bool use_rtx = true ; DataRate pad_to_rate =)",
    "insertText": "Zero()"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (TimeDelta nack_history_time =)",
    "insertText": "Millis(1000)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool use_flexfec = false ; bool use_ulpfec = false ; FecControllerFactoryInterface* fec_controller_factory = nullptr ; } stream ; struct Rendering { enum Type { kFake } type = kFake ; std::string sync_group ; } render ; struct Hooks { std::vector<std::function<)",
    "insertText": "void(const VideoFramePair&)"
  },
  {
    "label": "AudioStreamConfig()",
    "kind": "Method",
    "detail": "Function (} hooks ; } ; struct AudioStreamConfig {)",
    "insertText": "AudioStreamConfig()"
  },
  {
    "label": "AudioStreamConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioStreamConfig(const AudioStreamConfig&)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (bool allocate_bitrate = false ; bool enable_dtx = false ; absl::optional<DataRate> fixed_rate ; absl::optional<DataRate> min_rate ; absl::optional<DataRate> max_rate ; TimeDelta initial_frame_length =)",
    "insertText": "Millis(20)"
  }
]