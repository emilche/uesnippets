[
  {
    "label": "FD3D12Texture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Texture"
  },
  {
    "label": "FD3D12UnorderedAccessView_RHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView_RHI"
  },
  {
    "label": "FD3D12SyncPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SyncPoint"
  },
  {
    "label": "FD3D12Viewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Viewport"
  },
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12CommandContextBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContextBase"
  },
  {
    "label": "FBackBufferData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBackBufferData"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "FD3D12Viewport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" # include \" HAL / Runnable . h \" # include \" MultiGPU . h \" # include \" RHIResources . h \" # include \" Templates / RefCounting . h \" # include \" DXGIUtilities . h \" class FD3D12Texture ; class FD3D12UnorderedAccessView_RHI ; class FD3D12SyncPoint ; using FD3D12SyncPointRef = TRefCountPtr<FD3D12SyncPoint> ; class FD3D12Viewport : public FRHIViewport,public FD3D12AdapterChild { public : FCriticalSection DXGIBackBufferLock ;)",
    "insertText": "FD3D12Viewport(class FD3D12Adapter* InParent, HWND InWindowHandle, uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen, EPixelFormat InPixelFormat)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "FD3D12Viewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Viewport()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "ConditionalResetSwapChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalResetSwapChain(bool bIgnoreFocus)"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Present(class FD3D12CommandContextBase& Context, bool bLockToVsync)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetBackBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FD3D12Texture*)",
    "insertText": "GetBackBuffer_RenderThread()"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_DUMMY_BACKBUFFER return DummyBackBuffer_RenderThread ; # else)",
    "insertText": "checkSlow(CurrentBackBuffer_RenderThread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_SDR_BACKBUFFER)",
    "insertText": "if(PixelFormat != SDRPixelFormat)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&ExpectedBackBufferIndexLock)"
  },
  {
    "label": "IssueFrameEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueFrameEvent()"
  },
  {
    "label": "GetNativeSwapChain()",
    "kind": "Method",
    "detail": "Function (# if D3D12_VIEWPORT_EXPOSES_SWAP_CHAIN void*)",
    "insertText": "GetNativeSwapChain()"
  },
  {
    "label": "GetNativeBackBufferTexture()",
    "kind": "Method",
    "detail": "Function (# endif void*)",
    "insertText": "GetNativeBackBufferTexture()"
  },
  {
    "label": "GetNativeBackBufferRT()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeBackBufferRT()"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomPresent(FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeWindow(void** AddParam = nullptr)"
  },
  {
    "label": "GetNumBackBuffers()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumBackBuffers()"
  },
  {
    "label": "AdvanceExpectedBackBufferIndex_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceExpectedBackBufferIndex_RenderThread()"
  },
  {
    "label": "OnResumeRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResumeRendering()"
  },
  {
    "label": "OnSuspendRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSuspendRendering()"
  },
  {
    "label": "IsPresentAllowed()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsPresentAllowed()"
  },
  {
    "label": "CreateDummyBackBufferTextures()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_DUMMY_BACKBUFFER FD3D12Texture*)",
    "insertText": "CreateDummyBackBufferTextures(FD3D12Adapter* InAdapter, EPixelFormat InPixelFormat, uint32 InSizeX, uint32 InSizeY)"
  },
  {
    "label": "PresentChecked()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "PresentChecked(IRHICommandContext& RHICmdContext, int32 SyncInterval)"
  },
  {
    "label": "PresentInternal()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PresentInternal(int32 SyncInterval)"
  },
  {
    "label": "ResizeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeInternal()"
  },
  {
    "label": "FinalDestroyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalDestroyInternal()"
  },
  {
    "label": "ClearPresentQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPresentQueue()"
  },
  {
    "label": "InitializeBackBufferArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBackBufferArrays()"
  },
  {
    "label": "CheckHDRSupport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckHDRSupport()"
  },
  {
    "label": "EnableHDR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableHDR()"
  },
  {
    "label": "ShutdownHDR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownHDR()"
  },
  {
    "label": "EnsureColorSpace()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_DXGI_COLOR_SPACE void)",
    "insertText": "EnsureColorSpace(EDisplayColorGamut DisplayGamut, EDisplayOutputFormat OutputDevice)"
  },
  {
    "label": "SetBackBufferIndex_RHIThread()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetBackBufferIndex_RHIThread(uint32 Index)"
  },
  {
    "label": "SetBackBufferIndex_RenderThread()",
    "kind": "Method",
    "detail": "Function (CurrentBackBufferIndex_RHIThread = Index % NumBackBuffers ; CurrentBackBuffer_RHIThread =& BackBuffers [ CurrentBackBufferIndex_RHIThread ] ; } void)",
    "insertText": "SetBackBufferIndex_RenderThread(uint32 Index)"
  }
]