[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "LogFieldTooLargeForArrayWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogFieldTooLargeForArrayWarning(uint64 FieldLength)"
  },
  {
    "label": "MeasureCompactBinary()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "MeasureCompactBinary(FMemoryView View, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "TryMeasureCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMeasureCompactBinary(\n\tFMemoryView InView,\n\tECbFieldType& OutType,\n\tuint64& OutSize,\n\tECbFieldType InType = ECbFieldType::HasFieldType)"
  },
  {
    "label": "LoadCompactBinary()",
    "kind": "Method",
    "detail": "Function (FCbField)",
    "insertText": "LoadCompactBinary(FArchive& Ar, FCbBufferAllocator Allocator = FUniqueBuffer::Alloc)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbFieldView& Field)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbArrayView& Array)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbObjectView& Object)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FUtf8StringBuilderBase& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FWideStringBuilderBase& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::FUtf8SharedString& OutString)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::FWideSharedString& OutString)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FString& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FName& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FGuid& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FGuid& OutValue, const FGuid& Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDateTime& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDateTime& OutValue, FDateTime Default)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbFieldView& Field, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbFieldView& Field, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbArrayView& Array, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbArrayView& Array, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbObjectView& Object, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbObjectView& Object, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbFieldView& Field, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbFieldView& Field, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbArrayView& Array, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbArrayView& Array, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbObjectView& Object, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbObjectView& Object, FWideStringBuilderBase& Builder)"
  }
]