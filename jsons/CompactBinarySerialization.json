[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "LogFieldTooLargeForArrayWarning()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" CoreTypes . h \" # include \" IO / IoHash . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / MemoryView . h \" # include \" Memory / SharedBuffer . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / Function . h \" class FArchive ; class FName ; struct FDateTime ; struct FGuid ; namespace UE::Serialization::Private { void)",
    "insertText": "LogFieldTooLargeForArrayWarning(uint64 FieldLength)"
  },
  {
    "label": "MeasureCompactBinary()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "MeasureCompactBinary(FMemoryView View, ECbFieldType Type = ECbFieldType::HasFieldType)"
  },
  {
    "label": "TryMeasureCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMeasureCompactBinary(FMemoryView InView, ECbFieldType& OutType, uint64& OutSize, ECbFieldType InType = ECbFieldType::HasFieldType)"
  },
  {
    "label": "LoadCompactBinary()",
    "kind": "Method",
    "detail": "Function (FCbField)",
    "insertText": "LoadCompactBinary(FArchive& Ar, FCbBufferAllocator Allocator = FUniqueBuffer::Alloc)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbFieldView& Field)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbArrayView& Array)"
  },
  {
    "label": "SaveCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCompactBinary(FArchive& Ar, const FCbObjectView& Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCbField& Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCbArray& Array)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCbObject& Object)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FUtf8StringBuilderBase& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FWideStringBuilderBase& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::FUtf8SharedString& OutString)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, UE::FWideSharedString& OutString)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FString& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FName& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, int8& OutValue, const int8 Default = 0)"
  },
  {
    "label": "AsInt8()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsInt8(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, int16& OutValue, const int16 Default = 0)"
  },
  {
    "label": "AsInt16()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsInt16(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, int32& OutValue, const int32 Default = 0)"
  },
  {
    "label": "AsInt32()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsInt32(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, int64& OutValue, const int64 Default = 0)"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsInt64(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, uint8& OutValue, const uint8 Default = 0)"
  },
  {
    "label": "AsUInt8()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsUInt8(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, uint16& OutValue, const uint16 Default = 0)"
  },
  {
    "label": "AsUInt16()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsUInt16(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, uint32& OutValue, const uint32 Default = 0)"
  },
  {
    "label": "AsUInt32()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsUInt32(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, uint64& OutValue, const uint64 Default = 0)"
  },
  {
    "label": "AsUInt64()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsUInt64(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, float& OutValue, const float Default = 0.0f)"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsFloat(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, double& OutValue, const double Default = 0.0)"
  },
  {
    "label": "AsDouble()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsDouble(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, bool& OutValue, const bool Default = false)"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsBool(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FIoHash& OutValue, const FIoHash& Default = FIoHash())"
  },
  {
    "label": "AsHash()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsHash(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FGuid& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FGuid& OutValue, const FGuid& Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDateTime& OutValue)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDateTime& OutValue, FDateTime Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FCbObjectId& OutValue, const FCbObjectId& Default = FCbObjectId())"
  },
  {
    "label": "AsObjectId()",
    "kind": "Method",
    "detail": "Function (OutValue = Field .)",
    "insertText": "AsObjectId(Default)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} template<T,Allocator> bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, TArray<T, Allocator>& OutValue)"
  },
  {
    "label": "AsArrayView()",
    "kind": "Method",
    "detail": "Function (const uint64 Length = Field .)",
    "insertText": "AsArrayView().Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "Reset((int32)Length)"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool bOk = ! Field .)",
    "insertText": "HasError()"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bOk =)",
    "insertText": "LoadFromCompactBinary(ElementField, OutValue.Emplace_GetRef())"
  },
  {
    "label": "LogFieldTooLargeForArrayWarning()",
    "kind": "Method",
    "detail": "Function (} return bOk ; } else { UE::Serialization::)",
    "insertText": "LogFieldTooLargeForArrayWarning(Length)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbFieldView& Field, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbArrayView& Array, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbArrayView& Array, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbObjectView& Object, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToJson(const FCbObjectView& Object, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbFieldView& Field, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbFieldView& Field, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbArrayView& Array, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbArrayView& Array, FWideStringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbObjectView& Object, FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "CompactBinaryToCompactJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactBinaryToCompactJson(const FCbObjectView& Object, FWideStringBuilderBase& Builder)"
  }
]