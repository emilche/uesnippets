[
  {
    "label": "TTypedElementOwnerScopedAccessImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElementOwnerScopedAccessImpl"
  },
  {
    "label": "TTypedElementOwnerStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElementOwnerStore"
  },
  {
    "label": "TTypedElementOwnerScopedAccessImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" # include \" Elements / Framework / TypedElementHandle . h \" template<ElementOwnerType> struct TTypedElementOwnerScopedAccessImpl { public :)",
    "insertText": "TTypedElementOwnerScopedAccessImpl(FCriticalSection* InSynchObject) : SynchObject(InSynchObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (SynchObject ->)",
    "insertText": "Lock()"
  },
  {
    "label": "TTypedElementOwnerScopedAccessImpl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TTypedElementOwnerScopedAccessImpl()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (SynchObject ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "TTypedElementOwnerScopedAccessImpl()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TTypedElementOwnerScopedAccessImpl(const TTypedElementOwnerScopedAccessImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTypedElementOwnerScopedAccessImpl&)",
    "insertText": "operator(const TTypedElementOwnerScopedAccessImpl&)"
  },
  {
    "label": "TTypedElementOwnerScopedAccessImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTypedElementOwnerScopedAccessImpl(TTypedElementOwnerScopedAccessImpl&& InOther) : SynchObject(InOther.SynchObject) , ElementOwner(InOther.ElementOwner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InOther . SynchObject = nullptr ; InOther . ElementOwner = nullptr ; } TTypedElementOwnerScopedAccessImpl&)",
    "insertText": "operator(TTypedElementOwnerScopedAccessImpl&&)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ElementOwner = InElementOwner ;)",
    "insertText": "check(SynchObject)"
  },
  {
    "label": "GetTypedElementOwnerStoreKeyDebugString()",
    "kind": "Method",
    "detail": "Function (SynchObject = nullptr ; } } private : FCriticalSection* SynchObject = nullptr ; ElementOwnerType* ElementOwner = nullptr ; } ; template<ElementDataType> using TTypedElementOwnerScopedAccess = TTypedElementOwnerScopedAccessImpl<const TTypedElementOwner<ElementDataType>> ; template<ElementDataType> using TTypedElementOwnerScopedMutableAccess = TTypedElementOwnerScopedAccessImpl<TTypedElementOwner<ElementDataType>> ; template<KeyDataType> FString)",
    "insertText": "GetTypedElementOwnerStoreKeyDebugString(const KeyDataType& InKey)"
  },
  {
    "label": "GetTypedElementOwnerStoreKeyDebugString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTypedElementOwnerStoreKeyDebugString(const UObject* InKey)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<ElementDataType,KeyDataType = const void*> struct TTypedElementOwnerStore { public :)",
    "insertText": "static_assert(TNumericLimits<int32>::Max() >= TypedHandleMaxElementId, \"TTypedElementOwnerStore internally uses TMap so cannot store TypedHandleMaxElementId! Consider making this container 64-bit aware, or explicitly remove this compile time check.\")"
  },
  {
    "label": "TTypedElementOwnerStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTypedElementOwnerStore()"
  },
  {
    "label": "RegisterElementOwner()",
    "kind": "Method",
    "detail": "Function (} TTypedElementOwnerScopedAccess<ElementDataType>)",
    "insertText": "RegisterElementOwner(const KeyDataType& InKey, TTypedElementOwner<ElementDataType>&& InElementOwner)"
  },
  {
    "label": "ScopedAccess()",
    "kind": "Method",
    "detail": "Function (TTypedElementOwnerScopedAccess<ElementDataType>)",
    "insertText": "ScopedAccess(&ElementOwnerMapCS)"
  },
  {
    "label": "Private_SetElementOwner()",
    "kind": "Method",
    "detail": "Function (ScopedAccess .)",
    "insertText": "Private_SetElementOwner(&ElementOwnerMap.Add(InKey, MoveTemp(InElementOwner)))"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (TTypedElementOwner<ElementDataType> ElementOwner ; { FScopeLock)",
    "insertText": "Lock(&ElementOwnerMapCS)"
  },
  {
    "label": "RemoveAndCopyValue()",
    "kind": "Method",
    "detail": "Function (ElementOwnerMap .)",
    "insertText": "RemoveAndCopyValue(InKey, ElementOwner)"
  },
  {
    "label": "UnregisterElementOwners()",
    "kind": "Method",
    "detail": "Function (} return ElementOwner ; } void)",
    "insertText": "UnregisterElementOwners(TFunctionRef<bool(const TTypedElementOwner<ElementDataType>&)> InShouldUnregisterElement, TFunctionRef<void(TTypedElementOwner<ElementDataType>&&)> InOnUnregisterElement)"
  },
  {
    "label": "InOnUnregisterElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOnUnregisterElement(MoveTemp(It->Value))"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (It .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "FindOrRegisterElementOwner()",
    "kind": "Method",
    "detail": "Function (} } } TTypedElementOwnerScopedAccess<ElementDataType>)",
    "insertText": "FindOrRegisterElementOwner(const KeyDataType& InKey, TFunctionRef<TTypedElementOwner<ElementDataType>()> InCreateElement)"
  },
  {
    "label": "Private_SetElementOwner()",
    "kind": "Method",
    "detail": "Function (ScopedAccess .)",
    "insertText": "Private_SetElementOwner(ExistingElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TTypedElementOwner<ElementDataType> NewElement = InCreateElement())"
  },
  {
    "label": "Private_SetElementOwner()",
    "kind": "Method",
    "detail": "Function (ScopedAccess .)",
    "insertText": "Private_SetElementOwner(&ElementOwnerMap.Add(InKey, MoveTemp(NewElement)))"
  },
  {
    "label": "FindElementOwner()",
    "kind": "Method",
    "detail": "Function (} return ScopedAccess ; } TTypedElementOwnerScopedAccess<ElementDataType>)",
    "insertText": "FindElementOwner(const KeyDataType& InKey)"
  },
  {
    "label": "Private_SetElementOwner()",
    "kind": "Method",
    "detail": "Function (ScopedAccess .)",
    "insertText": "Private_SetElementOwner(ElementOwnerMap.Find(InKey))"
  }
]