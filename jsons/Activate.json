[
  {
    "label": "ActivateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActivateOp"
  },
  {
    "label": "DeactivateOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeactivateOp"
  },
  {
    "label": "activate()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_ACTIVATE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_ACTIVATE_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / math / Math . h> # include<openvdb / tree / NodeManager . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridOrTree> void)",
    "insertText": "activate(GridOrTree&, const typename GridOrTree::ValueType& value, const typename GridOrTree::ValueType& tolerance = zeroVal<typename GridOrTree::ValueType>(), const bool threaded = true)"
  },
  {
    "label": "deactivate()",
    "kind": "Method",
    "detail": "Function (template<GridOrTree> void)",
    "insertText": "deactivate(GridOrTree&, const typename GridOrTree::ValueType& value, const typename GridOrTree::ValueType& tolerance = zeroVal<typename GridOrTree::ValueType>(), const bool threaded = true)"
  },
  {
    "label": "ActivateOp()",
    "kind": "Method",
    "detail": "Function (namespace activate_internal { template<TreeT,bool IgnoreTolerance = false> struct ActivateOp { public : using RootT = TreeT::RootNodeType ; using LeafT = TreeT::LeafNodeType ; using ValueT = TreeT::ValueType ;)",
    "insertText": "ActivateOp(const ValueT& value, const ValueT& tolerance = zeroVal<ValueT>()) : mValue(value) , mTolerance(tolerance)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "check(const ValueT& value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(RootT& root, size_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<NodeT> bool)",
    "insertText": "operator()(NodeT& node, size_t)"
  },
  {
    "label": "isChildMaskOff()",
    "kind": "Method",
    "detail": "Function (} } return ! node .)",
    "insertText": "isChildMaskOff()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(LeafT& leaf, size_t)"
  },
  {
    "label": "DeactivateOp()",
    "kind": "Method",
    "detail": "Function (} return true ; } private : const ValueT mValue ; const ValueT mTolerance ; } ; template<TreeT,bool IgnoreTolerance = false> struct DeactivateOp { public : using RootT = TreeT::RootNodeType ; using LeafT = TreeT::LeafNodeType ; using ValueT = TreeT::ValueType ;)",
    "insertText": "DeactivateOp(const ValueT& value, const ValueT& tolerance = zeroVal<ValueT>()) : mValue(value) , mTolerance(tolerance)"
  },
  {
    "label": "activate()",
    "kind": "Method",
    "detail": "Function (} return true ; } private : const ValueT mValue ; const ValueT mTolerance ; } ; } template<GridOrTree> void)",
    "insertText": "activate(GridOrTree& gridOrTree, const typename GridOrTree::ValueType& value, const typename GridOrTree::ValueType& tolerance, const bool threaded)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (using Adapter = TreeAdapter<GridOrTree> ; using TreeType = Adapter::TreeType ; using ValueType = TreeType::ValueType ; TreeType& tree =)",
    "insertText": "tree(gridOrTree)"
  },
  {
    "label": "nodeManager()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<TreeType>)",
    "insertText": "nodeManager(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (activate_internal::ActivateOp<TreeType,true>)",
    "insertText": "op(value)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (nodeManager .)",
    "insertText": "foreachTopDown(op, threaded)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (} else { activate_internal::ActivateOp<TreeType>)",
    "insertText": "op(value, tolerance)"
  },
  {
    "label": "deactivate()",
    "kind": "Method",
    "detail": "Function (} } template<GridOrTree> void)",
    "insertText": "deactivate(GridOrTree& gridOrTree, const typename GridOrTree::ValueType& value, const typename GridOrTree::ValueType& tolerance, const bool threaded)"
  }
]