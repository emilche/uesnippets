[
  {
    "label": "DecodeSynchronizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecodeSynchronizer"
  },
  {
    "label": "ScheduledFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduledFrame"
  },
  {
    "label": "SynchronizedFrameDecodeScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SynchronizedFrameDecodeScheduler"
  },
  {
    "label": "DecodeSynchronizer()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_DECODE_SYNCHRONIZER_H_ # define VIDEO_DECODE_SYNCHRONIZER_H_ # include<stdint . h> # include<functional> # include<memory> # include<set> # include<utility> # include \" absl / types / optional . h \" # include \" api / metronome / metronome . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / frame_decode_scheduler . h \" # include \" video / frame_decode_timing . h \" namespace webrtc { class DecodeSynchronizer { public :)",
    "insertText": "DecodeSynchronizer(Clock* clock, Metronome* metronome, TaskQueueBase* worker_queue)"
  },
  {
    "label": "DecodeSynchronizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DecodeSynchronizer()"
  },
  {
    "label": "DecodeSynchronizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeSynchronizer(const DecodeSynchronizer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DecodeSynchronizer&)",
    "insertText": "operator(const DecodeSynchronizer&)"
  },
  {
    "label": "CreateSynchronizedFrameScheduler()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameDecodeScheduler>)",
    "insertText": "CreateSynchronizedFrameScheduler()"
  },
  {
    "label": "ScheduledFrame()",
    "kind": "Method",
    "detail": "Function (private : class ScheduledFrame { public :)",
    "insertText": "ScheduledFrame(uint32_t rtp_timestamp, FrameDecodeTiming::FrameSchedule schedule, FrameDecodeScheduler::FrameReleaseCallback callback)"
  },
  {
    "label": "ScheduledFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduledFrame(const ScheduledFrame&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScheduledFrame&)",
    "insertText": "operator(const ScheduledFrame&)"
  },
  {
    "label": "ScheduledFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduledFrame(ScheduledFrame&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScheduledFrame&)",
    "insertText": "operator(ScheduledFrame&&)"
  },
  {
    "label": "RunFrameReleaseCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunFrameReleaseCallback()"
  },
  {
    "label": "rtp_timestamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "rtp_timestamp()"
  },
  {
    "label": "SynchronizedFrameDecodeScheduler()",
    "kind": "Method",
    "detail": "Function (private : uint32_t rtp_timestamp_ ; FrameDecodeTiming::FrameSchedule schedule_ ; FrameDecodeScheduler::FrameReleaseCallback callback_ ; } ; class SynchronizedFrameDecodeScheduler : public FrameDecodeScheduler { public :)",
    "insertText": "SynchronizedFrameDecodeScheduler(DecodeSynchronizer* sync)"
  },
  {
    "label": "SynchronizedFrameDecodeScheduler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SynchronizedFrameDecodeScheduler()"
  },
  {
    "label": "ReleaseNextFrame()",
    "kind": "Method",
    "detail": "Function (ScheduledFrame)",
    "insertText": "ReleaseNextFrame()"
  },
  {
    "label": "LatestDecodeTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "LatestDecodeTime()"
  },
  {
    "label": "ScheduledRtpTimestamp()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "ScheduledRtpTimestamp()"
  },
  {
    "label": "ScheduleFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleFrame(uint32_t rtp, FrameDecodeTiming::FrameSchedule schedule, FrameReleaseCallback cb)"
  },
  {
    "label": "CancelOutstanding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelOutstanding()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "OnFrameScheduled()",
    "kind": "Method",
    "detail": "Function (private : DecodeSynchronizer* sync_ ; absl::optional<ScheduledFrame> next_frame_ ; bool stopped_ = false ; } ; void)",
    "insertText": "OnFrameScheduled(SynchronizedFrameDecodeScheduler* scheduler)"
  },
  {
    "label": "RemoveFrameScheduler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFrameScheduler(SynchronizedFrameDecodeScheduler* scheduler)"
  },
  {
    "label": "ScheduleNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNextTick()"
  },
  {
    "label": "OnTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTick()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; TaskQueueBase* const worker_queue_ ; Metronome* const metronome_ ; Timestamp expected_next_tick_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::set<SynchronizedFrameDecodeScheduler*> schedulers_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_)"
  }
]