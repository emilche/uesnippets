[
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FLayoutExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutExtender"
  },
  {
    "label": "FWorkspaceItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkspaceItem"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FSlateIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateIcon"
  },
  {
    "label": "EDITORFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORFRAMEWORK_API"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Editor . h \" # include \" EditorSubsystem . h \" # include \" Framework / Docking / LayoutExtender . h \" # include \" Framework / Docking / TabManager . h \" # include \" ILevelEditor . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / NotifyHook . h \" # include \" StatusBarSubsystem . h \" # include \" Templates / SharedPointer . h \" # include \" Textures / SlateIcon . h \" # include \" Toolkits / IToolkitHost . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ToolMenuDelegates . h \" # include \" AssetEditorModeUILayer . generated . h \" class FExtender ; class FLayoutExtender ; class FWorkspaceItem ; class ILevelEditor ; class IToolkit ; class SBorder ; class SDockTab ; class UObject ; struct FSlateIcon ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "RegisterLayoutExtensions()",
    "kind": "Method",
    "detail": "Function (const FName TopLeftTabID ; const FName BottomLeftTabID ; const FName TopRightTabID ; const FName BottomRightTabID ; protected : void)",
    "insertText": "RegisterLayoutExtensions(FLayoutExtender& Extender)"
  },
  {
    "label": "FAssetEditorModeUILayer()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FAssetEditorModeUILayer : public TSharedFromThis<FAssetEditorModeUILayer> { public :)",
    "insertText": "FAssetEditorModeUILayer(const IToolkitHost* InToolkitHost)"
  },
  {
    "label": "FAssetEditorModeUILayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetEditorModeUILayer()"
  },
  {
    "label": "OnToolkitHostingStarted()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnToolkitHostingStarted(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "OnToolkitHostingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingFinished(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "GetTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager>)",
    "insertText": "GetTabManager()"
  },
  {
    "label": "GetModeMenuCategory()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FWorkspaceItem>)",
    "insertText": "GetModeMenuCategory()"
  },
  {
    "label": "SetModePanelInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModePanelInfo(const FName InTabSpawnerID, const FMinorTabConfig& InTabInfo)"
  },
  {
    "label": "GetSpawnedTabs()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TWeakPtr<SDockTab>>)",
    "insertText": "GetSpawnedTabs()"
  },
  {
    "label": "SetSecondaryModeToolbarName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSecondaryModeToolbarName(FName InName)"
  },
  {
    "label": "ToolkitHostReadyForUI()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate&)",
    "insertText": "ToolkitHostReadyForUI()"
  },
  {
    "label": "GetSecondaryModeToolbarName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetSecondaryModeToolbarName()"
  },
  {
    "label": "RegisterModeTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterModeTabSpawners()"
  },
  {
    "label": "RegisterModeTabSpawner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterModeTabSpawner(const FName TabID)"
  },
  {
    "label": "SpawnStoredTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnStoredTab(const FSpawnTabArgs& Args, const FName TabID)"
  },
  {
    "label": "CanSpawnStoredTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpawnStoredTab(const FSpawnTabArgs& Args, const FName TabID)"
  },
  {
    "label": "GetTabSpawnerName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTabSpawnerName(const FName TabID)"
  },
  {
    "label": "GetTabSpawnerTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTabSpawnerTooltip(const FName TabID)"
  },
  {
    "label": "GetTabSpawnerIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateIcon&)",
    "insertText": "GetTabSpawnerIcon(const FName TabID)"
  }
]