[
  {
    "label": "VideoStreamEncoderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoderInterface"
  },
  {
    "label": "EncoderSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderSink"
  },
  {
    "label": "OnEncoderConfigurationChanged()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_STREAM_ENCODER_INTERFACE_H_ # define VIDEO_VIDEO_STREAM_ENCODER_INTERFACE_H_ # include<vector> # include \" api / adaptation / resource . h \" # include \" api / fec_controller_override . h \" # include \" api / rtp_parameters . h \" # include \" api / scoped_refptr . h \" # include \" api / units / data_rate . h \" # include \" api / video / video_bitrate_allocator . h \" # include \" api / video / video_layers_allocation . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" api / video_codecs / video_encoder . h \" # include \" video / config / video_encoder_config . h \" namespace webrtc { class VideoStreamEncoderInterface { public : class EncoderSink : public EncodedImageCallback { public : void)",
    "insertText": "OnEncoderConfigurationChanged(std::vector<VideoStream> streams, bool is_svc, VideoEncoderConfig::ContentType content_type, int min_transmit_bitrate_bps)"
  },
  {
    "label": "OnBitrateAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateAllocationUpdated(const VideoBitrateAllocation& allocation)"
  },
  {
    "label": "OnVideoLayersAllocationUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoLayersAllocationUpdated(VideoLayersAllocation allocation)"
  },
  {
    "label": "VideoStreamEncoderInterface()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "VideoStreamEncoderInterface()"
  },
  {
    "label": "AddAdaptationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptationResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetAdaptationResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<Resource>>)",
    "insertText": "GetAdaptationResources()"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<VideoFrame>* source, const DegradationPreference& degradation_preference)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(EncoderSink* sink, bool rotation_applied)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(int start_bitrate_bps)"
  },
  {
    "label": "SendKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendKeyFrame(const std::vector<VideoFrameType>& layers = {})"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const VideoEncoder::LossNotification& loss_notification)"
  },
  {
    "label": "OnBitrateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateUpdated(DataRate target_bitrate, DataRate stable_target_bitrate, DataRate link_allocation, uint8_t fraction_lost, int64_t round_trip_time_ms, double cwnd_reduce_ratio)"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "ConfigureEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureEncoder(VideoEncoderConfig config, size_t max_data_payload_length)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  }
]