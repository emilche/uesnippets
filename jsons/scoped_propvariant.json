[
  {
    "label": "ScopedPropVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedPropVariant"
  },
  {
    "label": "ScopedPropVariant()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_PROPVARIANT_H_ # define BASE_WIN_SCOPED_PROPVARIANT_H_ # include<propidl . h> # include \" base / check_op . h \" namespace base { namespace win { class ScopedPropVariant { public :)",
    "insertText": "ScopedPropVariant()"
  },
  {
    "label": "PropVariantInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropVariantInit(&pv_)"
  },
  {
    "label": "ScopedPropVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedPropVariant(const ScopedPropVariant&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedPropVariant&)",
    "insertText": "operator(const ScopedPropVariant&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (} PROPVARIANT*)",
    "insertText": "Receive()"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(pv_.vt, VT_EMPTY)"
  },
  {
    "label": "PropVariantClear()",
    "kind": "Method",
    "detail": "Function (HRESULT result =)",
    "insertText": "PropVariantClear(&pv_)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(result, S_OK)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } const PROPVARIANT&)",
    "insertText": "get()"
  }
]