[
  {
    "label": "parallel_for_each_body_do",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_for_each_body_do"
  },
  {
    "label": "parallel_for_each_body_for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "parallel_for_each_body_for"
  },
  {
    "label": "parallel_for_each_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "parallel_for_each_impl"
  },
  {
    "label": "parallel_for_each_body_do()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_for_each_H # define __TBB_parallel_for_each_H # include \" parallel_do . h \" # include \" parallel_for . h \" namespace tbb { namespace internal { template<Function,Iterator> class parallel_for_each_body_do : internal::no_assign { const Function& my_func ; public :)",
    "insertText": "parallel_for_each_body_do(const Function &_func) : my_func(_func)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(typename std::iterator_traits<Iterator>::reference value)"
  },
  {
    "label": "my_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_func(value)"
  },
  {
    "label": "parallel_for_each_body_for()",
    "kind": "Method",
    "detail": "Function (} } ; template<Function,Iterator> class parallel_for_each_body_for : internal::no_assign { const Function& my_func ; public :)",
    "insertText": "parallel_for_each_body_for(const Function &_func) : my_func(_func)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(tbb::blocked_range<Iterator> range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if __INTEL_COMPILER # pragma ivdep # endif)",
    "insertText": "for(Iterator it = range.begin(), end = range.end(); it != end; ++it)"
  },
  {
    "label": "my_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_func(*it)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Iterator,Function,Generic> struct parallel_for_each_impl { # if __TBB_TASK_GROUP_CONTEXT void)",
    "insertText": "doit(Iterator first, Iterator last, const Function& f, task_group_context &context)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (internal::parallel_for_each_body_do<Function,Iterator>)",
    "insertText": "body(f)"
  },
  {
    "label": "parallel_do()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_do(first, last, body, context)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "doit(Iterator first, Iterator last, const Function& f)"
  },
  {
    "label": "parallel_do()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_do(first, last, body)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<Iterator>(first, last), body, context)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<Iterator>(first, last), body)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} } ; } # if __TBB_TASK_GROUP_CONTEXT template<Iterator,Function> void)",
    "insertText": "parallel_for_each(Iterator first, Iterator last, const Function& f, task_group_context &context)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (internal::parallel_for_each_impl<Iterator,Function,std::iterator_traits<Iterator>::iterator_category)",
    "insertText": "doit(first, last, f, context)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} template<Range,Function> void)",
    "insertText": "parallel_for_each(Range& rng, const Function& f, task_group_context& context)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_each(tbb::internal::first(rng), tbb::internal::last(rng), f, context)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} template<Range,Function> void)",
    "insertText": "parallel_for_each(const Range& rng, const Function& f, task_group_context& context)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} # endif template<Iterator,Function> void)",
    "insertText": "parallel_for_each(Iterator first, Iterator last, const Function& f)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (internal::parallel_for_each_impl<Iterator,Function,std::iterator_traits<Iterator>::iterator_category)",
    "insertText": "doit(first, last, f)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} template<Range,Function> void)",
    "insertText": "parallel_for_each(Range& rng, const Function& f)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for_each(tbb::internal::first(rng), tbb::internal::last(rng), f)"
  },
  {
    "label": "parallel_for_each()",
    "kind": "Method",
    "detail": "Function (} template<Range,Function> void)",
    "insertText": "parallel_for_each(const Range& rng, const Function& f)"
  }
]