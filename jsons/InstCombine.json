[
  {
    "label": "InstCombinePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstCombinePass"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_INSTCOMBINE_INSTCOMBINE_H # define LLVM_TRANSFORMS_INSTCOMBINE_INSTCOMBINE_H # include \" llvm / IR / Function . h \" # include \" llvm / IR / PassManager . h \" # include \" llvm / Transforms / InstCombine / InstCombineWorklist . h \" namespace llvm { class InstCombinePass { InstCombineWorklist Worklist ; public : StringRef)",
    "insertText": "name()"
  },
  {
    "label": "InstCombinePass()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InstCombinePass(InstCombinePass &&Arg) : Worklist(std::move(Arg.Worklist))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InstCombinePass&)",
    "insertText": "operator(InstCombinePass &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Worklist =)",
    "insertText": "move(RHS.Worklist)"
  }
]