[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FStructuredArchiveSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveSlot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackageStoreEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStoreEntry"
  },
  {
    "label": "FPackageStoreEntryResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStoreEntryResource"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FPackageStoreBackendContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStoreBackendContext"
  },
  {
    "label": "IPackageStoreBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageStoreBackend"
  },
  {
    "label": "FPackageStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStore"
  },
  {
    "label": "FPackageStoreReadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStoreReadScope"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / SecureHash . h \" # include \" PackageId . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FArchive ; class FCbObjectView ; class FCbWriter ; class FStructuredArchiveSlot ; enum class EPackageStoreEntryStatus { None,Missing,Pending,Ok,} ; struct FPackageStoreEntry { TArrayView<const FPackageId> ImportedPackageIds ; TArrayView<const FSHAHash> ShaderMapHashes ; # if WITH_EDITOR TArrayView<const FPackageId> OptionalSegmentImportedPackageIds ; bool bHasOptionalSegment = false ; # endif } ; enum class EPackageStoreEntryFlags : uint32 { None = 0,AutoOptional = 0 x02,OptionalSegment = 0 x04,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EPackageStoreEntryFlags)"
  },
  {
    "label": "GetPackageId()",
    "kind": "Method",
    "detail": "Function (struct FPackageStoreEntryResource { EPackageStoreEntryFlags Flags = EPackageStoreEntryFlags::None ; FName PackageName ; FPackageId PackageId ; TArray<FPackageId> ImportedPackageIds ; TArray<FSHAHash> ShaderMapHashes ; TArray<FPackageId> OptionalSegmentImportedPackageIds ; TArray<FPackageId> SoftPackageReferences ; FPackageId)",
    "insertText": "GetPackageId()"
  },
  {
    "label": "HasOptionalSegment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOptionalSegment()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackageStoreEntryResource& PackageStoreEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FPackageStoreEntryResource& PackageStoreEntry)"
  },
  {
    "label": "FromCbObject()",
    "kind": "Method",
    "detail": "Function (FPackageStoreEntryResource)",
    "insertText": "FromCbObject(FCbObjectView Obj)"
  },
  {
    "label": "IPackageStore()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IPackageStore()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(FPackageId PackageId)"
  },
  {
    "label": "GetPackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (EPackageStoreEntryStatus)",
    "insertText": "GetPackageStoreEntry(FPackageId PackageId, FName PackageName, FPackageStoreEntry& OutPackageStoreEntry)"
  },
  {
    "label": "GetPackageRedirectInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageRedirectInfo(FPackageId PackageId, FName& OutSourcePackageName, FPackageId& OutRedirectedToPackageId)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IPackageStore, FEntriesAddedEvent)"
  },
  {
    "label": "OnPendingEntriesAdded()",
    "kind": "Method",
    "detail": "Function (FEntriesAddedEvent&)",
    "insertText": "OnPendingEntriesAdded()"
  },
  {
    "label": "IPackageStoreBackend()",
    "kind": "Method",
    "detail": "Function (FPendingEntriesAddedEvent PendingEntriesAdded ; } ; class IPackageStoreBackend { public : ~)",
    "insertText": "IPackageStoreBackend()"
  },
  {
    "label": "OnMounted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMounted(TSharedRef<const FPackageStoreBackendContext> Context)"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FPackageStore { public : FPackageStore&)",
    "insertText": "Get()"
  },
  {
    "label": "Mount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mount(TSharedRef<IPackageStoreBackend> Backend, int32 Priority = 0)"
  },
  {
    "label": "HasAnyBackendsMounted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyBackendsMounted()"
  },
  {
    "label": "FPackageStore()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FPackageStore()"
  },
  {
    "label": "FPackageStoreReadScope()",
    "kind": "Method",
    "detail": "Function (class FPackageStoreReadScope ; TSharedRef<FPackageStoreBackendContext> BackendContext ; using FBackendAndPriority = TTuple<int32,TSharedRef<IPackageStoreBackend>> ; TArray<FBackendAndPriority> Backends ; thread_local int32 ThreadReadCount ; } ; class FPackageStoreReadScope { public :)",
    "insertText": "FPackageStoreReadScope(FPackageStore& InPackageStore)"
  },
  {
    "label": "FPackageStoreReadScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackageStoreReadScope()"
  }
]