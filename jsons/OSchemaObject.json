[
  {
    "label": "SCHEMA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCHEMA"
  },
  {
    "label": "OSchemaObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OSchemaObject"
  },
  {
    "label": "getSchemaObjTitle()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_OSchemaObject_h # define Alembic_Abc_OSchemaObject_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / OObject . h> # include<Alembic / Abc / OSchema . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { template<class SCHEMA> class OSchemaObject : public OObject { public : typedef SCHEMA schema_type ; typedef OSchemaObject<SCHEMA> this_type ; std::string)",
    "insertText": "getSchemaObjTitle()"
  },
  {
    "label": "getSchemaTitle()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSchemaTitle()"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "matches(const AbcA::MetaData &iMetaData, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iMatching == kSchemaTitleMatching)"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "matches(const AbcA::ObjectHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "OSchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OSchemaObject()"
  },
  {
    "label": "OSchemaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OSchemaObject(OObject iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "getSchema()",
    "kind": "Method",
    "detail": "Function (SCHEMA&)",
    "insertText": "getSchema()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_schema .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "OSchemaObject()",
    "kind": "Method",
    "detail": "Function (protected : SCHEMA m_schema ; } ; template<class SCHEMA> OSchemaObject<SCHEMA)",
    "insertText": "OSchemaObject(OObject iParent, const std::string &iName, const Argument &iArg0, const Argument &iArg1, const Argument &iArg2)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (Arguments)",
    "insertText": "args(GetErrorHandlerPolicy( iParent ))"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( args.getErrorHandlerPolicy())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OSchemaObject::OSchemaObject( OObject )\")"
  },
  {
    "label": "getPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::ObjectWriterPtr parent = iParent .)",
    "insertText": "getPtr()"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(parent, \"NULL Parent ObjectWriter in OSchemaObject ctor\")"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (AbcA::MetaData metaData = args .)",
    "insertText": "getMetaData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SparseFlag sparseFlag = kSparse ;)",
    "insertText": "if(!args.isSparse())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (sparseFlag = kFull ; metaData .)",
    "insertText": "set(\"schema\", SCHEMA::getSchemaTitle())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (metaData .)",
    "insertText": "set(\"schemaObjTitle\", getSchemaObjTitle())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (metaData .)",
    "insertText": "set(\"schemaBaseType\", SCHEMA::getSchemaBaseType())"
  },
  {
    "label": "ohdr()",
    "kind": "Method",
    "detail": "Function (} } AbcA::ObjectHeader)",
    "insertText": "ohdr(iName, metaData)"
  },
  {
    "label": "createChild()",
    "kind": "Method",
    "detail": "Function (m_object = parent ->)",
    "insertText": "createChild(ohdr)"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr tsPtr = args .)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getTimeSamplingIndex()",
    "kind": "Method",
    "detail": "Function (uint32_t tsIndex = args .)",
    "insertText": "getTimeSamplingIndex()"
  },
  {
    "label": "getArchive()",
    "kind": "Method",
    "detail": "Function (tsIndex = parent ->)",
    "insertText": "getArchive()->addTimeSampling(*tsPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} AbcA::MetaData schemaMetaData ;)",
    "insertText": "if(args.isSparse() && SCHEMA::replaceOnSparse())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (schemaMetaData .)",
    "insertText": "set(\"replace\", \"1\")"
  },
  {
    "label": "SCHEMA()",
    "kind": "Method",
    "detail": "Function (} m_schema =)",
    "insertText": "SCHEMA(m_object->getProperties(), SCHEMA::getDefaultSchemaName(), this->getErrorHandlerPolicy(), tsIndex, schemaMetaData, sparseFlag)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  }
]