[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_SizeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_SizeT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ptr"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___STRING_CHAR_TRAITS_H # define _LIBCPP___STRING_CHAR_TRAITS_H # include<__algorithm / copy_n . h> # include<__algorithm / fill_n . h> # include<__algorithm / find_end . h> # include<__algorithm / find_first_of . h> # include<__algorithm / min . h> # include<__config> # include<__functional / hash . h> # include<__iterator / iterator_traits . h> # include<cstdint> # include<cstdio> # include<cstring> # include<iosfwd> # include<type_traits> # ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS # include<cwchar> # endif # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef _CharT char_type ; typedef int int_type ; typedef streamoff off_type ; typedef streampos pos_type ; typedef mbstate_t state_type ; void _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "assign(char_type& __c1, const char_type& __c2)"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (__c1 = __c2 ; } _LIBCPP_CONSTEXPR bool)",
    "insertText": "eq(char_type __c1, char_type __c2)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 size_t)",
    "insertText": "length(const char_type* __s)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 const char_type*)",
    "insertText": "find(const char_type* __s, size_t __n, const char_type& __a)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR_AFTER_CXX17 char_type*)",
    "insertText": "move(char_type* __s1, const char_type* __s2, size_t __n)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 char_type*)",
    "insertText": "copy(char_type* __s1, const char_type* __s2, size_t __n)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 char_type*)",
    "insertText": "assign(char_type* __s, size_t __n, char_type __a)"
  },
  {
    "label": "not_eof()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR int_type)",
    "insertText": "not_eof(int_type __c)"
  },
  {
    "label": "to_char_type()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_CONSTEXPR char_type)",
    "insertText": "to_char_type(int_type __c)"
  },
  {
    "label": "to_int_type()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_CONSTEXPR int_type)",
    "insertText": "to_int_type(char_type __c)"
  },
  {
    "label": "eq_int_type()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_CONSTEXPR bool)",
    "insertText": "eq_int_type(int_type __c1, int_type __c2)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _CharT> _LIBCPP_CONSTEXPR_AFTER_CXX14 int char_traits<_CharT)",
    "insertText": "compare(const char_type* __s1, const char_type* __s2, size_t __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t __len = 0 ;)",
    "insertText": "for(; !eq(*__s, char_type(0)); ++__s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char_type* __r = __s1 ;)",
    "insertText": "if(__s1 < __s2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(__s2 < __s1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__s1 + = __n ; __s2 + = __n ;)",
    "insertText": "for(; __n; --__n) assign(*--__s1, *--__s2)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, \"char_traits::copy overlapped range\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} char_type* __r = __s1 ;)",
    "insertText": "for(; __n; --__n, ++__s1, ++__s2) assign(*__s1, *__s2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (char_type* __r = __s ;)",
    "insertText": "for(; __n; --__n, ++__s) assign(*__s, __a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_COMPILER_GCC)",
    "insertText": "if(__libcpp_is_constant_evaluated())"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (_CharT* __allocation = new _CharT [ __n ] ;)",
    "insertText": "copy_n(__source, __n, __allocation)"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_n(static_cast<const _CharT*>(__allocation), __n, __dest)"
  },
  {
    "label": "__builtin_memmove()",
    "kind": "Method",
    "detail": "Function (delete [ ] __allocation ; return __dest ; } #)",
    "insertText": "__builtin_memmove(__dest, __source, __n * sizeof(_CharT))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t __i = 0 ;)",
    "insertText": "for(; __s[__i] != char_type('\\0'); ++__i)"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_n(__s2, __n, __s1)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill_n(__s, __n, __a)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_feature(cxx_constexpr_string_builtins) return __builtin_memcmp(__s1, __s2, __n)"
  },
  {
    "label": "memcmp()",
    "kind": "Method",
    "detail": "Function (# elif _LIBCPP_STD_VER<= 1 4 return)",
    "insertText": "memcmp(__s1, __s2, __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "for(; __n; --__n, ++__s1, ++__s2)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_feature(cxx_constexpr_string_builtins) return __builtin_char_memchr(__s, to_int_type(__a), __n)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# elif _LIBCPP_STD_VER<= 1 4)",
    "insertText": "return(const char_type*) _VSTD::memchr(__s, to_int_type(__a), __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "for(; __n; --__n)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_feature(cxx_constexpr_string_builtins) return __builtin_wmemcmp(__s1, __s2, __n)"
  },
  {
    "label": "wmemcmp()",
    "kind": "Method",
    "detail": "Function (# elif _LIBCPP_STD_VER<= 1 4 return)",
    "insertText": "wmemcmp(__s1, __s2, __n)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_feature(cxx_constexpr_string_builtins) return __builtin_wcslen(__s)"
  },
  {
    "label": "wcslen()",
    "kind": "Method",
    "detail": "Function (# elif _LIBCPP_STD_VER<= 1 4 return)",
    "insertText": "wcslen(__s)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_feature(cxx_constexpr_string_builtins) return __builtin_wmemchr(__s, __a, __n)"
  },
  {
    "label": "wmemchr()",
    "kind": "Method",
    "detail": "Function (# elif _LIBCPP_STD_VER<= 1 4 return)",
    "insertText": "wmemchr(__s, __a, __n)"
  },
  {
    "label": "__str_find()",
    "kind": "Method",
    "detail": "Function (+ + __s ; } return nullptr ; } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find(const _CharT *__p, _SizeT __sz, _CharT __c, _SizeT __pos)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const _CharT* __r =)",
    "insertText": "find(__p + __pos, __sz - __pos, __c)"
  },
  {
    "label": "__search_substring()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits> _LIBCPP_CONSTEXPR_AFTER_CXX11 const _CharT*)",
    "insertText": "__search_substring(const _CharT *__first1, const _CharT *__last1, const _CharT *__first2, const _CharT *__last2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ptrdiff_t __len2 = __last2 - __first2 ;)",
    "insertText": "if(__len2 == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t __len1 = __last1 - __first1 ;)",
    "insertText": "if(__len1 < __len2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_CharT __f2 =* __first2 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (__first1 =)",
    "insertText": "find(__first1, __len1 - __len2 + 1, __f2)"
  },
  {
    "label": "__str_find()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "_Traits()",
    "kind": "Method",
    "detail": "Function (const _CharT* __r = __search_substring<_CharT,)",
    "insertText": "_Traits(__p + __pos, __p + __sz, __s, __s + __n)"
  },
  {
    "label": "__str_rfind()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_rfind(const _CharT *__p, _SizeT __sz, _CharT __c, _SizeT __pos)"
  },
  {
    "label": "__str_rfind()",
    "kind": "Method",
    "detail": "Function (} return __npos ; } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_rfind(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__pos =)",
    "insertText": "min(__pos, __sz)"
  },
  {
    "label": "__str_find_first_of()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find_first_of(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "__find_first_of_ce()",
    "kind": "Method",
    "detail": "Function (const _CharT* __r =)",
    "insertText": "__find_first_of_ce(__p + __pos, __p + __sz, __s, __s + __n, _Traits::eq)"
  },
  {
    "label": "__str_find_last_of()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find_last_of(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const _CharT* __r =)",
    "insertText": "find(__s, __n, *--__ps)"
  },
  {
    "label": "__str_find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} } return __npos ; } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find_first_not_of(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const _CharT* __pe = __p + __sz ;)",
    "insertText": "for(const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps) if (_Traits::find(__s, __n, *__ps) == nullptr) return static_cast<_SizeT>(__ps - __p)"
  },
  {
    "label": "__str_find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} return __npos ; } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find_first_not_of(const _CharT *__p, _SizeT __sz, _CharT __c, _SizeT __pos)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const _CharT* __pe = __p + __sz ;)",
    "insertText": "for(const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps) if (!_Traits::eq(*__ps, __c)) return static_cast<_SizeT>(__ps - __p)"
  },
  {
    "label": "__str_find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} return __npos ; } template<class _CharT,class _SizeT,class _Traits,_SizeT __npos> _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__str_find_last_not_of(const _CharT *__p, _SizeT __sz, const _CharT* __s, _SizeT __pos, _SizeT __n)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_Ptr>::value_type value_type ; return __murmur2_or_cityhash<)",
    "insertText": "size_t()(__p, (__e-__p)*sizeof(value_type))"
  }
]