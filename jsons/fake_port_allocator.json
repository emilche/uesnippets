[
  {
    "label": "SocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketFactory"
  },
  {
    "label": "TestUDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestUDPPort"
  },
  {
    "label": "FakePortAllocatorSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePortAllocatorSession"
  },
  {
    "label": "FakePortAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePortAllocator"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_FAKE_PORT_ALLOCATOR_H_ # define P2P_BASE_FAKE_PORT_ALLOCATOR_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" p2p / base / basic_packet_socket_factory . h \" # include \" p2p / base / port_allocator . h \" # include \" p2p / base / udp_port . h \" # include \" rtc_base / memory / always_valid_pointer . h \" # include \" rtc_base / net_helpers . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / thread . h \" # include \" test / scoped_key_value_config . h \" namespace rtc { class SocketFactory ; } namespace cricket { class TestUDPPort : public UDPPort { public : TestUDPPort*)",
    "insertText": "Create(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, bool emit_localhost_for_anyaddress, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "TestUDPPort()",
    "kind": "Method",
    "detail": "Function (TestUDPPort* port = new)",
    "insertText": "TestUDPPort(thread, factory, network, min_port, max_port, username, password, emit_localhost_for_anyaddress, field_trials)"
  },
  {
    "label": "TestUDPPort()",
    "kind": "Method",
    "detail": "Function (delete port ; port = nullptr ; } return port ; } protected :)",
    "insertText": "TestUDPPort(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, bool emit_localhost_for_anyaddress, const webrtc::FieldTrialsView* field_trials) : UDPPort(thread, factory, network, min_port, max_port, username, password, emit_localhost_for_anyaddress, field_trials)"
  },
  {
    "label": "FakePortAllocatorSession()",
    "kind": "Method",
    "detail": "Function (} } ; class FakePortAllocatorSession : public PortAllocatorSession { public :)",
    "insertText": "FakePortAllocatorSession(PortAllocator* allocator, rtc::Thread* network_thread, rtc::PacketSocketFactory* factory, absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd, const webrtc::FieldTrialsView& field_trials) : PortAllocatorSession(content_name, component, ice_ufrag, ice_pwd, allocator->flags()), network_thread_(network_thread), factory_(factory), ipv4_network_(\"network\", \"unittest\", rtc::IPAddress(INADDR_LOOPBACK), 32), ipv6_network_(\"network\", \"unittest\", rtc::IPAddress(in6addr_loopback), 64), port_(), port_config_count_(0), stun_servers_(allocator->stun_servers()), turn_servers_(allocator->turn_servers()), field_trials_(field_trials)"
  },
  {
    "label": "AddIP()",
    "kind": "Method",
    "detail": "Function (ipv4_network_ .)",
    "insertText": "AddIP(rtc::IPAddress(INADDR_LOOPBACK))"
  },
  {
    "label": "AddIP()",
    "kind": "Method",
    "detail": "Function (ipv6_network_ .)",
    "insertText": "AddIP(rtc::IPAddress(in6addr_loopback))"
  },
  {
    "label": "set_ice_tiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_ice_tiebreaker(44444)"
  },
  {
    "label": "SetCandidateFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCandidateFilter(uint32_t filter)"
  },
  {
    "label": "StartGettingPorts()",
    "kind": "Method",
    "detail": "Function (candidate_filter_ = filter ; } void)",
    "insertText": "StartGettingPorts()"
  },
  {
    "label": "network()",
    "kind": "Method",
    "detail": "Function (rtc::Network&)",
    "insertText": "network(rtc::HasIPv6Enabled() && (flags() & PORTALLOCATOR_ENABLE_IPV6))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (port_ .)",
    "insertText": "reset(TestUDPPort::Create(network_thread_, factory_, &network, 0, 0, username(), password(), false, &field_trials_))"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(port_)"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (port_ ->)",
    "insertText": "SetIceTiebreaker(ice_tiebreaker())"
  },
  {
    "label": "SubscribePortDestroyed()",
    "kind": "Method",
    "detail": "Function (port_ ->)",
    "insertText": "SubscribePortDestroyed([this](PortInterface* port) { OnPortDestroyed(port); })"
  },
  {
    "label": "AddPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPort(port_.get())"
  },
  {
    "label": "StopGettingPorts()",
    "kind": "Method",
    "detail": "Function (} + + port_config_count_ ; running_ = true ; } void)",
    "insertText": "StopGettingPorts()"
  },
  {
    "label": "IsGettingPorts()",
    "kind": "Method",
    "detail": "Function (running_ = false ; } bool)",
    "insertText": "IsGettingPorts()"
  },
  {
    "label": "IsCleared()",
    "kind": "Method",
    "detail": "Function (is_cleared = true ; } bool)",
    "insertText": "IsCleared()"
  },
  {
    "label": "SignalIceRegathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalIceRegathering(this, IceRegatheringReason::NETWORK_FAILURE)"
  },
  {
    "label": "ReadyPorts()",
    "kind": "Method",
    "detail": "Function (} std::vector<PortInterface*>)",
    "insertText": "ReadyPorts()"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (port_ ->)",
    "insertText": "Prune()"
  },
  {
    "label": "CandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CandidatesAllocationDone()"
  },
  {
    "label": "AddPort()",
    "kind": "Method",
    "detail": "Function (+ + transport_info_update_count_ ; } private : void)",
    "insertText": "AddPort(cricket::Port* port)"
  },
  {
    "label": "set_component()",
    "kind": "Method",
    "detail": "Function (port ->)",
    "insertText": "set_component(component())"
  },
  {
    "label": "set_generation()",
    "kind": "Method",
    "detail": "Function (port ->)",
    "insertText": "set_generation(generation())"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (port -> SignalPortComplete .)",
    "insertText": "connect(this, &FakePortAllocatorSession::OnPortComplete)"
  },
  {
    "label": "PrepareAddress()",
    "kind": "Method",
    "detail": "Function (port ->)",
    "insertText": "PrepareAddress()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ready_ports_ .)",
    "insertText": "push_back(port)"
  },
  {
    "label": "SignalPortReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalPortReady(this, port)"
  },
  {
    "label": "KeepAliveUntilPruned()",
    "kind": "Method",
    "detail": "Function (port ->)",
    "insertText": "KeepAliveUntilPruned()"
  },
  {
    "label": "OnPortComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPortComplete(cricket::Port* port)"
  },
  {
    "label": "Candidates()",
    "kind": "Method",
    "detail": "Function (const std::vector<Candidate>& candidates = port ->)",
    "insertText": "Candidates()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (candidates_ .)",
    "insertText": "insert(candidates_.end(), candidates.begin(), candidates.end())"
  },
  {
    "label": "SignalCandidatesReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalCandidatesReady(this, candidates)"
  },
  {
    "label": "SignalCandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (allocation_done_ = true ;)",
    "insertText": "SignalCandidatesAllocationDone(this)"
  },
  {
    "label": "OnPortDestroyed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPortDestroyed(cricket::PortInterface* port)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (port_ .)",
    "insertText": "release()"
  },
  {
    "label": "FakePortAllocator()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread* network_thread_ ; rtc::PacketSocketFactory* factory_ ; rtc::Network ipv4_network_ ; rtc::Network ipv6_network_ ; std::unique_ptr<cricket::Port> port_ ; int port_config_count_ ; std::vector<Candidate> candidates_ ; std::vector<PortInterface*> ready_ports_ ; bool allocation_done_ = false ; bool is_cleared = false ; ServerAddresses stun_servers_ ; std::vector<RelayServerConfig> turn_servers_ ; uint32_t candidate_filter_ = CF_ALL ; int transport_info_update_count_ = 0 ; bool running_ = false ; const webrtc::FieldTrialsView& field_trials_ ; } ; class FakePortAllocator : public cricket::PortAllocator { public :)",
    "insertText": "FakePortAllocator(rtc::Thread* network_thread, rtc::PacketSocketFactory* factory) : FakePortAllocator(network_thread, factory, nullptr)"
  },
  {
    "label": "FakePortAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FakePortAllocator(rtc::Thread* network_thread, std::unique_ptr<rtc::PacketSocketFactory> factory) : FakePortAllocator(network_thread, nullptr, std::move(factory))"
  },
  {
    "label": "SetNetworkIgnoreMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNetworkIgnoreMask(int network_ignore_mask)"
  },
  {
    "label": "CreateSessionInternal()",
    "kind": "Method",
    "detail": "Function (} cricket::PortAllocatorSession*)",
    "insertText": "CreateSessionInternal(absl::string_view content_name, int component, absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "initialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "initialized()"
  },
  {
    "label": "FakePortAllocator()",
    "kind": "Method",
    "detail": "Function (mdns_obfuscation_enabled_ = enabled ; } private :)",
    "insertText": "FakePortAllocator(rtc::Thread* network_thread, rtc::PacketSocketFactory* factory, std::unique_ptr<rtc::PacketSocketFactory> owned_factory) : network_thread_(network_thread), factory_(std::move(owned_factory), factory)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (network_thread_ = rtc::)",
    "insertText": "Current()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  }
]