[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FNavigationMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationMetaData"
  },
  {
    "label": "SNavData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SNavData"
  },
  {
    "label": "FSimulatedNavigationMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulatedNavigationMetaData"
  },
  {
    "label": "EOnNavigationIsConst",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOnNavigationIsConst"
  },
  {
    "label": "SLATE_METADATA_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Types / SlateEnums . h \" # include \" Input / NavigationReply . h \" # include \" Types / ISlateMetaData . h \" class SWidget ; class FNavigationMetaData : public ISlateMetaData { public :)",
    "insertText": "SLATE_METADATA_TYPE(FNavigationMetaData, ISlateMetaData) FNavigationMetaData()"
  },
  {
    "label": "GetBoundaryRule()",
    "kind": "Method",
    "detail": "Function (Rule . BoundaryRule = EUINavigationRule::Escape ; Rule . FocusDelegate = nullptr ; Rule . FocusRecipient = nullptr ; } } EUINavigationRule)",
    "insertText": "GetBoundaryRule(EUINavigation InNavigation)"
  },
  {
    "label": "GetFocusRecipient()",
    "kind": "Method",
    "detail": "Function (} const TWeakPtr<SWidget>&)",
    "insertText": "GetFocusRecipient(EUINavigation InNavigation)"
  },
  {
    "label": "GetFocusDelegate()",
    "kind": "Method",
    "detail": "Function (} const FNavigationDelegate&)",
    "insertText": "GetFocusDelegate(EUINavigation InNavigation)"
  },
  {
    "label": "SetNavigationExplicit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationExplicit(EUINavigation InNavigation, TSharedPtr<SWidget> InFocusRecipient)"
  },
  {
    "label": "Rules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rules(uint8)"
  },
  {
    "label": "SetNavigationCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationCustom(EUINavigation InNavigation, EUINavigationRule InCustomBoundaryRule, FNavigationDelegate InFocusDelegate)"
  },
  {
    "label": "SetNavigationWrap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationWrap(EUINavigation InNavigation)"
  },
  {
    "label": "SetNavigationStop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationStop(EUINavigation InNavigation)"
  },
  {
    "label": "SetNavigationEscape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationEscape(EUINavigation InNavigation)"
  },
  {
    "label": "UE_WITH_SLATE_SIMULATEDNAVIGATIONMETADATA()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef UE_WITH_SLATE_SIMULATEDNAVIGATIONMETADATA # define)",
    "insertText": "UE_WITH_SLATE_SIMULATEDNAVIGATIONMETADATA(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "SLATE_METADATA_TYPE()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_METADATA_TYPE(FSimulatedNavigationMetaData, ISlateMetaData) FSimulatedNavigationMetaData()"
  },
  {
    "label": "FSimulatedNavigationMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimulatedNavigationMetaData(const FNavigationMetaData& InSimulatedNavigation)"
  },
  {
    "label": "GetBoundaryRule()",
    "kind": "Method",
    "detail": "Function (Rules [ Index ] . BoundaryRule = InSimulatedNavigation .)",
    "insertText": "GetBoundaryRule((EUINavigation)Index)"
  },
  {
    "label": "GetFocusRecipient()",
    "kind": "Method",
    "detail": "Function (Rules [ Index ] . FocusRecipient = InSimulatedNavigation .)",
    "insertText": "GetFocusRecipient((EUINavigation)Index)"
  },
  {
    "label": "FSimulatedNavigationMetaData()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FSimulatedNavigationMetaData(EUINavigationRule InNavigationRule)"
  },
  {
    "label": "FSimulatedNavigationMetaData()",
    "kind": "Method",
    "detail": "Function (Rule . BoundaryRule = InNavigationRule ; } } enum EOnNavigationIsConst { OnNavigationIsConst } ;)",
    "insertText": "FSimulatedNavigationMetaData(EOnNavigationIsConst)"
  },
  {
    "label": "IsOnNavigationConst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOnNavigationConst()"
  }
]