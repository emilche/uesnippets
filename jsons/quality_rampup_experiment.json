[
  {
    "label": "QualityRampupExperiment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityRampupExperiment"
  },
  {
    "label": "ParseSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_QUALITY_RAMPUP_EXPERIMENT_H_ # define RTC_BASE_EXPERIMENTS_QUALITY_RAMPUP_EXPERIMENT_H_ # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class QualityRampupExperiment final { public : QualityRampupExperiment)",
    "insertText": "ParseSettings()"
  },
  {
    "label": "MinPixels()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "MinPixels()"
  },
  {
    "label": "MinDurationMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "MinDurationMs()"
  },
  {
    "label": "MaxBitrateFactor()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "MaxBitrateFactor()"
  },
  {
    "label": "SetMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxBitrate(int pixels, uint32_t max_bitrate_kbps)"
  },
  {
    "label": "BwHigh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BwHigh(int64_t now_ms, uint32_t available_bw_kbps)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enabled()"
  },
  {
    "label": "QualityRampupExperiment()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "QualityRampupExperiment(const FieldTrialsView* const key_value_config)"
  }
]