[
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IRayTracingGeometryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRayTracingGeometryManager"
  },
  {
    "label": "IRayTracingGeometryManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" RHICommandList . h \" # if RHI_RAYTRACING class FRayTracingGeometry ; class FRHIComputeCommandList ; enum class EAccelerationStructureBuildMode ; enum class ERTAccelerationStructureBuildPriority : uint8 ; namespace RayTracing { using GeometryGroupHandle = int32 ; } class IRayTracingGeometryManager { public : using BuildRequestIndex = int32 ; using RayTracingGeometryHandle = int32 ; ~)",
    "insertText": "IRayTracingGeometryManager()"
  },
  {
    "label": "RequestBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (BuildRequestIndex)",
    "insertText": "RequestBuildAccelerationStructure(FRayTracingGeometry* InGeometry, ERTAccelerationStructureBuildPriority InPriority, EAccelerationStructureBuildMode InBuildMode)"
  },
  {
    "label": "RequestBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (BuildRequestIndex)",
    "insertText": "RequestBuildAccelerationStructure(FRayTracingGeometry* InGeometry, ERTAccelerationStructureBuildPriority InPriority)"
  },
  {
    "label": "RemoveBuildRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveBuildRequest(BuildRequestIndex InRequestIndex)"
  },
  {
    "label": "BoostPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostPriority(BuildRequestIndex InRequestIndex, float InBoostValue)"
  },
  {
    "label": "ForceBuildIfPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBuildIfPending(FRHIComputeCommandList& InCmdList, const TArrayView<const FRayTracingGeometry*> InGeometries)"
  },
  {
    "label": "ProcessBuildRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessBuildRequests(FRHIComputeCommandList& InCmdList, bool bInBuildAll = false)"
  },
  {
    "label": "RegisterRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (RayTracingGeometryHandle)",
    "insertText": "RegisterRayTracingGeometry(FRayTracingGeometry* InGeometry)"
  },
  {
    "label": "ReleaseRayTracingGeometryHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRayTracingGeometryHandle(RayTracingGeometryHandle Handle)"
  },
  {
    "label": "RegisterRayTracingGeometryGroup()",
    "kind": "Method",
    "detail": "Function (RayTracing::GeometryGroupHandle)",
    "insertText": "RegisterRayTracingGeometryGroup(uint32 NumLODs, uint32 CurrentFirstLODIdx = 0)"
  },
  {
    "label": "ReleaseRayTracingGeometryGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRayTracingGeometryGroup(RayTracing::GeometryGroupHandle Handle)"
  },
  {
    "label": "RequestUpdateCachedRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateCachedRenderState(RayTracing::GeometryGroupHandle InRayTracingGeometryGroupHandle)"
  },
  {
    "label": "RefreshRegisteredGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRegisteredGeometry(RayTracingGeometryHandle Handle)"
  },
  {
    "label": "PreRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRender()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FRHICommandList& RHICmdList)"
  }
]