[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FConstraintInstanceAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceAccessor"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "USkeletalBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalBodySetup"
  },
  {
    "label": "FPhysicsAssetSolverSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsAssetSolverSettings"
  },
  {
    "label": "FSolverIterations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverIterations"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UPhysicsConstraintTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintTemplate"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "USkinnedMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedMeshComponent"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" PhysicsEngine / RigidBodyIndexPair . h \" # include \" Interfaces / Interface_PreviewMeshProvider . h \" # include \" PhysicsAsset . generated . h \" namespace ECollisionEnabled { enum Type : int ; } namespace EAggCollisionShape { enum Type : int ; } struct FConstraintInstance ; struct FConstraintInstanceAccessor ; struct FReferenceSkeleton ; class UMaterialInterface ; class FMeshElementCollector ; class USkeletalBodySetup ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FPhysicsAssetSolverSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FSolverIterations()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (RBAN,World,} ;)",
    "insertText": "UCLASS(hidecategories=Object, BlueprintType, MinimalAPI, Config=Game, PerObjectConfig, AutoCollapseCategories=(OldSolverSettings))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "GetPhysicalAnimationProfileNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetPhysicalAnimationProfileNames()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "IsDataValid(class FDataValidationContext& Context)"
  },
  {
    "label": "FindControllingBodyIndex()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "FindControllingBodyIndex(const class USkeletalMesh* skelMesh, int32 BoneIndex)"
  },
  {
    "label": "FindParentBodyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindParentBodyIndex(const class USkeletalMesh * skelMesh, int32 StartBoneIndex)"
  },
  {
    "label": "FindParentBodyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindParentBodyIndex(const FReferenceSkeleton& RefSkeleton, const int32 StartBoneIndex)"
  },
  {
    "label": "FindConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindConstraintIndex(FName ConstraintName)"
  },
  {
    "label": "FindConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindConstraintIndex(FName Bone1Name, FName Bone2Name)"
  },
  {
    "label": "FindConstraintBoneName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindConstraintBoneName(int32 ConstraintIndex)"
  },
  {
    "label": "FindMirroredBone()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMirroredBone(const class USkeletalMesh* skelMesh, int32 BoneIndex)"
  },
  {
    "label": "GetBodyIndicesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBodyIndicesBelow(TArray<int32>& OutBodyIndices, FName InBoneName, const USkeletalMesh* InSkelMesh, bool bIncludeParent = true)"
  },
  {
    "label": "GetBodyIndicesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBodyIndicesBelow(TArray<int32>& OutBodyIndices, const FName InBoneName, const FReferenceSkeleton& RefSkeleton, const bool bIncludeParent = true)"
  },
  {
    "label": "GetNearestBodyIndicesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNearestBodyIndicesBelow(TArray<int32> & OutBodyIndices, FName InBoneName, const USkeletalMesh* InSkelMesh)"
  },
  {
    "label": "CalcAABB()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "CalcAABB(const class USkinnedMeshComponent* MeshComponent, const FTransform& LocalToWorld)"
  },
  {
    "label": "ClearAllPhysicsMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllPhysicsMeshes()"
  },
  {
    "label": "CanCalculateValidAABB()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanCalculateValidAABB(const class USkinnedMeshComponent* MeshComponent, const FTransform& LocalToWorld)"
  },
  {
    "label": "InvalidateAllPhysicsMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllPhysicsMeshes()"
  },
  {
    "label": "GetCollisionMesh()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetCollisionMesh(int32 ViewIndex, FMeshElementCollector& Collector, const FReferenceSkeleton& RefSkeleton, const TArray<FTransform>& SpaceBases, const FTransform& LocalToWorld, const FVector& Scale3D)"
  },
  {
    "label": "DrawConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConstraints(int32 ViewIndex, FMeshElementCollector& Collector, const FReferenceSkeleton& RefSkeleton, const TArray<FTransform>& SpaceBases, const FTransform& LocalToWorld, float Scale)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& Materials)"
  },
  {
    "label": "DisableCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCollision(int32 BodyIndexA, int32 BodyIndexB)"
  },
  {
    "label": "EnableCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCollision(int32 BodyIndexA, int32 BodyIndexB)"
  },
  {
    "label": "IsCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollisionEnabled(int32 BodyIndexA, int32 BodyIndexB)"
  },
  {
    "label": "SetPrimitiveCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitiveCollision(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType, int32 PrimitiveIndex, ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "GetPrimitiveCollision()",
    "kind": "Method",
    "detail": "Function (ECollisionEnabled::Type)",
    "insertText": "GetPrimitiveCollision(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType, int32 PrimitiveIndex)"
  },
  {
    "label": "SetPrimitiveContributeToMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitiveContributeToMass(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType, int32 PrimitiveIndex, bool bContributesToMass)"
  },
  {
    "label": "GetPrimitiveContributeToMass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimitiveContributeToMass(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType, int32 PrimitiveIndex)"
  },
  {
    "label": "UpdateBoundsBodiesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundsBodiesArray()"
  },
  {
    "label": "UpdateBodySetupIndexMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBodySetupIndexMap()"
  },
  {
    "label": "FindBodyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindBodyIndex(FName BodyName)"
  },
  {
    "label": "BodyFindConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BodyFindConstraints(int32 BodyIndex, TArray<int32>& Constraints)"
  },
  {
    "label": "RefreshPhysicsAssetChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RefreshPhysicsAssetChange()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FRefreshPhysicsAssetChangeDelegate, const UPhysicsAsset*)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (FRefreshPhysicsAssetChangeDelegate OnRefreshPhysicsAssetChange ; void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* PreviewMesh, bool bMarkAsDirty = true)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh()"
  },
  {
    "label": "GetConstraintInstanceAccessorByIndex()",
    "kind": "Method",
    "detail": "Function (FConstraintInstanceAccessor)",
    "insertText": "GetConstraintInstanceAccessorByIndex(int32 Index)"
  },
  {
    "label": "GetConstraintInstanceByIndex()",
    "kind": "Method",
    "detail": "Function (FConstraintInstance*)",
    "insertText": "GetConstraintInstanceByIndex(uint32 Index)"
  }
]