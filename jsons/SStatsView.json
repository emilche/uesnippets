[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "SAsyncOperationStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAsyncOperationStatus"
  },
  {
    "label": "FTimingGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphTrack"
  },
  {
    "label": "FCounterAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCounterAggregator"
  },
  {
    "label": "SStatsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStatsView"
  },
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "SStatsView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / TextFilter . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" # include \" Insights / TimingProfiler / ViewModels / StatsGroupingAndSorting . h \" # include \" Insights / TimingProfiler / ViewModels / StatsNode . h \" class FMenuBuilder ; class FUICommandList ; namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights { class FTable ; class FTableColumn ; class ITableCellValueSorter ; class SAsyncOperationStatus ; } class FTimingGraphTrack ; namespace UE::Insights::TimingProfiler { class FCounterAggregator ; typedef TFilterCollection<const FStatsNodePtr&> FStatsNodeFilterCollection ; typedef TTextFilter<const FStatsNodePtr&> FStatsNodeTextFilter ; class SStatsView : public SCompoundWidget { public :)",
    "insertText": "SStatsView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SStatsView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(double StartTime, double EndTime)"
  },
  {
    "label": "GetCounterNode()",
    "kind": "Method",
    "detail": "Function (FStatsNodePtr)",
    "insertText": "GetCounterNode(uint32 CounterId)"
  },
  {
    "label": "SelectCounterNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectCounterNode(uint32 CounterId)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree()"
  },
  {
    "label": "UpdateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNode(FStatsNodePtr NodePtr)"
  },
  {
    "label": "FinishAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAggregation()"
  },
  {
    "label": "InsightsManager_OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionChanged()"
  },
  {
    "label": "InsightsManager_OnSessionAnalysisCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionAnalysisCompleted()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FStatsNodePtr& GroupOrStatNodePtr, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "TreeView_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TreeView_GetMenuContent()"
  },
  {
    "label": "TreeView_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopySelectedToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopySelectedToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopySelectedNameToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopySelectedNameToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopySelectedNameToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopySelectedNameToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_Export_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_Export_CanExecute()"
  },
  {
    "label": "ContextMenu_Export_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_Export_Execute()"
  },
  {
    "label": "ContextMenu_ExportValues_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportValues_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportValues_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportValues_Execute()"
  },
  {
    "label": "ContextMenu_ExportOps_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportOps_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportOps_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportOps_Execute()"
  },
  {
    "label": "ContextMenu_ExportCounters_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportCounters_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportCounters_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportCounters_Execute()"
  },
  {
    "label": "OpenSaveTextFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSaveTextFileDialog(const FString& InDialogTitle, const FString& InDefaultFile, FString& OutFilename)"
  },
  {
    "label": "OpenExportFile()",
    "kind": "Method",
    "detail": "Function (class IFileHandle*)",
    "insertText": "OpenExportFile(const TCHAR* InFilename)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "GetColumnHeaderText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetColumnHeaderText(const FName ColumnId)"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FTableColumn& Column)"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "TreeView_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnGetChildren(FStatsNodePtr InParent, TArray<FStatsNodePtr>& OutChildren)"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FStatsNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TreeView_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnMouseButtonDoubleClick(FStatsNodePtr TreeNode)"
  },
  {
    "label": "TreeView_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TreeView_OnGenerateRow(FStatsNodePtr TreeNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TableRow_ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TableRow_ShouldBeEnabled(FStatsNodePtr NodePtr)"
  },
  {
    "label": "TableRow_SetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TableRow_SetHoveredCell(TSharedPtr<FTable> TablePtr, TSharedPtr<FTableColumn> ColumnPtr, FStatsNodePtr NodePtr)"
  },
  {
    "label": "TableRow_GetColumnOutlineHAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "TableRow_GetColumnOutlineHAlignment(const FName ColumnId)"
  },
  {
    "label": "TableRow_GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TableRow_GetHighlightText()"
  },
  {
    "label": "TableRow_GetHighlightedNodeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TableRow_GetHighlightedNodeName()"
  },
  {
    "label": "ApplyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFiltering()"
  },
  {
    "label": "FilterOutZeroCountStats_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutZeroCountStats_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "FilterOutZeroCountStats_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterOutZeroCountStats_IsChecked()"
  },
  {
    "label": "GetToggleButtonForNodeType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForNodeType(const EStatsNodeType InNodeType)"
  },
  {
    "label": "FilterByStatsType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByStatsType_OnCheckStateChanged(ECheckBoxState NewRadioState, const EStatsNodeType InNodeType)"
  },
  {
    "label": "FilterByStatsType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByStatsType_IsChecked(const EStatsNodeType InNodeType)"
  },
  {
    "label": "GetToggleButtonForDataType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForDataType(const EStatsNodeDataType InDataType)"
  },
  {
    "label": "FilterByStatsDataType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByStatsDataType_OnCheckStateChanged(ECheckBoxState NewRadioState, const EStatsNodeDataType InDataType)"
  },
  {
    "label": "FilterByStatsDataType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByStatsDataType_IsChecked(const EStatsNodeDataType InDataType)"
  },
  {
    "label": "SearchBox_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchBox_IsEnabled()"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups()"
  },
  {
    "label": "CreateGroupByOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupByOptionsSources()"
  },
  {
    "label": "GroupBy_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupBy_OnSelectionChanged(TSharedPtr<EStatsGroupingMode> NewGroupingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GroupBy_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GroupBy_OnGenerateWidget(TSharedPtr<EStatsGroupingMode> InGroupingMode)"
  },
  {
    "label": "GroupBy_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedText()"
  },
  {
    "label": "GroupBy_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedTooltipText()"
  },
  {
    "label": "GetDefaultColumnBeingSorted()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDefaultColumnBeingSorted()"
  },
  {
    "label": "GetDefaultColumnSortMode()",
    "kind": "Method",
    "detail": "Function (const EColumnSortMode::Type)",
    "insertText": "GetDefaultColumnSortMode()"
  },
  {
    "label": "CreateSortings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSortings()"
  },
  {
    "label": "UpdateCurrentSortingByColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSortingByColumn()"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodes()"
  },
  {
    "label": "SortTreeNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodesRec(FStatsNode& Node, const ITableCellValueSorter& Sorter)"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnId, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_CanExecute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_CanExecute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_CanExecute(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnId)"
  },
  {
    "label": "CanShowColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(const FName ColumnId)"
  },
  {
    "label": "CanHideColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(const FName ColumnId)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "CanToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_ShowAllColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowAllColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowAllColumns_Execute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ResetColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "GetTimingViewMainGraphTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphTrack>)",
    "insertText": "GetTimingViewMainGraphTrack()"
  },
  {
    "label": "ToggleGraphSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGraphSeries(TSharedRef<FTimingGraphTrack> GraphTrack, FStatsNodeRef NodePtr)"
  },
  {
    "label": "IsSeriesInTimingViewMainGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeriesInTimingViewMainGraph(FStatsNodePtr CounterNode)"
  },
  {
    "label": "ToggleTimingViewMainGraphEventSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewMainGraphEventSeries(FStatsNodePtr CounterNode)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FTable> Table ; TSharedPtr<const TraceServices::IAnalysisSession> Session ; TSharedPtr<FUICommandList> CommandList ; TSharedPtr<STreeView<FStatsNodePtr>> TreeView ; TSharedPtr<SHeaderRow> TreeViewHeaderRow ; TSharedPtr<SScrollBar> ExternalScrollbar ; FName HoveredColumnId ; FStatsNodePtr HoveredNodePtr ; FName HighlightedNodeName ; TArray<FStatsNodePtr> GroupNodes ; TArray<FStatsNodePtr> FilteredGroupNodes ; TArray<FStatsNodePtr> StatsNodes ; TMap<uint32,FStatsNodePtr> StatsNodesIdMap ; TSet<FStatsNodePtr> ExpandedNodes ; bool bExpansionSaved ; TSharedPtr<SSearchBox> SearchBox ; TSharedPtr<FStatsNodeTextFilter> TextFilter ; TSharedPtr<FStatsNodeFilterCollection> Filters ; bool FilterByNodeType [ static_cast<)",
    "insertText": "int(EStatsNodeType::InvalidOrMax)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (bool FilterByDataType [ static_cast<)",
    "insertText": "int(EStatsNodeDataType::InvalidOrMax)"
  }
]