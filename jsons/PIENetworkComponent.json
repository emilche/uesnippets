[
  {
    "label": "FBasePIENetworkComponentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasePIENetworkComponentState"
  },
  {
    "label": "CQTEST_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CQTEST_API"
  },
  {
    "label": "FNetworkComponentBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkComponentBuilder"
  },
  {
    "label": "FPIENetworkComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPIENetworkComponent"
  },
  {
    "label": "WITH_EDITOR()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # define ENABLE_PIE_NETWORK_TEST)",
    "insertText": "WITH_EDITOR(WITH_DEV_AUTOMATION_TESTS || WITH_PERF_AUTOMATION_TESTS)"
  },
  {
    "label": "FBasePIENetworkComponent()",
    "kind": "Method",
    "detail": "Function (UWorld* World = nullptr ; TArray<UNetConnection*> ClientConnections ; int32 ClientIndex = INDEX_NONE ; int32 ClientCount = 2 ; bool bIsDedicatedServer = true ; TSet<FNetworkGUID> LocallySpawnedActors { } ; } ; class FBasePIENetworkComponent { public :)",
    "insertText": "FBasePIENetworkComponent(FAutomationTestBase* InTestRunner, FTestCommandBuilder& InCommandBuilder, bool IsInitializing)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Then(TFunction<void()> Action)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Then(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Do(TFunction<void()> Action)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Do(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "Until()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Until(TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "Until()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "Until(const TCHAR* Description, TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "StartWhen()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "StartWhen(TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "StartWhen()",
    "kind": "Method",
    "detail": "Function (FBasePIENetworkComponent&)",
    "insertText": "StartWhen(const TCHAR* Description, TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "StopPie()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "StopPie()"
  },
  {
    "label": "StartPie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPie()"
  },
  {
    "label": "SetWorlds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWorlds()"
  },
  {
    "label": "SetPacketSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacketSettings()"
  },
  {
    "label": "ConnectClientsToServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectClientsToServer()"
  },
  {
    "label": "AwaitClientsReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AwaitClientsReady()"
  },
  {
    "label": "RestoreState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreState()"
  },
  {
    "label": "AGameModeBase()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FBasePIENetworkComponentState> ServerState = nullptr ; TArray<TUniquePtr<FBasePIENetworkComponentState>> ClientStates ; FAutomationTestBase* TestRunner = nullptr ; FTestCommandBuilder* CommandBuilder = nullptr ; FPacketSimulationSettings* PacketSimulationSettings = nullptr ; TSubclassOf<AGameModeBase> GameMode = TSubclassOf<)",
    "insertText": "AGameModeBase(nullptr)"
  },
  {
    "label": "FPIENetworkComponent()",
    "kind": "Method",
    "detail": "Function (FPIENetworkTestStateRestorer StateRestorer ; TMap<FNetworkGUID,int64> SpawnedActors { } ; } ; template<NetworkDataType> class FNetworkComponentBuilder ; template<NetworkDataType = FBasePIENetworkComponentState> class FPIENetworkComponent : public FBasePIENetworkComponent { public :)",
    "insertText": "FPIENetworkComponent(FAutomationTestBase* InTestRunner, FTestCommandBuilder& InCommandBuilder, bool IsInitializing) : FBasePIENetworkComponent(InTestRunner, InCommandBuilder, IsInitializing)"
  },
  {
    "label": "ThenServer()",
    "kind": "Method",
    "detail": "Function (} FPIENetworkComponent&)",
    "insertText": "ThenServer(TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "ThenServer()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenServer(const TCHAR* Description, TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "ThenClients()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenClients(TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "ThenClients()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenClients(const TCHAR* Description, TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "ThenClient()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenClient(int32 ClientIndex, TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "ThenClient()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenClient(const TCHAR* Description, int32 ClientIndex, TFunction<void(NetworkDataType&)> Action)"
  },
  {
    "label": "UntilServer()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilServer(TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "UntilServer()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilServer(const TCHAR* Description, TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "UntilClients()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilClients(TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "UntilClients()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilClients(const TCHAR* Description, TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "UntilClient()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilClient(int32 ClientIndex, TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "UntilClient()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "UntilClient(const TCHAR* Description, int32 ClientIndex, TFunction<bool(NetworkDataType&)> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "ThenClientJoins()",
    "kind": "Method",
    "detail": "Function (FPIENetworkComponent&)",
    "insertText": "ThenClientJoins()"
  },
  {
    "label": "SpawnAndReplicate()",
    "kind": "Method",
    "detail": "Function (template<ActorToSpawn,ActorToSpawn* NetworkDataType::* ResultStorage> FPIENetworkComponent&)",
    "insertText": "SpawnAndReplicate()"
  },
  {
    "label": "SpawnAndReplicate()",
    "kind": "Method",
    "detail": "Function (template<ActorToSpawn,ActorToSpawn* NetworkDataType::* ResultStorage> FPIENetworkComponent&)",
    "insertText": "SpawnAndReplicate(const FActorSpawnParameters& SpawnParameters)"
  },
  {
    "label": "SpawnAndReplicate()",
    "kind": "Method",
    "detail": "Function (template<ActorToSpawn,ActorToSpawn* NetworkDataType::* ResultStorage> FPIENetworkComponent&)",
    "insertText": "SpawnAndReplicate(TFunction<void(ActorToSpawn&)> BeforeReplicate)"
  },
  {
    "label": "SpawnAndReplicate()",
    "kind": "Method",
    "detail": "Function (template<ActorToSpawn,ActorToSpawn* NetworkDataType::* ResultStorage> FPIENetworkComponent&)",
    "insertText": "SpawnAndReplicate(const FActorSpawnParameters& SpawnParameters, TFunction<void(ActorToSpawn&)> BeforeReplicate)"
  },
  {
    "label": "SpawnOnServer()",
    "kind": "Method",
    "detail": "Function (private : class FNetworkComponentBuilder<NetworkDataType> ; template<ActorToSpawn,ActorToSpawn* NetworkDataType::* ResultStorage> FPIENetworkComponent&)",
    "insertText": "SpawnOnServer(const FActorSpawnParameters& SpawnParameters, TFunction<void(ActorToSpawn&)> BeforeReplicate)"
  },
  {
    "label": "ReplicateToClients()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateToClients(NetworkDataType& ClientState)"
  },
  {
    "label": "FNetworkComponentBuilder()",
    "kind": "Method",
    "detail": "Function (} ; template<NetworkDataType = FBasePIENetworkComponentState> class FNetworkComponentBuilder { public :)",
    "insertText": "FNetworkComponentBuilder()"
  },
  {
    "label": "WithClients()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "WithClients(int32 ClientCount)"
  },
  {
    "label": "AsDedicatedServer()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "AsDedicatedServer()"
  },
  {
    "label": "AsListenServer()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "AsListenServer()"
  },
  {
    "label": "WithPacketSimulationSettings()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "WithPacketSimulationSettings(FPacketSimulationSettings* InPacketSimulationSettings)"
  },
  {
    "label": "WithGameMode()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "WithGameMode(TSubclassOf<AGameModeBase> InGameMode)"
  },
  {
    "label": "WithGameInstanceClass()",
    "kind": "Method",
    "detail": "Function (FNetworkComponentBuilder&)",
    "insertText": "WithGameInstanceClass(FSoftClassPath InGameInstanceClass)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(FPIENetworkComponent<NetworkDataType>& OutNetwork)"
  }
]