[
  {
    "label": "ConstantPcmPacketSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantPcmPacketSource"
  },
  {
    "label": "ConstantPcmPacketSource()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_CONSTANT_PCM_PACKET_SOURCE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_CONSTANT_PCM_PACKET_SOURCE_H_ # include<stdio . h> # include<string> # include \" modules / audio_coding / neteq / tools / packet_source . h \" namespace webrtc { namespace test { class ConstantPcmPacketSource : public PacketSource { public :)",
    "insertText": "ConstantPcmPacketSource(size_t payload_len_samples, int16_t sample_value, int sample_rate_hz, int payload_type)"
  },
  {
    "label": "ConstantPcmPacketSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantPcmPacketSource(const ConstantPcmPacketSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstantPcmPacketSource&)",
    "insertText": "operator(const ConstantPcmPacketSource&)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Packet>)",
    "insertText": "NextPacket()"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "WriteHeader(uint8_t* packet_memory)"
  }
]