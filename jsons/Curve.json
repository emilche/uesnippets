[
  {
    "label": "FCurvePoint2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint2D"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FNurbsCurveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNurbsCurveData"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / EntityGeom . h \" # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Math / Boundary . h \" # include \" UI / Message . h \" # include \" Utils / Cache . h \" namespace UE::CADKernel { struct FCurvePoint2D ; struct FCurvePoint ; struct FNurbsCurveData ; class FCurve : public FEntityGeom { class FEntity ; protected : TCache<double> GlobalLength ; FLinearBoundary Boundary ; int8 Dimension ;)",
    "insertText": "FCurve(int8 InDimension = 3) : FEntityGeom() , Boundary() , Dimension(InDimension)"
  },
  {
    "label": "FCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurve(const FLinearBoundary& InBounds, int8 InDimension = 3) : FEntityGeom() , Boundary(InBounds) , Dimension(InDimension)"
  },
  {
    "label": "MakeNurbsCurve()",
    "kind": "Method",
    "detail": "Function (} public : TSharedPtr<FCurve>)",
    "insertText": "MakeNurbsCurve(FNurbsCurveData& InNurbsData)"
  },
  {
    "label": "MakeBezierCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeBezierCurve(const TArray<FPoint>& InPoles)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& Tangents)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& ArriveTangents, const TArray<FPoint>& LeaveTangents)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (ECurve CurveType =)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<CurveType ; })",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (Ar<<Dimension ; Ar<<Boundary ; } TSharedPtr<FEntity>)",
    "insertText": "Deserialize(FCADKernelArchive& Archive)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetDimension()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetDimension()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetLength(double Tolerance)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "EvaluatePoint(double Coordinate)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (FCurvePoint OutPoint ;)",
    "insertText": "EvaluatePoint(Coordinate, OutPoint)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "Evaluate2DPoint(double Coordinate)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (FCurvePoint2D OutPoint ;)",
    "insertText": "Evaluate2DPoint(Coordinate, OutPoint)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (FCurvePoint2D CurvePoint ;)",
    "insertText": "Evaluate2DPoint(Coordinate, CurvePoint)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (OutPoint = CurvePoint . Point ; } void)",
    "insertText": "EvaluatePoints(const TArray<double>& Coordinates, TArray<FCurvePoint>& OutPoints, int32 DerivativeOrder = 0)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoints(const TArray<double>& Coordinates, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoints(const TArray<double>& Coordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate2DPoints(const TArray<double>& Coordinates, TArray<FCurvePoint2D>& OutPoints, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNotDerivableCoordinates(int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindNotDerivableCoordinates(const FLinearBoundary& InBoundary, int32 DerivativeOrder, TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(TArray<double>& OutSampling, double Tolerance)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(Boundary, Tolerance, OutSampling)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Presample(const FLinearBoundary& InBoundary, double Tolerance, TArray<double>& OutSampling)"
  },
  {
    "label": "MakeBoundedCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeBoundedCurve(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Rebound()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "Rebound(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendTo(const FPoint& DesiredPosition)"
  },
  {
    "label": "ensureCADKernel()",
    "kind": "Method",
    "detail": "Function (NOT_IMPLEMENTED ;)",
    "insertText": "ensureCADKernel(false)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendTo(const FPoint2D& DesiredPosition)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (FPoint Point = DesiredPosition ;)",
    "insertText": "ExtendTo(Point)"
  },
  {
    "label": "ComputeLength()",
    "kind": "Method",
    "detail": "Function (} protected : double)",
    "insertText": "ComputeLength(const FLinearBoundary& InBoundary, double Tolerance)"
  },
  {
    "label": "ComputeLength2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ComputeLength2D(const FLinearBoundary& InBoundary, double Tolerance)"
  }
]