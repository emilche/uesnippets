[
  {
    "label": "FCurvePoint2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint2D"
  },
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FNurbsCurveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNurbsCurveData"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "MakeNurbsCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeNurbsCurve(FNurbsCurveData& InNurbsData)"
  },
  {
    "label": "MakeBezierCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeBezierCurve(const TArray<FPoint>& InPoles)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& Tangents)"
  },
  {
    "label": "MakeSplineCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSplineCurve(const TArray<FPoint>& InPoles, const TArray<FPoint>& ArriveTangents, const TArray<FPoint>& LeaveTangents)"
  },
  {
    "label": "MakeConeCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeConeCurve(const double InToleranceGeometric, const FMatrixH& InMatrix, double InStartRadius, double InConeAngle, const FSurfacicBoundary& InBoundary)"
  },
  {
    "label": "MakeCylinderCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeCylinderCurve(const double InToleranceGeometric, const FMatrixH& InMatrix, const double InRadius, const FSurfacicBoundary& InBoundary)"
  },
  {
    "label": "MakePlaneCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakePlaneCurve(const double InToleranceGeometric, const FMatrixH& InMatrix, const FSurfacicBoundary& InBoundary)"
  },
  {
    "label": "MakeSphericalCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeSphericalCurve(const double InToleranceGeometric, const FMatrixH& InMatrix, double InRadius, const FSurfacicBoundary& InBoundary)"
  },
  {
    "label": "MakeTorusCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeTorusCurve(const double InToleranceGeometric, const FMatrixH& InMatrix, double InMajorRadius, double InMinorRadius, const FSurfacicBoundary& InBoundary)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEntity>)",
    "insertText": "Deserialize(FCADKernelArchive& Archive)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindNotDerivableCoordinates(Boundary, DerivativeOrder, OutNotDerivableCoordinates)"
  },
  {
    "label": "MakeBoundedCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "MakeBoundedCurve(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Rebound()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurve>)",
    "insertText": "Rebound(const FLinearBoundary& InBoundary)"
  }
]