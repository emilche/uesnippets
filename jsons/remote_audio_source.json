[
  {
    "label": "RemoteAudioSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteAudioSource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AudioDataProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDataProxy"
  },
  {
    "label": "RemoteAudioSource()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_REMOTE_AUDIO_SOURCE_H_ # define PC_REMOTE_AUDIO_SOURCE_H_ # include<stdint . h> # include<list> # include<string> # include \" absl / types / optional . h \" # include \" api / call / audio_sink . h \" # include \" api / media_stream_interface . h \" # include \" api / notifier . h \" # include \" api / task_queue / task_queue_base . h \" # include \" media / base / media_channel . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class RemoteAudioSource : public Notifier<AudioSourceInterface> { public : enum class OnAudioChannelGoneAction { kSurvive,kEnd,} ;)",
    "insertText": "RemoteAudioSource(TaskQueueBase* worker_thread, OnAudioChannelGoneAction on_audio_channel_gone_action)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(cricket::VoiceMediaChannel* media_channel, absl::optional<uint32_t> ssrc)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(cricket::VoiceMediaChannel* media_channel, absl::optional<uint32_t> ssrc)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(SourceState new_state)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (MediaSourceInterface::SourceState)",
    "insertText": "state()"
  },
  {
    "label": "remote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remote()"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolume(double volume)"
  },
  {
    "label": "RegisterAudioObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAudioObserver(AudioObserver* observer)"
  },
  {
    "label": "UnregisterAudioObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAudioObserver(AudioObserver* observer)"
  },
  {
    "label": "AddSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSink(AudioTrackSinkInterface* sink)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(AudioTrackSinkInterface* sink)"
  },
  {
    "label": "RemoteAudioSource()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "RemoteAudioSource()"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (private : class AudioDataProxy ; void)",
    "insertText": "OnData(const AudioSinkInterface::Data& audio)"
  },
  {
    "label": "OnAudioChannelGone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioChannelGone()"
  }
]