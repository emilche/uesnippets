[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FFloatSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatSpringState"
  },
  {
    "label": "FVectorSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorSpringState"
  },
  {
    "label": "FQuaternionSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuaternionSpringState"
  },
  {
    "label": "FRuntimeFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimeFloatCurve"
  },
  {
    "label": "UKismetMathLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UKismetMathLibrary"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "RandomBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RandomBool()"
  },
  {
    "label": "RandomBoolWithWeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RandomBoolWithWeight(float Weight)"
  },
  {
    "label": "RandomBoolWithWeightFromStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RandomBoolWithWeightFromStream(const FRandomStream& RandomStream, float Weight)"
  },
  {
    "label": "RandomBoolWithWeightFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomBoolWithWeightFromStream(RandomStream, Weight)"
  },
  {
    "label": "Not_PreBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Not_PreBool(bool A)"
  },
  {
    "label": "EqualEqual_BoolBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_BoolBool(bool A, bool B)"
  },
  {
    "label": "NotEqual_BoolBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_BoolBool(bool A, bool B)"
  },
  {
    "label": "BooleanAND()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BooleanAND(bool A, bool B)"
  },
  {
    "label": "BooleanNAND()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BooleanNAND(bool A, bool B)"
  },
  {
    "label": "BooleanOR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BooleanOR(bool A, bool B)"
  },
  {
    "label": "BooleanXOR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BooleanXOR(bool A, bool B)"
  },
  {
    "label": "BooleanNOR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BooleanNOR(bool A, bool B)"
  },
  {
    "label": "Multiply_ByteByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Multiply_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "Divide_ByteByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Divide_ByteByte(uint8 A, uint8 B = 1)"
  },
  {
    "label": "Percent_ByteByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Percent_ByteByte(uint8 A, uint8 B = 1)"
  },
  {
    "label": "Add_ByteByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Add_ByteByte(uint8 A, uint8 B = 1)"
  },
  {
    "label": "Subtract_ByteByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Subtract_ByteByte(uint8 A, uint8 B = 1)"
  },
  {
    "label": "BMin()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "BMin(uint8 A, uint8 B)"
  },
  {
    "label": "BMax()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "BMax(uint8 A, uint8 B)"
  },
  {
    "label": "Less_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "Greater_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "LessEqual_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "GreaterEqual_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "EqualEqual_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "NotEqual_ByteByte()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_ByteByte(uint8 A, uint8 B)"
  },
  {
    "label": "Multiply_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Multiply_IntInt(int32 A, int32 B)"
  },
  {
    "label": "Divide_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Divide_IntInt(int32 A, int32 B = 1)"
  },
  {
    "label": "Percent_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Percent_IntInt(int32 A, int32 B = 1)"
  },
  {
    "label": "Add_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Add_IntInt(int32 A, int32 B = 1)"
  },
  {
    "label": "Subtract_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Subtract_IntInt(int32 A, int32 B = 1)"
  },
  {
    "label": "Less_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_IntInt(int32 A, int32 B)"
  },
  {
    "label": "Greater_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_IntInt(int32 A, int32 B)"
  },
  {
    "label": "LessEqual_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_IntInt(int32 A, int32 B)"
  },
  {
    "label": "GreaterEqual_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_IntInt(int32 A, int32 B)"
  },
  {
    "label": "EqualEqual_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_IntInt(int32 A, int32 B)"
  },
  {
    "label": "NotEqual_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_IntInt(int32 A, int32 B)"
  },
  {
    "label": "InRange_IntInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InRange_IntInt(int32 Value, int32 Min, int32 Max, bool InclusiveMin = true, bool InclusiveMax = true)"
  },
  {
    "label": "And_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "And_IntInt(int32 A, int32 B)"
  },
  {
    "label": "Xor_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Xor_IntInt(int32 A, int32 B)"
  },
  {
    "label": "Or_IntInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Or_IntInt(int32 A, int32 B)"
  },
  {
    "label": "Not_Int()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Not_Int(int32 A)"
  },
  {
    "label": "SignOfInteger()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SignOfInteger(int32 A)"
  },
  {
    "label": "RandomInteger()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RandomInteger(int32 Max)"
  },
  {
    "label": "RandomIntegerInRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RandomIntegerInRange(int32 Min, int32 Max)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Min(int32 A, int32 B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Max(int32 A, int32 B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Clamp(int32 Value, int32 Min, int32 Max)"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Wrap(int32 Value, int32 Min, int32 Max)"
  },
  {
    "label": "Abs_Int()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Abs_Int(int32 A)"
  },
  {
    "label": "Multiply_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Multiply_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "Divide_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Divide_Int64Int64(int64 A, int64 B = 1)"
  },
  {
    "label": "Percent_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Percent_Int64Int64(int64 A, int64 B = 1)"
  },
  {
    "label": "Add_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Add_Int64Int64(int64 A, int64 B = 1)"
  },
  {
    "label": "Subtract_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Subtract_Int64Int64(int64 A, int64 B = 1)"
  },
  {
    "label": "Less_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "Greater_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "LessEqual_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "GreaterEqual_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "EqualEqual_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "NotEqual_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "InRange_Int64Int64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin = true, bool InclusiveMax = true)"
  },
  {
    "label": "And_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "And_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "Xor_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Xor_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "Or_Int64Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Or_Int64Int64(int64 A, int64 B)"
  },
  {
    "label": "Not_Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Not_Int64(int64 A)"
  },
  {
    "label": "SignOfInteger64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SignOfInteger64(int64 A)"
  },
  {
    "label": "RandomInteger64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "RandomInteger64(int64 Max)"
  },
  {
    "label": "RandomInteger64InRange()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "RandomInteger64InRange(int64 Min, int64 Max)"
  },
  {
    "label": "MinInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MinInt64(int64 A, int64 B)"
  },
  {
    "label": "MaxInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MaxInt64(int64 A, int64 B)"
  },
  {
    "label": "ClampInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ClampInt64(int64 Value, int64 Min, int64 Max)"
  },
  {
    "label": "Abs_Int64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Abs_Int64(int64 A)"
  },
  {
    "label": "MultiplyMultiply_FloatFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MultiplyMultiply_FloatFloat(double Base, double Exp)"
  },
  {
    "label": "Multiply_IntFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Multiply_IntFloat(int32 A, double B)"
  },
  {
    "label": "Percent_FloatFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Percent_FloatFloat(double A, double B = 1.f)"
  },
  {
    "label": "GenericPercent_FloatFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GenericPercent_FloatFloat(double A, double B)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Fraction(double A)"
  },
  {
    "label": "Add_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Add_DoubleDouble(double A, double B = 1.0)"
  },
  {
    "label": "Subtract_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Subtract_DoubleDouble(double A, double B = 1.0)"
  },
  {
    "label": "Multiply_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Multiply_DoubleDouble(double A, double B)"
  },
  {
    "label": "Divide_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Divide_DoubleDouble(double A, double B = 1.0)"
  },
  {
    "label": "Less_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_DoubleDouble(double A, double B)"
  },
  {
    "label": "Greater_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_DoubleDouble(double A, double B)"
  },
  {
    "label": "LessEqual_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_DoubleDouble(double A, double B)"
  },
  {
    "label": "GreaterEqual_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_DoubleDouble(double A, double B)"
  },
  {
    "label": "EqualEqual_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_DoubleDouble(double A, double B)"
  },
  {
    "label": "NearlyEqual_FloatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance = 1.e-6)"
  },
  {
    "label": "NotEqual_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_DoubleDouble(double A, double B)"
  },
  {
    "label": "InRange_FloatFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin = true, bool InclusiveMax = true)"
  },
  {
    "label": "Hypotenuse()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Hypotenuse(double Width, double Height)"
  },
  {
    "label": "GridSnap_Float()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GridSnap_Float(double Location, double GridSize)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Abs(double A)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Sin(double A)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Asin(double A)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Cos(double A)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Acos(double A)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Tan(double A)"
  },
  {
    "label": "Atan()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Atan(double A)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Atan2(double Y, double X)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Exp(double A)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Log(double A, double Base = 1.0)"
  },
  {
    "label": "Loge()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Loge(double A)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Sqrt(double A)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Square(double A)"
  },
  {
    "label": "RandomFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RandomFloat()"
  },
  {
    "label": "RandomFloatInRange()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RandomFloatInRange(double Min, double Max)"
  },
  {
    "label": "GetPI()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetPI()"
  },
  {
    "label": "GetTAU()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTAU()"
  },
  {
    "label": "DegreesToRadians()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegreesToRadians(double A)"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RadiansToDegrees(double A)"
  },
  {
    "label": "DegSin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegSin(double A)"
  },
  {
    "label": "DegAsin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegAsin(double A)"
  },
  {
    "label": "DegCos()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegCos(double A)"
  },
  {
    "label": "DegAcos()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegAcos(double A)"
  },
  {
    "label": "DegTan()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegTan(double A)"
  },
  {
    "label": "DegAtan()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegAtan(double A)"
  },
  {
    "label": "DegAtan2()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DegAtan2(double Y, double X)"
  },
  {
    "label": "ClampAngle()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees)"
  },
  {
    "label": "FMin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FMin(double A, double B)"
  },
  {
    "label": "FMax()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FMax(double A, double B)"
  },
  {
    "label": "FClamp()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FClamp(double Value, double Min, double Max)"
  },
  {
    "label": "FWrap()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FWrap(double Value, double Min, double Max)"
  },
  {
    "label": "SafeDivide()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "SafeDivide(double A, double B)"
  },
  {
    "label": "MaxOfIntArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxOfIntArray(const TArray<int32>& IntArray, int32& IndexOfMaxValue, int32& MaxValue)"
  },
  {
    "label": "MinOfIntArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinOfIntArray(const TArray<int32>& IntArray, int32& IndexOfMinValue, int32& MinValue)"
  },
  {
    "label": "MedianOfIntArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MedianOfIntArray(TArray<int32> IntArray, float& MedianValue)"
  },
  {
    "label": "AverageOfIntArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AverageOfIntArray(const TArray<int32>& IntArray, float& AverageValue)"
  },
  {
    "label": "MaxOfFloatArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxOfFloatArray(const TArray<float>& FloatArray, int32& IndexOfMaxValue, float& MaxValue)"
  },
  {
    "label": "MinOfFloatArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinOfFloatArray(const TArray<float>& FloatArray, int32& IndexOfMinValue, float& MinValue)"
  },
  {
    "label": "MaxOfByteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxOfByteArray(const TArray<uint8>& ByteArray, int32& IndexOfMaxValue, uint8& MaxValue)"
  },
  {
    "label": "MinOfByteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinOfByteArray(const TArray<uint8>& ByteArray, int32& IndexOfMinValue, uint8& MinValue)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Lerp(double A, double B, double Alpha)"
  },
  {
    "label": "Ease()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Ease(double A, double B, double Alpha, TEnumAsByte<EEasingFunc::Type> EasingFunc, double BlendExp = 2, int32 Steps = 2)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Round(double A)"
  },
  {
    "label": "FFloor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FFloor(double A)"
  },
  {
    "label": "FTrunc()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FTrunc(double A)"
  },
  {
    "label": "FCeil()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FCeil(double A)"
  },
  {
    "label": "Round64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Round64(double A)"
  },
  {
    "label": "FFloor64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FFloor64(double A)"
  },
  {
    "label": "FTrunc64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FTrunc64(double A)"
  },
  {
    "label": "FCeil64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FCeil64(double A)"
  },
  {
    "label": "FMod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FMod(double Dividend, double Divisor, double& Remainder)"
  },
  {
    "label": "FMod64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FMod64(double Dividend, double Divisor, double& Remainder)"
  },
  {
    "label": "SignOfFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "SignOfFloat(double A)"
  },
  {
    "label": "NormalizeToRange()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "NormalizeToRange(double Value, double RangeMin, double RangeMax)"
  },
  {
    "label": "MapRangeUnclamped()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB)"
  },
  {
    "label": "MapRangeClamped()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB)"
  },
  {
    "label": "MultiplyByPi()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MultiplyByPi(double Value)"
  },
  {
    "label": "FInterpEaseInOut()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FInterpEaseInOut(double A, double B, double Alpha, double Exponent)"
  },
  {
    "label": "GetRuntimeFloatCurveValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRuntimeFloatCurveValue(const FRuntimeFloatCurve& Curve, const float InTime, const float InDefaultValue = 0.0f)"
  },
  {
    "label": "MakePulsatingValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond = 1.0f, float InPhase = 0.0f)"
  },
  {
    "label": "FixedTurn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FixedTurn(float InCurrent, float InDesired, float InDeltaRate)"
  },
  {
    "label": "IntPoint_Zero()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_Zero()"
  },
  {
    "label": "IntPoint_One()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_One()"
  },
  {
    "label": "IntPoint_Up()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_Up()"
  },
  {
    "label": "IntPoint_Left()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_Left()"
  },
  {
    "label": "IntPoint_Right()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_Right()"
  },
  {
    "label": "IntPoint_Down()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "IntPoint_Down()"
  },
  {
    "label": "Conv_IntPointToVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Conv_IntPointToVector2D(FIntPoint InIntPoint)"
  },
  {
    "label": "Add_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Add_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "Add_IntPointInt()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Add_IntPointInt(FIntPoint A, int32 B)"
  },
  {
    "label": "Subtract_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "Subtract_IntPointInt()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Subtract_IntPointInt(FIntPoint A, int32 B)"
  },
  {
    "label": "Multiply_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "Multiply_IntPointInt()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Multiply_IntPointInt(FIntPoint A, int32 B)"
  },
  {
    "label": "Divide_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Divide_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "Divide_IntPointInt()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Divide_IntPointInt(FIntPoint A, int32 B)"
  },
  {
    "label": "Equal_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equal_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "NotEqual_IntPointIntPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B)"
  },
  {
    "label": "Vector2D_One()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2D_One()"
  },
  {
    "label": "Vector2D_Unit45Deg()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2D_Unit45Deg()"
  },
  {
    "label": "Vector2D_Zero()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2D_Zero()"
  },
  {
    "label": "MakeVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "MakeVector2D(double X, double Y)"
  },
  {
    "label": "BreakVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakVector2D(FVector2D InVec, double& X, double& Y)"
  },
  {
    "label": "Conv_Vector2DToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_Vector2DToVector(FVector2D InVector2D, float Z = 0)"
  },
  {
    "label": "Conv_Vector2DToIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Conv_Vector2DToIntPoint(FVector2D InVector2D)"
  },
  {
    "label": "Add_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Add_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "Add_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Add_Vector2DFloat(FVector2D A, double B)"
  },
  {
    "label": "Subtract_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Subtract_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "Subtract_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Subtract_Vector2DFloat(FVector2D A, double B)"
  },
  {
    "label": "Multiply_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Multiply_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "Multiply_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Multiply_Vector2DFloat(FVector2D A, double B)"
  },
  {
    "label": "Divide_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Divide_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "Divide_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Divide_Vector2DFloat(FVector2D A, double B = 1.f)"
  },
  {
    "label": "EqualExactly_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "EqualEqual_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "NotEqualExactly_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "NotEqual_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "Negated2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Negated2D(const FVector2D& A)"
  },
  {
    "label": "ClampAxes2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ClampAxes2D(FVector2D A, double MinAxisVal, double MaxAxisVal)"
  },
  {
    "label": "CrossProduct2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CrossProduct2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "Distance2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Distance2D(FVector2D V1, FVector2D V2)"
  },
  {
    "label": "DistanceSquared2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DistanceSquared2D(FVector2D V1, FVector2D V2)"
  },
  {
    "label": "DotProduct2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "DotProduct2D(FVector2D A, FVector2D B)"
  },
  {
    "label": "GetAbs2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetAbs2D(FVector2D A)"
  },
  {
    "label": "GetAbsMax2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAbsMax2D(FVector2D A)"
  },
  {
    "label": "GetMax2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetMax2D(FVector2D A)"
  },
  {
    "label": "GetMin2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetMin2D(FVector2D A)"
  },
  {
    "label": "GetRotated2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetRotated2D(FVector2D A, float AngleDeg)"
  },
  {
    "label": "IsNearlyZero2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNearlyZero2D(const FVector2D& A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "IsZero2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZero2D(const FVector2D& A)"
  },
  {
    "label": "Vector2DInterpTo()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "Vector2DInterpTo_Constant()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "NormalSafe2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "NormalSafe2D(FVector2D A, float Tolerance = 1.e-8f)"
  },
  {
    "label": "Normal2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Normal2D(FVector2D A)"
  },
  {
    "label": "Spherical2DToUnitCartesian()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Spherical2DToUnitCartesian(FVector2D A)"
  },
  {
    "label": "ToDirectionAndLength2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDirectionAndLength2D(FVector2D A, FVector2D &OutDir, double &OutLength)"
  },
  {
    "label": "ToRounded2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ToRounded2D(FVector2D A)"
  },
  {
    "label": "ToSign2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ToSign2D(FVector2D A)"
  },
  {
    "label": "VSize2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSize2D(FVector2D A)"
  },
  {
    "label": "VSize2DSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSize2DSquared(FVector2D A)"
  },
  {
    "label": "Vector_Zero()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Zero()"
  },
  {
    "label": "Vector_One()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_One()"
  },
  {
    "label": "Vector_Forward()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Forward()"
  },
  {
    "label": "Vector_Backward()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Backward()"
  },
  {
    "label": "Vector_Up()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Up()"
  },
  {
    "label": "Vector_Down()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Down()"
  },
  {
    "label": "Vector_Right()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Right()"
  },
  {
    "label": "Vector_Left()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Left()"
  },
  {
    "label": "MakeVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "MakeVector(double X, double Y, double Z)"
  },
  {
    "label": "CreateVectorFromYawPitch()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CreateVectorFromYawPitch(float Yaw, float Pitch, float Length = 1.0f )"
  },
  {
    "label": "BreakVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakVector(FVector InVec, double& X, double& Y, double& Z)"
  },
  {
    "label": "BreakVector3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakVector3f(FVector3f InVec, float& X, float& Y, float& Z)"
  },
  {
    "label": "Conv_VectorToLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Conv_VectorToLinearColor(FVector InVec)"
  },
  {
    "label": "Conv_VectorToTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "Conv_VectorToTransform(FVector InLocation)"
  },
  {
    "label": "Conv_VectorToVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Conv_VectorToVector2D(FVector InVector)"
  },
  {
    "label": "Conv_VectorToRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Conv_VectorToRotator(FVector InVec)"
  },
  {
    "label": "RotatorFromAxisAndAngle()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RotatorFromAxisAndAngle(FVector Axis, float Angle)"
  },
  {
    "label": "Conv_VectorToQuaternion()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Conv_VectorToQuaternion(FVector InVec)"
  },
  {
    "label": "Vector_SlerpVectorToDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_SlerpVectorToDirection(FVector Vector, FVector Direction, double Alpha)"
  },
  {
    "label": "Vector_SlerpNormals()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_SlerpNormals(FVector NormalA, FVector NormalB, double Alpha)"
  },
  {
    "label": "Add_VectorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Add_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "Add_VectorFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Add_VectorFloat(FVector A, double B)"
  },
  {
    "label": "Add_VectorInt()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Add_VectorInt(FVector A, int32 B)"
  },
  {
    "label": "Subtract_VectorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Subtract_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "Subtract_VectorFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Subtract_VectorFloat(FVector A, double B)"
  },
  {
    "label": "Subtract_VectorInt()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Subtract_VectorInt(FVector A, int32 B)"
  },
  {
    "label": "Multiply_VectorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Multiply_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "Multiply_VectorFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Multiply_VectorFloat(FVector A, double B)"
  },
  {
    "label": "Multiply_VectorInt()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Multiply_VectorInt(FVector A, int32 B)"
  },
  {
    "label": "Divide_VectorFloat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Divide_VectorFloat(FVector A, double B = 1.f)"
  },
  {
    "label": "Divide_VectorInt()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Divide_VectorInt(FVector A, int32 B = 1)"
  },
  {
    "label": "NegateVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "NegateVector(FVector A)"
  },
  {
    "label": "EqualExactly_VectorVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualExactly_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "EqualEqual_VectorVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "NotEqualExactly_VectorVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqualExactly_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "NotEqual_VectorVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "Dot_VectorVector()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Dot_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "Cross_VectorVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Cross_VectorVector(FVector A, FVector B)"
  },
  {
    "label": "GreaterGreater_VectorRotator()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GreaterGreater_VectorRotator(FVector A, FRotator B)"
  },
  {
    "label": "RotateAngleAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis)"
  },
  {
    "label": "LessLess_VectorRotator()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "LessLess_VectorRotator(FVector A, FRotator B)"
  },
  {
    "label": "ClampVectorSize()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClampVectorSize(FVector A, double Min, double Max)"
  },
  {
    "label": "Vector_ClampSize2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ClampSize2D(FVector A, double Min, double Max)"
  },
  {
    "label": "Vector_ClampSizeMax()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ClampSizeMax(FVector A, double Max)"
  },
  {
    "label": "Vector_ClampSizeMax2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ClampSizeMax2D(FVector A, double Max)"
  },
  {
    "label": "GetMinElement()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetMinElement(FVector A)"
  },
  {
    "label": "GetMaxElement()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetMaxElement(FVector A)"
  },
  {
    "label": "Vector_GetAbsMax()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_GetAbsMax(FVector A)"
  },
  {
    "label": "Vector_GetAbsMin()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_GetAbsMin(FVector A)"
  },
  {
    "label": "Vector_GetAbs()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_GetAbs(FVector A)"
  },
  {
    "label": "Vector_ComponentMin()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ComponentMin(FVector A, FVector B)"
  },
  {
    "label": "Vector_ComponentMax()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ComponentMax(FVector A, FVector B)"
  },
  {
    "label": "Vector_GetSignVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_GetSignVector(FVector A)"
  },
  {
    "label": "Vector_GetProjection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_GetProjection(FVector A)"
  },
  {
    "label": "Vector_HeadingAngle()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_HeadingAngle(FVector A)"
  },
  {
    "label": "Vector_CosineAngle2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_CosineAngle2D(FVector A, FVector B)"
  },
  {
    "label": "Vector_ToRadians()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ToRadians(FVector A)"
  },
  {
    "label": "Vector_ToDegrees()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ToDegrees(FVector A)"
  },
  {
    "label": "Vector_UnitCartesianToSpherical()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector_UnitCartesianToSpherical(FVector A)"
  },
  {
    "label": "GetDirectionUnitVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetDirectionUnitVector(FVector From, FVector To)"
  },
  {
    "label": "GetYawPitchFromVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch)"
  },
  {
    "label": "GetAzimuthAndElevation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAzimuthAndElevation(FVector InDirection, const FTransform& ReferenceFrame, float& Azimuth, float& Elevation)"
  },
  {
    "label": "GetVectorArrayAverage()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetVectorArrayAverage(const TArray<FVector>& Vectors)"
  },
  {
    "label": "FTruncVector()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "FTruncVector(const FVector& InVector)"
  },
  {
    "label": "Vector_Distance()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_Distance(FVector V1, FVector V2)"
  },
  {
    "label": "Vector_DistanceSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_DistanceSquared(FVector V1, FVector V2)"
  },
  {
    "label": "Vector_Distance2D()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_Distance2D(FVector V1, FVector V2)"
  },
  {
    "label": "Vector_Distance2DSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector_Distance2DSquared(FVector V1, FVector V2)"
  },
  {
    "label": "VSize()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSize(FVector A)"
  },
  {
    "label": "VSizeSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSizeSquared(FVector A)"
  },
  {
    "label": "VSizeXY()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSizeXY(FVector A)"
  },
  {
    "label": "VSizeXYSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "VSizeXYSquared(FVector A)"
  },
  {
    "label": "Vector_IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsNearlyZero(const FVector& A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector_IsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsZero(const FVector& A)"
  },
  {
    "label": "Vector_IsNAN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsNAN(const FVector& A)"
  },
  {
    "label": "Vector_IsUniform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsUniform(const FVector& A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector_IsUnit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsUnit(const FVector& A, float SquaredLenthTolerance = 1.e-4f)"
  },
  {
    "label": "Vector_IsNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector_IsNormal(const FVector& A)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Normal(FVector A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector_Normal2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Normal2D(FVector A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector_NormalUnsafe()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_NormalUnsafe(const FVector& A)"
  },
  {
    "label": "VLerp()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VLerp(FVector A, FVector B, float Alpha)"
  },
  {
    "label": "VEase()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc::Type> EasingFunc, float BlendExp = 2, int32 Steps = 2)"
  },
  {
    "label": "VInterpTo()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "VInterpTo_Constant()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "Vector_Reciprocal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_Reciprocal(const FVector& A)"
  },
  {
    "label": "GetReflectionVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetReflectionVector(FVector Direction, FVector SurfaceNormal)"
  },
  {
    "label": "MirrorVectorByNormal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "MirrorVectorByNormal(FVector InVect, FVector InNormal)"
  },
  {
    "label": "Vector_MirrorByPlane()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_MirrorByPlane(FVector A, const FPlane& InPlane)"
  },
  {
    "label": "Vector_SnappedToGrid()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_SnappedToGrid(FVector InVect, float InGridSize)"
  },
  {
    "label": "Vector_BoundedToCube()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_BoundedToCube(FVector InVect, float InRadius)"
  },
  {
    "label": "Vector_BoundedToBox()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax)"
  },
  {
    "label": "Vector_ProjectOnToNormal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Vector_ProjectOnToNormal(FVector V, FVector InNormal)"
  },
  {
    "label": "ProjectVectorOnToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectVectorOnToVector(FVector V, FVector Target)"
  },
  {
    "label": "ProjectPointOnToPlane()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal)"
  },
  {
    "label": "ProjectVectorOnToPlane()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectVectorOnToPlane(FVector V, FVector PlaneNormal)"
  },
  {
    "label": "FindNearestPointsOnLineSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point)"
  },
  {
    "label": "FindClosestPointOnSegment()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd)"
  },
  {
    "label": "FindClosestPointOnLine()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection)"
  },
  {
    "label": "GetPointDistanceToSegment()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd)"
  },
  {
    "label": "GetPointDistanceToLine()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection)"
  },
  {
    "label": "RandomUnitVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVector()"
  },
  {
    "label": "RandomPointInBoundingBox()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomPointInBoundingBox(const FVector Center, const FVector HalfSize)"
  },
  {
    "label": "RandomPointInBoundingBox_Box()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomPointInBoundingBox_Box(const FBox Box)"
  },
  {
    "label": "RandomUnitVectorInConeInRadians()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians)"
  },
  {
    "label": "RandomUnitVectorInEllipticalConeInRadians()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians)"
  },
  {
    "label": "Vector4_Zero()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_Zero()"
  },
  {
    "label": "MakeVector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "MakeVector4(double X, double Y, double Z, double W)"
  },
  {
    "label": "BreakVector4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakVector4(const FVector4& InVec, double& X, double& Y, double& Z, double& W)"
  },
  {
    "label": "Conv_Vector4ToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_Vector4ToVector(const FVector4& InVector4)"
  },
  {
    "label": "Conv_Vector4ToRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Conv_Vector4ToRotator(const FVector4& InVec)"
  },
  {
    "label": "Conv_Vector4ToQuaternion()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Conv_Vector4ToQuaternion(const FVector4& InVec)"
  },
  {
    "label": "Add_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Add_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Subtract_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Subtract_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Multiply_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Multiply_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Divide_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Divide_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "EqualExactly_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualExactly_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "EqualEqual_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_Vector4Vector4(const FVector4& A, const FVector4& B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "NotEqualExactly_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqualExactly_Vector4Vector4(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "NotEqual_Vector4Vector4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_Vector4Vector4(const FVector4& A, const FVector4& B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "Vector4_Negated()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_Negated(const FVector4& A)"
  },
  {
    "label": "Vector4_CrossProduct3()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_CrossProduct3(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Vector4_DotProduct()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_DotProduct(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Vector4_DotProduct3()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_DotProduct3(const FVector4& A, const FVector4& B)"
  },
  {
    "label": "Vector4_IsNAN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector4_IsNAN(const FVector4& A)"
  },
  {
    "label": "Vector4_IsNearlyZero3()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector4_IsNearlyZero3(const FVector4& A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector4_IsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector4_IsZero(const FVector4& A)"
  },
  {
    "label": "Vector4_Size()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_Size(const FVector4& A)"
  },
  {
    "label": "Vector4_SizeSquared()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_SizeSquared(const FVector4& A)"
  },
  {
    "label": "Vector4_Size3()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_Size3(const FVector4& A)"
  },
  {
    "label": "Vector4_SizeSquared3()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Vector4_SizeSquared3(const FVector4& A)"
  },
  {
    "label": "Vector4_IsUnit3()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector4_IsUnit3(const FVector4& A, float SquaredLenthTolerance = 1.e-4f)"
  },
  {
    "label": "Vector4_IsNormal3()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Vector4_IsNormal3(const FVector4& A)"
  },
  {
    "label": "Vector4_Normal3()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_Normal3(const FVector4& A, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Vector4_NormalUnsafe3()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_NormalUnsafe3(const FVector4& A)"
  },
  {
    "label": "Vector4_MirrorByVector3()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Vector4_MirrorByVector3(const FVector4& Direction, const FVector4& SurfaceNormal)"
  },
  {
    "label": "TransformVector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "TransformVector4(const FMatrix& Matrix, const FVector4& Vec4)"
  },
  {
    "label": "MakeRotFromX()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromX(const FVector& X)"
  },
  {
    "label": "MakeRotFromY()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromY(const FVector& Y)"
  },
  {
    "label": "MakeRotFromZ()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromZ(const FVector& Z)"
  },
  {
    "label": "MakeRotFromXY()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromXY(const FVector& X, const FVector& Y)"
  },
  {
    "label": "MakeRotFromXZ()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromXZ(const FVector& X, const FVector& Z)"
  },
  {
    "label": "MakeRotFromYX()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromYX(const FVector& Y, const FVector& X)"
  },
  {
    "label": "MakeRotFromYZ()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromYZ(const FVector& Y, const FVector& Z)"
  },
  {
    "label": "MakeRotFromZX()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromZX(const FVector& Z, const FVector& X)"
  },
  {
    "label": "MakeRotFromZY()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotFromZY(const FVector& Z, const FVector& Y)"
  },
  {
    "label": "MakeRotationFromAxes()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up)"
  },
  {
    "label": "FindLookAtRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "FindLookAtRotation(const FVector& Start, const FVector& Target)"
  },
  {
    "label": "FindRelativeLookAtRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "FindRelativeLookAtRotation(const FTransform& StartTransform, const FVector& TargetLocation)"
  },
  {
    "label": "BreakRotIntoAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakRotIntoAxes(const FRotator& InRot, FVector& X, FVector& Y, FVector& Z)"
  },
  {
    "label": "EqualEqual_RotatorRotator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "NotEqual_RotatorRotator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "Multiply_RotatorFloat()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Multiply_RotatorFloat(FRotator A, float B)"
  },
  {
    "label": "Multiply_RotatorInt()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Multiply_RotatorInt(FRotator A, int32 B)"
  },
  {
    "label": "ComposeRotators()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "ComposeRotators(FRotator A, FRotator B)"
  },
  {
    "label": "NegateRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "NegateRotator(FRotator A)"
  },
  {
    "label": "GetForwardVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetForwardVector(FRotator InRot)"
  },
  {
    "label": "GetRightVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetRightVector(FRotator InRot)"
  },
  {
    "label": "GetUpVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetUpVector(FRotator InRot)"
  },
  {
    "label": "Conv_RotatorToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_RotatorToVector(FRotator InRot)"
  },
  {
    "label": "Conv_RotatorToTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "Conv_RotatorToTransform(const FRotator& InRotator)"
  },
  {
    "label": "GetAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z)"
  },
  {
    "label": "RandomRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RandomRotator(bool bRoll = false)"
  },
  {
    "label": "RLerp()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath)"
  },
  {
    "label": "REase()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc::Type> EasingFunc, float BlendExp = 2, int32 Steps = 2)"
  },
  {
    "label": "NormalizedDeltaRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "NormalizedDeltaRotator(FRotator A, FRotator B)"
  },
  {
    "label": "ClampAxis()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ClampAxis(float Angle)"
  },
  {
    "label": "NormalizeAxis()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "NormalizeAxis(float Angle)"
  },
  {
    "label": "Conv_MatrixToTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "Conv_MatrixToTransform(const FMatrix& InMatrix)"
  },
  {
    "label": "Conv_MatrixToRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Conv_MatrixToRotator(const FMatrix& InMatrix)"
  },
  {
    "label": "Matrix_GetOrigin()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_GetOrigin(const FMatrix& InMatrix)"
  },
  {
    "label": "Matrix_Identity()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_Identity()"
  },
  {
    "label": "Multiply_MatrixMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Multiply_MatrixMatrix(const FMatrix& A, const FMatrix& B)"
  },
  {
    "label": "Add_MatrixMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Add_MatrixMatrix(const FMatrix& A, const FMatrix& B)"
  },
  {
    "label": "Multiply_MatrixFloat()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Multiply_MatrixFloat(const FMatrix& A, double B)"
  },
  {
    "label": "EqualEqual_MatrixMatrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_MatrixMatrix(const FMatrix& A, const FMatrix& B, float Tolerance = 1.e-4f)"
  },
  {
    "label": "NotEqual_MatrixMatrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_MatrixMatrix(const FMatrix& A, const FMatrix& B, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Matrix_TransformVector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Matrix_TransformVector4(const FMatrix& M, FVector4 V)"
  },
  {
    "label": "Matrix_TransformPosition()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Matrix_TransformPosition(const FMatrix& M, FVector V)"
  },
  {
    "label": "Matrix_InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_InverseTransformPosition(const FMatrix& M, FVector V)"
  },
  {
    "label": "Matrix_TransformVector()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Matrix_TransformVector(const FMatrix& M, FVector V)"
  },
  {
    "label": "Matrix_InverseTransformVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_InverseTransformVector(const FMatrix& M, FVector V)"
  },
  {
    "label": "Matrix_GetTransposed()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_GetTransposed(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetDeterminant()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Matrix_GetDeterminant(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetRotDeterminant()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Matrix_GetRotDeterminant(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetInverse()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_GetInverse(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetTransposeAdjoint()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_GetTransposeAdjoint(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetMatrixWithoutScale()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_GetMatrixWithoutScale(const FMatrix& M, float Tolerance = 1.e-8f)"
  },
  {
    "label": "Matrix_GetScaleVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_GetScaleVector(const FMatrix& M, float Tolerance = 1.e-8f)"
  },
  {
    "label": "Matrix_RemoveTranslation()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_RemoveTranslation(const FMatrix& M)"
  },
  {
    "label": "Matrix_ConcatenateTranslation()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_ConcatenateTranslation(const FMatrix& M, FVector Translation)"
  },
  {
    "label": "Matrix_ContainsNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_ContainsNaN(const FMatrix& M)"
  },
  {
    "label": "Matrix_ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_ScaleTranslation(const FMatrix& M, FVector Scale3D)"
  },
  {
    "label": "Matrix_GetMaximumAxisScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Matrix_GetMaximumAxisScale(const FMatrix& M)"
  },
  {
    "label": "Matrix_ApplyScale()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_ApplyScale(const FMatrix& M, float Scale)"
  },
  {
    "label": "Matrix_GetScaledAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_GetScaledAxis(const FMatrix& M, TEnumAsByte<EAxis::Type> Axis)"
  },
  {
    "label": "Matrix_GetScaledAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Matrix_GetScaledAxes(const FMatrix& M, FVector &X, FVector &Y, FVector &Z)"
  },
  {
    "label": "Matrix_GetUnitAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_GetUnitAxis(const FMatrix& M, TEnumAsByte<EAxis::Type> Axis)"
  },
  {
    "label": "Matrix_GetUnitAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Matrix_GetUnitAxes(const FMatrix& M, FVector &X, FVector &Y, FVector &Z)"
  },
  {
    "label": "Matrix_GetColumn()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Matrix_GetColumn(const FMatrix& M, TEnumAsByte<EMatrixColumns::Type> Column)"
  },
  {
    "label": "Matrix_GetRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Matrix_GetRotator(const FMatrix& M)"
  },
  {
    "label": "Matrix_ToQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Matrix_ToQuat(const FMatrix& M)"
  },
  {
    "label": "Matrix_GetFrustumNearPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumNearPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_GetFrustumFarPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumFarPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_GetFrustumLeftPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumLeftPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_GetFrustumRightPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumRightPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_GetFrustumTopPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumTopPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_GetFrustumBottomPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matrix_GetFrustumBottomPlane(const FMatrix& M, FPlane& OutPlane)"
  },
  {
    "label": "Matrix_Mirror()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Matrix_Mirror(const FMatrix& M, TEnumAsByte<EAxis::Type> MirrorAxis, TEnumAsByte<EAxis::Type> FlipAxis)"
  },
  {
    "label": "Quat_Identity()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Identity()"
  },
  {
    "label": "EqualEqual_QuatQuat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_QuatQuat(const FQuat& A, const FQuat& B, float Tolerance = 1.e-4f)"
  },
  {
    "label": "NotEqual_QuatQuat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_QuatQuat(const FQuat& A, const FQuat& B, float ErrorTolerance = 1.e-4f)"
  },
  {
    "label": "Add_QuatQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Add_QuatQuat(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "Subtract_QuatQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Subtract_QuatQuat(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "MakeQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "MakeQuat(float X, float Y, float Z, float W)"
  },
  {
    "label": "BreakQuat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakQuat(const FQuat& InQuat, float& X, float& Y, float& Z, float& W)"
  },
  {
    "label": "Multiply_QuatQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Multiply_QuatQuat(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "Quat_IsIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Quat_IsIdentity(const FQuat& Q, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Quat_IsNormalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Quat_IsNormalized(const FQuat& Q)"
  },
  {
    "label": "Quat_IsFinite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Quat_IsFinite(const FQuat& Q)"
  },
  {
    "label": "Quat_IsNonFinite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Quat_IsNonFinite(const FQuat& Q)"
  },
  {
    "label": "Quat_AngularDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Quat_AngularDistance(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "Quat_Euler()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_Euler(const FQuat& Q)"
  },
  {
    "label": "Quat_Exp()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Exp(const FQuat& Q)"
  },
  {
    "label": "Quat_GetAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Quat_GetAngle(const FQuat& Q)"
  },
  {
    "label": "Quat_GetAxisX()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_GetAxisX(const FQuat& Q)"
  },
  {
    "label": "Quat_GetAxisY()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_GetAxisY(const FQuat& Q)"
  },
  {
    "label": "Quat_GetAxisZ()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_GetAxisZ(const FQuat& Q)"
  },
  {
    "label": "Quat_VectorForward()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_VectorForward(const FQuat& Q)"
  },
  {
    "label": "Quat_VectorRight()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_VectorRight(const FQuat& Q)"
  },
  {
    "label": "Quat_VectorUp()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_VectorUp(const FQuat& Q)"
  },
  {
    "label": "Quat_Normalized()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Normalized(const FQuat& Q, float Tolerance = 1.e-4f)"
  },
  {
    "label": "Quat_GetRotationAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_GetRotationAxis(const FQuat& Q)"
  },
  {
    "label": "Quat_Inversed()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Inversed(const FQuat& Q)"
  },
  {
    "label": "Quat_Log()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Log(const FQuat& Q)"
  },
  {
    "label": "Quat_MakeFromEuler()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_MakeFromEuler(const FVector& Euler)"
  },
  {
    "label": "Quat_Rotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Quat_Rotator(const FQuat& Q)"
  },
  {
    "label": "Conv_RotatorToQuaternion()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Conv_RotatorToQuaternion(FRotator InRot)"
  },
  {
    "label": "Quat_Size()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Quat_Size(const FQuat& Q)"
  },
  {
    "label": "Quat_SizeSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Quat_SizeSquared(const FQuat& Q)"
  },
  {
    "label": "Quat_RotateVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_RotateVector(const FQuat& Q, const FVector& V)"
  },
  {
    "label": "Quat_UnrotateVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Quat_UnrotateVector(const FQuat& Q, const FVector& V)"
  },
  {
    "label": "Quat_Slerp()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_Slerp(const FQuat& A, const FQuat& B, double Alpha)"
  },
  {
    "label": "Quat_FindBetweenVectors()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_FindBetweenVectors(FVector Start, FVector End)"
  },
  {
    "label": "Quat_FindBetweenNormals()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "Quat_FindBetweenNormals(FVector StartNormal, FVector EndNormal)"
  },
  {
    "label": "LinearColor_White()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_White()"
  },
  {
    "label": "LinearColor_Gray()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Gray()"
  },
  {
    "label": "LinearColor_Black()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Black()"
  },
  {
    "label": "LinearColor_Red()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Red()"
  },
  {
    "label": "LinearColor_Green()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Green()"
  },
  {
    "label": "LinearColor_Blue()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Blue()"
  },
  {
    "label": "LinearColor_Yellow()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Yellow()"
  },
  {
    "label": "LinearColor_Transparent()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Transparent()"
  },
  {
    "label": "MakeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "MakeColor(float R, float G, float B, float A = 1.0f)"
  },
  {
    "label": "BreakColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A)"
  },
  {
    "label": "Conv_FloatToLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Conv_FloatToLinearColor(float InFloat)"
  },
  {
    "label": "Conv_DoubleToLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Conv_DoubleToLinearColor(double InDouble)"
  },
  {
    "label": "HSVToRGB()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "HSVToRGB(float H, float S, float V, float A = 1.0f)"
  },
  {
    "label": "HSVToRGB_Vector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB)"
  },
  {
    "label": "HSVToRGBLinear()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "HSVToRGBLinear(FLinearColor HSV)"
  },
  {
    "label": "RGBToHSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A)"
  },
  {
    "label": "RGBToHSV_Vector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV)"
  },
  {
    "label": "RGBLinearToHSV()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "RGBLinearToHSV(FLinearColor RGB)"
  },
  {
    "label": "Conv_LinearColorToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_LinearColorToVector(FLinearColor InLinearColor)"
  },
  {
    "label": "LinearColor_ToRGBE()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "LinearColor_ToRGBE(FLinearColor InLinearColor)"
  },
  {
    "label": "Conv_LinearColorToColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB = true)"
  },
  {
    "label": "LinearColor_Quantize()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "LinearColor_Quantize(FLinearColor InColor)"
  },
  {
    "label": "LinearColor_QuantizeRound()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "LinearColor_QuantizeRound(FLinearColor InColor)"
  },
  {
    "label": "LinearColor_Desaturated()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_Desaturated(FLinearColor InColor, float InDesaturation)"
  },
  {
    "label": "LinearColor_Distance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearColor_Distance(FLinearColor C1, FLinearColor C2)"
  },
  {
    "label": "LinearColor_ToNewOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity)"
  },
  {
    "label": "LinearColor_GetLuminance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearColor_GetLuminance(FLinearColor InColor)"
  },
  {
    "label": "LinearColor_GetMax()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearColor_GetMax(FLinearColor InColor)"
  },
  {
    "label": "LinearColor_GetMin()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearColor_GetMin(FLinearColor InColor)"
  },
  {
    "label": "CInterpTo()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "LinearColorLerp()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha)"
  },
  {
    "label": "LinearColorLerpUsingHSV()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha)"
  },
  {
    "label": "LinearColor_IsNearEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance = 1.e-4f)"
  },
  {
    "label": "EqualEqual_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "NotEqual_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "Add_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Add_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "Subtract_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "Multiply_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "Multiply_LinearColorFloat()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Multiply_LinearColorFloat(FLinearColor A, float B)"
  },
  {
    "label": "Divide_LinearColorLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B)"
  },
  {
    "label": "ToHex_LinearColor()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToHex_LinearColor(FLinearColor InColor)"
  },
  {
    "label": "MakePlaneFromPointAndNormal()",
    "kind": "Method",
    "detail": "Function (FPlane)",
    "insertText": "MakePlaneFromPointAndNormal(FVector Point, FVector Normal)"
  },
  {
    "label": "MakeDateTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "MakeDateTime(int32 Year, int32 Month, int32 Day, int32 Hour = 0, int32 Minute = 0, int32 Second = 0, int32 Millisecond = 0)"
  },
  {
    "label": "BreakDateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakDateTime(FDateTime InDateTime, int32& Year, int32& Month, int32& Day, int32& Hour, int32& Minute, int32& Second, int32& Millisecond)"
  },
  {
    "label": "Add_DateTimeTimespan()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "Add_DateTimeTimespan( FDateTime A, FTimespan B )"
  },
  {
    "label": "Subtract_DateTimeTimespan()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "Subtract_DateTimeTimespan(FDateTime A, FTimespan B)"
  },
  {
    "label": "Add_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "Add_DateTimeDateTime(FDateTime A, FDateTime B)"
  },
  {
    "label": "Subtract_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "Subtract_DateTimeDateTime(FDateTime A, FDateTime B)"
  },
  {
    "label": "EqualEqual_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "NotEqual_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "Greater_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "GreaterEqual_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "Less_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "LessEqual_DateTimeDateTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_DateTimeDateTime( FDateTime A, FDateTime B )"
  },
  {
    "label": "GetDate()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetDate( FDateTime A )"
  },
  {
    "label": "GetDay()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDay( FDateTime A )"
  },
  {
    "label": "GetDayOfYear()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDayOfYear( FDateTime A )"
  },
  {
    "label": "GetHour()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHour( FDateTime A )"
  },
  {
    "label": "GetHour12()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHour12( FDateTime A )"
  },
  {
    "label": "GetMillisecond()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMillisecond( FDateTime A )"
  },
  {
    "label": "GetMinute()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinute( FDateTime A )"
  },
  {
    "label": "GetMonth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMonth( FDateTime A )"
  },
  {
    "label": "GetSecond()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSecond( FDateTime A )"
  },
  {
    "label": "GetTimeOfDay()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetTimeOfDay( FDateTime A )"
  },
  {
    "label": "GetYear()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetYear( FDateTime A )"
  },
  {
    "label": "IsAfternoon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAfternoon( FDateTime A )"
  },
  {
    "label": "IsMorning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMorning( FDateTime A )"
  },
  {
    "label": "DaysInMonth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DaysInMonth( int32 Year, int32 Month )"
  },
  {
    "label": "DaysInYear()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DaysInYear( int32 Year )"
  },
  {
    "label": "IsLeapYear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLeapYear( int32 Year )"
  },
  {
    "label": "DateTimeMaxValue()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "DateTimeMaxValue( )"
  },
  {
    "label": "DateTimeMinValue()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "DateTimeMinValue( )"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "Now( )"
  },
  {
    "label": "Today()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "Today( )"
  },
  {
    "label": "UtcNow()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "UtcNow( )"
  },
  {
    "label": "DateTimeFromIsoString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DateTimeFromIsoString(FString IsoString, FDateTime& Result)"
  },
  {
    "label": "DateTimeFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DateTimeFromString(FString DateTimeString, FDateTime& Result)"
  },
  {
    "label": "ToUnixTimestamp()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ToUnixTimestamp(const FDateTime& Time)"
  },
  {
    "label": "ToUnixTimestampDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToUnixTimestampDouble(const FDateTime& Time)"
  },
  {
    "label": "FromUnixTimestamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "FromUnixTimestamp(const int64 UnixTime)"
  },
  {
    "label": "TimespanMaxValue()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "TimespanMaxValue( )"
  },
  {
    "label": "TimespanMinValue()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "TimespanMinValue( )"
  },
  {
    "label": "TimespanZeroValue()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "TimespanZeroValue( )"
  },
  {
    "label": "MakeTimespan()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "MakeTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds)"
  },
  {
    "label": "MakeTimespan2()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "MakeTimespan2(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano)"
  },
  {
    "label": "BreakTimespan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakTimespan(FTimespan InTimespan, int32& Days, int32& Hours, int32& Minutes, int32& Seconds, int32& Milliseconds)"
  },
  {
    "label": "BreakTimespan2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakTimespan2(FTimespan InTimespan, int32& Days, int32& Hours, int32& Minutes, int32& Seconds, int32& FractionNano)"
  },
  {
    "label": "Add_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "Add_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "Subtract_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "Subtract_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "Multiply_TimespanFloat()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "Multiply_TimespanFloat( FTimespan A, float Scalar )"
  },
  {
    "label": "Divide_TimespanFloat()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "Divide_TimespanFloat( FTimespan A, float Scalar )"
  },
  {
    "label": "EqualEqual_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "NotEqual_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "Greater_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Greater_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "GreaterEqual_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GreaterEqual_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "Less_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "LessEqual_TimespanTimespan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LessEqual_TimespanTimespan( FTimespan A, FTimespan B )"
  },
  {
    "label": "GetDays()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDays( FTimespan A )"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetDuration( FTimespan A )"
  },
  {
    "label": "GetHours()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHours( FTimespan A )"
  },
  {
    "label": "GetMilliseconds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMilliseconds( FTimespan A )"
  },
  {
    "label": "GetMinutes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinutes( FTimespan A )"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSeconds( FTimespan A )"
  },
  {
    "label": "GetTotalDays()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalDays( FTimespan A )"
  },
  {
    "label": "GetTotalHours()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalHours( FTimespan A )"
  },
  {
    "label": "GetTotalMilliseconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalMilliseconds( FTimespan A )"
  },
  {
    "label": "GetTotalMinutes()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalMinutes( FTimespan A )"
  },
  {
    "label": "GetTotalSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalSeconds( FTimespan A )"
  },
  {
    "label": "FromDays()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "FromDays( float Days )"
  },
  {
    "label": "FromHours()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "FromHours( float Hours )"
  },
  {
    "label": "FromMilliseconds()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "FromMilliseconds( float Milliseconds )"
  },
  {
    "label": "FromMinutes()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "FromMinutes( float Minutes )"
  },
  {
    "label": "FromSeconds()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "FromSeconds( float Seconds )"
  },
  {
    "label": "TimespanRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TimespanRatio( FTimespan A, FTimespan B )"
  },
  {
    "label": "TimespanFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimespanFromString(FString TimespanString, FTimespan& Result)"
  },
  {
    "label": "MakeQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame = 0.f)"
  },
  {
    "label": "BreakQualifiedFrameTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakQualifiedFrameTime(const FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame)"
  },
  {
    "label": "MakeFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "MakeFrameRate(int32 Numerator, int32 Denominator = 1)"
  },
  {
    "label": "BreakFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakFrameRate(const FFrameRate& InFrameRate, int32& Numerator, int32& Denominator)"
  },
  {
    "label": "Conv_ByteToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_ByteToFloat(uint8 InByte)"
  },
  {
    "label": "Conv_ByteToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_ByteToDouble(uint8 InByte)"
  },
  {
    "label": "Conv_IntToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_IntToFloat(int32 InInt)"
  },
  {
    "label": "Conv_IntToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_IntToDouble(int32 InInt)"
  },
  {
    "label": "Conv_IntToInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Conv_IntToInt64(int32 InInt)"
  },
  {
    "label": "Conv_IntToByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Conv_IntToByte(int32 InInt)"
  },
  {
    "label": "Conv_Int64ToInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Conv_Int64ToInt(int64 InInt)"
  },
  {
    "label": "Conv_DoubleToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_DoubleToFloat(double InDouble)"
  },
  {
    "label": "Conv_FloatToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_FloatToDouble(float InFloat)"
  },
  {
    "label": "Conv_Int64ToByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Conv_Int64ToByte(int64 InInt)"
  },
  {
    "label": "Conv_DoubleToInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Conv_DoubleToInt64(double InDouble)"
  },
  {
    "label": "Conv_Int64ToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_Int64ToDouble(int64 InInt)"
  },
  {
    "label": "Conv_IntToIntVector()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "Conv_IntToIntVector(int32 InInt)"
  },
  {
    "label": "Conv_IntToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_IntToVector(int32 InInt)"
  },
  {
    "label": "Conv_IntToBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Conv_IntToBool(int32 InInt)"
  },
  {
    "label": "Conv_BoolToInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Conv_BoolToInt(bool InBool)"
  },
  {
    "label": "Conv_BoolToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_BoolToFloat(bool InBool)"
  },
  {
    "label": "Conv_BoolToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_BoolToDouble(bool InBool)"
  },
  {
    "label": "Conv_BoolToByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Conv_BoolToByte(bool InBool)"
  },
  {
    "label": "Conv_ByteToInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Conv_ByteToInt(uint8 InByte)"
  },
  {
    "label": "Conv_ByteToInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Conv_ByteToInt64(uint8 InByte)"
  },
  {
    "label": "Conv_ColorToLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Conv_ColorToLinearColor(FColor InColor)"
  },
  {
    "label": "Conv_IntVectorToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_IntVectorToVector(const FIntVector& InIntVector)"
  },
  {
    "label": "Conv_FloatToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_FloatToVector(float InFloat)"
  },
  {
    "label": "Conv_DoubleToVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Conv_DoubleToVector(double InDouble)"
  },
  {
    "label": "Conv_DoubleToVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Conv_DoubleToVector2D(double InDouble)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "MakeBox(FVector Min, FVector Max)"
  },
  {
    "label": "MakeBoxWithOrigin()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "MakeBoxWithOrigin(const FVector& Origin, const FVector& Extent)"
  },
  {
    "label": "Box_IsInside()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Box_IsInside(const FBox& InnerTest, const FBox& OuterTest)"
  },
  {
    "label": "Box_IsInsideOrOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Box_IsInsideOrOn(const FBox& InnerTest, const FBox& OuterTest)"
  },
  {
    "label": "Box_IsPointInside()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Box_IsPointInside(const FBox& Box, const FVector& Point)"
  },
  {
    "label": "Box_Intersects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Box_Intersects(const FBox& A, const FBox& B)"
  },
  {
    "label": "Box_ExpandBy()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "Box_ExpandBy(const FBox& Box, const FVector& Negative, const FVector& Positive)"
  },
  {
    "label": "Box_Overlap()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "Box_Overlap(const FBox& A, const FBox& B)"
  },
  {
    "label": "Box_GetClosestPointTo()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Box_GetClosestPointTo(const FBox& Box, const FVector& Point)"
  },
  {
    "label": "MakeBox2D()",
    "kind": "Method",
    "detail": "Function (FBox2D)",
    "insertText": "MakeBox2D(FVector2D Min, FVector2D Max)"
  },
  {
    "label": "MakeBoxSphereBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "MakeBoxSphereBounds(FVector Origin, FVector BoxExtent, float SphereRadius)"
  },
  {
    "label": "BreakBoxSphereBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakBoxSphereBounds(const FBoxSphereBounds& InBoxSphereBounds, FVector& Origin, FVector& BoxExtent, float& SphereRadius)"
  },
  {
    "label": "MakeRandomStream()",
    "kind": "Method",
    "detail": "Function (FRandomStream)",
    "insertText": "MakeRandomStream(int32 InitialSeed)"
  },
  {
    "label": "BreakRandomStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakRandomStream(const FRandomStream& InRandomStream, int32& InitialSeed)"
  },
  {
    "label": "SelectString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SelectString(const FString& A, const FString& B, bool bPickA)"
  },
  {
    "label": "SelectText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "SelectText(const FText A, const FText B, bool bPickA)"
  },
  {
    "label": "SelectName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SelectName(const FName A, const FName B, bool bPickA)"
  },
  {
    "label": "SelectInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SelectInt(int32 A, int32 B, bool bPickA)"
  },
  {
    "label": "SelectFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "SelectFloat(double A, double B, bool bPickA)"
  },
  {
    "label": "SelectVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "SelectVector(FVector A, FVector B, bool bPickA)"
  },
  {
    "label": "SelectRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "SelectRotator(FRotator A, FRotator B, bool bPickA)"
  },
  {
    "label": "SelectColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "SelectColor(FLinearColor A, FLinearColor B, bool bPickA)"
  },
  {
    "label": "SelectTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "SelectTransform(const FTransform& A, const FTransform& B, bool bPickA)"
  },
  {
    "label": "EqualEqual_ObjectObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_ObjectObject(class UObject* A, class UObject* B)"
  },
  {
    "label": "NotEqual_ObjectObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_ObjectObject(class UObject* A, class UObject* B)"
  },
  {
    "label": "EqualEqual_ClassClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_ClassClass(class UClass* A, class UClass* B)"
  },
  {
    "label": "NotEqual_ClassClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_ClassClass(class UClass* A, class UClass* B)"
  },
  {
    "label": "ClassIsChildOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClassIsChildOf(TSubclassOf<class UObject> TestClass, TSubclassOf<class UObject> ParentClass)"
  },
  {
    "label": "EqualEqual_NameName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_NameName(FName A, FName B)"
  },
  {
    "label": "NotEqual_NameName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_NameName(FName A, FName B)"
  },
  {
    "label": "BreakTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakTransform(const FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale)"
  },
  {
    "label": "EqualEqual_TransformTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_TransformTransform(const FTransform& A, const FTransform& B)"
  },
  {
    "label": "NearlyEqual_TransformTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NearlyEqual_TransformTransform(const FTransform& A, const FTransform& B, float LocationTolerance = 1.e-4f, float RotationTolerance = 1.e-4f, float Scale3DTolerance = 1.e-4f)"
  },
  {
    "label": "ComposeTransforms()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ComposeTransforms(const FTransform& A, const FTransform& B)"
  },
  {
    "label": "TransformLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TransformLocation(const FTransform& T, FVector Location)"
  },
  {
    "label": "TransformDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TransformDirection(const FTransform& T, FVector Direction)"
  },
  {
    "label": "TransformRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "TransformRotation(const FTransform& T, FRotator Rotation)"
  },
  {
    "label": "InverseTransformLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "InverseTransformLocation(const FTransform& T, FVector Location)"
  },
  {
    "label": "InverseTransformDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "InverseTransformDirection(const FTransform& T, FVector Direction)"
  },
  {
    "label": "InverseTransformRotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "InverseTransformRotation(const FTransform& T, FRotator Rotation)"
  },
  {
    "label": "MakeRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeRelativeTransform(const FTransform& A, const FTransform& RelativeTo)"
  },
  {
    "label": "InvertTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "InvertTransform(const FTransform& T)"
  },
  {
    "label": "TLerp()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "TLerp(const FTransform& A, const FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode::Type> InterpMode = ELerpInterpolationMode::QuatInterp)"
  },
  {
    "label": "TEase()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "TEase(const FTransform& A, const FTransform& B, float Alpha, TEnumAsByte<EEasingFunc::Type> EasingFunc, float BlendExp = 2, int32 Steps = 2)"
  },
  {
    "label": "TInterpTo()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "TInterpTo(const FTransform& Current, const FTransform& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "Transform_Determinant()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Transform_Determinant(const FTransform& Transform)"
  },
  {
    "label": "Conv_TransformToMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "Conv_TransformToMatrix(const FTransform& Transform)"
  },
  {
    "label": "FInterpTo()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed)"
  },
  {
    "label": "FInterpTo_Constant()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed)"
  },
  {
    "label": "RInterpTo()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "RInterpTo_Constant()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "RandomIntegerFromStream()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RandomIntegerFromStream(const FRandomStream& Stream, int32 Max)"
  },
  {
    "label": "RandomIntegerFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomIntegerFromStream(Stream, Max)"
  },
  {
    "label": "RandomIntegerInRangeFromStream()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RandomIntegerInRangeFromStream(const FRandomStream& Stream, int32 Min, int32 Max)"
  },
  {
    "label": "RandomIntegerInRangeFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomIntegerInRangeFromStream(Stream, Min, Max)"
  },
  {
    "label": "RandomBoolFromStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RandomBoolFromStream(const FRandomStream& Stream)"
  },
  {
    "label": "RandomFloatFromStream()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RandomFloatFromStream(const FRandomStream& Stream)"
  },
  {
    "label": "RandomFloatInRangeFromStream()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RandomFloatInRangeFromStream(const FRandomStream& Stream, float Min, float Max)"
  },
  {
    "label": "RandomFloatInRangeFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomFloatInRangeFromStream(Stream, Min, Max)"
  },
  {
    "label": "RandomUnitVectorFromStream()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVectorFromStream(const FRandomStream& Stream)"
  },
  {
    "label": "RandomPointInBoundingBoxFromStream()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomPointInBoundingBoxFromStream(const FRandomStream& Stream, const FVector Center, const FVector HalfSize)"
  },
  {
    "label": "RandomPointInBoundingBoxFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomPointInBoundingBoxFromStream(Stream, Center, HalfSize)"
  },
  {
    "label": "RandomPointInBoundingBoxFromStream_Box()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomPointInBoundingBoxFromStream_Box(const FRandomStream& Stream, const FBox Box)"
  },
  {
    "label": "RandomPointInBoundingBoxFromStream_Box()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomPointInBoundingBoxFromStream_Box(Stream, Box)"
  },
  {
    "label": "RandomRotatorFromStream()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RandomRotatorFromStream(const FRandomStream& Stream, bool bRoll)"
  },
  {
    "label": "RandomRotatorFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomRotatorFromStream(Stream, bRoll)"
  },
  {
    "label": "ResetRandomStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRandomStream(const FRandomStream& Stream)"
  },
  {
    "label": "RandomUnitVectorInConeInRadiansFromStream()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVectorInConeInRadiansFromStream(const FRandomStream& Stream, const FVector& ConeDir, float ConeHalfAngleInRadians)"
  },
  {
    "label": "RandomUnitVectorInConeInRadiansFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomUnitVectorInConeInRadiansFromStream(Stream, ConeDir, ConeHalfAngleInRadians)"
  },
  {
    "label": "RandomUnitVectorInConeInDegreesFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomUnitVectorInConeInDegreesFromStream(Stream, ConeDir, ConeHalfAngleInDegrees)"
  },
  {
    "label": "RandomUnitVectorInEllipticalConeInRadiansFromStream()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandomUnitVectorInEllipticalConeInRadiansFromStream(const FRandomStream& Stream, const FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians)"
  },
  {
    "label": "RandomUnitVectorInEllipticalConeInRadiansFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomUnitVectorInEllipticalConeInRadiansFromStream(Stream, ConeDir, MaxYawInRadians, MaxPitchInRadians)"
  },
  {
    "label": "RandomUnitVectorInEllipticalConeInDegreesFromStream()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RandomUnitVectorInEllipticalConeInDegreesFromStream(Stream, ConeDir, MaxYawInDegrees, MaxPitchInDegrees)"
  },
  {
    "label": "PerlinNoise1D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PerlinNoise1D(const float Value)"
  },
  {
    "label": "MinAreaRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinAreaRectangle(UObject* WorldContextObject, const TArray<FVector>& InPoints, const FVector& SampleSurfaceNormal, FVector& OutRectCenter,\n\t                             FRotator& OutRectRotation, float& OutRectLengthX, float& OutRectLengthY, bool bDebugDraw = false)"
  },
  {
    "label": "PointsAreCoplanar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointsAreCoplanar(const TArray<FVector>& Points, float Tolerance = 0.1f)"
  },
  {
    "label": "IsPointInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent)"
  },
  {
    "label": "IsPointInBox_Box()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInBox_Box(FVector Point, FBox Box)"
  },
  {
    "label": "GetBoxVolume()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetBoxVolume(const FBox& InBox)"
  },
  {
    "label": "GetBoxSize()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBoxSize(const FBox& InBox)"
  },
  {
    "label": "GetBoxCenter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBoxCenter(const FBox& InBox)"
  },
  {
    "label": "IsPointInBoxWithTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInBoxWithTransform(FVector Point, const FTransform& BoxWorldTransform, FVector BoxExtent)"
  },
  {
    "label": "IsPointInBoxWithTransform_Box()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInBoxWithTransform_Box(FVector Point, const FTransform& BoxWorldTransform, FBox BoxExtent)"
  },
  {
    "label": "GetSlopeDegreeAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSlopeDegreeAngles(const FVector& MyRightYAxis, const FVector& FloorNormal, const FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle)"
  },
  {
    "label": "LinePlaneIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LinePlaneIntersection(const FVector& LineStart, const FVector& LineEnd, const FPlane& APlane, float& T, FVector& Intersection)"
  },
  {
    "label": "LinePlaneIntersection_OriginNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LinePlaneIntersection_OriginNormal(const FVector& LineStart, const FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection)"
  },
  {
    "label": "WeightedMovingAverage_Float()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight)"
  },
  {
    "label": "WeightedMovingAverage_FVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight)"
  },
  {
    "label": "WeightedMovingAverage_FRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight)"
  },
  {
    "label": "DynamicWeightedMovingAverage_Float()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)"
  },
  {
    "label": "DynamicWeightedMovingAverage_FVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)"
  },
  {
    "label": "DynamicWeightedMovingAverage_FRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight)"
  },
  {
    "label": "Convert1DTo2D()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Convert1DTo2D(int32 Index1D, int32 XSize)"
  },
  {
    "label": "Convert1DTo3D()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "Convert1DTo3D(int32 Index1D, int32 XSize, int32 YSize)"
  },
  {
    "label": "Convert2DTo1D()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Convert2DTo1D(const FIntPoint& Index2D, int32 XSize)"
  },
  {
    "label": "Convert3DTo1D()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Convert3DTo1D(const FIntVector& Index3D, int32 XSize, int32 YSize)"
  },
  {
    "label": "FVector_NetQuantize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector_NetQuantize(X, Y, Z)"
  },
  {
    "label": "FVector_NetQuantize10()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector_NetQuantize10(X, Y, Z)"
  },
  {
    "label": "FVector_NetQuantize100()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector_NetQuantize100(X, Y, Z)"
  },
  {
    "label": "FVector_NetQuantizeNormal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector_NetQuantizeNormal(X, Y, Z)"
  },
  {
    "label": "ReportError_Divide_ByteByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_ByteByte()"
  },
  {
    "label": "ReportError_Percent_ByteByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_ByteByte()"
  },
  {
    "label": "ReportError_Divide_IntInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntInt()"
  },
  {
    "label": "ReportError_Divide_FloatFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_FloatFloat()"
  },
  {
    "label": "ReportError_Divide_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_DoubleDouble()"
  },
  {
    "label": "ReportError_Divide_Int64Int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Int64Int64()"
  },
  {
    "label": "ReportError_Percent_IntInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_IntInt()"
  },
  {
    "label": "ReportError_Percent_Int64Int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_Int64Int64()"
  },
  {
    "label": "ReportError_Sqrt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Sqrt()"
  },
  {
    "label": "ReportError_Divide_VectorFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorFloat()"
  },
  {
    "label": "ReportError_Divide_VectorInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorInt()"
  },
  {
    "label": "ReportError_Divide_VectorVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorVector()"
  },
  {
    "label": "ReportError_ProjectVectorOnToVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_ProjectVectorOnToVector()"
  },
  {
    "label": "ReportError_Divide_IntPointOnInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntPointOnInt()"
  },
  {
    "label": "ReportError_Divide_IntPointOnIntPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntPointOnIntPoint()"
  },
  {
    "label": "ReportError_Divide_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Vector2DFloat()"
  },
  {
    "label": "ReportError_Divide_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Vector2DVector2D()"
  },
  {
    "label": "ReportError_DaysInMonth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_DaysInMonth()"
  }
]