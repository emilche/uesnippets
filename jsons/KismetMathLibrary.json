[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FFloatSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatSpringState"
  },
  {
    "label": "FVectorSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorSpringState"
  },
  {
    "label": "FQuaternionSpringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuaternionSpringState"
  },
  {
    "label": "FRuntimeFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimeFloatCurve"
  },
  {
    "label": "UKismetMathLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UKismetMathLibrary"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "KISMET_MATH_INLINE_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Script . h \" # include \" UObject / ObjectMacros . h \" # include \" Math / RandomStream . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / UnrealType . h \" # include \" UObject / Stack . h \" # include \" UObject / ScriptMacros . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" Engine / NetSerialization . h \" # include \" KismetMathLibrary . generated . h \" # define)",
    "insertText": "KISMET_MATH_INLINE_ENABLED(!UE_BUILD_DEBUG) UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Linear,Step,SinusoidalIn,SinusoidalOut,SinusoidalInOut,EaseIn,EaseOut,EaseInOut,ExpoIn,ExpoOut,ExpoInOut,CircularIn,CircularOut,CircularInOut,} ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { First,Second,Third,Fourth } ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FFloatSpringState()",
    "kind": "Method",
    "detail": "Function (float Velocity ; bool bPrevTargetValid ;)",
    "insertText": "FFloatSpringState() : PrevTarget(0.f) , Velocity(0.f) , bPrevTargetValid(false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FVectorSpringState()",
    "kind": "Method",
    "detail": "Function (FVector Velocity ; bool bPrevTargetValid ;)",
    "insertText": "FVectorSpringState() : PrevTarget(FVector::ZeroVector) , Velocity(FVector::ZeroVector) , bPrevTargetValid(false)"
  },
  {
    "label": "FQuaternionSpringState()",
    "kind": "Method",
    "detail": "Function (FVector AngularVelocity ; bool bPrevTargetValid ;)",
    "insertText": "FQuaternionSpringState() : PrevTarget(FQuat::Identity) , AngularVelocity(FVector::ZeroVector) , bPrevTargetValid(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (PrevTarget = FQuat::Identity ; AngularVelocity = FVector::ZeroVector ; bPrevTargetValid = false ; } } ; struct FRuntimeFloatCurve ;)",
    "insertText": "UCLASS(meta=(BlueprintThreadSafe, ScriptName = \"MathLibrary\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UFUNCTION(BlueprintPure, Category=\"Math|Random\", meta=(NotBlueprintThreadSafe)) static ENGINE_API bool RandomBool()"
  },
  {
    "label": "GenericPercent_FloatFloat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GenericPercent_FloatFloat(double A, double B)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FUNCTION(execPercent_FloatFloat)"
  },
  {
    "label": "P_GET_PROPERTY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P_GET_PROPERTY(FDoubleProperty, A)"
  },
  {
    "label": "P_GET_PROPERTY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P_GET_PROPERTY(FDoubleProperty, B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (P_FINISH ;)",
    "insertText": "if(B == 0.f)"
  },
  {
    "label": "KismetExecutionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KismetExecutionMessage(*FString::Printf(TEXT(\"Modulo by zero detected: %f %% 0\\n%s\"), A, *Stack.GetStackTrace()), ELogVerbosity::Warning)"
  },
  {
    "label": "BreakVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakVector((FVector)InVec, X, Y, Z)"
  },
  {
    "label": "ReportError_Divide_ByteByte()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ReportError_Divide_ByteByte()"
  },
  {
    "label": "ReportError_Percent_ByteByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_ByteByte()"
  },
  {
    "label": "ReportError_Divide_IntInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntInt()"
  },
  {
    "label": "ReportError_Divide_FloatFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_FloatFloat()"
  },
  {
    "label": "ReportError_Divide_DoubleDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_DoubleDouble()"
  },
  {
    "label": "ReportError_Divide_Int64Int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Int64Int64()"
  },
  {
    "label": "ReportError_Percent_IntInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_IntInt()"
  },
  {
    "label": "ReportError_Percent_Int64Int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Percent_Int64Int64()"
  },
  {
    "label": "ReportError_Sqrt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Sqrt()"
  },
  {
    "label": "ReportError_Divide_VectorFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorFloat()"
  },
  {
    "label": "ReportError_Divide_VectorInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorInt()"
  },
  {
    "label": "ReportError_Divide_VectorVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_VectorVector()"
  },
  {
    "label": "ReportError_ProjectVectorOnToVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_ProjectVectorOnToVector()"
  },
  {
    "label": "ReportError_Divide_IntPointOnInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntPointOnInt()"
  },
  {
    "label": "ReportError_Divide_IntPointOnIntPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_IntPointOnIntPoint()"
  },
  {
    "label": "ReportError_Divide_Vector2DFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Vector2DFloat()"
  },
  {
    "label": "ReportError_Divide_Vector2DVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_Divide_Vector2DVector2D()"
  },
  {
    "label": "ReportError_DaysInMonth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError_DaysInMonth()"
  }
]