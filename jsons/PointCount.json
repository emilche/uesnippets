[
  {
    "label": "pointCount()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_COUNT_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_COUNT_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include \" PointDataGrid . h \" # include \" PointMask . h \" # include \" IndexFilter . h \" # include<tbb / parallel_reduce . h> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { template<PointDataTreeT,FilterT = NullFilter> Index64)",
    "insertText": "pointCount(const PointDataTreeT& tree, const FilterT& filter = NullFilter(), const bool inCoreOnly = false, const bool threaded = true)"
  },
  {
    "label": "pointOffsets()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT,FilterT = NullFilter> Index64)",
    "insertText": "pointOffsets(std::vector<Index64>& pointOffsets, const PointDataTreeT& tree, const FilterT& filter = NullFilter(), const bool inCoreOnly = false, const bool threaded = true)"
  },
  {
    "label": "pointCountGrid()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,GridT = PointDataGridT::template ValueConverter<Int32>::Type,FilterT = NullFilter> GridT::Ptr)",
    "insertText": "pointCountGrid(const PointDataGridT& grid, const FilterT& filter = NullFilter())"
  },
  {
    "label": "pointCountGrid()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,GridT = PointDataGridT::template ValueConverter<Int32>::Type,FilterT = NullFilter> GridT::Ptr)",
    "insertText": "pointCountGrid(const PointDataGridT& grid, const openvdb::math::Transform& transform, const FilterT& filter = NullFilter())"
  },
  {
    "label": "pointCount()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT,FilterT> Index64)",
    "insertText": "pointCount(const PointDataTreeT& tree, const FilterT& filter, const bool inCoreOnly, const bool threaded)"
  },
  {
    "label": "inCoreOnly()",
    "kind": "Method",
    "detail": "Function (Index64)",
    "insertText": "inCoreOnly(const LeafRangeT& range, Index64 sum)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (auto state = filter .)",
    "insertText": "state(leaf)"
  },
  {
    "label": "pointCount()",
    "kind": "Method",
    "detail": "Function (sum + = leaf .)",
    "insertText": "pointCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(state != index::NONE)"
  },
  {
    "label": "iterCount()",
    "kind": "Method",
    "detail": "Function (sum + =)",
    "insertText": "iterCount(leaf.beginIndexAll(filter))"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (} } return sum ; } ; LeafManagerT)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "countLambda()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "countLambda(leafManager.leafRange(), Index64(0))"
  },
  {
    "label": "pointOffsets()",
    "kind": "Method",
    "detail": "Function (} } template<PointDataTreeT,FilterT> Index64)",
    "insertText": "pointOffsets(std::vector<Index64>& pointOffsets, const PointDataTreeT& tree, const FilterT& filter, const bool inCoreOnly, const bool threaded)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (using LeafT = PointDataTreeT::LeafNodeType ; using LeafManagerT = tree::LeafManager<const PointDataTreeT> ; pointOffsets .)",
    "insertText": "assign(tree.leafCount(), Index64(0))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&pointOffsets, &filter, &inCoreOnly](const LeafT& leaf, size_t pos) { if (inCoreOnly && leaf.buffer().isOutOfCore()) return; auto state = filter.state(leaf); if (state == index::ALL) { pointOffsets[pos] = leaf.pointCount(); } else if (state != index::NONE) { pointOffsets[pos] = iterCount(leaf.beginIndexAll(filter)); } }, threaded)"
  },
  {
    "label": "pointOffset()",
    "kind": "Method",
    "detail": "Function (Index64)",
    "insertText": "pointOffset(pointOffsets[0])"
  },
  {
    "label": "pointCountGrid()",
    "kind": "Method",
    "detail": "Function (pointOffset + = pointOffsets [ n ] ; pointOffsets [ n ] = pointOffset ; } return pointOffset ; } template<PointDataGridT,GridT,FilterT> GridT::Ptr)",
    "insertText": "pointCountGrid(const PointDataGridT& points, const FilterT& filter)"
  },
  {
    "label": "NonConstGridType()",
    "kind": "Method",
    "detail": "Function (using AdapterT = TreeAdapter<PointDataGridT::TreeType> ; auto& nonConstPoints = const_cast<)",
    "insertText": "NonConstGridType(points)"
  },
  {
    "label": "pointCountGrid()",
    "kind": "Method",
    "detail": "Function (} template<PointDataGridT,GridT,FilterT> GridT::Ptr)",
    "insertText": "pointCountGrid(const PointDataGridT& points, const openvdb::math::Transform& transform, const FilterT& filter)"
  },
  {
    "label": "GridT()",
    "kind": "Method",
    "detail": "Function (NullDeformer deformer ; return point_mask_internal::convertPointsToScalar<)",
    "insertText": "GridT(nonConstPoints, transform, filter, deformer)"
  }
]