[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetaPathWayPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetaPathWayPoint"
  },
  {
    "label": "FMetaNavMeshPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetaNavMeshPath"
  },
  {
    "label": "FMetaPathWayPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" NavMesh / RecastNavMesh . h \" class AController ; class UCanvas ; struct FVisualLogEntry ; enum class EMetaPathUpdateReason : uint8 { PathFinished,MoveTick,} ; struct FMetaPathWayPoint : public FVector { uint32 UserFlags ;)",
    "insertText": "FMetaPathWayPoint() : FVector() , UserFlags(0)"
  },
  {
    "label": "FMetaPathWayPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMetaPathWayPoint(const FVector& Location, const uint32 InUserFlags = 0) : FVector(Location) , UserFlags(InUserFlags)"
  },
  {
    "label": "FMetaNavMeshPath()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMetaNavMeshPath : public FNavMeshPath { typedef FNavMeshPath Super ; const FNavPathType Type ;)",
    "insertText": "FMetaNavMeshPath()"
  },
  {
    "label": "FMetaNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaNavMeshPath(const TArray<FMetaPathWayPoint>& InWaypoints, const ANavigationData& NavData)"
  },
  {
    "label": "FMetaNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaNavMeshPath(const TArray<FMetaPathWayPoint>& InWaypoints, const AController& Owner)"
  },
  {
    "label": "FMetaNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaNavMeshPath(const TArray<FVector>& InWaypoints, const ANavigationData& NavData)"
  },
  {
    "label": "FMetaNavMeshPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaNavMeshPath(const TArray<FVector>& InWaypoints, const AController& Owner)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FVector& AgentLocation)"
  },
  {
    "label": "ConditionalMoveToNextSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalMoveToNextSection(const FVector& AgentLocation, EMetaPathUpdateReason Reason)"
  },
  {
    "label": "ForceMoveToNextSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceMoveToNextSection(const FVector& AgentLocation)"
  },
  {
    "label": "UpdatePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePath(const FVector& AgentLocation)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const FMetaNavMeshPath& Other)"
  },
  {
    "label": "IsLastSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLastSection()"
  },
  {
    "label": "GetTargetWaypointIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTargetWaypointIndex()"
  },
  {
    "label": "GetWaypointArray()",
    "kind": "Method",
    "detail": "Function (} const TArray<FMetaPathWayPoint>&)",
    "insertText": "GetWaypointArray()"
  },
  {
    "label": "SetWaypoints()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetWaypoints(const TArray<FMetaPathWayPoint>& InWaypoints)"
  },
  {
    "label": "SetWaypoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWaypoints(const TArray<FVector>& InWaypoints)"
  },
  {
    "label": "GetWaypointSwitchRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWaypointSwitchRadius()"
  },
  {
    "label": "GetLengthFromPosition()",
    "kind": "Method",
    "detail": "Function (WaypointSwitchRadius = InSwitchRadius ; } FVector::FReal)",
    "insertText": "GetLengthFromPosition(FVector SegmentStart, uint32 NextPathPointIndex)"
  },
  {
    "label": "GetCostFromIndex()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetCostFromIndex(int32 PathPointIndex)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(FVisualLogEntry* Snapshot)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DebugDraw(const ANavigationData* NavData, const FColor PathColor, UCanvas* Canvas, const bool bPersistent, const float LifeTime, const uint32 NextPathPointIndex = 0)"
  },
  {
    "label": "MoveToNextSection()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FMetaPathWayPoint> Waypoints ; FVector::FReal ApproximateLength ; float WaypointSwitchRadius ; int32 TargetWaypointIdx ; TWeakObjectPtr<AActor> PathGoal ; float PathGoalTetherDistance ; bool)",
    "insertText": "MoveToNextSection(const FVector& AgentLocation)"
  }
]