[
  {
    "label": "FCompactPoseBoneIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPoseBoneIndex"
  },
  {
    "label": "FBlendSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSampleData"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "FAnimatedBoneAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedBoneAttribute"
  },
  {
    "label": "FAnimExtractContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimExtractContext"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "FStackAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainer"
  },
  {
    "label": "FHeapAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapAttributeContainer"
  },
  {
    "label": "FMeshAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshAttributeContainer"
  },
  {
    "label": "BoneIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoneIndexType"
  },
  {
    "label": "TAttributeContainerAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeContainerAccessor"
  },
  {
    "label": "FStackAttributeContainerAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackAttributeContainerAccessor"
  },
  {
    "label": "FHeapAttributeContainerAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapAttributeContainerAccessor"
  },
  {
    "label": "Attributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Attributes"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Animation / AnimTypes . h \" # include \" UObject / NameTypes . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" UObject / StructOnScope . h \" # include \" Animation / IAttributeBlendOperator . h \" # include \" UObject / Class . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Animation / AttributesContainer . h \" # include \" Animation / WrappedAttribute . h \" struct FCompactPoseBoneIndex ; struct FBlendSampleData ; struct FBoneContainer ; enum class ECustomAttributeBlendType : uint8 ; enum EAdditiveAnimationType : int ; struct FAnimatedBoneAttribute ; struct FCompactPoseBoneIndex ; struct FAnimExtractContext ; class UMirrorDataTable ; namespace UE { namespace Anim { struct FStackAttributeContainer : public TAttributeContainer<FCompactPoseBoneIndex,FAnimStackAllocator> { } ; struct FHeapAttributeContainer : public TAttributeContainer<FCompactPoseBoneIndex,FDefaultAllocator> { } ; struct FMeshAttributeContainer : public TAttributeContainer<FMeshPoseBoneIndex,FDefaultAllocator> { } ; template<class BoneIndexType,InAllocator> struct TAttributeContainerAccessor { TArray<TWrappedAttribute<InAllocator>>&)",
    "insertText": "GetValues(TAttributeContainer<BoneIndexType, InAllocator>& Attributes, int32 TypeIndex)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} TArray<FAttributeId>&)",
    "insertText": "GetKeys(TAttributeContainer<BoneIndexType, InAllocator>& Attributes, int32 TypeIndex)"
  },
  {
    "label": "GetAttributeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAttributeValue(FStackAttributeContainer& OutAttributes, const FCompactPoseBoneIndex& PoseBoneIndex, const FAnimatedBoneAttribute& Attribute, double CurrentTime)"
  },
  {
    "label": "BlendAttributes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BlendAttributes(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributes(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const TArrayView<const float> SourceWeights, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributes(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, const TArrayView<const int32> SourceWeightsIndices, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributesPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributesPerBone(const FStackAttributeContainer& SourceAttributes1, const FStackAttributeContainer& SourceAttributes2, const TArrayView<const float> WeightsOfSource2, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributesPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributesPerBone(TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> PerBoneInterpolationIndices, TArrayView<const FBlendSampleData> BlendSampleDataCache, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributesPerBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributesPerBone(TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> PerBoneInterpolationIndices, TArrayView<const FBlendSampleData> BlendSampleDataCache, TArrayView<const int32> BlendSampleDataCacheIndices, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "BlendAttributesPerBoneFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendAttributesPerBoneFilter(const FStackAttributeContainer& BaseAttributes, const TArrayView<const FStackAttributeContainer> BlendAttributes, const TArray<FPerBoneBlendWeight>& BoneBlendWeights, FStackAttributeContainer& OutAttributes)"
  },
  {
    "label": "OverrideAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideAttributes(const FStackAttributeContainer& SourceAttributes, FStackAttributeContainer& OutAttributes, float Weight)"
  },
  {
    "label": "AccumulateAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateAttributes(const FStackAttributeContainer& SourceAttributes, FStackAttributeContainer& OutAttributes, float Weight, EAdditiveAnimationType AdditiveType)"
  },
  {
    "label": "ConvertToAdditive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAdditive(const FStackAttributeContainer& BaseAttributes, FStackAttributeContainer& OutAdditiveAttributes)"
  },
  {
    "label": "CopyAndRemapAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAndRemapAttributes(const FMeshAttributeContainer& SourceAttributes, FStackAttributeContainer& OutAttributes, const TMap<int32, int32>& BoneMapToSource, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "InterpolateAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateAttributes(FMeshAttributeContainer& FromAttributes, const FMeshAttributeContainer& ToAttributes, float Alpha)"
  },
  {
    "label": "MirrorAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorAttributes(FStackAttributeContainer& Attributes, const UMirrorDataTable& MirrorDataTable, const TArray<FCompactPoseBoneIndex>& CompactPoseMirrorBones)"
  },
  {
    "label": "GetAttributeBlendType()",
    "kind": "Method",
    "detail": "Function (ECustomAttributeBlendType)",
    "insertText": "GetAttributeBlendType(const FName& InName)"
  },
  {
    "label": "GetAttributeBlendType()",
    "kind": "Method",
    "detail": "Function (ECustomAttributeBlendType)",
    "insertText": "GetAttributeBlendType(const FAttributeId& Info)"
  }
]