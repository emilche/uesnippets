[
  {
    "label": "FMeshSelfUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshSelfUnion"
  },
  {
    "label": "FMeshSelfUnion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" GeometryTypes . h \" # include \" DynamicMeshEditor . h \" # include \" Spatial / FastWinding . h \" # include \" DynamicMesh / DynamicMeshAABBTree3 . h \" # include \" Util / ProgressCancel . h \" # include \" Operations / MeshBoolean . h \" namespace UE { namespace Geometry { class FMeshSelfUnion { public : bool bCollapseDegenerateEdgesOnCut = true ; double DegenerateEdgeTolFactor = 1 . 5 ; double SnapTolerance = FMathf::ZeroTolerance* 1 . 0 ; double NormalOffset = FMathf::ZeroTolerance* 1 . 0 ; double WindingThreshold = . 5 ; bool bTrimFlaps = false ; bool bWeldSharedEdges = true ; bool bTrackAllNewEdges = false ; FProgressCancel* Progress = nullptr ; bool bSimplifyAlongNewEdges = false ; double SimplificationAngleTolerance = . 1 ; double TryToImproveTriQualityThreshold = . 2 5 ; bool bPreserveTriangleGroups = true ; bool bPreserveVertexUVs = true ; bool bPreserveOverlayUVs = true ; float UVDistortTolerance = FMathf::ZeroTolerance ; bool bPreserveVertexNormals = true ; float NormalDistortTolerance = . 0 1 f ; FDynamicMesh3* Mesh ; TArray<int> CreatedBoundaryEdges ; TSet<int32> AllNewEdges ; public :)",
    "insertText": "FMeshSelfUnion(FDynamicMesh3* MeshIn) : Mesh(MeshIn)"
  },
  {
    "label": "FMeshSelfUnion()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMeshSelfUnion()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} EOperationValidationResult)",
    "insertText": "Validate()"
  },
  {
    "label": "Cancelled()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Cancelled()"
  },
  {
    "label": "FindNearestEdge()",
    "kind": "Method",
    "detail": "Function (} private : int)",
    "insertText": "FindNearestEdge(const TArray<int>& EIDs, const TArray<int>& BoundaryNbrEdges, FVector3d Pos)"
  },
  {
    "label": "MergeEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeEdges(const TArray<int>& CutBoundaryEdges, const TMap<int, int>& AllVIDMatches)"
  },
  {
    "label": "SimplifyAlongNewEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimplifyAlongNewEdges(TArray<int>& CutBoundaryEdges, TMap<int, int>& FoundMatches)"
  }
]