[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_REFERENCE_WRAPPER_H # define _LIBCPP___FUNCTIONAL_REFERENCE_WRAPPER_H # include<__config> # include<__functional / weak_result_type . h> # include<__memory / addressof . h> # include<__utility / forward . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__fun()",
    "kind": "Method",
    "detail": "Function (public : typedef _Tp type ; private : type* __f_ ; void)",
    "insertText": "__fun(_Tp&)"
  },
  {
    "label": "__fun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__fun(_Tp&&)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : template<class _Up,class = __enable_if_t<! __is_same_uncvref<_Up,reference_wrapper>::value,)",
    "insertText": "decltype(__fun(declval<_Up>())) > > _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 reference_wrapper(_Up&& __u) _NOEXCEPT_(noexcept(__fun(declval<_Up>())))"
  },
  {
    "label": "_Up()",
    "kind": "Method",
    "detail": "Function (type& __f = static_cast<)",
    "insertText": "_Up(__u)"
  },
  {
    "label": "addressof()",
    "kind": "Method",
    "detail": "Function (__f_ =)",
    "insertText": "addressof(__f)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 operator)",
    "insertText": "type()"
  },
  {
    "label": "reference_wrapper()",
    "kind": "Method",
    "detail": "Function (reference_wrapper<_Tp>)",
    "insertText": "reference_wrapper(_Tp&)"
  },
  {
    "label": "ref()",
    "kind": "Method",
    "detail": "Function (# endif template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 reference_wrapper<_Tp>)",
    "insertText": "ref(_Tp& __t)"
  },
  {
    "label": "ref()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 reference_wrapper<_Tp>)",
    "insertText": "ref(reference_wrapper<_Tp> __t)"
  },
  {
    "label": "cref()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 reference_wrapper<const _Tp>)",
    "insertText": "cref(reference_wrapper<_Tp> __t)"
  },
  {
    "label": "cref()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> void)",
    "insertText": "cref(const _Tp&&)"
  }
]