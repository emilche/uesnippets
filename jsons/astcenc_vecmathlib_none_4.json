[
  {
    "label": "vfloat4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vfloat4"
  },
  {
    "label": "vint4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vint4"
  },
  {
    "label": "vmask4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vmask4"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_NONE_4_H_INCLUDED # define ASTC_VECMATHLIB_NONE_4_H_INCLUDED # ifndef ASTCENC_SIMD_INLINE # error \" Include astcenc_vecmathlib . h,do not include directly \" # endif # include<algorithm> # include<cstdio> # include<cstring> # include<cfenv> struct vfloat4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4()"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(const float* p)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = p [ 0 ] ; m [ 1 ] = p [ 1 ] ; m [ 2 ] = p [ 2 ] ; m [ 3 ] = p [ 3 ] ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = a ; m [ 1 ] = a ; m [ 2 ] = a ; m [ 3 ] = a ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat4(float a, float b, float c, float d)"
  },
  {
    "label": "lane()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = a ; m [ 1 ] = b ; m [ 2 ] = c ; m [ 3 ] = d ; } template<int l> ASTCENC_SIMD_INLINE float)",
    "insertText": "lane()"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (m [ l ] = a ; } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "zero()"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "load1(const float* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "loada(const float* p)"
  },
  {
    "label": "lane_id()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "lane_id()"
  },
  {
    "label": "swz()",
    "kind": "Method",
    "detail": "Function (} template<int l0,int l1> ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "swz()"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (} float m [ 4 ] ; } ; struct vint4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vint4()"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const int* p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = p [ 0 ] ; m [ 1 ] = p [ 1 ] ; m [ 2 ] = p [ 2 ] ; m [ 3 ] = p [ 3 ] ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(const uint8_t *p)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = p [ 0 ] ; m [ 1 ] = p [ 1 ] ; m [ 2 ] = p [ 2 ] ; m [ 3 ] = p [ 3 ] ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a, int b, int c, int d)"
  },
  {
    "label": "vint4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = a ; m [ 1 ] = b ; m [ 2 ] = c ; m [ 3 ] = d ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vint4(int a)"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "load1(const int* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "loada(const int* p)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (} int m [ 4 ] ; } ; struct vmask4 { ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(int* p)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = p [ 0 ] ; m [ 1 ] = p [ 1 ] ; m [ 2 ] = p [ 2 ] ; m [ 3 ] = p [ 3 ] ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a)"
  },
  {
    "label": "vmask4()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = a = = false ? 0 : - 1 ; m [ 1 ] = a = = false ? 0 : - 1 ; m [ 2 ] = a = = false ? 0 : - 1 ; m [ 3 ] = a = = false ? 0 : - 1 ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vmask4(bool a, bool b, bool c, bool d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m [ 0 ] = a = = false ? 0 : - 1 ; m [ 1 ] = b = = false ? 0 : - 1 ; m [ 2 ] = c = = false ? 0 : - 1 ; m [ 3 ] = d = = false ? 0 : - 1 ; } int m [ 4 ] ; } ; ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a, vmask4 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vmask4)",
    "insertText": "operator(vmask4 a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "mask(vmask4 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a, vint4 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsl(vint4 a)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "lsr(vint4 a)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned int as0 = static_cast<unsigned)",
    "insertText": "int(a.m[0])"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned int as1 = static_cast<unsigned)",
    "insertText": "int(a.m[1])"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned int as2 = static_cast<unsigned)",
    "insertText": "int(a.m[2])"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (unsigned int as3 = static_cast<unsigned)",
    "insertText": "int(a.m[3])"
  },
  {
    "label": "asr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint4)",
    "insertText": "asr(vint4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "min(vint4 a, vint4 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "max(vint4 a, vint4 b)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmin(vint4 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (int b =)",
    "insertText": "min(a.m[0], a.m[1])"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (int c =)",
    "insertText": "min(a.m[2], a.m[3])"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "hmax(vint4 a)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (int b =)",
    "insertText": "max(a.m[0], a.m[1])"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (int c =)",
    "insertText": "max(a.m[2], a.m[3])"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE int)",
    "insertText": "hadd_s(vint4 a)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (p [ 0 ] = a . m [ 0 ] ; p [ 1 ] = a . m [ 1 ] ; p [ 2 ] = a . m [ 2 ] ; p [ 3 ] = a . m [ 3 ] ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vint4 a, int* p)"
  },
  {
    "label": "store_nbytes()",
    "kind": "Method",
    "detail": "Function (p [ 0 ] = a . m [ 0 ] ; p [ 1 ] = a . m [ 1 ] ; p [ 2 ] = a . m [ 2 ] ; p [ 3 ] = a . m [ 3 ] ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "store_nbytes(vint4 a, uint8_t* p)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int* pi = reinterpret_cast<)",
    "insertText": "int(p)"
  },
  {
    "label": "gatheri()",
    "kind": "Method",
    "detail": "Function (* pi = a . m [ 0 ] ; } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "gatheri(const int* base, vint4 indices)"
  },
  {
    "label": "pack_low_bytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "pack_low_bytes(vint4 a)"
  },
  {
    "label": "b0()",
    "kind": "Method",
    "detail": "Function (int b0 = a . m [ 0 ]& 0 xFF ; int b1 = a . m [ 1 ]& 0 xFF ; int b2 = a . m [ 2 ]& 0 xFF ; int b3 = a . m [ 3 ]& 0 xFF ; int b =)",
    "insertText": "b0(b1 << 8) | (b2 << 16) | (b3 << 24)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "select(vint4 a, vint4 b, vmask4 cond)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "operator(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "min(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "max(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "abs(vfloat4 a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "round(vfloat4 a)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(std::fegetround() == FE_TONEAREST)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmin(vfloat4 a)"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "hmax(vfloat4 a)"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hadd_s(vfloat4 a)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "sqrt(vfloat4 a)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "select_msb()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "select_msb(vfloat4 a, vfloat4 b, vmask4 cond)"
  },
  {
    "label": "gatherf()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "gatherf(const float* base, vint4 indices)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vfloat4 a, float* ptr)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (ptr [ 0 ] = a . m [ 0 ] ; ptr [ 1 ] = a . m [ 1 ] ; ptr [ 2 ] = a . m [ 2 ] ; ptr [ 3 ] = a . m [ 3 ] ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vfloat4 a, float* ptr)"
  },
  {
    "label": "float_to_int()",
    "kind": "Method",
    "detail": "Function (ptr [ 0 ] = a . m [ 0 ] ; ptr [ 1 ] = a . m [ 1 ] ; ptr [ 2 ] = a . m [ 2 ] ; ptr [ 3 ] = a . m [ 3 ] ; } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int(vfloat4 a)"
  },
  {
    "label": "float_to_int_rtn()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_int_rtn(vfloat4 a)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "int_to_float(vint4 a)"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_to_float16(vfloat4 a)"
  },
  {
    "label": "float_to_float16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "float_to_float16(float a)"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "float16_to_float(vint4 a)"
  },
  {
    "label": "float16_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "float16_to_float(uint16_t a)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "float_as_int(vfloat4 a)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (vint4 r ;)",
    "insertText": "memcpy(r.m, a.m, 4 * 4)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4& t0p, vint4& t1p)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; t1p = t1 ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4& t0p, vint4& t1p, vint4& t2p, vint4& t3p)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (t0p = t0 ; t1p = t1 ; t2p = t2 ; t3p = t3 ; } ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 idx)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (uint8_t table [ 1 6 ] ;)",
    "insertText": "storea(t0, reinterpret_cast<int*>(table + 0))"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 idx)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t1, reinterpret_cast<int*>(table + 16))"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "vtable_8bt_32bi(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint4 idx)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t2, reinterpret_cast<int*>(table + 32))"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(t3, reinterpret_cast<int*>(table + 48))"
  },
  {
    "label": "interleave_rgba8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "interleave_rgba8(vint4 r, vint4 g, vint4 b, vint4 a)"
  },
  {
    "label": "store_lanes_masked()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_lanes_masked(int* base, vint4 data, vmask4 mask)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store(data, base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.m[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.m[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mask.m[0])"
  }
]