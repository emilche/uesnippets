[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / Types . h \" # include \" Core / Vector . h \" namespace SpeedTree { class ST_DLL_LINK CFixedNumber { public :)",
    "insertText": "CFixedNumber()"
  },
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedNumber(const CFixedNumber& cOther)"
  },
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedNumber(st_float32 fValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CFixedNumber&)",
    "insertText": "operator(const CFixedNumber& cOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CFixedNumber&)",
    "insertText": "operator(float fValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CFixedNumber)",
    "insertText": "operator(void)"
  },
  {
    "label": "ToFloat()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "ToFloat(void)"
  },
  {
    "label": "SetBitsUsedForFraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitsUsedForFraction(st_uint32 uiDigits)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (private : st_int32 m_iValue ; st_uint32 m_uiBitsUsedForFraction ; st_float32 m_fOneOverStep ; st_float32 m_fStep ; } ; class ST_DLL_LINK CFixedVec3 { public :)",
    "insertText": "CFixedVec3()"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedVec3(st_float32 _x, st_float32 _y, st_float32 _z)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedVec3(st_float32 _x, st_float32 _y)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedVec3(const st_float32 afPos[3])"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedVec3(CFixedNumber _x, CFixedNumber _y, CFixedNumber _z)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedVec3(CFixedNumber _x, CFixedNumber _y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CFixedNumber&)",
    "insertText": "operator(int nIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const CFixedVec3& vIn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(st_float32 _x, st_float32 _y, st_float32 _z)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(st_float32 _x, st_float32 _y)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const st_float32 afPos[3])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(CFixedNumber _x, CFixedNumber _y, CFixedNumber _z)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(CFixedNumber _x, CFixedNumber _y)"
  },
  {
    "label": "ToVec3()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "ToVec3(void)"
  }
]