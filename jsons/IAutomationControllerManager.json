[
  {
    "label": "IAutomationControllerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationControllerManager"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IAutomationReport . h \" class IAutomationControllerManager ; typedef TSharedPtr<class IAutomationControllerManager> IAutomationControllerManagerPtr ; typedef TSharedRef<class IAutomationControllerManager> IAutomationControllerManagerRef ; namespace EAutomationControllerModuleState { enum Type { Ready,Running,Disabled } ; } ; namespace EFileExportType { enum Type { FET_Status = 0 x00000001,FET_Warnings = 0 x00000002,FET_Errors = 0 x00000004,FET_Logs = 0 x00000008,FET_All = 0 x00000010 } ; bool)",
    "insertText": "IsSet(const uint32& InMask, const EFileExportType::Type InFlag)"
  },
  {
    "label": "InMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InMask(1<<(uint32)InFlag)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlag(uint32& InMask, const EFileExportType::Type InFlag)"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (} } ; namespace EAutomationDeviceGroupTypes { enum Type { MachineName,Platform,OSVersion,Model,GPU,CPUModel,RamInGB,RenderMode,Max } ; FText)",
    "insertText": "ToName(const Type DeviceGroupType)"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "NSLOCTEXT(\"AutomationTest\", \"AutomationDeviceGroup_InvalidOrMax\", \"InvalidOrMax\")"
  },
  {
    "label": "ToDescription()",
    "kind": "Method",
    "detail": "Function (} } FText)",
    "insertText": "ToDescription(const Type DeviceGroupType)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnAutomationControllerReset)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnAutomationControllerTestsRefreshed)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAutomationControllerManagerTestsAvailable, EAutomationControllerModuleState::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnAutomationControllerManagerShutdown)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnAutomationControllerTestsComplete)"
  },
  {
    "label": "RequestAvailableWorkers()",
    "kind": "Method",
    "detail": "Function (class IAutomationControllerManager { public : void)",
    "insertText": "RequestAvailableWorkers(const FGuid& InSessionId)"
  },
  {
    "label": "IsReadyForTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForTests()"
  },
  {
    "label": "RequestTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTests()"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTests(const bool bIsLocalSession = false)"
  },
  {
    "label": "StopTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTests()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "RequestLoadAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLoadAsset(const FString& InAssetName)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "SetNumPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPasses(const int32 InNumPasses)"
  },
  {
    "label": "GetNumPasses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPasses()"
  },
  {
    "label": "IsSendAnalytics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSendAnalytics()"
  },
  {
    "label": "SetSendAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendAnalytics(const bool bNewValue)"
  },
  {
    "label": "KeepPIEOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeepPIEOpen()"
  },
  {
    "label": "SetKeepPIEOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepPIEOpen(const bool bNewValue)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilter(TSharedPtr< AutomationFilterCollection > InFilter)"
  },
  {
    "label": "GetFilteredReports()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<IAutomationReport>>&)",
    "insertText": "GetFilteredReports()"
  },
  {
    "label": "GetEnabledReports()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<IAutomationReport>>)",
    "insertText": "GetEnabledReports()"
  },
  {
    "label": "GetNumDeviceClusters()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDeviceClusters()"
  },
  {
    "label": "GetNumDevicesInCluster()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDevicesInCluster(const int32 ClusterIndex)"
  },
  {
    "label": "GetClusterGroupName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClusterGroupName(const int32 ClusterIndex)"
  },
  {
    "label": "GetDeviceTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceTypeName(const int32 ClusterIndex)"
  },
  {
    "label": "GetGameInstanceId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetGameInstanceId(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetGameInstanceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameInstanceName(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceName(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "SetVisibleTestsEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleTestsEnabled(const bool bEnabled)"
  },
  {
    "label": "GetEnabledTestsNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEnabledTestsNum()"
  },
  {
    "label": "GetEnabledTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEnabledTestNames(TArray<FString>& OutEnabledTestNames)"
  },
  {
    "label": "GetFilteredTestNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredTestNames(TArray<FString>& OutFilteredTestNames)"
  },
  {
    "label": "SetEnabledTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledTests(const TArray<FString>& EnabledTests)"
  },
  {
    "label": "GetTestState()",
    "kind": "Method",
    "detail": "Function (EAutomationControllerModuleState::Type)",
    "insertText": "GetTestState()"
  },
  {
    "label": "SetDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeveloperDirectoryIncluded(const bool bInDeveloperDirectoryIncluded)"
  },
  {
    "label": "IsDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeveloperDirectoryIncluded(void)"
  },
  {
    "label": "SetRequestedTestFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestedTestFlags(const EAutomationTestFlags InRequestedTestFlags)"
  },
  {
    "label": "CheckTestResultsAvailable()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "CheckTestResultsAvailable()"
  },
  {
    "label": "ReportsHaveErrors()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ReportsHaveErrors()"
  },
  {
    "label": "ReportsHaveWarnings()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ReportsHaveWarnings()"
  },
  {
    "label": "ReportsHaveLogs()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ReportsHaveLogs()"
  },
  {
    "label": "ClearAutomationReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAutomationReports()"
  },
  {
    "label": "ExportReport()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ExportReport(uint32 FileExportTypeMask)"
  },
  {
    "label": "IsTestRunnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestRunnable(IAutomationReportPtr InReport)"
  },
  {
    "label": "RemoveCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCallbacks()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Startup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Startup()"
  },
  {
    "label": "IsDeviceGroupFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceGroupFlagSet(EAutomationDeviceGroupTypes::Type InDeviceGroup)"
  },
  {
    "label": "ToggleDeviceGroupFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDeviceGroupFlag(EAutomationDeviceGroupTypes::Type InDeviceGroup)"
  },
  {
    "label": "UpdateDeviceGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceGroups()"
  },
  {
    "label": "GetReportOutputPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReportOutputPath()"
  },
  {
    "label": "ResetAutomationTestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAutomationTestTimeout(const TCHAR* Reason)"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (public : FOnAutomationControllerManagerShutdown&)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "OnTestsAvailable()",
    "kind": "Method",
    "detail": "Function (FOnAutomationControllerManagerTestsAvailable&)",
    "insertText": "OnTestsAvailable()"
  },
  {
    "label": "OnTestsRefreshed()",
    "kind": "Method",
    "detail": "Function (FOnAutomationControllerTestsRefreshed&)",
    "insertText": "OnTestsRefreshed()"
  },
  {
    "label": "OnTestsComplete()",
    "kind": "Method",
    "detail": "Function (FOnAutomationControllerTestsComplete&)",
    "insertText": "OnTestsComplete()"
  },
  {
    "label": "OnControllerReset()",
    "kind": "Method",
    "detail": "Function (FOnAutomationControllerReset&)",
    "insertText": "OnControllerReset()"
  },
  {
    "label": "IAutomationControllerManager()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IAutomationControllerManager()"
  }
]