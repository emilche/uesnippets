[
  {
    "label": "rcAllocHint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcAllocHint"
  },
  {
    "label": "rcIntArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcIntArray"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "rcScopedDelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcScopedDelete"
  },
  {
    "label": "rcScopedStructArrayDelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcScopedStructArrayDelete"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef RECASTALLOC_H # define RECASTALLOC_H # include \" CoreMinimal . h \" enum rcAllocHint { RC_ALLOC_PERM,RC_ALLOC_TEMP } ; typedef)",
    "insertText": "void(rcAllocFunc)(int size, rcAllocHint hint)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(rcFreeFunc)(void* ptr)"
  },
  {
    "label": "rcAllocSetCustom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcAllocSetCustom(rcAllocFunc *allocFunc, rcFreeFunc *freeFunc)"
  },
  {
    "label": "rcAlloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "rcAlloc(int size, rcAllocHint hint)"
  },
  {
    "label": "rcFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFree(void* ptr)"
  },
  {
    "label": "rcMemCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMemCpy(void* dst, void* src, int size)"
  },
  {
    "label": "rcIntArray()",
    "kind": "Method",
    "detail": "Function (class rcIntArray { int* m_data ; int m_size,m_cap ;)",
    "insertText": "rcIntArray(const rcIntArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rcIntArray&)",
    "insertText": "operator(const rcIntArray&)"
  },
  {
    "label": "rcIntArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "rcIntArray() : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "rcIntArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "rcIntArray(int n) : m_data(0), m_size(0), m_cap(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(n)"
  },
  {
    "label": "rcIntArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "rcIntArray()"
  },
  {
    "label": "rcFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFree(m_data)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(int n)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(int item)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(m_size+1)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (m_data [ m_size - 1 ] = item ; } int)",
    "insertText": "pop()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class rcScopedDelete { T* ptr ; int size ; T*)",
    "insertText": "operator(T* p)"
  },
  {
    "label": "rcScopedDelete()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "rcScopedDelete() : ptr(0)"
  },
  {
    "label": "rcScopedDelete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "rcScopedDelete(int n)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptr(T*)rcAlloc(sizeof(T)*n, RC_ALLOC_TEMP)"
  },
  {
    "label": "rcScopedDelete()",
    "kind": "Method",
    "detail": "Function (size = n ; })",
    "insertText": "rcScopedDelete(T* p) : ptr(p)"
  },
  {
    "label": "rcScopedDelete()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "rcScopedDelete()"
  },
  {
    "label": "rcFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFree(ptr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (ptr = 0 ; size = 0 ; } operator)",
    "insertText": "T()"
  },
  {
    "label": "resizeGrow()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> bool rcScopedDelete<T)",
    "insertText": "resizeGrow(int n)"
  },
  {
    "label": "newData()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "newData(T*)rcAlloc(sizeof(T) * n, RC_ALLOC_TEMP)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (ptr = newData ; size = n ; })",
    "insertText": "return(ptr != 0)"
  },
  {
    "label": "rcScopedStructArrayDelete()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "rcScopedStructArrayDelete(const int n) : itemCount(n)"
  },
  {
    "label": "rcScopedStructArrayDelete()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "rcScopedStructArrayDelete()"
  }
]