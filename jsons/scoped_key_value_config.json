[
  {
    "label": "ScopedKeyValueConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedKeyValueConfig"
  },
  {
    "label": "ScopedKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCOPED_KEY_VALUE_CONFIG_H_ # define TEST_SCOPED_KEY_VALUE_CONFIG_H_ # include<functional> # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" api / field_trials_registry . h \" # include \" test / field_trial . h \" namespace webrtc { namespace test { class ScopedKeyValueConfig : public FieldTrialsRegistry { public : ~)",
    "insertText": "ScopedKeyValueConfig()"
  },
  {
    "label": "ScopedKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedKeyValueConfig(absl::string_view s)"
  },
  {
    "label": "ScopedKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedKeyValueConfig(ScopedKeyValueConfig& parent, absl::string_view s)"
  },
  {
    "label": "ScopedKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedKeyValueConfig(ScopedKeyValueConfig* parent, absl::string_view s)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (ScopedKeyValueConfig*)",
    "insertText": "GetRoot(ScopedKeyValueConfig* n)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetValue(absl::string_view key)"
  },
  {
    "label": "LookupRecurse()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "LookupRecurse(absl::string_view key)"
  }
]