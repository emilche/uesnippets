[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "VCMFrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMFrameBuffer"
  },
  {
    "label": "VCMPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMPacket"
  },
  {
    "label": "VCMEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMEncodedFrame"
  },
  {
    "label": "VCMJitterSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCMJitterSample"
  },
  {
    "label": "TimestampLessThan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimestampLessThan"
  },
  {
    "label": "FrameList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameList"
  },
  {
    "label": "VCMJitterBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMJitterBuffer"
  },
  {
    "label": "SequenceNumberLessThan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceNumberLessThan"
  },
  {
    "label": "VCMJitterSample()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_JITTER_BUFFER_H_ # define MODULES_VIDEO_CODING_JITTER_BUFFER_H_ # include<list> # include<map> # include<memory> # include<set> # include<vector> # include \" api / field_trials_view . h \" # include \" modules / include / module_common_types . h \" # include \" modules / include / module_common_types_public . h \" # include \" modules / video_coding / decoding_state . h \" # include \" modules / video_coding / event_wrapper . h \" # include \" modules / video_coding / include / video_coding . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" modules / video_coding / jitter_buffer_common . h \" # include \" modules / video_coding / timing / inter_frame_delay . h \" # include \" modules / video_coding / timing / jitter_estimator . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class VCMFrameBuffer ; class VCMPacket ; class VCMEncodedFrame ; typedef std::list<VCMFrameBuffer*> UnorderedFrameList ; struct VCMJitterSample {)",
    "insertText": "VCMJitterSample() : timestamp(0), frame_size(0), latest_packet_time(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32_t timestamp ; uint32_t frame_size ; int64_t latest_packet_time ; } ; class TimestampLessThan { public : bool)",
    "insertText": "operator()(uint32_t timestamp1, uint32_t timestamp2)"
  },
  {
    "label": "InsertFrame()",
    "kind": "Method",
    "detail": "Function (} } ; class FrameList : public std::map<uint32_t,VCMFrameBuffer*,TimestampLessThan> { public : void)",
    "insertText": "InsertFrame(VCMFrameBuffer* frame)"
  },
  {
    "label": "PopFrame()",
    "kind": "Method",
    "detail": "Function (VCMFrameBuffer*)",
    "insertText": "PopFrame(uint32_t timestamp)"
  },
  {
    "label": "Front()",
    "kind": "Method",
    "detail": "Function (VCMFrameBuffer*)",
    "insertText": "Front()"
  },
  {
    "label": "Back()",
    "kind": "Method",
    "detail": "Function (VCMFrameBuffer*)",
    "insertText": "Back()"
  },
  {
    "label": "RecycleFramesUntilKeyFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecycleFramesUntilKeyFrame(FrameList::iterator* key_frame_it, UnorderedFrameList* free_frames)"
  },
  {
    "label": "CleanUpOldOrEmptyFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpOldOrEmptyFrames(VCMDecodingState* decoding_state, UnorderedFrameList* free_frames)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(UnorderedFrameList* free_frames)"
  },
  {
    "label": "VCMJitterBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class VCMJitterBuffer { public :)",
    "insertText": "VCMJitterBuffer(Clock* clock, std::unique_ptr<EventWrapper> event, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VCMJitterBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMJitterBuffer()"
  },
  {
    "label": "VCMJitterBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCMJitterBuffer(const VCMJitterBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VCMJitterBuffer&)",
    "insertText": "operator(const VCMJitterBuffer&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Running()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Running()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "num_packets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_packets()"
  },
  {
    "label": "num_duplicated_packets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_duplicated_packets()"
  },
  {
    "label": "NextCompleteFrame()",
    "kind": "Method",
    "detail": "Function (VCMEncodedFrame*)",
    "insertText": "NextCompleteFrame(uint32_t max_wait_time_ms)"
  },
  {
    "label": "ExtractAndSetDecode()",
    "kind": "Method",
    "detail": "Function (VCMEncodedFrame*)",
    "insertText": "ExtractAndSetDecode(uint32_t timestamp)"
  },
  {
    "label": "ReleaseFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFrame(VCMEncodedFrame* frame)"
  },
  {
    "label": "LastPacketTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "LastPacketTime(const VCMEncodedFrame* frame, bool* retransmitted)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (VCMFrameBufferEnum)",
    "insertText": "InsertPacket(const VCMPacket& packet, bool* retransmitted)"
  },
  {
    "label": "EstimatedJitterMs()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "EstimatedJitterMs()"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size, int max_packet_age_to_nack, int max_incomplete_time_ms)"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackList(bool* request_key_frame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : class SequenceNumberLessThan { public : bool)",
    "insertText": "operator()(const uint16_t& sequence_number1, const uint16_t& sequence_number2)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::set<uint16_t,SequenceNumberLessThan> SequenceNumberSet ; VCMFrameBufferEnum)",
    "insertText": "GetFrame(const VCMPacket& packet, VCMFrameBuffer** frame, FrameList** frame_list) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "IsContinuousInState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsContinuousInState(const VCMFrameBuffer& frame, const VCMDecodingState& decoding_state) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "IsContinuous()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsContinuous(const VCMFrameBuffer& frame) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "FindAndInsertContinuousFramesWithState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndInsertContinuousFramesWithState(const VCMDecodingState& decoded_state) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "FindAndInsertContinuousFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndInsertContinuousFrames(const VCMFrameBuffer& new_frame) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (VCMFrameBuffer*)",
    "insertText": "NextFrame() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateNackList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNackList(uint16_t sequence_number) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "TooLargeNackList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TooLargeNackList()"
  },
  {
    "label": "HandleTooLargeNackList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTooLargeNackList() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "MissingTooOldPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MissingTooOldPacket(uint16_t latest_sequence_number) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "HandleTooOldPackets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTooOldPackets(uint16_t latest_sequence_number) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DropPacketsFromNackList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DropPacketsFromNackList(uint16_t last_decoded_sequence_number)"
  },
  {
    "label": "GetEmptyFrame()",
    "kind": "Method",
    "detail": "Function (VCMFrameBuffer*)",
    "insertText": "GetEmptyFrame() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "TryToIncreaseJitterBufferSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToIncreaseJitterBufferSize() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RecycleFramesUntilKeyFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecycleFramesUntilKeyFrame() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateAveragePacketsPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAveragePacketsPerFrame(int current_number_packets_)"
  },
  {
    "label": "CleanUpOldOrEmptyFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpOldOrEmptyFrames() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "IsPacketRetransmitted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPacketRetransmitted(const VCMPacket& packet)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(const VCMJitterSample& sample, bool incomplete_frame)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(const VCMFrameBuffer& frame, bool incomplete_frame)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(int64_t latest_packet_time_ms, uint32_t timestamp, unsigned int frame_size, bool incomplete_frame)"
  },
  {
    "label": "NonContinuousOrIncompleteDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NonContinuousOrIncompleteDuration() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "EstimatedLowSequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "EstimatedLowSequenceNumber(const VCMFrameBuffer& frame)"
  },
  {
    "label": "RecycleFrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecycleFrameBuffer(VCMFrameBuffer* frame) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* clock_ ; bool running_ ; Mutex mutex_ ; std::unique_ptr<EventWrapper> frame_event_ ; int max_number_of_frames_ ; UnorderedFrameList free_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]