[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "VCMFrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMFrameBuffer"
  },
  {
    "label": "VCMPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMPacket"
  },
  {
    "label": "VCMEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMEncodedFrame"
  },
  {
    "label": "VCMJitterSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCMJitterSample"
  },
  {
    "label": "TimestampLessThan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimestampLessThan"
  },
  {
    "label": "FrameList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameList"
  },
  {
    "label": "VCMJitterBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMJitterBuffer"
  },
  {
    "label": "SequenceNumberLessThan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceNumberLessThan"
  },
  {
    "label": "IsNewerTimestamp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsNewerTimestamp(timestamp2, timestamp1)"
  },
  {
    "label": "InsertFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFrame(VCMFrameBuffer* frame)"
  },
  {
    "label": "RecycleFramesUntilKeyFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RecycleFramesUntilKeyFrame(FrameList::iterator* key_frame_it,\n                                 UnorderedFrameList* free_frames)"
  },
  {
    "label": "CleanUpOldOrEmptyFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpOldOrEmptyFrames(VCMDecodingState* decoding_state,\n                               UnorderedFrameList* free_frames)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(UnorderedFrameList* free_frames)"
  },
  {
    "label": "VCMJitterBuffer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VCMJitterBuffer(Clock* clock,\n                  std::unique_ptr<EventWrapper> event,\n                  const FieldTrialsView& field_trials)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "ReleaseFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFrame(VCMEncodedFrame* frame)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (VCMFrameBufferEnum)",
    "insertText": "InsertPacket(const VCMPacket& packet, bool* retransmitted)"
  },
  {
    "label": "EstimatedJitterMs()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "EstimatedJitterMs()"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size,\n                       int max_packet_age_to_nack,\n                       int max_incomplete_time_ms)"
  },
  {
    "label": "GetNackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackList(bool* request_key_frame)"
  },
  {
    "label": "IsNewerSequenceNumber()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsNewerSequenceNumber(sequence_number2, sequence_number1)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DropPacketsFromNackList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DropPacketsFromNackList(uint16_t last_decoded_sequence_number)"
  },
  {
    "label": "UpdateAveragePacketsPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAveragePacketsPerFrame(int current_number_packets_)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(const VCMJitterSample& sample,\n                            bool incomplete_frame)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(const VCMFrameBuffer& frame, bool incomplete_frame)"
  },
  {
    "label": "UpdateJitterEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJitterEstimate(int64_t latest_packet_time_ms,\n                            uint32_t timestamp,\n                            unsigned int frame_size,\n                            bool incomplete_frame)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (free_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (decodable_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (incomplete_frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_decoded_state_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (num_packets_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (num_duplicated_packets_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]