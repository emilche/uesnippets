[
  {
    "label": "FTaskExecutionFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskExecutionFlags"
  },
  {
    "label": "FEntitySystemScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntitySystemScheduler"
  },
  {
    "label": "FTaskPrerequisiteCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskPrerequisiteCache"
  },
  {
    "label": "FScheduledTaskFuncionPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScheduledTaskFuncionPtr"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScheduledTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScheduledTask"
  },
  {
    "label": "FLockedComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockedComponentData"
  },
  {
    "label": "FExecute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExecute"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SparseBitSet . h \" # include \" Containers / Map . h \" # include \" Containers / Array . h \" # include \" Tasks / Task . h \" # include \" Containers / LockFreeList . h \" # include \" Containers / StringView . h \" # include \" EntitySystem / RelativePtr . h \" # include \" EntitySystem / IMovieSceneTaskScheduler . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneMaybeAtomic . h \" # include \" Misc / TransactionallySafeCriticalSection . h \" namespace UE::MovieScene { struct FTaskExecutionFlags ; class FEntitySystemScheduler ; using FTaskBitSet = TSparseBitSet<uint64,TDynamicSparseBitSetBucketStorage<uint16,4>> ; struct FTaskPrerequisiteCache { FTaskBitSet SystemWidePrerequisites ; FTaskBitSet ForcedSystemWidePrerequisites ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FTaskBitSet()",
    "kind": "Method",
    "detail": "Function (SystemWidePrerequisites =)",
    "insertText": "FTaskBitSet()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} } ; struct FScheduledTaskFuncionPtr { enum class EType : uint8 { None,Unbound,AllocationPtr,AllocationItem,PreLockedAllocationItem } ; EType)",
    "insertText": "Assign(UnboundTaskFunctionPtr InUnboundTask)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (UnboundTask = InUnboundTask ; return EType::Unbound ; } EType)",
    "insertText": "Assign(AllocationFunctionPtr InAllocation)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (Allocation = InAllocation ; return EType::AllocationPtr ; } EType)",
    "insertText": "Assign(AllocationItemFunctionPtr InAllocationItem)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (AllocationItem = InAllocationItem ; return EType::AllocationItem ; } EType)",
    "insertText": "Assign(PreLockedAllocationItemFunctionPtr InPreLockedAllocationItem)"
  },
  {
    "label": "FScheduledTask()",
    "kind": "Method",
    "detail": "Function (PreLockedAllocationItem = InPreLockedAllocationItem ; return EType::PreLockedAllocationItem ; } union { UnboundTaskFunctionPtr UnboundTask ; AllocationFunctionPtr Allocation ; AllocationItemFunctionPtr AllocationItem ; PreLockedAllocationItemFunctionPtr PreLockedAllocationItem ; } ; } ; struct FScheduledTask {)",
    "insertText": "FScheduledTask(FEntityAllocationWriteContext InWriteContextOffset)"
  },
  {
    "label": "FScheduledTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScheduledTask()"
  },
  {
    "label": "FScheduledTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScheduledTask(FScheduledTask&& InTask)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (struct FLockedComponentData { TRelativePtr<FPreLockedDataPtr> PreLockedDataStart ; uint16 PrelockedDataSize = 0 ; uint16 AllocationIndex = MAX_uint16 ; } ; void)",
    "insertText": "Run(const FEntitySystemScheduler* Scheduler, FTaskExecutionFlags InFlags)"
  },
  {
    "label": "SetFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFunction(TaskFunctionPtr InFunction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTaskBitSet ComputedSubsequents ; FTaskBitSet ChildTasks ; FScheduledTaskFuncionPtr TaskFunction ; TSharedPtr<ITaskContext> TaskContext = nullptr ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FEntitySystemScheduler()",
    "kind": "Method",
    "detail": "Function (# endif TStatId StatId ; FEntityAllocationWriteContext WriteContextOffset ; FLockedComponentData LockedComponentData ; int32 NumPrerequisites = 0 ; FEntitySystemMaybeAtomicInt32 WaitCount = 0 ; FEntitySystemMaybeAtomicInt32 ChildCompleteCount = 0 ; FTaskID Parent ; FScheduledTaskFuncionPtr::EType TaskFunctionType ; uint8 bForceGameThread : 1 ; uint8 bForceInline : 1 ; } ; class FEntitySystemScheduler : public IEntitySystemScheduler { public :)",
    "insertText": "FEntitySystemScheduler(FEntityManager* InEntityManager)"
  },
  {
    "label": "FEntitySystemScheduler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEntitySystemScheduler()"
  },
  {
    "label": "IsCustomSchedulingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomSchedulingEnabled()"
  },
  {
    "label": "BeginConstruction()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginConstruction()"
  },
  {
    "label": "BeginSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSystem(uint16 NodeID)"
  },
  {
    "label": "HasAnyTasksToPropagateDownstream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyTasksToPropagateDownstream()"
  },
  {
    "label": "PropagatePrerequisite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagatePrerequisite(uint16 ToNodeID)"
  },
  {
    "label": "EndSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSystem(uint16 NodeID)"
  },
  {
    "label": "EndConstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndConstruction()"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (public : template<TaskType,. . . TaskArgTypes> FTaskID)",
    "insertText": "AddTask(const FTaskParams& InParams, TaskArgTypes&&... Args)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (struct FExecute { void)",
    "insertText": "Execute(const ITaskContext* Context, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "TaskType()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "TaskType(Context)->Run(WriteContext)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (} } ; TaskFunctionPtr)",
    "insertText": "Function(TInPlaceType<UnboundTaskFunctionPtr>(), FExecute::Execute)"
  },
  {
    "label": "AddNullTask()",
    "kind": "Method",
    "detail": "Function (} FTaskID)",
    "insertText": "AddNullTask()"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (FTaskID)",
    "insertText": "AddTask(const FTaskParams& InParams, TSharedPtr<ITaskContext> InTaskContext, TaskFunctionPtr InTaskFunction)"
  },
  {
    "label": "CreateForkedAllocationTask()",
    "kind": "Method",
    "detail": "Function (FTaskID)",
    "insertText": "CreateForkedAllocationTask(const FTaskParams& InParams, TSharedPtr<ITaskContext> InTaskContext, TaskFunctionPtr InTaskFunction, TFunctionRef<void(FEntityAllocationIteratorItem,TArray<FPreLockedDataPtr>&)> InPreLockFunc, const FEntityComponentFilter& Filter, const FComponentMask& ReadDeps, const FComponentMask& WriteDeps)"
  },
  {
    "label": "AddPrerequisite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrerequisite(FTaskID Prerequisite, FTaskID Subsequent)"
  },
  {
    "label": "AddChildBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildBack(FTaskID Parent, FTaskID Child)"
  },
  {
    "label": "AddChildFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildFront(FTaskID Parent, FTaskID Child)"
  },
  {
    "label": "ShuffleTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuffleTasks()"
  },
  {
    "label": "GetEntityManager()",
    "kind": "Method",
    "detail": "Function (public : const FEntityManager*)",
    "insertText": "GetEntityManager()"
  },
  {
    "label": "GetWriteContextOffset()",
    "kind": "Method",
    "detail": "Function (} FEntityAllocationWriteContext)",
    "insertText": "GetWriteContextOffset()"
  },
  {
    "label": "CompleteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteTask(const FScheduledTask* Task, FTaskExecutionFlags InFlags)"
  },
  {
    "label": "PrerequisiteCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrerequisiteCompleted(FTaskID TaskID, int32* OptRunInlineIndex)"
  },
  {
    "label": "OnAllTasksFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllTasksFinished()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "ToString()"
  },
  {
    "label": "NewAllocation()",
    "kind": "Method",
    "detail": "Function (private : TArray<FScheduledTask> Tasks ; TArray<FPreLockedDataPtr> PreLockedComponentData ; FTaskPrerequisiteCache* CurrentPrerequisites = nullptr ; FTaskPrerequisiteCache CurrentSubsequents ; FTaskBitSet InitialTasks ; TMap<TPair<int32,FComponentTypeID>,FTaskBitSet> ComponentWriteDepedenciesByAllocation ; TMap<uint16,FTaskPrerequisiteCache> AllPrerequisites ; FEntityManager* EntityManager ; FEntitySystemMaybeAtomicInt32 NumTasksRemaining = 0 ; FEvent* GameThreadSignal = nullptr ; TLockFreePointerListFIFO<FScheduledTask,PLATFORM_CACHE_LINE_SIZE> GameThreadTaskList ; FEntityAllocationWriteContext WriteContextBase =)",
    "insertText": "NewAllocation()"
  }
]