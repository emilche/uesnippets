[
  {
    "label": "FCADKernelArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCADKernelArchive"
  },
  {
    "label": "FModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModel"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalShapeEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalShapeEntity"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSession"
  },
  {
    "label": "SharedPointerInternals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPointerInternals"
  },
  {
    "label": "FDatabase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / Types . h \" # include \" Containers / Queue . h \" namespace UE::CADKernel { class FCADKernelArchive ; class FModel ; class FTopologicalEntity ; class FTopologicalShapeEntity ; class FDatabase { class FCADKernelArchive ; class FEntity ; class FSession ; template<,ESPMode> class SharedPointerInternals::TIntrusiveReferenceController ; protected : TSharedPtr<FModel> Model ; TArray<TSharedPtr<FEntity>> DatabaseEntities ; TArray<FIdent> AvailableIdents ; TArray<TSharedPtr<FEntity>> ArchiveEntities ; TArray<TArray<TSharedPtr<FEntity>*>> ArchiveIdToWaitingSharedPointers ; TArray<TArray<TWeakPtr<FEntity>*>> ArchiveIdToWaitingWeakPointers ; TArray<TArray<FEntity**>> ArchiveIdToWaitingPointers ; TSet<FIdent> EntitiesToBeSerialized ; TQueue<FIdent> NotYetSerialized ; bool bForceSpawning = false ; bool bIsRecursiveSerialization = false ; uint32 EntityCount ; public :)",
    "insertText": "FDatabase()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (FModel&)",
    "insertText": "GetModel()"
  },
  {
    "label": "GetModelAsShared()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FModel>)",
    "insertText": "GetModelAsShared()"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntity(FIdent idEntity)"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntity(FEntity& Entity)"
  },
  {
    "label": "SerializeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSelection(FCADKernelArchive& Ar, const TArray<FIdent>& SelectionIds)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "CleanArchiveEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanArchiveEntities()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntity(TSharedPtr<FEntity> Entity)"
  },
  {
    "label": "AddEntityFromArchive()",
    "kind": "Method",
    "detail": "Function (DatabaseEntities [ Id ] = Entity ; Entity -> Id = Id ; } void)",
    "insertText": "AddEntityFromArchive(TSharedPtr<FEntity>Entity)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FIdent ArchiveId = Entity ->)",
    "insertText": "GetId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArchiveEntities [ ArchiveId ] = Entity ; { TArray<TSharedPtr<FEntity>*>& WaitingList = ArchiveIdToWaitingSharedPointers [ ArchiveId ] ;)",
    "insertText": "if(WaitingList.Num() > 0)"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (} } Entity -> Id = 0 ;)",
    "insertText": "AddEntity(Entity)"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, TSharedPtr<FEntity>& Entity)"
  },
  {
    "label": "FEntity()",
    "kind": "Method",
    "detail": "Function (Entity = TSharedPtr<)",
    "insertText": "FEntity()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entity = EntityPtr ; } else { ArchiveIdToWaitingSharedPointers [ ArchiveId ] .)",
    "insertText": "Add(&Entity)"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, TWeakPtr<FEntity>& Entity)"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, FEntity** Entity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* Entity = nullptr ; return ; } TSharedPtr<FEntity>& EntityPtr = ArchiveEntities [ ArchiveId ] ;)",
    "insertText": "if(EntityPtr.IsValid())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (* Entity = EntityPtr .)",
    "insertText": "Get()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { ArchiveIdToWaitingPointers [ ArchiveId ] .)",
    "insertText": "Add(Entity)"
  },
  {
    "label": "SpawnEntityIdents()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "SpawnEntityIdents(const TArray<TSharedPtr<FEntity>>& SelectedEntities, bool bForceSpawning = false)"
  },
  {
    "label": "SpawnEntityIdents()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SpawnEntityIdents(const TArray<FEntity*>& SelectedEntities, bool bForceSpawning = false)"
  },
  {
    "label": "SpawnEntityIdent()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SpawnEntityIdent(FEntity& SelectedEntity, bool bForceSpawning = false)"
  },
  {
    "label": "AddEntityToSave()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddEntityToSave(FIdent EntityId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EntitiesToBeSerialized .)",
    "insertText": "Add(EntityId)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (NotYetSerialized .)",
    "insertText": "Enqueue(EntityId)"
  },
  {
    "label": "CreateId()",
    "kind": "Method",
    "detail": "Function (} } private : FIdent)",
    "insertText": "CreateId()"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FEntity>)",
    "insertText": "GetEntity(FIdent id)"
  },
  {
    "label": "GetEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntities(const TArray<FIdent>& ids, TArray<TSharedPtr<FEntity>>& Entities)"
  },
  {
    "label": "GetEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntities(const TArray<FIdent>& ids, TArray<FEntity*>& Entities)"
  },
  {
    "label": "GetTopologicalEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTopologicalEntities(const TArray<FIdent>& ids, TArray<FTopologicalEntity*>& Entities)"
  },
  {
    "label": "GetTopologicalShapeEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTopologicalShapeEntities(const TArray<FIdent>& ids, TArray<FTopologicalShapeEntity*>& Entities)"
  },
  {
    "label": "GetEntitiesOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntitiesOfType(EEntity Type, TArray<TSharedPtr<FEntity>>& OutEntities)"
  },
  {
    "label": "GetEntitiesOfTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntitiesOfTypes(const TSet<EEntity>& Types, TArray<TSharedPtr<FEntity>>& OutEntities)"
  },
  {
    "label": "ExpandSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandSelection(TSharedPtr<FEntity> Entities, const TSet<EEntity>& Filter, TSet<TSharedPtr<FEntity>>& OutSelection)"
  },
  {
    "label": "ExpandSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandSelection(const TArray<TSharedPtr<FEntity>>& Entities, const TSet<EEntity>& Filter, TSet<TSharedPtr<FEntity>>& OutSelection)"
  },
  {
    "label": "ExpandSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandSelection(const TArray<TSharedPtr<FEntity>>& Entities, const TSet<EEntity>& Filter, TArray<TSharedPtr<FEntity>>& OutSelection)"
  },
  {
    "label": "TopologicalEntitiesSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TopologicalEntitiesSelection(const TArray<TSharedPtr<FEntity>>& Entities, TArray<TSharedPtr<FTopologicalEntity>>& OutTopoEntities, bool bFindSurfaces, bool bFindEdges, bool bFindVertices)"
  },
  {
    "label": "CadEntitiesSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CadEntitiesSelection(const TArray<TSharedPtr<FEntity>>& Entities, TArray<TSharedPtr<FEntity>>& OutCadEntities)"
  },
  {
    "label": "MeshEntitiesSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshEntitiesSelection(const TArray<TSharedPtr<FEntity>>& Entities, TArray<TSharedPtr<FEntity>>& OutMeshEntities)"
  },
  {
    "label": "GetFirstEntityOfType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEntity>)",
    "insertText": "GetFirstEntityOfType(EEntity Type)"
  }
]