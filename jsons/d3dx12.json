[
  {
    "label": "CD3DX12_RANGE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RANGE"
  },
  {
    "label": "CD3DX12_RANGE_UINT64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RANGE_UINT64"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SHADER_BYTECODE"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILE_REGION_SIZE"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_TILING"
  },
  {
    "label": "CD3DX12_TILE_SHAPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILE_SHAPE"
  },
  {
    "label": "CD3DX12_RESOURCE_BARRIER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RESOURCE_BARRIER"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_PACKED_MIP_INFO"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_CONSTANTS"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_PARAMETER"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_ROOT_PARAMETER1"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RESOURCE_DESC"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY"
  },
  {
    "label": "DefaultSampleMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSampleMask"
  },
  {
    "label": "DefaultSampleDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSampleDesc"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "ID3DX12PipelineParserCallbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ID3DX12PipelineParserCallbacks"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM1"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM_PARSE_HELPER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM_PARSE_HELPER"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_STATE_OBJECT_DESC"
  },
  {
    "label": "SUBOBJECT_WRAPPER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SUBOBJECT_WRAPPER"
  },
  {
    "label": "StringContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringContainer"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUBOBJECT_HELPER_BASE"
  },
  {
    "label": "OWNED_HELPER",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OWNED_HELPER"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT"
  },
  {
    "label": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT"
  },
  {
    "label": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT"
  },
  {
    "label": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION"
  },
  {
    "label": "CD3DX12_HIT_GROUP_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_HIT_GROUP_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT"
  },
  {
    "label": "CD3DX12_NODE_MASK_SUBOBJECT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CD3DX12_NODE_MASK_SUBOBJECT"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (/)",
    "insertText": "memcpy(&DepthStencil.Depth, &depth, sizeof(depth))"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (DepthStencil . Stencil = stencil ; } } ; struct CD3DX12_RANGE : public D3D12_RANGE {)",
    "insertText": "CD3DX12_RANGE()"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RANGE(const D3D12_RANGE &o) : D3D12_RANGE(o)"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RANGE(SIZE_T begin, SIZE_T end)"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Begin = begin ; End = end ; } } ; struct CD3DX12_RANGE_UINT64 : public D3D12_RANGE_UINT64 {)",
    "insertText": "CD3DX12_RANGE_UINT64()"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RANGE_UINT64(const D3D12_RANGE_UINT64 &o) : D3D12_RANGE_UINT64(o)"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RANGE_UINT64(UINT64 begin, UINT64 end)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Begin = begin ; End = end ; } } ; struct CD3DX12_SUBRESOURCE_RANGE_UINT64 : public D3D12_SUBRESOURCE_RANGE_UINT64 {)",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(const D3D12_SUBRESOURCE_RANGE_UINT64 &o) : D3D12_SUBRESOURCE_RANGE_UINT64(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(UINT subresource, const D3D12_RANGE_UINT64 &range)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Subresource = subresource ; Range = range ; })",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(UINT subresource, UINT64 begin, UINT64 end)"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (Subresource = subresource ; Range . Begin = begin ; Range . End = end ; } } ; struct CD3DX12_SHADER_BYTECODE : public D3D12_SHADER_BYTECODE {)",
    "insertText": "CD3DX12_SHADER_BYTECODE()"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SHADER_BYTECODE(const D3D12_SHADER_BYTECODE &o) : D3D12_SHADER_BYTECODE(o)"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SHADER_BYTECODE(_In_ ID3DBlob *pShaderBlob)"
  },
  {
    "label": "GetBufferPointer()",
    "kind": "Method",
    "detail": "Function (pShaderBytecode = pShaderBlob ->)",
    "insertText": "GetBufferPointer()"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (BytecodeLength = pShaderBlob ->)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SHADER_BYTECODE(const void *_pShaderBytecode, SIZE_T bytecodeLength)"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (pShaderBytecode = _pShaderBytecode ; BytecodeLength = bytecodeLength ; } } ; struct CD3DX12_TILED_RESOURCE_COORDINATE : public D3D12_TILED_RESOURCE_COORDINATE {)",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE()"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE(const D3D12_TILED_RESOURCE_COORDINATE &o) : D3D12_TILED_RESOURCE_COORDINATE(o)"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE(UINT x, UINT y, UINT z, UINT subresource)"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (X = x ; Y = y ; Z = z ; Subresource = subresource ; } } ; struct CD3DX12_TILE_REGION_SIZE : public D3D12_TILE_REGION_SIZE {)",
    "insertText": "CD3DX12_TILE_REGION_SIZE()"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILE_REGION_SIZE(const D3D12_TILE_REGION_SIZE &o) : D3D12_TILE_REGION_SIZE(o)"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILE_REGION_SIZE(UINT numTiles, BOOL useBox, UINT width, UINT16 height, UINT16 depth)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (NumTiles = numTiles ; UseBox = useBox ; Width = width ; Height = height ; Depth = depth ; } } ; struct CD3DX12_SUBRESOURCE_TILING : public D3D12_SUBRESOURCE_TILING {)",
    "insertText": "CD3DX12_SUBRESOURCE_TILING()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_TILING(const D3D12_SUBRESOURCE_TILING &o) : D3D12_SUBRESOURCE_TILING(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_TILING(UINT widthInTiles, UINT16 heightInTiles, UINT16 depthInTiles, UINT startTileIndexInOverallResource)"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (WidthInTiles = widthInTiles ; HeightInTiles = heightInTiles ; DepthInTiles = depthInTiles ; StartTileIndexInOverallResource = startTileIndexInOverallResource ; } } ; struct CD3DX12_TILE_SHAPE : public D3D12_TILE_SHAPE {)",
    "insertText": "CD3DX12_TILE_SHAPE()"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILE_SHAPE(const D3D12_TILE_SHAPE &o) : D3D12_TILE_SHAPE(o)"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILE_SHAPE(UINT widthInTexels, UINT heightInTexels, UINT depthInTexels)"
  },
  {
    "label": "CD3DX12_RESOURCE_BARRIER()",
    "kind": "Method",
    "detail": "Function (WidthInTexels = widthInTexels ; HeightInTexels = heightInTexels ; DepthInTexels = depthInTexels ; } } ; struct CD3DX12_RESOURCE_BARRIER : public D3D12_RESOURCE_BARRIER {)",
    "insertText": "CD3DX12_RESOURCE_BARRIER()"
  },
  {
    "label": "CD3DX12_RESOURCE_BARRIER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RESOURCE_BARRIER(const D3D12_RESOURCE_BARRIER &o) : D3D12_RESOURCE_BARRIER(o)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_BARRIER)",
    "insertText": "Transition(_In_ ID3D12Resource *pResource, D3D12_RESOURCE_STATES stateBefore, D3D12_RESOURCE_STATES stateAfter, UINT subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES, D3D12_RESOURCE_BARRIER_FLAGS flags = D3D12_RESOURCE_BARRIER_FLAG_NONE)"
  },
  {
    "label": "Aliasing()",
    "kind": "Method",
    "detail": "Function (CD3DX12_RESOURCE_BARRIER result = { } ; D3D12_RESOURCE_BARRIER& barrier = result ; result . Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION ; result . Flags = flags ; barrier . Transition . pResource = pResource ; barrier . Transition . StateBefore = stateBefore ; barrier . Transition . StateAfter = stateAfter ; barrier . Transition . Subresource = subresource ; return result ; } CD3DX12_RESOURCE_BARRIER)",
    "insertText": "Aliasing(_In_ ID3D12Resource *pResourceBefore, _In_ ID3D12Resource *pResourceAfter)"
  },
  {
    "label": "UAV()",
    "kind": "Method",
    "detail": "Function (CD3DX12_RESOURCE_BARRIER result = { } ; D3D12_RESOURCE_BARRIER& barrier = result ; result . Type = D3D12_RESOURCE_BARRIER_TYPE_ALIASING ; barrier . Aliasing . pResourceBefore = pResourceBefore ; barrier . Aliasing . pResourceAfter = pResourceAfter ; return result ; } CD3DX12_RESOURCE_BARRIER)",
    "insertText": "UAV(_In_ ID3D12Resource *pResource)"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (CD3DX12_RESOURCE_BARRIER result = { } ; D3D12_RESOURCE_BARRIER& barrier = result ; result . Type = D3D12_RESOURCE_BARRIER_TYPE_UAV ; barrier . UAV . pResource = pResource ; return result ; } } ; struct CD3DX12_PACKED_MIP_INFO : public D3D12_PACKED_MIP_INFO {)",
    "insertText": "CD3DX12_PACKED_MIP_INFO()"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_PACKED_MIP_INFO(const D3D12_PACKED_MIP_INFO &o) : D3D12_PACKED_MIP_INFO(o)"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PACKED_MIP_INFO(UINT8 numStandardMips, UINT8 numPackedMips, UINT numTilesForPackedMips, UINT startTileIndexInOverallResource)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (NumStandardMips = numStandardMips ; NumPackedMips = numPackedMips ; NumTilesForPackedMips = numTilesForPackedMips ; StartTileIndexInOverallResource = startTileIndexInOverallResource ; } } ; struct CD3DX12_SUBRESOURCE_FOOTPRINT : public D3D12_SUBRESOURCE_FOOTPRINT {)",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT(const D3D12_SUBRESOURCE_FOOTPRINT &o) : D3D12_SUBRESOURCE_FOOTPRINT(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT(DXGI_FORMAT format, UINT width, UINT height, UINT depth, UINT rowPitch)"
  },
  {
    "label": "Depth()",
    "kind": "Method",
    "detail": "Function (Height = resDesc . Height ;)",
    "insertText": "Depth(resDesc.Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE3D ? resDesc.DepthOrArraySize : 1)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (RowPitch = rowPitch ; } } ; struct CD3DX12_TEXTURE_COPY_LOCATION : public D3D12_TEXTURE_COPY_LOCATION {)",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION()"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(const D3D12_TEXTURE_COPY_LOCATION &o) : D3D12_TEXTURE_COPY_LOCATION(o)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource *pRes)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX ; PlacedFootprint = { } ; })",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource *pRes, D3D12_PLACED_SUBRESOURCE_FOOTPRINT const &Footprint)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT ; PlacedFootprint = Footprint ; })",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource *pRes, UINT Sub)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX ; PlacedFootprint = { } ; SubresourceIndex = Sub ; } } ; struct CD3DX12_DESCRIPTOR_RANGE : public D3D12_DESCRIPTOR_RANGE {)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE()"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE(const D3D12_DESCRIPTOR_RANGE &o) : D3D12_DESCRIPTOR_RANGE(o)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(rangeType, numDescriptors, baseShaderRegister, registerSpace, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, rangeType, numDescriptors, baseShaderRegister, registerSpace, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_DESCRIPTOR_RANGE &range, D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (range . RangeType = rangeType ; range . NumDescriptors = numDescriptors ; range . BaseShaderRegister = baseShaderRegister ; range . RegisterSpace = registerSpace ; range . OffsetInDescriptorsFromTableStart = offsetInDescriptorsFromTableStart ; } } ; struct CD3DX12_ROOT_DESCRIPTOR_TABLE : public D3D12_ROOT_DESCRIPTOR_TABLE {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE(const D3D12_ROOT_DESCRIPTOR_TABLE &o) : D3D12_ROOT_DESCRIPTOR_TABLE(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE *_pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(numDescriptorRanges, _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE *_pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, numDescriptorRanges, _pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR_TABLE &rootDescriptorTable, UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE *_pDescriptorRanges)"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (rootDescriptorTable . NumDescriptorRanges = numDescriptorRanges ; rootDescriptorTable . pDescriptorRanges = _pDescriptorRanges ; } } ; struct CD3DX12_ROOT_CONSTANTS : public D3D12_ROOT_CONSTANTS {)",
    "insertText": "CD3DX12_ROOT_CONSTANTS()"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_CONSTANTS(const D3D12_ROOT_CONSTANTS &o) : D3D12_ROOT_CONSTANTS(o)"
  },
  {
    "label": "CD3DX12_ROOT_CONSTANTS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_CONSTANTS(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_CONSTANTS &rootConstants, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (rootConstants . Num32BitValues = num32BitValues ; rootConstants . ShaderRegister = shaderRegister ; rootConstants . RegisterSpace = registerSpace ; } } ; struct CD3DX12_ROOT_DESCRIPTOR : public D3D12_ROOT_DESCRIPTOR {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR(const D3D12_ROOT_DESCRIPTOR &o) : D3D12_ROOT_DESCRIPTOR(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR(UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR &table, UINT shaderRegister, UINT registerSpace = 0)"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (table . ShaderRegister = shaderRegister ; table . RegisterSpace = registerSpace ; } } ; struct CD3DX12_ROOT_PARAMETER : public D3D12_ROOT_PARAMETER {)",
    "insertText": "CD3DX12_ROOT_PARAMETER()"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_PARAMETER(const D3D12_ROOT_PARAMETER &o) : D3D12_ROOT_PARAMETER(o)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE *pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.DescriptorTable, numDescriptorRanges, pDescriptorRanges)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Constants, num32BitValues, shaderRegister, registerSpace)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_CBV ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Descriptor, shaderRegister, registerSpace)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(_Out_ D3D12_ROOT_PARAMETER &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE *pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsDescriptorTable(*this, numDescriptorRanges, pDescriptorRanges, visibility)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstants(*this, num32BitValues, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstantBufferView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsShaderResourceView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsUnorderedAccessView(*this, shaderRegister, registerSpace, visibility)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_STATIC_SAMPLER_DESC : public D3D12_STATIC_SAMPLER_DESC {)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC()"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC(const D3D12_STATIC_SAMPLER_DESC &o) : D3D12_STATIC_SAMPLER_DESC(o)"
  },
  {
    "label": "CD3DX12_STATIC_SAMPLER_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATIC_SAMPLER_DESC(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_STATIC_SAMPLER_DESC &samplerDesc, UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (samplerDesc . ShaderRegister = shaderRegister ; samplerDesc . Filter = filter ; samplerDesc . AddressU = addressU ; samplerDesc . AddressV = addressV ; samplerDesc . AddressW = addressW ; samplerDesc . MipLODBias = mipLODBias ; samplerDesc . MaxAnisotropy = maxAnisotropy ; samplerDesc . ComparisonFunc = comparisonFunc ; samplerDesc . BorderColor = borderColor ; samplerDesc . MinLOD = minLOD ; samplerDesc . MaxLOD = maxLOD ; samplerDesc . ShaderVisibility = shaderVisibility ; samplerDesc . RegisterSpace = registerSpace ; } void)",
    "insertText": "Init(UINT shaderRegister, D3D12_FILTER filter = D3D12_FILTER_ANISOTROPIC, D3D12_TEXTURE_ADDRESS_MODE addressU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addressW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, FLOAT mipLODBias = 0, UINT maxAnisotropy = 16, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE, FLOAT minLOD = 0.f, FLOAT maxLOD = D3D12_FLOAT32_MAX, D3D12_SHADER_VISIBILITY shaderVisibility = D3D12_SHADER_VISIBILITY_ALL, UINT registerSpace = 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, borderColor, minLOD, maxLOD, shaderVisibility, registerSpace)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_ROOT_SIGNATURE_DESC : public D3D12_ROOT_SIGNATURE_DESC {)",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC()"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC &o) : D3D12_ROOT_SIGNATURE_DESC(o)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_SIGNATURE_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (desc . NumParameters = numParameters ; desc . pParameters = _pParameters ; desc . NumStaticSamplers = numStaticSamplers ; desc . pStaticSamplers = _pStaticSamplers ; desc . Flags = flags ; } } ; struct CD3DX12_DESCRIPTOR_RANGE1 : public D3D12_DESCRIPTOR_RANGE1 {)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1()"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1(const D3D12_DESCRIPTOR_RANGE1 &o) : D3D12_DESCRIPTOR_RANGE1(o)"
  },
  {
    "label": "CD3DX12_DESCRIPTOR_RANGE1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DESCRIPTOR_RANGE1(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(rangeType, numDescriptors, baseShaderRegister, registerSpace, flags, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, rangeType, numDescriptors, baseShaderRegister, registerSpace, flags, offsetInDescriptorsFromTableStart)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_DESCRIPTOR_RANGE1 &range, D3D12_DESCRIPTOR_RANGE_TYPE rangeType, UINT numDescriptors, UINT baseShaderRegister, UINT registerSpace = 0, D3D12_DESCRIPTOR_RANGE_FLAGS flags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE, UINT offsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (range . RangeType = rangeType ; range . NumDescriptors = numDescriptors ; range . BaseShaderRegister = baseShaderRegister ; range . RegisterSpace = registerSpace ; range . Flags = flags ; range . OffsetInDescriptorsFromTableStart = offsetInDescriptorsFromTableStart ; } } ; struct CD3DX12_ROOT_DESCRIPTOR_TABLE1 : public D3D12_ROOT_DESCRIPTOR_TABLE1 {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1(const D3D12_ROOT_DESCRIPTOR_TABLE1 &o) : D3D12_ROOT_DESCRIPTOR_TABLE1(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR_TABLE1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR_TABLE1(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1 *_pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1 *_pDescriptorRanges)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR_TABLE1 &rootDescriptorTable, UINT numDescriptorRanges, _In_reads_opt_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1 *_pDescriptorRanges)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (rootDescriptorTable . NumDescriptorRanges = numDescriptorRanges ; rootDescriptorTable . pDescriptorRanges = _pDescriptorRanges ; } } ; struct CD3DX12_ROOT_DESCRIPTOR1 : public D3D12_ROOT_DESCRIPTOR1 {)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1()"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1(const D3D12_ROOT_DESCRIPTOR1 &o) : D3D12_ROOT_DESCRIPTOR1(o)"
  },
  {
    "label": "CD3DX12_ROOT_DESCRIPTOR1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_ROOT_DESCRIPTOR1(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(shaderRegister, registerSpace, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(*this, shaderRegister, registerSpace, flags)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(_Out_ D3D12_ROOT_DESCRIPTOR1 &table, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1()",
    "kind": "Method",
    "detail": "Function (table . ShaderRegister = shaderRegister ; table . RegisterSpace = registerSpace ; table . Flags = flags ; } } ; struct CD3DX12_ROOT_PARAMETER1 : public D3D12_ROOT_PARAMETER1 {)",
    "insertText": "CD3DX12_ROOT_PARAMETER1()"
  },
  {
    "label": "CD3DX12_ROOT_PARAMETER1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_ROOT_PARAMETER1(const D3D12_ROOT_PARAMETER1 &o) : D3D12_ROOT_PARAMETER1(o)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1 *pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstants(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT num32BitValues, UINT shaderRegister, UINT registerSpace = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (rootParam . ParameterType = D3D12_ROOT_PARAMETER_TYPE_CBV ; rootParam . ShaderVisibility = visibility ;)",
    "insertText": "Init(rootParam.Descriptor, shaderRegister, registerSpace, flags)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(_Out_ D3D12_ROOT_PARAMETER1 &rootParam, UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsDescriptorTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsDescriptorTable(UINT numDescriptorRanges, _In_reads_(numDescriptorRanges) const D3D12_DESCRIPTOR_RANGE1 *pDescriptorRanges, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsConstantBufferView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsConstantBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsConstantBufferView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsShaderResourceView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsShaderResourceView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitAsUnorderedAccessView(UINT shaderRegister, UINT registerSpace = 0, D3D12_ROOT_DESCRIPTOR_FLAGS flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL)"
  },
  {
    "label": "InitAsUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsUnorderedAccessView(*this, shaderRegister, registerSpace, flags, visibility)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC : public D3D12_VERSIONED_ROOT_SIGNATURE_DESC {)",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_VERSIONED_ROOT_SIGNATURE_DESC &o) : D3D12_VERSIONED_ROOT_SIGNATURE_DESC(o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC &o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (Version = D3D_ROOT_SIGNATURE_VERSION_1_0 ; Desc_1_0 = o ; })",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(const D3D12_ROOT_SIGNATURE_DESC1 &o)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (Version = D3D_ROOT_SIGNATURE_VERSION_1_1 ; Desc_1_1 = o ; })",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_0(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1 *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_0(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_0(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init_1_0()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_0(_Out_ D3D12_VERSIONED_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (desc . Version = D3D_ROOT_SIGNATURE_VERSION_1_0 ; desc . Desc_1_0 . NumParameters = numParameters ; desc . Desc_1_0 . pParameters = _pParameters ; desc . Desc_1_0 . NumStaticSamplers = numStaticSamplers ; desc . Desc_1_0 . pStaticSamplers = _pStaticSamplers ; desc . Desc_1_0 . Flags = flags ; } void)",
    "insertText": "Init_1_1(UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1 *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init_1_1(*this, numParameters, _pParameters, numStaticSamplers, _pStaticSamplers, flags)"
  },
  {
    "label": "Init_1_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init_1_1(_Out_ D3D12_VERSIONED_ROOT_SIGNATURE_DESC &desc, UINT numParameters, _In_reads_opt_(numParameters) const D3D12_ROOT_PARAMETER1 *_pParameters, UINT numStaticSamplers = 0, _In_reads_opt_(numStaticSamplers) const D3D12_STATIC_SAMPLER_DESC *_pStaticSamplers = nullptr, D3D12_ROOT_SIGNATURE_FLAGS flags = D3D12_ROOT_SIGNATURE_FLAG_NONE)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (desc . Version = D3D_ROOT_SIGNATURE_VERSION_1_1 ; desc . Desc_1_1 . NumParameters = numParameters ; desc . Desc_1_1 . pParameters = _pParameters ; desc . Desc_1_1 . NumStaticSamplers = numStaticSamplers ; desc . Desc_1_1 . pStaticSamplers = _pStaticSamplers ; desc . Desc_1_1 . Flags = flags ; } } ; struct CD3DX12_CPU_DESCRIPTOR_HANDLE : public D3D12_CPU_DESCRIPTOR_HANDLE {)",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE()"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(const D3D12_CPU_DESCRIPTOR_HANDLE &o) : D3D12_CPU_DESCRIPTOR_HANDLE(o)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (ptr = 0 ; })",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &other, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(other, offsetScaledByIncrementSize)"
  },
  {
    "label": "CD3DX12_CPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_CPU_DESCRIPTOR_HANDLE(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &other, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(other, offsetInDescriptors, descriptorIncrementSize)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_CPU_DESCRIPTOR_HANDLE&)",
    "insertText": "Offset(INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "SIZE_T(INT64(ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "SIZE_T(INT64(ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_CPU_DESCRIPTOR_HANDLE&)",
    "insertText": "operator(const D3D12_CPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (ptr = other . ptr ; return* this ; } void)",
    "insertText": "InitOffsetted(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(*this, base, offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOffsetted(*this, base, offsetInDescriptors, descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_CPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "SIZE_T(INT64(base.ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_CPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_CPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "SIZE_T(INT64(base.ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (} } ; struct CD3DX12_GPU_DESCRIPTOR_HANDLE : public D3D12_GPU_DESCRIPTOR_HANDLE {)",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE()"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(const D3D12_GPU_DESCRIPTOR_HANDLE &o) : D3D12_GPU_DESCRIPTOR_HANDLE(o)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (ptr = 0 ; })",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &other, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "CD3DX12_GPU_DESCRIPTOR_HANDLE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GPU_DESCRIPTOR_HANDLE(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &other, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "UINT64(INT64(ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (ptr =)",
    "insertText": "UINT64(INT64(ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_GPU_DESCRIPTOR_HANDLE&)",
    "insertText": "operator(const D3D12_GPU_DESCRIPTOR_HANDLE &other)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (ptr = other . ptr ; return* this ; } void)",
    "insertText": "InitOffsetted(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_GPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetScaledByIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "UINT64(INT64(base.ptr) + INT64(offsetScaledByIncrementSize))"
  },
  {
    "label": "InitOffsetted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitOffsetted(_Out_ D3D12_GPU_DESCRIPTOR_HANDLE &handle, _In_ const D3D12_GPU_DESCRIPTOR_HANDLE &base, INT offsetInDescriptors, UINT descriptorIncrementSize)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (handle . ptr =)",
    "insertText": "UINT64(INT64(base.ptr) + INT64(offsetInDescriptors) * INT64(descriptorIncrementSize))"
  },
  {
    "label": "D3D12CalcSubresource()",
    "kind": "Method",
    "detail": "Function (} } ; UINT)",
    "insertText": "D3D12CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT PlaneSlice, UINT MipLevels, UINT ArraySize)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MipSlice = static_cast<)",
    "insertText": "T(Subresource % MipLevels)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (ArraySlice = static_cast<)",
    "insertText": "U((Subresource / MipLevels) % ArraySize)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (PlaneSlice = static_cast<)",
    "insertText": "V(Subresource / (MipLevels * ArraySize))"
  },
  {
    "label": "D3D12GetFormatPlaneCount()",
    "kind": "Method",
    "detail": "Function (} UINT8)",
    "insertText": "D3D12GetFormatPlaneCount(_In_ ID3D12Device *pDevice, DXGI_FORMAT Format)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (D3D12_FEATURE_DATA_FORMAT_INFO formatInfo = { Format,0 } ;)",
    "insertText": "if(FAILED(pDevice->CheckFeatureSupport(D3D12_FEATURE_FORMAT_INFO, &formatInfo, sizeof(formatInfo))))"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RESOURCE_DESC(const D3D12_RESOURCE_DESC &o) : D3D12_RESOURCE_DESC(o)"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RESOURCE_DESC(D3D12_RESOURCE_DIMENSION dimension, UINT64 alignment, UINT64 width, UINT height, UINT16 depthOrArraySize, UINT16 mipLevels, DXGI_FORMAT format, UINT sampleCount, UINT sampleQuality, D3D12_TEXTURE_LAYOUT layout, D3D12_RESOURCE_FLAGS flags)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (Dimension = dimension ; Alignment = alignment ; Width = width ; Height = height ; DepthOrArraySize = depthOrArraySize ; MipLevels = mipLevels ; Format = format ; SampleDesc . Count = sampleCount ; SampleDesc . Quality = sampleQuality ; Layout = layout ; Flags = flags ; } CD3DX12_RESOURCE_DESC)",
    "insertText": "Buffer(const D3D12_RESOURCE_ALLOCATION_INFO &resAllocInfo, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Buffer(UINT64 width, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, UINT64 alignment = 0)"
  },
  {
    "label": "Tex1D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex1D(DXGI_FORMAT format, UINT64 width, UINT16 arraySize = 1, UINT16 mipLevels = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Tex2D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex2D(DXGI_FORMAT format, UINT64 width, UINT height, UINT16 arraySize = 1, UINT16 mipLevels = 0, UINT sampleCount = 1, UINT sampleQuality = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Tex3D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex3D(DXGI_FORMAT format, UINT64 width, UINT height, UINT16 depth, UINT16 mipLevels = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Depth()",
    "kind": "Method",
    "detail": "Function (} UINT16)",
    "insertText": "Depth()"
  },
  {
    "label": "ArraySize()",
    "kind": "Method",
    "detail": "Function (} UINT16)",
    "insertText": "ArraySize()"
  },
  {
    "label": "PlaneCount()",
    "kind": "Method",
    "detail": "Function (} UINT8)",
    "insertText": "PlaneCount(_In_ ID3D12Device *pDevice)"
  },
  {
    "label": "Subresources()",
    "kind": "Method",
    "detail": "Function (} UINT)",
    "insertText": "Subresources(_In_ ID3D12Device *pDevice)"
  },
  {
    "label": "CalcSubresource()",
    "kind": "Method",
    "detail": "Function (} UINT)",
    "insertText": "CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT PlaneSlice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const D3D12_RESOURCE_DESC &l, const D3D12_RESOURCE_DESC &r)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (} struct CD3DX12_VIEW_INSTANCING_DESC : public D3D12_VIEW_INSTANCING_DESC {)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC()"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(const D3D12_VIEW_INSTANCING_DESC &o) : D3D12_VIEW_INSTANCING_DESC(o)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (ViewInstanceCount = 0 ; pViewInstanceLocations = nullptr ; Flags = D3D12_VIEW_INSTANCING_FLAG_NONE ; })",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(UINT InViewInstanceCount, const D3D12_VIEW_INSTANCE_LOCATION *InViewInstanceLocations, D3D12_VIEW_INSTANCING_FLAGS InFlags)"
  },
  {
    "label": "MemcpySubresource()",
    "kind": "Method",
    "detail": "Function (ViewInstanceCount = InViewInstanceCount ; pViewInstanceLocations = InViewInstanceLocations ; Flags = InFlags ; } } ; void)",
    "insertText": "MemcpySubresource(_In_ const D3D12_MEMCPY_DEST *pDest, _In_ const D3D12_SUBRESOURCE_DATA *pSrc, SIZE_T RowSizeInBytes, UINT NumRows, UINT NumSlices)"
  },
  {
    "label": "BYTE()",
    "kind": "Method",
    "detail": "Function (SlicePitch * z)",
    "insertText": "BYTE(pDest->pData)"
  },
  {
    "label": "BYTE()",
    "kind": "Method",
    "detail": "Function (auto pSrcSlice = reinterpret_cast<const)",
    "insertText": "BYTE(pSrc->pData) + pSrc->SlicePitch * LONG_PTR(z)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(pDestSlice + pDest->RowPitch * y, pSrcSlice + pSrc->RowPitch * LONG_PTR(y), RowSizeInBytes)"
  },
  {
    "label": "GetRequiredIntermediateSize()",
    "kind": "Method",
    "detail": "Function (} } } UINT64)",
    "insertText": "GetRequiredIntermediateSize(_In_ ID3D12Resource *pDestinationResource, _In_range_(0, D3D12_REQ_SUBRESOURCES) UINT FirstSubresource, _In_range_(0, D3D12_REQ_SUBRESOURCES - FirstSubresource) UINT NumSubresources)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (auto Desc = pDestinationResource ->)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (UINT64 RequiredSize = 0 ; ID3D12Device* pDevice = nullptr ; pDestinationResource ->)",
    "insertText": "GetDevice(IID_ID3D12Device, reinterpret_cast<void **>(&pDevice))"
  },
  {
    "label": "GetCopyableFootprints()",
    "kind": "Method",
    "detail": "Function (pDevice ->)",
    "insertText": "GetCopyableFootprints(&Desc, FirstSubresource, NumSubresources, 0, nullptr, nullptr, nullptr, &RequiredSize)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (pDevice ->)",
    "insertText": "Release()"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (D3D12_MEMCPY_DEST DestData = { pData + pLayouts [ i ] . Offset,pLayouts [ i ] . Footprint . RowPitch,)",
    "insertText": "SIZE_T(pLayouts[i].Footprint.RowPitch) * SIZE_T(pNumRows[i])"
  },
  {
    "label": "MemcpySubresource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemcpySubresource(&DestData, &pSrcData[i], static_cast<SIZE_T>(pRowSizesInBytes[i]), pNumRows[i], pLayouts[i].Footprint.Depth)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (} pIntermediate ->)",
    "insertText": "Unmap(0, nullptr)"
  },
  {
    "label": "CopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (pCmdList ->)",
    "insertText": "CopyBufferRegion(pDestinationResource, 0, pIntermediate, pLayouts[0].Offset, pLayouts[0].Footprint.Width)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(UINT i = 0; i < NumSubresources; ++i)"
  },
  {
    "label": "Dst()",
    "kind": "Method",
    "detail": "Function (CD3DX12_TEXTURE_COPY_LOCATION)",
    "insertText": "Dst(pDestinationResource, i + FirstSubresource)"
  },
  {
    "label": "Src()",
    "kind": "Method",
    "detail": "Function (CD3DX12_TEXTURE_COPY_LOCATION)",
    "insertText": "Src(pIntermediate, pLayouts[i])"
  },
  {
    "label": "CopyTextureRegion()",
    "kind": "Method",
    "detail": "Function (pCmdList ->)",
    "insertText": "CopyTextureRegion(&Dst, 0, 0, 0, &Src, nullptr)"
  },
  {
    "label": "UpdateSubresources()",
    "kind": "Method",
    "detail": "Function (} } return RequiredSize ; } UINT64)",
    "insertText": "UpdateSubresources(_In_ ID3D12GraphicsCommandList *pCmdList, _In_ ID3D12Resource *pDestinationResource, _In_ ID3D12Resource *pIntermediate, UINT64 IntermediateOffset, _In_range_(0, D3D12_REQ_SUBRESOURCES) UINT FirstSubresource, _In_range_(0, D3D12_REQ_SUBRESOURCES - FirstSubresource) UINT NumSubresources, _In_reads_(NumSubresources) D3D12_SUBRESOURCE_DATA *pSrcData)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (UINT64 RequiredSize = 0 ; UINT64 MemToAlloc = static_cast<)",
    "insertText": "UINT64(sizeof(D3D12_PLACED_SUBRESOURCE_FOOTPRINT) + sizeof(UINT) + sizeof(UINT64))"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (UINT64* pRowSizesInBytes = reinterpret_cast<)",
    "insertText": "UINT64(pLayouts + NumSubresources)"
  },
  {
    "label": "UINT()",
    "kind": "Method",
    "detail": "Function (UINT* pNumRows = reinterpret_cast<)",
    "insertText": "UINT(pRowSizesInBytes + NumSubresources)"
  },
  {
    "label": "GetCopyableFootprints()",
    "kind": "Method",
    "detail": "Function (pDevice ->)",
    "insertText": "GetCopyableFootprints(&Desc, FirstSubresource, NumSubresources, IntermediateOffset, pLayouts, pNumRows, pRowSizesInBytes, &RequiredSize)"
  },
  {
    "label": "UpdateSubresources()",
    "kind": "Method",
    "detail": "Function (UINT64 Result =)",
    "insertText": "UpdateSubresources(pCmdList, pDestinationResource, pIntermediate, FirstSubresource, NumSubresources, RequiredSize, pLayouts, pNumRows, pRowSizesInBytes, pSrcData)"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapFree(GetProcessHeap(), 0, pMem)"
  },
  {
    "label": "GetCopyableFootprints()",
    "kind": "Method",
    "detail": "Function (pDevice ->)",
    "insertText": "GetCopyableFootprints(&Desc, FirstSubresource, NumSubresources, IntermediateOffset, Layouts, NumRows, RowSizesInBytes, &RequiredSize)"
  },
  {
    "label": "D3D12IsLayoutOpaque()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "D3D12IsLayoutOpaque(D3D12_TEXTURE_LAYOUT Layout)"
  },
  {
    "label": "D3DX12SerializeVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "D3DX12SerializeVersionedRootSignature(_In_ const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *pRootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION MaxVersion, _Outptr_ ID3DBlob **ppBlob, _Always_(_Outptr_opt_result_maybenull_) ID3DBlob **ppErrorBlob)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (* ppErrorBlob = nullptr ; })",
    "insertText": "switch(MaxVersion)"
  },
  {
    "label": "pParameters()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pParameters(ParametersSize > 0) ? HeapAlloc(GetProcessHeap(), 0, ParametersSize)"
  },
  {
    "label": "D3D12_ROOT_PARAMETER()",
    "kind": "Method",
    "detail": "Function (hr = E_OUTOFMEMORY ; } auto pParameters_1_0 = reinterpret_cast<)",
    "insertText": "D3D12_ROOT_PARAMETER(pParameters)"
  },
  {
    "label": "__analysis_assume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__analysis_assume(ParametersSize == sizeof(D3D12_ROOT_PARAMETER) * desc_1_1.NumParameters)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (pParameters_1_0 [ n ] . ParameterType = desc_1_1 . pParameters [ n ] . ParameterType ; pParameters_1_0 [ n ] . ShaderVisibility = desc_1_1 . pParameters [ n ] . ShaderVisibility ;)",
    "insertText": "switch(desc_1_1.pParameters[n].ParameterType)"
  },
  {
    "label": "pDescriptorRanges()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pDescriptorRanges(DescriptorRangesSize > 0 && SUCCEEDED(hr)) ? HeapAlloc(GetProcessHeap(), 0, DescriptorRangesSize)"
  },
  {
    "label": "D3D12_DESCRIPTOR_RANGE()",
    "kind": "Method",
    "detail": "Function (hr = E_OUTOFMEMORY ; } auto pDescriptorRanges_1_0 = reinterpret_cast<)",
    "insertText": "D3D12_DESCRIPTOR_RANGE(pDescriptorRanges)"
  },
  {
    "label": "__analysis_assume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__analysis_assume(DescriptorRangesSize == sizeof(D3D12_DESCRIPTOR_RANGE) * table_1_1.NumDescriptorRanges)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pDescriptorRanges_1_0 [ x ] . BaseShaderRegister = table_1_1 . pDescriptorRanges [ x ] . BaseShaderRegister ; pDescriptorRanges_1_0 [ x ] . NumDescriptors = table_1_1 . pDescriptorRanges [ x ] . NumDescriptors ; pDescriptorRanges_1_0 [ x ] . OffsetInDescriptorsFromTableStart = table_1_1 . pDescriptorRanges [ x ] . OffsetInDescriptorsFromTableStart ; pDescriptorRanges_1_0 [ x ] . RangeType = table_1_1 . pDescriptorRanges [ x ] . RangeType ; pDescriptorRanges_1_0 [ x ] . RegisterSpace = table_1_1 . pDescriptorRanges [ x ] . RegisterSpace ; } } D3D12_ROOT_DESCRIPTOR_TABLE& table_1_0 = pParameters_1_0 [ n ] . DescriptorTable ; table_1_0 . NumDescriptorRanges = table_1_1 . NumDescriptorRanges ; table_1_0 . pDescriptorRanges = pDescriptorRanges_1_0 ; } } })",
    "insertText": "if(SUCCEEDED(hr))"
  },
  {
    "label": "desc_1_0()",
    "kind": "Method",
    "detail": "Function (CD3DX12_ROOT_SIGNATURE_DESC)",
    "insertText": "desc_1_0(desc_1_1.NumParameters, pParameters_1_0, desc_1_1.NumStaticSamplers, desc_1_1.pStaticSamplers, desc_1_1.Flags)"
  },
  {
    "label": "D3D12SerializeRootSignature()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "D3D12SerializeRootSignature(&desc_1_0, D3D_ROOT_SIGNATURE_VERSION_1, ppBlob, ppErrorBlob)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pParameters)"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapFree(GetProcessHeap(), 0, reinterpret_cast<void *>(const_cast<D3D12_DESCRIPTOR_RANGE *>( pParameters_1_0[n].DescriptorTable.pDescriptorRanges)))"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "HeapFree(GetProcessHeap(), 0, pParameters)"
  },
  {
    "label": "D3D12SerializeVersionedRootSignature()",
    "kind": "Method",
    "detail": "Function (} return hr ; } } break ; case D3D_ROOT_SIGNATURE_VERSION_1_1 : return)",
    "insertText": "D3D12SerializeVersionedRootSignature(pRootSignatureDesc, ppBlob, ppErrorBlob)"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (} return E_INVALIDARG ; } struct CD3DX12_RT_FORMAT_ARRAY : public D3D12_RT_FORMAT_ARRAY {)",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY()"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY(const D3D12_RT_FORMAT_ARRAY &o) : D3D12_RT_FORMAT_ARRAY(o)"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY(_In_reads_(NumFormats) const DXGI_FORMAT *pFormats, UINT NumFormats)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (NumRenderTargets = NumFormats ;)",
    "insertText": "memcpy(RTFormats, pFormats, sizeof(RTFormats))"
  },
  {
    "label": "UINT()",
    "kind": "Method",
    "detail": "Function (} } ; struct DefaultSampleMask { operator)",
    "insertText": "UINT()"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (private : D3D12_PIPELINE_STATE_SUBOBJECT_TYPE _Type ; InnerStructType _Inner ; public :)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT() noexcept : _Type(Type), _Inner(DefaultArg())"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT(InnerStructType const &i) : _Type(Type), _Inner(i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT&)",
    "insertText": "operator(InnerStructType const &i)"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (_Type = Type ; _Inner = i ; return* this ; } operator InnerStructType)",
    "insertText": "const()"
  },
  {
    "label": "FlagsCb()",
    "kind": "Method",
    "detail": "Function (typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<UINT,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK> CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<ID3D12RootSignature*,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE> CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_INPUT_LAYOUT_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT> CD3DX12_PIPELINE_STATE_STREAM_INPUT_LAYOUT ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_INDEX_BUFFER_STRIP_CUT_VALUE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE> CD3DX12_PIPELINE_STATE_STREAM_IB_STRIP_CUT_VALUE ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_PRIMITIVE_TOPOLOGY_TYPE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY> CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS> CD3DX12_PIPELINE_STATE_STREAM_VS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS> CD3DX12_PIPELINE_STATE_STREAM_GS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_STREAM_OUTPUT_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT> CD3DX12_PIPELINE_STATE_STREAM_STREAM_OUTPUT ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS> CD3DX12_PIPELINE_STATE_STREAM_HS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS> CD3DX12_PIPELINE_STATE_STREAM_DS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS> CD3DX12_PIPELINE_STATE_STREAM_PS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_SHADER_BYTECODE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS> CD3DX12_PIPELINE_STATE_STREAM_CS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<CD3DX12_BLEND_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND,CD3DX12_DEFAULT> CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<CD3DX12_DEPTH_STENCIL_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL,CD3DX12_DEFAULT> CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<CD3DX12_DEPTH_STENCIL_DESC1,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1,CD3DX12_DEFAULT> CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1 ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<DXGI_FORMAT,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT> CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<CD3DX12_RASTERIZER_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER,CD3DX12_DEFAULT> CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_RT_FORMAT_ARRAY,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS> CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<DXGI_SAMPLE_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC,DefaultSampleDesc> CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<UINT,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK,DefaultSampleMask> CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<D3D12_CACHED_PIPELINE_STATE,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO> CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO ; typedef CD3DX12_PIPELINE_STATE_STREAM_SUBOBJECT<CD3DX12_VIEW_INSTANCING_DESC,D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING,CD3DX12_DEFAULT> CD3DX12_PIPELINE_STATE_STREAM_VIEW_INSTANCING ; struct ID3DX12PipelineParserCallbacks { void)",
    "insertText": "FlagsCb(D3D12_PIPELINE_STATE_FLAGS)"
  },
  {
    "label": "NodeMaskCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NodeMaskCb(UINT)"
  },
  {
    "label": "RootSignatureCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RootSignatureCb(ID3D12RootSignature *)"
  },
  {
    "label": "InputLayoutCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InputLayoutCb(const D3D12_INPUT_LAYOUT_DESC &)"
  },
  {
    "label": "IBStripCutValueCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IBStripCutValueCb(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE)"
  },
  {
    "label": "PrimitiveTopologyTypeCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrimitiveTopologyTypeCb(D3D12_PRIMITIVE_TOPOLOGY_TYPE)"
  },
  {
    "label": "VSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "GSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "StreamOutputCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StreamOutputCb(const D3D12_STREAM_OUTPUT_DESC &)"
  },
  {
    "label": "HSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "DSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "PSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "CSCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CSCb(const D3D12_SHADER_BYTECODE &)"
  },
  {
    "label": "BlendStateCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendStateCb(const D3D12_BLEND_DESC &)"
  },
  {
    "label": "DepthStencilStateCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthStencilStateCb(const D3D12_DEPTH_STENCIL_DESC &)"
  },
  {
    "label": "DepthStencilState1Cb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthStencilState1Cb(const D3D12_DEPTH_STENCIL_DESC1 &)"
  },
  {
    "label": "DSVFormatCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DSVFormatCb(DXGI_FORMAT)"
  },
  {
    "label": "RasterizerStateCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RasterizerStateCb(const D3D12_RASTERIZER_DESC &)"
  },
  {
    "label": "RTVFormatsCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RTVFormatsCb(const D3D12_RT_FORMAT_ARRAY &)"
  },
  {
    "label": "SampleDescCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SampleDescCb(const DXGI_SAMPLE_DESC &)"
  },
  {
    "label": "SampleMaskCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SampleMaskCb(UINT)"
  },
  {
    "label": "ViewInstancingCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ViewInstancingCb(const D3D12_VIEW_INSTANCING_DESC &)"
  },
  {
    "label": "CachedPSOCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CachedPSOCb(const D3D12_CACHED_PIPELINE_STATE &)"
  },
  {
    "label": "ErrorBadInputParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ErrorBadInputParameter(UINT)"
  },
  {
    "label": "ErrorDuplicateSubobject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ErrorDuplicateSubobject(D3D12_PIPELINE_STATE_SUBOBJECT_TYPE)"
  },
  {
    "label": "ErrorUnknownSubobject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ErrorUnknownSubobject(UINT)"
  },
  {
    "label": "ID3DX12PipelineParserCallbacks()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ID3DX12PipelineParserCallbacks()"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM1()",
    "kind": "Method",
    "detail": "Function (} ; struct CD3DX12_PIPELINE_STATE_STREAM1 {)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM1()"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM1(const D3D12_GRAPHICS_PIPELINE_STATE_DESC &Desc) : Flags(Desc.Flags), NodeMask(Desc.NodeMask), pRootSignature(Desc.pRootSignature), InputLayout(Desc.InputLayout), IBStripCutValue(Desc.IBStripCutValue), PrimitiveTopologyType(Desc.PrimitiveTopologyType), VS(Desc.VS), GS(Desc.GS), StreamOutput(Desc.StreamOutput), HS(Desc.HS), DS(Desc.DS), PS(Desc.PS), BlendState(CD3DX12_BLEND_DESC(Desc.BlendState)), DepthStencilState(CD3DX12_DEPTH_STENCIL_DESC1(Desc.DepthStencilState)), DSVFormat(Desc.DSVFormat), RasterizerState(CD3DX12_RASTERIZER_DESC(Desc.RasterizerState)), RTVFormats( CD3DX12_RT_FORMAT_ARRAY(Desc.RTVFormats, Desc.NumRenderTargets)), SampleDesc(Desc.SampleDesc), SampleMask(Desc.SampleMask), CachedPSO(Desc.CachedPSO), ViewInstancingDesc(CD3DX12_VIEW_INSTANCING_DESC(CD3DX12_DEFAULT()))"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM1(const D3D12_COMPUTE_PIPELINE_STATE_DESC &Desc) : Flags(Desc.Flags), NodeMask(Desc.NodeMask), pRootSignature(Desc.pRootSignature), CS(CD3DX12_SHADER_BYTECODE(Desc.CS)), CachedPSO(Desc.CachedPSO)"
  },
  {
    "label": "D3D12_DEPTH_STENCIL_DESC1()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "D3D12_DEPTH_STENCIL_DESC1(DepthStencilState)"
  },
  {
    "label": "GraphicsDescV0()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_PIPELINE_STATE_STREAM_FLAGS Flags ; CD3DX12_PIPELINE_STATE_STREAM_NODE_MASK NodeMask ; CD3DX12_PIPELINE_STATE_STREAM_ROOT_SIGNATURE pRootSignature ; CD3DX12_PIPELINE_STATE_STREAM_INPUT_LAYOUT InputLayout ; CD3DX12_PIPELINE_STATE_STREAM_IB_STRIP_CUT_VALUE IBStripCutValue ; CD3DX12_PIPELINE_STATE_STREAM_PRIMITIVE_TOPOLOGY PrimitiveTopologyType ; CD3DX12_PIPELINE_STATE_STREAM_VS VS ; CD3DX12_PIPELINE_STATE_STREAM_GS GS ; CD3DX12_PIPELINE_STATE_STREAM_STREAM_OUTPUT StreamOutput ; CD3DX12_PIPELINE_STATE_STREAM_HS HS ; CD3DX12_PIPELINE_STATE_STREAM_DS DS ; CD3DX12_PIPELINE_STATE_STREAM_PS PS ; CD3DX12_PIPELINE_STATE_STREAM_CS CS ; CD3DX12_PIPELINE_STATE_STREAM_BLEND_DESC BlendState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL1 DepthStencilState ; CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL_FORMAT DSVFormat ; CD3DX12_PIPELINE_STATE_STREAM_RASTERIZER RasterizerState ; CD3DX12_PIPELINE_STATE_STREAM_RENDER_TARGET_FORMATS RTVFormats ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_DESC SampleDesc ; CD3DX12_PIPELINE_STATE_STREAM_SAMPLE_MASK SampleMask ; CD3DX12_PIPELINE_STATE_STREAM_CACHED_PSO CachedPSO ; CD3DX12_PIPELINE_STATE_STREAM_VIEW_INSTANCING ViewInstancingDesc ; D3D12_GRAPHICS_PIPELINE_STATE_DESC)",
    "insertText": "GraphicsDescV0()"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_DESC1()",
    "kind": "Method",
    "detail": "Function (D3D12_GRAPHICS_PIPELINE_STATE_DESC D ; D . Flags = this -> Flags ; D . NodeMask = this -> NodeMask ; D . pRootSignature = this -> pRootSignature ; D . InputLayout = this -> InputLayout ; D . IBStripCutValue = this -> IBStripCutValue ; D . PrimitiveTopologyType = this -> PrimitiveTopologyType ; D . VS = this -> VS ; D . GS = this -> GS ; D . StreamOutput = this -> StreamOutput ; D . HS = this -> HS ; D . DS = this -> DS ; D . PS = this -> PS ; D . BlendState = this -> BlendState ; D . DepthStencilState =)",
    "insertText": "CD3DX12_DEPTH_STENCIL_DESC1(D3D12_DEPTH_STENCIL_DESC1(this->DepthStencilState))"
  },
  {
    "label": "D3D12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (D . DSVFormat = this -> DSVFormat ; D . RasterizerState = this -> RasterizerState ; D . NumRenderTargets =)",
    "insertText": "D3D12_RT_FORMAT_ARRAY(this->RTVFormats)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(D.RTVFormats, D3D12_RT_FORMAT_ARRAY(this->RTVFormats).RTFormats, sizeof(D.RTVFormats))"
  },
  {
    "label": "ComputeDescV0()",
    "kind": "Method",
    "detail": "Function (D . SampleDesc = this -> SampleDesc ; D . SampleMask = this -> SampleMask ; D . CachedPSO = this -> CachedPSO ; return D ; } D3D12_COMPUTE_PIPELINE_STATE_DESC)",
    "insertText": "ComputeDescV0()"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM()",
    "kind": "Method",
    "detail": "Function (D3D12_COMPUTE_PIPELINE_STATE_DESC D ; D . Flags = this -> Flags ; D . NodeMask = this -> NodeMask ; D . pRootSignature = this -> pRootSignature ; D . CS = this -> CS ; D . CachedPSO = this -> CachedPSO ; return D ; } } ; struct CD3DX12_PIPELINE_STATE_STREAM {)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM()"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM(const D3D12_GRAPHICS_PIPELINE_STATE_DESC &Desc) : Flags(Desc.Flags), NodeMask(Desc.NodeMask), pRootSignature(Desc.pRootSignature), InputLayout(Desc.InputLayout), IBStripCutValue(Desc.IBStripCutValue), PrimitiveTopologyType(Desc.PrimitiveTopologyType), VS(Desc.VS), GS(Desc.GS), StreamOutput(Desc.StreamOutput), HS(Desc.HS), DS(Desc.DS), PS(Desc.PS), BlendState(CD3DX12_BLEND_DESC(Desc.BlendState)), DepthStencilState(CD3DX12_DEPTH_STENCIL_DESC1(Desc.DepthStencilState)), DSVFormat(Desc.DSVFormat), RasterizerState(CD3DX12_RASTERIZER_DESC(Desc.RasterizerState)), RTVFormats( CD3DX12_RT_FORMAT_ARRAY(Desc.RTVFormats, Desc.NumRenderTargets)), SampleDesc(Desc.SampleDesc), SampleMask(Desc.SampleMask), CachedPSO(Desc.CachedPSO)"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM(const D3D12_COMPUTE_PIPELINE_STATE_DESC &Desc) : Flags(Desc.Flags), NodeMask(Desc.NodeMask), pRootSignature(Desc.pRootSignature), CS(CD3DX12_SHADER_BYTECODE(Desc.CS)), CachedPSO(Desc.CachedPSO)"
  },
  {
    "label": "CD3DX12_PIPELINE_STATE_STREAM_PARSE_HELPER()",
    "kind": "Method",
    "detail": "Function (D3D12_COMPUTE_PIPELINE_STATE_DESC D ; D . Flags = this -> Flags ; D . NodeMask = this -> NodeMask ; D . pRootSignature = this -> pRootSignature ; D . CS = this -> CS ; D . CachedPSO = this -> CachedPSO ; return D ; } } ; struct CD3DX12_PIPELINE_STATE_STREAM_PARSE_HELPER : public ID3DX12PipelineParserCallbacks { CD3DX12_PIPELINE_STATE_STREAM1 PipelineStream ;)",
    "insertText": "CD3DX12_PIPELINE_STATE_STREAM_PARSE_HELPER() noexcept : SeenDSS(false)"
  },
  {
    "label": "D3D12_DEPTH_STENCIL_DESC1()",
    "kind": "Method",
    "detail": "Function (PipelineStream . PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE ; static_cast<)",
    "insertText": "D3D12_DEPTH_STENCIL_DESC1(PipelineStream.DepthStencilState)"
  },
  {
    "label": "FlagsCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlagsCb(D3D12_PIPELINE_STATE_FLAGS Flags)"
  },
  {
    "label": "NodeMaskCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . Flags = Flags ; } void)",
    "insertText": "NodeMaskCb(UINT NodeMask)"
  },
  {
    "label": "RootSignatureCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . NodeMask = NodeMask ; } void)",
    "insertText": "RootSignatureCb(ID3D12RootSignature *pRootSignature)"
  },
  {
    "label": "InputLayoutCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . pRootSignature = pRootSignature ; } void)",
    "insertText": "InputLayoutCb(const D3D12_INPUT_LAYOUT_DESC &InputLayout)"
  },
  {
    "label": "IBStripCutValueCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . InputLayout = InputLayout ; } void)",
    "insertText": "IBStripCutValueCb(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue)"
  },
  {
    "label": "PrimitiveTopologyTypeCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . IBStripCutValue = IBStripCutValue ; } void)",
    "insertText": "PrimitiveTopologyTypeCb(D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType)"
  },
  {
    "label": "VSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . PrimitiveTopologyType = PrimitiveTopologyType ; } void)",
    "insertText": "VSCb(const D3D12_SHADER_BYTECODE &VS)"
  },
  {
    "label": "GSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . VS = VS ; } void)",
    "insertText": "GSCb(const D3D12_SHADER_BYTECODE &GS)"
  },
  {
    "label": "StreamOutputCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . GS = GS ; } void)",
    "insertText": "StreamOutputCb(const D3D12_STREAM_OUTPUT_DESC &StreamOutput)"
  },
  {
    "label": "HSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . StreamOutput = StreamOutput ; } void)",
    "insertText": "HSCb(const D3D12_SHADER_BYTECODE &HS)"
  },
  {
    "label": "DSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . HS = HS ; } void)",
    "insertText": "DSCb(const D3D12_SHADER_BYTECODE &DS)"
  },
  {
    "label": "PSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . DS = DS ; } void)",
    "insertText": "PSCb(const D3D12_SHADER_BYTECODE &PS)"
  },
  {
    "label": "CSCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . PS = PS ; } void)",
    "insertText": "CSCb(const D3D12_SHADER_BYTECODE &CS)"
  },
  {
    "label": "BlendStateCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . CS = CS ; } void)",
    "insertText": "BlendStateCb(const D3D12_BLEND_DESC &BlendState)"
  },
  {
    "label": "CD3DX12_BLEND_DESC()",
    "kind": "Method",
    "detail": "Function (PipelineStream . BlendState =)",
    "insertText": "CD3DX12_BLEND_DESC(BlendState)"
  },
  {
    "label": "DepthStencilStateCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthStencilStateCb(const D3D12_DEPTH_STENCIL_DESC &DepthStencilState)"
  },
  {
    "label": "CD3DX12_DEPTH_STENCIL_DESC1()",
    "kind": "Method",
    "detail": "Function (PipelineStream . DepthStencilState =)",
    "insertText": "CD3DX12_DEPTH_STENCIL_DESC1(DepthStencilState)"
  },
  {
    "label": "DepthStencilState1Cb()",
    "kind": "Method",
    "detail": "Function (SeenDSS = true ; } void)",
    "insertText": "DepthStencilState1Cb(const D3D12_DEPTH_STENCIL_DESC1 &DepthStencilState)"
  },
  {
    "label": "DSVFormatCb()",
    "kind": "Method",
    "detail": "Function (SeenDSS = true ; } void)",
    "insertText": "DSVFormatCb(DXGI_FORMAT DSVFormat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PipelineStream . DSVFormat = DSVFormat ;)",
    "insertText": "if(!SeenDSS && DSVFormat != DXGI_FORMAT_UNKNOWN)"
  },
  {
    "label": "RasterizerStateCb()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RasterizerStateCb(const D3D12_RASTERIZER_DESC &RasterizerState)"
  },
  {
    "label": "CD3DX12_RASTERIZER_DESC()",
    "kind": "Method",
    "detail": "Function (PipelineStream . RasterizerState =)",
    "insertText": "CD3DX12_RASTERIZER_DESC(RasterizerState)"
  },
  {
    "label": "RTVFormatsCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RTVFormatsCb(const D3D12_RT_FORMAT_ARRAY &RTVFormats)"
  },
  {
    "label": "SampleDescCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . RTVFormats = RTVFormats ; } void)",
    "insertText": "SampleDescCb(const DXGI_SAMPLE_DESC &SampleDesc)"
  },
  {
    "label": "SampleMaskCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . SampleDesc = SampleDesc ; } void)",
    "insertText": "SampleMaskCb(UINT SampleMask)"
  },
  {
    "label": "ViewInstancingCb()",
    "kind": "Method",
    "detail": "Function (PipelineStream . SampleMask = SampleMask ; } void)",
    "insertText": "ViewInstancingCb(const D3D12_VIEW_INSTANCING_DESC &ViewInstancingDesc)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (PipelineStream . ViewInstancingDesc =)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(ViewInstancingDesc)"
  },
  {
    "label": "CachedPSOCb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CachedPSOCb(const D3D12_CACHED_PIPELINE_STATE &CachedPSO)"
  },
  {
    "label": "D3DX12GetBaseSubobjectType()",
    "kind": "Method",
    "detail": "Function (PipelineStream . CachedPSO = CachedPSO ; } private : bool SeenDSS ; } ; D3D12_PIPELINE_STATE_SUBOBJECT_TYPE)",
    "insertText": "D3DX12GetBaseSubobjectType(D3D12_PIPELINE_STATE_SUBOBJECT_TYPE SubobjectType)"
  },
  {
    "label": "ErrorBadInputParameter()",
    "kind": "Method",
    "detail": "Function (pCallbacks ->)",
    "insertText": "ErrorBadInputParameter(1)"
  },
  {
    "label": "BYTE()",
    "kind": "Method",
    "detail": "Function (BYTE* pStream = static_cast<)",
    "insertText": "BYTE(Desc.pPipelineStateSubobjectStream)"
  },
  {
    "label": "D3D12_PIPELINE_STATE_SUBOBJECT_TYPE()",
    "kind": "Method",
    "detail": "Function (auto SubobjectType =* reinterpret_cast<)",
    "insertText": "D3D12_PIPELINE_STATE_SUBOBJECT_TYPE(pStream)"
  },
  {
    "label": "ErrorUnknownSubobject()",
    "kind": "Method",
    "detail": "Function (pCallbacks ->)",
    "insertText": "ErrorUnknownSubobject(SubobjectType)"
  },
  {
    "label": "ErrorDuplicateSubobject()",
    "kind": "Method",
    "detail": "Function (pCallbacks ->)",
    "insertText": "ErrorDuplicateSubobject(SubobjectType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::pRootSignature)"
  },
  {
    "label": "VSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS : pCallbacks ->)",
    "insertText": "VSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::VS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::VS)"
  },
  {
    "label": "PSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS : pCallbacks ->)",
    "insertText": "PSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::PS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::PS)"
  },
  {
    "label": "DSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS : pCallbacks ->)",
    "insertText": "DSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::DS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::DS)"
  },
  {
    "label": "HSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS : pCallbacks ->)",
    "insertText": "HSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::HS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::HS)"
  },
  {
    "label": "GSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS : pCallbacks ->)",
    "insertText": "GSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::GS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::GS)"
  },
  {
    "label": "CSCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS : pCallbacks ->)",
    "insertText": "CSCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::CS) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::CS)"
  },
  {
    "label": "StreamOutputCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT : pCallbacks ->)",
    "insertText": "StreamOutputCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::StreamOutput) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::StreamOutput)"
  },
  {
    "label": "BlendStateCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND : pCallbacks ->)",
    "insertText": "BlendStateCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::BlendState) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::BlendState)"
  },
  {
    "label": "SampleMaskCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK : pCallbacks ->)",
    "insertText": "SampleMaskCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::SampleMask) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::SampleMask)"
  },
  {
    "label": "RasterizerStateCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER : pCallbacks ->)",
    "insertText": "RasterizerStateCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::RasterizerState) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::RasterizerState)"
  },
  {
    "label": "DepthStencilStateCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL : pCallbacks ->)",
    "insertText": "DepthStencilStateCb(*reinterpret_cast<CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM_DEPTH_STENCIL)"
  },
  {
    "label": "DepthStencilState1Cb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 : pCallbacks ->)",
    "insertText": "DepthStencilState1Cb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::DepthStencilState) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::DepthStencilState)"
  },
  {
    "label": "InputLayoutCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT : pCallbacks ->)",
    "insertText": "InputLayoutCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::InputLayout) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::InputLayout)"
  },
  {
    "label": "IBStripCutValueCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE : pCallbacks ->)",
    "insertText": "IBStripCutValueCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::IBStripCutValue) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::IBStripCutValue)"
  },
  {
    "label": "PrimitiveTopologyTypeCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY : pCallbacks ->)",
    "insertText": "PrimitiveTopologyTypeCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::PrimitiveTopologyType) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::PrimitiveTopologyType)"
  },
  {
    "label": "RTVFormatsCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS : pCallbacks ->)",
    "insertText": "RTVFormatsCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::RTVFormats) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::RTVFormats)"
  },
  {
    "label": "DSVFormatCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT : pCallbacks ->)",
    "insertText": "DSVFormatCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::DSVFormat) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::DSVFormat)"
  },
  {
    "label": "SampleDescCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC : pCallbacks ->)",
    "insertText": "SampleDescCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::SampleDesc) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::SampleDesc)"
  },
  {
    "label": "NodeMaskCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK : pCallbacks ->)",
    "insertText": "NodeMaskCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::NodeMask) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::NodeMask)"
  },
  {
    "label": "CachedPSOCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO : pCallbacks ->)",
    "insertText": "CachedPSOCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM::CachedPSO) *>(pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::CachedPSO)"
  },
  {
    "label": "FlagsCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS : pCallbacks ->)",
    "insertText": "FlagsCb(*reinterpret_cast<decltype(CD3DX12_PIPELINE_STATE_STREAM::Flags) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM::Flags)"
  },
  {
    "label": "ViewInstancingCb()",
    "kind": "Method",
    "detail": "Function (break ; case D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING : pCallbacks ->)",
    "insertText": "ViewInstancingCb(*reinterpret_cast< decltype(CD3DX12_PIPELINE_STATE_STREAM1::ViewInstancingDesc) *>( pStream))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SizeOfSubobject =)",
    "insertText": "sizeof(CD3DX12_PIPELINE_STATE_STREAM1::ViewInstancingDesc)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(a.Color[0] == b.Color[0]) && (a.Color[1] == b.Color[1]) && (a.Color[2] == b.Color[2]) && (a.Color[3] == b.Color[3])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS &a, const D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS &b)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(D3D12_STATE_OBJECT_TYPE_COLLECTION)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATE_OBJECT_DESC(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Type)"
  },
  {
    "label": "SetStateObjectType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateObjectType(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "D3D12_STATE_OBJECT_DESC()",
    "kind": "Method",
    "detail": "Function (m_Desc . Type = Type ; } operator const)",
    "insertText": "D3D12_STATE_OBJECT_DESC()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_RepointedAssociations .)",
    "insertText": "clear()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_SubobjectArray .)",
    "insertText": "reserve(m_Desc.NumSubobjects)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_SubobjectArray .)",
    "insertText": "push_back(*Iter)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (Iter -> pSubobjectArrayLocation =& m_SubobjectArray .)",
    "insertText": "back()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(UINT i = 0; i < m_Desc.NumSubobjects; i++)"
  },
  {
    "label": "D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION()",
    "kind": "Method",
    "detail": "Function (auto pOriginalSubobjectAssociation = reinterpret_cast<const)",
    "insertText": "D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION(m_SubobjectArray[i].pDesc)"
  },
  {
    "label": "SUBOBJECT_WRAPPER()",
    "kind": "Method",
    "detail": "Function (D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION Repointed =* pOriginalSubobjectAssociation ; auto pWrapper = static_cast<const)",
    "insertText": "SUBOBJECT_WRAPPER(pOriginalSubobjectAssociation->pSubobjectToAssociate)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Repointed . pSubobjectToAssociate = pWrapper -> pSubobjectArrayLocation ; m_RepointedAssociations .)",
    "insertText": "push_back(Repointed)"
  },
  {
    "label": "CreateSubobject()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "CreateSubobject()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* pSubobject = new)",
    "insertText": "T(*this)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_OwnedSubobjectHelpers .)",
    "insertText": "emplace_back(pSubobject)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SUBOBJECT_WRAPPER Subobject ; Subobject . pSubobjectArrayLocation = nullptr ; Subobject . Type = Type ; Subobject . pDesc = pDesc ; m_SubobjectList .)",
    "insertText": "push_back(Subobject)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(D3D12_STATE_OBJECT_TYPE Type)"
  },
  {
    "label": "SetStateObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateObjectType(Type)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (} typedef struct SUBOBJECT_WRAPPER : public D3D12_STATE_SUBOBJECT { D3D12_STATE_SUBOBJECT* pSubobjectArrayLocation ; } SUBOBJECT_WRAPPER ; D3D12_STATE_OBJECT_DESC m_Desc ; std::list<SUBOBJECT_WRAPPER> m_SubobjectList ; std::vector<D3D12_STATE_SUBOBJECT> m_SubobjectArray ; std::list<D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION> m_RepointedAssociations ; class StringContainer { public : LPCWSTR)",
    "insertText": "LocalCopy(LPCWSTR string, bool bSingleString = false)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_Strings .)",
    "insertText": "push_back(string)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} return m_Strings .)",
    "insertText": "back().c_str()"
  },
  {
    "label": "SUBOBJECT_HELPER_BASE()",
    "kind": "Method",
    "detail": "Function (} private : std::list<std::wstring> m_Strings ; } ; class SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "SUBOBJECT_HELPER_BASE()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} D3D12_STATE_SUBOBJECT_TYPE)",
    "insertText": "Type()"
  },
  {
    "label": "AddToStateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToStateObject(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "TrackSubobject()",
    "kind": "Method",
    "detail": "Function (m_pSubobject = ContainingStateObject .)",
    "insertText": "TrackSubobject(Type(), Data())"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} protected : void*)",
    "insertText": "Data()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_pSubobject = nullptr ; } D3D12_STATE_SUBOBJECT* m_pSubobject ; } ; #)",
    "insertText": "if(__cplusplus >= 201103L)"
  },
  {
    "label": "OWNED_HELPER()",
    "kind": "Method",
    "detail": "Function (# else class OWNED_HELPER { public :)",
    "insertText": "OWNED_HELPER(const SUBOBJECT_HELPER_BASE *pHelper)"
  },
  {
    "label": "OWNED_HELPER()",
    "kind": "Method",
    "detail": "Function (m_pHelper = pHelper ; } ~)",
    "insertText": "OWNED_HELPER()"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (delete m_pHelper ; } const SUBOBJECT_HELPER_BASE* m_pHelper ; } ; std::list<OWNED_HELPER> m_OwnedSubobjectHelpers ; # endif class CD3DX12_DXIL_LIBRARY_SUBOBJECT ; class CD3DX12_EXISTING_COLLECTION_SUBOBJECT ; class CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT ; class CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION ; class CD3DX12_HIT_GROUP_SUBOBJECT ; class CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT ; class CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT ; class CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT ; class CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT ; class CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT ; class CD3DX12_NODE_MASK_SUBOBJECT ; } ; class CD3DX12_DXIL_LIBRARY_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_DXIL_LIBRARY_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DXIL_LIBRARY_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "AddToStateObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToStateObject(ContainingStateObject)"
  },
  {
    "label": "SetDXILLibrary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDXILLibrary(D3D12_SHADER_BYTECODE *pCode)"
  },
  {
    "label": "DefineExport()",
    "kind": "Method",
    "detail": "Function (const D3D12_SHADER_BYTECODE Default = { } ; m_Desc . DXILLibrary = pCode ?* pCode : Default ; } void)",
    "insertText": "DefineExport(LPCWSTR Name, LPCWSTR ExportToRename = nullptr, D3D12_EXPORT_FLAGS Flags = D3D12_EXPORT_FLAG_NONE)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (D3D12_EXPORT_DESC Export ; Export . Name = m_Strings .)",
    "insertText": "LocalCopy(Name)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (Export . ExportToRename = m_Strings .)",
    "insertText": "LocalCopy(ExportToRename)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Export . Flags = Flags ; m_Exports .)",
    "insertText": "push_back(Export)"
  },
  {
    "label": "UINT()",
    "kind": "Method",
    "detail": "Function (m_Desc . pExports =& m_Exports [ 0 ] ; m_Desc . NumExports = static_cast<)",
    "insertText": "UINT(m_Exports.size())"
  },
  {
    "label": "DefineExports()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> void)",
    "insertText": "DefineExports(LPCWSTR (&Exports)[N])"
  },
  {
    "label": "DefineExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineExport(Exports[i])"
  },
  {
    "label": "DefineExports()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DefineExports(LPCWSTR *Exports, UINT N)"
  },
  {
    "label": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_EXISTING_COLLECTION_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetExistingCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExistingCollection(ID3D12StateObject *pExistingCollection)"
  },
  {
    "label": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBOBJECT_TO_EXPORTS_ASSOCIATION_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetSubobjectToAssociate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubobjectToAssociate(const D3D12_STATE_SUBOBJECT &SubobjectToAssociate)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (m_Desc . pSubobjectToAssociate =& SubobjectToAssociate ; } void)",
    "insertText": "AddExport(LPCWSTR Export)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (m_Desc . NumExports + + ; m_Exports .)",
    "insertText": "push_back(m_Strings.LocalCopy(Export))"
  },
  {
    "label": "AddExports()",
    "kind": "Method",
    "detail": "Function (m_Desc . pExports =& m_Exports [ 0 ] ; } template<size_t N> void)",
    "insertText": "AddExports(LPCWSTR (&Exports)[N])"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExport(Exports[i])"
  },
  {
    "label": "AddExports()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddExports(LPCWSTR *Exports, UINT N)"
  },
  {
    "label": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetSubobjectNameToAssociate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubobjectNameToAssociate(LPCWSTR SubobjectToAssociate)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . SubobjectToAssociate = m_SubobjectName .)",
    "insertText": "LocalCopy(SubobjectToAssociate, true)"
  },
  {
    "label": "CD3DX12_HIT_GROUP_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_HIT_GROUP_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetHitGroupExport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHitGroupExport(LPCWSTR exportName)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . HitGroupExport = m_Strings [ 0 ] .)",
    "insertText": "LocalCopy(exportName, true)"
  },
  {
    "label": "SetHitGroupType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHitGroupType(D3D12_HIT_GROUP_TYPE Type)"
  },
  {
    "label": "SetAnyHitShaderImport()",
    "kind": "Method",
    "detail": "Function (m_Desc . Type = Type ; } void)",
    "insertText": "SetAnyHitShaderImport(LPCWSTR importName)"
  },
  {
    "label": "LocalCopy()",
    "kind": "Method",
    "detail": "Function (m_Desc . AnyHitShaderImport = m_Strings [ 1 ] .)",
    "insertText": "LocalCopy(importName, true)"
  },
  {
    "label": "SetClosestHitShaderImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClosestHitShaderImport(LPCWSTR importName)"
  },
  {
    "label": "SetIntersectionShaderImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIntersectionShaderImport(LPCWSTR importName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_Desc = { } ;)",
    "insertText": "for(UINT i = 0; i < m_NumStrings; i++)"
  },
  {
    "label": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Config(UINT MaxPayloadSizeInBytes, UINT MaxAttributeSizeInBytes)"
  },
  {
    "label": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Config(UINT MaxTraceRecursionDepth)"
  },
  {
    "label": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_GLOBAL_ROOT_SIGNATURE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetRootSignature()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRootSignature(ID3D12RootSignature *pRootSig)"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (} Microsoft::WRL::ComPtr<ID3D12RootSignature> m_pRootSig ; } ; class CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_LOCAL_ROOT_SIGNATURE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (} Microsoft::WRL::ComPtr<ID3D12RootSignature> m_pRootSig ; } ; class CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT : public CD3DX12_STATE_OBJECT_DESC::SUBOBJECT_HELPER_BASE { public :)",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()"
  },
  {
    "label": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(D3D12_STATE_OBJECT_FLAGS Flags)"
  },
  {
    "label": "CD3DX12_NODE_MASK_SUBOBJECT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_NODE_MASK_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC &ContainingStateObject)"
  },
  {
    "label": "SetNodeMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNodeMask(UINT NodeMask)"
  }
]