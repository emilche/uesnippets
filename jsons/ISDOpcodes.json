[
  {
    "label": "NodeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NodeType"
  },
  {
    "label": "MemIndexedMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemIndexedMode"
  },
  {
    "label": "LoadExtType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LoadExtType"
  },
  {
    "label": "CondCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CondCode"
  },
  {
    "label": "CvtCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CvtCode"
  },
  {
    "label": "getExtForLoadExtType()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_ISDOPCODES_H # define LLVM_CODEGEN_ISDOPCODES_H namespace llvm { namespace ISD { enum NodeType { DELETED_NODE,EntryToken,TokenFactor,AssertSext,AssertZext,BasicBlock,VALUETYPE,CONDCODE,Register,RegisterMask,Constant,ConstantFP,GlobalAddress,GlobalTLSAddress,FrameIndex,JumpTable,ConstantPool,ExternalSymbol,BlockAddress,GLOBAL_OFFSET_TABLE,FRAMEADDR,RETURNADDR,LOCAL_RECOVER,READ_REGISTER,WRITE_REGISTER,FRAME_TO_ARGS_OFFSET,EH_RETURN,EH_SJLJ_SETJMP,EH_SJLJ_LONGJMP,TargetConstant,TargetConstantFP,TargetGlobalAddress,TargetGlobalTLSAddress,TargetFrameIndex,TargetJumpTable,TargetConstantPool,TargetExternalSymbol,TargetBlockAddress,MCSymbol,TargetIndex,INTRINSIC_WO_CHAIN,INTRINSIC_W_CHAIN,INTRINSIC_VOID,CopyToReg,CopyFromReg,UNDEF,EXTRACT_ELEMENT,BUILD_PAIR,MERGE_VALUES,ADD,SUB,MUL,SDIV,UDIV,SREM,UREM,SMUL_LOHI,UMUL_LOHI,SDIVREM,UDIVREM,CARRY_FALSE,ADDC,SUBC,ADDE,SUBE,SADDO,UADDO,SSUBO,USUBO,SMULO,UMULO,FADD,FSUB,FMUL,FDIV,FREM,FMA,FMAD,FCOPYSIGN,FGETSIGN,BUILD_VECTOR,INSERT_VECTOR_ELT,EXTRACT_VECTOR_ELT,CONCAT_VECTORS,INSERT_SUBVECTOR,EXTRACT_SUBVECTOR,VECTOR_SHUFFLE,SCALAR_TO_VECTOR,MULHU,MULHS,SMIN,SMAX,UMIN,UMAX,AND,OR,XOR,SHL,SRA,SRL,ROTL,ROTR,BSWAP,CTTZ,CTLZ,CTPOP,CTTZ_ZERO_UNDEF,CTLZ_ZERO_UNDEF,SELECT,VSELECT,SELECT_CC,SETCC,SHL_PARTS,SRA_PARTS,SRL_PARTS,SIGN_EXTEND,ZERO_EXTEND,ANY_EXTEND,TRUNCATE,SINT_TO_FP,UINT_TO_FP,SIGN_EXTEND_INREG,ANY_EXTEND_VECTOR_INREG,SIGN_EXTEND_VECTOR_INREG,ZERO_EXTEND_VECTOR_INREG,FP_TO_SINT,FP_TO_UINT,FP_ROUND,FLT_ROUNDS_,FP_ROUND_INREG,FP_EXTEND,BITCAST,ADDRSPACECAST,CONVERT_RNDSAT,FP16_TO_FP,FP_TO_FP16,FNEG,FABS,FSQRT,FSIN,FCOS,FPOWI,FPOW,FLOG,FLOG2,FLOG10,FEXP,FEXP2,FCEIL,FTRUNC,FRINT,FNEARBYINT,FROUND,FFLOOR,FMINNUM,FMAXNUM,FSINCOS,LOAD,STORE,DYNAMIC_STACKALLOC,BR,BRIND,BR_JT,BRCOND,BR_CC,INLINEASM,EH_LABEL,STACKSAVE,STACKRESTORE,CALLSEQ_START,CALLSEQ_END,VAARG,VACOPY,VAEND,VASTART,SRCVALUE,MDNODE_SDNODE,PCMARKER,READCYCLECOUNTER,HANDLENODE,INIT_TRAMPOLINE,ADJUST_TRAMPOLINE,TRAP,DEBUGTRAP,PREFETCH,ATOMIC_FENCE,ATOMIC_LOAD,ATOMIC_STORE,ATOMIC_CMP_SWAP,ATOMIC_CMP_SWAP_WITH_SUCCESS,ATOMIC_SWAP,ATOMIC_LOAD_ADD,ATOMIC_LOAD_SUB,ATOMIC_LOAD_AND,ATOMIC_LOAD_OR,ATOMIC_LOAD_XOR,ATOMIC_LOAD_NAND,ATOMIC_LOAD_MIN,ATOMIC_LOAD_MAX,ATOMIC_LOAD_UMIN,ATOMIC_LOAD_UMAX,MLOAD,MSTORE,MGATHER,MSCATTER,LIFETIME_START,LIFETIME_END,GC_TRANSITION_START,GC_TRANSITION_END,BUILTIN_OP_END } ; const int FIRST_TARGET_MEMORY_OPCODE = BUILTIN_OP_END + 3 0 0 ; enum MemIndexedMode { UNINDEXED = 0,PRE_INC,PRE_DEC,POST_INC,POST_DEC,LAST_INDEXED_MODE } ; enum LoadExtType { NON_EXTLOAD = 0,EXTLOAD,SEXTLOAD,ZEXTLOAD,LAST_LOADEXT_TYPE } ; NodeType)",
    "insertText": "getExtForLoadExtType(bool IsFP, LoadExtType)"
  },
  {
    "label": "isSignedIntSetCC()",
    "kind": "Method",
    "detail": "Function (enum CondCode { SETFALSE,SETOEQ,SETOGT,SETOGE,SETOLT,SETOLE,SETONE,SETO,SETUO,SETUEQ,SETUGT,SETUGE,SETULT,SETULE,SETUNE,SETTRUE,SETFALSE2,SETEQ,SETGT,SETGE,SETLT,SETLE,SETNE,SETTRUE2,SETCC_INVALID } ; bool)",
    "insertText": "isSignedIntSetCC(CondCode Code)"
  },
  {
    "label": "getUnorderedFlavor()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getUnorderedFlavor(CondCode Cond)"
  },
  {
    "label": "getSetCCInverse()",
    "kind": "Method",
    "detail": "Function (} CondCode)",
    "insertText": "getSetCCInverse(CondCode Operation, bool isInteger)"
  },
  {
    "label": "getSetCCSwappedOperands()",
    "kind": "Method",
    "detail": "Function (CondCode)",
    "insertText": "getSetCCSwappedOperands(CondCode Operation)"
  },
  {
    "label": "getSetCCOrOperation()",
    "kind": "Method",
    "detail": "Function (CondCode)",
    "insertText": "getSetCCOrOperation(CondCode Op1, CondCode Op2, bool isInteger)"
  },
  {
    "label": "getSetCCAndOperation()",
    "kind": "Method",
    "detail": "Function (CondCode)",
    "insertText": "getSetCCAndOperation(CondCode Op1, CondCode Op2, bool isInteger)"
  }
]