[
  {
    "label": "FSolverBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBody"
  },
  {
    "label": "FPBDSuspensionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionConstraints"
  },
  {
    "label": "FPBDCollisionSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSolver"
  },
  {
    "label": "FPBDCollisionSolverManifoldPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSolverManifoldPoint"
  },
  {
    "label": "FPBDSuspensionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSuspensionConstraintHandle"
  },
  {
    "label": "FPBDSuspensionConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / Collision / PBDCollisionSolver . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PBDSuspensionConstraintTypes . h \" # include \" Chaos / PBDSuspensionConstraintData . h \" # include \" Chaos / Particle / ParticleUtilities . h \" # include \" Chaos / Utilities . h \" namespace Chaos { class FSolverBody ; class FPBDSuspensionConstraints ; namespace Private { class FPBDCollisionSolver ; class FPBDCollisionSolverManifoldPoint ; } class FPBDSuspensionConstraintHandle final : public TIndexedContainerConstraintHandle<FPBDSuspensionConstraints> { public : using Base = TIndexedContainerConstraintHandle<FPBDSuspensionConstraints> ; using FConstraintContainer = FPBDSuspensionConstraints ;)",
    "insertText": "FPBDSuspensionConstraintHandle()"
  },
  {
    "label": "FPBDSuspensionConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSuspensionConstraintHandle(FConstraintContainer* InConstraintContainer, int32 InConstraintIndex)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (FPBDSuspensionSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FPBDSuspensionSettings& Settings)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FSuspensionConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  },
  {
    "label": "FPBDSuspensionConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSuspensionConstraints(TArray<FVec3>&& Locations, TArray<TGeometryParticleHandle<FReal,3>*>&& InConstrainedParticles, TArray<FVec3>&& InLocalOffset, TArray<FPBDSuspensionSettings>&& InConstraintSettings) : TPBDIndexedConstraintContainer<FPBDSuspensionConstraints>(FConstraintContainerHandle::StaticType()) , ConstrainedParticles(MoveTemp(InConstrainedParticles)), SuspensionLocalOffset(MoveTemp(InLocalOffset)), ConstraintSettings(MoveTemp(InConstraintSettings))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Reserve(ConstrainedParticles.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Add(HandleAllocator.AllocHandle(this, ConstraintIndex))"
  },
  {
    "label": "FPBDSuspensionConstraints()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "FPBDSuspensionConstraints()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (} FConstraintContainerHandle*)",
    "insertText": "AddConstraint(TGeometryParticleHandle<FReal, 3>* Particle, const FVec3& InConstraintFrame, const FPBDSuspensionSettings& InConstraintSettings)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(int ConstraintIndex)"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>& RemovedParticles)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (SuspensionHandle ->)",
    "insertText": "SetEnabled(false)"
  },
  {
    "label": "GetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int ConstraintIndex = SuspensionHandle ->)",
    "insertText": "GetConstraintIndex()"
  },
  {
    "label": "IsConstraintEnabled()",
    "kind": "Method",
    "detail": "Function (ConstrainedParticles [ ConstraintIndex ] = nullptr ; } } } } } } bool)",
    "insertText": "IsConstraintEnabled(int32 ConstraintIndex)"
  },
  {
    "label": "FGenericParticleHandle()",
    "kind": "Method",
    "detail": "Function (const FGenericParticleHandle Particle =)",
    "insertText": "FGenericParticleHandle(ConstrainedParticles[ConstraintIndex])"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (ConstraintEnabledStates [ ConstraintIndex ] = true ; } } else { ConstraintEnabledStates [ ConstraintIndex ] = false ; } } const FPBDSuspensionSettings&)",
    "insertText": "GetSettings(int32 ConstraintIndex)"
  },
  {
    "label": "SetTarget()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings [ ConstraintIndex ] = Settings ; } void)",
    "insertText": "SetTarget(int32 ConstraintIndex, const FVector& TargetPos)"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings [ ConstraintIndex ] . Target = TargetPos ; } const FPBDSuspensionResults&)",
    "insertText": "GetResults(int32 ConstraintIndex)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (SuspensionLocalOffset [ ConstraintIndex ] = Position ; } int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(const TArrayView<int32>& ConstraintIndices, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjectionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} protected : using Base::GetConstraintIndex ; using Base::SetConstraintIndex ; private : void)",
    "insertText": "AddBodies(const int32 ConstraintIndex, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const int32 ConstraintIndex, FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const int32 ConstraintIndex, FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraint(const int32 ConstraintIndex, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraint(const int32 ConstraintIndex, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplySingle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingle(int32 ConstraintIndex, const FReal Dt)"
  }
]