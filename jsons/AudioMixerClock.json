[
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClock"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FQuartzClockManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClockManager"
  },
  {
    "label": "AUDIOMIXER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUDIOMIXER_API"
  },
  {
    "label": "PendingCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingCommand"
  },
  {
    "label": "FQuartzClockState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockState"
  },
  {
    "label": "FQuartzClockProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Quartz / QuartzMetronome . h \" # include \" Sound / QuartzSubscription . h \" # include \" Sound / QuartzInterfaces . h \" # include \" Sound / QuartzCommandQueue . h \" namespace Audio { class FMixerDevice ; class FQuartzClock ; class FMixerSourceManager ; class FQuartzClockManager ; using FQuartzClockCommandQueueType = Audio::Quartz::PrivateDefs::TQuartzCommandQueue<IQuartzClock> ; using FQuartzClockCommandQueuePtr = TSharedPtr<FQuartzClockCommandQueueType,ESPMode::ThreadSafe> ; using FQuartzClockCommandQueueWeakPtr = TWeakPtr<FQuartzClockCommandQueueType,ESPMode::ThreadSafe> ; class FQuartzClockProxy { public :)",
    "insertText": "FQuartzClockProxy()"
  },
  {
    "label": "FQuartzClockProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuartzClockProxy(const FName& Name) : ClockId(Name)"
  },
  {
    "label": "FQuartzClockProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuartzClockProxy(TSharedPtr<FQuartzClock, ESPMode::ThreadSafe> InClock)"
  },
  {
    "label": "GetClockName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClockName()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FName& Name)"
  },
  {
    "label": "IsClockRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClockRunning()"
  },
  {
    "label": "GetTickRate()",
    "kind": "Method",
    "detail": "Function (Audio::FQuartzClockTickRate)",
    "insertText": "GetTickRate()"
  },
  {
    "label": "GetEstimatedClockRunTimeSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEstimatedClockRunTimeSeconds()"
  },
  {
    "label": "GetCurrentClockTimestamp()",
    "kind": "Method",
    "detail": "Function (FQuartzTransportTimeStamp)",
    "insertText": "GetCurrentClockTimestamp()"
  },
  {
    "label": "GetDurationOfQuantizationTypeInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDurationOfQuantizationTypeInSeconds(const EQuartzCommandQuantization& QuantizationType, float Multiplier)"
  },
  {
    "label": "GetBeatProgressPercent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBeatProgressPercent(const EQuartzCommandQuantization& QuantizationType)"
  },
  {
    "label": "SendCommandToClock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendCommandToClock(TFunction<void(FQuartzClock*)> InCommand)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "FName()"
  },
  {
    "label": "FQuartzClock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQuartzClock()"
  },
  {
    "label": "ChangeTickRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTickRate(FQuartzClockTickRate InNewTickRate, int32 NumFramesLeft = 0)"
  },
  {
    "label": "ChangeTimeSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTimeSignature(const FQuartzTimeSignature& InNewTimeSignature)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(bool bPause = true)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(bool CancelPendingEvents)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(float InNewSampleRate)"
  },
  {
    "label": "ResetTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransport(const int32 NumFramesToTickBeforeReset = 0)"
  },
  {
    "label": "AddToTickDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToTickDelay(int32 NumFramesOfDelayToAdd)"
  },
  {
    "label": "SetTickDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickDelay(int32 NumFramesOfDelay)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "IgnoresFlush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IgnoresFlush()"
  },
  {
    "label": "DoesMatchSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMatchSettings(const FQuartzClockSettings& InClockSettings)"
  },
  {
    "label": "HasPendingEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingEvents()"
  },
  {
    "label": "NumPendingEvents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPendingEvents()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetCurrentTimestamp()",
    "kind": "Method",
    "detail": "Function (FQuartzTransportTimeStamp)",
    "insertText": "GetCurrentTimestamp()"
  },
  {
    "label": "GetEstimatedRunTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEstimatedRunTime()"
  },
  {
    "label": "GetMixerDevice()",
    "kind": "Method",
    "detail": "Function (FMixerDevice*)",
    "insertText": "GetMixerDevice()"
  },
  {
    "label": "GetSourceManager()",
    "kind": "Method",
    "detail": "Function (FMixerSourceManager*)",
    "insertText": "GetSourceManager()"
  },
  {
    "label": "GetClockManager()",
    "kind": "Method",
    "detail": "Function (FQuartzClockManager*)",
    "insertText": "GetClockManager()"
  },
  {
    "label": "GetCommandQueue()",
    "kind": "Method",
    "detail": "Function (FQuartzClockCommandQueueWeakPtr)",
    "insertText": "GetCommandQueue()"
  },
  {
    "label": "SubscribeToTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToTimeDivision(FQuartzGameThreadSubscriber InSubscriber, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "SubscribeToAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllTimeDivisions(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(FQuartzGameThreadSubscriber InSubscriber, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizedRequestData& InQuantizedRequestData)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizedCommandInitInfo& InQuantizationCommandInitInfo)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizationBoundary InQuantizationBoundary, TSharedPtr<IQuartzQuantizedCommand> InNewEvent)"
  },
  {
    "label": "CancelQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelQuantizedCommand(TSharedPtr<IQuartzQuantizedCommand> InCommandPtr)"
  },
  {
    "label": "LowResolutionTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowResolutionTick(float InDeltaTimeSeconds)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(int32 InNumFramesUntilNextTick)"
  },
  {
    "label": "PendingCommand()",
    "kind": "Method",
    "detail": "Function (private : struct PendingCommand {)",
    "insertText": "PendingCommand(TSharedPtr<IQuartzQuantizedCommand> InCommand, int32 InNumFramesUntilExec) : Command(InCommand) , NumFramesUntilExec(InNumFramesUntilExec)"
  },
  {
    "label": "UpdateCachedState()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IQuartzQuantizedCommand> Command ; int32 NumFramesUntilExec { 0 } ; } ; FCriticalSection CachedClockStateCritSec ; void)",
    "insertText": "UpdateCachedState()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (struct FQuartzClockState { FQuartzClockTickRate TickRate ; FQuartzTransportTimeStamp TimeStamp ; float RunTimeInSeconds ; float MusicalDurationPhases [ static_cast<)",
    "insertText": "int32(EQuartzCommandQuantization::Count)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (0 } ; uint64 LastCacheTickCpuCycles64 = 0 ; uint64 LastCacheTickDeltaCpuCycles64 = 0 ; } CachedClockState ; void)",
    "insertText": "TickInternal(int32 InNumFramesUntilNextTick, TArray<PendingCommand>& CommandsToTick, int32 FramesOfLatency = 0, int32 FramesOfDelay = 0)"
  },
  {
    "label": "CancelQuantizedCommandInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelQuantizedCommandInternal(TSharedPtr<IQuartzQuantizedCommand> InCommandPtr, TArray<PendingCommand>& CommandsToTick)"
  }
]