[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "SBehaviorTreeBlackboardEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBehaviorTreeBlackboardEditor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" Logging / LogMacros . h \" # include \" SBehaviorTreeBlackboardView . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class SWidget ; class UClass ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBlackboardEditor, Warning, All)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (class FExtender ; class FMenuBuilder ; class FToolBarBuilder ; class FUICommandList ; class UBlackboardData ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FOnIsBlackboardModeActive)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SBehaviorTreeBlackboardEditor : public SBehaviorTreeBlackboardView { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBehaviorTreeBlackboardEditor)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnEntrySelected, OnEntrySelected) SLATE_EVENT(FOnGetDebugKeyValue, OnGetDebugKeyValue) SLATE_EVENT(FOnGetDisplayCurrentState, OnGetDisplayCurrentState) SLATE_EVENT(FOnIsDebuggerReady, OnIsDebuggerReady) SLATE_EVENT(FOnIsDebuggerPaused, OnIsDebuggerPaused) SLATE_EVENT(FOnGetDebugTimeStamp, OnGetDebugTimeStamp) SLATE_EVENT(FOnIsBlackboardModeActive, OnIsBlackboardModeActive) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<FUICommandList> InCommandList, UBlackboardData* InBlackboardData)"
  },
  {
    "label": "FillContextMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FillContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "FillToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillToolbar(FToolBarBuilder& ToolbarBuilder)"
  },
  {
    "label": "GetToolbarExtender()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtender>)",
    "insertText": "GetToolbarExtender(TSharedRef<FUICommandList> ToolkitCommands)"
  },
  {
    "label": "HandleDeleteEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteEntry()"
  },
  {
    "label": "HandleRenameEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRenameEntry()"
  },
  {
    "label": "HandleCreateNewEntryMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleCreateNewEntryMenu()"
  },
  {
    "label": "HandleKeyClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyClassPicked(UClass* InClass)"
  },
  {
    "label": "CanCreateNewEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateNewEntry()"
  },
  {
    "label": "CanDeleteEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteEntry()"
  },
  {
    "label": "CanRenameEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameEntry()"
  }
]