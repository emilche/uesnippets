[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FMovieSceneChannelMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelMetaData"
  },
  {
    "label": "FCategoryModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCategoryModel"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "FViewDensityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewDensityInfo"
  },
  {
    "label": "ISectionView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISectionView"
  },
  {
    "label": "FCreateSectionViewWidgetParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateSectionViewWidgetParams"
  },
  {
    "label": "ESequencerSectionResizeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESequencerSectionResizeMode"
  },
  {
    "label": "FSequencerSectionPropertyDetailsViewCustomizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSectionPropertyDetailsViewCustomizationParams"
  },
  {
    "label": "FChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelData"
  },
  {
    "label": "ISectionLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISectionLayoutBuilder"
  },
  {
    "label": "FSequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSection"
  },
  {
    "label": "ISectionView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelHandle . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Curves / KeyHandle . h \" # include \" HAL / Platform . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Margin . h \" # include \" Math / Vector2D . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / Guid . h \" # include \" MovieSceneSection . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" # include \" ISequencerSection . generated . h \" class FMenuBuilder ; class FSequencerSectionPainter ; class IDetailsView ; class ISequencer ; class ISequencerSection ; class ISequencerTrackEditor ; class SWidget ; class SOverlay ; struct FGeometry ; struct FKeyHandle ; struct FPointerEvent ; struct FSlateBrush ; struct FTimeToPixel ; template<ElementType> class TRange ; struct FMovieSceneChannelMetaData ; namespace UE::Sequencer { class FCategoryModel ; class FChannelModel ; class FSectionModel ; class STrackLane ; class STrackAreaView ; struct FViewDensityInfo ; struct ISectionView { ~)",
    "insertText": "ISectionView()"
  },
  {
    "label": "GetTimeToPixel()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FTimeToPixel>)",
    "insertText": "GetTimeToPixel()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; struct FCreateSectionViewWidgetParams { int32 CompoundTrackLaneViewOrder = 0 ; int32 DefaultWidgetOrder = 1 0 ; int32 ChannelViewOrder = 2 0 ; TSharedRef<SOverlay> Overlay ; TSharedRef<ISectionView> SectionView ; TSharedRef<STrackLane> TrackLane ; TSharedRef<STrackAreaView> TrackAreaView ; TSharedRef<FSectionModel> SectionModel ; } ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "KeySize()",
    "kind": "Method",
    "detail": "Function (SSRM_LeadingEdge,SSRM_TrailingEdge } ; namespace SequencerSectionConstants { const float SectionDragStartDistance = 5 . 0 f ; const FVector2D)",
    "insertText": "KeySize(12.0f, 12.0f)"
  },
  {
    "label": "SelectionColorName()",
    "kind": "Method",
    "detail": "Function (const float DefaultSectionGripSize = 8 . 0 f ; const float DefaultSectionHeight = 2 7 . f ; const FName)",
    "insertText": "SelectionColorName(\"SelectionColor\")"
  },
  {
    "label": "SelectionInactiveColorName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SelectionInactiveColorName(\"SelectionColorInactive\")"
  },
  {
    "label": "FSequencerSectionPropertyDetailsViewCustomizationParams()",
    "kind": "Method",
    "detail": "Function (} struct FSequencerSectionPropertyDetailsViewCustomizationParams {)",
    "insertText": "FSequencerSectionPropertyDetailsViewCustomizationParams(TSharedRef<ISequencerSection> InSectionInterface, TWeakPtr<ISequencer> InSequencerWeak, ISequencerTrackEditor& InTrackEditor) : SectionInterface(InSectionInterface) , SequencerWeak(InSequencerWeak) , TrackEditor(InTrackEditor)"
  },
  {
    "label": "ISequencerSection()",
    "kind": "Method",
    "detail": "Function (} FGuid ParentObjectBindingGuid ; TSharedRef<ISequencerSection> SectionInterface ; TWeakPtr<ISequencer> SequencerWeak ; ISequencerTrackEditor& TrackEditor ; } ; class ISequencerSection { public : struct FChannelData { FMovieSceneChannelHandle Channel ; const FMovieSceneChannelMetaData& MetaData ; } ; ~)",
    "insertText": "ISequencerSection()"
  },
  {
    "label": "GetSectionObject()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneSection*)",
    "insertText": "GetSectionObject()"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "GenerateSectionWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateSectionWidget()"
  },
  {
    "label": "OnSectionDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSectionDoubleClicked(const FGeometry& SectionGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnSectionDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnSectionDoubleClicked(const FGeometry& SectionGeometry, const FPointerEvent& MouseEvent, const FGuid& ObjectBinding)"
  },
  {
    "label": "OnKeyDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDoubleClicked(const TArray<FKeyHandle>& KeyHandles)"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionToolTip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetSectionToolTip()"
  },
  {
    "label": "GetSectionTime()",
    "kind": "Method",
    "detail": "Function (} TOptional<FFrameTime>)",
    "insertText": "GetSectionTime(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "GenerateSectionLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateSectionLayout(class ISectionLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "ConstructCategoryModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::FCategoryModel>)",
    "insertText": "ConstructCategoryModel(FName InCategoryName, const FText& InDisplayText, TArrayView<const FChannelData> Channels)"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "GetSectionGripSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionGripSize()"
  },
  {
    "label": "BuildSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildSectionContextMenu(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "BuildSectionSidebarMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildSectionSidebarMenu(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "BuildSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionContextMenu(MenuBuilder, ObjectBinding)"
  },
  {
    "label": "RequestDeleteCategory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequestDeleteCategory(const TArray<FName>& CategoryNamePath)"
  },
  {
    "label": "ResizeSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeSection(ESequencerSectionResizeMode ResizeMode, FFrameNumber ResizeFrameNumber)"
  },
  {
    "label": "BeginSlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlipSection()"
  },
  {
    "label": "SlipSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SlipSection(FFrameNumber SlipTime)"
  },
  {
    "label": "BeginDilateSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDilateSection()"
  },
  {
    "label": "DilateSection()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DilateSection(const TRange<FFrameNumber>& NewRange, float DilationFactor)"
  },
  {
    "label": "CustomizePropertiesDetailsView()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CustomizePropertiesDetailsView(TSharedRef<IDetailsView> DetailsView, const FSequencerSectionPropertyDetailsViewCustomizationParams& InParams)"
  },
  {
    "label": "FSequencerSection()",
    "kind": "Method",
    "detail": "Function (} } ; class FSequencerSection : public ISequencerSection { public :)",
    "insertText": "FSequencerSection(UMovieSceneSection& InSection) : WeakSection(&InSection)"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& Painter)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetSectionObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionObject()->SetRange(NewRange)"
  }
]