[
  {
    "label": "EGLClientPixmapHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EGLClientPixmapHI"
  },
  {
    "label": "eglLockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef __eglext_h_ # define __eglext_h_ # ifdef __cplusplus \" C \" { # endif # include<EGL / eglplatform . h> # define EGL_EGLEXT_VERSION 1 6 # ifndef EGL_KHR_config_attribs # define EGL_KHR_config_attribs 1 # define EGL_CONFORMANT_KHR 0 x3042 # define EGL_VG_COLORSPACE_LINEAR_BIT_KHR 0 x0020 # define EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR 0 x0040 # endif # ifndef EGL_KHR_lock_surface # define EGL_KHR_lock_surface 1 # define EGL_READ_SURFACE_BIT_KHR 0 x0001 # define EGL_WRITE_SURFACE_BIT_KHR 0 x0002 # define EGL_LOCK_SURFACE_BIT_KHR 0 x0080 # define EGL_OPTIMAL_FORMAT_BIT_KHR 0 x0100 # define EGL_MATCH_FORMAT_KHR 0 x3043 # define EGL_FORMAT_RGB_565_EXACT_KHR 0 x30C0 # define EGL_FORMAT_RGB_565_KHR 0 x30C1 # define EGL_FORMAT_RGBA_8888_EXACT_KHR 0 x30C2 # define EGL_FORMAT_RGBA_8888_KHR 0 x30C3 # define EGL_MAP_PRESERVE_PIXELS_KHR 0 x30C4 # define EGL_LOCK_USAGE_HINT_KHR 0 x30C5 # define EGL_BITMAP_POINTER_KHR 0 x30C6 # define EGL_BITMAP_PITCH_KHR 0 x30C7 # define EGL_BITMAP_ORIGIN_KHR 0 x30C8 # define EGL_BITMAP_PIXEL_RED_OFFSET_KHR 0 x30C9 # define EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR 0 x30CA # define EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR 0 x30CB # define EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR 0 x30CC # define EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR 0 x30CD # define EGL_LOWER_LEFT_KHR 0 x30CE # define EGL_UPPER_LEFT_KHR 0 x30CF # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)"
  },
  {
    "label": "eglUnlockSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLLOCKSURFACEKHRPROC) (EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLUNLOCKSURFACEKHRPROC) (EGLDisplay display, EGLSurface surface)"
  },
  {
    "label": "EGL_NO_IMAGE_KHR()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_KHR_image # define EGL_KHR_image 1 # define EGL_NATIVE_PIXMAP_KHR 0 x30B0 typedef void* EGLImageKHR ; # define)",
    "insertText": "EGL_NO_IMAGE_KHR((EGLImageKHR)0) #ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLImageKHR EGLAPIENTRY eglCreateImageKHR (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyImageKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "EGLImageKHR()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLImageKHR(EGLAPIENTRYP PFNEGLCREATEIMAGEKHRPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYIMAGEKHRPROC) (EGLDisplay dpy, EGLImageKHR image)"
  },
  {
    "label": "EGL_NO_SYNC_KHR()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_KHR_vg_parent_image # define EGL_KHR_vg_parent_image 1 # define EGL_VG_PARENT_IMAGE_KHR 0 x30BA # endif # ifndef EGL_KHR_gl_texture_2D_image # define EGL_KHR_gl_texture_2D_image 1 # define EGL_GL_TEXTURE_2D_KHR 0 x30B1 # define EGL_GL_TEXTURE_LEVEL_KHR 0 x30BC # endif # ifndef EGL_KHR_gl_texture_cubemap_image # define EGL_KHR_gl_texture_cubemap_image 1 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR 0 x30B3 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR 0 x30B4 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR 0 x30B5 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR 0 x30B6 # define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR 0 x30B7 # define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR 0 x30B8 # endif # ifndef EGL_KHR_gl_texture_3D_image # define EGL_KHR_gl_texture_3D_image 1 # define EGL_GL_TEXTURE_3D_KHR 0 x30B2 # define EGL_GL_TEXTURE_ZOFFSET_KHR 0 x30BD # endif # ifndef EGL_KHR_gl_renderbuffer_image # define EGL_KHR_gl_renderbuffer_image 1 # define EGL_GL_RENDERBUFFER_KHR 0 x30B9 # endif # if KHRONOS_SUPPORT_INT64 # ifndef EGL_KHR_reusable_sync # define EGL_KHR_reusable_sync 1 typedef void* EGLSyncKHR ; typedef khronos_utime_nanoseconds_t EGLTimeKHR ; # define EGL_SYNC_STATUS_KHR 0 x30F1 # define EGL_SIGNALED_KHR 0 x30F2 # define EGL_UNSIGNALED_KHR 0 x30F3 # define EGL_TIMEOUT_EXPIRED_KHR 0 x30F5 # define EGL_CONDITION_SATISFIED_KHR 0 x30F6 # define EGL_SYNC_TYPE_KHR 0 x30F7 # define EGL_SYNC_REUSABLE_KHR 0 x30FA # define EGL_SYNC_FLUSH_COMMANDS_BIT_KHR 0 x0001 # define EGL_FOREVER_KHR 0 xFFFFFFFFFFFFFFFFull # define)",
    "insertText": "EGL_NO_SYNC_KHR((EGLSyncKHR)0) #ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncKHR EGLAPIENTRY eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "eglClientWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)"
  },
  {
    "label": "eglSignalSyncKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)"
  },
  {
    "label": "eglGetSyncAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGLSyncKHR()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLSyncKHR(EGLAPIENTRYP PFNEGLCREATESYNCKHRPROC) (EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLCLIENTWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSIGNALSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETSYNCATTRIBKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGL_NO_SYNC_NV()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_KHR_image_base # define EGL_KHR_image_base 1 # define EGL_IMAGE_PRESERVED_KHR 0 x30D2 # endif # ifndef EGL_KHR_image_pixmap # define EGL_KHR_image_pixmap 1 # endif # ifndef EGL_IMG_context_priority # define EGL_IMG_context_priority 1 # define EGL_CONTEXT_PRIORITY_LEVEL_IMG 0 x3100 # define EGL_CONTEXT_PRIORITY_HIGH_IMG 0 x3101 # define EGL_CONTEXT_PRIORITY_MEDIUM_IMG 0 x3102 # define EGL_CONTEXT_PRIORITY_LOW_IMG 0 x3103 # endif # ifndef EGL_KHR_lock_surface2 # define EGL_KHR_lock_surface2 1 # define EGL_BITMAP_PIXEL_SIZE_KHR 0 x3110 # endif # ifndef EGL_NV_coverage_sample # define EGL_NV_coverage_sample 1 # define EGL_COVERAGE_BUFFERS_NV 0 x30E0 # define EGL_COVERAGE_SAMPLES_NV 0 x30E1 # endif # ifndef EGL_NV_depth_nonlinear # define EGL_NV_depth_nonlinear 1 # define EGL_DEPTH_ENCODING_NV 0 x30E2 # define EGL_DEPTH_ENCODING_NONE_NV 0 # define EGL_DEPTH_ENCODING_NONLINEAR_NV 0 x30E3 # endif # if KHRONOS_SUPPORT_INT64 # ifndef EGL_NV_sync # define EGL_NV_sync 1 # define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV 0 x30E6 # define EGL_SYNC_STATUS_NV 0 x30E7 # define EGL_SIGNALED_NV 0 x30E8 # define EGL_UNSIGNALED_NV 0 x30E9 # define EGL_SYNC_FLUSH_COMMANDS_BIT_NV 0 x0001 # define EGL_FOREVER_NV 0 xFFFFFFFFFFFFFFFFull # define EGL_ALREADY_SIGNALED_NV 0 x30EA # define EGL_TIMEOUT_EXPIRED_NV 0 x30EB # define EGL_CONDITION_SATISFIED_NV 0 x30EC # define EGL_SYNC_TYPE_NV 0 x30ED # define EGL_SYNC_CONDITION_NV 0 x30EE # define EGL_SYNC_FENCE_NV 0 x30EF # define)",
    "insertText": "EGL_NO_SYNC_NV((EGLSyncNV)0)"
  },
  {
    "label": "eglCreateFenceSyncNV()",
    "kind": "Method",
    "detail": "Function (typedef khronos_utime_nanoseconds_t EGLTimeNV ; # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSyncNV EGLAPIENTRY)",
    "insertText": "eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySyncNV(EGLSyncNV sync)"
  },
  {
    "label": "eglFenceNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglFenceNV(EGLSyncNV sync)"
  },
  {
    "label": "eglClientWaitSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglClientWaitSyncNV(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)"
  },
  {
    "label": "eglSignalSyncNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSignalSyncNV(EGLSyncNV sync, EGLenum mode)"
  },
  {
    "label": "eglGetSyncAttribNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetSyncAttribNV(EGLSyncNV sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "EGLSyncNV()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLSyncNV(EGLAPIENTRYP PFNEGLCREATEFENCESYNCNVPROC) (EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSYNCNVPROC) (EGLSyncNV sync)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLFENCENVPROC) (EGLSyncNV sync)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLCLIENTWAITSYNCNVPROC) (EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSIGNALSYNCNVPROC) (EGLSyncNV sync, EGLenum mode)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLGETSYNCATTRIBNVPROC) (EGLSyncNV sync, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreatePixmapSurfaceHI()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if KHRONOS_SUPPORT_INT64 # ifndef EGL_KHR_fence_sync # define EGL_KHR_fence_sync 1 # define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR 0 x30F0 # define EGL_SYNC_CONDITION_KHR 0 x30F8 # define EGL_SYNC_FENCE_KHR 0 x30F9 # endif # endif # ifndef EGL_HI_clientpixmap # define EGL_HI_clientpixmap 1 # define EGL_CLIENT_PIXMAP_POINTER_HI 0 x8F74 struct EGLClientPixmapHI { void* pData ; EGLint iWidth ; EGLint iHeight ; EGLint iStride ; } ; # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI* pixmap)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEHIPROC) (EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI* pixmap)"
  },
  {
    "label": "eglCreateDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_HI_colorformats # define EGL_HI_colorformats 1 # define EGL_COLOR_FORMAT_HI 0 x8F70 # define EGL_COLOR_RGB_HI 0 x8F71 # define EGL_COLOR_RGBA_HI 0 x8F72 # define EGL_COLOR_ARGB_HI 0 x8F73 # endif # ifndef EGL_MESA_drm_image # define EGL_MESA_drm_image 1 # define EGL_DRM_BUFFER_FORMAT_MESA 0 x31D0 # define EGL_DRM_BUFFER_USE_MESA 0 x31D1 # define EGL_DRM_BUFFER_FORMAT_ARGB32_MESA 0 x31D2 # define EGL_DRM_BUFFER_MESA 0 x31D3 # define EGL_DRM_BUFFER_STRIDE_MESA 0 x31D4 # define EGL_DRM_BUFFER_USE_SCANOUT_MESA 0 x00000001 # define EGL_DRM_BUFFER_USE_SHARE_MESA 0 x00000002 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLImageKHR EGLAPIENTRY)",
    "insertText": "eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglExportDRMImageMESA()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)"
  },
  {
    "label": "EGLImageKHR()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLImageKHR(EGLAPIENTRYP PFNEGLCREATEDRMIMAGEMESAPROC) (EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLEXPORTDRMIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)"
  },
  {
    "label": "eglPostSubBufferNV()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_NV_post_sub_buffer # define EGL_NV_post_sub_buffer 1 # define EGL_POST_SUB_BUFFER_SUPPORTED_NV 0 x30BE # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLPOSTSUBBUFFERNVPROC) (EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)"
  },
  {
    "label": "eglQuerySurfacePointerANGLE()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_ANGLE_query_surface_pointer # define EGL_ANGLE_query_surface_pointer 1 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean)",
    "insertText": "eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSURFACEPOINTERANGLEPROC) (EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value)"
  },
  {
    "label": "eglGetSystemTimeFrequencyNV()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_ANGLE_surface_d3d_texture_2d_share_handle # define EGL_ANGLE_surface_d3d_texture_2d_share_handle 1 # define EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE 0 x3200 # endif # ifndef EGL_NV_coverage_sample_resolve # define EGL_NV_coverage_sample_resolve 1 # define EGL_COVERAGE_SAMPLE_RESOLVE_NV 0 x3131 # define EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV 0 x3132 # define EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV 0 x3133 # endif # if KHRONOS_SUPPORT_INT64 # ifndef EGL_NV_system_time # define EGL_NV_system_time 1 typedef khronos_utime_nanoseconds_t EGLuint64NV ; # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLuint64NV EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeFrequencyNV(void)"
  },
  {
    "label": "eglGetSystemTimeNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLuint64NV EGLAPIENTRY)",
    "insertText": "eglGetSystemTimeNV(void)"
  },
  {
    "label": "EGLuint64NV()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLuint64NV(EGLAPIENTRYP PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC) (void)"
  },
  {
    "label": "EGLuint64NV()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLuint64NV(EGLAPIENTRYP PFNEGLGETSYSTEMTIMENVPROC) (void)"
  },
  {
    "label": "EGL_NO_STREAM_KHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if KHRONOS_SUPPORT_INT64 # ifndef EGL_KHR_stream # define EGL_KHR_stream 1 typedef void* EGLStreamKHR ; typedef khronos_uint64_t EGLuint64KHR ; # define)",
    "insertText": "EGL_NO_STREAM_KHR((EGLStreamKHR)0) #define EGL_CONSUMER_LATENCY_USEC_KHR 0x3210 #define EGL_PRODUCER_FRAME_KHR 0x3212 #define EGL_CONSUMER_FRAME_KHR 0x3213 #define EGL_STREAM_STATE_KHR 0x3214 #define EGL_STREAM_STATE_CREATED_KHR 0x3215 #define EGL_STREAM_STATE_CONNECTING_KHR 0x3216 #define EGL_STREAM_STATE_EMPTY_KHR 0x3217 #define EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR 0x3218 #define EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR 0x3219 #define EGL_STREAM_STATE_DISCONNECTED_KHR 0x321A #define EGL_BAD_STREAM_KHR 0x321B #define EGL_BAD_STATE_KHR 0x321C #ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLStreamKHR EGLAPIENTRY eglCreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamAttribKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamAttribKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)"
  },
  {
    "label": "eglQueryStreamKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value)"
  },
  {
    "label": "eglQueryStreamu64KHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamu64KHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value)"
  },
  {
    "label": "EGLStreamKHR()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLStreamKHR(EGLAPIENTRYP PFNEGLCREATESTREAMKHRPROC)(EGLDisplay dpy, const EGLint *attrib_list)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLDESTROYSTREAMKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMATTRIBKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMU64KHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value)"
  },
  {
    "label": "eglStreamConsumerGLTextureExternalKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef EGL_KHR_stream # ifndef EGL_KHR_stream_consumer_gltexture # define EGL_KHR_stream_consumer_gltexture 1 # define EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR 0 x321E # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerAcquireKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglStreamConsumerReleaseKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglCreateStreamProducerSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef EGL_KHR_stream # ifndef EGL_KHR_stream_producer_eglsurface # define EGL_KHR_stream_producer_eglsurface 1 # define EGL_STREAM_BIT_KHR 0 x0800 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)"
  },
  {
    "label": "EGLSurface()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLSurface(EGLAPIENTRYP PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC)(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)"
  },
  {
    "label": "eglQueryStreamTimeKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef EGL_KHR_stream # ifndef EGL_KHR_stream_producer_aldatalocator # define EGL_KHR_stream_producer_aldatalocator 1 # endif # endif # ifdef EGL_KHR_stream # ifndef EGL_KHR_stream_fifo # define EGL_KHR_stream_fifo 1 # define EGL_STREAM_FIFO_LENGTH_KHR 0 x31FC # define EGL_STREAM_TIME_NOW_KHR 0 x31FD # define EGL_STREAM_TIME_CONSUMER_KHR 0 x31FE # define EGL_STREAM_TIME_PRODUCER_KHR 0 x31FF # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryStreamTimeKHR(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYSTREAMTIMEKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value)"
  },
  {
    "label": "EGL_NO_FILE_DESCRIPTOR_KHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_create_context_robustness # define EGL_EXT_create_context_robustness 1 # define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT 0 x30BF # define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT 0 x3138 # define EGL_NO_RESET_NOTIFICATION_EXT 0 x31BE # define EGL_LOSE_CONTEXT_ON_RESET_EXT 0 x31BF # endif # ifndef EGL_ANGLE_d3d_share_handle_client_buffer # define EGL_ANGLE_d3d_share_handle_client_buffer 1 # endif # ifndef EGL_KHR_create_context # define EGL_KHR_create_context 1 # define EGL_CONTEXT_MAJOR_VERSION_KHR EGL_CONTEXT_CLIENT_VERSION # define EGL_CONTEXT_MINOR_VERSION_KHR 0 x30FB # define EGL_CONTEXT_FLAGS_KHR 0 x30FC # define EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR 0 x30FD # define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR 0 x31BD # define EGL_NO_RESET_NOTIFICATION_KHR 0 x31BE # define EGL_LOSE_CONTEXT_ON_RESET_KHR 0 x31BF # define EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR 0 x00000001 # define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR 0 x00000002 # define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR 0 x00000004 # define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR 0 x00000001 # define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR 0 x00000002 # define EGL_OPENGL_ES3_BIT_KHR 0 x00000040 # endif # ifndef EGL_KHR_surfaceless_context # define EGL_KHR_surfaceless_context 1 # endif # ifdef EGL_KHR_stream # ifndef EGL_KHR_stream_cross_process_fd # define EGL_KHR_stream_cross_process_fd 1 typedef int EGLNativeFileDescriptorKHR ; # define)",
    "insertText": "EGL_NO_FILE_DESCRIPTOR_KHR((EGLNativeFileDescriptorKHR)(-1)) #ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLNativeFileDescriptorKHR EGLAPIENTRY eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "eglCreateStreamFromFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLStreamKHR EGLAPIENTRY)",
    "insertText": "eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)"
  },
  {
    "label": "EGLNativeFileDescriptorKHR()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLNativeFileDescriptorKHR(EGLAPIENTRYP PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC)(EGLDisplay dpy, EGLStreamKHR stream)"
  },
  {
    "label": "EGLStreamKHR()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLStreamKHR(EGLAPIENTRYP PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC)(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)"
  },
  {
    "label": "eglWaitSyncKHR()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef EGL_EXT_multiview_window # define EGL_EXT_multiview_window 1 # define EGL_MULTIVIEW_VIEW_COUNT_EXT 0 x3134 # endif # ifndef EGL_KHR_wait_sync # define EGL_KHR_wait_sync 1 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLWAITSYNCKHRPROC)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)"
  },
  {
    "label": "eglQueryNativeDisplayNV()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_NV_post_convert_rounding # define EGL_NV_post_convert_rounding 1 # endif # ifndef EGL_NV_native_query # define EGL_NV_native_query 1 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativeDisplayNV(EGLDisplay dpy, EGLNativeDisplayType* display_id)"
  },
  {
    "label": "eglQueryNativeWindowNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativeWindowNV(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType* window)"
  },
  {
    "label": "eglQueryNativePixmapNV()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryNativePixmapNV(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType* pixmap)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEDISPLAYNVPROC)(EGLDisplay dpy, EGLNativeDisplayType *display_id)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEWINDOWNVPROC)(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLQUERYNATIVEPIXMAPNVPROC)(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_NV_3dvision_surface # define EGL_NV_3dvision_surface 1 # define EGL_AUTO_STEREO_NV 0 x3136 # endif # ifndef EGL_ANDROID_framebuffer_target # define EGL_ANDROID_framebuffer_target 1 # define EGL_FRAMEBUFFER_TARGET_ANDROID 0 x3147 # endif # ifndef EGL_ANDROID_blob_cache # define EGL_ANDROID_blob_cache 1 typedef khronos_ssize_t EGLsizeiANDROID ; typedef)",
    "insertText": "void(*EGLSetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, const void *value, EGLsizeiANDROID valueSize)"
  },
  {
    "label": "EGLsizeiANDROID()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "EGLsizeiANDROID(*EGLGetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, void *value, EGLsizeiANDROID valueSize)"
  },
  {
    "label": "eglSetBlobCacheFuncsANDROID()",
    "kind": "Method",
    "detail": "Function (# ifdef EGL_EGLEXT_PROTOTYPES EGLAPI void EGLAPIENTRY)",
    "insertText": "eglSetBlobCacheFuncsANDROID(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "void(EGLAPIENTRYP PFNEGLSETBLOBCACHEFUNCSANDROIDPROC)(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)"
  },
  {
    "label": "eglDupNativeFenceFDANDROID()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_ANDROID_image_native_buffer # define EGL_ANDROID_image_native_buffer 1 # define EGL_NATIVE_BUFFER_ANDROID 0 x3140 # endif # ifndef EGL_ANDROID_native_fence_sync # define EGL_ANDROID_native_fence_sync 1 # define EGL_SYNC_NATIVE_FENCE_ANDROID 0 x3144 # define EGL_SYNC_NATIVE_FENCE_FD_ANDROID 0 x3145 # define EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID 0 x3146 # define EGL_NO_NATIVE_FENCE_FD_ANDROID - 1 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLint EGLAPIENTRY)",
    "insertText": "eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR)"
  },
  {
    "label": "EGLint()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLint(EGLAPIENTRYP PFNEGLDUPNATIVEFENCEFDANDROIDPROC)(EGLDisplay dpy, EGLSyncKHR)"
  },
  {
    "label": "eglSwapBuffersWithDamageEXT()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EGL_ANDROID_recordable # define EGL_ANDROID_recordable 1 # define EGL_RECORDABLE_ANDROID 0 x3142 # endif # ifndef EGL_EXT_buffer_age # define EGL_EXT_buffer_age 1 # define EGL_BUFFER_AGE_EXT 0 x313D # endif # ifndef EGL_EXT_image_dma_buf_import # define EGL_EXT_image_dma_buf_import 1 # define EGL_LINUX_DMA_BUF_EXT 0 x3270 # define EGL_LINUX_DRM_FOURCC_EXT 0 x3271 # define EGL_DMA_BUF_PLANE0_FD_EXT 0 x3272 # define EGL_DMA_BUF_PLANE0_OFFSET_EXT 0 x3273 # define EGL_DMA_BUF_PLANE0_PITCH_EXT 0 x3274 # define EGL_DMA_BUF_PLANE1_FD_EXT 0 x3275 # define EGL_DMA_BUF_PLANE1_OFFSET_EXT 0 x3276 # define EGL_DMA_BUF_PLANE1_PITCH_EXT 0 x3277 # define EGL_DMA_BUF_PLANE2_FD_EXT 0 x3278 # define EGL_DMA_BUF_PLANE2_OFFSET_EXT 0 x3279 # define EGL_DMA_BUF_PLANE2_PITCH_EXT 0 x327A # define EGL_YUV_COLOR_SPACE_HINT_EXT 0 x327B # define EGL_SAMPLE_RANGE_HINT_EXT 0 x327C # define EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT 0 x327D # define EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT 0 x327E # define EGL_ITU_REC601_EXT 0 x327F # define EGL_ITU_REC709_EXT 0 x3280 # define EGL_ITU_REC2020_EXT 0 x3281 # define EGL_YUV_FULL_RANGE_EXT 0 x3282 # define EGL_YUV_NARROW_RANGE_EXT 0 x3283 # define EGL_YUV_CHROMA_SITING_0_EXT 0 x3284 # define EGL_YUV_CHROMA_SITING_0_5_EXT 0 x3285 # endif # ifndef EGL_ARM_pixmap_multisample_discard # define EGL_ARM_pixmap_multisample_discard 1 # define EGL_DISCARD_SAMPLES_ARM 0 x3286 # endif # ifndef EGL_EXT_swap_buffers_with_damage # define EGL_EXT_swap_buffers_with_damage 1 # ifdef EGL_EGLEXT_PROTOTYPES EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffersWithDamageEXT(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects)"
  },
  {
    "label": "EGLBoolean()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "EGLBoolean(EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC)(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects)"
  }
]