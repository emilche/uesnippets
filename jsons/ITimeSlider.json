[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FAnimatedRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedRange"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FPaintPlaybackRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintPlaybackRangeArgs"
  },
  {
    "label": "FPaintViewAreaArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintViewAreaArgs"
  },
  {
    "label": "ETimeSliderPlaybackStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETimeSliderPlaybackStatus"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "ITimeSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSlider"
  },
  {
    "label": "FPaintPlaybackRangeArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ISequencerInputHandler . h \" # include \" ViewRangeInterpolation . h \" # include \" Widgets / SCompoundWidget . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / CursorReply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" ISequencerInputHandler . h \" # include \" IMovieScenePlayer . h \" # include \" MovieScene . h \" # include \" AnimatedRange . h \" # include \" TimeSliderArgs . h \" # endif class FSlateWindowElementList ; struct FSlateBrush ; struct FGeometry ; struct FFrameRate ; struct FAnimatedRange ; class FSlateRect ; class FWidgetStyle ; struct FPaintPlaybackRangeArgs {)",
    "insertText": "FPaintPlaybackRangeArgs() : StartBrush(nullptr), EndBrush(nullptr), BrushWidth(0.f), SolidFillOpacity(0.f)"
  },
  {
    "label": "FPaintPlaybackRangeArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPaintPlaybackRangeArgs(const FSlateBrush* InStartBrush, const FSlateBrush* InEndBrush, float InBrushWidth) : StartBrush(InStartBrush), EndBrush(InEndBrush), BrushWidth(InBrushWidth)"
  },
  {
    "label": "FPaintViewAreaArgs()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush* StartBrush ; const FSlateBrush* EndBrush ; float BrushWidth ; float SolidFillOpacity ; } ; struct FPaintViewAreaArgs {)",
    "insertText": "FPaintViewAreaArgs() : bDisplayTickLines(false), bDisplayScrubPosition(false), bDisplayMarkedFrames(false)"
  },
  {
    "label": "ITimeSliderController()",
    "kind": "Method",
    "detail": "Function (} bool bDisplayTickLines ; bool bDisplayScrubPosition ; bool bDisplayMarkedFrames ; TOptional<FPaintPlaybackRangeArgs> PlaybackRangeArgs ; } ; enum ETimeSliderPlaybackStatus { Stopped,Playing,Scrubbing,Jumping,Stepping,Paused,MAX } ; class ITimeSliderController : public ISequencerInputHandler { public : ~)",
    "insertText": "ITimeSliderController()"
  },
  {
    "label": "OnPaintTimeSlider()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnPaintTimeSlider(bool bMirrorLabels, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnPaintViewArea()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintViewArea(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, bool bEnabled, const FPaintViewAreaArgs& Args)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (} FCursorReply)",
    "insertText": "OnCursorQuery(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnTimeSliderMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTimeSliderMouseButtonDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTimeSliderMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTimeSliderMouseButtonUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTimeSliderMouseMove()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTimeSliderMouseMove(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTimeSliderMouseWheel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTimeSliderMouseWheel(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDisplayRate()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "GetDisplayRate()"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "GetClampRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetClampRange()"
  },
  {
    "label": "GetPlayRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetPlayRange()"
  },
  {
    "label": "GetTimeBounds()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetTimeBounds()"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetSelectionRange()"
  },
  {
    "label": "GetScrubPosition()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetScrubPosition()"
  },
  {
    "label": "SetScrubPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubPosition(FFrameTime InTime, bool bEvaluate)"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackStatus(ETimeSliderPlaybackStatus InStatus)"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (ETimeSliderPlaybackStatus)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double NewRangeMin, double NewRangeMax, EViewRangeInterpolation Interpolation)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double NewRangeMin, double NewRangeMax)"
  },
  {
    "label": "SetPlayRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayRange(FFrameNumber RangeStart, int32 RangeDuration)"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(const TRange<FFrameNumber>& NewRange)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class ITimeSlider : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(ITimeSlider)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_END_ARGS()"
  }
]