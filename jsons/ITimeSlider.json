[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FAnimatedRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedRange"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FPaintPlaybackRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintPlaybackRangeArgs"
  },
  {
    "label": "FPaintViewAreaArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintViewAreaArgs"
  },
  {
    "label": "ETimeSliderPlaybackStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETimeSliderPlaybackStatus"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ITimeSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSlider"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OnMouseButtonDown(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OnMouseButtonUp(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OnMouseMove(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OnMouseWheel(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "SetScrubPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubPosition(FFrameTime InTime, bool bEvaluate)"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackStatus(ETimeSliderPlaybackStatus InStatus)"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double NewRangeMin, double NewRangeMax, EViewRangeInterpolation Interpolation)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double NewRangeMin, double NewRangeMax)"
  },
  {
    "label": "SetPlayRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayRange(FFrameNumber RangeStart, int32 RangeDuration)"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(const TRange<FFrameNumber>& NewRange)"
  }
]