[
  {
    "label": "MoveArrayItemsDown()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Containers / Array . h \" namespace Chaos { template<TItemArray> void)",
    "insertText": "MoveArrayItemsDown(TItemArray& Items, const int32 BeginIndex, const int32 EndIndex, const int32 DownShift)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Items [ SrcIndex - DownShift ] =)",
    "insertText": "MoveTemp(Items[SrcIndex])"
  },
  {
    "label": "RemoveArrayItemsAtSortedIndices()",
    "kind": "Method",
    "detail": "Function (} } } template<TItemArray> void)",
    "insertText": "RemoveArrayItemsAtSortedIndices(TItemArray& Items, const TArrayView<const int32>& SortedIndicesToRemove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 IndexToRemove1 = SortedIndicesToRemove [ IndicesIndex ] ;)",
    "insertText": "if(IndexToRemove1 != IndexToRemove0)"
  },
  {
    "label": "MoveArrayItemsDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveArrayItemsDown(Items, IndexToRemove0 + 1, IndexToRemove1, DestShift)"
  },
  {
    "label": "MoveArrayItemsDown()",
    "kind": "Method",
    "detail": "Function (IndexToRemove0 = IndexToRemove1 ; DestShift + + ; } })",
    "insertText": "MoveArrayItemsDown(Items, IndexToRemove0 + 1, Items.Num(), DestShift)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "SetNum(Items.Num() - DestShift, EAllowShrinking::No)"
  }
]