[
  {
    "label": "FMalloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMalloc"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FPlatformMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformMemoryStats"
  },
  {
    "label": "FAutoConsoleVariableRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericPlatformMemoryConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMemoryConstants"
  },
  {
    "label": "FGenericPlatformMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMemoryStats"
  },
  {
    "label": "FPlatformSpecificStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformSpecificStat"
  },
  {
    "label": "FForkedPageAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForkedPageAllocation"
  },
  {
    "label": "FGenericPlatformMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMemory"
  },
  {
    "label": "EMemoryCounterRegion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryCounterRegion"
  },
  {
    "label": "EMemoryAllocatorToUse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryAllocatorToUse"
  },
  {
    "label": "ESharedMemoryAccess",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESharedMemoryAccess"
  },
  {
    "label": "FSharedMemoryRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedMemoryRegion"
  },
  {
    "label": "Limits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Limits"
  },
  {
    "label": "FBasicVirtualMemoryBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasicVirtualMemoryBlock"
  },
  {
    "label": "FGenericStatsUpdater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericStatsUpdater"
  },
  {
    "label": "PLATFORM_MEMORY_SIZE_BUCKET_LIST()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreFwd . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformString . h \" # include<string . h> # include<wchar . h> class FMalloc ; class FOutputDevice ; class FString ; struct FGenericMemoryStats ; struct FPlatformMemoryStats ; # ifndef UE_CHECK_LARGE_ALLOCATIONS # define UE_CHECK_LARGE_ALLOCATIONS 0 # endif # if UE_CHECK_LARGE_ALLOCATIONS class FAutoConsoleVariableRef ; namespace UE::Memory::Private { bool GEnableLargeAllocationChecks ; int32 GLargeAllocationThreshold ; FAutoConsoleVariableRef CVarEnableLargeAllocationChecks ; } # endif # define)",
    "insertText": "PLATFORM_MEMORY_SIZE_BUCKET_LIST(XBUCKET) \\ \\ XBUCKET(Largest) \\ XBUCKET(Larger) \\ \\ XBUCKET(Default) \\ XBUCKET(Smaller) \\ XBUCKET(Smallest) \\ XBUCKET(Tiniest) \\ #define PLATFORM_MEMORY_SIZE_BUCKET_ENUM(Name)"
  },
  {
    "label": "PLATFORM_MEMORY_SIZE_BUCKET_LIST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PLATFORM_MEMORY_SIZE_BUCKET_LIST(PLATFORM_MEMORY_SIZE_BUCKET_ENUM)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# undef PLATFORM_MEMORY_SIZE_BUCKET_ENUM const TCHAR*)",
    "insertText": "LexToString(EPlatformMemorySizeBucket Bucket)"
  },
  {
    "label": "PLATFORM_MEMORY_SIZE_BUCKET_LEXTOSTRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PLATFORM_MEMORY_SIZE_BUCKET_LEXTOSTRING(Name) case EPlatformMemorySizeBucket::Name: return TEXT(#Name)"
  },
  {
    "label": "PLATFORM_MEMORY_SIZE_BUCKET_LIST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PLATFORM_MEMORY_SIZE_BUCKET_LIST(PLATFORM_MEMORY_SIZE_BUCKET_LEXTOSTRING) } #undef PLATFORM_MEMORY_SIZE_BUCKET_LEXTOSTRING return TEXT(\"Unknown\")"
  },
  {
    "label": "AddressLimit()",
    "kind": "Method",
    "detail": "Function (} enum class EMemcpyCachePolicy : uint8 { StoreCached,StoreUncached,} ; struct FGenericPlatformMemoryConstants { uint64 TotalPhysical = 0 ; uint64 TotalVirtual = 0 ; SIZE_T PageSize = 0 ; SIZE_T OsAllocationGranularity = 0 ; SIZE_T BinnedPageSize = 0 ; SIZE_T BinnedAllocationGranularity = 0 ; uint64 AddressStart = 0 ; uint64)",
    "insertText": "AddressLimit(uint64)"
  },
  {
    "label": "GetMemoryPressureStatus()",
    "kind": "Method",
    "detail": "Function (uint32 TotalPhysicalGB = 1 ; } ; typedef FGenericPlatformMemoryConstants FPlatformMemoryConstants ; struct FGenericPlatformMemoryStats : public FPlatformMemoryConstants { uint64 AvailablePhysical ; uint64 AvailableVirtual ; uint64 UsedPhysical ; uint64 PeakUsedPhysical ; uint64 UsedVirtual ; uint64 PeakUsedVirtual ; enum class EMemoryPressureStatus : uint8 { Unknown,Nominal,Warning,Critical,} ; EMemoryPressureStatus)",
    "insertText": "GetMemoryPressureStatus()"
  },
  {
    "label": "FGenericPlatformMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGenericPlatformMemoryStats()"
  },
  {
    "label": "FPlatformSpecificStat()",
    "kind": "Method",
    "detail": "Function (struct FPlatformSpecificStat { const TCHAR* Name ; uint64 Value ;)",
    "insertText": "FPlatformSpecificStat(const TCHAR* InName, uint64 InValue) : Name(InName) , Value(InValue)"
  },
  {
    "label": "GetPlatformSpecificStats()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FPlatformSpecificStat>)",
    "insertText": "GetPlatformSpecificStats()"
  },
  {
    "label": "GetAvailablePhysical()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAvailablePhysical(bool bExcludeExtraDevMemory)"
  },
  {
    "label": "SetEndFrameCsvStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndFrameCsvStats()"
  },
  {
    "label": "FMemory_Alloca()",
    "kind": "Method",
    "detail": "Function (} } ; struct FForkedPageAllocation { uint64 PageStart ; uint64 PageEnd ; uint64 SharedCleanKiB ; uint64 SharedDirtyKiB ; uint64 PrivateCleanKiB ; uint64 PrivateDirtyKiB ; } ; struct FPlatformMemoryStats ; # if PLATFORM_USES_MICROSOFT_LIBC_FUNCTIONS # define __FMemory_Alloca_Func _alloca # else # define __FMemory_Alloca_Func alloca # endif # define)",
    "insertText": "FMemory_Alloca(Size) ((Size==0) ? 0 : (void*)(((PTRINT)__FMemory_Alloca_Func(Size + 15) + 15) & ~15)) #define FMemory_Alloca_Aligned(Size, Alignment) ((Size==0) ? 0 : ((Alignment <= 16) ? FMemory_Alloca(Size) : (void*)(((PTRINT)__FMemory_Alloca_Func(Size + Alignment-1) + Alignment-1) & ~(Alignment-1))))"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool bIsOOM ; uint64 OOMAllocationSize ; uint32 OOMAllocationAlignment ; void* BackupOOMMemoryPool ; uint32 BackupOOMMemoryPoolSize ; enum EMemoryCounterRegion { MCR_Invalid,MCR_Physical,MCR_GPU,MCR_GPUSystem,MCR_TexturePool,MCR_StreamingPool,MCR_UsedStreamingPool,MCR_GPUDefragPool,MCR_PhysicalLLM,MCR_MAX } ; enum EMemoryAllocatorToUse { Ansi,Stomp,TBB,Jemalloc,Binned,Binned2,Binned3,Platform,Mimalloc,Libpas,} ; EMemoryAllocatorToUse AllocatorToUse ; enum ESharedMemoryAccess {)",
    "insertText": "Read(1 << 1), Write = (1 << 2)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (struct FSharedMemoryRegion { const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : enum Limits { MaxSharedMemoryName = 1 2 8 } ; TCHAR Name [ MaxSharedMemoryName ] ; uint32 AccessMode ; void* Address ; SIZE_T Size ; } ; void)",
    "insertText": "Init()"
  },
  {
    "label": "OnOutOfMemory()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "OnOutOfMemory(uint64 Size, uint32 Alignment)"
  },
  {
    "label": "SetupMemoryPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMemoryPools()"
  },
  {
    "label": "GetBackMemoryPoolSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBackMemoryPoolSize()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (FPlatformMemoryStats)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetStatsRaw()",
    "kind": "Method",
    "detail": "Function (FPlatformMemoryStats)",
    "insertText": "GetStatsRaw()"
  },
  {
    "label": "GetMemoryUsedFast()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMemoryUsedFast()"
  },
  {
    "label": "GetStatsForMallocProfiler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStatsForMallocProfiler(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "GetConstants()",
    "kind": "Method",
    "detail": "Function (const FPlatformMemoryConstants&)",
    "insertText": "GetConstants()"
  },
  {
    "label": "GetPhysicalGBRam()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPhysicalGBRam()"
  },
  {
    "label": "PageProtect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PageProtect(void* const Ptr, const SIZE_T Size, const bool bCanRead, const bool bCanWrite)"
  },
  {
    "label": "BinnedAllocFromOS()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "BinnedAllocFromOS(SIZE_T Size)"
  },
  {
    "label": "BinnedFreeToOS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BinnedFreeToOS(void* Ptr, SIZE_T Size)"
  },
  {
    "label": "MiMallocInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MiMallocInit()"
  },
  {
    "label": "NanoMallocInit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NanoMallocInit()"
  },
  {
    "label": "FBasicVirtualMemoryBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBasicVirtualMemoryBlock(void *InPtr, uint32 InVMSizeDivVirtualSizeAlignment) : Ptr(InPtr) , VMSizeDivVirtualSizeAlignment(InVMSizeDivVirtualSizeAlignment)"
  },
  {
    "label": "FBasicVirtualMemoryBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBasicVirtualMemoryBlock(const FBasicVirtualMemoryBlock& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBasicVirtualMemoryBlock&)",
    "insertText": "operator(const FBasicVirtualMemoryBlock& Other)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(size_t InOffset, size_t InSize)"
  },
  {
    "label": "FreeVirtual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtual()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(size_t(((uint8*)InPtr) - ((uint8*)Ptr)), InSize)"
  },
  {
    "label": "DecommitByPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitByPtr(void *InPtr, size_t InSize)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(size_t(((uint8*)InPtr) - ((uint8*)Ptr)), InSize)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Commit()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(0, GetActualSize())"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decommit()"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decommit(0, GetActualSize())"
  },
  {
    "label": "GetActualSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetActualSize()"
  },
  {
    "label": "AllocateVirtual()",
    "kind": "Method",
    "detail": "Function (} FPlatformVirtualMemoryBlock)",
    "insertText": "AllocateVirtual(size_t Size, size_t InAlignment = FPlatformVirtualMemoryBlock::GetVirtualSizeAlignment())"
  },
  {
    "label": "GetCommitAlignment()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetCommitAlignment()"
  },
  {
    "label": "GetVirtualSizeAlignment()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetVirtualSizeAlignment()"
  },
  {
    "label": "BinnedPlatformHasMemoryPoolForThisSize()",
    "kind": "Method",
    "detail": "Function (# endif } ; bool)",
    "insertText": "BinnedPlatformHasMemoryPoolForThisSize(SIZE_T Size)"
  },
  {
    "label": "DumpPlatformAndAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpPlatformAndAllocatorStats(FOutputDevice& Ar)"
  },
  {
    "label": "GetMemorySizeBucket()",
    "kind": "Method",
    "detail": "Function (EPlatformMemorySizeBucket)",
    "insertText": "GetMemorySizeBucket()"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Memmove(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "Memcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Memcmp(const void* Buf1, const void* Buf2, SIZE_T Count)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memset(void* Dest, uint8 Char, SIZE_T Count)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memzero(void* Dest, SIZE_T Count)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Memcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "BigBlockMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "BigBlockMemcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "StreamingMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "StreamingMemcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "ParallelMemcpy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "ParallelMemcpy(void* Dest, const void* Src, SIZE_T Count, EMemcpyCachePolicy Policy = EMemcpyCachePolicy::StoreCached)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (} private : template<T> void)",
    "insertText": "Valswap(T& A, T& B)"
  },
  {
    "label": "MemswapGreaterThan8()",
    "kind": "Method",
    "detail": "Function (T Tmp = A ; A = B ; B = Tmp ; } void)",
    "insertText": "MemswapGreaterThan8(void* Ptr1, void* Ptr2, SIZE_T Size)"
  },
  {
    "label": "Memswap()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Memswap(void* Ptr1, void* Ptr2, SIZE_T Size)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 2 :)",
    "insertText": "Valswap(*(uint16*)Ptr1, *(uint16*)Ptr2)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 3 :)",
    "insertText": "Valswap(*((uint16*&)Ptr1)++, *((uint16*&)Ptr2)++)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Valswap(*(uint8*)Ptr1, *(uint8*)Ptr2)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 4 :)",
    "insertText": "Valswap(*(uint32*)Ptr1, *(uint32*)Ptr2)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 5 :)",
    "insertText": "Valswap(*((uint32*&)Ptr1)++, *((uint32*&)Ptr2)++)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 8 :)",
    "insertText": "Valswap(*(uint64*)Ptr1, *(uint64*)Ptr2)"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (break ; case 1 6 :)",
    "insertText": "Valswap(((uint64*)Ptr1)[0], ((uint64*)Ptr2)[0])"
  },
  {
    "label": "Valswap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Valswap(((uint64*)Ptr1)[1], ((uint64*)Ptr2)[1])"
  },
  {
    "label": "MemswapGreaterThan8()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "MemswapGreaterThan8(Ptr1, Ptr2, Size)"
  },
  {
    "label": "ReadUnaligned()",
    "kind": "Method",
    "detail": "Function (break ; } } template<T> T)",
    "insertText": "ReadUnaligned(const void* Ptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (T AlignedT ;)",
    "insertText": "memcpy(&AlignedT, Ptr, sizeof(T))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(Ptr, &InValue, sizeof(T))"
  },
  {
    "label": "MapNamedSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (} FSharedMemoryRegion*)",
    "insertText": "MapNamedSharedMemoryRegion(const FString& Name, bool bCreate, uint32 AccessMode, SIZE_T Size)"
  },
  {
    "label": "UnmapNamedSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmapNamedSharedMemoryRegion(FSharedMemoryRegion * MemoryRegion)"
  },
  {
    "label": "SupportsFastVRAMMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFastVRAMMemory()"
  },
  {
    "label": "GetExtraDevelopmentMemorySize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetExtraDevelopmentMemorySize()"
  },
  {
    "label": "GetProgramSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetProgramSize()"
  },
  {
    "label": "GetLLMAllocFunctions()",
    "kind": "Method",
    "detail": "Function (ProgramSize = InProgramSize ; } bool)",
    "insertText": "GetLLMAllocFunctions(void*(*&OutAllocFunction)(size_t), void(*&OutFreeFunction)(void*, size_t), int32& OutAlignment)"
  },
  {
    "label": "OnLowLevelMemory_Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLowLevelMemory_Free(void const* Pointer, uint64 Size, uint64 Tag)"
  },
  {
    "label": "RegisterCustomLLMTags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterCustomLLMTags()"
  },
  {
    "label": "UpdateCustomLLMTags()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateCustomLLMTags()"
  },
  {
    "label": "TracksLLMAllocations()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "TracksLLMAllocations()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__aarch64__) || defined(_M_ARM64)"
  },
  {
    "label": "InternalUpdateStats()",
    "kind": "Method",
    "detail": "Function (# endif protected : struct FGenericStatsUpdater ; void)",
    "insertText": "InternalUpdateStats(const FPlatformMemoryStats& MemoryStats)"
  }
]