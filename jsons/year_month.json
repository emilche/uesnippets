[
  {
    "label": "year_month",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "year_month"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_YEAR_MONTH_H # define _LIBCPP___CHRONO_YEAR_MONTH_H # include<__chrono / duration . h> # include<__chrono / month . h> # include<__chrono / year . h> # include<__config> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "year_month()",
    "kind": "Method",
    "detail": "Function (class year_month { chrono::year __y ; chrono::month __m ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "year_month()"
  },
  {
    "label": "year_month()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "year_month(const chrono::year& __yval, const chrono::month& __mval)"
  },
  {
    "label": "year()",
    "kind": "Method",
    "detail": "Function (__yval },__m { __mval } { } _LIBCPP_HIDE_FROM_ABI chrono::year)",
    "insertText": "year()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this -> __m + = __dm ; return* this ; } _LIBCPP_HIDE_FROM_ABI year_month&)",
    "insertText": "operator(const months& __dm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this -> __m - = __dm ; return* this ; } _LIBCPP_HIDE_FROM_ABI year_month&)",
    "insertText": "operator(const years& __dy)"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (this -> __y - = __dy ; return* this ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "ok()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; _LIBCPP_HIDE_FROM_ABI year_month)",
    "insertText": "operator(const year& __y, const month& __m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const year_month& __lhs, const year_month& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI year_month)",
    "insertText": "operator(const year_month& __lhs, const months& __rhs)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int __dmi = static_cast<)",
    "insertText": "int(static_cast<unsigned>(__lhs.month())) - 1 + __rhs.count()"
  },
  {
    "label": "__dy()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "__dy(__dmi >= 0 ? __dmi : __dmi-11)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (__dmi = __dmi - __dy* 1 2 + 1 ;)",
    "insertText": "return(__lhs.year() + years(__dy)) / month(static_cast<unsigned>(__dmi))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI year_month)",
    "insertText": "operator(const months& __lhs, const year_month& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI year_month)",
    "insertText": "operator(const years& __lhs, const year_month& __rhs)"
  }
]