[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorConcatenationOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorConcatenationOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorConcatenationOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONCATENATION_H # define EIGEN_CXX11_TENSOR_TENSOR_CONCATENATION_H namespace Eigen { namespace internal { template<Axis,LhsXprType,RhsXprType> struct traits<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>> { typedef promote_storage_type<LhsXprType::Scalar,RhsXprType::Scalar>::ret Scalar ; typedef promote_storage_type<traits<LhsXprType>::StorageKind,traits<RhsXprType>::StorageKind>::ret StorageKind ; typedef promote_index_type<traits<LhsXprType>::Index,traits<RhsXprType>::Index>::type Index ; typedef LhsXprType::Nested LhsNested ; typedef RhsXprType::Nested RhsNested ; typedef remove_reference<LhsNested>::type _LhsNested ; typedef remove_reference<RhsNested>::type _RhsNested ; const int NumDimensions = traits<LhsXprType>::NumDimensions ; const int Layout = traits<LhsXprType>::Layout ; enum { Flags = 0 } ; typedef conditional<Pointer_type_promotion<LhsXprType::Scalar,Scalar>::val,traits<LhsXprType>::PointerType,traits<RhsXprType>::PointerType>::type PointerType ; } ; template<Axis,LhsXprType,RhsXprType> struct eval<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>,Eigen::Dense> { typedef const TensorConcatenationOp<Axis,LhsXprType,RhsXprType>& type ; } ; template<Axis,LhsXprType,RhsXprType> struct nested<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>,1,eval<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>>::type> { typedef TensorConcatenationOp<Axis,LhsXprType,RhsXprType> type ; } ; } template<Axis,LhsXprType,RhsXprType> class TensorConcatenationOp : public TensorBase<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>,WriteAccessors> { public : typedef TensorBase<TensorConcatenationOp<Axis,LhsXprType,RhsXprType>,WriteAccessors> Base ; typedef internal::traits<TensorConcatenationOp>::Scalar Scalar ; typedef internal::traits<TensorConcatenationOp>::StorageKind StorageKind ; typedef internal::traits<TensorConcatenationOp>::Index Index ; typedef internal::nested<TensorConcatenationOp>::type Nested ; typedef internal::promote_storage_type<LhsXprType::CoeffReturnType,RhsXprType::CoeffReturnType>::ret CoeffReturnType ; typedef NumTraits<Scalar>::Real RealScalar ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorConcatenationOp(const LhsXprType& lhs, const RhsXprType& rhs, Axis axis) : m_lhs_xpr(lhs), m_rhs_xpr(rhs), m_axis(axis)"
  },
  {
    "label": "lhsExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<LhsXprType::Nested>::type&)",
    "insertText": "lhsExpression()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (RhsXprType::Nested m_rhs_xpr ; const Axis m_axis ; } ; template<Axis,LeftArgType,RightArgType,Device> struct TensorEvaluator<const TensorConcatenationOp<Axis,LeftArgType,RightArgType>,Device> { typedef TensorConcatenationOp<Axis,LeftArgType,RightArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<TensorEvaluator<LeftArgType,Device>::Dimensions>::value ; const int RightNumDims = internal::array_size<TensorEvaluator<RightArgType,Device>::Dimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,PacketAccess = TensorEvaluator<LeftArgType,Device>::PacketAccess&& TensorEvaluator<RightArgType,Device>::PacketAccess,BlockAccess = false,PreferBlockAccess = TensorEvaluator<LeftArgType,Device>::PreferBlockAccess | | TensorEvaluator<RightArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<LeftArgType,Device>::Layout,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_leftImpl(op.lhsExpression(), device), m_rightImpl(op.rhsExpression(), device), m_axis(op.axis())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<LeftArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<RightArgType, Device>::Layout) || NumDims == 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims == RightNumDims), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(0 <= m_axis && m_axis < NumDims)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const Dimensions& lhs_dims = m_leftImpl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({ int i = 0 ;)",
    "insertText": "for(; i < m_axis; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs_dims[i] > 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs_dims[i] == rhs_dims[i])"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rhs_dims[i] > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = lhs_dims [ i ] + rhs_dims [ i ] ;)",
    "insertText": "for(++i; i < NumDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = lhs_dims [ i ] ; } })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_leftStrides [ 0 ] = 1 ; m_rightStrides [ 0 ] = 1 ; m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int j = 1; j < NumDims; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_leftStrides [ j ] = m_leftStrides [ j - 1 ]* lhs_dims [ j - 1 ] ; m_rightStrides [ j ] = m_rightStrides [ j - 1 ]* rhs_dims [ j - 1 ] ; m_outputStrides [ j ] = m_outputStrides [ j - 1 ]* m_dimensions [ j - 1 ] ; } } else { m_leftStrides [ NumDims - 1 ] = 1 ; m_rightStrides [ NumDims - 1 ] = 1 ; m_outputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int j = NumDims - 2; j >= 0; --j)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (subs [ i ] = index / m_outputStrides [ i ] ; index - = subs [ i ]* m_outputStrides [ i ] ; } subs [ 0 ] = index ; } else {)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (left_index = subs [ 0 ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "left_index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "left_index(subs[i] % left_dims[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { left_index = subs [ NumDims - 1 ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} } return m_leftImpl .)",
    "insertText": "coeff(left_index)"
  },
  {
    "label": "right_index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "right_index(subs[i] % right_dims[i])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} } return m_rightImpl .)",
    "insertText": "coeff(right_index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int packetSize = PacketType<CoeffReturnType,Device>::size ;)",
    "insertText": "EIGEN_STATIC_ASSERT((packetSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index + packetSize - 1 < dimensions().TotalSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX CoeffReturnType values [ packetSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < packetSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const double compute_cost =)",
    "insertText": "NumDims(2 * TensorOpCost::AddCost<Index>() + 2 * TensorOpCost::MulCost<Index>() + TensorOpCost::DivCost<Index>() + TensorOpCost::ModCost<Index>())"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const double lhs_size = m_leftImpl .)",
    "insertText": "dimensions().TotalSize()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} # endif protected : Dimensions m_dimensions ; array<Index,NumDims> m_outputStrides ; array<Index,NumDims> m_leftStrides ; array<Index,NumDims> m_rightStrides ; TensorEvaluator<LeftArgType,Device> m_leftImpl ; TensorEvaluator<RightArgType,Device> m_rightImpl ; const Axis m_axis ; } ; template<Axis,LeftArgType,RightArgType,Device> struct TensorEvaluator<TensorConcatenationOp<Axis,LeftArgType,RightArgType>,Device> : public TensorEvaluator<const TensorConcatenationOp<Axis,LeftArgType,RightArgType>,Device> { typedef TensorEvaluator<const TensorConcatenationOp<Axis,LeftArgType,RightArgType>,Device> Base ; typedef TensorConcatenationOp<Axis,LeftArgType,RightArgType> XprType ; typedef Base::Dimensions Dimensions ; enum { IsAligned = false,PacketAccess = TensorEvaluator<LeftArgType,Device>::PacketAccess&& TensorEvaluator<RightArgType,Device>::PacketAccess,BlockAccess = false,PreferBlockAccess = TensorEvaluator<LeftArgType,Device>::PreferBlockAccess | | TensorEvaluator<RightArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<LeftArgType,Device>::Layout,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(Layout) == static_cast<int>(ColMajor)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array<Index,Base::NumDims> subs ;)",
    "insertText": "for(int i = Base::NumDims - 1; i > 0; --i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index left_index = subs [ 0 ] ;)",
    "insertText": "for(int i = 1; i < Base::NumDims; ++i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} return this -> m_leftImpl .)",
    "insertText": "coeffRef(left_index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} return this -> m_rightImpl .)",
    "insertText": "coeffRef(right_index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} } template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int packetSize = PacketType<CoeffReturnType,Device>::size ;)",
    "insertText": "EIGEN_STATIC_ASSERT((packetSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index + packetSize - 1 < this->dimensions().TotalSize())"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX CoeffReturnType values [ packetSize ] ; internal::pstore<CoeffReturnType,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coeffRef(index+i)"
  }
]