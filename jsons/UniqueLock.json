[
  {
    "label": "unique_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "unique_lock"
  },
  {
    "label": "unique_lock()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_UNIQUE_LOCK_H # define LLVM_SUPPORT_UNIQUE_LOCK_H # include \" llvm / Support / Mutex . h \" namespace llvm { template<MutexT> class unique_lock { MutexT* M ; bool locked ;)",
    "insertText": "unique_lock(const unique_lock &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const unique_lock &)"
  },
  {
    "label": "unique_lock()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "unique_lock() : M(nullptr), locked(false)"
  },
  {
    "label": "unique_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "unique_lock(MutexT &m) : M(&m), locked(true)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (M ->)",
    "insertText": "lock()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(unique_lock &&o)"
  },
  {
    "label": "unique_lock()",
    "kind": "Method",
    "detail": "Function (M = o . M ; locked = o . locked ; o . M = nullptr ; o . locked = false ; } ~)",
    "insertText": "unique_lock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!locked && \"mutex already locked!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(M && \"no associated mutex!\")"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (locked = true ; } void)",
    "insertText": "unlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(locked && \"unlocking a mutex that isn't locked!\")"
  },
  {
    "label": "owns_lock()",
    "kind": "Method",
    "detail": "Function (locked = false ; } bool)",
    "insertText": "owns_lock()"
  }
]