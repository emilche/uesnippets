[
  {
    "label": "Parameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Parameter"
  },
  {
    "label": "ParameterDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterDescriptor"
  },
  {
    "label": "Parameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Parameters"
  },
  {
    "label": "Builder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Builder"
  },
  {
    "label": "ParameterConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterConfig"
  },
  {
    "label": "Parameter()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_PARAMETER_PARAMETER_H_ # define NET_DCSCTP_PACKET_PARAMETER_PARAMETER_H_ # include<stddef . h> # include<algorithm> # include<cstdint> # include<iterator> # include<memory> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / tlv_trait . h \" # include \" rtc_base / strings / string_builder . h \" namespace dcsctp { class Parameter { public :)",
    "insertText": "Parameter()"
  },
  {
    "label": "Parameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parameter(const Parameter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Parameter&)",
    "insertText": "operator(const Parameter& other)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ParameterDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; struct ParameterDescriptor {)",
    "insertText": "ParameterDescriptor(uint16_t type, rtc::ArrayView<const uint8_t> data) : type(type), data(data)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (} uint16_t type ; rtc::ArrayView<const uint8_t> data ; } ; class Parameters { public : class Builder { public :)",
    "insertText": "Builder()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Builder&)",
    "insertText": "Add(const Parameter& p)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (Parameters)",
    "insertText": "Build()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<uint8_t> data_ ; } ; absl::optional<Parameters>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parameters()"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Parameters(Parameters&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Parameters&)",
    "insertText": "operator(Parameters&& other)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const uint8_t>)",
    "insertText": "data()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (template<P> absl::optional<P>)",
    "insertText": "get()"
  },
  {
    "label": "Parameters()",
    "kind": "Method",
    "detail": "Function (} } return absl::nullopt ; } private :)",
    "insertText": "Parameters(std::vector<uint8_t> data) : data_(std::move(data))"
  }
]