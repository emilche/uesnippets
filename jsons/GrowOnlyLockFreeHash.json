[
  {
    "label": "TGrowOnlyLockFreeHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGrowOnlyLockFreeHash"
  },
  {
    "label": "FHashHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashHeader"
  },
  {
    "label": "TGrowOnlyLockFreeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" template<EntryType,KeyType,ValueType> class TGrowOnlyLockFreeHash { public :)",
    "insertText": "TGrowOnlyLockFreeHash(FMalloc* InMalloc) : Malloc(InMalloc), HashTable(nullptr)"
  },
  {
    "label": "TGrowOnlyLockFreeHash()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TGrowOnlyLockFreeHash()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FHashHeader* HashTableNext ;)",
    "insertText": "for(FHashHeader* HashTableCurrent = HashTable; HashTableCurrent; HashTableCurrent = HashTableNext)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (HashTableNext = HashTableCurrent -> Next ; Malloc ->)",
    "insertText": "Free(HashTableCurrent)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reserve(int32 Count)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "_(&WriteCriticalSection)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (Count = DEFAULT_INITIAL_SIZE ; } Count =)",
    "insertText": "RoundUpToPowerOfTwo(Count)"
  },
  {
    "label": "HashTableLocal()",
    "kind": "Method",
    "detail": "Function (FHashHeader*)",
    "insertText": "HashTableLocal(FHashHeader*)Malloc->Malloc(sizeof(FHashHeader) + (Count - 1) * sizeof(EntryType))"
  },
  {
    "label": "ClearEntries()",
    "kind": "Method",
    "detail": "Function (HashTableLocal -> Next = nullptr ; HashTableLocal -> TableSize = Count ; HashTableLocal -> Used = 0 ;)",
    "insertText": "ClearEntries(HashTableLocal->Elements, Count)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "store(HashTableLocal, std::memory_order_release)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Find(KeyType Key, ValueType *OutValue, bool* bIsAlreadyInTable = nullptr)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FHashHeader* HashTableLocal = HashTable .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 TableMask = HashTableLocal -> TableSize - 1 ;)",
    "insertText": "for(uint32 TableIndex = EntryType::KeyHash(Key) & TableMask; !HashTableLocal->Elements[TableIndex].IsEmpty(); TableIndex = (TableIndex + 1) & TableMask)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (* OutValue = HashTableLocal -> Elements [ TableIndex ] .)",
    "insertText": "GetValue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bIsAlreadyInTable)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInTable = false ; } } void)",
    "insertText": "Emplace(KeyType Key, ValueType Value, bool* bIsAlreadyInTable = nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (ValueType ValueIgnore ; bool bFindResult ;)",
    "insertText": "Find(Key, &ValueIgnore, &bFindResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInTable = true ; } return ; } FHashHeader* HashTableLocal = HashTable ;)",
    "insertText": "if(!HashTableLocal || (HashTableLocal->Used >= HashTableLocal->TableSize / 2))"
  },
  {
    "label": "HashTableGrow()",
    "kind": "Method",
    "detail": "Function (int32 GrowCount = HashTableLocal ? HashTableLocal -> TableSize* 2 : DEFAULT_INITIAL_SIZE ; FHashHeader*)",
    "insertText": "HashTableGrow(FHashHeader*)Malloc->Malloc(sizeof(FHashHeader) + (GrowCount - 1) * sizeof(EntryType))"
  },
  {
    "label": "ClearEntries()",
    "kind": "Method",
    "detail": "Function (HashTableGrow -> Next = HashTableLocal ; HashTableGrow -> TableSize = GrowCount ; HashTableGrow -> Used = 0 ;)",
    "insertText": "ClearEntries(HashTableGrow->Elements, GrowCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EntryType& Entry = HashTableLocal -> Elements [ TableIndex ] ;)",
    "insertText": "if(!Entry.IsEmpty())"
  },
  {
    "label": "HashInsertInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashInsertInternal(HashTableGrow, Entry.GetKey(), Entry.GetValue())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} } } HashTableLocal = HashTableGrow ; HashTable .)",
    "insertText": "store(HashTableGrow, std::memory_order_release)"
  },
  {
    "label": "HashInsertInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HashInsertInternal(HashTableLocal, Key, Value)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInTable = false ; } } void)",
    "insertText": "FindOrAdd(KeyType Key, ValueType Value, bool* bIsAlreadyInTable = nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (bool bFindResult ; ValueType IgnoreResult ;)",
    "insertText": "Find(Key, &IgnoreResult, &bFindResult)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInTable = true ; } return ; })",
    "insertText": "Emplace(Key, Value, bIsAlreadyInTable)"
  },
  {
    "label": "HashInsertInternal()",
    "kind": "Method",
    "detail": "Function (} private : struct FHashHeader { FHashHeader* Next ; int32 TableSize ; int32 Used ; EntryType Elements [ 1 ] ; } ; FMalloc* Malloc ; std::atomic<FHashHeader*> HashTable ; FCriticalSection WriteCriticalSection ; int32 DEFAULT_INITIAL_SIZE = 1 0 2 4 ; void)",
    "insertText": "HashInsertInternal(FHashHeader* HashTableLocal, KeyType Key, ValueType Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TableMask = HashTableLocal -> TableSize - 1 ;)",
    "insertText": "for(int32 TableIndex = EntryType::KeyHash(Key) & TableMask;; TableIndex = (TableIndex + 1) & TableMask)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (HashTableLocal -> Elements [ TableIndex ] .)",
    "insertText": "SetKeyValue(Key, Value)"
  }
]