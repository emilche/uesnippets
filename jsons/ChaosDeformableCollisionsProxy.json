[
  {
    "label": "ERigidCollisionShapeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERigidCollisionShapeType"
  },
  {
    "label": "FCollisionObjectAddedBodies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectAddedBodies"
  },
  {
    "label": "FCollisionObjectRemovedBodies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectRemovedBodies"
  },
  {
    "label": "FCollisionObjectUpdatedBodies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectUpdatedBodies"
  },
  {
    "label": "FCollisionObjectParticleHandel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectParticleHandel"
  },
  {
    "label": "FCollisionManagerProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionManagerProxy"
  },
  {
    "label": "FCollisionsInputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionsInputBuffer"
  },
  {
    "label": "FCollisionObjectAddedBodies()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Deformable / ChaosDeformableSolverProxy . h \" # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" namespace Chaos::Softs { enum ERigidCollisionShapeType { Sphere,Box,Sphyl,Convex,TaperedCapsule,LevelSet,Unknown } ; typedef TTuple<const UObject*,ERigidCollisionShapeType,int8> FCollisionObjectKey ; struct FCollisionObjectAddedBodies {)",
    "insertText": "FCollisionObjectAddedBodies(FCollisionObjectKey InKey = FCollisionObjectKey(), FTransform InTransform = FTransform::Identity, FString InType = \"\", FImplicitObject* InShapes = nullptr) : Key(InKey) , Transform(InTransform) , Type(InType) , Shapes(InShapes)"
  },
  {
    "label": "FCollisionObjectKey()",
    "kind": "Method",
    "detail": "Function (} FCollisionObjectKey Key =)",
    "insertText": "FCollisionObjectKey()"
  },
  {
    "label": "FCollisionObjectParticleHandel()",
    "kind": "Method",
    "detail": "Function (FTransform Transform = FTransform::Identity ; } ; struct FCollisionObjectParticleHandel {)",
    "insertText": "FCollisionObjectParticleHandel(int32 InParticleIndex = INDEX_NONE, int32 InActiveViewIndex = INDEX_NONE, FTransform InTransform = FTransform::Identity) : ParticleIndex(InParticleIndex) , ActiveViewIndex(InActiveViewIndex) , Transform(InTransform)"
  },
  {
    "label": "FCollisionManagerProxy()",
    "kind": "Method",
    "detail": "Function (} int32 ParticleIndex = INDEX_NONE ; int32 ActiveViewIndex = INDEX_NONE ; FTransform Transform = FTransform::Identity ; } ; class FCollisionManagerProxy : public FThreadingProxy { public : typedef FThreadingProxy Super ;)",
    "insertText": "FCollisionManagerProxy(UObject* InOwner) : Super(InOwner, TypeName())"
  },
  {
    "label": "TypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "TypeName()"
  },
  {
    "label": "FCollisionsInputBuffer()",
    "kind": "Method",
    "detail": "Function (} class FCollisionsInputBuffer : public FThreadingProxy::FBuffer { typedef FThreadingProxy::FBuffer Super ; public : typedef FCollisionManagerProxy Source ;)",
    "insertText": "FCollisionsInputBuffer(const TArray<FCollisionObjectAddedBodies>& InAdded , const TArray<FCollisionObjectRemovedBodies>& InRemoved , const TArray<FCollisionObjectUpdatedBodies>& InUpdate , const UObject* InOwner) : Super(InOwner, FCollisionManagerProxy::TypeName()) , Added(InAdded) , Removed(InRemoved) , Updated(InUpdate)"
  }
]