[
  {
    "label": "StreamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamInterface"
  },
  {
    "label": "GpuDeviceProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GpuDeviceProperties"
  },
  {
    "label": "GpuStreamDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GpuStreamDevice"
  },
  {
    "label": "GpuDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GpuDevice"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_USE_GPU) && !defined(EIGEN_CXX11_TENSOR_TENSOR_DEVICE_GPU_H)"
  },
  {
    "label": "StreamInterface()",
    "kind": "Method",
    "detail": "Function (const int kGpuScratchSize = 1 0 2 4 ; class StreamInterface { public : ~)",
    "insertText": "StreamInterface()"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (} const gpuStream_t&)",
    "insertText": "stream()"
  },
  {
    "label": "deviceProperties()",
    "kind": "Method",
    "detail": "Function (const gpuDeviceProp_t&)",
    "insertText": "deviceProperties()"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "allocate(size_t num_bytes)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(void* buffer)"
  },
  {
    "label": "scratchpad()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "scratchpad()"
  },
  {
    "label": "semaphore()",
    "kind": "Method",
    "detail": "Function (unsigned int*)",
    "insertText": "semaphore()"
  },
  {
    "label": "GpuDeviceProperties()",
    "kind": "Method",
    "detail": "Function (} ; class GpuDeviceProperties { public :)",
    "insertText": "GpuDeviceProperties() : initialized_(false), first_(true), device_properties_(nullptr)"
  },
  {
    "label": "GpuDeviceProperties()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GpuDeviceProperties()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (delete [ ] device_properties_ ; } } EIGEN_STRONG_INLINE const gpuDeviceProp_t&)",
    "insertText": "get(int device)"
  },
  {
    "label": "gpuGetDeviceCount()",
    "kind": "Method",
    "detail": "Function (int num_devices ; gpuError_t status =)",
    "insertText": "gpuGetDeviceCount(&num_devices)"
  },
  {
    "label": "gpuGetErrorString()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Failed to get the number of GPU devices : \"<<)",
    "insertText": "gpuGetErrorString(status)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(status == gpuSuccess)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} device_properties_ = new gpuDeviceProp_t [ num_devices ] ;)",
    "insertText": "for(int i = 0; i < num_devices; ++i)"
  },
  {
    "label": "gpuGetDeviceProperties()",
    "kind": "Method",
    "detail": "Function (status =)",
    "insertText": "gpuGetDeviceProperties(&device_properties_[i], i)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "atomic_thread_fence(std::memory_order_release)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (initialized_ = true ; } else {)",
    "insertText": "while(!initialized_)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_acquire)"
  },
  {
    "label": "sleep_for()",
    "kind": "Method",
    "detail": "Function (std::)",
    "insertText": "sleep_for(std::chrono::milliseconds(1000))"
  },
  {
    "label": "GetGpuDeviceProperties()",
    "kind": "Method",
    "detail": "Function (} } } } private : volatile bool initialized_ ; std::atomic<bool> first_ ; gpuDeviceProp_t* device_properties_ ; } ; EIGEN_ALWAYS_INLINE const GpuDeviceProperties&)",
    "insertText": "GetGpuDeviceProperties()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (deviceProperties ->)",
    "insertText": "initialize()"
  },
  {
    "label": "GetGpuDeviceProperties()",
    "kind": "Method",
    "detail": "Function (} return* deviceProperties ; } EIGEN_ALWAYS_INLINE const gpuDeviceProp_t&)",
    "insertText": "GetGpuDeviceProperties(int device)"
  },
  {
    "label": "GpuStreamDevice()",
    "kind": "Method",
    "detail": "Function (} const gpuStream_t default_stream = gpuStreamDefault ; class GpuStreamDevice : public StreamInterface { public :)",
    "insertText": "GpuStreamDevice() : stream_(&default_stream), scratch_(NULL), semaphore_(NULL)"
  },
  {
    "label": "gpuGetDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpuGetDevice(&device_)"
  },
  {
    "label": "GpuStreamDevice()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GpuStreamDevice(int device) : stream_(&default_stream), device_(device), scratch_(NULL), semaphore_(NULL)"
  },
  {
    "label": "GpuStreamDevice()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GpuStreamDevice(const gpuStream_t* stream, int device = -1) : stream_(stream), device_(device), scratch_(NULL), semaphore_(NULL)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(err) gpu_assert(err == gpuSuccess)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(device < num_devices)"
  },
  {
    "label": "GpuStreamDevice()",
    "kind": "Method",
    "detail": "Function (device_ = device ; } } ~)",
    "insertText": "GpuStreamDevice()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(scratch_)"
  },
  {
    "label": "gpuSetDevice()",
    "kind": "Method",
    "detail": "Function (gpuError_t err =)",
    "insertText": "gpuSetDevice(device_)"
  },
  {
    "label": "gpuMalloc()",
    "kind": "Method",
    "detail": "Function (void* result ; err =)",
    "insertText": "gpuMalloc(&result, num_bytes)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(err == gpuSuccess)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(result != NULL)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(buffer != NULL)"
  },
  {
    "label": "gpuFree()",
    "kind": "Method",
    "detail": "Function (err =)",
    "insertText": "gpuFree(buffer)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (scratch_ =)",
    "insertText": "allocate(kGpuScratchSize + sizeof(unsigned int))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* scratch = static_cast<)",
    "insertText": "char(scratchpad())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (semaphore_ = reinterpret_cast<unsigned)",
    "insertText": "int(scratch)"
  },
  {
    "label": "gpuMemsetAsync()",
    "kind": "Method",
    "detail": "Function (gpuError_t err =)",
    "insertText": "gpuMemsetAsync(semaphore_, 0, sizeof(unsigned int), *stream_)"
  },
  {
    "label": "GpuDevice()",
    "kind": "Method",
    "detail": "Function (} return semaphore_ ; } private : const gpuStream_t* stream_ ; int device_ ; void* scratch_ ; unsigned int* semaphore_ ; } ; struct GpuDevice {)",
    "insertText": "GpuDevice(const StreamInterface* stream) : stream_(stream), max_blocks_(INT_MAX)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(stream)"
  },
  {
    "label": "GpuDevice()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GpuDevice(const StreamInterface* stream, int num_blocks) : stream_(stream), max_blocks_(num_blocks)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (stream_ ->)",
    "insertText": "deallocate(buffer)"
  },
  {
    "label": "allocate_temp()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void*)",
    "insertText": "allocate_temp(size_t num_bytes)"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "deallocate_temp(void* buffer)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} template<Type> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Type)",
    "insertText": "get(Type data)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "memcpy(void* dst, const void* src, size_t n)"
  },
  {
    "label": "gpuMemcpyAsync()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GPU_COMPILE_PHASE gpuError_t err =)",
    "insertText": "gpuMemcpyAsync(dst, src, n, gpuMemcpyDeviceToDevice, stream_->stream())"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "EIGEN_UNUSED_VARIABLE(dst)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(src)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(n)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"The default device should be used instead to generate kernel code\")"
  },
  {
    "label": "memcpyHostToDevice()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_STRONG_INLINE void)",
    "insertText": "memcpyHostToDevice(void* dst, const void* src, size_t n)"
  },
  {
    "label": "gpuMemcpyAsync()",
    "kind": "Method",
    "detail": "Function (gpuError_t err =)",
    "insertText": "gpuMemcpyAsync(dst, src, n, gpuMemcpyHostToDevice, stream_->stream())"
  },
  {
    "label": "memcpyDeviceToHost()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "memcpyDeviceToHost(void* dst, const void* src, size_t n)"
  },
  {
    "label": "gpuMemcpyAsync()",
    "kind": "Method",
    "detail": "Function (gpuError_t err =)",
    "insertText": "gpuMemcpyAsync(dst, src, n, gpuMemcpyDeviceToHost, stream_->stream())"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "memset(void* buffer, int c, size_t n)"
  },
  {
    "label": "gpuMemsetAsync()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GPU_COMPILE_PHASE gpuError_t err =)",
    "insertText": "gpuMemsetAsync(buffer, c, n, stream_->stream())"
  },
  {
    "label": "numThreads()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_STRONG_INLINE size_t)",
    "insertText": "numThreads()"
  },
  {
    "label": "synchronize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "synchronize()"
  },
  {
    "label": "gpuStreamSynchronize()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GPU_COMPILE_PHASE gpuError_t err =)",
    "insertText": "gpuStreamSynchronize(stream_->stream())"
  },
  {
    "label": "gpuGetErrorString()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Error detected in GPU stream : \"<<)",
    "insertText": "gpuGetErrorString(err)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "gpu_assert(false && \"The default device should be used instead to generate kernel code\")"
  },
  {
    "label": "getNumGpuMultiProcessors()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_STRONG_INLINE int)",
    "insertText": "getNumGpuMultiProcessors()"
  },
  {
    "label": "maxGpuThreadsPerBlock()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "maxGpuThreadsPerBlock()"
  },
  {
    "label": "maxGpuThreadsPerMultiProcessor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "maxGpuThreadsPerMultiProcessor()"
  },
  {
    "label": "sharedMemPerBlock()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "sharedMemPerBlock()"
  },
  {
    "label": "majorDeviceVersion()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "majorDeviceVersion()"
  },
  {
    "label": "minorDeviceVersion()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "minorDeviceVersion()"
  },
  {
    "label": "maxBlocks()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE int)",
    "insertText": "maxBlocks()"
  },
  {
    "label": "gpuStreamQuery()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPUCC gpuError_t error =)",
    "insertText": "gpuStreamQuery(stream_->stream())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } private : const StreamInterface* stream_ ; int max_blocks_ ; } ; # if)",
    "insertText": "defined(EIGEN_HIPCC) #define LAUNCH_GPU_KERNEL(kernel, gridsize, blocksize, sharedmem, device, ...) \\ hipLaunchKernelGGL(kernel, dim3(gridsize), dim3(blocksize), (sharedmem), (device).stream(), __VA_ARGS__)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "gpu_assert(hipGetLastError() == hipSuccess)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "LAUNCH_GPU_KERNEL(kernel, gridsize, blocksize, sharedmem, device, ...) \\ (kernel) <<< (gridsize), (blocksize), (sharedmem), (device).stream() >>> (__VA_ARGS__)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "gpu_assert(cudaGetLastError() == cudaSuccess)"
  },
  {
    "label": "setGpuSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef EIGEN_GPUCC EIGEN_DEVICE_FUNC void)",
    "insertText": "setGpuSharedMemConfig(gpuSharedMemConfig config)"
  },
  {
    "label": "gpuDeviceSetSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GPU_COMPILE_PHASE gpuError_t status =)",
    "insertText": "gpuDeviceSetSharedMemConfig(config)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(status) gpu_assert(status == gpuSuccess)"
  }
]