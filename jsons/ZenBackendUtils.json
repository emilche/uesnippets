[
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" HAL / UnrealMemory . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / AssertionMacros . h \" namespace UE::Zen { void)",
    "insertText": "Memcpy(void* Dest, const FCompositeBuffer& Source, size_t SourceOffset, size_t Size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 Offset = 0 ; uint64 EndOffset = SourceOffset + Size ;)",
    "insertText": "for(const FSharedBuffer& Segment : Source.GetSegments())"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint64 SegmentEnd = Offset + Segment .)",
    "insertText": "GetSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bDone = false ;)",
    "insertText": "if(SegmentEnd > EndOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bDone = true ; SegmentEnd = EndOffset ; })",
    "insertText": "if(Offset < SourceOffset)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (const uint8* SegData = reinterpret_cast<const)",
    "insertText": "uint8(Segment.GetData()) + (SourceOffset - Offset)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (uint64 CopySize = SegmentEnd - SourceOffset ;)",
    "insertText": "Memcpy(Dest, SegData, CopySize)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Dest = static_cast<)",
    "insertText": "uint8(Dest)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} } else { uint64 CopySize = SegmentEnd - Offset ;)",
    "insertText": "Memcpy(Dest, Segment.GetData(), CopySize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Offset = SegmentEnd ;)",
    "insertText": "if(bDone)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "check(Offset == EndOffset)"
  }
]