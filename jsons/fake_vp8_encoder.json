[
  {
    "label": "FakeVp8Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVp8Encoder"
  },
  {
    "label": "FakeFecControllerOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeFecControllerOverride"
  },
  {
    "label": "FakeVp8Encoder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FAKE_VP8_ENCODER_H_ # define TEST_FAKE_VP8_ENCODER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" api / fec_controller_override . h \" # include \" api / sequence_checker . h \" # include \" api / video / encoded_image . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / vp8_frame_buffer_controller . h \" # include \" api / video_codecs / vp8_temporal_layers . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" test / fake_encoder . h \" namespace webrtc { namespace test { class FakeVp8Encoder : public FakeEncoder { public :)",
    "insertText": "FakeVp8Encoder(Clock* clock)"
  },
  {
    "label": "FakeVp8Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeVp8Encoder()"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const VideoCodec* config, const Settings& settings)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "PopulateCodecSpecific()",
    "kind": "Method",
    "detail": "Function (private : CodecSpecificInfo)",
    "insertText": "PopulateCodecSpecific(size_t size_bytes, VideoFrameType frame_type, int stream_idx, uint32_t timestamp)"
  },
  {
    "label": "EncodeHook()",
    "kind": "Method",
    "detail": "Function (CodecSpecificInfo)",
    "insertText": "EncodeHook(EncodedImage& encoded_image, rtc::scoped_refptr<EncodedImageBuffer> buffer)"
  },
  {
    "label": "FakeFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (SequenceChecker sequence_checker_ ; class FakeFecControllerOverride : public FecControllerOverride { public : ~)",
    "insertText": "FakeFecControllerOverride()"
  },
  {
    "label": "SetFecAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecAllowed(bool fec_allowed)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} } ; FakeFecControllerOverride fec_controller_override_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]