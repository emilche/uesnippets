[
  {
    "label": "FBitWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitWriter"
  },
  {
    "label": "FBitReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitReader"
  },
  {
    "label": "FNetPacketNotifyTestUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetPacketNotifyTestUtil"
  },
  {
    "label": "FNetPacketNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPacketNotify"
  },
  {
    "label": "FNotificationHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationHeader"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Functor"
  },
  {
    "label": "FSentAckData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSentAckData"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EngineLogs . h \" # include \" HAL / UnrealMemory . h \" # include \" Logging / LogMacros . h \" # include \" Templates / IsSigned . h \" # include \" Net / Core / Misc / ResizableCircularQueue . h \" # include \" Util / SequenceNumber . h \" # include \" Util / SequenceHistory . h \" #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) # define UE_NET_ENABLE_PACKET_NOTIFY_LOG 0 #else # define UE_NET_ENABLE_PACKET_NOTIFY_LOG 1 #endif #if UE_NET_ENABLE_PACKET_NOTIFY_LOG # define UE_LOG_PACKET_NOTIFY(Format, ...) UE_LOG(LogNetTraffic, Verbose, Format, ##__VA_ARGS__) #else # define UE_LOG_PACKET_NOTIFY(...) #endif #define UE_LOG_PACKET_NOTIFY_WARNING(Format, ...) UE_LOG(LogNetTraffic, Warning, Format, ##__VA_ARGS__)"
  },
  {
    "label": "FNetPacketNotify()",
    "kind": "Method",
    "detail": "Function (struct FBitReader ; namespace UE::Net::Private { struct FNetPacketNotifyTestUtil ; } class FNetPacketNotify { public : enum { SequenceNumberBits = 1 4 } ; enum { MaxSequenceHistoryLength = 2 5 6 } ; typedef TSequenceNumber<SequenceNumberBits,uint16> SequenceNumberT ; typedef TSequenceHistory<MaxSequenceHistoryLength> SequenceHistoryT ; struct FNotificationHeader { SequenceHistoryT History ; SIZE_T HistoryWordCount ; SequenceNumberT Seq ; SequenceNumberT AckedSeq ; } ;)",
    "insertText": "FNetPacketNotify()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(SequenceNumberT InitialInSeq, SequenceNumberT InitialOutSeq)"
  },
  {
    "label": "AckSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckSeq(SequenceNumberT Seq)"
  },
  {
    "label": "AckSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckSeq(Seq, true)"
  },
  {
    "label": "NakSeq()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NakSeq(SequenceNumberT Seq)"
  },
  {
    "label": "AckSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckSeq(Seq, false)"
  },
  {
    "label": "CommitAndIncrementOutSeq()",
    "kind": "Method",
    "detail": "Function (} SequenceNumberT)",
    "insertText": "CommitAndIncrementOutSeq()"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteHeader(FBitWriter& Writer, bool bRefresh = false)"
  },
  {
    "label": "ReadHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadHeader(FNotificationHeader& Data, FBitReader& Reader)"
  },
  {
    "label": "GetSequenceDelta()",
    "kind": "Method",
    "detail": "Function (SequenceNumberT::DifferenceT)",
    "insertText": "GetSequenceDelta(const FNotificationHeader& NotificationData)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } template<class Functor> SequenceNumberT::DifferenceT)",
    "insertText": "Update(const FNotificationHeader& NotificationData, Functor&& InFunc)"
  },
  {
    "label": "GetInSeqHistory()",
    "kind": "Method",
    "detail": "Function (const SequenceHistoryT&)",
    "insertText": "GetInSeqHistory()"
  },
  {
    "label": "IsSequenceWindowFull()",
    "kind": "Method",
    "detail": "Function (SequenceNumberT NextOutSeq = OutSeq ; + + NextOutSeq ; return NextOutSeq> = OutAckSeq ; } bool)",
    "insertText": "IsSequenceWindowFull(uint32 SafetyMargin=0U)"
  },
  {
    "label": "GetCurrentSequenceHistoryLength()",
    "kind": "Method",
    "detail": "Function (SequenceNumberT::DifferenceT)",
    "insertText": "GetCurrentSequenceHistoryLength()"
  },
  {
    "label": "IsWaitingForSequenceHistoryFlush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaitingForSequenceHistoryFlush()"
  },
  {
    "label": "InternalUpdate()",
    "kind": "Method",
    "detail": "Function (SequenceNumberT::DifferenceT)",
    "insertText": "InternalUpdate(const FNotificationHeader& NotificationData, SequenceNumberT::DifferenceT InSeqDelta)"
  },
  {
    "label": "GetHasUnacknowledgedAcks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasUnacknowledgedAcks()"
  },
  {
    "label": "WillSequenceFitInSequenceHistory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillSequenceFitInSequenceHistory(SequenceNumberT Seq)"
  },
  {
    "label": "SetWaitForSequenceHistoryFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaitForSequenceHistoryFlush()"
  },
  {
    "label": "ProcessReceivedAcks()",
    "kind": "Method",
    "detail": "Function (template<class Functor> void)",
    "insertText": "ProcessReceivedAcks(const FNotificationHeader& NotificationData, Functor&& InFunc)"
  },
  {
    "label": "AckSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckSeq(SequenceNumberT AckedSeq, bool IsAck)"
  },
  {
    "label": "IsSequenceWindowFull()",
    "kind": "Method",
    "detail": "Function (# if WITH_AUTOMATION_WORKER UE::Net::Private::FNetPacketNotifyTestUtil ; # endif } ; bool)",
    "insertText": "IsSequenceWindowFull(uint32 SafetyMargin)"
  },
  {
    "label": "MaxSequenceHistoryLength()",
    "kind": "Method",
    "detail": "Function (const SequenceNumberT SequenceLength = OutSeq - OutAckSeq ; return SequenceLength>)",
    "insertText": "MaxSequenceHistoryLength(SafetyMargin >= MaxSequenceHistoryLength) || (SequenceLength.Get() > (MaxSequenceHistoryLength - SafetyMargin))"
  },
  {
    "label": "GetSequenceDelta()",
    "kind": "Method",
    "detail": "Function (const SequenceNumberT::DifferenceT InSeqDelta =)",
    "insertText": "GetSequenceDelta(NotificationData)"
  },
  {
    "label": "ProcessReceivedAcks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReceivedAcks(NotificationData, InFunc)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (SequenceNumberT::DifferenceT AckCount =)",
    "insertText": "Diff(NotificationData.AckedSeq, OutAckSeq)"
  },
  {
    "label": "UpdateInAckSeqAck()",
    "kind": "Method",
    "detail": "Function (const SequenceNumberT NewInAckSeqAck =)",
    "insertText": "UpdateInAckSeqAck(AckCount, NotificationData.AckedSeq)"
  },
  {
    "label": "CurrentAck()",
    "kind": "Method",
    "detail": "Function (InAckSeqAck = NewInAckSeqAck ; } SequenceNumberT)",
    "insertText": "CurrentAck(OutAckSeq)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + CurrentAck ; const SequenceNumberT::DifferenceT HistoryBits = NotificationData . HistoryWordCount* SequenceHistoryT::BitsPerWord ;)",
    "insertText": "if(AckCount > (SequenceNumberT::DifferenceT)(SequenceHistoryT::Size))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(AckCount > HistoryBits)"
  },
  {
    "label": "InFunc()",
    "kind": "Method",
    "detail": "Function (- - AckCount ;)",
    "insertText": "InFunc(CurrentAck, false)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + CurrentAck ; })",
    "insertText": "while(AckCount > 0)"
  },
  {
    "label": "UE_LOG_PACKET_NOTIFY()",
    "kind": "Method",
    "detail": "Function (- - AckCount ;)",
    "insertText": "UE_LOG_PACKET_NOTIFY(TEXT(\"Notification::ProcessReceivedAcks Seq: %u - IsAck: %u HistoryIndex: %u\"), CurrentAck.Get(), NotificationData.History.IsDelivered(AckCount) ? 1u : 0u, AckCount)"
  },
  {
    "label": "InFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunc(CurrentAck, NotificationData.History.IsDelivered(AckCount))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + CurrentAck ; } OutAckSeq = NotificationData . AckedSeq ;)",
    "insertText": "if(OutAckSeq > WaitingForFlushSeqAck)"
  }
]