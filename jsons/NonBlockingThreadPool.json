[
  {
    "label": "ThreadPoolTempl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadPoolTempl"
  },
  {
    "label": "PerThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerThread"
  },
  {
    "label": "ThreadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadData"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_THREAD_ENV_SUPPORTS_CANCELLATION)",
    "insertText": "for(size_t i = 0; i < thread_data_.size()"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (partition)",
    "insertText": "eigen_plain_assert(end <= num_threads_)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Task()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Task()"
  },
  {
    "label": "Steal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Steal(start, limit)"
  },
  {
    "label": "Steal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Steal(0, num_threads_)"
  }
]