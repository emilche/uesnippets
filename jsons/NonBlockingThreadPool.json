[
  {
    "label": "ThreadPoolTempl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadPoolTempl"
  },
  {
    "label": "PerThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerThread"
  },
  {
    "label": "ThreadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadData"
  },
  {
    "label": "ThreadPoolTempl()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_THREADPOOL_NONBLOCKING_THREAD_POOL_H # define EIGEN_CXX11_THREADPOOL_NONBLOCKING_THREAD_POOL_H namespace Eigen { template<Environment> class ThreadPoolTempl : public Eigen::ThreadPoolInterface { public : typedef Environment::Task Task ; typedef RunQueue<Task,1 0 2 4> Queue ;)",
    "insertText": "ThreadPoolTempl(int num_threads, Environment env = Environment()) : ThreadPoolTempl(num_threads, true, env)"
  },
  {
    "label": "ThreadPoolTempl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ThreadPoolTempl(int num_threads, bool allow_spinning, Environment env = Environment()) : env_(env), num_threads_(num_threads), allow_spinning_(allow_spinning), thread_data_(num_threads), all_coprimes_(num_threads), waiters_(num_threads), global_steal_partition_(EncodePartition(0, num_threads_)), blocked_(0), spinning_(0), done_(false), cancelled_(false), ec_(waiters_)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (waiters_ .)",
    "insertText": "resize(num_threads_)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(num_threads_ < kMaxThreads)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (all_coprimes_ .)",
    "insertText": "emplace_back(i)"
  },
  {
    "label": "ComputeCoprimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCoprimes(i, &all_coprimes_.back())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_THREAD_LOCAL init_barrier_ .)",
    "insertText": "reset(new Barrier(num_threads_))"
  },
  {
    "label": "SetStealPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStealPartition(i, EncodePartition(0, num_threads_))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (thread_data_ [ i ] . thread .)",
    "insertText": "reset(env_.CreateThread([this, i]() { WorkerLoop(i); }))"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_THREAD_LOCAL init_barrier_ ->)",
    "insertText": "Wait()"
  },
  {
    "label": "ThreadPoolTempl()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "ThreadPoolTempl()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (ec_ .)",
    "insertText": "Notify(true)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t i = 0; i < thread_data_.size(); i++)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (thread_data_ [ i ] . queue .)",
    "insertText": "Flush()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(size_t i = 0; i < thread_data_.size(); ++i) thread_data_[i].thread.reset()"
  },
  {
    "label": "SetStealPartitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStealPartitions(const std::vector<std::pair<unsigned, unsigned>>& partitions)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(partitions.size() == static_cast<std::size_t>(num_threads_))"
  },
  {
    "label": "AssertBounds()",
    "kind": "Method",
    "detail": "Function (const auto& pair = partitions [ i ] ; unsigned start = pair . first,end = pair . second ;)",
    "insertText": "AssertBounds(start, end)"
  },
  {
    "label": "EncodePartition()",
    "kind": "Method",
    "detail": "Function (unsigned val =)",
    "insertText": "EncodePartition(start, end)"
  },
  {
    "label": "SetStealPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStealPartition(i, val)"
  },
  {
    "label": "Schedule()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Schedule(std::function<void()> fn)"
  },
  {
    "label": "ScheduleWithHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWithHint(std::move(fn), 0, num_threads_)"
  },
  {
    "label": "ScheduleWithHint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScheduleWithHint(std::function<void()> fn, int start, int limit)"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (Task t = env_ .)",
    "insertText": "CreateTask(std::move(fn))"
  },
  {
    "label": "GetPerThread()",
    "kind": "Method",
    "detail": "Function (PerThread* pt =)",
    "insertText": "GetPerThread()"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (Queue& q = thread_data_ [ pt -> thread_id ] . queue ; t = q .)",
    "insertText": "PushFront(std::move(t))"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "eigen_plain_assert(start < limit)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(limit <= num_threads_)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (int num_queues = limit - start ; int rnd =)",
    "insertText": "Rand(&pt->rand)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(start + rnd < limit)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (Queue& q = thread_data_ [ start + rnd ] . queue ; t = q .)",
    "insertText": "PushBack(std::move(t))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!t.f)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (ec_ .)",
    "insertText": "Notify(false)"
  },
  {
    "label": "ExecuteTask()",
    "kind": "Method",
    "detail": "Function (} else { env_ .)",
    "insertText": "ExecuteTask(t)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Cancel()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (thread_data_ [ i ] . thread ->)",
    "insertText": "OnCancel()"
  },
  {
    "label": "NumThreads()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumThreads()"
  },
  {
    "label": "ThreadPoolTempl()",
    "kind": "Method",
    "detail": "Function (const PerThread* pt = const_cast<)",
    "insertText": "ThreadPoolTempl(this)->GetPerThread()"
  },
  {
    "label": "DecodePartition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecodePartition(unsigned val, unsigned* start, unsigned* limit)"
  },
  {
    "label": "val()",
    "kind": "Method",
    "detail": "Function (* limit =)",
    "insertText": "val(kMaxThreads - 1)"
  },
  {
    "label": "AssertBounds()",
    "kind": "Method",
    "detail": "Function (val>> = kMaxPartitionBits ;* start = val ; } void)",
    "insertText": "AssertBounds(int start, int end)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(start >= 0)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(start < end)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(end <= num_threads_)"
  },
  {
    "label": "SetStealPartition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStealPartition(size_t i, unsigned val)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (thread_data_ [ i ] . steal_partition .)",
    "insertText": "store(val, std::memory_order_relaxed)"
  },
  {
    "label": "GetStealPartition()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "GetStealPartition(int i)"
  },
  {
    "label": "ComputeCoprimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeCoprimes(int N, MaxSizeVector<unsigned>* coprimes)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (unsigned a = i ; unsigned b = N ;)",
    "insertText": "while(b != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned tmp = a ; a = b ; b = tmp % b ; })",
    "insertText": "if(a == 1)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (coprimes ->)",
    "insertText": "push_back(i)"
  },
  {
    "label": "PerThread()",
    "kind": "Method",
    "detail": "Function (} } } typedef Environment::EnvThread Thread ; struct PerThread {)",
    "insertText": "PerThread() : pool(NULL), rand(0), thread_id(-1)"
  },
  {
    "label": "ThreadData()",
    "kind": "Method",
    "detail": "Function (} ThreadPoolTempl* pool ; uint64_t rand ; int thread_id ; # ifndef EIGEN_THREAD_LOCAL char pad_ [ 1 2 8 ] ; # endif } ; struct ThreadData {)",
    "insertText": "ThreadData() : thread(), steal_partition(0), queue()"
  },
  {
    "label": "WorkerLoop()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Thread> thread ; std::atomic<unsigned> steal_partition ; Queue queue ; } ; Environment env_ ; const int num_threads_ ; const bool allow_spinning_ ; MaxSizeVector<ThreadData> thread_data_ ; MaxSizeVector<MaxSizeVector<unsigned>> all_coprimes_ ; MaxSizeVector<EventCount::Waiter> waiters_ ; unsigned global_steal_partition_ ; std::atomic<unsigned> blocked_ ; std::atomic<bool> spinning_ ; std::atomic<bool> done_ ; std::atomic<bool> cancelled_ ; EventCount ec_ ; # ifndef EIGEN_THREAD_LOCAL std::unique_ptr<Barrier> init_barrier_ ; std::mutex per_thread_map_mutex_ ; std::unordered_map<uint64_t,std::unique_ptr<PerThread>> per_thread_map_ ; # endif void)",
    "insertText": "WorkerLoop(int thread_id)"
  },
  {
    "label": "new_pt()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_THREAD_LOCAL std::unique_ptr<PerThread>)",
    "insertText": "new_pt(new PerThread())"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (per_thread_map_mutex_ .)",
    "insertText": "lock()"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (bool insertOK = per_thread_map_ .)",
    "insertText": "emplace(GlobalThreadIdHash(), std::move(new_pt))"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(insertOK)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(insertOK)"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (per_thread_map_mutex_ .)",
    "insertText": "unlock()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (init_barrier_ ->)",
    "insertText": "Notify()"
  },
  {
    "label": "GlobalThreadIdHash()",
    "kind": "Method",
    "detail": "Function (pt -> pool = this ; pt -> rand =)",
    "insertText": "GlobalThreadIdHash()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pt -> thread_id = thread_id ; Queue& q = thread_data_ [ thread_id ] . queue ; EventCount::Waiter* waiter =& waiters_ [ thread_id ] ; const int spin_count = allow_spinning_&& num_threads_> 0 ? 5 0 0 0 / num_threads_ : 0 ;)",
    "insertText": "if(num_threads_ == 1)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (Task t = q .)",
    "insertText": "PopFront()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "while(!cancelled_)"
  },
  {
    "label": "LocalSteal()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "LocalSteal()"
  },
  {
    "label": "GlobalSteal()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "GlobalSteal()"
  },
  {
    "label": "Steal()",
    "kind": "Method",
    "detail": "Function (} } } } Task)",
    "insertText": "Steal(unsigned start, unsigned limit)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(all_coprimes_[size - 1].size() < (1<<30))"
  },
  {
    "label": "victim()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "victim((uint64_t)r * (uint64_t)size)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "index((uint64_t) all_coprimes_[size - 1].size() * (uint64_t)r)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned inc = all_coprimes_ [ size - 1 ] [ index ] ;)",
    "insertText": "for(unsigned i = 0; i < size; i++)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(start + victim < limit)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (Task t = thread_data_ [ start + victim ] . queue .)",
    "insertText": "PopBack()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (victim - = size ; } } return)",
    "insertText": "Task()"
  },
  {
    "label": "GetStealPartition()",
    "kind": "Method",
    "detail": "Function (unsigned partition =)",
    "insertText": "GetStealPartition(pt->thread_id)"
  },
  {
    "label": "DecodePartition()",
    "kind": "Method",
    "detail": "Function (unsigned start,limit ;)",
    "insertText": "DecodePartition(partition, &start, &limit)"
  },
  {
    "label": "AssertBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertBounds(start, limit)"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitForWork(EventCount::Waiter* waiter, Task* t)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(!t->f)"
  },
  {
    "label": "Prewait()",
    "kind": "Method",
    "detail": "Function (ec_ .)",
    "insertText": "Prewait()"
  },
  {
    "label": "NonEmptyQueueIndex()",
    "kind": "Method",
    "detail": "Function (int victim =)",
    "insertText": "NonEmptyQueueIndex()"
  },
  {
    "label": "CancelWait()",
    "kind": "Method",
    "detail": "Function (ec_ .)",
    "insertText": "CancelWait()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t size = thread_data_ .)",
    "insertText": "size()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_THREAD_LOCAL PerThread dummy ; auto it = per_thread_map_ .)",
    "insertText": "find(GlobalThreadIdHash())"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (} # else EIGEN_THREAD_LOCAL PerThread per_thread_ ; PerThread* pt =& per_thread_ ; return pt ; # endif } EIGEN_STRONG_INLINE unsigned)",
    "insertText": "Rand(uint64_t* state)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (uint64_t current =* state ;* state = current* 6 3 6 4 1 3 6 2 2 3 8 4 6 7 9 3 0 0 5 ULL + 0 xda3e39cb94b95bdbULL ; return static_cast<)",
    "insertText": "unsigned((current ^ (current >> 22)) >> (22 + (current >> 61)))"
  }
]