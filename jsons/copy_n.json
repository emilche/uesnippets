[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Size",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Size"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_COPY_N_H # define _LIBCPP___ALGORITHM_COPY_N_H # include<__algorithm / copy . h> # include<__config> # include<__iterator / iterator_traits . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template<class _InputIterator, class _Size, class _OutputIterator> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 typename enable_if < __is_cpp17_input_iterator<_InputIterator>::value && !__is_cpp17_random_access_iterator<_InputIterator>::value, _OutputIterator >::type copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "decltype(_VSTD::__convert_to_integral(__orig_n))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_IntegralSize __n = __orig_n ;)",
    "insertText": "if(__n > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (* __result =* __first ; + + __result ;)",
    "insertText": "for(--__n; __n > 0; --__n)"
  },
  {
    "label": "copy_n()",
    "kind": "Method",
    "detail": "Function (+ + __first ;* __result =* __first ; + + __result ; } } return __result ; } template<class _InputIterator,class _Size,class _OutputIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 enable_if<__is_cpp17_random_access_iterator<_InputIterator>::value,_OutputIterator>::type)",
    "insertText": "copy_n(_InputIterator __first, _Size __orig_n, _OutputIterator __result)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (_IntegralSize __n = __orig_n ; return)",
    "insertText": "copy(__first, __first + difference_type(__n), __result)"
  }
]