[
  {
    "label": "SequenceManagerForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerForTest"
  },
  {
    "label": "SequenceManagerForTest()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TEST_SEQUENCE_MANAGER_FOR_TEST_H_ # define BASE_TASK_SEQUENCE_MANAGER_TEST_SEQUENCE_MANAGER_FOR_TEST_H_ # include<memory> # include \" base / task / sequence_manager / sequence_manager . h \" # include \" base / task / sequence_manager / sequence_manager_impl . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / time / tick_clock . h \" namespace base { namespace sequence_manager { class SequenceManagerForTest : public internal::SequenceManagerImpl { public : ~)",
    "insertText": "SequenceManagerForTest()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SequenceManagerForTest>)",
    "insertText": "Create(SequenceManagerImpl* funneled_sequence_manager, scoped_refptr<SingleThreadTaskRunner> task_runner, const TickClock* clock, SequenceManager::Settings settings = SequenceManager::Settings::Builder() .SetRandomisedSamplingEnabled(true) .Build())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SequenceManagerForTest>)",
    "insertText": "Create(std::unique_ptr<internal::ThreadController> thread_controller, SequenceManager::Settings settings = SequenceManager::Settings::Builder() .SetRandomisedSamplingEnabled(true) .Build())"
  },
  {
    "label": "CreateOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SequenceManagerForTest>)",
    "insertText": "CreateOnCurrentThread(SequenceManager::Settings)"
  },
  {
    "label": "ActiveQueuesCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ActiveQueuesCount()"
  },
  {
    "label": "HasImmediateWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasImmediateWork()"
  },
  {
    "label": "PendingTasksCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PendingTasksCount()"
  },
  {
    "label": "QueuesToDeleteCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "QueuesToDeleteCount()"
  },
  {
    "label": "QueuesToShutdownCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "QueuesToShutdownCount()"
  },
  {
    "label": "SequenceManagerForTest()",
    "kind": "Method",
    "detail": "Function (using internal::SequenceManagerImpl::CreateThreadControllerImplForCurrentThread ; using internal::SequenceManagerImpl::GetNextSequenceNumber ; using internal::SequenceManagerImpl::MoveReadyDelayedTasksToWorkQueues ; using internal::SequenceManagerImpl::ReloadEmptyWorkQueues ; private :)",
    "insertText": "SequenceManagerForTest(std::unique_ptr<internal::ThreadController> thread_controller, SequenceManager::Settings settings)"
  }
]