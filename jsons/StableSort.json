[
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Algo / Rotate . h \" # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Templates / Less . h \" # include \" Templates / UnrealTemplate . h \" namespace AlgoImpl { template<T,ProjectionType,PredicateType> void)",
    "insertText": "Merge(T* First, int32 Mid, int32 Num, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 AStart = 0 ; int32 BStart = Mid ;)",
    "insertText": "while(AStart < BStart && BStart < Num)"
  },
  {
    "label": "UpperBoundInternal()",
    "kind": "Method",
    "detail": "Function (int32 NewAOffset =)",
    "insertText": "UpperBoundInternal(First + AStart, BStart - AStart, Invoke(Projection, First[BStart]), Projection, Predicate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AStart + = NewAOffset ;)",
    "insertText": "if(AStart >= BStart)"
  },
  {
    "label": "RotateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateInternal(First + AStart, NewBOffset + BStart - AStart, BStart - AStart)"
  },
  {
    "label": "StableSortInternal()",
    "kind": "Method",
    "detail": "Function (BStart + = NewBOffset ; AStart + = NewBOffset + 1 ; } } int32 MinMergeSubgroupSize = 2 ; template<T,ProjectionType,PredicateType> void)",
    "insertText": "StableSortInternal(T* First, int32 Num, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (int32 SubgroupStart = 0 ; if)",
    "insertText": "constexpr(MinMergeSubgroupSize > 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GroupEnd = Num ; } do {)",
    "insertText": "for(int32 It = SubgroupStart; It < GroupEnd - 1; ++It)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(First[It], First[It + 1])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } GroupEnd - - ; })",
    "insertText": "while(GroupEnd - SubgroupStart > 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SubgroupStart + = MinMergeSubgroupSize ; })",
    "insertText": "while(SubgroupStart < Num)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 Subgroup = 0; Subgroup < Num; Subgroup += 2)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(First[Subgroup], First[Subgroup + 1])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } } int32 SubgroupSize = MinMergeSubgroupSize ;)",
    "insertText": "while(SubgroupSize < Num)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SubgroupStart = 0 ; do { int32 MergeNum = SubgroupSize<<1 ;)",
    "insertText": "if(Num - SubgroupStart < MergeNum)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (MergeNum = Num - SubgroupStart ; })",
    "insertText": "Merge(First + SubgroupStart, SubgroupSize, MergeNum, Projection, Predicate)"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (SubgroupSize<<= 1 ; } } } namespace Algo { template<RangeType> void)",
    "insertText": "StableSort(RangeType&& Range)"
  },
  {
    "label": "StableSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSortInternal(GetData(Range), GetNum(Range), FIdentityFunctor(), TLess<>())"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,PredicateType> void)",
    "insertText": "StableSort(RangeType&& Range, PredicateType Pred)"
  },
  {
    "label": "StableSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSortInternal(GetData(Range), GetNum(Range), FIdentityFunctor(), MoveTemp(Pred))"
  },
  {
    "label": "StableSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType> void)",
    "insertText": "StableSortBy(RangeType&& Range, ProjectionType Proj)"
  },
  {
    "label": "StableSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSortInternal(GetData(Range), GetNum(Range), MoveTemp(Proj), TLess<>())"
  },
  {
    "label": "StableSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,PredicateType> void)",
    "insertText": "StableSortBy(RangeType&& Range, ProjectionType Proj, PredicateType Pred)"
  },
  {
    "label": "StableSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSortInternal(GetData(Range), GetNum(Range), MoveTemp(Proj), MoveTemp(Pred))"
  }
]