[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "MemoryDumpProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDumpProvider"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DefaultSingletonTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSingletonTraits"
  },
  {
    "label": "MemoryDumpManagerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDumpManagerTest"
  },
  {
    "label": "ProcessMemoryDumpAsyncState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessMemoryDumpAsyncState"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_MEMORY_DUMP_MANAGER_H_ # define BASE_TRACE_EVENT_MEMORY_DUMP_MANAGER_H_ # include<stdint . h> # include<map> # include<memory> # include<unordered_set> # include<vector> # include \" base / base_export . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / singleton . h \" # include \" base / synchronization / lock . h \" # include \" base / trace_event / memory_allocator_dump . h \" # include \" base / trace_event / memory_dump_provider_info . h \" # include \" base / trace_event / memory_dump_request_args . h \" # include \" base / trace_event / process_memory_dump . h \" # include \" base / trace_event / trace_event . h \" namespace base { class SequencedTaskRunner ; class SingleThreadTaskRunner ; class Thread ; namespace trace_event { class MemoryDumpProvider ; class BASE_EXPORT MemoryDumpManager { public : using RequestGlobalDumpFunction = RepeatingCallback<)",
    "insertText": "void(MemoryDumpType, MemoryDumpLevelOfDetail)"
  },
  {
    "label": "TRACE_DISABLED_BY_DEFAULT()",
    "kind": "Method",
    "detail": "Function (const char* const kTraceCategory =)",
    "insertText": "TRACE_DISABLED_BY_DEFAULT(\"memory-infra\")"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (const uint64_t kInvalidTracingProcessId ; MemoryDumpManager*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "CreateInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryDumpManager>)",
    "insertText": "CreateInstanceForTesting()"
  },
  {
    "label": "MemoryDumpManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryDumpManager(const MemoryDumpManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryDumpManager&)",
    "insertText": "operator(const MemoryDumpManager&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RequestGlobalDumpFunction request_dump_function, bool is_coordinator)"
  },
  {
    "label": "RegisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProvider(MemoryDumpProvider* mdp, const char* name, scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "RegisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProvider(MemoryDumpProvider* mdp, const char* name, scoped_refptr<SingleThreadTaskRunner> task_runner, MemoryDumpProvider::Options options)"
  },
  {
    "label": "RegisterDumpProviderWithSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProviderWithSequencedTaskRunner(MemoryDumpProvider* mdp, const char* name, scoped_refptr<SequencedTaskRunner> task_runner, MemoryDumpProvider::Options options)"
  },
  {
    "label": "UnregisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDumpProvider(MemoryDumpProvider* mdp)"
  },
  {
    "label": "UnregisterAndDeleteDumpProviderSoon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAndDeleteDumpProviderSoon(std::unique_ptr<MemoryDumpProvider> mdp)"
  },
  {
    "label": "SetupForTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupForTracing(const TraceConfig::MemoryDumpConfig&)"
  },
  {
    "label": "TeardownForTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownForTracing()"
  },
  {
    "label": "CreateProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProcessDump(const MemoryDumpRequestArgs& args, ProcessMemoryDumpCallback callback)"
  },
  {
    "label": "IsDumpProviderRegisteredForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDumpProviderRegisteredForTesting(MemoryDumpProvider*)"
  },
  {
    "label": "GetTracingProcessId()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetTracingProcessId()"
  },
  {
    "label": "system_allocator_pool_name()",
    "kind": "Method",
    "detail": "Function (tracing_process_id_ = tracing_process_id ; } const char*)",
    "insertText": "system_allocator_pool_name()"
  },
  {
    "label": "GetDumpThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (dumper_registrations_ignored_for_testing_ = ignored ; } scoped_refptr<SequencedTaskRunner>)",
    "insertText": "GetDumpThreadTaskRunner()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private : std::default_delete<MemoryDumpManager> ; struct DefaultSingletonTraits<MemoryDumpManager> ; class MemoryDumpManagerTest ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(MemoryDumpManagerTest, NoStackOverflowWithTooManyMDPs)"
  },
  {
    "label": "ProcessMemoryDumpAsyncState()",
    "kind": "Method",
    "detail": "Function (struct ProcessMemoryDumpAsyncState {)",
    "insertText": "ProcessMemoryDumpAsyncState(MemoryDumpRequestArgs req_args, const MemoryDumpProviderInfo::OrderedSet& dump_providers, ProcessMemoryDumpCallback callback, scoped_refptr<SequencedTaskRunner> dump_thread_task_runner)"
  },
  {
    "label": "ProcessMemoryDumpAsyncState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMemoryDumpAsyncState(const ProcessMemoryDumpAsyncState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessMemoryDumpAsyncState&)",
    "insertText": "operator(const ProcessMemoryDumpAsyncState&)"
  },
  {
    "label": "ProcessMemoryDumpAsyncState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessMemoryDumpAsyncState()"
  },
  {
    "label": "MemoryDumpManager()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ProcessMemoryDump> process_memory_dump ; const MemoryDumpRequestArgs req_args ; std::vector<scoped_refptr<MemoryDumpProviderInfo>> pending_dump_providers ; ProcessMemoryDumpCallback callback ; const scoped_refptr<SingleThreadTaskRunner> callback_task_runner ; const scoped_refptr<SequencedTaskRunner> dump_thread_task_runner ; } ; const int kMaxConsecutiveFailuresCount ; const char* const kSystemAllocatorPoolName ;)",
    "insertText": "MemoryDumpManager()"
  },
  {
    "label": "SetInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceForTesting(MemoryDumpManager* instance)"
  },
  {
    "label": "GetOrCreateBgTaskRunnerLocked()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<base::SequencedTaskRunner>)",
    "insertText": "GetOrCreateBgTaskRunnerLocked() EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "ContinueAsyncProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueAsyncProcessDump(ProcessMemoryDumpAsyncState* owned_pmd_async_state)"
  },
  {
    "label": "InvokeOnMemoryDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeOnMemoryDump(MemoryDumpProviderInfo* mdpinfo, ProcessMemoryDump* pmd)"
  },
  {
    "label": "FinishAsyncProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAsyncProcessDump(std::unique_ptr<ProcessMemoryDumpAsyncState> pmd_async_state)"
  },
  {
    "label": "RegisterDumpProviderInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProviderInternal(MemoryDumpProvider* mdp, const char* name, scoped_refptr<SequencedTaskRunner> task_runner, const MemoryDumpProvider::Options& options)"
  },
  {
    "label": "UnregisterDumpProviderInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDumpProviderInternal(MemoryDumpProvider* mdp, bool take_mdp_ownership_and_delete_async)"
  },
  {
    "label": "can_request_global_dumps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "can_request_global_dumps()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} MemoryDumpProviderInfo::OrderedSet dump_providers_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]