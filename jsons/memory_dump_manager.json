[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "MemoryDumpProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDumpProvider"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DefaultSingletonTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSingletonTraits"
  },
  {
    "label": "MemoryDumpManagerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDumpManagerTest"
  },
  {
    "label": "ProcessMemoryDumpAsyncState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessMemoryDumpAsyncState"
  },
  {
    "label": "CreateInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryDumpManager>)",
    "insertText": "CreateInstanceForTesting()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(RequestGlobalDumpFunction request_dump_function,\n                  bool is_coordinator)"
  },
  {
    "label": "RegisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProvider(MemoryDumpProvider* mdp,\n                            const char* name,\n                            scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "RegisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProvider(MemoryDumpProvider* mdp,\n                            const char* name,\n                            scoped_refptr<SingleThreadTaskRunner> task_runner,\n                            MemoryDumpProvider::Options options)"
  },
  {
    "label": "RegisterDumpProviderWithSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProviderWithSequencedTaskRunner(\n      MemoryDumpProvider* mdp,\n      const char* name,\n      scoped_refptr<SequencedTaskRunner> task_runner,\n      MemoryDumpProvider::Options options)"
  },
  {
    "label": "UnregisterDumpProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDumpProvider(MemoryDumpProvider* mdp)"
  },
  {
    "label": "UnregisterAndDeleteDumpProviderSoon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAndDeleteDumpProviderSoon(\n      std::unique_ptr<MemoryDumpProvider> mdp)"
  },
  {
    "label": "SetupForTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupForTracing(const TraceConfig::MemoryDumpConfig&)"
  },
  {
    "label": "TeardownForTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownForTracing()"
  },
  {
    "label": "CreateProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProcessDump(const MemoryDumpRequestArgs& args,\n                         ProcessMemoryDumpCallback callback)"
  },
  {
    "label": "IsDumpProviderRegisteredForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDumpProviderRegisteredForTesting(MemoryDumpProvider*)"
  },
  {
    "label": "GetDumpThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SequencedTaskRunner>)",
    "insertText": "GetDumpThreadTaskRunner()"
  },
  {
    "label": "SetInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceForTesting(MemoryDumpManager* instance)"
  },
  {
    "label": "ContinueAsyncProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueAsyncProcessDump(\n      ProcessMemoryDumpAsyncState* owned_pmd_async_state)"
  },
  {
    "label": "InvokeOnMemoryDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeOnMemoryDump(MemoryDumpProviderInfo* mdpinfo,\n                          ProcessMemoryDump* pmd)"
  },
  {
    "label": "FinishAsyncProcessDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAsyncProcessDump(\n      std::unique_ptr<ProcessMemoryDumpAsyncState> pmd_async_state)"
  },
  {
    "label": "RegisterDumpProviderInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDumpProviderInternal(\n      MemoryDumpProvider* mdp,\n      const char* name,\n      scoped_refptr<SequencedTaskRunner> task_runner,\n      const MemoryDumpProvider::Options& options)"
  },
  {
    "label": "UnregisterDumpProviderInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDumpProviderInternal(MemoryDumpProvider* mdp,\n                                      bool take_mdp_ownership_and_delete_async)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (dump_providers_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (dump_thread_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]