[
  {
    "label": "FInterchangeTaskSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterchangeTaskSystem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInterchangeTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterchangeTaskBase"
  },
  {
    "label": "FInterchangeTaskLambda",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterchangeTaskLambda"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Ticker . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / ScopeLock . h \" # define INTERCHANGE_INVALID_TASK_ID 0 xFFFFFFFFFFFFFFFF)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnInterchangeTaskSystemTick)"
  },
  {
    "label": "FInterchangeTaskBase()",
    "kind": "Method",
    "detail": "Function (class FInterchangeTaskSystem ; enum class EInterchangeTaskStatus : uint8 { Waiting,Executing,Done } ; enum class EInterchangeTaskThread : uint8 { GameThread,AsyncThread } ; class FInterchangeTaskBase { public :)",
    "insertText": "FInterchangeTaskBase()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Future .)",
    "insertText": "Get()"
  },
  {
    "label": "GetTaskId()",
    "kind": "Method",
    "detail": "Function (} } } uint64)",
    "insertText": "GetTaskId()"
  },
  {
    "label": "TaskStatusLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "TaskStatusLock(&TaskStatusCriticalSection)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "SetTaskStatus()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SetTaskStatus(EInterchangeTaskStatus NewTaskStatus)"
  },
  {
    "label": "SetPrerequisites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrerequisites(const TArray<uint64>& InPrerequisiteTasks)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection TaskStatusCriticalSection ; uint64 TaskId = INTERCHANGE_INVALID_TASK_ID ; EInterchangeTaskStatus TaskStatus = EInterchangeTaskStatus::Waiting ; TArray<uint64> PrerequisiteTasks ; TFuture<uint64> Future ; FInterchangeTaskSystem ; } ; class FInterchangeTaskLambda : public FInterchangeTaskBase { private : EInterchangeTaskThread TaskThread = EInterchangeTaskThread::GameThread ; TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FInterchangeTaskLambda()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FInterchangeTaskLambda(EInterchangeTaskThread InTaskThread, TFunction<void()> InExecuteLambda) : TaskThread(InTaskThread) , ExecuteLambda(MoveTemp(InExecuteLambda))"
  },
  {
    "label": "GetTaskThread()",
    "kind": "Method",
    "detail": "Function (} EInterchangeTaskThread)",
    "insertText": "GetTaskThread()"
  },
  {
    "label": "ExecuteLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteLambda()"
  },
  {
    "label": "FInterchangeTaskSystem()",
    "kind": "Method",
    "detail": "Function (} } ; class FInterchangeTaskSystem { public :)",
    "insertText": "FInterchangeTaskSystem()"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddTask(TSharedPtr<FInterchangeTaskBase, ESPMode::ThreadSafe> Task, TArray<uint64>& TaskPrerequisites)"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddTask(TSharedPtr<FInterchangeTaskBase, ESPMode::ThreadSafe> Task)"
  },
  {
    "label": "GetTaskStatus()",
    "kind": "Method",
    "detail": "Function (EInterchangeTaskStatus)",
    "insertText": "GetTaskStatus(const uint64 TaskId)"
  },
  {
    "label": "CancelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTask(const uint64 TaskId, const bool bCancelPrerequisites)"
  },
  {
    "label": "WaitUntilTasksComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilTasksComplete(const TArray<uint64>& TasksToComplete)"
  },
  {
    "label": "OnTaskSystemTickDelegate()",
    "kind": "Method",
    "detail": "Function (FOnInterchangeTaskSystemTick&)",
    "insertText": "OnTaskSystemTickDelegate()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  }
]