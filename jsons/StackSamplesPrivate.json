[
  {
    "label": "FStackSamplesProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStackSamplesProvider"
  },
  {
    "label": "FStackSamplesProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" # include \" Containers / Map . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / StackSamples . h \" namespace TraceServices { class FStackSamplesProvider : public IStackSamplesProvider { public :)",
    "insertText": "FStackSamplesProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FStackSamplesProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStackSamplesProvider()"
  },
  {
    "label": "GetStackSamples()",
    "kind": "Method",
    "detail": "Function (const TPagedArray<FStackSample>*)",
    "insertText": "GetStackSamples(uint32 ThreadId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(uint32 ThreadId, double Time, uint32 Count, const uint64* Addresses)"
  }
]