[
  {
    "label": "MockSctpDataChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockSctpDataChannel"
  },
  {
    "label": "MockSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_MOCK_DATA_CHANNEL_H_ # define PC_TEST_MOCK_DATA_CHANNEL_H_ # include<string> # include \" pc / sctp_data_channel . h \" # include \" test / gmock . h \" namespace webrtc { class MockSctpDataChannel : public SctpDataChannel { public :)",
    "insertText": "MockSctpDataChannel(int id, DataState state) : MockSctpDataChannel(id, \"MockSctpDataChannel\", state, \"udp\", 0, 0, 0, 0)"
  },
  {
    "label": "MockSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MockSctpDataChannel(int id, const std::string& label, DataState state, const std::string& protocol, uint32_t messages_sent, uint64_t bytes_sent, uint32_t messages_received, uint64_t bytes_received, const InternalDataChannelInit& config = InternalDataChannelInit(), rtc::Thread* signaling_thread = rtc::Thread::Current(), rtc::Thread* network_thread = rtc::Thread::Current()) : SctpDataChannel(config, nullptr, label, signaling_thread, network_thread)"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, id()).WillRepeatedly(::testing::Return(id))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, state()).WillRepeatedly(::testing::Return(state))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, protocol()).WillRepeatedly(::testing::Return(protocol))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, messages_sent()) .WillRepeatedly(::testing::Return(messages_sent))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, bytes_sent()) .WillRepeatedly(::testing::Return(bytes_sent))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, messages_received()) .WillRepeatedly(::testing::Return(messages_received))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*this, bytes_received()) .WillRepeatedly(::testing::Return(bytes_received))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(int, id, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(DataState, state, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::string, protocol, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(uint32_t, messages_sent, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(uint64_t, bytes_sent, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(uint32_t, messages_received, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(uint64_t, bytes_received, (), (const, override))"
  }
]