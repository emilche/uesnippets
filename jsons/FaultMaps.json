[
  {
    "label": "AsmPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmPrinter"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "FaultMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaultMaps"
  },
  {
    "label": "FaultKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FaultKind"
  },
  {
    "label": "FaultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FaultInfo"
  },
  {
    "label": "MCSymbolComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCSymbolComparator"
  },
  {
    "label": "FaultMapParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaultMapParser"
  },
  {
    "label": "FunctionFaultInfoAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionFaultInfoAccessor"
  },
  {
    "label": "FunctionInfoAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionInfoAccessor"
  },
  {
    "label": "faultTypeToString()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_FAULTMAPS_H # define LLVM_CODEGEN_FAULTMAPS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / MC / MCSymbol . h \" # include \" llvm / Support / Endian . h \" # include \" llvm / Support / Format . h \" # include<vector> # include<map> namespace llvm { class AsmPrinter ; class MCExpr ; class MCSymbol ; class MCStreamer ; class FaultMaps { public : enum FaultKind { FaultingLoad = 1,FaultKindMax } ; const char*)",
    "insertText": "faultTypeToString(FaultKind)"
  },
  {
    "label": "FaultMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FaultMaps(AsmPrinter &AP)"
  },
  {
    "label": "recordFaultingOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordFaultingOp(FaultKind FaultTy, const MCSymbol *HandlerLabel)"
  },
  {
    "label": "serializeToFaultMapSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "serializeToFaultMapSection()"
  },
  {
    "label": "FaultInfo()",
    "kind": "Method",
    "detail": "Function (private : const char* WFMP ; struct FaultInfo { FaultKind Kind ; const MCExpr* FaultingOffsetExpr ; const MCExpr* HandlerOffsetExpr ;)",
    "insertText": "FaultInfo() : Kind(FaultKindMax), FaultingOffsetExpr(nullptr), HandlerOffsetExpr(nullptr)"
  },
  {
    "label": "FaultInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FaultInfo(FaultMaps::FaultKind Kind, const MCExpr *FaultingOffset, const MCExpr *HandlerOffset) : Kind(Kind), FaultingOffsetExpr(FaultingOffset), HandlerOffsetExpr(HandlerOffset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::vector<FaultInfo> FunctionFaultInfos ; struct MCSymbolComparator { bool)",
    "insertText": "operator()(const MCSymbol *LHS, const MCSymbol *RHS)"
  },
  {
    "label": "emitFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; std::map<const MCSymbol*,FunctionFaultInfos,MCSymbolComparator> FunctionInfos ; AsmPrinter& AP ; void)",
    "insertText": "emitFunctionInfo(const MCSymbol *FnLabel, const FunctionFaultInfos &FFI)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; class FaultMapParser { typedef uint8_t FaultMapVersionType ; const size_t FaultMapVersionOffset = 0 ; typedef uint8_t Reserved0Type ; const size_t Reserved0Offset = FaultMapVersionOffset +)",
    "insertText": "sizeof(FaultMapVersionType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint16_t Reserved1Type ; const size_t Reserved1Offset = Reserved0Offset +)",
    "insertText": "sizeof(Reserved0Type)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t NumFunctionsType ; const size_t NumFunctionsOffset = Reserved1Offset +)",
    "insertText": "sizeof(Reserved1Type)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t FunctionInfosOffset = NumFunctionsOffset +)",
    "insertText": "sizeof(NumFunctionsType)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (const uint8_t* P ; const uint8_t* E ; template<T> T)",
    "insertText": "read(const uint8_t *P, const uint8_t *E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(P + sizeof(T) <= E && \"out of bounds read!\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} public : class FunctionFaultInfoAccessor { typedef uint32_t FaultKindType ; const size_t FaultKindOffset = 0 ; typedef uint32_t FaultingPCOffsetType ; const size_t FaultingPCOffsetOffset = FaultKindOffset +)",
    "insertText": "sizeof(FaultKindType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t HandlerPCOffsetType ; const size_t HandlerPCOffsetOffset = FaultingPCOffsetOffset +)",
    "insertText": "sizeof(FaultingPCOffsetType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint8_t* P ; const uint8_t* E ; public : const size_t Size = HandlerPCOffsetOffset +)",
    "insertText": "sizeof(HandlerPCOffsetType)"
  },
  {
    "label": "FunctionFaultInfoAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FunctionFaultInfoAccessor(const uint8_t *P, const uint8_t *E) : P(P), E(E)"
  },
  {
    "label": "getFaultKind()",
    "kind": "Method",
    "detail": "Function (} FaultKindType)",
    "insertText": "getFaultKind()"
  },
  {
    "label": "getFaultingPCOffset()",
    "kind": "Method",
    "detail": "Function (} FaultingPCOffsetType)",
    "insertText": "getFaultingPCOffset()"
  },
  {
    "label": "getHandlerPCOffset()",
    "kind": "Method",
    "detail": "Function (} HandlerPCOffsetType)",
    "insertText": "getHandlerPCOffset()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; class FunctionInfoAccessor { typedef uint64_t FunctionAddrType ; const size_t FunctionAddrOffset = 0 ; typedef uint32_t NumFaultingPCsType ; const size_t NumFaultingPCsOffset = FunctionAddrOffset +)",
    "insertText": "sizeof(FunctionAddrType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t ReservedType ; const size_t ReservedOffset = NumFaultingPCsOffset +)",
    "insertText": "sizeof(NumFaultingPCsType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t FunctionFaultInfosOffset = ReservedOffset +)",
    "insertText": "sizeof(ReservedType)"
  },
  {
    "label": "FunctionInfoAccessor()",
    "kind": "Method",
    "detail": "Function (const size_t FunctionInfoHeaderSize = FunctionFaultInfosOffset ; const uint8_t* P ; const uint8_t* E ; public :)",
    "insertText": "FunctionInfoAccessor() : P(nullptr), E(nullptr)"
  },
  {
    "label": "FunctionInfoAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionInfoAccessor(const uint8_t *P, const uint8_t *E) : P(P), E(E)"
  },
  {
    "label": "getFunctionAddr()",
    "kind": "Method",
    "detail": "Function (} FunctionAddrType)",
    "insertText": "getFunctionAddr()"
  },
  {
    "label": "getNumFaultingPCs()",
    "kind": "Method",
    "detail": "Function (} NumFaultingPCsType)",
    "insertText": "getNumFaultingPCs()"
  },
  {
    "label": "getFunctionFaultInfoAt()",
    "kind": "Method",
    "detail": "Function (} FunctionFaultInfoAccessor)",
    "insertText": "getFunctionFaultInfoAt(uint32_t Index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < getNumFaultingPCs() && \"index out of bounds!\")"
  },
  {
    "label": "FunctionFaultInfoAccessor()",
    "kind": "Method",
    "detail": "Function (const uint8_t* Begin = P + FunctionFaultInfosOffset + FunctionFaultInfoAccessor::Size* Index ; return)",
    "insertText": "FunctionFaultInfoAccessor(Begin, E)"
  },
  {
    "label": "getNextFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} FunctionInfoAccessor)",
    "insertText": "getNextFunctionInfo()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (const uint8_t* Begin = P + MySize ;)",
    "insertText": "assert(Begin < E && \"out of bounds!\")"
  },
  {
    "label": "FaultMapParser()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FaultMapParser(const uint8_t *Begin, const uint8_t *End) : P(Begin), E(End)"
  },
  {
    "label": "getFaultMapVersion()",
    "kind": "Method",
    "detail": "Function (} FaultMapVersionType)",
    "insertText": "getFaultMapVersion()"
  },
  {
    "label": "FaultMapVersionType()",
    "kind": "Method",
    "detail": "Function (auto Version = read<)",
    "insertText": "FaultMapVersionType(P + FaultMapVersionOffset, E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Version == 1 && \"only version 1 supported!\")"
  },
  {
    "label": "getFirstFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} FunctionInfoAccessor)",
    "insertText": "getFirstFunctionInfo()"
  },
  {
    "label": "FunctionInfoAccessor()",
    "kind": "Method",
    "detail": "Function (const uint8_t* Begin = P + FunctionInfosOffset ; return)",
    "insertText": "FunctionInfoAccessor(Begin, E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const FaultMapParser::FunctionFaultInfoAccessor &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const FaultMapParser::FunctionInfoAccessor &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const FaultMapParser &)"
  }
]