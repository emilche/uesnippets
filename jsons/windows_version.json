[
  {
    "label": "Version",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Version"
  },
  {
    "label": "VersionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VersionType"
  },
  {
    "label": "OSInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OSInfo"
  },
  {
    "label": "VersionNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VersionNumber"
  },
  {
    "label": "ServicePack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ServicePack"
  },
  {
    "label": "WindowsArchitecture",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WindowsArchitecture"
  },
  {
    "label": "WOW64Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WOW64Status"
  },
  {
    "label": "OSInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_WIN_WINDOWS_VERSION_H_ # define RTC_BASE_WIN_WINDOWS_VERSION_H_ # include<stddef . h> # include<string> typedef void* HANDLE ; namespace rtc { namespace rtc_win { enum Version { VERSION_PRE_XP = 0,VERSION_XP = 1,VERSION_SERVER_2003 = 2,VERSION_VISTA = 3,VERSION_WIN7 = 4,VERSION_WIN8 = 5,VERSION_WIN8_1 = 6,VERSION_WIN10 = 7,VERSION_WIN10_TH2 = 8,VERSION_WIN10_RS1 = 9,VERSION_WIN10_RS2 = 1 0,VERSION_WIN10_RS3 = 1 1,VERSION_WIN10_RS4 = 1 2,VERSION_WIN10_RS5 = 1 3,VERSION_WIN10_19H1 = 1 4,VERSION_WIN10_19H2 = 1 5,VERSION_WIN10_20H1 = 1 6,VERSION_WIN10_20H2 = 1 7,VERSION_WIN10_21H1 = 1 8,VERSION_WIN10_21H2 = 1 9,VERSION_SERVER_2022 = 2 0,VERSION_WIN11 = 2 1,VERSION_WIN_LAST,} ; enum VersionType { SUITE_HOME = 0,SUITE_PROFESSIONAL,SUITE_SERVER,SUITE_ENTERPRISE,SUITE_EDUCATION,SUITE_LAST,} ; class OSInfo { public : struct VersionNumber { int major ; int minor ; int build ; int patch ; } ; struct ServicePack { int major ; int minor ; } ; enum WindowsArchitecture { X86_ARCHITECTURE,X64_ARCHITECTURE,IA64_ARCHITECTURE,OTHER_ARCHITECTURE,} ; enum WOW64Status { WOW64_DISABLED,WOW64_ENABLED,WOW64_UNKNOWN,} ;)",
    "insertText": "OSInfo(const OSInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OSInfo&)",
    "insertText": "operator(const OSInfo&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (OSInfo*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (Version)",
    "insertText": "version()"
  },
  {
    "label": "GetWOW64StatusForProcess()",
    "kind": "Method",
    "detail": "Function (WOW64Status)",
    "insertText": "GetWOW64StatusForProcess(HANDLE process_handle)"
  },
  {
    "label": "OSInfo()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "OSInfo()"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (Version version_ ; VersionNumber version_number_ ; VersionType version_type_ ; ServicePack service_pack_ ; std::string service_pack_str_ ; WindowsArchitecture architecture_ ; int processors_ ; size_t allocation_granularity_ ; WOW64Status wow64_status_ ; std::string processor_model_name_ ; } ; Version)",
    "insertText": "GetVersion()"
  }
]