[
  {
    "label": "FContactTriangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContactTriangle"
  },
  {
    "label": "FContactEdgeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContactEdgeID"
  },
  {
    "label": "FContactEdgeOrVertexID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContactEdgeOrVertexID"
  },
  {
    "label": "FTriangleContactPointData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleContactPointData"
  },
  {
    "label": "FContactTriangleCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContactTriangleCollector"
  },
  {
    "label": "GetTriangleEdgeVerticesAtPosition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / UnrealTemplate . h \" # include \" Chaos / Core . h \" # include \" Chaos / Triangle . h \" namespace Chaos { bool)",
    "insertText": "GetTriangleEdgeVerticesAtPosition(const FVec3& Position, const FVec3 VertexA, const FVec3 VertexB, const FVec3 VertexC, int32& OutEdgeVertexIndexA, int32& OutEdgeVertexIndexB, const FReal BaryCentricTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "ToBarycentric()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = INDEX_NONE ; OutEdgeVertexIndexB = INDEX_NONE ; const FVec3 BaryCentric =)",
    "insertText": "ToBarycentric(Position, VertexA, VertexB, VertexC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 0 ; return true ; })",
    "insertText": "if(FMath::IsNearlyEqual(BaryCentric.Y, FReal(1), BaryCentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 1 ; return true ; })",
    "insertText": "if(FMath::IsNearlyEqual(BaryCentric.Z, FReal(1), BaryCentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 2 ; return true ; })",
    "insertText": "if(FMath::IsNearlyEqual(BaryCentric.X, FReal(0), BaryCentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 1 ; OutEdgeVertexIndexB = 2 ; return true ; })",
    "insertText": "if(FMath::IsNearlyEqual(BaryCentric.Y, FReal(0), BaryCentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 2 ; OutEdgeVertexIndexB = 0 ; return true ; })",
    "insertText": "if(FMath::IsNearlyEqual(BaryCentric.Z, FReal(0), BaryCentricTolerance))"
  },
  {
    "label": "GetTriangleEdgeVerticesAtPosition()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = 0 ; OutEdgeVertexIndexB = 1 ; return true ; } return false ; } bool)",
    "insertText": "GetTriangleEdgeVerticesAtPosition(const FVec3& Position, const FVec3 Vertices[], int32& OutEdgeVertexIndexA, int32& OutEdgeVertexIndexB, const FReal BaryCentricTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "HasVertexIndex()",
    "kind": "Method",
    "detail": "Function (} class FContactTriangle { public : FVec3 Vertices [ 3 ] ; FVec3 FaceNormal ; int32 VertexIndices [ 3 ] ; int32 TriangleIndex ; bool)",
    "insertText": "HasVertexIndex(const int32 VertexIndex)"
  },
  {
    "label": "GetCentroid()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCentroid()"
  },
  {
    "label": "GetOtherVertexPositions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetOtherVertexPositions(const int32 VertexIndex, FVec3& OutVertex0, FVec3& OutVertex1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutVertex0 = Vertices [ 1 ] ; OutVertex1 = Vertices [ 2 ] ; return true ; } else)",
    "insertText": "if(VertexIndex == VertexIndices[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutVertex0 = Vertices [ 2 ] ; OutVertex1 = Vertices [ 0 ] ; return true ; } else)",
    "insertText": "if(VertexIndex == VertexIndices[2])"
  },
  {
    "label": "GetEdgeVerticesAtPosition()",
    "kind": "Method",
    "detail": "Function (OutVertex0 = Vertices [ 0 ] ; OutVertex1 = Vertices [ 1 ] ; return true ; } return false ; } bool)",
    "insertText": "GetEdgeVerticesAtPosition(const FVec3& ContactPosition, FVec3& OutEdgeVertexA, FVec3& OutEdgeVertexB, int32& OutEdgeVertexIndexA, int32& OutEdgeVertexIndexB, const FReal BaryCentricTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = INDEX_NONE ; OutEdgeVertexIndexB = INDEX_NONE ; int32 TriVertexIndexA,TriVertexIndexB ;)",
    "insertText": "if(GetTriangleEdgeVerticesAtPosition(ContactPosition, Vertices, TriVertexIndexA, TriVertexIndexB, BaryCentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexA = VertexIndices [ TriVertexIndexA ] ; OutEdgeVertexA = Vertices [ TriVertexIndexA ] ; })",
    "insertText": "if(TriVertexIndexB != INDEX_NONE)"
  },
  {
    "label": "FContactEdgeID()",
    "kind": "Method",
    "detail": "Function (OutEdgeVertexIndexB = VertexIndices [ TriVertexIndexB ] ; OutEdgeVertexB = Vertices [ TriVertexIndexB ] ; } return true ; } return false ; } } ; using FContactVertexID = int32 ; struct FContactEdgeID {)",
    "insertText": "FContactEdgeID()"
  },
  {
    "label": "FContactEdgeID()",
    "kind": "Method",
    "detail": "Function (INDEX_NONE,INDEX_NONE } { })",
    "insertText": "FContactEdgeID(const FContactVertexID VertexIndexA, const FContactVertexID VertexIndexB)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (VertexIDs [ 0 ] = VertexIndexA ; VertexIDs [ 1 ] = VertexIndexB ; } else { VertexIDs [ 0 ] = VertexIndexB ; VertexIDs [ 1 ] = VertexIndexA ; } } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FContactEdgeID& L, const FContactEdgeID& R)"
  },
  {
    "label": "FContactEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (} union { FContactVertexID VertexIDs [ 2 ] ; uint64 EdgeID ; } ; } ; struct FContactEdgeOrVertexID { public :)",
    "insertText": "FContactEdgeOrVertexID() : EdgeID()"
  },
  {
    "label": "FContactEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FContactEdgeOrVertexID(const FContactVertexID VertexIndex)"
  },
  {
    "label": "FContactEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (EdgeID . VertexIDs [ 0 ] = VertexIndex ; EdgeID . VertexIDs [ 1 ] = INDEX_NONE ; })",
    "insertText": "FContactEdgeOrVertexID(const FContactVertexID VertexIndexA, const FContactVertexID VertexIndexB)"
  },
  {
    "label": "FContactEdgeID()",
    "kind": "Method",
    "detail": "Function (EdgeID =)",
    "insertText": "FContactEdgeID(VertexIndexA, VertexIndexB)"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex()"
  },
  {
    "label": "IsEdge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdge()"
  },
  {
    "label": "GetVertexID()",
    "kind": "Method",
    "detail": "Function (} const FContactVertexID&)",
    "insertText": "GetVertexID()"
  },
  {
    "label": "FTriangleContactPointData()",
    "kind": "Method",
    "detail": "Function (} private : FContactEdgeID EdgeID ; } ; class FTriangleContactPointData { public :)",
    "insertText": "FTriangleContactPointData() : EdgeOrVertexID() , ContactTriangleIndex(INDEX_NONE) , ContactNormalDotTriangleNormal(0) , bIsEnabled(false)"
  },
  {
    "label": "SetVertexID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertexID(const FContactVertexID InVertexID)"
  },
  {
    "label": "FContactEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (EdgeOrVertexID =)",
    "insertText": "FContactEdgeOrVertexID(InVertexID)"
  },
  {
    "label": "SetEdgeID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEdgeID(const FContactVertexID InVertexIDA, const FContactVertexID InVertexIDB)"
  },
  {
    "label": "FContactEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (EdgeOrVertexID =)",
    "insertText": "FContactEdgeOrVertexID(InVertexIDA, InVertexIDB)"
  },
  {
    "label": "SetEdgeOrVertexID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEdgeOrVertexID(const FContactEdgeOrVertexID InEdgeOrVertexID)"
  },
  {
    "label": "SetTriangleIndex()",
    "kind": "Method",
    "detail": "Function (EdgeOrVertexID = InEdgeOrVertexID ; } void)",
    "insertText": "SetTriangleIndex(const int32 InTriangleIndex)"
  },
  {
    "label": "SetContactNormalDotTriangleNormal()",
    "kind": "Method",
    "detail": "Function (ContactTriangleIndex = InTriangleIndex ; } void)",
    "insertText": "SetContactNormalDotTriangleNormal(const FRealSingle InContactNormalDotTriangleNormal)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (ContactNormalDotTriangleNormal = InContactNormalDotTriangleNormal ; } void)",
    "insertText": "SetEnabled()"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (bIsEnabled = true ; } void)",
    "insertText": "SetDisabled()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bIsEnabled = false ; } bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetEdgeID()",
    "kind": "Method",
    "detail": "Function (} FContactEdgeID)",
    "insertText": "GetEdgeID()"
  },
  {
    "label": "GetContactNormalDotTriangleNormal()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "GetContactNormalDotTriangleNormal()"
  },
  {
    "label": "FContactTriangleCollector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FContactTriangleCollector(const bool bInOneSided, const FReal InPhiTolerance, const FReal InDistanceTolerance, const FRigidTransform3& InConvexTransform) : PhiTolerance(InPhiTolerance) , DistanceTolerance(InDistanceTolerance) , NumDisabledTriangleContactPoints(0) , bOneSidedCollision(bInOneSided) , ConvexTransform(InConvexTransform)"
  },
  {
    "label": "GetContactPoints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FContactPoint>)",
    "insertText": "GetContactPoints()"
  },
  {
    "label": "AddTriangleContacts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangleContacts(const TArrayView<const FContactPoint>& InContactPoints, const FTriangle& Triangle, const int32 TriangleIndex, const int32 VertexIndex0, const int32 VertexIndex1, const int32 VertexIndex2, const FReal CullDistance)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (const int32 ContactTriangleIndex =)",
    "insertText": "AddTriangle(Triangle, TriangleIndex, VertexIndex0, VertexIndex1, VertexIndex2)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NewNumContactPoints = TriangleContactPoints .)",
    "insertText": "Num() + InContactPoints.Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TriangleContactPoints .)",
    "insertText": "Reserve(NewNumContactPoints)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal ContactNormalDotTriangleNormal =)",
    "insertText": "DotProduct(ContactPoint.ShapeContactNormal, ContactTriangles[ContactTriangleIndex].FaceNormal)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 ContactIndex = TriangleContactPoints .)",
    "insertText": "Add(ContactPoint)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (TriangleContactPointDatas .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "SetTriangleIndex()",
    "kind": "Method",
    "detail": "Function (TriangleContactPoints [ ContactIndex ] . FaceIndex = TriangleIndex ; TriangleContactPointDatas [ ContactIndex ] .)",
    "insertText": "SetTriangleIndex(ContactTriangleIndex)"
  },
  {
    "label": "SetContactNormalDotTriangleNormal()",
    "kind": "Method",
    "detail": "Function (TriangleContactPointDatas [ ContactIndex ] .)",
    "insertText": "SetContactNormalDotTriangleNormal(FRealSingle(ContactNormalDotTriangleNormal))"
  },
  {
    "label": "ProcessContacts()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ProcessContacts(const FRigidTransform3& MeshToConvexTransform)"
  },
  {
    "label": "SetNumContacts()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetNumContacts(const int32 Num)"
  },
  {
    "label": "DisableContact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableContact(const int32 ContactIndex)"
  },
  {
    "label": "RemoveDisabledContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDisabledContacts()"
  },
  {
    "label": "BuildContactFeatureSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContactFeatureSets()"
  },
  {
    "label": "SortContactPointsForPruning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortContactPointsForPruning()"
  },
  {
    "label": "SortContactPointsForSolving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortContactPointsForSolving()"
  },
  {
    "label": "PruneEdgeAndVertexContactPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneEdgeAndVertexContactPoints(const bool bPruneEdges, const bool bPruneVertices)"
  },
  {
    "label": "FixInvalidNormalContactPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixInvalidNormalContactPoints()"
  },
  {
    "label": "PruneInfacingContactPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneInfacingContactPoints()"
  },
  {
    "label": "PruneUnnecessaryContactPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneUnnecessaryContactPoints()"
  },
  {
    "label": "ReduceManifoldContactPointsTriangeMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReduceManifoldContactPointsTriangeMesh()"
  },
  {
    "label": "FinalizeContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeContacts(const FRigidTransform3& MeshToConvexTransform)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddTriangle(const FTriangle& Triangle, const int32 TriangleIndex, const int32 VertexIndex0, const int32 VertexIndex1, const int32 VertexIndex2)"
  },
  {
    "label": "GetOtherTriangleIndexSharingEdge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOtherTriangleIndexSharingEdge(const int32 KnownTriangleIndex, const int32 EdgeVertexIndexA, const int32 EdgeVertexIndexB)"
  },
  {
    "label": "GetNextTriangleIndexSharingVertex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextTriangleIndexSharingVertex(const int32 LastContactTriangleIndex, const int32 VertexIndex)"
  },
  {
    "label": "DebugDrawContactPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawContactPoints(const FColor& Color, const FReal LineThickness)"
  }
]