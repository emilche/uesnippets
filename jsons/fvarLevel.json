[
  {
    "label": "FVarLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarLevel"
  },
  {
    "label": "ETag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETag"
  },
  {
    "label": "ValueTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueTag"
  },
  {
    "label": "CreaseEndPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreaseEndPair"
  },
  {
    "label": "ValueSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueSpan"
  },
  {
    "label": "FVarRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarRefinement"
  },
  {
    "label": "ETag()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_FVAR_LEVEL_H # define OPENSUBDIV3_VTR_FVAR_LEVEL_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / crease . h \" # include \" . . / sdc / options . h \" # include \" . . / vtr / types . h \" # include \" . . / vtr / level . h \" # include<vector> # include<cassert> # include<cstring> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { class FVarLevel { public : struct ETag {)",
    "insertText": "ETag()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(ETag))"
  },
  {
    "label": "combineWithLevelETag()",
    "kind": "Method",
    "detail": "Function (} typedef unsigned char ETagSize ; ETagSize _mismatch : 1 ; ETagSize _disctsV0 : 1 ; ETagSize _disctsV1 : 1 ; ETagSize _linear : 1 ; Level::ETag)",
    "insertText": "combineWithLevelETag(Level::ETag)"
  },
  {
    "label": "ValueTag()",
    "kind": "Method",
    "detail": "Function (} ; struct ValueTag {)",
    "insertText": "ValueTag()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(ValueTag))"
  },
  {
    "label": "isMismatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMismatch()"
  },
  {
    "label": "ValueTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueTag(ValueTagSize bits)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(this, &bits, sizeof(bits))"
  },
  {
    "label": "getBits()",
    "kind": "Method",
    "detail": "Function (} ValueTagSize)",
    "insertText": "getBits()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (ValueTagSize bits ;)",
    "insertText": "memcpy(&bits, this, sizeof(bits))"
  },
  {
    "label": "FVarLevel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVarLevel()"
  },
  {
    "label": "getLevel()",
    "kind": "Method",
    "detail": "Function (Level const&)",
    "insertText": "getLevel()"
  },
  {
    "label": "isLinear()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLinear()"
  },
  {
    "label": "getOptions()",
    "kind": "Method",
    "detail": "Function (} Sdc::Options)",
    "insertText": "getOptions()"
  },
  {
    "label": "getFaceValues()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getFaceValues(Index fIndex)"
  },
  {
    "label": "getEdgeTag()",
    "kind": "Method",
    "detail": "Function (ETag)",
    "insertText": "getEdgeTag(Index eIndex)"
  },
  {
    "label": "getNumVertexValues()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumVertexValues(Index v)"
  },
  {
    "label": "findVertexValueIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "findVertexValueIndex(Index vertexIndex, Index valueIndex)"
  },
  {
    "label": "getVertexValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getVertexValues(Index vIndex)"
  },
  {
    "label": "getVertexValueTags()",
    "kind": "Method",
    "detail": "Function (ConstValueTagArray)",
    "insertText": "getVertexValueTags(Index vIndex)"
  },
  {
    "label": "getVertexValueCreaseEnds()",
    "kind": "Method",
    "detail": "Function (ConstCreaseEndPairArray)",
    "insertText": "getVertexValueCreaseEnds(Index vIndex)"
  },
  {
    "label": "getVertexFaceSiblings()",
    "kind": "Method",
    "detail": "Function (ConstSiblingArray)",
    "insertText": "getVertexFaceSiblings(Index vIndex)"
  },
  {
    "label": "getValueTag()",
    "kind": "Method",
    "detail": "Function (ValueTag)",
    "insertText": "getValueTag(Index valueIndex)"
  },
  {
    "label": "getValueCreaseEndPair()",
    "kind": "Method",
    "detail": "Function (} CreaseEndPair)",
    "insertText": "getValueCreaseEndPair(Index valueIndex)"
  },
  {
    "label": "getFaceCompositeValueTag()",
    "kind": "Method",
    "detail": "Function (ValueTag)",
    "insertText": "getFaceCompositeValueTag(Index faceIndex)"
  },
  {
    "label": "getEdgeFaceValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getEdgeFaceValues(Index eIndex, int fIncToEdge, Index valuesPerVert[2])"
  },
  {
    "label": "getVertexEdgeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getVertexEdgeValues(Index vIndex, Index valuesPerEdge[])"
  },
  {
    "label": "getVertexCreaseEndValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getVertexCreaseEndValues(Index vIndex, Sibling sibling, Index endValues[2])"
  },
  {
    "label": "setOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOptions(Sdc::Options const& options)"
  },
  {
    "label": "resizeVertexValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertexValues(int numVertexValues)"
  },
  {
    "label": "resizeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeValues(int numValues)"
  },
  {
    "label": "resizeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeComponents()"
  },
  {
    "label": "completeTopologyFromFaceValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "completeTopologyFromFaceValues(int regBoundaryValence)"
  },
  {
    "label": "initializeFaceValuesFromFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeFaceValuesFromFaceVertices()"
  },
  {
    "label": "initializeFaceValuesFromVertexFaceSiblings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeFaceValuesFromVertexFaceSiblings()"
  },
  {
    "label": "gatherValueSpans()",
    "kind": "Method",
    "detail": "Function (struct ValueSpan ; void)",
    "insertText": "gatherValueSpans(Index vIndex, ValueSpan * vValueSpans)"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validate()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print()"
  },
  {
    "label": "buildFaceVertexSiblingsFromVertexFaceSiblings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildFaceVertexSiblingsFromVertexFaceSiblings(std::vector<Sibling>& fvSiblings)"
  },
  {
    "label": "getNumFaceVertices()",
    "kind": "Method",
    "detail": "Function (int vCount = _level .)",
    "insertText": "getNumFaceVertices(fIndex)"
  },
  {
    "label": "getOffsetOfFaceVertices()",
    "kind": "Method",
    "detail": "Function (int vOffset = _level .)",
    "insertText": "getOffsetOfFaceVertices(fIndex)"
  },
  {
    "label": "getNumVertexFaces()",
    "kind": "Method",
    "detail": "Function (int vCount = _level .)",
    "insertText": "getNumVertexFaces(vIndex)"
  },
  {
    "label": "getOffsetOfVertexFaces()",
    "kind": "Method",
    "detail": "Function (int vOffset = _level .)",
    "insertText": "getOffsetOfVertexFaces(vIndex)"
  },
  {
    "label": "getNumVertexValues()",
    "kind": "Method",
    "detail": "Function (int vCount =)",
    "insertText": "getNumVertexValues(vIndex)"
  },
  {
    "label": "getVertexValueOffset()",
    "kind": "Method",
    "detail": "Function (int vOffset =)",
    "insertText": "getVertexValueOffset(vIndex)"
  },
  {
    "label": "getVertexValueOffset()",
    "kind": "Method",
    "detail": "Function (Index vvIndex =)",
    "insertText": "getVertexValueOffset(vertexIndex)"
  },
  {
    "label": "combineWithLevelETag()",
    "kind": "Method",
    "detail": "Function (+ + vvIndex ; } return vvIndex ; } Level::ETag FVarLevel::)",
    "insertText": "combineWithLevelETag(Level::ETag levelTag)"
  },
  {
    "label": "combineWithLevelVTag()",
    "kind": "Method",
    "detail": "Function (levelTag . _boundary = true ; levelTag . _infSharp = true ; } return levelTag ; } Level::VTag FVarLevel::)",
    "insertText": "combineWithLevelVTag(Level::VTag levelTag)"
  },
  {
    "label": "_rule()",
    "kind": "Method",
    "detail": "Function (levelTag .)",
    "insertText": "_rule(Level::VTag::VTagSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->isCrease() || this->isSemiSharp())"
  }
]