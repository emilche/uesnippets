[
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_COMMON_4_H_INCLUDED # define ASTC_VECMATHLIB_COMMON_4_H_INCLUDED # ifndef ASTCENC_SIMD_INLINE # error \" Include astcenc_vecmathlib . h,do not include directly \" # endif # include<cstdio> ASTCENC_SIMD_INLINE bool)",
    "insertText": "any(vmask4 a)"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE bool)",
    "insertText": "all(vmask4 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "operator(vint4 a, int b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4&)",
    "insertText": "operator(vint4& a, const vint4& b)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint4)",
    "insertText": "clamp(int minv, int maxv, vint4 a)"
  },
  {
    "label": "hadd_rgb_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE int)",
    "insertText": "hadd_rgb_s(vint4 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4&)",
    "insertText": "operator(vfloat4& a, const vfloat4& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (a = a + b ; return a ; } ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "operator(vfloat4 a, float b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "operator(float a, vfloat4 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "min(vfloat4 a, float b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "max(vfloat4 a, float b)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "clamp(float minv, float maxv, vfloat4 a)"
  },
  {
    "label": "clampz()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "clampz(float maxv, vfloat4 a)"
  },
  {
    "label": "clampzo()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "clampzo(vfloat4 a)"
  },
  {
    "label": "hmin_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hmin_s(vfloat4 a)"
  },
  {
    "label": "hmin_rgb_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hmin_rgb_s(vfloat4 a)"
  },
  {
    "label": "set_lane()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "set_lane(a.lane<0>())"
  },
  {
    "label": "hmax_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hmax_s(vfloat4 a)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat4& accum, vfloat4 a)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (accum = accum + a ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat4& accum, vfloat4 a, vmask4 m)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "select(vfloat4::zero(), a, m)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "haccumulate(accum, a)"
  },
  {
    "label": "hadd_rgb_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hadd_rgb_s(vfloat4 a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(ASTCENC_USE_NATIVE_DOT_PRODUCT) ASTCENC_SIMD_INLINE float dot_s(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (vfloat4 m = a* b ; return)",
    "insertText": "hadd_s(m)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "dot(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (vfloat4 m = a* b ; return)",
    "insertText": "vfloat4(hadd_s(m))"
  },
  {
    "label": "dot3_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "dot3_s(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "hadd_rgb_s()",
    "kind": "Method",
    "detail": "Function (vfloat4 m = a* b ; return)",
    "insertText": "hadd_rgb_s(m)"
  },
  {
    "label": "dot3()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat4)",
    "insertText": "dot3(vfloat4 a, vfloat4 b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if !)",
    "insertText": "defined(ASTCENC_USE_NATIVE_POPCOUNT) static inline int popcount(uint64_t v)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (uint64_t mask1 = 0 x5555555555555555ULL ; uint64_t mask2 = 0 x3333333333333333ULL ; uint64_t mask3 = 0 x0F0F0F0F0F0F0F0FULL ;)",
    "insertText": "v(v >> 1)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(v & mask2) + ((v >> 2) & mask2)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (v + = v>> 4 ; v& = mask3 ; v* = 0 x0101010101010101ULL ; v>> = 5 6 ; return static_cast<)",
    "insertText": "int(v)"
  },
  {
    "label": "bit_transfer_signed()",
    "kind": "Method",
    "detail": "Function (} # endif ASTCENC_SIMD_INLINE void)",
    "insertText": "bit_transfer_signed(vint4& input0, vint4& input1)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (input1 =)",
    "insertText": "lsr(input1) | (input0 & 0x80)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (input0 =)",
    "insertText": "lsr(input0)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (vmask4)",
    "insertText": "mask(input0 & 0x20) != vint4::zero()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (input0 =)",
    "insertText": "select(input0, input0 - 0x40, mask)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vint4 a)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(16)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(a, v)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v4_i32:\\n %8d %8d %8d %8d\\n\", v[0], v[1], v[2], v[3])"
  },
  {
    "label": "printx()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "printx(vint4 a)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v4_i32:\\n %08x %08x %08x %08x\\n\", v[0], v[1], v[2], v[3])"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vfloat4 a)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v4_f32:\\n %0.4f %0.4f %0.4f %0.4f\\n\", static_cast<double>(v[0]), static_cast<double>(v[1]), static_cast<double>(v[2]), static_cast<double>(v[3]))"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vmask4 a)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(select(vint4(0), vint4(1), a))"
  }
]