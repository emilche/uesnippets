[
  {
    "label": "port_ref_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "port_ref_impl"
  },
  {
    "label": "num_arguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "num_arguments"
  },
  {
    "label": "key_from_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_from_policy"
  },
  {
    "label": "streaming_device_with_key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "streaming_device_with_key"
  },
  {
    "label": "is_port_ref_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_port_ref_impl"
  },
  {
    "label": "is_port_ref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_port_ref"
  },
  {
    "label": "convert_and_call_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "convert_and_call_impl"
  },
  {
    "label": "streaming_node_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "streaming_node_traits"
  },
  {
    "label": "async_msg_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "async_msg_type"
  },
  {
    "label": "kernel_executor_helper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "kernel_executor_helper"
  },
  {
    "label": "range_wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "range_wrapper"
  },
  {
    "label": "range_value",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "range_value"
  },
  {
    "label": "range_mapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "range_mapper"
  },
  {
    "label": "streaming_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "streaming_node"
  },
  {
    "label": "device_selector_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "device_selector_base"
  },
  {
    "label": "device_selector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "device_selector"
  },
  {
    "label": "epoch_desc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "epoch_desc"
  },
  {
    "label": "device_selector_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "device_selector_body"
  },
  {
    "label": "args_storage_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "args_storage_base"
  },
  {
    "label": "args_storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "args_storage"
  },
  {
    "label": "run_kernel_func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_kernel_func"
  },
  {
    "label": "kernel_func",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kernel_func"
  },
  {
    "label": "run_finalize_func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_finalize_func"
  },
  {
    "label": "finalize_func",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "finalize_func"
  },
  {
    "label": "send_func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "send_func"
  },
  {
    "label": "kernel_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "kernel_body"
  },
  {
    "label": "wrap_to_async",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wrap_to_async"
  },
  {
    "label": "port_ref()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_flow_graph_streaming_H # define __TBB_flow_graph_streaming_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif # if __TBB_PREVIEW_STREAMING_NODE namespace internal { template<int N1,int N2> struct port_ref_impl { const int size = N2 - N1 + 1 ; } ; } template<int N1,int N2 = N1> internal::port_ref_impl<N1,N2>)",
    "insertText": "port_ref()"
  },
  {
    "label": "N2()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<T> struct num_arguments { const int value = 1 ; } ; template<int N1,int N2> struct num_arguments<port_ref_impl<N1,)",
    "insertText": "N2(*)()"
  },
  {
    "label": "ignore_return_values()",
    "kind": "Method",
    "detail": "Function (const int value = port_ref_impl<N1,N2>::size ; } ; template<int N1,int N2> struct num_arguments<port_ref_impl<N1,N2>> { const int value = port_ref_impl<N1,N2>::size ; } ; template<. . . Args> void)",
    "insertText": "ignore_return_values(Args&&...)"
  },
  {
    "label": "or_return_values()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "or_return_values(T&& t)"
  },
  {
    "label": "streaming_device_with_key()",
    "kind": "Method",
    "detail": "Function (} template<JP> struct key_from_policy { typedef size_t type ; typedef std::false_type is_key_matching ; } ; template<Key> struct key_from_policy<key_matching<Key>> { typedef Key type ; typedef std::true_type is_key_matching ; } ; template<Key> struct key_from_policy<key_matching<Key&>> { typedef const Key& type ; typedef std::true_type is_key_matching ; } ; template<Device,Key> class streaming_device_with_key { Device my_device ; std::decay<Key>::type my_key ; public :)",
    "insertText": "streaming_device_with_key()"
  },
  {
    "label": "streaming_device_with_key()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "streaming_device_with_key(const Device& d, Key k ) : my_device( d ), my_key( k)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} Key)",
    "insertText": "key()"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (typedef std::true_type type ; } ; template<T> struct is_port_ref { typedef is_port_ref_impl<tbb::internal::strip<T>::type>::type type ; } ; template<. . . Args1> struct convert_and_call_impl ; template<A1,. . . Args1> struct convert_and_call_impl<A1,Args1 . . .> { const size_t my_delta = 1 ; template<F,Tuple,. . . Args2> void)",
    "insertText": "doit(F& f, Tuple& t, A1& a1, Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (convert_and_call_impl<A1,Args1 . . .)",
    "insertText": "doit_impl(typename is_port_ref<A1>::type(), f, t, a1, args1..., args2...)"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple,. . . Args2> void)",
    "insertText": "doit_impl(std::false_type, F& f, Tuple& t, A1& a1, Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (convert_and_call_impl<Args1 . . .)",
    "insertText": "doit(f, t, args1..., args2..., a1)"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple,int N1,int N2,. . . Args2> void)",
    "insertText": "doit_impl(std::true_type x, F& f, Tuple& t, port_ref_impl<N1, N2>, Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (convert_and_call_impl<port_ref_impl<N1 + 1,N2>,Args1 . . .)",
    "insertText": "doit_impl(x, f, t, port_ref<N1 + 1, N2>(), args1..., args2..., std::get<N1 + my_delta>(t))"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple,int N,. . . Args2> void)",
    "insertText": "doit_impl(std::true_type, F& f, Tuple& t, port_ref_impl<N, N>, Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (convert_and_call_impl<Args1 . . .)",
    "insertText": "doit(f, t, args1..., args2..., std::get<N + my_delta>(t))"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple,int N1,int N2,. . . Args2> void)",
    "insertText": "doit_impl(std::true_type x, F& f, Tuple& t, port_ref_impl<N1, N2>(* fn)(), Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit_impl()",
    "kind": "Method",
    "detail": "Function (} template<F,Tuple,int N,. . . Args2> void)",
    "insertText": "doit_impl(std::true_type x, F& f, Tuple& t, port_ref_impl<N, N>(* fn)(), Args1&... args1, Args2&... args2)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct convert_and_call_impl<> { template<F,Tuple,. . . Args2> void)",
    "insertText": "doit(F& f, Tuple&, Args2&... args2)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f(args2...)"
  },
  {
    "label": "enqueue_kernel_impl()",
    "kind": "Method",
    "detail": "Function (} } ; template<JP,StreamFactory,. . . Ports> struct streaming_node_traits { template<T> struct async_msg_type { typedef StreamFactory::template async_msg_type<T> type ; } ; typedef tuple<async_msg_type<Ports>::type . . .> input_tuple ; typedef input_tuple output_tuple ; typedef tuple<streaming_device_with_key<StreamFactory::device_type,key_from_policy<JP>::type>,async_msg_type<Ports>::type . . .> kernel_input_tuple ; typedef indexer_node<async_msg_type<Ports>::type . . .> indexer_node_type ; } ; template<StreamFactory,KernelInputTuple,= void> class kernel_executor_helper { typedef StreamFactory::device_type device_type ; typedef StreamFactory::kernel_type kernel_type ; typedef KernelInputTuple kernel_input_tuple ; protected : template<. . . Args> void)",
    "insertText": "enqueue_kernel_impl(kernel_input_tuple&, StreamFactory& factory, device_type device, const kernel_type& kernel, Args&... args)"
  },
  {
    "label": "send_kernel()",
    "kind": "Method",
    "detail": "Function (factory .)",
    "insertText": "send_kernel(device, kernel, args...)"
  },
  {
    "label": "get_range()",
    "kind": "Method",
    "detail": "Function (} } ; template<StreamFactory,KernelInputTuple> class kernel_executor_helper<StreamFactory,KernelInputTuple,tbb::internal::void_t<StreamFactory::range_type>::type> { typedef StreamFactory::device_type device_type ; typedef StreamFactory::kernel_type kernel_type ; typedef KernelInputTuple kernel_input_tuple ; typedef StreamFactory::range_type range_type ; struct range_wrapper { range_type)",
    "insertText": "get_range(const kernel_input_tuple &ip)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (range_wrapper*)",
    "insertText": "clone()"
  },
  {
    "label": "range_wrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "range_wrapper()"
  },
  {
    "label": "range_value()",
    "kind": "Method",
    "detail": "Function (} } ; struct range_value : public range_wrapper {)",
    "insertText": "range_value(const range_type& value ) : my_value(value)"
  },
  {
    "label": "range_value()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "range_value(range_type&& value ) : my_value(std::move(value))"
  },
  {
    "label": "get_range()",
    "kind": "Method",
    "detail": "Function (} range_type)",
    "insertText": "get_range(const kernel_input_tuple &)"
  },
  {
    "label": "range_mapper()",
    "kind": "Method",
    "detail": "Function (} private : range_type my_value ; } ; template<int N> struct range_mapper : public range_wrapper {)",
    "insertText": "range_mapper()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_range_wrapper, \"Range is not set. Call set_range() before running streaming_node.\")"
  },
  {
    "label": "send_kernel()",
    "kind": "Method",
    "detail": "Function (factory .)",
    "insertText": "send_kernel(device, kernel, my_range_wrapper->get_range(ip), args...)"
  },
  {
    "label": "kernel_executor_helper()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "kernel_executor_helper() : my_range_wrapper(NULL)"
  },
  {
    "label": "kernel_executor_helper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "kernel_executor_helper(const kernel_executor_helper& executor) : my_range_wrapper(executor.my_range_wrapper ? executor.my_range_wrapper->clone() : NULL)"
  },
  {
    "label": "kernel_executor_helper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "kernel_executor_helper(kernel_executor_helper&& executor) : my_range_wrapper(executor.my_range_wrapper)"
  },
  {
    "label": "kernel_executor_helper()",
    "kind": "Method",
    "detail": "Function (executor . my_range_wrapper = NULL ; } ~)",
    "insertText": "kernel_executor_helper()"
  },
  {
    "label": "set_range()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_range(const range_type& work_size)"
  },
  {
    "label": "range_value()",
    "kind": "Method",
    "detail": "Function (my_range_wrapper = new)",
    "insertText": "range_value(work_size)"
  },
  {
    "label": "set_range()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_range(range_type&& work_size)"
  },
  {
    "label": "range_value()",
    "kind": "Method",
    "detail": "Function (my_range_wrapper = new)",
    "insertText": "range_value(std::move(work_size))"
  },
  {
    "label": "set_range()",
    "kind": "Method",
    "detail": "Function (} template<int N> void)",
    "insertText": "set_range(port_ref_impl<N, N>)"
  },
  {
    "label": "set_range()",
    "kind": "Method",
    "detail": "Function (my_range_wrapper = new range_mapper<N> ; } template<int N> void)",
    "insertText": "set_range(port_ref_impl<N, N>(*)())"
  },
  {
    "label": "get_input_ports()",
    "kind": "Method",
    "detail": "Function (my_range_wrapper = new range_mapper<N> ; } private : range_wrapper* my_range_wrapper ; } ; } template<. . . Args> class streaming_node ; template<. . . Ports,JP,StreamFactory> class streaming_node<tuple<Ports . . .>,JP,StreamFactory> : public composite_node<internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::input_tuple,internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::output_tuple>,public internal::kernel_executor_helper<StreamFactory,internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::kernel_input_tuple> { typedef internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::input_tuple input_tuple ; typedef internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::output_tuple output_tuple ; typedef internal::key_from_policy<JP>::type key_type ; protected : typedef StreamFactory::device_type device_type ; typedef StreamFactory::kernel_type kernel_type ; private : typedef internal::streaming_device_with_key<device_type,key_type> device_with_key_type ; typedef composite_node<input_tuple,output_tuple> base_type ; const size_t NUM_INPUTS = tuple_size<input_tuple>::value ; const size_t NUM_OUTPUTS = tuple_size<output_tuple>::value ; typedef internal::make_sequence<NUM_INPUTS>::type input_sequence ; typedef internal::make_sequence<NUM_OUTPUTS>::type output_sequence ; typedef internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::indexer_node_type indexer_node_type ; typedef indexer_node_type::output_type indexer_node_output_type ; typedef internal::streaming_node_traits<JP,StreamFactory,Ports . . .>::kernel_input_tuple kernel_input_tuple ; typedef multifunction_node<indexer_node_output_type,kernel_input_tuple> device_selector_node ; typedef multifunction_node<kernel_input_tuple,output_tuple> kernel_multifunction_node ; template<int . . . S> base_type::input_ports_type)",
    "insertText": "get_input_ports(internal::sequence<S...>)"
  },
  {
    "label": "get_output_ports()",
    "kind": "Method",
    "detail": "Function (} template<int . . . S> base_type::output_ports_type)",
    "insertText": "get_output_ports(internal::sequence<S...>)"
  },
  {
    "label": "get_input_ports()",
    "kind": "Method",
    "detail": "Function (} base_type::input_ports_type)",
    "insertText": "get_input_ports()"
  },
  {
    "label": "get_output_ports()",
    "kind": "Method",
    "detail": "Function (} base_type::output_ports_type)",
    "insertText": "get_output_ports()"
  },
  {
    "label": "make_Nth_edge()",
    "kind": "Method",
    "detail": "Function (} template<int N> int)",
    "insertText": "make_Nth_edge()"
  },
  {
    "label": "make_edge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_edge(internal::output_port<N>( my_device_selector_node ), internal::input_port<N>( my_join_node ))"
  },
  {
    "label": "make_edge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_edge(my_indexer_node, my_device_selector_node)"
  },
  {
    "label": "make_edge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_edge(my_device_selector_node, my_join_node)"
  },
  {
    "label": "ignore_return_values()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ignore_return_values(make_Nth_edge<S + 1>()...)"
  },
  {
    "label": "make_edge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_edge(my_join_node, my_kernel_node)"
  },
  {
    "label": "make_edges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "make_edges()"
  },
  {
    "label": "make_edges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_edges(input_sequence())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class device_selector_base { public : void)",
    "insertText": "operator()( const indexer_node_output_type &v, typename device_selector_node::output_ports_type &op)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (device_selector_base*)",
    "insertText": "clone(streaming_node &n)"
  },
  {
    "label": "device_selector_base()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "device_selector_base()"
  },
  {
    "label": "device_selector()",
    "kind": "Method",
    "detail": "Function (} } ; template<UserFunctor> class device_selector : public device_selector_base,tbb::internal::no_assign { public :)",
    "insertText": "device_selector(UserFunctor uf, streaming_node &n, StreamFactory &f ) : my_dispatch_funcs( create_dispatch_funcs( input_sequence() ) ) , my_user_functor( uf ), my_node(n), my_factory( f)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (my_port_epoches .)",
    "insertText": "fill(0)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((tbb::internal::is_same_type<typename internal::key_from_policy<JP>::is_key_matching, std::false_type>::value) || my_port_epoches[v.tag()] == 0, \"Epoch is changed when key matching is requested\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : typedef)",
    "insertText": "void(device_selector<UserFunctor>::*send_and_put_fn_type)(size_t &, const indexer_node_output_type &, typename device_selector_node::output_ports_type &)"
  },
  {
    "label": "create_dispatch_funcs()",
    "kind": "Method",
    "detail": "Function (typedef std::array<send_and_put_fn_type,NUM_INPUTS> dispatch_funcs_type ; template<int . . . S> dispatch_funcs_type)",
    "insertText": "create_dispatch_funcs(internal::sequence<S...>)"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (dispatch_funcs_type dispatch = { {& device_selector<UserFunctor>::send_and_put_impl<S> . . . } } ; return dispatch ; } template<T> key_type)",
    "insertText": "get_key(std::false_type, const T &, size_t &epoch)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_STATIC_ASSERT((tbb::internal::is_same_type<key_type, size_t>::value), \"\")"
  },
  {
    "label": "key_type()",
    "kind": "Method",
    "detail": "Function (using tbb::flow::key_from_message ; return key_from_message<)",
    "insertText": "key_type(t)"
  },
  {
    "label": "send_and_put_impl()",
    "kind": "Method",
    "detail": "Function (} template<int N> void)",
    "insertText": "send_and_put_impl(size_t &epoch, const indexer_node_output_type &v, typename device_selector_node::output_ports_type &op)"
  },
  {
    "label": "elem_type()",
    "kind": "Method",
    "detail": "Function (typedef tuple_element<N + 1,device_selector_node::output_ports_type>::type::output_type elem_type ; elem_type e = internal::cast_to<)",
    "insertText": "elem_type(v)"
  },
  {
    "label": "get_device()",
    "kind": "Method",
    "detail": "Function (device_type device =)",
    "insertText": "get_device(get_key( typename internal::key_from_policy<JP>::is_key_matching(), e, epoch ), get<0>( op ))"
  },
  {
    "label": "send_data()",
    "kind": "Method",
    "detail": "Function (my_factory .)",
    "insertText": "send_data(device, e)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (get<)",
    "insertText": "N(op ).try_put( e)"
  },
  {
    "label": "get_device()",
    "kind": "Method",
    "detail": "Function (} template<DevicePort> device_type)",
    "insertText": "get_device(key_type key, DevicePort& dp)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::unordered_map<std::decay<key_type>::type,epoch_desc>::iterator it = my_devices .)",
    "insertText": "find(key)"
  },
  {
    "label": "my_user_functor()",
    "kind": "Method",
    "detail": "Function (device_type d =)",
    "insertText": "my_user_functor(my_factory)"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tie(it, std::ignore ) = my_devices.insert( std::make_pair( key, d ))"
  },
  {
    "label": "try_put()",
    "kind": "Method",
    "detail": "Function (bool res = dp .)",
    "insertText": "try_put(device_with_key_type( d, key ))"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(res, NULL)"
  },
  {
    "label": "notify_new_device()",
    "kind": "Method",
    "detail": "Function (my_node .)",
    "insertText": "notify_new_device(d)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} epoch_desc& e = it -> second ; device_type d = e . my_device ;)",
    "insertText": "if(++e.my_request_number == NUM_INPUTS ) my_devices.erase( it)"
  },
  {
    "label": "device_selector_body()",
    "kind": "Method",
    "detail": "Function (} device_type my_device ; size_t my_request_number ; } ; std::unordered_map<std::decay<key_type>::type,epoch_desc> my_devices ; std::array<size_t,NUM_INPUTS> my_port_epoches ; dispatch_funcs_type my_dispatch_funcs ; UserFunctor my_user_functor ; streaming_node& my_node ; StreamFactory& my_factory ; } ; class device_selector_body { public :)",
    "insertText": "device_selector_body(device_selector_base *d ) : my_device_selector( d)"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (} private : device_selector_base* my_device_selector ; } ; class args_storage_base : tbb::internal::no_copy { public : typedef kernel_multifunction_node::output_ports_type output_ports_type ; void)",
    "insertText": "enqueue(kernel_input_tuple &ip, output_ports_type &op, const streaming_node &n)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "send(device_type d)"
  },
  {
    "label": "args_storage_base()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "args_storage_base()"
  },
  {
    "label": "args_storage_base()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "args_storage_base(const kernel_type& kernel, StreamFactory &f ) : my_kernel( kernel ), my_factory( f)"
  },
  {
    "label": "args_storage_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "args_storage_base(const args_storage_base &k ) : my_kernel( k.my_kernel ), my_factory( k.my_factory)"
  },
  {
    "label": "do_try_put()",
    "kind": "Method",
    "detail": "Function (} const kernel_type my_kernel ; StreamFactory& my_factory ; } ; template<. . . Args> class args_storage : public args_storage_base { typedef args_storage_base::output_ports_type output_ports_type ; template<int N> bool)",
    "insertText": "do_try_put(const kernel_input_tuple& ip, output_ports_type &op)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (const auto& t = get<)",
    "insertText": "N(ip)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (auto& port = get<)",
    "insertText": "N(op)"
  },
  {
    "label": "do_try_put()",
    "kind": "Method",
    "detail": "Function (} template<int . . . S> bool)",
    "insertText": "do_try_put(const kernel_input_tuple& ip, output_ports_type &op, internal::sequence<S...>)"
  },
  {
    "label": "run_kernel_func()",
    "kind": "Method",
    "detail": "Function (} class run_kernel_func : tbb::internal::no_assign { public :)",
    "insertText": "run_kernel_func(kernel_input_tuple &ip, const streaming_node &node, const args_storage& storage ) : my_kernel_func( ip, node, storage, get<0>(ip).device())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . FnArgs> void)",
    "insertText": "operator()( FnArgs&... args)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (internal::convert_and_call_impl<FnArgs . . .)",
    "insertText": "doit(my_kernel_func, my_kernel_func.my_ip, args...)"
  },
  {
    "label": "kernel_func()",
    "kind": "Method",
    "detail": "Function (} private : struct kernel_func : tbb::internal::no_copy { kernel_input_tuple& my_ip ; const streaming_node& my_node ; const args_storage& my_storage ; device_type my_device ;)",
    "insertText": "kernel_func(kernel_input_tuple &ip, const streaming_node &node, const args_storage& storage, device_type device ) : my_ip( ip ), my_node( node ), my_storage( storage ), my_device( device)"
  },
  {
    "label": "enqueue_kernel()",
    "kind": "Method",
    "detail": "Function (my_node .)",
    "insertText": "enqueue_kernel(my_ip, my_storage.my_factory, my_device, my_storage.my_kernel, args...)"
  },
  {
    "label": "run_finalize_func()",
    "kind": "Method",
    "detail": "Function (} } my_kernel_func ; } ; template<FinalizeFn> class run_finalize_func : tbb::internal::no_assign { public :)",
    "insertText": "run_finalize_func(kernel_input_tuple &ip, StreamFactory &factory, FinalizeFn fn ) : my_ip( ip ), my_finalize_func( factory, get<0>(ip).device(), fn)"
  },
  {
    "label": "doit()",
    "kind": "Method",
    "detail": "Function (internal::convert_and_call_impl<FnArgs . . .)",
    "insertText": "doit(my_finalize_func, my_ip, args...)"
  },
  {
    "label": "finalize_func()",
    "kind": "Method",
    "detail": "Function (} private : kernel_input_tuple& my_ip ; struct finalize_func : tbb::internal::no_assign { StreamFactory& my_factory ; device_type my_device ; FinalizeFn my_fn ;)",
    "insertText": "finalize_func(StreamFactory &factory, device_type device, FinalizeFn fn ) : my_factory(factory), my_device(device), my_fn(fn)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (my_factory .)",
    "insertText": "finalize(my_device, my_fn, args...)"
  },
  {
    "label": "make_run_finalize_func()",
    "kind": "Method",
    "detail": "Function (} } my_finalize_func ; } ; template<FinalizeFn> run_finalize_func<FinalizeFn>)",
    "insertText": "make_run_finalize_func(kernel_input_tuple &ip, StreamFactory &factory, FinalizeFn fn)"
  },
  {
    "label": "send_func()",
    "kind": "Method",
    "detail": "Function (} class send_func : tbb::internal::no_assign { public :)",
    "insertText": "send_func(StreamFactory &factory, device_type d ) : my_factory(factory), my_device( d)"
  },
  {
    "label": "send_data()",
    "kind": "Method",
    "detail": "Function (my_factory .)",
    "insertText": "send_data(my_device, args...)"
  },
  {
    "label": "args_storage()",
    "kind": "Method",
    "detail": "Function (} private : StreamFactory& my_factory ; device_type my_device ; } ; public :)",
    "insertText": "args_storage(const kernel_type& kernel, StreamFactory &f, Args&&... args ) : args_storage_base( kernel, f ) , my_args_pack( std::forward<Args>(args)...)"
  },
  {
    "label": "args_storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "args_storage(const args_storage &k ) : args_storage_base( k ), my_args_pack( k.my_args_pack)"
  },
  {
    "label": "args_storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "args_storage(const args_storage_base &k, Args&&... args ) : args_storage_base( k ), my_args_pack( std::forward<Args>(args)...)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (const args_pack_type& const_args_pack = my_args_pack ; tbb::)",
    "insertText": "call(run_kernel_func( ip, n, *this ), const_args_pack)"
  },
  {
    "label": "increment_wait_count()",
    "kind": "Method",
    "detail": "Function (graph& g = n . my_graph ; g .)",
    "insertText": "increment_wait_count()"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "call(make_run_finalize_func(ip, this->my_factory, [&g] { g.decrement_wait_count(); }), const_args_pack)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "call(send_func( this->my_factory, d ), my_args_pack)"
  },
  {
    "label": "kernel_body()",
    "kind": "Method",
    "detail": "Function (} private : typedef tbb::internal::stored_pack<Args . . .> args_pack_type ; args_pack_type my_args_pack ; } ; class kernel_body : tbb::internal::no_assign { public :)",
    "insertText": "kernel_body(const streaming_node &node ) : my_node( node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( kernel_input_tuple ip, typename args_storage_base::output_ports_type &op)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((my_node.my_args_storage != NULL), \"No arguments storage\")"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (my_node . my_args_storage ->)",
    "insertText": "enqueue(ip, op, my_node)"
  },
  {
    "label": "make_args_storage()",
    "kind": "Method",
    "detail": "Function (} private : const streaming_node& my_node ; } ; template<T,U = internal::is_port_ref<T>::type> struct wrap_to_async { typedef T type ; } ; template<T> struct wrap_to_async<T,std::false_type> { typedef StreamFactory::template async_msg_type<tbb::internal::strip<T>::type> type ; } ; template<. . . Args> args_storage_base*)",
    "insertText": "make_args_storage(const args_storage_base& storage, Args&&... args)"
  },
  {
    "label": "notify_new_device()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "notify_new_device(device_type d)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (my_args_storage ->)",
    "insertText": "send(d)"
  },
  {
    "label": "enqueue_kernel()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "enqueue_kernel(kernel_input_tuple& ip, StreamFactory& factory, device_type device, const kernel_type& kernel, Args&... args)"
  },
  {
    "label": "enqueue_kernel_impl()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "enqueue_kernel_impl(ip, factory, device, kernel, args...)"
  },
  {
    "label": "streaming_node()",
    "kind": "Method",
    "detail": "Function (} public : template<DeviceSelector>)",
    "insertText": "streaming_node(graph &g, const kernel_type& kernel, DeviceSelector d, StreamFactory &f ) : base_type( g ) , my_indexer_node( g ) , my_device_selector( new device_selector<DeviceSelector>( d, *this, f ) ) , my_device_selector_node( g, serial, device_selector_body( my_device_selector ) ) , my_join_node( g ) , my_kernel_node( g, serial, kernel_body( *this ) ) , my_args_storage( make_args_storage( args_storage<>(kernel, f), port_ref<0, NUM_INPUTS - 1>() ))"
  },
  {
    "label": "set_external_ports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_external_ports(get_input_ports(), get_output_ports())"
  },
  {
    "label": "streaming_node()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "streaming_node(const streaming_node &node ) : base_type( node.my_graph ) , my_indexer_node( node.my_indexer_node ) , my_device_selector( node.my_device_selector->clone( *this ) ) , my_device_selector_node( node.my_graph, serial, device_selector_body( my_device_selector ) ) , my_join_node( node.my_join_node ) , my_kernel_node( node.my_graph, serial, kernel_body( *this ) ) , my_args_storage( node.my_args_storage->clone())"
  },
  {
    "label": "streaming_node()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "streaming_node(streaming_node &&node ) : base_type( node.my_graph ) , my_indexer_node( std::move( node.my_indexer_node ) ) , my_device_selector( node.my_device_selector->clone(*this) ) , my_device_selector_node( node.my_graph, serial, device_selector_body( my_device_selector ) ) , my_join_node( std::move( node.my_join_node ) ) , my_kernel_node( node.my_graph, serial, kernel_body( *this ) ) , my_args_storage( node.my_args_storage)"
  },
  {
    "label": "streaming_node()",
    "kind": "Method",
    "detail": "Function (node . my_args_storage = NULL ; } ~)",
    "insertText": "streaming_node()"
  },
  {
    "label": "set_args()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "set_args(Args&&... args)"
  },
  {
    "label": "make_args_storage()",
    "kind": "Method",
    "detail": "Function (args_storage_base* const new_args_storage =)",
    "insertText": "make_args_storage(*my_args_storage, typename wrap_to_async<Args>::type(std::forward<Args>(args))...)"
  },
  {
    "label": "reset_node()",
    "kind": "Method",
    "detail": "Function (delete my_args_storage ; my_args_storage = new_args_storage ; } protected : void)",
    "insertText": "reset_node(reset_flags = rf_reset_protocol)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(false, \"Not implemented yet\")"
  }
]