[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_PLATFORM_SHARED_MEMORY_HANDLE_H_ # define BASE_MEMORY_PLATFORM_SHARED_MEMORY_HANDLE_H_ # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE) #include <mach/mach.h> #include \"base/mac/scoped_mach_port.h\" #elif BUILDFLAG(IS_FUCHSIA) #include <lib/zx/vmo.h> #elif BUILDFLAG(IS_WIN) #include \"base/win/scoped_handle.h\" #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_APPLE) && !BUILDFLAG(IS_ANDROID)"
  },
  {
    "label": "ScopedFDPair()",
    "kind": "Method",
    "detail": "Function (int fd ; int readonly_fd ; } ; struct BASE_EXPORT ScopedFDPair {)",
    "insertText": "ScopedFDPair()"
  },
  {
    "label": "ScopedFDPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFDPair(ScopedFD in_fd, ScopedFD in_readonly_fd)"
  },
  {
    "label": "ScopedFDPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFDPair(ScopedFDPair&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedFDPair&)",
    "insertText": "operator(ScopedFDPair&&)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (FDPair)",
    "insertText": "get()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (ScopedFD fd ; ScopedFD readonly_fd ; } ; # endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (using ScopedPlatformSharedMemoryHandle = mac::ScopedMachSendRight ; # elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (using ScopedPlatformSharedMemoryHandle = zx::vmo ; # elif)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (using ScopedPlatformSharedMemoryHandle = win::ScopedHandle ; # elif)",
    "insertText": "BUILDFLAG(IS_ANDROID)"
  }
]