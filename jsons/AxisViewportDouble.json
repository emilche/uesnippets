[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FAxisViewportDouble()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class SScrollBar ; class FAxisViewportDouble { private : float SLATE_UNITS_TOLERANCE = 0 . 1 f ; public :)",
    "insertText": "FAxisViewportDouble()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ToDebugString()",
    "kind": "Method",
    "detail": "Function (Size = 0 . 0 f ; MinValue = 0 . 0 ; MaxValue = 0 . 0 ; MinPosition = 0 . 0 f ; MaxPosition = 0 . 0 f ; Position = 0 . 0 f ; MinScale = 0 . 0 1 ; MaxScale = 1 0 0 . 0 ; Scale = 1 . 0 ; } FString)",
    "insertText": "ToDebugString(const TCHAR* Sufix)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSize()"
  },
  {
    "label": "UpdateMinMax()",
    "kind": "Method",
    "detail": "Function (MinValue = InMinValue ; MaxValue = InMaxValue ;)",
    "insertText": "UpdateMinMax()"
  },
  {
    "label": "GetValueAtPos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetValueAtPos(const float Pos)"
  },
  {
    "label": "GetValueAtOffset()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetValueAtOffset(const float Offset)"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPosForValue(const double Value)"
  },
  {
    "label": "GetOffsetForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetOffsetForValue(const double Value)"
  },
  {
    "label": "GetRoundedOffsetForValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRoundedOffsetForValue(const double Value)"
  },
  {
    "label": "ScrollAtPos()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ScrollAtPos(const float Pos)"
  },
  {
    "label": "OnPositionChanged()",
    "kind": "Method",
    "detail": "Function (Position = Pos ;)",
    "insertText": "OnPositionChanged()"
  },
  {
    "label": "CenterOnValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CenterOnValue(const double Value)"
  },
  {
    "label": "CenterOnValueInterval()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CenterOnValueInterval(const double IntervalStartValue, const double IntervalEndValue)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float IntervalSize = static_cast<)",
    "insertText": "float(Scale * (IntervalEndValue- IntervalStartValue))"
  },
  {
    "label": "ScrollAtPos()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ScrollAtPos(static_cast<float>(IntervalStartValue * Scale) - (Size - IntervalSize) / 2.0f)"
  },
  {
    "label": "SetScaleLimits()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetScaleLimits(const double InMinScale, const double InMaxScale)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (MinScale = InMinScale ; MaxScale = InMaxScale ; } bool)",
    "insertText": "SetScale(const double NewScale)"
  },
  {
    "label": "ZoomWithFixedOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomWithFixedOffset(const double NewScale, const float Offset)"
  },
  {
    "label": "RelativeZoomWithFixedOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RelativeZoomWithFixedOffset(const float Delta, const float Offset)"
  },
  {
    "label": "GetScrollLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScrollLimits(float& OutMinPos, float& OutMaxPos)"
  },
  {
    "label": "EnforceScrollLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnforceScrollLimits(const float InMinPos, const float InMaxPos, const float InterpolationFactor)"
  },
  {
    "label": "UpdatePosWithinLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePosWithinLimits()"
  },
  {
    "label": "OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserScrolled(TSharedPtr<SScrollBar> ScrollBar, float ScrollOffset)"
  },
  {
    "label": "UpdateScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollBar(TSharedPtr<SScrollBar> ScrollBar)"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSizeChanged()"
  },
  {
    "label": "OnScaleChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnScaleChanged()"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (MinPosition =)",
    "insertText": "GetPosForValue(MinValue)"
  },
  {
    "label": "GetPosForValue()",
    "kind": "Method",
    "detail": "Function (MaxPosition =)",
    "insertText": "GetPosForValue(MaxValue)"
  }
]