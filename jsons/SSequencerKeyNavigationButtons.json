[
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "SSequencerKeyNavigationButtons",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerKeyNavigationButtons"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / Views / SKeyNavigationButtons . h \" # include \" IKeyArea . h \" # include \" ISequencer . h \" # include \" MovieSceneCommonHelpers . h \" # include \" MovieSceneSection . h \" # include \" SequencerAddKeyOperation . h \" # include \" SequencerCommands . h \" # include \" SequencerCommonHelpers . h \" # include \" ScopedTransaction . h \" # include \" MVVM / Extensions / ITimeDomainExtension . h \" # define LOCTEXT_NAMESPACE \" SSequencerKeyNavigationButtons \" namespace UE { namespace Sequencer { class IOutlinerExtension ; class SSequencerKeyNavigationButtons : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSequencerKeyNavigationButtons) : _Buttons(EKeyNavigationButtons::All)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EKeyNavigationButtons, Buttons) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedPtr<FViewModel>& InModel, TSharedPtr<ISequencer> InSequencer)"
  },
  {
    "label": "ITimeDomainExtension()",
    "kind": "Method",
    "detail": "Function (WeakModel = InModel ; WeakSequencer = InSequencer ; ITimeDomainExtension* TimeDomain = InModel -> CastThis<)",
    "insertText": "ITimeDomainExtension()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SKeyNavigationButtons, InModel) .Buttons(InArgs._Buttons) .AddKeyToolTip(FText::Format(LOCTEXT(\"AddKeyButton\", \"Add a new key at the current time ({0})\"), FSequencerCommands::Get().SetKey->GetInputText())) .PreviousKeyToolTip(FText::Format(LOCTEXT(\"PreviousKeyButton\", \"Set the time to the previous key ({0})\"), FSequencerCommands::Get().StepToPreviousKey->GetInputText())) .NextKeyToolTip(FText::Format(LOCTEXT(\"NextKeyButton\", \"Set the time to the next key ({0})\"), FSequencerCommands::Get().StepToNextKey->GetInputText())) .GetNavigatableTimes(this, &SSequencerKeyNavigationButtons::GetNavigatableTimes) .Time(this, &SSequencerKeyNavigationButtons::GetTime) .OnSetTime(this, &SSequencerKeyNavigationButtons::SetTime) .OnAddKey(this, &SSequencerKeyNavigationButtons::HandleAddKey) .IsEnabled_Lambda([this] () { return WeakSequencer.IsValid() ? !WeakSequencer.Pin()->IsReadOnly() : false; })"
  },
  {
    "label": "GetNavigatableTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNavigatableTimes(TArray<FFrameNumber>& NavigatableTimes)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel> DataModel = WeakModel .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (Keyarea ->)",
    "insertText": "GetKeyTimes(NavigatableTimes)"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (} TSet<TWeakObjectPtr<UMovieSceneSection>> Sections ;)",
    "insertText": "GetAllSections(DataModel, Sections)"
  },
  {
    "label": "GetSnapTimes()",
    "kind": "Method",
    "detail": "Function (Section ->)",
    "insertText": "GetSnapTimes(NavigatableTimes, true)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (} } } FFrameTime)",
    "insertText": "GetTime()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTime(FFrameTime InTime)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (InTime = WeakSequencer .)",
    "insertText": "Pin()->GetLocalTimeWarpTransform().TransformTime(InTime)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (} WeakSequencer .)",
    "insertText": "Pin()->SetLocalTime(InTime)"
  },
  {
    "label": "HandleAddKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleAddKey(FFrameTime Time, TSharedPtr<FViewModel> InModel)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (FScopedTransaction)",
    "insertText": "Transaction(LOCTEXT(\"AddKeys\", \"Add Keys at Current Time\"))"
  },
  {
    "label": "FromNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromNode(InModel).Commit(Time.RoundToFrame(), *Sequencer)"
  }
]