[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_BinaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOperation"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_ADJACENT_DIFFERENCE_H # define _LIBCPP___NUMERIC_ADJACENT_DIFFERENCE_H # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIterator, class _OutputIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  },
  {
    "label": "__acc()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_InputIterator>::value_type)",
    "insertText": "__acc(*__first)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (* __result = __acc ;)",
    "insertText": "for(++__first, (void) ++__result; __first != __last; ++__first, (void) ++__result)"
  },
  {
    "label": "__val()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_InputIterator>::value_type)",
    "insertText": "__val(*__first)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7* __result = __val -)",
    "insertText": "move(__acc)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (# else* __result = __val - __acc ; # endif __acc =)",
    "insertText": "move(__val)"
  },
  {
    "label": "adjacent_difference()",
    "kind": "Method",
    "detail": "Function (} } return __result ; } template<class _InputIterator,class _OutputIterator,class _BinaryOperation> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)"
  },
  {
    "label": "__binary_op()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7* __result =)",
    "insertText": "__binary_op(__val, _VSTD::move(__acc))"
  },
  {
    "label": "__binary_op()",
    "kind": "Method",
    "detail": "Function (# else* __result =)",
    "insertText": "__binary_op(__val, __acc)"
  }
]