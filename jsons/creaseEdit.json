[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrCreaseEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrCreaseEdit"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRCREASEEDIT_H # define OPENSUBDIV3_HBRCREASEEDIT_H # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrCreaseEdit ; template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& out, const HbrCreaseEdit<T>& path)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (out<<\" edge)",
    "insertText": "path(\" << path.faceid << ' '; for (int i = 0; i < path.nsubfaces; ++i) { out << static_cast<int>(path.subfaces[i]) << ' '; } return out << static_cast<int>(path.edgeid) << \")"
  },
  {
    "label": "HbrCreaseEdit()",
    "kind": "Method",
    "detail": "Function (} template<class T> class HbrCreaseEdit : public HbrHierarchicalEdit<T> { public :)",
    "insertText": "HbrCreaseEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces, unsigned char _edgeid, typename HbrHierarchicalEdit<T>::Operation _op, float _sharpness) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), edgeid(_edgeid), op(_op), sharpness(_sharpness)"
  },
  {
    "label": "HbrCreaseEdit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HbrCreaseEdit(int _faceid, int _nsubfaces, int *_subfaces, int _edgeid, typename HbrHierarchicalEdit<T>::Operation _op, float _sharpness) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), edgeid(static_cast<unsigned char>(_edgeid)), op(_op), sharpness(_sharpness)"
  },
  {
    "label": "HbrCreaseEdit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HbrCreaseEdit()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} std::ostream& operator<<<)",
    "insertText": "T(std::ostream& out, const HbrCreaseEdit<T>& path)"
  },
  {
    "label": "ApplyEditToFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEditToFace(HbrFace<T>* face)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float sharp = 0 . 0 f ;)",
    "insertText": "if(op == HbrHierarchicalEdit<T>::Set)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sharp = sharpness ; } else)",
    "insertText": "if(op == HbrHierarchicalEdit<T>::Add)"
  },
  {
    "label": "GetEdge()",
    "kind": "Method",
    "detail": "Function (sharp = face ->)",
    "insertText": "GetEdge(edgeid)->GetSharpness()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(op == HbrHierarchicalEdit<T>::Subtract)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(sharp < HbrHalfedge<T>::k_Smooth)"
  },
  {
    "label": "GetEdge()",
    "kind": "Method",
    "detail": "Function (face ->)",
    "insertText": "GetEdge(edgeid)->GuaranteeNeighbor()"
  },
  {
    "label": "GetEdge()",
    "kind": "Method",
    "detail": "Function (face ->)",
    "insertText": "GetEdge(edgeid)->SetSharpness(sharp)"
  }
]