[
  {
    "label": "CalculateInertiaConditioning()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Math / UnrealMathUtility . h \" namespace Chaos { FVec3f)",
    "insertText": "CalculateInertiaConditioning(const FRealSingle InvM, const FVec3f& InvI, const FVec3f& ConstraintExtents, const FRealSingle MaxDistance, const FRealSingle MaxRotationRatio, const FRealSingle MaxInvInertiaComponentRatio)"
  },
  {
    "label": "CalculateParticleConstraintExtents()",
    "kind": "Method",
    "detail": "Function (FVec3f)",
    "insertText": "CalculateParticleConstraintExtents(const FPBDRigidParticleHandle* Rigid)"
  },
  {
    "label": "CalculateParticleInertiaConditioning()",
    "kind": "Method",
    "detail": "Function (FVec3f)",
    "insertText": "CalculateParticleInertiaConditioning(const FPBDRigidParticleHandle* Rigid, const FRealSingle MaxDistance, const FRealSingle MaxRotationRatio, const FRealSingle MaxInvInertiaComponentRatio)"
  }
]