[
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "DxilResourceBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilResourceBinding"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "DxilResourceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilResourceBase"
  },
  {
    "label": "DxilInst_CreateHandleFromBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilInst_CreateHandleFromBinding"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" namespace llvm { class Constant ; class Type ; } namespace hlsl { struct DxilResourceBinding { uint32_t rangeLowerBound ; uint32_t rangeUpperBound ; uint32_t spaceID ; uint8_t resourceClass ; uint8_t Reserved1 ; uint8_t Reserved2 ; uint8_t Reserved3 ; bool)",
    "insertText": "operator(const DxilResourceBinding &)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(DxilResourceBinding) == 4 * sizeof(uint32_t), \"update shader model and functions read/write \" \"DxilResourceBinding when size is changed\")"
  },
  {
    "label": "getAsConstant()",
    "kind": "Method",
    "detail": "Function (class ShaderModel ; class DxilResourceBase ; struct DxilInst_CreateHandleFromBinding ; namespace resource_helper { llvm::Constant*)",
    "insertText": "getAsConstant(const DxilResourceBinding &, llvm::Type *Ty, const ShaderModel &)"
  },
  {
    "label": "loadBindingFromConstant()",
    "kind": "Method",
    "detail": "Function (DxilResourceBinding)",
    "insertText": "loadBindingFromConstant(const llvm::Constant &C)"
  },
  {
    "label": "loadBindingFromCreateHandleFromBinding()",
    "kind": "Method",
    "detail": "Function (DxilResourceBinding)",
    "insertText": "loadBindingFromCreateHandleFromBinding(const DxilInst_CreateHandleFromBinding &createHandle, llvm::Type *Ty, const ShaderModel &)"
  },
  {
    "label": "loadBindingFromResourceBase()",
    "kind": "Method",
    "detail": "Function (DxilResourceBinding)",
    "insertText": "loadBindingFromResourceBase(DxilResourceBase *)"
  }
]