[
  {
    "label": "FImageOccupancyMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageOccupancyMap"
  },
  {
    "label": "FGridSampler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Tuple . h \" # include \" VectorTypes . h \" # include \" Image / ImageDimensions . h \" # include \" Image / ImageTile . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Sampling / GridSampler . h \" # include \" MathUtil . h \" namespace UE { namespace Geometry { class FImageOccupancyMap { public : FImageDimensions Dimensions ; FImageTile Tile ; int32 GutterSize = 4 ; int8 EmptyTexel = 0 ; int8 InteriorTexel = 1 ; int8 BorderTexel = 2 ; int8 GutterTexel = 3 ; TArray64<int8> TexelType ; TArray64<int32> TexelInteriorSamples ; TArray64<FVector2f> TexelQueryUV ; TArray64<int32> TexelQueryTriangle ; TArray64<int32> TexelQueryUVChart ; TArray64<TTuple<int64,int64>> BorderTexels ; TArray64<TTuple<int64,int64>> GutterTexels ; using FGridSampler = TGridSampler<double> ; FGridSampler PixelSampler =)",
    "insertText": "FGridSampler(1)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool bParallel = true ; void)",
    "insertText": "Initialize(FImageDimensions DimensionsIn, int32 SamplesPerPixel = 1)"
  },
  {
    "label": "FImageTile()",
    "kind": "Method",
    "detail": "Function (Dimensions = DimensionsIn ; Tile =)",
    "insertText": "FImageTile(FVector2i(0,0), FVector2i(Dimensions.GetWidth(), Dimensions.GetHeight()))"
  },
  {
    "label": "InitializePixelSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePixelSampler(SamplesPerPixel)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(FImageDimensions DimensionsIn, const FImageTile& TileIn, int32 SamplesPerPixel = 1)"
  },
  {
    "label": "IsInterior()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInterior(int64 LinearIndex)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FImageOccupancyMap::ClassifySamples_NoSpatial)"
  },
  {
    "label": "UVSpaceMeshSpatial()",
    "kind": "Method",
    "detail": "Function (TMeshAABBTree3<MeshType>)",
    "insertText": "UVSpaceMeshSpatial(&UVSpaceMesh, true)"
  },
  {
    "label": "ClassifySamplesFromUVSpaceMesh()",
    "kind": "Method",
    "detail": "Function (} template<MeshType,GetTriangleIDFuncType> bool)",
    "insertText": "ClassifySamplesFromUVSpaceMesh(const MeshType& UVSpaceMesh, const TMeshAABBTree3<MeshType>& UVSpaceMeshSpatial, GetTriangleIDFuncType GetTriangleIDFunc = [](int32 TriangleID) { return TriangleID; }, const TArray<int32>* UVSpaceMeshTriCharts = nullptr)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FImageOccupancyMap::ClassifySamples)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int64 LinearImageSize = Tile .)",
    "insertText": "Num()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TexelInteriorSamples .)",
    "insertText": "Init(0, LinearImageSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TexelQueryUVChart .)",
    "insertText": "Init(IndexConstants::InvalidID, LinearImageSize)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int64 LinearSampleSize = Tile .)",
    "insertText": "Num() * PixelSampler.Num()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TexelType .)",
    "insertText": "Init(EmptyTexel, LinearSampleSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TexelQueryUV .)",
    "insertText": "Init(FVector2f::Zero(), LinearSampleSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TexelQueryTriangle .)",
    "insertText": "Init(IndexConstants::InvalidID, LinearSampleSize)"
  },
  {
    "label": "GetTexelSize()",
    "kind": "Method",
    "detail": "Function (const FVector2d TexelSize = Dimensions .)",
    "insertText": "GetTexelSize()"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (const double TexelDiag = TexelSize .)",
    "insertText": "Length()"
  },
  {
    "label": "MaxDistance()",
    "kind": "Method",
    "detail": "Function (IMeshSpatial::FQueryOptions QueryOptions ; QueryOptions .)",
    "insertText": "MaxDistance(double)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Tile.GetHeight(), [this, &UVSpaceMesh, &GetTriangleIDFunc, &UVSpaceMeshSpatial, TexelDiag, &QueryOptions, &TexelSize, UVSpaceMeshTriCharts, NumUVSpaceMeshTriCharts] (int32 ImgY) { for (int32 ImgX = 0; ImgX < Tile.GetWidth(); ++ImgX) { const FVector2i SourceCoords = Tile.GetSourceCoords(ImgX, ImgY); const int64 SourceTexelLinearIdx = Dimensions.GetIndex(SourceCoords.X, SourceCoords.Y); const int64 TexelLinearIdx = Tile.GetIndex(ImgX, ImgY); const FVector2d SourceTexelCenterUV = Dimensions.GetTexelUV(SourceTexelLinearIdx); for (int32 Sample = 0; Sample < PixelSampler.Num(); ++Sample) { const int64 SampleLinearIdx = TexelLinearIdx * PixelSampler.Num() + Sample; const FVector2d SampleUV = PixelSampler.Sample(Sample); const FVector2d UVPoint = SourceTexelCenterUV - 0.5 * TexelSize + SampleUV * TexelSize; const FVector3d UVPoint3d(UVPoint.X, UVPoint.Y, 0); double NearDistSqr; const int32 NearestTriID = UVSpaceMeshSpatial.FindNearestTriangle(UVPoint3d, NearDistSqr, QueryOptions); if (NearestTriID >= 0) { FVector3d A, B, C; UVSpaceMesh.GetTriVertices(NearestTriID, A, B, C); const FTriangle2d UVTriangle(GetXY(A), GetXY(B), GetXY(C)); const int32 TriId = GetTriangleIDFunc(NearestTriID); if (UVTriangle.IsInsideOrOn(UVPoint)) { TexelType[SampleLinearIdx] = InteriorTexel; TexelQueryUV[SampleLinearIdx] = (FVector2f)UVPoint; TexelQueryTriangle[SampleLinearIdx] = TriId; ++TexelInteriorSamples[TexelLinearIdx]; } else if (NearDistSqr < TexelDiag * TexelDiag) { const FDistPoint3Triangle3d DistQuery = TMeshQueries<MeshType>::TriangleDistance(UVSpaceMesh, NearestTriID, UVPoint3d); FVector2d NearestUV = GetXY(DistQuery.ClosestTrianglePoint); NearestUV += (10.0 * FMathf::ZeroTolerance) * Normalized(NearestUV - UVPoint); TexelType[SampleLinearIdx] = InteriorTexel; TexelQueryUV[SampleLinearIdx] = (FVector2f)NearestUV; TexelQueryTriangle[SampleLinearIdx] = TriId; ++TexelInteriorSamples[TexelLinearIdx]; } else { TexelType[SampleLinearIdx] = GutterTexel; const FDistPoint3Triangle3d DistQuery = TMeshQueries<MeshType>::TriangleDistance(UVSpaceMesh, NearestTriID, UVPoint3d); const FVector2d NearestUV = GetXY(DistQuery.ClosestTrianglePoint); TexelQueryUV[SampleLinearIdx] = (FVector2f)NearestUV; TexelQueryTriangle[SampleLinearIdx] = TriId; } if (TriId < NumUVSpaceMeshTriCharts && TexelQueryUVChart[TexelLinearIdx] == IndexConstants::InvalidID) { TexelQueryUVChart[TexelLinearIdx] = (*UVSpaceMeshTriCharts)[TriId]; } } } } }, !bParallel ? EParallelForFlags::ForceSingleThread : EParallelForFlags::None)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TAtomic<int64> TotalGutterCounter = 0 ; TArray<TArray64<TTuple<int64,int64>>> GutterTexelsPerScanline ; GutterTexelsPerScanline .)",
    "insertText": "SetNum(Tile.GetHeight())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Tile.GetHeight(), [this, &TotalGutterCounter, &GutterTexelsPerScanline] (int32 ImgY) { for (int32 ImgX = 0; ImgX < Tile.GetWidth(); ++ImgX) { const FVector2i SourceCoords = Tile.GetSourceCoords(ImgX, ImgY); const int64 SourceTexelLinearIdx = Dimensions.GetIndex(SourceCoords.X, SourceCoords.Y); const int64 TexelLinearIdx = Tile.GetIndex(ImgX, ImgY); const TTuple<int64, int64> InvalidGutterNearestTexel(-1, -1); TTuple<int64, int64> GutterNearestTexel = InvalidGutterNearestTexel; for (int32 Sample = 0; Sample < PixelSampler.Num(); ++Sample) { const int64 SampleLinearIdx = TexelLinearIdx * PixelSampler.Num() + Sample; if (TexelType[SampleLinearIdx] == InteriorTexel) { GutterNearestTexel = InvalidGutterNearestTexel; break; } if (TexelType[SampleLinearIdx] == GutterTexel) { const FVector2d NearestUV = (FVector2d)TexelQueryUV[SampleLinearIdx]; const FVector2i NearestCoords = Dimensions.UVToCoords(NearestUV); const int64 NearestLinearIdx = Dimensions.GetIndex(NearestCoords); GutterNearestTexel = TTuple<int64, int64>(SourceTexelLinearIdx, NearestLinearIdx); } } if (GutterNearestTexel != InvalidGutterNearestTexel) { GutterTexelsPerScanline[ImgY].Add(GutterNearestTexel); } } TotalGutterCounter += GutterTexelsPerScanline[ImgY].Num(); }, !bParallel ? EParallelForFlags::ForceSingleThread : EParallelForFlags::None)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (GutterTexels .)",
    "insertText": "Reserve(TotalGutterCounter)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (GutterTexels .)",
    "insertText": "Append(LineGutterTexels)"
  },
  {
    "label": "ComputeFromUVSpaceMesh()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<MeshType,GetTriangleIDFuncType> bool)",
    "insertText": "ComputeFromUVSpaceMesh(const MeshType& UVSpaceMesh, GetTriangleIDFuncType GetTriangleIDFunc = [](int32 TriangleID) { return TriangleID; }, const TArray<int32>* UVSpaceMeshTriCharts = nullptr)"
  },
  {
    "label": "ClassifySamplesFromUVSpaceMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClassifySamplesFromUVSpaceMesh(UVSpaceMesh, GetTriangleIDFunc, UVSpaceMeshTriCharts)"
  },
  {
    "label": "ComputeGutterTexelsFromGutterSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGutterTexelsFromGutterSamples()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 N32 =)",
    "insertText": "int32(N)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (PassBuffer .)",
    "insertText": "SetNum(N32)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Dimensions.GetHeight(), [this, &BeginTexel, & AccumulateTexel, &CompleteTexel, &WeightFunction, FilterWidth, &PassBuffer] (int32 ImgY) { for (int32 ImgX = 0; ImgX < Dimensions.GetWidth(); ++ImgX) { int32 LinearIdx = (int32)Dimensions.GetIndex(ImgX, ImgY); if (TexelType[LinearIdx] != EmptyTexel) { TexelValueType AccumValue = BeginTexel(LinearIdx); float WeightSum = 0; FVector2i Coords(ImgX, ImgY); FVector2i MaxNbr = Coords + FVector2i(FilterWidth, FilterWidth); Dimensions.Clamp(MaxNbr); FVector2i MinNbr = Coords - FVector2i(FilterWidth, FilterWidth); Dimensions.Clamp(MinNbr); for (int32 Y = MinNbr.Y; Y <= MaxNbr.Y; ++Y) { for (int32 X = MinNbr.X; X <= MaxNbr.X; ++X) { FVector2i NbrCoords(X, Y); if (Dimensions.IsValidCoords(NbrCoords)) { FVector2i Offset = NbrCoords - Coords; int64 LinearNbrIndex = Dimensions.GetIndex(NbrCoords); if (TexelType[LinearNbrIndex] != EmptyTexel) { float NbrWeight = WeightFunction(Offset); AccumulateTexel(LinearNbrIndex, NbrWeight, AccumValue); WeightSum += NbrWeight; } } } } CompleteTexel(LinearIdx, WeightSum, AccumValue); PassBuffer[LinearIdx] = AccumValue; } } })"
  },
  {
    "label": "WriteTexel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTexel(k, PassBuffer[k])"
  },
  {
    "label": "InitializePixelSampler()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "InitializePixelSampler(const int32 SamplesPerPixelIn)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float GridDimensionFloat = SamplesPerPixelIn> 0 ? static_cast<)",
    "insertText": "float(SamplesPerPixelIn)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (const int32 GridDimension =)",
    "insertText": "FloorToInt32(FMathf::Clamp(FMathf::Sqrt(GridDimensionFloat), 1.0f, GridDimensionFloat))"
  },
  {
    "label": "FGridSampler()",
    "kind": "Method",
    "detail": "Function (PixelSampler =)",
    "insertText": "FGridSampler(GridDimension)"
  }
]