[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEdgeCollapseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeCollapseInfo"
  },
  {
    "label": "FEdgeFlipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeFlipInfo"
  },
  {
    "label": "FEdgeSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeSplitInfo"
  },
  {
    "label": "FMergeEdgesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeEdgesInfo"
  },
  {
    "label": "FPokeTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPokeTriangleInfo"
  },
  {
    "label": "FVertexSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexSplitInfo"
  },
  {
    "label": "FCompactMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactMaps"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexSkinWeightsAttribute"
  },
  {
    "label": "TDynamicBoneAttributeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicBoneAttributeBase"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "FDynamicMeshAttributeSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / Map . h \" # include \" DynamicMesh / DynamicAttribute . h \" # include \" DynamicMesh / DynamicMeshOverlay . h \" # include \" DynamicMesh / DynamicMeshTriangleAttribute . h \" # include \" DynamicMesh / DynamicVertexAttribute . h \" # include \" GeometryTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" InfoTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" Util / DynamicVector . h \" class FArchive ; namespace DynamicMeshInfo { struct FEdgeCollapseInfo ; } namespace DynamicMeshInfo { struct FEdgeFlipInfo ; } namespace DynamicMeshInfo { struct FEdgeSplitInfo ; } namespace DynamicMeshInfo { struct FMergeEdgesInfo ; } namespace DynamicMeshInfo { struct FPokeTriangleInfo ; } namespace DynamicMeshInfo { struct FVertexSplitInfo ; } namespace UE { namespace Geometry { class FCompactMaps ; class FDynamicMesh3 ; typedef TDynamicMeshVectorOverlay<float,2,FVector2f> FDynamicMeshUVOverlay ; typedef TDynamicMeshVectorOverlay<float,3,FVector3f> FDynamicMeshNormalOverlay ; typedef TDynamicMeshVectorOverlay<float,4,FVector4f> FDynamicMeshColorOverlay ; typedef TDynamicMeshScalarTriangleAttribute<int32> FDynamicMeshMaterialAttribute ; typedef TDynamicMeshScalarTriangleAttribute<int32> FDynamicMeshPolygroupAttribute ; typedef TDynamicMeshVertexAttribute<float,1> FDynamicMeshWeightAttribute ; template<ParentType> class TDynamicVertexSkinWeightsAttribute ; using FDynamicMeshVertexSkinWeightsAttribute = TDynamicVertexSkinWeightsAttribute<FDynamicMesh3> ; template<ParentType,AttribValueType> class TDynamicBoneAttributeBase ; using FDynamicMeshBoneNameAttribute = TDynamicBoneAttributeBase<FDynamicMesh3,FName> ; using FDynamicMeshBoneParentIndexAttribute = TDynamicBoneAttributeBase<FDynamicMesh3,int32> ; using FDynamicMeshBoneColorAttribute = TDynamicBoneAttributeBase<FDynamicMesh3,FVector4f> ; using FDynamicMeshBonePoseAttribute = TDynamicBoneAttributeBase<FDynamicMesh3,FTransform> ; class FDynamicMeshAttributeSet : public FDynamicMeshAttributeSetBase { public :)",
    "insertText": "FDynamicMeshAttributeSet(FDynamicMesh3* Mesh)"
  },
  {
    "label": "FDynamicMeshAttributeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMeshAttributeSet(FDynamicMesh3* Mesh, int32 NumUVLayers, int32 NumNormalLayers)"
  },
  {
    "label": "FDynamicMeshAttributeSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMeshAttributeSet()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FDynamicMeshAttributeSet& Copy)"
  },
  {
    "label": "IsCompact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompact()"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactCopy(const FCompactMaps& CompactMaps, const FDynamicMeshAttributeSet& Copy)"
  },
  {
    "label": "CompactInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInPlace(const FCompactMaps& CompactMaps)"
  },
  {
    "label": "SplitAllBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitAllBowties(bool bParallel = true)"
  },
  {
    "label": "EnableMatchingAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingAttributes(const FDynamicMeshAttributeSet& ToMatch, bool bClearExisting = true, bool bDiscardExtraAttributes = false)"
  },
  {
    "label": "GetParentMesh()",
    "kind": "Method",
    "detail": "Function (const FDynamicMesh3*)",
    "insertText": "GetParentMesh()"
  },
  {
    "label": "IsSeamEdge()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsSeamEdge(int EdgeID)"
  },
  {
    "label": "IsSeamEndEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeamEndEdge(int EdgeID)"
  },
  {
    "label": "IsSeamEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeamEdge(int EdgeID, bool& bIsUVSeamOut, bool& bIsNormalSeamOut, bool& bIsColorSeamOut, bool& bIsTangentSeamOut)"
  },
  {
    "label": "IsSeamVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeamVertex(int VertexID, bool bBoundaryIsSeam = true)"
  },
  {
    "label": "IsMaterialBoundaryEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialBoundaryEdge(int EdgeID)"
  },
  {
    "label": "NumUVLayers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumUVLayers()"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumUVLayers(int Num)"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshUVOverlay*)",
    "insertText": "GetUVLayer(int Index)"
  },
  {
    "label": "PrimaryUV()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMeshUVOverlay*)",
    "insertText": "PrimaryUV()"
  },
  {
    "label": "NumNormalLayers()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumNormalLayers()"
  },
  {
    "label": "SetNumNormalLayers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumNormalLayers(int Num)"
  },
  {
    "label": "EnableTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTangents()"
  },
  {
    "label": "DisableTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableTangents()"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshNormalOverlay*)",
    "insertText": "GetNormalLayer(int Index)"
  },
  {
    "label": "PrimaryNormals()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMeshNormalOverlay*)",
    "insertText": "PrimaryNormals()"
  },
  {
    "label": "PrimaryTangents()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshNormalOverlay*)",
    "insertText": "PrimaryTangents()"
  },
  {
    "label": "PrimaryBiTangents()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshNormalOverlay*)",
    "insertText": "PrimaryBiTangents()"
  },
  {
    "label": "HasTangentSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTangentSpace()"
  },
  {
    "label": "HasPrimaryColors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPrimaryColors()"
  },
  {
    "label": "PrimaryColors()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMeshColorOverlay*)",
    "insertText": "PrimaryColors()"
  },
  {
    "label": "EnablePrimaryColors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnablePrimaryColors()"
  },
  {
    "label": "DisablePrimaryColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisablePrimaryColors()"
  },
  {
    "label": "NumPolygroupLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPolygroupLayers()"
  },
  {
    "label": "SetNumPolygroupLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPolygroupLayers(int32 Num)"
  },
  {
    "label": "GetPolygroupLayer()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshPolygroupAttribute*)",
    "insertText": "GetPolygroupLayer(int Index)"
  },
  {
    "label": "NumWeightLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumWeightLayers()"
  },
  {
    "label": "SetNumWeightLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumWeightLayers(int32 Num)"
  },
  {
    "label": "RemoveWeightLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWeightLayer(int32 Index)"
  },
  {
    "label": "GetWeightLayer()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshWeightAttribute*)",
    "insertText": "GetWeightLayer(int Index)"
  },
  {
    "label": "HasMaterialID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMaterialID()"
  },
  {
    "label": "DisableMaterialID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMaterialID()"
  },
  {
    "label": "GetMaterialID()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshMaterialAttribute*)",
    "insertText": "GetMaterialID()"
  },
  {
    "label": "AttachSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachSkinWeightsAttribute(FName InProfileName, FDynamicMeshVertexSkinWeightsAttribute* InAttribute)"
  },
  {
    "label": "RemoveSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSkinWeightsAttribute(FName InProfileName)"
  },
  {
    "label": "HasSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSkinWeightsAttribute(FName InProfileName)"
  },
  {
    "label": "GetSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshVertexSkinWeightsAttribute*)",
    "insertText": "GetSkinWeightsAttribute(FName InProfileName)"
  },
  {
    "label": "GetSkinWeightsAttributes()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } const TMap<FName,TUniquePtr<FDynamicMeshVertexSkinWeightsAttribute>>&)",
    "insertText": "GetSkinWeightsAttributes()"
  },
  {
    "label": "CopyBoneAttributesWithRemapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBoneAttributesWithRemapping(const FDynamicMeshAttributeSet& Copy, const TMap<FName, FName>& BoneHierarchy)"
  },
  {
    "label": "EnableMatchingBoneAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingBoneAttributes(const FDynamicMeshAttributeSet& ToMatch, bool bClearExisting, bool bDiscardExtraAttributes)"
  },
  {
    "label": "IsSameBoneAttributesAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSameBoneAttributesAs(const FDynamicMeshAttributeSet& Other)"
  },
  {
    "label": "CheckBoneValidity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckBoneValidity(EValidityCheckFailMode FailMode)"
  },
  {
    "label": "AppendBonesUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendBonesUnique(const FDynamicMeshAttributeSet& Other)"
  },
  {
    "label": "EnableBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableBones(const int InBonesNum)"
  },
  {
    "label": "DisableBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableBones()"
  },
  {
    "label": "GetNumBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBones()"
  },
  {
    "label": "HasBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBones()"
  },
  {
    "label": "GetBoneNames()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMeshBoneNameAttribute*)",
    "insertText": "GetBoneNames()"
  },
  {
    "label": "GetBoneParentIndices()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshBoneParentIndexAttribute*)",
    "insertText": "GetBoneParentIndices()"
  },
  {
    "label": "GetBonePoses()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshBonePoseAttribute*)",
    "insertText": "GetBonePoses()"
  },
  {
    "label": "GetBoneColors()",
    "kind": "Method",
    "detail": "Function (} FDynamicMeshBoneColorAttribute*)",
    "insertText": "GetBoneColors()"
  },
  {
    "label": "AttachAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachAttribute(FName AttribName, FDynamicMeshAttributeBase* Attribute)"
  },
  {
    "label": "UnregisterExternalAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExternalAttribute(GenericAttributes[AttribName].Get())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} GenericAttributes .)",
    "insertText": "Add(AttribName, TUniquePtr<FDynamicMeshAttributeBase>(Attribute))"
  },
  {
    "label": "RegisterExternalAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalAttribute(Attribute)"
  },
  {
    "label": "RemoveAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAttribute(FName AttribName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (GenericAttributes .)",
    "insertText": "Remove(AttribName)"
  },
  {
    "label": "GetAttachedAttribute()",
    "kind": "Method",
    "detail": "Function (} } FDynamicMeshAttributeBase*)",
    "insertText": "GetAttachedAttribute(FName AttribName)"
  },
  {
    "label": "NumAttachedAttributes()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumAttachedAttributes()"
  },
  {
    "label": "HasAttachedAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttachedAttribute(FName AttribName)"
  },
  {
    "label": "GetAttachedAttributes()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,TUniquePtr<FDynamicMeshAttributeBase>>&)",
    "insertText": "GetAttachedAttributes()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FDynamicMeshAttributeSet& Set)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Set .)",
    "insertText": "Serialize(Ar, nullptr, false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (protected : FDynamicMesh3* ParentMesh ; TIndirectArray<FDynamicMeshUVOverlay> UVLayers ; TIndirectArray<FDynamicMeshNormalOverlay> NormalLayers ; TUniquePtr<FDynamicMeshColorOverlay> ColorLayer ; TUniquePtr<FDynamicMeshMaterialAttribute> MaterialIDAttrib ; TIndirectArray<FDynamicMeshWeightAttribute> WeightLayers ; TIndirectArray<FDynamicMeshPolygroupAttribute> PolygroupLayers ; using SkinWeightAttributesMap = TMap<FName,TUniquePtr<FDynamicMeshVertexSkinWeightsAttribute>> ; SkinWeightAttributesMap SkinWeightAttributes ; TUniquePtr<FDynamicMeshBoneNameAttribute> BoneNameAttrib ; TUniquePtr<FDynamicMeshBoneParentIndexAttribute> BoneParentIndexAttrib ; TUniquePtr<FDynamicMeshBonePoseAttribute> BonePoseAttrib ; TUniquePtr<FDynamicMeshBoneColorAttribute> BoneColorAttrib ; using GenericAttributesMap = TMap<FName,TUniquePtr<FDynamicMeshAttributeBase>> ; GenericAttributesMap GenericAttributes ; protected : class FDynamicMesh3 ; void)",
    "insertText": "Initialize(int MaxVertexID, int MaxTriangleID)"
  },
  {
    "label": "InitializeTriangles()",
    "kind": "Method",
    "detail": "Function (UVLayer .)",
    "insertText": "InitializeTriangles(MaxTriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FDynamicMeshNormalOverlay& NormalLayer : NormalLayers)"
  },
  {
    "label": "OnNewTriangle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnNewTriangle(int TriangleID, bool bInserted)"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewVertex(int VertexID, bool bInserted)"
  },
  {
    "label": "OnRemoveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveTriangle(int TriangleID)"
  },
  {
    "label": "OnRemoveVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveVertex(int VertexID)"
  },
  {
    "label": "OnReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitEdge(const DynamicMeshInfo::FEdgeSplitInfo & splitInfo)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlipEdge(const DynamicMeshInfo::FEdgeFlipInfo & flipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseEdge(const DynamicMeshInfo::FEdgeCollapseInfo & collapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPokeTriangle(const DynamicMeshInfo::FPokeTriangleInfo & pokeInfo)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeEdges(const DynamicMeshInfo::FMergeEdgesInfo & mergeInfo)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeVertices(const DynamicMeshInfo::FMergeVerticesInfo& mergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitVertex(const DynamicMeshInfo::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValidity(bool bAllowNonmanifold, EValidityCheckFailMode FailMode)"
  }
]