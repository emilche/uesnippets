[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEdgeCollapseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeCollapseInfo"
  },
  {
    "label": "FEdgeFlipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeFlipInfo"
  },
  {
    "label": "FEdgeSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeSplitInfo"
  },
  {
    "label": "FMergeEdgesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeEdgesInfo"
  },
  {
    "label": "FPokeTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPokeTriangleInfo"
  },
  {
    "label": "FVertexSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexSplitInfo"
  },
  {
    "label": "FCompactMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactMaps"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexSkinWeightsAttribute"
  },
  {
    "label": "TDynamicBoneAttributeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicBoneAttributeBase"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FDynamicMeshAttributeSet()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FDynamicMeshAttributeSet(FDynamicMesh3* Mesh)"
  },
  {
    "label": "FDynamicMeshAttributeSet()",
    "kind": "Method",
    "detail": "Function (GEOMETRYCORE_API)",
    "insertText": "FDynamicMeshAttributeSet(FDynamicMesh3* Mesh, int32 NumUVLayers, int32 NumNormalLayers)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FDynamicMeshAttributeSet& Copy)"
  },
  {
    "label": "IsCompact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompact()"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactCopy(const FCompactMaps& CompactMaps, const FDynamicMeshAttributeSet& Copy)"
  },
  {
    "label": "CompactInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInPlace(const FCompactMaps& CompactMaps)"
  },
  {
    "label": "SplitAllBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitAllBowties(bool bParallel = true)"
  },
  {
    "label": "EnableMatchingAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingAttributes(const FDynamicMeshAttributeSet& ToMatch, bool bClearExisting = true, bool bDiscardExtraAttributes = false)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reparent(FDynamicMesh3* NewParent)"
  },
  {
    "label": "SetNumUVLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumUVLayers(int Num)"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetUVLayer(0)"
  },
  {
    "label": "GetUVLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetUVLayer(0)"
  },
  {
    "label": "SetNumNormalLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumNormalLayers(int Num)"
  },
  {
    "label": "EnableTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTangents()"
  },
  {
    "label": "DisableTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableTangents()"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(0)"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(0)"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(1)"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(1)"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(2)"
  },
  {
    "label": "GetNormalLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNormalLayer(2)"
  },
  {
    "label": "EnablePrimaryColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePrimaryColors()"
  },
  {
    "label": "DisablePrimaryColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisablePrimaryColors()"
  },
  {
    "label": "SetNumPolygroupLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPolygroupLayers(int32 Num)"
  },
  {
    "label": "SetNumWeightLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumWeightLayers(int32 Num)"
  },
  {
    "label": "RemoveWeightLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWeightLayer(int32 Index)"
  },
  {
    "label": "EnableMaterialID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMaterialID()"
  },
  {
    "label": "DisableMaterialID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMaterialID()"
  },
  {
    "label": "AttachSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachSkinWeightsAttribute(FName InProfileName, FDynamicMeshVertexSkinWeightsAttribute* InAttribute)"
  },
  {
    "label": "RemoveSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSkinWeightsAttribute(FName InProfileName)"
  },
  {
    "label": "CopyBoneAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBoneAttributes(const FDynamicMeshAttributeSet& Copy)"
  },
  {
    "label": "CopyBoneAttributesWithRemapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBoneAttributesWithRemapping(const FDynamicMeshAttributeSet& Copy, const TMap<FName, FName>& BoneHierarchy)"
  },
  {
    "label": "EnableMatchingBoneAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMatchingBoneAttributes(const FDynamicMeshAttributeSet& ToMatch, bool bClearExisting, bool bDiscardExtraAttributes)"
  },
  {
    "label": "AppendBonesUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendBonesUnique(const FDynamicMeshAttributeSet& Other)"
  },
  {
    "label": "EnableBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableBones(const int InBonesNum)"
  },
  {
    "label": "DisableBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableBones()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, const FCompactMaps* CompactMaps, bool bUseCompression)"
  },
  {
    "label": "OnNewTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewTriangle(int TriangleID, bool bInserted)"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewVertex(int VertexID, bool bInserted)"
  },
  {
    "label": "OnRemoveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveTriangle(int TriangleID)"
  },
  {
    "label": "OnRemoveVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveVertex(int VertexID)"
  },
  {
    "label": "OnReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitEdge(const DynamicMeshInfo::FEdgeSplitInfo & splitInfo)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlipEdge(const DynamicMeshInfo::FEdgeFlipInfo & flipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseEdge(const DynamicMeshInfo::FEdgeCollapseInfo & collapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPokeTriangle(const DynamicMeshInfo::FPokeTriangleInfo & pokeInfo)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeEdges(const DynamicMeshInfo::FMergeEdgesInfo & mergeInfo)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeVertices(const DynamicMeshInfo::FMergeVerticesInfo& mergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitVertex(const DynamicMeshInfo::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  }
]