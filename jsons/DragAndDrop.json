[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "TType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TType"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FExternalDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalDragOperation"
  },
  {
    "label": "EExternalDragType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EExternalDragType"
  },
  {
    "label": "FGameDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameDragDropOperation"
  },
  {
    "label": "FDragDropOperation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Events . h \" class SWidget ; class SWindow ; class FDragDropOperation : public TSharedFromThis<FDragDropOperation> { public :)",
    "insertText": "FDragDropOperation()"
  },
  {
    "label": "IsOfType()",
    "kind": "Method",
    "detail": "Function (template<class TType> bool)",
    "insertText": "IsOfType()"
  },
  {
    "label": "AffectedByPointerEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AffectedByPointerEvent(const FPointerEvent& PointerEvent)"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const class FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery()"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "GetDecoratorPosition()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetDecoratorPosition()"
  },
  {
    "label": "SetDecoratorVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDecoratorVisibility(bool bVisible)"
  },
  {
    "label": "IsExternalOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalOperation()"
  },
  {
    "label": "IsOfTypeImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOfTypeImpl(const FString& Type)"
  },
  {
    "label": "CreateCursorDecoratorWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCursorDecoratorWindow()"
  },
  {
    "label": "DestroyCursorDecoratorWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCursorDecoratorWindow()"
  },
  {
    "label": "ConvertTo()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragDropOperation>)",
    "insertText": "ConvertTo(const FString& TypeId)"
  },
  {
    "label": "FDragDropEvent()",
    "kind": "Method",
    "detail": "Function (} protected : bool bCreateNewWindow ; TSharedPtr<SWindow> CursorDecoratorWindow ; TOptional<EMouseCursor::Type> MouseCursor ; TOptional<EMouseCursor::Type> MouseCursorOverride ; } ; class FDragDropEvent : public FPointerEvent { public :)",
    "insertText": "FDragDropEvent(const FPointerEvent& InMouseEvent, const TSharedPtr<FDragDropOperation> InContent ) : FPointerEvent( InMouseEvent ) , Content( InContent)"
  },
  {
    "label": "GetOperation()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FDragDropOperation>)",
    "insertText": "GetOperation()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FDragDropOperation> Content ; } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnDragDropEnded, bool , const FDragDropEvent& ) DECLARE_DELEGATE_OneParam( FOnDragDropUpdate, const FDragDropEvent& ) #define DRAG_DROP_OPERATOR_TYPE(TYPE, BASE) \\ static const FString& GetTypeId()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString Type =)",
    "insertText": "TEXT(#TYPE)"
  },
  {
    "label": "FExternalDragOperation()",
    "kind": "Method",
    "detail": "Function (} class FExternalDragOperation : public FDragDropOperation { private :)",
    "insertText": "FExternalDragOperation()"
  },
  {
    "label": "NewFiles()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExternalDragOperation>)",
    "insertText": "NewFiles(TArray<FString> InFileNames)"
  },
  {
    "label": "NewOperation()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExternalDragOperation>)",
    "insertText": "NewOperation(FString InText, TArray<FString> InFileNames)"
  },
  {
    "label": "HasText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasText()"
  },
  {
    "label": "HasFiles()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFiles()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetText()"
  }
]