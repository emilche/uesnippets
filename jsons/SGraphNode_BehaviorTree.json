[
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBehaviorTreeGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTreeGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UUserDefinedEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserDefinedEnum"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SGraphNode_BehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode_BehaviorTree"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BehaviorTreeEditorTypes . h \" # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Kismet2 / EnumEditorUtils . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" SGraphNodeAI . h \" # include \" SNodePanel . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Types / SlateVector2 . h \" class SBorder ; class SGraphNode ; class SGraphPin ; class SHorizontalBox ; class SToolTip ; class SVerticalBox ; class SWidget ; class UBehaviorTreeGraphNode ; class UEdGraphPin ; class UUserDefinedEnum ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; class SGraphNode_BehaviorTree : public SGraphNodeAI,public FEnumEditorUtils::INotifyOnEnumChanged { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphNode_BehaviorTree)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UBehaviorTreeGraphNode* InNode)"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphNode()"
  },
  {
    "label": "CreatePinWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePinWidgets()"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPin(const TSharedRef<SGraphPin>& PinToAdd)"
  },
  {
    "label": "GetComplexTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip>)",
    "insertText": "GetComplexTooltip()"
  },
  {
    "label": "GetOverlayBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlayBrushes(bool bSelected, const FVector2D WidgetSize, TArray<FOverlayBrushInfo>& Brushes)"
  },
  {
    "label": "GetOverlayWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<FOverlayWidgetInfo>)",
    "insertText": "GetOverlayWidgets(bool bSelected, const FVector2D& WidgetSize)"
  },
  {
    "label": "GetNodeUnderMouse()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGraphNode>)",
    "insertText": "GetNodeUnderMouse(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(const FVector2D& NewPosition, FNodeSet& NodeFilter, bool bMarkDirty = true)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "AddDecorator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDecorator(TSharedPtr<SGraphNode> DecoratorWidget)"
  },
  {
    "label": "AddService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddService(TSharedPtr<SGraphNode> ServiceWidget)"
  },
  {
    "label": "GetDebuggerSearchFailedMarkerVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDebuggerSearchFailedMarkerVisibility()"
  },
  {
    "label": "GetCachedPosition()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetCachedPosition()"
  },
  {
    "label": "PostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChange(const UUserDefinedEnum* Changed, FEnumEditorUtils::EEnumEditorChangeInfo ChangedType)"
  },
  {
    "label": "GetBorderBackgroundColor()",
    "kind": "Method",
    "detail": "Function (uint32 bSuppressDebuggerColor : 1 ; uint32 bSuppressDebuggerTriggers : 1 ; float DebuggerStateDuration ; int32 DebuggerStateCounter ; FLinearColor FlashColor ; float FlashAlpha ; TArray<FNodeBounds> TriggerOffsets ; FVector2f CachedPosition ; TArray<TSharedPtr<SGraphNode>> DecoratorWidgets ; TArray<TSharedPtr<SGraphNode>> ServicesWidgets ; TSharedPtr<SVerticalBox> DecoratorsBox ; TSharedPtr<SVerticalBox> ServicesBox ; TSharedPtr<SHorizontalBox> OutputPinBox ; TSharedPtr<SWidget> IndexOverlay ; TSharedPtr<SBorder> NodeBody ; FSlateColor)",
    "insertText": "GetBorderBackgroundColor()"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "GetNameIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNameIcon()"
  },
  {
    "label": "GetBlueprintIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBlueprintIconVisibility()"
  },
  {
    "label": "GetRuntimeDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRuntimeDescription()"
  },
  {
    "label": "GetRuntimeDescriptionVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetRuntimeDescriptionVisibility()"
  },
  {
    "label": "GetIndexVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetIndexVisibility()"
  },
  {
    "label": "GetIndexText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIndexText()"
  },
  {
    "label": "GetIndexTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIndexTooltipText()"
  },
  {
    "label": "GetIndexColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetIndexColor(bool bHovered)"
  },
  {
    "label": "OnIndexHoverStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIndexHoverStateChanged(bool bHovered)"
  },
  {
    "label": "GetPinTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPinTooltip(UEdGraphPin* GraphPinObj)"
  }
]