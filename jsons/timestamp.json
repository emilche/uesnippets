[
  {
    "label": "Timestamp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timestamp"
  },
  {
    "label": "rtc_units_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc_units_impl"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (# ifndef API_UNITS_TIMESTAMP_H_ # define API_UNITS_TIMESTAMP_H_ # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include<string> # include<type_traits> # include \" api / units / time_delta . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / units / unit_base . h \" namespace webrtc { class Timestamp final : public rtc_units_impl::UnitBase<Timestamp> { public : template<T> Timestamp)",
    "insertText": "Seconds(T value)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (} template<T> Timestamp)",
    "insertText": "Millis(T value)"
  },
  {
    "label": "Micros()",
    "kind": "Method",
    "detail": "Function (} template<T> Timestamp)",
    "insertText": "Micros(T value)"
  },
  {
    "label": "Timestamp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Timestamp()"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (template<T = int64_t> T)",
    "insertText": "seconds()"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (} template<T = int64_t> T)",
    "insertText": "ms()"
  },
  {
    "label": "us()",
    "kind": "Method",
    "detail": "Function (} template<T = int64_t> T)",
    "insertText": "us()"
  },
  {
    "label": "seconds_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "seconds_or(int64_t fallback_value)"
  },
  {
    "label": "ms_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ms_or(int64_t fallback_value)"
  },
  {
    "label": "us_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "us_or(int64_t fallback_value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "operator(const TimeDelta delta)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!IsMinusInfinity())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!delta.IsMinusInfinity())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsMinusInfinity() || delta.IsMinusInfinity())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!IsPlusInfinity())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!delta.IsPlusInfinity())"
  },
  {
    "label": "Micros()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Micros(us() + delta.us())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsMinusInfinity() || delta.IsPlusInfinity())"
  },
  {
    "label": "Micros()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Micros(us() - delta.us())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TimeDelta)",
    "insertText": "operator(const Timestamp other)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!other.IsPlusInfinity())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsMinusInfinity() || other.IsPlusInfinity())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!other.IsMinusInfinity())"
  },
  {
    "label": "Micros()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Micros(us() - other.us())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (* this =* this + delta ; return* this ; } private : class rtc_units_impl::UnitBase<Timestamp> ; using UnitBase::UnitBase ; bool one_sided = true ; } ; std::string)",
    "insertText": "ToString(Timestamp value)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToLogString(Timestamp value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& stream, Timestamp value)"
  }
]