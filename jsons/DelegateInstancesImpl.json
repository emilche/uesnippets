[
  {
    "label": "TCommonDelegateInstanceState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCommonDelegateInstanceState"
  },
  {
    "label": "UserClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserClass"
  },
  {
    "label": "TBaseUFunctionDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseUFunctionDelegateInstance"
  },
  {
    "label": "TBaseSPMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseSPMethodDelegateInstance"
  },
  {
    "label": "TBaseSPLambdaDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseSPLambdaDelegateInstance"
  },
  {
    "label": "TBaseRawMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseRawMethodDelegateInstance"
  },
  {
    "label": "TBaseUObjectMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseUObjectMethodDelegateInstance"
  },
  {
    "label": "TBaseStaticDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseStaticDelegateInstance"
  },
  {
    "label": "TBaseFunctorDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseFunctorDelegateInstance"
  },
  {
    "label": "TWeakBaseFunctorDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWeakBaseFunctorDelegateInstance"
  },
  {
    "label": "IsUObjectPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / DelegateInstanceInterface . h \" # include \" Delegates / DelegateInstancesImplFwd . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Delegates / DelegateBase . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtrTemplates . h \" namespace UE::Delegates::Private { bool)",
    "insertText": "IsUObjectPtr(const volatile UObjectBase*)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "RetValType()",
    "kind": "Method",
    "detail": "Function (private : using Super = TCommonDelegateInstanceState<)",
    "insertText": "RetValType(ParamTypes...)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ;)",
    "insertText": "static_assert(UE::Delegates::Private::IsUObjectPtr((UserClass*)nullptr), \"You cannot use UFunction delegates with non UObject classes.\")"
  },
  {
    "label": "TBaseUFunctionDelegateInstance()",
    "kind": "Method",
    "detail": "Function (public : template<. . . InVarTypes>)",
    "insertText": "TBaseUFunctionDelegateInstance(UserClass* InUserObject, const FName& InFunctionName, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , FunctionName (InFunctionName) , UserObjectPtr(InUserObject)"
  },
  {
    "label": "FindFunctionChecked()",
    "kind": "Method",
    "detail": "Function (CachedFunction = UserObjectPtr ->)",
    "insertText": "FindFunctionChecked(InFunctionName)"
  },
  {
    "label": "TryGetBoundFunctionName()",
    "kind": "Method",
    "detail": "Function (} } # if USE_DELEGATE_TRYGETBOUNDFUNCTIONNAME FName)",
    "insertText": "TryGetBoundFunctionName()"
  },
  {
    "label": "GetObjectForTimerManager()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetObjectForTimerManager()"
  },
  {
    "label": "GetBoundProgramCounterForTimerManager()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetBoundProgramCounterForTimerManager()"
  },
  {
    "label": "IsCompactable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompactable()"
  },
  {
    "label": "IsSafeToExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSafeToExecute()"
  },
  {
    "label": "CreateCopy()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "CreateCopy(TDelegateBase<FThreadSafeDelegateMode>& Base)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseUFunctionDelegateInstance(*this)"
  },
  {
    "label": "CreateCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateCopy(TDelegateBase<FNotThreadSafeDelegateMode>& Base)"
  },
  {
    "label": "CreateCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateCopy(TDelegateBase<FNotThreadSafeNotCheckedDelegateMode>& Base)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} RetValType)",
    "insertText": "Execute(ParamTypes... Params)"
  },
  {
    "label": "RetValType()",
    "kind": "Method",
    "detail": "Function (using FParmsWithPayload = TPayload<)",
    "insertText": "RetValType(typename TDecay<ParamTypes>::Type..., typename TDecay<VarTypes> ::Type...)"
  },
  {
    "label": "ApplyAfter()",
    "kind": "Method",
    "detail": "Function (TPlacementNewer<FParmsWithPayload> PayloadAndParams ; this -> Payload .)",
    "insertText": "ApplyAfter(PayloadAndParams, Forward<ParamTypes>(Params)...)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (UserObjectPtr ->)",
    "insertText": "ProcessEvent(CachedFunction, &PayloadAndParams)"
  },
  {
    "label": "ExecuteIfSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExecuteIfSafe(ParamTypes... Params)"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<UserClass> PinnedObject =)",
    "insertText": "IsInGameThread() ? nullptr : this->UserObjectPtr.Pin()"
  },
  {
    "label": "RetValType()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ; public : using FMethodPtr = TMemFunPtrType<bConst,UserClass,)",
    "insertText": "RetValType(ParamTypes..., VarTypes...)"
  },
  {
    "label": "TBaseSPMethodDelegateInstance()",
    "kind": "Method",
    "detail": "Function (template<. . . InVarTypes>)",
    "insertText": "TBaseSPMethodDelegateInstance(const TSharedPtr<UserClass, SPMode>& InUserObject, FMethodPtr InMethodPtr, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , UserObject(InUserObject) , MethodPtr (InMethodPtr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return((uint64*)&MethodPtr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return((uint32*)&MethodPtr)"
  },
  {
    "label": "HasSameObject()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "HasSameObject(const void* InUserObject)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseSPMethodDelegateInstance(*this)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (using MutableUserClass = std::remove_const_t<UserClass> ; TSharedPtr<UserClass,SPMode> SharedUserObject = UserObject .)",
    "insertText": "Pin()"
  },
  {
    "label": "MutableUserClass()",
    "kind": "Method",
    "detail": "Function (MutableUserClass* MutableUserObject = const_cast<)",
    "insertText": "MutableUserClass(SharedUserObject.Get())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "static_assert(std::is_same_v<FunctorType, typename TRemoveReference<FunctorType>::Type>, \"FunctorType cannot be a reference\")"
  },
  {
    "label": "TBaseSPLambdaDelegateInstance()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ; public : template<InFunctorType,. . . InVarTypes>)",
    "insertText": "TBaseSPLambdaDelegateInstance(const TSharedPtr<UserClass, SPMode>& InContextObject, InFunctorType&& InFunctor, InVarTypes&&... Vars) : Super(Forward<InVarTypes>(Vars)...) , ContextObject(InContextObject) , Functor(Forward<InFunctorType>(InFunctor))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseSPLambdaDelegateInstance(*this)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "static_assert(!UE::Delegates::Private::IsUObjectPtr((UserClass*)nullptr), \"You cannot use raw method delegates with UObjects.\")"
  },
  {
    "label": "TBaseRawMethodDelegateInstance()",
    "kind": "Method",
    "detail": "Function (template<. . . InVarTypes>)",
    "insertText": "TBaseRawMethodDelegateInstance(UserClass* InUserObject, FMethodPtr InMethodPtr, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , UserObject(InUserObject) , MethodPtr (InMethodPtr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseRawMethodDelegateInstance(*this)"
  },
  {
    "label": "MutableUserClass()",
    "kind": "Method",
    "detail": "Function (using MutableUserClass = std::remove_const_t<UserClass> ; MutableUserClass* MutableUserObject = const_cast<)",
    "insertText": "MutableUserClass(UserObject)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ;)",
    "insertText": "static_assert(UE::Delegates::Private::IsUObjectPtr((UserClass*)nullptr), \"You cannot use UObject method delegates with raw pointers.\")"
  },
  {
    "label": "TBaseUObjectMethodDelegateInstance()",
    "kind": "Method",
    "detail": "Function (template<. . . InVarTypes>)",
    "insertText": "TBaseUObjectMethodDelegateInstance(UserClass* InUserObject, FMethodPtr InMethodPtr, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , UserObject(InUserObject) , MethodPtr (InMethodPtr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseUObjectMethodDelegateInstance(*this)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (using MutableUserClass = std::remove_const_t<UserClass> ;)",
    "insertText": "checkSlow(UserObject.IsValid())"
  },
  {
    "label": "MutableUserClass()",
    "kind": "Method",
    "detail": "Function (MutableUserClass* MutableUserObject = const_cast<)",
    "insertText": "MutableUserClass(UserObject.Get())"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<UserClass> PinnedObject =)",
    "insertText": "IsInGameThread() ? nullptr : this->UserObject.Pin()"
  },
  {
    "label": "MutableUserClass()",
    "kind": "Method",
    "detail": "Function (using MutableUserClass = std::remove_const_t<UserClass> ; MutableUserClass* MutableUserObject = const_cast<)",
    "insertText": "MutableUserClass(ActualUserObject)"
  },
  {
    "label": "RetValType()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ; public : using FFuncPtr =)",
    "insertText": "RetValType(*)(ParamTypes..., VarTypes...)"
  },
  {
    "label": "TBaseStaticDelegateInstance()",
    "kind": "Method",
    "detail": "Function (template<. . . InVarTypes>)",
    "insertText": "TBaseStaticDelegateInstance(FFuncPtr InStaticFuncPtr, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , StaticFuncPtr(InStaticFuncPtr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS)",
    "insertText": "return((uint64*)&StaticFuncPtr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return((uint32*)&StaticFuncPtr)"
  },
  {
    "label": "HasSameObject()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "HasSameObject(const void* UserObject)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseStaticDelegateInstance(*this)"
  },
  {
    "label": "TBaseFunctorDelegateInstance()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ; public : template<InFunctorType,. . . InVarTypes>)",
    "insertText": "TBaseFunctorDelegateInstance(InFunctorType&& InFunctor, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , Functor(Forward<InFunctorType>(InFunctor))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TBaseFunctorDelegateInstance(*this)"
  },
  {
    "label": "TWeakBaseFunctorDelegateInstance()",
    "kind": "Method",
    "detail": "Function (using DelegateBaseType = UserPolicy::FDelegateExtras ; public : template<InFunctorType,. . . InVarTypes>)",
    "insertText": "TWeakBaseFunctorDelegateInstance(UserClass* InContextObject, InFunctorType&& InFunctor, InVarTypes&&... Vars) : Super (Forward<InVarTypes>(Vars)...) , ContextObject(InContextObject) , Functor (Forward< InFunctorType>(InFunctor))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(TWriteLockedDelegateAllocation{Base}) TWeakBaseFunctorDelegateInstance(*this)"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<UserClass> PinnedObject =)",
    "insertText": "IsInGameThread() ? nullptr : ContextObject.Pin()"
  }
]