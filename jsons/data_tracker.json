[
  {
    "label": "DataTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AdditionalTsnBlocks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdditionalTsnBlocks"
  },
  {
    "label": "TsnRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TsnRange"
  },
  {
    "label": "DataTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_RX_DATA_TRACKER_H_ # define NET_DCSCTP_RX_DATA_TRACKER_H_ # include<stddef . h> # include<stdint . h> # include<cstdint> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" net / dcsctp / common / sequence_numbers . h \" # include \" net / dcsctp / packet / chunk / data_common . h \" # include \" net / dcsctp / packet / chunk / sack_chunk . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / public / dcsctp_handover_state . h \" # include \" net / dcsctp / timer / timer . h \" namespace dcsctp { class DataTracker { public : size_t kMaxDuplicateTsnReported = 2 0 ; size_t kMaxGapAckBlocksReported = 2 0 ; uint32_t kMaxAcceptedOutstandingFragments = 1 0 0 0 0 0 ;)",
    "insertText": "DataTracker(absl::string_view log_prefix, Timer* delayed_ack_timer, TSN peer_initial_tsn) : log_prefix_(std::string(log_prefix) + \"dtrack: \"), seen_packet_(false), delayed_ack_timer_(*delayed_ack_timer), last_cumulative_acked_tsn_( tsn_unwrapper_.Unwrap(TSN(*peer_initial_tsn - 1)))"
  },
  {
    "label": "IsTSNValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTSNValid(TSN tsn)"
  },
  {
    "label": "Observe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Observe(TSN tsn, AnyDataChunk::ImmediateAckFlag immediate_ack = AnyDataChunk::ImmediateAckFlag(false))"
  },
  {
    "label": "ObservePacketEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObservePacketEnd()"
  },
  {
    "label": "HandleForwardTsn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleForwardTsn(TSN new_cumulative_ack)"
  },
  {
    "label": "ShouldSendAck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendAck(bool also_if_delayed = false)"
  },
  {
    "label": "last_cumulative_acked_tsn()",
    "kind": "Method",
    "detail": "Function (TSN)",
    "insertText": "last_cumulative_acked_tsn()"
  },
  {
    "label": "will_increase_cum_ack_tsn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "will_increase_cum_ack_tsn(TSN tsn)"
  },
  {
    "label": "ForceImmediateSack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceImmediateSack()"
  },
  {
    "label": "CreateSelectiveAck()",
    "kind": "Method",
    "detail": "Function (SackChunk)",
    "insertText": "CreateSelectiveAck(size_t a_rwnd)"
  },
  {
    "label": "HandleDelayedAckTimerExpiry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDelayedAckTimerExpiry()"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "TsnRange()",
    "kind": "Method",
    "detail": "Function (private : enum class AckState { kIdle,kBecomingDelayed,kDelayed,kImmediate,} ; class AdditionalTsnBlocks { public : struct TsnRange {)",
    "insertText": "TsnRange(UnwrappedTSN first, UnwrappedTSN last) : first(first), last(last)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} UnwrappedTSN first ; UnwrappedTSN last ; } ; bool)",
    "insertText": "Add(UnwrappedTSN tsn)"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseTo(UnwrappedTSN tsn)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront()"
  },
  {
    "label": "blocks()",
    "kind": "Method",
    "detail": "Function (const std::vector<TsnRange>&)",
    "insertText": "blocks()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const TsnRange&)",
    "insertText": "front()"
  },
  {
    "label": "CreateGapAckBlocks()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<TsnRange> blocks_ ; } ; std::vector<SackChunk::GapAckBlock>)",
    "insertText": "CreateGapAckBlocks()"
  },
  {
    "label": "UpdateAckState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAckState(AckState new_state, absl::string_view reason)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "ToString(AckState ack_state)"
  }
]