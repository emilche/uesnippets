[
  {
    "label": "DataTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AdditionalTsnBlocks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdditionalTsnBlocks"
  },
  {
    "label": "TsnRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TsnRange"
  },
  {
    "label": "ObservePacketEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObservePacketEnd()"
  },
  {
    "label": "HandleForwardTsn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleForwardTsn(TSN new_cumulative_ack)"
  },
  {
    "label": "ShouldSendAck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendAck(bool also_if_delayed = false)"
  },
  {
    "label": "ForceImmediateSack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceImmediateSack()"
  },
  {
    "label": "CreateSelectiveAck()",
    "kind": "Method",
    "detail": "Function (SackChunk)",
    "insertText": "CreateSelectiveAck(size_t a_rwnd)"
  },
  {
    "label": "HandleDelayedAckTimerExpiry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDelayedAckTimerExpiry()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(UnwrappedTSN tsn)"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseTo(UnwrappedTSN tsn)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront()"
  },
  {
    "label": "UpdateAckState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAckState(AckState new_state, absl::string_view reason)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "ToString(AckState ack_state)"
  }
]