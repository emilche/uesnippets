[
  {
    "label": "SProfilerThreadView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfilerThreadView"
  },
  {
    "label": "EThreadViewCursor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EThreadViewCursor"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSlateOnPaintState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateOnPaintState"
  },
  {
    "label": "FSlateOnPaintState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Misc / Paths . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Geometry . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Fonts / FontMeasure . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / Application / SlateApplication . h \" # include \" ProfilerStream . h \" class SProfilerThreadView : public SCompoundWidget { enum { MIN_NUM_PIXELS_PER_SAMPLE = 3 2,NUM_MILLISECONDS_PER_WINDOW = 3 3,NUM_PIXELS_PER_ROW = 1 6,MOUSE_SNAP_DISTANCE = 4,TOOLTIP_DELAY = 5 0 0,WIDTH_THREAD_DESC = 1 2 8,NUM_DATA_PARTITIONS = 1 6,INV_MIN_VISIBLE_RANGE_X = 1 0 0 0 0,MAX_VISIBLE_RANGE_X = 2 5 0,NUM_PIXELS_BETWEEN_TIMELINE = 9 6,} ; struct EThreadViewCursor { enum Type { Default,Arrow,Hand,} ; } ; struct FSlateOnPaintState : public FNoncopyable {)",
    "insertText": "FSlateOnPaintState(const FGeometry& InAllottedGeometry, const FSlateRect& InMyCullingRect, FSlateWindowElementList& InOutDrawElements, int32& InLayerId, const FWidgetStyle& InWidgetStyle, ESlateDrawEffect InDrawEffects ) : AllottedGeometry( InAllottedGeometry ) , AbsoluteClippingRect( InMyCullingRect ) , LocalClippingRect( FVector2D::ZeroVector, InAllottedGeometry.GetLocalSize() ) , WidgetStyle( InWidgetStyle ) , OutDrawElements( InOutDrawElements ) , LayerId( InLayerId ) , DrawEffects( InDrawEffects ) , FontMeasureService( FSlateApplication::Get().GetRenderer()->GetFontMeasureService() ) , SummaryFont8( FCoreStyle::GetDefaultFontStyle(\"Regular\", 8) ) , SummaryFont8Height( static_cast<float>(FontMeasureService->Measure( TEXT( \"!\" ), SummaryFont8 ).Y))"
  },
  {
    "label": "Size2D()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "Size2D()"
  },
  {
    "label": "SProfilerThreadView()",
    "kind": "Method",
    "detail": "Function (} const FGeometry& AllottedGeometry ; const FSlateRect& AbsoluteClippingRect ; const FSlateRect LocalClippingRect ; const FWidgetStyle& WidgetStyle ; FSlateWindowElementList& OutDrawElements ; int32& LayerId ; const ESlateDrawEffect DrawEffects ; const TSharedRef<FSlateFontMeasure> FontMeasureService ; const FSlateFontInfo SummaryFont8 ; const float SummaryFont8Height ; } ; public :)",
    "insertText": "SProfilerThreadView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SProfilerThreadView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FVector2D& ScreenSpacePosition)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawText(const FString& Text, const FSlateFontInfo& FontInfo, FVector2D Position, const FColor& TextColor, const FColor& ShadowColor, FVector2D ShadowOffset, const FSlateRect* ClippingRect = nullptr)"
  },
  {
    "label": "DrawUIStackNodes_Recursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUIStackNodes_Recursively(const FProfilerUIStackNode& UIStackNode)"
  },
  {
    "label": "DrawFramesBackgroundAndTimelines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFramesBackgroundAndTimelines()"
  },
  {
    "label": "DrawUIStackNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUIStackNodes()"
  },
  {
    "label": "DrawFrameMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFrameMarkers()"
  },
  {
    "label": "SetPositionXToByScrollBar()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPositionXToByScrollBar(double ScrollOffset)"
  },
  {
    "label": "SetPositionX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionX(double NewPositionXMS)"
  },
  {
    "label": "SetPositonYTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositonYTo(double ScrollOffset)"
  },
  {
    "label": "SetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeRange(double StartTimeMS, double EndTimeMS, bool bBroadcast = true)"
  },
  {
    "label": "SetFrameRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameRange(int32 FrameStart, int32 FrameEnd)"
  },
  {
    "label": "AttachProfilerStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachProfilerStream(const FProfilerStream& InProfilerStream)"
  },
  {
    "label": "DECLARE_EVENT_FiveParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_FiveParams(SProfilerThreadView, FViewPositionXChangedEvent, double , double , double , int32 , int32)"
  },
  {
    "label": "OnViewPositionXChanged()",
    "kind": "Method",
    "detail": "Function (FViewPositionXChangedEvent&)",
    "insertText": "OnViewPositionXChanged()"
  },
  {
    "label": "OnViewPositionYChanged()",
    "kind": "Method",
    "detail": "Function (FViewPositionYChangedEvent&)",
    "insertText": "OnViewPositionYChanged()"
  },
  {
    "label": "ProcessData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessData()"
  },
  {
    "label": "ShouldUpdateData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateData()"
  },
  {
    "label": "UpdateInternalConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternalConstants()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (protected : FProfilerUIStream ProfilerUIStream ; const FProfilerStream* ProfilerStream ; FGeometry ThisGeometry ; uint8 PaintStateMemory [)",
    "insertText": "sizeof(FSlateOnPaintState)"
  }
]