[
  {
    "label": "FAnalyzerParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyzerParameters"
  },
  {
    "label": "IAnalyzerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerSettings"
  },
  {
    "label": "IAnalyzerResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerResult"
  },
  {
    "label": "IAnalyzerControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerControls"
  },
  {
    "label": "IAnalyzerWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerWorker"
  },
  {
    "label": "IAnalyzerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerFactory"
  },
  {
    "label": "FAnalyzerParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" namespace Audio { struct FAnalyzerParameters { public : int32 SampleRate ; int32 NumChannels ;)",
    "insertText": "FAnalyzerParameters(int32 InSampleRate = 0, int32 InNumChannels = 0) : SampleRate(InSampleRate) , NumChannels(InNumChannels)"
  },
  {
    "label": "IAnalyzerSettings()",
    "kind": "Method",
    "detail": "Function (} } ; class IAnalyzerSettings { public : ~)",
    "insertText": "IAnalyzerSettings()"
  },
  {
    "label": "IAnalyzerResult()",
    "kind": "Method",
    "detail": "Function (} ; } ; class IAnalyzerResult { public : ~)",
    "insertText": "IAnalyzerResult()"
  },
  {
    "label": "IAnalyzerControls()",
    "kind": "Method",
    "detail": "Function (} ; } ; class IAnalyzerControls { public : ~)",
    "insertText": "IAnalyzerControls()"
  },
  {
    "label": "IAnalyzerWorker()",
    "kind": "Method",
    "detail": "Function (} ; } ; class IAnalyzerWorker { public : ~)",
    "insertText": "IAnalyzerWorker()"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Analyze(TArrayView<const float> InAudio, IAnalyzerResult* OutResult)"
  },
  {
    "label": "SetControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControls(TSharedPtr<IAnalyzerControls> InAnalyzerControls)"
  },
  {
    "label": "ClearControls()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearControls()"
  },
  {
    "label": "IAnalyzerFactory()",
    "kind": "Method",
    "detail": "Function (} } ; class IAnalyzerFactory : public IModularFeature { public : ~)",
    "insertText": "IAnalyzerFactory()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioAnalyzerPlugin\"))"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTitle()"
  },
  {
    "label": "NewResult()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IAnalyzerResult>)",
    "insertText": "NewResult()"
  },
  {
    "label": "NewResultShared()",
    "kind": "Method",
    "detail": "Function (template<ESPMode Mode = ESPMode::ThreadSafe> TSharedPtr<IAnalyzerResult,Mode>)",
    "insertText": "NewResultShared()"
  },
  {
    "label": "NewWorker()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<IAnalyzerWorker>)",
    "insertText": "NewWorker(const FAnalyzerParameters& InParams, const IAnalyzerSettings* InSettings)"
  }
]