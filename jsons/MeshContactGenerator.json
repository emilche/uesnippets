[
  {
    "label": "FMeshContactGeneratorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshContactGeneratorSettings"
  },
  {
    "label": "FMeshContactGeneratorTriangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshContactGeneratorTriangle"
  },
  {
    "label": "FMeshContactGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshContactGenerator"
  },
  {
    "label": "FVertexContactIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexContactIndex"
  },
  {
    "label": "FEdgeTriangleIndices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeTriangleIndices"
  },
  {
    "label": "FEdgeTriangleIndicesMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeTriangleIndicesMapTraits"
  },
  {
    "label": "VertexContactIndicesMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VertexContactIndicesMapTraits"
  },
  {
    "label": "FMeshContactGeneratorSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / Collision / ContactTriangles . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Framework / HashMappedArray . h \" # include \" Chaos / Framework / UncheckedArray . h \" # include \" Chaos / Triangle . h \" namespace Chaos::Private { class FMeshContactGeneratorSettings { public :)",
    "insertText": "FMeshContactGeneratorSettings()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (FReal FaceNormalDotThreshold ; FReal EdgeNormalDotRejectTolerance ; FReal BackFaceCullTolerance ; FReal BarycentricTolerance ; int32 MaxContactsBufferSize ; int32 HashSize ; uint32 bCullBackFaces : 1 ; uint32 bFixNormals : 1 ; uint32 bSortByPhi : 1 ; uint32 bSortForSolverConvergence : 1 ; uint32 bUseTwoPassLoop : 1 ; } ; class FMeshContactGeneratorTriangle { FReal InvalidNormalMarker = std::numeric_limits<FReal)",
    "insertText": "max()"
  },
  {
    "label": "FMeshContactGeneratorTriangle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMeshContactGeneratorTriangle(const FTriangle& InTriangle, const int32 InTriangleIndex, const int32 InVertexIndex0, const int32 InVertexIndex1, const int32 InVertexIndex2) : Triangle(InTriangle) , Normal(InvalidNormalMarker) , TriangleIndex(InTriangleIndex)"
  },
  {
    "label": "NumFaceEdgeCollisions()",
    "kind": "Method",
    "detail": "Function (InVertexIndex0,InVertexIndex1,InVertexIndex2 },)",
    "insertText": "NumFaceEdgeCollisions(0) , VisitIndex(INDEX_NONE) , bEnabled(true)"
  },
  {
    "label": "HasVertexID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVertexID(const int32 VertexIndex)"
  },
  {
    "label": "GetVertexWithID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetVertexWithID(const int32 VertexID, FVec3& OutVertex)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (OutVertex = Triangle .)",
    "insertText": "GetVertex(0)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (OutVertex = Triangle .)",
    "insertText": "GetVertex(1)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (OutVertex = Triangle .)",
    "insertText": "GetVertex(2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutVertexID0 = VertexIndices [ 1 ] ; OutVertexID1 = VertexIndices [ 2 ] ; return true ; } else)",
    "insertText": "if(VertexID == VertexIndices[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutVertexID0 = VertexIndices [ 2 ] ; OutVertexID1 = VertexIndices [ 0 ] ; return true ; } else)",
    "insertText": "if(VertexID == VertexIndices[2])"
  },
  {
    "label": "GetOtherVerticesFromID()",
    "kind": "Method",
    "detail": "Function (OutVertexID0 = VertexIndices [ 0 ] ; OutVertexID1 = VertexIndices [ 1 ] ; return true ; } return false ; } bool)",
    "insertText": "GetOtherVerticesFromID(const int32 VertexID, FVec3& OutVertex0, FVec3& OutVertex1)"
  },
  {
    "label": "GetLocalVertexIndexAt()",
    "kind": "Method",
    "detail": "Function (const int32 LocalVertexIndex =)",
    "insertText": "GetLocalVertexIndexAt(InPos, InTolerance)"
  },
  {
    "label": "GetTriangleIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTriangleIndex()"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (Normal = Triangle .)",
    "insertText": "GetNormal()"
  },
  {
    "label": "GetCentroid()",
    "kind": "Method",
    "detail": "Function (} return Normal ; } FVec3)",
    "insertText": "GetCentroid()"
  },
  {
    "label": "SetVisitIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisitIndex(const int8 InVisitIndex)"
  },
  {
    "label": "GetVisitIndex()",
    "kind": "Method",
    "detail": "Function (VisitIndex = InVisitIndex ; } int8)",
    "insertText": "GetVisitIndex()"
  },
  {
    "label": "GetIsEnabled()",
    "kind": "Method",
    "detail": "Function (bEnabled = bInEnabled ; } bool)",
    "insertText": "GetIsEnabled()"
  },
  {
    "label": "GetNumFaceEdgeCollisions()",
    "kind": "Method",
    "detail": "Function (+ + NumFaceEdgeCollisions ; } int32)",
    "insertText": "GetNumFaceEdgeCollisions()"
  },
  {
    "label": "SetFixNormalsEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixNormalsEnabled(const bool bInFixNormals)"
  },
  {
    "label": "BeginCollect()",
    "kind": "Method",
    "detail": "Function (Settings . bFixNormals = bInFixNormals ; } void)",
    "insertText": "BeginCollect(const int32 InNumTriangles)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 ExpectedNumContacts =)",
    "insertText": "Min(InNumTriangles * 4, Settings.MaxContactsBufferSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(InNumTriangles, ExpectedNumContacts)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTriangle(const FTriangle& MeshTriangle, const int32 MeshTriangleIndex, const int32 VertexIndex0, const int32 VertexIndex1, const int32 VertexIndex2)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Emplace(MeshTriangle, MeshTriangleIndex, VertexIndex0, VertexIndex1, VertexIndex2)"
  },
  {
    "label": "EndCollect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndCollect()"
  },
  {
    "label": "AddTriangleEdge()",
    "kind": "Method",
    "detail": "Function (const FTriangleExt& Triangle = Triangles [ LocalTriangleIndex ] ;)",
    "insertText": "AddTriangleEdge(LocalTriangleIndex, Triangle.GetVertexIndex(0), Triangle.GetVertexIndex(1))"
  },
  {
    "label": "AddTriangleEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleEdge(LocalTriangleIndex, Triangle.GetVertexIndex(1), Triangle.GetVertexIndex(2))"
  },
  {
    "label": "AddTriangleEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleEdge(LocalTriangleIndex, Triangle.GetVertexIndex(2), Triangle.GetVertexIndex(0))"
  },
  {
    "label": "GenerateMeshContacts()",
    "kind": "Method",
    "detail": "Function (} } template<TriangleContactGeneratorType> void)",
    "insertText": "GenerateMeshContacts(const TriangleContactGeneratorType& TriangleContactGenerator)"
  },
  {
    "label": "TriangleContactGeneratorType()",
    "kind": "Method",
    "detail": "Function (GenerateMeshContactsTwoPass<)",
    "insertText": "TriangleContactGeneratorType(TriangleContactGenerator)"
  },
  {
    "label": "ProcessGeneratedContacts()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ProcessGeneratedContacts(const FRigidTransform3& ConvexTransform, const FRigidTransform3& MeshToConvexTransform)"
  },
  {
    "label": "GetContactPoints()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FContactPoint>)",
    "insertText": "GetContactPoints()"
  },
  {
    "label": "FVertexContactIndex()",
    "kind": "Method",
    "detail": "Function (} private : using FTriangleExt = FMeshContactGeneratorTriangle ; struct FVertexContactIndex {)",
    "insertText": "FVertexContactIndex()"
  },
  {
    "label": "FVertexContactIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexContactIndex(const FContactVertexID InID, const int32 InContactIndex, const bool bInIsFaceContact) : ID(InID) , ContactIndex(InContactIndex) , bIsFaceContact(bInIsFaceContact)"
  },
  {
    "label": "FEdgeTriangleIndices()",
    "kind": "Method",
    "detail": "Function (} FContactVertexID ID ; int32 ContactIndex ; bool bIsFaceContact ; } ; struct FEdgeTriangleIndices {)",
    "insertText": "FEdgeTriangleIndices(const FContactEdgeID& InEdgeID, const int32 InIndex0, const int32 InIndex1) : ID(InEdgeID)"
  },
  {
    "label": "GenerateMeshContactsOnePass()",
    "kind": "Method",
    "detail": "Function (InIndex0,InIndex1 } { } FContactEdgeID ID ; int32 LocalTriangleIndices [ 2 ] ; } ; template<TriangleContactGeneratorType> void)",
    "insertText": "GenerateMeshContactsOnePass(const TriangleContactGeneratorType& TriangleContactGenerator)"
  },
  {
    "label": "TriangleContactGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleContactGenerator(*this, LocalTriangleIndex)"
  },
  {
    "label": "SetTriangleVisited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleVisited(LocalTriangleIndex, 0)"
  },
  {
    "label": "GenerateMeshContactsTwoPass()",
    "kind": "Method",
    "detail": "Function (} } template<TriangleContactGeneratorType> void)",
    "insertText": "GenerateMeshContactsTwoPass(const TriangleContactGeneratorType& TriangleContactGenerator)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 LocalTriangleIndex = 0; LocalTriangleIndex < GetNumTriangles(); ++LocalTriangleIndex)"
  },
  {
    "label": "SetTriangleVisited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleVisited(LocalTriangleIndex, 1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Reset(const int32 InMaxTriangles, const int32 InMaxContacts)"
  },
  {
    "label": "AddTriangleEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleEdge(const int32 LocalTriangleIndex, const int32 VertexIndex0, const int32 VertexIndex1)"
  },
  {
    "label": "FContactEdgeID()",
    "kind": "Method",
    "detail": "Function (const FContactEdgeID EdgeID =)",
    "insertText": "FContactEdgeID(VertexIndex0, VertexIndex1)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FEdgeTriangleIndices* EdgeTriangleIndices = EdgeTriangleIndicesMap .)",
    "insertText": "Find(EdgeID)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (EdgeTriangleIndicesMap .)",
    "insertText": "Emplace(EdgeID, EdgeID, LocalTriangleIndex, INDEX_NONE)"
  },
  {
    "label": "IsSharedEdge()",
    "kind": "Method",
    "detail": "Function (} else { EdgeTriangleIndices -> LocalTriangleIndices [ 1 ] = LocalTriangleIndex ; } } bool)",
    "insertText": "IsSharedEdge(const FContactEdgeID& EdgeID)"
  },
  {
    "label": "GetOtherTriangleIndexForEdge()",
    "kind": "Method",
    "detail": "Function (} return false ; } int32)",
    "insertText": "GetOtherTriangleIndexForEdge(const int32 LocalTriangleIndex, const FContactEdgeID& EdgeID)"
  },
  {
    "label": "HasFaceVertexCollision()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } bool)",
    "insertText": "HasFaceVertexCollision(const FContactVertexID VertexID)"
  },
  {
    "label": "GetVertexIndex()",
    "kind": "Method",
    "detail": "Function (const int32 MeshVertexIndex0 = Triangles [ LocalTriangleIndex ] .)",
    "insertText": "GetVertexIndex(0)"
  },
  {
    "label": "GetVertexIndex()",
    "kind": "Method",
    "detail": "Function (const int32 MeshVertexIndex1 = Triangles [ LocalTriangleIndex ] .)",
    "insertText": "GetVertexIndex(1)"
  },
  {
    "label": "GetVertexIndex()",
    "kind": "Method",
    "detail": "Function (const int32 MeshVertexIndex2 = Triangles [ LocalTriangleIndex ] .)",
    "insertText": "GetVertexIndex(2)"
  },
  {
    "label": "HasFaceVertexCollision()",
    "kind": "Method",
    "detail": "Function (NumCollisions + =)",
    "insertText": "HasFaceVertexCollision(MeshVertexIndex0)"
  },
  {
    "label": "HasFaceVertexCollision()",
    "kind": "Method",
    "detail": "Function (NumCollisions + =)",
    "insertText": "HasFaceVertexCollision(MeshVertexIndex1)"
  },
  {
    "label": "HasFaceVertexCollision()",
    "kind": "Method",
    "detail": "Function (NumCollisions + =)",
    "insertText": "HasFaceVertexCollision(MeshVertexIndex2)"
  },
  {
    "label": "SetTriangleVisited()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleVisited(const int32 LocalTriangleIndex, const int8 VisitIndex)"
  },
  {
    "label": "SetVisitIndex()",
    "kind": "Method",
    "detail": "Function (Triangles [ LocalTriangleIndex ] .)",
    "insertText": "SetVisitIndex(VisitIndex)"
  },
  {
    "label": "GetNumTriangles()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "GetNumTriangles()"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (} const FTriangle&)",
    "insertText": "GetTriangle(const int32 LocalTriangleIndex)"
  },
  {
    "label": "GetTriangleNormal()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetTriangleNormal(const int32 LocalTriangleIndex)"
  },
  {
    "label": "FixFeature()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FixFeature(const int32 LocalTriangleIndex, Private::EConvexFeatureType& InOutFeatureType, int32& InOutFeatureIndex, FVec3& InOutPlaneNormal)"
  },
  {
    "label": "AddTriangleContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleContacts(const int32 LocalTriangleIndex, const TArrayView<FContactPoint>& TriangleContactPoints)"
  },
  {
    "label": "PruneAndCorrectContacts()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PruneAndCorrectContacts()"
  },
  {
    "label": "FixContactNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixContactNormal(const int32 ContactIndex)"
  },
  {
    "label": "RemoveDisabledContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDisabledContacts()"
  },
  {
    "label": "SortContactByPhi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortContactByPhi()"
  },
  {
    "label": "SortContactsForSolverConvergence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortContactsForSolverConvergence()"
  },
  {
    "label": "FinalizeContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeContacts(const FRigidTransform3& MeshToConvexTransform)"
  },
  {
    "label": "DebugDrawContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawContacts(const FRigidTransform3& ConvexTransform, const FColor& Color, const FReal LineScale)"
  },
  {
    "label": "DebugDrawTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawTriangles(const FRigidTransform3& ConvexTransform, const FColor& VisitedColor, const FColor& IgnoredColor)"
  },
  {
    "label": "DebugDrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawTriangle(const FRigidTransform3& ConvexTransform, const FTriangleExt& TriangleData, const FColor& Color)"
  },
  {
    "label": "GetIDHash()",
    "kind": "Method",
    "detail": "Function (private : FMeshContactGeneratorSettings Settings ; TArray<FTriangleExt> Triangles ; TArray<FContactPoint> Contacts ; TArray<FTriangleContactPointData> ContactDatas ; struct FEdgeTriangleIndicesMapTraits { uint32)",
    "insertText": "GetIDHash(const FContactEdgeID& EdgeID)"
  },
  {
    "label": "ElementHasID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ElementHasID(const FEdgeTriangleIndices& TriangleIndices, const FContactEdgeID& EdgeID)"
  },
  {
    "label": "ElementHasID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ElementHasID(const FVertexContactIndex& VertexIndex, const FContactVertexID& VertexID)"
  }
]