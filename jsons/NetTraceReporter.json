[
  {
    "label": "FNetTraceReporter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetTraceReporter"
  },
  {
    "label": "ReportInitEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / Trace / NetTrace . h \" # if UE_NET_TRACE_ENABLED struct FNetTraceReporter { uint32 NetTraceReporterVersion ; void)",
    "insertText": "ReportInitEvent(uint32 NetTraceVersion)"
  },
  {
    "label": "ReportPacketContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPacketContent(FNetTracePacketContentEvent* Events, uint32 EventCount, const FNetTracePacketInfo& PacketInfo)"
  },
  {
    "label": "ReportPacketDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPacketDropped(const FNetTracePacketInfo& PacketInfo)"
  },
  {
    "label": "ReportPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPacket(const FNetTracePacketInfo& PacketInfo, uint32 PacketBits)"
  },
  {
    "label": "ReportAnsiName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportAnsiName(UE::Net::FNetDebugNameId NameId, uint32 NameSize, const char* Name)"
  },
  {
    "label": "ReportObjectCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportObjectCreated(uint32 GameInstanceId, uint64 NetObjectId, UE::Net::FNetDebugNameId NameId, uint64 TypeIdentifier, uint32 OwnerId)"
  },
  {
    "label": "ReportObjectDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportObjectDestroyed(uint32 GameInstanceId, uint64 NetObjectId)"
  },
  {
    "label": "ReportConnectionCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportConnectionCreated(uint32 GameInstanceId, uint32 ConnectionId)"
  },
  {
    "label": "ReportConnectionStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportConnectionStateUpdated(uint32 GameInstanceId, uint32 ConnectionId, uint8 ConnectionStateValue)"
  },
  {
    "label": "ReportConnectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportConnectionUpdated(uint32 GameInstanceId, uint32 ConnectionId, const TCHAR* AddressString, const TCHAR* OwningActor)"
  },
  {
    "label": "ReportConnectionClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportConnectionClosed(uint32 GameInstanceId, uint32 ConnectionId)"
  },
  {
    "label": "ReportPacketStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPacketStatsCounter(uint32 GameInstanceId, uint32 ConnectionId, UE::Net::FNetDebugNameId CounterNameId, uint32 StatValue)"
  },
  {
    "label": "ReportFrameStatsCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFrameStatsCounter(uint32 GameInstanceId, UE::Net::FNetDebugNameId CounterNameId, uint32 StatValue)"
  },
  {
    "label": "ReportInstanceUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInstanceUpdated(uint32 GameInstanceId, bool bIsServer, const TCHAR* Name)"
  },
  {
    "label": "ReportInstanceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInstanceDestroyed(uint32 GameInstanceId)"
  }
]