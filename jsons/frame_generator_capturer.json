[
  {
    "label": "AutoOpt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoOpt"
  },
  {
    "label": "FrameGeneratorCapturerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameGeneratorCapturerConfig"
  },
  {
    "label": "SquaresVideo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SquaresVideo"
  },
  {
    "label": "SquareSlides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SquareSlides"
  },
  {
    "label": "VideoFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFile"
  },
  {
    "label": "ImageSlides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageSlides"
  },
  {
    "label": "Crop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Crop"
  },
  {
    "label": "FrameGeneratorCapturer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameGeneratorCapturer"
  },
  {
    "label": "SinkWantsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SinkWantsObserver"
  },
  {
    "label": "Resolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Resolution"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FRAME_GENERATOR_CAPTURER_H_ # define TEST_FRAME_GENERATOR_CAPTURER_H_ # include<memory> # include<string> # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / video / video_frame . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" system_wrappers / include / clock . h \" # include \" test / test_video_capturer . h \" namespace webrtc { namespace test { namespace frame_gen_cap_impl { template<T> class AutoOpt : public absl::optional<T> { public : using absl::optional<T>::optional ; T*)",
    "insertText": "operator()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (} } ; } struct FrameGeneratorCapturerConfig { struct SquaresVideo { int framerate = 3 0 ; FrameGeneratorInterface::OutputType pixel_format = FrameGeneratorInterface::OutputType::kI420 ; int width = 3 2 0 ; int height = 1 8 0 ; int num_squares = 1 0 ; } ; struct SquareSlides { int framerate = 3 0 ; TimeDelta change_interval =)",
    "insertText": "Seconds(10)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (struct Crop { TimeDelta scroll_duration =)",
    "insertText": "Seconds(0)"
  },
  {
    "label": "OnSinkWantsChanged()",
    "kind": "Method",
    "detail": "Function (absl::optional<int> width ; absl::optional<int> height ; } crop ; int width = 1 8 5 0 ; int height = 1 1 1 0 ; std::vector<std::string> paths = { \" web_screenshot_1850_1110 \",\" presentation_1850_1110 \",\" photo_1850_1110 \",\" difficult_photo_1850_1110 \",} ; } ; frame_gen_cap_impl::AutoOpt<SquaresVideo> squares_video ; frame_gen_cap_impl::AutoOpt<SquareSlides> squares_slides ; frame_gen_cap_impl::AutoOpt<VideoFile> video_file ; frame_gen_cap_impl::AutoOpt<ImageSlides> image_slides ; } ; class FrameGeneratorCapturer : public TestVideoCapturer { public : class SinkWantsObserver { public : void)",
    "insertText": "OnSinkWantsChanged(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "SinkWantsObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "SinkWantsObserver()"
  },
  {
    "label": "FrameGeneratorCapturer()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FrameGeneratorCapturer(Clock* clock, std::unique_ptr<FrameGeneratorInterface> frame_generator, int target_fps, TaskQueueFactory& task_queue_factory)"
  },
  {
    "label": "FrameGeneratorCapturer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameGeneratorCapturer()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameGeneratorCapturer>)",
    "insertText": "Create(Clock* clock, TaskQueueFactory& task_queue_factory, FrameGeneratorCapturerConfig::SquaresVideo config)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameGeneratorCapturer>)",
    "insertText": "Create(Clock* clock, TaskQueueFactory& task_queue_factory, FrameGeneratorCapturerConfig::SquareSlides config)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameGeneratorCapturer>)",
    "insertText": "Create(Clock* clock, TaskQueueFactory& task_queue_factory, FrameGeneratorCapturerConfig::VideoFile config)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameGeneratorCapturer>)",
    "insertText": "Create(Clock* clock, TaskQueueFactory& task_queue_factory, FrameGeneratorCapturerConfig::ImageSlides config)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FrameGeneratorCapturer>)",
    "insertText": "Create(Clock* clock, TaskQueueFactory& task_queue_factory, const FrameGeneratorCapturerConfig& config)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "ChangeResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeResolution(size_t width, size_t height)"
  },
  {
    "label": "ChangeFramerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFramerate(int target_framerate)"
  },
  {
    "label": "GetResolution()",
    "kind": "Method",
    "detail": "Function (struct Resolution { int width ; int height ; } ; absl::optional<Resolution>)",
    "insertText": "GetResolution()"
  },
  {
    "label": "OnOutputFormatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputFormatRequest(int width, int height, const absl::optional<int>& max_fps)"
  },
  {
    "label": "SetSinkWantsObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSinkWantsObserver(SinkWantsObserver* observer)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<VideoFrame>* sink)"
  },
  {
    "label": "ForceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceFrame()"
  },
  {
    "label": "SetFakeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeRotation(VideoRotation rotation)"
  },
  {
    "label": "SetFakeColorSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeColorSpace(absl::optional<ColorSpace> color_space)"
  },
  {
    "label": "first_frame_capture_time()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "first_frame_capture_time()"
  },
  {
    "label": "InsertFrame()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InsertFrame()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run(void* obj)"
  },
  {
    "label": "GetCurrentConfiguredFramerate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCurrentConfiguredFramerate()"
  },
  {
    "label": "UpdateFps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFps(int max_fps) RTC_EXCLUSIVE_LOCKS_REQUIRED(&lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; RepeatingTaskHandle frame_task_ ; bool sending_ ; SinkWantsObserver* sink_wants_observer_)",
    "insertText": "RTC_GUARDED_BY(&lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (int64_t first_frame_capture_time_ ; Mutex stats_lock_ ; absl::optional<Resolution> source_resolution_)",
    "insertText": "RTC_GUARDED_BY(&stats_lock_)"
  }
]