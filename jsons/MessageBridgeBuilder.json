[
  {
    "label": "FMessageBridgeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageBridgeBuilder"
  },
  {
    "label": "FMessageBridgeBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" IMessageBridge . h \" # include \" IMessageBus . h \" # include \" IMessageTransport . h \" # include \" IMessagingModule . h \" class FMessageBridgeBuilder { public :)",
    "insertText": "FMessageBridgeBuilder() : Address(FMessageAddress::NewAddress()) , BusPtr(IMessagingModule::Get().GetDefaultBus()) , Disabled(false) , Transport(nullptr)"
  },
  {
    "label": "FMessageBridgeBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMessageBridgeBuilder(const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& Bus) : Address(FMessageAddress::NewAddress()) , BusPtr(Bus) , Disabled(false) , Transport(nullptr)"
  },
  {
    "label": "ThatIsDisabled()",
    "kind": "Method",
    "detail": "Function (} public : FMessageBridgeBuilder&)",
    "insertText": "ThatIsDisabled()"
  },
  {
    "label": "UsingTransport()",
    "kind": "Method",
    "detail": "Function (Disabled = true ; return* this ; } FMessageBridgeBuilder&)",
    "insertText": "UsingTransport(const TSharedRef<IMessageTransport, ESPMode::ThreadSafe>& InTransport)"
  },
  {
    "label": "WithAddress()",
    "kind": "Method",
    "detail": "Function (Transport = InTransport ; return* this ; } FMessageBridgeBuilder&)",
    "insertText": "WithAddress(const FMessageAddress& InAddress)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (Address = InAddress ; return* this ; } public : TSharedPtr<IMessageBridge,ESPMode::ThreadSafe>)",
    "insertText": "Build()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageBridge,ESPMode::ThreadSafe> Bridge ;)",
    "insertText": "check(Transport.IsValid())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (auto Bus = BusPtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Bridge =)",
    "insertText": "Get().CreateBridge(Address, Bus.ToSharedRef(), Transport.ToSharedRef())"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (Bridge ->)",
    "insertText": "Disable()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (} else { Bridge ->)",
    "insertText": "Enable()"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (} } } return Bridge ; } operator TSharedPtr<IMessageBridge,)",
    "insertText": "ThreadSafe()"
  }
]