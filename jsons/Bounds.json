[
  {
    "label": "TBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBounds"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" template<T> struct TBounds { template<U> using TVector = UE::Math::TVector<U> ; template<U> using TVector4 = UE::Math::TVector4<U> ; using FReal = T ; TVector4<T> Min = TVector4<)",
    "insertText": "T(TNumericLimits<T>::Max(), TNumericLimits<T>::Max(), TNumericLimits<T>::Max())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TVector4<T> Max = TVector4<)",
    "insertText": "T(-TNumericLimits<T>::Max(), -TNumericLimits<T>::Max(), -TNumericLimits<T>::Max())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Min = Other ; Max = Other ; return* this ; } TBounds<T>&)",
    "insertText": "operator(const TVector<T>& Other)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMin( VectorLoadAligned( &Min ), VectorLoadFloat3( &Other ) ), &Min)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMax( VectorLoadAligned( &Max ), VectorLoadFloat3( &Other ) ), &Max)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMin( VectorLoadAligned( &Min ), VectorLoadAligned( &Other.Min ) ), &Min)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMax( VectorLoadAligned( &Max ), VectorLoadAligned( &Other.Max ) ), &Max)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Intersect(const TBounds<T>& Other)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (int Separated ; Separated =)",
    "insertText": "VectorAnyGreaterThan(VectorLoadAligned( &Min ), VectorLoadAligned( &Other.Max ))"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (Separated | =)",
    "insertText": "VectorAnyGreaterThan(VectorLoadAligned( &Other.Min ), VectorLoadAligned( &Max ))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (Separated& = 0 b111 ; return Separated = = 0 ; } bool)",
    "insertText": "Contains(const TBounds<T>& Other)"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (int MaskMin =)",
    "insertText": "VectorMaskBits(VectorCompareLE( VectorLoadAligned( &Min ), VectorLoadAligned( &Other.Min ) ))"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (int MaskMax =)",
    "insertText": "VectorMaskBits(VectorCompareGE( VectorLoadAligned( &Max ), VectorLoadAligned( &Other.Max ) ))"
  },
  {
    "label": "DistSqr()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistSqr(const TVector<T>& Point)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (auto rMin =)",
    "insertText": "VectorLoadAligned(&Min)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (auto rMax =)",
    "insertText": "VectorLoadAligned(&Max)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (auto rPoint =)",
    "insertText": "VectorLoadFloat3(&Point)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (auto rClosest =)",
    "insertText": "VectorSubtract(VectorMin( VectorMax( rPoint, rMin ), rMax ), rPoint)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "GetExtent()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetSurfaceArea()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetSurfaceArea()"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (TVector<T> Size = Max - Min ; return 0 . 5)",
    "insertText": "f(Size.X * Size.Y + Size.X * Size.Z + Size.Y * Size.Z)"
  },
  {
    "label": "ToAbsolute()",
    "kind": "Method",
    "detail": "Function (} template<U> auto)",
    "insertText": "ToAbsolute(const TVector<U>& Offset)"
  },
  {
    "label": "CommonType()",
    "kind": "Method",
    "detail": "Function (using CommonType = std::common_type<T,U>::type ; TBounds<CommonType> Bounds ; Bounds . Min = TVector4<)",
    "insertText": "CommonType(Min ) + TVector4< CommonType >( Offset, 0.0)"
  },
  {
    "label": "CommonType()",
    "kind": "Method",
    "detail": "Function (Bounds . Max = TVector4<)",
    "insertText": "CommonType(Max ) + TVector4< CommonType >( Offset, 0.0)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (using CommonType = std::common_type<T,U>::type ; TBounds<float> Bounds ; Bounds . Min = TVector4<)",
    "insertText": "float(TVector4< CommonType >( Min ) - TVector4< CommonType >( Offset, 0.0 ))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Bounds . Max = TVector4<)",
    "insertText": "float(TVector4< CommonType >( Max ) - TVector4< CommonType >( Offset, 0.0 ))"
  }
]