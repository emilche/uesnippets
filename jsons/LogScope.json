[
  {
    "label": "FWriteBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteBuffer"
  },
  {
    "label": "TLogScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLogScope"
  },
  {
    "label": "FLogScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogScope"
  },
  {
    "label": "FEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventNode"
  },
  {
    "label": "FFieldSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldSet"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FScopedLogScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedLogScope"
  },
  {
    "label": "FScopedStampedLogScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedStampedLogScope"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Config . h \" # if TRACE_PRIVATE_MINIMAL_ENABLED # include \" Writer . inl \" namespace UE { namespace Trace { namespace Private { struct FWriteBuffer ; template<bool bMaybeHasAux> class TLogScope ; class FLogScope { class FEventNode ; public : template<EventType> auto)",
    "insertText": "Enter()"
  },
  {
    "label": "ScopedEnter()",
    "kind": "Method",
    "detail": "Function (template<EventType> auto)",
    "insertText": "ScopedEnter()"
  },
  {
    "label": "ScopedStampedEnter()",
    "kind": "Method",
    "detail": "Function (template<EventType> auto)",
    "insertText": "ScopedStampedEnter()"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetPointer()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(FWriteBuffer* __restrict LatestBuffer)"
  },
  {
    "label": "EnterImpl()",
    "kind": "Method",
    "detail": "Function (private : template<uint32 Flags> auto)",
    "insertText": "EnterImpl(uint32 Uid, uint32 Size)"
  },
  {
    "label": "EnterPrelude()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "EnterPrelude(uint32 Size)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter(uint32 Uid, uint32 Size)"
  },
  {
    "label": "EnterNoSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterNoSync(uint32 Uid, uint32 Size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint8* Ptr ; FWriteBuffer* Buffer ; } ; template<bool bMaybeHasAux> class TLogScope : public FLogScope { public : void)",
    "insertText": "operator(const FLogScope&)"
  },
  {
    "label": "FScopedLogScope()",
    "kind": "Method",
    "detail": "Function (} ; class FScopedLogScope { public : ~)",
    "insertText": "FScopedLogScope()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive()"
  },
  {
    "label": "FScopedStampedLogScope()",
    "kind": "Method",
    "detail": "Function (bool bActive = false ; } ; class FScopedStampedLogScope { public : ~)",
    "insertText": "FScopedStampedLogScope()"
  }
]