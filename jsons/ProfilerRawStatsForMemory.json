[
  {
    "label": "FAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationInfo"
  },
  {
    "label": "FCombinedAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCombinedAllocationInfo"
  },
  {
    "label": "FNodeAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeAllocationInfo"
  },
  {
    "label": "FRawStatsMemoryProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawStatsMemoryProfiler"
  },
  {
    "label": "FStatsReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsReader"
  },
  {
    "label": "FAllocationInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS&& UE_STATS_MEMORY_PROFILER_ENABLED # include \" Stats / StatsFile . h \" struct FAllocationInfo { uint64 OldPtr ; uint64 Ptr ; int64 Size ; FName EncodedCallstack ; uint32 SequenceTag ; EMemoryOperation Op ; bool bHasBrokenCallstack ;)",
    "insertText": "FAllocationInfo(uint64 InOldPtr, uint64 InPtr, int64 InSize, const TArray<FName>& InCallstack, uint32 InSequenceTag, EMemoryOperation InOp, bool bInHasBrokenCallstack)"
  },
  {
    "label": "FAllocationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAllocationInfo(const FAllocationInfo& Other)"
  },
  {
    "label": "FCombinedAllocationInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FCombinedAllocationInfo { double SizeMB ; int64 Count ; FString HumanReadableCallstack ; FName EncodedCallstack ; TArray<FName> DecodedCallstack ; int64 Size ;)",
    "insertText": "FCombinedAllocationInfo() : SizeMB( 0 ) , Count( 0 ) , Size( 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCombinedAllocationInfo&)",
    "insertText": "operator(const FCombinedAllocationInfo& Other)"
  },
  {
    "label": "AddAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocation(Other.Size, Other.Count)"
  },
  {
    "label": "AddAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocation(-Other.Size, -Other.Count)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FCombinedAllocationInfo&)",
    "insertText": "operator(const FAllocationInfo& Other)"
  },
  {
    "label": "AddAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocation(Other.Size, 1)"
  },
  {
    "label": "IsAlive()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "IsAlive()"
  },
  {
    "label": "FNodeAllocationInfo()",
    "kind": "Method",
    "detail": "Function (Size + = SizeToAdd ; Count + = CountToAdd ; const double InvMB = 1 . 0 / 1 0 2 4 . 0 / 1 0 2 4 . 0 ; SizeMB = Size* InvMB ; } } ; struct FNodeAllocationInfo { double SizeMB ; int64 Count ; FString HumanReadableCallstack ; FName EncodedCallstack ; TArray<FName> DecodedCallstack ; FNodeAllocationInfo* Parent ; TMap<FName,FNodeAllocationInfo*> ChildNodes ; int64 Size ; int32 Depth ;)",
    "insertText": "FNodeAllocationInfo() : SizeMB( 0.0 ) , Count( 0 ) , Parent( nullptr ) , Size( 0 ) , Depth( 0)"
  },
  {
    "label": "FNodeAllocationInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNodeAllocationInfo()"
  },
  {
    "label": "DeleteAllChildrenNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllChildrenNodes()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Accumulate(const FCombinedAllocationInfo& Other)"
  },
  {
    "label": "SortBySize()",
    "kind": "Method",
    "detail": "Function (Size + = Other . Size ; Count + = Other . Count ; const double InvMB = 1 . 0 / 1 0 2 4 . 0 / 1 0 2 4 . 0 ; SizeMB = Size* InvMB ; } void)",
    "insertText": "SortBySize()"
  },
  {
    "label": "PrepareCallstackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareCallstackData(const TArray<FName>& InDecodedCallstack)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (delete It . Value ; } ChildNodes .)",
    "insertText": "Empty()"
  },
  {
    "label": "FRawStatsMemoryProfiler()",
    "kind": "Method",
    "detail": "Function (} } ; class FRawStatsMemoryProfiler : public FStatsReadFile { struct FStatsReader<FRawStatsMemoryProfiler> ; typedef FStatsReadFile Super ; protected :)",
    "insertText": "FRawStatsMemoryProfiler(const TCHAR* InFilename)"
  },
  {
    "label": "PreProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcessStats()"
  },
  {
    "label": "PostProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessStats()"
  },
  {
    "label": "ProcessSpecialMessageMarkerOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSpecialMessageMarkerOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessMemoryOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMemoryOperation(EMemoryOperation MemOp, uint64 Ptr, uint64 NewPtr, int64 Size, uint32 SequenceTag, const FStackState& StackState)"
  },
  {
    "label": "UpdateGenerateMemoryMapProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGenerateMemoryMapProgress(const int32 AllocationIndex)"
  },
  {
    "label": "SortSequenceAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortSequenceAllocations()"
  },
  {
    "label": "GenerateAllocationMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAllocationMap()"
  },
  {
    "label": "ProcessAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAlloc(const FAllocationInfo& AllocInfo, TMap<uint64, FAllocationInfo>& AllocationMap)"
  },
  {
    "label": "ProcessFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFree(const FAllocationInfo& FreeInfo, TMap<uint64, FAllocationInfo>& AllocationMap, const bool bReallocFree)"
  },
  {
    "label": "DumpDebugAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDebugAllocations()"
  },
  {
    "label": "FreeDebugInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDebugInformation()"
  },
  {
    "label": "ProcessAndDumpUObjectAllocations()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ProcessAndDumpUObjectAllocations(const FName SnapshotName)"
  },
  {
    "label": "DumpScopedAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpScopedAllocations(const TCHAR* Name, const TMap<FString, FCombinedAllocationInfo>& CombinedAllocations)"
  },
  {
    "label": "GenerateScopedAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateScopedAllocations(const TMap<uint64, FAllocationInfo>& InAllocationMap, TMap<FName, FCombinedAllocationInfo>& out_CombinedAllocations, uint64& TotalAllocatedMemory, uint64& NumAllocations)"
  },
  {
    "label": "GenerateScopedTreeAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateScopedTreeAllocations(const TMap<FName, FCombinedAllocationInfo>& ScopedAllocations, FNodeAllocationInfo& out_Root)"
  },
  {
    "label": "PrepareSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareSnapshot(const FName SnapshotName, const TMap<uint64, FAllocationInfo>& InAllocationMap)"
  },
  {
    "label": "CompareSnapshots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareSnapshots(const FName BeginSnaphotName, const FName EndSnaphotName, TMap<FName, FCombinedAllocationInfo>& out_Result)"
  },
  {
    "label": "CompareSnapshotsHumanReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareSnapshotsHumanReadable(const FName BeginSnaphotName, const FName EndSnaphotName, TMap<FString, FCombinedAllocationInfo>& out_Result)"
  },
  {
    "label": "GetSnapshotNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>)",
    "insertText": "GetSnapshotNames()"
  }
]