[
  {
    "label": "StringConstant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringConstant"
  },
  {
    "label": "TryConstexprEval()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STRING_CONSTANT_H_ # define ABSL_STRINGS_INTERNAL_STRING_CONSTANT_H_ # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { template<T> struct StringConstant { private : bool)",
    "insertText": "TryConstexprEval(absl::string_view view)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} public : absl::string_view value =)",
    "insertText": "T()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "operator()()"
  },
  {
    "label": "MakeStringConstant()",
    "kind": "Method",
    "detail": "Function (} ; # ifdef ABSL_INTERNAL_NEED_REDUNDANT_CONSTEXPR_DECL template<T> absl::string_view StringConstant<T>::value ; # endif template<T> StringConstant<T>)",
    "insertText": "MakeStringConstant(T)"
  }
]