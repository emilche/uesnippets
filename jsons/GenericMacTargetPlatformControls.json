[
  {
    "label": "TGenericMacTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericMacTargetPlatformControls"
  },
  {
    "label": "TGenericMacTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformControlsBase . h \" # include \" Mac / MacPlatformProperties . h \" # include \" LocalMacTargetDevice . h \" # include \" AnalyticsEventAttribute . h \" # if WITH_ENGINE # include \" StaticMeshResources . h \" # include \" TextureResource . h \" # endif # define LOCTEXT_NAMESPACE \" TGenericMacTargetPlatformControls \" template<bool HAS_EDITOR_DATA,bool IS_DEDICATED_SERVER,bool IS_CLIENT_ONLY> class TGenericMacTargetPlatformControls : public TTargetPlatformControlsBase<FMacPlatformProperties<HAS_EDITOR_DATA,IS_DEDICATED_SERVER,IS_CLIENT_ONLY>> { public : typedef FMacPlatformProperties<HAS_EDITOR_DATA,IS_DEDICATED_SERVER,IS_CLIENT_ONLY> TProperties ; typedef TTargetPlatformControlsBase<TProperties> TSuper ;)",
    "insertText": "TGenericMacTargetPlatformControls(ITargetPlatformSettings* TargetPlatformSettings) : TSuper(TargetPlatformSettings)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC LocalDevice =)",
    "insertText": "MakeShareable(new FLocalMacTargetDevice(*this))"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (# endif } public : void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllDevices(TArray<ITargetDevicePtr>& OutDevices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutDevices .)",
    "insertText": "Add(LocalDevice)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(AnalyticsParamArray)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(AnalyticsParamArray, TEXT(\"/Script/MacTargetPlatform.MacTargetSettings\"), TEXT(\"TargetedRHIs\"), GEngineIni)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE void)",
    "insertText": "GetTextureFormats(const UTexture* Texture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetDefaultTextureFormatNamePerLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultTextureFormatNamePerLayer(OutFormats.AddDefaulted_GetRef(), this->GetTargetPlatformSettings(), this, Texture, true, 4, true)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllDefaultTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDefaultTextureFormats(this->GetTargetPlatformSettings(), OutFormats)"
  },
  {
    "label": "SupportsLQCompressionTextureFormat()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "SupportsLQCompressionTextureFormat()"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/ShaderConductor/Mac/libdxcompiler.dylib\"))"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencySCArrayHelper(OutDependencies, TEXT(\"Binaries/ThirdParty/ShaderConductor/Mac/libShaderConductor.dylib\"))"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "SupportsRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsRayTracing()"
  }
]