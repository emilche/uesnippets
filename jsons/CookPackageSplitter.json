[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FAssetDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDependency"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "ICookPackageSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookPackageSplitter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeneratedPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratedPackage"
  },
  {
    "label": "FGeneratedPackageForPreSave",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratedPackageForPreSave"
  },
  {
    "label": "FGeneratedPackageForPopulate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratedPackageForPopulate"
  },
  {
    "label": "FRegisteredCookPackageSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisteredCookPackageSplitter"
  },
  {
    "label": "PREPROCESSOR_JOIN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PREPROCESSOR_JOIN"
  },
  {
    "label": "RequiresCachedCookedPlatformDataBeforeSplit()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" AssetRegistry / IAssetRegistry . h \" # include \" Containers / Array . h \" # include \" Containers / List . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Hash / Blake3 . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Misc / Optional . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" class UClass ; class UObject ; class UPackage ; struct FAssetDependency ; template<FuncType> class TFunctionRef ; class ICookPackageSplitter { public : bool)",
    "insertText": "RequiresCachedCookedPlatformDataBeforeSplit()"
  },
  {
    "label": "ICookPackageSplitter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ICookPackageSplitter()"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (} enum class ETeardown { Complete,Canceled,} ; void)",
    "insertText": "Teardown(ETeardown Status)"
  },
  {
    "label": "UseInternalReferenceToAvoidGarbageCollect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseInternalReferenceToAvoidGarbageCollect()"
  },
  {
    "label": "SetCreateAsMap()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetDependency> PackageDependencies ; FBlake3Hash GenerationHash ; void)",
    "insertText": "SetCreateAsMap(bool bInCreateAsMap)"
  },
  {
    "label": "GetCreateAsMap()",
    "kind": "Method",
    "detail": "Function (bCreateAsMap = bInCreateAsMap ; } const TOptional<bool>&)",
    "insertText": "GetCreateAsMap()"
  },
  {
    "label": "PopulateGeneratorPackage()",
    "kind": "Method",
    "detail": "Function (struct FGeneratedPackageForPreSave { FString RelativePath ; FString GeneratedRootPath ; UPackage* Package = nullptr ; bool bCreatedAsMap = false ; } ; bool)",
    "insertText": "PopulateGeneratorPackage(UPackage* OwnerPackage, UObject* OwnerObject, const TArray<ICookPackageSplitter::FGeneratedPackageForPreSave>& GeneratedPackages, TArray<UObject*>& OutObjectsToMove, TArray<UPackage*>& OutKeepReferencedPackages)"
  },
  {
    "label": "PopulateGeneratedPackage()",
    "kind": "Method",
    "detail": "Function (} struct FGeneratedPackageForPopulate { FString RelativePath ; FString GeneratedRootPath ; UPackage* Package = nullptr ; bool bCreatedAsMap = false ; } ; bool)",
    "insertText": "PopulateGeneratedPackage(UPackage* OwnerPackage, UObject* OwnerObject, const FGeneratedPackageForPopulate& GeneratedPackage, TArray<UObject*>& OutObjectsToMove, TArray<UPackage*>& OutKeepReferencedPackages)"
  },
  {
    "label": "OnOwnerReloaded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnOwnerReloaded(UPackage* OwnerPackage, UObject* OwnerObject)"
  },
  {
    "label": "GetGeneratedPackageSubPath()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetGeneratedPackageSubPath()"
  },
  {
    "label": "IsUnderGeneratedPackageSubPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnderGeneratedPackageSubPath(FStringView FileOrLongPackagePath)"
  },
  {
    "label": "ConstructGeneratedPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConstructGeneratedPackageName(FName OwnerPackageName, FStringView RelPath, FStringView GeneratedRootOverride = FStringView())"
  },
  {
    "label": "FRegisteredCookPackageSplitter()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::Cook::Private { class FRegisteredCookPackageSplitter { public :)",
    "insertText": "FRegisteredCookPackageSplitter()"
  },
  {
    "label": "GetSplitDataClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetSplitDataClass()"
  },
  {
    "label": "ShouldSplitPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSplitPackage(UObject* Object)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (ICookPackageSplitter*)",
    "insertText": "CreateInstance(UObject* Object)"
  },
  {
    "label": "GetSplitterDebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSplitterDebugName()"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEach(TFunctionRef<void(FRegisteredCookPackageSplitter*)> Func)"
  },
  {
    "label": "GetRegisteredList()",
    "kind": "Method",
    "detail": "Function (private : TLinkedList<FRegisteredCookPackageSplitter*>*&)",
    "insertText": "GetRegisteredList()"
  },
  {
    "label": "REGISTER_COOKPACKAGE_SPLITTER()",
    "kind": "Method",
    "detail": "Function (TLinkedList<FRegisteredCookPackageSplitter*> GlobalListLink ; } ; } # define)",
    "insertText": "REGISTER_COOKPACKAGE_SPLITTER(SplitterClass, SplitDataClass) \\ class PREPROCESSOR_JOIN(PREPROCESSOR_JOIN(SplitterClass, SplitDataClass), _Register)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "StaticClass()"
  },
  {
    "label": "ShouldSplit()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "ShouldSplit(Object)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ICookPackageSplitter*)",
    "insertText": "CreateInstance(UObject* SplitData)"
  },
  {
    "label": "SplitterClass()",
    "kind": "Method",
    "detail": "Function (\\ return new)",
    "insertText": "SplitterClass()"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ namespace)",
    "insertText": "PREPROCESSOR_JOIN(SplitterClass, SplitDataClass)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(PREPROCESSOR_JOIN(SplitterClass, SplitDataClass), _Register)"
  }
]