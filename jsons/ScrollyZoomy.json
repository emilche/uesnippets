[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IScrollableZoomable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IScrollableZoomable"
  },
  {
    "label": "FScrollyZoomy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScrollyZoomy"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Framework / Layout / InertialScrollManager . h \" class FSlateWindowElementList ; class SWidget ; class IScrollableZoomable { public : bool)",
    "insertText": "ScrollBy(const FVector2D& Offset)"
  },
  {
    "label": "ZoomBy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomBy(const float Amount)"
  },
  {
    "label": "FScrollyZoomy()",
    "kind": "Method",
    "detail": "Function (} ; class FScrollyZoomy { public :)",
    "insertText": "FScrollyZoomy(const bool InUseInertialScrolling = true)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const float DeltaTime, IScrollableZoomable& ScrollableZoomable)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const TSharedRef<SWidget> MyWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const TSharedRef<SWidget> MyWidget, IScrollableZoomable& ScrollableZoomable, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const TSharedRef<SWidget> MyWidget, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FPointerEvent& MouseEvent, IScrollableZoomable& ScrollableZoomable)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery()"
  },
  {
    "label": "IsRightClickScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightClickScrolling()"
  },
  {
    "label": "NeedsSoftwareCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsSoftwareCursor()"
  },
  {
    "label": "GetSoftwareCursorPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetSoftwareCursorPosition()"
  },
  {
    "label": "PaintSoftwareCursorIfNeeded()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintSoftwareCursorIfNeeded(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  }
]