[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "URuntimePartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimePartition"
  },
  {
    "label": "FCellDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellDesc"
  },
  {
    "label": "FCellDescInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellDescInstance"
  },
  {
    "label": "FGenerateStreamingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateStreamingParams"
  },
  {
    "label": "FGenerateStreamingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateStreamingResult"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WorldPartition / WorldPartitionStreamingGenerationContext . h \" # include \" RuntimePartition . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (UseContent,UseCellBounds,UseMinContentCellBounds } ;)",
    "insertText": "UCLASS(Abstract, CollapseCategories)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: #if WITH_EDITOR virtual void PostEditChangeProperty(FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "CreateHLODRuntimePartition()",
    "kind": "Method",
    "detail": "Function (URuntimePartition*)",
    "insertText": "CreateHLODRuntimePartition(int32 InHLODIndex)"
  },
  {
    "label": "FCellDescInstance()",
    "kind": "Method",
    "detail": "Function (struct FCellDesc { FName Name ; bool bIsSpatiallyLoaded ; bool bBlockOnSlowStreaming ; bool bClientOnlyVisible ; bool bIs2D ; int32 Priority ; int32 Level ; TOptional<FBox> CellBounds ; TArray<const IStreamingGenerationContext::FActorSetInstance*> ActorSetInstances ; } ; struct FCellDescInstance : public FCellDesc {)",
    "insertText": "FCellDescInstance(const FCellDesc& InCellDesc, URuntimePartition* InSourcePartition, const TArray<const UDataLayerInstance*>& InDataLayerInstances, const FGuid& InContentBundleID)"
  },
  {
    "label": "SetDefaultValues()",
    "kind": "Method",
    "detail": "Function (URuntimePartition* SourcePartition ; TArray<const UDataLayerInstance*> DataLayerInstances ; FGuid ContentBundleID ; } ; struct FGenerateStreamingParams { const TArray<const IStreamingGenerationContext::FActorSetInstance*>* ActorSetInstances ; } ; struct FGenerateStreamingResult { TArray<FCellDesc> RuntimeCellDescs ; } ; void)",
    "insertText": "SetDefaultValues()"
  },
  {
    "label": "SupportsHLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsHLODs() const PURE_VIRTUAL(URuntimePartition::SupportsHLODs, return true;)"
  },
  {
    "label": "InitHLODRuntimePartitionFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHLODRuntimePartitionFrom(const URuntimePartition* InRuntimePartition, int32 InHLODIndex)"
  },
  {
    "label": "UpdateHLODRuntimePartitionFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHLODRuntimePartitionFrom(const URuntimePartition* InRuntimePartition)"
  },
  {
    "label": "IsValidPartitionTokens()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsValidPartitionTokens(const TArray<FName>& InPartitionTokens) const PURE_VIRTUAL(URuntimePartition::IsValidPartitionTokens, return false;)"
  },
  {
    "label": "GenerateStreaming()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GenerateStreaming(const FGenerateStreamingParams& InParams, FGenerateStreamingResult& OutResult) PURE_VIRTUAL(URuntimePartition::GenerateStreaming, return false;)"
  },
  {
    "label": "AppendCellGuid()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "AppendCellGuid(FArchive& InAr)"
  },
  {
    "label": "CreateCellDesc()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR FCellDesc)",
    "insertText": "CreateCellDesc(const FString& InName, bool bInIsSpatiallyLoaded, int32 InLevel, const TArray<const IStreamingGenerationContext::FActorSetInstance*>& InActorSetInstances)"
  }
]