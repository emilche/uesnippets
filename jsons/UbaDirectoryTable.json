[
  {
    "label": "DirectoryTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectoryTable"
  },
  {
    "label": "Directory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Directory"
  },
  {
    "label": "Exists",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Exists"
  },
  {
    "label": "EntryInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EntryInformation"
  },
  {
    "label": "Directory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaPathUtils . h \" # include \" UbaBinaryReaderWriter . h \" namespace uba { enum : u64 { InvalidTableOffset = 0 } ; class DirectoryTable { public : using EntryLookup = GrowingUnorderedMap<StringKey,u32> ; struct Directory {)",
    "insertText": "Directory(MemoryBlock* block) : files(block)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} u32 tableOffset = InvalidTableOffset ; u32 parseOffset = InvalidTableOffset ; EntryLookup files ; ReaderWriterLock lock ; } ; void)",
    "insertText": "Init(u8* mem, u32 tableCount, u32 tableSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_memory = mem ; m_lookup .)",
    "insertText": "reserve(tableCount + 100)"
  },
  {
    "label": "ParseDirectoryTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseDirectoryTable(tableSize)"
  },
  {
    "label": "ParseDirectoryTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseDirectoryTable(u32 size)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(m_lookupLock, lock)"
  },
  {
    "label": "ParseDirectoryTableNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseDirectoryTableNoLock(size)"
  },
  {
    "label": "ParseDirectoryTableNoLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseDirectoryTableNoLock(u32 size)"
  },
  {
    "label": "reader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "reader(m_memory, m_memorySize)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (u64 pos = reader .)",
    "insertText": "GetPosition()"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(pos < size, TC(\"Should never read past size (pos: %u, size: %u)\"), pos, size)"
  },
  {
    "label": "Read7BitEncoded()",
    "kind": "Method",
    "detail": "Function (u64 storageSize = reader .)",
    "insertText": "Read7BitEncoded()"
  },
  {
    "label": "ReadStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey dirKey = reader .)",
    "insertText": "ReadStringKey()"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (auto insres = m_lookup .)",
    "insertText": "try_emplace(dirKey, m_memoryBlock)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (insres . first -> second . tableOffset =)",
    "insertText": "u32(reader.GetPosition())"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(storageSize - sizeof(dirKey))"
  },
  {
    "label": "PopulateDirectory()",
    "kind": "Method",
    "detail": "Function (} m_memorySize = size ; } void)",
    "insertText": "PopulateDirectory(const StringKeyHasher& hasher, Directory& dir)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(dir.lock, lock)"
  },
  {
    "label": "PopulateDirectoryRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDirectoryRecursive(hasher, dir.tableOffset, dir.parseOffset, dir.files)"
  },
  {
    "label": "PopulateDirectoryRecursive()",
    "kind": "Method",
    "detail": "Function (dir . parseOffset = dir . tableOffset ; } void)",
    "insertText": "PopulateDirectoryRecursive(const StringKeyHasher& hasher, u32 tableOffset, u32 parseOffset, EntryLookup& files)"
  },
  {
    "label": "reader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "reader(m_memory, tableOffset)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (u32 prevTableOffset =)",
    "insertText": "u32(reader.Read7BitEncoded())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool firstIsRoot = true ;)",
    "insertText": "while(true)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (firstIsRoot = prevTableOffset = = InvalidTableOffset ; break ; } reader .)",
    "insertText": "SetPosition(prevTableOffset)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (readerOffsets = new u32 [ 1 0 2 4* 1 0 2 4 ] ;)",
    "insertText": "memcpy(readerOffsets, buffer, sizeof(buffer))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(u32 i=count; i>0; --i)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "SetPosition(readerOffsets[i-1])"
  },
  {
    "label": "ReadU32()",
    "kind": "Method",
    "detail": "Function (firstIsRoot = false ; u32 attr = reader .)",
    "insertText": "ReadU32()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(sizeof(u32) + sizeof(u64))"
  },
  {
    "label": "PopulateDirectoryWithFiles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PopulateDirectoryWithFiles(reader, hasher, files)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(readerOffsets != buffer)"
  },
  {
    "label": "PopulateDirectoryWithFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateDirectoryWithFiles(BinaryReader& reader, const StringKeyHasher& hasher, EntryLookup& files)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (files .)",
    "insertText": "reserve(files.size() + itemCount)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> filename ; filename .)",
    "insertText": "Append(PathSeparator)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (filename .)",
    "insertText": "Resize(1)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "ReadString(filename)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(sizeof(u32)*2 + sizeof(u64)*3)"
  },
  {
    "label": "ToStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey filenameKey =)",
    "insertText": "ToStringKey(hasher, filename.data, filename.count)"
  },
  {
    "label": "EntryExists()",
    "kind": "Method",
    "detail": "Function (files [ filenameKey ] = offset ; } } enum Exists { Exists_Yes,Exists_No,Exists_Maybe,} ; Exists)",
    "insertText": "EntryExists(StringKey entryKey, const tchar* entryName, u64 entryNameLen, bool checkIfDir = false, u32* tableOffset = nullptr)"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_READ_LOCK(m_lookupLock, lock)"
  },
  {
    "label": "EntryExistsNoLock()",
    "kind": "Method",
    "detail": "Function (} Exists)",
    "insertText": "EntryExistsNoLock(StringKey entryKey, const tchar* entryName, u64 entryNameLen, bool checkIfDir = false, u32* tableOffset = nullptr)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto findIt = m_lookup .)",
    "insertText": "find(entryKey)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (- - rit ; continue ; } u64 sublen =)",
    "insertText": "u64(rit - entryName)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (StringKeyHasher ancestorHasher ; ancestorHasher .)",
    "insertText": "Update(entryName, sublen)"
  },
  {
    "label": "ToStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey ancestorKey =)",
    "insertText": "ToStringKey(ancestorHasher)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto dirIt = m_lookup .)",
    "insertText": "find(ancestorKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DirectoryTable::Directory& parentDir = dirIt -> second ;)",
    "insertText": "if(parentDir.tableOffset == -1)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(parentDir.lock, lock)"
  },
  {
    "label": "PopulateDirectoryRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDirectoryRecursive(ancestorHasher, parentDir.tableOffset, parentDir.parseOffset, parentDir.files)"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (parentDir . parseOffset = parentDir . tableOffset ; })",
    "insertText": "SCOPED_READ_LOCK(parentDir.lock, lock)"
  },
  {
    "label": "ReadU64()",
    "kind": "Method",
    "detail": "Function (outInfo . fileIndex = reader .)",
    "insertText": "ReadU64()"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (} outInfo . size = 0 ; outInfo . lastWrite = 0 ;)",
    "insertText": "UBA_ASSERT(!outFileName)"
  },
  {
    "label": "GetFinalPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFinalPath(StringBufferBase& out, const tchar* path)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(IsAbsolutePath(path))"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (Directory* directory = nullptr ; const tchar* prevSlash =)",
    "insertText": "TStrchr(path+3, PathSeparator)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(false, TC(\"GetFinalPath got path \\\"%s\\\" which has no backslash\"), path)"
  },
  {
    "label": "TStrlen()",
    "kind": "Method",
    "detail": "Function (const tchar* end = path +)",
    "insertText": "TStrlen(path)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> forHash ; forHash .)",
    "insertText": "Append(path, u64(prevSlash - path))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (StringKeyHasher hasher ; hasher .)",
    "insertText": "Update(forHash.data, forHash.count)"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (const tchar* slash =)",
    "insertText": "TStrchr(prevSlash + 1, PathSeparator)"
  },
  {
    "label": "ToStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey fileNameKey =)",
    "insertText": "ToStringKey(hasher)"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_READ_LOCK(directory->lock, lock2)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto fileIt = directory -> files .)",
    "insertText": "find(fileNameKey)"
  },
  {
    "label": "reader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "reader(m_memory, fileIt->second)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> fileName ; reader .)",
    "insertText": "ReadString(fileName)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "Append(PathSeparator).Append(fileName)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} else out .)",
    "insertText": "Append(prevSlash, u64(slash - prevSlash))"
  },
  {
    "label": "TraverseFilesRecursiveNoLock()",
    "kind": "Method",
    "detail": "Function (directory = nullptr ; continue ; } directory =& findIt -> second ; } } # if PLATFORM_WINDOWS template<Func> void)",
    "insertText": "TraverseFilesRecursiveNoLock(const StringBufferBase& path, const Func& func)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto findIt = m_lookup .)",
    "insertText": "find(ToStringKey(path))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (StringKeyHasher hasher ; hasher .)",
    "insertText": "Update(path.data, path.count)"
  },
  {
    "label": "PopulateDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDirectory(hasher, findIt->second)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (DirectoryTable::EntryInformation info ; StringBuffer<>)",
    "insertText": "fileName(path)"
  },
  {
    "label": "GetEntryInformation()",
    "kind": "Method",
    "detail": "Function (u32 fileOffset = fileKv . second ;)",
    "insertText": "GetEntryInformation(info, fileOffset, fileName.data + fileName.count, fileName.capacity - fileName.count)"
  },
  {
    "label": "TStrlen()",
    "kind": "Method",
    "detail": "Function (fileName . count =)",
    "insertText": "TStrlen(fileName.data)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "func(info, fileName, fileOffset)"
  },
  {
    "label": "TraverseFilesRecursiveNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraverseFilesRecursiveNoLock(fileName, func)"
  },
  {
    "label": "TraverseAllFilesNoLock()",
    "kind": "Method",
    "detail": "Function (} } template<Func> void)",
    "insertText": "TraverseAllFilesNoLock(const Func& func)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<4> drive ; drive .)",
    "insertText": "Append(l).Append(':')"
  },
  {
    "label": "TraverseFilesRecursiveNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraverseFilesRecursiveNoLock(drive, func)"
  },
  {
    "label": "DirectoryTable()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "DirectoryTable(MemoryBlock* block) : m_memoryBlock(block), m_lookup(block)"
  },
  {
    "label": "DirectoryTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DirectoryTable(const DirectoryTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const DirectoryTable&)"
  }
]