[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TraceBufferChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_BUFFER_H_ # define BASE_TRACE_EVENT_TRACE_BUFFER_H_ # include<stddef . h> # include<stdint . h> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / trace_event / trace_event . h \" # include \" base / trace_event / trace_event_impl . h \" namespace base { namespace trace_event { class BASE_EXPORT TraceBufferChunk { public :)",
    "insertText": "TraceBufferChunk(uint32_t seq)"
  },
  {
    "label": "TraceBufferChunk()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TraceBufferChunk()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(uint32_t new_seq)"
  },
  {
    "label": "AddTraceEvent()",
    "kind": "Method",
    "detail": "Function (TraceEvent*)",
    "insertText": "AddTraceEvent(size_t* event_index)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(index < size())"
  },
  {
    "label": "kMaxChunkIndex()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "kMaxChunkIndex(1u << 26)"
  },
  {
    "label": "TraceBuffer()",
    "kind": "Method",
    "detail": "Function (const size_t kTraceBufferChunkSize = 6 4 ; private : size_t next_free_ ; std::unique_ptr<TraceEventMemoryOverhead> cached_overhead_estimate_ ; TraceEvent chunk_ [ kTraceBufferChunkSize ] ; uint32_t seq_ ; } ; class BASE_EXPORT TraceBuffer { public : ~)",
    "insertText": "TraceBuffer()"
  },
  {
    "label": "GetChunk()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TraceBufferChunk>)",
    "insertText": "GetChunk(size_t* index)"
  },
  {
    "label": "ReturnChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnChunk(size_t index, std::unique_ptr<TraceBufferChunk> chunk)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Capacity()"
  },
  {
    "label": "GetEventByHandle()",
    "kind": "Method",
    "detail": "Function (TraceEvent*)",
    "insertText": "GetEventByHandle(TraceEventHandle handle)"
  },
  {
    "label": "NextChunk()",
    "kind": "Method",
    "detail": "Function (const TraceBufferChunk*)",
    "insertText": "NextChunk()"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "CreateTraceBufferRingBuffer()",
    "kind": "Method",
    "detail": "Function (TraceBuffer*)",
    "insertText": "CreateTraceBufferRingBuffer(size_t max_chunks)"
  },
  {
    "label": "CreateTraceBufferVectorOfSize()",
    "kind": "Method",
    "detail": "Function (TraceBuffer*)",
    "insertText": "CreateTraceBufferVectorOfSize(size_t max_chunks)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT TraceResultBuffer { public : using OutputCallback = base::RepeatingCallback<)",
    "insertText": "void(const std::string&)"
  },
  {
    "label": "GetCallback()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT SimpleOutput { OutputCallback)",
    "insertText": "GetCallback()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const std::string& json_string)"
  },
  {
    "label": "TraceResultBuffer()",
    "kind": "Method",
    "detail": "Function (std::string json_output ; } ;)",
    "insertText": "TraceResultBuffer()"
  },
  {
    "label": "SetOutputCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputCallback(OutputCallback json_chunk_callback)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "AddFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFragment(const std::string& trace_fragment)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  }
]