[
  {
    "label": "TestEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventFilter"
  },
  {
    "label": "HitsCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HitsCounter"
  },
  {
    "label": "HitsCounter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_EVENT_FILTER_TEST_UTILS_H_ # define BASE_TRACE_EVENT_TRACE_EVENT_FILTER_TEST_UTILS_H_ # include<memory> # include<string> # include \" base / trace_event / trace_event_filter . h \" namespace base { namespace trace_event { class TestEventFilter : public TraceEventFilter { public : struct HitsCounter {)",
    "insertText": "HitsCounter()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (size_t filter_trace_event_hit_count ; size_t end_event_hit_count ; } ; const char kName [ ] ; std::unique_ptr<TraceEventFilter>)",
    "insertText": "Factory(const std::string& predicate_name)"
  },
  {
    "label": "TestEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestEventFilter()"
  },
  {
    "label": "TestEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestEventFilter(const TestEventFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestEventFilter&)",
    "insertText": "operator(const TestEventFilter&)"
  },
  {
    "label": "FilterTraceEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterTraceEvent(const TraceEvent& trace_event)"
  },
  {
    "label": "EndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEvent(const char* category_name, const char* name)"
  },
  {
    "label": "set_filter_return_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_filter_return_value(bool value)"
  }
]