[
  {
    "label": "PeerConnectionMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionMessageHandler"
  },
  {
    "label": "PeerConnectionMessageHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PEER_CONNECTION_MESSAGE_HANDLER_H_ # define PC_PEER_CONNECTION_MESSAGE_HANDLER_H_ # include<functional> # include \" api / jsep . h \" # include \" api / media_stream_interface . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / stats_types . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" pc / legacy_stats_collector_interface . h \" namespace webrtc { class PeerConnectionMessageHandler { public :)",
    "insertText": "PeerConnectionMessageHandler(rtc::Thread* signaling_thread) : signaling_thread_(signaling_thread)"
  },
  {
    "label": "PeerConnectionMessageHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PeerConnectionMessageHandler()"
  },
  {
    "label": "PostSetSessionDescriptionSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSetSessionDescriptionSuccess(SetSessionDescriptionObserver* observer)"
  },
  {
    "label": "PostSetSessionDescriptionFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSetSessionDescriptionFailure(SetSessionDescriptionObserver* observer, RTCError&& error)"
  },
  {
    "label": "PostCreateSessionDescriptionFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreateSessionDescriptionFailure(CreateSessionDescriptionObserver* observer, RTCError error)"
  },
  {
    "label": "PostGetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGetStats(StatsObserver* observer, LegacyStatsCollectorInterface* legacy_stats, MediaStreamTrackInterface* track)"
  },
  {
    "label": "RequestUsagePatternReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUsagePatternReport(std::function<void()>, int delay_ms)"
  }
]