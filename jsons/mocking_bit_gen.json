[
  {
    "label": "DistributionCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DistributionCaller"
  },
  {
    "label": "MockHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockHelpers"
  },
  {
    "label": "BitGenRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitGenRef"
  },
  {
    "label": "MockingBitGen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockingBitGen"
  },
  {
    "label": "MockFnCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MockFnCaller"
  },
  {
    "label": "FunctionHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionHolder"
  },
  {
    "label": "FunctionHolderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionHolderImpl"
  },
  {
    "label": "MockingBitGen()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_MOCKING_BIT_GEN_H_ # define ABSL_RANDOM_MOCKING_BIT_GEN_H_ # include<iterator> # include<limits> # include<memory> # include<tuple> # include<type_traits> # include<utility> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / base / internal / fast_type_id . h \" # include \" absl / container / flat_hash_map . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / distributions . h \" # include \" absl / random / internal / distribution_caller . h \" # include \" absl / random / random . h \" # include \" absl / strings / str_cat . h \" # include \" absl / strings / str_join . h \" # include \" absl / types / span . h \" # include \" absl / types / variant . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<> struct DistributionCaller ; class MockHelpers ; } class BitGenRef ; class MockingBitGen { public :)",
    "insertText": "MockingBitGen()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using result_type = absl::BitGen::result_type ;)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "GetMockFnType()",
    "kind": "Method",
    "detail": "Function (} private : template<ResultT,. . . Args> auto)",
    "insertText": "GetMockFnType(ResultT, std::tuple<Args...>) -> ::testing::MockFunction<ResultT(Args...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<MockFnType,ResultT,Tuple> struct MockFnCaller ; template<MockFnType,ResultT,. . . Args> struct MockFnCaller<MockFnType,ResultT,std::tuple<Args . . .>> { MockFnType* fn ; ResultT)",
    "insertText": "operator()(Args... args)"
  },
  {
    "label": "FunctionHolder()",
    "kind": "Method",
    "detail": "Function (} } ; class FunctionHolder { public : ~)",
    "insertText": "FunctionHolder()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(void* args_tuple, void* result)"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "ResultT(result) = absl::apply(MockFnCaller<MockFnType, ResultT, ArgTupleT>{&mock_fn_}, *static_cast<ArgTupleT*>(args_tuple))"
  },
  {
    "label": "RegisterMock()",
    "kind": "Method",
    "detail": "Function (} MockFnType mock_fn_ ; } ; template<ResultT,ArgTupleT,SelfT> auto)",
    "insertText": "RegisterMock(SelfT&, base_internal::FastTypeIdType type) -> decltype(GetMockFnType(std::declval<ResultT>(), std::declval<ArgTupleT>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using MockFnType =)",
    "insertText": "decltype(GetMockFnType(std::declval<ResultT>(), std::declval<ArgTupleT>()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using WrappedFnType = absl::conditional_t<std::is_same<SelfT,::testing::NiceMock<absl::MockingBitGen>>::value,::testing::NiceMock<MockFnType>,absl::conditional_t<std::is_same<SelfT,::testing::NaggyMock<absl::MockingBitGen>>::value,::testing::NaggyMock<MockFnType>,absl::conditional_t<std::is_same<SelfT,::testing::StrictMock<absl::MockingBitGen>>::value,::testing::StrictMock<MockFnType>,MockFnType>>> ; using ImplT = FunctionHolderImpl<WrappedFnType,ResultT,ArgTupleT> ; auto& mock = mocks_ [ type ] ;)",
    "insertText": "if(!mock)"
  },
  {
    "label": "ImplT()",
    "kind": "Method",
    "detail": "Function (mock = absl::make_unique<)",
    "insertText": "ImplT()"
  },
  {
    "label": "ImplT()",
    "kind": "Method",
    "detail": "Function (mock_fn_)",
    "insertText": "ImplT(mock.get())"
  },
  {
    "label": "InvokeMock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InvokeMock(base_internal::FastTypeIdType type, void* args_tuple, void* result)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = mocks_ .)",
    "insertText": "find(type)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (it -> second ->)",
    "insertText": "Apply(args_tuple, result)"
  }
]