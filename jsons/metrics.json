[
  {
    "label": "Histogram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Histogram"
  },
  {
    "label": "SampleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SampleInfo"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SYSTEM_WRAPPERS_INCLUDE_METRICS_H_ # define SYSTEM_WRAPPERS_INCLUDE_METRICS_H_ # include<stddef . h> # include<atomic> # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / string_utils . h \" # if)",
    "insertText": "defined(RTC_DISABLE_METRICS)"
  },
  {
    "label": "NoOp()",
    "kind": "Method",
    "detail": "Function (namespace metrics_impl { template<. . . Ts> void)",
    "insertText": "NoOp(const Ts&...)"
  },
  {
    "label": "EXPECT_METRIC_EQ()",
    "kind": "Method",
    "detail": "Function (} } } # if RTC_METRICS_ENABLED # define)",
    "insertText": "EXPECT_METRIC_EQ(val1, val2) EXPECT_EQ(val1, val2) #define EXPECT_METRIC_EQ_WAIT(val1, val2, timeout) \\ EXPECT_EQ_WAIT(val1, val2, timeout) #define EXPECT_METRIC_GT(val1, val2) EXPECT_GT(val1, val2) #define EXPECT_METRIC_LE(val1, val2) EXPECT_LE(val1, val2) #define EXPECT_METRIC_TRUE(conditon) EXPECT_TRUE(conditon) #define EXPECT_METRIC_FALSE(conditon) EXPECT_FALSE(conditon) #define EXPECT_METRIC_THAT(value, matcher) EXPECT_THAT(value, matcher) #else #define EXPECT_METRIC_EQ(val1, val2) webrtc::metrics_impl::NoOp(val1, val2) #define EXPECT_METRIC_EQ_WAIT(val1, val2, timeout) webrtc::metrics_impl::NoOp(val1, val2, timeout) #define EXPECT_METRIC_GT(val1, val2) webrtc::metrics_impl::NoOp(val1, val2) #define EXPECT_METRIC_LE(val1, val2) webrtc::metrics_impl::NoOp(val1, val2) #define EXPECT_METRIC_TRUE(condition) webrtc::metrics_impl::NoOp(condition || true) #define EXPECT_METRIC_FALSE(condition) webrtc::metrics_impl::NoOp(condition && false) #define EXPECT_METRIC_THAT(value, matcher) webrtc::metrics_impl::NoOp(value, testing::_) #endif #if RTC_METRICS_ENABLED #define RTC_HISTOGRAM_COUNTS_100(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 100, 50) #define RTC_HISTOGRAM_COUNTS_200(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 200, 50) #define RTC_HISTOGRAM_COUNTS_500(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 500, 50) #define RTC_HISTOGRAM_COUNTS_1000(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 1000, 50) #define RTC_HISTOGRAM_COUNTS_10000(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 10000, 50) #define RTC_HISTOGRAM_COUNTS_100000(name, sample) \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 100000, 50) #define RTC_HISTOGRAM_COUNTS(name, sample, min, max, bucket_count) \\ RTC_HISTOGRAM_COMMON_BLOCK(name, sample, \\ webrtc::metrics::HistogramFactoryGetCounts( \\ name, min, max, bucket_count)) #define RTC_HISTOGRAM_COUNTS_LINEAR(name, sample, min, max, bucket_count) \\ RTC_HISTOGRAM_COMMON_BLOCK(name, sample, \\ webrtc::metrics::HistogramFactoryGetCountsLinear( \\ name, min, max, bucket_count)) #define RTC_HISTOGRAM_COUNTS_SPARSE_100(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 100, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE_200(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 200, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE_500(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 500, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE_1000(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 1000, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE_10000(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 10000, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE_100000(name, sample) \\ RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, 1, 100000, 50) #define RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, min, max, bucket_count) \\ RTC_HISTOGRAM_COMMON_BLOCK_SLOW(name, sample, \\ webrtc::metrics::HistogramFactoryGetCounts( \\ name, min, max, bucket_count)) #define RTC_HISTOGRAM_PERCENTAGE_SPARSE(name, sample) \\ RTC_HISTOGRAM_ENUMERATION_SPARSE(name, sample, 101) #define RTC_HISTOGRAM_BOOLEAN_SPARSE(name, sample) \\ RTC_HISTOGRAM_ENUMERATION_SPARSE(name, sample, 2) #define RTC_HISTOGRAM_ENUMERATION_SPARSE(name, sample, boundary) \\ RTC_HISTOGRAM_COMMON_BLOCK_SLOW( \\ name, sample, \\ webrtc::metrics::SparseHistogramFactoryGetEnumeration(name, boundary)) #define RTC_HISTOGRAM_PERCENTAGE(name, sample) \\ RTC_HISTOGRAM_ENUMERATION(name, sample, 101) #define RTC_HISTOGRAM_BOOLEAN(name, sample) \\ RTC_HISTOGRAM_ENUMERATION(name, sample, 2) #define RTC_HISTOGRAM_ENUMERATION(name, sample, boundary) \\ RTC_HISTOGRAM_COMMON_BLOCK_SLOW( \\ name, sample, \\ webrtc::metrics::HistogramFactoryGetEnumeration(name, boundary)) #define RTC_HISTOGRAM_COMMON_BLOCK(constant_name, sample, \\ factory_get_invocation)"
  },
  {
    "label": "atomic_histogram_pointer()",
    "kind": "Method",
    "detail": "Function (\\ std::atomic<webrtc::metrics::Histogram*>)",
    "insertText": "atomic_histogram_pointer(\\ nullptr)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::metrics::Histogram* histogram_pointer = \\ atomic_histogram_pointer .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!histogram_pointer)"
  },
  {
    "label": "compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (\\ histogram_pointer = factory_get_invocation ; \\ webrtc::metrics::Histogram* null_histogram = nullptr ; \\ atomic_histogram_pointer .)",
    "insertText": "compare_exchange_strong(null_histogram, \\ histogram_pointer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "if(histogram_pointer)"
  },
  {
    "label": "HistogramAdd()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::)",
    "insertText": "HistogramAdd(histogram_pointer, sample)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define RTC_HISTOGRAM_COMMON_BLOCK_SLOW(name, sample, factory_get_invocation)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define RTC_HISTOGRAMS_COUNTS_100(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 100, 50)) #define RTC_HISTOGRAMS_COUNTS_200(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 200, 50)) #define RTC_HISTOGRAMS_COUNTS_500(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 500, 50)) #define RTC_HISTOGRAMS_COUNTS_1000(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 1000, 50)) #define RTC_HISTOGRAMS_COUNTS_10000(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 10000, 50)) #define RTC_HISTOGRAMS_COUNTS_100000(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_COUNTS(name, sample, 1, 100000, 50)) #define RTC_HISTOGRAMS_ENUMERATION(index, name, sample, boundary) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_ENUMERATION(name, sample, boundary)) #define RTC_HISTOGRAMS_PERCENTAGE(index, name, sample) \\ RTC_HISTOGRAMS_COMMON(index, name, sample, \\ RTC_HISTOGRAM_PERCENTAGE(name, sample)) #define RTC_HISTOGRAMS_COMMON(index, name, sample, macro_invocation)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "switch(index)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (\\ case 0 : \\ macro_invocation ; \\ break ; \\ case 1 : \\ macro_invocation ; \\ break ; \\ case 2 : \\ macro_invocation ; \\ break ; \\ default : \\)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #else #define RTC_HISTOGRAM_COUNTS_100(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_200(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_500(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_1000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_10000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_100000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS(name, sample, min, max, bucket_count) \\ webrtc::metrics_impl::NoOp(name, sample, min, max, bucket_count) #define RTC_HISTOGRAM_COUNTS_LINEAR(name, sample, min, max, bucket_count) \\ webrtc::metrics_impl::NoOp(name, sample, min, max, bucket_count) #define RTC_HISTOGRAM_COUNTS_SPARSE_100(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE_200(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE_500(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE_1000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE_10000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE_100000(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_COUNTS_SPARSE(name, sample, min, max, bucket_count) \\ webrtc::metrics_impl::NoOp(name, sample, min, max, bucket_count) #define RTC_HISTOGRAM_PERCENTAGE_SPARSE(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_BOOLEAN_SPARSE(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_ENUMERATION_SPARSE(name, sample, boundary) \\ webrtc::metrics_impl::NoOp(name, sample, boundary) #define RTC_HISTOGRAM_PERCENTAGE(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_BOOLEAN(name, sample) webrtc::metrics_impl::NoOp(name, sample) #define RTC_HISTOGRAM_ENUMERATION(name, sample, boundary) \\ webrtc::metrics_impl::NoOp(name, sample, boundary) #define RTC_HISTOGRAM_COMMON_BLOCK(constant_name, sample, \\ factory_get_invocation) \\ webrtc::metrics_impl::NoOp(constant_name, sample, factory_get_invocation) #define RTC_HISTOGRAM_COMMON_BLOCK_SLOW(name, sample, factory_get_invocation) \\ webrtc::metrics_impl::NoOp(name, sample, factory_get_invocation) #define RTC_HISTOGRAMS_COUNTS_100(index, name, sample) webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COUNTS_200(index, name, sample) webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COUNTS_500(index, name, sample) webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COUNTS_1000(index, name, sample) \\ webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COUNTS_10000(index, name, sample) \\ webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COUNTS_100000(index, name, sample) \\ webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_ENUMERATION(index, name, sample, boundary) \\ webrtc::metrics_impl::NoOp(index, name, sample, boundary) #define RTC_HISTOGRAMS_PERCENTAGE(index, name, sample) webrtc::metrics_impl::NoOp(index, name, sample) #define RTC_HISTOGRAMS_COMMON(index, name, sample, macro_invocation) \\ webrtc::metrics_impl::NoOp(index, name, sample, macro_invocation)"
  },
  {
    "label": "HistogramFactoryGetCounts()",
    "kind": "Method",
    "detail": "Function (namespace metrics { int kMinRunTimeInSeconds = 1 0 ; class Histogram ; Histogram*)",
    "insertText": "HistogramFactoryGetCounts(absl::string_view name, int min, int max, int bucket_count)"
  },
  {
    "label": "HistogramFactoryGetCountsLinear()",
    "kind": "Method",
    "detail": "Function (Histogram*)",
    "insertText": "HistogramFactoryGetCountsLinear(absl::string_view name, int min, int max, int bucket_count)"
  },
  {
    "label": "HistogramFactoryGetEnumeration()",
    "kind": "Method",
    "detail": "Function (Histogram*)",
    "insertText": "HistogramFactoryGetEnumeration(absl::string_view name, int boundary)"
  },
  {
    "label": "SparseHistogramFactoryGetEnumeration()",
    "kind": "Method",
    "detail": "Function (Histogram*)",
    "insertText": "SparseHistogramFactoryGetEnumeration(absl::string_view name, int boundary)"
  },
  {
    "label": "HistogramAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramAdd(Histogram* histogram_pointer, int sample)"
  },
  {
    "label": "SampleInfo()",
    "kind": "Method",
    "detail": "Function (struct SampleInfo {)",
    "insertText": "SampleInfo(absl::string_view name, int min, int max, size_t bucket_count)"
  },
  {
    "label": "SampleInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleInfo()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (const std::string name ; const int min ; const int max ; const size_t bucket_count ; std::map<int,int> samples ; } ; void)",
    "insertText": "Enable()"
  },
  {
    "label": "GetAndReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndReset(std::map<std::string, std::unique_ptr<SampleInfo>, rtc::AbslStringViewCmp>* histograms)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "NumEvents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumEvents(absl::string_view name, int sample)"
  },
  {
    "label": "NumSamples()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumSamples(absl::string_view name)"
  },
  {
    "label": "MinSample()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MinSample(absl::string_view name)"
  },
  {
    "label": "Samples()",
    "kind": "Method",
    "detail": "Function (std::map<int,int>)",
    "insertText": "Samples(absl::string_view name)"
  }
]