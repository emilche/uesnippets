[
  {
    "label": "Flag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flag"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTargetPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetPlatformInfo"
  },
  {
    "label": "FTargetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMisc . h \" # include \" Internationalization / Text . h \" # include \" Misc / DataDrivenPlatformInfoRegistry . h \" # include \" UObject / NameTypes . h \" # if DDPI_HAS_EXTENDED_PLATFORMINFO_DATA namespace PlatformInfo { namespace EPlatformFlags { typedef uint8 Flags ; enum Flag { None = 0,BuildFlavor = 1<<0,CookFlavor = 1<<1,} ; } enum class EPlatformFilter : uint8 { All,BuildFlavor,CookFlavor,} ; struct FTargetPlatformInfo {)",
    "insertText": "FTargetPlatformInfo(const FString& InIniPlatformName, EBuildTargetType InType, const FString& InCookFlavor)"
  },
  {
    "label": "IsVanilla()",
    "kind": "Method",
    "detail": "Function (FName Name ; FName PlatformFlavor ; FText DisplayName ; EBuildTargetType PlatformType ; EPlatformFlags::Flags PlatformFlags ; FString UATCommandLine ; FName IniPlatformName ; FTargetPlatformInfo* VanillaInfo ; TArray<const FTargetPlatformInfo*> Flavors ; const FDataDrivenPlatformInfo* DataDrivenPlatformInfo ; bool)",
    "insertText": "IsVanilla()"
  },
  {
    "label": "IsFlavor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFlavor()"
  },
  {
    "label": "GetIconStyleName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetIconStyleName(const EPlatformIconSize InIconSize)"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (} } ; const FTargetPlatformInfo*)",
    "insertText": "FindPlatformInfo(const FName& InPlatformName)"
  },
  {
    "label": "FindVanillaPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const FTargetPlatformInfo*)",
    "insertText": "FindVanillaPlatformInfo(const FName& InPlatformName)"
  },
  {
    "label": "GetPlatformInfoArray()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetPlatformInfo*>&)",
    "insertText": "GetPlatformInfoArray()"
  },
  {
    "label": "GetVanillaPlatformInfoArray()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetPlatformInfo*>&)",
    "insertText": "GetVanillaPlatformInfoArray()"
  },
  {
    "label": "UpdatePlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlatformDisplayName(FString InPlatformName, FText InDisplayName)"
  },
  {
    "label": "GetAllPlatformGroupNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetAllPlatformGroupNames()"
  },
  {
    "label": "GetAllVanillaPlatformNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetAllVanillaPlatformNames()"
  }
]