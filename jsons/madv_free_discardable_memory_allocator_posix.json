[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MadvFreeDiscardableMemoryAllocatorPosix()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_MADV_FREE_DISCARDABLE_MEMORY_ALLOCATOR_POSIX_H_ # define BASE_MEMORY_MADV_FREE_DISCARDABLE_MEMORY_ALLOCATOR_POSIX_H_ # include<stddef . h> # include<atomic> # include<memory> # include \" base / base_export . h \" # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / memory / discardable_memory . h \" # include \" base / memory / discardable_memory_allocator . h \" # include \" base / memory / madv_free_discardable_memory_posix . h \" # include \" base / trace_event / base_tracing . h \" # include \" build / build_config . h \" namespace base { class BASE_EXPORT MadvFreeDiscardableMemoryAllocatorPosix : public DiscardableMemoryAllocator,public base::trace_event::MemoryDumpProvider { public :)",
    "insertText": "MadvFreeDiscardableMemoryAllocatorPosix()"
  },
  {
    "label": "MadvFreeDiscardableMemoryAllocatorPosix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MadvFreeDiscardableMemoryAllocatorPosix(const MadvFreeDiscardableMemoryAllocatorPosix&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MadvFreeDiscardableMemoryAllocatorPosix&)",
    "insertText": "operator(const MadvFreeDiscardableMemoryAllocatorPosix&)"
  },
  {
    "label": "AllocateLockedDiscardableMemory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DiscardableMemory>)",
    "insertText": "AllocateLockedDiscardableMemory(size_t size)"
  },
  {
    "label": "GetBytesAllocated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetBytesAllocated()"
  },
  {
    "label": "ReleaseFreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFreeMemory()"
  },
  {
    "label": "OnMemoryDump()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnMemoryDump(const trace_event::MemoryDumpArgs& args, trace_event::ProcessMemoryDump* pmd)"
  }
]