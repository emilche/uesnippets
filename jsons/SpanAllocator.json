[
  {
    "label": "FSpanAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpanAllocator"
  },
  {
    "label": "FLinearAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearAllocation"
  },
  {
    "label": "FSpanAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FSpanAllocator { public :)",
    "insertText": "FSpanAllocator(bool bInGrowOnly = false)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Allocate(int32 Num = 1)"
  },
  {
    "label": "SearchFreeList()",
    "kind": "Method",
    "detail": "Function (int32 FoundIndex =)",
    "insertText": "SearchFreeList(Num, FirstNonEmptySpan)"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consolidate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} CurrentSize + = Num ;)",
    "insertText": "if(FoundIndex != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FLinearAllocation FreeSpan = FreeSpans [ FoundIndex ] ; FreeSpans [ FoundIndex ] = FLinearAllocation { FreeSpan . StartOffset + Num,FreeSpan . Num - Num } ;)",
    "insertText": "if(FreeSpan.Num == Num && FirstNonEmptySpan == FoundIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FirstNonEmptySpan = FoundIndex + 1 ; } return FreeSpan . StartOffset ; } int32 StartOffset = CurrentMaxSize ; CurrentMaxSize = CurrentMaxSize + Num ; PeakMaxSize =)",
    "insertText": "Max(PeakMaxSize, CurrentMaxSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingFreeSpans .)",
    "insertText": "Add(FLinearAllocation{ BaseOffset, Num })"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CurrentSize - = Num ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetNumPendingFreeSpans()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPendingFreeSpans()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "IsFree()",
    "kind": "Method",
    "detail": "Function (} # if DO_CHECK bool)",
    "insertText": "IsFree(int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct FLinearAllocation { int32 StartOffset ; int32 Num ; bool)",
    "insertText": "operator(const FLinearAllocation& Other)"
  }
]