[
  {
    "label": "FImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImage"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FImageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImageInfo"
  },
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FImageView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImageView"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FFloat16Color",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16Color"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "FFloat16",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16"
  },
  {
    "label": "FSharedImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedImage"
  },
  {
    "label": "FMipMapImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipMapImage"
  },
  {
    "label": "FMipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipInfo"
  },
  {
    "label": "GetBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Math / Float16 . h \" # include \" Math / Float16Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" struct FImage ; namespace ERawImageFormat { enum Type : uint8 { G8,BGRA8,BGRE8,RGBA16,RGBA16F,RGBA32F,G16,R16F,R32F,MAX,Invalid = 0 xFF } ; int64)",
    "insertText": "GetBytesPerPixel(Type Format)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName(Type Format)"
  },
  {
    "label": "GetNameView()",
    "kind": "Method",
    "detail": "Function (const FUtf8StringView)",
    "insertText": "GetNameView(Type Format)"
  },
  {
    "label": "GetFormatFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFormatFromString(FUtf8StringView InString, Type& OutFormat)"
  },
  {
    "label": "IsHDR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHDR(Type Format)"
  },
  {
    "label": "HasAlphaChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAlphaChannel(Type Format)"
  },
  {
    "label": "GetOnePixelLinear()",
    "kind": "Method",
    "detail": "Function (const FLinearColor)",
    "insertText": "GetOnePixelLinear(const void * PixelData,Type Format,EGammaSpace Gamma)"
  },
  {
    "label": "GetFormatNeedsGammaSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetFormatNeedsGammaSpace(Type Format)"
  },
  {
    "label": "FImageInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageInfo(int32 InSizeX, int32 InSizeY, int32 InNumSlices, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace) : SizeX(InSizeX) , SizeY(InSizeY) , NumSlices(InNumSlices) , Format(InFormat) , GammaSpace(InGammaSpace)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FImageInfo & rhs)"
  },
  {
    "label": "GetNumPixels()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetNumPixels()"
  },
  {
    "label": "GetImageSizeBytes()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetImageSizeBytes()"
  },
  {
    "label": "GetSliceNumPixels()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetSliceNumPixels()"
  },
  {
    "label": "GetSliceSizeBytes()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetSliceSizeBytes()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetGammaSpace()",
    "kind": "Method",
    "detail": "Function (} EGammaSpace)",
    "insertText": "GetGammaSpace()"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Offset + =)",
    "insertText": "Y(int64)"
  },
  {
    "label": "GetBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (Offset + = X ; Offset* =)",
    "insertText": "GetBytesPerPixel()"
  },
  {
    "label": "ImageInfoFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImageInfoFromCompactBinary(const FCbObject& InObject)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (} ; struct FImageView : public FImageInfo { void* RawData = nullptr ;)",
    "insertText": "FImageView()"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageView(const FImageInfo & InInfo,void * InRawData) : FImageInfo(InInfo), RawData(InRawData)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageView(const FColor * InColors,int32 InSizeX,int32 InSizeY,EGammaSpace InGammaSpace = EGammaSpace::sRGB)"
  },
  {
    "label": "RawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawData(void *)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (SizeX = InSizeX ; SizeY = InSizeY ; NumSlices = 1 ; Format = ERawImageFormat::BGRA8 ; GammaSpace = InGammaSpace ; })",
    "insertText": "FImageView(const FLinearColor * InColors,int32 InSizeX,int32 InSizeY)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (SizeX = InSizeX ; SizeY = InSizeY ; NumSlices = 1 ; Format = ERawImageFormat::RGBA32F ; GammaSpace = EGammaSpace::Linear ; })",
    "insertText": "FImageView(const FFloat16Color * InColors,int32 InSizeX,int32 InSizeY)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (SizeX = InSizeX ; SizeY = InSizeY ; NumSlices = 1 ; Format = ERawImageFormat::RGBA16F ; GammaSpace = EGammaSpace::Linear ; })",
    "insertText": "FImageView(void * InData,int32 InSizeX, int32 InSizeY, int32 InNumSlices, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace) : FImageInfo(InSizeX,InSizeY,InNumSlices,InFormat,InGammaSpace), RawData(InData)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImageView(void * InData,int32 InSizeX, int32 InSizeY, ERawImageFormat::Type InFormat) : FImageInfo(InSizeX,InSizeY,1,InFormat, ERawImageFormat::GetDefaultGammaSpace(InFormat) ), RawData(InData)"
  },
  {
    "label": "GetSlice()",
    "kind": "Method",
    "detail": "Function (} FImageView)",
    "insertText": "GetSlice(int32 SliceIndex)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FImage& DestImage, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FImage& DestImage)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(DestImage,Format,GammaSpace)"
  },
  {
    "label": "GetPixelPointer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetPixelPointer(int32 X,int32 Y,int32 Slice=0)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Ptr(uint8 *)"
  },
  {
    "label": "GetPixelOffsetBytes()",
    "kind": "Method",
    "detail": "Function (Ptr + =)",
    "insertText": "GetPixelOffsetBytes(X,Y,Slice)"
  },
  {
    "label": "GetOnePixelLinear()",
    "kind": "Method",
    "detail": "Function (} const FLinearColor)",
    "insertText": "GetOnePixelLinear(int32 X,int32 Y,int32 Slice=0)"
  },
  {
    "label": "GetPixelPointer()",
    "kind": "Method",
    "detail": "Function (void* Ptr =)",
    "insertText": "GetPixelPointer(X,Y,Slice)"
  },
  {
    "label": "AsG8()",
    "kind": "Method",
    "detail": "Function (} public : TArrayView64<uint8>)",
    "insertText": "AsG8()"
  },
  {
    "label": "AsG16()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<uint16>)",
    "insertText": "AsG16()"
  },
  {
    "label": "AsBGRA8()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FColor>)",
    "insertText": "AsBGRA8()"
  },
  {
    "label": "AsBGRE8()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FColor>)",
    "insertText": "AsBGRE8()"
  },
  {
    "label": "AsRGBA16()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<uint16>)",
    "insertText": "AsRGBA16()"
  },
  {
    "label": "AsRGBA16F()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FFloat16Color>)",
    "insertText": "AsRGBA16F()"
  },
  {
    "label": "AsRGBA32F()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FLinearColor>)",
    "insertText": "AsRGBA32F()"
  },
  {
    "label": "AsR16F()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<FFloat16>)",
    "insertText": "AsR16F()"
  },
  {
    "label": "AsR32F()",
    "kind": "Method",
    "detail": "Function (} TArrayView64<float>)",
    "insertText": "AsR32F()"
  },
  {
    "label": "FImage()",
    "kind": "Method",
    "detail": "Function (} } ; struct FImage : public FImageInfo { TArray64<uint8> RawData ; public :)",
    "insertText": "FImage()"
  },
  {
    "label": "FImage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImage(int32 InSizeX, int32 InSizeY, int32 InNumSlices, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace)"
  },
  {
    "label": "FImage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImage(int32 InSizeX, int32 InSizeY, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace) : FImage(InSizeX,InSizeY,1,InFormat,InGammaSpace)"
  },
  {
    "label": "FImage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImage(int32 InSizeX, int32 InSizeY, ERawImageFormat::Type InFormat) : FImage(InSizeX,InSizeY,1,InFormat,ERawImageFormat::GetDefaultGammaSpace(InFormat))"
  },
  {
    "label": "FreeData()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "FreeData(bool bAsyncDetached)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FImage & Other)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (const FImageInfo& Info =* this ; return)",
    "insertText": "FImageView(Info , (void *) RawData.GetData())"
  },
  {
    "label": "ChangeFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeFormat(ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeTo(FImage& DestImage, int32 DestSizeX, int32 DestSizeY, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace)"
  },
  {
    "label": "Linearize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Linearize(uint8 SourceEncoding, FImage& DestImage)"
  },
  {
    "label": "Linearize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Linearize(0,DestImage)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 InSizeX, int32 InSizeY, int32 InNumSlices, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InSizeX,InSizeY,InNumSlices,InFormat,ERawImageFormat::GetDefaultGammaSpace(InFormat))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(int32 InSizeX, int32 InSizeY, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InSizeX,InSizeY,InFormat,ERawImageFormat::GetDefaultGammaSpace(InFormat))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FImageInfo & Info)"
  },
  {
    "label": "FSharedImage()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TRefCountPtr<struct FSharedImage> FSharedImageRef ; typedef TRefCountPtr<const struct FSharedImage> FSharedImageConstRef ; struct FSharedImage : public FImage,public FThreadSafeRefCountedObject {)",
    "insertText": "FSharedImage()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; struct FMipMapImage { struct FMipInfo { int32 Width = 0 ; int32 Height = 0 ; int64 Offset = 0 ; int64 Size = 0 ; } ; TArray64<uint8> RawData ; TArray<FMipInfo> SubImages ; ERawImageFormat::Type Format = ERawImageFormat::BGRA8 ; EGammaSpace GammaSpace = EGammaSpace::sRGB ; public : void)",
    "insertText": "Init(ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 MipZeroWidth, int32 MipZeroHeight, int32 NumMips, ERawImageFormat::Type InFormat, EGammaSpace InGammaSpace)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FMipMapImage& DestImage, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FMipMapImage& DestImage)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(DestImage, Format, GammaSpace)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bMipInfoValid = true ;)",
    "insertText": "for(const FMipInfo& MipInfo : SubImages)"
  },
  {
    "label": "bMipInfoValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bMipInfoValid(MipInfo.Width > 0 && MipInfo.Height > 0 && MipInfo.Size > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bMipInfoValid)"
  },
  {
    "label": "GetMipCount()",
    "kind": "Method",
    "detail": "Function (OutWidth = 0 ; OutHeight = 0 ; return false ; } OutWidth = SubImages [ MipLevel ] . Width ; OutHeight = SubImages [ MipLevel ] . Height ; return true ; } int32)",
    "insertText": "GetMipCount()"
  },
  {
    "label": "GetMipImage()",
    "kind": "Method",
    "detail": "Function (} FImageView)",
    "insertText": "GetMipImage(int32 MipLevel)"
  },
  {
    "label": "AddMipImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMipImage(TArray64<uint8>&& Buffer, int32 Width, int32 Height)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FMipInfo MipInfo ; { MipInfo . Width = Width ; MipInfo . Height = Height ; MipInfo . Offset = RawData .)",
    "insertText": "Num()"
  },
  {
    "label": "GetBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (MipInfo . Size = Width* Height*)",
    "insertText": "GetBytesPerPixel(Format)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} SubImages .)",
    "insertText": "Add(MipInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (RawData .)",
    "insertText": "Append(MoveTemp(Buffer))"
  },
  {
    "label": "ImageParallelForComputeNumJobsForPixels()",
    "kind": "Method",
    "detail": "Function (} } ; int32)",
    "insertText": "ImageParallelForComputeNumJobsForPixels(int64 & OutNumPixelsPerJob,int64 NumPixels)"
  },
  {
    "label": "ImageParallelForComputeNumJobsForRows()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ImageParallelForComputeNumJobsForRows(int32 & OutNumItemsPerJob,int64 SizeX,int64 SizeY)"
  },
  {
    "label": "CopyImage()",
    "kind": "Method",
    "detail": "Function (namespace FImageCore { void)",
    "insertText": "CopyImage(const FImageView & SrcImage,const FImageView & DestImage)"
  },
  {
    "label": "CopyImageRGBABGRA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyImageRGBABGRA(const FImageView & SrcImage,const FImageView & DestImage)"
  },
  {
    "label": "CopyImageTo2U16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyImageTo2U16(const FImageView & SrcImage,const FImageView & DestImage)"
  },
  {
    "label": "TransposeImageRGBABGRA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransposeImageRGBABGRA(const FImageView & Image)"
  },
  {
    "label": "SanitizeFloat16AndSetAlphaOpaqueForBC6H()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeFloat16AndSetAlphaOpaqueForBC6H(const FImageView & InOutImage)"
  },
  {
    "label": "DetectAlphaChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetectAlphaChannel(const FImageView & InImage)"
  },
  {
    "label": "SetAlphaOpaque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaOpaque(const FImageView & InImage)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeTo(const FImageView & SourceImage,FImage& DestImage, int32 DestSizeX, int32 DestSizeY, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace)"
  },
  {
    "label": "ComputeChannelLinearMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeChannelLinearMinMax(const FImageView & InImage, FLinearColor & OutMin, FLinearColor & OutMax)"
  },
  {
    "label": "ScaleChannelsSoMinMaxIsInZeroToOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScaleChannelsSoMinMaxIsInZeroToOne(const FImageView & ImageToModify)"
  },
  {
    "label": "ComputeImageLinearAverage()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "ComputeImageLinearAverage(const FImageView & Image)"
  },
  {
    "label": "TransformToWorkingColorSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformToWorkingColorSpace(const FImageView& InLinearImage, const FVector2d& SourceRedChromaticity, const FVector2d& SourceGreenChromaticity, const FVector2d& SourceBlueChromaticity, const FVector2d& SourceWhiteChromaticity, UE::Color::EChromaticAdaptationMethod Method, double EqualityTolerance = 1.e-7)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EResizeImageFilter : uint32 { Default = 0,PointSample,Box,Triangle,Bilinear = Triangle,CubicGaussian,CubicSharp,CubicMitchell,AdaptiveSharp,AdaptiveSmooth,MitchellOneQuarter,MitchellOneSixth,MitchellNegOneSixth,MitchellNegOneThird,Lanczos4,Lanczos5,WithoutFlagsMask = 6 3,Flag_WrapX = 6 4,Flag_WrapY = 1 2 8,Flag_AlphaWeighted = 2 5 6 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EResizeImageFilter)"
  },
  {
    "label": "ResizeImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeImage(const FImageView & SourceImage,const FImageView & DestImage, EResizeImageFilter Filter = EResizeImageFilter::Default)"
  },
  {
    "label": "ResizeImageAllocDest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeImageAllocDest(const FImageView & SourceImage,FImage & DestImage,int32 DestSizeX, int32 DestSizeY, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace, EResizeImageFilter Filter = EResizeImageFilter::Default)"
  },
  {
    "label": "ResizeImageAllocDest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeImageAllocDest(const FImageView & SourceImage,FImage & DestImage,int32 DestSizeX, int32 DestSizeY, EResizeImageFilter Filter = EResizeImageFilter::Default)"
  },
  {
    "label": "ResizeImageInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeImageInPlace(FImage & Image,int32 DestSizeX, int32 DestSizeY, ERawImageFormat::Type DestFormat, EGammaSpace DestGammaSpace, EResizeImageFilter Filter = EResizeImageFilter::Default)"
  },
  {
    "label": "ResizeImageInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeImageInPlace(FImage & Image,int32 DestSizeX, int32 DestSizeY, EResizeImageFilter Filter = EResizeImageFilter::Default)"
  }
]