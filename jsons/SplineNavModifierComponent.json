[
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USplineNavModifierComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineNavModifierComponent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NavModifierComponent . h \" # include \" SplineNavModifierComponent . generated . h \" # define INVALID_SPLINE_VERSION MIN_int32 struct FNavigationRelevantData ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Low,Medium,High,Ultra,} ;)",
    "insertText": "UCLASS(Blueprintable, MinimalAPI, Meta = (BlueprintSpawnableComponent), hidecategories = (Variable, Tags, Cooking, Collision))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Navigation)"
  },
  {
    "label": "USplineNavModifierComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USplineNavModifierComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITORONLY_DATA void)",
    "insertText": "TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "IsComponentTickEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentTickEnabled()"
  },
  {
    "label": "CalculateBounds()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CalculateBounds()"
  },
  {
    "label": "GetNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavigationData(FNavigationRelevantData& Data)"
  },
  {
    "label": "GetSubdivisionThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSubdivisionThreshold()"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITORONLY_DATA uint32 SplineVersion = INVALID_SPLINE_VERSION ; # endif FTransform SplineTransform =)",
    "insertText": "FTransform()"
  }
]