[
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "IAsyncTaskNotificationImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncTaskNotificationImpl"
  },
  {
    "label": "FCoreAsyncTaskNotificationImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoreAsyncTaskNotificationImpl"
  },
  {
    "label": "FAsyncTaskNotificationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskNotificationFactory"
  },
  {
    "label": "FAsyncTaskNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskNotification"
  },
  {
    "label": "IAsyncTaskNotificationImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" Internationalization / Text . h \" # include \" Misc / AsyncTaskNotification . h \" # include \" Misc / Attribute . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" UObject / NameTypes . h \" struct FLogCategoryBase ; class IAsyncTaskNotificationImpl { public : ~)",
    "insertText": "IAsyncTaskNotificationImpl()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FAsyncTaskNotificationConfig& InConfig)"
  },
  {
    "label": "SetTitleText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitleText(const FText& InTitleText, const bool bClearProgressText)"
  },
  {
    "label": "SetProgressText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgressText(const FText& InProgressText)"
  },
  {
    "label": "SetPromptText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPromptText(const FText& InPromptText)"
  },
  {
    "label": "SetHyperlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHyperlink(const FSimpleDelegate& InHyperlink, const FText& InHyperlinkText)"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete(const bool bSuccess)"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete(const FText& InTitleText, const FText& InProgressText, const bool bSuccess)"
  },
  {
    "label": "SetNotificationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotificationState(const FAsyncNotificationStateData& InState)"
  },
  {
    "label": "SetCanCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanCancel(const TAttribute<bool>& InCanCancel)"
  },
  {
    "label": "SetKeepOpenOnSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepOpenOnSuccess(const TAttribute<bool>& InKeepOpenOnSuccess)"
  },
  {
    "label": "SetKeepOpenOnFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepOpenOnFailure(const TAttribute<bool>& InKeepOpenOnFailure)"
  },
  {
    "label": "GetPromptAction()",
    "kind": "Method",
    "detail": "Function (EAsyncTaskNotificationPromptAction)",
    "insertText": "GetPromptAction()"
  },
  {
    "label": "FCoreAsyncTaskNotificationImpl()",
    "kind": "Method",
    "detail": "Function (} ; class FCoreAsyncTaskNotificationImpl : public IAsyncTaskNotificationImpl { public :)",
    "insertText": "FCoreAsyncTaskNotificationImpl()"
  },
  {
    "label": "UpdateNotification()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateNotification()"
  },
  {
    "label": "LogNotification()",
    "kind": "Method",
    "detail": "Function (EAsyncTaskNotificationState State = EAsyncTaskNotificationState::Pending ; FText TitleText ; FText ProgressText ; FText PromptText ; FSimpleDelegate Hyperlink ; FText HyperlinkText ; private : void)",
    "insertText": "LogNotification()"
  },
  {
    "label": "FImplPointerType()",
    "kind": "Method",
    "detail": "Function (const FLogCategoryBase* LogCategory = nullptr ; FCriticalSection SynchronizationObject ; } ; class FAsyncTaskNotificationFactory { class FAsyncTaskNotification ; public : typedef TSharedPtr<IAsyncTaskNotificationImpl> FImplPointerType ; typedef TFunction<)",
    "insertText": "FImplPointerType()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FAsyncTaskNotificationFactory&)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFactory(const FName InName, const FFactoryFunc& InFunc)"
  },
  {
    "label": "UnregisterFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFactory(const FName InName)"
  },
  {
    "label": "InvokeFactory()",
    "kind": "Method",
    "detail": "Function (private : FImplPointerType)",
    "insertText": "InvokeFactory()"
  }
]