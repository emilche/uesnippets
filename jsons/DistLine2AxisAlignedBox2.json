[
  {
    "label": "TDistLine2AxisAlignedBox2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistLine2AxisAlignedBox2"
  },
  {
    "label": "TDistLine2AxisAlignedBox2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StaticArray . h \" # include \" LineTypes . h \" # include \" Math / Box2D . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistLine2AxisAlignedBox2 { public : TLine2<Real> Line ; TBox2<Real> AxisAlignedBox ; Real ResultDistanceSquared = - 1 . 0 ; TVector2<Real> BoxClosest,LineClosest ; Real LineParameter ;)",
    "insertText": "TDistLine2AxisAlignedBox2(const TLine2<Real> LineIn, const TBox2<Real>& AxisAlignedBoxIn) : Line(LineIn), AxisAlignedBox(AxisAlignedBoxIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> boxExtent = AxisAlignedBox .)",
    "insertText": "GetExtent()"
  },
  {
    "label": "DoQuery()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> origin = Line . Origin - boxCenter ; TVector2<Real> direction = Line . Direction ;)",
    "insertText": "DoQuery(origin, direction, boxExtent, BoxClosest, LineClosest, LineParameter)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (BoxClosest + = boxCenter ; LineClosest + = boxCenter ; ResultDistanceSquared =)",
    "insertText": "DistanceSquared(BoxClosest, LineClosest)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (Real const zero = static_cast<)",
    "insertText": "Real(0)"
  },
  {
    "label": "reflect()",
    "kind": "Method",
    "detail": "Function (TStaticArray<bool,2>)",
    "insertText": "reflect(InPlace, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (origin [ i ] = - origin [ i ] ; direction [ i ] = - direction [ i ] ; reflect [ i ] = true ; } })",
    "insertText": "if(direction[0] > zero)"
  },
  {
    "label": "DoQuery1D()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DoQuery1D(0, 1, origin, direction, boxExtent, BoxClosest, LineClosest, LineParameter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(direction[1] > zero)"
  },
  {
    "label": "DoQuery0D()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DoQuery0D(origin, boxExtent, BoxClosest, LineClosest, LineParameter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } LineClosest = origin + LineParameter* direction ;)",
    "insertText": "for(int32_t i = 0; i < 2; ++i)"
  },
  {
    "label": "DoQuery2D()",
    "kind": "Method",
    "detail": "Function (BoxClosest [ i ] = - BoxClosest [ i ] ; LineClosest [ i ] = - LineClosest [ i ] ; } } } void)",
    "insertText": "DoQuery2D(TVector2<Real> const& origin, TVector2<Real> const& direction, TVector2<Real> const& extent, TVector2<Real>& BoxClosest, TVector2<Real>& LineClosest, Real& LineParameter)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> K0 { - extent [ 0 ],extent [ 1 ] } ; TVector2<Real> delta = K0 - origin ; Real K0dotPerpD =)",
    "insertText": "DotPerp(delta, direction)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (LineParameter = delta .)",
    "insertText": "Dot(direction) / direction.Dot(direction)"
  },
  {
    "label": "LineParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LineParameter(extent[1] - origin[1])"
  },
  {
    "label": "LineParameter()",
    "kind": "Method",
    "detail": "Function (LineClosest = origin + LineParameter* direction ; BoxClosest [ 0 ] = origin [ 0 ] + LineParameter* direction [ 0 ] ; BoxClosest [ 1 ] = extent [ 1 ] ; } else {)",
    "insertText": "LineParameter(extent[0] - origin[0])"
  },
  {
    "label": "DoQuery1D()",
    "kind": "Method",
    "detail": "Function (LineClosest = origin + LineParameter* direction ; BoxClosest [ 0 ] = extent [ 0 ] ; BoxClosest [ 1 ] = origin [ 1 ] + LineParameter* direction [ 1 ] ; } } } } void)",
    "insertText": "DoQuery1D(int32_t i0, int32_t i1, TVector2<Real> const& origin, TVector2<Real> const& direction, TVector2<Real> const& extent, TVector2<Real>& BoxClosest, TVector2<Real>& LineClosest, Real& LineParameter)"
  },
  {
    "label": "LineParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LineParameter(extent[i0] - origin[i0])"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (LineClosest = origin + LineParameter* direction ; BoxClosest [ i0 ] = extent [ i0 ] ; BoxClosest [ i1 ] =)",
    "insertText": "Clamp(origin[i1], -extent[i1], extent[i1])"
  },
  {
    "label": "DoQuery0D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoQuery0D(TVector2<Real> const& origin, TVector2<Real> const& extent, TVector2<Real>& BoxClosest, TVector2<Real>& LineClosest, Real& LineParameter)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (LineClosest = origin ; BoxClosest [ 0 ] =)",
    "insertText": "Clamp(origin[0], -extent[0], extent[0])"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (BoxClosest [ 1 ] =)",
    "insertText": "Clamp(origin[1], -extent[1], extent[1])"
  }
]