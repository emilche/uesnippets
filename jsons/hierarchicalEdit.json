[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrHierarchicalEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrHierarchicalEdit"
  },
  {
    "label": "HbrFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFace"
  },
  {
    "label": "HbrVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrVertex"
  },
  {
    "label": "Operation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Operation"
  },
  {
    "label": "bbox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bbox"
  },
  {
    "label": "HbrHierarchicalEditComparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrHierarchicalEditComparator"
  },
  {
    "label": "HbrHierarchicalEdit()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRHIERARCHICALEDIT_H # define OPENSUBDIV3_HBRHIERARCHICALEDIT_H # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrHierarchicalEdit ; template<class T> class HbrFace ; template<class T> class HbrVertex ; template<class T> class HbrHierarchicalEdit { public : typedef enum Operation { Set,Add,Subtract } Operation ; protected :)",
    "insertText": "HbrHierarchicalEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces) : faceid(_faceid), nsubfaces(_nsubfaces)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (subfaces = new unsigned char [ _nsubfaces ] ;)",
    "insertText": "for(int i = 0; i < nsubfaces; ++i)"
  },
  {
    "label": "HbrHierarchicalEdit()",
    "kind": "Method",
    "detail": "Function (subfaces [ i ] = _subfaces [ i ] ; } })",
    "insertText": "HbrHierarchicalEdit(int _faceid, int _nsubfaces, int *_subfaces) : faceid(_faceid), nsubfaces(_nsubfaces)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (subfaces [ i ] = static_cast<unsigned)",
    "insertText": "char(_subfaces[i])"
  },
  {
    "label": "HbrHierarchicalEdit()",
    "kind": "Method",
    "detail": "Function (} } public : ~)",
    "insertText": "HbrHierarchicalEdit()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] subfaces ; } bool)",
    "insertText": "operator(const HbrHierarchicalEdit& p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int minlength = nsubfaces ;)",
    "insertText": "if(minlength > p.nsubfaces)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(nsubfaces < p.nsubfaces)"
  },
  {
    "label": "GetFaceID()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetFaceID()"
  },
  {
    "label": "ApplyEditToFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEditToFace(HbrFace<T>*)"
  },
  {
    "label": "ApplyEditToVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyEditToVertex(HbrFace<T>* , HbrVertex<T>*)"
  },
  {
    "label": "ApplyToBound()",
    "kind": "Method",
    "detail": "Function (} # ifdef PRMAN void)",
    "insertText": "ApplyToBound(struct bbox& , RtMatrix *)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif protected : const int faceid ; const int nsubfaces ; unsigned char* subfaces ; } ; template<class T> class HbrHierarchicalEditComparator { public : bool)",
    "insertText": "operator() (const HbrHierarchicalEdit<T>* path1, const HbrHierarchicalEdit<T>* path2)"
  },
  {
    "label": "IsRelevantToFace()",
    "kind": "Method",
    "detail": "Function (} } ; } using namespace OPENSUBDIV_VERSION ; } # include \" . . / hbr / face . h \" # include<cstring> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> bool HbrHierarchicalEdit<T)",
    "insertText": "IsRelevantToFace(HbrFace<T>* face)"
  },
  {
    "label": "GetHierarchicalEdits()",
    "kind": "Method",
    "detail": "Function (HbrHierarchicalEdit<T>* p =* face ->)",
    "insertText": "GetHierarchicalEdits()"
  }
]