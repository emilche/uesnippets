[
  {
    "label": "ECollectionStorageMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECollectionStorageMode"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ECollectionShareType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECollectionShareType"
  },
  {
    "label": "ECollectionRecursionFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECollectionRecursionFlags"
  },
  {
    "label": "Flag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flag"
  },
  {
    "label": "FCollectionNameType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionNameType"
  },
  {
    "label": "FCollectionStatusInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionStatusInfo"
  },
  {
    "label": "ICollectionRedirectorFollower",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICollectionRedirectorFollower"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / SoftObjectPath . h \" # include \" ISourceControlState . h \" struct ECollectionStorageMode { enum Type {,Dynamic,} ; Type)",
    "insertText": "FromString(const TCHAR* InString, const Type ReturnIfConversionFails = Static)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : break ; } return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "ToText(const Type InType)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (default : break ; } return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDescription(const Type InType)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} } ; struct ECollectionShareType { enum Type { CST_System,CST_Local,CST_Private,CST_Shared,CST_All } ; Type)",
    "insertText": "FromString(const TCHAR* InString, const Type ReturnIfConversionFails = CST_All)"
  },
  {
    "label": "GetIconStyleName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetIconStyleName(const Type InType, const TCHAR* InSizeSuffix = TEXT(\".Small\"))"
  },
  {
    "label": "IsValidChildType()",
    "kind": "Method",
    "detail": "Function (default : break ; } return NAME_None ; } bool)",
    "insertText": "IsValidChildType(const Type InParentType, const Type InChildType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollectionNameType& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FCollectionNameType& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Name))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Type))"
  },
  {
    "label": "FixupObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FixupObject(const FSoftObjectPath& InObjectPath, FSoftObjectPath& OutNewObjectPath)"
  }
]