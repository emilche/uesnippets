[
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "FBTConditionalLoopDecoratorMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTConditionalLoopDecoratorMemory"
  },
  {
    "label": "UBTDecorator_ConditionalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTDecorator_ConditionalLoop"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" InputCoreTypes . h \" # include \" BehaviorTree / Decorators / BTDecorator_Blackboard . h \" # include \" BTDecorator_ConditionalLoop . generated . h \" class UBlackboardComponent ; struct FBTConditionalLoopDecoratorMemory { int32 SearchId ; } ;)",
    "insertText": "UCLASS(HideCategories=(FlowControl), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual bool CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "OnBlackboardKeyValueChange()",
    "kind": "Method",
    "detail": "Function (EBlackboardNotificationResult)",
    "insertText": "OnBlackboardKeyValueChange(const UBlackboardComponent& Blackboard, FBlackboard::FKey ChangedKeyID)"
  },
  {
    "label": "OnNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type NodeResult)"
  },
  {
    "label": "GetInstanceMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetInstanceMemorySize()"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName)",
    "insertText": "GetNodeIconName()"
  }
]