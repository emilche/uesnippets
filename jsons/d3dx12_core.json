[
  {
    "label": "CD3DX12_RANGE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RANGE"
  },
  {
    "label": "CD3DX12_RANGE_UINT64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RANGE_UINT64"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SHADER_BYTECODE"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILE_REGION_SIZE"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_TILING"
  },
  {
    "label": "CD3DX12_TILE_SHAPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TILE_SHAPE"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_PACKED_MIP_INFO"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RESOURCE_DESC"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RESOURCE_DESC1"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (/)",
    "insertText": "memcpy(&DepthStencil.Depth, &depth, sizeof( depth ))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DepthStencil . Stencil = stencil ; } } ; bool)",
    "insertText": "operator(const D3D12_CLEAR_VALUE &a, const D3D12_CLEAR_VALUE &b)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(a.Color[0] == b.Color[0]) && (a.Color[1] == b.Color[1]) && (a.Color[2] == b.Color[2]) && (a.Color[3] == b.Color[3])"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (} } struct CD3DX12_RANGE : public D3D12_RANGE {)",
    "insertText": "CD3DX12_RANGE()"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RANGE(const D3D12_RANGE &o) noexcept : D3D12_RANGE(o)"
  },
  {
    "label": "CD3DX12_RANGE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RANGE(SIZE_T begin, SIZE_T end)"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Begin = begin ; End = end ; } } ; struct CD3DX12_RANGE_UINT64 : public D3D12_RANGE_UINT64 {)",
    "insertText": "CD3DX12_RANGE_UINT64()"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RANGE_UINT64(const D3D12_RANGE_UINT64 &o) noexcept : D3D12_RANGE_UINT64(o)"
  },
  {
    "label": "CD3DX12_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RANGE_UINT64(UINT64 begin, UINT64 end)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Begin = begin ; End = end ; } } ; struct CD3DX12_SUBRESOURCE_RANGE_UINT64 : public D3D12_SUBRESOURCE_RANGE_UINT64 {)",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(const D3D12_SUBRESOURCE_RANGE_UINT64 &o) noexcept : D3D12_SUBRESOURCE_RANGE_UINT64(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(UINT subresource, const D3D12_RANGE_UINT64& range)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_RANGE_UINT64()",
    "kind": "Method",
    "detail": "Function (Subresource = subresource ; Range = range ; })",
    "insertText": "CD3DX12_SUBRESOURCE_RANGE_UINT64(UINT subresource, UINT64 begin, UINT64 end)"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (Subresource = subresource ; Range . Begin = begin ; Range . End = end ; } } ; struct CD3DX12_SHADER_BYTECODE : public D3D12_SHADER_BYTECODE {)",
    "insertText": "CD3DX12_SHADER_BYTECODE()"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SHADER_BYTECODE(const D3D12_SHADER_BYTECODE &o) noexcept : D3D12_SHADER_BYTECODE(o)"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SHADER_BYTECODE(_In_ ID3DBlob* pShaderBlob)"
  },
  {
    "label": "GetBufferPointer()",
    "kind": "Method",
    "detail": "Function (pShaderBytecode = pShaderBlob ->)",
    "insertText": "GetBufferPointer()"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (BytecodeLength = pShaderBlob ->)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "CD3DX12_SHADER_BYTECODE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SHADER_BYTECODE(const void* _pShaderBytecode, SIZE_T bytecodeLength)"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (pShaderBytecode = _pShaderBytecode ; BytecodeLength = bytecodeLength ; } } ; struct CD3DX12_TILED_RESOURCE_COORDINATE : public D3D12_TILED_RESOURCE_COORDINATE {)",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE()"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE(const D3D12_TILED_RESOURCE_COORDINATE &o) noexcept : D3D12_TILED_RESOURCE_COORDINATE(o)"
  },
  {
    "label": "CD3DX12_TILED_RESOURCE_COORDINATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILED_RESOURCE_COORDINATE(UINT x, UINT y, UINT z, UINT subresource)"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (X = x ; Y = y ; Z = z ; Subresource = subresource ; } } ; struct CD3DX12_TILE_REGION_SIZE : public D3D12_TILE_REGION_SIZE {)",
    "insertText": "CD3DX12_TILE_REGION_SIZE()"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILE_REGION_SIZE(const D3D12_TILE_REGION_SIZE &o) noexcept : D3D12_TILE_REGION_SIZE(o)"
  },
  {
    "label": "CD3DX12_TILE_REGION_SIZE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILE_REGION_SIZE(UINT numTiles, BOOL useBox, UINT width, UINT16 height, UINT16 depth)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (NumTiles = numTiles ; UseBox = useBox ; Width = width ; Height = height ; Depth = depth ; } } ; struct CD3DX12_SUBRESOURCE_TILING : public D3D12_SUBRESOURCE_TILING {)",
    "insertText": "CD3DX12_SUBRESOURCE_TILING()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_TILING(const D3D12_SUBRESOURCE_TILING &o) noexcept : D3D12_SUBRESOURCE_TILING(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_TILING()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_TILING(UINT widthInTiles, UINT16 heightInTiles, UINT16 depthInTiles, UINT startTileIndexInOverallResource)"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (WidthInTiles = widthInTiles ; HeightInTiles = heightInTiles ; DepthInTiles = depthInTiles ; StartTileIndexInOverallResource = startTileIndexInOverallResource ; } } ; struct CD3DX12_TILE_SHAPE : public D3D12_TILE_SHAPE {)",
    "insertText": "CD3DX12_TILE_SHAPE()"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TILE_SHAPE(const D3D12_TILE_SHAPE &o) noexcept : D3D12_TILE_SHAPE(o)"
  },
  {
    "label": "CD3DX12_TILE_SHAPE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TILE_SHAPE(UINT widthInTexels, UINT heightInTexels, UINT depthInTexels)"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (WidthInTexels = widthInTexels ; HeightInTexels = heightInTexels ; DepthInTexels = depthInTexels ; } } ; struct CD3DX12_PACKED_MIP_INFO : public D3D12_PACKED_MIP_INFO {)",
    "insertText": "CD3DX12_PACKED_MIP_INFO()"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_PACKED_MIP_INFO(const D3D12_PACKED_MIP_INFO &o) noexcept : D3D12_PACKED_MIP_INFO(o)"
  },
  {
    "label": "CD3DX12_PACKED_MIP_INFO()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_PACKED_MIP_INFO(UINT8 numStandardMips, UINT8 numPackedMips, UINT numTilesForPackedMips, UINT startTileIndexInOverallResource)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (NumStandardMips = numStandardMips ; NumPackedMips = numPackedMips ; NumTilesForPackedMips = numTilesForPackedMips ; StartTileIndexInOverallResource = startTileIndexInOverallResource ; } } ; struct CD3DX12_SUBRESOURCE_FOOTPRINT : public D3D12_SUBRESOURCE_FOOTPRINT {)",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT()"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT(const D3D12_SUBRESOURCE_FOOTPRINT &o) noexcept : D3D12_SUBRESOURCE_FOOTPRINT(o)"
  },
  {
    "label": "CD3DX12_SUBRESOURCE_FOOTPRINT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_SUBRESOURCE_FOOTPRINT(DXGI_FORMAT format, UINT width, UINT height, UINT depth, UINT rowPitch)"
  },
  {
    "label": "Depth()",
    "kind": "Method",
    "detail": "Function (Height = resDesc . Height ;)",
    "insertText": "Depth(resDesc.Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE3D ? resDesc.DepthOrArraySize : 1u)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (RowPitch = rowPitch ; } } ; struct CD3DX12_TEXTURE_COPY_LOCATION : public D3D12_TEXTURE_COPY_LOCATION {)",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION()"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(const D3D12_TEXTURE_COPY_LOCATION &o) noexcept : D3D12_TEXTURE_COPY_LOCATION(o)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource* pRes)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX ; PlacedFootprint = { } ; })",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource* pRes, D3D12_PLACED_SUBRESOURCE_FOOTPRINT const& Footprint)"
  },
  {
    "label": "CD3DX12_TEXTURE_COPY_LOCATION()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT ; PlacedFootprint = Footprint ; })",
    "insertText": "CD3DX12_TEXTURE_COPY_LOCATION(_In_ ID3D12Resource* pRes, UINT Sub)"
  },
  {
    "label": "D3D12CalcSubresource()",
    "kind": "Method",
    "detail": "Function (pResource = pRes ; Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX ; PlacedFootprint = { } ; SubresourceIndex = Sub ; } } ; UINT)",
    "insertText": "D3D12CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT PlaneSlice, UINT MipLevels, UINT ArraySize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (D3D12_FEATURE_DATA_FORMAT_INFO formatInfo = { Format,0 } ;)",
    "insertText": "if(FAILED(pDevice->CheckFeatureSupport(D3D12_FEATURE_FORMAT_INFO, &formatInfo, sizeof(formatInfo))))"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RESOURCE_DESC(const D3D12_RESOURCE_DESC& o ) noexcept : D3D12_RESOURCE_DESC( o)"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RESOURCE_DESC(D3D12_RESOURCE_DIMENSION dimension, UINT64 alignment, UINT64 width, UINT height, UINT16 depthOrArraySize, UINT16 mipLevels, DXGI_FORMAT format, UINT sampleCount, UINT sampleQuality, D3D12_TEXTURE_LAYOUT layout, D3D12_RESOURCE_FLAGS flags)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (Dimension = dimension ; Alignment = alignment ; Width = width ; Height = height ; DepthOrArraySize = depthOrArraySize ; MipLevels = mipLevels ; Format = format ; SampleDesc . Count = sampleCount ; SampleDesc . Quality = sampleQuality ; Layout = layout ; Flags = flags ; } CD3DX12_RESOURCE_DESC)",
    "insertText": "Buffer(const D3D12_RESOURCE_ALLOCATION_INFO& resAllocInfo, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE)"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Buffer(UINT64 width, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, UINT64 alignment = 0)"
  },
  {
    "label": "Tex1D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex1D(DXGI_FORMAT format, UINT64 width, UINT16 arraySize = 1, UINT16 mipLevels = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Tex2D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex2D(DXGI_FORMAT format, UINT64 width, UINT height, UINT16 arraySize = 1, UINT16 mipLevels = 0, UINT sampleCount = 1, UINT sampleQuality = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Tex3D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC)",
    "insertText": "Tex3D(DXGI_FORMAT format, UINT64 width, UINT height, UINT16 depth, UINT16 mipLevels = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0)"
  },
  {
    "label": "Depth()",
    "kind": "Method",
    "detail": "Function (} UINT16)",
    "insertText": "Depth()"
  },
  {
    "label": "ArraySize()",
    "kind": "Method",
    "detail": "Function (} UINT16)",
    "insertText": "ArraySize()"
  },
  {
    "label": "PlaneCount()",
    "kind": "Method",
    "detail": "Function (} UINT8)",
    "insertText": "PlaneCount(_In_ ID3D12Device* pDevice)"
  },
  {
    "label": "Subresources()",
    "kind": "Method",
    "detail": "Function (} UINT)",
    "insertText": "Subresources(_In_ ID3D12Device* pDevice)"
  },
  {
    "label": "CalcSubresource()",
    "kind": "Method",
    "detail": "Function (} UINT)",
    "insertText": "CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT PlaneSlice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const D3D12_RESOURCE_DESC& l, const D3D12_RESOURCE_DESC& r)"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC1()",
    "kind": "Method",
    "detail": "Function (} struct CD3DX12_RESOURCE_DESC1 : public D3D12_RESOURCE_DESC1 {)",
    "insertText": "CD3DX12_RESOURCE_DESC1()"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RESOURCE_DESC1(const D3D12_RESOURCE_DESC1& o ) noexcept : D3D12_RESOURCE_DESC1( o)"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RESOURCE_DESC1(const D3D12_RESOURCE_DESC& o)"
  },
  {
    "label": "CD3DX12_RESOURCE_DESC1()",
    "kind": "Method",
    "detail": "Function (Dimension = o . Dimension ; Alignment = o . Alignment ; Width = o . Width ; Height = o . Height ; DepthOrArraySize = o . DepthOrArraySize ; MipLevels = o . MipLevels ; Format = o . Format ; SampleDesc = o . SampleDesc ; Layout = o . Layout ; Flags = o . Flags ; SamplerFeedbackMipRegion = { } ; })",
    "insertText": "CD3DX12_RESOURCE_DESC1(D3D12_RESOURCE_DIMENSION dimension, UINT64 alignment, UINT64 width, UINT height, UINT16 depthOrArraySize, UINT16 mipLevels, DXGI_FORMAT format, UINT sampleCount, UINT sampleQuality, D3D12_TEXTURE_LAYOUT layout, D3D12_RESOURCE_FLAGS flags, UINT samplerFeedbackMipRegionWidth = 0, UINT samplerFeedbackMipRegionHeight = 0, UINT samplerFeedbackMipRegionDepth = 0)"
  },
  {
    "label": "Tex2D()",
    "kind": "Method",
    "detail": "Function (} CD3DX12_RESOURCE_DESC1)",
    "insertText": "Tex2D(DXGI_FORMAT format, UINT64 width, UINT height, UINT16 arraySize = 1, UINT16 mipLevels = 0, UINT sampleCount = 1, UINT sampleQuality = 0, D3D12_RESOURCE_FLAGS flags = D3D12_RESOURCE_FLAG_NONE, D3D12_TEXTURE_LAYOUT layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, UINT64 alignment = 0, UINT samplerFeedbackMipRegionWidth = 0, UINT samplerFeedbackMipRegionHeight = 0, UINT samplerFeedbackMipRegionDepth = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const D3D12_RESOURCE_DESC1& l, const D3D12_RESOURCE_DESC1& r)"
  },
  {
    "label": "D3DX12ConditionallyExpandAPIDesc()",
    "kind": "Method",
    "detail": "Function (} const CD3DX12_RESOURCE_DESC1*)",
    "insertText": "D3DX12ConditionallyExpandAPIDesc(CD3DX12_RESOURCE_DESC1& LclDesc, const CD3DX12_RESOURCE_DESC1* pDesc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LclDesc =* pDesc ;)",
    "insertText": "if(pDesc->MipLevels == 0)"
  },
  {
    "label": "MaxMipLevels()",
    "kind": "Method",
    "detail": "Function (UINT16)",
    "insertText": "MaxMipLevels(UINT64 uiMaxDimension)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (UINT16 uiRet = 0 ;)",
    "insertText": "while(uiMaxDimension > 0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uiRet + + ; uiMaxDimension>> = 1 ; } return uiRet ; } ; auto)",
    "insertText": "Max(UINT64 const & a, UINT64 const & b)"
  },
  {
    "label": "MaxMipLevels()",
    "kind": "Method",
    "detail": "Function (} ; LclDesc . MipLevels =)",
    "insertText": "MaxMipLevels(Max(LclDesc.Dimension == D3D12_RESOURCE_DIMENSION_TEXTURE3D ? LclDesc.DepthOrArraySize : 1, Max(LclDesc.Width, LclDesc.Height)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pDesc->Alignment == 0)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (LclDesc . Alignment = D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT ; } else { LclDesc .)",
    "insertText": "Alignment(pDesc->SampleDesc.Count > 1 ? D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT : D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (} } return& LclDesc ; } else { return pDesc ; } } struct CD3DX12_VIEW_INSTANCING_DESC : public D3D12_VIEW_INSTANCING_DESC {)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC()"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(const D3D12_VIEW_INSTANCING_DESC& o ) noexcept : D3D12_VIEW_INSTANCING_DESC( o)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(CD3DX12_DEFAULT)"
  },
  {
    "label": "CD3DX12_VIEW_INSTANCING_DESC()",
    "kind": "Method",
    "detail": "Function (ViewInstanceCount = 0 ; pViewInstanceLocations = nullptr ; Flags = D3D12_VIEW_INSTANCING_FLAG_NONE ; })",
    "insertText": "CD3DX12_VIEW_INSTANCING_DESC(UINT InViewInstanceCount, const D3D12_VIEW_INSTANCE_LOCATION* InViewInstanceLocations, D3D12_VIEW_INSTANCING_FLAGS InFlags)"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (ViewInstanceCount = InViewInstanceCount ; pViewInstanceLocations = InViewInstanceLocations ; Flags = InFlags ; } } ; struct CD3DX12_RT_FORMAT_ARRAY : public D3D12_RT_FORMAT_ARRAY {)",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY()"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY(const D3D12_RT_FORMAT_ARRAY& o) noexcept : D3D12_RT_FORMAT_ARRAY(o)"
  },
  {
    "label": "CD3DX12_RT_FORMAT_ARRAY()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CD3DX12_RT_FORMAT_ARRAY(_In_reads_(NumFormats) const DXGI_FORMAT* pFormats, UINT NumFormats)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (NumRenderTargets = NumFormats ;)",
    "insertText": "memcpy(RTFormats, pFormats, sizeof(RTFormats))"
  }
]