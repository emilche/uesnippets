[
  {
    "label": "ClosureContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClosureContext"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GenContext()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_GENCONTEXT_H # define MATERIALX_GENCONTEXT_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / GenOptions . h> # include<MaterialXGenShader / GenUserData . h> # include<MaterialXGenShader / ShaderNode . h> # include<MaterialXFormat / File . h> MATERIALX_NAMESPACE_BEGIN class ClosureContext ; class GenContext { public :)",
    "insertText": "GenContext(ShaderGeneratorPtr sg)"
  },
  {
    "label": "getShaderGenerator()",
    "kind": "Method",
    "detail": "Function (ShaderGenerator&)",
    "insertText": "getShaderGenerator()"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (_sourceCodeSearchPath .)",
    "insertText": "append(path)"
  },
  {
    "label": "registerSourceCodeSearchPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "registerSourceCodeSearchPath(const FileSearchPath& path)"
  },
  {
    "label": "resolveSourceFile()",
    "kind": "Method",
    "detail": "Function (} FilePath)",
    "insertText": "resolveSourceFile(const FilePath& filename, const FilePath& localPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FileSearchPath searchPath = _sourceCodeSearchPath ;)",
    "insertText": "if(!localPath.isEmpty())"
  },
  {
    "label": "prepend()",
    "kind": "Method",
    "detail": "Function (searchPath .)",
    "insertText": "prepend(localPath)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} return searchPath .)",
    "insertText": "find(filename).getNormalized()"
  },
  {
    "label": "addReservedWords()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addReservedWords(const StringSet& names)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (_reservedWords .)",
    "insertText": "insert(names.begin(), names.end())"
  },
  {
    "label": "getReservedWords()",
    "kind": "Method",
    "detail": "Function (} const StringSet&)",
    "insertText": "getReservedWords()"
  },
  {
    "label": "findNodeImplementation()",
    "kind": "Method",
    "detail": "Function (ShaderNodeImplPtr)",
    "insertText": "findNodeImplementation(const string& name)"
  },
  {
    "label": "getNodeImplementationNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodeImplementationNames(StringSet& names)"
  },
  {
    "label": "clearNodeImplementations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearNodeImplementations()"
  },
  {
    "label": "pushClosureContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pushClosureContext(ClosureContext* cct)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (_closureContexts .)",
    "insertText": "push_back(cct)"
  },
  {
    "label": "popClosureContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "popClosureContext()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (_closureContexts .)",
    "insertText": "pop_back()"
  },
  {
    "label": "getClosureContext()",
    "kind": "Method",
    "detail": "Function (} } ClosureContext*)",
    "insertText": "getClosureContext()"
  },
  {
    "label": "pushUserData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pushUserData(const string& name, GenUserDataPtr data)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = _userData .)",
    "insertText": "find(name)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (it -> second .)",
    "insertText": "push_back(data)"
  },
  {
    "label": "popUserData()",
    "kind": "Method",
    "detail": "Function (} else { _userData [ name ] = { data } ; } } void)",
    "insertText": "popUserData(const string& name)"
  },
  {
    "label": "clearUserData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "clearUserData()"
  },
  {
    "label": "getUserData()",
    "kind": "Method",
    "detail": "Function (template<class T> std::shared_ptr<T>)",
    "insertText": "getUserData(const string& name)"
  },
  {
    "label": "addInputSuffix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addInputSuffix(const ShaderInput* input, const string& suffix)"
  },
  {
    "label": "removeInputSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeInputSuffix(const ShaderInput* input)"
  },
  {
    "label": "getInputSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getInputSuffix(const ShaderInput* input, string& suffix)"
  },
  {
    "label": "addOutputSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOutputSuffix(const ShaderOutput* output, const string& suffix)"
  },
  {
    "label": "removeOutputSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeOutputSuffix(const ShaderOutput* output)"
  },
  {
    "label": "getOutputSuffix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOutputSuffix(const ShaderOutput* output, string& suffix)"
  },
  {
    "label": "GenContext()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "GenContext()"
  },
  {
    "label": "ClosureContext()",
    "kind": "Method",
    "detail": "Function (ShaderGeneratorPtr _sg ; GenOptions _options ; FileSearchPath _sourceCodeSearchPath ; StringSet _reservedWords ; std::unordered_map<string,ShaderNodeImplPtr> _nodeImpls ; std::unordered_map<string,vector<GenUserDataPtr>> _userData ; std::unordered_map<const ShaderInput*,string> _inputSuffix ; std::unordered_map<const ShaderOutput*,string> _outputSuffix ; vector<ClosureContext*> _closureContexts ; } ; class ClosureContext { public : using Argument = std::pair<const TypeDesc*,string> ; using Arguments = vector<Argument> ; using ClosureParams = std::unordered_map<string,const ShaderInput*> ;)",
    "insertText": "ClosureContext(int type = 0) : _type(type)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getType()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (_arguments [ nodeType ] .)",
    "insertText": "push_back(arg)"
  },
  {
    "label": "getArguments()",
    "kind": "Method",
    "detail": "Function (} const Arguments&)",
    "insertText": "getArguments(const TypeDesc* nodeType)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = _arguments .)",
    "insertText": "find(nodeType)"
  },
  {
    "label": "setSuffix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSuffix(const TypeDesc* nodeType, const string& suffix)"
  },
  {
    "label": "getSuffix()",
    "kind": "Method",
    "detail": "Function (_suffix [ nodeType ] = suffix ; } const string&)",
    "insertText": "getSuffix(const TypeDesc* nodeType)"
  },
  {
    "label": "setClosureParams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setClosureParams(const ShaderNode* closure, const ClosureParams* params)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (_params [ closure ] = params ; } else { _params .)",
    "insertText": "erase(closure)"
  },
  {
    "label": "getClosureParams()",
    "kind": "Method",
    "detail": "Function (} } const ClosureParams*)",
    "insertText": "getClosureParams(const ShaderNode* closure)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = _params .)",
    "insertText": "find(closure)"
  },
  {
    "label": "ScopedSetClosureParams()",
    "kind": "Method",
    "detail": "Function (} protected : const int _type ; std::unordered_map<const TypeDesc*,Arguments> _arguments ; std::unordered_map<const TypeDesc*,string> _suffix ; std::unordered_map<const ShaderNode*,const ClosureParams*> _params ; const Arguments EMPTY_ARGUMENTS ; } ; class ScopedSetClosureParams { public :)",
    "insertText": "ScopedSetClosureParams(const ClosureContext::ClosureParams* params, const ShaderNode* node, ClosureContext* cct)"
  },
  {
    "label": "ScopedSetClosureParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetClosureParams(const ShaderNode* fromNode, const ShaderNode* toNode, ClosureContext* cct)"
  },
  {
    "label": "ScopedSetClosureParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetClosureParams()"
  },
  {
    "label": "ScopedSetVariableName()",
    "kind": "Method",
    "detail": "Function (private : ClosureContext* _cct ; const ShaderNode* _node ; const ClosureContext::ClosureParams* _oldParams ; } ; class ScopedSetVariableName { public :)",
    "insertText": "ScopedSetVariableName(const string& name, ShaderPort* port)"
  },
  {
    "label": "ScopedSetVariableName()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetVariableName()"
  }
]