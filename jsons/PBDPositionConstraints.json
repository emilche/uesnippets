[
  {
    "label": "FPBDPositionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDPositionConstraints"
  },
  {
    "label": "FPBDPositionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDPositionConstraintHandle"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPBDPositionConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { class FPBDPositionConstraints ; class FPBDPositionConstraintHandle final : public TIndexedContainerConstraintHandle<FPBDPositionConstraints> { public : using Base = TIndexedContainerConstraintHandle<FPBDPositionConstraints> ; using FConstraintContainer = FPBDPositionConstraints ; using FGeometryParticleHandle = FGeometryParticleHandle ;)",
    "insertText": "FPBDPositionConstraintHandle()"
  },
  {
    "label": "FPBDPositionConstraintHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDPositionConstraintHandle(FConstraintContainer* InConstraintContainer, int32 InConstraintIndex) : TIndexedContainerConstraintHandle<FPBDPositionConstraints>(InConstraintContainer, InConstraintIndex)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (} FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FPositionConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  },
  {
    "label": "FPBDPositionConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDPositionConstraints(TArray<FVec3>&& Locations, TArray<FPBDRigidParticleHandle*>&& InConstrainedParticles, const FReal InStiffness = (FReal)1.) : TPBDIndexedConstraintContainer<FPBDPositionConstraints>(FConstraintContainerHandle::StaticType()) , Targets(MoveTemp(Locations)), ConstrainedParticles(MoveTemp(InConstrainedParticles)), Stiffness(InStiffness)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Reserve(ConstrainedParticles.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Add(HandleAllocator.AllocHandle(this, ConstraintIndex))"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} ConstraintSolverBodies .)",
    "insertText": "SetNumZeroed(ConstrainedParticles.Num())"
  },
  {
    "label": "FPBDPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPBDPositionConstraints()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (} FConstraintContainerHandle*)",
    "insertText": "AddConstraint(FPBDRigidParticleHandle* Particle, const FVec3& Position)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = Targets .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Targets .)",
    "insertText": "Add(Position)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstrainedParticles .)",
    "insertText": "Add(Particle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintSolverBodies .)",
    "insertText": "Add(nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Add(HandleAllocator.AllocHandle(this, NewIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FConstraintContainerHandle* ConstraintHandle = Handles [ ConstraintIndex ] ;)",
    "insertText": "if(ConstraintHandle != nullptr)"
  },
  {
    "label": "FreeHandle()",
    "kind": "Method",
    "detail": "Function (HandleAllocator .)",
    "insertText": "FreeHandle(ConstraintHandle)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Handles [ ConstraintIndex ] = nullptr ; } Targets .)",
    "insertText": "RemoveAtSwap(ConstraintIndex)"
  },
  {
    "label": "SetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintIndex(Handles[ConstraintIndex], ConstraintIndex)"
  },
  {
    "label": "DisableConstraints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DisableConstraints(const TSet<FGeometryParticleHandle*>& RemovedParticles)"
  },
  {
    "label": "GetConstraintHandles()",
    "kind": "Method",
    "detail": "Function (} FHandles&)",
    "insertText": "GetConstraintHandles()"
  },
  {
    "label": "UpdatePositionBasedState()",
    "kind": "Method",
    "detail": "Function (Targets [ ConstraintIndex ] = Position ; } void)",
    "insertText": "UpdatePositionBasedState(const FReal Dt)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(const TArrayView<int32>& ConstraintIndices, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} protected : using Base::GetConstraintIndex ; using Base::SetConstraintIndex ; private : void)",
    "insertText": "AddBodies(const int32 ConstraintIndex, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "ApplySingle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingle(const FReal Dt, int32 ConstraintIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FSolverBody* Body = ConstraintSolverBodies [ ConstraintIndex ] ;)",
    "insertText": "if(Body != nullptr)"
  },
  {
    "label": "CorrectedP()",
    "kind": "Method",
    "detail": "Function (const FVec3& P1 = Body ->)",
    "insertText": "CorrectedP()"
  },
  {
    "label": "ApplyPositionDelta()",
    "kind": "Method",
    "detail": "Function (const FVec3& P2 = Targets [ ConstraintIndex ] ; const FVec3 Difference = P1 - P2 ; Body ->)",
    "insertText": "ApplyPositionDelta(-Stiffness * Difference)"
  }
]