[
  {
    "label": "silk_warped_LPC_analysis_filter_FIX()",
    "kind": "Method",
    "detail": "Function (# ifndef __PREFILTER_FIX_MIPSR1_H__ # define __PREFILTER_FIX_MIPSR1_H__ # ifdef HAVE_CONFIG_H # include \" config . h \" # endif # include \" main_FIX . h \" # include \" stack_alloc . h \" # include \" tuning_parameters . h \" # define OVERRIDE_silk_warped_LPC_analysis_filter_FIX void)",
    "insertText": "silk_warped_LPC_analysis_filter_FIX(opus_int32 state[], opus_int32 res_Q2[], const opus_int16 coef_Q13[], const opus_int16 input[], const opus_int16 lambda_Q16, const opus_int length, const opus_int order, int arch)"
  },
  {
    "label": "state_next()",
    "kind": "Method",
    "detail": "Function (opus_int n,i ; opus_int32 acc_Q11,acc_Q22,tmp1,tmp2,tmp3,tmp4 ; opus_int32 state_cur,)",
    "insertText": "state_next(void)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(( order & 1 ) == 0)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(( length & 1 ) == 0)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp2 =)",
    "insertText": "silk_SMLAWB(state[ 0 ], state[ 1 ], lambda_Q16)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (state_cur =)",
    "insertText": "silk_LSHIFT(input[ n ], 14)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_SMLAWB(state[ 1 ], state[ 2 ] - tmp2, lambda_Q16)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (state_next = tmp2 ; acc_Q11 =)",
    "insertText": "silk_RSHIFT(order, 1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (acc_Q11 =)",
    "insertText": "silk_SMLAWB(acc_Q11, tmp2, coef_Q13[ 0 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp4 =)",
    "insertText": "silk_SMLAWB(state_cur, state_next, lambda_Q16)"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (state [ 0 ] =)",
    "insertText": "silk_LSHIFT(input[ n+1 ], 14)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp3 =)",
    "insertText": "silk_SMLAWB(state_next, tmp1 - tmp4, lambda_Q16)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (acc_Q22 =)",
    "insertText": "silk_SMLAWB(acc_Q22, tmp4, coef_Q13[ 0 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp2 =)",
    "insertText": "silk_SMLAWB(state[ i ], state[ i + 1 ] - tmp1, lambda_Q16)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (state_cur = tmp1 ; acc_Q11 =)",
    "insertText": "silk_SMLAWB(acc_Q11, tmp1, coef_Q13[ i - 1 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1 =)",
    "insertText": "silk_SMLAWB(state[ i + 1 ], state[ i + 2 ] - tmp2, lambda_Q16)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (state_next = tmp2 ; acc_Q11 =)",
    "insertText": "silk_SMLAWB(acc_Q11, tmp2, coef_Q13[ i ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp4 =)",
    "insertText": "silk_SMLAWB(state_cur, state_next - tmp3, lambda_Q16)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (state [ i ] = tmp3 ; acc_Q22 =)",
    "insertText": "silk_SMLAWB(acc_Q22, tmp3, coef_Q13[ i - 1 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (state [ i + 1 ] = tmp4 ; acc_Q22 =)",
    "insertText": "silk_SMLAWB(acc_Q22, tmp4, coef_Q13[ i ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (} acc_Q11 =)",
    "insertText": "silk_SMLAWB(acc_Q11, tmp1, coef_Q13[ order - 1 ])"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (res_Q2 [ n ] =)",
    "insertText": "silk_LSHIFT((opus_int32)input[ n ], 2 ) - silk_RSHIFT_ROUND( acc_Q11, 9)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (state [ order ] = tmp3 ; acc_Q22 =)",
    "insertText": "silk_SMLAWB(acc_Q22, tmp3, coef_Q13[ order - 1 ])"
  },
  {
    "label": "silk_LSHIFT()",
    "kind": "Method",
    "detail": "Function (res_Q2 [ n + 1 ] =)",
    "insertText": "silk_LSHIFT((opus_int32)input[ n+1 ], 2 ) - silk_RSHIFT_ROUND( acc_Q22, 9)"
  },
  {
    "label": "silk_prefilt_FIX()",
    "kind": "Method",
    "detail": "Function (} } # define OVERRIDE_silk_prefilt_FIX void)",
    "insertText": "silk_prefilt_FIX(silk_prefilter_state_FIX *P, opus_int32 st_res_Q12[], opus_int32 xw_Q3[], opus_int32 HarmShapeFIRPacked_Q12, opus_int Tilt_Q14, opus_int32 LF_shp_Q14, opus_int lag, opus_int length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int i,idx,LTP_shp_buf_idx ; opus_int32 n_LTP_Q12,n_Tilt_Q10,n_LF_Q10 ; opus_int32 sLF_MA_shp_Q12,sLF_AR_shp_Q12 ; opus_int16* LTP_shp_buf ; LTP_shp_buf = P -> sLTP_shp ; LTP_shp_buf_idx = P -> sLTP_shp_buf_idx ; sLF_AR_shp_Q12 = P -> sLF_AR_shp_Q12 ; sLF_MA_shp_Q12 = P -> sLF_MA_shp_Q12 ;)",
    "insertText": "if(lag > 0)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_assert(HARM_SHAPE_FIR_TAPS == 3)"
  },
  {
    "label": "silk_SMULBB()",
    "kind": "Method",
    "detail": "Function (idx = lag + LTP_shp_buf_idx ; n_LTP_Q12 =)",
    "insertText": "silk_SMULBB(LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2 - 1) & LTP_MASK ], HarmShapeFIRPacked_Q12)"
  },
  {
    "label": "silk_SMLABT()",
    "kind": "Method",
    "detail": "Function (n_LTP_Q12 =)",
    "insertText": "silk_SMLABT(n_LTP_Q12, LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2 ) & LTP_MASK ], HarmShapeFIRPacked_Q12)"
  },
  {
    "label": "silk_SMLABB()",
    "kind": "Method",
    "detail": "Function (n_LTP_Q12 =)",
    "insertText": "silk_SMLABB(n_LTP_Q12, LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2 + 1) & LTP_MASK ], HarmShapeFIRPacked_Q12)"
  },
  {
    "label": "silk_SMULWB()",
    "kind": "Method",
    "detail": "Function (n_Tilt_Q10 =)",
    "insertText": "silk_SMULWB(sLF_AR_shp_Q12, Tilt_Q14)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (n_LF_Q10 =)",
    "insertText": "silk_SMLAWB(silk_SMULWT( sLF_AR_shp_Q12, LF_shp_Q14 ), sLF_MA_shp_Q12, LF_shp_Q14)"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (sLF_AR_shp_Q12 =)",
    "insertText": "silk_SUB32(st_res_Q12[ i ], silk_LSHIFT( n_Tilt_Q10, 2 ))"
  },
  {
    "label": "silk_SUB32()",
    "kind": "Method",
    "detail": "Function (sLF_MA_shp_Q12 =)",
    "insertText": "silk_SUB32(sLF_AR_shp_Q12, silk_LSHIFT( n_LF_Q10, 2 ))"
  },
  {
    "label": "LTP_shp_buf_idx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LTP_shp_buf_idx(LTP_shp_buf_idx - 1)"
  },
  {
    "label": "LTP_shp_buf_idx()",
    "kind": "Method",
    "detail": "Function (LTP_shp_buf [)",
    "insertText": "LTP_shp_buf_idx(opus_int16)silk_SAT16( silk_RSHIFT_ROUND( sLF_MA_shp_Q12, 12 ))"
  },
  {
    "label": "silk_RSHIFT_ROUND()",
    "kind": "Method",
    "detail": "Function (xw_Q3 [ i ] =)",
    "insertText": "silk_RSHIFT_ROUND(silk_SUB32( sLF_MA_shp_Q12, n_LTP_Q12 ), 9)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(i = 0; i < length; i++)"
  },
  {
    "label": "silk_RSHIFT_ROUND()",
    "kind": "Method",
    "detail": "Function (xw_Q3 [ i ] =)",
    "insertText": "silk_RSHIFT_ROUND(sLF_MA_shp_Q12, 9)"
  }
]