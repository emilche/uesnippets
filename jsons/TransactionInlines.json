[
  {
    "label": "IsOnStack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Context . h \" # include \" Transaction . h \" # include \" HAL / Platform . h \" # include \" Utils . h \" namespace AutoRTFM { UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "IsOnStack(const void* LogicalAddress)"
  },
  {
    "label": "ShouldRecordWrite()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "ShouldRecordWrite(void* LogicalAddress)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void* CopyAddress = WriteLogBumpAllocator .)",
    "insertText": "Allocate(Size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(CopyAddress, LogicalAddress, Size)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (WriteLog .)",
    "insertText": "Push(FWriteLogEntry(LogicalAddress, Size, CopyAddress))"
  },
  {
    "label": "RecordWrite()",
    "kind": "Method",
    "detail": "Function (} AUTORTFM_NO_ASAN UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordWrite(void* LogicalAddress, size_t Size)"
  },
  {
    "label": "HitSetSkippedBecauseOfStackLocalMemory()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "HitSetSkippedBecauseOfStackLocalMemory()"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (FMemoryLocation)",
    "insertText": "Key(LogicalAddress)"
  },
  {
    "label": "SetTopTag()",
    "kind": "Method",
    "detail": "Function (Key .)",
    "insertText": "SetTopTag(static_cast<uint16_t>(Size))"
  },
  {
    "label": "HitSetHit()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "HitSetHit()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewMemoryTracker.Contains(LogicalAddress, Size))"
  },
  {
    "label": "NewMemoryTrackerHit()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "NewMemoryTrackerHit()"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (uint8_t* const Address = reinterpret_cast<)",
    "insertText": "uint8_t(LogicalAddress)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t I = 0 ;)",
    "insertText": "for(; (I + FWriteLogBumpAllocator::MaxSize) < Size; I += FWriteLogBumpAllocator::MaxSize)"
  },
  {
    "label": "RecordWriteMaxPageSized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordWriteMaxPageSized(Address + I, FWriteLogBumpAllocator::MaxSize)"
  },
  {
    "label": "RecordWriteMaxPageSized()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RecordWriteMaxPageSized(Address + I, Size - I)"
  },
  {
    "label": "RecordWrite()",
    "kind": "Method",
    "detail": "Function (} template<unsigned SIZE> AUTORTFM_NO_ASAN UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "RecordWrite(void* LogicalAddress)"
  },
  {
    "label": "SetTopTag()",
    "kind": "Method",
    "detail": "Function (Key .)",
    "insertText": "SetTopTag(static_cast<uint16_t>(SIZE))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (WriteLog .)",
    "insertText": "Push(FWriteLogEntry::CreateSmall<SIZE>(LogicalAddress))"
  },
  {
    "label": "DidAllocate()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DidAllocate(void* LogicalAddress, const size_t Size)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(DidInsert)"
  },
  {
    "label": "DidFree()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DidFree(void* LogicalAddress)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(bTrackAllocationLocations)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(!NewMemoryTracker.Contains(LogicalAddress, 1))"
  },
  {
    "label": "DeferUntilCommit()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DeferUntilCommit(TFunction<void()>&& Callback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()> Copy(Callback)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CommitTasks .)",
    "insertText": "Add(MoveTemp(Copy))"
  },
  {
    "label": "DeferUntilAbort()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "DeferUntilAbort(TFunction<void()>&& Callback)"
  },
  {
    "label": "PushDeferUntilAbortHandler()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "PushDeferUntilAbortHandler(const void* Key, TFunction<void()>&& Callback)"
  },
  {
    "label": "AddKeyed()",
    "kind": "Method",
    "detail": "Function (AbortTasks .)",
    "insertText": "AddKeyed(Key, MoveTemp(Copy))"
  },
  {
    "label": "PopDeferUntilAbortHandler()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "PopDeferUntilAbortHandler(const void* Key)"
  },
  {
    "label": "PopAllDeferUntilAbortHandlers()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE bool)",
    "insertText": "PopAllDeferUntilAbortHandlers(const void* Key)"
  },
  {
    "label": "CollectStats()",
    "kind": "Method",
    "detail": "Function (} UE_AUTORTFM_FORCEINLINE void)",
    "insertText": "CollectStats()"
  },
  {
    "label": "AverageWriteLogEntries()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageWriteLogEntries(WriteLog.Num())"
  },
  {
    "label": "MaximumWriteLogEntries()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "MaximumWriteLogEntries(WriteLog.Num())"
  },
  {
    "label": "AverageWriteLogBytes()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageWriteLogBytes(WriteLogBumpAllocator.StatTotalSize)"
  },
  {
    "label": "MaximumWriteLogBytes()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "MaximumWriteLogBytes(WriteLogBumpAllocator.StatTotalSize)"
  },
  {
    "label": "AverageCommitTasks()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageCommitTasks(CommitTasks.Num())"
  },
  {
    "label": "MaximumCommitTasks()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "MaximumCommitTasks(CommitTasks.Num())"
  },
  {
    "label": "AverageAbortTasks()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageAbortTasks(AbortTasks.Num())"
  },
  {
    "label": "MaximumAbortTasks()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "MaximumAbortTasks(AbortTasks.Num())"
  },
  {
    "label": "AverageHitSetSize()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageHitSetSize(HitSet.GetSize())"
  },
  {
    "label": "AverageHitSetCapacity()",
    "kind": "Method",
    "detail": "Function (Stats . Collect<)",
    "insertText": "AverageHitSetCapacity(HitSet.GetCapacity())"
  }
]