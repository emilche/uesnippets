[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FChannelPositionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelPositionInfo"
  },
  {
    "label": "ISoundfieldEncodingSettingsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldEncodingSettingsProxy"
  },
  {
    "label": "USoundfieldEncodingSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldEncodingSettingsBase"
  },
  {
    "label": "FAudioPluginInitializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginInitializationParams"
  },
  {
    "label": "ISoundfieldAudioPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldAudioPacket"
  },
  {
    "label": "FSoundfieldSpeakerPositionalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldSpeakerPositionalData"
  },
  {
    "label": "FSoundfieldEncoderInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldEncoderInputData"
  },
  {
    "label": "ISoundfieldEncoderStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldEncoderStream"
  },
  {
    "label": "FSoundfieldDecoderInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldDecoderInputData"
  },
  {
    "label": "FSoundfieldDecoderOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldDecoderOutputData"
  },
  {
    "label": "ISoundfieldDecoderStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldDecoderStream"
  },
  {
    "label": "ISoundfieldTranscodeStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldTranscodeStream"
  },
  {
    "label": "FSoundfieldMixerInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldMixerInputData"
  },
  {
    "label": "ISoundfieldMixerStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldMixerStream"
  },
  {
    "label": "ISoundfieldFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldFactory"
  },
  {
    "label": "ISoundfieldEffectSettingsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldEffectSettingsProxy"
  },
  {
    "label": "USoundfieldEffectSettingsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldEffectSettingsBase"
  },
  {
    "label": "ISoundfieldEffectInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundfieldEffectInstance"
  },
  {
    "label": "USoundfieldEffectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldEffectBase"
  },
  {
    "label": "FSoundfieldEncodingKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldEncodingKey"
  },
  {
    "label": "DowncastSoundfieldRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixer . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Features / IModularFeature . h \" # include \" Features / IModularFeatures . h \" # include \" Math / Quat . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" ISoundfieldFormat . generated . h \" class FArchive ; class UClass ; namespace Audio { class FMixerDevice ; class FMixerSourceManager ; class FMixerSubmix ; struct FChannelPositionInfo { EAudioMixerChannel::Type Channel = EAudioMixerChannel::DefaultChannel ; float Azimuth = 0 . 0 f ; float Elevation = 0 . 0 f ; float Radius = 1 . 0 f ; } ; } template<ToType,FromType> ToType&)",
    "insertText": "DowncastSoundfieldRef(FromType& InRef)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS bool bIsToTypeChildClass = std::is_base_of<FromType,ToType>::value ;)",
    "insertText": "static_assert(bIsToTypeChildClass, \"Tried to cast a reference to an unrelated type.\")"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "check(&InRef != nullptr)"
  },
  {
    "label": "ISoundfieldEncodingSettingsProxy()",
    "kind": "Method",
    "detail": "Function (} class ISoundfieldEncodingSettingsProxy { public : ~)",
    "insertText": "ISoundfieldEncodingSettingsProxy()"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetUniqueId()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldEncodingSettingsProxy>)",
    "insertText": "Duplicate()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = Engine, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AUDIOEXTENSIONS_API virtual TUniquePtr<ISoundfieldEncodingSettingsProxy> GetProxy() const PURE_VIRTUAL(USoundfieldEncodingSettingsBase::GetProxy, return nullptr;)"
  },
  {
    "label": "ISoundfieldAudioPacket()",
    "kind": "Method",
    "detail": "Function (} ; struct FAudioPluginInitializationParams ; class ISoundfieldAudioPacket { public : ~)",
    "insertText": "ISoundfieldAudioPacket()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ISoundfieldEncoderStream()",
    "kind": "Method",
    "detail": "Function (} ; struct FSoundfieldSpeakerPositionalData { int32 NumChannels = 0 ; const TArray<Audio::FChannelPositionInfo>* ChannelPositions = nullptr ; FQuat Rotation = FQuat::Identity ; } ; struct FSoundfieldEncoderInputData { Audio::FAlignedFloatBuffer& AudioBuffer ; int32 NumChannels ; ISoundfieldEncodingSettingsProxy& InputSettings ; FSoundfieldSpeakerPositionalData& PositionalData ; } ; class ISoundfieldEncoderStream { public : ~)",
    "insertText": "ISoundfieldEncoderStream()"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Encode(const FSoundfieldEncoderInputData& InputData, ISoundfieldAudioPacket& OutputData)"
  },
  {
    "label": "EncodeAndMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeAndMixIn(const FSoundfieldEncoderInputData& InputData, ISoundfieldAudioPacket& OutputData)"
  },
  {
    "label": "ISoundfieldDecoderStream()",
    "kind": "Method",
    "detail": "Function (} ; struct FSoundfieldDecoderInputData { ISoundfieldAudioPacket& SoundfieldBuffer ; FSoundfieldSpeakerPositionalData& PositionalData ; int32 NumFrames ; float SampleRate ; } ; struct FSoundfieldDecoderOutputData { Audio::FAlignedFloatBuffer& AudioBuffer ; } ; class ISoundfieldDecoderStream { public : ~)",
    "insertText": "ISoundfieldDecoderStream()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Decode(const FSoundfieldDecoderInputData& InputData, FSoundfieldDecoderOutputData& OutputData)"
  },
  {
    "label": "DecodeAndMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeAndMixIn(const FSoundfieldDecoderInputData& InputData, FSoundfieldDecoderOutputData& OutputData)"
  },
  {
    "label": "ISoundfieldTranscodeStream()",
    "kind": "Method",
    "detail": "Function (} ; class ISoundfieldTranscodeStream { public : ~)",
    "insertText": "ISoundfieldTranscodeStream()"
  },
  {
    "label": "Transcode()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Transcode(const ISoundfieldAudioPacket& InputData, const ISoundfieldEncodingSettingsProxy& InputSettings, ISoundfieldAudioPacket& OutputData, const ISoundfieldEncodingSettingsProxy& OutputSettings)"
  },
  {
    "label": "TranscodeAndMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranscodeAndMixIn(const ISoundfieldAudioPacket& InputData, const ISoundfieldEncodingSettingsProxy& InputSettings, ISoundfieldAudioPacket& PacketToMixTo, const ISoundfieldEncodingSettingsProxy& OutputSettings)"
  },
  {
    "label": "ISoundfieldMixerStream()",
    "kind": "Method",
    "detail": "Function (} ; struct FSoundfieldMixerInputData { const ISoundfieldAudioPacket& InputPacket ; const ISoundfieldEncodingSettingsProxy& EncodingSettings ; float SendLevel ; } ; class ISoundfieldMixerStream { public : ~)",
    "insertText": "ISoundfieldMixerStream()"
  },
  {
    "label": "MixTogether()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "MixTogether(const FSoundfieldMixerInputData& InputData, ISoundfieldAudioPacket& PacketToMixInto)"
  },
  {
    "label": "ISoundfieldFactory()",
    "kind": "Method",
    "detail": "Function (} ; class ISoundfieldFactory : public IModularFeature { public : ~)",
    "insertText": "ISoundfieldFactory()"
  },
  {
    "label": "GetFormatNameForNoEncoding()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetFormatNameForNoEncoding()"
  },
  {
    "label": "GetFormatNameForInheritedEncoding()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFormatNameForInheritedEncoding()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "RegisterSoundfieldFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSoundfieldFormat(ISoundfieldFactory* InFactory)"
  },
  {
    "label": "UnregisterSoundfieldFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundfieldFormat(ISoundfieldFactory* InFactory)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ISoundfieldFactory*)",
    "insertText": "Get(const FName& InName)"
  },
  {
    "label": "GetAvailableSoundfieldFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetAvailableSoundfieldFormats()"
  },
  {
    "label": "GetSoundfieldFormatName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSoundfieldFormatName()"
  },
  {
    "label": "CreateEncoderStream()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldEncoderStream>)",
    "insertText": "CreateEncoderStream(const FAudioPluginInitializationParams& InitInfo, const ISoundfieldEncodingSettingsProxy& InitialSettings)"
  },
  {
    "label": "CreateDecoderStream()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldDecoderStream>)",
    "insertText": "CreateDecoderStream(const FAudioPluginInitializationParams& InitInfo, const ISoundfieldEncodingSettingsProxy& InitialSettings)"
  },
  {
    "label": "CreateTranscoderStream()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldTranscodeStream>)",
    "insertText": "CreateTranscoderStream(const FName SourceFormat, const ISoundfieldEncodingSettingsProxy& InitialSourceSettings, const FName DestinationFormat, const ISoundfieldEncodingSettingsProxy& InitialDestinationSettings, const FAudioPluginInitializationParams& InitInfo)"
  },
  {
    "label": "CreateMixerStream()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldMixerStream>)",
    "insertText": "CreateMixerStream(const ISoundfieldEncodingSettingsProxy& InitialSettings)"
  },
  {
    "label": "CreateEmptyPacket()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldAudioPacket>)",
    "insertText": "CreateEmptyPacket()"
  },
  {
    "label": "IsTranscodeRequiredBetweenSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranscodeRequiredBetweenSettings(const ISoundfieldEncodingSettingsProxy& SourceSettings, const ISoundfieldEncodingSettingsProxy& DestinationSettings)"
  },
  {
    "label": "CanTranscodeToSoundfieldFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTranscodeToSoundfieldFormat(FName DestinationFormat, const ISoundfieldEncodingSettingsProxy& DestinationEncodingSettings)"
  },
  {
    "label": "ShouldEncodeAllStreamsIndependently()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEncodeAllStreamsIndependently(const ISoundfieldEncodingSettingsProxy& EncodingSettings)"
  },
  {
    "label": "IsEndpointFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEndpointFormat()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: AUDIOEXTENSIONS_API virtual TUniquePtr<ISoundfieldEffectSettingsProxy> GetNewProxy() const PURE_VIRTUAL(USoundfieldEffectSettingsBase::GetProxy, return nullptr;)"
  },
  {
    "label": "PrivateGetProxy()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<ISoundfieldEffectSettingsProxy>)",
    "insertText": "PrivateGetProxy()"
  },
  {
    "label": "ISoundfieldEffectInstance()",
    "kind": "Method",
    "detail": "Function (} Audio::FMixerSubmix ; Audio::FMixerSourceManager ; } ; class ISoundfieldEffectInstance { public : ~)",
    "insertText": "ISoundfieldEffectInstance()"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ProcessAudio(ISoundfieldAudioPacket& InOutPacket, const ISoundfieldEncodingSettingsProxy& EncodingSettings, const ISoundfieldEffectSettingsProxy& ProcessorSettings)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Category = EffectPreset)"
  },
  {
    "label": "SupportsFormat()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SupportsFormat(const FName& InFormat) const PURE_VIRTUAL(USoundfieldEncodingSettingsBase::SupportsFormat, return false;)"
  },
  {
    "label": "GetSettingsClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetSettingsClass() const PURE_VIRTUAL(USoundfieldEncodingSettingsBase::GetSettingsClass, return nullptr;)"
  },
  {
    "label": "GetDefaultSettings()",
    "kind": "Method",
    "detail": "Function (const USoundfieldEffectSettingsBase*)",
    "insertText": "GetDefaultSettings() const PURE_VIRTUAL(USoundfieldEncodingSettingsBase::GetDefaultSettings, return nullptr;)"
  },
  {
    "label": "GetNewProcessor()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISoundfieldEffectInstance>)",
    "insertText": "GetNewProcessor(const ISoundfieldEncodingSettingsProxy& EncodingSettings) const PURE_VIRTUAL(USoundfieldEncodingSettingsBase::GetProxy, return nullptr;)"
  },
  {
    "label": "PrivateGetDefaultSettings()",
    "kind": "Method",
    "detail": "Function (private : const USoundfieldEffectSettingsBase*)",
    "insertText": "PrivateGetDefaultSettings()"
  },
  {
    "label": "PrivateGetNewProcessor()",
    "kind": "Method",
    "detail": "Function (} ; TUniquePtr<ISoundfieldEffectInstance>)",
    "insertText": "PrivateGetNewProcessor(const ISoundfieldEncodingSettingsProxy& EncodingSettings)"
  },
  {
    "label": "FSoundfieldEncodingKey()",
    "kind": "Method",
    "detail": "Function (} Audio::FMixerSourceManager ; Audio::FMixerSubmix ; } ; struct FSoundfieldEncodingKey { FName SoundfieldFormat ; int32 EncodingSettingsID ;)",
    "insertText": "FSoundfieldEncodingKey() : SoundfieldFormat(ISoundfieldFactory::GetFormatNameForNoEncoding()) , EncodingSettingsID(0)"
  },
  {
    "label": "FSoundfieldEncodingKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoundfieldEncodingKey(ISoundfieldFactory* Factory, ISoundfieldEncodingSettingsProxy& InSettings) : SoundfieldFormat(Factory ? Factory->GetSoundfieldFormatName() : ISoundfieldFactory::GetFormatNameForNoEncoding()) , EncodingSettingsID(InSettings.GetUniqueId())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSoundfieldEncodingKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSoundfieldEncodingKey& Value)"
  }
]