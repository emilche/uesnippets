[
  {
    "label": "FMeshShapeGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshShapeGenerator"
  },
  {
    "label": "FMeshShapeGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include \" IndexTypes . h \" namespace UE { namespace Geometry { class FMeshShapeGenerator { public : TArray<FVector3d> Vertices ; TArray<FVector2f> UVs ; TArray<int> UVParentVertex ; TArray<FVector3f> Normals ; TArray<int> NormalParentVertex ; TArray<FIndex3i> Triangles ; TArray<FIndex3i> TriangleUVs ; TArray<FIndex3i> TriangleNormals ; TArray<int> TrianglePolygonIDs ; public : bool bReverseOrientation = false ; ~)",
    "insertText": "FMeshShapeGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "HasAttributes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttributes()"
  },
  {
    "label": "ResetAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetAttributes(bool bResetPolygonIDs = false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (UVs .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBufferSizes(int NumVertices, int NumTriangles, int NumUVs, int NumNormals)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "SetNum(NumVertices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumTriangles > 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "SetNum(NumTriangles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumUVs > 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (UVs .)",
    "insertText": "SetNum(NumUVs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumNormals > 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Normals .)",
    "insertText": "SetNum(NumNormals)"
  },
  {
    "label": "ExtendBufferSizes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ExtendBufferSizes(int AddVertices, int AddTriangles, int AddUVs, int AddNormals)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int NumVertices = Vertices .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AddTriangles > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AddUVs > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AddNormals > 0)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetVertex(int Index, const FVector3d& Position)"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (Vertices [ Index ] = Position ; } int)",
    "insertText": "AppendVertex(const FVector3d& Position)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Add(Position)"
  },
  {
    "label": "SetUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUV(int Index, const FVector2f& UV, int ParentVertex)"
  },
  {
    "label": "AppendUV()",
    "kind": "Method",
    "detail": "Function (UVs [ Index ] = UV ; UVParentVertex [ Index ] = ParentVertex ; } int)",
    "insertText": "AppendUV(const FVector2f& UV, int ParentVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UVs .)",
    "insertText": "Add(UV)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UVParentVertex .)",
    "insertText": "Add(ParentVertex)"
  },
  {
    "label": "SetNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNormal(int Index, const FVector3f& Normal, int ParentVertex)"
  },
  {
    "label": "AppendNormal()",
    "kind": "Method",
    "detail": "Function (Normals [ Index ] = Normal ; NormalParentVertex [ Index ] = ParentVertex ; } int)",
    "insertText": "AppendNormal(const FVector3f& Normal, int ParentVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Normals .)",
    "insertText": "Add(Normal)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangle(int Index, const FIndex3i& Tri)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (Triangles [ Index ] = bReverseOrientation ?)",
    "insertText": "FIndex3i(Tri.C, Tri.B, Tri.A)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangle(int Index, int A, int B, int C)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (Triangles [ Index ] = bReverseOrientation ?)",
    "insertText": "FIndex3i(C, B, A) : FIndex3i(A, B, C)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangle(int Index, int A, int B, int C, bool bClockwiseOverride)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Triangles [)",
    "insertText": "Index(bReverseOrientation != bClockwiseOverride) ? FIndex3i(C, B, A) : FIndex3i(A, B, C)"
  },
  {
    "label": "AppendTriangle()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AppendTriangle(int A, int B, int C)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Add(bReverseOrientation ? FIndex3i(C, B, A) : FIndex3i(A, B, C))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TriangleUVs .)",
    "insertText": "SetNum(Triangles.Num())"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleUVs(int Index, const FIndex3i& Tri)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleUVs(int Index, int A, int B, int C)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleUVs(int Index, int A, int B, int C, bool bClockwiseOverride)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleNormals(int Index, const FIndex3i& Tri)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleNormals(int Index, int A, int B, int C)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTriangleNormals(int Index, int A, int B, int C, bool bClockwiseOverride)"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTrianglePolygon(int Index, int PolygonID)"
  },
  {
    "label": "SetTriangleWithMatchedUVNormal()",
    "kind": "Method",
    "detail": "Function (TrianglePolygonIDs [ Index ] = PolygonID ; } void)",
    "insertText": "SetTriangleWithMatchedUVNormal(int Index, int A, int B, int C)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(Index, A, B, C)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(Index, A, B, C)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(Index, A, B, C)"
  },
  {
    "label": "BilinearInterp()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "BilinearInterp(const FVector3d &v00, const FVector3d &v10, const FVector3d &v11, const FVector3d &v01, double tx, double ty)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (FVector3d a =)",
    "insertText": "Lerp(v00, v01, ty)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (FVector3d b =)",
    "insertText": "Lerp(v10, v11, ty)"
  },
  {
    "label": "BilinearInterp()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "BilinearInterp(const FVector2d &v00, const FVector2d &v10, const FVector2d &v11, const FVector2d &v01, double tx, double ty)"
  },
  {
    "label": "BilinearInterp()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "BilinearInterp(const FVector2f &v00, const FVector2f &v10, const FVector2f &v11, const FVector2f &v01, float tx, float ty)"
  },
  {
    "label": "LinearInterp()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "LinearInterp(const FVector3i &a, const FVector3i &b, double t)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (FVector3d c =)",
    "insertText": "Lerp((FVector3d)a, (FVector3d)b, t)"
  }
]