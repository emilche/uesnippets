[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FPreLoadFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreLoadFile"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "FPreLoadFile()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / DelayedAutoRegister . h \" class FEvent ; struct FPreLoadFile : public FDelayedAutoRegisterHelper {)",
    "insertText": "FPreLoadFile(const TCHAR* InPath)"
  },
  {
    "label": "TakeOwnershipOfLoadedData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TakeOwnershipOfLoadedData(int64* OutFileSize=nullptr)"
  },
  {
    "label": "TakeOwnershipOfLoadedDataByPath()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TakeOwnershipOfLoadedDataByPath(const TCHAR* Filename, int64* OutFileSize)"
  },
  {
    "label": "KickOffRead()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "KickOffRead()"
  }
]