[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "FHttpRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRouter"
  },
  {
    "label": "FHttpServerRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpServerRequest"
  },
  {
    "label": "FHttpServerResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpServerResponse"
  },
  {
    "label": "FHttpConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpConnection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HttpConnectionTypes . h \" # include \" HttpConnectionRequestReadContext . h \" # include \" HttpConnectionResponseWriteContext . h \" # include \" HttpResultCallback . h \" # include \" HttpServerConfig . h \" # include \" HttpServerConstants . h \" # include \" HttpServerHttpVersion . h \" # include \" Misc / Timespan . h \" class FSocket ; class ISocketSubsystem ; class FHttpRouter ; struct FHttpServerRequest ; struct FHttpServerResponse ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogHttpConnection, Log, All)"
  },
  {
    "label": "FHttpConnection()",
    "kind": "Method",
    "detail": "Function (struct FHttpConnection final : public TSharedFromThis<FHttpConnection> { public :)",
    "insertText": "FHttpConnection(FSocket* InSocket, TSharedPtr<FHttpRouter> InRouter, uint32 InOriginPort, uint32 InConnectionId)"
  },
  {
    "label": "FHttpConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHttpConnection()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ChangeState()",
    "kind": "Method",
    "detail": "Function (} private : enum class EConnectionDestroyReason : uint8 { WriteError,AwaitReadTimeout,BeginReadTimeout,ReadTimeout,WriteTimeout,WriteComplete,DestroyRequest } ; private : void)",
    "insertText": "ChangeState(EHttpConnectionState NewState)"
  },
  {
    "label": "TransferState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferState(EHttpConnectionState CurrentState, EHttpConnectionState NextState)"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead(float DeltaTime)"
  },
  {
    "label": "ContinueRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueRead(float DeltaTime)"
  },
  {
    "label": "CompleteRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteRead(const TSharedPtr<FHttpServerRequest>& Request)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRequest(const TSharedPtr<FHttpServerRequest>& Request, const FHttpResultCallback& OnProcessingComplete)"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginWrite(TUniquePtr<FHttpServerResponse>&& Response, uint32 RequestNumber)"
  },
  {
    "label": "ContinueWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContinueWrite(float DeltaTime)"
  },
  {
    "label": "CompleteWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteWrite()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(EConnectionDestroyReason DestroyReason)"
  },
  {
    "label": "HandleReadError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReadError(EHttpServerResponseCodes ErrorCode, const TCHAR* ErrorCodeStr)"
  },
  {
    "label": "HandleWriteError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWriteError(const TCHAR* ErrorCodeStr)"
  },
  {
    "label": "ResolveKeepAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveKeepAlive(HttpVersion::EHttpServerHttpVersion HttpVersion, const TArray<FString>& ConnectionHeaders)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EConnectionDestroyReason DestroyReason)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default : {)",
    "insertText": "checkNoEntry()"
  }
]