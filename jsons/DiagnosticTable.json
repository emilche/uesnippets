[
  {
    "label": "FDiagnosticTableWriterCSV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiagnosticTableWriterCSV"
  },
  {
    "label": "FDiagnosticTableViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiagnosticTableViewer"
  },
  {
    "label": "FDiagnosticTableWriterCSV()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / VarArgs . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / UnrealString . h \" # include \" Misc / DateTime . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / FileManager . h \" # include \" Misc / Paths . h \" # if ALLOW_DEBUG_FILES class FDiagnosticTableWriterCSV { public :)",
    "insertText": "FDiagnosticTableWriterCSV(FArchive* InOutputStream) : OutputStream(InOutputStream)"
  },
  {
    "label": "FDiagnosticTableWriterCSV()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDiagnosticTableWriterCSV()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddColumn(const TCHAR* Format,...)"
  },
  {
    "label": "GET_TYPED_VARARGS()",
    "kind": "Method",
    "detail": "Function (TCHAR ColumnText [ 4 0 9 6 ] ;)",
    "insertText": "GET_TYPED_VARARGS(TCHAR,ColumnText,UE_ARRAY_COUNT(ColumnText),UE_ARRAY_COUNT(ColumnText)-1,Format,Format)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (CurrentRow + =)",
    "insertText": "TEXT(',')"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} FString EscapedText = ColumnText ; EscapedText = EscapedText .)",
    "insertText": "Replace(TEXT(\"\\\"\"),TEXT(\"\\\"\\\"\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (CurrentRow + =)",
    "insertText": "TEXT('\\\"')"
  },
  {
    "label": "CycleRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CycleRow()"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (OutputStream ->)",
    "insertText": "Logf(TEXT(\"%s\"),*CurrentRow)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CurrentRow .)",
    "insertText": "Empty()"
  },
  {
    "label": "OutputStreamIsValid()",
    "kind": "Method",
    "detail": "Function (OutputStream = NULL ; } } bool)",
    "insertText": "OutputStreamIsValid()"
  },
  {
    "label": "GetUniqueTemporaryFilePath()",
    "kind": "Method",
    "detail": "Function (} private : FString CurrentRow ; FArchive* OutputStream ; } ; class FDiagnosticTableViewer : public FDiagnosticTableWriterCSV { public : FString)",
    "insertText": "GetUniqueTemporaryFilePath(const TCHAR* BaseName)"
  },
  {
    "label": "FDiagnosticTableViewer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDiagnosticTableViewer(const TCHAR* InTemporaryFilePath, bool bInSuppressViewer = false) : FDiagnosticTableWriterCSV(IFileManager::Get().CreateDebugFileWriter(InTemporaryFilePath)) , bHasOpenedViewer(false) , bSuppressViewer(bInSuppressViewer) , TemporaryFilePath(InTemporaryFilePath)"
  },
  {
    "label": "FDiagnosticTableViewer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDiagnosticTableViewer()"
  },
  {
    "label": "OpenViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenViewer()"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(*FString::Printf(TEXT(\"%s\"),*IFileManager::Get().ConvertToAbsolutePathForExternalAppForRead(*TemporaryFilePath)), NULL, NULL)"
  }
]