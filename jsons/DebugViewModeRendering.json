[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMeshBatchElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElement"
  },
  {
    "label": "FMeshDrawingRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDrawingRenderState"
  },
  {
    "label": "FDebugViewModeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModeInterface"
  },
  {
    "label": "FDebugViewModeShaderElementData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModeShaderElementData"
  },
  {
    "label": "FDebugViewModeVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModeVS"
  },
  {
    "label": "FDebugViewModePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModePS"
  },
  {
    "label": "FDebugViewModeMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModeMeshProcessor"
  },
  {
    "label": "FDebugViewModeImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugViewModeImplementation"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" # include \" MeshMaterialShaderType . h \" # include \" MeshMaterialShader . h \" # include \" ShaderBaseClasses . h \" # include \" MeshPassProcessor . h \" # include \" DebugViewModeInterface . h \" # include \" SceneRenderTargetParameters . h \" class FPrimitiveSceneProxy ; struct FMeshBatchElement ; struct FMeshDrawingRenderState ; class FDebugViewModeInterface ; const int32 NumStreamingAccuracyColors = 5 ; const int32 NumLODColorationColors = 8 ; const float UndefinedStreamingAccuracyIntensity = . 0 1 5 f ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FDebugViewModeUniformParameters, ) SHADER_PARAMETER_ARRAY(FLinearColor, AccuracyColors, [NumStreamingAccuracyColors]) SHADER_PARAMETER_ARRAY(FLinearColor, LODColors, [NumLODColorationColors]) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FDebugViewModePassUniformParameters, ) SHADER_PARAMETER_STRUCT(FSceneTextureUniformParameters, SceneTextures) SHADER_PARAMETER_STRUCT(FDebugViewModeUniformParameters, DebugViewMode) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<uint>, QuadOverdraw) END_GLOBAL_SHADER_PARAMETER_STRUCT() #if WITH_DEBUG_VIEW_MODES void SetupDebugViewModePassUniformBufferConstants(const FViewInfo& ViewInfo, FDebugViewModeUniformParameters& Parameters)"
  },
  {
    "label": "CreateDebugViewModePassUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FDebugViewModePassUniformParameters>)",
    "insertText": "CreateDebugViewModePassUniformBuffer(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef QuadOverdrawTexture)"
  },
  {
    "label": "GetQuadOverdrawUAVIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetQuadOverdrawUAVIndex(EShaderPlatform Platform)"
  },
  {
    "label": "FDebugViewModeShaderElementData()",
    "kind": "Method",
    "detail": "Function (class FDebugViewModeShaderElementData : public FMeshMaterialShaderElementData { public :)",
    "insertText": "FDebugViewModeShaderElementData(const FMaterialRenderProxy& InMaterialRenderProxy, const FMaterial& InMaterial, EDebugViewShaderMode InDebugViewMode, const FVector& InViewOrigin, int32 InVisualizeLODIndex, const FColor& InSkinCacheDebugColor, int32 InViewModeParam, const FName& InViewModeParamName) : MaterialRenderProxy(InMaterialRenderProxy) , Material(InMaterial) , DebugViewMode(InDebugViewMode) , ViewOrigin(InViewOrigin) , VisualizeLODIndex(InVisualizeLODIndex) , SkinCacheDebugColor(InSkinCacheDebugColor) , ViewModeParam(InViewModeParam) , ViewModeParamName(InViewModeParamName) , NumVSInstructions(0) , NumPSInstructions(0) , NumCSInstructions(0) , LWCComplexityVS(0) , LWCComplexityPS(0) , LWCComplexityCS(0)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} const FMaterialRenderProxy& MaterialRenderProxy ; const FMaterial& Material ; EDebugViewShaderMode DebugViewMode ; FVector ViewOrigin ; int32 VisualizeLODIndex ; FColor SkinCacheDebugColor ; int32 ViewModeParam ; FName ViewModeParamName ; int32 NumVSInstructions ; int32 NumPSInstructions ; int32 NumCSInstructions ; uint32 LWCComplexityVS ; uint32 LWCComplexityPS ; uint32 LWCComplexityCS ; } ; class FDebugViewModeVS : public FMeshMaterialShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FDebugViewModeVS,MeshMaterial)"
  },
  {
    "label": "FDebugViewModeVS()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDebugViewModeVS()"
  },
  {
    "label": "FDebugViewModeVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugViewModeVS(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderBindings(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, const FDebugViewModeShaderElementData& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "SetCommonDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCommonDefinitions(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FDebugViewModePS : public FMeshMaterialShader { public :)",
    "insertText": "DECLARE_SHADER_TYPE(FDebugViewModePS, MeshMaterial)"
  },
  {
    "label": "FDebugViewModePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugViewModePS()"
  },
  {
    "label": "FDebugViewModePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugViewModePS(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementShaderBindings(const FShaderMapPointerTable& PointerTable, const FScene* Scene, const FSceneView* ViewIfDynamicMeshCommand, const FVertexFactory* VertexFactory, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMeshBatch& MeshBatch, const FMeshBatchElement& BatchElement, const FDebugViewModeShaderElementData& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, OneOverCPUTexCoordScalesParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, TexCoordIndicesParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, CPUTexelFactorParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, NormalizedComplexity)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, AnalysisParamsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PrimitiveAlphaParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, TexCoordAnalysisIndexParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, CPULogDistanceParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShowQuadOverdraw)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LODIndexParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SkinCacheDebugColorParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, OutputQuadOverdrawParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, VisualizeModeParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, QuadBufferUAV)"
  },
  {
    "label": "FDebugViewModeMeshProcessor()",
    "kind": "Method",
    "detail": "Function (} ; class FDebugViewModeMeshProcessor : public FSceneRenderingAllocatorObject<FDebugViewModeMeshProcessor>,public FMeshPassProcessor { public :)",
    "insertText": "FDebugViewModeMeshProcessor(const FScene* InScene, ERHIFeatureLevel::Type InFeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, bool bTranslucentBasePass, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "UpdateInstructionCount()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateInstructionCount(FDebugViewModeShaderElementData& OutShaderElementData, const FMaterial* InBatchMaterial, FVertexFactoryType* InVertexFactoryType)"
  },
  {
    "label": "FDebugViewModeImplementation()",
    "kind": "Method",
    "detail": "Function (EDebugViewShaderMode DebugViewMode ; int32 ViewModeParam ; FName ViewModeParamName ; const FDebugViewModeInterface* DebugViewModeInterface ; } ; class FDebugViewModeImplementation : public FDebugViewModeInterface { public :)",
    "insertText": "FDebugViewModeImplementation() : FDebugViewModeInterface()"
  },
  {
    "label": "AddShaderTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddShaderTypes(ERHIFeatureLevel::Type InFeatureLevel, const FVertexFactoryType* InVertexFactoryType, FMaterialShaderTypes& OutShaderTypes)"
  },
  {
    "label": "GetDebugViewModeShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugViewModeShaderBindings(const FDebugViewModePS& BaseShader, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT Material, EDebugViewShaderMode DebugViewMode, const FVector& ViewOrigin, int32 VisualizeLODIndex, const FColor& SkinCacheDebugColor, int32 VisualizeElementIndex, int32 NumVSInstructions, int32 NumPSInstructions, int32 LWCComplexityVS, int32 LWCComplexityPS, int32 ViewModeParam, FName ViewModeParamName, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "RenderDebugViewMode()",
    "kind": "Method",
    "detail": "Function (} ; # endif void)",
    "insertText": "RenderDebugViewMode(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> Views, FRDGTextureRef QuadOverdrawTexture, const FRenderTargetBindingSlots& RenderTargets)"
  }
]