[
  {
    "label": "FProgressCancel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressCancel"
  },
  {
    "label": "EBox3FitCriteria",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBox3FitCriteria"
  },
  {
    "label": "FitOrientedBox3Points()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Vector . h \" # include \" VectorTypes . h \" # include \" OrientedBoxTypes . h \" class FProgressCancel ; namespace UE { namespace Geometry { enum EBox3FitCriteria { Volume,SurfaceArea } ; template<RealType> TOrientedBox3<RealType>)",
    "insertText": "FitOrientedBox3Points(int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> Filter, EBox3FitCriteria FitMethod = EBox3FitCriteria::Volume, RealType SameNormalTolerance = 0, FProgressCancel* ProgressCancel = nullptr)"
  },
  {
    "label": "FitOrientedBox3Points()",
    "kind": "Method",
    "detail": "Function (template<RealType> TOrientedBox3<RealType>)",
    "insertText": "FitOrientedBox3Points(TArrayView<const TVector<RealType>> Points, EBox3FitCriteria FitMethod = EBox3FitCriteria::Volume, RealType SameNormalTolerance = 0, FProgressCancel* ProgressCancel = nullptr)"
  },
  {
    "label": "Points()",
    "kind": "Method",
    "detail": "Function (auto GetPtFn = [&)",
    "insertText": "Points(int32 Idx)"
  },
  {
    "label": "OptimizeOrientedBox3Points()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TOrientedBox3<RealType>)",
    "insertText": "OptimizeOrientedBox3Points(const TOrientedBox3<RealType>& InitialBox, int32 NumIterations, int32 NumPoints, TFunctionRef<TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> Filter, EBox3FitCriteria FitMethod = EBox3FitCriteria::Volume, FProgressCancel* ProgressCancel = nullptr)"
  }
]