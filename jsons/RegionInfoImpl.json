[
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_REGIONINFOIMPL_H # define LLVM_ANALYSIS_REGIONINFOIMPL_H # include \" llvm / ADT / PostOrderIterator . h \" # include \" llvm / Analysis / DominanceFrontier . h \" # include \" llvm / Analysis / LoopInfo . h \" # include \" llvm / Analysis / PostDominators . h \" # include \" llvm / Analysis / RegionInfo . h \" # include \" llvm / Analysis / RegionIterator . h \" # include \" llvm / Support / CommandLine . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / ErrorHandling . h \" # include<algorithm> # include<iterator> # include<set> namespace llvm { # define DEBUG_TYPE \" region \" template<class Tr> RegionBase<Tr)",
    "insertText": "RegionBase(BlockT *Entry, BlockT *Exit, typename Tr::RegionInfoT *RInfo, DomTreeT *dt, RegionT *Parent) : RegionNodeBase<Tr>(Parent, Entry, 1), RI(RInfo), DT(dt), exit(Exit)"
  },
  {
    "label": "RegionBase()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionBase<Tr>::~)",
    "insertText": "RegionBase()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (BBNodeMap .)",
    "insertText": "clear()"
  },
  {
    "label": "replaceEntry()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "replaceEntry(BlockT *BB)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (this -> entry .)",
    "insertText": "setPointer(BB)"
  },
  {
    "label": "replaceExit()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "replaceExit(BlockT *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(exit && \"No exit to replace!\")"
  },
  {
    "label": "replaceEntryRecursive()",
    "kind": "Method",
    "detail": "Function (exit = BB ; } template<class Tr> void RegionBase<Tr)",
    "insertText": "replaceEntryRecursive(BlockT *NewEntry)"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (std::vector<RegionT*> RegionQueue ; BlockT* OldEntry =)",
    "insertText": "getEntry()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (RegionQueue .)",
    "insertText": "push_back(static_cast<RegionT *>(this))"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (RegionT* R = RegionQueue .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (RegionQueue .)",
    "insertText": "pop_back()"
  },
  {
    "label": "replaceEntry()",
    "kind": "Method",
    "detail": "Function (R ->)",
    "insertText": "replaceEntry(NewEntry)"
  },
  {
    "label": "replaceExitRecursive()",
    "kind": "Method",
    "detail": "Function (} } } template<class Tr> void RegionBase<Tr)",
    "insertText": "replaceExitRecursive(BlockT *NewExit)"
  },
  {
    "label": "getExit()",
    "kind": "Method",
    "detail": "Function (std::vector<RegionT*> RegionQueue ; BlockT* OldExit =)",
    "insertText": "getExit()"
  },
  {
    "label": "replaceExit()",
    "kind": "Method",
    "detail": "Function (R ->)",
    "insertText": "replaceExit(NewExit)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} } } template<class Tr> bool RegionBase<Tr)",
    "insertText": "contains(const BlockT *B)"
  },
  {
    "label": "BlockT()",
    "kind": "Method",
    "detail": "Function (BlockT* BB = const_cast<)",
    "insertText": "BlockT(B)"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (BlockT* entry =)",
    "insertText": "getEntry(), *exit = getExit()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> bool RegionBase<Tr)",
    "insertText": "contains(const LoopT *L)"
  },
  {
    "label": "getExitingBlocks()",
    "kind": "Method",
    "detail": "Function (SmallVector<BlockT*,8> ExitingBlocks ; L ->)",
    "insertText": "getExitingBlocks(ExitingBlocks)"
  },
  {
    "label": "outermostLoopInRegion()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<class Tr> Tr::LoopT* RegionBase<Tr)",
    "insertText": "outermostLoopInRegion(LoopT *L)"
  },
  {
    "label": "getParentLoop()",
    "kind": "Method",
    "detail": "Function (L = L ->)",
    "insertText": "getParentLoop()"
  },
  {
    "label": "outermostLoopInRegion()",
    "kind": "Method",
    "detail": "Function (} return L ; } template<class Tr> Tr::LoopT* RegionBase<Tr)",
    "insertText": "outermostLoopInRegion(LoopInfoT *LI, BlockT *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LI && BB && \"LI and BB cannot be null!\")"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (LoopT* L = LI ->)",
    "insertText": "getLoopFor(BB)"
  },
  {
    "label": "getEnteringBlock()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionBase<Tr>::BlockT* RegionBase<Tr)",
    "insertText": "getEnteringBlock()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BlockT* Pred ; BlockT* enteringBlock = nullptr ;)",
    "insertText": "for(PredIterTy PI = InvBlockTraits::child_begin(entry), PE = InvBlockTraits::child_end(entry); PI != PE; ++PI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Pred =* PI ;)",
    "insertText": "if(DT->getNode(Pred) && !contains(Pred))"
  },
  {
    "label": "getExitingBlock()",
    "kind": "Method",
    "detail": "Function (enteringBlock = Pred ; } } return enteringBlock ; } template<class Tr> RegionBase<Tr>::BlockT* RegionBase<Tr)",
    "insertText": "getExitingBlock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlockT* Pred ; BlockT* exitingBlock = nullptr ;)",
    "insertText": "if(!exit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Pred =* PI ;)",
    "insertText": "if(contains(Pred))"
  },
  {
    "label": "isSimple()",
    "kind": "Method",
    "detail": "Function (exitingBlock = Pred ; } } return exitingBlock ; } template<class Tr> bool RegionBase<Tr)",
    "insertText": "isSimple()"
  },
  {
    "label": "getNameStr()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> std::string RegionBase<Tr)",
    "insertText": "getNameStr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string exitName ; std::string entryName ;)",
    "insertText": "if(getEntry()->getName().empty())"
  },
  {
    "label": "OS()",
    "kind": "Method",
    "detail": "Function (raw_string_ostream)",
    "insertText": "OS(entryName)"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getEntry()->printAsOperand(OS, false)"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (} else entryName =)",
    "insertText": "getEntry()->getName()"
  },
  {
    "label": "OS()",
    "kind": "Method",
    "detail": "Function (raw_string_ostream)",
    "insertText": "OS(exitName)"
  },
  {
    "label": "getExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getExit()->printAsOperand(OS, false)"
  },
  {
    "label": "getExit()",
    "kind": "Method",
    "detail": "Function (} else exitName =)",
    "insertText": "getExit()->getName()"
  },
  {
    "label": "verifyBBInRegion()",
    "kind": "Method",
    "detail": "Function (} else exitName = \"<Function Return> \" ; return entryName + \" => \" + exitName ; } template<class Tr> void RegionBase<Tr)",
    "insertText": "verifyBBInRegion(BlockT *BB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(entry != BB)"
  },
  {
    "label": "verifyWalk()",
    "kind": "Method",
    "detail": "Function (} } } template<class Tr> void RegionBase<Tr)",
    "insertText": "verifyWalk(BlockT *BB, std::set<BlockT *> *visited)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (visited ->)",
    "insertText": "insert(BB)"
  },
  {
    "label": "verifyRegion()",
    "kind": "Method",
    "detail": "Function (} } template<class Tr> void RegionBase<Tr)",
    "insertText": "verifyRegion()"
  },
  {
    "label": "verifyWalk()",
    "kind": "Method",
    "detail": "Function (std::set<BlockT*> visited ;)",
    "insertText": "verifyWalk(getEntry(), &visited)"
  },
  {
    "label": "verifyRegionNest()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "verifyRegionNest()"
  },
  {
    "label": "element_begin()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionBase<Tr>::element_iterator RegionBase<Tr)",
    "insertText": "element_begin()"
  },
  {
    "label": "element_end()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionBase<Tr>::element_iterator RegionBase<Tr)",
    "insertText": "element_end()"
  },
  {
    "label": "getSubRegionNode()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> Tr::RegionT* RegionBase<Tr)",
    "insertText": "getSubRegionNode(BlockT *BB)"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (typedef Tr::RegionT RegionT ; RegionT* R = RI ->)",
    "insertText": "getRegionFor(BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(contains(R) && \"BB not in current region!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(contains(BB) && \"Can get BB node out of this region!\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (BBNodeMapT::const_iterator at = BBNodeMap .)",
    "insertText": "find(BB)"
  },
  {
    "label": "Tr()",
    "kind": "Method",
    "detail": "Function (auto Deconst = const_cast<RegionBase<)",
    "insertText": "Tr(this)"
  },
  {
    "label": "RegionNodeT()",
    "kind": "Method",
    "detail": "Function (RegionNodeT* NewNode = new)",
    "insertText": "RegionNodeT(static_cast<RegionT *>(Deconst), BB)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (BBNodeMap .)",
    "insertText": "insert(std::make_pair(BB, NewNode))"
  },
  {
    "label": "transferChildrenTo()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "transferChildrenTo(RegionT *To)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (To -> children .)",
    "insertText": "push_back(std::move(*I))"
  },
  {
    "label": "addSubRegion()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "addSubRegion(RegionT *SubRegion, bool moveChildren)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!SubRegion->parent && \"SubRegion already has a parent!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(std::find_if(begin(), end(), [&](const std::unique_ptr<RegionT> &R) { return R.get() == SubRegion; }) == children.end() && \"Subregion already exists!\")"
  },
  {
    "label": "RegionT()",
    "kind": "Method",
    "detail": "Function (SubRegion -> parent = static_cast<)",
    "insertText": "RegionT(this)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (children .)",
    "insertText": "push_back(std::unique_ptr<RegionT>(SubRegion))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SubRegion->children.empty() && \"SubRegions that contain children are not supported\")"
  },
  {
    "label": "BB()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "BB(*I)->template getNodeAs<BlockT>()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } std::vector<std::unique_ptr<RegionT>> Keep ;)",
    "insertText": "for(iterator I = begin(), E = end(); I != E; ++I)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (children .)",
    "insertText": "insert(children.begin(), std::move_iterator<typename RegionSet::iterator>(Keep.begin()), std::move_iterator<typename RegionSet::iterator>(Keep.end()))"
  },
  {
    "label": "removeSubRegion()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> Tr::RegionT* RegionBase<Tr)",
    "insertText": "removeSubRegion(RegionT *Child)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Child->parent == this && \"Child is not a child of this region!\")"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (Child -> parent = nullptr ; RegionSet::iterator I =)",
    "insertText": "find_if(children.begin(), children.end(), [&](const std::unique_ptr<RegionT> &R) { return R.get() == Child; })"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != children.end() && \"Region does not exit. Unable to remove.\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (children .)",
    "insertText": "erase(children.begin() + (I - begin()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned Depth = 0 ;)",
    "insertText": "for(RegionT *R = getParent(); R != nullptr; R = R->getParent())"
  },
  {
    "label": "getNumSuccessors()",
    "kind": "Method",
    "detail": "Function (unsigned NumSuccessors =)",
    "insertText": "getNumSuccessors(exit)"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (} RegionT* R = RI ->)",
    "insertText": "getRegionFor(exit)"
  },
  {
    "label": "RegionT()",
    "kind": "Method",
    "detail": "Function (} } return new)",
    "insertText": "RegionT(getEntry(), R->getExit(), RI, DT)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionBase<Tr)",
    "insertText": "print(raw_ostream &OS, bool print_tree, unsigned level, PrintStyle Style)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OS<<' \\ n ' ;)",
    "insertText": "if(Style != PrintNone)"
  },
  {
    "label": "indent()",
    "kind": "Method",
    "detail": "Function (OS .)",
    "insertText": "indent(level * 2)"
  },
  {
    "label": "indent()",
    "kind": "Method",
    "detail": "Function (\\ n \" ; OS .)",
    "insertText": "indent(level * 2 + 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Style == PrintRN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OS<<** I<<\",\" ; } } OS<<' \\ n ' ; })",
    "insertText": "if(print_tree)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Style != PrintNone) OS.indent(level * 2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(NDEBUG) || defined(LLVM_ENABLE_DUMP) template <class Tr> void RegionBase<Tr>::dump()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(dbgs(), true, getDepth(), RegionInfoBase<Tr>::printStyle)"
  },
  {
    "label": "clearNodeCache()",
    "kind": "Method",
    "detail": "Function (} # endif template<class Tr> void RegionBase<Tr)",
    "insertText": "clearNodeCache()"
  },
  {
    "label": "RegionInfoBase()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionInfoBase<Tr)",
    "insertText": "RegionInfoBase() : TopLevelRegion(nullptr)"
  },
  {
    "label": "RegionInfoBase()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionInfoBase<Tr>::~)",
    "insertText": "RegionInfoBase()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "isCommonDomFrontier()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> bool RegionInfoBase<Tr)",
    "insertText": "isCommonDomFrontier(BlockT *BB, BlockT *entry, BlockT *exit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlockT* P =* PI ;)",
    "insertText": "if(DT->dominates(entry, P) && !DT->dominates(exit, P))"
  },
  {
    "label": "isRegion()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<class Tr> bool RegionInfoBase<Tr)",
    "insertText": "isRegion(BlockT *entry, BlockT *exit)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(entry && exit && \"entry and exit must not be null!\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (second)",
    "insertText": "find(entry)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (second)",
    "insertText": "find(exit)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(typename DST::iterator SI = exitSuccs->begin(), SE = exitSuccs->end(); SI != SE; ++SI)"
  },
  {
    "label": "insertShortCut()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "insertShortCut(BlockT *entry, BlockT *exit, BBtoBBMap *ShortCut)"
  },
  {
    "label": "getNextPostDom()",
    "kind": "Method",
    "detail": "Function (} } template<class Tr> Tr::DomTreeNodeT* RegionInfoBase<Tr)",
    "insertText": "getNextPostDom(DomTreeNodeT *N, BBtoBBMap *ShortCut)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (BBtoBBMap::iterator e = ShortCut ->)",
    "insertText": "find(N->getBlock())"
  },
  {
    "label": "isTrivialRegion()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> bool RegionInfoBase<Tr)",
    "insertText": "isTrivialRegion(BlockT *entry, BlockT *exit)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (unsigned num_successors =)",
    "insertText": "child_end(entry) - BlockTraits::child_begin(entry)"
  },
  {
    "label": "RegionT()",
    "kind": "Method",
    "detail": "Function (RegionT* region = new)",
    "insertText": "RegionT(entry, exit, static_cast<RegionInfoT *>(this), DT)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (BBtoRegion .)",
    "insertText": "insert(std::make_pair(entry, region))"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "DEBUG(region->verifyRegion())"
  },
  {
    "label": "updateStatistics()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "updateStatistics(region)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(entry)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (RegionT* lastRegion = nullptr ; BlockT* lastExit = entry ;)",
    "insertText": "while((N = getNextPostDom(N, ShortCut)))"
  },
  {
    "label": "getBlock()",
    "kind": "Method",
    "detail": "Function (BlockT* exit = N ->)",
    "insertText": "getBlock()"
  },
  {
    "label": "createRegion()",
    "kind": "Method",
    "detail": "Function (RegionT* newRegion =)",
    "insertText": "createRegion(entry, exit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastRegion = newRegion ; lastExit = exit ; })",
    "insertText": "if(!DT->dominates(entry, exit))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(lastExit != entry) insertShortCut(entry, lastExit, ShortCut)"
  },
  {
    "label": "scanForRegions()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "scanForRegions(FuncT &F, BBtoBBMap *ShortCut)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (typedef std::add_pointer<FuncT>::type FuncPtrT ; BlockT* entry = GraphTraits<FuncPtrT)",
    "insertText": "getEntryNode(&F)"
  },
  {
    "label": "getTopMostParent()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> Tr::RegionT* RegionInfoBase<Tr)",
    "insertText": "getTopMostParent(RegionT *region)"
  },
  {
    "label": "addSubRegion()",
    "kind": "Method",
    "detail": "Function (RegionT* newRegion = it -> second ; region ->)",
    "insertText": "addSubRegion(getTopMostParent(newRegion))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (region = newRegion ; } else { BBtoRegion [ BB ] = region ; })",
    "insertText": "for(typename DomTreeNodeT::iterator CI = N->begin(), CE = N->end(); CI != CE; ++CI)"
  },
  {
    "label": "buildRegionsTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildRegionsTree(*CI, region)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} } # ifdef XDEBUG template<class Tr> bool RegionInfoBase<Tr>::VerifyRegionInfo = true ; # else template<class Tr> bool RegionInfoBase<Tr>::VerifyRegionInfo = false ; # endif template<class Tr> Tr::RegionT::PrintStyle RegionInfoBase<Tr>::printStyle = RegionBase<Tr>::PrintNone ; template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (OS<<\" Region tree : \\ n \" ; TopLevelRegion ->)",
    "insertText": "print(OS, true, 0, printStyle)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (OS<<\" End region tree \\ n \" ; } # if !)",
    "insertText": "defined(NDEBUG) || defined(LLVM_ENABLE_DUMP) template <class Tr> void RegionInfoBase<Tr>::dump()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(dbgs())"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (TopLevelRegion = nullptr ; } template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> Tr::RegionT* RegionInfoBase<Tr)",
    "insertText": "getRegionFor(BlockT *BB)"
  },
  {
    "label": "setRegionFor()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "setRegionFor(BlockT *BB, RegionT *R)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BBtoRegion [ BB ] = R ; } template<class Tr> Tr::RegionT* RegionInfoBase<Tr)",
    "insertText": "operator(BlockT *BB)"
  },
  {
    "label": "getMaxRegionExit()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> RegionInfoBase<Tr>::BlockT* RegionInfoBase<Tr)",
    "insertText": "getMaxRegionExit(BlockT *BB)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (BlockT* Exit = nullptr ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DT->dominates(Exit, BB))"
  },
  {
    "label": "getCommonRegion()",
    "kind": "Method",
    "detail": "Function (BB = Exit ; } return Exit ; } template<class Tr> Tr::RegionT* RegionInfoBase<Tr)",
    "insertText": "getCommonRegion(RegionT *A, RegionT *B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(A && B && \"One of the Regions is NULL\")"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (RegionT* ret =)",
    "insertText": "getRegionFor(BBs.back())"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (RegionT* R =)",
    "insertText": "getRegionFor(OldBB)"
  },
  {
    "label": "setRegionFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRegionFor(NewBB, R)"
  },
  {
    "label": "replaceEntry()",
    "kind": "Method",
    "detail": "Function (R ->)",
    "insertText": "replaceEntry(NewBB)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (R = R ->)",
    "insertText": "getParent()"
  },
  {
    "label": "setRegionFor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "setRegionFor(OldBB, R)"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (} template<class Tr> void RegionInfoBase<Tr)",
    "insertText": "calculate(FuncT &F)"
  },
  {
    "label": "scanForRegions()",
    "kind": "Method",
    "detail": "Function (typedef std::add_pointer<FuncT>::type FuncPtrT ; BBtoBBMap ShortCut ;)",
    "insertText": "scanForRegions(F, &ShortCut)"
  },
  {
    "label": "buildRegionsTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildRegionsTree(DT->getNode(BB), TopLevelRegion)"
  }
]