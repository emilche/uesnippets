[
  {
    "label": "Record",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Record"
  },
  {
    "label": "LibraryRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LibraryRecord"
  },
  {
    "label": "PatchFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_ProcessTypes . h \" # include \" LC_Symbols . h \" # include \" LC_ModuleCache . h \" namespace functions { struct Record { const symbols::ThunkDB* thunkDb ; uint32_t functionRva ; uint32_t patchFunctionRva ; uint16_t patchIndex ; uint8_t directJumpInstructionSize ; } ; struct LibraryRecord { uint32_t srcRva ; uint32_t destRva ; uint16_t patchIndex ; uint16_t wholeInstructionSize ; } ; Record)",
    "insertText": "PatchFunction(char* originalAddress, char* patchAddress, uint32_t functionRva, uint32_t patchFunctionRva, const symbols::ThunkDB* thunkDb, const symbols::Contribution* contribution, Process::Handle processHandle, void* moduleBase, uint16_t moduleIndex, types::unordered_set<const void*>& patchedAddresses, const types::vector<const void*>& threadIPs, Process::Id processId, const char* functionName)"
  },
  {
    "label": "PatchLibraryFunction()",
    "kind": "Method",
    "detail": "Function (LibraryRecord)",
    "insertText": "PatchLibraryFunction(char* srcAddress, char* destAddress, uint32_t srcRva, uint32_t destRva, const symbols::Contribution* contribution, Process::Handle processHandle, uint16_t moduleIndex)"
  },
  {
    "label": "PatchFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchFunction(const Record& record, Process::Handle processHandle, void* processModuleBases[], void* newModuleBase, types::unordered_set<const void*>& patchedAddresses, const types::vector<const void*>& threadIPs)"
  },
  {
    "label": "PatchLibraryFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchLibraryFunction(const LibraryRecord& record, Process::Handle processHandle, void* processModuleBases[], void* newModuleBase)"
  },
  {
    "label": "IsValidRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRecord(const Record& record)"
  },
  {
    "label": "IsValidRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRecord(const LibraryRecord& record)"
  }
]