[
  {
    "label": "VoipCore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoipCore"
  },
  {
    "label": "VoipCore()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_VOIP_VOIP_CORE_H_ # define AUDIO_VOIP_VOIP_CORE_H_ # include<map> # include<memory> # include<queue> # include<unordered_map> # include<vector> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / voip / voip_base . h \" # include \" api / voip / voip_codec . h \" # include \" api / voip / voip_dtmf . h \" # include \" api / voip / voip_engine . h \" # include \" api / voip / voip_network . h \" # include \" api / voip / voip_statistics . h \" # include \" api / voip / voip_volume_control . h \" # include \" audio / audio_transport_impl . h \" # include \" audio / voip / audio_channel . h \" # include \" modules / audio_device / include / audio_device . h \" # include \" modules / audio_mixer / audio_mixer_impl . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class VoipCore : public VoipEngine,public VoipBase,public VoipNetwork,public VoipCodec,public VoipDtmf,public VoipStatistics,public VoipVolumeControl { public :)",
    "insertText": "VoipCore(rtc::scoped_refptr<AudioEncoderFactory> encoder_factory, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory, std::unique_ptr<TaskQueueFactory> task_queue_factory, rtc::scoped_refptr<AudioDeviceModule> audio_device_module, rtc::scoped_refptr<AudioProcessing> audio_processing)"
  },
  {
    "label": "VoipCore()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VoipCore()"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (VoipBase&)",
    "insertText": "Base()"
  },
  {
    "label": "ReleaseChannel()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "ReleaseChannel(ChannelId channel_id)"
  },
  {
    "label": "StartSend()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "StartSend(ChannelId channel_id)"
  },
  {
    "label": "StopSend()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "StopSend(ChannelId channel_id)"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "StartPlayout(ChannelId channel_id)"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "StopPlayout(ChannelId channel_id)"
  },
  {
    "label": "ReceivedRTPPacket()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "ReceivedRTPPacket(ChannelId channel_id, rtc::ArrayView<const uint8_t> rtp_packet)"
  },
  {
    "label": "ReceivedRTCPPacket()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "ReceivedRTCPPacket(ChannelId channel_id, rtc::ArrayView<const uint8_t> rtcp_packet)"
  },
  {
    "label": "SetSendCodec()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "SetSendCodec(ChannelId channel_id, int payload_type, const SdpAudioFormat& encoder_format)"
  },
  {
    "label": "SetReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "SetReceiveCodecs(ChannelId channel_id, const std::map<int, SdpAudioFormat>& decoder_specs)"
  },
  {
    "label": "RegisterTelephoneEventType()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "RegisterTelephoneEventType(ChannelId channel_id, int rtp_payload_type, int sample_rate_hz)"
  },
  {
    "label": "SendDtmfEvent()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "SendDtmfEvent(ChannelId channel_id, DtmfEvent dtmf_event, int duration_ms)"
  },
  {
    "label": "GetIngressStatistics()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "GetIngressStatistics(ChannelId channel_id, IngressStatistics& ingress_stats)"
  },
  {
    "label": "GetChannelStatistics()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "GetChannelStatistics(ChannelId channe_id, ChannelStatistics& channel_stats)"
  },
  {
    "label": "SetInputMuted()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "SetInputMuted(ChannelId channel_id, bool enable)"
  },
  {
    "label": "GetInputVolumeInfo()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "GetInputVolumeInfo(ChannelId channel_id, VolumeInfo& volume_info)"
  },
  {
    "label": "GetOutputVolumeInfo()",
    "kind": "Method",
    "detail": "Function (VoipResult)",
    "insertText": "GetOutputVolumeInfo(ChannelId channel_id, VolumeInfo& volume_info)"
  },
  {
    "label": "InitializeIfNeeded()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "InitializeIfNeeded()"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioChannel>)",
    "insertText": "GetChannel(ChannelId channel_id)"
  },
  {
    "label": "UpdateAudioTransportWithSenders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAudioTransportWithSenders()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioEncoderFactory> encoder_factory_ ; rtc::scoped_refptr<AudioDecoderFactory> decoder_factory_ ; std::unique_ptr<TaskQueueFactory> task_queue_factory_ ; rtc::scoped_refptr<AudioProcessing> audio_processing_ ; rtc::scoped_refptr<AudioMixer> audio_mixer_ ; std::unique_ptr<AudioTransportImpl> audio_transport_ ; rtc::scoped_refptr<AudioDeviceModule> audio_device_module_ ; Mutex lock_ ; int next_channel_id_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]