[
  {
    "label": "noise_level",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "noise_level"
  },
  {
    "label": "noise_estimate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "noise_estimate"
  },
  {
    "label": "VP9_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9_COMP"
  },
  {
    "label": "vp9_noise_estimate_init()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_ENCODER_VP9_NOISE_ESTIMATE_H_ # define VPX_VP9_ENCODER_VP9_NOISE_ESTIMATE_H_ # include \" vp9 / encoder / vp9_block . h \" # include \" vp9 / encoder / vp9_skin_detection . h \" # include \" vpx_scale / yv12config . h \" # if CONFIG_VP9_TEMPORAL_DENOISING # include \" vp9 / encoder / vp9_denoiser . h \" # endif # ifdef __cplusplus \" C \" { # endif # define MAX_VAR_HIST_BINS 2 0 typedef enum noise_level { kLowLow,kLow,kMedium,kHigh } NOISE_LEVEL ; typedef struct noise_estimate { int enabled ; NOISE_LEVEL level ; int value ; int thresh ; int adapt_thresh ; int count ; int last_w ; int last_h ; int num_frames_estimate ; } NOISE_ESTIMATE ; struct VP9_COMP ; void)",
    "insertText": "vp9_noise_estimate_init(NOISE_ESTIMATE *const ne, int width, int height)"
  },
  {
    "label": "vp9_noise_estimate_extract_level()",
    "kind": "Method",
    "detail": "Function (NOISE_LEVEL)",
    "insertText": "vp9_noise_estimate_extract_level(NOISE_ESTIMATE *const ne)"
  },
  {
    "label": "vp9_update_noise_estimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_update_noise_estimate(struct VP9_COMP *const cpi)"
  }
]