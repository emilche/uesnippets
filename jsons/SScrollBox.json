[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SScrollPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollPanel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SScrollBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBox"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" SlotBase . h \" # include \" Layout / Geometry . h \" # include \" Styling / SlateColor . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Input / NavigationReply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / SBoxPanel . h \" # include \" Layout / Children . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Layout / SScrollBar . h \" # include \" Framework / Layout / InertialScrollManager . h \" # include \" Framework / Layout / Overscroll . h \" # include \" SScrollBox . generated . h \" class FPaintArgs ; class FSlateWindowElementList ; class SScrollPanel ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (NoScroll,InstantScroll,AnimatedScroll,} ; class SScrollBox : public SCompoundWidget { public : class FSlot : public TBasicLayoutWidgetSlot<FSlot> { public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TBasicLayoutWidgetSlot<FSlot>) SLATE_ARGUMENT(TOptional<FSizeParam>, SizeParam)"
  },
  {
    "label": "AutoSize()",
    "kind": "Method",
    "detail": "Function (TAttribute<float> _MaxSize ; FSlotArguments&)",
    "insertText": "AutoSize()"
  },
  {
    "label": "FAuto()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FAuto()"
  },
  {
    "label": "FillSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillSize(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "FStretch()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FStretch(MoveTemp(InStretchCoefficient))"
  },
  {
    "label": "FillContentSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillContentSize(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "FStretchContent()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FStretchContent(MoveTemp(InStretchCoefficient), MoveTemp(InShrinkStretchCoefficient))"
  },
  {
    "label": "MinSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MinSize(TAttribute<float> InMinHeight)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MinSize =)",
    "insertText": "MoveTemp(InMinHeight)"
  },
  {
    "label": "MaxSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MaxSize(TAttribute<float> InMaxHeight)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MaxSize =)",
    "insertText": "MoveTemp(InMaxHeight)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_END_ARGS() FSlot() : TBasicLayoutWidgetSlot<FSlot>(HAlign_Fill, VAlign_Fill) , SizeRule(FSizeParam::SizeRule_Auto) , SizeValue(*this, 1.f) , ShrinkSizeValue(*this, 1.f) , MinSize(*this, 0.0f) , MaxSize(*this, 0.0f)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAttributes(FSlateWidgetSlotAttributeInitializer& AttributeInitializer)"
  },
  {
    "label": "GetSizeRule()",
    "kind": "Method",
    "detail": "Function (FSizeParam::ESizeRule)",
    "insertText": "GetSizeRule()"
  },
  {
    "label": "GetShrinkSizeValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetShrinkSizeValue()"
  },
  {
    "label": "GetMinSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinSize()"
  },
  {
    "label": "GetMaxSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaxSize()"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeParam(FSizeParam InSizeParam)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeRule = InSizeParam . SizeRule ;)",
    "insertText": "if(SizeRule == FSizeParam::SizeRule_StretchContent)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (ShrinkSizeValue .)",
    "insertText": "Assign(*this, MoveTemp(InSizeParam.ShrinkValue))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} else { ShrinkSizeValue .)",
    "insertText": "Assign(*this, InSizeParam.Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } else { ShrinkSizeValue .)",
    "insertText": "Set(*this, 1.f)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} SizeValue .)",
    "insertText": "Assign(*this, MoveTemp(InSizeParam.Value))"
  },
  {
    "label": "SetSizeToAuto()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToAuto()"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FAuto())"
  },
  {
    "label": "SetSizeToStretch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToStretch(TAttribute<float> StretchCoefficient)"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FStretch(MoveTemp(StretchCoefficient)))"
  },
  {
    "label": "SetSizeToStretchContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToStretchContent(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FStretchContent(MoveTemp(InStretchCoefficient), MoveTemp(InShrinkStretchCoefficient)))"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinSize(TAttribute<float> InMinSize)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (MinSize .)",
    "insertText": "Assign(*this, MoveTemp(InMinSize))"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxSize(TAttribute<float> InMaxSize)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (MaxSize .)",
    "insertText": "Assign(*this, MoveTemp(InMaxSize))"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : FSizeParam::ESizeRule SizeRule ; bool bIsShrinkSizeValueSet ; TBasicLayoutWidgetSlot<FSlot>::template TSlateSlotAttribute<float> SizeValue ; TBasicLayoutWidgetSlot<FSlot>::template TSlateSlotAttribute<float> ShrinkSizeValue ; TBasicLayoutWidgetSlot<FSlot>::template TSlateSlotAttribute<float> MinSize ; TBasicLayoutWidgetSlot<FSlot>::template TSlateSlotAttribute<float> MaxSize ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SScrollBox) : _Style( &FAppStyle::Get().GetWidgetStyle<FScrollBoxStyle>(\"ScrollBox\") ) , _ScrollBarStyle( &FAppStyle::Get().GetWidgetStyle<FScrollBarStyle>(\"ScrollBar\") ) , _ExternalScrollbar() , _Orientation(Orient_Vertical) , _ScrollBarVisibility(EVisibility::Visible) , _ScrollBarAlwaysVisible(false) , _ScrollBarDragFocusCause(EFocusCause::Mouse) , _ScrollBarThickness(FVector2f(_Style->BarThickness, _Style->BarThickness)) , _ScrollBarPadding(2.0f) , _AllowOverscroll(EAllowOverscroll::Yes) , _BackPadScrolling(false) , _FrontPadScrolling(false) , _AnimateWheelScrolling(false) , _ScrollAnimationInterpSpeed(15.f) , _WheelScrollMultiplier(1.f) , _EnableTouchScrolling(true) , _NavigationDestination(EDescendantScrollDestination::IntoView) , _NavigationScrollPadding(0.0f) , _ScrollWhenFocusChanges(EScrollWhenFocusChanges::NoScroll) , _OnUserScrolled() , _OnScrollBarVisibilityChanged() , _ConsumeMouseWheel(EConsumeMouseWheel::WhenScrollingPossible)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots ) SLATE_STYLE_ARGUMENT( FScrollBoxStyle, Style ) SLATE_STYLE_ARGUMENT( FScrollBarStyle, ScrollBarStyle ) SLATE_ARGUMENT( TSharedPtr<SScrollBar>, ExternalScrollbar ) SLATE_ARGUMENT( EOrientation, Orientation ) SLATE_ARGUMENT( EVisibility, ScrollBarVisibility ) SLATE_ARGUMENT( bool, ScrollBarAlwaysVisible ) SLATE_ARGUMENT( EFocusCause, ScrollBarDragFocusCause ) SLATE_ARGUMENT( UE::Slate::FDeprecateVector2DParameter, ScrollBarThickness ) SLATE_ARGUMENT( FMargin, ScrollBarPadding ) SLATE_ARGUMENT(EAllowOverscroll, AllowOverscroll)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, BackPadScrolling)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, FrontPadScrolling)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, AnimateWheelScrolling)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, ScrollAnimationInterpSpeed)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, WheelScrollMultiplier)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, EnableTouchScrolling)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(EDescendantScrollDestination, NavigationDestination)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, NavigationScrollPadding)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(EScrollWhenFocusChanges, ScrollWhenFocusChanges)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnUserScrolled, OnUserScrolled) SLATE_EVENT(FOnScrollBarVisibilityChanged, OnScrollBarVisibilityChanged) SLATE_ARGUMENT(EConsumeMouseWheel, ConsumeMouseWheel)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() SLATE_API SScrollBox()"
  },
  {
    "label": "SScrollBox()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SScrollBox()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "InsertSlot()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments)",
    "insertText": "InsertSlot(int32 Index)"
  },
  {
    "label": "GetSlot()",
    "kind": "Method",
    "detail": "Function (const FSlot&)",
    "insertText": "GetSlot(int32 SlotIndex)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& WidgetToRemove)"
  },
  {
    "label": "NumSlots()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumSlots()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "IsRightClickScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightClickScrolling()"
  },
  {
    "label": "GetAllowOverscroll()",
    "kind": "Method",
    "detail": "Function (EAllowOverscroll)",
    "insertText": "GetAllowOverscroll()"
  },
  {
    "label": "SetAllowOverscroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowOverscroll(EAllowOverscroll NewAllowOverscroll)"
  },
  {
    "label": "SetAnimateWheelScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimateWheelScrolling(bool bInAnimateWheelScrolling)"
  },
  {
    "label": "SetScrollingAnimationInterpolationSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollingAnimationInterpolationSpeed(float NewScrollingAnimationInterpolationSpeed)"
  },
  {
    "label": "SetWheelScrollMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWheelScrollMultiplier(float NewWheelScrollMultiplier)"
  },
  {
    "label": "SetIsTouchScrollingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTouchScrollingEnabled(const bool bInEnableTouchScrolling)"
  },
  {
    "label": "SetScrollWhenFocusChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollWhenFocusChanges(EScrollWhenFocusChanges NewScrollWhenFocusChanges)"
  },
  {
    "label": "GetScrollOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrollOffset()"
  },
  {
    "label": "GetViewFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewFraction()"
  },
  {
    "label": "GetViewOffsetFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewOffsetFraction()"
  },
  {
    "label": "GetScrollOffsetOfEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrollOffsetOfEnd()"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollOffset(float NewScrollOffset)"
  },
  {
    "label": "ScrollToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToStart()"
  },
  {
    "label": "ScrollToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToEnd()"
  },
  {
    "label": "EndInertialScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndInertialScrolling()"
  },
  {
    "label": "ScrollDescendantIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollDescendantIntoView(const TSharedPtr<SWidget>& WidgetToFind, bool InAnimateScroll = true, EDescendantScrollDestination InDestination = EDescendantScrollDestination::IntoView, float Padding = 0)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "SetNavigationDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationDestination(const EDescendantScrollDestination NewNavigationDestination)"
  },
  {
    "label": "SetConsumeMouseWheel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsumeMouseWheel(EConsumeMouseWheel NewConsumeMouseWheel)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation InOrientation)"
  },
  {
    "label": "SetScrollBarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarVisibility(EVisibility InVisibility)"
  },
  {
    "label": "SetScrollBarAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarAlwaysVisible(bool InAlwaysVisible)"
  },
  {
    "label": "SetScrollBarTrackAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarTrackAlwaysVisible(bool InAlwaysVisible)"
  },
  {
    "label": "SetScrollBarThickness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarThickness(UE::Slate::FDeprecateVector2DParameter InThickness)"
  },
  {
    "label": "SetScrollBarPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarPadding(const FMargin& InPadding)"
  },
  {
    "label": "SetScrollBarRightClickDragAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarRightClickDragAllowed(bool bIsAllowed)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FScrollBoxStyle* InStyle)"
  },
  {
    "label": "SetScrollBarStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrollBarStyle(const FScrollBarStyle* InBarStyle)"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "InvalidateScrollBarStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateScrollBarStyle()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnClippingChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnClippingChanged()"
  },
  {
    "label": "ConstructScrollBar()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SScrollBar>)",
    "insertText": "ConstructScrollBar()"
  },
  {
    "label": "ConstructVerticalLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructVerticalLayout()"
  },
  {
    "label": "ConstructHorizontalLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructHorizontalLayout()"
  },
  {
    "label": "SetScrollComponentOnVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScrollComponentOnVector(FVector2f& InVector, float Value)"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (InVector . Y = Value ; } else { InVector . X = Value ; } } float DesiredScrollOffset ; bool)",
    "insertText": "ScrollBy(const FGeometry& AllottedGeometry, float LocalScrollAmount, EAllowOverscroll Overscroll, bool InAnimateScroll)"
  },
  {
    "label": "ScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollBar_OnUserScrolled(float InScrollOffsetFraction)"
  },
  {
    "label": "ScrollBar_OnScrollBarVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollBar_OnScrollBarVisibilityChanged(EVisibility NewVisibility)"
  },
  {
    "label": "GetStartShadowOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetStartShadowOpacity()"
  },
  {
    "label": "GetEndShadowOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetEndShadowOpacity()"
  },
  {
    "label": "UpdateInertialScroll()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateInertialScroll(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CanUseInertialScroll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseInertialScroll(float ScrollAmount)"
  },
  {
    "label": "BeginInertialScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInertialScrolling()"
  },
  {
    "label": "InternalScrollDescendantIntoView()",
    "kind": "Method",
    "detail": "Function (FMargin ScrollBarSlotPadding ; union { SHorizontalBox::FSlot* VerticalScrollBarSlot ; SVerticalBox::FSlot* HorizontalScrollBarSlot ; } ; protected : bool)",
    "insertText": "InternalScrollDescendantIntoView(const FGeometry& MyGeometry, const TSharedPtr<SWidget>& WidgetToFind, bool InAnimateScroll = true, EDescendantScrollDestination InDestination = EDescendantScrollDestination::IntoView, float Padding = 0)"
  },
  {
    "label": "GetKeyboardFocusableWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetKeyboardFocusableWidget(TSharedPtr<SWidget> InWidget)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SScrollPanel> ScrollPanel ; TSharedPtr<SScrollBar> ScrollBar ; float TickScrollDelta ; TOptional<int32> bFingerOwningTouchInteraction ; float AmountScrolledWhileRightMouseDown ; float PendingScrollTriggerAmount ; FInertialScrollManager InertialScrollManager ; FOverscroll Overscroll ; EAllowOverscroll AllowOverscroll ; bool BackPadScrolling ; bool FrontPadScrolling ; float NavigationScrollPadding ; EDescendantScrollDestination NavigationDestination ; EScrollWhenFocusChanges ScrollWhenFocusChanges ; FVector2f SoftwareCursorPosition ; FOnUserScrolled OnUserScrolled ; FOnScrollBarVisibilityChanged OnScrollBarVisibilityChanged ; EOrientation Orientation ; const FScrollBoxStyle* Style ; const FScrollBarStyle* ScrollBarStyle ; EConsumeMouseWheel ConsumeMouseWheel ; FGeometry CachedGeometry ; TFunction<)",
    "insertText": "void(FGeometry)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FActiveTimerHandle> UpdateInertialScrollHandle ; double LastScrollTime ; float WheelScrollMultiplier = 1 . f ; bool bEnableTouchScrolling = true ; float ScrollingAnimationInterpolationSpeed = 1 5 . f ; bool bAnimateWheelScrolling : 1 ; bool bShowSoftwareCursor : 1 ; bool bScrollBarIsExternal : 1 ; bool bIsScrolling : 1 ; bool bAnimateScroll : 1 ; bool bScrollToEnd : 1 ; bool bIsScrollingActiveTimerRegistered : 1 ; bool bAllowsRightClickDragScrolling : 1 ; bool bTouchPanningCapture : 1 ; } ; class SScrollPanel : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SScrollPanel)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_ARGUMENT(EOrientation, Orientation) SLATE_ARGUMENT(bool, BackPadScrolling) SLATE_ARGUMENT(bool, FrontPadScrolling) SLATE_END_ARGS() SScrollPanel() : Children(this)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, TArray<SScrollBox::FSlot::FSlotArguments> InSlots)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (Orientation = InOrientation ; } void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  }
]