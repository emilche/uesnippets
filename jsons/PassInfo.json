[
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "PassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassInfo"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PASSINFO_H # define LLVM_PASSINFO_H # include<cassert> # include<vector> namespace llvm { class Pass ; class TargetMachine ; class PassInfo { public : typedef)",
    "insertText": "Pass(*NormalCtor_t)()"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "Pass(*TargetMachineCtor_t)(TargetMachine *)"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (private : const char* const PassName ; const char* const PassArgument ; const void* PassID ; const bool IsCFGOnlyPass ; const bool IsAnalysis ; const bool IsAnalysisGroup ; std::vector<const PassInfo*> ItfImpl ; NormalCtor_t NormalCtor ; TargetMachineCtor_t TargetMachineCtor ; public :)",
    "insertText": "PassInfo(const char *name, const char *arg, const void *pi, NormalCtor_t normal, bool isCFGOnly, bool is_analysis, TargetMachineCtor_t machine = nullptr) : PassName(name), PassArgument(arg), PassID(pi), IsCFGOnlyPass(isCFGOnly), IsAnalysis(is_analysis), IsAnalysisGroup(false), NormalCtor(normal), TargetMachineCtor(machine)"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassInfo(const char *name, const void *pi) : PassName(name), PassArgument(\"\"), PassID(pi), IsCFGOnlyPass(false), IsAnalysis(false), IsAnalysisGroup(true), NormalCtor(nullptr), TargetMachineCtor(nullptr)"
  },
  {
    "label": "getPassName()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getPassName()"
  },
  {
    "label": "getTargetMachineCtor()",
    "kind": "Method",
    "detail": "Function (NormalCtor = Ctor ; } TargetMachineCtor_t)",
    "insertText": "getTargetMachineCtor()"
  },
  {
    "label": "createPass()",
    "kind": "Method",
    "detail": "Function (TargetMachineCtor = Ctor ; } Pass*)",
    "insertText": "createPass()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!isAnalysisGroup() || NormalCtor) && \"No default implementation found for analysis group!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NormalCtor && \"Cannot call createPass on PassInfo without default ctor!\")"
  },
  {
    "label": "addInterfaceImplemented()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addInterfaceImplemented(const PassInfo *ItfPI)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ItfImpl .)",
    "insertText": "push_back(ItfPI)"
  },
  {
    "label": "getInterfacesImplemented()",
    "kind": "Method",
    "detail": "Function (} const std::vector<const PassInfo*>&)",
    "insertText": "getInterfacesImplemented()"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PassInfo(const PassInfo &)"
  }
]