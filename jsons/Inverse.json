[
  {
    "label": "InverseImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InverseImpl"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Inverse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Inverse"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INVERSE_H # define EIGEN_INVERSE_H namespace Eigen { template<XprType,StorageKind> class InverseImpl ; namespace internal { template<XprType> struct traits<Inverse<XprType>> : traits<XprType::PlainObject> { typedef XprType::PlainObject PlainObject ; typedef traits<PlainObject> BaseTraits ; enum { Flags = BaseTraits::Flags& RowMajorBit } ; } ; } template<XprType> class Inverse : public InverseImpl<XprType,internal::traits<XprType>::StorageKind> { public : typedef XprType::StorageIndex StorageIndex ; typedef XprType::Scalar Scalar ; typedef internal::ref_selector<XprType>::type XprTypeNested ; typedef internal::remove_all<XprTypeNested>::type XprTypeNestedCleaned ; typedef internal::ref_selector<Inverse>::type Nested ; typedef internal::remove_all<XprType>::type NestedExpression ; EIGEN_DEVICE_FUNC)",
    "insertText": "Inverse(const XprType &xpr) : m_xpr(xpr)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const XprTypeNestedCleaned&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<ArgType> struct unary_evaluator<Inverse<ArgType>> : public evaluator<Inverse<ArgType>::PlainObject> { typedef Inverse<ArgType> InverseType ; typedef InverseType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ; enum { Flags = Base::Flags | EvalBeforeNestingBit } ;)",
    "insertText": "unary_evaluator(const InverseType& inv_xpr) : m_result(inv_xpr.rows(), inv_xpr.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(m_result, inv_xpr)"
  }
]