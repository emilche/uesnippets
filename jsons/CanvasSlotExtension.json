[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "UCanvasPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvasPanel"
  },
  {
    "label": "UCanvasPanelSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvasPanelSlot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCanvasSlotExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasSlotExtension"
  },
  {
    "label": "FCanvasSlotExtension()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / Layout / Anchors . h \" # include \" Widgets / SWidget . h \" # include \" WidgetReference . h \" # include \" DesignerExtension . h \" class FSlateWindowElementList ; class UCanvasPanel ; class UCanvasPanelSlot ; enum class EAnchorWidget : uint8 { Center,Left,Right,Top,Bottom,TopLeft,TopRight,BottomLeft,BottomRight,Count } ; class FCanvasSlotExtension : public FDesignerExtension { public :)",
    "insertText": "FCanvasSlotExtension()"
  },
  {
    "label": "CanExtendSelection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanExtendSelection(const TArray< FWidgetReference >& Selection)"
  },
  {
    "label": "ExtendSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendSelection(const TArray< FWidgetReference >& Selection, TArray< TSharedRef<FDesignerSurfaceElement> >& SurfaceElements)"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Paint(const TSet< FWidgetReference >& Selection, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "HandleAnchorBeginDrag()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "HandleAnchorBeginDrag(const FGeometry& Geometry, const FPointerEvent& Event, EAnchorWidget AnchorType)"
  },
  {
    "label": "HandleAnchorEndDrag()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnchorEndDrag(const FGeometry& Geometry, const FPointerEvent& Event, EAnchorWidget AnchorType)"
  },
  {
    "label": "HandleAnchorDragging()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAnchorDragging(const FGeometry& Geometry, const FPointerEvent& Event, EAnchorWidget AnchorType)"
  },
  {
    "label": "MakeAnchorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAnchorWidget(EAnchorWidget AnchorType, float Width, float Height)"
  },
  {
    "label": "OnMouseEnterAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnterAnchor()"
  },
  {
    "label": "OnMouseLeaveAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeaveAnchor()"
  },
  {
    "label": "GetAnchorBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAnchorBrush(EAnchorWidget AnchorType)"
  },
  {
    "label": "GetAnchorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAnchorVisibility(EAnchorWidget AnchorType)"
  },
  {
    "label": "GetAnchorAlignment()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetAnchorAlignment(EAnchorWidget AnchorType)"
  },
  {
    "label": "GetCollisionSegmentsForSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollisionSegmentsForSlot(UCanvasPanel* Canvas, int32 SlotIndex, TArray<FVector2D>& Segments)"
  },
  {
    "label": "GetCollisionSegmentsForSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollisionSegmentsForSlot(UCanvasPanel* Canvas, UCanvasPanelSlot* Slot, TArray<FVector2D>& Segments)"
  },
  {
    "label": "GetCollisionSegmentsFromGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollisionSegmentsFromGeometry(FGeometry ArrangedGeometry, TArray<FVector2D>& Segments)"
  },
  {
    "label": "PaintCollisionLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintCollisionLines(const TSet< FWidgetReference >& Selection, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "PaintDragPercentages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintDragPercentages(const TSet< FWidgetReference >& Selection, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "PaintLineWithText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintLineWithText(FVector2D Start, FVector2D End, FText Text, FVector2D TextTransform, bool InHorizontalLine, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "ProximitySnapValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProximitySnapValue(float SnapFrequency, float SnapProximity, FVector2D::FReal& Value)"
  }
]