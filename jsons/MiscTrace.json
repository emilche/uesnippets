[
  {
    "label": "ETraceFrameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceFrameType"
  },
  {
    "label": "FTraceUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceUtils"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMiscTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMiscTrace"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" CoreTypes . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Misc / Build . h \" # include \" ProfilingDebugging / FormatArgsTrace . h \" # include \" Trace / Config . h \" # if !)",
    "insertText": "defined(MISCTRACE_ENABLED)"
  },
  {
    "label": "Encode7bit()",
    "kind": "Method",
    "detail": "Function (TraceFrameType_Game,TraceFrameType_Rendering,TraceFrameType_Count } ; struct FTraceUtils { void)",
    "insertText": "Encode7bit(uint64 Value, uint8*& BufferPtr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Value>> = 7 ; })",
    "insertText": "while(Value > 0)"
  },
  {
    "label": "EncodeZigZag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EncodeZigZag(int64 Value, uint8*& BufferPtr)"
  },
  {
    "label": "Encode7bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode7bit((Value << 1) ^ (Value >> 63), BufferPtr)"
  },
  {
    "label": "OutputBookmarkSpec()",
    "kind": "Method",
    "detail": "Function (} } ; # if MISCTRACE_ENABLED class FName ; struct FMiscTrace { void)",
    "insertText": "OutputBookmarkSpec(const void* BookmarkPoint, const ANSICHAR* File, int32 Line, const TCHAR* Format)"
  },
  {
    "label": "OutputBookmark()",
    "kind": "Method",
    "detail": "Function (template<. . . Types> void)",
    "insertText": "OutputBookmark(const void* BookmarkPoint, Types... FormatArgs)"
  },
  {
    "label": "EncodeArguments()",
    "kind": "Method",
    "detail": "Function (uint8 FormatArgsBuffer [ 4 0 9 6 ] ; uint16 FormatArgsSize =)",
    "insertText": "EncodeArguments(FormatArgsBuffer, FormatArgs...)"
  },
  {
    "label": "OutputBookmarkInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBookmarkInternal(BookmarkPoint, FormatArgsSize, FormatArgsBuffer)"
  },
  {
    "label": "OutputBookmarkCycles()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Types> void)",
    "insertText": "OutputBookmarkCycles(uint64 Cycles, const void* BookmarkPoint, Types... FormatArgs)"
  },
  {
    "label": "OutputBookmarkInternalCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBookmarkInternalCycles(Cycles, BookmarkPoint, FormatArgsSize, FormatArgsBuffer)"
  },
  {
    "label": "OutputBeginRegion()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OutputBeginRegion(const TCHAR* RegionName)"
  },
  {
    "label": "OutputBeginRegionWithId()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] uint64)",
    "insertText": "OutputBeginRegionWithId(const TCHAR* RegionName)"
  },
  {
    "label": "OutputEndRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndRegion(const TCHAR* RegionName)"
  },
  {
    "label": "OutputEndRegionWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndRegionWithId(uint64 RegionId)"
  },
  {
    "label": "OutputBeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginFrame(ETraceFrameType FrameType)"
  },
  {
    "label": "OutputEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndFrame(ETraceFrameType FrameType)"
  },
  {
    "label": "OutputScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputScreenshot(const TCHAR* Name, uint64 Cycle, uint32 Width, uint32 Height, TArray64<uint8> Data)"
  },
  {
    "label": "ShouldTraceScreenshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTraceScreenshot()"
  },
  {
    "label": "ShouldTraceBookmark()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTraceBookmark()"
  },
  {
    "label": "ShouldTraceRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTraceRegion()"
  },
  {
    "label": "OutputBookmarkInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OutputBookmarkInternal(const void* BookmarkPoint, uint16 EncodedFormatArgsSize, uint8* EncodedFormatArgs)"
  },
  {
    "label": "OutputBookmarkInternalCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBookmarkInternalCycles(uint64 Cycles, const void* BookmarkPoint, uint16 EncodedFormatArgsSize, uint8* EncodedFormatArgs)"
  },
  {
    "label": "TRACE_BOOKMARK()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "TRACE_BOOKMARK(Format, ...) \\ static bool PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_const_v<std::remove_reference_t<decltype(Format)>>, \"Formatting string must be a const TCHAR array.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TIsArrayOrRefOfTypeByPredicate<decltype(Format), TIsCharEncodingCompatibleWithTCHAR>::Value, \"Formatting string must be a TCHAR array.\")"
  },
  {
    "label": "UE_VALIDATE_FORMAT_STRING()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_VALIDATE_FORMAT_STRING(Format, ##__VA_ARGS__)"
  },
  {
    "label": "OutputBookmarkSpec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OutputBookmarkSpec(&PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__), __FILE__, __LINE__, Format)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__)"
  },
  {
    "label": "OutputBookmark()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "OutputBookmark(&PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__), ##__VA_ARGS__)"
  },
  {
    "label": "TRACE_BOOKMARK_CYCLES()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_BOOKMARK_CYCLES(Cycles, Format, ...) \\ static bool PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__)"
  },
  {
    "label": "OutputBookmarkCycles()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "OutputBookmarkCycles(Cycles, &PREPROCESSOR_JOIN(__BookmarkPoint, __LINE__), ##__VA_ARGS__)"
  },
  {
    "label": "TRACE_BEGIN_REGION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_BEGIN_REGION(RegionName) \\ FMiscTrace::OutputBeginRegion(RegionName)"
  },
  {
    "label": "TRACE_BEGIN_REGION_WITH_ID()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_BEGIN_REGION_WITH_ID(RegionName) \\ FMiscTrace::OutputBeginRegionWithId(RegionName)"
  },
  {
    "label": "TRACE_END_REGION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_END_REGION(RegionName) \\ FMiscTrace::OutputEndRegion(RegionName)"
  },
  {
    "label": "TRACE_END_REGION_WITH_ID()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_END_REGION_WITH_ID(RegionId) \\ FMiscTrace::OutputEndRegionWithId(RegionId)"
  },
  {
    "label": "TRACE_BEGIN_FRAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_BEGIN_FRAME(FrameType) \\ FMiscTrace::OutputBeginFrame(FrameType)"
  },
  {
    "label": "TRACE_END_FRAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_END_FRAME(FrameType) \\ FMiscTrace::OutputEndFrame(FrameType)"
  },
  {
    "label": "TRACE_SCREENSHOT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_SCREENSHOT(Name, Cycle, Width, Height, Data) \\ FMiscTrace::OutputScreenshot(Name, Cycle, Width, Height, Data)"
  },
  {
    "label": "SHOULD_TRACE_SCREENSHOT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SHOULD_TRACE_SCREENSHOT() \\ FMiscTrace::ShouldTraceScreenshot() #define SHOULD_TRACE_BOOKMARK() \\ FMiscTrace::ShouldTraceBookmark() #define SHOULD_TRACE_REGION() \\ FMiscTrace::ShouldTraceRegion() #else #define TRACE_BOOKMARK(...) #define TRACE_BOOKMARK_CYCLES(...) #define TRACE_BEGIN_REGION(...) #define TRACE_BEGIN_REGION_WITH_ID(...)"
  }
]