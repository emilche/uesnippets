[
  {
    "label": "IAISightTargetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAISightTargetInterface"
  },
  {
    "label": "UAISense_Sight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense_Sight"
  },
  {
    "label": "UAISenseConfig_Sight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseConfig_Sight"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAISightEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISightEvent"
  },
  {
    "label": "FAISightTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISightTarget"
  },
  {
    "label": "FAISightQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISightQuery"
  },
  {
    "label": "FSortPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSortPredicate"
  },
  {
    "label": "FAISightQueryID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISightQueryID"
  },
  {
    "label": "FDigestedSightProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDigestedSightProperties"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQueriesOperationPostProcess",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FQueriesOperationPostProcess"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GenericTeamAgentInterface . h \" # include \" WorldCollision . h \" # include \" Misc / MTTransactionallySafeAccessDetector . h \" # include \" Perception / AISense . h \" # include \" AISense_Sight . generated . h \" class IAISightTargetInterface ; class UAISense_Sight ; class UAISenseConfig_Sight ; namespace ESightPerceptionEventName { enum Type { Undefined,GainedSight,LostSight } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAISightEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAISightEvent() : SeenActor(nullptr), Observer(nullptr)"
  },
  {
    "label": "FAISightEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAISightEvent(AActor* InSeenActor, AActor* InObserver, ESightPerceptionEventName::Type InEventType) : Age(0.f), EventType(InEventType), SeenActor(InSeenActor), Observer(InObserver)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAISightTarget { typedef uint32 FTargetId ; const FTargetId InvalidTargetId ; TWeakObjectPtr<AActor> Target ; TWeakInterfacePtr<IAISightTargetInterface> WeakSightTargetInterface ; FGenericTeamId TeamId ; FTargetId TargetId ;)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"SightTargetInterface is deprecated. Use WeakSightTargetInterface instead.\")"
  },
  {
    "label": "FAISightTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAISightTarget(AActor* InTarget = NULL, FGenericTeamId InTeamId = FGenericTeamId::NoTeam)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const AActor* TargetPtr = Target .)",
    "insertText": "Get()"
  },
  {
    "label": "GetTargetActor()",
    "kind": "Method",
    "detail": "Function (} const AActor*)",
    "insertText": "GetTargetActor()"
  },
  {
    "label": "FAISightQuery()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAISightQuery { FPerceptionListenerID ObserverId ; FAISightTarget::FTargetId TargetId ; float Score ; float Importance ; FVector LastSeenLocation ; int32 UserData ; union { struct { uint64 bLastResult : 1 ; uint64 LastProcessedFrameNumber : 6 3 ; } FrameInfo ; struct { uint32 bLastResult : 1 ; uint32 Index : 3 1 ; uint32 FrameNumber ; } TraceInfo ; } ;)",
    "insertText": "FAISightQuery(FPerceptionListenerID ListenerId = FPerceptionListenerID::InvalidID(), FAISightTarget::FTargetId Target = FAISightTarget::InvalidTargetId) : ObserverId(ListenerId), TargetId(Target), Score(0), Importance(0), LastSeenLocation(FAISystem::InvalidLocation), UserData(0)"
  },
  {
    "label": "GetAge()",
    "kind": "Method",
    "detail": "Function (FrameInfo . bLastResult = false ; FrameInfo . LastProcessedFrameNumber = GFrameCounter ; } float)",
    "insertText": "GetAge()"
  },
  {
    "label": "RecalcScore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecalcScore()"
  },
  {
    "label": "OnProcessed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnProcessed()"
  },
  {
    "label": "ForgetPreviousResult()",
    "kind": "Method",
    "detail": "Function (FrameInfo . LastProcessedFrameNumber = GFrameCounter ; } void)",
    "insertText": "ForgetPreviousResult()"
  },
  {
    "label": "SetLastResult()",
    "kind": "Method",
    "detail": "Function (LastSeenLocation = FAISystem::InvalidLocation ;)",
    "insertText": "SetLastResult(false)"
  },
  {
    "label": "GetLastResult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetLastResult()"
  },
  {
    "label": "SetTraceInfo()",
    "kind": "Method",
    "detail": "Function (FrameInfo . bLastResult = bValue ; } void)",
    "insertText": "SetTraceInfo(const FTraceHandle& TraceHandle)"
  },
  {
    "label": "FSortPredicate()",
    "kind": "Method",
    "detail": "Function (TraceInfo . Index = TraceHandle . _Data . Index ; TraceInfo . FrameNumber = TraceHandle . _Data . FrameNumber ; } class FSortPredicate { public :)",
    "insertText": "FSortPredicate()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FAISightQuery& A, const FAISightQuery& B)"
  },
  {
    "label": "FAISightQueryID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAISightQueryID(const FAISightQuery& Query) : ObserverId(Query.ObserverId), TargetId(Query.TargetId)"
  },
  {
    "label": "DECLARE_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DELEGATE_FiveParams(FOnPendingVisibilityQueryProcessedDelegate, const FAISightQueryID&, const bool, const float, const FVector&, const TOptional<int32>&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup=AI, config=Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "FDigestedSightProperties()",
    "kind": "Method",
    "detail": "Function (float PeripheralVisionAngleCos ; float SightRadiusSq ; float AutoSuccessRangeSqFromLastSeenLocation ; float LoseSightRadiusSq ; float PointOfViewBackwardOffset ; float NearClippingRadiusSq ; uint8 AffiliationFlags ;)",
    "insertText": "FDigestedSightProperties()"
  },
  {
    "label": "FDigestedSightProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDigestedSightProperties(const UAISenseConfig_Sight& SenseConfig)"
  },
  {
    "label": "UE_MT_DECLARE_TS_RW_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (ECollisionChannel DefaultSightCollisionChannel ; FOnPendingVisibilityQueryProcessedDelegate OnPendingCanBeSeenQueryProcessedDelegate ; FTraceDelegate OnPendingTraceQueryProcessedDelegate ;)",
    "insertText": "UE_MT_DECLARE_TS_RW_ACCESS_DETECTOR(QueriesListAccessDetector)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "RegisterEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEvent(const FAISightEvent& Event)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSource(AActor& SourceActors)"
  },
  {
    "label": "UnregisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSource(AActor& SourceActor)"
  },
  {
    "label": "OnListenerForgetsActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsActor(const FPerceptionListener& Listener, AActor& ActorToForget)"
  },
  {
    "label": "OnListenerForgetsAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsAll(const FPerceptionListener& Listener)"
  },
  {
    "label": "DescribeSelfToGameplayDebugger()",
    "kind": "Method",
    "detail": "Function (# if WITH_GAMEPLAY_DEBUGGER_MENU void)",
    "insertText": "DescribeSelfToGameplayDebugger(const UAIPerceptionSystem& PerceptionSystem, FGameplayDebuggerCategory& DebuggerCategory)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# endif protected : float)",
    "insertText": "Update()"
  },
  {
    "label": "ComputeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibilityResult)",
    "insertText": "ComputeVisibility(UWorld* World, FAISightQuery& SightQuery, FPerceptionListener& Listener, const AActor* ListenerActor, FAISightTarget& Target, AActor* TargetActor, const FDigestedSightProperties& PropDigest, float& OutStimulusStrength, FVector& OutSeenLocation, int32& OutNumberOfLoSChecksPerformed, int32& OutNumberOfAsyncLosCheckRequested)"
  },
  {
    "label": "ShouldAutomaticallySeeTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAutomaticallySeeTarget(const FDigestedSightProperties& PropDigest, FAISightQuery* SightQuery, FPerceptionListener& Listener, AActor* TargetActor, float& OutStimulusStrength)"
  },
  {
    "label": "UpdateQueryVisibilityStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQueryVisibilityStatus(FAISightQuery& SightQuery, FPerceptionListener& Listener, const bool bIsVisible, const FVector& SeenLocation, const float StimulusStrength, AActor& TargetActor, const FVector& TargetLocation)"
  },
  {
    "label": "OnPendingCanBeSeenQueryProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPendingCanBeSeenQueryProcessed(const FAISightQueryID& QueryID, const bool bIsVisible, const float StimulusStrength, const FVector& SeenLocation, const TOptional<int32>& UserData)"
  },
  {
    "label": "OnPendingTraceQueryProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPendingTraceQueryProcessed(const FTraceHandle& TraceHandle, FTraceDatum& TraceDatum)"
  },
  {
    "label": "OnPendingQueryProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPendingQueryProcessed(const int32 SightQueryIndex, const bool bIsVisible, const float StimulusStrength, const FVector& SeenLocation, const TOptional<int32>& UserData, const TOptional<AActor*> InTargetActor = NullOpt)"
  },
  {
    "label": "OnNewListenerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewListenerImpl(const FPerceptionListener& NewListener)"
  },
  {
    "label": "OnListenerUpdateImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdateImpl(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "OnListenerRemovedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerRemovedImpl(const FPerceptionListener& RemovedListener)"
  },
  {
    "label": "OnListenerConfigUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerConfigUpdated(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "GenerateQueriesForListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateQueriesForListener(const FPerceptionListener& Listener, const FDigestedSightProperties& PropertyDigest, const TFunction<void(FAISightQuery&)>& OnAddedFunc = nullptr)"
  },
  {
    "label": "RemoveAllQueriesByListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllQueriesByListener(const FPerceptionListener& Listener, const TFunction<void(const FAISightQuery&)>& OnRemoveFunc = nullptr)"
  },
  {
    "label": "RemoveAllQueriesToTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllQueriesToTarget(const FAISightTarget::FTargetId& TargetId, const TFunction<void(const FAISightQuery&)>& OnRemoveFunc = nullptr)"
  },
  {
    "label": "RemoveAllQueriesToTarget_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllQueriesToTarget_Internal(const FAISightTarget::FTargetId& TargetId, const TFunction<void(const FAISightQuery&)>& OnRemoveFunc = nullptr)"
  },
  {
    "label": "RegisterTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterTarget(AActor& TargetActor, const TFunction<void(FAISightQuery&)>& OnAddedFunc = nullptr)"
  },
  {
    "label": "CalcQueryImportance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcQueryImportance(const FPerceptionListener& Listener, const FVector& TargetLocation, const float SightRadiusSq)"
  },
  {
    "label": "RegisterNewQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterNewQuery(const FPerceptionListener& Listener, const IGenericTeamAgentInterface* ListenersTeamAgent, const AActor& TargetActor, const FAISightTarget::FTargetId& TargetId, const FVector& TargetLocation, const FDigestedSightProperties& PropDigest, const TFunction<void(FAISightQuery&)>& OnAddedFunc)"
  }
]