[
  {
    "label": "FSimpleIndexedHandleBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleIndexedHandleBase"
  },
  {
    "label": "FIndexedHandleBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexedHandleBase"
  },
  {
    "label": "FCompactIndexedHandleBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactIndexedHandleBase"
  },
  {
    "label": "FIndexedHandleManagerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexedHandleManagerBase"
  },
  {
    "label": "FIndexedHandleManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexedHandleManager"
  },
  {
    "label": "FCompactIndexedHandleManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactIndexedHandleManager"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Array . h \" # include<atomic> # include \" IndexedHandle . generated . h \" #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) #define UE_DO_INDEXED_HANDLE_MANAGER_ID 1 #else #define UE_DO_INDEXED_HANDLE_MANAGER_ID 0 #endif USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSimpleIndexedHandleBase()"
  },
  {
    "label": "FSimpleIndexedHandleBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleIndexedHandleBase(int32 InIndex) : Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FSimpleIndexedHandleBase& Other)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (Index = INDEX_NONE ; } void)",
    "insertText": "SetIndex(int32 InIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Index = InIndex ; } uint32)",
    "insertText": "GetTypeHash(const FSimpleIndexedHandleBase& Handle)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} protected : int32 Index = INDEX_NONE ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FIndexedHandleBase()"
  },
  {
    "label": "FIndexedHandleBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIndexedHandleBase(int32 InIndex, uint32 InSerialNumber) : FSimpleIndexedHandleBase(InIndex), SerialNumber(InSerialNumber)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FIndexedHandleBase& Other)"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SerialNumber = InSerialNumber ; } uint32)",
    "insertText": "GetTypeHash(const FIndexedHandleBase& Handle)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FCompactIndexedHandleBase()"
  },
  {
    "label": "FCompactIndexedHandleBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompactIndexedHandleBase(const int32 InIndex, const uint32 InSerialNumber)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Index(int16)"
  },
  {
    "label": "SerialNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerialNumber(uint16)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FCompactIndexedHandleBase& Other)"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (Index = INDEX_NONE ; } void)",
    "insertText": "SetIndex(int16 InIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SerialNumber = InSerialNumber ; } uint32)",
    "insertText": "GetTypeHash(const FCompactIndexedHandleBase& Handle)"
  },
  {
    "label": "FIndexedHandleManagerBase()",
    "kind": "Method",
    "detail": "Function (} protected : int16 Index = INDEX_NONE ; uint16 SerialNumber = 0 ; # if UE_DO_INDEXED_HANDLE_MANAGER_ID public : uint32 ManagerID = 0 ; # endif } ; template<TIndexedHandle,TIndexType,TSerialType,bool bOptimizeHandleReuse = false> struct FIndexedHandleManagerBase { protected : typedef TArray<TIndexedHandle> FHandleArray ; public :)",
    "insertText": "FIndexedHandleManagerBase()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (# if UE_DO_INDEXED_HANDLE_MANAGER_ID ManagerID = ManagerIDCounter .)",
    "insertText": "fetch_add(1)"
  },
  {
    "label": "GetNextHandle()",
    "kind": "Method",
    "detail": "Function (# endif } TIndexedHandle)",
    "insertText": "GetNextHandle()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TIndexedHandle* Handle = nullptr ;)",
    "insertText": "if(FreeHandleIndices.Num() == 0)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (Handle =& Handles .)",
    "insertText": "Emplace_GetRef(Handles.Num(), SerialNumberCounter.fetch_add(1))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} else { const TIndexType Idx = FreeHandleIndices .)",
    "insertText": "Pop()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (Handle =& Handles [ Idx ] ;)",
    "insertText": "checkf(!Handle->IsValid(), TEXT(\"Free handle must be set invalid before reuse\"))"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "SetIndex(Idx)"
  },
  {
    "label": "SetSerialNumber()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "SetSerialNumber(SerialNumberCounter.fetch_add(1))"
  },
  {
    "label": "RemoveHandle()",
    "kind": "Method",
    "detail": "Function (} # if UE_DO_INDEXED_HANDLE_MANAGER_ID Handle -> ManagerID = ManagerID ; # endif return* Handle ; } bool)",
    "insertText": "RemoveHandle(TIndexedHandle IndexedHandle)"
  },
  {
    "label": "IsValidHandle()",
    "kind": "Method",
    "detail": "Function (const bool bIsValid =)",
    "insertText": "IsValidHandle(IndexedHandle)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (const int32 InsertPosition =)",
    "insertText": "LowerBound(FreeHandleIndices, Idx, [](const TIndexType& Lhs, const TIndexType& Rhs) {return Lhs > Rhs;})"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (FreeHandleIndices .)",
    "insertText": "Insert(Idx, InsertPosition)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { FreeHandleIndices .)",
    "insertText": "Add(IndexedHandle.GetIndex())"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} Handles [ IndexedHandle .)",
    "insertText": "GetIndex()].Invalidate()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (Handles [ IndexedHandle .)",
    "insertText": "GetIndex()].SetSerialNumber(SerialNumberCounter.fetch_add(1))"
  },
  {
    "label": "IsValidHandle()",
    "kind": "Method",
    "detail": "Function (} return bIsValid ; } bool)",
    "insertText": "IsValidHandle(TIndexedHandle IndexedHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_DO_INDEXED_HANDLE_MANAGER_ID)",
    "insertText": "if(!ensureMsgf(ManagerID == IndexedHandle.ManagerID, TEXT(\"ManagerID %d does not match IndexedHandle.ManagerID %d, handles must only be used by the same manager they were created by!\"), ManagerID, IndexedHandle.ManagerID))"
  },
  {
    "label": "GetHandles()",
    "kind": "Method",
    "detail": "Function (} const TArray<TIndexedHandle>&)",
    "insertText": "GetHandles()"
  },
  {
    "label": "FIndexedHandleManagerBase()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FIndexedHandleManagerBase(const FIndexedHandleManagerBase& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIndexedHandleManagerBase&)",
    "insertText": "operator(const FIndexedHandleManagerBase& Other)"
  },
  {
    "label": "ShrinkHandles()",
    "kind": "Method",
    "detail": "Function (# endif return* this ; } int32)",
    "insertText": "ShrinkHandles()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Handles .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return Handles .)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  }
]