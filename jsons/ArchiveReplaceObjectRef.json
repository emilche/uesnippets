[
  {
    "label": "FArchiveReplaceObjectRefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveReplaceObjectRefBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FArchiveReplaceObjectRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchiveReplaceObjectRef"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / ArchiveUObject . h \" # include \" UObject / Object . h \" # include \" UObject / SoftObjectPath . h \" class FArchiveReplaceObjectRefBase : public FArchiveUObject { public : int64)",
    "insertText": "GetCount()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "ShouldSkipReplacementCheckForObjectPtr()",
    "kind": "Method",
    "detail": "Function (} protected : template<ContainerType,ElementToObjectType> bool)",
    "insertText": "ShouldSkipReplacementCheckForObjectPtr(FObjectPtr& Obj, const ContainerType& ReplacementContainer, const ElementToObjectType& ElementToObject)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bool bCanIgnoreUnresolvedImportsLocal = ReplacementContainer .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bCanIgnoreUnresolvedImportsLocal = true ;)",
    "insertText": "for(const auto& ReplacementElem : ReplacementContainer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCanIgnoreUnresolvedImportsLocal = false ; break ; } } } } CanIgnoreUnresolvedImports = bCanIgnoreUnresolvedImportsLocal ; })",
    "insertText": "if(CanIgnoreUnresolvedImports.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bReferenceTypeIsRelatedToReplacementType = true ; break ; } } })",
    "insertText": "if(!bReferenceTypeIsRelatedToReplacementType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (UObject* SearchObject = nullptr ; UObject* SerializingObject = nullptr ; int32 Count = 0 ; TSet<UObject*> SerializedObjects ; TArray<UObject*> PendingSerializationObjects ; TMap<UObject*,TArray<FProperty*>> ReplacedReferences ; bool bTrackReplacedReferences = false ; bool bNullPrivateReferences = false ; TOptional<bool> CanIgnoreUnresolvedImports ; } ; enum class EArchiveReplaceObjectFlags { None = 0,NullPrivateRefs = 1<<0,IgnoreOuterRef = 1<<1,IgnoreArchetypeRef = 1<<2,DelayStart = 1<<3,IncludeClassGeneratedByRef = 1<<4,TrackReplacedReferences = 1<<5 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EArchiveReplaceObjectFlags)"
  },
  {
    "label": "FArchiveReplaceObjectRef()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FArchiveReplaceObjectRef(UObject* InSearchObject, const TMap<T*, T*>& InReplacementMap, EArchiveReplaceObjectFlags Flags = EArchiveReplaceObjectFlags::None) : ReplacementMap(InReplacementMap)"
  },
  {
    "label": "bTrackReplacedReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bTrackReplacedReferences(Flags & EArchiveReplaceObjectFlags::TrackReplacedReferences)"
  },
  {
    "label": "bNullPrivateReferences()",
    "kind": "Method",
    "detail": "Function (SearchObject = InSearchObject ; Count = 0 ;)",
    "insertText": "bNullPrivateReferences(Flags & EArchiveReplaceObjectFlags::NullPrivateRefs)"
  },
  {
    "label": "ArIgnoreArchetypeRef()",
    "kind": "Method",
    "detail": "Function (ArIsObjectReferenceCollector = true ; ArIsModifyingWeakAndStrongReferences = true ;)",
    "insertText": "ArIgnoreArchetypeRef(Flags & EArchiveReplaceObjectFlags::IgnoreArchetypeRef)"
  },
  {
    "label": "ArIgnoreOuterRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArIgnoreOuterRef(Flags & EArchiveReplaceObjectFlags::IgnoreOuterRef)"
  },
  {
    "label": "ArIgnoreClassGeneratedByRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArIgnoreClassGeneratedByRef(Flags & EArchiveReplaceObjectFlags::IncludeClassGeneratedByRef)"
  },
  {
    "label": "SerializeSearchObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSearchObject()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ReplacedReferences .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SerializedObjects .)",
    "insertText": "Add(SearchObject)"
  },
  {
    "label": "SerializeObject()",
    "kind": "Method",
    "detail": "Function (SerializingObject = SearchObject ;)",
    "insertText": "SerializeObject(SearchObject)"
  },
  {
    "label": "SerializeObject()",
    "kind": "Method",
    "detail": "Function (SerializingObject = PendingSerializationObjects [ Iter ] ;)",
    "insertText": "SerializeObject(SerializingObject)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(UObject*& Obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Obj =* ReplaceWith ;)",
    "insertText": "if(bTrackReplacedReferences)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (ReplacedReferences .)",
    "insertText": "FindOrAdd(SerializingObject).AddUnique(GetSerializedProperty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Count + + ; } else)",
    "insertText": "if(Obj == SearchObject || Obj->IsIn(SearchObject))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "if(Obj == SearchObject)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString ObjName = Obj ->)",
    "insertText": "GetPathName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} # endif bool bAlreadyAdded = false ; SerializedObjects .)",
    "insertText": "Add(Obj, &bAlreadyAdded)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingSerializationObjects .)",
    "insertText": "Add(Obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(bNullPrivateReferences && !Obj->HasAnyFlags(RF_Public))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Obj = NULL ; } } return* this ; } FArchive&)",
    "insertText": "operator(FObjectPtr& Obj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this<<Obj ; Value = Obj ; } else {)",
    "insertText": "operator(Value)"
  }
]