[
  {
    "label": "QUIC_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_HANDLE"
  },
  {
    "label": "QUIC_TLS_PROVIDER",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_TLS_PROVIDER"
  },
  {
    "label": "QUIC_EXECUTION_PROFILE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_EXECUTION_PROFILE"
  },
  {
    "label": "QUIC_LOAD_BALANCING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_LOAD_BALANCING_MODE"
  },
  {
    "label": "QUIC_TLS_ALERT_CODES",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_TLS_ALERT_CODES"
  },
  {
    "label": "QUIC_CREDENTIAL_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CREDENTIAL_TYPE"
  },
  {
    "label": "QUIC_CREDENTIAL_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CREDENTIAL_FLAGS"
  },
  {
    "label": "QUIC_ALLOWED_CIPHER_SUITE_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_ALLOWED_CIPHER_SUITE_FLAGS"
  },
  {
    "label": "QUIC_CERTIFICATE_HASH_STORE_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CERTIFICATE_HASH_STORE_FLAGS"
  },
  {
    "label": "QUIC_CONNECTION_SHUTDOWN_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CONNECTION_SHUTDOWN_FLAGS"
  },
  {
    "label": "QUIC_SERVER_RESUMPTION_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_SERVER_RESUMPTION_LEVEL"
  },
  {
    "label": "QUIC_SEND_RESUMPTION_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_SEND_RESUMPTION_FLAGS"
  },
  {
    "label": "QUIC_STREAM_SCHEDULING_SCHEME",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_STREAM_SCHEDULING_SCHEME"
  },
  {
    "label": "QUIC_STREAM_OPEN_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_STREAM_OPEN_FLAGS"
  },
  {
    "label": "QUIC_STREAM_START_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_STREAM_START_FLAGS"
  },
  {
    "label": "QUIC_STREAM_SHUTDOWN_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_STREAM_SHUTDOWN_FLAGS"
  },
  {
    "label": "QUIC_RECEIVE_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_RECEIVE_FLAGS"
  },
  {
    "label": "QUIC_SEND_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_SEND_FLAGS"
  },
  {
    "label": "QUIC_DATAGRAM_SEND_STATE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_DATAGRAM_SEND_STATE"
  },
  {
    "label": "QUIC_EXECUTION_CONFIG_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_EXECUTION_CONFIG_FLAGS"
  },
  {
    "label": "QUIC_EXECUTION_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_EXECUTION_CONFIG"
  },
  {
    "label": "QUIC_REGISTRATION_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_REGISTRATION_CONFIG"
  },
  {
    "label": "QUIC_CERTIFICATE_HASH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CERTIFICATE_HASH"
  },
  {
    "label": "QUIC_CERTIFICATE_HASH_STORE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CERTIFICATE_HASH_STORE"
  },
  {
    "label": "QUIC_CERTIFICATE_FILE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CERTIFICATE_FILE"
  },
  {
    "label": "QUIC_CERTIFICATE_FILE_PROTECTED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CERTIFICATE_FILE_PROTECTED"
  },
  {
    "label": "QUIC_CERTIFICATE_PKCS12",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CERTIFICATE_PKCS12"
  },
  {
    "label": "QUIC_CREDENTIAL_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CREDENTIAL_CONFIG"
  },
  {
    "label": "QUIC_TICKET_KEY_CONFIG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_TICKET_KEY_CONFIG"
  },
  {
    "label": "QUIC_BUFFER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_BUFFER"
  },
  {
    "label": "QUIC_NEW_CONNECTION_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_NEW_CONNECTION_INFO"
  },
  {
    "label": "QUIC_TLS_PROTOCOL_VERSION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_TLS_PROTOCOL_VERSION"
  },
  {
    "label": "QUIC_CIPHER_ALGORITHM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CIPHER_ALGORITHM"
  },
  {
    "label": "QUIC_HASH_ALGORITHM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_HASH_ALGORITHM"
  },
  {
    "label": "QUIC_KEY_EXCHANGE_ALGORITHM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_KEY_EXCHANGE_ALGORITHM"
  },
  {
    "label": "QUIC_CIPHER_SUITE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CIPHER_SUITE"
  },
  {
    "label": "QUIC_CONGESTION_CONTROL_ALGORITHM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CONGESTION_CONTROL_ALGORITHM"
  },
  {
    "label": "QUIC_HANDSHAKE_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_HANDSHAKE_INFO"
  },
  {
    "label": "QUIC_STATISTICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_STATISTICS"
  },
  {
    "label": "QUIC_STATISTICS_V2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_STATISTICS_V2"
  },
  {
    "label": "QUIC_LISTENER_STATISTICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_LISTENER_STATISTICS"
  },
  {
    "label": "QUIC_PERFORMANCE_COUNTERS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_PERFORMANCE_COUNTERS"
  },
  {
    "label": "QUIC_VERSION_SETTINGS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_VERSION_SETTINGS"
  },
  {
    "label": "QUIC_GLOBAL_SETTINGS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_GLOBAL_SETTINGS"
  },
  {
    "label": "QUIC_SETTINGS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_SETTINGS"
  },
  {
    "label": "QUIC_TLS_SECRETS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_TLS_SECRETS"
  },
  {
    "label": "QUIC_STREAM_STATISTICS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_STREAM_STATISTICS"
  },
  {
    "label": "QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W"
  },
  {
    "label": "QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W"
  },
  {
    "label": "QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W"
  },
  {
    "label": "QUIC_LISTENER_EVENT_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_LISTENER_EVENT_TYPE"
  },
  {
    "label": "QUIC_LISTENER_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_LISTENER_EVENT"
  },
  {
    "label": "QUIC_CONNECTION_EVENT_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_CONNECTION_EVENT_TYPE"
  },
  {
    "label": "QUIC_CONNECTION_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CONNECTION_EVENT"
  },
  {
    "label": "QUIC_STREAM_EVENT_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QUIC_STREAM_EVENT_TYPE"
  },
  {
    "label": "QUIC_STREAM_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_STREAM_EVENT"
  },
  {
    "label": "QUIC_API_TABLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_API_TABLE"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifndef _MSQUIC_ # define _MSQUIC_ # ifdef _WIN32 # pragma once # endif # pragma)",
    "insertText": "warning(disable:4201) #pragma warning(disable:4214) #ifdef _KERNEL_MODE #include \"msquic_winkernel.h\" #elif _WIN32 #include \"msquic_winuser.h\" #elif __linux__ || __APPLE__ || __FreeBSD__ #include \"msquic_posix.h\" #else #error \"Unsupported Platform\" #endif #if defined(__cplusplus)"
  },
  {
    "label": "QUIC_UINT62_MAX()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct QUIC_HANDLE* HQUIC ; # define)",
    "insertText": "QUIC_UINT62_MAX((1ULL << 62U) - 1) typedef _In_range_(0, QUIC_UINT62_MAX)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (# define QUIC_MAX_ALPN_LENGTH 2 5 5 # define QUIC_MAX_SNI_LENGTH 6 5 5 3 5 # define QUIC_MAX_RESUMPTION_APP_DATA_LENGTH 1 0 0 0 typedef enum QUIC_TLS_PROVIDER { QUIC_TLS_PROVIDER_SCHANNEL = 0 x0000,QUIC_TLS_PROVIDER_OPENSSL = 0 x0001,} QUIC_TLS_PROVIDER ; typedef enum QUIC_EXECUTION_PROFILE { QUIC_EXECUTION_PROFILE_LOW_LATENCY,QUIC_EXECUTION_PROFILE_TYPE_MAX_THROUGHPUT,QUIC_EXECUTION_PROFILE_TYPE_SCAVENGER,QUIC_EXECUTION_PROFILE_TYPE_REAL_TIME,} QUIC_EXECUTION_PROFILE ; typedef enum QUIC_LOAD_BALANCING_MODE { QUIC_LOAD_BALANCING_DISABLED,QUIC_LOAD_BALANCING_SERVER_ID_IP,QUIC_LOAD_BALANCING_SERVER_ID_FIXED,QUIC_LOAD_BALANCING_COUNT,} QUIC_LOAD_BALANCING_MODE ; typedef enum QUIC_TLS_ALERT_CODES { QUIC_TLS_ALERT_CODE_SUCCESS = 0 xFFFF,QUIC_TLS_ALERT_CODE_UNEXPECTED_MESSAGE = 1 0,QUIC_TLS_ALERT_CODE_BAD_CERTIFICATE = 4 2,QUIC_TLS_ALERT_CODE_UNSUPPORTED_CERTIFICATE = 4 3,QUIC_TLS_ALERT_CODE_CERTIFICATE_REVOKED = 4 4,QUIC_TLS_ALERT_CODE_CERTIFICATE_EXPIRED = 4 5,QUIC_TLS_ALERT_CODE_CERTIFICATE_UNKNOWN = 4 6,QUIC_TLS_ALERT_CODE_ILLEGAL_PARAMETER = 4 7,QUIC_TLS_ALERT_CODE_UNKNOWN_CA = 4 8,QUIC_TLS_ALERT_CODE_ACCESS_DENIED = 4 9,QUIC_TLS_ALERT_CODE_INSUFFICIENT_SECURITY = 7 1,QUIC_TLS_ALERT_CODE_INTERNAL_ERROR = 8 0,QUIC_TLS_ALERT_CODE_USER_CANCELED = 9 0,QUIC_TLS_ALERT_CODE_CERTIFICATE_REQUIRED = 1 1 6,QUIC_TLS_ALERT_CODE_MAX = 2 5 5,} QUIC_TLS_ALERT_CODES ; typedef enum QUIC_CREDENTIAL_TYPE { QUIC_CREDENTIAL_TYPE_NONE,QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH,QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH_STORE,QUIC_CREDENTIAL_TYPE_CERTIFICATE_CONTEXT,QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE,QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE_PROTECTED,QUIC_CREDENTIAL_TYPE_CERTIFICATE_PKCS12,} QUIC_CREDENTIAL_TYPE ; typedef enum QUIC_CREDENTIAL_FLAGS { QUIC_CREDENTIAL_FLAG_NONE = 0 x00000000,QUIC_CREDENTIAL_FLAG_CLIENT = 0 x00000001,QUIC_CREDENTIAL_FLAG_LOAD_ASYNCHRONOUS = 0 x00000002,QUIC_CREDENTIAL_FLAG_NO_CERTIFICATE_VALIDATION = 0 x00000004,QUIC_CREDENTIAL_FLAG_ENABLE_OCSP = 0 x00000008,QUIC_CREDENTIAL_FLAG_INDICATE_CERTIFICATE_RECEIVED = 0 x00000010,QUIC_CREDENTIAL_FLAG_DEFER_CERTIFICATE_VALIDATION = 0 x00000020,QUIC_CREDENTIAL_FLAG_REQUIRE_CLIENT_AUTHENTICATION = 0 x00000040,QUIC_CREDENTIAL_FLAG_USE_TLS_BUILTIN_CERTIFICATE_VALIDATION = 0 x00000080,QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_END_CERT = 0 x00000100,QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN = 0 x00000200,QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0 x00000400,QUIC_CREDENTIAL_FLAG_IGNORE_NO_REVOCATION_CHECK = 0 x00000800,QUIC_CREDENTIAL_FLAG_IGNORE_REVOCATION_OFFLINE = 0 x00001000,QUIC_CREDENTIAL_FLAG_SET_ALLOWED_CIPHER_SUITES = 0 x00002000,QUIC_CREDENTIAL_FLAG_USE_PORTABLE_CERTIFICATES = 0 x00004000,QUIC_CREDENTIAL_FLAG_USE_SUPPLIED_CREDENTIALS = 0 x00008000,QUIC_CREDENTIAL_FLAG_USE_SYSTEM_MAPPER = 0 x00010000,QUIC_CREDENTIAL_FLAG_CACHE_ONLY_URL_RETRIEVAL = 0 x00020000,QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CACHE_ONLY = 0 x00040000,QUIC_CREDENTIAL_FLAG_INPROC_PEER_CERTIFICATE = 0 x00080000,QUIC_CREDENTIAL_FLAG_SET_CA_CERTIFICATE_FILE = 0 x00100000,} QUIC_CREDENTIAL_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_CREDENTIAL_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_ALLOWED_CIPHER_SUITE_NONE = 0 x0,QUIC_ALLOWED_CIPHER_SUITE_AES_128_GCM_SHA256 = 0 x1,QUIC_ALLOWED_CIPHER_SUITE_AES_256_GCM_SHA384 = 0 x2,QUIC_ALLOWED_CIPHER_SUITE_CHACHA20_POLY1305_SHA256 = 0 x4,} QUIC_ALLOWED_CIPHER_SUITE_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_ALLOWED_CIPHER_SUITE_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (typedef enum QUIC_CERTIFICATE_HASH_STORE_FLAGS { QUIC_CERTIFICATE_HASH_STORE_FLAG_NONE = 0 x0000,QUIC_CERTIFICATE_HASH_STORE_FLAG_MACHINE_STORE = 0 x0001,} QUIC_CERTIFICATE_HASH_STORE_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_CERTIFICATE_HASH_STORE_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_CONNECTION_SHUTDOWN_FLAG_NONE = 0 x0000,QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT = 0 x0001,} QUIC_CONNECTION_SHUTDOWN_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_CONNECTION_SHUTDOWN_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_SERVER_NO_RESUME,QUIC_SERVER_RESUME_ONLY,QUIC_SERVER_RESUME_AND_ZERORTT,} QUIC_SERVER_RESUMPTION_LEVEL ; typedef enum QUIC_SEND_RESUMPTION_FLAGS { QUIC_SEND_RESUMPTION_FLAG_NONE = 0 x0000,QUIC_SEND_RESUMPTION_FLAG_FINAL = 0 x0001,} QUIC_SEND_RESUMPTION_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_SEND_RESUMPTION_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_STREAM_SCHEDULING_SCHEME_FIFO = 0 x0000,QUIC_STREAM_SCHEDULING_SCHEME_ROUND_ROBIN = 0 x0001,QUIC_STREAM_SCHEDULING_SCHEME_COUNT,} QUIC_STREAM_SCHEDULING_SCHEME ; typedef enum QUIC_STREAM_OPEN_FLAGS { QUIC_STREAM_OPEN_FLAG_NONE = 0 x0000,QUIC_STREAM_OPEN_FLAG_UNIDIRECTIONAL = 0 x0001,QUIC_STREAM_OPEN_FLAG_0_RTT = 0 x0002,} QUIC_STREAM_OPEN_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_STREAM_OPEN_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_STREAM_START_FLAG_NONE = 0 x0000,QUIC_STREAM_START_FLAG_IMMEDIATE = 0 x0001,QUIC_STREAM_START_FLAG_FAIL_BLOCKED = 0 x0002,QUIC_STREAM_START_FLAG_SHUTDOWN_ON_FAIL = 0 x0004,QUIC_STREAM_START_FLAG_INDICATE_PEER_ACCEPT = 0 x0008,} QUIC_STREAM_START_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_STREAM_START_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_STREAM_SHUTDOWN_FLAG_NONE = 0 x0000,QUIC_STREAM_SHUTDOWN_FLAG_GRACEFUL = 0 x0001,QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND = 0 x0002,QUIC_STREAM_SHUTDOWN_FLAG_ABORT_RECEIVE = 0 x0004,QUIC_STREAM_SHUTDOWN_FLAG_ABORT = 0 x0006,QUIC_STREAM_SHUTDOWN_FLAG_IMMEDIATE = 0 x0008,QUIC_STREAM_SHUTDOWN_FLAG_INLINE = 0 x0010,} QUIC_STREAM_SHUTDOWN_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_STREAM_SHUTDOWN_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_RECEIVE_FLAG_NONE = 0 x0000,QUIC_RECEIVE_FLAG_0_RTT = 0 x0001,QUIC_RECEIVE_FLAG_FIN = 0 x0002,} QUIC_RECEIVE_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_RECEIVE_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_SEND_FLAG_NONE = 0 x0000,QUIC_SEND_FLAG_ALLOW_0_RTT = 0 x0001,QUIC_SEND_FLAG_START = 0 x0002,QUIC_SEND_FLAG_FIN = 0 x0004,QUIC_SEND_FLAG_DGRAM_PRIORITY = 0 x0008,QUIC_SEND_FLAG_DELAY_SEND = 0 x0010,} QUIC_SEND_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_SEND_FLAGS)"
  },
  {
    "label": "QUIC_DATAGRAM_SEND_STATE_IS_FINAL()",
    "kind": "Method",
    "detail": "Function (QUIC_DATAGRAM_SEND_UNKNOWN,QUIC_DATAGRAM_SEND_SENT,QUIC_DATAGRAM_SEND_LOST_SUSPECT,QUIC_DATAGRAM_SEND_LOST_DISCARDED,QUIC_DATAGRAM_SEND_ACKNOWLEDGED,QUIC_DATAGRAM_SEND_ACKNOWLEDGED_SPURIOUS,QUIC_DATAGRAM_SEND_CANCELED,} QUIC_DATAGRAM_SEND_STATE ; # define)",
    "insertText": "QUIC_DATAGRAM_SEND_STATE_IS_FINAL(State) \\ ((State) >= QUIC_DATAGRAM_SEND_LOST_DISCARDED)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (QUIC_EXECUTION_CONFIG_FLAG_NONE = 0 x0000,# ifdef QUIC_API_ENABLE_PREVIEW_FEATURES QUIC_EXECUTION_CONFIG_FLAG_QTIP = 0 x0001,# endif } QUIC_EXECUTION_CONFIG_FLAGS ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(QUIC_EXECUTION_CONFIG_FLAGS)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (QUIC_EXECUTION_CONFIG_FLAGS Flags ; uint32_t PollingIdleTimeoutUs ; uint32_t ProcessorCount ;)",
    "insertText": "_Field_size_(ProcessorCount)"
  },
  {
    "label": "QUIC_EXECUTION_CONFIG_MIN_SIZE()",
    "kind": "Method",
    "detail": "Function (} QUIC_EXECUTION_CONFIG ; # define)",
    "insertText": "QUIC_EXECUTION_CONFIG_MIN_SIZE(uint32_t)FIELD_OFFSET(QUIC_EXECUTION_CONFIG, ProcessorList)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (const char* AppName ; QUIC_EXECUTION_PROFILE ExecutionProfile ; } QUIC_REGISTRATION_CONFIG ; typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_CREDENTIAL_LOAD_COMPLETE) void (QUIC_API QUIC_CREDENTIAL_LOAD_COMPLETE)( _In_ HQUIC Configuration, _In_opt_ void* Context, _In_ QUIC_STATUS Status)"
  },
  {
    "label": "_Field_size_bytes_()",
    "kind": "Method",
    "detail": "Function (typedef QUIC_CREDENTIAL_LOAD_COMPLETE* QUIC_CREDENTIAL_LOAD_COMPLETE_HANDLER ; typedef struct QUIC_CERTIFICATE_HASH { uint8_t ShaHash [ 2 0 ] ; } QUIC_CERTIFICATE_HASH ; typedef struct QUIC_CERTIFICATE_HASH_STORE { QUIC_CERTIFICATE_HASH_STORE_FLAGS Flags ; uint8_t ShaHash [ 2 0 ] ; char StoreName [ 1 2 8 ] ; } QUIC_CERTIFICATE_HASH_STORE ; typedef struct QUIC_CERTIFICATE_FILE { const char* PrivateKeyFile ; const char* CertificateFile ; } QUIC_CERTIFICATE_FILE ; typedef struct QUIC_CERTIFICATE_FILE_PROTECTED { const char* PrivateKeyFile ; const char* CertificateFile ; const char* PrivateKeyPassword ; } QUIC_CERTIFICATE_FILE_PROTECTED ; typedef struct QUIC_CERTIFICATE_PKCS12 { const uint8_t* Asn1Blob ; uint32_t Asn1BlobLength ; const char* PrivateKeyPassword ; } QUIC_CERTIFICATE_PKCS12 ; typedef void QUIC_CERTIFICATE ; typedef void QUIC_CERTIFICATE_CHAIN ; typedef struct QUIC_CREDENTIAL_CONFIG { QUIC_CREDENTIAL_TYPE Type ; QUIC_CREDENTIAL_FLAGS Flags ; union { QUIC_CERTIFICATE_HASH* CertificateHash ; QUIC_CERTIFICATE_HASH_STORE* CertificateHashStore ; QUIC_CERTIFICATE* CertificateContext ; QUIC_CERTIFICATE_FILE* CertificateFile ; QUIC_CERTIFICATE_FILE_PROTECTED* CertificateFileProtected ; QUIC_CERTIFICATE_PKCS12* CertificatePkcs12 ; } ; const char* Principal ; void* Reserved ; QUIC_CREDENTIAL_LOAD_COMPLETE_HANDLER AsyncHandler ; QUIC_ALLOWED_CIPHER_SUITE_FLAGS AllowedCipherSuites ; const char* CaCertificateFile ; } QUIC_CREDENTIAL_CONFIG ; # define QUIC_MAX_TICKET_KEY_COUNT 1 6 typedef struct QUIC_TICKET_KEY_CONFIG { uint8_t Id [ 1 6 ] ; uint8_t Material [ 6 4 ] ; uint8_t MaterialLength ; } QUIC_TICKET_KEY_CONFIG ; typedef struct QUIC_BUFFER { uint32_t Length ;)",
    "insertText": "_Field_size_bytes_(Length)"
  },
  {
    "label": "_Field_size_bytes_()",
    "kind": "Method",
    "detail": "Function (} QUIC_BUFFER ; typedef struct QUIC_NEW_CONNECTION_INFO { uint32_t QuicVersion ; const QUIC_ADDR* LocalAddress ; const QUIC_ADDR* RemoteAddress ; uint32_t CryptoBufferLength ; uint16_t ClientAlpnListLength ; uint16_t ServerNameLength ; uint8_t NegotiatedAlpnLength ;)",
    "insertText": "_Field_size_bytes_(CryptoBufferLength)"
  },
  {
    "label": "_Field_size_bytes_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_bytes_(ClientAlpnListLength)"
  },
  {
    "label": "_Field_size_bytes_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_bytes_(NegotiatedAlpnLength)"
  },
  {
    "label": "_Field_size_bytes_opt_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_bytes_opt_(ServerNameLength)"
  },
  {
    "label": "QUIC_STRUCT_SIZE_THRU_FIELD()",
    "kind": "Method",
    "detail": "Function (} QUIC_NEW_CONNECTION_INFO ; typedef enum QUIC_TLS_PROTOCOL_VERSION { QUIC_TLS_PROTOCOL_UNKNOWN = 0,QUIC_TLS_PROTOCOL_1_3 = 0 x3000,} QUIC_TLS_PROTOCOL_VERSION ; typedef enum QUIC_CIPHER_ALGORITHM { QUIC_CIPHER_ALGORITHM_NONE = 0,QUIC_CIPHER_ALGORITHM_AES_128 = 0 x660E,QUIC_CIPHER_ALGORITHM_AES_256 = 0 x6610,QUIC_CIPHER_ALGORITHM_CHACHA20 = 0 x6612,} QUIC_CIPHER_ALGORITHM ; typedef enum QUIC_HASH_ALGORITHM { QUIC_HASH_ALGORITHM_NONE = 0,QUIC_HASH_ALGORITHM_SHA_256 = 0 x800C,QUIC_HASH_ALGORITHM_SHA_384 = 0 x800D,} QUIC_HASH_ALGORITHM ; typedef enum QUIC_KEY_EXCHANGE_ALGORITHM { QUIC_KEY_EXCHANGE_ALGORITHM_NONE = 0,} QUIC_KEY_EXCHANGE_ALGORITHM ; typedef enum QUIC_CIPHER_SUITE { QUIC_CIPHER_SUITE_TLS_AES_128_GCM_SHA256 = 0 x1301,QUIC_CIPHER_SUITE_TLS_AES_256_GCM_SHA384 = 0 x1302,QUIC_CIPHER_SUITE_TLS_CHACHA20_POLY1305_SHA256 = 0 x1303,} QUIC_CIPHER_SUITE ; typedef enum QUIC_CONGESTION_CONTROL_ALGORITHM { QUIC_CONGESTION_CONTROL_ALGORITHM_CUBIC,# ifdef QUIC_API_ENABLE_PREVIEW_FEATURES QUIC_CONGESTION_CONTROL_ALGORITHM_BBR,# endif QUIC_CONGESTION_CONTROL_ALGORITHM_MAX,} QUIC_CONGESTION_CONTROL_ALGORITHM ; typedef struct QUIC_HANDSHAKE_INFO { QUIC_TLS_PROTOCOL_VERSION TlsProtocolVersion ; QUIC_CIPHER_ALGORITHM CipherAlgorithm ; int32_t CipherStrength ; QUIC_HASH_ALGORITHM Hash ; int32_t HashStrength ; QUIC_KEY_EXCHANGE_ALGORITHM KeyExchangeAlgorithm ; int32_t KeyExchangeStrength ; QUIC_CIPHER_SUITE CipherSuite ; } QUIC_HANDSHAKE_INFO ; typedef struct QUIC_STATISTICS { uint64_t CorrelationId ; uint32_t VersionNegotiation : 1 ; uint32_t StatelessRetry : 1 ; uint32_t ResumptionAttempted : 1 ; uint32_t ResumptionSucceeded : 1 ; uint32_t Rtt ; uint32_t MinRtt ; uint32_t MaxRtt ; struct { uint64_t Start ; uint64_t InitialFlightEnd ; uint64_t HandshakeFlightEnd ; } Timing ; struct { uint32_t ClientFlight1Bytes ; uint32_t ServerFlight1Bytes ; uint32_t ClientFlight2Bytes ; } Handshake ; struct { uint16_t PathMtu ; uint64_t TotalPackets ; uint64_t RetransmittablePackets ; uint64_t SuspectedLostPackets ; uint64_t SpuriousLostPackets ; uint64_t TotalBytes ; uint64_t TotalStreamBytes ; uint32_t CongestionCount ; uint32_t PersistentCongestionCount ; } Send ; struct { uint64_t TotalPackets ; uint64_t ReorderedPackets ; uint64_t DroppedPackets ; uint64_t DuplicatePackets ; uint64_t TotalBytes ; uint64_t TotalStreamBytes ; uint64_t DecryptionFailures ; uint64_t ValidAckFrames ; } Recv ; struct { uint32_t KeyUpdateCount ; } Misc ; } QUIC_STATISTICS ; typedef struct QUIC_STATISTICS_V2 { uint64_t CorrelationId ; uint32_t VersionNegotiation : 1 ; uint32_t StatelessRetry : 1 ; uint32_t ResumptionAttempted : 1 ; uint32_t ResumptionSucceeded : 1 ; uint32_t GreaseBitNegotiated : 1 ; uint32_t EcnCapable : 1 ; uint32_t RESERVED : 2 6 ; uint32_t Rtt ; uint32_t MinRtt ; uint32_t MaxRtt ; uint64_t TimingStart ; uint64_t TimingInitialFlightEnd ; uint64_t TimingHandshakeFlightEnd ; uint32_t HandshakeClientFlight1Bytes ; uint32_t HandshakeServerFlight1Bytes ; uint32_t HandshakeClientFlight2Bytes ; uint16_t SendPathMtu ; uint64_t SendTotalPackets ; uint64_t SendRetransmittablePackets ; uint64_t SendSuspectedLostPackets ; uint64_t SendSpuriousLostPackets ; uint64_t SendTotalBytes ; uint64_t SendTotalStreamBytes ; uint32_t SendCongestionCount ; uint32_t SendPersistentCongestionCount ; uint64_t RecvTotalPackets ; uint64_t RecvReorderedPackets ; uint64_t RecvDroppedPackets ; uint64_t RecvDuplicatePackets ; uint64_t RecvTotalBytes ; uint64_t RecvTotalStreamBytes ; uint64_t RecvDecryptionFailures ; uint64_t RecvValidAckFrames ; uint32_t KeyUpdateCount ; uint32_t SendCongestionWindow ; uint32_t DestCidUpdateCount ; uint32_t SendEcnCongestionCount ; } QUIC_STATISTICS_V2 ; # define)",
    "insertText": "QUIC_STRUCT_SIZE_THRU_FIELD(Struct, Field) \\ (FIELD_OFFSET(Struct, Field) + sizeof(((Struct*)0)->Field)) #define QUIC_STATISTICS_V2_SIZE_1 QUIC_STRUCT_SIZE_THRU_FIELD(QUIC_STATISTICS_V2, KeyUpdateCount) #define QUIC_STATISTICS_V2_SIZE_2 QUIC_STRUCT_SIZE_THRU_FIELD(QUIC_STATISTICS_V2, DestCidUpdateCount) #define QUIC_STATISTICS_V2_SIZE_3 QUIC_STRUCT_SIZE_THRU_FIELD(QUIC_STATISTICS_V2, SendEcnCongestionCount)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (uint64_t TotalAcceptedConnections ; uint64_t TotalRejectedConnections ; uint64_t BindingRecvDroppedPackets ; } QUIC_LISTENER_STATISTICS ; typedef enum QUIC_PERFORMANCE_COUNTERS { QUIC_PERF_COUNTER_CONN_CREATED,QUIC_PERF_COUNTER_CONN_HANDSHAKE_FAIL,QUIC_PERF_COUNTER_CONN_APP_REJECT,QUIC_PERF_COUNTER_CONN_RESUMED,QUIC_PERF_COUNTER_CONN_ACTIVE,QUIC_PERF_COUNTER_CONN_CONNECTED,QUIC_PERF_COUNTER_CONN_PROTOCOL_ERRORS,QUIC_PERF_COUNTER_CONN_NO_ALPN,QUIC_PERF_COUNTER_STRM_ACTIVE,QUIC_PERF_COUNTER_PKTS_SUSPECTED_LOST,QUIC_PERF_COUNTER_PKTS_DROPPED,QUIC_PERF_COUNTER_PKTS_DECRYPTION_FAIL,QUIC_PERF_COUNTER_UDP_RECV,QUIC_PERF_COUNTER_UDP_SEND,QUIC_PERF_COUNTER_UDP_RECV_BYTES,QUIC_PERF_COUNTER_UDP_SEND_BYTES,QUIC_PERF_COUNTER_UDP_RECV_EVENTS,QUIC_PERF_COUNTER_UDP_SEND_CALLS,QUIC_PERF_COUNTER_APP_SEND_BYTES,QUIC_PERF_COUNTER_APP_RECV_BYTES,QUIC_PERF_COUNTER_CONN_QUEUE_DEPTH,QUIC_PERF_COUNTER_CONN_OPER_QUEUE_DEPTH,QUIC_PERF_COUNTER_CONN_OPER_QUEUED,QUIC_PERF_COUNTER_CONN_OPER_COMPLETED,QUIC_PERF_COUNTER_WORK_OPER_QUEUE_DEPTH,QUIC_PERF_COUNTER_WORK_OPER_QUEUED,QUIC_PERF_COUNTER_WORK_OPER_COMPLETED,QUIC_PERF_COUNTER_PATH_VALIDATED,QUIC_PERF_COUNTER_PATH_FAILURE,QUIC_PERF_COUNTER_SEND_STATELESS_RESET,QUIC_PERF_COUNTER_SEND_STATELESS_RETRY,QUIC_PERF_COUNTER_MAX,} QUIC_PERFORMANCE_COUNTERS ; # ifdef QUIC_API_ENABLE_PREVIEW_FEATURES typedef struct QUIC_VERSION_SETTINGS { const uint32_t* AcceptableVersions ; const uint32_t* OfferedVersions ; const uint32_t* FullyDeployedVersions ; uint32_t AcceptableVersionsLength ; uint32_t OfferedVersionsLength ; uint32_t FullyDeployedVersionsLength ; } QUIC_VERSION_SETTINGS ; # endif typedef struct QUIC_GLOBAL_SETTINGS { union { uint64_t IsSetFlags ; struct { uint64_t RetryMemoryLimit : 1 ; uint64_t LoadBalancingMode : 1 ; uint64_t FixedServerID : 1 ; uint64_t RESERVED : 6 1 ; } IsSet ; } ; uint16_t RetryMemoryLimit ; uint16_t LoadBalancingMode ; uint32_t FixedServerID ; } QUIC_GLOBAL_SETTINGS ; typedef struct QUIC_SETTINGS { union { uint64_t IsSetFlags ; struct { uint64_t MaxBytesPerKey : 1 ; uint64_t HandshakeIdleTimeoutMs : 1 ; uint64_t IdleTimeoutMs : 1 ; uint64_t MtuDiscoverySearchCompleteTimeoutUs : 1 ; uint64_t TlsClientMaxSendBuffer : 1 ; uint64_t TlsServerMaxSendBuffer : 1 ; uint64_t StreamRecvWindowDefault : 1 ; uint64_t StreamRecvBufferDefault : 1 ; uint64_t ConnFlowControlWindow : 1 ; uint64_t MaxWorkerQueueDelayUs : 1 ; uint64_t MaxStatelessOperations : 1 ; uint64_t InitialWindowPackets : 1 ; uint64_t SendIdleTimeoutMs : 1 ; uint64_t InitialRttMs : 1 ; uint64_t MaxAckDelayMs : 1 ; uint64_t DisconnectTimeoutMs : 1 ; uint64_t KeepAliveIntervalMs : 1 ; uint64_t CongestionControlAlgorithm : 1 ; uint64_t PeerBidiStreamCount : 1 ; uint64_t PeerUnidiStreamCount : 1 ; uint64_t MaxBindingStatelessOperations : 1 ; uint64_t StatelessOperationExpirationMs : 1 ; uint64_t MinimumMtu : 1 ; uint64_t MaximumMtu : 1 ; uint64_t SendBufferingEnabled : 1 ; uint64_t PacingEnabled : 1 ; uint64_t MigrationEnabled : 1 ; uint64_t DatagramReceiveEnabled : 1 ; uint64_t ServerResumptionLevel : 1 ; uint64_t MaxOperationsPerDrain : 1 ; uint64_t MtuDiscoveryMissingProbeCount : 1 ; uint64_t DestCidUpdateIdleTimeoutMs : 1 ; uint64_t GreaseQuicBitEnabled : 1 ; uint64_t EcnEnabled : 1 ; uint64_t HyStartEnabled : 1 ; uint64_t RESERVED : 2 9 ; } IsSet ; } ; uint64_t MaxBytesPerKey ; uint64_t HandshakeIdleTimeoutMs ; uint64_t IdleTimeoutMs ; uint64_t MtuDiscoverySearchCompleteTimeoutUs ; uint32_t TlsClientMaxSendBuffer ; uint32_t TlsServerMaxSendBuffer ; uint32_t StreamRecvWindowDefault ; uint32_t StreamRecvBufferDefault ; uint32_t ConnFlowControlWindow ; uint32_t MaxWorkerQueueDelayUs ; uint32_t MaxStatelessOperations ; uint32_t InitialWindowPackets ; uint32_t SendIdleTimeoutMs ; uint32_t InitialRttMs ; uint32_t MaxAckDelayMs ; uint32_t DisconnectTimeoutMs ; uint32_t KeepAliveIntervalMs ; uint16_t CongestionControlAlgorithm ; uint16_t PeerBidiStreamCount ; uint16_t PeerUnidiStreamCount ; uint16_t MaxBindingStatelessOperations ; uint16_t StatelessOperationExpirationMs ; uint16_t MinimumMtu ; uint16_t MaximumMtu ; uint8_t SendBufferingEnabled : 1 ; uint8_t PacingEnabled : 1 ; uint8_t MigrationEnabled : 1 ; uint8_t DatagramReceiveEnabled : 1 ; uint8_t ServerResumptionLevel : 2 ; uint8_t GreaseQuicBitEnabled : 1 ; uint8_t EcnEnabled : 1 ; uint8_t MaxOperationsPerDrain ; uint8_t MtuDiscoveryMissingProbeCount ; uint32_t DestCidUpdateIdleTimeoutMs ; union { uint64_t Flags ; struct { uint64_t HyStartEnabled : 1 ; uint64_t ReservedFlags : 6 3 ; } ; } ; } QUIC_SETTINGS ; # define QUIC_TLS_SECRETS_MAX_SECRET_LEN 6 4 typedef struct QUIC_TLS_SECRETS { uint8_t SecretLength ; struct { uint8_t ClientRandom : 1 ; uint8_t ClientEarlyTrafficSecret : 1 ; uint8_t ClientHandshakeTrafficSecret : 1 ; uint8_t ServerHandshakeTrafficSecret : 1 ; uint8_t ClientTrafficSecret0 : 1 ; uint8_t ServerTrafficSecret0 : 1 ; } IsSet ; uint8_t ClientRandom [ 3 2 ] ; uint8_t ClientEarlyTrafficSecret [ QUIC_TLS_SECRETS_MAX_SECRET_LEN ] ; uint8_t ClientHandshakeTrafficSecret [ QUIC_TLS_SECRETS_MAX_SECRET_LEN ] ; uint8_t ServerHandshakeTrafficSecret [ QUIC_TLS_SECRETS_MAX_SECRET_LEN ] ; uint8_t ClientTrafficSecret0 [ QUIC_TLS_SECRETS_MAX_SECRET_LEN ] ; uint8_t ServerTrafficSecret0 [ QUIC_TLS_SECRETS_MAX_SECRET_LEN ] ; } QUIC_TLS_SECRETS ; typedef struct QUIC_STREAM_STATISTICS { uint64_t ConnBlockedBySchedulingUs ; uint64_t ConnBlockedByPacingUs ; uint64_t ConnBlockedByAmplificationProtUs ; uint64_t ConnBlockedByCongestionControlUs ; uint64_t ConnBlockedByFlowControlUs ; uint64_t StreamBlockedByIdFlowControlUs ; uint64_t StreamBlockedByFlowControlUs ; uint64_t StreamBlockedByAppUs ; } QUIC_STREAM_STATISTICS ; typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_SET_CONTEXT_FN)( _In_ _Pre_defensive_ HQUIC Handle, _In_opt_ void* Context)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void* (QUIC_API * QUIC_GET_CONTEXT_FN)( _In_ _Pre_defensive_ HQUIC Handle)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_SET_CALLBACK_HANDLER_FN)( _In_ _Pre_defensive_ HQUIC Handle, _In_ void* Handler, _In_opt_ void* Context)"
  },
  {
    "label": "QUIC_PARAM_IS_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define QUIC_PARAM_PREFIX_GLOBAL 0 x01000000 # define QUIC_PARAM_PREFIX_REGISTRATION 0 x02000000 # define QUIC_PARAM_PREFIX_CONFIGURATION 0 x03000000 # define QUIC_PARAM_PREFIX_LISTENER 0 x04000000 # define QUIC_PARAM_PREFIX_CONNECTION 0 x05000000 # define QUIC_PARAM_PREFIX_TLS 0 x06000000 # define QUIC_PARAM_PREFIX_TLS_SCHANNEL 0 x07000000 # define QUIC_PARAM_PREFIX_STREAM 0 x08000000 # define)",
    "insertText": "QUIC_PARAM_IS_GLOBAL(Param) ((Param & 0x7F000000) == QUIC_PARAM_PREFIX_GLOBAL)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (unsigned long Attribute ; unsigned long BufferLength ; void* Buffer ; } QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W ; # define QUIC_PARAM_CONFIGURATION_SCHANNEL_CREDENTIAL_ATTRIBUTE_W 0 x03000003 # define QUIC_PARAM_LISTENER_LOCAL_ADDRESS 0 x04000000 # define QUIC_PARAM_LISTENER_STATS 0 x04000001 # ifdef QUIC_API_ENABLE_PREVIEW_FEATURES # define QUIC_PARAM_LISTENER_CIBIR_ID 0 x04000002 # endif # define QUIC_PARAM_CONN_QUIC_VERSION 0 x05000000 # define QUIC_PARAM_CONN_LOCAL_ADDRESS 0 x05000001 # define QUIC_PARAM_CONN_REMOTE_ADDRESS 0 x05000002 # define QUIC_PARAM_CONN_IDEAL_PROCESSOR 0 x05000003 # define QUIC_PARAM_CONN_SETTINGS 0 x05000004 # define QUIC_PARAM_CONN_STATISTICS 0 x05000005 # define QUIC_PARAM_CONN_STATISTICS_PLAT 0 x05000006 # define QUIC_PARAM_CONN_SHARE_UDP_BINDING 0 x05000007 # define QUIC_PARAM_CONN_LOCAL_BIDI_STREAM_COUNT 0 x05000008 # define QUIC_PARAM_CONN_LOCAL_UNIDI_STREAM_COUNT 0 x05000009 # define QUIC_PARAM_CONN_MAX_STREAM_IDS 0 x0500000A # define QUIC_PARAM_CONN_CLOSE_REASON_PHRASE 0 x0500000B # define QUIC_PARAM_CONN_STREAM_SCHEDULING_SCHEME 0 x0500000C # define QUIC_PARAM_CONN_DATAGRAM_RECEIVE_ENABLED 0 x0500000D # define QUIC_PARAM_CONN_DATAGRAM_SEND_ENABLED 0 x0500000E # ifdef QUIC_API_ENABLE_INSECURE_FEATURES # define QUIC_PARAM_CONN_DISABLE_1RTT_ENCRYPTION 0 x0500000F # endif # define QUIC_PARAM_CONN_RESUMPTION_TICKET 0 x05000010 # define QUIC_PARAM_CONN_PEER_CERTIFICATE_VALID 0 x05000011 # define QUIC_PARAM_CONN_LOCAL_INTERFACE 0 x05000012 # define QUIC_PARAM_CONN_TLS_SECRETS 0 x05000013 # ifdef QUIC_API_ENABLE_PREVIEW_FEATURES # define QUIC_PARAM_CONN_VERSION_SETTINGS 0 x05000014 # define QUIC_PARAM_CONN_CIBIR_ID 0 x05000015 # endif # define QUIC_PARAM_CONN_STATISTICS_V2 0 x05000016 # define QUIC_PARAM_CONN_STATISTICS_V2_PLAT 0 x05000017 # define QUIC_PARAM_TLS_HANDSHAKE_INFO 0 x06000000 # define QUIC_PARAM_TLS_NEGOTIATED_ALPN 0 x06000001 # ifdef WIN32 typedef struct QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W { unsigned long Attribute ; void* Buffer ; } QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W ; # define QUIC_PARAM_TLS_SCHANNEL_CONTEXT_ATTRIBUTE_W 0 x07000000 typedef struct QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W { unsigned long Attribute ; unsigned long BufferLength ; void* Buffer ; } QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W ; # define QUIC_PARAM_TLS_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W 0 x07000001 # define QUIC_PARAM_TLS_SCHANNEL_SECURITY_CONTEXT_TOKEN 0 x07000002 # endif # define QUIC_PARAM_STREAM_ID 0 x08000000 # define QUIC_PARAM_STREAM_0RTT_LENGTH 0 x08000001 # define QUIC_PARAM_STREAM_IDEAL_SEND_BUFFER_SIZE 0 x08000002 # define QUIC_PARAM_STREAM_PRIORITY 0 x08000003 # define QUIC_PARAM_STREAM_STATISTICS 0 X08000004 typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_SET_PARAM_FN)( _When_(QUIC_PARAM_IS_GLOBAL(Param), _Reserved_) _When_(!QUIC_PARAM_IS_GLOBAL(Param), _In_ _Pre_defensive_) HQUIC Handle, _In_ uint32_t Param, _In_ uint32_t BufferLength, _In_reads_bytes_(BufferLength) const void* Buffer)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_GET_PARAM_FN)( _When_(QUIC_PARAM_IS_GLOBAL(Param), _Reserved_) _When_(!QUIC_PARAM_IS_GLOBAL(Param), _In_ _Pre_defensive_) HQUIC Handle, _In_ uint32_t Param, _Inout_ _Pre_defensive_ uint32_t* BufferLength, _Out_writes_bytes_opt_(*BufferLength) void* Buffer)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_REGISTRATION_OPEN_FN)( _In_opt_ const QUIC_REGISTRATION_CONFIG* Config, _Outptr_ _At_(*Registration, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Registration)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_REGISTRATION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Registration)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_REGISTRATION_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONFIGURATION_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_reads_(AlpnBufferCount) _Pre_defensive_ const QUIC_BUFFER* const AlpnBuffers, _In_range_(>, 0) uint32_t AlpnBufferCount, _In_reads_bytes_opt_(SettingsSize) const QUIC_SETTINGS* Settings, _In_ uint32_t SettingsSize, _In_opt_ void* Context, _Outptr_ _At_(*Configuration, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Configuration)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_CONFIGURATION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Configuration)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN)( _In_ _Pre_defensive_ HQUIC Configuration, _In_ _Pre_defensive_ const QUIC_CREDENTIAL_CONFIG* CredConfig)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef enum QUIC_LISTENER_EVENT_TYPE { QUIC_LISTENER_EVENT_NEW_CONNECTION = 0,QUIC_LISTENER_EVENT_STOP_COMPLETE = 1,} QUIC_LISTENER_EVENT_TYPE ; typedef struct QUIC_LISTENER_EVENT { QUIC_LISTENER_EVENT_TYPE Type ; union { struct { const QUIC_NEW_CONNECTION_INFO* Info ; HQUIC Connection ; } NEW_CONNECTION ; struct { BOOLEAN AppCloseInProgress : 1 ; BOOLEAN RESERVED : 7 ; } STOP_COMPLETE ; } ; } QUIC_LISTENER_EVENT ; typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_LISTENER_CALLBACK) QUIC_STATUS (QUIC_API QUIC_LISTENER_CALLBACK)( _In_ HQUIC Listener, _In_opt_ void* Context, _Inout_ QUIC_LISTENER_EVENT* Event)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef QUIC_LISTENER_CALLBACK* QUIC_LISTENER_CALLBACK_HANDLER ; typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_LISTENER_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ _Pre_defensive_ QUIC_LISTENER_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Listener, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Listener)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_LISTENER_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Listener)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_LISTENER_START_FN)( _In_ _Pre_defensive_ HQUIC Listener, _In_reads_(AlpnBufferCount) _Pre_defensive_ const QUIC_BUFFER* const AlpnBuffers, _In_range_(>, 0) uint32_t AlpnBufferCount, _In_opt_ const QUIC_ADDR* LocalAddress)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_LISTENER_STOP_FN)( _In_ _Pre_defensive_ HQUIC Listener)"
  },
  {
    "label": "_Field_range_()",
    "kind": "Method",
    "detail": "Function (typedef enum QUIC_CONNECTION_EVENT_TYPE { QUIC_CONNECTION_EVENT_CONNECTED = 0,QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_TRANSPORT = 1,QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_PEER = 2,QUIC_CONNECTION_EVENT_SHUTDOWN_COMPLETE = 3,QUIC_CONNECTION_EVENT_LOCAL_ADDRESS_CHANGED = 4,QUIC_CONNECTION_EVENT_PEER_ADDRESS_CHANGED = 5,QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED = 6,QUIC_CONNECTION_EVENT_STREAMS_AVAILABLE = 7,QUIC_CONNECTION_EVENT_PEER_NEEDS_STREAMS = 8,QUIC_CONNECTION_EVENT_IDEAL_PROCESSOR_CHANGED = 9,QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED = 1 0,QUIC_CONNECTION_EVENT_DATAGRAM_RECEIVED = 1 1,QUIC_CONNECTION_EVENT_DATAGRAM_SEND_STATE_CHANGED = 1 2,QUIC_CONNECTION_EVENT_RESUMED = 1 3,QUIC_CONNECTION_EVENT_RESUMPTION_TICKET_RECEIVED = 1 4,QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED = 1 5,} QUIC_CONNECTION_EVENT_TYPE ; typedef struct QUIC_CONNECTION_EVENT { QUIC_CONNECTION_EVENT_TYPE Type ; union { struct { BOOLEAN SessionResumed ;)",
    "insertText": "_Field_range_(>, 0)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_(NegotiatedAlpnLength)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_(ResumptionTicketLength)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (} RESUMPTION_TICKET_RECEIVED ; struct { QUIC_CERTIFICATE* Certificate ; uint32_t DeferredErrorFlags ; QUIC_STATUS DeferredStatus ; QUIC_CERTIFICATE_CHAIN* Chain ; } PEER_CERTIFICATE_RECEIVED ; } ; } QUIC_CONNECTION_EVENT ; typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_CONNECTION_CALLBACK) QUIC_STATUS (QUIC_API QUIC_CONNECTION_CALLBACK)( _In_ HQUIC Connection, _In_opt_ void* Context, _Inout_ QUIC_CONNECTION_EVENT* Event)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef QUIC_CONNECTION_CALLBACK* QUIC_CONNECTION_CALLBACK_HANDLER ; typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ _Pre_defensive_ QUIC_CONNECTION_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Connection, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Connection)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_CONNECTION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Connection)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_CONNECTION_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_START_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ _Pre_defensive_ HQUIC Configuration, _In_ QUIC_ADDRESS_FAMILY Family, _In_reads_or_z_opt_(QUIC_MAX_SNI_LENGTH) const char* ServerName, _In_ uint16_t ServerPort)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_SET_CONFIGURATION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ _Pre_defensive_ HQUIC Configuration)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_SEND_RESUMPTION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_SEND_RESUMPTION_FLAGS Flags, _In_ uint16_t DataLength, _In_reads_bytes_opt_(DataLength) const uint8_t* ResumptionData)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_COMP_RESUMPTION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ BOOLEAN Result)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_COMP_CERT_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ BOOLEAN Result, _In_ QUIC_TLS_ALERT_CODES TlsAlert)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (typedef enum QUIC_STREAM_EVENT_TYPE { QUIC_STREAM_EVENT_START_COMPLETE = 0,QUIC_STREAM_EVENT_RECEIVE = 1,QUIC_STREAM_EVENT_SEND_COMPLETE = 2,QUIC_STREAM_EVENT_PEER_SEND_SHUTDOWN = 3,QUIC_STREAM_EVENT_PEER_SEND_ABORTED = 4,QUIC_STREAM_EVENT_PEER_RECEIVE_ABORTED = 5,QUIC_STREAM_EVENT_SEND_SHUTDOWN_COMPLETE = 6,QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE = 7,QUIC_STREAM_EVENT_IDEAL_SEND_BUFFER_SIZE = 8,QUIC_STREAM_EVENT_PEER_ACCEPTED = 9,} QUIC_STREAM_EVENT_TYPE ; typedef struct QUIC_STREAM_EVENT { QUIC_STREAM_EVENT_TYPE Type ; union { struct { QUIC_STATUS Status ; QUIC_UINT62 ID ; BOOLEAN PeerAccepted : 1 ; BOOLEAN RESERVED : 7 ; } START_COMPLETE ; struct { uint64_t AbsoluteOffset ; uint64_t TotalBufferLength ;)",
    "insertText": "_Field_size_(BufferCount)"
  },
  {
    "label": "_Field_range_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_range_(0, UINT32_MAX)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (QUIC_RECEIVE_FLAGS Flags ; } RECEIVE ; struct { BOOLEAN Canceled ; void* ClientContext ; } SEND_COMPLETE ; struct { QUIC_UINT62 ErrorCode ; } PEER_SEND_ABORTED ; struct { QUIC_UINT62 ErrorCode ; } PEER_RECEIVE_ABORTED ; struct { BOOLEAN Graceful ; } SEND_SHUTDOWN_COMPLETE ; struct { BOOLEAN ConnectionShutdown ; BOOLEAN AppCloseInProgress : 1 ; BOOLEAN ConnectionShutdownByApp : 1 ; BOOLEAN ConnectionClosedRemotely : 1 ; BOOLEAN RESERVED : 5 ; QUIC_UINT62 ConnectionErrorCode ; QUIC_STATUS ConnectionCloseStatus ; } SHUTDOWN_COMPLETE ; struct { uint64_t ByteCount ; } IDEAL_SEND_BUFFER_SIZE ; } ; } QUIC_STREAM_EVENT ; typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_STREAM_CALLBACK) QUIC_STATUS (QUIC_API QUIC_STREAM_CALLBACK)( _In_ HQUIC Stream, _In_opt_ void* Context, _Inout_ QUIC_STREAM_EVENT* Event)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef QUIC_STREAM_CALLBACK* QUIC_STREAM_CALLBACK_HANDLER ; typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_STREAM_OPEN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_STREAM_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Stream, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Stream)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_STREAM_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Stream)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_START_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ QUIC_STREAM_START_FLAGS Flags)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ QUIC_STREAM_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_SEND_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_reads_(BufferCount) _Pre_defensive_ const QUIC_BUFFER* const Buffers, _In_ uint32_t BufferCount, _In_ QUIC_SEND_FLAGS Flags, _In_opt_ void* ClientSendContext)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_STREAM_RECEIVE_COMPLETE_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ uint64_t BufferLength)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_RECEIVE_SET_ENABLED_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ BOOLEAN IsEnabled)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "_IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_DATAGRAM_SEND_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_reads_(BufferCount) _Pre_defensive_ const QUIC_BUFFER* const Buffers, _In_ uint32_t BufferCount, _In_ QUIC_SEND_FLAGS Flags, _In_opt_ void* ClientSendContext)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef struct QUIC_API_TABLE { QUIC_SET_CONTEXT_FN SetContext ; QUIC_GET_CONTEXT_FN GetContext ; QUIC_SET_CALLBACK_HANDLER_FN SetCallbackHandler ; QUIC_SET_PARAM_FN SetParam ; QUIC_GET_PARAM_FN GetParam ; QUIC_REGISTRATION_OPEN_FN RegistrationOpen ; QUIC_REGISTRATION_CLOSE_FN RegistrationClose ; QUIC_REGISTRATION_SHUTDOWN_FN RegistrationShutdown ; QUIC_CONFIGURATION_OPEN_FN ConfigurationOpen ; QUIC_CONFIGURATION_CLOSE_FN ConfigurationClose ; QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN ConfigurationLoadCredential ; QUIC_LISTENER_OPEN_FN ListenerOpen ; QUIC_LISTENER_CLOSE_FN ListenerClose ; QUIC_LISTENER_START_FN ListenerStart ; QUIC_LISTENER_STOP_FN ListenerStop ; QUIC_CONNECTION_OPEN_FN ConnectionOpen ; QUIC_CONNECTION_CLOSE_FN ConnectionClose ; QUIC_CONNECTION_SHUTDOWN_FN ConnectionShutdown ; QUIC_CONNECTION_START_FN ConnectionStart ; QUIC_CONNECTION_SET_CONFIGURATION_FN ConnectionSetConfiguration ; QUIC_CONNECTION_SEND_RESUMPTION_FN ConnectionSendResumptionTicket ; QUIC_STREAM_OPEN_FN StreamOpen ; QUIC_STREAM_CLOSE_FN StreamClose ; QUIC_STREAM_START_FN StreamStart ; QUIC_STREAM_SHUTDOWN_FN StreamShutdown ; QUIC_STREAM_SEND_FN StreamSend ; QUIC_STREAM_RECEIVE_COMPLETE_FN StreamReceiveComplete ; QUIC_STREAM_RECEIVE_SET_ENABLED_FN StreamReceiveSetEnabled ; QUIC_DATAGRAM_SEND_FN DatagramSend ; QUIC_CONNECTION_COMP_RESUMPTION_FN ConnectionResumptionTicketValidationComplete ; QUIC_CONNECTION_COMP_CERT_FN ConnectionCertificateValidationComplete ; } QUIC_API_TABLE ; # define QUIC_API_VERSION_1 1 # define QUIC_API_VERSION_2 2 # if)",
    "insertText": "defined(_KERNEL_MODE) && !defined(_WIN64) #define MsQuicClose(QuicApi) UNREFERENCED_PARAMETER((QuicApi)) #define MsQuicOpenVersion(Version, QuicApi) QUIC_STATUS_NOT_SUPPORTED #else _IRQL_requires_max_(PASSIVE_LEVEL) _Check_return_ #if (__cplusplus >= 201703L || _MSVC_LANG >= 201703L) [[nodiscard]] #endif QUIC_STATUS QUIC_API MsQuicOpenVersion( _In_ uint32_t Version, _Out_ _Pre_defensive_ const void** QuicApi)"
  },
  {
    "label": "_IRQL_requires_max_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_IRQL_requires_max_(PASSIVE_LEVEL) void QUIC_API MsQuicClose( _In_ _Pre_defensive_ const void* QuicApi)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(__cplusplus) _IRQL_requires_max_(PASSIVE_LEVEL) _Check_return_ #if (__cplusplus >= 201703L || _MSVC_LANG >= 201703L) [[nodiscard]] #endif #ifdef WIN32 __forceinline #else __attribute__((always_inline)) inline #endif QUIC_STATUS MsQuicOpen2( _Out_ _Pre_defensive_ const QUIC_API_TABLE** QuicApi)"
  }
]