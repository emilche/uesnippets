[
  {
    "label": "ERichCurveInterpMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveInterpMode"
  },
  {
    "label": "ERichCurveExtrapolation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveExtrapolation"
  },
  {
    "label": "FCurveAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveAttributes"
  },
  {
    "label": "FRealCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealCurve"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Curves / IndexedCurve . h \" # include \" Misc / FrameRate . h \" # include \" RealCurve . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCIM_Linear)",
    "insertText": "UMETA(DisplayName = \"Linear\"), RCIM_Constant UMETA(DisplayName = \"Constant\"), RCIM_Cubic UMETA(DisplayName = \"Cubic\"), RCIM_None UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCCE_Cycle)",
    "insertText": "UMETA(DisplayName = \"Cycle\"), RCCE_CycleWithOffset UMETA(DisplayName = \"CycleWithOffset\"), RCCE_Oscillate UMETA(DisplayName = \"Oscillate\"), RCCE_Linear UMETA(DisplayName = \"Linear\"), RCCE_Constant UMETA(DisplayName = \"Constant\"), RCCE_None UMETA(DisplayName = \"None\")"
  },
  {
    "label": "FCurveAttributes()",
    "kind": "Method",
    "detail": "Function (struct FCurveAttributes {)",
    "insertText": "FCurveAttributes()"
  },
  {
    "label": "HasPreExtrapolation()",
    "kind": "Method",
    "detail": "Function (bHasPreExtrapolation = 0 ; bHasPostExtrapolation = 0 ; PreExtrapolation = ERichCurveExtrapolation::RCCE_None ; PostExtrapolation = ERichCurveExtrapolation::RCCE_None ; } bool)",
    "insertText": "HasPreExtrapolation()"
  },
  {
    "label": "SetPostExtrapolation()",
    "kind": "Method",
    "detail": "Function (bHasPreExtrapolation = 1 ; PreExtrapolation = InPreExtrapolation ; return* this ; } FCurveAttributes&)",
    "insertText": "SetPostExtrapolation(ERichCurveExtrapolation InPostExtrapolation)"
  },
  {
    "label": "UnsetPreExtrapolation()",
    "kind": "Method",
    "detail": "Function (bHasPostExtrapolation = 1 ; PostExtrapolation = InPostExtrapolation ; return* this ; } void)",
    "insertText": "UnsetPreExtrapolation()"
  },
  {
    "label": "UnsetPostExtrapolation()",
    "kind": "Method",
    "detail": "Function (bHasPreExtrapolation = 0 ; } void)",
    "insertText": "UnsetPostExtrapolation()"
  },
  {
    "label": "MaskCommon()",
    "kind": "Method",
    "detail": "Function (bHasPostExtrapolation = 0 ; } FCurveAttributes)",
    "insertText": "MaskCommon(const FCurveAttributes& A, const FCurveAttributes& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCurveAttributes NewAttributes ;)",
    "insertText": "if(A.bHasPreExtrapolation && B.bHasPreExtrapolation && A.PreExtrapolation == B.PreExtrapolation)"
  },
  {
    "label": "SetPreExtrapolation()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetPreExtrapolation(A.PreExtrapolation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasPostExtrapolation && B.bHasPostExtrapolation && A.PostExtrapolation == B.PostExtrapolation)"
  },
  {
    "label": "SetPostExtrapolation()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetPostExtrapolation(A.PostExtrapolation)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} return NewAttributes ; } private : uint8 bHasPreExtrapolation : 1 ; uint8 bHasPostExtrapolation : 1 ; ERichCurveExtrapolation PreExtrapolation ; ERichCurveExtrapolation PostExtrapolation ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FRealCurve() : FIndexedCurve() , DefaultValue(MAX_flt) , PreInfinityExtrap(RCCE_Constant) , PostInfinityExtrap(RCCE_Constant)"
  },
  {
    "label": "HasAnyData()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "HasAnyData()"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "AddKey(float InTime, float InValue, const bool bUnwindRotation = false, FKeyHandle KeyHandle = FKeyHandle()) PURE_VIRTUAL(FRealCurve::AddKey, return FKeyHandle::Invalid();)"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle) PURE_VIRTUAL(FRealCurve::DeleteKey,)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, float InValue, const bool bUnwindRotation = false, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER) PURE_VIRTUAL(FRealCurve::UpdateOrAddKey, return FKeyHandle::Invalid();)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindKey(float KeyTime, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "KeyExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyExistsAtTime(float KeyTime, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(FKeyHandle KeyHandle, float NewValue, bool bAutoSetTangents = true) PURE_VIRTUAL(FRealCurve::SetKeyValue,)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyValue(FKeyHandle KeyHandle) const PURE_VIRTUAL(FRealCurve::GetKeyValue, return 0.f;)"
  },
  {
    "label": "GetKeyTimeValuePair()",
    "kind": "Method",
    "detail": "Function (TPair<float,float>)",
    "insertText": "GetKeyTimeValuePair(FKeyHandle KeyHandle) const PURE_VIRTUAL(FRealCurve::GetKeyTimeValuePair, return (TPair<float,float>(0.f,0.f));)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpMode(FKeyHandle KeyHandle, ERichCurveInterpMode NewInterpMode) PURE_VIRTUAL(FRealCurve::SetKeyInterpMode,)"
  },
  {
    "label": "SetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValue(float InDefaultValue)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (DefaultValue = InDefaultValue ; } float)",
    "insertText": "GetDefaultValue()"
  },
  {
    "label": "GetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (DefaultValue = MAX_flt ; } ERichCurveInterpMode)",
    "insertText": "GetKeyInterpMode(FKeyHandle KeyHandle) const PURE_VIRTUAL(FRealCurve::GetTimeRange, return RCIM_None;)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(float& MinTime, float& MaxTime) const PURE_VIRTUAL(FRealCurve::GetTimeRange,)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(float& MinValue, float& MaxValue) const PURE_VIRTUAL(FRealCurve::GetValueRange,)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset() PURE_VIRTUAL(FRealCurve::Reset,)"
  },
  {
    "label": "RemapTimeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTimeValue(float& InTime, float& CycleValueOffset) const PURE_VIRTUAL(FRealCurve::RemapTimeValue,)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Eval(float InTime, float InDefaultValue = 0.0f) const PURE_VIRTUAL(FRealCurve::Eval, return 0.f;)"
  },
  {
    "label": "ReadjustTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadjustTimeRange(float NewMinTimeRange, float NewMaxTimeRange, bool bInsert , float OldStartTime, float OldEndTime) PURE_VIRTUAL(FRealCurve::ReadjustTimeRange,)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate) PURE_VIRTUAL(FRealCurve::BakeCurve,)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate, float FirstKeyTime, float LastKeyTime) PURE_VIRTUAL(FRealCurve::BakeCurve,)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, FFrameRate SampleRate = FFrameRate(0,0)) PURE_VIRTUAL(FRealCurve::RemoveRedundantKeys,)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, float FirstKeyTime, float LastKeyTime, FFrameRate SampleRate = FFrameRate(0,0)) PURE_VIRTUAL(FRealCurve::RemoveRedundantKeys,)"
  },
  {
    "label": "CycleTime()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CycleTime(float MinTime, float MaxTime, float& InTime, int& CycleCount)"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetKeyIndex(float KeyTime, float KeyTimeTolerance) const PURE_VIRTUAL(FRealCurve::GetKeyIndex, return INDEX_NONE;)"
  }
]