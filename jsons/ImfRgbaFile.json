[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "ComputeBasePointer()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_RGBA_FILE_H # define INCLUDED_IMF_RGBA_FILE_H # include \" ImfExport . h \" # include \" ImfNamespace . h \" # include \" ImfFrameBuffer . h \" # include \" ImfHeader . h \" # include \" ImfRgba . h \" # include \" ImfThreading . h \" # include<ImathBox . h> # include<ImathVec . h> # include<half . h> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER const Rgba*)",
    "insertText": "ComputeBasePointer(const Rgba* ptr, const IMATH_NAMESPACE::V2i& origin, int64_t w, size_t xStride = 1, size_t yStride = 0)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (int64_t offx = static_cast<)",
    "insertText": "int64_t(origin.x)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (offx* = xStride ; int64_t offy = static_cast<)",
    "insertText": "int64_t(origin.y)"
  },
  {
    "label": "ComputeBasePointer()",
    "kind": "Method",
    "detail": "Function (offy* = yStride ; return ptr - offx - offy ; } const Rgba*)",
    "insertText": "ComputeBasePointer(const Rgba* ptr, const IMATH_NAMESPACE::Box2i& dataWindow)"
  },
  {
    "label": "ComputeBasePointer()",
    "kind": "Method",
    "detail": "Function (} Rgba*)",
    "insertText": "ComputeBasePointer(Rgba* ptr, const IMATH_NAMESPACE::V2i& origin, int64_t w, size_t xStride = 1, size_t yStride = 0)"
  },
  {
    "label": "ComputeBasePointer()",
    "kind": "Method",
    "detail": "Function (offy* = yStride ; return ptr - offx - offy ; } Rgba*)",
    "insertText": "ComputeBasePointer(Rgba* ptr, const IMATH_NAMESPACE::Box2i& dataWindow)"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (} class IMF_EXPORT_TYPE RgbaOutputFile { public : IMF_EXPORT)",
    "insertText": "RgbaOutputFile(const char name[], const Header& header, RgbaChannels rgbaChannels = WRITE_RGBA, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaOutputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, const Header& header, RgbaChannels rgbaChannels = WRITE_RGBA, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaOutputFile(const char name[], const IMATH_NAMESPACE::Box2i& displayWindow, const IMATH_NAMESPACE::Box2i& dataWindow = IMATH_NAMESPACE::Box2i (), RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = PIZ_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaOutputFile(const char name[], int width, int height, RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = PIZ_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "RgbaOutputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "writePixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writePixels(int numScanLines = 1)"
  },
  {
    "label": "currentScanLine()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "currentScanLine()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const FrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "displayWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "displayWindow()"
  },
  {
    "label": "dataWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "dataWindow()"
  },
  {
    "label": "pixelAspectRatio()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "pixelAspectRatio()"
  },
  {
    "label": "screenWindowCenter()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::V2f)",
    "insertText": "screenWindowCenter()"
  },
  {
    "label": "screenWindowWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "screenWindowWidth()"
  },
  {
    "label": "lineOrder()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LineOrder)",
    "insertText": "lineOrder()"
  },
  {
    "label": "compression()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Compression)",
    "insertText": "compression()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT RgbaChannels)",
    "insertText": "channels()"
  },
  {
    "label": "updatePreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "updatePreviewImage(const PreviewRgba[])"
  },
  {
    "label": "setYCRounding()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setYCRounding(unsigned int roundY, unsigned int roundC)"
  },
  {
    "label": "breakScanLine()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "breakScanLine(int y, int offset, int length, char c)"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RgbaOutputFile(const RgbaOutputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RgbaOutputFile&)",
    "insertText": "operator(const RgbaOutputFile&)"
  },
  {
    "label": "RgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RgbaOutputFile(RgbaOutputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RgbaOutputFile&)",
    "insertText": "operator(RgbaOutputFile&&)"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (class IMF_HIDDEN ToYca ; OutputFile* _outputFile ; ToYca* _toYca ; } ; class IMF_EXPORT_TYPE RgbaInputFile { public : IMF_EXPORT)",
    "insertText": "RgbaInputFile(const char name[], int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(const char name[], const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(int partNumber, const char name[], int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(int partNumber, const char name[], const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(int partNumber, OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "RgbaInputFile(int partNumber, OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "RgbaInputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "setLayerName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setLayerName(const std::string& layerName)"
  },
  {
    "label": "parts()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "parts()"
  },
  {
    "label": "setPart()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setPart(int part)"
  },
  {
    "label": "setPartAndLayer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setPartAndLayer(int part, const std::string& layerName)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine1, int scanLine2)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "version()"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RgbaInputFile(const RgbaInputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RgbaInputFile&)",
    "insertText": "operator(const RgbaInputFile&)"
  },
  {
    "label": "RgbaInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RgbaInputFile(RgbaInputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RgbaInputFile&)",
    "insertText": "operator(RgbaInputFile&&)"
  }
]