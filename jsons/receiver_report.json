[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "ReceiverReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiverReport"
  },
  {
    "label": "ReceiverReport()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_RECEIVER_REPORT_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_RECEIVER_REPORT_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" modules / rtp_rtcp / source / rtcp_packet . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / report_block . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class ReceiverReport : public RtcpPacket { public : uint8_t kPacketType = 2 0 1 ; size_t kMaxNumberOfReportBlocks = 0 x1f ;)",
    "insertText": "ReceiverReport()"
  },
  {
    "label": "ReceiverReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiverReport(const ReceiverReport&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "AddReportBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddReportBlock(const ReportBlock& block)"
  },
  {
    "label": "SetReportBlocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReportBlocks(std::vector<ReportBlock> blocks)"
  },
  {
    "label": "report_blocks()",
    "kind": "Method",
    "detail": "Function (const std::vector<ReportBlock>&)",
    "insertText": "report_blocks()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  }
]