[
  {
    "label": "FStallDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStallDetector"
  },
  {
    "label": "FStallDetectedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStallDetectedParams"
  },
  {
    "label": "FStallCompletedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStallCompletedParams"
  },
  {
    "label": "EStallDetectorReportingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStallDetectorReportingMode"
  },
  {
    "label": "FStallDetectorRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStallDetectorRunnable"
  },
  {
    "label": "FStallDetectorStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStallDetectorStats"
  },
  {
    "label": "TabulatedResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TabulatedResult"
  },
  {
    "label": "FStallTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStallTimer"
  },
  {
    "label": "FStallDetectorPause",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStallDetectorPause"
  },
  {
    "label": "WITH_EDITOR()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" GenericPlatform / GenericPlatformCrashContext . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Logging / LogMacros . h \" # include \" Misc / Build . h \" # include \" Misc / ScopeLock . h \" # include \" ProfilingDebugging / CountersTrace . h \" # include<atomic> # ifndef STALL_DETECTOR # if)",
    "insertText": "WITH_EDITOR(PLATFORM_WINDOWS || PLATFORM_UNIX ) && !UE_BUILD_SHIPPING && COUNTERSTRACE_ENABLED #define STALL_DETECTOR 1 #else #define STALL_DETECTOR 0 #endif #endif #if STALL_DETECTOR #define SCOPE_STALL_COUNTER(InName, InBudgetSeconds) \\ static_assert(UE_ARRAY_COUNT(PREPROCESSOR_TO_STRING(InName)) <= UE::StallDetectorScopeMaxNameLength, \"Scope name must be less than UE::StallDetectorScopeMaxNameLength characters long \")"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ UE::FStallDetectorStats)",
    "insertText": "PREPROCESSOR_JOIN(StallDetectorStats, __LINE__)(TEXT(#InName), InBudgetSeconds, UE::EStallDetectorReportingMode::Disabled)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ UE::FStallDetector)",
    "insertText": "PREPROCESSOR_JOIN(ScopeStallDetector, __LINE__)(PREPROCESSOR_JOIN(StallDetectorStats, __LINE__))"
  },
  {
    "label": "SCOPE_STALL_REPORTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_STALL_REPORTER(InName, InBudgetSeconds) \\ static_assert(UE_ARRAY_COUNT(PREPROCESSOR_TO_STRING(InName)) <= UE::StallDetectorScopeMaxNameLength, \"Scope name must be less than UE::StallDetectorScopeMaxNameLength characters long \")"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ UE::FStallDetectorStats)",
    "insertText": "PREPROCESSOR_JOIN(StallDetectorStats, __LINE__)(TEXT(#InName), InBudgetSeconds, UE::EStallDetectorReportingMode::First)"
  },
  {
    "label": "SCOPE_STALL_REPORTER_ALWAYS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_STALL_REPORTER_ALWAYS(InName, InBudgetSeconds) \\ static_assert(UE_ARRAY_COUNT(PREPROCESSOR_TO_STRING(InName)) <= UE::StallDetectorScopeMaxNameLength, \"Scope name must be less than UE::StallDetectorScopeMaxNameLength characters long \")"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ UE::FStallDetectorStats)",
    "insertText": "PREPROCESSOR_JOIN(StallDetectorStats, __LINE__)(TEXT(#InName), InBudgetSeconds, UE::EStallDetectorReportingMode::Always)"
  },
  {
    "label": "SCOPE_STALL_DETECTOR_PAUSE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_STALL_DETECTOR_PAUSE() \\ UE::FStallDetectorPause PREPROCESSOR_JOIN(ScopeStallDetectorPause, __LINE__)"
  },
  {
    "label": "SCOPE_STALL_COUNTER()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "SCOPE_STALL_COUNTER(InName, InBudgetSeconds) #define SCOPE_STALL_REPORTER(InName, InBudgetSeconds) #define SCOPE_STALL_REPORTER_ALWAYS(InName, InBudgetSeconds) #define SCOPE_STALL_DETECTOR_PAUSE() #endif #if STALL_DETECTOR CORE_API DECLARE_LOG_CATEGORY_EXTERN(LogStall, Log, All)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (namespace UE { class FStallDetector ; struct FStallDetectedParams { FStringView StatName ; uint32 ThreadId ; uint64 UniqueID ; TArray<uint64> Backtrace ; } ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnStallDetected, const FStallDetectedParams&)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (struct FStallCompletedParams { uint32 ThreadId ; FStringView StatName ; double BudgetSeconds ; double OverbudgetSeconds ; uint64 UniqueID ; bool bWasTriggered ; } ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnStallCompleted, const FStallCompletedParams&)"
  },
  {
    "label": "FStallDetectorStats()",
    "kind": "Method",
    "detail": "Function (enum EStallDetectorReportingMode { Disabled,First,Always } ; SIZE_T StallDetectorStatNameBufferSize = 2 5 6 ; int32 StallDetectorMaxBacktraceEntries = 3 2 ; class FStallDetectorRunnable ; class FStallDetectorStats { class FStallDetectorRunnable ; public :)",
    "insertText": "FStallDetectorStats(const TCHAR* InName, const double InBudgetSeconds, const EStallDetectorReportingMode InReportingMode)"
  },
  {
    "label": "FStallDetectorStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStallDetectorStats()"
  },
  {
    "label": "OnStallCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStallCompleted(double InOverageSeconds)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (struct TabulatedResult { const TCHAR* Name =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "FStallTimer()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Name ; const double BudgetSeconds ; const EStallDetectorReportingMode ReportingMode ; bool bReported ; FCountersTrace::FCounterAtomicInt TotalTriggeredCount ; FCountersTrace::FCounterAtomicInt TotalReportedCount ; private : FCountersTrace::TCounter<int64,TraceCounterType_Int> TriggerCount ; TCHAR TriggerCountCounterName [ StallDetectorStatNameBufferSize ] ; FCountersTrace::TCounter<double,TraceCounterType_Float> OverageSeconds ; TCHAR OverageSecondsCounterName [ StallDetectorStatNameBufferSize ] ; FCriticalSection StatsSection ; } ; class FStallTimer { public :)",
    "insertText": "FStallTimer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const double InSeconds, const double InRemainingSeconds)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Check(const double InSeconds, double& OutDeltaSeconds, double& OutOverageSeconds)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(const double InSeconds)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume(const double InSeconds)"
  },
  {
    "label": "FStallDetector()",
    "kind": "Method",
    "detail": "Function (private : uint32 PauseCount ; double LastCheckSeconds ; double RemainingSeconds ; FCriticalSection Section ; } ; class FStallDetector { class FStallDetectorRunnable ; public :)",
    "insertText": "FStallDetector(FStallDetectorStats& InStats)"
  },
  {
    "label": "FStallDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStallDetector()"
  },
  {
    "label": "CheckAndReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndReset()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FStallDetector*)",
    "insertText": "GetParent()"
  },
  {
    "label": "Startup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Startup()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (FOnStallDetected StallDetected ; FOnStallCompleted StallCompleted ; private : TAtomic<uint64> UIDGenerator ; FStallDetectorStats& Stats ; FStallDetector* Parent ; uint32 ThreadId ; bool bStarted ; bool bPersistent ; bool bTriggered ; FStallTimer Timer ; uint64 UniqueID ; double)",
    "insertText": "Check(bool bFinalCheck, double InCheckSeconds)"
  },
  {
    "label": "FStallDetectorPause()",
    "kind": "Method",
    "detail": "Function (} ; class FStallDetectorPause { public :)",
    "insertText": "FStallDetectorPause()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : bool bPaused ; } ; TCHAR StallDetectorCounterPrefix [ ] =)",
    "insertText": "TEXT(\"StallDetector/\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TCHAR StallDetectorTriggerCountSuffix [ ] =)",
    "insertText": "TEXT(\" TriggerCount\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TCHAR StallDetectorOverageTimeSuffix [ ] =)",
    "insertText": "TEXT(\" OverageSeconds\")"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (SIZE_T StallDetectorScopeMaxNameLength = StallDetectorStatNameBufferSize - 1 -)",
    "insertText": "UE_ARRAY_COUNT(StallDetectorCounterPrefix) + FMath::Max(UE_ARRAY_COUNT(StallDetectorTriggerCountSuffix), UE_ARRAY_COUNT(StallDetectorOverageTimeSuffix))"
  }
]