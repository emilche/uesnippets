[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ShadowingAtExitManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShadowingAtExitManager"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_AT_EXIT_H_ # define BASE_AT_EXIT_H_ # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / containers / stack . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" namespace base { class BASE_EXPORT AtExitManager { public : typedef)",
    "insertText": "void(*AtExitCallbackType)(void*)"
  },
  {
    "label": "AtExitManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtExitManager()"
  },
  {
    "label": "AtExitManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtExitManager(const AtExitManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AtExitManager&)",
    "insertText": "operator(const AtExitManager&)"
  },
  {
    "label": "RegisterCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCallback(AtExitCallbackType func, void* param)"
  },
  {
    "label": "RegisterTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTask(base::OnceClosure task)"
  },
  {
    "label": "ProcessCallbacksNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCallbacksNow()"
  },
  {
    "label": "DisableAllAtExitManagers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllAtExitManagers()"
  },
  {
    "label": "AtExitManager()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "AtExitManager(bool shadow)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : base::Lock lock_ ; base::stack<base::OnceClosure> stack_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() bool processing_callbacks_ GUARDED_BY(lock_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif const raw_ptr<AtExitManager,DanglingUntriaged> next_manager_ ; } ; # if)",
    "insertText": "defined(UNIT_TEST)"
  },
  {
    "label": "ShadowingAtExitManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ShadowingAtExitManager() : AtExitManager(true)"
  }
]