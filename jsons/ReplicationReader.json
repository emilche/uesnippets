[
  {
    "label": "UReplicationBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationBridge"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FReplicationStateStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationStateStorage"
  },
  {
    "label": "FNetBitStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamReader"
  },
  {
    "label": "FNetBitStreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamWriter"
  },
  {
    "label": "FReplicationSystemInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationSystemInternal"
  },
  {
    "label": "FResolveAndCollectUnresolvedAndResolvedReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveAndCollectUnresolvedAndResolvedReferenceCollector"
  },
  {
    "label": "FNetBlobHandlerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlobHandlerManager"
  },
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReplicationReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationReader"
  },
  {
    "label": "EConstants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstants"
  },
  {
    "label": "FReplicatedObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedObjectInfo"
  },
  {
    "label": "FDispatchObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDispatchObjectInfo"
  },
  {
    "label": "EReadObjectFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReadObjectFlag"
  },
  {
    "label": "FObjectsToDispatchArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectsToDispatchArray"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / AttachmentReplication . h \" # include \" Iris / ReplicationSystem / ChangeMaskUtil . h \" # include \" Iris / ReplicationSystem / NetRefHandleManager . h \" # include \" Iris / ReplicationSystem / ObjectReferenceCache . h \" # include \" Iris / ReplicationSystem / ReplicationTypes . h \" # include \" Iris / ReplicationSystem / PendingBatchData . h \" # include \" Containers / Map . h \" # include \" Misc / MemStack . h \" class UReplicationBridge ; namespace UE::Net { class FNetSerializationContext ; class FNetTokenStoreState ; class FReplicationStateStorage ; class FNetBitStreamReader ; class FNetBitStreamWriter ; namespace Private { class FReplicationSystemInternal ; class FResolveAndCollectUnresolvedAndResolvedReferenceCollector ; class FNetBlobHandlerManager ; class FNetRefHandleManager ; } } namespace UE::Net::Private { enum class ENetObjectAttachmentDispatchFlags : uint32 { None = 0,Reliable = 1 U<<0 U,Unreliable = Reliable<<1 U,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetObjectAttachmentDispatchFlags)"
  },
  {
    "label": "FReplicationReader()",
    "kind": "Method",
    "detail": "Function (class FReplicationReader { public :)",
    "insertText": "FReplicationReader()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FReplicationParameters& Parameters)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(FNetSerializationContext& Context)"
  },
  {
    "label": "UpdateUnresolvableReferenceTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnresolvableReferenceTracking()"
  },
  {
    "label": "ProcessQueuedBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessQueuedBatches()"
  },
  {
    "label": "FReplicatedObjectInfo()",
    "kind": "Method",
    "detail": "Function (private : enum EConstants : uint32 { FakeInitChangeMaskOffset = 0 xFFFFFFFFU,} ; typedef TMultiMap<uint32,FNetRefHandle> FObjectReferenceTracker ; typedef TArray<FNetRefHandle,TInlineAllocator<3 2>> FResolvedNetRefHandlesArray ; struct FReplicatedObjectInfo {)",
    "insertText": "FReplicatedObjectInfo()"
  },
  {
    "label": "RemoveUnresolvedHandleCount()",
    "kind": "Method",
    "detail": "Function (FChangeMaskStorageOrPointer UnresolvedChangeMaskOrPointer ; FObjectReferenceTracker UnresolvedObjectReferences ; FObjectReferenceTracker ResolvedDynamicObjectReferences ; TMap<FNetRefHandle,int16> UnresolvedHandleCount ; TMap<FNetRefHandle,int16> ResolvedDynamicHandleCount ; uint8* StoredBaselines [ 2 ] ; uint32 InternalIndex ; union { uint32 Value ; struct { uint32 ChangeMaskBitCount : 1 6 ; uint32 bHasUnresolvedReferences : 1 ; uint32 bHasUnresolvedInitialReferences : 1 ; uint32 bHasAttachments : 1 ; uint32 bDestroy : 1 ; uint32 bTearOff : 1 ; uint32 bIsDeltaCompressionEnabled : 1 ; uint32 LastStoredBaselineIndex : 2 ; uint32 PrevStoredBaselineIndex : 2 ; uint32 Padding : 7 ; } ; } ; bool)",
    "insertText": "RemoveUnresolvedHandleCount(FNetRefHandle RefHandle)"
  },
  {
    "label": "RemoveResolvedDynamicHandleCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveResolvedDynamicHandleCount(FNetRefHandle RefHandle)"
  },
  {
    "label": "IsObjectIndexForOOBAttachment()",
    "kind": "Method",
    "detail": "Function (} ; struct FDispatchObjectInfo ; enum : uint32 { ObjectIndexForOOBAttachment = 0 U,ObjectsToDispatchSlackCount = 3 2 U,} ; bool)",
    "insertText": "IsObjectIndexForOOBAttachment(uint32 InternalIndex)"
  },
  {
    "label": "ReadObjectBatch()",
    "kind": "Method",
    "detail": "Function (enum EReadObjectFlag : unsigned { ReadObjectFlag_IsReadingHugeObjectBatch = 1 U,} ; uint32)",
    "insertText": "ReadObjectBatch(FNetSerializationContext& Context, uint32 ReadObjectFlags)"
  },
  {
    "label": "ReadObjectInBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadObjectInBatch(FNetSerializationContext& Context, FNetRefHandle BatchHandle, bool bIsSubObject)"
  },
  {
    "label": "ReadObjectsInBatch()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ReadObjectsInBatch(FNetSerializationContext& Context, FNetRefHandle InCompleteHandle, bool bHasBatchOwnerData, uint32 BatchEndBitPosition)"
  },
  {
    "label": "ReadObjectsPendingDestroy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ReadObjectsPendingDestroy(FNetSerializationContext& Context)"
  },
  {
    "label": "ReadObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadObjects(FNetSerializationContext& Context, uint32 ObjectCountToRead, uint32 ReadObjectFlags)"
  },
  {
    "label": "ProcessHugeObjectAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHugeObjectAttachment(FNetSerializationContext& Context, const TRefCountPtr<FNetBlob>& Attachment)"
  },
  {
    "label": "ProcessHugeObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHugeObject(FNetSerializationContext& Context)"
  },
  {
    "label": "ResolveAndDispatchUnresolvedReferencesForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAndDispatchUnresolvedReferencesForObject(FNetSerializationContext& Context, uint32 InternalIndex)"
  },
  {
    "label": "ResolveAndDispatchUnresolvedReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAndDispatchUnresolvedReferences()"
  },
  {
    "label": "DispatchStateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchStateData(FNetSerializationContext& Context)"
  },
  {
    "label": "ResolveAndDispatchAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveAndDispatchAttachments(FNetSerializationContext& Context, FReplicatedObjectInfo* ReplicationInfo, ENetObjectAttachmentDispatchFlags DispatchFlags)"
  },
  {
    "label": "DispatchEndReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchEndReplication(FNetSerializationContext& Context)"
  },
  {
    "label": "StartReplication()",
    "kind": "Method",
    "detail": "Function (FReplicatedObjectInfo&)",
    "insertText": "StartReplication(uint32 InternalIndex)"
  },
  {
    "label": "EndReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplication(uint32 InternalIndex, bool bTearOff, bool bDestroyInstance)"
  },
  {
    "label": "CleanupObjectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupObjectData(FReplicatedObjectInfo& ObjectInfo)"
  },
  {
    "label": "GetReplicatedObjectInfo()",
    "kind": "Method",
    "detail": "Function (FReplicatedObjectInfo*)",
    "insertText": "GetReplicatedObjectInfo(uint32 InternalIndex)"
  },
  {
    "label": "UpdateObjectReferenceTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateObjectReferenceTracking(FReplicatedObjectInfo* ReplicationInfo, FNetBitArrayView ChangeMask, bool bIncludeInitState, FResolvedNetRefHandlesArray& OutNewResolvedRefHandles, const FObjectReferenceTracker& NewUnresolvedReferences, const FObjectReferenceTracker& NewMappedDynamicReferences)"
  },
  {
    "label": "UpdateObjectReferenceTracking_Fast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateObjectReferenceTracking_Fast(FReplicatedObjectInfo* ReplicationInfo, FNetBitArrayView ChangeMask, bool bIncludeInitState, FResolvedNetRefHandlesArray& OutNewResolvedRefHandles, const FObjectReferenceTracker& NewUnresolvedReferences, const FObjectReferenceTracker& NewMappedDynamicReferences)"
  },
  {
    "label": "CleanupReferenceTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupReferenceTracking(FReplicatedObjectInfo* ObjectInfo)"
  },
  {
    "label": "BuildUnresolvedChangeMaskAndUpdateObjectReferenceTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildUnresolvedChangeMaskAndUpdateObjectReferenceTracking(const FResolveAndCollectUnresolvedAndResolvedReferenceCollector& Collector, FNetBitArrayView CollectorChangeMask, FReplicatedObjectInfo* ReplicationInfo, FNetBitArrayView& OutUnresolvedChangeMask, FResolvedNetRefHandlesArray& OutNewResolvedRefHandles)"
  },
  {
    "label": "RemoveUnresolvedObjectReferenceInReplicationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnresolvedObjectReferenceInReplicationInfo(FReplicatedObjectInfo* ReplicationInfo, FNetRefHandle Handle)"
  },
  {
    "label": "RemoveResolvedObjectReferenceInReplicationInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResolvedObjectReferenceInReplicationInfo(FReplicatedObjectInfo* ReplicationInfo, FNetRefHandle Handle)"
  },
  {
    "label": "MoveResolvedObjectReferenceToUnresolvedInReplicationInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveResolvedObjectReferenceToUnresolvedInReplicationInfo(FReplicatedObjectInfo* ReplicationInfo, FNetRefHandle UnresolvableHandle)"
  },
  {
    "label": "DeserializeObjectStateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeObjectStateDelta(FNetSerializationContext& Context, uint32 InternalIndex, FDispatchObjectInfo& Info, FReplicatedObjectInfo& ObjectInfo, const FNetRefHandleManager::FReplicatedObjectData& ObjectData, uint32& OutNewBaselineIndex)"
  },
  {
    "label": "UpdateUnresolvedMustBeMappedReferences()",
    "kind": "Method",
    "detail": "Function (FPendingBatchData*)",
    "insertText": "UpdateUnresolvedMustBeMappedReferences(FNetRefHandle Handle, TArray<FNetRefHandle>& MustBeMappedReferences)"
  },
  {
    "label": "EnqueueEndReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueEndReplication(FPendingBatchData* PendingBatchData, bool bShouldDestroyInstance, FNetRefHandle NetRefHandleToEndReplication)"
  },
  {
    "label": "RemoveFromUnresolvedCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromUnresolvedCache(const FNetRefHandle Handle)"
  }
]