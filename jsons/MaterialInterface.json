[
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMaterialResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResource"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPhysicalMaterialMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterialMask"
  },
  {
    "label": "USubsurfaceProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsurfaceProfile"
  },
  {
    "label": "USpecularProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpecularProfile"
  },
  {
    "label": "UNeuralProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNeuralProfile"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UMaterialInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstance"
  },
  {
    "label": "FDebugShaderTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugShaderTypeInfo"
  },
  {
    "label": "FMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterInfo"
  },
  {
    "label": "FMaterialResourceLocOnDisk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialResourceLocOnDisk"
  },
  {
    "label": "FMaterialCachedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCachedData"
  },
  {
    "label": "FMaterialCachedExpressionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCachedExpressionData"
  },
  {
    "label": "FMaterialCachedExpressionEditorOnlyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCachedExpressionEditorOnlyData"
  },
  {
    "label": "FMaterialCachedHLSLTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCachedHLSLTree"
  },
  {
    "label": "FMaterialResourceForCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialResourceForCooking"
  },
  {
    "label": "FParameterChannelNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterChannelNames"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FSubstrateCompilationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateCompilationConfig"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "FMaterialInsights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInsights"
  },
  {
    "label": "EMaterialUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialUsage"
  },
  {
    "label": "FLightmassMaterialInterfaceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassMaterialInterfaceSettings"
  },
  {
    "label": "FMaterialTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialTextureInfo"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMaterialInheritanceChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInheritanceChain"
  },
  {
    "label": "FMaterialAnalysisResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAnalysisResult"
  },
  {
    "label": "UMaterialInterfaceEditorOnlyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterfaceEditorOnlyData"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FPSOPrecacheParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPSOPrecacheParams"
  },
  {
    "label": "UMaterialFunctionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunctionInterface"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FStableShaderKeyAndValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStableShaderKeyAndValue"
  },
  {
    "label": "FStaticParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticParameterSet"
  },
  {
    "label": "UCurveLinearColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveLinearColor"
  },
  {
    "label": "UCurveLinearColorAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveLinearColorAtlas"
  },
  {
    "label": "FMeshUVChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshUVChannelInfo"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" MaterialTypes . h \" # include \" Containers / ArrayView . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / SharedPointer . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / ScriptMacros . h \" # include \" RenderCommandFence . h \" # include \" SceneTypes . h \" # include \" Engine / BlendableInterface . h \" # include \" Materials / MaterialLayersFunctions . h \" # include \" Materials / MaterialIRModule . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" MaterialSceneTextureId . h \" # include \" Materials / MaterialRelevance . h \" # include \" MaterialRecursionGuard . h \" # include \" MaterialShaderPrecompileMode . h \" # include \" RHIFeatureLevel . h \" # include \" PSOPrecache . h \" # include \" StaticParameterSet . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" MaterialInterface . generated . h \" class FMaterialCompiler ; class FMaterialRenderProxy ; class FMaterialResource ; class FShaderPipelineType ; class FShaderType ; class FVertexFactoryType ; class UMaterial ; class UPhysicalMaterial ; class UPhysicalMaterialMask ; class USubsurfaceProfile ; class USpecularProfile ; class UNeuralProfile ; class UTexture ; class UMaterialInstance ; struct FDebugShaderTypeInfo ; struct FMaterialParameterInfo ; struct FMaterialResourceLocOnDisk ; class FMaterialCachedData ; struct FMaterialCachedExpressionData ; struct FMaterialCachedExpressionEditorOnlyData ; # if WITH_EDITOR class FMaterialCachedHLSLTree ; struct FMaterialResourceForCooking ; # endif # if WITH_EDITORONLY_DATA struct FParameterChannelNames ; # endif enum EShaderPlatform : uint16 ; struct FSubstrateCompilationConfig ; class UMaterialExpressionCustomOutput ; struct FMaterialInsights ; typedef TArray<FMaterialResource*> FMaterialResourceDeferredDeletionArray ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (MATUSAGE_SkeletalMesh,MATUSAGE_ParticleSprites,MATUSAGE_BeamTrails,MATUSAGE_MeshParticles,MATUSAGE_StaticLighting,MATUSAGE_MorphTargets,MATUSAGE_SplineMesh,MATUSAGE_InstancedStaticMeshes,MATUSAGE_GeometryCollections,MATUSAGE_Clothing,MATUSAGE_NiagaraSprites,MATUSAGE_NiagaraRibbons,MATUSAGE_NiagaraMeshParticles,MATUSAGE_GeometryCache,MATUSAGE_Water,MATUSAGE_HairStrands,MATUSAGE_LidarPointCloud,MATUSAGE_VirtualHeightfieldMesh,MATUSAGE_Nanite,MATUSAGE_VolumetricCloud,MATUSAGE_HeterogeneousVolumes,MATUSAGE_MAX,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FLightmassMaterialInterfaceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightmassMaterialInterfaceSettings() : EmissiveBoost(1.0f) , DiffuseBoost(1.0f) , ExportResolutionScale(1.0f) , bCastShadowAsMasked(false) , bOverrideCastShadowAsMasked(false) , bOverrideEmissiveBoost(false) , bOverrideDiffuseBoost(false) , bOverrideExportResolutionScale(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FMaterialTextureInfo() : SamplingScale(0), UVChannelIndex(INDEX_NONE)"
  },
  {
    "label": "FMaterialTextureInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TextureIndex = INDEX_NONE ; # endif })",
    "insertText": "FMaterialTextureInfo(ENoInit)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsValid(bool bCheckTextureIndex = false)"
  },
  {
    "label": "GetBaseMaterial()",
    "kind": "Method",
    "detail": "Function (} ; using TMicRecursionGuard = TMaterialRecursionGuard<class UMaterialInterface> ; struct FMaterialInheritanceChain { const UMaterial* BaseMaterial = nullptr ; const FMaterialCachedExpressionData* CachedExpressionData = nullptr ; TArray<const class UMaterialInstance*,TInlineAllocator<1 6>> MaterialInstances ; const UMaterial*)",
    "insertText": "GetBaseMaterial()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMaterialInterfaceEditorOnlyData()"
  },
  {
    "label": "UMaterialInterfaceEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMaterialInterfaceEditorOnlyData(FVTableHelper& Helper)"
  },
  {
    "label": "UMaterialInterfaceEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UMaterialInterfaceEditorOnlyData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMaterialCachedExpressionEditorOnlyData> CachedExpressionData ; bool bLoadedCachedExpressionData = false ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnBaseMaterialIsSet, UMaterialInterface*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(abstract, BlueprintType, MinimalAPI, HideCategories = (Thumbnail))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetEditorOnlyDataClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetEditorOnlyDataClass()"
  },
  {
    "label": "CreateEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (UMaterialInterfaceEditorOnlyData*)",
    "insertText": "CreateEditorOnlyData()"
  },
  {
    "label": "GetEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (public : UMaterialInterfaceEditorOnlyData*)",
    "insertText": "GetEditorOnlyData()"
  },
  {
    "label": "UMaterialInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMaterialInterface()"
  },
  {
    "label": "UMaterialInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMaterialInterface(FVTableHelper& Helper)"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetUserData(UAssetUserData* InUserData)"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "SetFeatureLevelToCompile()",
    "kind": "Method",
    "detail": "Function (# endif private : uint32 FeatureLevelsForAllMaterials ; public : void)",
    "insertText": "SetFeatureLevelToCompile(ERHIFeatureLevel::Type FeatureLevel, bool bShouldCompile)"
  },
  {
    "label": "SetGlobalRequiredFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalRequiredFeatureLevel(ERHIFeatureLevel::Type FeatureLevel, bool bShouldCompile)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostCDOContruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCDOContruct()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const TCHAR* NewName = nullptr, UObject* NewOuter = nullptr, ERenameFlags Flags = REN_None)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "AppendToClassSchema()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "AppendToClassSchema(FAppendToClassSchemaContext& Context)"
  },
  {
    "label": "OverrideBlendableSettings()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OverrideBlendableSettings(class FSceneView& View, float Weight)"
  },
  {
    "label": "OnAssignedAsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssignedAsOverride(const UObject* Owner)"
  },
  {
    "label": "OnRemovedAsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovedAsOverride(const UObject* Owner)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (class UMaterial*)",
    "insertText": "GetMaterial() PURE_VIRTUAL(UMaterialInterface::GetMaterial,return NULL;)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (const class UMaterial*)",
    "insertText": "GetMaterial() const PURE_VIRTUAL(UMaterialInterface::GetMaterial,return NULL;)"
  },
  {
    "label": "GetMaterial_Concurrent()",
    "kind": "Method",
    "detail": "Function (const class UMaterial*)",
    "insertText": "GetMaterial_Concurrent(TMicRecursionGuard RecursionGuard = TMicRecursionGuard()) const PURE_VIRTUAL(UMaterialInterface::GetMaterial_Concurrent,return NULL;)"
  },
  {
    "label": "GetMaterialInheritanceChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialInheritanceChain(FMaterialInheritanceChain& OutChain) const PURE_VIRTUAL(UMaterialInterface::GetMaterialInheritanceChain, return;)"
  },
  {
    "label": "GetCachedExpressionData()",
    "kind": "Method",
    "detail": "Function (const FMaterialCachedExpressionData&)",
    "insertText": "GetCachedExpressionData(TMicRecursionGuard RecursionGuard = TMicRecursionGuard())"
  },
  {
    "label": "GetCachedHLSLTree()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FMaterialCachedHLSLTree&)",
    "insertText": "GetCachedHLSLTree(TMicRecursionGuard RecursionGuard = TMicRecursionGuard())"
  },
  {
    "label": "IsUsingNewHLSLGenerator()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsUsingNewHLSLGenerator()"
  },
  {
    "label": "IsUsingNewTranslatorPrototype()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingNewTranslatorPrototype()"
  },
  {
    "label": "IsUsingControlFlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingControlFlow()"
  },
  {
    "label": "GetSubstrateCompilationConfig()",
    "kind": "Method",
    "detail": "Function (const FSubstrateCompilationConfig&)",
    "insertText": "GetSubstrateCompilationConfig()"
  },
  {
    "label": "SetSubstrateCompilationConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubstrateCompilationConfig(FSubstrateCompilationConfig& SubstrateCompilationConfig)"
  },
  {
    "label": "IsDependent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDependent(UMaterialInterface* TestDependency)"
  },
  {
    "label": "GetRenderProxy()",
    "kind": "Method",
    "detail": "Function (class FMaterialRenderProxy*)",
    "insertText": "GetRenderProxy() const PURE_VIRTUAL(UMaterialInterface::GetRenderProxy,return NULL;)"
  },
  {
    "label": "GetQualityLevelUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetQualityLevelUsage(TArray<bool, TInlineAllocator<EMaterialQualityLevel::Num> >& QualityLevelsUsed, EShaderPlatform ShaderPlatform, bool bCooking = false)"
  },
  {
    "label": "GetQualityLevelUsageForCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetQualityLevelUsageForCooking(TArray<bool, TInlineAllocator<EMaterialQualityLevel::Num> >& QualityLevelsUsed, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetQualityLevelUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetQualityLevelUsage(QualityLevelsUsed, ShaderPlatform, true)"
  },
  {
    "label": "GetUsedTextures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetUsedTextures(TArray<UTexture*>& OutTextures, EMaterialQualityLevel::Type QualityLevel, bool bAllQualityLevels, ERHIFeatureLevel::Type FeatureLevel, bool bAllFeatureLevels) const PURE_VIRTUAL(UMaterialInterface::GetUsedTextures,)"
  },
  {
    "label": "GetUsedTexturesAndIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedTexturesAndIndices(TArray<UTexture*>& OutTextures, TArray< TArray<int32> >& OutIndices, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "OverrideTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideTexture(const UTexture* InTextureToOverride, UTexture* OverrideTexture, ERHIFeatureLevel::Type InFeatureLevel) PURE_VIRTUAL(UMaterialInterface::OverrideTexture, return;)"
  },
  {
    "label": "OverrideNumericParameterDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideNumericParameterDefault(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, const UE::Shader::FValue& Value, bool bOverride, ERHIFeatureLevel::Type FeatureLevel) PURE_VIRTUAL(UMaterialInterface::OverrideNumericParameterDefault, return;)"
  },
  {
    "label": "GetScalarParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (float Value ;)",
    "insertText": "GetScalarParameterDefaultValue(ParameterInfo, Value)"
  },
  {
    "label": "CheckMaterialUsage_Concurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckMaterialUsage_Concurrent(const EMaterialUsage Usage) const PURE_VIRTUAL(UMaterialInterface::CheckMaterialUsage,return false;)"
  },
  {
    "label": "GetMaterialResource()",
    "kind": "Method",
    "detail": "Function (FMaterialResource*)",
    "insertText": "GetMaterialResource(ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type QualityLevel = EMaterialQualityLevel::Num)"
  },
  {
    "label": "GetNaniteOverride()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetNaniteOverride(TMicRecursionGuard RecursionGuard = TMicRecursionGuard()) const PURE_VIRTUAL(UMaterialInterface::GetNaniteOverride, return nullptr;)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} FGraphEventArray)",
    "insertText": "PrecachePSOs(const FVertexFactoryType* VertexFactoryType, const struct FPSOPrecacheParams& PreCacheParams)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} FGraphEventArray)",
    "insertText": "PrecachePSOs(const TConstArrayView<const FVertexFactoryType*>& VertexFactoryTypes, const struct FPSOPrecacheParams& PreCacheParams)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (TArray<FMaterialPSOPrecacheRequestID> MaterialPSOPrecacheRequestIDs ; return)",
    "insertText": "PrecachePSOs(VertexFactoryTypes, PreCacheParams, MaterialPSOPrecacheRequestIDs)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} FGraphEventArray)",
    "insertText": "PrecachePSOs(const TConstArrayView<const FVertexFactoryType*>& VertexFactoryTypes, const struct FPSOPrecacheParams& PreCacheParams, TArray<FMaterialPSOPrecacheRequestID>& OutMaterialPSORequestIDs)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} FGraphEventArray)",
    "insertText": "PrecachePSOs(const TConstArrayView<const FVertexFactoryType*>& VertexFactoryTypes, const struct FPSOPrecacheParams& PreCacheParams, EPSOPrecachePriority PSOPrecachePriority, TArray<FMaterialPSOPrecacheRequestID>& OutMaterialPSORequestIDs)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheVertexFactoryDataList VertexFactoryDataList ; VertexFactoryDataList .)",
    "insertText": "SetNum(VertexFactoryTypes.Num())"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (VertexFactoryDataList [ i ] . VertexFactoryType = VertexFactoryTypes [ i ] ; } return)",
    "insertText": "PrecachePSOs(VertexFactoryDataList, PreCacheParams, PSOPrecachePriority, OutMaterialPSORequestIDs)"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (} FGraphEventArray)",
    "insertText": "PrecachePSOs(const FPSOPrecacheVertexFactoryDataList& VertexFactoryDataList, const struct FPSOPrecacheParams& PreCacheParams, EPSOPrecachePriority Priority, TArray<FMaterialPSOPrecacheRequestID>& OutMaterialPSORequestIDs)"
  },
  {
    "label": "GetStaticParameterValues()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA void)",
    "insertText": "GetStaticParameterValues(FStaticParameterSet& OutStaticParameters)"
  },
  {
    "label": "GetStaticSwitchParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticSwitchParameterValue(const FHashedMaterialParameterInfo& ParameterInfo,bool &OutValue,FGuid &OutExpressionGuid, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetStaticComponentMaskParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticComponentMaskParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, bool& R, bool& G, bool& B, bool& A, FGuid& OutExpressionGuid, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetParameterSortPriority()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "GetParameterSortPriority(const FHashedMaterialParameterInfo& ParameterInfo, int32& OutSortPriority)"
  },
  {
    "label": "GetGroupSortPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGroupSortPriority(const FString& InGroupName, int32& OutSortPriority) const PURE_VIRTUAL(UMaterialInterface::GetGroupSortPriority, return false;)"
  },
  {
    "label": "GetAllParameterInfoOfType()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetAllParameterInfoOfType(EMaterialParameterType Type, TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllParametersOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllParametersOfType(EMaterialParameterType Type, TMap<FMaterialParameterInfo, FMaterialParameterMetadata>& OutParameters)"
  },
  {
    "label": "GetAllScalarParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllScalarParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllVectorParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVectorParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllDoubleVectorParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDoubleVectorParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTextureParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllTextureCollectionParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTextureCollectionParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllRuntimeVirtualTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllRuntimeVirtualTextureParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllSparseVolumeTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllSparseVolumeTextureParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllFontParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllFontParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllStaticSwitchParameterInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "GetAllStaticSwitchParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "GetAllStaticComponentMaskParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllStaticComponentMaskParameterInfo(TArray<FMaterialParameterInfo>& OutParameterInfo, TArray<FGuid>& OutParameterIds)"
  },
  {
    "label": "IterateDependentFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDependentFunctions(TFunctionRef<bool(UMaterialFunctionInterface*)> Predicate) const PURE_VIRTUAL(UMaterialInterface::IterateDependentFunctions,return false;)"
  },
  {
    "label": "GetDependentFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentFunctions(TArray<class UMaterialFunctionInterface*>& DependentFunctions) const PURE_VIRTUAL(UMaterialInterface::GetDependentFunctions,return;)"
  },
  {
    "label": "GetParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetParameterDefaultValue(EMaterialParameterType Type, const FMemoryImageMaterialParameterInfo& ParameterInfo, FMaterialParameterMetadata& OutValue)"
  },
  {
    "label": "GetScalarParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScalarParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, float& OutValue)"
  },
  {
    "label": "GetVectorParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVectorParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, FLinearColor& OutValue)"
  },
  {
    "label": "GetDoubleVectorParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDoubleVectorParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, FVector4d& OutValue)"
  },
  {
    "label": "GetTextureParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, class UTexture*& OutValue)"
  },
  {
    "label": "GetTextureCollectionParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureCollectionParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, class UTextureCollection*& OutValue)"
  },
  {
    "label": "GetRuntimeVirtualTextureParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRuntimeVirtualTextureParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture*& OutValue)"
  },
  {
    "label": "GetSparseVolumeTextureParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSparseVolumeTextureParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, class USparseVolumeTexture*& OutValue)"
  },
  {
    "label": "GetFontParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFontParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, class UFont*& OutFontValue, int32& OutFontPage)"
  },
  {
    "label": "GetStaticSwitchParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetStaticSwitchParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutValue, FGuid& OutExpressionGuid)"
  },
  {
    "label": "GetStaticComponentMaskParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticComponentMaskParameterDefaultValue(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutR, bool& OutG, bool& OutB, bool& OutA, FGuid& OutExpressionGuid)"
  },
  {
    "label": "GetReferencedTexturesAndOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReferencedTexturesAndOverrides(TSet<const UTexture*>& InOutTextures)"
  },
  {
    "label": "GetReferencedTextures()",
    "kind": "Method",
    "detail": "Function (# endif TArrayView<const TObjectPtr<UObject>>)",
    "insertText": "GetReferencedTextures()"
  },
  {
    "label": "GetReferencedTextureCollections()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<TObjectPtr<UTextureCollection>>)",
    "insertText": "GetReferencedTextureCollections()"
  },
  {
    "label": "SaveShaderStableKeysInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderStableKeysInner(const class ITargetPlatform* TP, const struct FStableShaderKeyAndValue& SaveKeyVal) PURE_VIRTUAL(UMaterialInterface::SaveShaderStableKeysInner,)"
  },
  {
    "label": "GetRelevance()",
    "kind": "Method",
    "detail": "Function (FMaterialRelevance)",
    "insertText": "GetRelevance(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetRelevance_Concurrent()",
    "kind": "Method",
    "detail": "Function (FMaterialRelevance)",
    "insertText": "GetRelevance_Concurrent(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual void LogMaterialsAndTextures(FOutputDevice& Ar, int32 Indent)"
  },
  {
    "label": "DumpDebugInfo()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DumpDebugInfo(FOutputDevice& OutputDevice)"
  },
  {
    "label": "GetRelevance_Internal()",
    "kind": "Method",
    "detail": "Function (} private : FMaterialRelevance)",
    "insertText": "GetRelevance_Internal(const UMaterial* Material, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetLightingGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetLightingGuid()"
  },
  {
    "label": "NullGuid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return LightingGuid ; # else const FGuid)",
    "insertText": "NullGuid(0, 0, 0, 0)"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA LightingGuid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "GetLightingGuidChain()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "GetLightingGuidChain(bool bIncludeTextures, TArray<FGuid>& OutGuids)"
  },
  {
    "label": "ComputeAllStateCRC()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR uint32)",
    "insertText": "ComputeAllStateCRC()"
  },
  {
    "label": "UpdateLightmassTextureTracking()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "UpdateLightmassTextureTracking()"
  },
  {
    "label": "SetOverrideCastShadowAsMasked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOverrideCastShadowAsMasked(bool bInOverrideCastShadowAsMasked)"
  },
  {
    "label": "SetOverrideEmissiveBoost()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . bOverrideCastShadowAsMasked = bInOverrideCastShadowAsMasked ; } void)",
    "insertText": "SetOverrideEmissiveBoost(bool bInOverrideEmissiveBoost)"
  },
  {
    "label": "SetOverrideDiffuseBoost()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . bOverrideEmissiveBoost = bInOverrideEmissiveBoost ; } void)",
    "insertText": "SetOverrideDiffuseBoost(bool bInOverrideDiffuseBoost)"
  },
  {
    "label": "SetOverrideExportResolutionScale()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . bOverrideDiffuseBoost = bInOverrideDiffuseBoost ; } void)",
    "insertText": "SetOverrideExportResolutionScale(bool bInOverrideExportResolutionScale)"
  },
  {
    "label": "SetCastShadowAsMasked()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . bOverrideExportResolutionScale = bInOverrideExportResolutionScale ; } void)",
    "insertText": "SetCastShadowAsMasked(bool InCastShadowAsMasked)"
  },
  {
    "label": "SetEmissiveBoost()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . bCastShadowAsMasked = InCastShadowAsMasked ; } void)",
    "insertText": "SetEmissiveBoost(float InEmissiveBoost)"
  },
  {
    "label": "SetDiffuseBoost()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . EmissiveBoost = InEmissiveBoost ; } void)",
    "insertText": "SetDiffuseBoost(float InDiffuseBoost)"
  },
  {
    "label": "SetExportResolutionScale()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . DiffuseBoost = InDiffuseBoost ; } void)",
    "insertText": "SetExportResolutionScale(float InExportResolutionScale)"
  },
  {
    "label": "GetTexturesInPropertyChain()",
    "kind": "Method",
    "detail": "Function (LightmassSettings . ExportResolutionScale = InExportResolutionScale ; } # if WITH_EDITOR bool)",
    "insertText": "GetTexturesInPropertyChain(EMaterialProperty InProperty, TArray<UTexture*>& OutTextures, TArray<FName>* OutTextureParamNames, struct FStaticParameterSet* InStaticParameterSet, ERHIFeatureLevel::Type InFeatureLevel = ERHIFeatureLevel::Num, EMaterialQualityLevel::Type InQuality = EMaterialQualityLevel::Num) PURE_VIRTUAL(UMaterialInterface::GetTexturesInPropertyChain,return false;)"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGroupName(const FHashedMaterialParameterInfo& ParameterInfo, FName& GroupName)"
  },
  {
    "label": "GetParameterDesc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParameterDesc(const FHashedMaterialParameterInfo& ParameterInfo, FString& OutDesc)"
  },
  {
    "label": "GetScalarParameterSliderMinMax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScalarParameterSliderMinMax(const FHashedMaterialParameterInfo& ParameterInfo, float& OutSliderMin, float& OutSliderMax)"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetParameterValue(EMaterialParameterType Type, const FMemoryImageMaterialParameterInfo& ParameterInfo, FMaterialParameterMetadata& OutValue, EMaterialGetParameterValueFlags Flags = EMaterialGetParameterValueFlags::Default)"
  },
  {
    "label": "GetScalarParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScalarParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, float& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "IsScalarParameterUsedAsAtlasPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsScalarParameterUsedAsAtlasPosition(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutValue, TSoftObjectPtr<class UCurveLinearColor>& Curve, TSoftObjectPtr<class UCurveLinearColorAtlas>& Atlas)"
  },
  {
    "label": "GetVectorParameterValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetVectorParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, FLinearColor& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "IsVectorParameterUsedAsChannelMask()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsVectorParameterUsedAsChannelMask(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutValue)"
  },
  {
    "label": "GetVectorParameterChannelNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVectorParameterChannelNames(const FHashedMaterialParameterInfo& ParameterInfo, FParameterChannelNames& OutValue)"
  },
  {
    "label": "GetDoubleVectorParameterValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetDoubleVectorParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, FVector4d& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "IsDoubleVectorParameterUsedAsChannelMask()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsDoubleVectorParameterUsedAsChannelMask(const FHashedMaterialParameterInfo& ParameterInfo, bool& OutValue)"
  },
  {
    "label": "GetDoubleVectorParameterChannelNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDoubleVectorParameterChannelNames(const FHashedMaterialParameterInfo& ParameterInfo, FParameterChannelNames& OutValue)"
  },
  {
    "label": "GetTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, class UTexture*& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetTextureCollectionParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureCollectionParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, class UTextureCollection*& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetRuntimeVirtualTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRuntimeVirtualTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, class URuntimeVirtualTexture*& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetSparseVolumeTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSparseVolumeTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, class USparseVolumeTexture*& OutValue, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetTextureParameterChannelNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetTextureParameterChannelNames(const FHashedMaterialParameterInfo& ParameterInfo, FParameterChannelNames& OutValue)"
  },
  {
    "label": "GetFontParameterValue()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetFontParameterValue(const FHashedMaterialParameterInfo& ParameterInfo,class UFont*& OutFontValue, int32& OutFontPage, bool bOveriddenOnly = false)"
  },
  {
    "label": "GetRefractionSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRefractionSettings(float& OutBiasValue)"
  },
  {
    "label": "GetUserSceneTextureOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserSceneTextureOverride(FName& InOutValue)"
  },
  {
    "label": "GetUserSceneTextureOutput()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUserSceneTextureOutput(const UMaterial* Base)"
  },
  {
    "label": "GetBlendableLocation()",
    "kind": "Method",
    "detail": "Function (EBlendableLocation)",
    "insertText": "GetBlendableLocation(const UMaterial* Base)"
  },
  {
    "label": "GetBlendablePriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendablePriority(const UMaterial* Base)"
  },
  {
    "label": "GetOpacityMaskClipValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOpacityMaskClipValue()"
  },
  {
    "label": "GetCastDynamicShadowAsMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCastDynamicShadowAsMasked()"
  },
  {
    "label": "GetShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetShadingModels()"
  },
  {
    "label": "IsShadingModelFromMaterialExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShadingModelFromMaterialExpression()"
  },
  {
    "label": "IsTwoSided()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTwoSided()"
  },
  {
    "label": "IsThinSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThinSurface()"
  },
  {
    "label": "IsDitheredLODTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDitheredLODTransition()"
  },
  {
    "label": "IsTranslucencyWritingCustomDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingCustomDepth()"
  },
  {
    "label": "IsTranslucencyWritingVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingVelocity()"
  },
  {
    "label": "IsTranslucencyWritingFrontLayerTransparency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingFrontLayerTransparency()"
  },
  {
    "label": "IsMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMasked()"
  },
  {
    "label": "IsDeferredDecal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferredDecal()"
  },
  {
    "label": "IsUIMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUIMaterial()"
  },
  {
    "label": "IsPostProcessMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostProcessMaterial()"
  },
  {
    "label": "WritesToRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritesToRuntimeVirtualTexture()"
  },
  {
    "label": "HasMeshPaintTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMeshPaintTexture()"
  },
  {
    "label": "HasCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomPrimitiveData()"
  },
  {
    "label": "GetDisplacementScaling()",
    "kind": "Method",
    "detail": "Function (FDisplacementScaling)",
    "insertText": "GetDisplacementScaling()"
  },
  {
    "label": "IsDisplacementFadeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplacementFadeEnabled()"
  },
  {
    "label": "GetDisplacementFadeRange()",
    "kind": "Method",
    "detail": "Function (FDisplacementFadeRange)",
    "insertText": "GetDisplacementFadeRange()"
  },
  {
    "label": "GetMaxWorldPositionOffsetDisplacement()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxWorldPositionOffsetDisplacement()"
  },
  {
    "label": "ShouldAlwaysEvaluateWorldPositionOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAlwaysEvaluateWorldPositionOffset()"
  },
  {
    "label": "HasVertexInterpolator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexInterpolator()"
  },
  {
    "label": "HasCustomizedUVs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomizedUVs()"
  },
  {
    "label": "HasPixelAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPixelAnimation()"
  },
  {
    "label": "GetSubsurfaceProfile_Internal()",
    "kind": "Method",
    "detail": "Function (USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfile_Internal()"
  },
  {
    "label": "NumSubsurfaceProfileRoot_Internal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumSubsurfaceProfileRoot_Internal()"
  },
  {
    "label": "GetSubsurfaceProfileRoot_Internal()",
    "kind": "Method",
    "detail": "Function (USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfileRoot_Internal(uint32 Index)"
  },
  {
    "label": "GetSubsurfaceProfileOverride_Internal()",
    "kind": "Method",
    "detail": "Function (USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfileOverride_Internal()"
  },
  {
    "label": "NumSpecularProfile_Internal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumSpecularProfile_Internal()"
  },
  {
    "label": "GetSpecularProfile_Internal()",
    "kind": "Method",
    "detail": "Function (USpecularProfile*)",
    "insertText": "GetSpecularProfile_Internal(uint32 Index)"
  },
  {
    "label": "GetNeuralProfile_Internal()",
    "kind": "Method",
    "detail": "Function (UNeuralProfile*)",
    "insertText": "GetNeuralProfile_Internal()"
  },
  {
    "label": "CastsRayTracedShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CastsRayTracedShadows()"
  },
  {
    "label": "IsTessellationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTessellationEnabled()"
  },
  {
    "label": "RecacheAllMaterialUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecacheAllMaterialUniformExpressions(bool bRecreateUniformBuffer)"
  },
  {
    "label": "SubmitRemainingJobsForWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitRemainingJobsForWorld(UWorld* World, EMaterialShaderPrecompileMode CompileMode = EMaterialShaderPrecompileMode::Default)"
  },
  {
    "label": "RecacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecacheUniformExpressions(bool bRecreateUniformBuffer)"
  },
  {
    "label": "CacheShaders()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheShaders(EMaterialShaderPrecompileMode CompileMode = EMaterialShaderPrecompileMode::Default)"
  },
  {
    "label": "CacheGivenTypesForCooking()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "CacheGivenTypesForCooking(EShaderPlatform Platform, ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, const TArray<const FVertexFactoryType*>& VFTypes, const TArray<const FShaderPipelineType*> PipelineTypes, const TArray<const FShaderType*>& ShaderTypes)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "ForceRecompileForRendering()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ForceRecompileForRendering(EMaterialShaderPrecompileMode CompileMode = EMaterialShaderPrecompileMode::Default)"
  },
  {
    "label": "AssertDefaultMaterialsExist()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AssertDefaultMaterialsExist()"
  },
  {
    "label": "AssertDefaultMaterialsPostLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertDefaultMaterialsPostLoaded()"
  },
  {
    "label": "InitDefaultMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDefaultMaterials()"
  },
  {
    "label": "IsDefaultMaterialInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultMaterialInitialized()"
  },
  {
    "label": "PrecacheDefaultMaterialPSOs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheDefaultMaterialPSOs()"
  },
  {
    "label": "IsPropertyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyActive(EMaterialProperty InProperty)"
  },
  {
    "label": "CompileProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "CompileProperty(FMaterialCompiler* Compiler, EMaterialProperty Property, uint32 ForceCastFlags = 0)"
  },
  {
    "label": "CompilePropertyEx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompilePropertyEx(class FMaterialCompiler* Compiler, const FGuid& AttributeID)"
  },
  {
    "label": "ShouldForcePlanePreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForcePlanePreview()"
  },
  {
    "label": "GetFeatureLevelsToCompileForAllMaterials()",
    "kind": "Method",
    "detail": "Function (bShouldForcePlanePreview = bInShouldForcePlanePreview ; } ; # endif uint32)",
    "insertText": "GetFeatureLevelsToCompileForAllMaterials()"
  },
  {
    "label": "AnalyzeMaterialProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterialProperty(EMaterialProperty InProperty, int32& OutNumTextureCoordinates, bool& bOutRequiresVertexData)"
  },
  {
    "label": "AnalyzeMaterialPropertyEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterialPropertyEx(EMaterialProperty InProperty, FMaterialAnalysisResult& OutResult)"
  },
  {
    "label": "AnalyzeMaterialCustomOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterialCustomOutput(UMaterialExpressionCustomOutput* InCustomOutput, int32 InOutputIndex, FMaterialAnalysisResult& OutResult)"
  },
  {
    "label": "AnalyzeMaterialCompilationInCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterialCompilationInCallback(TFunctionRef<void (FMaterialCompiler*)> InCompilationCallback, FMaterialAnalysisResult& OutResult)"
  },
  {
    "label": "IsTextureReferencedByProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsTextureReferencedByProperty(EMaterialProperty InProperty, const UTexture* InTexture)"
  },
  {
    "label": "IterateOverActiveFeatureLevels()",
    "kind": "Method",
    "detail": "Function (# endif template<FunctionType> void)",
    "insertText": "IterateOverActiveFeatureLevels(FunctionType InHandler)"
  },
  {
    "label": "InHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InHandler((ERHIFeatureLevel::Type)FBitSet::GetAndClearNextBit(FeatureLevels))"
  },
  {
    "label": "GetSamplerTypeEnum()",
    "kind": "Method",
    "detail": "Function (} } UEnum*)",
    "insertText": "GetSamplerTypeEnum()"
  },
  {
    "label": "GetTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (} const TArray<FMaterialTextureInfo>&)",
    "insertText": "GetTextureStreamingData()"
  },
  {
    "label": "SetTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureStreamingData(const TArray<FMaterialTextureInfo>& InTextureStreamingData)"
  },
  {
    "label": "GetTextureDensity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTextureDensity(FName TextureName, const struct FMeshUVChannelInfo& UVChannelData)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "SortTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTextureStreamingData(bool bForceSort, bool bFinalSort)"
  },
  {
    "label": "GetShaderTypes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetShaderTypes(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, TArray<FDebugShaderTypeInfo>& OutShaderInfo)"
  },
  {
    "label": "FilterOutPlatformShadingModels()",
    "kind": "Method",
    "detail": "Function (} ; # endif void)",
    "insertText": "FilterOutPlatformShadingModels(EShaderPlatform Platform, FMaterialShadingModelField& ShadingModels)"
  },
  {
    "label": "GetFeatureLevelsToCompileForRendering()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TUniquePtr<FMaterialInsights> MaterialInsight ; # endif protected : uint32)",
    "insertText": "GetFeatureLevelsToCompileForRendering()"
  },
  {
    "label": "UpdateMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialRenderProxy(FMaterialRenderProxy& Proxy)"
  },
  {
    "label": "PostLoadDefaultMaterials()",
    "kind": "Method",
    "detail": "Function (bool bLoadedCachedExpressionData = false ; TUniquePtr<FMaterialCachedExpressionData> CachedExpressionData ; # if WITH_EDITOR TUniquePtr<FMaterialCachedHLSLTree> CachedHLSLTree ; # endif private : void)",
    "insertText": "PostLoadDefaultMaterials()"
  },
  {
    "label": "SerializeInlineShaderMaps()",
    "kind": "Method",
    "detail": "Function (UEnum* SamplerTypeEnum ; # if WITH_EDITOR protected : TOptional<FStaticParameterSet> CachedStaticParameterValues ; uint8 AllowCachingStaticParameterValuesCounter = 0 ; private : bool bShouldForcePlanePreview ; # endif } ; namespace UE::MaterialInterface::Private { void)",
    "insertText": "SerializeInlineShaderMaps(FArchive& Ar, TArray<FMaterialResource>& OutLoadedResources, const FName& SerializingAsset = NAME_None #if WITH_EDITOR , const TMap<const ITargetPlatform*, TArray<FMaterialResourceForCooking>>* PlatformMaterialResourcesToSave = nullptr #endif)"
  },
  {
    "label": "ProcessSerializedInlineShaderMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessSerializedInlineShaderMaps(UMaterialInterface* Owner, TArray<FMaterialResource>& LoadedResources, TArray<FMaterialResource*>& OutMaterialResourcesLoaded)"
  },
  {
    "label": "FindMaterialResource()",
    "kind": "Method",
    "detail": "Function (FMaterialResource*)",
    "insertText": "FindMaterialResource(const TArray<FMaterialResource*>& MaterialResources, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type QualityLevel, bool bAllowDefaultQuality)"
  },
  {
    "label": "FindMaterialResource()",
    "kind": "Method",
    "detail": "Function (FMaterialResource*)",
    "insertText": "FindMaterialResource(TArray<FMaterialResource*>& MaterialResources, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type QualityLevel, bool bAllowDefaultQuality)"
  },
  {
    "label": "FindOrCreateMaterialResource()",
    "kind": "Method",
    "detail": "Function (FMaterialResource*)",
    "insertText": "FindOrCreateMaterialResource(TArray<FMaterialResource*>& MaterialResources, UMaterial* OwnerMaterial, UMaterialInstance* OwnerMaterialInstance, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type QualityLevel)"
  }
]