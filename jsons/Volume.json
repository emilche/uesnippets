[
  {
    "label": "AVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVolume"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / Brush . h \" # include \" Volume . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVolume, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(showcategories=Collision, hidecategories=(Brush, Physics), abstract, ConversionRoot, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITOR DECLARE_MULTICAST_DELEGATE_OneParam(FOnVolumeShapeChanged, AVolume& ) static FOnVolumeShapeChanged& GetOnVolumeShapeChangedDelegate()"
  },
  {
    "label": "ShouldCheckCollisionComponentForErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckCollisionComponentForErrors()"
  },
  {
    "label": "IsStaticBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStaticBrush()"
  },
  {
    "label": "IsVolumeBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolumeBrush()"
  },
  {
    "label": "EncompassesPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncompassesPoint(FVector Point, float SphereRadius=0.f, float* OutDistanceToPoint = 0)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetBounds()"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  }
]