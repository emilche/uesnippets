[
  {
    "label": "RemoteBitrateEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteBitrateEstimator"
  },
  {
    "label": "ReceiveSideCongestionController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveSideCongestionController"
  },
  {
    "label": "ReceiveSideCongestionController()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_INCLUDE_RECEIVE_SIDE_CONGESTION_CONTROLLER_H_ # define MODULES_CONGESTION_CONTROLLER_INCLUDE_RECEIVE_SIDE_CONGESTION_CONTROLLER_H_ # include<memory> # include<vector> # include \" api / transport / field_trial_based_config . h \" # include \" api / transport / network_control . h \" # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" modules / congestion_controller / remb_throttler . h \" # include \" modules / pacing / packet_router . h \" # include \" modules / remote_bitrate_estimator / remote_estimator_proxy . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RemoteBitrateEstimator ; class ReceiveSideCongestionController : public CallStatsObserver { public :)",
    "insertText": "ReceiveSideCongestionController(Clock* clock, RemoteEstimatorProxy::TransportFeedbackSender feedback_sender, RembThrottler::RembSender remb_sender, NetworkStateEstimator* network_state_estimator)"
  },
  {
    "label": "ReceiveSideCongestionController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ReceiveSideCongestionController()"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceivedPacket(int64_t arrival_time_ms, size_t payload_size, const RTPHeader& header)"
  },
  {
    "label": "SetSendPeriodicFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendPeriodicFeedback(bool send_periodic_feedback)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t avg_rtt_ms, int64_t max_rtt_ms)"
  },
  {
    "label": "OnBitrateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBitrateChanged(int bitrate_bps)"
  },
  {
    "label": "SetMaxDesiredReceiveBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredReceiveBitrate(DataRate bitrate)"
  },
  {
    "label": "SetTransportOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransportOverhead(DataSize overhead_per_packet)"
  },
  {
    "label": "LatestReceiveSideEstimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "LatestReceiveSideEstimate()"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStream(uint32_t ssrc)"
  },
  {
    "label": "MaybeProcess()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "MaybeProcess()"
  },
  {
    "label": "PickEstimatorFromHeader()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PickEstimatorFromHeader(const RTPHeader& header) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "PickEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PickEstimator() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock& clock_ ; const FieldTrialBasedConfig field_trial_config_ ; RembThrottler remb_throttler_ ; RemoteEstimatorProxy remote_estimator_proxy_ ; Mutex mutex_ ; std::unique_ptr<RemoteBitrateEstimator> rbe_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]