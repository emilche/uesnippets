[
  {
    "label": "FPThreadsCriticalSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPThreadsCriticalSection"
  },
  {
    "label": "FPThreadsCriticalSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<pthread . h> # include<errno . h> class FPThreadsCriticalSection { pthread_mutex_t Mutex ; public :)",
    "insertText": "FPThreadsCriticalSection(void)"
  },
  {
    "label": "pthread_mutexattr_init()",
    "kind": "Method",
    "detail": "Function (pthread_mutexattr_t MutexAttributes ;)",
    "insertText": "pthread_mutexattr_init(&MutexAttributes)"
  },
  {
    "label": "pthread_mutexattr_settype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutexattr_settype(&MutexAttributes, PTHREAD_MUTEX_RECURSIVE)"
  },
  {
    "label": "pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_init(&Mutex, &MutexAttributes)"
  },
  {
    "label": "pthread_mutexattr_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutexattr_destroy(&MutexAttributes)"
  },
  {
    "label": "pthread_mutex_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_destroy(&Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Lock(void)"
  },
  {
    "label": "pthread_mutex_lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_lock(&Mutex)"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unlock(void)"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_unlock(&Mutex)"
  },
  {
    "label": "FPThreadsCriticalSection()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FPThreadsCriticalSection(const FPThreadsCriticalSection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPThreadsCriticalSection&)",
    "insertText": "operator(const FPThreadsCriticalSection&)"
  }
]