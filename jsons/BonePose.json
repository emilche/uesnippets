[
  {
    "label": "FBoneTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneTransform"
  },
  {
    "label": "FCompareBoneTransformIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareBoneTransformIndex"
  },
  {
    "label": "BoneIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoneIndexType"
  },
  {
    "label": "FBasePose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBasePose"
  },
  {
    "label": "FRangedForSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangedForSupport"
  },
  {
    "label": "FRangedForReverseSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRangedForReverseSupport"
  },
  {
    "label": "FBaseCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseCompactPose"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "FMeshPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPose"
  },
  {
    "label": "PoseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoseType"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "FTrackToSkeletonMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackToSkeletonMap"
  },
  {
    "label": "FTransformCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformCurve"
  },
  {
    "label": "FBoneTransform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" BoneIndices . h \" # include \" Animation / AnimTypes . h \" # include \" CustomBoneIndexArray . h \" # include \" Animation / AnimStats . h \" # include \" Misc / Base64 . h \" # include \" Animation / Skeleton . h \" # include \" BoneContainer . h \" struct FBoneTransform { FCompactPoseBoneIndex BoneIndex ; FTransform Transform ;)",
    "insertText": "FBoneTransform() : BoneIndex(INDEX_NONE)"
  },
  {
    "label": "FBoneTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneTransform(FCompactPoseBoneIndex InBoneIndex, const FTransform& InTransform) : BoneIndex(InBoneIndex) , Transform(InTransform)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompareBoneTransformIndex { bool)",
    "insertText": "operator()(const FBoneTransform& A, const FBoneTransform& B)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Bones .)",
    "insertText": "Reset(NumBones)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Bones .)",
    "insertText": "AddUninitialized(NumBones)"
  },
  {
    "label": "GetNumBones()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumBones()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(const BoneIndexType& BoneIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTransform&)",
    "insertText": "operator(const BoneIndexType& BoneIndex)"
  },
  {
    "label": "GetMutableBones()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FTransform>)",
    "insertText": "GetMutableBones()"
  },
  {
    "label": "FRangedForSupport()",
    "kind": "Method",
    "detail": "Function (} template<PoseType,IterType> struct FRangedForSupport { const PoseType& Pose ;)",
    "insertText": "FRangedForSupport(const PoseType& InPose) : Pose(InPose)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; IterType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} IterType)",
    "insertText": "end()"
  },
  {
    "label": "FRangedForReverseSupport()",
    "kind": "Method",
    "detail": "Function (} } ; template<PoseType,IterType> struct FRangedForReverseSupport { const PoseType& Pose ;)",
    "insertText": "FRangedForReverseSupport(const PoseType& InPose) : Pose(InPose)"
  },
  {
    "label": "GetBones()",
    "kind": "Method",
    "detail": "Function (} } ; const TArray<FTransform,InAllocator>&)",
    "insertText": "GetBones()"
  },
  {
    "label": "FBaseCompactPose()",
    "kind": "Method",
    "detail": "Function (} protected : TArray<FTransform,InAllocator> Bones ; } ; template<InAllocator> struct FBaseCompactPose : FBasePose<FCompactPoseBoneIndex,InAllocator> { public :)",
    "insertText": "FBaseCompactPose() : BoneContainer(nullptr)"
  },
  {
    "label": "ForEachBoneIndex()",
    "kind": "Method",
    "detail": "Function (} typedef FCompactPoseBoneIndex BoneIndexType ; typedef InAllocator Allocator ; typedef FBasePose<FCompactPoseBoneIndex,Allocator>::template FRangedForSupport<FBaseCompactPose,FCompactPoseBoneIndexIterator> RangedForBoneIndexFwd ; typedef FBasePose<FCompactPoseBoneIndex,Allocator>::template FRangedForReverseSupport<FBaseCompactPose,FCompactPoseBoneIndexReverseIterator> RangedForBoneIndexBwd ; RangedForBoneIndexFwd)",
    "insertText": "ForEachBoneIndex()"
  },
  {
    "label": "ForEachBoneIndexReverse()",
    "kind": "Method",
    "detail": "Function (} RangedForBoneIndexBwd)",
    "insertText": "ForEachBoneIndexReverse()"
  },
  {
    "label": "MakeBeginIter()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexIterator)",
    "insertText": "MakeBeginIter()"
  },
  {
    "label": "MakeEndIter()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexIterator)",
    "insertText": "MakeEndIter()"
  },
  {
    "label": "MakeBeginIterReverse()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexReverseIterator)",
    "insertText": "MakeBeginIterReverse()"
  },
  {
    "label": "MakeEndIterReverse()",
    "kind": "Method",
    "detail": "Function (} FCompactPoseBoneIndexReverseIterator)",
    "insertText": "MakeEndIterReverse()"
  },
  {
    "label": "GetBoneContainer()",
    "kind": "Method",
    "detail": "Function (} const FBoneContainer&)",
    "insertText": "GetBoneContainer()"
  },
  {
    "label": "SetBoneContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoneContainer(const FBoneContainer* InBoneContainer)"
  },
  {
    "label": "InitBones()",
    "kind": "Method",
    "detail": "Function (BoneContainer = InBoneContainer ; this ->)",
    "insertText": "InitBones(BoneContainer->GetBoneIndicesArray().Num())"
  },
  {
    "label": "CopyAndAssignBoneContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyAndAssignBoneContainer(FBoneContainer& NewBoneContainer)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (NewBoneContainer =* BoneContainer ; BoneContainer =& NewBoneContainer ; } void)",
    "insertText": "InitFrom(const FBaseCompactPose& SrcPose)"
  },
  {
    "label": "SetBoneContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneContainer(SrcPose.BoneContainer)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (this -> Bones = SrcPose . Bones ; } void)",
    "insertText": "InitFrom(FBaseCompactPose&& SrcPose)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> Bones =)",
    "insertText": "MoveTemp(SrcPose.Bones)"
  },
  {
    "label": "CopyBonesFrom()",
    "kind": "Method",
    "detail": "Function (SrcPose . BoneContainer = nullptr ; } template<OtherAllocator> void)",
    "insertText": "CopyBonesFrom(const FBaseCompactPose<OtherAllocator>& SrcPose)"
  },
  {
    "label": "CopyBonesFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyBonesFrom(const FBaseCompactPose<Allocator>& SrcPose)"
  },
  {
    "label": "MoveBonesFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveBonesFrom(FBaseCompactPose<Allocator>& SrcPose)"
  },
  {
    "label": "MoveBones()",
    "kind": "Method",
    "detail": "Function (this -> Bones = SrcPose .)",
    "insertText": "MoveBones()"
  },
  {
    "label": "CopyBonesFrom()",
    "kind": "Method",
    "detail": "Function (SrcPose . BoneContainer = nullptr ; } } template<OtherAllocator> void)",
    "insertText": "CopyBonesFrom(const TArray<FTransform, OtherAllocator>& SrcPoseBones)"
  },
  {
    "label": "CopyBonesTo()",
    "kind": "Method",
    "detail": "Function (this -> Bones = SrcPoseBones ; } } template<OtherAllocator> void)",
    "insertText": "CopyBonesTo(TArray<FTransform, OtherAllocator>& DestPoseBones)"
  },
  {
    "label": "MoveBonesFrom()",
    "kind": "Method",
    "detail": "Function (DestPoseBones = this -> Bones ; } void)",
    "insertText": "MoveBonesFrom(TArray<FTransform, Allocator>&& InTransforms)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> Bones =)",
    "insertText": "MoveTemp(InTransforms)"
  },
  {
    "label": "MoveBonesTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveBonesTo(TArray<FTransform, Allocator>& InTransforms)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (InTransforms =)",
    "insertText": "MoveTemp(this->Bones)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "ResetToRefPose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetToRefPose()"
  },
  {
    "label": "ResetToRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToRefPose(GetBoneContainer())"
  },
  {
    "label": "ResetToRefPose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetToRefPose(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "FillWithCompactRefPose()",
    "kind": "Method",
    "detail": "Function (RequiredBones .)",
    "insertText": "FillWithCompactRefPose(this->Bones)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> BoneContainer =& RequiredBones ;)",
    "insertText": "if(RequiredBones.GetDisableRetargeting())"
  },
  {
    "label": "GetSkeletonAsset()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform> const& SkeletonRefPose = RequiredBones .)",
    "insertText": "GetSkeletonAsset()->GetRefLocalPoses()"
  },
  {
    "label": "GetBoneContainer()",
    "kind": "Method",
    "detail": "Function (const int32 SkeletonBoneIndex =)",
    "insertText": "GetBoneContainer().GetSkeletonIndex(BoneIndex)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (this -> Bones [ BoneIndex .)",
    "insertText": "GetInt()"
  },
  {
    "label": "ResetToAdditiveIdentity()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ResetToAdditiveIdentity()"
  },
  {
    "label": "SetIdentityZeroScale()",
    "kind": "Method",
    "detail": "Function (Bone .)",
    "insertText": "SetIdentityZeroScale()"
  },
  {
    "label": "IsNormalized()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsNormalized()"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (Bone .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (} BoneIndexType)",
    "insertText": "GetParentBoneIndex(const BoneIndexType& BoneIndex)"
  },
  {
    "label": "GetRefPose()",
    "kind": "Method",
    "detail": "Function (} const FTransform&)",
    "insertText": "GetRefPose(const BoneIndexType& BoneIndex)"
  },
  {
    "label": "NormalizeRotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeRotations()"
  },
  {
    "label": "InitBones()",
    "kind": "Method",
    "detail": "Function (BoneContainer = InBoneContainer ;)",
    "insertText": "InitBones(BoneContainer->GetNumBones())"
  },
  {
    "label": "ResetToIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToIdentity()"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNaN()"
  },
  {
    "label": "InitPose()",
    "kind": "Method",
    "detail": "Function (} protected : const FBoneContainer* BoneContainer ; } ; template<class PoseType> struct FCSPose { typedef PoseType::BoneIndexType BoneIndexType ; typedef PoseType::Allocator AllocatorType ; void)",
    "insertText": "InitPose(const FBoneContainer* InBoneContainer)"
  },
  {
    "label": "SetBoneContainer()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "SetBoneContainer(InBoneContainer)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags .)",
    "insertText": "Empty(Pose.GetNumBones())"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags .)",
    "insertText": "AddZeroed(Pose.GetNumBones())"
  },
  {
    "label": "InitPose()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags [ 0 ] = 1 ; } void)",
    "insertText": "InitPose(const PoseType& SrcPose)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "InitFrom(SrcPose)"
  },
  {
    "label": "InitPose()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags [ 0 ] = 1 ; } void)",
    "insertText": "InitPose(PoseType&& SrcPose)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "InitFrom(MoveTemp(SrcPose))"
  },
  {
    "label": "CopyPose()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags [ 0 ] = 1 ; } template<OtherPoseType> void)",
    "insertText": "CopyPose(const OtherPoseType& SrcPose)"
  },
  {
    "label": "CopyBonesFrom()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "CopyBonesFrom(SrcPose.GetPose())"
  },
  {
    "label": "GetComponentSpaceFlags()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags = SrcPose .)",
    "insertText": "GetComponentSpaceFlags()"
  },
  {
    "label": "CopyAndAssignBoneContainer()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "CopyAndAssignBoneContainer(NewBoneContainer)"
  },
  {
    "label": "GetPose()",
    "kind": "Method",
    "detail": "Function (} const PoseType&)",
    "insertText": "GetPose()"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetComponentSpaceTransform(BoneIndexType BoneIndex)"
  },
  {
    "label": "SetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentSpaceTransform(BoneIndexType BoneIndex, const FTransform& NewTransform)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateComponentSpaceTransform(BoneIndexType BoneIndex)"
  },
  {
    "label": "ConvertBoneToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneToLocalSpace(BoneIndexType BoneIndex)"
  },
  {
    "label": "SafeSetCSBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeSetCSBoneTransforms(TConstArrayView<FBoneTransform> BoneTransforms)"
  },
  {
    "label": "LocalBlendCSBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalBlendCSBoneTransforms(TConstArrayView<FBoneTransform> BoneTransforms, float Alpha)"
  },
  {
    "label": "ConvertComponentPosesToLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertComponentPosesToLocalPoses(FCSPose<PoseType>&& InPose, PoseType& OutPose)"
  },
  {
    "label": "ConvertComponentPosesToLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertComponentPosesToLocalPoses(const FCSPose<PoseType>& InPose, PoseType& OutPose)"
  },
  {
    "label": "ConvertComponentPosesToLocalPosesSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertComponentPosesToLocalPosesSafe(FCSPose<PoseType>& InPose, PoseType& OutPose)"
  },
  {
    "label": "GetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (protected : PoseType Pose ; TCustomBoneIndexArray<uint8,BoneIndexType,AllocatorType> ComponentSpaceFlags ; TCustomBoneIndexArray<uint8,BoneIndexType,AllocatorType> BoneMask ; TArray<FCompactPoseBoneIndex,AllocatorType> BonesToConvert ; } ; template<class PoseType> FTransform FCSPose<PoseType)",
    "insertText": "GetLocalSpaceTransform(BoneIndexType BoneIndex)"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (const BoneIndexType ParentIndex = Pose .)",
    "insertText": "GetParentBoneIndex(BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform& ParentTransform =)",
    "insertText": "GetComponentSpaceTransform(ParentIndex)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform& BoneTransform = Pose [ BoneIndex ] ; return BoneTransform .)",
    "insertText": "GetRelativeTransform(ParentTransform)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateComponentSpaceTransform(BoneIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(!Pose[BoneIndex].ContainsNaN())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<BoneIndexType> BoneIndexStack ; BoneIndexStack .)",
    "insertText": "Reserve(ComponentSpaceFlags.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoneIndexStack .)",
    "insertText": "Add(BoneIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTransform ComponentTransform = Pose [ BoneIndex ]* Pose [ ParentIndex ] ;)",
    "insertText": "if(ComponentTransform.ContainsNaN())"
  },
  {
    "label": "BoolToStr()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "BoolToStr(const bool& bValue)"
  },
  {
    "label": "BoolToStr()",
    "kind": "Method",
    "detail": "Function (} ; const TCHAR* BoneHasNaN =)",
    "insertText": "BoolToStr(Pose[BoneIndex].ContainsNaN())"
  },
  {
    "label": "BoolToStr()",
    "kind": "Method",
    "detail": "Function (const TCHAR* ParentHasNaN =)",
    "insertText": "BoolToStr(Pose[ParentIndex].ContainsNaN())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString ErrorMsg =)",
    "insertText": "FString(TEXT(\"NaN created in during FTransform Multiplication\\n\"))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tBoneIndex {0} : ParentBoneIndex {1} BoneTransformNaN={2} : ParentTransformNaN={3}\\n\"), { BoneIndex.GetInt(), ParentIndex.GetInt(), BoneHasNaN, ParentHasNaN })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tBone {0}\\n\"), { Pose[BoneIndex].ToString() })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tParent {0}\\n\"), { Pose[ParentIndex].ToString() })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tResult {0}\\n\"), { ComponentTransform.ToString() })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tBone B64 {0}\\n\"), { FBase64::Encode((uint8*)&Pose[BoneIndex], sizeof(FTransform)) })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tParent B64 {0}\\n\"), { FBase64::Encode((uint8*)&Pose[ParentIndex], sizeof(FTransform)) })"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (ErrorMsg + =)",
    "insertText": "Format(TEXT(\"\\tResult B64 {0}\\n\"), { FBase64::Encode((uint8*)&ComponentTransform, sizeof(FTransform)) })"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceFlags [ BoneIndex ] = 1 ; BoneIndex = BoneIndexStack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(BoneIndexStack.Num())"
  },
  {
    "label": "SetToRelativeTransform()",
    "kind": "Method",
    "detail": "Function (Pose [ BoneIndex ] .)",
    "insertText": "SetToRelativeTransform(Pose[ParentIndex])"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BonesToConvert .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BonesToConvert .)",
    "insertText": "Add(Transform.BoneIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } const int32 FirstChildTransform = BonesToConvert .)",
    "insertText": "Num()"
  },
  {
    "label": "FCompactPoseBoneIndexIterator()",
    "kind": "Method",
    "detail": "Function (FCompactPoseBoneIndexIterator Iter =)",
    "insertText": "FCompactPoseBoneIndexIterator(MinIndex)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (BonesToConvert .)",
    "insertText": "AddUnique(BoneIndex)"
  },
  {
    "label": "ConvertBoneToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneToLocalSpace(BonesToConvert[Idx])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const FBoneTransform& BoneTransform : BoneTransforms)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateComponentSpaceTransform(ParentBoneIndex)"
  },
  {
    "label": "SetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetComponentSpaceTransform(BoneIndex, BoneTransform.Transform)"
  },
  {
    "label": "LastIndex()",
    "kind": "Method",
    "detail": "Function (FCompactPoseBoneIndex)",
    "insertText": "LastIndex(BoneTransforms[0].BoneIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LastIndex = BoneTransforms [ I ] . BoneIndex ; } } # endif)",
    "insertText": "if(Alpha >= 1.f - ZERO_ANIMWEIGHT_THRESH)"
  },
  {
    "label": "SafeSetCSBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeSetCSBoneTransforms(BoneTransforms)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<struct FBoneTransform> LocalBoneTransforms ; LocalBoneTransforms .)",
    "insertText": "SetNumUninitialized(BoneTransforms.Num())"
  },
  {
    "label": "GetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (const BoneIndexType BoneIndex = BoneTransforms [ Index ] . BoneIndex ; LocalBoneTransforms [ Index ] . Transform =)",
    "insertText": "GetLocalSpaceTransform(BoneIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BoneMask [ BoneIndex ] | = BoneMask [ ParentIndex ] ; } })",
    "insertText": "for(const BoneIndexType BoneIndex : Pose.ForEachBoneIndexReverse())"
  },
  {
    "label": "ConvertBoneToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneToLocalSpace(BoneIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int32 Index = 0; Index < LocalBoneTransforms.Num(); Index++)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const FCompactPoseBoneIndex BoneIndex = LocalBoneTransforms [ Index ] . BoneIndex ;)",
    "insertText": "check((ComponentSpaceFlags[BoneIndex] == 0) || (BoneIndex == 0))"
  },
  {
    "label": "BlendWith()",
    "kind": "Method",
    "detail": "Function (const float AlphaInv = 1 . 0 f - Alpha ; Pose [ BoneIndex ] .)",
    "insertText": "BlendWith(LocalBoneTransforms[Index].Transform, AlphaInv)"
  },
  {
    "label": "RootBoneIndex()",
    "kind": "Method",
    "detail": "Function (OutPose = InPose . Pose ; const BoneIndexType)",
    "insertText": "RootBoneIndex(0)"
  },
  {
    "label": "BoneIndex()",
    "kind": "Method",
    "detail": "Function (const BoneIndexType)",
    "insertText": "BoneIndex(Index)"
  },
  {
    "label": "SetToRelativeTransform()",
    "kind": "Method",
    "detail": "Function (OutPose [ BoneIndex ] .)",
    "insertText": "SetToRelativeTransform(OutPose[ParentIndex])"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutPose [ RootBoneIndex ] = InPose . Pose [ RootBoneIndex ] ; } OutPose =)",
    "insertText": "MoveTemp(InPose.Pose)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OutPose [ RootBoneIndex ] = InPose . Pose [ RootBoneIndex ] ; })",
    "insertText": "for(int32 Index = NumBones - 1; Index > 0; Index--)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (InPose .)",
    "insertText": "CalculateComponentSpaceTransform(ParentIndex)"
  },
  {
    "label": "SetToRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} OutPose [ BoneIndex ] = InPose . Pose [ BoneIndex ] ; OutPose [ BoneIndex ] .)",
    "insertText": "SetToRelativeTransform(InPose.Pose[ParentIndex])"
  }
]