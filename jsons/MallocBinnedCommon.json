[
  {
    "label": "FBitTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBitTree"
  },
  {
    "label": "FSizeTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSizeTableEntry"
  },
  {
    "label": "FMallocBinnedCommonBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocBinnedCommonBase"
  },
  {
    "label": "FBundleNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBundleNode"
  },
  {
    "label": "FPtrToPoolMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPtrToPoolMapping"
  },
  {
    "label": "FBundle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBundle"
  },
  {
    "label": "FFreeBlockList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeBlockList"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AllocType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocType"
  },
  {
    "label": "TMallocBinnedCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMallocBinnedCommon"
  },
  {
    "label": "FMallocBinnedCommonUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocBinnedCommonUtils"
  },
  {
    "label": "FPoolHashBucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolHashBucket"
  },
  {
    "label": "FPerThreadFreeBlockLists",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerThreadFreeBlockLists"
  },
  {
    "label": "Internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Internal"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" CoreGlobals . h \" # include<atomic> # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / CriticalSection . h \" # include \" Async / Mutex . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / AlignmentTemplates . h \" # include \" Logging / LogMacros . h \" # if !)",
    "insertText": "defined(UE_MBC_MAX_LISTED_SMALL_POOL_SIZE) # define UE_MBC_MAX_LISTED_SMALL_POOL_SIZE 28672 #endif #if !defined(UE_MBC_NUM_LISTED_SMALL_POOLS) # define UE_MBC_NUM_LISTED_SMALL_POOLS 51 #endif #if !defined(BINNEDCOMMON_USE_SEPARATE_VM_PER_POOL) # if PLATFORM_WINDOWS # define BINNEDCOMMON_USE_SEPARATE_VM_PER_POOL 1 # else # define BINNEDCOMMON_USE_SEPARATE_VM_PER_POOL 0 # endif #endif #define UE_MBC_MIN_SMALL_POOL_ALIGNMENT 16 #define UE_MBC_MIN_SMALL_POOL_ALIGNMENT_SHIFT 4 #define UE_MBC_MAX_SMALL_POOL_ALIGNMENT 128 #if !defined(AGGRESSIVE_MEMORY_SAVING) # error \"AGGRESSIVE_MEMORY_SAVING must be defined\" #endif #if AGGRESSIVE_MEMORY_SAVING # define UE_DEFAULT_GMallocBinnedBundleSize 8192 #else # define UE_DEFAULT_GMallocBinnedBundleSize 65536 #endif #if !defined(UE_DEFAULT_GMallocBinnedPerThreadCaches)"
  },
  {
    "label": "UE_MBC_ALLOCATOR_STATS()",
    "kind": "Method",
    "detail": "Function (int32 GMallocBinnedBundleSize ; int32 GMallocBinnedBundleCount ; int32 GMallocBinnedAllocExtra ; int32 GMallocBinnedMaxBundlesBeforeRecycle ; # else # define GMallocBinnedPerThreadCaches UE_DEFAULT_GMallocBinnedPerThreadCaches # define GMallocBinnedBundleSize UE_DEFAULT_GMallocBinnedBundleSize # define GMallocBinnedBundleCount UE_DEFAULT_GMallocBinnedBundleSize # define GMallocBinnedAllocExtra UE_DEFAULT_GMallocBinnedAllocExtra # define GMallocBinnedMaxBundlesBeforeRecycle UE_DEFAULT_GMallocBinnedMaxBundlesBeforeRecycle # endif # ifndef UE_MBC_ALLOCATOR_STATS # define)",
    "insertText": "UE_MBC_ALLOCATOR_STATS(!UE_BUILD_SHIPPING || WITH_EDITOR)"
  },
  {
    "label": "FBitTree()",
    "kind": "Method",
    "detail": "Function (int32 GMallocBinnedFlushRegisteredThreadCachesOnOneThread ; class FBitTree { uint64* Bits ; uint32 Capacity ; uint32 DesiredCapacity ; uint32 Rows ; uint32 OffsetOfLastRow ; uint32 AllocationSize ; public :)",
    "insertText": "FBitTree() : Bits(nullptr)"
  },
  {
    "label": "GetMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMemoryRequirements(uint32 NumPages)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 AllocationSize = 8 ; uint32 RowsUint64s = 1 ; uint32 Capacity = 6 4 ; uint32 OffsetOfLastRow = 0 ;)",
    "insertText": "while(Capacity < NumPages)"
  },
  {
    "label": "LastRowTotal()",
    "kind": "Method",
    "detail": "Function (Capacity* = 6 4 ; RowsUint64s* = 6 4 ; OffsetOfLastRow = AllocationSize / 8 ; AllocationSize + = 8* RowsUint64s ; } uint32)",
    "insertText": "LastRowTotal(AllocationSize - OffsetOfLastRow * 8)"
  },
  {
    "label": "AllocationSize()",
    "kind": "Method",
    "detail": "Function (uint32 ExtraBits = LastRowTotal - NumPages ;)",
    "insertText": "AllocationSize(ExtraBits / 64)"
  },
  {
    "label": "AllocBit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocBit()"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocated(uint32 Index)"
  },
  {
    "label": "AllocBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocBit(uint32 Index)"
  },
  {
    "label": "NextAllocBit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NextAllocBit()"
  },
  {
    "label": "NextAllocBit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NextAllocBit(uint32 StartIndex)"
  },
  {
    "label": "FreeBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBit(uint32 Index)"
  },
  {
    "label": "CountOnes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountOnes(uint32 UpTo)"
  },
  {
    "label": "Slow_NextAllocBits()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Slow_NextAllocBits(uint32 NumBits, uint64 StartIndex)"
  },
  {
    "label": "FSizeTableEntry()",
    "kind": "Method",
    "detail": "Function (} ; struct FSizeTableEntry { uint32 BinSize ; uint32 NumMemoryPagesPerBlock ;)",
    "insertText": "FSizeTableEntry()"
  },
  {
    "label": "FSizeTableEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSizeTableEntry(uint32 InBinSize, uint64 PlatformPageSize, uint8 Num4kbPages, uint32 BasePageSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSizeTableEntry& Other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; class FMallocBinnedCommonBase : public FMalloc { public : struct FBundleNode { FBundleNode* NextNodeInCurrentBundle ; union { FBundleNode* NextBundle ; int32 Count ; } ; } ;)",
    "insertText": "static_assert(sizeof(FBundleNode) <= UE_MBC_MIN_SMALL_POOL_ALIGNMENT, \"Bundle nodes must fit into the smallest block size\")"
  },
  {
    "label": "FPtrToPoolMapping()",
    "kind": "Method",
    "detail": "Function (protected : struct FPtrToPoolMapping {)",
    "insertText": "FPtrToPoolMapping() : PtrToPoolPageBitShift(0) , HashKeyShift(0) , PoolMask(0) , MaxHashBuckets(0) , AddressSpaceBase(0)"
  },
  {
    "label": "FPtrToPoolMapping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPtrToPoolMapping(uint32 InPageSize, uint64 InNumPoolsPerPage, uint64 AddressBase, uint64 AddressLimit)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InPageSize, InNumPoolsPerPage, AddressBase, AddressLimit)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(uint32 InPageSize, uint64 InNumPoolsPerPage, uint64 AddressBase, uint64 AddressLimit)"
  },
  {
    "label": "CeilLogTwo64()",
    "kind": "Method",
    "detail": "Function (const uint64 PoolPageToPoolBitShift =)",
    "insertText": "CeilLogTwo64(InNumPoolsPerPage)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (PtrToPoolPageBitShift =)",
    "insertText": "CeilLogTwo(InPageSize)"
  },
  {
    "label": "PoolMask()",
    "kind": "Method",
    "detail": "Function (HashKeyShift = PtrToPoolPageBitShift + PoolPageToPoolBitShift ;)",
    "insertText": "PoolMask(1ull << PoolPageToPoolBitShift)"
  },
  {
    "label": "RoundUpToPowerOfTwo64()",
    "kind": "Method",
    "detail": "Function (MaxHashBuckets =)",
    "insertText": "RoundUpToPowerOfTwo64(AddressLimit - AddressBase)"
  },
  {
    "label": "GetHashBucketAndPoolIndices()",
    "kind": "Method",
    "detail": "Function (AddressSpaceBase = AddressBase ; } void)",
    "insertText": "GetHashBucketAndPoolIndices(const void* InPtr, uint32& OutBucketIndex, UPTRINT& OutBucketCollision, uint32& OutPoolIndex)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (const UPTRINT)",
    "insertText": "Ptr(UPTRINT)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (OutBucketCollision = Ptr>> HashKeyShift ; OutBucketIndex =)",
    "insertText": "uint32(OutBucketCollision & (MaxHashBuckets - 1))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (OutPoolIndex =)",
    "insertText": "uint32((Ptr >> PtrToPoolPageBitShift) & PoolMask)"
  },
  {
    "label": "GetMaxHashBuckets()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetMaxHashBuckets()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PushHead()",
    "kind": "Method",
    "detail": "Function (Head = nullptr ; Count = 0 ; } void)",
    "insertText": "PushHead(FBundleNode* Node)"
  },
  {
    "label": "PopHead()",
    "kind": "Method",
    "detail": "Function (Node -> NextNodeInCurrentBundle = Head ; Node -> NextBundle = nullptr ; Head = Node ; Count + + ; } FBundleNode*)",
    "insertText": "PopHead()"
  },
  {
    "label": "PushToFront()",
    "kind": "Method",
    "detail": "Function (FBundleNode* Result = Head ; Count - - ; Head = Head -> NextNodeInCurrentBundle ; return Result ; } FBundleNode* Head ; uint32 Count ; } ; protected : struct FFreeBlockList { bool)",
    "insertText": "PushToFront(void* InPtr, uint32 InPoolIndex, uint32 InBinSize)"
  },
  {
    "label": "PushHead()",
    "kind": "Method",
    "detail": "Function (} PartialBundle .)",
    "insertText": "PushHead((FBundleNode*)InPtr)"
  },
  {
    "label": "PopFromFront()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "PopFromFront(uint32 InPoolIndex)"
  },
  {
    "label": "RecyleFull()",
    "kind": "Method",
    "detail": "Function (} template<class T> FBundleNode*)",
    "insertText": "RecyleFull(uint32 InPoolIndex, T& InGlobalRecycler)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBundleNode* Result = nullptr ;)",
    "insertText": "if(FullBundle.Head)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FullBundle . Head -> Count = FullBundle . Count ;)",
    "insertText": "if(!InGlobalRecycler.PushBundle(InPoolIndex, FullBundle.Head))"
  },
  {
    "label": "ObtainPartial()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<class T> bool)",
    "insertText": "ObtainPartial(uint32 InPoolIndex, T& InGlobalRecycler)"
  },
  {
    "label": "PopBundle()",
    "kind": "Method",
    "detail": "Function (PartialBundle . Count = 0 ; PartialBundle . Head = InGlobalRecycler .)",
    "insertText": "PopBundle(InPoolIndex)"
  },
  {
    "label": "PopBundles()",
    "kind": "Method",
    "detail": "Function (PartialBundle . Count = PartialBundle . Head -> Count ; PartialBundle . Head -> NextBundle = nullptr ; return true ; } return false ; } return true ; } FBundleNode*)",
    "insertText": "PopBundles(uint32 InPoolIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBundleNode* Partial = PartialBundle . Head ;)",
    "insertText": "if(Partial)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Partial -> NextBundle = nullptr ; } FBundleNode* Full = FullBundle . Head ;)",
    "insertText": "if(Full)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Full -> NextBundle = nullptr ; } FBundleNode* Result = Partial ;)",
    "insertText": "if(Result)"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (Result -> NextBundle = Full ; } else { Result = Full ; } return Result ; } private : FBundle PartialBundle ; FBundle FullBundle ; } ; FPtrToPoolMapping PtrToPoolMapping ; uint64 NumPoolsPerPage ; uint32 OsAllocationGranularity ; FCriticalSection ExternalAllocMutex ; uint32 BinnedTlsSlot ; # if UE_MBC_ALLOCATOR_STATS std::atomic<int64> TLSMemory ; std::atomic<int64> ConsolidatedMemory ; std::atomic<int64> AllocatedSmallPoolMemory ; int64 PoolInfoMemory ; int64 HashMemory ; # endif std::atomic<uint64> MemoryTrimEpoch { 0 } ; CA_NO_RETURN void)",
    "insertText": "OutOfMemory(uint64 Size, uint32 Alignment = 0)"
  },
  {
    "label": "OnOutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutOfMemory(Size, Alignment)"
  },
  {
    "label": "FPoolHashBucket()",
    "kind": "Method",
    "detail": "Function (} } ; template<class AllocType,int NumSmallPools,int MaxSmallPoolSize> class TMallocBinnedCommon : public FMallocBinnedCommonBase { class FMallocBinnedCommonUtils ; int NUM_SMALL_POOLS = NumSmallPools ; int MAX_SMALL_POOL_SIZE = MaxSmallPoolSize ; struct FPoolHashBucket { UPTRINT BucketIndex ; AllocType::FPoolInfo* FirstPool ; FPoolHashBucket* Prev ; FPoolHashBucket* Next ;)",
    "insertText": "FPoolHashBucket()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (BucketIndex = 0 ; FirstPool = nullptr ; Prev = this ; Next = this ; } void)",
    "insertText": "Link(FPoolHashBucket* After)"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (After -> Prev = Prev ; After -> Next = this ; Prev -> Next = After ; this -> Prev = After ; } void)",
    "insertText": "Unlink()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Next -> Prev = Prev ; Prev -> Next = Next ; Prev = this ; Next = this ; } } ; protected : struct FPerThreadFreeBlockLists { FPerThreadFreeBlockLists*)",
    "insertText": "Get()"
  },
  {
    "label": "IsValidTlsSlot()",
    "kind": "Method",
    "detail": "Function (FPerThreadFreeBlockLists* ThreadSingleton =)",
    "insertText": "IsValidTlsSlot(BinnedTlsSlot) ? (FPerThreadFreeBlockLists*)FPlatformTLS::GetTlsValue(BinnedTlsSlot)"
  },
  {
    "label": "ThreadSingleton()",
    "kind": "Method",
    "detail": "Function (FPerThreadFreeBlockLists*)",
    "insertText": "ThreadSingleton(FPerThreadFreeBlockLists*)FPlatformTLS::GetTlsValue(BinnedTlsSlot)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const int64 TLSSize =)",
    "insertText": "Align(sizeof(FPerThreadFreeBlockLists), AllocType::OsAllocationGranularity)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ThreadSingleton =)",
    "insertText": "new(AllocType::AllocateMetaDataMemory(TLSSize)) FPerThreadFreeBlockLists()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS TLSMemory .)",
    "insertText": "fetch_add(TLSSize, std::memory_order_relaxed)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "verify(ThreadSingleton)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (ThreadSingleton -> bLockedByOwnerThread = true ; ThreadSingleton ->)",
    "insertText": "Lock()"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsValue(BinnedTlsSlot, ThreadSingleton)"
  },
  {
    "label": "RegisterThreadFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterThreadFreeBlockLists(ThreadSingleton)"
  },
  {
    "label": "UnlockTLS()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnlockTLS()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (ThreadSingleton -> bLockedByOwnerThread = false ; ThreadSingleton ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "LockTLS()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "LockTLS()"
  },
  {
    "label": "ClearTLS()",
    "kind": "Method",
    "detail": "Function (ThreadSingleton -> bLockedByOwnerThread = true ; } } void)",
    "insertText": "ClearTLS()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS TLSMemory .)",
    "insertText": "fetch_sub(TLSSize, std::memory_order_relaxed)"
  },
  {
    "label": "UnregisterThreadFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UnregisterThreadFreeBlockLists(ThreadSingleton)"
  },
  {
    "label": "FPerThreadFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (ThreadSingleton -> ~)",
    "insertText": "FPerThreadFreeBlockLists()"
  },
  {
    "label": "FreeMetaDataMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMetaDataMemory(ThreadSingleton, TLSSize)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetTlsValue(BinnedTlsSlot, nullptr)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Malloc(uint32 InPoolIndex)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Free(void* InPtr, uint32 InPoolIndex, uint32 InBinSize)"
  },
  {
    "label": "CanFree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanFree(uint32 InPoolIndex, uint32 InBinSize)"
  },
  {
    "label": "RecycleFullBundle()",
    "kind": "Method",
    "detail": "Function (} template<class T> FBundleNode*)",
    "insertText": "RecycleFullBundle(uint32 InPoolIndex, T& InGlobalRecycler)"
  },
  {
    "label": "ObtainRecycledPartial()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "ObtainRecycledPartial(uint32 InPoolIndex, T& InGlobalRecycler)"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryLock()"
  },
  {
    "label": "UpdateEpoch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateEpoch(uint64 NewEpoch)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (auto CreatePoolArray = [&)",
    "insertText": "Allocator(uint64 NumPools)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint64 PoolArraySize = NumPools*)",
    "insertText": "sizeof(PoolInfo)"
  },
  {
    "label": "AllocateMetaDataMemory()",
    "kind": "Method",
    "detail": "Function (void* Result = Allocator .)",
    "insertText": "AllocateMetaDataMemory(PoolArraySize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS PoolInfoMemory + = PoolArraySize ; # endif)",
    "insertText": "if(!Result)"
  },
  {
    "label": "TempUnlock()",
    "kind": "Method",
    "detail": "Function (FScopeUnlock)",
    "insertText": "TempUnlock(&Allocator.ExternalAllocMutex)"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutOfMemory(PoolArraySize)"
  },
  {
    "label": "PoolInfo()",
    "kind": "Method",
    "detail": "Function (} DefaultConstructItems<)",
    "insertText": "PoolInfo(Result, NumPools)"
  },
  {
    "label": "GetHashBucketAndPoolIndices()",
    "kind": "Method",
    "detail": "Function (} ; uint32 BucketIndex ; UPTRINT BucketIndexCollision ; uint32 PoolIndex ; Allocator . PtrToPoolMapping .)",
    "insertText": "GetHashBucketAndPoolIndices(InPtr, BucketIndex, BucketIndexCollision, PoolIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPoolHashBucket* FirstBucket =& Allocator . HashBuckets [ BucketIndex ] ; FPoolHashBucket* Collision = FirstBucket ; do {)",
    "insertText": "if(!Collision->FirstPool)"
  },
  {
    "label": "CreatePoolArray()",
    "kind": "Method",
    "detail": "Function (Collision -> BucketIndex = BucketIndexCollision ; Collision -> FirstPool =)",
    "insertText": "CreatePoolArray(Allocator.NumPoolsPerPage)"
  },
  {
    "label": "SetCanary()",
    "kind": "Method",
    "detail": "Function (Collision -> FirstPool [ PoolIndex ] .)",
    "insertText": "SetCanary(Kind, bPreexisting, true)"
  },
  {
    "label": "SetCanary()",
    "kind": "Method",
    "detail": "Function (Collision -> FirstPool [ PoolIndex ] .)",
    "insertText": "SetCanary(Kind, bPreexisting, false)"
  },
  {
    "label": "HashBucketFreeList()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "HashBucketFreeList(FPoolHashBucket*)Allocator.AllocateMetaDataMemory(AllocType::OsAllocationGranularity)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS HashMemory + = AllocType::OsAllocationGranularity ; # endif)",
    "insertText": "for(UPTRINT i = 0, n = AllocType::OsAllocationGranularity / sizeof(FPoolHashBucket); i < n; ++i)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (Allocator . HashBucketFreeList ->)",
    "insertText": "Link(new (Allocator.HashBucketFreeList + i) FPoolHashBucket())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextFree = nullptr ; } Allocator . HashBucketFreeList = NextFree ;)",
    "insertText": "if(!NewBucket->FirstPool)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} NewBucket -> BucketIndex = BucketIndexCollision ; FirstBucket ->)",
    "insertText": "Link(NewBucket)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPoolHashBucket* FirstBucket =& Allocator . HashBuckets [ BucketIndex ] ; FPoolHashBucket* Collision = FirstBucket ; do {)",
    "insertText": "if(Collision->BucketIndex == BucketIndexCollision)"
  },
  {
    "label": "GetRegisteredFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (FCriticalSection FreeBlockListsRegistrationMutex ; return FreeBlockListsRegistrationMutex ; } TArray<FPerThreadFreeBlockLists*>&)",
    "insertText": "GetRegisteredFreeBlockLists()"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (TArray<FPerThreadFreeBlockLists*> RegisteredFreeBlockLists ; return RegisteredFreeBlockLists ; } void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "AllocTlsSlot()",
    "kind": "Method",
    "detail": "Function (BinnedTlsSlot =)",
    "insertText": "AllocTlsSlot()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(FPlatformTLS::IsValidTlsSlot(BinnedTlsSlot))"
  },
  {
    "label": "SetTLS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTLS()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "QuantizeSizeCommon()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "QuantizeSizeCommon(SIZE_T Count, uint32 Alignment, const AllocType& Alloc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SIZE_T SizeOut ;)",
    "insertText": "if((Count <= MAX_SMALL_POOL_SIZE) & (Alignment <= UE_MBC_MIN_SMALL_POOL_ALIGNMENT))"
  },
  {
    "label": "PoolIndexToBinSize()",
    "kind": "Method",
    "detail": "Function (SizeOut = Alloc .)",
    "insertText": "PoolIndexToBinSize(BoundSizeToPoolIndex(Count, Alloc.MemSizeToPoolIndex))"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (Count =)",
    "insertText": "Align(Count, Alignment)"
  },
  {
    "label": "BoundSizeToPoolIndex()",
    "kind": "Method",
    "detail": "Function (uint32 PoolIndex =)",
    "insertText": "BoundSizeToPoolIndex(Count, Alloc.MemSizeToPoolIndex)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (SizeOut =)",
    "insertText": "SIZE_T(BinSize)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} Alignment = FPlatformMath::Max<)",
    "insertText": "uint32(Alignment, Alloc.OsAllocationGranularity)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const auto)",
    "insertText": "Index((Size + UE_MBC_MIN_SMALL_POOL_ALIGNMENT - 1) >> UE_MBC_MIN_SMALL_POOL_ALIGNMENT_SHIFT)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 PoolIndex =)",
    "insertText": "uint32(MemSizeToPoolIndex[Index])"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Alignment = FMath::Max<)",
    "insertText": "uint32(Alignment, UE_MBC_MIN_SMALL_POOL_ALIGNMENT)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const SIZE_T AlignedSize =)",
    "insertText": "Align(Size, Alignment)"
  },
  {
    "label": "BoundSizeToPoolIndex()",
    "kind": "Method",
    "detail": "Function (uint32 PoolIndex =)",
    "insertText": "BoundSizeToPoolIndex(AlignedSize, Alloc.MemSizeToPoolIndex)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "SIZE_T(BlockSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Alignment = UE_MBC_MIN_SMALL_POOL_ALIGNMENT ; return true ; } PoolIndex + + ; })",
    "insertText": "while(PoolIndex < NUM_SMALL_POOLS)"
  },
  {
    "label": "GetAllocationSizeExternal()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "GetAllocationSizeExternal(void* Ptr, SIZE_T& SizeOut)"
  },
  {
    "label": "FindPoolInfo()",
    "kind": "Method",
    "detail": "Function (Pool =)",
    "insertText": "FindPoolInfo(*(AllocType*)this, Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Pool)"
  },
  {
    "label": "GetOsAllocatedBytes()",
    "kind": "Method",
    "detail": "Function (} const SIZE_T PoolOsBytes = Pool ->)",
    "insertText": "GetOsAllocatedBytes()"
  },
  {
    "label": "GetOSRequestedBytes()",
    "kind": "Method",
    "detail": "Function (const SIZE_T PoolOSRequestedBytes = Pool ->)",
    "insertText": "GetOSRequestedBytes()"
  },
  {
    "label": "GetTotalAllocatedSmallPoolMemory()",
    "kind": "Method",
    "detail": "Function (SizeOut = PoolOsBytes ; return true ; } # if UE_MBC_ALLOCATOR_STATS int64)",
    "insertText": "GetTotalAllocatedSmallPoolMemory()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (int64 FreeBlockAllocatedMemory = 0 ; { FScopeLock)",
    "insertText": "Lock(&GetFreeBlockListsRegistrationMutex())"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FreeBlockAllocatedMemory + = FreeBlockLists -> AllocatedMemory ; } FreeBlockAllocatedMemory + = ConsolidatedMemory .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "AllocateHashBuckets()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AllocateHashBuckets()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const uint64 HashAllocSize =)",
    "insertText": "Align(MaxHashBuckets * sizeof(FPoolHashBucket), OsAllocationGranularity)"
  },
  {
    "label": "HashBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashBuckets(FPoolHashBucket*)AllocType::AllocateMetaDataMemory(HashAllocSize)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS HashMemory + = HashAllocSize ; # endif)",
    "insertText": "verify(HashBuckets)"
  },
  {
    "label": "FPoolHashBucket()",
    "kind": "Method",
    "detail": "Function (DefaultConstructItems<)",
    "insertText": "FPoolHashBucket(HashBuckets, MaxHashBuckets)"
  },
  {
    "label": "RegisterThreadFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (} private : FPoolHashBucket* HashBuckets = nullptr ; FPoolHashBucket* HashBucketFreeList = nullptr ; void)",
    "insertText": "RegisterThreadFreeBlockLists(FPerThreadFreeBlockLists* FreeBlockLists)"
  },
  {
    "label": "GetRegisteredFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRegisteredFreeBlockLists().Add(FreeBlockLists)"
  },
  {
    "label": "UnregisterThreadFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterThreadFreeBlockLists(FPerThreadFreeBlockLists* FreeBlockLists)"
  },
  {
    "label": "GetRegisteredFreeBlockLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRegisteredFreeBlockLists().Remove(FreeBlockLists)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (# if UE_MBC_ALLOCATOR_STATS ConsolidatedMemory .)",
    "insertText": "fetch_add(FreeBlockLists->AllocatedMemory, std::memory_order_relaxed)"
  }
]