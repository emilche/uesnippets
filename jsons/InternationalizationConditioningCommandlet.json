[
  {
    "label": "UInternationalizationConditioningCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInternationalizationConditioningCommandlet"
  },
  {
    "label": "FLocalizationFileEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalizationFileEntry"
  },
  {
    "label": "FLocalizationFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalizationFile"
  },
  {
    "label": "FConfigFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigFile"
  },
  {
    "label": "FLocalizationFilePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalizationFilePair"
  },
  {
    "label": "CompareToCounterpart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareToCounterpart( TSharedPtr<FLocalizationFile> Other )"
  },
  {
    "label": "CompareFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareFiles()"
  },
  {
    "label": "GetIdenticalProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIdenticalProperties( TArray<FLocalizationFileEntry>& Properties )"
  },
  {
    "label": "GetTranslatedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTranslatedProperties( TArray<FLocalizationFileEntry>& Properties )"
  },
  {
    "label": "SetNativeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNativeFile( const FString& NativeFilename, FConfigFile* const NativeConfigFile )"
  },
  {
    "label": "SetForeignFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetForeignFile( const FString& ForeignFilename, FConfigFile* const ForeignConfigFile )"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilename()"
  },
  {
    "label": "HasNativeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeFile()"
  },
  {
    "label": "HasForeignFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasForeignFile()"
  },
  {
    "label": "HasNativeFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeFile( const FString& Filename )"
  },
  {
    "label": "HasForeignFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasForeignFile( const FString& Filename )"
  },
  {
    "label": "FindNativeIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNativeIndex( const FString& Filename )"
  },
  {
    "label": "FindForeignIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindForeignIndex( const FString& Filename )"
  },
  {
    "label": "AddNativeFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeFile( const FString& Filename )"
  },
  {
    "label": "AddForeignFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForeignFile( const FString& Filename )"
  },
  {
    "label": "ReadLocFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadLocFiles( const TArray<FString>& NativeFilenames, const TArray<FString>& ForeignFilenames )"
  },
  {
    "label": "ProcessManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessManifest( const FString& PrimaryLangExt, const FString& SourcePath, const FString& DestinationPath )"
  },
  {
    "label": "ProcessArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessArchive( const FString& PrimaryLangExt, const FString& SourcePath, const FString& DestinationPath )"
  },
  {
    "label": "LoadLegacyLocalizationFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLegacyLocalizationFiles( const FString& SourcePath, const FString& NativeLanguage, const TArray<FString>& LanguagesToProcess )"
  }
]