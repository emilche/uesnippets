[
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "FKismetCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetCompilerContext"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UEdGraphSchema_K2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema_K2"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "UK2Node_CallFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CallFunction"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FBPTerminal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBPTerminal"
  },
  {
    "label": "FEdGraphPinType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphPinType"
  },
  {
    "label": "FKismetFunctionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKismetFunctionContext"
  },
  {
    "label": "FMemberReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemberReference"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "KISMETCOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMETCOMPILER_API"
  },
  {
    "label": "FKCHandler_Passthru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKCHandler_Passthru"
  },
  {
    "label": "FNetNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetNameMapping"
  },
  {
    "label": "ConsignToOblivion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BPTerminal . h \" # include \" BlueprintCompiledStatement . h \" # include \" Containers / Array . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Field . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" class FCompilerResultsLog ; class FKismetCompilerContext ; class FProperty ; class UBlueprint ; class UClass ; class UEdGraph ; class UEdGraphNode ; class UEdGraphPin ; class UEdGraphSchema_K2 ; class UFunction ; class UK2Node ; class UK2Node_CallFunction ; class UObject ; class UStruct ; struct FBPTerminal ; struct FEdGraphPinType ; struct FKismetFunctionContext ; struct FMemberReference ; enum class ConvertibleSignatureMatchResult { ExactMatch,HasConvertibleFloatParams,Different } ; class FKismetCompilerUtilities { public : void)",
    "insertText": "ConsignToOblivion(UClass* OldClass, bool bForceNoResetLoaders)"
  },
  {
    "label": "UpdateBlueprintSkeletonStubClassAfterFailedCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlueprintSkeletonStubClassAfterFailedCompile(UBlueprint* Blueprint, UClass* StubClass)"
  },
  {
    "label": "IsTypeCompatibleWithProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTypeCompatibleWithProperty(UEdGraphPin* SourcePin, FProperty* Property, FCompilerResultsLog& MessageLog, const UEdGraphSchema_K2* Schema, UClass* SelfClass)"
  },
  {
    "label": "FindPropertyInScope()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "FindPropertyInScope(UStruct* Scope, UEdGraphPin* Pin, FCompilerResultsLog& MessageLog, const UEdGraphSchema_K2* Schema, UClass* SelfClass, bool& bIsSparseProperty)"
  },
  {
    "label": "FindNamedPropertyInScope()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "FindNamedPropertyInScope(UStruct* Scope, FName PropertyName, bool& bIsSparseProperty, const bool bAllowDeprecated = false)"
  },
  {
    "label": "FindOverriddenImplementableEvent()",
    "kind": "Method",
    "detail": "Function (const UFunction*)",
    "insertText": "FindOverriddenImplementableEvent(const FName& EventName, const UClass* Class)"
  },
  {
    "label": "CreatePrimitiveProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "CreatePrimitiveProperty(FFieldVariant PropertyScope, const FName& ValidatedPropertyName, const FName& PinCategory, const FName& PinSubCategory, UObject* PinSubCategoryObject, UClass* SelfClass, bool bIsWeakPointer, const class UEdGraphSchema_K2* Schema, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "CreatePropertyOnScope()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "CreatePropertyOnScope(UStruct* Scope, const FName& PropertyName, const FEdGraphPinType& Type, UClass* SelfClass, EPropertyFlags PropertyFlags, const class UEdGraphSchema_K2* Schema, FCompilerResultsLog& MessageLog, UEdGraphPin* SourcePin = nullptr)"
  },
  {
    "label": "CheckPropertyNameOnScope()",
    "kind": "Method",
    "detail": "Function (FFieldVariant)",
    "insertText": "CheckPropertyNameOnScope(UStruct* Scope, const FName& PropertyName)"
  },
  {
    "label": "FindUnsortedSeparateExecutionGroups()",
    "kind": "Method",
    "detail": "Function (TArray<TSet<UEdGraphNode*>>)",
    "insertText": "FindUnsortedSeparateExecutionGroups(const TArray<UEdGraphNode*>& Nodes)"
  },
  {
    "label": "CompileDefaultProperties()",
    "kind": "Method",
    "detail": "Function (private : uint32 ConsignToOblivionCounter ; public : void)",
    "insertText": "CompileDefaultProperties(UClass* Class)"
  },
  {
    "label": "LinkAddedProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAddedProperty(UStruct* Structure, FProperty* NewProperty)"
  },
  {
    "label": "RemoveObjectRedirectorIfPresent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObjectRedirectorIfPresent(UObject* Package, const FString& ClassName, UObject* ObjectBeingMovedIn)"
  },
  {
    "label": "ValidateEnumProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateEnumProperties(const UObject* DefaultObject, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "ValidateSelfCompatibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateSelfCompatibility(const UEdGraphPin* Pin, FKismetFunctionContext& Context)"
  },
  {
    "label": "GenerateAssignmentNodes()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GenerateAssignmentNodes(class FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph, UK2Node* CallBeginSpawnNode, UEdGraphNode* SpawnNode, UEdGraphPin* CallBeginResult, const UClass* ForClass, const UEdGraphPin* CallBeginClassInput = nullptr)"
  },
  {
    "label": "GenerateFieldNotificationSetNode()",
    "kind": "Method",
    "detail": "Function (TTuple<UEdGraphPin*,UEdGraphPin*>)",
    "insertText": "GenerateFieldNotificationSetNode(FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph, UEdGraphNode* SourceNode, UEdGraphPin* SelfPin, FProperty* VariableProperty, const FMemberReference& VariableReference, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty)"
  },
  {
    "label": "GenerateBroadcastFieldNotificationNode()",
    "kind": "Method",
    "detail": "Function (TTuple<UEdGraphPin*,UEdGraphPin*>)",
    "insertText": "GenerateBroadcastFieldNotificationNode(FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph, UEdGraphNode* SourceNode, FProperty* Property)"
  },
  {
    "label": "CreateObjectAssignmentStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateObjectAssignmentStatement(FKismetFunctionContext& Context, UEdGraphNode* Node, FBPTerminal* SrcTerm, FBPTerminal* DstTerm, UEdGraphPin* DstPin = nullptr)"
  },
  {
    "label": "DetectValuesReturnedByRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectValuesReturnedByRef(const UFunction* Func, const UK2Node * Node, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "IsPropertyUsesFieldNotificationSetValueAndBroadcast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyUsesFieldNotificationSetValueAndBroadcast(const FProperty* Property)"
  },
  {
    "label": "IsStatementReducible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatementReducible(EKismetCompiledStatementType StatementType)"
  },
  {
    "label": "IsMissingMemberPotentiallyLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMissingMemberPotentiallyLoading(const UBlueprint* SelfBlueprint, const UStruct* MemberOwner)"
  },
  {
    "label": "IsIntermediateFunctionGraphTrivial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntermediateFunctionGraphTrivial(FName FunctionName, const UEdGraph* FunctionGraph)"
  },
  {
    "label": "UpdateDependentBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDependentBlueprints(UBlueprint* BP)"
  },
  {
    "label": "CheckFunctionThreadSafety()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFunctionThreadSafety(const FKismetFunctionContext& InContext, FCompilerResultsLog& InMessageLog, bool InbEmitErrors = true)"
  },
  {
    "label": "CheckFunctionCompiledStatementsThreadSafety()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFunctionCompiledStatementsThreadSafety(const UEdGraphNode* InNode, const UEdGraph* InSourceGraph, const TArray<FBlueprintCompiledStatement*>& InStatements, FCompilerResultsLog& InMessageLog, bool InbEmitErrors = true, TSet<const FBPTerminal*>* InThreadSafeObjectTerms = nullptr)"
  },
  {
    "label": "DoSignaturesHaveConvertibleFloatTypes()",
    "kind": "Method",
    "detail": "Function (ConvertibleSignatureMatchResult)",
    "insertText": "DoSignaturesHaveConvertibleFloatTypes(const UFunction* SourceFunction, const UFunction* OtherFunction)"
  },
  {
    "label": "ResolveAndRegisterScopedTerm()",
    "kind": "Method",
    "detail": "Function (} ; class FNodeHandlingFunctor { public : class FKismetCompilerContext& CompilerContext ; protected : void)",
    "insertText": "ResolveAndRegisterScopedTerm(FKismetFunctionContext& Context, UEdGraphPin* Net, TIndirectArray<FBPTerminal>& NetArray)"
  },
  {
    "label": "GenerateSimpleThenGoto()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledStatement&)",
    "insertText": "GenerateSimpleThenGoto(FKismetFunctionContext& Context, UEdGraphNode& Node, UEdGraphPin* ThenExecPin)"
  },
  {
    "label": "GenerateSimpleThenGoto()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledStatement&)",
    "insertText": "GenerateSimpleThenGoto(FKismetFunctionContext& Context, UEdGraphNode& Node)"
  },
  {
    "label": "ValidateAndRegisterNetIfLiteral()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAndRegisterNetIfLiteral(FKismetFunctionContext& Context, UEdGraphPin* Net)"
  },
  {
    "label": "RegisterLiteral()",
    "kind": "Method",
    "detail": "Function (FBPTerminal*)",
    "insertText": "RegisterLiteral(FKismetFunctionContext& Context, UEdGraphPin* Net)"
  },
  {
    "label": "FNodeHandlingFunctor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNodeHandlingFunctor(FKismetCompilerContext& InCompilerContext) : CompilerContext(InCompilerContext)"
  },
  {
    "label": "FNodeHandlingFunctor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FNodeHandlingFunctor()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Compile(FKismetFunctionContext& Context, UEdGraphNode* Node)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Transform(FKismetFunctionContext& Context, UEdGraphNode* Node)"
  },
  {
    "label": "RegisterNet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterNet(FKismetFunctionContext& Context, UEdGraphPin* Pin)"
  },
  {
    "label": "RegisterNets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterNets(FKismetFunctionContext& Context, UEdGraphNode* Node)"
  },
  {
    "label": "RequiresRegisterNetsBeforeScheduling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresRegisterNetsBeforeScheduling()"
  },
  {
    "label": "FKCHandler_Passthru()",
    "kind": "Method",
    "detail": "Function (} ; class FKCHandler_Passthru : public FNodeHandlingFunctor { public :)",
    "insertText": "FKCHandler_Passthru(FKismetCompilerContext& InCompilerContext) : FNodeHandlingFunctor(InCompilerContext)"
  },
  {
    "label": "GenerateSimpleThenGoto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSimpleThenGoto(Context, *Node)"
  },
  {
    "label": "MakeValidName()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNetNameMapping { public : FString)",
    "insertText": "MakeValidName(const UEdGraphNode* Net, const FString& Context = TEXT(\"\"))"
  },
  {
    "label": "MakeValidName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "MakeValidName(const UEdGraphPin* Net, const FString& Context = TEXT(\"\"))"
  },
  {
    "label": "MakeValidName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "MakeValidName(const UObject* Net, const FString& Context = TEXT(\"\"))"
  },
  {
    "label": "MakeBaseName()",
    "kind": "Method",
    "detail": "Function (} private : FString)",
    "insertText": "MakeBaseName(const UEdGraphNode* Net)"
  },
  {
    "label": "MakeBaseName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeBaseName(const UEdGraphPin* Net)"
  },
  {
    "label": "MakeBaseName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeBaseName(const UObject* Net)"
  },
  {
    "label": "MakeValidNameImpl()",
    "kind": "Method",
    "detail": "Function (template<NetType> FString)",
    "insertText": "MakeValidNameImpl(NetType Net, const FString& Context)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (BaseName + =)",
    "insertText": "Printf(TEXT(\"_%s\"), *Context)"
  },
  {
    "label": "GetUniqueName()",
    "kind": "Method",
    "detail": "Function (} FString NetName =)",
    "insertText": "GetUniqueName(MoveTemp(BaseName))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NetToName .)",
    "insertText": "Add(Net, NetName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NameToNet .)",
    "insertText": "Add(NetName, Net)"
  },
  {
    "label": "SanitizeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeName(NetName)"
  },
  {
    "label": "NewNetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NewNetName(NetName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Postfix = 0 ; const void** ExistingNet = NameToNet .)",
    "insertText": "Find(NewNetName)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (+ + Postfix ; NewNetName = NetName +)",
    "insertText": "TEXT(\"_\") + FString::FromInt(Postfix)"
  }
]