[
  {
    "label": "FInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEvent"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputEventVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputEventVisualizer"
  },
  {
    "label": "FMouseEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMouseEventInfo"
  },
  {
    "label": "FKeyEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEventInfo"
  },
  {
    "label": "FInputEventVisualizer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Debugging / SlateDebugging . h \" # include \" HAL / IConsoleManager . h \" # if WITH_SLATE_DEBUGGING struct FInputEvent ; class FSlateWindowElementList ; class FMenuBuilder ; class SNotificationItem ; enum class ECheckBoxState : uint8 ; class FInputEventVisualizer : public FSlateDebugging::IWidgetInputRoutingEvent { public :)",
    "insertText": "FInputEventVisualizer()"
  },
  {
    "label": "PopulateMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OnProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessInput(ESlateDebuggingInputEvent InputEventType, const FInputEvent& Event)"
  },
  {
    "label": "OnPreProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreProcessInput(ESlateDebuggingInputEvent InputEventType, const TCHAR* InputPrecessorName, bool bHandled)"
  },
  {
    "label": "OnRouteInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRouteInput(ESlateDebuggingInputEvent InputEventType, const FName& RoutedType)"
  },
  {
    "label": "OnInputEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInputEvent(ESlateDebuggingInputEvent InputEventType, const FReply& InReply, const TSharedPtr<SWidget>& HandlerWidget)"
  },
  {
    "label": "OnInputRouted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInputRouted(ESlateDebuggingInputEvent InputEventType)"
  },
  {
    "label": "OnInputProcessed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInputProcessed(ESlateDebuggingInputEvent InputEventType)"
  },
  {
    "label": "HandlePaint()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandlePaint(const FPaintArgs& InArgs, const FGeometry& InAllottedGeometry, FSlateWindowElementList& InOutDrawElements, int32& InOutLayerId)"
  },
  {
    "label": "HandleDemoModeEnabledChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDemoModeEnabledChanged(IConsoleVariable* CVar)"
  },
  {
    "label": "HandleBeginFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBeginFrameCallback()"
  },
  {
    "label": "HandleEndWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEndWindow(const FSlateWindowElementList& ElementList)"
  },
  {
    "label": "UpdateNotificationItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNotificationItem()"
  },
  {
    "label": "UpdateKeyText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyText()"
  },
  {
    "label": "HandleToggleMouseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleMouseEvent()"
  },
  {
    "label": "HandleGetMouseEventCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleGetMouseEventCheckState()"
  },
  {
    "label": "HandleToggleKeyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleToggleKeyEvent()"
  },
  {
    "label": "HandleGetKeyEventCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleGetKeyEventCheckState()"
  },
  {
    "label": "FKeyEventInfo()",
    "kind": "Method",
    "detail": "Function (private : struct FMouseEventInfo { FKey Key ; double EventTime ; FVector2f CursorPingPosition ; FLinearColor PingColor ; } ; struct FKeyEventInfo { FKey Key ; FModifierKeysState KeysState ;)",
    "insertText": "FKeyEventInfo()"
  },
  {
    "label": "FKeyEventInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyEventInfo(const FKey& InKey, const FModifierKeysState& InKeysState) : Key(InKey), KeysState(InKeysState)"
  }
]