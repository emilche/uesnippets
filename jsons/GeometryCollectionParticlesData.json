[
  {
    "label": "FChaosSolversModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosSolversModule"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometryCollectionParticlesData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionParticlesData"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FGeometryCollectionParticlesData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Build . h \" # include \" EngineDefines . h \" # ifndef GEOMETRYCOLLECTION_DEBUG_DRAW # define GEOMETRYCOLLECTION_DEBUG_DRAW UE_ENABLE_DEBUG_DRAWING # endif # if GEOMETRYCOLLECTION_DEBUG_DRAW # include \" Containers / StaticBitArray . h \" # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Matrix . h \" # include \" Chaos / PBDRigidClusteredParticles . h \" # include \" Chaos / UniformGrid . h \" # include \" Chaos / Framework / BufferedData . h \" # include \" Chaos / Declares . h \" class FChaosSolversModule ; template<class InElementType> class TManagedArray ; enum class EGeometryCollectionParticlesData : uint8 { X,R,Geometry,GeometryType,GeometryIsConvex,GeometryHasBoundingBox,GeometryBoxMin,GeometryBoxMax,GeometrySphereCenter,GeometrySphereRadius,GeometryLevelSetGrid,V,W,F,Torque,I,InvI,M,InvM,CollisionParticlesSize,Disabled,Sleeping,Island,P,Q,PreV,PreW,ConnectivityEdges,ChildToParentMap,Count } ; class FGeometryCollectionParticlesData { public :)",
    "insertText": "FGeometryCollectionParticlesData()"
  },
  {
    "label": "SetDataSyncFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSyncFlag(EGeometryCollectionParticlesData Data)"
  },
  {
    "label": "GetGameDataForRead()",
    "kind": "Method",
    "detail": "Function (BufferedData .)",
    "insertText": "GetGameDataForRead().SetDataSyncFlag(Data)"
  },
  {
    "label": "SetAllDataSyncFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllDataSyncFlag()"
  },
  {
    "label": "GetGameDataForRead()",
    "kind": "Method",
    "detail": "Function (BufferedData .)",
    "insertText": "GetGameDataForRead().SetAllDataSyncFlag()"
  },
  {
    "label": "HasSyncedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSyncedData(EGeometryCollectionParticlesData Data)"
  },
  {
    "label": "RequestSyncedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequestSyncedData(EGeometryCollectionParticlesData Data)"
  },
  {
    "label": "SetDataSyncFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSyncFlag(Data)"
  },
  {
    "label": "Sync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sync(Chaos::FPhysicsSolver* Solver, const TManagedArray<FGuid>& RigidBodyIds)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const Chaos::FVec3&)",
    "insertText": "GetX(int32 Index)"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FRotation3&)",
    "insertText": "GetR(int32 Index)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FImplicitObject* const&)",
    "insertText": "GetGeometry(int32 Index)"
  },
  {
    "label": "GetGeometryType()",
    "kind": "Method",
    "detail": "Function (} const Chaos::EImplicitObjectType&)",
    "insertText": "GetGeometryType(int32 Index)"
  },
  {
    "label": "IsGeometryConvex()",
    "kind": "Method",
    "detail": "Function (} const bool&)",
    "insertText": "IsGeometryConvex(int32 Index)"
  },
  {
    "label": "HasGeometryBoundingBoxm()",
    "kind": "Method",
    "detail": "Function (} const bool&)",
    "insertText": "HasGeometryBoundingBoxm(int32 Index)"
  },
  {
    "label": "GetGeometryBoxMin()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetGeometryBoxMin(int32 Index)"
  },
  {
    "label": "GetGeometryBoxMax()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetGeometryBoxMax(int32 Index)"
  },
  {
    "label": "GetGeometrySphereCenter()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetGeometrySphereCenter(int32 Index)"
  },
  {
    "label": "GetGeometrySphereRadius()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FReal&)",
    "insertText": "GetGeometrySphereRadius(int32 Index)"
  },
  {
    "label": "GetGeometryLevelSetGrid()",
    "kind": "Method",
    "detail": "Function (} const Chaos::TUniformGrid<Chaos::FReal,3>&)",
    "insertText": "GetGeometryLevelSetGrid(int32 Index)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetV(int32 Index)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetW(int32 Index)"
  },
  {
    "label": "GetF()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetF(int32 Index)"
  },
  {
    "label": "GetTorque()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetTorque(int32 Index)"
  },
  {
    "label": "GetI()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FMatrix33&)",
    "insertText": "GetI(int32 Index)"
  },
  {
    "label": "GetInvI()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FMatrix33&)",
    "insertText": "GetInvI(int32 Index)"
  },
  {
    "label": "GetM()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FReal&)",
    "insertText": "GetM(int32 Index)"
  },
  {
    "label": "GetInvM()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FReal&)",
    "insertText": "GetInvM(int32 Index)"
  },
  {
    "label": "GetCollisionParticlesSize()",
    "kind": "Method",
    "detail": "Function (} const int32&)",
    "insertText": "GetCollisionParticlesSize(int32 Index)"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (} const bool&)",
    "insertText": "IsDisabled(int32 Index)"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (} const bool&)",
    "insertText": "IsSleeping(int32 Index)"
  },
  {
    "label": "GetIsland()",
    "kind": "Method",
    "detail": "Function (} const int32&)",
    "insertText": "GetIsland(int32 Index)"
  },
  {
    "label": "GetP()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetP(int32 Index)"
  },
  {
    "label": "GetQ()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FRotation3&)",
    "insertText": "GetQ(int32 Index)"
  },
  {
    "label": "GetPreV()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetPreV(int32 Index)"
  },
  {
    "label": "GetPreW()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FVec3&)",
    "insertText": "GetPreW(int32 Index)"
  },
  {
    "label": "GetConnectivityEdges()",
    "kind": "Method",
    "detail": "Function (} const TArray<Chaos::TConnectivityEdge<Chaos::FReal>>&)",
    "insertText": "GetConnectivityEdges(int32 Index)"
  },
  {
    "label": "GetChildToParentMap()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FRigidTransform3&)",
    "insertText": "GetChildToParentMap(int32 Index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(int32 Index, const TCHAR* Separator = TEXT(\", \"))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} private : typedef TStaticBitArray<)",
    "insertText": "uint32(EGeometryCollectionParticlesData::Count)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (RequiredDataFlags [)",
    "insertText": "uint32(Data)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(EGeometryCollectionParticlesData Data)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(EGeometryCollectionParticlesData Data, const Chaos::FPhysicsSolver* Solver, const TManagedArray<FGuid>& RigidBodyIds)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(int32 Index, const TCHAR* Separator)"
  }
]