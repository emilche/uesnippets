[
  {
    "label": "ISourceControlProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlProvider"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "FSourceControlBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourceControlBackend"
  },
  {
    "label": "FSourceControlBackend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IVirtualizationBackend . h \" # include \" Containers / StringView . h \" class ISourceControlProvider ; namespace UE::Virtualization { class FSemaphore ; class FSourceControlBackend final : public IVirtualizationBackend { public :)",
    "insertText": "FSourceControlBackend(FStringView ProjectName, FStringView ConfigName, FStringView InDebugName)"
  },
  {
    "label": "FSourceControlBackend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSourceControlBackend()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Initialize(const FString& ConfigEntry)"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (EConnectionStatus)",
    "insertText": "OnConnect()"
  },
  {
    "label": "OnConnectInternal()",
    "kind": "Method",
    "detail": "Function (IVirtualizationBackend::EConnectionStatus)",
    "insertText": "OnConnectInternal(FString& InOutPort, FString& InOutUsername, bool bSaveConnectionSettings, FText& OutErrorMessage)"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushData(TArrayView<FPushRequest> Requests, EPushFlags Flags)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullData(TArrayView<FPullRequest> Requests, EPullFlags Flags, FText& OutErrors)"
  },
  {
    "label": "DoesPayloadExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPayloadExist(const FIoHash& Id)"
  },
  {
    "label": "DoPayloadsExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPayloadsExist(TArrayView<const FIoHash> PayloadIds, TArray<bool>& OutResults)"
  },
  {
    "label": "TryApplySettingsFromConfigFiles()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryApplySettingsFromConfigFiles(const FString& ConfigEntry)"
  },
  {
    "label": "CreateDepotPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDepotPath(const FIoHash& PayloadId, FStringBuilderBase& OutPath)"
  },
  {
    "label": "FindSubmissionWorkingDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindSubmissionWorkingDir(const FString& ConfigEntry)"
  },
  {
    "label": "OnConnectionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionError(FText ErrorMessage)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISourceControlProvider> SCCProvider ; FString ProjectName ; FString DepotPathRoot ; FString ServerAddress ; FString ClientStream ; FString SubmissionRootDir ; FString IgnoreFileName =)",
    "insertText": "TEXT(\".p4ignore.txt\")"
  }
]