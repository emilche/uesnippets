[
  {
    "label": "PageTagToName()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_FUCHSIA_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_INTERNALS_FUCHSIA_H_ # include<lib / zx / vmar . h> # include<lib / zx / vmo . h> # include<cstdint> # include \" base / allocator / partition_allocator / page_allocator . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / fuchsia / fuchsia_logging . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_notreached . h \" namespace partition_alloc::internal { namespace { const char*)",
    "insertText": "PageTagToName(PageTag tag)"
  },
  {
    "label": "SystemAllocPagesInternal()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case PageAccessibilityConfiguration::kInaccessible : return 0 ; } } } bool kHintIsAdvisory = false ; std::atomic<int32_t> s_allocPageErrorCode { 0 } ; uintptr_t)",
    "insertText": "SystemAllocPagesInternal(uintptr_t hint, size_t length, PageAccessibilityConfiguration accessibility, PageTag page_tag, [[maybe_unused]] int file_descriptor_for_shared_alloc)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (zx::vmo vmo ; zx_status_t status = zx::)",
    "insertText": "create(length, 0, &vmo)"
  },
  {
    "label": "PA_ZX_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_ZX_DLOG(INFO, status)"
  },
  {
    "label": "set_property()",
    "kind": "Method",
    "detail": "Function (status = vmo .)",
    "insertText": "set_property(ZX_PROP_NAME, vmo_name, strlen(vmo_name))"
  },
  {
    "label": "PA_ZX_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_ZX_DCHECK(status == ZX_OK, status)"
  },
  {
    "label": "replace_as_executable()",
    "kind": "Method",
    "detail": "Function (status = vmo .)",
    "insertText": "replace_as_executable(zx::resource(), &vmo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t vmar_offset = 0 ;)",
    "insertText": "if(hint)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (vmar_offset = hint ; options | = ZX_VM_SPECIFIC ; } uint64_t address ; status = zx::)",
    "insertText": "root_self()->map(options, vmar_offset, vmo, 0, length, &address)"
  },
  {
    "label": "PA_ZX_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_ZX_DLOG(ERROR, status)"
  },
  {
    "label": "TrimMappingInternal()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } return address ; } uintptr_t)",
    "insertText": "TrimMappingInternal(uintptr_t base_address, size_t base_length, size_t trim_length, PageAccessibilityConfiguration accessibility, size_t pre_slack, size_t post_slack)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(base_length == trim_length + pre_slack + post_slack)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = zx::)",
    "insertText": "root_self()->unmap(base_address, pre_slack)"
  },
  {
    "label": "PA_ZX_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_ZX_CHECK(status == ZX_OK, status)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(post_slack)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = zx::)",
    "insertText": "root_self()->unmap( base_address + pre_slack + trim_length, post_slack)"
  },
  {
    "label": "TrySetSystemPagesAccessInternal()",
    "kind": "Method",
    "detail": "Function (} return base_address + pre_slack ; } bool)",
    "insertText": "TrySetSystemPagesAccessInternal(uint64_t address, size_t length, PageAccessibilityConfiguration accessibility)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = zx::)",
    "insertText": "root_self()->protect( PageAccessibilityToZxVmOptions(accessibility), address, length)"
  },
  {
    "label": "FreePagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreePagesInternal(uint64_t address, size_t length)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = zx::)",
    "insertText": "root_self()->unmap(address, length)"
  },
  {
    "label": "DiscardSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DiscardSystemPagesInternal(uint64_t address, size_t length)"
  },
  {
    "label": "root_self()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = zx::)",
    "insertText": "root_self()->op_range( ZX_VMO_OP_DECOMMIT, address, length, nullptr, 0)"
  },
  {
    "label": "DecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitSystemPagesInternal(uint64_t address, size_t length, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, PageAccessibilityConfiguration::kInaccessible)"
  },
  {
    "label": "DiscardSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiscardSystemPagesInternal(address, length)"
  },
  {
    "label": "DecommitAndZeroSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecommitAndZeroSystemPagesInternal(uintptr_t address, size_t length)"
  },
  {
    "label": "RecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "SetSystemPagesAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemPagesAccess(address, length, accessibility)"
  },
  {
    "label": "TryRecommitSystemPagesInternal()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TryRecommitSystemPagesInternal(uintptr_t address, size_t length, PageAccessibilityConfiguration accessibility, PageAccessibilityDisposition accessibility_disposition)"
  }
]