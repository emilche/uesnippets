[
  {
    "label": "CommaInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CommaInitializer"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COMMAINITIALIZER_H # define EIGEN_COMMAINITIALIZER_H namespace Eigen { template<XprType> struct CommaInitializer { typedef XprType::Scalar Scalar ; EIGEN_DEVICE_FUNC)",
    "insertText": "CommaInitializer(XprType& xpr, const Scalar& s) : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0 && \"Cannot comma-initialize a 0x0 matrix (operator<<)\")"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_xpr .)",
    "insertText": "coeffRef(0,0)"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC)",
    "insertText": "CommaInitializer(XprType& xpr, const DenseBase<OtherDerived>& other) : m_xpr(xpr), m_row(0), m_col(other.cols()), m_currentBlockRows(other.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_xpr.rows() >= other.rows() && m_xpr.cols() >= other.cols() && \"Cannot comma-initialize a 0x0 matrix (operator<<)\")"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_xpr .)",
    "insertText": "block(0, 0, other.rows(), other.cols())"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "CommaInitializer(const CommaInitializer& o) : m_xpr(o.m_xpr), m_row(o.m_row), m_col(o.m_col), m_currentBlockRows(o.m_currentBlockRows)"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "CommaInitializer(o).m_row = m_xpr.rows()"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "CommaInitializer(o).m_col = m_xpr.cols()"
  },
  {
    "label": "CommaInitializer()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "CommaInitializer(o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CommaInitializer&)",
    "insertText": "operator(const Scalar& s)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (m_row + = m_currentBlockRows ; m_col = 0 ; m_currentBlockRows = 1 ;)",
    "insertText": "eigen_assert(m_row<m_xpr.rows() && \"Too many rows passed to comma initializer (operator<<)\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "eigen_assert(m_col<m_xpr.cols() && \"Too many coefficients passed to comma initializer (operator<<)\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_currentBlockRows==1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_xpr .)",
    "insertText": "coeffRef(m_row, m_col++)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (m_row + = m_currentBlockRows ; m_col = 0 ; m_currentBlockRows = other .)",
    "insertText": "rows()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_row+m_currentBlockRows<=m_xpr.rows() && \"Too many rows passed to comma initializer (operator<<)\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "eigen_assert((m_col + other.cols() <= m_xpr.cols()) && \"Too many coefficients passed to comma initializer (operator<<)\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_currentBlockRows==other.rows())"
  },
  {
    "label": "ColsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (m_xpr . template block<OtherDerived::RowsAtCompileTime,)",
    "insertText": "ColsAtCompileTime(m_row, m_col, other.rows(), other.cols())"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (m_col + = other .)",
    "insertText": "cols()"
  },
  {
    "label": "finished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finished()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0) && m_col == m_xpr.cols() && \"Too few coefficients passed to comma initializer (operator<<)\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> EIGEN_DEVICE_FUNC CommaInitializer<Derived> DenseBase<Derived)",
    "insertText": "operator(const DenseBase<OtherDerived>& other)"
  }
]