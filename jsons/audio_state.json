[
  {
    "label": "AudioTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTransport"
  },
  {
    "label": "AudioState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioState"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_AUDIO_STATE_H_ # define CALL_AUDIO_STATE_H_ # include \" api / audio / audio_mixer . h \" # include \" api / scoped_refptr . h \" # include \" modules / async_audio_processing / async_audio_processing . h \" # include \" modules / audio_device / include / audio_device . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / ref_count . h \" namespace webrtc { class AudioTransport ; class AudioState : public rtc::RefCountInterface { public : struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "audio_processing()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioMixer> audio_mixer ; rtc::scoped_refptr<webrtc::AudioProcessing> audio_processing ; rtc::scoped_refptr<webrtc::AudioDeviceModule> audio_device_module ; rtc::scoped_refptr<AsyncAudioProcessing::Factory> async_audio_processing_factory ; } ; AudioProcessing*)",
    "insertText": "audio_processing()"
  },
  {
    "label": "audio_transport()",
    "kind": "Method",
    "detail": "Function (AudioTransport*)",
    "insertText": "audio_transport()"
  },
  {
    "label": "SetPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayout(bool enabled)"
  },
  {
    "label": "SetRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecording(bool enabled)"
  },
  {
    "label": "SetStereoChannelSwapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStereoChannelSwapping(bool enable)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioState>)",
    "insertText": "Create(const AudioState::Config& config)"
  },
  {
    "label": "AudioState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioState()"
  }
]