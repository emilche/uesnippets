[
  {
    "label": "obj_name_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "obj_name_st"
  },
  {
    "label": "OBJ_create_and_add_object()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_OBJECTS_H # define HEADER_OBJECTS_H # include<openssl / obj_mac . h> # include<openssl / bio . h> # include<openssl / asn1 . h> # include<openssl / objectserr . h> # define OBJ_NAME_TYPE_UNDEF 0 x00 # define OBJ_NAME_TYPE_MD_METH 0 x01 # define OBJ_NAME_TYPE_CIPHER_METH 0 x02 # define OBJ_NAME_TYPE_PKEY_METH 0 x03 # define OBJ_NAME_TYPE_COMP_METH 0 x04 # define OBJ_NAME_TYPE_NUM 0 x05 # define OBJ_NAME_ALIAS 0 x8000 # define OBJ_BSEARCH_VALUE_ON_NOMATCH 0 x01 # define OBJ_BSEARCH_FIRST_VALUE_ON_MATCH 0 x02 # ifdef __cplusplus \" C \" { # endif typedef struct obj_name_st { int type ; int alias ; const char* name ; const char* data ; } OBJ_NAME ; # define)",
    "insertText": "OBJ_create_and_add_object(a,b,c) OBJ_create(a,b,c) int OBJ_NAME_init(void)"
  },
  {
    "label": "OBJ_NAME_new_index()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_NAME_new_index(unsigned long (*hash_func) (const char *), int (*cmp_func) (const char *, const char *), void (*free_func) (const char *, int, const char *))"
  },
  {
    "label": "OBJ_NAME_get()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "OBJ_NAME_get(const char *name, int type)"
  },
  {
    "label": "OBJ_NAME_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_NAME_add(const char *name, int type, const char *data)"
  },
  {
    "label": "OBJ_NAME_remove()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_NAME_remove(const char *name, int type)"
  },
  {
    "label": "OBJ_NAME_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OBJ_NAME_cleanup(int type)"
  },
  {
    "label": "OBJ_NAME_do_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg), void *arg)"
  },
  {
    "label": "OBJ_NAME_do_all_sorted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OBJ_NAME_do_all_sorted(int type, void (*fn) (const OBJ_NAME *, void *arg), void *arg)"
  },
  {
    "label": "OBJ_dup()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "OBJ_dup(const ASN1_OBJECT *o)"
  },
  {
    "label": "OBJ_nid2obj()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "OBJ_nid2obj(int n)"
  },
  {
    "label": "OBJ_nid2ln()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "OBJ_nid2ln(int n)"
  },
  {
    "label": "OBJ_nid2sn()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "OBJ_nid2sn(int n)"
  },
  {
    "label": "OBJ_obj2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_obj2nid(const ASN1_OBJECT *o)"
  },
  {
    "label": "OBJ_txt2obj()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT*)",
    "insertText": "OBJ_txt2obj(const char *s, int no_name)"
  },
  {
    "label": "OBJ_obj2txt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)"
  },
  {
    "label": "OBJ_txt2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_txt2nid(const char *s)"
  },
  {
    "label": "OBJ_ln2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_ln2nid(const char *s)"
  },
  {
    "label": "OBJ_sn2nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_sn2nid(const char *s)"
  },
  {
    "label": "OBJ_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)"
  },
  {
    "label": "OBJ_bsearch_()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "OBJ_bsearch_(const void *key, const void *base, int num, int size, int (*cmp) (const void *, const void *))"
  },
  {
    "label": "OBJ_bsearch_ex_()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "OBJ_bsearch_ex_(const void *key, const void *base, int num, int size, int (*cmp) (const void *, const void *), int flags)"
  },
  {
    "label": "_DECLARE_OBJ_BSEARCH_CMP_FN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "_DECLARE_OBJ_BSEARCH_CMP_FN(scope, type1, type2, nm) \\ static int nm##_cmp_BSEARCH_CMP_FN(const void *, const void *)"
  },
  {
    "label": "_cmp()",
    "kind": "Method",
    "detail": "Function (\\ int nm # #)",
    "insertText": "_cmp(type1 const *, type2 const *)"
  },
  {
    "label": "nm()",
    "kind": "Method",
    "detail": "Function (\\ scope type2* OBJ_bsearch_ # #)",
    "insertText": "nm(type1 *key, type2 const *base, int num) # define DECLARE_OBJ_BSEARCH_CMP_FN(type1, type2, cmp) \\ _DECLARE_OBJ_BSEARCH_CMP_FN(static, type1, type2, cmp) # define DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm) \\ type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num) # define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm) \\ static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)"
  },
  {
    "label": "_cmp()",
    "kind": "Method",
    "detail": "Function (\\ type1 const* a = a_ ; \\ type2 const* b = b_ ; \\ return nm # #)",
    "insertText": "_cmp(a,b)"
  },
  {
    "label": "nm()",
    "kind": "Method",
    "detail": "Function (\\ } \\ type2* OBJ_bsearch_ # #)",
    "insertText": "nm(type1 *key, type2 const *base, int num)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(type2 *)OBJ_bsearch_(key, base, num, sizeof(type2), \\ nm##_cmp_BSEARCH_CMP_FN)"
  },
  {
    "label": "dummy_prototype()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "dummy_prototype(void) # define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm) \\ static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)"
  },
  {
    "label": "dummy_prototype()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "dummy_prototype(void) # define OBJ_bsearch(type1,key,type2,base,num,cmp) \\ ((type2 *)OBJ_bsearch_(CHECKED_PTR_OF(type1,key),CHECKED_PTR_OF(type2,base), \\ num,sizeof(type2), \\ ((void)CHECKED_PTR_OF(type1,cmp##_type_1), \\ (void)CHECKED_PTR_OF(type2,cmp##_type_2), \\ cmp##_BSEARCH_CMP_FN))) # define OBJ_bsearch_ex(type1,key,type2,base,num,cmp,flags) \\ ((type2 *)OBJ_bsearch_ex_(CHECKED_PTR_OF(type1,key),CHECKED_PTR_OF(type2,base), \\ num,sizeof(type2), \\ ((void)CHECKED_PTR_OF(type1,cmp##_type_1), \\ (void)type_2=CHECKED_PTR_OF(type2,cmp##_type_2), \\ cmp##_BSEARCH_CMP_FN)),flags) int OBJ_new_nid(int num)"
  },
  {
    "label": "OBJ_add_object()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_add_object(const ASN1_OBJECT *obj)"
  },
  {
    "label": "OBJ_create()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_create(const char *oid, const char *sn, const char *ln)"
  },
  {
    "label": "OBJ_cleanup()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "OBJ_cleanup() while(0) continue #endif int OBJ_create_objects(BIO *in)"
  },
  {
    "label": "OBJ_length()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "OBJ_length(const ASN1_OBJECT *obj)"
  },
  {
    "label": "OBJ_get0_data()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "OBJ_get0_data(const ASN1_OBJECT *obj)"
  },
  {
    "label": "OBJ_find_sigid_algs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)"
  },
  {
    "label": "OBJ_find_sigid_by_algs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)"
  },
  {
    "label": "OBJ_add_sigid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OBJ_add_sigid(int signid, int dig_id, int pkey_id)"
  },
  {
    "label": "OBJ_sigid_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OBJ_sigid_free(void)"
  }
]