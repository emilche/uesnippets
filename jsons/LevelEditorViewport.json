[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDragTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool"
  },
  {
    "label": "HModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HModel"
  },
  {
    "label": "IAssetFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetFactoryInterface"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FViewportHoverTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportHoverTarget"
  },
  {
    "label": "FTrackingTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackingTransaction"
  },
  {
    "label": "ETransactionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETransactionState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FLevelViewportActorLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelViewportActorLock"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FActorElementLevelEditorViewportInteractionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorElementLevelEditorViewportInteractionCustomization"
  },
  {
    "label": "FComponentElementLevelEditorViewportInteractionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentElementLevelEditorViewportInteractionCustomization"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FSelectedAssetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedAssetInfo"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FActorLockStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorLockStack"
  },
  {
    "label": "FViewportHoverTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AssetSelection . h \" # include \" InputCoreTypes . h \" # include \" GameFramework / Actor . h \" # include \" Camera / CameraComponent . h \" # include \" UnrealWidgetFwd . h \" # include \" EditorViewportClient . h \" # include \" UObject / ObjectKey . h \" # include \" UnrealEdMisc . h \" # include \" Elements / Framework / TypedElementListFwd . h \" struct FAssetData ; struct FMinimalViewInfo ; class FCanvas ; class FDragTool ; class HModel ; class IAssetFactoryInterface ; class ILevelEditor ; class SLevelViewport ; class UActorFactory ; class UModel ; class UTypedElementSelectionSet ; struct FWorldContext ; struct FTypedElementHandle ; struct FGizmoState ; struct FViewportHoverTarget { TObjectPtr<AActor> HoveredActor ; TObjectPtr<UModel> HoveredModel ; uint32 ModelSurfaceIndex ;)",
    "insertText": "FViewportHoverTarget(AActor* InActor ) : HoveredActor( InActor ), HoveredModel( nullptr ), ModelSurfaceIndex( INDEX_NONE)"
  },
  {
    "label": "FViewportHoverTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewportHoverTarget(UModel* InModel, int32 InSurfaceIndex ) : HoveredActor( nullptr ), HoveredModel( InModel ), ModelSurfaceIndex( InSurfaceIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FViewportHoverTarget& RHS)"
  },
  {
    "label": "FTrackingTransaction()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTrackingTransaction { struct ETransactionState { enum Enum { Inactive,Active,Pending,} ; } ;)",
    "insertText": "FTrackingTransaction()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin(const FText& Description, AActor* AdditionalActor = nullptr)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "BeginPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPending(const FText& Description)"
  },
  {
    "label": "PromotePendingToActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromotePendingToActive()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetMutableSelectionSet()",
    "kind": "Method",
    "detail": "Function (UTypedElementSelectionSet*)",
    "insertText": "GetMutableSelectionSet()"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectionChanged(const UTypedElementSelectionSet* InSelectionSet)"
  },
  {
    "label": "FLevelViewportActorLock()",
    "kind": "Method",
    "detail": "Function (class FScopedTransaction* ScopedTransaction = nullptr ; ETransactionState::Enum TrackingTransactionState = ETransactionState::Inactive ; FText PendingDescription ; TMap<UPackage*,bool> InitialPackageDirtyStates ; } ; struct FLevelViewportActorLock { const FLevelViewportActorLock None ;)",
    "insertText": "FLevelViewportActorLock() : LockedActor(nullptr)"
  },
  {
    "label": "FLevelViewportActorLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelViewportActorLock(AActor* InActor) : LockedActor(InActor)"
  },
  {
    "label": "FLevelViewportActorLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelViewportActorLock(AActor* InActor, TOptional<EAspectRatioAxisConstraint> InAspectRatioAxisConstraint) : LockedActor(InActor), AspectRatioAxisConstraint(InAspectRatioAxisConstraint)"
  },
  {
    "label": "HasValidLockedActor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidLockedActor()"
  },
  {
    "label": "GetLockedActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetLockedActor()"
  },
  {
    "label": "GetDropPreviewActors()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<AActor> LockedActor ; TOptional<EAspectRatioAxisConstraint> AspectRatioAxisConstraint ; } ; class FLevelEditorViewportClient : public FEditorViewportClient { class FActorElementLevelEditorViewportInteractionCustomization ; class FComponentElementLevelEditorViewportInteractionCustomization ; public : const TArray<TWeakObjectPtr<AActor>>&)",
    "insertText": "GetDropPreviewActors()"
  },
  {
    "label": "FLevelEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelEditorViewportClient(const TSharedPtr<class SLevelViewport>& InLevelViewport)"
  },
  {
    "label": "FLevelEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLevelEditorViewportClient()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "CalcSceneView()",
    "kind": "Method",
    "detail": "Function (FSceneView*)",
    "insertText": "CalcSceneView(FSceneViewFamily* ViewFamily, const int32 StereoViewIndex = INDEX_NONE)"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& InEventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId DeviceId, FKey Key, float Delta, float DeltaTime, int32 NumSamples=1, bool bGamepad=false)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetCursor(FViewport* Viewport,int32 X,int32 Y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturedMouseMove(FViewport* InViewport, int32 InMouseX, int32 InMouseY)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMove(FViewport* InViewport, int32 x, int32 y)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "InputWidgetDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputWidgetDelta(FViewport* Viewport, EAxisList::Type CurrentAxis, FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "MakeDragTool()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragTool>)",
    "insertText": "MakeDragTool(EDragTool::Type DragToolType)"
  },
  {
    "label": "IsLevelEditorClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelEditorClient()"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackingStarted(const struct FInputEventState& InInputState, bool bIsDraggingWidget, bool bNudge)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped()"
  },
  {
    "label": "AbortTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortTracking()"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetCoordSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWidgetCoordSystem()"
  },
  {
    "label": "SetupViewForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewForRendering(FSceneViewFamily& ViewFamily, FSceneView& View)"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "GetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCameraSpeedSetting()"
  },
  {
    "label": "SetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedSetting(int32 SpeedSetting)"
  },
  {
    "label": "GetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraSpeedScalar()"
  },
  {
    "label": "SetCameraSpeedScalar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedScalar(float SpeedScalar)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedFocus(FViewport* InViewport)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LostFocus(FViewport* InViewport)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(FSceneView& View, HHitProxy* HitProxy, FKey Key, EInputEvent Event, uint32 HitX, uint32 HitY)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "BeginCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCameraMovement(bool bHasMovement)"
  },
  {
    "label": "EndCameraMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCameraMovement()"
  },
  {
    "label": "SetVREditView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVREditView(bool bGameViewEnable)"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& Pivot)"
  },
  {
    "label": "ShouldScaleCameraSpeedByDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldScaleCameraSpeedByDistance()"
  },
  {
    "label": "OverrideHighResScreenshotCaptureRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverrideHighResScreenshotCaptureRegion(FIntRect& OutCaptureRegion)"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "SetIsCameraCut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCameraCut()"
  },
  {
    "label": "GetIsCameraCut()",
    "kind": "Method",
    "detail": "Function (bEditorCameraCut = true ; bWasEditorCameraCut = false ; } bool)",
    "insertText": "GetIsCameraCut()"
  },
  {
    "label": "InitializeViewportInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeViewportInteraction()"
  },
  {
    "label": "ResetCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCamera()"
  },
  {
    "label": "ResetViewForNewMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewForNewMap()"
  },
  {
    "label": "PrepareCameraForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareCameraForPIE()"
  },
  {
    "label": "RestoreCameraFromPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreCameraFromPIE()"
  },
  {
    "label": "UpdateAudioListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioListener(const FSceneView& View)"
  },
  {
    "label": "ShouldUseMoveCanvasMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseMoveCanvasMovement(void)"
  },
  {
    "label": "IsVolumeVisibleInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolumeVisibleInViewport(const AActor& VolumeActor)"
  },
  {
    "label": "UpdateViewForLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewForLockedActor(float DeltaTime=0.f)"
  },
  {
    "label": "GetHorizAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetHorizAxis()"
  },
  {
    "label": "GetVertAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetVertAxis()"
  },
  {
    "label": "NudgeSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NudgeSelectedObjects(const struct FInputEventState& InputState)"
  },
  {
    "label": "MoveCameraToLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCameraToLockedActor()"
  },
  {
    "label": "IsActorLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorLocked(const TWeakObjectPtr<const AActor> InActor)"
  },
  {
    "label": "IsAnyActorLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyActorLocked()"
  },
  {
    "label": "ApplyDeltaToActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActors(const FVector& InDrag, const FRotator& InRot, const FVector& InScale)"
  },
  {
    "label": "ApplyDeltaToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActor(AActor* InActor, const FVector& InDeltaDrag, const FRotator& InDeltaRot, const FVector& InDeltaScale)"
  },
  {
    "label": "ApplyDeltaToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToComponent(USceneComponent* InComponent, const FVector& InDeltaDrag, const FRotator& InDeltaRot, const FVector& InDeltaScale)"
  },
  {
    "label": "ApplyDeltaToSelectedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToSelectedElements(const FTransform& InDeltaTransform)"
  },
  {
    "label": "ApplyDeltaToElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToElement(const FTypedElementHandle& InElementHandle, const FTransform& InDeltaTransform)"
  },
  {
    "label": "MirrorSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorSelectedActors(const FVector& InMirrorScale)"
  },
  {
    "label": "MirrorSelectedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorSelectedElements(const FVector& InMirrorScale)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFocusBounds(FTypedElementListConstRef InElements, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "GetElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (FTypedElementListConstRef)",
    "insertText": "GetElementsToManipulate(const bool bForceRefresh = false)"
  },
  {
    "label": "SetIsSimulateInEditorViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSimulateInEditorViewport(bool bInIsSimulateInEditorViewport)"
  },
  {
    "label": "DrawTextureStreamingBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTextureStreamingBounds(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "CopyLayoutFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLayoutFromViewport(const FLevelEditorViewportClient& InViewport)"
  },
  {
    "label": "GetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSpriteCategoryVisibility(const FName& InSpriteCategory)"
  },
  {
    "label": "GetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSpriteCategoryVisibility(int32 Index)"
  },
  {
    "label": "SetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpriteCategoryVisibility(const FName& InSpriteCategory, bool bVisible)"
  },
  {
    "label": "SetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpriteCategoryVisibility(int32 Index, bool bVisible)"
  },
  {
    "label": "SetAllSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllSpriteCategoryVisibility(bool bVisible)"
  },
  {
    "label": "SetReferenceToWorldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceToWorldContext(FWorldContext& WorldContext)"
  },
  {
    "label": "RemoveReferenceToWorldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToWorldContext(FWorldContext& WorldContext)"
  },
  {
    "label": "HasDropPreviewActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDropPreviewActors()"
  },
  {
    "label": "UpdateDropPreviewActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDropPreviewActors(int32 MouseX, int32 MouseY, const TArray<UObject*>& DroppedObjects, bool& out_bDroppedObjectsVisible, class UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DestroyDropPreviewActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDropPreviewActors()"
  },
  {
    "label": "HasDropPreviewElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDropPreviewElements()"
  },
  {
    "label": "UpdateDropPreviewElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDropPreviewElements(int32 MouseX, int32 MouseY, const TArray<UObject*>& DroppedObjects, bool& out_bDroppedObjectsVisible, TScriptInterface<IAssetFactoryInterface> Factory = nullptr)"
  },
  {
    "label": "DestroyDropPreviewElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDropPreviewElements()"
  },
  {
    "label": "CanDropObjectsAtCoordinates()",
    "kind": "Method",
    "detail": "Function (FDropQuery)",
    "insertText": "CanDropObjectsAtCoordinates(int32 MouseX, int32 MouseY, const FAssetData& AssetInfo)"
  },
  {
    "label": "DropObjectsAtCoordinates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsAtCoordinates(int32 MouseX, int32 MouseY, const TArray<UObject*>& DroppedObjects, TArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options = FDropObjectOptions())"
  },
  {
    "label": "DropObjectsAtCoordinates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsAtCoordinates(int32 MouseX, int32 MouseY, const TArray<UObject*>& DroppedObjects, TArray<AActor*>& OutNewActors, bool bOnlyDropOnTarget = false, bool bCreateDropPreview = false, bool bSelectActors = true, UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "ConditionalSetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "ConditionalSetWorld()"
  },
  {
    "label": "ConditionalRestoreWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalRestoreWorld(UWorld* InWorld)"
  },
  {
    "label": "CanApplyMaterialToHitProxy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanApplyMaterialToHitProxy(const HHitProxy* HitProxy)"
  },
  {
    "label": "AddHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHoverEffect(const struct FViewportHoverTarget& InHoverTarget)"
  },
  {
    "label": "RemoveHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHoverEffect(const struct FViewportHoverTarget& InHoverTarget)"
  },
  {
    "label": "ClearHoverFromObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHoverFromObjects()"
  },
  {
    "label": "SetCurrentViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentViewport()"
  },
  {
    "label": "SetLastKeyViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastKeyViewport()"
  },
  {
    "label": "GetActiveActorLock()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<AActor>)",
    "insertText": "GetActiveActorLock()"
  },
  {
    "label": "FindViewComponentForActor()",
    "kind": "Method",
    "detail": "Function (} return ActorLocks . ActorLock . LockedActor ; } UActorComponent*)",
    "insertText": "FindViewComponentForActor(AActor const* Actor)"
  },
  {
    "label": "GetCameraComponentForView()",
    "kind": "Method",
    "detail": "Function (UCameraComponent*)",
    "insertText": "GetCameraComponentForView()"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (const FLevelViewportActorLock& ActorLock = ActorLocks .)",
    "insertText": "GetLock(bLockedCameraView)"
  },
  {
    "label": "GetActorLock()",
    "kind": "Method",
    "detail": "Function (} const FLevelViewportActorLock&)",
    "insertText": "GetActorLock()"
  },
  {
    "label": "SetActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorLock(const FLevelViewportActorLock& InActorLock)"
  },
  {
    "label": "GetCinematicActorLock()",
    "kind": "Method",
    "detail": "Function (const FLevelViewportActorLock&)",
    "insertText": "GetCinematicActorLock()"
  },
  {
    "label": "SetCinematicActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicActorLock(const FLevelViewportActorLock& InActorLock)"
  },
  {
    "label": "GetPreviousActorLock()",
    "kind": "Method",
    "detail": "Function (const FLevelViewportActorLock&)",
    "insertText": "GetPreviousActorLock()"
  },
  {
    "label": "IsLockedToCinematic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLockedToCinematic()"
  },
  {
    "label": "UpdateHoveredObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHoveredObjects(const TSet<FViewportHoverTarget>& NewHoveredObjects)"
  },
  {
    "label": "SetViewportTypeFromTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportTypeFromTool(ELevelViewportType InViewportType)"
  },
  {
    "label": "TryPlacingAssetObject()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "TryPlacingAssetObject(ULevel* InLevel, UObject* AssetObject, const UE::AssetPlacementUtil::FExtraPlaceAssetOptions& AdditionalParams, const FViewportCursorLocation* CursorInformation = nullptr)"
  },
  {
    "label": "TryPlacingActorFromObject()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "TryPlacingActorFromObject(ULevel* InLevel, UObject* ObjToUse, bool bSelectActors, EObjectFlags ObjectFlags, UActorFactory* FactoryToUse, const FName Name = NAME_None, const FViewportCursorLocation* Cursor = nullptr)"
  },
  {
    "label": "IsDroppingPreviewActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDroppingPreviewActor()"
  },
  {
    "label": "UseAppTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAppTime()"
  },
  {
    "label": "SetIsDroppingPreviewActor()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetIsDroppingPreviewActor(bool bNewIsDroppingPreviewActor)"
  },
  {
    "label": "CanDropBlueprintAsset()",
    "kind": "Method",
    "detail": "Function (bIsDroppingPreviewActor = bNewIsDroppingPreviewActor ; } bool)",
    "insertText": "CanDropBlueprintAsset(const struct FSelectedAssetInfo&)"
  },
  {
    "label": "OnWidgetModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetModeChanged(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "OnEditorCleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorCleanse()"
  },
  {
    "label": "OnPreBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "HandleViewportSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportSettingChanged(FName PropertyName)"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChanged(UWorld* InWorld, EMapChangeType MapChangeType)"
  },
  {
    "label": "OnActorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorMoved(AActor* InActor)"
  },
  {
    "label": "UpdateLinkedOrthoViewports()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateLinkedOrthoViewports(bool bInvalidate = false)"
  },
  {
    "label": "GetViewportType()",
    "kind": "Method",
    "detail": "Function (ELevelViewportType)",
    "insertText": "GetViewportType()"
  },
  {
    "label": "SetViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportType(ELevelViewportType InViewportType)"
  },
  {
    "label": "RotateViewportType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateViewportType()"
  },
  {
    "label": "OverridePostProcessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePostProcessSettings(FSceneView& View)"
  },
  {
    "label": "ShouldLockPitch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLockPitch()"
  },
  {
    "label": "CheckHoveredHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckHoveredHitProxy(HHitProxy* HoveredHitProxy)"
  },
  {
    "label": "PerspectiveCameraMoved()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PerspectiveCameraMoved()"
  },
  {
    "label": "GetActiveSafeFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActiveSafeFrame(float& OutAspectRatio)"
  },
  {
    "label": "RedrawAllViewportsIntoThisScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawAllViewportsIntoThisScene()"
  },
  {
    "label": "CachePreDragActorTransform()",
    "kind": "Method",
    "detail": "Function (private : FTransform)",
    "insertText": "CachePreDragActorTransform(const AActor* InActor)"
  },
  {
    "label": "UpdateLockedActorViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLockedActorViewports(const AActor* InActor, const bool bCheckRealtime)"
  },
  {
    "label": "UpdateLockedActorViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLockedActorViewport(const AActor* InActor, const bool bCheckRealtime)"
  },
  {
    "label": "MoveLockedActorToCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveLockedActorToCamera()"
  },
  {
    "label": "HaveSelectedObjectsBeenChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveSelectedObjectsBeenChanged()"
  },
  {
    "label": "CacheElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheElementsToManipulate(const bool bForceRefresh = false)"
  },
  {
    "label": "ResetElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulate(const bool bClearList = true)"
  },
  {
    "label": "ResetElementsToManipulateFromSelectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulateFromSelectionChange(const UTypedElementSelectionSet* InSelectionSet)"
  },
  {
    "label": "ResetElementsToManipulateFromProcessingDeferredElementsToDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulateFromProcessingDeferredElementsToDestroy()"
  },
  {
    "label": "GetSelectionSet()",
    "kind": "Method",
    "detail": "Function (const UTypedElementSelectionSet*)",
    "insertText": "GetSelectionSet()"
  },
  {
    "label": "AttemptApplyObjAsMaterialToSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptApplyObjAsMaterialToSurface(UObject* ObjToUse, class HModel* ModelHitProxy, FViewportCursorLocation& Cursor)"
  },
  {
    "label": "DropObjectsOnBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBackground(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, EObjectFlags ObjectFlags, TArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBackground(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, EObjectFlags ObjectFlags, TArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, bool bSelectActors = true, class UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnActor(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, AActor* DroppedUponActor, int32 DroppedUponSlot, EObjectFlags ObjectFlags, TArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnActor(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, AActor* DroppedUponActor, int32 DroppedUponSlot, EObjectFlags ObjectFlags, TArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, bool bSelectActors = true, class UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnBSPSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBSPSurface(FSceneView* View, struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, HModel* TargetProxy, EObjectFlags ObjectFlags, TArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnBSPSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBSPSurface(FSceneView* View, struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, HModel* TargetProxy, EObjectFlags ObjectFlags, TArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, bool bSelectActors = true, UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnWidget(FSceneView* View, struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, bool bCreateDropPreview = false)"
  },
  {
    "label": "ProjectActorsIntoWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectActorsIntoWorld(const TArray<AActor*>& Actors, FViewport* Viewport, const FVector& Drag, const FRotator& Rot)"
  },
  {
    "label": "DrawBrushDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBrushDetails(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "FindViewComponentForActor()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindViewComponentForActor(AActor const* Actor, TSet<AActor const*>& CheckedActors)"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (public : TSet<FViewportHoverTarget> HoveredObjects ; TWeakPtr<class ILevelEditor> ParentLevelEditor ; TArray<FName> ViewHiddenLayers ; TBitArray<> VolumeActorVisibility ; FVector LastEditorViewLocation ; FRotator LastEditorViewRotation ; FVector ColorScale ; FLinearColor FadeColor ; float FadeAmount ; bool bEnableFading ; bool bEnableColorScaling ; bool bDrawBaseInfo ; bool bDuplicateOnNextDrag ; bool bDuplicateActorsInProgress ; bool bIsTrackingBrushModification ; bool bOnlyMovedPivot ; bool bLockedCameraView ; bool bNeedToRestoreComponentBeingMovedFlag ; bool bHasBegunGizmoManipulation ; bool bReceivedFocusRecently ; bool bAlwaysShowModeWidgetAfterSelectionChanges ; private : TArray<TWeakObjectPtr<AActor>> DropPreviewActors ; TWeakPtr<FTypedElementList> StaticDropPreviewElements ; TSharedPtr<FTypedElementList> DropPreviewElements ; bool bIsDroppingPreviewActor ; TMap<TWeakObjectPtr<const AActor>,FTransform> PreDragActorTransforms ; TMap<FTypedElementHandle,FTransform> PreDragElementTransforms ; bool bHasCachedElementsToManipulate = false ; FTypedElementListRef CachedElementsToManipulate ; TBitArray<> SpriteCategoryVisibility ; UWorld* World ; FTrackingTransaction TrackingTransaction ; TOptional<FTransform> CachedPilotTransform ; int32 DropPreviewMouseX ; int32 DropPreviewMouseY ; bool bWasControlledByOtherViewport ; bool bCurrentlyEditingThroughMovementWidget ; struct FActorLockStack { const FLevelViewportActorLock&)",
    "insertText": "GetLock(bool bAllowActorLock = true)"
  }
]