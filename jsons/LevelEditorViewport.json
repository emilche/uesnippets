[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDragTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragTool"
  },
  {
    "label": "HModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HModel"
  },
  {
    "label": "IAssetFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetFactoryInterface"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FViewportHoverTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportHoverTarget"
  },
  {
    "label": "FTrackingTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackingTransaction"
  },
  {
    "label": "ETransactionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETransactionState"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FLevelViewportActorLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelViewportActorLock"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FActorElementLevelEditorViewportInteractionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorElementLevelEditorViewportInteractionCustomization"
  },
  {
    "label": "FComponentElementLevelEditorViewportInteractionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentElementLevelEditorViewportInteractionCustomization"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "FViewportHoverTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportHoverTarget"
  },
  {
    "label": "FViewportHoverTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportHoverTarget"
  },
  {
    "label": "FSelectedAssetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedAssetInfo"
  },
  {
    "label": "HModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HModel"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "FActorLockStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorLockStack"
  },
  {
    "label": "FTrackingTransaction()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FTrackingTransaction()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin(const FText& Description, AActor* AdditionalActor = nullptr)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "BeginPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPending(const FText& Description)"
  },
  {
    "label": "PromotePendingToActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromotePendingToActive()"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectionChanged(const UTypedElementSelectionSet* InSelectionSet)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector2D( DropPreviewMouseX, DropPreviewMouseY )"
  },
  {
    "label": "FLevelEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FLevelEditorViewportClient(const TSharedPtr<class SLevelViewport>& InLevelViewport)"
  },
  {
    "label": "InitializeVisibilityFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeVisibilityFlags()"
  },
  {
    "label": "InitializeViewportInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeViewportInteraction()"
  },
  {
    "label": "ResetCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCamera()"
  },
  {
    "label": "ResetViewForNewMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewForNewMap()"
  },
  {
    "label": "PrepareCameraForPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareCameraForPIE()"
  },
  {
    "label": "RestoreCameraFromPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreCameraFromPIE()"
  },
  {
    "label": "UpdateAudioListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioListener( const FSceneView& View )"
  },
  {
    "label": "ShouldUseMoveCanvasMovement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseMoveCanvasMovement(void)"
  },
  {
    "label": "UpdateViewForLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewForLockedActor(float DeltaTime=0.f)"
  },
  {
    "label": "MoveCameraToLockedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCameraToLockedActor()"
  },
  {
    "label": "ApplyDeltaToActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActors( const FVector& InDrag, const FRotator& InRot, const FVector& InScale )"
  },
  {
    "label": "ApplyDeltaToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToActor( AActor* InActor, const FVector& InDeltaDrag, const FRotator& InDeltaRot, const FVector& InDeltaScale )"
  },
  {
    "label": "ApplyDeltaToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToComponent(USceneComponent* InComponent, const FVector& InDeltaDrag, const FRotator& InDeltaRot, const FVector& InDeltaScale)"
  },
  {
    "label": "ApplyDeltaToSelectedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToSelectedElements(const FTransform& InDeltaTransform)"
  },
  {
    "label": "ApplyDeltaToElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToElement(const FTypedElementHandle& InElementHandle, const FTransform& InDeltaTransform)"
  },
  {
    "label": "MirrorSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorSelectedActors(const FVector& InMirrorScale)"
  },
  {
    "label": "MirrorSelectedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorSelectedElements(const FVector& InMirrorScale)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFocusBounds(FTypedElementListConstRef InElements, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "GetElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (FTypedElementListConstRef)",
    "insertText": "GetElementsToManipulate(const bool bForceRefresh = false)"
  },
  {
    "label": "DrawTextureStreamingBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTextureStreamingBounds(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "CopyLayoutFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLayoutFromViewport( const FLevelEditorViewportClient& InViewport )"
  },
  {
    "label": "SetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpriteCategoryVisibility( const FName& InSpriteCategory, bool bVisible )"
  },
  {
    "label": "SetSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpriteCategoryVisibility( int32 Index, bool bVisible )"
  },
  {
    "label": "SetAllSpriteCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllSpriteCategoryVisibility( bool bVisible )"
  },
  {
    "label": "SetReferenceToWorldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceToWorldContext(FWorldContext& WorldContext)"
  },
  {
    "label": "RemoveReferenceToWorldContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToWorldContext(FWorldContext& WorldContext)"
  },
  {
    "label": "AddHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHoverEffect( const struct FViewportHoverTarget& InHoverTarget )"
  },
  {
    "label": "RemoveHoverEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHoverEffect( const struct FViewportHoverTarget& InHoverTarget )"
  },
  {
    "label": "ClearHoverFromObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHoverFromObjects()"
  },
  {
    "label": "SetCurrentViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentViewport()"
  },
  {
    "label": "SetLastKeyViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastKeyViewport()"
  },
  {
    "label": "SetActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorLock(AActor* Actor)"
  },
  {
    "label": "SetActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorLock(const FLevelViewportActorLock& InActorLock)"
  },
  {
    "label": "SetCinematicActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicActorLock(AActor* Actor)"
  },
  {
    "label": "SetCinematicActorLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCinematicActorLock(const FLevelViewportActorLock& InActorLock)"
  },
  {
    "label": "UpdateHoveredObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredObjects( const TSet<FViewportHoverTarget>& NewHoveredObjects )"
  },
  {
    "label": "SetViewportTypeFromTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportTypeFromTool(ELevelViewportType InViewportType)"
  },
  {
    "label": "TryPlacingAssetObject()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "TryPlacingAssetObject(ULevel* InLevel, UObject* AssetObject,\n\t\tconst UE::AssetPlacementUtil::FExtraPlaceAssetOptions& AdditionalParams,\n\t\tconst FViewportCursorLocation* CursorInformation = nullptr)"
  },
  {
    "label": "SetEditingThroughMovementWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditingThroughMovementWidget()"
  },
  {
    "label": "CanDropBlueprintAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDropBlueprintAsset( const struct FSelectedAssetInfo& )"
  },
  {
    "label": "OnWidgetModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetModeChanged(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "OnEditorCleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorCleanse()"
  },
  {
    "label": "OnPreBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "HandleViewportSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportSettingChanged(FName PropertyName)"
  },
  {
    "label": "OnMapChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChanged(UWorld* InWorld, EMapChangeType MapChangeType)"
  },
  {
    "label": "OnActorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorMoved(AActor* InActor)"
  },
  {
    "label": "CachePreDragActorTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CachePreDragActorTransform(const AActor* InActor)"
  },
  {
    "label": "UpdateLockedActorViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLockedActorViewports(const AActor* InActor, const bool bCheckRealtime)"
  },
  {
    "label": "UpdateLockedActorViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLockedActorViewport(const AActor* InActor, const bool bCheckRealtime)"
  },
  {
    "label": "MoveLockedActorToCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveLockedActorToCamera()"
  },
  {
    "label": "CacheElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheElementsToManipulate(const bool bForceRefresh = false)"
  },
  {
    "label": "ResetElementsToManipulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulate(const bool bClearList = true)"
  },
  {
    "label": "ResetElementsToManipulateFromSelectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulateFromSelectionChange(const UTypedElementSelectionSet* InSelectionSet)"
  },
  {
    "label": "ResetElementsToManipulateFromProcessingDeferredElementsToDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementsToManipulateFromProcessingDeferredElementsToDestroy()"
  },
  {
    "label": "AttemptApplyObjAsMaterialToSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptApplyObjAsMaterialToSurface( UObject* ObjToUse, class HModel* ModelHitProxy, FViewportCursorLocation& Cursor )"
  },
  {
    "label": "DropObjectsOnBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBackground(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, \n\t\tEObjectFlags ObjectFlags, TArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBackground(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, EObjectFlags ObjectFlags, TArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, bool bSelectActors = true, class UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnActor(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects,\n\t\tAActor* DroppedUponActor, int32 DroppedUponSlot, EObjectFlags ObjectFlags,\n\t\tTArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnActor(struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, \n\t\tAActor* DroppedUponActor, int32 DroppedUponSlot, EObjectFlags ObjectFlags, \n\t\tTArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, \n\t\tbool bSelectActors = true, class UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnBSPSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBSPSurface(FSceneView* View, struct FViewportCursorLocation& Cursor, \n\t\tconst TArray<UObject*>& DroppedObjects, HModel* TargetProxy, EObjectFlags ObjectFlags,\n\t\tTArray<FTypedElementHandle>& OutNewItems, const FDropObjectOptions& Options)"
  },
  {
    "label": "DropObjectsOnBSPSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnBSPSurface(FSceneView* View, struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, HModel* TargetProxy, EObjectFlags ObjectFlags, TArray<AActor*>& OutNewActors, bool bCreateDropPreview = false, bool bSelectActors = true, UActorFactory* FactoryToUse = NULL)"
  },
  {
    "label": "DropObjectsOnWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropObjectsOnWidget(FSceneView* View, struct FViewportCursorLocation& Cursor, const TArray<UObject*>& DroppedObjects, bool bCreateDropPreview = false)"
  },
  {
    "label": "ProjectActorsIntoWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProjectActorsIntoWorld(const TArray<AActor*>& Actors, FViewport* Viewport, const FVector& Drag, const FRotator& Rot)"
  },
  {
    "label": "DrawBrushDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBrushDetails(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  }
]