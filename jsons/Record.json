[
  {
    "label": "ListRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListRecTy"
  },
  {
    "label": "MultiClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiClass"
  },
  {
    "label": "Record",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Record"
  },
  {
    "label": "RecordVal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordVal"
  },
  {
    "label": "RecordKeeper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordKeeper"
  },
  {
    "label": "RecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecTy"
  },
  {
    "label": "RecTyKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RecTyKind"
  },
  {
    "label": "BitRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitRecTy"
  },
  {
    "label": "BitsRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitsRecTy"
  },
  {
    "label": "IntRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntRecTy"
  },
  {
    "label": "StringRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRecTy"
  },
  {
    "label": "ListRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListRecTy"
  },
  {
    "label": "DagRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DagRecTy"
  },
  {
    "label": "RecordRecTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordRecTy"
  },
  {
    "label": "Record",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Record"
  },
  {
    "label": "Init",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Init"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "InitKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InitKind"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "TypedInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedInit"
  },
  {
    "label": "UnsetInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnsetInit"
  },
  {
    "label": "BitInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitInit"
  },
  {
    "label": "BitsInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitsInit"
  },
  {
    "label": "IntInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntInit"
  },
  {
    "label": "StringInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringInit"
  },
  {
    "label": "ListInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListInit"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "OpInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpInit"
  },
  {
    "label": "UnOpInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnOpInit"
  },
  {
    "label": "UnaryOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UnaryOp"
  },
  {
    "label": "BinOpInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BinOpInit"
  },
  {
    "label": "BinaryOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BinaryOp"
  },
  {
    "label": "TernOpInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TernOpInit"
  },
  {
    "label": "TernaryOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TernaryOp"
  },
  {
    "label": "VarInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VarInit"
  },
  {
    "label": "VarBitInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VarBitInit"
  },
  {
    "label": "VarListElementInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VarListElementInit"
  },
  {
    "label": "DefInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefInit"
  },
  {
    "label": "Record",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Record"
  },
  {
    "label": "FieldInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldInit"
  },
  {
    "label": "DagInit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DagInit"
  },
  {
    "label": "RecordVal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordVal"
  },
  {
    "label": "Record",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Record"
  },
  {
    "label": "MultiClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiClass"
  },
  {
    "label": "RecordKeeper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecordKeeper"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "LessRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessRecord"
  },
  {
    "label": "LessRecordByID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessRecordByID"
  },
  {
    "label": "LessRecordFieldName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessRecordFieldName"
  },
  {
    "label": "LessRecordRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessRecordRegister"
  },
  {
    "label": "RecordParts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RecordParts"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "getAsString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAsString()"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Invalid operand id for binary operator\")"
  },
  {
    "label": "getLHS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getLHS()"
  },
  {
    "label": "getRHS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRHS()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Invalid operand id for ternary operator\")"
  },
  {
    "label": "getLHS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getLHS()"
  },
  {
    "label": "getMHS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getMHS()"
  },
  {
    "label": "getRHS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRHS()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getName()"
  },
  {
    "label": "RecordVal()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RecordVal(Init *N, RecTy *T, bool P)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "checkName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkName()"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(Init *Name)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const std::string &Name)"
  },
  {
    "label": "resolveReferencesTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resolveReferencesTo(const RecordVal *RV)"
  }
]