[
  {
    "label": "FResolveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfo"
  },
  {
    "label": "FResolveInfoCached",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfoCached"
  },
  {
    "label": "FResolveInfoAsync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfoAsync"
  },
  {
    "label": "FResolveInfoAsyncWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolveInfoAsyncWorker"
  },
  {
    "label": "FResolveInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" IPAddress . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" class FResolveInfo { protected :)",
    "insertText": "FResolveInfo()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetErrorCode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetErrorCode()"
  },
  {
    "label": "GetResolvedAddress()",
    "kind": "Method",
    "detail": "Function (const FInternetAddr&)",
    "insertText": "GetResolvedAddress()"
  },
  {
    "label": "FResolveInfoCached()",
    "kind": "Method",
    "detail": "Function (} ; class FResolveInfoCached : public FResolveInfo { protected : TSharedPtr<FInternetAddr> Addr ;)",
    "insertText": "FResolveInfoCached()"
  },
  {
    "label": "FResolveInfoCached()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FResolveInfoCached(const FInternetAddr& InAddr)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanAbandon()"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedExchange(&Parent->bShouldAbandon, true)"
  },
  {
    "label": "FResolveInfoAsync()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedPtr<FInternetAddr> Addr ; ANSICHAR HostName [ 2 5 6 ] ; int32 ErrorCode ; volatile int32 bShouldAbandon ; FAsyncTask<FResolveInfoAsyncWorker> AsyncTask ; public :)",
    "insertText": "FResolveInfoAsync(const ANSICHAR* InHostName)"
  },
  {
    "label": "StartAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsyncTask()"
  },
  {
    "label": "StartBackgroundTask()",
    "kind": "Method",
    "detail": "Function (AsyncTask .)",
    "insertText": "StartBackgroundTask()"
  }
]