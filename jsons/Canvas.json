[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FCanvasIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanvasIcon"
  },
  {
    "label": "FDisplayDebugManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayDebugManager"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "ELastCharacterIndexFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELastCharacterIndexFormat"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Engine / EngineTypes . h \" # include \" CanvasItem . h \" # include \" CanvasTypes . h \" # include \" Canvas . generated . h \" class UMaterialInterface ; class UReporterGraph ; class UTexture ; class FSceneView ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=CanvasIcon)"
  },
  {
    "label": "FCanvasIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasIcon() : Texture(nullptr) , U(0) , V(0) , UL(0) , VL(0)"
  },
  {
    "label": "FDisplayDebugManager()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDisplayDebugManager { private : FCanvasTextItem DebugTextItem ; FVector2f CurrentPos ; float NextColumXPos ; float MaxCharHeight ; FVector2f InitialPos ; class UCanvas* Canvas ; public :)",
    "insertText": "FDisplayDebugManager() : DebugTextItem(FCanvasTextItem(FVector2D(0, 0), FText::GetEmpty(), nullptr, FLinearColor::White)) , CurrentPos(FVector2f::ZeroVector) , NextColumXPos(0.f) , MaxCharHeight(0.f) , InitialPos(FVector2f::ZeroVector) , Canvas(nullptr)"
  },
  {
    "label": "EnableShadow()",
    "kind": "Method",
    "detail": "Function (DebugTextItem .)",
    "insertText": "EnableShadow(FLinearColor::Black)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(class UCanvas* InCanvas, const UFont* NewFont, FVector2D InInitialPosition)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(NewFont)"
  },
  {
    "label": "InitialPos()",
    "kind": "Method",
    "detail": "Function (Canvas = InCanvas ;)",
    "insertText": "InitialPos(FVector2f)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (CurrentPos = InitialPos ; NextColumXPos = 0 . f ; } void)",
    "insertText": "SetFont(const UFont* NewFont)"
  },
  {
    "label": "GetMaxCharHeight()",
    "kind": "Method",
    "detail": "Function (DebugTextItem . Font = NewFont ; MaxCharHeight = DebugTextItem . Font ->)",
    "insertText": "GetMaxCharHeight()"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetDrawColor(const FColor& NewColor)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (DebugTextItem .)",
    "insertText": "SetColor(NewColor.ReinterpretAsLinear())"
  },
  {
    "label": "SetLinearDrawColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinearDrawColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (DebugTextItem .)",
    "insertText": "SetColor(NewColor)"
  },
  {
    "label": "DrawString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawString(const FString& InDebugString, const float& OptionalXOffset = 0.f)"
  },
  {
    "label": "AddColumnIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumnIfNeeded()"
  },
  {
    "label": "GetTextScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTextScale()"
  },
  {
    "label": "GetYStep()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetYStep()"
  },
  {
    "label": "GetXPos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetXPos()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(transient, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (int32 UnsafeSizeX ; int32 UnsafeSizeY ; int32 SafeZonePadX ; int32 SafeZonePadY ; int32 SafeZonePadEX ; int32 SafeZonePadEY ; int32 CachedDisplayWidth ; int32 CachedDisplayHeight ; FDisplayDebugManager DisplayDebugManager ; public : FCanvas* Canvas ; FSceneView* SceneView ; FMatrix ViewProjectionMatrix ; FQuat HmdOrientation ; void)",
    "insertText": "Init(int32 InSizeX, int32 InSizeY, FSceneView* InSceneView, FCanvas* InCanvas)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "SetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetView(FSceneView* InView)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "ApplySafeZoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySafeZoneTransform()"
  },
  {
    "label": "PopSafeZoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSafeZoneTransform()"
  },
  {
    "label": "UpdateSafeZoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSafeZoneData()"
  },
  {
    "label": "UpdateAllCanvasSafeZoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllCanvasSafeZoneData()"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, EBlendMode BlendMode=BLEND_Translucent)"
  },
  {
    "label": "ClippedStrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClippedStrLen(const UFont* Font, float ScaleX, float ScaleY, int32& XL, int32& YL, FStringView Text)"
  },
  {
    "label": "WrappedStrLenf()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "WrappedStrLenf(const UFont* Font, float ScaleX, float ScaleY, int32& XL, int32& YL, const TCHAR* Fmt, ...)"
  },
  {
    "label": "WrappedPrint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WrappedPrint(bool Draw, float X, float Y, int32& out_XL, int32& out_YL, const UFont* Font, float ScaleX, float ScaleY, bool bCenterTextX, bool bCenterTextY, FStringView Text, const FFontRenderInfo& RenderInfo)"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DrawText(const UFont* InFont, FStringView InText, float X, float Y, float XScale = 1.f, float YScale = 1.f, const FFontRenderInfo& RenderInfo = FFontRenderInfo())"
  },
  {
    "label": "DrawText()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DrawText(const UFont* InFont, const FText& InText, float X, float Y, float XScale = 1.f, float YScale = 1.f, const FFontRenderInfo& RenderInfo = FFontRenderInfo())"
  },
  {
    "label": "MeasureStringInternal()",
    "kind": "Method",
    "detail": "Function (# endif enum ELastCharacterIndexFormat { LastWholeCharacterBeforeOffset,CharacterAtOffset,Unused,} ; void)",
    "insertText": "MeasureStringInternal(FTextSizingParameters& Parameters, FStringView Text, const int32 StopAfterHorizontalOffset, const ELastCharacterIndexFormat CharIndexFormat, int32& OutLastCharacterIndex)"
  },
  {
    "label": "CanvasStringSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CanvasStringSize(FTextSizingParameters& Parameters, FStringView Text)"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString(FCanvasWordWrapper& Wrapper, FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString(FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Project(FVector Location, bool bClampToZeroPlane = true)"
  },
  {
    "label": "Deproject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deproject(FVector2D ScreenPos, FVector& WorldOrigin, FVector& WorldDirection)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, float& XL, float& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, double& XL, double& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, float& XL, float& YL, bool bDPIAware = false)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, double& XL, double& YL, bool bDPIAware = false)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "TextSize(const UFont* InFont, FStringView InText, float& XL, float& YL, float ScaleX=1.f, float ScaleY=1.f)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TextSize(const UFont* InFont, FStringView InText, double& XL, double& YL, double ScaleX=1.f, double ScaleY=1.f)"
  },
  {
    "label": "SetLinearDrawColor()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetLinearDrawColor(FLinearColor InColor, float OpacityOverride=-1.f)"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawColor(uint8 R, uint8 G, uint8 B, uint8 A = 255)"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawColor(FColor const& C)"
  },
  {
    "label": "CreateFontRenderInfo()",
    "kind": "Method",
    "detail": "Function (FFontRenderInfo)",
    "insertText": "CreateFontRenderInfo(bool bClipText = false, bool bEnableShadow = false, FLinearColor GlowColor = FLinearColor(), FVector2D GlowOuterRadius = FVector2D(), FVector2D GlowInnerRadius = FVector2D())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool bKeepOrigin = false)"
  },
  {
    "label": "SetClip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClip(float X, float Y)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCenter(float& outX, float& outY)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCenter(double& outX, double& outY)"
  },
  {
    "label": "MakeIcon()",
    "kind": "Method",
    "detail": "Function (FCanvasIcon)",
    "insertText": "MakeIcon(class UTexture* Texture, float U = 0.f, float V = 0.f, float UL = 0.f, float VL = 0.f)"
  },
  {
    "label": "DrawScaledIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawScaledIcon(FCanvasIcon Icon, float X, float Y, FVector Scale)"
  },
  {
    "label": "DrawIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawIcon(FCanvasIcon Icon, float X, float Y, float Scale = 0.f)"
  },
  {
    "label": "DrawDebugGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugGraph(const FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, FVector2D RangeX, FVector2D RangeY)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, const FVector2D& InPosition)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, float X, float Y)"
  },
  {
    "label": "GetReporterGraph()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<class UReporterGraph>)",
    "insertText": "GetReporterGraph()"
  },
  {
    "label": "GetDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScale()"
  }
]