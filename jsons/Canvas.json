[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FCanvasIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanvasIcon"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FDisplayDebugManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayDebugManager"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "ELastCharacterIndexFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELastCharacterIndexFormat"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "DrawString()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DrawString(const FString& InDebugString, const float& OptionalXOffset = 0.f)"
  },
  {
    "label": "AddColumnIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumnIfNeeded()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 InSizeX, int32 InSizeY, FSceneView* InSceneView, FCanvas* InCanvas)"
  },
  {
    "label": "SetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetView(FSceneView* InView)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "ApplySafeZoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySafeZoneTransform()"
  },
  {
    "label": "PopSafeZoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSafeZoneTransform()"
  },
  {
    "label": "UpdateSafeZoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSafeZoneData()"
  },
  {
    "label": "UpdateAllCanvasSafeZoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllCanvasSafeZoneData()"
  },
  {
    "label": "DrawTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTile(UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, EBlendMode BlendMode=BLEND_Translucent)"
  },
  {
    "label": "ClippedStrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClippedStrLen(const UFont* Font, float ScaleX, float ScaleY, int32& XL, int32& YL, FStringView Text)"
  },
  {
    "label": "WrappedStrLenf()",
    "kind": "Method",
    "detail": "Function (VARARGS)",
    "insertText": "WrappedStrLenf(const UFont* Font, float ScaleX, float ScaleY, int32& XL, int32& YL, const TCHAR* Fmt, ...)"
  },
  {
    "label": "WrappedPrint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WrappedPrint(bool Draw, float X, float Y, int32& out_XL, int32& out_YL, const UFont* Font, float ScaleX, float ScaleY, bool bCenterTextX, bool bCenterTextY, FStringView Text, const FFontRenderInfo& RenderInfo)"
  },
  {
    "label": "MeasureStringInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeasureStringInternal(FTextSizingParameters& Parameters, FStringView Text, const int32 StopAfterHorizontalOffset, const ELastCharacterIndexFormat CharIndexFormat, int32& OutLastCharacterIndex)"
  },
  {
    "label": "MeasureStringInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeasureStringInternal(FTextSizingParameters& Parameters, const TCHAR* const Text, const int32 TextLength, const int32 StopAfterHorizontalOffset, const ELastCharacterIndexFormat CharIndexFormat, int32& OutLastCharacterIndex)"
  },
  {
    "label": "CanvasStringSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CanvasStringSize(FTextSizingParameters& Parameters, FStringView Text)"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString(FCanvasWordWrapper& Wrapper, FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "WrapString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapString(FTextSizingParameters& Parameters, const float InCurX, FStringView Text, TArray<FWrappedStringElement>& out_Lines, FCanvasWordWrapper::FWrappedLineData* const OutWrappedLineData = nullptr)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, float& XL, float& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, double& XL, double& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FAnsiStringView InText, float& XL, float& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FAnsiStringView InText, double& XL, double& YL, bool bDPIAware, FCanvas* InCanvas)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, float& XL, float& YL, bool bDPIAware = false)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FStringView InText, double& XL, double& YL, bool bDPIAware = false)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FAnsiStringView InText, float& XL, float& YL, bool bDPIAware = false)"
  },
  {
    "label": "StrLen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrLen(const UFont* InFont, FAnsiStringView InText, double& XL, double& YL, bool bDPIAware = false)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TextSize( const UFont* InFont, FStringView InText, float& XL, float& YL, float ScaleX=1.f, float ScaleY=1.f)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TextSize( const UFont* InFont, FStringView InText, double& XL, double& YL, double ScaleX=1.f, double ScaleY=1.f)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TextSize( const UFont* InFont, FAnsiStringView InText, float& XL, float& YL, float ScaleX=1.f, float ScaleY=1.f)"
  },
  {
    "label": "TextSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TextSize( const UFont* InFont, FAnsiStringView InText, double& XL, double& YL, double ScaleX=1.f, double ScaleY=1.f)"
  },
  {
    "label": "SetLinearDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDrawColor(FLinearColor InColor, float OpacityOverride=-1.f)"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawColor(uint8 R, uint8 G, uint8 B, uint8 A = 255)"
  },
  {
    "label": "SetDrawColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawColor(FColor const& C)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool bKeepOrigin = false)"
  },
  {
    "label": "SetClip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClip(float X, float Y)"
  },
  {
    "label": "MakeIcon()",
    "kind": "Method",
    "detail": "Function (FCanvasIcon)",
    "insertText": "MakeIcon(class UTexture* Texture, float U = 0.f, float V = 0.f, float UL = 0.f, float VL = 0.f)"
  },
  {
    "label": "DrawScaledIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawScaledIcon(FCanvasIcon Icon, float X, float Y, FVector Scale)"
  },
  {
    "label": "DrawIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawIcon(FCanvasIcon Icon, float X, float Y, float Scale = 0.f)"
  },
  {
    "label": "DrawDebugGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugGraph(const FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, FVector2D RangeX, FVector2D RangeY)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem( FCanvasItem& Item )"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem( FCanvasItem& Item, const FVector2D& InPosition )"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem( FCanvasItem& Item, float X, float Y )"
  },
  {
    "label": "GetReporterGraph()",
    "kind": "Method",
    "detail": "Function (UReporterGraph>)",
    "insertText": "GetReporterGraph()"
  },
  {
    "label": "K2_DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_DrawLine(FVector2D ScreenPositionA=FVector2D::ZeroVector, FVector2D ScreenPositionB=FVector2D::ZeroVector, float Thickness=1.0f, FLinearColor RenderColor=FLinearColor::White)"
  },
  {
    "label": "K2_DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness=1.0f, FLinearColor RenderColor=FLinearColor::White)"
  },
  {
    "label": "K2_DrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles)"
  },
  {
    "label": "K2_DrawMaterialTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles)"
  },
  {
    "label": "K2_DrawPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_DrawPolygon(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius=FVector2D::UnitVector, int32 NumberOfSides=3, FLinearColor RenderColor=FLinearColor::White)"
  },
  {
    "label": "K2_Project()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "K2_Project(FVector WorldLocation)"
  },
  {
    "label": "K2_Deproject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection)"
  },
  {
    "label": "K2_StrLen()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "K2_StrLen(UFont* RenderFont, const FString& RenderText)"
  },
  {
    "label": "K2_TextSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "K2_TextSize(UFont* RenderFont, const FString& RenderText, FVector2D Scale=FVector2D::UnitVector)"
  }
]