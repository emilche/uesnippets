[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FOcclusionQueryHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionQueryHelpers"
  },
  {
    "label": "TScenePrimitiveArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScenePrimitiveArray"
  },
  {
    "label": "GetNumBufferedFrames()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" typedef TBitArray<SceneRenderingBitArrayAllocator> FSceneBitArray ; typedef TConstSetBitIterator<SceneRenderingBitArrayAllocator> FSceneSetBitIterator ; typedef TConstDualSetBitIterator<SceneRenderingBitArrayAllocator,SceneRenderingBitArrayAllocator> FSceneDualSetBitIterator ; class FScene ; class FOcclusionQueryHelpers { public : enum { MaxBufferedOcclusionFrames = 4 } ; int32)",
    "insertText": "GetNumBufferedFrames(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetQueryLookupIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetQueryLookupIndex(int32 CurrentFrame, int32 NumBufferedFrames)"
  },
  {
    "label": "GetQueryIssueIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 QueryIndex = CurrentFrame % NumBufferedFrames ; return QueryIndex ; } uint32)",
    "insertText": "GetQueryIssueIndex(int32 CurrentFrame, int32 NumBufferedFrames)"
  },
  {
    "label": "TScenePrimitiveArray()",
    "kind": "Method",
    "detail": "Function (const uint32 QueryIndex = CurrentFrame % NumBufferedFrames ; return QueryIndex ; } } ; template<T> class TScenePrimitiveArray { const int32 NumElementsPerChunk = 1 0 2 4 ; public :)",
    "insertText": "TScenePrimitiveArray()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (T&)",
    "insertText": "Add(const T& Element)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ChunkType* Chunk = new ChunkType ; Chunk ->)",
    "insertText": "Reserve(NumElementsPerChunk)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Chunks .)",
    "insertText": "Emplace(Chunk)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} NumElements + + ; ChunkType& Chunk =* Chunks .)",
    "insertText": "Last()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(uint32 Count, EAllowShrinking AllowShrinking)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const uint32 NumElementsNew = NumElements - Count ;)",
    "insertText": "while(NumElements != NumElementsNew)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Chunk .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Remove\") FORCEINLINE void Remove(uint32 Count, bool bAllowShrinking)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Count, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Count)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Chunks .)",
    "insertText": "Reserve(NumChunks(Count))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "Get(int32 ElementIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const uint32 ChunkIndex = ElementIndex / NumElementsPerChunk ; const uint32 ChunkElementIndex = ElementIndex % NumElementsPerChunk ;)",
    "insertText": "return(*Chunks[ChunkIndex])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  }
]