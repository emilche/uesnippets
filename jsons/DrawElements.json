[
  {
    "label": "FSlateRenderBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderBatch"
  },
  {
    "label": "FSlateDrawLayerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawLayerHandle"
  },
  {
    "label": "FSlateResourceHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateResourceHandle"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDataPayload"
  },
  {
    "label": "FSlateGradientStop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateGradientStop"
  },
  {
    "label": "FSlateCachedFastPathRenderingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedFastPathRenderingData"
  },
  {
    "label": "FSlateCachedElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementData"
  },
  {
    "label": "FSlateCachedElementList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementList"
  },
  {
    "label": "FSlateCachedElementsHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementsHandle"
  },
  {
    "label": "FSlateElementBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatcher"
  },
  {
    "label": "FDeferredPaint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredPaint"
  },
  {
    "label": "FWidgetDrawElementState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetDrawElementState"
  },
  {
    "label": "FSlateCachedFastPathRenderingData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Rendering / DrawElementCoreTypes . h \" # include \" Rendering / DrawElementTypes . h \" # include \" Rendering / DrawElementPayloads . h \" # include \" Tasks / Task . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Fonts / FontCache . h \" # include \" Rendering / ShaderResourceManager . h \" # include \" DrawElementPayloads . h \" # endif class FSlateRenderBatch ; class FSlateDrawLayerHandle ; class FSlateResourceHandle ; class FSlateWindowElementList ; class SWidget ; class SWindow ; struct FSlateBrush ; struct FSlateDataPayload ; struct FSlateGradientStop ; struct FSlateCachedFastPathRenderingData { ~)",
    "insertText": "FSlateCachedFastPathRenderingData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CachedClipStates .)",
    "insertText": "Reset()"
  },
  {
    "label": "FSlateCachedElementList()",
    "kind": "Method",
    "detail": "Function (} TArray<FSlateCachedClipState,TInlineAllocator<1>> CachedClipStates ; FSlateVertexArray Vertices ; FSlateIndexArray Indices ; } ; struct FSlateCachedElementData ; struct FSlateCachedElementList {)",
    "insertText": "FSlateCachedElementList(FSlateCachedElementData* InParentData, const SWidget* InWidget) : OwningWidget(InWidget) , ParentData(InParentData) , CachedRenderingData(nullptr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "FSlateCachedElementList()",
    "kind": "Method",
    "detail": "Function (CachedRenderingData = new FSlateCachedFastPathRenderingData ; } ~)",
    "insertText": "FSlateCachedElementList()"
  },
  {
    "label": "ClearCachedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedElements()"
  },
  {
    "label": "GetOwningData()",
    "kind": "Method",
    "detail": "Function (FSlateCachedElementData*)",
    "insertText": "GetOwningData()"
  },
  {
    "label": "AddCachedClipState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedClipState(FSlateCachedClipState& ClipStateToCache)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NumElements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumElements()"
  },
  {
    "label": "DestroyCachedData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DestroyCachedData()"
  },
  {
    "label": "RemoveFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromCache()"
  },
  {
    "label": "IsOwnedByWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwnedByWidget(const SWidget* Widget)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "HasCachedElements()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCachedElements()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FSlateCachedElementsHandle& Other)"
  },
  {
    "label": "FSlateCachedElementsHandle()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FSlateCachedElementsHandle(TSharedRef<FSlateCachedElementList>& DataPtr) : Ptr(DataPtr)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<FSlateCachedElementList> Ptr ; } ; struct FSlateCachedElementData { class FSlateElementBatcher ; struct FSlateCachedElementsHandle ; void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddCache()",
    "kind": "Method",
    "detail": "Function (FSlateCachedElementsHandle)",
    "insertText": "AddCache(const SWidget* Widget)"
  },
  {
    "label": "GetClipStateFromParent()",
    "kind": "Method",
    "detail": "Function (const FSlateClippingState*)",
    "insertText": "GetClipStateFromParent(const FSlateClippingManager& ParentClipManager)"
  },
  {
    "label": "ValidateWidgetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateWidgetOwner(TSharedPtr<FSlateCachedElementList> List, const SWidget* CurrentWidget)"
  },
  {
    "label": "AddCachedElement()",
    "kind": "Method",
    "detail": "Function (template<EElementType ElementType> TSlateDrawElement<ElementType>&)",
    "insertText": "AddCachedElement(FSlateCachedElementsHandle& CacheHandle, const FSlateClippingManager& ParentClipManager, const SWidget* CurrentWidget)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (using FSlateElementType = TSlateDrawElement<ElementType> ; TSharedPtr<FSlateCachedElementList> List = CacheHandle . Ptr .)",
    "insertText": "Pin()"
  },
  {
    "label": "ValidateWidgetOwner()",
    "kind": "Method",
    "detail": "Function (# if WITH_SLATE_DEBUGGING)",
    "insertText": "ValidateWidgetOwner(List, CurrentWidget)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# endif FSlateDrawElementArray<FSlateElementType>& Container = List -> DrawElements .)",
    "insertText": "Get(uint8)ElementType>()"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (FSlateElementType& NewElement = Container .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "SetIsCached()",
    "kind": "Method",
    "detail": "Function (NewElement .)",
    "insertText": "SetIsCached(true)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ListsWithNewData .)",
    "insertText": "AddUnique(List.Get())"
  },
  {
    "label": "GetClipStateFromParent()",
    "kind": "Method",
    "detail": "Function (const FSlateClippingState* ExistingClipState =)",
    "insertText": "GetClipStateFromParent(ParentClipManager)"
  },
  {
    "label": "FindOrAddCachedClipState()",
    "kind": "Method",
    "detail": "Function (FSlateCachedClipState& CachedClipState =)",
    "insertText": "FindOrAddCachedClipState(ExistingClipState)"
  },
  {
    "label": "AddCachedClipState()",
    "kind": "Method",
    "detail": "Function (List ->)",
    "insertText": "AddCachedClipState(CachedClipState)"
  },
  {
    "label": "SetCachedClippingState()",
    "kind": "Method",
    "detail": "Function (NewElement .)",
    "insertText": "SetCachedClippingState(&CachedClipState.ClippingState.Get())"
  },
  {
    "label": "AddCachedRenderBatch()",
    "kind": "Method",
    "detail": "Function (} return NewElement ; } FSlateRenderBatch&)",
    "insertText": "AddCachedRenderBatch(FSlateRenderBatch&& NewBatch, int32& OutIndex)"
  },
  {
    "label": "RemoveCachedRenderBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedRenderBatches(const TArray<int32>& CachedRenderBatchIndices)"
  },
  {
    "label": "FindOrAddCachedClipState()",
    "kind": "Method",
    "detail": "Function (FSlateCachedClipState&)",
    "insertText": "FindOrAddCachedClipState(const FSlateClippingState* RefClipState)"
  },
  {
    "label": "CleanupUnusedClipStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupUnusedClipStates()"
  },
  {
    "label": "GetCachedBatches()",
    "kind": "Method",
    "detail": "Function (const TSparseArray<FSlateRenderBatch>&)",
    "insertText": "GetCachedBatches()"
  },
  {
    "label": "GetListsWithNewData()",
    "kind": "Method",
    "detail": "Function (TArrayView<FSlateCachedElementList* const>)",
    "insertText": "GetListsWithNewData()"
  },
  {
    "label": "RemoveList()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RemoveList(FSlateCachedElementsHandle& CacheHandle)"
  },
  {
    "label": "FSlateWindowElementList()",
    "kind": "Method",
    "detail": "Function (private : TSparseArray<FSlateRenderBatch> CachedBatches ; TArray<TSharedPtr<FSlateCachedElementList>> CachedElementLists ; TArray<FSlateCachedElementList*,TInlineAllocator<5 0>> ListsWithNewData ; TArray<FSlateCachedClipState> CachedClipStates ; } ; class FSlateWindowElementList : public FNoncopyable { class FSlateElementBatcher ; public :)",
    "insertText": "FSlateWindowElementList(const TSharedPtr<SWindow>& InPaintWindow)"
  },
  {
    "label": "FSlateWindowElementList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateWindowElementList()"
  },
  {
    "label": "GetPaintWindow()",
    "kind": "Method",
    "detail": "Function (SWindow*)",
    "insertText": "GetPaintWindow()"
  },
  {
    "label": "GetRenderWindow()",
    "kind": "Method",
    "detail": "Function (} SWindow*)",
    "insertText": "GetRenderWindow()"
  },
  {
    "label": "GetUncachedDrawElements()",
    "kind": "Method",
    "detail": "Function (} const FSlateDrawElementMap&)",
    "insertText": "GetUncachedDrawElements()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<EElementType ElementType = EElementType::ET_NonMapped> TSlateDrawElement<ElementType>&)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (using FSlateElementType = TSlateDrawElement<ElementType> ; const bool bAllowCache = CachedElementDataListStack .)",
    "insertText": "Num() > 0 && WidgetDrawStack.Num() && !WidgetDrawStack.Top()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (const int32 InsertIdx = Container .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (# if WITH_SLATE_DEBUGGING FSlateDebuggingElementTypeAddedEventArgs ElementTypeAddedArgs {* this,InsertIdx,ElementType } ; FSlateDebugging::ElementTypeAdded .)",
    "insertText": "Broadcast(ElementTypeAddedArgs)"
  },
  {
    "label": "AddUninitializedLookup()",
    "kind": "Method",
    "detail": "Function (# endif FSlateElementType& NewElement = Container [ InsertIdx ] ; return NewElement ; } } FSlateDrawElement&)",
    "insertText": "AddUninitializedLookup(EElementType InElementType = EElementType::ET_NonMapped)"
  },
  {
    "label": "PushClip()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PushClip(const FSlateClippingZone& InClipZone)"
  },
  {
    "label": "GetClippingIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClippingIndex()"
  },
  {
    "label": "GetClippingStackDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClippingStackDepth()"
  },
  {
    "label": "GetClippingState()",
    "kind": "Method",
    "detail": "Function (} TOptional<FSlateClippingState>)",
    "insertText": "GetClippingState()"
  },
  {
    "label": "PopClip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopClip()"
  },
  {
    "label": "PopClipToStackIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopClipToStackIndex(int32 Index)"
  },
  {
    "label": "GetClippingManager()",
    "kind": "Method",
    "detail": "Function (FSlateClippingManager&)",
    "insertText": "GetClippingManager()"
  },
  {
    "label": "PopPixelSnappingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopPixelSnappingMethod()"
  },
  {
    "label": "GetPixelSnappingMethod()",
    "kind": "Method",
    "detail": "Function (EWidgetPixelSnapping)",
    "insertText": "GetPixelSnappingMethod()"
  },
  {
    "label": "FDeferredPaint()",
    "kind": "Method",
    "detail": "Function (struct FDeferredPaint { public :)",
    "insertText": "FDeferredPaint(const TSharedRef<const SWidget>& InWidgetToPaint, const FPaintArgs& InArgs, const FGeometry InAllottedGeometry, const FWidgetStyle& InWidgetStyle, bool InParentEnabled)"
  },
  {
    "label": "ExecutePaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExecutePaint(int32 LayerId, FSlateWindowElementList& OutDrawElements, const FSlateRect& MyCullingRect)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (FDeferredPaint)",
    "insertText": "Copy(const FPaintArgs& InArgs)"
  },
  {
    "label": "FDeferredPaint()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FDeferredPaint(const FDeferredPaint& Copy, const FPaintArgs& InArgs)"
  },
  {
    "label": "QueueDeferredPainting()",
    "kind": "Method",
    "detail": "Function (const TWeakPtr<const SWidget> WidgetToPaintPtr ; const FPaintArgs Args ; const FGeometry AllottedGeometry ; const FWidgetStyle WidgetStyle ; const bool bParentEnabled ; } ; void)",
    "insertText": "QueueDeferredPainting(const FDeferredPaint& InDeferredPaint)"
  },
  {
    "label": "PaintDeferred()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintDeferred(int32 LayerId, const FSlateRect& MyCullingRect)"
  },
  {
    "label": "ShouldResolveDeferred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldResolveDeferred()"
  },
  {
    "label": "EndDeferredGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDeferredGroup()"
  },
  {
    "label": "GetDeferredPaintList()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FDeferredPaint>>)",
    "insertText": "GetDeferredPaintList()"
  },
  {
    "label": "PopPaintingWidget()",
    "kind": "Method",
    "detail": "Function (FSlateCachedElementsHandle)",
    "insertText": "PopPaintingWidget(const SWidget& CurrentWidget)"
  },
  {
    "label": "PushCachedElementData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCachedElementData(FSlateCachedElementData& CachedElementData)"
  },
  {
    "label": "PopCachedElementData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopCachedElementData()"
  },
  {
    "label": "ResetElementList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetElementList()"
  },
  {
    "label": "GetBatchData()",
    "kind": "Method",
    "detail": "Function (FSlateBatchData&)",
    "insertText": "GetBatchData()"
  },
  {
    "label": "FinishMergeRenderBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishMergeRenderBatches()"
  },
  {
    "label": "SetIsInGameLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsInGameLayer(bool bInGameLayer)"
  },
  {
    "label": "GetIsInGameLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsInGameLayer()"
  },
  {
    "label": "GetCurrentCachedElementWithNewData()",
    "kind": "Method",
    "detail": "Function (TArrayView<FSlateCachedElementList* const>)",
    "insertText": "GetCurrentCachedElementWithNewData()"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (} else { return TArrayView<FSlateCachedElementList*)",
    "insertText": "const()"
  },
  {
    "label": "AddCachedElement()",
    "kind": "Method",
    "detail": "Function (} } private : template<EElementType ElementType> TSlateDrawElement<ElementType>&)",
    "insertText": "AddCachedElement()"
  },
  {
    "label": "GetCurrentCachedElementData()",
    "kind": "Method",
    "detail": "Function (FSlateCachedElementData* CurrentCachedElementData =)",
    "insertText": "GetCurrentCachedElementData()"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (FWidgetDrawElementState& CurrentWidgetState = WidgetDrawStack .)",
    "insertText": "Top()"
  },
  {
    "label": "AddCache()",
    "kind": "Method",
    "detail": "Function (CurrentWidgetState . CacheHandle = CurrentCachedElementData ->)",
    "insertText": "AddCache(CurrentWidgetState.Widget)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (} return CurrentCachedElementData -> AddCachedElement<)",
    "insertText": "ElementType(CurrentWidgetState.CacheHandle, GetClippingManager(), CurrentWidgetState.Widget)"
  },
  {
    "label": "GetCachedElementDataList()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FSlateCachedElementData* const>)",
    "insertText": "GetCachedElementDataList()"
  },
  {
    "label": "StartMergeRenderBatches()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartMergeRenderBatches()"
  },
  {
    "label": "STAT()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SWindow> WeakPaintWindow ; SWindow* RawPaintWindow ; FMemStackBase MemManager ;)",
    "insertText": "STAT(int32 MemManagerAllocatedMemory;)"
  },
  {
    "label": "FWidgetDrawElementState()",
    "kind": "Method",
    "detail": "Function (FSlateBatchData BatchData ; FSlateBatchData BatchDataHDR ; UE::Tasks::FTask MergeBatchDataTask ; FSlateClippingManager ClippingManager ; TArray<EWidgetPixelSnapping,TInlineAllocator<4>> PixelSnappingMethodStack ; TArray<TSharedPtr<FDeferredPaint>> DeferredPaintList ; bool bNeedsDeferredResolve ; TArray<int32> ResolveToDeferredIndex ; struct FWidgetDrawElementState {)",
    "insertText": "FWidgetDrawElementState(FSlateCachedElementsHandle& InCurrentHandle, bool bInIsVolatile, const SWidget* InWidget) : CacheHandle(InCurrentHandle) , Widget(InWidget) , bIsVolatile(bInIsVolatile)"
  }
]