[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "getConstant()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCVALUE_H # define LLVM_MC_MCVALUE_H # include \" llvm / MC / MCExpr . h \" # include \" llvm / MC / MCSymbol . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> namespace llvm { class MCAsmInfo ; class raw_ostream ; class MCValue { const MCSymbolRefExpr* SymA,* SymB ; int64_t Cst ; uint32_t RefKind ; public : int64_t)",
    "insertText": "getConstant()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "getAccessVariant()",
    "kind": "Method",
    "detail": "Function (MCSymbolRefExpr::VariantKind)",
    "insertText": "getAccessVariant()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (MCValue)",
    "insertText": "get(const MCSymbolRefExpr *SymA, const MCSymbolRefExpr *SymB = nullptr, int64_t Val = 0, uint32_t RefKind = 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (MCValue R ;)",
    "insertText": "assert((!SymB || SymA) && \"Invalid relocatable MCValue!\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (R . Cst = Val ; R . SymA = SymA ; R . SymB = SymB ; R . RefKind = RefKind ; return R ; } MCValue)",
    "insertText": "get(int64_t Val)"
  }
]