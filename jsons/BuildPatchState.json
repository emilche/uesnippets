[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert((uint32)BuildPatchServices::EBuildPatchState::NUM_PROGRESS_STATES == 12, \"Please add support for the extra values to the Lex functions below.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(BuildPatchServices::EBuildPatchState State)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case BuildPatchServices::EBuildPatchState::Value: return TEXT(#Value) switch (State)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"InvalidOrMax\")"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(BuildPatchServices::EBuildPatchState& Error, const TCHAR* Buffer)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETURN_IF_EQUAL(Value) if (FCString::Stricmp(Buffer, TEXT(#Value)) == 0)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Error = BuildPatchServices::EBuildPatchState::Value ; return ; } const TCHAR* const Prefix =)",
    "insertText": "TEXT(\"EBuildPatchState::\")"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const SIZE_T PrefixLen =)",
    "insertText": "Strlen(Prefix)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(Queued)"
  }
]