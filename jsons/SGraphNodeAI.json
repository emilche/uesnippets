[
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "UAIGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIGraphNode"
  },
  {
    "label": "FDragAIGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragAIGraphNode"
  },
  {
    "label": "AIGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AIGRAPH_API"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Styling / SlateColor . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" SGraphNode . h \" # include \" SGraphPin . h \" # include \" Editor / GraphEditor / Private / DragNode . h \" class SGraphPanel ; class SToolTip ; class UAIGraphNode ; class FDragAIGraphNode : public FDragNode { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FDragAIGraphNode, FDragNode) static TSharedRef<FDragAIGraphNode> New(const TSharedRef<SGraphPanel>& InGraphPanel, const TSharedRef<SGraphNode>& InDraggedNode)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDragAIGraphNode>)",
    "insertText": "New(const TSharedRef<SGraphPanel>& InGraphPanel, const TArray< TSharedRef<SGraphNode> >& InDraggedNodes)"
  },
  {
    "label": "GetDropTargetNode()",
    "kind": "Method",
    "detail": "Function (UAIGraphNode*)",
    "insertText": "GetDropTargetNode()"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UAIGraphNode* InNode)"
  },
  {
    "label": "GetComplexTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip>)",
    "insertText": "GetComplexTooltip()"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& SenderGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const TSharedRef<SGraphPanel>& OwnerPanel)"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPin(const TSharedRef<SGraphPin>& PinToAdd)"
  },
  {
    "label": "OnMouseDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseDown(const FGeometry& SenderGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AddSubNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubNode(TSharedPtr<SGraphNode> SubNodeWidget)"
  },
  {
    "label": "GetSubNodeUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphNode>)",
    "insertText": "GetSubNodeUnderCursor(const FGeometry& WidgetGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDragOverMarkerVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDragOverMarkerVisibility()"
  },
  {
    "label": "SetDragMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDragMarker(bool bEnabled)"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TSharedPtr<SGraphNode>> SubNodes ; uint32 bDragMarkerVisible : 1 ; FText)",
    "insertText": "GetTitle()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetDescriptionVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDescriptionVisibility()"
  },
  {
    "label": "GetPreviewCornerText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPreviewCornerText()"
  },
  {
    "label": "GetNameIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNameIcon()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SGraphPinAI : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinAI)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InPin)"
  },
  {
    "label": "GetPinColor()",
    "kind": "Method",
    "detail": "Function (protected : FSlateColor)",
    "insertText": "GetPinColor()"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "GetPinBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPinBorder()"
  }
]