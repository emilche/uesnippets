[
  {
    "label": "PROP_PTR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROP_PTR"
  },
  {
    "label": "IBasePropertyT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBasePropertyT"
  },
  {
    "label": "IBasePropertyT()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_IBaseProperty_h # define Alembic_Abc_IBaseProperty_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / IObject . h> # include<Alembic / Abc / IArchive . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { template<class PROP_PTR> class IBasePropertyT : public Base { protected : typedef IBasePropertyT<PROP_PTR> this_type ; typedef IBasePropertyT<PROP_PTR> operator_bool_base_type ;)",
    "insertText": "IBasePropertyT()"
  },
  {
    "label": "IBasePropertyT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IBasePropertyT(PROP_PTR iPtr, ErrorHandler::Policy iPolicy)"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (public : const AbcA::PropertyHeader&)",
    "insertText": "getHeader()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "getPropertyType()",
    "kind": "Method",
    "detail": "Function (} AbcA::PropertyType)",
    "insertText": "getPropertyType()"
  },
  {
    "label": "isScalar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isScalar()"
  },
  {
    "label": "isArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArray()"
  },
  {
    "label": "isCompound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCompound()"
  },
  {
    "label": "isSimple()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSimple()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (} const AbcA::MetaData&)",
    "insertText": "getMetaData()"
  },
  {
    "label": "getDataType()",
    "kind": "Method",
    "detail": "Function (} const AbcA::DataType&)",
    "insertText": "getDataType()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} IObject)",
    "insertText": "getObject()"
  },
  {
    "label": "getPtr()",
    "kind": "Method",
    "detail": "Function (PROP_PTR)",
    "insertText": "getPtr()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_property .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "IBasePropertyT()",
    "kind": "Method",
    "detail": "Function (protected : PROP_PTR m_property ; } ; template<class PROP_PTR> IBasePropertyT<PROP_PTR)",
    "insertText": "IBasePropertyT(PROP_PTR iPtr, ErrorHandler::Policy iPolicy ) : m_property( iPtr)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( iPolicy)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IBasePropertyT::getHeader()\")"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END()"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IBasePropertyT::getObject()\")"
  }
]