[
  {
    "label": "ReportBlockData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReportBlockData"
  },
  {
    "label": "ReportBlockDataObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReportBlockDataObserver"
  },
  {
    "label": "ReportBlockData()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_INCLUDE_REPORT_BLOCK_DATA_H_ # define MODULES_RTP_RTCP_INCLUDE_REPORT_BLOCK_DATA_H_ # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { class ReportBlockData { public :)",
    "insertText": "ReportBlockData()"
  },
  {
    "label": "report_block()",
    "kind": "Method",
    "detail": "Function (const RTCPReportBlock&)",
    "insertText": "report_block()"
  },
  {
    "label": "SetReportBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReportBlock(RTCPReportBlock report_block, int64_t report_block_timestamp_utc_us)"
  },
  {
    "label": "AddRoundTripTimeSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRoundTripTimeSample(int64_t rtt_ms)"
  },
  {
    "label": "ReportBlockDataObserver()",
    "kind": "Method",
    "detail": "Function (private : RTCPReportBlock report_block_ ; int64_t report_block_timestamp_utc_us_ ; int64_t last_rtt_ms_ ; int64_t min_rtt_ms_ ; int64_t max_rtt_ms_ ; int64_t sum_rtt_ms_ ; size_t num_rtts_ ; } ; class ReportBlockDataObserver { public : ~)",
    "insertText": "ReportBlockDataObserver()"
  },
  {
    "label": "OnReportBlockDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportBlockDataUpdated(ReportBlockData report_block_data)"
  }
]