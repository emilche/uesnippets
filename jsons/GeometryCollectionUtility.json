[
  {
    "label": "TV3_PTS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TV3_PTS"
  },
  {
    "label": "TV3_NORM",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TV3_NORM"
  },
  {
    "label": "TV2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TV2"
  },
  {
    "label": "TV_INT3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TV_INT3"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AddGeometryProperties()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / GeometryCollection . h \" # include \" Templates / SharedPointer . h \" # include \" Async / ParallelFor . h \" namespace GeometryCollection { void)",
    "insertText": "AddGeometryProperties(FManagedArrayCollection* Collection)"
  },
  {
    "label": "MakeMeshElement()",
    "kind": "Method",
    "detail": "Function (template<class TV3_PTS,class TV3_NORM,class TV2,class TV_INT3> TSharedPtr<FGeometryCollection>)",
    "insertText": "MakeMeshElement(const TArray<TV3_PTS>& PointsIn, const TArray<TV3_NORM>& NormalsIn, const TArray<TV_INT3>& TrianglesIn, const TArray<TV2>& UVsIn, const FTransform& Xf, const FTransform& GeoXf = FTransform::Identity, const int NumberOfMaterials = 2)"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (FGeometryCollection* RestCollection = new)",
    "insertText": "FGeometryCollection()"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (RestCollection ->)",
    "insertText": "AddElements(PointsIn.Num(), FGeometryCollection::VerticesGroup)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (RestCollection ->)",
    "insertText": "AddElements(TrianglesIn.Num(), FGeometryCollection::FacesGroup)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (RestCollection ->)",
    "insertText": "AddElements(1, FGeometryCollection::TransformGroup)"
  },
  {
    "label": "FindUVLayer()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FVector3f>& Vertices = RestCollection -> Vertex ; TManagedArray<FVector3f>& Normals = RestCollection -> Normal ; TManagedArray<FVector3f>& TangentU = RestCollection -> TangentU ; TManagedArray<FVector3f>& TangentV = RestCollection -> TangentV ; TManagedArray<FVector2f>& UV0 =* RestCollection ->)",
    "insertText": "FindUVLayer(0)"
  },
  {
    "label": "FTransform3f()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FLinearColor>& Colors = RestCollection -> Color ; TManagedArray<FIntVector>& Indices = RestCollection -> Indices ; TManagedArray<bool>& Visible = RestCollection -> Visible ; TManagedArray<int32>& MaterialIndex = RestCollection -> MaterialIndex ; TManagedArray<int32>& MaterialID = RestCollection -> MaterialID ; TManagedArray<bool>& Internal = RestCollection -> Internal ; TManagedArray<FTransform3f>& Transform = RestCollection -> Transform ; TManagedArray<int32>& SimulationType = RestCollection -> SimulationType ; TManagedArray<int32>& BoneMap = RestCollection -> BoneMap ; Transform [ 0 ] =)",
    "insertText": "FTransform3f(Xf)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (Transform [ 0 ] .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SimulationType [ 0 ] = FGeometryCollection::ESimulationTypes::FST_Rigid ;)",
    "insertText": "for(int32 Idx = 0; Idx < PointsIn.Num(); ++Idx)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (Vertices [)",
    "insertText": "Idx(FVector3f)GeoXf.TransformPosition(FVector(PointsIn[Idx][0], PointsIn[Idx][1], PointsIn[Idx][2]))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Normals [ Idx ] = NormalsIn .)",
    "insertText": "Num() > Idx ? FVector3f(NormalsIn[Idx][0], NormalsIn[Idx][1], NormalsIn[Idx][2]) : FVector3f(0)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FVector2D UV = UVsIn .)",
    "insertText": "Num() > Idx ? FVector2D(UVsIn[Idx][0], UVsIn[Idx][1]) : FVector2D(0)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UV0 [ Idx ] =)",
    "insertText": "FVector2f(UV)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Colors [ Idx ] = FLinearColor::White ; BoneMap [ Idx ] = 0 ; } const int NumberOfEachMaterial = TrianglesIn .)",
    "insertText": "Num()"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (const auto& Tri = TrianglesIn [ Idx ] ; Indices [ Idx ] =)",
    "insertText": "FIntVector(Tri[0], Tri[1], Tri[2])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Visible [ Idx ] = true ; Internal [ Idx ] = false ; MaterialIndex [ Idx ] = Idx ; MaterialID [ Idx ] = Idx / NumberOfEachMaterial ;)",
    "insertText": "for(int32 Axis = 0; Axis < 3; ++Axis)"
  },
  {
    "label": "Edge()",
    "kind": "Method",
    "detail": "Function (const FVector3f& Normal = Normals [ Tri [ Axis ] ] ; const FVector3f)",
    "insertText": "Edge(Vertices[Tri[(Axis + 1) % 3]] - Vertices[Tri[Axis]])"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (TangentU [ Tri [)",
    "insertText": "Axis(Edge ^ Normal).GetSafeNormal()"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (TangentV [ Tri [)",
    "insertText": "Axis(Normal ^ TangentU[Tri[Axis]]).GetSafeNormal()"
  },
  {
    "label": "AddGeometryProperties()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "AddGeometryProperties(RestCollection)"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (TManagedArray<FGeometryCollectionSection>& Sections = RestCollection -> Sections ; int FirstElement = RestCollection ->)",
    "insertText": "AddElements(NumberOfMaterials, FGeometryCollection::MaterialGroup)"
  },
  {
    "label": "FirstIndex()",
    "kind": "Method",
    "detail": "Function (Sections [ Element ] . MaterialID = Element ; Sections [ Element ] .)",
    "insertText": "FirstIndex(Element * NumberOfEachMaterial)"
  },
  {
    "label": "FGeometryCollection()",
    "kind": "Method",
    "detail": "Function (} return TSharedPtr<)",
    "insertText": "FGeometryCollection(RestCollection)"
  },
  {
    "label": "MakeCubeElement()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FGeometryCollection>)",
    "insertText": "MakeCubeElement(const FTransform& center, FVector Scale = FVector(1.f), int NumberOfMaterials = 2)"
  },
  {
    "label": "SetupCubeGridExample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCubeGridExample(TSharedPtr<FGeometryCollection> GeometryCollection)"
  },
  {
    "label": "SetupNestedBoneCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupNestedBoneCollection(FGeometryCollection * Collection)"
  },
  {
    "label": "SetupTwoClusteredCubesCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTwoClusteredCubesCollection(FGeometryCollection * Collection)"
  },
  {
    "label": "MakeMaterialsContiguous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeMaterialsContiguous(FGeometryCollection * Collection)"
  },
  {
    "label": "AttributeTransfer()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "AttributeTransfer(const FGeometryCollection * FromCollection, FGeometryCollection * ToCollection, const FName FromAttributeName, const FName ToAttributeName)"
  },
  {
    "label": "GenerateTemporaryGuids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTemporaryGuids(FManagedArrayCollection* Collection, int32 StartIdx = 0, bool bForceInit=false)"
  },
  {
    "label": "ComputeInnerAndOuterRadiiFromGeometryVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeInnerAndOuterRadiiFromGeometryVertices(const TManagedArray<FVector3f>& Vertices, const int32 VertexStart, const int32 VertexCount, float& OutInnerRadius, float& OutOuterRadius)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<T>& FromAttribute = FromCollection -> GetAttribute<)",
    "insertText": "T(FromAttributeName, FGeometryCollection::VerticesGroup)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TManagedArray<T>& ToAttribute = ToCollection -> ModifyAttribute<)",
    "insertText": "T(ToAttributeName, FGeometryCollection::VerticesGroup)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<FVector3f>& FromVertex = FromCollection -> Vertex ; TManagedArray<FVector3f>& ToVertex = ToCollection -> Vertex ;)",
    "insertText": "ParallelFor(ToCollection->NumElements(FGeometryCollection::VerticesGroup), [&](int32 ToIndex) { int32 ClosestFromIndex = -1; Chaos::FReal ClosestDist = UE_MAX_FLT; for (int32 FromIndex = 0, ni = FromVertex.Num(); FromIndex < ni ; ++FromIndex) { Chaos::FReal CurrDist = FVector3f::DistSquared(FromVertex[FromIndex], ToVertex[ToIndex]); if (CurrDist < ClosestDist) { ClosestDist = CurrDist; ClosestFromIndex = FromIndex; } } if (ClosestFromIndex != -1) { ToAttribute[ToIndex] = FromAttribute[ClosestFromIndex]; } })"
  }
]