[
  {
    "label": "FClassViewerFilterFuncs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerFilterFuncs"
  },
  {
    "label": "FClassViewerInitializationOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerInitializationOptions"
  },
  {
    "label": "FClassViewerNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerNode"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "IAssetReferenceFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetReferenceFilter"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FClassViewerFilterOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerFilterOption"
  },
  {
    "label": "IClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClassViewerFilter"
  },
  {
    "label": "IUnloadedBlueprintData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IUnloadedBlueprintData"
  },
  {
    "label": "FClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerFilter"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "CLASSVIEWER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLASSVIEWER_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Engine / EngineTypes . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Settings / ClassViewerSettings . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / TopLevelAssetPath . h \" class FClassViewerFilterFuncs ; class FClassViewerInitializationOptions ; class FClassViewerNode ; class FString ; class FTextFilterExpressionEvaluator ; class IAssetReferenceFilter ; class IAssetRegistry ; class UClass ; class UObject ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnClassViewerFilterOptionChanged, bool)"
  },
  {
    "label": "IClassViewerFilter()",
    "kind": "Method",
    "detail": "Function (class FClassViewerFilterOption { public : bool bEnabled = true ; TAttribute<FText> LabelText ; TAttribute<FText> ToolTipText ; FOnClassViewerFilterOptionChanged OnOptionChanged ; } ; class IClassViewerFilter { public : ~)",
    "insertText": "IClassViewerFilter()"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const UClass* InClass, TSharedRef< class FClassViewerFilterFuncs > InFilterFuncs)"
  },
  {
    "label": "IsUnloadedClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnloadedClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const TSharedRef< const class IUnloadedBlueprintData > InUnloadedClassData, TSharedRef< class FClassViewerFilterFuncs > InFilterFuncs)"
  },
  {
    "label": "GetFilterOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilterOptions(TArray<TSharedRef<FClassViewerFilterOption>>& OutFilterOptions)"
  },
  {
    "label": "FClassViewerFilter()",
    "kind": "Method",
    "detail": "Function (} } ; class FClassViewerFilter : public IClassViewerFilter { public :)",
    "insertText": "FClassViewerFilter(const FClassViewerInitializationOptions& InInitOptions)"
  },
  {
    "label": "IsNodeAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeAllowed(const FClassViewerInitializationOptions& InInitOptions, const TSharedRef<FClassViewerNode>& Node, const bool bCheckTextFilter)"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const UClass* InClass, TSharedRef< class FClassViewerFilterFuncs > InFilterFuncs, const bool bCheckTextFilter)"
  },
  {
    "label": "IsUnloadedClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnloadedClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const TSharedRef< const class IUnloadedBlueprintData > InUnloadedClassData, TSharedRef< class FClassViewerFilterFuncs > InFilterFuncs, const bool bCheckTextFilter)"
  },
  {
    "label": "FClassViewerFilterFuncs()",
    "kind": "Method",
    "detail": "Function (TArray<UClass*> InternalClasses ; TArray<FDirectoryPath> InternalPaths ; TSharedRef<FTextFilterExpressionEvaluator> TextFilter ; TSharedRef<FClassViewerFilterFuncs> FilterFunctions ; TSharedPtr<IAssetReferenceFilter> AssetReferenceFilter ; const IAssetRegistry& AssetRegistry ; } ; namespace EFilterReturn { enum Type { Failed = 0,Passed,NoItems } ; } class FClassViewerFilterFuncs { public : ~)",
    "insertText": "FClassViewerFilterFuncs()"
  },
  {
    "label": "IfInChildOfClassesSet()",
    "kind": "Method",
    "detail": "Function (} EFilterReturn::Type)",
    "insertText": "IfInChildOfClassesSet(TSet< const UClass* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfInChildOfClassesSet()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfInChildOfClassesSet(TSet< const UClass* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "IfMatchesAllInChildOfClassesSet()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAllInChildOfClassesSet(TSet< const UClass* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfMatchesAllInChildOfClassesSet()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAllInChildOfClassesSet(TSet< const UClass* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "IfMatchesAll_ObjectsSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAll_ObjectsSetIsAClass(TSet< const UObject* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfMatchesAll_ObjectsSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAll_ObjectsSetIsAClass(TSet< const UObject* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "IfMatchesAll_ClassesSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAll_ClassesSetIsAClass(TSet< const UClass* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfMatchesAll_ClassesSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatchesAll_ClassesSetIsAClass(TSet< const UClass* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "IfMatches_ClassesSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatches_ClassesSetIsAClass(TSet< const UClass* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfMatches_ClassesSetIsAClass()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfMatches_ClassesSetIsAClass(TSet< const UClass* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "IfInClassesSet()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfInClassesSet(TSet< const UClass* >& InSet, const UClass* InClass)"
  },
  {
    "label": "IfInClassesSet()",
    "kind": "Method",
    "detail": "Function (EFilterReturn::Type)",
    "insertText": "IfInClassesSet(TSet< const UClass* >& InSet, const TSharedPtr< const class IUnloadedBlueprintData > InClass)"
  },
  {
    "label": "HasAnyClassFlags()",
    "kind": "Method",
    "detail": "Function (} ; class IUnloadedBlueprintData { public : bool)",
    "insertText": "HasAnyClassFlags(uint32 InFlagsToCheck)"
  },
  {
    "label": "HasAllClassFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllClassFlags(uint32 InFlagsToCheck)"
  },
  {
    "label": "SetClassFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClassFlags(uint32 InFlags)"
  },
  {
    "label": "ImplementsInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementsInterface(const UClass* InInterface)"
  },
  {
    "label": "IsChildOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOf(const UClass* InClass)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsA(const UClass* InClass)"
  },
  {
    "label": "GetClassWithin()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetClassWithin()"
  },
  {
    "label": "GetNativeParent()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetNativeParent()"
  },
  {
    "label": "SetNormalBlueprintType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormalBlueprintType(bool bInNormalBPType)"
  },
  {
    "label": "IsNormalBlueprintType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNormalBlueprintType()"
  },
  {
    "label": "GetClassName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetClassName()"
  },
  {
    "label": "GetClassPathName()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathName()"
  }
]