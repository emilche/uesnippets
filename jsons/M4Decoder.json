[
  {
    "label": "M4Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4Image"
  },
  {
    "label": "M4MotionVectorMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4MotionVectorMgr"
  },
  {
    "label": "VIDStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIDStream"
  },
  {
    "label": "M4Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4Decoder"
  },
  {
    "label": "M4XCmdSingleThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4XCmdSingleThread"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" M4Global . h \" # include \" M4BitstreamParser . h \" # include \" M4Prediction . h \" # include \" M4XCmdSingleThread . h \" namespace vdecmpeg4 { class M4Image ; class M4MotionVectorMgr ; class VIDStream ; # define M4_MEM_OFFSET_LEFT_BLOCK 8 # define M4_MEM_SHIFT_MB_TO_Y 4 # define M4_MEM_SHIFT_MB_TO_UV 3 class M4Decoder { public : M4Decoder*)",
    "insertText": "create(M4MemHandler& memHandler)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(M4Decoder*& pDecoder, M4MemHandler& memHandler)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "init(const VIDDecoderSetup* setup)"
  },
  {
    "label": "initBuffers()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "initBuffers(int16 width, int16 height)"
  },
  {
    "label": "StreamSet()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "StreamSet(VIDStreamIO* pStream, VIDStreamEvents* pEvents)"
  },
  {
    "label": "StreamDecode()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "StreamDecode(float time, const VIDImage** result)"
  },
  {
    "label": "StreamEventsSet()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "StreamEventsSet(VIDStreamEvents* pEvents)"
  },
  {
    "label": "StreamSeekNotify()",
    "kind": "Method",
    "detail": "Function (mpStreamEvents = pEvents ; return VID_OK ; } VIDError)",
    "insertText": "StreamSeekNotify()"
  },
  {
    "label": "M4Decoder()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "M4Decoder(M4MemHandler& memHandler)"
  },
  {
    "label": "M4Decoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "M4Decoder()"
  },
  {
    "label": "iFrame()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "iFrame()"
  },
  {
    "label": "pFrame()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "pFrame(bool gmc)"
  },
  {
    "label": "bFrame()",
    "kind": "Method",
    "detail": "Function (VIDError)",
    "insertText": "bFrame()"
  },
  {
    "label": "mbIntra()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mbIntra(M4_MB* mb, int32 x, int32 y, bool useACPredition, uint32 cbp, uint8 quant)"
  },
  {
    "label": "mbInter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mbInter(M4_MB* mb, int32 x, int32 y, uint32 cbp, MV_PREDICTION mvPrediction, uint32 refImgNo)"
  },
  {
    "label": "mbInterpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mbInterpolate(uint32 refImgForward, uint32 refImgBackward, M4_MB* mb, int32 mbx, int32 mby, uint32 cbp, uint16 mbLastIdx = 0)"
  },
  {
    "label": "M4Decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4Decoder(const M4Decoder& pObj)"
  },
  {
    "label": "freeStuff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeStuff()"
  },
  {
    "label": "freeBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeBuffers()"
  },
  {
    "label": "AllocVidFrame()",
    "kind": "Method",
    "detail": "Function (M4Image*)",
    "insertText": "AllocVidFrame()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const M4Decoder&)",
    "insertText": "operator(const M4Decoder& pObj)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (private : int16 mWidth ; int16 mHeight ; uint16 mMBWidth ; uint16 mMBHeight ; uint32 mDecoderFlags ; M4Image* mCurrent ; M4Image* mReference [ 2 ] ; M4Image* mTempImage [ 2 ] ; M4_MB* mIPMacroblocks ; M4_MB* mBMacroblocks ; M4MotionVectorMgr* mMotVecMgr ; M4Bitstream mBitstream ; M4BitstreamParser mBitstreamParser ; M4Image** mpVidImage ; uint32 mNumVidImages ; uint32 mFrameCounter ; M4BitstreamCache mBitstreamCache ; VIDStreamIO* mpStreamIO ; VIDStreamEvents* mpStreamEvents ; M4XCmdSingleThread mXCommand ; class M4MotionVectorMgr ; class M4Image ; public : void* operator)",
    "insertText": "new(size_t sz, M4MemHandler& memSys)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* ptr)"
  },
  {
    "label": "SetVideoOutToBMP()",
    "kind": "Method",
    "detail": "Function (} const int32 mDequantTable [ 4 ] ; const uint32 mRoundtab [ 1 6 ] ; const uint8 mIntraMacroBlocks [ 8 ] ; M4MemHandler mMemSys ; M4_MEMORY_HANDLER # ifdef _M4_ENABLE_BMP_OUT void)",
    "insertText": "SetVideoOutToBMP(const char* pFileBaseName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (char mBaseName [ 2 5 6 ] ; # endif class M4XCmdSingleThread ;)",
    "insertText": "void(*mCbPrintf)(const char *pMessage)"
  },
  {
    "label": "VIDPrintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VIDPrintf(const char *pFormat, ...)"
  }
]