[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNode"
  },
  {
    "label": "FStructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructType"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpression"
  },
  {
    "label": "FStatement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatement"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTree"
  },
  {
    "label": "FOperationDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperationDescription"
  },
  {
    "label": "FSwizzleParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwizzleParameters"
  },
  {
    "label": "FCustomHLSLInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomHLSLInput"
  },
  {
    "label": "FScopedActiveStructField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedActiveStructField"
  },
  {
    "label": "CombineEvaluations()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Misc / EnumClassFlags . h \" # include \" Containers / BitArray . h \" # include \" Shader / ShaderTypes . h \" class UTexture ; namespace UE::Shader { enum class EPreshaderOpcode : uint8 ; } namespace UE::HLSLTree { class FNode ; class FStructType ; class FExpression ; class FStatement ; class FScope ; class FTree ; enum class EExpressionEvaluation : uint8 { None,Unknown,Shader,PreshaderLoop,Preshader,ConstantLoop,Constant,ConstantZero,} ; EExpressionEvaluation)",
    "insertText": "CombineEvaluations(EExpressionEvaluation Lhs, EExpressionEvaluation Rhs)"
  },
  {
    "label": "MakeLoopEvaluation()",
    "kind": "Method",
    "detail": "Function (EExpressionEvaluation)",
    "insertText": "MakeLoopEvaluation(EExpressionEvaluation Evaluation)"
  },
  {
    "label": "MakeNonLoopEvaluation()",
    "kind": "Method",
    "detail": "Function (EExpressionEvaluation)",
    "insertText": "MakeNonLoopEvaluation(EExpressionEvaluation Evaluation)"
  },
  {
    "label": "IsConstantEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstantEvaluation(EExpressionEvaluation Evaluation)"
  },
  {
    "label": "FOperationDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOperationDescription(const TCHAR* InName, const TCHAR* InOperator, int8 InNumInputs, Shader::EPreshaderOpcode InOpcode)"
  },
  {
    "label": "GetOperationDescription()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Name ; const TCHAR* Operator ; int8 NumInputs ; Shader::EPreshaderOpcode PreshaderOpcode ; } ; FOperationDescription)",
    "insertText": "GetOperationDescription(EOperation Op)"
  },
  {
    "label": "FSwizzleParameters()",
    "kind": "Method",
    "detail": "Function (struct FSwizzleParameters {)",
    "insertText": "FSwizzleParameters() : NumComponents(0), bHasSwizzle(false)"
  },
  {
    "label": "FSwizzleParameters()",
    "kind": "Method",
    "detail": "Function (SwizzleComponentIndex [ 0 ] = SwizzleComponentIndex [ 1 ] = SwizzleComponentIndex [ 2 ] = SwizzleComponentIndex [ 3 ] = INDEX_NONE ; })",
    "insertText": "FSwizzleParameters(int8 IndexR, int8 IndexG = INDEX_NONE, int8 IndexB = INDEX_NONE, int8 IndexA = INDEX_NONE)"
  },
  {
    "label": "GetSwizzleComponentIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSwizzleComponentIndex(int32 Index)"
  },
  {
    "label": "ComponentIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ComponentIndex(NumComponents == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MaxComponentIndex = INDEX_NONE ;)",
    "insertText": "for(int32 i = 0; i < NumComponents; ++i)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (MaxComponentIndex = FMath::Max<)",
    "insertText": "int32(MaxComponentIndex, SwizzleComponentIndex[i])"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(MaxComponentIndex != INDEX_NONE) ? (MaxComponentIndex + 1)"
  },
  {
    "label": "FCustomHLSLInput()",
    "kind": "Method",
    "detail": "Function (} int8 SwizzleComponentIndex [ 4 ] ; int8 NumComponents ; bool bHasSwizzle ; } ; struct FCustomHLSLInput {)",
    "insertText": "FCustomHLSLInput()"
  },
  {
    "label": "FCustomHLSLInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCustomHLSLInput(FStringView InName, const FExpression* InExpression) : Name(InName), Expression(InExpression)"
  },
  {
    "label": "FScopedActiveStructField()",
    "kind": "Method",
    "detail": "Function (} FStringView Name ; const FExpression* Expression = nullptr ; } ; typedef TArray<const Shader::FStructField*> FActiveStructFieldStack ; class FScopedActiveStructField { FActiveStructFieldStack& Stack ; public :)",
    "insertText": "FScopedActiveStructField(FActiveStructFieldStack& InStack, const Shader::FStructField* Field) : Stack(InStack)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Push(Field)"
  },
  {
    "label": "FScopedActiveStructField()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedActiveStructField()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  }
]