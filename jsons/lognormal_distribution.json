[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "lognormal_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "lognormal_distribution"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_RT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RT"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_LOGNORMAL_DISTRIBUTION_H # define _LIBCPP___RANDOM_LOGNORMAL_DISTRIBUTION_H # include<__config> # include<__random / normal_distribution . h> # include<cmath> # include<iosfwd> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _RealType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { normal_distribution<result_type> __nd_ ; public : typedef lognormal_distribution distribution_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "param_type(result_type __m = 0, result_type __s = 1) : __nd_(__m, __s)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "m()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "s()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const param_type& __x, const param_type& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class lognormal_distribution ; template<class _CharT,class _Traits,class _RT> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const lognormal_distribution<_RT>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _RT> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, lognormal_distribution<_RT>& __x)"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} ; private : param_type __p_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution() : lognormal_distribution(0)"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(result_type __m, result_type __s = 1) : __p_(param_type(__m, __s))"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(result_type __m = 0, result_type __s = 1) : __p_(param_type(__m, __s))"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const lognormal_distribution& __x, const lognormal_distribution& __y)"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(result_type __m, result_type __s = 1) : __nd_(__m, __s)"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(result_type __m = 0, result_type __s = 1) : __nd_(__m, __s)"
  },
  {
    "label": "lognormal_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "lognormal_distribution(const param_type& __p) : __nd_(__p.m(), __p.s())"
  },
  {
    "label": "__pn()",
    "kind": "Method",
    "detail": "Function (normal_distribution<result_type>::param_type)",
    "insertText": "__pn(__p.m(), __p.s())"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "param(const param_type& __p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (__nd_ .)",
    "insertText": "param(__pn)"
  }
]