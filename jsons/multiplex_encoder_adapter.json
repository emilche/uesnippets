[
  {
    "label": "AlphaCodecStream",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AlphaCodecStream"
  },
  {
    "label": "MultiplexEncoderAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplexEncoderAdapter"
  },
  {
    "label": "AdapterEncodedImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdapterEncodedImageCallback"
  },
  {
    "label": "MultiplexEncoderAdapter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_MULTIPLEX_INCLUDE_MULTIPLEX_ENCODER_ADAPTER_H_ # define MODULES_VIDEO_CODING_CODECS_MULTIPLEX_INCLUDE_MULTIPLEX_ENCODER_ADAPTER_H_ # include<map> # include<memory> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" modules / video_coding / codecs / multiplex / multiplex_encoded_image_packer . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { enum AlphaCodecStream { kYUVStream = 0,kAXXStream = 1,kAlphaCodecStreams = 2,} ; class MultiplexEncoderAdapter : public VideoEncoder { public :)",
    "insertText": "MultiplexEncoderAdapter(VideoEncoderFactory* factory, const SdpVideoFormat& associated_format, bool supports_augmenting_data = false)"
  },
  {
    "label": "MultiplexEncoderAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MultiplexEncoderAdapter()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitEncode(const VideoCodec* inst, const VideoEncoder::Settings& settings)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const LossNotification& loss_notification)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Release()"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(AlphaCodecStream stream_idx, const EncodedImage& encodedImage, const CodecSpecificInfo* codecSpecificInfo)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : class AdapterEncodedImageCallback ; VideoEncoderFactory* const factory_ ; const SdpVideoFormat associated_format_ ; std::vector<std::unique_ptr<VideoEncoder>> encoders_ ; std::vector<std::unique_ptr<AdapterEncodedImageCallback>> adapter_callbacks_ ; EncodedImageCallback* encoded_complete_callback_ ; std::map<uint32_t,MultiplexImage> stashed_images_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]