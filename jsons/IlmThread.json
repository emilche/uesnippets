[
  {
    "label": "ILMTHREAD_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILMTHREAD_EXPORT_TYPE"
  },
  {
    "label": "supportsThreads()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_ILM_THREAD_H # define INCLUDED_ILM_THREAD_H # include \" IlmThreadConfig . h \" # include \" IlmThreadExport . h \" # include \" IlmThreadNamespace . h \" # if ILMTHREAD_THREADING_ENABLED # include<thread> # endif ILMTHREAD_INTERNAL_NAMESPACE_HEADER_ENTER ILMTHREAD_EXPORT bool)",
    "insertText": "supportsThreads()"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (class ILMTHREAD_EXPORT_TYPE Thread { public : ILMTHREAD_EXPORT)",
    "insertText": "Thread()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "start()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "join()"
  },
  {
    "label": "joinable()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT bool)",
    "insertText": "joinable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : # if ILMTHREAD_THREADING_ENABLED std::thread _thread ; # endif Thread&)",
    "insertText": "operator(const Thread& t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Thread&)",
    "insertText": "operator(Thread&& t)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(const Thread& t)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(Thread&& t)"
  }
]