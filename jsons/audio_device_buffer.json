[
  {
    "label": "AudioDeviceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceBuffer"
  },
  {
    "label": "LogState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LogState"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "ResetRecStats()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_DEVICE_AUDIO_DEVICE_BUFFER_H_ # define MODULES_AUDIO_DEVICE_AUDIO_DEVICE_BUFFER_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" modules / audio_device / include / audio_device_defines . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / timestamp_aligner . h \" namespace webrtc { const size_t kMaxDeltaTimeInMs = 5 0 0 ; const size_t kMaxBufferSizeBytes = 3 8 4 0 ; class AudioDeviceBuffer { public : enum LogState { LOG_START = 0,LOG_STOP,LOG_ACTIVE,} ; struct Stats { void)",
    "insertText": "ResetRecStats()"
  },
  {
    "label": "ResetPlayStats()",
    "kind": "Method",
    "detail": "Function (rec_callbacks = 0 ; rec_samples = 0 ; max_rec_level = 0 ; } void)",
    "insertText": "ResetPlayStats()"
  },
  {
    "label": "AudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (play_callbacks = 0 ; play_samples = 0 ; max_play_level = 0 ; } uint64_t rec_callbacks = 0 ; uint64_t play_callbacks = 0 ; uint64_t rec_samples = 0 ; uint64_t play_samples = 0 ; int16_t max_rec_level = 0 ; int16_t max_play_level = 0 ; } ;)",
    "insertText": "AudioDeviceBuffer(TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "AudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioDeviceBuffer()"
  },
  {
    "label": "RegisterAudioCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterAudioCallback(AudioTransport* audio_callback)"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecording()"
  },
  {
    "label": "SetRecordingSampleRate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingSampleRate(uint32_t fsHz)"
  },
  {
    "label": "SetPlayoutSampleRate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutSampleRate(uint32_t fsHz)"
  },
  {
    "label": "RecordingSampleRate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "RecordingSampleRate()"
  },
  {
    "label": "PlayoutSampleRate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "PlayoutSampleRate()"
  },
  {
    "label": "SetRecordingChannels()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingChannels(size_t channels)"
  },
  {
    "label": "SetPlayoutChannels()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutChannels(size_t channels)"
  },
  {
    "label": "RecordingChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RecordingChannels()"
  },
  {
    "label": "PlayoutChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "PlayoutChannels()"
  },
  {
    "label": "SetRecordedBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordedBuffer(const void* audio_buffer, size_t samples_per_channel)"
  },
  {
    "label": "SetRecordedBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordedBuffer(const void* audio_buffer, size_t samples_per_channel, int64_t capture_timestamp_ns)"
  },
  {
    "label": "SetVQEData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVQEData(int play_delay_ms, int rec_delay_ms)"
  },
  {
    "label": "DeliverRecordedData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "DeliverRecordedData()"
  },
  {
    "label": "NewMicLevel()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "NewMicLevel()"
  },
  {
    "label": "RequestPlayoutData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RequestPlayoutData(size_t samples_per_channel)"
  },
  {
    "label": "GetPlayoutData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetPlayoutData(void* audio_buffer)"
  },
  {
    "label": "SetTypingStatus()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetTypingStatus(bool typing_status)"
  },
  {
    "label": "StartPeriodicLogging()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "StartPeriodicLogging()"
  },
  {
    "label": "StopPeriodicLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPeriodicLogging()"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats(LogState state)"
  },
  {
    "label": "UpdateRecStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecStats(int16_t max_abs, size_t samples_per_channel)"
  },
  {
    "label": "UpdatePlayStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlayStats(int16_t max_abs, size_t samples_per_channel)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker main_thread_checker_ ; Mutex lock_ ; rtc::TaskQueue task_queue_ ; AudioTransport* audio_transport_cb_ ; std::atomic<uint32_t> rec_sample_rate_ ; std::atomic<uint32_t> play_sample_rate_ ; std::atomic<size_t> rec_channels_ ; std::atomic<size_t> play_channels_ ; bool playing_)",
    "insertText": "RTC_GUARDED_BY(main_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::BufferT<int16_t> play_buffer_ ; rtc::BufferT<int16_t> rec_buffer_ ; bool typing_status_ ; int play_delay_ms_ ; int rec_delay_ms_ ; int64_t capture_timestamp_ns_ ; size_t num_stat_reports_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Stats stats_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]