[
  {
    "label": "AudioDeviceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceBuffer"
  },
  {
    "label": "LogState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LogState"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "AudioDeviceBuffer()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AudioDeviceBuffer(TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "RegisterAudioCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterAudioCallback(AudioTransport* audio_callback)"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecording()"
  },
  {
    "label": "SetRecordingSampleRate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingSampleRate(uint32_t fsHz)"
  },
  {
    "label": "SetPlayoutSampleRate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutSampleRate(uint32_t fsHz)"
  },
  {
    "label": "SetRecordingChannels()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingChannels(size_t channels)"
  },
  {
    "label": "SetPlayoutChannels()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutChannels(size_t channels)"
  },
  {
    "label": "SetRecordedBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordedBuffer(const void* audio_buffer,\n                                    size_t samples_per_channel)"
  },
  {
    "label": "SetRecordedBuffer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordedBuffer(const void* audio_buffer,\n                                    size_t samples_per_channel,\n                                    int64_t capture_timestamp_ns)"
  },
  {
    "label": "SetVQEData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVQEData(int play_delay_ms, int rec_delay_ms)"
  },
  {
    "label": "DeliverRecordedData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "DeliverRecordedData()"
  },
  {
    "label": "RequestPlayoutData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RequestPlayoutData(size_t samples_per_channel)"
  },
  {
    "label": "GetPlayoutData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetPlayoutData(void* audio_buffer)"
  },
  {
    "label": "SetTypingStatus()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetTypingStatus(bool typing_status)"
  },
  {
    "label": "StartPeriodicLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPeriodicLogging()"
  },
  {
    "label": "StopPeriodicLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPeriodicLogging()"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats(LogState state)"
  },
  {
    "label": "UpdateRecStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRecStats(int16_t max_abs, size_t samples_per_channel)"
  },
  {
    "label": "UpdatePlayStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlayStats(int16_t max_abs, size_t samples_per_channel)"
  },
  {
    "label": "ResetRecStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRecStats()"
  },
  {
    "label": "ResetPlayStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPlayStats()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (playing_)",
    "insertText": "RTC_GUARDED_BY(main_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recording_)",
    "insertText": "RTC_GUARDED_BY(main_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (num_stat_reports_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_timer_task_time_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (play_start_time_)",
    "insertText": "RTC_GUARDED_BY(main_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rec_start_time_)",
    "insertText": "RTC_GUARDED_BY(main_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stats_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_stats_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (log_stats_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  }
]