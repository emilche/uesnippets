[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_linux_intel64_H)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_linux_intel64_H # include<stdint . h> # include \" gcc_ia32_common . h \" # define __TBB_WORDSIZE 8 # define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE # define)",
    "insertText": "__TBB_compiler_fence() __asm__ __volatile__(\"\": : :\"memory\") #define __TBB_control_consistency_helper() __TBB_compiler_fence() #define __TBB_acquire_consistency_helper() __TBB_compiler_fence() #define __TBB_release_consistency_helper() __TBB_compiler_fence() #ifndef __TBB_full_memory_fence #define __TBB_full_memory_fence() __asm__ __volatile__(\"mfence\": : :\"memory\") #endif #define __TBB_MACHINE_DEFINE_ATOMICS(S,T,X) \\ static inline T __TBB_machine_cmpswp##S (volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ T result ; \\ \\ __asm__)",
    "insertText": "__volatile__(\"lock\\ncmpxchg\" X \" %2,%1\" \\ : \"=a\"(result), \"=m\"(*(volatile T*)ptr) \\ : \"q\"(value), \"0\"(comparand), \"m\"(*(volatile T*)ptr) \\ : \"memory\")"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (\\ return result ; \\ } \\ \\ T __TBB_machine_fetchadd # #)",
    "insertText": "S(volatile void *ptr, T addend)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ T result ; \\ __asm__)",
    "insertText": "__volatile__(\"lock\\nxadd\" X \" %0,%1\" \\ : \"=r\"(result),\"=m\"(*(volatile T*)ptr) \\ : \"0\"(addend), \"m\"(*(volatile T*)ptr) \\ : \"memory\")"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (\\ return result ; \\ } \\ \\ T __TBB_machine_fetchstore # #)",
    "insertText": "S(volatile void *ptr, T value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ T result ; \\ __asm__)",
    "insertText": "__volatile__(\"lock\\nxchg\" X \" %0,%1\" \\ : \"=r\"(result),\"=m\"(*(volatile T*)ptr) \\ : \"0\"(value), \"m\"(*(volatile T*)ptr) \\ : \"memory\")"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (\\ return result ; \\ } \\)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(1,int8_t,\"\") __TBB_MACHINE_DEFINE_ATOMICS(2,int16_t,\"\") __TBB_MACHINE_DEFINE_ATOMICS(4,int32_t,\"\") __TBB_MACHINE_DEFINE_ATOMICS(8,int64_t,\"q\") #undef __TBB_MACHINE_DEFINE_ATOMICS static inline void __TBB_machine_or( volatile void *ptr, uint64_t value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"lock\\norq %1,%0\" : \"=m\"(*(volatile uint64_t*)ptr) : \"r\"(value), \"m\"(*(volatile uint64_t*)ptr) : \"memory\")"
  },
  {
    "label": "__TBB_machine_and()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_and(volatile void *ptr, uint64_t value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"lock\\nandq %1,%0\" : \"=m\"(*(volatile uint64_t*)ptr) : \"r\"(value), \"m\"(*(volatile uint64_t*)ptr) : \"memory\")"
  }
]