[
  {
    "label": "UAITask_MoveTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAITask_MoveTo"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "FBTMoveToTaskMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTMoveToTaskMemory"
  },
  {
    "label": "UBTTask_MoveTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTask_MoveTo"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" AITypes . h \" # include \" BehaviorTree / Tasks / BTTask_BlackboardBase . h \" # include \" BehaviorTree / ValueOrBBKey . h \" # include \" NavFilters / NavigationQueryFilter . h \" # include \" BTTask_MoveTo . generated . h \" class UAITask_MoveTo ; class UBlackboardComponent ; struct FBTMoveToTaskMemory { FAIRequestID MoveRequestID ; FDelegateHandle BBObserverDelegateHandle ; FVector PreviousGoalLocation ; TWeakObjectPtr<UAITask_MoveTo> Task ; uint8 bObserverCanFinishTask : 1 ; } ;)",
    "insertText": "UCLASS(config=Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config, Category = Node, EditAnywhere, meta=(ClampMin = \"0.0\", UIMin=\"0.0\"))"
  },
  {
    "label": "ExecuteTask()",
    "kind": "Method",
    "detail": "Function (EBTNodeResult::Type)",
    "insertText": "ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "AbortTask()",
    "kind": "Method",
    "detail": "Function (EBTNodeResult::Type)",
    "insertText": "AbortTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "OnTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskFinished(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "GetInstanceMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetInstanceMemorySize()"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "OnGameplayTaskDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskDeactivated(UGameplayTask& Task)"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessage(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, FName Message, int32 RequestID, bool bSuccess)"
  },
  {
    "label": "OnBlackboardValueChange()",
    "kind": "Method",
    "detail": "Function (EBlackboardNotificationResult)",
    "insertText": "OnBlackboardValueChange(const UBlackboardComponent& Blackboard, FBlackboard::FKey ChangedKeyID)"
  },
  {
    "label": "DescribeRuntimeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeRuntimeValues(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTDescriptionVerbosity::Type Verbosity, TArray<FString>& Values)"
  },
  {
    "label": "GetStaticDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStaticDescription()"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName)",
    "insertText": "GetNodeIconName()"
  },
  {
    "label": "PerformMoveTask()",
    "kind": "Method",
    "detail": "Function (# endif protected : EBTNodeResult::Type)",
    "insertText": "PerformMoveTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "PrepareMoveTask()",
    "kind": "Method",
    "detail": "Function (UAITask_MoveTo*)",
    "insertText": "PrepareMoveTask(UBehaviorTreeComponent& OwnerComp, UAITask_MoveTo* ExistingTask, FAIMoveRequest& MoveRequest)"
  }
]