[
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_DISTRIBUTIONS_H_ # define ABSL_RANDOM_DISTRIBUTIONS_H_ # include<algorithm> # include<cmath> # include<limits> # include<random> # include<type_traits> # include \" absl / base / internal / inline_variable . h \" # include \" absl / random / bernoulli_distribution . h \" # include \" absl / random / beta_distribution . h \" # include \" absl / random / exponential_distribution . h \" # include \" absl / random / gaussian_distribution . h \" # include \" absl / random / internal / distribution_caller . h \" # include \" absl / random / internal / uniform_helper . h \" # include \" absl / random / log_uniform_int_distribution . h \" # include \" absl / random / poisson_distribution . h \" # include \" absl / random / uniform_int_distribution . h \" # include \" absl / random / uniform_real_distribution . h \" # include \" absl / random / zipf_distribution . h \" namespace absl { ABSL_NAMESPACE_BEGIN)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalClosedClosedTag, IntervalClosedClosed, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalClosedClosedTag, IntervalClosed, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalClosedOpenTag, IntervalClosedOpen, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalOpenOpenTag, IntervalOpenOpen, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalOpenOpenTag, IntervalOpen, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(IntervalOpenClosedTag, IntervalOpenClosed, {})"
  },
  {
    "label": "Uniform()",
    "kind": "Method",
    "detail": "Function (template<R = void,TagType,URBG> absl::enable_if_t<! std::is_same<R,void>::value,R>)",
    "insertText": "Uniform(TagType tag, URBG&& urbg, R lo, R hi)"
  },
  {
    "label": "uniform_lower_bound()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = random_internal::UniformDistributionWrapper<R> ; auto a =)",
    "insertText": "uniform_lower_bound(tag, lo, hi)"
  },
  {
    "label": "uniform_upper_bound()",
    "kind": "Method",
    "detail": "Function (auto b =)",
    "insertText": "uniform_upper_bound(tag, lo, hi)"
  },
  {
    "label": "Uniform()",
    "kind": "Method",
    "detail": "Function (} template<R = void,URBG> absl::enable_if_t<! std::is_same<R,void>::value,R>)",
    "insertText": "Uniform(URBG&& urbg, R lo, R hi)"
  },
  {
    "label": "Uniform()",
    "kind": "Method",
    "detail": "Function (} template<R = void,TagType,URBG,A,B> absl::enable_if_t<std::is_same<R,void>::value,random_internal::uniform_inferred_return_t<A,B>>)",
    "insertText": "Uniform(TagType tag, URBG&& urbg, A lo, B hi)"
  },
  {
    "label": "return_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using return_t = random_internal::uniform_inferred_return_t<A,B> ; using distribution_t = random_internal::UniformDistributionWrapper<return_t> ; auto a = random_internal::uniform_lower_bound<)",
    "insertText": "return_t(tag, lo, hi)"
  },
  {
    "label": "Uniform()",
    "kind": "Method",
    "detail": "Function (} template<R = void,URBG,A,B> absl::enable_if_t<std::is_same<R,void>::value,random_internal::uniform_inferred_return_t<A,B>>)",
    "insertText": "Uniform(URBG&& urbg, A lo, B hi)"
  },
  {
    "label": "Uniform()",
    "kind": "Method",
    "detail": "Function (} template<R,URBG> absl::enable_if_t<! std::is_signed<R>::value,R>)",
    "insertText": "Uniform(URBG&& urbg)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = random_internal::UniformDistributionWrapper<R> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg)"
  },
  {
    "label": "Bernoulli()",
    "kind": "Method",
    "detail": "Function (} template<URBG> bool)",
    "insertText": "Bernoulli(URBG&& urbg, double p)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::bernoulli_distribution ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, p)"
  },
  {
    "label": "Beta()",
    "kind": "Method",
    "detail": "Function (} template<RealType,URBG> RealType)",
    "insertText": "Beta(URBG&& urbg, RealType alpha, RealType beta)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::beta_distribution<RealType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, alpha, beta)"
  },
  {
    "label": "Exponential()",
    "kind": "Method",
    "detail": "Function (} template<RealType,URBG> RealType)",
    "insertText": "Exponential(URBG&& urbg, RealType lambda = 1)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::exponential_distribution<RealType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, lambda)"
  },
  {
    "label": "Gaussian()",
    "kind": "Method",
    "detail": "Function (} template<RealType,URBG> RealType)",
    "insertText": "Gaussian(URBG&& urbg, RealType mean = 0, RealType stddev = 1)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::gaussian_distribution<RealType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, mean, stddev)"
  },
  {
    "label": "LogUniform()",
    "kind": "Method",
    "detail": "Function (} template<IntType,URBG> IntType)",
    "insertText": "LogUniform(URBG&& urbg, IntType lo, IntType hi, IntType base = 2)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::log_uniform_int_distribution<IntType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, lo, hi, base)"
  },
  {
    "label": "Poisson()",
    "kind": "Method",
    "detail": "Function (} template<IntType,URBG> IntType)",
    "insertText": "Poisson(URBG&& urbg, double mean = 1.0)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::poisson_distribution<IntType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, mean)"
  },
  {
    "label": "Zipf()",
    "kind": "Method",
    "detail": "Function (} template<IntType,URBG> IntType)",
    "insertText": "Zipf(URBG&& urbg, IntType hi = (std::numeric_limits<IntType>::max)(), double q = 2.0, double v = 1.0)"
  },
  {
    "label": "distribution_t()",
    "kind": "Method",
    "detail": "Function (using gen_t = absl::decay_t<URBG> ; using distribution_t = absl::zipf_distribution<IntType> ; return random_internal::DistributionCaller<gen_t>::template Call<)",
    "insertText": "distribution_t(&urbg, hi, q, v)"
  }
]