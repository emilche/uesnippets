[
  {
    "label": "FTwoVectors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTwoVectors"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "FMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMath"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FRandRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FRandRange(InMin, InMax)"
  },
  {
    "label": "FRandRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FRandRange(InMin, InMax)"
  },
  {
    "label": "VRand()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VRand()"
  },
  {
    "label": "VRandCone()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VRandCone(FVector const& Dir, float ConeHalfAngleRad)"
  },
  {
    "label": "VRandCone()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VRandCone(FVector const& Dir, float HorizontalConeHalfAngleRad, float VerticalConeHalfAngleRad)"
  },
  {
    "label": "RandPointInCircle()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "RandPointInCircle(float CircleRadius)"
  },
  {
    "label": "RandPointInBox()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "RandPointInBox(const FBox& Box)"
  },
  {
    "label": "GetReflectionVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetReflectionVector(const FVector& Direction, const FVector& SurfaceNormal)"
  },
  {
    "label": "FloorToFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FloorToFloat(F)"
  },
  {
    "label": "FloorToDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FloorToDouble(F)"
  },
  {
    "label": "WrapImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "WrapImpl(X, Min, Max)"
  },
  {
    "label": "WrapImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "WrapImpl(X, Min, Max)"
  },
  {
    "label": "ClampAngle()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "ClampAngle(T AngleDegrees, T MinAngleDegrees, T MaxAngleDegrees)"
  },
  {
    "label": "WindRelativeAnglesDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WindRelativeAnglesDegrees(float InAngle0, float& InOutAngle1)"
  },
  {
    "label": "WindRelativeAnglesDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WindRelativeAnglesDegrees(double InAngle0, double& InOutAngle1)"
  },
  {
    "label": "FixedTurn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FixedTurn(float InCurrent, float InDesired, float InDeltaRate)"
  },
  {
    "label": "GetDotDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDotDistance(FVector2D &OutDotDist, const FVector &Direction, const FVector &AxisX, const FVector &AxisY, const FVector &AxisZ)"
  },
  {
    "label": "GetAzimuthAndElevation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetAzimuthAndElevation(const FVector &Direction, const FVector &AxisX, const FVector &AxisY, const FVector &AxisZ)"
  },
  {
    "label": "GetRangePct()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRangePct(Range.X, Range.Y, Value)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Lerp(Range.X, Range.Y, Pct)"
  },
  {
    "label": "GetRangeValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRangeValue(OutputRange, ClampedPct)"
  },
  {
    "label": "GetRangeValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRangeValue(OutputRange, ClampedPct)"
  },
  {
    "label": "LerpRange()",
    "kind": "Method",
    "detail": "Function (UE::Math::TRotator<T>)",
    "insertText": "LerpRange(const UE::Math::TRotator<T>& A, const UE::Math::TRotator<T>& B, U Alpha)"
  },
  {
    "label": "VInterpNormalRotationTo()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VInterpNormalRotationTo(const FVector& Current, const FVector& Target, float DeltaTime, float RotationSpeedDegrees)"
  },
  {
    "label": "VInterpConstantTo()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VInterpConstantTo(const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "VInterpTo()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "VInterpTo( const FVector& Current, const FVector& Target, float DeltaTime, float InterpSpeed )"
  },
  {
    "label": "Vector2DInterpConstantTo()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2DInterpConstantTo( const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed )"
  },
  {
    "label": "Vector2DInterpTo()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Vector2DInterpTo( const FVector2D& Current, const FVector2D& Target, float DeltaTime, float InterpSpeed )"
  },
  {
    "label": "RInterpConstantTo()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RInterpConstantTo( const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "RInterpTo()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "RInterpTo( const FRotator& Current, const FRotator& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "CInterpTo()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "CInterpTo(const FLinearColor& Current, const FLinearColor& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "QInterpConstantTo()",
    "kind": "Method",
    "detail": "Function (UE::Math::TQuat<T>)",
    "insertText": "QInterpConstantTo(const UE::Math::TQuat<T>& Current, const UE::Math::TQuat<T>& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "QInterpTo()",
    "kind": "Method",
    "detail": "Function (UE::Math::TQuat<T>)",
    "insertText": "QInterpTo(const UE::Math::TQuat<T>& Current, const UE::Math::TQuat<T>& Target, float DeltaTime, float InterpSpeed)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "A(1.00746054f)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "B(0.45053901f)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C(0.25724632f)"
  },
  {
    "label": "RayPlaneIntersection()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<FReal>)",
    "insertText": "RayPlaneIntersection(const UE::Math::TVector<FReal>& RayOrigin, const UE::Math::TVector<FReal>& RayDirection, const UE::Math::TPlane<FReal>& Plane)"
  },
  {
    "label": "RayPlaneIntersectionParam()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "RayPlaneIntersectionParam(const UE::Math::TVector<FReal>& RayOrigin, const UE::Math::TVector<FReal>& RayDirection, const UE::Math::TPlane<FReal>& Plane)"
  },
  {
    "label": "LinePlaneIntersection()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<FReal>)",
    "insertText": "LinePlaneIntersection(const UE::Math::TVector<FReal>& Point1, const UE::Math::TVector<FReal>& Point2, const UE::Math::TVector<FReal>& PlaneOrigin, const UE::Math::TVector<FReal>& PlaneNormal)"
  },
  {
    "label": "LinePlaneIntersection()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<FReal>)",
    "insertText": "LinePlaneIntersection(const UE::Math::TVector<FReal>& Point1, const UE::Math::TVector<FReal>& Point2, const UE::Math::TPlane<FReal>& Plane)"
  },
  {
    "label": "ComputeProjectedSphereScissorRect()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeProjectedSphereScissorRect(FIntRect& InOutScissorRect, FVector SphereOrigin, float Radius, FVector ViewOrigin, const FMatrix& ViewMatrix, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeBoundingSphereForCone()",
    "kind": "Method",
    "detail": "Function (UE::Math::TSphere<FReal>)",
    "insertText": "ComputeBoundingSphereForCone(UE::Math::TVector<FReal> const& ConeOrigin, UE::Math::TVector<FReal> const& ConeDirection, FReal ConeRadius, FReal CosConeAngle, FReal SinConeAngle)"
  },
  {
    "label": "PlaneAABBIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlaneAABBIntersection(const FPlane& P, const FBox& AABB)"
  },
  {
    "label": "PlaneAABBRelativePosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PlaneAABBRelativePosition(const FPlane& P, const FBox& AABB)"
  },
  {
    "label": "SphereAABBIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereAABBIntersection(const UE::Math::TVector<FReal>& SphereCenter,const FReal RadiusSquared,const UE::Math::TBox<FReal>& AABB)"
  },
  {
    "label": "SphereAABBIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereAABBIntersection(const UE::Math::TSphere<FReal>& Sphere, const UE::Math::TBox<FReal>& AABB)"
  },
  {
    "label": "PointBoxIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointBoxIntersection( const UE::Math::TVector<FReal>& Point, const UE::Math::TBox<FReal>& Box )"
  },
  {
    "label": "LineBoxIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineBoxIntersection( const UE::Math::TBox<FReal>& Box, const UE::Math::TVector<FReal>& Start, const UE::Math::TVector<FReal>& End, const UE::Math::TVector<FReal>& Direction )"
  },
  {
    "label": "LineBoxIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineBoxIntersection( const UE::Math::TBox<FReal>& Box, const UE::Math::TVector<FReal>& Start, const UE::Math::TVector<FReal>& End, const UE::Math::TVector<FReal>& Direction, const UE::Math::TVector<FReal>& OneOverDirection )"
  },
  {
    "label": "LineExtentBoxIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineExtentBoxIntersection(const FBox& inBox, const FVector& Start, const FVector& End, const FVector& Extent, FVector& HitLocation, FVector& HitNormal, float& HitTime)"
  },
  {
    "label": "LineSphereIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineSphereIntersection(const UE::Math::TVector<FReal>& Start,const UE::Math::TVector<FReal>& Dir, FReal Length,const UE::Math::TVector<FReal>& Origin, FReal Radius)"
  },
  {
    "label": "SphereConeIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereConeIntersection(const FVector& SphereCenter, float SphereRadius, const FVector& ConeAxis, float ConeAngleSin, float ConeAngleCos)"
  },
  {
    "label": "ClosestPointOnLine()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClosestPointOnLine(const FVector& LineStart, const FVector& LineEnd, const FVector& Point)"
  },
  {
    "label": "ClosestPointOnInfiniteLine()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClosestPointOnInfiniteLine(const FVector& LineStart, const FVector& LineEnd, const FVector& Point)"
  },
  {
    "label": "IntersectPlanes3()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectPlanes3(UE::Math::TVector<FReal>& I, const UE::Math::TPlane<FReal>& P1, const UE::Math::TPlane<FReal>& P2, const UE::Math::TPlane<FReal>& P3 )"
  },
  {
    "label": "IntersectPlanes2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectPlanes2(UE::Math::TVector<FReal>& I, UE::Math::TVector<FReal>& D, const UE::Math::TPlane<FReal>& P1, const UE::Math::TPlane<FReal>& P2)"
  },
  {
    "label": "PointDistToLine()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PointDistToLine(const FVector &Point, const FVector &Direction, const FVector &Origin, FVector &OutClosestPoint)"
  },
  {
    "label": "PointDistToLine()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PointDistToLine(const FVector &Point, const FVector &Direction, const FVector &Origin)"
  },
  {
    "label": "ClosestPointOnSegment()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClosestPointOnSegment(const FVector &Point, const FVector &StartPoint, const FVector &EndPoint)"
  },
  {
    "label": "ClosestPointOnSegment2D()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ClosestPointOnSegment2D(const FVector2D &Point, const FVector2D &StartPoint, const FVector2D &EndPoint)"
  },
  {
    "label": "PointDistToSegment()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PointDistToSegment(const FVector &Point, const FVector &StartPoint, const FVector &EndPoint)"
  },
  {
    "label": "PointDistToSegmentSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PointDistToSegmentSquared(const FVector &Point, const FVector &StartPoint, const FVector &EndPoint)"
  },
  {
    "label": "SegmentDistToSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentDistToSegment(FVector A1, FVector B1, FVector A2, FVector B2, FVector& OutP1, FVector& OutP2)"
  },
  {
    "label": "SegmentDistToSegmentSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentDistToSegmentSafe(FVector A1, FVector B1, FVector A2, FVector B2, FVector& OutP1, FVector& OutP2)"
  },
  {
    "label": "GetTForSegmentPlaneIntersect()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTForSegmentPlaneIntersect(const FVector& StartPoint, const FVector& EndPoint, const FPlane& Plane)"
  },
  {
    "label": "SegmentPlaneIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SegmentPlaneIntersection(const FVector& StartPoint, const FVector& EndPoint, const FPlane& Plane, FVector& out_IntersectionPoint)"
  },
  {
    "label": "SegmentTriangleIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SegmentTriangleIntersection(const FVector& StartPoint, const FVector& EndPoint, const FVector& A, const FVector& B, const FVector& C, FVector& OutIntersectPoint, FVector& OutTriangleNormal)"
  },
  {
    "label": "SegmentIntersection2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SegmentIntersection2D(const FVector& SegmentStartA, const FVector& SegmentEndA, const FVector& SegmentStartB, const FVector& SegmentEndB, FVector& out_IntersectionPoint)"
  },
  {
    "label": "ClosestPointOnTriangleToPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClosestPointOnTriangleToPoint(const FVector& Point, const FVector& A, const FVector& B, const FVector& C)"
  },
  {
    "label": "ClosestPointOnTetrahedronToPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ClosestPointOnTetrahedronToPoint(const FVector& Point, const FVector& A, const FVector& B, const FVector& C, const FVector& D)"
  },
  {
    "label": "SphereDistToLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SphereDistToLine(FVector SphereOrigin, float SphereRadius, FVector LineOrigin, FVector LineDir, FVector& OutClosestPoint)"
  },
  {
    "label": "GetDistanceWithinConeSegment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDistanceWithinConeSegment(FVector Point, FVector ConeStartPoint, FVector ConeLine, float RadiusAtStart, float RadiusAtEnd, float &PercentageOut)"
  },
  {
    "label": "PointsAreCoplanar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PointsAreCoplanar(const TArray<FVector>& Points, const float Tolerance = 0.1f)"
  },
  {
    "label": "TruncateToHalfIfClose()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TruncateToHalfIfClose(float F, float Tolerance = UE_SMALL_NUMBER)"
  },
  {
    "label": "TruncateToHalfIfClose()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "TruncateToHalfIfClose(double F, double Tolerance = UE_SMALL_NUMBER)"
  },
  {
    "label": "RoundHalfToEven()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RoundHalfToEven(float F)"
  },
  {
    "label": "RoundHalfToEven()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RoundHalfToEven(double F)"
  },
  {
    "label": "RoundHalfFromZero()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RoundHalfFromZero(float F)"
  },
  {
    "label": "RoundHalfFromZero()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RoundHalfFromZero(double F)"
  },
  {
    "label": "RoundHalfToZero()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RoundHalfToZero(float F)"
  },
  {
    "label": "RoundHalfToZero()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RoundHalfToZero(double F)"
  },
  {
    "label": "FloorToFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FloorToFloat(F)"
  },
  {
    "label": "FloorToDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FloorToDouble(F)"
  },
  {
    "label": "CeilToFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CeilToFloat(F)"
  },
  {
    "label": "CeilToDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CeilToDouble(F)"
  },
  {
    "label": "FormatIntToHumanReadable()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatIntToHumanReadable(int32 Val)"
  },
  {
    "label": "MemoryTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MemoryTest( void* BaseAddress, uint32 NumBytes )"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Eval( FString Str, float& OutValue )"
  },
  {
    "label": "GetBaryCentric2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBaryCentric2D(const FVector& Point, const FVector& A, const FVector& B, const FVector& C)"
  },
  {
    "label": "GetBaryCentric2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBaryCentric2D(const FVector2D& Point, const FVector2D& A, const FVector2D& B, const FVector2D& C)"
  },
  {
    "label": "ComputeBaryCentric2D()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeBaryCentric2D(const FVector& Point, const FVector& A, const FVector& B, const FVector& C)"
  },
  {
    "label": "ComputeBarycentricTri()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeBarycentricTri(const FVector& Point, const FVector& A, const FVector& B, const FVector& C, FVector& OutBarycentric, double Tolerance = UE_DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "ComputeBaryCentric3D()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "ComputeBaryCentric3D(const FVector& Point, const FVector& A, const FVector& B, const FVector& C, const FVector& D)"
  },
  {
    "label": "ApplyScaleToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyScaleToFloat(float& Dst, const FVector& DeltaScale, float Magnitude = 1.0f)"
  },
  {
    "label": "Quantize8UnsignedByte()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Quantize8UnsignedByte(y)"
  },
  {
    "label": "PerlinNoise1D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PerlinNoise1D(float Value)"
  },
  {
    "label": "PerlinNoise2D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PerlinNoise2D(const FVector2D& Location)"
  },
  {
    "label": "PerlinNoise3D()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PerlinNoise3D(const FVector& Location)"
  },
  {
    "label": "WeightedMovingAverage()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "WeightedMovingAverage(CurrentSample, PreviousSample, Weight)"
  },
  {
    "label": "MatrixInverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatrixInverse(FMatrix44f* DstMatrix, const FMatrix44f* SrcMatrix)"
  },
  {
    "label": "MatrixInverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatrixInverse(FMatrix44d* DstMatrix, const FMatrix44d* SrcMatrix)"
  }
]