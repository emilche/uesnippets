[
  {
    "label": "TypedMemberParser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypedMemberParser"
  },
  {
    "label": "MemberParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemberParameter"
  },
  {
    "label": "TypedParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedParser"
  },
  {
    "label": "StructParametersParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructParametersParser"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_STRUCT_PARAMETERS_PARSER_H_ # define RTC_BASE_EXPERIMENTS_STRUCT_PARAMETERS_PARSER_H_ # include<functional> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / experiments / field_trial_units . h \" # include \" rtc_base / string_encode . h \" namespace webrtc { namespace struct_parser_impl { struct TypedMemberParser { public :)",
    "insertText": "bool(*parse)(absl::string_view src, void* target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*encode)(const void* src, std::string* target)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} ; struct MemberParameter { const char* key ; void* member_ptr ; TypedMemberParser parser ; } ; template<T> class TypedParser { public : bool)",
    "insertText": "Parse(absl::string_view src, void* target)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(const void* src, std::string* target)"
  },
  {
    "label": "AddMembers()",
    "kind": "Method",
    "detail": "Function (} ; template class TypedParser<bool> ; template class TypedParser<double> ; template class TypedParser<int> ; template class TypedParser<unsigned> ; template class TypedParser<absl::optional<double>> ; template class TypedParser<absl::optional<int>> ; template class TypedParser<absl::optional<unsigned>> ; template class TypedParser<DataRate> ; template class TypedParser<DataSize> ; template class TypedParser<TimeDelta> ; template class TypedParser<absl::optional<DataRate>> ; template class TypedParser<absl::optional<DataSize>> ; template class TypedParser<absl::optional<TimeDelta>> ; template<T> void)",
    "insertText": "AddMembers(MemberParameter* out, const char* key, T* member)"
  },
  {
    "label": "AddMembers()",
    "kind": "Method",
    "detail": "Function (* out = MemberParameter { key,member,TypedMemberParser {& TypedParser<T>::Parse,& TypedParser<T>::Encode } } ; } template<T,. . . Args> void)",
    "insertText": "AddMembers(MemberParameter* out, const char* key, T* member, Args... args)"
  },
  {
    "label": "AddMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMembers(out, key, member)"
  },
  {
    "label": "AddMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMembers(++out, args...)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } class StructParametersParser { public : template<T,. . . Args> std::unique_ptr<StructParametersParser>)",
    "insertText": "Create(const char* first_key, T* first_member, Args... args)"
  },
  {
    "label": "members()",
    "kind": "Method",
    "detail": "Function (std::vector<struct_parser_impl::MemberParameter>)",
    "insertText": "members(sizeof...(args) / 2 + 1)"
  },
  {
    "label": "AddMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMembers(&members.front(), std::move(first_key), first_member, args...)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Parse(absl::string_view src)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Encode()"
  },
  {
    "label": "StructParametersParser()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "StructParametersParser(std::vector<struct_parser_impl::MemberParameter> members)"
  }
]