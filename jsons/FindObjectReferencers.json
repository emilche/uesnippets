[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TFindObjectReferencers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFindObjectReferencers"
  },
  {
    "label": "TFindObjectReferencers()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectIterator . h \" # include \" Serialization / FindReferencersArchive . h \" template<class T> class TFindObjectReferencers : public TMultiMap<T*,UObject*> { public :)",
    "insertText": "TFindObjectReferencers(TArray< T* > TargetObjects, UPackage* PackageToCheck=NULL, bool bIgnoreTemplates = true, bool bFindAlsoWeakReferences = false) : TMultiMap< T*, UObject* >()"
  },
  {
    "label": "FindReferencerAr()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> ReferencedObjects ; TMap<UObject*,int32> ReferenceCounts ; FFindReferencersArchive)",
    "insertText": "FindReferencerAr(nullptr, (TArray<UObject*>&)TargetObjects, bFindAlsoWeakReferences)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UObject* PotentialReferencer =* It ;)",
    "insertText": "if(!TargetObjects.Contains(PotentialReferencer) && (PackageToCheck == NULL || PotentialReferencer->IsIn(PackageToCheck)) && (!bIgnoreTemplates || !PotentialReferencer->IsTemplate()))"
  },
  {
    "label": "ResetPotentialReferencer()",
    "kind": "Method",
    "detail": "Function (FindReferencerAr .)",
    "insertText": "ResetPotentialReferencer(PotentialReferencer)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ReferenceCounts .)",
    "insertText": "Reset()"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (ReferenceCounts .)",
    "insertText": "GenerateKeyArray(ReferencedObjects)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Add(static_cast<T*>(ReferencedObjects[RefIndex]), PotentialReferencer)"
  }
]