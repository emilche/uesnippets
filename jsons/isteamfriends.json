[
  {
    "label": "EFriendRelationship",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFriendRelationship"
  },
  {
    "label": "EPersonaState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPersonaState"
  },
  {
    "label": "EFriendFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFriendFlags"
  },
  {
    "label": "FriendGameInfo_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FriendGameInfo_t"
  },
  {
    "label": "EUserRestriction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUserRestriction"
  },
  {
    "label": "EOverlayToStoreFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOverlayToStoreFlag"
  },
  {
    "label": "EActivateGameOverlayToWebPageMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EActivateGameOverlayToWebPageMode"
  },
  {
    "label": "ECommunityProfileItemType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECommunityProfileItemType"
  },
  {
    "label": "ECommunityProfileItemProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECommunityProfileItemProperty"
  },
  {
    "label": "ISteamFriends",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamFriends"
  },
  {
    "label": "PersonaStateChange_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PersonaStateChange_t"
  },
  {
    "label": "EPersonaChange",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPersonaChange"
  },
  {
    "label": "GameOverlayActivated_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameOverlayActivated_t"
  },
  {
    "label": "GameServerChangeRequested_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameServerChangeRequested_t"
  },
  {
    "label": "GameLobbyJoinRequested_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameLobbyJoinRequested_t"
  },
  {
    "label": "AvatarImageLoaded_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AvatarImageLoaded_t"
  },
  {
    "label": "ClanOfficerListResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClanOfficerListResponse_t"
  },
  {
    "label": "FriendRichPresenceUpdate_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FriendRichPresenceUpdate_t"
  },
  {
    "label": "GameRichPresenceJoinRequested_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameRichPresenceJoinRequested_t"
  },
  {
    "label": "GameConnectedClanChatMsg_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameConnectedClanChatMsg_t"
  },
  {
    "label": "GameConnectedChatJoin_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameConnectedChatJoin_t"
  },
  {
    "label": "GameConnectedChatLeave_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameConnectedChatLeave_t"
  },
  {
    "label": "DownloadClanActivityCountsResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DownloadClanActivityCountsResult_t"
  },
  {
    "label": "JoinClanChatRoomCompletionResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "JoinClanChatRoomCompletionResult_t"
  },
  {
    "label": "GameConnectedFriendChatMsg_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameConnectedFriendChatMsg_t"
  },
  {
    "label": "FriendsGetFollowerCount_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FriendsGetFollowerCount_t"
  },
  {
    "label": "FriendsIsFollowing_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FriendsIsFollowing_t"
  },
  {
    "label": "FriendsEnumerateFollowingList_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FriendsEnumerateFollowingList_t"
  },
  {
    "label": "SetPersonaNameResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetPersonaNameResponse_t"
  },
  {
    "label": "UnreadChatMessagesChanged_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnreadChatMessagesChanged_t"
  },
  {
    "label": "OverlayBrowserProtocolNavigation_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OverlayBrowserProtocolNavigation_t"
  },
  {
    "label": "EquippedProfileItemsChanged_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EquippedProfileItemsChanged_t"
  },
  {
    "label": "EquippedProfileItems_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EquippedProfileItems_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMFRIENDS_H # define ISTEAMFRIENDS_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" enum EFriendRelationship { k_EFriendRelationshipNone = 0,k_EFriendRelationshipBlocked = 1,k_EFriendRelationshipRequestRecipient = 2,k_EFriendRelationshipFriend = 3,k_EFriendRelationshipRequestInitiator = 4,k_EFriendRelationshipIgnored = 5,k_EFriendRelationshipIgnoredFriend = 6,k_EFriendRelationshipSuggested_DEPRECATED = 7,k_EFriendRelationshipMax = 8,} ; const int k_cchMaxFriendsGroupName = 6 4 ; const int k_cFriendsGroupLimit = 1 0 0 ; typedef int16 FriendsGroupID_t ; const FriendsGroupID_t k_FriendsGroupID_Invalid = - 1 ; const int k_cEnumerateFollowersMax = 5 0 ; enum EPersonaState { k_EPersonaStateOffline = 0,k_EPersonaStateOnline = 1,k_EPersonaStateBusy = 2,k_EPersonaStateAway = 3,k_EPersonaStateSnooze = 4,k_EPersonaStateLookingToTrade = 5,k_EPersonaStateLookingToPlay = 6,k_EPersonaStateInvisible = 7,k_EPersonaStateMax,} ; enum EFriendFlags { k_EFriendFlagNone = 0 x00,k_EFriendFlagBlocked = 0 x01,k_EFriendFlagFriendshipRequested = 0 x02,k_EFriendFlagImmediate = 0 x04,k_EFriendFlagClanMember = 0 x08,k_EFriendFlagOnGameServer = 0 x10,k_EFriendFlagRequestingFriendship = 0 x80,k_EFriendFlagRequestingInfo = 0 x100,k_EFriendFlagIgnored = 0 x200,k_EFriendFlagIgnoredFriend = 0 x400,k_EFriendFlagChatMember = 0 x1000,k_EFriendFlagAll = 0 xFFFF,} ; # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (CGameID m_gameID ; uint32 m_unGameIP ; uint16 m_usGamePort ; uint16 m_usQueryPort ; CSteamID m_steamIDLobby ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "GetPersonaName()",
    "kind": "Method",
    "detail": "Function (k_cchPersonaNameMax = 1 2 8,k_cwchPersonaNameMax = 3 2,} ; enum EUserRestriction { k_nUserRestrictionNone = 0,k_nUserRestrictionUnknown = 1,k_nUserRestrictionAnyChat = 2,k_nUserRestrictionVoiceChat = 4,k_nUserRestrictionGroupChat = 8,k_nUserRestrictionRating = 1 6,k_nUserRestrictionGameInvites = 3 2,k_nUserRestrictionTrading = 6 4,} ; const uint32 k_cubChatMetadataMax = 8 1 9 2 ; enum { k_cchMaxRichPresenceKeys = 3 0 } ; enum { k_cchMaxRichPresenceKeyLength = 6 4 } ; enum { k_cchMaxRichPresenceValueLength = 2 5 6 } ; enum EOverlayToStoreFlag { k_EOverlayToStoreFlag_None = 0,k_EOverlayToStoreFlag_AddToCart = 1,k_EOverlayToStoreFlag_AddToCartAndShow = 2,} ; enum EActivateGameOverlayToWebPageMode { k_EActivateGameOverlayToWebPageMode_Default = 0,k_EActivateGameOverlayToWebPageMode_Modal = 1 } ; enum ECommunityProfileItemType { k_ECommunityProfileItemType_AnimatedAvatar = 0,k_ECommunityProfileItemType_AvatarFrame = 1,k_ECommunityProfileItemType_ProfileModifier = 2,k_ECommunityProfileItemType_ProfileBackground = 3,k_ECommunityProfileItemType_MiniProfileBackground = 4,} ; enum ECommunityProfileItemProperty { k_ECommunityProfileItemProperty_ImageSmall = 0,k_ECommunityProfileItemProperty_ImageLarge = 1,k_ECommunityProfileItemProperty_InternalName = 2,k_ECommunityProfileItemProperty_Title = 3,k_ECommunityProfileItemProperty_Description = 4,k_ECommunityProfileItemProperty_AppID = 5,k_ECommunityProfileItemProperty_TypeID = 6,k_ECommunityProfileItemProperty_Class = 7,k_ECommunityProfileItemProperty_MovieWebM = 8,k_ECommunityProfileItemProperty_MovieMP4 = 9,k_ECommunityProfileItemProperty_MovieWebMSmall = 1 0,k_ECommunityProfileItemProperty_MovieMP4Small = 1 1,} ; class ISteamFriends { public : const char*)",
    "insertText": "GetPersonaName()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(SetPersonaNameResponse_t ) virtual SteamAPICall_t SetPersonaName( const char *pchPersonaName)"
  },
  {
    "label": "GetPersonaState()",
    "kind": "Method",
    "detail": "Function (EPersonaState)",
    "insertText": "GetPersonaState()"
  },
  {
    "label": "GetFriendCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendCount(int iFriendFlags)"
  },
  {
    "label": "GetFriendByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetFriendByIndex(int iFriend, int iFriendFlags)"
  },
  {
    "label": "GetFriendRelationship()",
    "kind": "Method",
    "detail": "Function (EFriendRelationship)",
    "insertText": "GetFriendRelationship(CSteamID steamIDFriend)"
  },
  {
    "label": "GetFriendPersonaState()",
    "kind": "Method",
    "detail": "Function (EPersonaState)",
    "insertText": "GetFriendPersonaState(CSteamID steamIDFriend)"
  },
  {
    "label": "GetFriendPersonaName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFriendPersonaName(CSteamID steamIDFriend)"
  },
  {
    "label": "GetFriendGamePlayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFriendGamePlayed(CSteamID steamIDFriend, STEAM_OUT_STRUCT() FriendGameInfo_t *pFriendGameInfo)"
  },
  {
    "label": "GetFriendPersonaNameHistory()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)"
  },
  {
    "label": "GetFriendSteamLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendSteamLevel(CSteamID steamIDFriend)"
  },
  {
    "label": "GetPlayerNickname()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetPlayerNickname(CSteamID steamIDPlayer)"
  },
  {
    "label": "GetFriendsGroupCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendsGroupCount()"
  },
  {
    "label": "GetFriendsGroupIDByIndex()",
    "kind": "Method",
    "detail": "Function (FriendsGroupID_t)",
    "insertText": "GetFriendsGroupIDByIndex(int iFG)"
  },
  {
    "label": "GetFriendsGroupName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFriendsGroupName(FriendsGroupID_t friendsGroupID)"
  },
  {
    "label": "GetFriendsGroupMembersCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)"
  },
  {
    "label": "GetFriendsGroupMembersList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, STEAM_OUT_ARRAY_CALL(nMembersCount, GetFriendsGroupMembersCount, friendsGroupID ) CSteamID *pOutSteamIDMembers, int nMembersCount)"
  },
  {
    "label": "HasFriend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFriend(CSteamID steamIDFriend, int iFriendFlags)"
  },
  {
    "label": "GetClanCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetClanCount()"
  },
  {
    "label": "GetClanByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetClanByIndex(int iClan)"
  },
  {
    "label": "GetClanName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetClanName(CSteamID steamIDClan)"
  },
  {
    "label": "GetClanTag()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetClanTag(CSteamID steamIDClan)"
  },
  {
    "label": "GetClanActivityCounts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClanActivityCounts(CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(DownloadClanActivityCountsResult_t ) virtual SteamAPICall_t DownloadClanActivityCounts( STEAM_ARRAY_COUNT(cClansToRequest) CSteamID *psteamIDClans, int cClansToRequest)"
  },
  {
    "label": "GetFriendCountFromSource()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendCountFromSource(CSteamID steamIDSource)"
  },
  {
    "label": "GetFriendFromSourceByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)"
  },
  {
    "label": "IsUserInSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)"
  },
  {
    "label": "SetInGameVoiceSpeaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)"
  },
  {
    "label": "ActivateGameOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlay(const char *pchDialog)"
  },
  {
    "label": "ActivateGameOverlayToUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayToUser(const char *pchDialog, CSteamID steamID)"
  },
  {
    "label": "ActivateGameOverlayToWebPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayToWebPage(const char *pchURL, EActivateGameOverlayToWebPageMode eMode = k_EActivateGameOverlayToWebPageMode_Default)"
  },
  {
    "label": "ActivateGameOverlayToStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)"
  },
  {
    "label": "SetPlayedWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayedWith(CSteamID steamIDUserPlayedWith)"
  },
  {
    "label": "ActivateGameOverlayInviteDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)"
  },
  {
    "label": "GetSmallFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetSmallFriendAvatar(CSteamID steamIDFriend)"
  },
  {
    "label": "GetMediumFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMediumFriendAvatar(CSteamID steamIDFriend)"
  },
  {
    "label": "GetLargeFriendAvatar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLargeFriendAvatar(CSteamID steamIDFriend)"
  },
  {
    "label": "RequestUserInformation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(ClanOfficerListResponse_t ) virtual SteamAPICall_t RequestClanOfficerList( CSteamID steamIDClan)"
  },
  {
    "label": "GetClanOwner()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetClanOwner(CSteamID steamIDClan)"
  },
  {
    "label": "GetClanOfficerCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetClanOfficerCount(CSteamID steamIDClan)"
  },
  {
    "label": "GetClanOfficerByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)"
  },
  {
    "label": "GetUserRestrictions()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUserRestrictions()"
  },
  {
    "label": "SetRichPresence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRichPresence(const char *pchKey, const char *pchValue)"
  },
  {
    "label": "ClearRichPresence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRichPresence()"
  },
  {
    "label": "GetFriendRichPresence()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFriendRichPresence(CSteamID steamIDFriend, const char *pchKey)"
  },
  {
    "label": "GetFriendRichPresenceKeyCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)"
  },
  {
    "label": "GetFriendRichPresenceKeyByIndex()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)"
  },
  {
    "label": "RequestFriendRichPresence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFriendRichPresence(CSteamID steamIDFriend)"
  },
  {
    "label": "InviteUserToGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InviteUserToGame(CSteamID steamIDFriend, const char *pchConnectString)"
  },
  {
    "label": "GetCoplayFriendCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCoplayFriendCount()"
  },
  {
    "label": "GetCoplayFriend()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetCoplayFriend(int iCoplayFriend)"
  },
  {
    "label": "GetFriendCoplayTime()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendCoplayTime(CSteamID steamIDFriend)"
  },
  {
    "label": "GetFriendCoplayGame()",
    "kind": "Method",
    "detail": "Function (AppId_t)",
    "insertText": "GetFriendCoplayGame(CSteamID steamIDFriend)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(JoinClanChatRoomCompletionResult_t ) virtual SteamAPICall_t JoinClanChatRoom( CSteamID steamIDClan)"
  },
  {
    "label": "LeaveClanChatRoom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LeaveClanChatRoom(CSteamID steamIDClan)"
  },
  {
    "label": "GetClanChatMemberCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetClanChatMemberCount(CSteamID steamIDClan)"
  },
  {
    "label": "GetChatMemberByIndex()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetChatMemberByIndex(CSteamID steamIDClan, int iUser)"
  },
  {
    "label": "SendClanChatMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendClanChatMessage(CSteamID steamIDClanChat, const char *pchText)"
  },
  {
    "label": "GetClanChatMessage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, STEAM_OUT_STRUCT() CSteamID *psteamidChatter)"
  },
  {
    "label": "IsClanChatAdmin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)"
  },
  {
    "label": "IsClanChatWindowOpenInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)"
  },
  {
    "label": "OpenClanChatWindowInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenClanChatWindowInSteam(CSteamID steamIDClanChat)"
  },
  {
    "label": "CloseClanChatWindowInSteam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseClanChatWindowInSteam(CSteamID steamIDClanChat)"
  },
  {
    "label": "SetListenForFriendsMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetListenForFriendsMessages(bool bInterceptEnabled)"
  },
  {
    "label": "ReplyToFriendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplyToFriendMessage(CSteamID steamIDFriend, const char *pchMsgToSend)"
  },
  {
    "label": "GetFriendMessage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(FriendsGetFollowerCount_t ) virtual SteamAPICall_t GetFollowerCount( CSteamID steamID)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(FriendsIsFollowing_t ) virtual SteamAPICall_t IsFollowing( CSteamID steamID)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(FriendsEnumerateFollowingList_t ) virtual SteamAPICall_t EnumerateFollowingList( uint32 unStartIndex)"
  },
  {
    "label": "IsClanPublic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClanPublic(CSteamID steamIDClan)"
  },
  {
    "label": "IsClanOfficialGameGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClanOfficialGameGroup(CSteamID steamIDClan)"
  },
  {
    "label": "GetNumChatsWithUnreadPriorityMessages()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumChatsWithUnreadPriorityMessages()"
  },
  {
    "label": "ActivateGameOverlayRemotePlayTogetherInviteDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayRemotePlayTogetherInviteDialog(CSteamID steamIDLobby)"
  },
  {
    "label": "RegisterProtocolInOverlayBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterProtocolInOverlayBrowser(const char *pchProtocol)"
  },
  {
    "label": "ActivateGameOverlayInviteDialogConnectString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateGameOverlayInviteDialogConnectString(const char *pchConnectString)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(EquippedProfileItems_t ) virtual SteamAPICall_t RequestEquippedProfileItems( CSteamID steamID)"
  },
  {
    "label": "BHasEquippedProfileItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BHasEquippedProfileItem(CSteamID steamID, ECommunityProfileItemType itemType)"
  },
  {
    "label": "GetProfileItemPropertyString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetProfileItemPropertyString(CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)"
  },
  {
    "label": "GetProfileItemPropertyUint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetProfileItemPropertyUint(CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop)"
  },
  {
    "label": "SteamFriends()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMFRIENDS_INTERFACE_VERSION \" SteamFriends017 \" ISteamFriends*)",
    "insertText": "SteamFriends()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamFriends *, SteamFriends, STEAMFRIENDS_INTERFACE_VERSION)"
  }
]