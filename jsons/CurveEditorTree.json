[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorTree"
  },
  {
    "label": "FCurveEditorTreeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeFilter"
  },
  {
    "label": "ICurveEditorTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICurveEditorTreeItem"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCurveEditorTreeDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorTreeDelegate"
  },
  {
    "label": "FCurveEditorTreeEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeEvents"
  },
  {
    "label": "FSortedCurveEditorTreeItems",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedCurveEditorTreeItems"
  },
  {
    "label": "FCurveEditorFilterStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorFilterStates"
  },
  {
    "label": "ImplicitChild()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / ForEach . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" enum class ECurveEditorTreeFilterType : uint32 ; class FCurveEditor ; class FCurveEditorTree ; struct FCurveEditorTreeFilter ; struct ICurveEditorTreeItem ; enum class ECurveEditorTreeFilterState : uint8 { NoMatch = 0 x00,)",
    "insertText": "ImplicitChild(1<<0), ImplicitParent = (1<<1), Match = (1<<2), Expand = (1<<3), MatchBitMask = (ImplicitParent | Match | ImplicitChild)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ECurveEditorTreeFilterState)"
  },
  {
    "label": "FScopedCurveEditorTreeEventGuard()",
    "kind": "Method",
    "detail": "Function (struct FScopedCurveEditorTreeEventGuard {)",
    "insertText": "FScopedCurveEditorTreeEventGuard(FCurveEditorTree* InTree)"
  },
  {
    "label": "FScopedCurveEditorTreeEventGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedCurveEditorTreeEventGuard()"
  },
  {
    "label": "FScopedCurveEditorTreeEventGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedCurveEditorTreeEventGuard(FScopedCurveEditorTreeEventGuard&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedCurveEditorTreeEventGuard&)",
    "insertText": "operator(FScopedCurveEditorTreeEventGuard&& RHS)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (private : uint32 CachedItemSerialNumber ; uint32 CachedSelectionSerialNumber ; uint32 CachedFiltersSerialNumber ; FCurveEditorTree* Tree ; } ; class FCurveEditorTreeDelegate : public FSimpleMulticastDelegate { private : FCurveEditorTree ; FScopedCurveEditorTreeEventGuard ; void)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (bool bBroadcasting = false ; uint32 SerialNumber = 0 ; } ; struct FCurveEditorTreeEvents { FCurveEditorTreeDelegate OnItemsChanged ; FCurveEditorTreeDelegate OnSelectionChanged ; FCurveEditorTreeDelegate OnFiltersChanged ; private : FScopedCurveEditorTreeEventGuard ; uint32 UpdateGuardCounter = 0 ; } ; struct FSortedCurveEditorTreeItems { bool bRequiresSort = false ; TArray<FCurveEditorTreeItemID> ChildIDs ; } ; struct FCurveEditorTreeItem { FCurveEditorTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (UniquePathName = InName ; } TSharedPtr<ICurveEditorTreeItem>)",
    "insertText": "GetItem()"
  },
  {
    "label": "SetWeakItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWeakItem(TWeakPtr<ICurveEditorTreeItem> InItem)"
  },
  {
    "label": "SetStrongItem()",
    "kind": "Method",
    "detail": "Function (WeakItemImpl = InItem ; StrongItemImpl = nullptr ; } void)",
    "insertText": "SetStrongItem(TSharedPtr<ICurveEditorTreeItem> InItem)"
  },
  {
    "label": "GetCurves()",
    "kind": "Method",
    "detail": "Function (WeakItemImpl = nullptr ; StrongItemImpl = InItem ; } TArrayView<const FCurveModelID>)",
    "insertText": "GetCurves()"
  },
  {
    "label": "DestroyCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCurves(FCurveEditor* CurveEditor)"
  },
  {
    "label": "DestroyUnpinnedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyUnpinnedCurves(FCurveEditor* CurveEditor)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (private : FCurveEditorTree ; FCurveEditorTreeItemID ThisID ; FCurveEditorTreeItemID ParentID ; TOptional<FString> UniquePathName ; TWeakPtr<ICurveEditorTreeItem> WeakItemImpl ; TSharedPtr<ICurveEditorTreeItem> StrongItemImpl ; TArray<FCurveModelID,TInlineAllocator<1>> Curves ; FSortedCurveEditorTreeItems Children ; } ; struct FCurveEditorFilterStates { void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetNumMatched()",
    "kind": "Method",
    "detail": "Function (NumMatched = 0 ; NumMatchedImplicitly = 0 ; } int32)",
    "insertText": "GetNumMatched()"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEach(FilterStates, Callable)"
  },
  {
    "label": "SetFilterState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFilterState(FCurveEditorTreeItemID ItemID, ECurveEditorTreeFilterState NewState)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const ECurveEditorTreeFilterState* Existing = FilterStates .)",
    "insertText": "Find(ItemID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - NumMatched ; } else)",
    "insertText": "if((*Existing & ECurveEditorTreeFilterState::MatchBitMask) != ECurveEditorTreeFilterState::NoMatch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - NumMatchedImplicitly ; } })",
    "insertText": "if((NewState & ECurveEditorTreeFilterState::MatchBitMask) == ECurveEditorTreeFilterState::NoMatch)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (FilterStates .)",
    "insertText": "Remove(ItemID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { FilterStates .)",
    "insertText": "Add(ItemID, NewState)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (+ + NumMatched ; } else { + + NumMatchedImplicitly ; } } } bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (bIsActive = true ; } void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (bIsActive = false ; } private : bool bIsActive = false ; int32 NumMatched = 0 ; int32 NumMatchedImplicitly = 0 ; TMap<FCurveEditorTreeItemID,ECurveEditorTreeFilterState> FilterStates ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnCurveEditorToggleExpansionState, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (class FCurveEditorTree { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FTreeItemSortPredicate, const ICurveEditorTreeItem* , const ICurveEditorTreeItem*)"
  },
  {
    "label": "FCurveEditorTree()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeEvents Events ;)",
    "insertText": "FCurveEditorTree()"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItem&)",
    "insertText": "GetItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "FindItem()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItem*)",
    "insertText": "FindItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "GetRootItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FCurveEditorTreeItemID>&)",
    "insertText": "GetRootItems()"
  },
  {
    "label": "GetAllItems()",
    "kind": "Method",
    "detail": "Function (const TMap<FCurveEditorTreeItemID,FCurveEditorTreeItem>&)",
    "insertText": "GetAllItems()"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItem*)",
    "insertText": "AddItem(FCurveEditorTreeItemID ParentID)"
  },
  {
    "label": "RemoveItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveItem(FCurveEditorTreeItemID ItemID, FCurveEditor* CurveEditor)"
  },
  {
    "label": "RunFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunFilters()"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilter(TWeakPtr<FCurveEditorTreeFilter> NewFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(TWeakPtr<FCurveEditorTreeFilter> FilterToRemove)"
  },
  {
    "label": "GetFilters()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TWeakPtr<FCurveEditorTreeFilter>>)",
    "insertText": "GetFilters()"
  },
  {
    "label": "ClearFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFilters()"
  },
  {
    "label": "FindFilterByType()",
    "kind": "Method",
    "detail": "Function (const FCurveEditorTreeFilter*)",
    "insertText": "FindFilterByType(ECurveEditorTreeFilterType Type)"
  },
  {
    "label": "SetSortPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortPredicate(FTreeItemSortPredicate InSortPredicate)"
  },
  {
    "label": "SortTreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeItems()"
  },
  {
    "label": "SetDirectSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirectSelection(TArray<FCurveEditorTreeItemID>&& TreeItems, FCurveEditor* InCurveEditor)"
  },
  {
    "label": "RemoveFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromSelection(TArrayView<const FCurveEditorTreeItemID> TreeItems, FCurveEditor* InCurveEditor)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (const TMap<FCurveEditorTreeItemID,ECurveEditorTreeSelectionState>&)",
    "insertText": "GetSelection()"
  },
  {
    "label": "GetSelectionState()",
    "kind": "Method",
    "detail": "Function (ECurveEditorTreeSelectionState)",
    "insertText": "GetSelectionState(FCurveEditorTreeItemID InTreeItemID)"
  },
  {
    "label": "GetFilterStates()",
    "kind": "Method",
    "detail": "Function (const FCurveEditorFilterStates&)",
    "insertText": "GetFilterStates()"
  },
  {
    "label": "GetFilterState()",
    "kind": "Method",
    "detail": "Function (ECurveEditorTreeFilterState)",
    "insertText": "GetFilterState(FCurveEditorTreeItemID InTreeItemID)"
  },
  {
    "label": "ScopedEventGuard()",
    "kind": "Method",
    "detail": "Function (FScopedCurveEditorTreeEventGuard)",
    "insertText": "ScopedEventGuard()"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Compact()"
  },
  {
    "label": "ToggleExpansionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpansionState(bool bRecursive)"
  },
  {
    "label": "GetToggleExpansionState()",
    "kind": "Method",
    "detail": "Function (FOnCurveEditorToggleExpansionState&)",
    "insertText": "GetToggleExpansionState()"
  },
  {
    "label": "SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansion(FCurveEditorTreeItemID InTreeItemID, bool bInExpansion)"
  },
  {
    "label": "IsDoingDirectSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDoingDirectSelection()"
  },
  {
    "label": "RemoveChildrenRecursive()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RemoveChildrenRecursive(TArray<FCurveEditorTreeItemID>&& Children, FCurveEditor* CurveEditor)"
  },
  {
    "label": "PerformFilterPass()",
    "kind": "Method",
    "detail": "Function (ECurveEditorTreeFilterState)",
    "insertText": "PerformFilterPass(TArrayView<const FCurveEditorTreeFilter* const> FilterPtrs, TArrayView<const FCurveEditorTreeItemID> ItemsToFilter, ECurveEditorTreeFilterState InheritedState)"
  },
  {
    "label": "SortTreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeItems(FSortedCurveEditorTreeItems& TreeItemIDsToSort)"
  }
]