[
  {
    "label": "Startup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_SchedulerTask . h \" namespace scheduler { void)",
    "insertText": "Startup(void)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(void)"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (template<F> Task<std::invoke_result_t<F>>*)",
    "insertText": "CreateTask(F&& function)"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (} template<F> Task<std::invoke_result_t<F>>*)",
    "insertText": "CreateTask(TaskBase* parent, F&& function)"
  },
  {
    "label": "CreateEmptyTask()",
    "kind": "Method",
    "detail": "Function (} TaskBase*)",
    "insertText": "CreateEmptyTask(void)"
  },
  {
    "label": "DestroyTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTask(TaskBase* task)"
  },
  {
    "label": "DestroyTasks()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "DestroyTasks(const T& container)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t count = container .)",
    "insertText": "size()"
  },
  {
    "label": "DestroyTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTask(container[i])"
  },
  {
    "label": "RunTask()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RunTask(TaskBase* task)"
  },
  {
    "label": "WaitForTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTask(TaskBase* task)"
  }
]