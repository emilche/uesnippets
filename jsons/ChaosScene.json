[
  {
    "label": "AdvanceOneTimeStepTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdvanceOneTimeStepTask"
  },
  {
    "label": "FChaosSolversModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosSolversModule"
  },
  {
    "label": "FForceFieldProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFieldProxy"
  },
  {
    "label": "FSolverStateStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverStateStorage"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshPhysicsProxy"
  },
  {
    "label": "FStaticMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshPhysicsProxy"
  },
  {
    "label": "FPerSolverFieldSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerSolverFieldSystem"
  },
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "FPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsProxy"
  },
  {
    "label": "FCollisionEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionEventData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRawEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawEventHandler"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "ISpatialAcceleration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAcceleration"
  },
  {
    "label": "ISpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAccelerationCollection"
  },
  {
    "label": "TArrayCollectionArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayCollectionArray"
  },
  {
    "label": "FPBDRigidDirtyParticlesBufferAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDirtyParticlesBufferAccessor"
  },
  {
    "label": "FChaosSceneCallbackInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosSceneCallbackInput"
  },
  {
    "label": "FChaosSceneSimCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosSceneSimCallback"
  },
  {
    "label": "FChaosScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosScene"
  },
  {
    "label": "ChaosInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChaosInterface"
  },
  {
    "label": "FScopedSceneLock_Chaos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSceneLock_Chaos"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / GCObject . h \" # include \" Chaos / ChaosEngineInterface . h \" # include \" Chaos / Declares . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" Framework / Threading . h \" # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Chaos / SimCallbackInput . h \" # include \" Chaos / SimCallbackObject . h \" # include \" ChaosVisualDebugger / ChaosVDContextProvider . h \" # include \" ChaosDebugDraw / ChaosDDTypes . h \" # ifndef CHAOS_DEBUG_NAME # define CHAOS_DEBUG_NAME 0 # endif # define XGE_FIXED 0 class AdvanceOneTimeStepTask ; class FChaosSolversModule ; struct FForceFieldProxy ; struct FSolverStateStorage ; class FSkeletalMeshPhysicsProxy ; class FStaticMeshPhysicsProxy ; class FPerSolverFieldSystem ; class IPhysicsProxyBase ; namespace Chaos { class FPhysicsProxy ; struct FCollisionEventData ; enum class EEventType : int32 ; template<PayloadType,HandlerType> class TRawEventHandler ; class FAccelerationStructureHandle ; template<TPayload,T,int d> class ISpatialAcceleration ; template<TPayload,T,int d> class ISpatialAccelerationCollection ; template<T> class TArrayCollectionArray ; class FPBDRigidDirtyParticlesBufferAccessor ; } struct FChaosSceneCallbackInput : public Chaos::FSimCallbackInput { Chaos::FVec3 Gravity ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "OnPreSimulate_Internal()",
    "kind": "Method",
    "detail": "Function (} } ; struct FChaosSceneSimCallback : public Chaos::TSimCallbackObject<FChaosSceneCallbackInput> { void)",
    "insertText": "OnPreSimulate_Internal()"
  },
  {
    "label": "GetFNameForStatId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFNameForStatId()"
  },
  {
    "label": "FChaosScene()",
    "kind": "Method",
    "detail": "Function (} ; class FChaosScene # if WITH_ENGINE : public FGCObject # endif { public :)",
    "insertText": "FChaosScene(UObject* OwnerPtr , Chaos::FReal InAsyncDt , const FName& DebugName = NAME_None)"
  },
  {
    "label": "FChaosScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChaosScene()"
  },
  {
    "label": "GetSolver()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsSolver*)",
    "insertText": "GetSolver()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetSpacialAcceleration()",
    "kind": "Method",
    "detail": "Function (Chaos::ISpatialAcceleration<Chaos::FAccelerationStructureHandle,Chaos::FReal,3>*)",
    "insertText": "GetSpacialAcceleration()"
  },
  {
    "label": "AddActorsToScene_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorsToScene_AssumesLocked(TArray<FPhysicsActorHandle>& InHandles,const bool bImmediate=true)"
  },
  {
    "label": "RemoveActorFromAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorFromAccelerationStructure(FPhysicsActorHandle Actor)"
  },
  {
    "label": "RemoveActorFromAccelerationStructureImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorFromAccelerationStructureImp(Chaos::FGeometryParticle* Particle)"
  },
  {
    "label": "UpdateActorsInAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorsInAccelerationStructure(const TArrayView<FPhysicsActorHandle>& Actors)"
  },
  {
    "label": "UpdateActorInAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorInAccelerationStructure(const FPhysicsActorHandle& Actor)"
  },
  {
    "label": "WaitPhysScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitPhysScenes()"
  },
  {
    "label": "CopySolverAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySolverAccelerationStructure()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "AddPieModifiedObject()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddPieModifiedObject(UObject* InObj)"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "SetUpForFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpForFrame(const FVector* NewGrav,float InDeltaSeconds,float InMinPhysicsDeltaTime,float InMaxPhysicsDeltaTime,float InMaxSubstepDeltaTime,int32 InMaxSubsteps,bool bSubstepping)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPhysScenePostTick,FChaosScene*)"
  },
  {
    "label": "KillSafeAsyncTasks()",
    "kind": "Method",
    "detail": "Function (FOnPhysScenePostTick OnPhysScenePostTick ; void)",
    "insertText": "KillSafeAsyncTasks()"
  },
  {
    "label": "WaitSolverTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitSolverTasks()"
  },
  {
    "label": "AreAnyTasksPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnyTasksPending()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsCompletionEventComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompletionEventComplete()"
  },
  {
    "label": "GetCompletionEvents()",
    "kind": "Method",
    "detail": "Function (FGraphEventArray)",
    "insertText": "GetCompletionEvents()"
  },
  {
    "label": "SetNetworkDeltaTimeScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkDeltaTimeScale(float InDeltaTimeScale)"
  },
  {
    "label": "GetNetworkDeltaTimeScale()",
    "kind": "Method",
    "detail": "Function (MNetworkDeltaTimeScale = InDeltaTimeScale ; } float)",
    "insertText": "GetNetworkDeltaTimeScale()"
  },
  {
    "label": "GetPhysicsSolvers()",
    "kind": "Method",
    "detail": "Function (float MDeltaTime ; float MNetworkDeltaTimeScale = 1 . f ; UObject* Owner ; private : TArray<Chaos::FPhysicsSolverBase*>)",
    "insertText": "GetPhysicsSolvers()"
  },
  {
    "label": "SetGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravity(const Chaos::FVec3& Acceleration)"
  },
  {
    "label": "SyncBodies()",
    "kind": "Method",
    "detail": "Function (template<TSolver> void)",
    "insertText": "SyncBodies(TSolver* Solver)"
  },
  {
    "label": "GetChaosVDContextData()",
    "kind": "Method",
    "detail": "Function (FGraphEventArray CompletionEvents ; FChaosSceneSimCallback* SimCallback ; # if WITH_CHAOS_VISUAL_DEBUGGER private : FChaosVDContext CVDContextData ; public : FChaosVDContext&)",
    "insertText": "GetChaosVDContextData()"
  }
]