[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMovieSceneDirectorBlueprintConditionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneDirectorBlueprintConditionCustomization"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FMovieSceneConditionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneConditionCustomization"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectPtr . h \" # include \" IPropertyTypeCustomization . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Conditions / MovieSceneCondition . h \" # include \" MovieSceneTrack . h \" # include \" MovieSceneConditionCustomization . generated . h \" class IDetailLayoutBuilder ; class IPropertyHandle ; class UMovieScene ; class FPropertyEditor ; class SWidget ; class FMenuBuilder ; class UMovieSceneSequence ; class UMovieSceneTrack ; class FMovieSceneDirectorBlueprintConditionCustomization ; class IDetailsView ; class ISequencer ;)",
    "insertText": "UCLASS(CollapseCategories)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Category = \"General\", meta=(ShowOnlyInnerProperties))"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (} ; class FMovieSceneConditionCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance(UMovieSceneSequence* Sequence, const TWeakPtr<ISequencer> Sequencer)"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeHeader(TSharedRef<IPropertyHandle> InPropertyHandle, FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeChildren(TSharedRef<IPropertyHandle> InPropertyHandle, IDetailChildrenBuilder& ChildBuilder, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "GetDisplayValueAsString()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetDisplayValueAsString()"
  },
  {
    "label": "GetDisplayValueIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetDisplayValueIcon()"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassAllowed(UClass* CheckClass, bool bAllowAbstract)"
  },
  {
    "label": "GenerateConditionPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateConditionPicker()"
  },
  {
    "label": "OnClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassPicked(UClass* InClass)"
  },
  {
    "label": "FillConditionClassSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillConditionClassSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "FillDirectorBlueprintConditionSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillDirectorBlueprintConditionSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetCommonSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetCommonSequence()"
  },
  {
    "label": "GetCommonTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack*)",
    "insertText": "GetCommonTrack()"
  },
  {
    "label": "PopulateQuickBindSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateQuickBindSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OnUseSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUseSelected()"
  },
  {
    "label": "CanUseSelectedAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseSelectedAsset()"
  },
  {
    "label": "OnBrowseTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowseTo()"
  },
  {
    "label": "CanBrowseToAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBrowseToAsset()"
  }
]