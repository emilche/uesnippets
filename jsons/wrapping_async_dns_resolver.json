[
  {
    "label": "WrappingAsyncDnsResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WrappingAsyncDnsResolver"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "WrappingAsyncDnsResolverResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WrappingAsyncDnsResolverResult"
  },
  {
    "label": "WrappingAsyncDnsResolverResult()",
    "kind": "Method",
    "detail": "Function (# ifndef API_WRAPPING_ASYNC_DNS_RESOLVER_H_ # define API_WRAPPING_ASYNC_DNS_RESOLVER_H_ # include<functional> # include<memory> # include<utility> # include \" absl / memory / memory . h \" # include \" api / async_dns_resolver . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / async_resolver . h \" # include \" rtc_base / async_resolver_interface . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class WrappingAsyncDnsResolver ; class RTC_EXPORT WrappingAsyncDnsResolverResult : public AsyncDnsResolverResult { public :)",
    "insertText": "WrappingAsyncDnsResolverResult(WrappingAsyncDnsResolver* owner) : owner_(owner)"
  },
  {
    "label": "WrappingAsyncDnsResolverResult()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "WrappingAsyncDnsResolverResult()"
  },
  {
    "label": "GetResolvedAddress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetResolvedAddress(int family, rtc::SocketAddress* addr)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "WrappingAsyncDnsResolver()",
    "kind": "Method",
    "detail": "Function (private : WrappingAsyncDnsResolver* const owner_ ; } ; class RTC_EXPORT WrappingAsyncDnsResolver : public AsyncDnsResolverInterface,public sigslot::has_slots<> { public :)",
    "insertText": "WrappingAsyncDnsResolver(rtc::AsyncResolverInterface* wrapped) : wrapped_(absl::WrapUnique(wrapped)), result_(this)"
  },
  {
    "label": "WrappingAsyncDnsResolver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "WrappingAsyncDnsResolver()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(!within_resolve_result_)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (wrapped_ .)",
    "insertText": "release()->Destroy(false)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const rtc::SocketAddress& addr, std::function<void()> callback)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "PrepareToResolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToResolve(std::move(callback))"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (wrapped_ ->)",
    "insertText": "Start(addr)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const rtc::SocketAddress& addr, int family, std::function<void()> callback)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (wrapped_ ->)",
    "insertText": "Start(addr, family)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (} const AsyncDnsResolverResult&)",
    "insertText": "result()"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(State::kResolved, state_)"
  },
  {
    "label": "PrepareToResolve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareToResolve(std::function<void()> callback)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(State::kNotStarted, state_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (state_ = State::kStarted ; callback_ =)",
    "insertText": "move(callback)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (wrapped_ -> SignalDone .)",
    "insertText": "connect(this, &WrappingAsyncDnsResolver::OnResolveResult)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResolveResult(rtc::AsyncResolverInterface* ref)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(state_ == State::kStarted)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(ref, wrapped_.get())"
  },
  {
    "label": "callback_()",
    "kind": "Method",
    "detail": "Function (state_ = State::kResolved ; within_resolve_result_ = true ;)",
    "insertText": "callback_()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (within_resolve_result_ = false ; } SequenceChecker sequence_checker_ ; std::function<)",
    "insertText": "void()> callback_ RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::AsyncResolverInterface> wrapped_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]