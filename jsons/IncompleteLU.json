[
  {
    "label": "IncompleteLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncompleteLU"
  },
  {
    "label": "IncompleteLU()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INCOMPLETE_LU_H # define EIGEN_INCOMPLETE_LU_H namespace Eigen { template<_Scalar> class IncompleteLU : public SparseSolverBase<IncompleteLU<_Scalar>> { protected : typedef SparseSolverBase<IncompleteLU<_Scalar>> Base ; using Base::m_isInitialized ; typedef _Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> Vector ; typedef Vector::Index Index ; typedef SparseMatrix<Scalar,RowMajor> FactorType ; public : typedef Matrix<Scalar,Dynamic,Dynamic> MatrixType ;)",
    "insertText": "IncompleteLU()"
  },
  {
    "label": "IncompleteLU()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType>)",
    "insertText": "IncompleteLU(const MatrixType& mat)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(mat)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> IncompleteLU&)",
    "insertText": "compute(const MatrixType& mat)"
  },
  {
    "label": "diag()",
    "kind": "Method",
    "detail": "Function (Vector)",
    "insertText": "diag(size)"
  },
  {
    "label": "k_it()",
    "kind": "Method",
    "detail": "Function (FactorType::InnerIterator)",
    "insertText": "k_it(m_lu,i)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (int k = k_it .)",
    "insertText": "index()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (k_it .)",
    "insertText": "valueRef() /= diag(k)"
  },
  {
    "label": "j_it()",
    "kind": "Method",
    "detail": "Function (FactorType::InnerIterator)",
    "insertText": "j_it(k_it)"
  },
  {
    "label": "kj_it()",
    "kind": "Method",
    "detail": "Function (FactorType::InnerIterator)",
    "insertText": "kj_it(m_lu, k)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (j_it .)",
    "insertText": "valueRef() -= k_it.value() * kj_it.value()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + j_it ; + + kj_it ; } else)",
    "insertText": "if(kj_it.index()<j_it.index())"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} m_isInitialized = true ; return* this ; } template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "UnitLower()",
    "kind": "Method",
    "detail": "Function (x = m_lu . template triangularView<)",
    "insertText": "UnitLower().solve(b)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (x = m_lu . template triangularView<)",
    "insertText": "Upper().solve(x)"
  }
]