[
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FPackagePreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePreloader"
  },
  {
    "label": "FTrackedPreloadableFilePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackedPreloadableFilePtr"
  },
  {
    "label": "FAsyncRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncRequest"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackagePreloader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Cooker / CookPackageData . h \" # include \" Cooker / CookTypes . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / PackageResourceManager . h \" # include<atomic> class UCookOnTheFlyServer ; namespace UE::Cook { class FPackagePreloader : public FThreadSafeRefCountedObject { public :)",
    "insertText": "FPackagePreloader(FPackageData& InPackageData)"
  },
  {
    "label": "FPackagePreloader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPackagePreloader()"
  },
  {
    "label": "GetPackageData()",
    "kind": "Method",
    "detail": "Function (FPackageData&)",
    "insertText": "GetPackageData()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EPreloaderState)",
    "insertText": "GetState()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "SetSelfReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelfReference()"
  },
  {
    "label": "ClearSelfReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelfReference()"
  },
  {
    "label": "PostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGarbageCollect()"
  },
  {
    "label": "OnPackageLeaveLoadState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageLeaveLoadState()"
  },
  {
    "label": "IsPackageLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageLoaded()"
  },
  {
    "label": "IsPackageLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageLoaded(const FPackageData& InPackageData)"
  },
  {
    "label": "GetCountFromRequestedLoads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCountFromRequestedLoads()"
  },
  {
    "label": "SendToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToState(EPreloaderState NewState, ESendFlags SendFlags)"
  },
  {
    "label": "PumpLoadsTryStartInboxPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PumpLoadsTryStartInboxPackage(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "PumpLoadsTryKickPreload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PumpLoadsTryKickPreload(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "PumpLoadsIsReadyToLeavePreload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PumpLoadsIsReadyToLeavePreload()"
  },
  {
    "label": "PumpLoadsMarkLoadAttemptComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpLoadsMarkLoadAttemptComplete()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (private : struct FTrackedPreloadableFilePtr { const TSharedPtr<FPreloadableArchive>&)",
    "insertText": "Get()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FPackageData& PackageData)"
  },
  {
    "label": "HasInitializedRequestedLoads()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FPreloadableArchive> Ptr ; } ; struct FAsyncRequest { int32 RequestID { 0 } ; std::atomic<bool> bHasFinished { false } ; } ; enum class EGraphVisitState : uint8 { Unvisited,InProgress,Visited,} ; private : bool)",
    "insertText": "HasInitializedRequestedLoads()"
  },
  {
    "label": "SetHasInitializedRequestedLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasInitializedRequestedLoads(bool bValue)"
  },
  {
    "label": "IsInInbox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInInbox()"
  },
  {
    "label": "SetIsInInbox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsInInbox(bool bValue)"
  },
  {
    "label": "WasLoadAttempted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasLoadAttempted()"
  },
  {
    "label": "SetLoadAttempted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadAttempted(bool bValue)"
  },
  {
    "label": "IsPreloadAttempted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreloadAttempted()"
  },
  {
    "label": "SetIsPreloadAttempted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPreloadAttempted(bool bValue)"
  },
  {
    "label": "IsPreloaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreloaded()"
  },
  {
    "label": "SetIsPreloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPreloaded(bool bValue)"
  },
  {
    "label": "IsImportsGathered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportsGathered()"
  },
  {
    "label": "SetIsImportsGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsImportsGathered(bool bValue)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(EPreloaderState Value)"
  },
  {
    "label": "ClearPreload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreload()"
  },
  {
    "label": "EmptyImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyImports()"
  },
  {
    "label": "GatherUnloadedImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherUnloadedImports()"
  },
  {
    "label": "LogUnusedImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogUnusedImports()"
  },
  {
    "label": "TraverseImportGraph()",
    "kind": "Method",
    "detail": "Function (template<ShouldKeepFunc,ReportAndIsContinueFunc> void)",
    "insertText": "TraverseImportGraph(ShouldKeepFunc&& ShouldKeep, ReportAndIsContinueFunc&& ReportAndIsContinue, bool bAllowGather)"
  },
  {
    "label": "GetNeedsLoadPreloadersInImportTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNeedsLoadPreloadersInImportTree(TArray<TRefCountPtr<FPackagePreloader>>& OutPreloaders)"
  },
  {
    "label": "TryPreload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPreload()"
  },
  {
    "label": "IncrementCountFromRequestedLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementCountFromRequestedLoads()"
  },
  {
    "label": "DecrementCountFromRequestedLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementCountFromRequestedLoads()"
  },
  {
    "label": "SetRequestedLoads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestedLoads(TArray<TRefCountPtr<FPackagePreloader>>&& InRequestedLoads, bool bMakeActive = true)"
  },
  {
    "label": "OnExitActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitActive()"
  },
  {
    "label": "NeedsLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoad()"
  },
  {
    "label": "IsHigherPriorityThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHigherPriorityThan(const FPackagePreloader& Other)"
  },
  {
    "label": "InitializeConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeConfig()"
  },
  {
    "label": "FPackagePreloader()",
    "kind": "Method",
    "detail": "Function (private : FTrackedPreloadableFilePtr PreloadableFile ; FOpenPackageResult PreloadableFileOpenResult ; FPackageData& PackageData ; TRefCountPtr<FPackagePreloader> SelfReference ; TSharedPtr<FAsyncRequest> AsyncRequest ; TArray<TRefCountPtr<FPackagePreloader>> UnloadedImports ; TArray<TRefCountPtr<FPackagePreloader>> RequestedLoads ; int32 CountFromRequestedLoads = 0 ; EPreloaderState State = EPreloaderState::Inactive ; EGraphVisitState VisitState = EGraphVisitState::Unvisited ; bool bIsPreloadAttempted = false ; bool bIsPreloaded = false ; bool bImportsGathered = false ; bool bIsInInbox = false ; bool bHasInitializedRequestedLoads = false ; bool bWasLoadAttempted = false ; bool bConfigInitialized ; bool bAllowPreloadImports ; bool bDebugPreloadImports ; UE::Cook::FLoadQueue ; UE::Cook::FPackagePreloaderPriorityWrapper ; } ; } namespace UE::Cook {)",
    "insertText": "FPackagePreloader(FPackageData& InPackageData) : PackageData(InPackageData)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (SelfReference .)",
    "insertText": "SafeRelease()"
  }
]