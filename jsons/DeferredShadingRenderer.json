[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLumenCardUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardUpdateContext"
  },
  {
    "label": "FSceneTextureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureParameters"
  },
  {
    "label": "FDistanceFieldCulledObjectBufferParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldCulledObjectBufferParameters"
  },
  {
    "label": "FTileIntersectionParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileIntersectionParameters"
  },
  {
    "label": "FDistanceFieldAOParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldAOParameters"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FExponentialHeightFogSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExponentialHeightFogSceneInfo"
  },
  {
    "label": "FLumenCardScatterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardScatterContext"
  },
  {
    "label": "FRadianceCacheInputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadianceCacheInputs"
  },
  {
    "label": "FRadianceCacheInterpolationParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRadianceCacheInterpolationParameters"
  },
  {
    "label": "FUpdateInputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateInputs"
  },
  {
    "label": "FFrameTemporaries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTemporaries"
  },
  {
    "label": "FRenderLightParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderLightParameters"
  },
  {
    "label": "FRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingScene"
  },
  {
    "label": "FNaniteVisibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVisibility"
  },
  {
    "label": "FNaniteVisibilityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteVisibilityQuery"
  },
  {
    "label": "FSceneWithoutWaterTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneWithoutWaterTextures"
  },
  {
    "label": "FRayTracingReflectionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingReflectionOptions"
  },
  {
    "label": "FHairStrandsTransmittanceMaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsTransmittanceMaskData"
  },
  {
    "label": "FVolumetricFogLocalLightFunctionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricFogLocalLightFunctionInfo"
  },
  {
    "label": "FTranslucencyLightingVolumeTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyLightingVolumeTextures"
  },
  {
    "label": "FLumenSceneFrameTemporaries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenSceneFrameTemporaries"
  },
  {
    "label": "FSingleLayerWaterPrePassResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleLayerWaterPrePassResult"
  },
  {
    "label": "FBuildHZBAsyncComputeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildHZBAsyncComputeParams"
  },
  {
    "label": "FForwardBasePassTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForwardBasePassTextures"
  },
  {
    "label": "FTranslucentLightInjectionCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucentLightInjectionCollector"
  },
  {
    "label": "FRayTracingPickingFeedback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingPickingFeedback"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FILCUpdatePrimTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FILCUpdatePrimTaskData"
  },
  {
    "label": "FLumenDirectLightingTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenDirectLightingTaskData"
  },
  {
    "label": "FFroxelRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFroxelRenderer"
  },
  {
    "label": "IVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVisibilityTaskData"
  },
  {
    "label": "FGatherInstancesTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherInstancesTaskData"
  },
  {
    "label": "FLumenCardRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardRenderer"
  },
  {
    "label": "FAsyncLumenIndirectLightingOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncLumenIndirectLightingOutputs"
  },
  {
    "label": "FViewOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewOutputs"
  },
  {
    "label": "TPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPipelineState"
  },
  {
    "label": "FGlobalIlluminationPluginResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalIlluminationPluginResources"
  },
  {
    "label": "FGlobalIlluminationPluginDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalIlluminationPluginDelegates"
  },
  {
    "label": "FDeferredShadingSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredShadingSceneRenderer"
  },
  {
    "label": "FNaniteShadingCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommands"
  },
  {
    "label": "FPerViewPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerViewPipelineState"
  },
  {
    "label": "FFamilyPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFamilyPipelineState"
  },
  {
    "label": "FInitViewTaskDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitViewTaskDatas"
  },
  {
    "label": "FCardCaptureAtlas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCardCaptureAtlas"
  },
  {
    "label": "FResampledCardCaptureAtlas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResampledCardCaptureAtlas"
  },
  {
    "label": "FCompositionLighting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositionLighting"
  },
  {
    "label": "FLumenMeshSDFGridParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenMeshSDFGridParameters"
  },
  {
    "label": "FLumenScreenSpaceBentNormalParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenScreenSpaceBentNormalParameters"
  },
  {
    "label": "FLumenFrontLayerTranslucencyGBufferParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenFrontLayerTranslucencyGBufferParameters"
  },
  {
    "label": "FPathTracingResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathTracingResources"
  },
  {
    "label": "FNaniteBasePassVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteBasePassVisibility"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" RendererInterface . h \" # include \" StaticBoundShaderState . h \" # include \" ScenePrivateBase . h \" # include \" LightSceneInfo . h \" # include \" SceneRendering . h \" # include \" DepthRendering . h \" # include \" TranslucentRendering . h \" # include \" ScreenSpaceDenoise . h \" # include \" Lumen / LumenSceneCardCapture . h \" # include \" Lumen / LumenTracingUtils . h \" # include \" RayTracing / RayTracingLighting . h \" # include \" IndirectLightRendering . h \" # include \" ScreenSpaceRayTracing . h \" # include \" RenderGraphUtils . h \" # include \" SceneCulling / SceneCullingRenderer . h \" # include \" LightFunctionAtlas . h \" enum class ERayTracingPrimaryRaysFlag : uint32 ; class FLumenCardUpdateContext ; class FSceneTextureParameters ; class FDistanceFieldCulledObjectBufferParameters ; class FTileIntersectionParameters ; class FDistanceFieldAOParameters ; class UStaticMeshComponent ; class FExponentialHeightFogSceneInfo ; class FLumenCardScatterContext ; namespace LumenRadianceCache { class FRadianceCacheInputs ; class FRadianceCacheInterpolationParameters ; class FUpdateInputs ; } namespace LumenRadiosity { struct FFrameTemporaries ; } class FRenderLightParameters ; class FRayTracingScene ; class FNaniteVisibility ; struct FNaniteVisibilityQuery ; struct FSceneWithoutWaterTextures ; struct FRayTracingReflectionOptions ; struct FHairStrandsTransmittanceMaskData ; struct FVolumetricFogLocalLightFunctionInfo ; struct FTranslucencyLightingVolumeTextures ; struct FLumenSceneFrameTemporaries ; struct FSingleLayerWaterPrePassResult ; struct FBuildHZBAsyncComputeParams ; struct FForwardBasePassTextures ; struct FTranslucentLightInjectionCollector ; struct FRayTracingPickingFeedback ; struct FDBufferTextures ; struct FILCUpdatePrimTaskData ; struct FLumenDirectLightingTaskData ; namespace Froxel { class FFroxelRenderer ; } class IVisibilityTaskData ; namespace RayTracing { struct FGatherInstancesTaskData ; } class FLumenCardRenderer { public : TArray<FCardPageRenderData,SceneRenderingAllocator> CardPagesToRender ; int32 NumCardTexelsToCapture ; FMeshCommandOneFrameArray MeshDrawCommands ; TArray<int32,SceneRenderingAllocator> MeshDrawPrimitiveIds ; FResampledCardCaptureAtlas ResampledCardCaptureAtlas ; bool bPropagateGlobalLightingChange = false ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (NumCardTexelsToCapture = 0 ; } } ; enum class ELumenIndirectLightingSteps { None = 0,ScreenProbeGather = 1 u<<0,Reflections = 1 u<<1,Composite = 1 u<<3,All = ScreenProbeGather | Reflections | Composite } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELumenIndirectLightingSteps)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (struct FViewOutputs { FSSDSignalTextures IndirectLightingTextures ; FLumenMeshSDFGridParameters MeshSDFGridParameters ; LumenRadianceCache::FRadianceCacheInterpolationParameters RadianceCacheParameters ; FLumenScreenSpaceBentNormalParameters ScreenBentNormalParameters ; } ; TArray<FViewOutputs,TInlineAllocator<1>> ViewOutputs ; ELumenIndirectLightingSteps StepsLeft = ELumenIndirectLightingSteps::All ; bool bHasDrawnBeforeLightingDecals = false ; void)",
    "insertText": "Resize(int32 NewNum)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (ViewOutputs .)",
    "insertText": "SetNumZeroed(NewNum)"
  },
  {
    "label": "DoneAsync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoneAsync(bool bAsyncReflections)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumRemoveFlags(StepsLeft, ELumenIndirectLightingSteps::ScreenProbeGather)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumRemoveFlags(StepsLeft, ELumenIndirectLightingSteps::Reflections)"
  },
  {
    "label": "DonePreLights()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DonePreLights()"
  },
  {
    "label": "DoneComposite()",
    "kind": "Method",
    "detail": "Function (StepsLeft = ELumenIndirectLightingSteps::None ; } else { StepsLeft = ELumenIndirectLightingSteps::Composite ; } } void)",
    "insertText": "DoneComposite()"
  },
  {
    "label": "TPipelineState()",
    "kind": "Method",
    "detail": "Function (StepsLeft = ELumenIndirectLightingSteps::None ; } } ; template<PermutationVectorType> class TPipelineState { public :)",
    "insertText": "TPipelineState()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&Vector, 0, sizeof(Vector))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<DimensionType> void)",
    "insertText": "Set(DimensionType PermutationVectorType::*Dimension, const DimensionType& DimensionValue)"
  },
  {
    "label": "GetByteOffset()",
    "kind": "Method",
    "detail": "Function (SIZE_T ByteOffset =)",
    "insertText": "GetByteOffset(Dimension)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Vector .* Dimension = DimensionValue ; InitializedOffset = ByteOffset +)",
    "insertText": "sizeof(DimensionType)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Commit()"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (InitializedOffset = ~)",
    "insertText": "SIZE_T(0)"
  },
  {
    "label": "IsCommitted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCommitted()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<DimensionType> const DimensionType&)",
    "insertText": "operator(DimensionType PermutationVectorType::*Dimension)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} PermutationVectorType Vector ; SIZE_T InitializedOffset = 0 ; } ; class FGlobalIlluminationPluginResources : public FRenderResource { public : FRDGTextureRef GBufferA ; FRDGTextureRef GBufferB ; FRDGTextureRef GBufferC ; FRDGTextureRef SceneDepthZ ; FRDGTextureRef SceneColor ; FRDGTextureRef LightingChannelsTexture ; } ; class FGlobalIlluminationPluginDelegates { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FAnyRayTracingPassEnabled, bool&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPrepareRayTracing, const FViewInfo& , TArray<FRHIRayTracingShader*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FRenderDiffuseIndirectLight, const FScene& , const FViewInfo& , FRDGBuilder& , FGlobalIlluminationPluginResources&)"
  },
  {
    "label": "AnyRayTracingPassEnabled()",
    "kind": "Method",
    "detail": "Function (FAnyRayTracingPassEnabled&)",
    "insertText": "AnyRayTracingPassEnabled()"
  },
  {
    "label": "PrepareRayTracing()",
    "kind": "Method",
    "detail": "Function (FPrepareRayTracing&)",
    "insertText": "PrepareRayTracing()"
  },
  {
    "label": "RenderDiffuseIndirectLight()",
    "kind": "Method",
    "detail": "Function (FRenderDiffuseIndirectLight&)",
    "insertText": "RenderDiffuseIndirectLight()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) DECLARE_MULTICAST_DELEGATE_FourParams(FRenderDiffuseIndirectVisualizations, const FScene& , const FViewInfo& , FRDGBuilder& , FGlobalIlluminationPluginResources&)"
  },
  {
    "label": "RenderDiffuseIndirectVisualizations()",
    "kind": "Method",
    "detail": "Function (FRenderDiffuseIndirectVisualizations&)",
    "insertText": "RenderDiffuseIndirectVisualizations()"
  },
  {
    "label": "InitializeRayTracingFlags_RenderThread()",
    "kind": "Method",
    "detail": "Function (# endif } ; enum class EDiffuseIndirectMethod { Disabled,SSGI,Lumen,Plugin,} ; enum class EAmbientOcclusionMethod { Disabled,SSAO,SSGI,RTAO,} ; enum class EReflectionsMethod { Disabled,SSR,Lumen } ; class FDeferredShadingSceneRenderer : public FSceneRenderer { public : FDepthPassInfo DepthPass ; FLumenCardRenderer LumenCardRenderer ; FSceneCullingRenderer SceneCullingRenderer ; # if RHI_RAYTRACING bool bShouldUpdateRayTracingScene = false ; void)",
    "insertText": "InitializeRayTracingFlags_RenderThread()"
  },
  {
    "label": "FDeferredShadingSceneRenderer()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FDeferredShadingSceneRenderer(const FSceneViewFamily* InViewFamily, FHitProxyConsumer* HitProxyConsumer)"
  },
  {
    "label": "CommitFinalPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitFinalPipelineState()"
  },
  {
    "label": "CommitIndirectLightingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitIndirectLightingState()"
  },
  {
    "label": "ClearView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearView(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RenderPrePassView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPrePassView(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderPrePassViewParallel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderPrePassViewParallel(const FViewInfo& View, FRHICommandListImmediate& ParentCmdList,TFunctionRef<void()> AfterTasksAreStarted, bool bDoPrePre)"
  },
  {
    "label": "GatherLightsAndComputeLightGrid()",
    "kind": "Method",
    "detail": "Function (FComputeLightGridOutput)",
    "insertText": "GatherLightsAndComputeLightGrid(FRDGBuilder& GraphBuilder, bool bNeedLightGrid, const FSortedLightSetSceneInfo &SortedLightSet)"
  },
  {
    "label": "DebugLightGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugLightGrid(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, bool bNeedLightGrid)"
  },
  {
    "label": "RenderBasePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderBasePass(FDeferredShadingSceneRenderer& Renderer, FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FSceneTextures& SceneTextures, const FDBufferTextures& DBufferTextures, FExclusiveDepthStencil::Type BasePassDepthStencilAccess, FRDGTextureRef ForwardShadowMaskTexture, FInstanceCullingManager& InstanceCullingManager, bool bNaniteEnabled, struct FNaniteShadingCommands& NaniteBasePassShadingCommands, const TArrayView<Nanite::FRasterResults>& NaniteRasterResults)"
  },
  {
    "label": "RenderBasePassInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderBasePassInternal(FDeferredShadingSceneRenderer& Renderer, FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures, const FRenderTargetBindingSlots& BasePassRenderTargets, FExclusiveDepthStencil::Type BasePassDepthStencilAccess, const FForwardBasePassTextures& ForwardBasePassTextures, const FDBufferTextures& DBufferTextures, bool bParallelBasePass, bool bRenderLightmapDensity, FInstanceCullingManager& InstanceCullingManager, bool bNaniteEnabled, struct FNaniteShadingCommands& NaniteBasePassShadingCommands, const TArrayView<Nanite::FRasterResults>& NaniteRasterResults)"
  },
  {
    "label": "RenderAnisotropyPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAnisotropyPass(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FSceneTextures& SceneTextures, const FScene* Scene, bool bDoParallelPass)"
  },
  {
    "label": "RenderSingleLayerWaterDepthPrepass()",
    "kind": "Method",
    "detail": "Function (FSingleLayerWaterPrePassResult*)",
    "insertText": "RenderSingleLayerWaterDepthPrepass(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderSingleLayerWater()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleLayerWater(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures, const FSingleLayerWaterPrePassResult* SingleLayerWaterPrePassResult, bool bShouldRenderVolumetricCloud, FSceneWithoutWaterTextures& SceneWithoutWaterTextures, FLumenSceneFrameTemporaries& LumenFrameTemporaries, bool bIsCameraUnderWater)"
  },
  {
    "label": "RenderSingleLayerWaterInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleLayerWaterInner(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures, const FSceneWithoutWaterTextures& SceneWithoutWaterTextures, const FSingleLayerWaterPrePassResult* SingleLayerWaterPrePassResult)"
  },
  {
    "label": "RenderSingleLayerWaterReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleLayerWaterReflections(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures, const FSceneWithoutWaterTextures& SceneWithoutWaterTextures, const FSingleLayerWaterPrePassResult* SingleLayerWaterPrePassResult, FLumenSceneFrameTemporaries& LumenFrameTemporaries)"
  },
  {
    "label": "RenderOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderOcclusion(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, bool bIsOcclusionTesting, const FBuildHZBAsyncComputeParams* BuildHZBAsyncComputeParams, Froxel::FRenderer& FroxelRenderer)"
  },
  {
    "label": "RenderHzb()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderHzb(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneDepthTexture, const FBuildHZBAsyncComputeParams* AsyncComputeParams, Froxel::FRenderer& FroxelRenderer)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "RenderHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHitProxies(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "ShouldRenderVelocities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderVelocities()"
  },
  {
    "label": "ShouldRenderPrePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderPrePass()"
  },
  {
    "label": "ShouldRenderNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderNanite()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) void RenderVisualizeTexturePool(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "GetViewIndexInScene()",
    "kind": "Method",
    "detail": "Function (# endif private : struct FPerViewPipelineState { EDiffuseIndirectMethod DiffuseIndirectMethod ; IScreenSpaceDenoiser::EMode DiffuseIndirectDenoiser ; EAmbientOcclusionMethod AmbientOcclusionMethod ; EReflectionsMethod ReflectionsMethod ; EReflectionsMethod ReflectionsMethodWater ; bool bComposePlanarReflections ; bool bFurthestHZB ; bool bClosestHZB ; } ; struct FFamilyPipelineState { bool bNanite ; bool bHZBOcclusion ; } ; TArray<TPipelineState<FPerViewPipelineState>,TInlineAllocator<1>> ViewPipelineStates ; TPipelineState<FFamilyPipelineState> FamilyPipelineState ; int32)",
    "insertText": "GetViewIndexInScene(const FViewInfo& ViewInfo)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(false)"
  },
  {
    "label": "GetViewPipelineStateWritable()",
    "kind": "Method",
    "detail": "Function (} TPipelineState<FPerViewPipelineState>&)",
    "insertText": "GetViewPipelineStateWritable(const FViewInfo& View)"
  },
  {
    "label": "IsLumenEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLumenEnabled(const FViewInfo& View)"
  },
  {
    "label": "IsLumenGIEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLumenGIEnabled(const FViewInfo& View)"
  },
  {
    "label": "AnyViewHasGIMethodSupportingDFAO()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AnyViewHasGIMethodSupportingDFAO()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAnyViewHasGIMethodSupportingDFAO = false ;)",
    "insertText": "for(int32 ViewIndex = 0; ViewIndex < Views.Num(); ViewIndex++)"
  },
  {
    "label": "CreatePerObjectProjectedShadow()",
    "kind": "Method",
    "detail": "Function (bAnyViewHasGIMethodSupportingDFAO = true ; } } return bAnyViewHasGIMethodSupportingDFAO ; } FSeparateTranslucencyDimensions SeparateTranslucencyDimensions ; void)",
    "insertText": "CreatePerObjectProjectedShadow(FRHICommandListImmediate& RHICmdList, FLightPrimitiveInteraction* Interaction, bool bCreateTranslucentObjectShadow, bool bCreateInsetObjectShadow, const TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& ViewDependentWholeSceneShadows, TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& OutPreShadows)"
  },
  {
    "label": "FInitViewTaskDatas()",
    "kind": "Method",
    "detail": "Function (struct FInitViewTaskDatas {)",
    "insertText": "FInitViewTaskDatas(IVisibilityTaskData* InVisibilityTaskData) : VisibilityTaskData(InVisibilityTaskData)"
  },
  {
    "label": "PreVisibilityFrameSetup()",
    "kind": "Method",
    "detail": "Function (} IVisibilityTaskData* VisibilityTaskData ; FILCUpdatePrimTaskData* ILCUpdatePrim = nullptr ; RayTracing::FGatherInstancesTaskData* RayTracingGatherInstances = nullptr ; FDynamicShadowsTaskData* DynamicShadows = nullptr ; FLumenDirectLightingTaskData* LumenDirectLighting = nullptr ; FLumenSceneFrameTemporaries* LumenFrameTemporaries = nullptr ; } ; void)",
    "insertText": "PreVisibilityFrameSetup(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "BeginInitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInitDynamicShadows(FRDGBuilder& GraphBuilder, FInitViewTaskDatas& TaskDatas, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "FinishInitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishInitDynamicShadows(FRDGBuilder& GraphBuilder, FDynamicShadowsTaskData*& TaskData, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "ComputeLightVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLightVisibility()"
  },
  {
    "label": "BeginInitViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInitViews(FRDGBuilder& GraphBuilder, const FSceneTexturesConfig& SceneTexturesConfig, FInstanceCullingManager& InstanceCullingManager, FRDGExternalAccessQueue& ExternalAccessQueue, FInitViewTaskDatas& TaskDatas)"
  },
  {
    "label": "EndInitViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndInitViews(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries, FInstanceCullingManager& InstanceCullingManager, FInitViewTaskDatas& TaskDatas)"
  },
  {
    "label": "BeginUpdateLumenSceneTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUpdateLumenSceneTasks(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "UpdateLumenScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLumenScene(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "RenderLumenSceneLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLumenSceneLighting(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const FLumenDirectLightingTaskData* DirectLightingTaskData)"
  },
  {
    "label": "BeginGatherLumenLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGatherLumenLights(const FLumenSceneFrameTemporaries& FrameTemporaries, FLumenDirectLightingTaskData*& TaskData, IVisibilityTaskData* VisibilityTaskData, UE::Tasks::FTask UpdateLightFunctionAtlasTask)"
  },
  {
    "label": "RenderDirectLightingForLumenScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDirectLightingForLumenScene(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const FLumenDirectLightingTaskData* DirectLightingTaskData, const FLumenCardUpdateContext& CardUpdateContext, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "RenderRadiosityForLumenScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRadiosityForLumenScene(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const LumenRadiosity::FFrameTemporaries& RadiosityFrameTemporaries, const FLumenCardUpdateContext& CardUpdateContext, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "ClearLumenSurfaceCacheAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLumenSurfaceCacheAtlas(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const FGlobalShaderMap* GlobalShaderMap)"
  },
  {
    "label": "UpdateLumenSurfaceCacheAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLumenSurfaceCacheAtlas(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FLumenSceneFrameTemporaries& FrameTemporaries, const TArray<FCardPageRenderData, SceneRenderingAllocator>& CardPagesToRender, FRDGBufferSRVRef CardCaptureRectBufferSRV, const struct FCardCaptureAtlas& CardCaptureAtlas, const struct FResampledCardCaptureAtlas& ResampledCardCaptureAtlas)"
  },
  {
    "label": "GetLumenTranslucencyGIVolumeRadianceCacheInputs()",
    "kind": "Method",
    "detail": "Function (LumenRadianceCache::FUpdateInputs)",
    "insertText": "GetLumenTranslucencyGIVolumeRadianceCacheInputs(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FLumenSceneFrameTemporaries& FrameTemporaries, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "ComputeLumenTranslucencyGIVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLumenTranslucencyGIVolume(FRDGBuilder& GraphBuilder, FViewInfo& View, const FLumenSceneFrameTemporaries& FrameTemporaries, LumenRadianceCache::FRadianceCacheInterpolationParameters& RadianceCacheParameters, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "CreateIndirectCapsuleShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateIndirectCapsuleShadows()"
  },
  {
    "label": "RenderPrePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPrePass(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FRDGTextureRef SceneDepthTexture, FInstanceCullingManager& InstanceCullingManager, FRDGTextureRef* FirstStageDepthBuffer)"
  },
  {
    "label": "RenderPrePassHMD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPrePassHMD(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FRDGTextureRef SceneDepthTexture)"
  },
  {
    "label": "RenderFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderFog(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef LightShaftOcclusionTexture, bool bFogComposeLocalFogVolumes)"
  },
  {
    "label": "RenderUnderWaterFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderUnderWaterFog(FRDGBuilder& GraphBuilder, const FSceneWithoutWaterTextures& SceneWithoutWaterTextures, TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesWithDepth)"
  },
  {
    "label": "RenderAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAtmosphere(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef LightShaftOcclusionTexture)"
  },
  {
    "label": "SetupCommonDiffuseIndirectParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCommonDiffuseIndirectParameters(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, HybridIndirectLighting::FCommonParameters& OutCommonDiffuseParameters)"
  },
  {
    "label": "DispatchAsyncLumenIndirectLightingWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchAsyncLumenIndirectLightingWork(FRDGBuilder& GraphBuilder, class FCompositionLighting& CompositionLighting, FSceneTextures& SceneTextures, FInstanceCullingManager& InstanceCullingManager, FLumenSceneFrameTemporaries& LumenFrameTemporaries, FDynamicShadowsTaskData* DynamicShadowsTaskData, FRDGTextureRef LightingChannelsTexture, bool bHasLumenLights, FAsyncLumenIndirectLightingOutputs& Outputs)"
  },
  {
    "label": "RenderDiffuseIndirectAndAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDiffuseIndirectAndAmbientOcclusion(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& FrameTemporaries, FRDGTextureRef LightingChannelsTexture, bool bHasLumenLights, bool bCompositeRegularLumenOnly, bool bIsVisualizePass, FAsyncLumenIndirectLightingOutputs& AsyncLumenIndirectLightingOutputs)"
  },
  {
    "label": "RenderDeferredReflectionsAndSkyLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredReflectionsAndSkyLighting(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& LumenFrameTemporaries, TArray<FRDGTextureRef>& DynamicBentNormalAOTexture)"
  },
  {
    "label": "RenderDeferredReflectionsAndSkyLightingHair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredReflectionsAndSkyLightingHair(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) void RenderGlobalIlluminationPluginVisualizations(FRDGBuilder& GraphBuilder, FRDGTextureRef LightingChannelsTexture)"
  },
  {
    "label": "RenderDFAOAsIndirectShadowing()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RenderDFAOAsIndirectShadowing(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, TArray<FRDGTextureRef>& DynamicBentNormalAOTextures)"
  },
  {
    "label": "ShouldRenderDistanceFieldLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderDistanceFieldLighting()"
  },
  {
    "label": "RenderDistanceFieldLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDistanceFieldLighting(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const class FDistanceFieldAOParameters& Parameters, TArray<FRDGTextureRef>& OutDynamicBentNormalAOTextures, bool bModulateToSceneColor, bool bVisualizeAmbientOcclusion)"
  },
  {
    "label": "RenderDistanceFieldAOScreenGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDistanceFieldAOScreenGrid(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const FViewInfo& View, const FDistanceFieldCulledObjectBufferParameters& CulledObjectBufferParameters, FRDGBufferRef ObjectTilesIndirectArguments, const FTileIntersectionParameters& TileIntersectionParameters, const FDistanceFieldAOParameters& Parameters, FRDGTextureRef DistanceFieldNormal, FRDGTextureRef& OutDynamicBentNormalAO)"
  },
  {
    "label": "RenderMegaLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMegaLights(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderLumenFinalGather()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "RenderLumenFinalGather(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& FrameTemporaries, FRDGTextureRef LightingChannelsTexture, FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, bool bRenderDirectLighting, class FLumenMeshSDFGridParameters& MeshSDFGridParameters, LumenRadianceCache::FRadianceCacheInterpolationParameters& RadianceCacheParameters, class FLumenScreenSpaceBentNormalParameters& ScreenSpaceBentNormalParameters, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "RenderLumenScreenProbeGather()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "RenderLumenScreenProbeGather(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& FrameTemporaries, FRDGTextureRef LightingChannelsTexture, FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, bool bRenderDirectLighting, class FLumenMeshSDFGridParameters& MeshSDFGridParameters, LumenRadianceCache::FRadianceCacheInterpolationParameters& RadianceCacheParameters, class FLumenScreenSpaceBentNormalParameters& ScreenBentNormalParameters, LumenRadianceCache::FRadianceCacheInterpolationParameters& TranslucencyVolumeRadianceCacheParameters, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "RenderLumenReSTIRGather()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "RenderLumenReSTIRGather(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& FrameTemporaries, FRDGTextureRef LightingChannelsTexture, FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, ERDGPassFlags ComputePassFlags, FLumenScreenSpaceBentNormalParameters& ScreenSpaceBentNormalParameters)"
  },
  {
    "label": "StoreStochasticLightingSceneHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreStochasticLightingSceneHistory(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "QueueExtractStochasticLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueExtractStochasticLighting(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "RenderLumenIrradianceFieldGather()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "RenderLumenIrradianceFieldGather(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const FLumenSceneFrameTemporaries& FrameTemporaries, const FViewInfo& View, LumenRadianceCache::FRadianceCacheInterpolationParameters& TranslucencyVolumeRadianceCacheParameters, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "RenderLumenReflections()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "RenderLumenReflections(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& FrameTemporaries, const class FLumenMeshSDFGridParameters& MeshSDFGridParameters, const LumenRadianceCache::FRadianceCacheInterpolationParameters& RadianceCacheParameters, ELumenReflectionPass ReflectionPass, const FTiledReflection* TiledReflectionInput, const class FLumenFrontLayerTranslucencyGBufferParameters* FrontLayerReflectionGBuffer, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "RenderLumenFrontLayerTranslucencyReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLumenFrontLayerTranslucencyReflections(FRDGBuilder& GraphBuilder, FViewInfo& View, const FSceneTextures& SceneTextures, FLumenSceneFrameTemporaries& LumenFrameTemporaries, const FFrontLayerTranslucencyData& FrontLayerTranslucencyData)"
  },
  {
    "label": "RenderFrontLayerTranslucency()",
    "kind": "Method",
    "detail": "Function (FFrontLayerTranslucencyData)",
    "insertText": "RenderFrontLayerTranslucency(FRDGBuilder& GraphBuilder, TArray<FViewInfo>& Views, const FSceneTextures& SceneTextures, bool bRenderOnlyForVSMPageMarking)"
  },
  {
    "label": "IsLumenFrontLayerTranslucencyEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLumenFrontLayerTranslucencyEnabled(const FViewInfo& View)"
  },
  {
    "label": "RenderLumenMiscVisualizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLumenMiscVisualizations(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "RenderLumenRadianceCacheVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLumenRadianceCacheVisualization(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderLumenRadiosityProbeVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLumenRadiosityProbeVisualization(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "LumenScenePDIVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LumenScenePDIVisualization()"
  },
  {
    "label": "BeginGatheringLumenSurfaceCacheFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGatheringLumenSurfaceCacheFeedback(FRDGBuilder& GraphBuilder, const FViewInfo& View, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "FinishGatheringLumenSurfaceCacheFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishGatheringLumenSurfaceCacheFeedback(FRDGBuilder& GraphBuilder, const FViewInfo& View, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "ShouldUseClusteredDeferredShading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseClusteredDeferredShading()"
  },
  {
    "label": "AreLightsInLightGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreLightsInLightGrid()"
  },
  {
    "label": "AddClusteredDeferredShadingPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClusteredDeferredShadingPass(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FSortedLightSetSceneInfo& SortedLightsSet, FRDGTextureRef ShadowMaskBits, FRDGTextureRef HairStrandsShadowMaskBits, FRDGTextureRef ShadowMaskBitsLightingChannelsTexture)"
  },
  {
    "label": "RenderLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLights(FRDGBuilder& GraphBuilder, FMinimalSceneTextures& SceneTextures, const FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, FRDGTextureRef LightingChannelsTexture, const FSortedLightSetSceneInfo& SortedLightSet)"
  },
  {
    "label": "RenderStationaryLightOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderStationaryLightOverlap(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef LightingChannelsTexture)"
  },
  {
    "label": "RenderTranslucency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTranslucency(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, FTranslucencyPassResourcesMap* OutTranslucencyResourceMap, ETranslucencyView ViewsToRender, FInstanceCullingManager& InstanceCullingManager, bool bStandardTranslucentCanRenderSeparate, FRDGTextureMSAA& OutSharedDepthTexture)"
  },
  {
    "label": "RenderTranslucencyInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTranslucencyInner(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, FTranslucencyPassResourcesMap* OutTranslucencyResourceMap, FRDGTextureMSAA SharedDepthTexture, ETranslucencyView ViewsToRender, FRDGTextureRef SceneColorCopyTexture, ETranslucencyPass::Type TranslucencyPass, FInstanceCullingManager& InstanceCullingManager, bool bStandardTranslucentCanRenderSeparate)"
  },
  {
    "label": "UpscaleTranslucencyIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpscaleTranslucencyIfNeeded(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, ETranslucencyView ViewsToRender, FTranslucencyPassResourcesMap* OutTranslucencyResourceMap, FRDGTextureMSAA& InSharedDepthTexture)"
  },
  {
    "label": "RenderLightShaftOcclusion()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "RenderLightShaftOcclusion(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderLightShaftBloom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightShaftBloom(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FTranslucencyPassResourcesMap& OutTranslucencyResourceMap)"
  },
  {
    "label": "ShouldRenderDistortion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderDistortion()"
  },
  {
    "label": "RenderDistortion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDistortion(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneColorTexture, FRDGTextureRef SceneDepthTexture, FRDGTextureRef SceneVelocityTexture, FTranslucencyPassResourcesMap& TranslucencyResourceMap)"
  },
  {
    "label": "CollectLightForTranslucencyLightingVolumeInjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectLightForTranslucencyLightingVolumeInjection(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, const FLightSceneInfo* LightSceneInfo, bool bSupportShadowMaps, FTranslucentLightInjectionCollector& Collector)"
  },
  {
    "label": "RenderIndirectCapsuleShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderIndirectCapsuleShadows(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderCapsuleShadowsForMovableSkylight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderCapsuleShadowsForMovableSkylight(FRDGBuilder& GraphBuilder, const FViewInfo& View, TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformBuffer, FRDGTextureRef& BentNormalOutput)"
  },
  {
    "label": "RenderDeferredShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredShadowProjections(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, FRDGTextureRef ScreenShadowMaskSubPixelTexture)"
  },
  {
    "label": "RenderForwardShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderForwardShadowProjections(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef& ForwardScreenSpaceShadowMask, FRDGTextureRef& ForwardScreenSpaceShadowMaskSubPixel)"
  },
  {
    "label": "RenderLightFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderLightFunction(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, bool bLightAttenuationCleared, bool bProjectingForForwardShading, bool bUseHairStrands)"
  },
  {
    "label": "RenderPreviewShadowsIndicator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderPreviewShadowsIndicator(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, bool bLightAttenuationCleared, bool bUseHairStrands)"
  },
  {
    "label": "RenderLightFunctionForMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderLightFunctionForMaterial(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, const FMaterialRenderProxy* MaterialProxy, bool bLightAttenuationCleared, bool bProjectingForForwardShading, bool bRenderingPreviewShadowsIndicator, bool bUseHairStrands)"
  },
  {
    "label": "RenderLightsForHair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightsForHair(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FSortedLightSetSceneInfo& SortedLightSet, FRDGTextureRef InScreenShadowMaskSubPixelTexture, FRDGTextureRef LightingChannelsTexture)"
  },
  {
    "label": "RenderLightForHair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightForHair(FRDGBuilder& GraphBuilder, FViewInfo& View, const FMinimalSceneTextures& SceneTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef ScreenShadowMaskSubPixelTexture, FRDGTextureRef LightingChannelsTexture, const FHairStrandsTransmittanceMaskData& InTransmittanceMaskData, const bool bForwardRendering, const bool bCanLightUsesAtlasForUnbatchedLight, TRDGUniformBufferRef<FVirtualShadowMapUniformParameters> VirtualShadowMapUniformBuffer = nullptr, FRDGTextureRef ShadowMaskBits = nullptr, int32 VirtualShadowMapId = INDEX_NONE)"
  },
  {
    "label": "RenderSimpleLightsStandardDeferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSimpleLightsStandardDeferred(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FSimpleLightArray& SimpleLights)"
  },
  {
    "label": "CopyStencilToLightingChannelTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CopyStencilToLightingChannelTexture(FRDGBuilder& GraphBuilder, FRDGTextureSRVRef SceneStencilTexture, const TArrayView<FRDGTextureRef> NaniteResolveTextures)"
  },
  {
    "label": "RenderHeterogeneousVolumeShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHeterogeneousVolumeShadows(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHeterogeneousVolumes(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "CompositeHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompositeHeterogeneousVolumes(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "VisualizeVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizeVolumetricLightmap(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderStandardDeferredImageBasedReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderStandardDeferredImageBasedReflections(FRHICommandListImmediate& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, bool bReflectionEnv, const TRefCountPtr<IPooledRenderTarget>& DynamicBentNormalAO, TRefCountPtr<IPooledRenderTarget>& VelocityRT)"
  },
  {
    "label": "HasDeferredPlanarReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeferredPlanarReflections(const FViewInfo& View)"
  },
  {
    "label": "RenderDeferredPlanarReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredPlanarReflections(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, FRDGTextureRef& ReflectionsOutput)"
  },
  {
    "label": "SetupImaginaryReflectionTextureParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupImaginaryReflectionTextureParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSceneTextureParameters* OutTextures)"
  },
  {
    "label": "RenderRayTracingReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingReflections(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const FViewInfo& View, int DenoiserMode, const FRayTracingReflectionOptions& Options, IScreenSpaceDenoiser::FReflectionsInputs* OutDenoiserInputs)"
  },
  {
    "label": "RenderRayTracingDeferredReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingDeferredReflections(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, int DenoiserMode, const FRayTracingReflectionOptions& Options, IScreenSpaceDenoiser::FReflectionsInputs* OutDenoiserInputs)"
  },
  {
    "label": "RenderDitheredLODFadingOutMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDitheredLODFadingOutMask(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef SceneDepthTexture)"
  },
  {
    "label": "RenderRayTracingShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingShadows(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, const FLightSceneInfo& LightSceneInfo, const IScreenSpaceDenoiser::FShadowRayTracingConfig& RayTracingConfig, const IScreenSpaceDenoiser::EShadowRequirements DenoiserRequirements, FRDGTextureRef LightingChannelsTexture, FRDGTextureUAV* OutShadowMaskUAV, FRDGTextureUAV* OutRayHitDistanceUAV, FRDGTextureUAV* SubPixelRayTracingShadowMaskUAV)"
  },
  {
    "label": "CompositeRayTracingSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompositeRayTracingSkyLight(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef SkyLightRT, FRDGTextureRef HitDistanceRT)"
  },
  {
    "label": "RenderRayTracingAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingAmbientOcclusion(FRDGBuilder& GraphBuilder, FViewInfo& View, const FSceneTextureParameters& SceneTextures, FRDGTextureRef* OutAmbientOcclusionTexture)"
  },
  {
    "label": "RenderRayTracingRectLightInternal()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING template<int TextureImportanceSampling> void)",
    "insertText": "RenderRayTracingRectLightInternal(FRDGBuilder& GraphBuilder, TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformBuffer, const TArray<FViewInfo>& Views, const FLightSceneInfo& RectLightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, FRDGTextureRef RayDistanceTexture)"
  },
  {
    "label": "RenderRayTracingSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingSkyLight(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneColorTexture, FRDGTextureRef& OutSkyLightTexture, FRDGTextureRef& OutHitDistanceTexture)"
  },
  {
    "label": "RenderRayTracingPrimaryRaysView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingPrimaryRaysView(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef* InOutColorTexture, FRDGTextureRef* InOutRayHitDistanceTexture, int32 SamplePerPixel, int32 HeightFog, float ResolutionFraction, ERayTracingPrimaryRaysFlag Flags)"
  },
  {
    "label": "RenderRayTracingTranslucency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingTranslucency(FRDGBuilder& GraphBuilder, FRDGTextureMSAA SceneColorTexture)"
  },
  {
    "label": "RenderRayTracingTranslucencyView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingTranslucencyView(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef* OutColorTexture, FRDGTextureRef* OutRayHitDistanceTexture, int32 SamplePerPixel, int32 HeightFog, float ResolutionFraction)"
  },
  {
    "label": "SetupRayTracingDefaultMissShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRayTracingDefaultMissShader(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "SetupPathTracingDefaultMissShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPathTracingDefaultMissShader(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "SetupRayTracingLightingMissShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRayTracingLightingMissShader(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderPathTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPathTracing(FRDGBuilder& GraphBuilder, const FViewInfo& View, TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformBuffer, FRDGTextureRef SceneColorOutputTexture, FRDGTextureRef SceneDepthOutputTexture, struct FPathTracingResources& PathTracingResources)"
  },
  {
    "label": "ComputePathCompaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePathCompaction(FRHICommandListImmediate& RHICmdList, const FViewInfo& View, FRHITexture* RadianceTexture, FRHITexture* SampleCountTexture, FRHITexture* PixelPositionTexture, FRHIUnorderedAccessView* RadianceSortedRedUAV, FRHIUnorderedAccessView* RadianceSortedGreenUAV, FRHIUnorderedAccessView* RadianceSortedBlueUAV, FRHIUnorderedAccessView* RadianceSortedAlphaUAV, FRHIUnorderedAccessView* SampleCountSortedUAV)"
  },
  {
    "label": "WaitForRayTracingScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForRayTracingScene(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "RenderRayTracingDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingDebug(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef SceneColorOutputTexture, FRayTracingPickingFeedback& PickingFeedback)"
  },
  {
    "label": "RenderRayTracingBarycentrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracingBarycentrics(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef SceneColorOutputTexture, bool bVisualizeProceduralPrimitives)"
  },
  {
    "label": "RayTracingDisplayPicking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RayTracingDisplayPicking(const FRayTracingPickingFeedback& PickingFeedback, FScreenMessageWriter& Writer)"
  },
  {
    "label": "SetupRayTracingPipelineStatesAndSBT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupRayTracingPipelineStatesAndSBT(FRDGBuilder& GraphBuilder, bool bAnyLumenHardwareInlineRayTracingPassEnabled)"
  },
  {
    "label": "SetupRayTracingLightDataForViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupRayTracingLightDataForViews(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "DispatchRayTracingWorldUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DispatchRayTracingWorldUpdates(FRDGBuilder& GraphBuilder, FRDGBufferRef& OutDynamicGeometryScratchBuffer)"
  },
  {
    "label": "CreateRayTracingMaterialPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRayTracingMaterialPipeline(FRDGBuilder& GraphBuilder, FViewInfo& View, const TArrayView<FRHIRayTracingShader*>& RayGenShaderTable, uint32& OutMaxLocalBindingDataSize)"
  },
  {
    "label": "CreateLumenHardwareRayTracingMaterialPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLumenHardwareRayTracingMaterialPipeline(FRDGBuilder& GraphBuilder, FViewInfo& View, const TArrayView<FRHIRayTracingShader*>& RayGenShaderTable, uint32& OutMaxLocalBindingDataSize)"
  },
  {
    "label": "SetupLumenHardwareRaytracingHitGroupBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLumenHardwareRaytracingHitGroupBindings(FRDGBuilder& GraphBuilder, FViewInfo& View, ERayTracingShaderBindingMode ShaderBindingMode)"
  },
  {
    "label": "BindRayTracingMaterialPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindRayTracingMaterialPipeline(FRHICommandList& RHICmdList, FViewInfo& View)"
  },
  {
    "label": "BindLumenHardwareRayTracingMaterialPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindLumenHardwareRayTracingMaterialPipeline(FRHICommandList& RHICmdList, FViewInfo& View)"
  },
  {
    "label": "SetupLumenHardwareRayTracingHitGroupBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLumenHardwareRayTracingHitGroupBuffer(FRDGBuilder& GraphBuilder, FViewInfo& View)"
  },
  {
    "label": "SetupLumenHardwareRayTracingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLumenHardwareRayTracingUniformBuffer(FViewInfo& View)"
  },
  {
    "label": "PrepareRayTracingShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingShadows(const FViewInfo& View, const FScene& Scene, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingAmbientOcclusion(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingSkyLight(const FViewInfo& View, const FScene& Scene, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingGlobalIlluminationPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingGlobalIlluminationPlugin(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingTranslucency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingTranslucency(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingVolumetricFogShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingVolumetricFogShadows(const FViewInfo& View, const FScene& Scene, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareRayTracingDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareRayTracingDebug(const FSceneViewFamily& ViewFamily, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PreparePathTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreparePathTracing(const FSceneViewFamily& ViewFamily, const FScene& Scene, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingShortRangeAO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingShortRangeAO(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingScreenProbeGather()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingScreenProbeGather(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingRadianceCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingRadianceCache(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingReflections(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingReSTIR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingReSTIR(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingVisualize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingVisualize(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareMegaLightsHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareMegaLightsHardwareRayTracing(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingTranslucencyVolumeLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingTranslucencyVolumeLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingVisualizeLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingVisualizeLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingReflectionsLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingReflectionsLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingReSTIRLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingReSTIRLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingScreenProbeGatherLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingScreenProbeGatherLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingRadianceCacheLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingRadianceCacheLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingRadiosityLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingRadiosityLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareLumenHardwareRayTracingDirectLightingLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLumenHardwareRayTracingDirectLightingLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "PrepareMegaLightsHardwareRayTracingLumenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareMegaLightsHardwareRayTracingLumenMaterial(const FViewInfo& View, TArray<FRHIRayTracingShader*>& OutRayGenShaders)"
  },
  {
    "label": "RenderNanite()",
    "kind": "Method",
    "detail": "Function (# endif struct FNaniteBasePassVisibility { FNaniteVisibilityQuery* Query = nullptr ; FNaniteVisibility* Visibility = nullptr ; } NaniteBasePassVisibility ; void)",
    "insertText": "RenderNanite(FRDGBuilder& GraphBuilder, const TArray<FViewInfo>& InViews, FSceneTextures& SceneTextures, bool bIsEarlyDepthComplete, FNaniteBasePassVisibility& InNaniteBasePassVisibility, TArray<Nanite::FRasterResults, TInlineAllocator<2>>& NaniteRasterResults, TArray<Nanite::FPackedView, SceneRenderingAllocator>& PrimaryNaniteViews)"
  }
]