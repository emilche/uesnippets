[
  {
    "label": "VideoBitrateAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocator"
  },
  {
    "label": "VideoBitrateAllocationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocationObserver"
  },
  {
    "label": "VCMProcessTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMProcessTimer"
  },
  {
    "label": "DEPRECATED_VCMDecoderDataBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DEPRECATED_VCMDecoderDataBase"
  },
  {
    "label": "VideoReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiver"
  },
  {
    "label": "VCMProcessTimer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_VIDEO_CODING_IMPL_H_ # define MODULES_VIDEO_CODING_VIDEO_CODING_IMPL_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" modules / video_coding / frame_buffer . h \" # include \" modules / video_coding / generic_decoder . h \" # include \" modules / video_coding / include / video_coding . h \" # include \" modules / video_coding / jitter_buffer . h \" # include \" modules / video_coding / receiver . h \" # include \" modules / video_coding / timing / timing . h \" # include \" rtc_base / one_time_event . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class VideoBitrateAllocator ; class VideoBitrateAllocationObserver ; namespace vcm { class VCMProcessTimer { public : const int64_t kDefaultProcessIntervalMs = 1 0 0 0 ;)",
    "insertText": "VCMProcessTimer(int64_t periodMs, Clock* clock) : _clock(clock), _periodMs(periodMs), _latestMs(_clock->TimeInMilliseconds())"
  },
  {
    "label": "Period()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "Period()"
  },
  {
    "label": "TimeUntilProcess()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "TimeUntilProcess()"
  },
  {
    "label": "Processed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Processed()"
  },
  {
    "label": "DEPRECATED_VCMDecoderDataBase()",
    "kind": "Method",
    "detail": "Function (private : Clock* _clock ; int64_t _periodMs ; int64_t _latestMs ; } ; class DEPRECATED_VCMDecoderDataBase { public :)",
    "insertText": "DEPRECATED_VCMDecoderDataBase()"
  },
  {
    "label": "DEPRECATED_VCMDecoderDataBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEPRECATED_VCMDecoderDataBase(const DEPRECATED_VCMDecoderDataBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DEPRECATED_VCMDecoderDataBase&)",
    "insertText": "operator(const DEPRECATED_VCMDecoderDataBase&)"
  },
  {
    "label": "DeregisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (VideoDecoder*)",
    "insertText": "DeregisterExternalDecoder(uint8_t payload_type)"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(uint8_t payload_type, VideoDecoder* external_decoder)"
  },
  {
    "label": "IsExternalDecoderRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalDecoderRegistered(uint8_t payload_type)"
  },
  {
    "label": "RegisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiveCodec(uint8_t payload_type, const VideoDecoder::Settings& settings)"
  },
  {
    "label": "DeregisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeregisterReceiveCodec(uint8_t payload_type)"
  },
  {
    "label": "GetDecoder()",
    "kind": "Method",
    "detail": "Function (VCMGenericDecoder*)",
    "insertText": "GetDecoder(const VCMEncodedFrame& frame, VCMDecodedFrameCallback* decoded_frame_callback)"
  },
  {
    "label": "CreateAndInitDecoder()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateAndInitDecoder(const VCMEncodedFrame& frame) RTC_RUN_ON(decoder_sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker decoder_sequence_checker_ ; absl::optional<uint8_t> current_payload_type_ ; absl::optional<VCMGenericDecoder> current_decoder_)",
    "insertText": "RTC_GUARDED_BY(decoder_sequence_checker_)"
  },
  {
    "label": "VideoReceiver()",
    "kind": "Method",
    "detail": "Function (} ; class VideoReceiver { public :)",
    "insertText": "VideoReceiver(Clock* clock, VCMTiming* timing, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoReceiver()"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(VideoDecoder* externalDecoder, uint8_t payloadType)"
  },
  {
    "label": "RegisterReceiveCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterReceiveCallback(VCMReceiveCallback* receiveCallback)"
  },
  {
    "label": "RegisterFrameTypeCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterFrameTypeCallback(VCMFrameTypeCallback* frameTypeCallback)"
  },
  {
    "label": "RegisterPacketRequestCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterPacketRequestCallback(VCMPacketRequestCallback* callback)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(uint16_t maxWaitTimeMs)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IncomingPacket(const uint8_t* incomingPayload, size_t payloadLength, const RTPHeader& rtp_header, const RTPVideoHeader& video_header)"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size, int max_packet_age_to_nack, int max_incomplete_time_ms)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (protected : int32_t)",
    "insertText": "Decode(const webrtc::VCMEncodedFrame& frame)"
  },
  {
    "label": "RequestKeyFrame()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RequestKeyFrame()"
  },
  {
    "label": "IsDecoderThreadRunning()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsDecoderThreadRunning()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker construction_thread_checker_ ; SequenceChecker decoder_thread_checker_ ; SequenceChecker module_thread_checker_ ; Clock* const clock_ ; Mutex process_mutex_ ; VCMTiming* _timing ; VCMReceiver _receiver ; VCMDecodedFrameCallback _decodedFrameCallback ; VCMFrameTypeCallback* _frameTypeCallback ; VCMPacketRequestCallback* _packetRequestCallback ; bool _scheduleKeyRequest)",
    "insertText": "RTC_GUARDED_BY(process_mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (size_t max_nack_list_size_ ; DEPRECATED_VCMDecoderDataBase _codecDataBase ; VCMProcessTimer _retransmissionTimer)",
    "insertText": "RTC_GUARDED_BY(module_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ThreadUnsafeOneTimeEvent first_frame_received_)",
    "insertText": "RTC_GUARDED_BY(decoder_thread_checker_)"
  }
]