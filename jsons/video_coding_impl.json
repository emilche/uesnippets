[
  {
    "label": "VideoBitrateAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocator"
  },
  {
    "label": "VideoBitrateAllocationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocationObserver"
  },
  {
    "label": "VCMProcessTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMProcessTimer"
  },
  {
    "label": "DEPRECATED_VCMDecoderDataBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DEPRECATED_VCMDecoderDataBase"
  },
  {
    "label": "VideoReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiver"
  },
  {
    "label": "Processed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Processed()"
  },
  {
    "label": "DEPRECATED_VCMDecoderDataBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DEPRECATED_VCMDecoderDataBase()"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(uint8_t payload_type,\n                               VideoDecoder* external_decoder)"
  },
  {
    "label": "RegisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiveCodec(uint8_t payload_type,\n                            const VideoDecoder::Settings& settings)"
  },
  {
    "label": "DeregisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeregisterReceiveCodec(uint8_t payload_type)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_decoder_)",
    "insertText": "RTC_GUARDED_BY(decoder_sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (decoders_)",
    "insertText": "RTC_GUARDED_BY(decoder_sequence_checker_)"
  },
  {
    "label": "VideoReceiver()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VideoReceiver(Clock* clock,\n                VCMTiming* timing,\n                const FieldTrialsView& field_trials)"
  },
  {
    "label": "RegisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiveCodec(uint8_t payload_type,\n                            const VideoDecoder::Settings& settings)"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(VideoDecoder* externalDecoder,\n                               uint8_t payloadType)"
  },
  {
    "label": "RegisterReceiveCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterReceiveCallback(VCMReceiveCallback* receiveCallback)"
  },
  {
    "label": "RegisterFrameTypeCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterFrameTypeCallback(VCMFrameTypeCallback* frameTypeCallback)"
  },
  {
    "label": "RegisterPacketRequestCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterPacketRequestCallback(VCMPacketRequestCallback* callback)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(uint16_t maxWaitTimeMs)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IncomingPacket(const uint8_t* incomingPayload,\n                         size_t payloadLength,\n                         const RTPHeader& rtp_header,\n                         const RTPVideoHeader& video_header)"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size,\n                       int max_packet_age_to_nack,\n                       int max_incomplete_time_ms)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const webrtc::VCMEncodedFrame& frame)"
  },
  {
    "label": "RequestKeyFrame()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RequestKeyFrame()"
  },
  {
    "label": "IsDecoderThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDecoderThreadRunning()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (_scheduleKeyRequest)",
    "insertText": "RTC_GUARDED_BY(process_mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (drop_frames_until_keyframe_)",
    "insertText": "RTC_GUARDED_BY(process_mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (_retransmissionTimer)",
    "insertText": "RTC_GUARDED_BY(module_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (_keyRequestTimer)",
    "insertText": "RTC_GUARDED_BY(module_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (first_frame_received_)",
    "insertText": "RTC_GUARDED_BY(decoder_thread_checker_)"
  }
]