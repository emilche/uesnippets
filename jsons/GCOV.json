[
  {
    "label": "GCOVFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCOVFunction"
  },
  {
    "label": "GCOVBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCOVBlock"
  },
  {
    "label": "FileInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileInfo"
  },
  {
    "label": "GCOVVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GCOVVersion"
  },
  {
    "label": "GCOVOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCOVOptions"
  },
  {
    "label": "GCOVBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCOVBuffer"
  },
  {
    "label": "GCOVFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCOVFile"
  },
  {
    "label": "GCOVEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCOVEdge"
  },
  {
    "label": "EdgeWeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EdgeWeight"
  },
  {
    "label": "SortDstEdgesFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SortDstEdgesFunctor"
  },
  {
    "label": "LineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LineData"
  },
  {
    "label": "GCOVCoverage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCOVCoverage"
  },
  {
    "label": "GCOVOptions()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_GCOV_H # define LLVM_SUPPORT_GCOV_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / iterator . h \" # include \" llvm / Support / MemoryBuffer . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { class GCOVFunction ; class GCOVBlock ; class FileInfo ; namespace GCOV { enum GCOVVersion { V402,V404 } ; } struct GCOVOptions {)",
    "insertText": "GCOVOptions(bool A, bool B, bool C, bool F, bool P, bool U, bool L, bool N) : AllBlocks(A), BranchInfo(B), BranchCount(C), FuncCoverage(F), PreservePaths(P), UncondBranch(U), LongFileNames(L), NoOutput(N)"
  },
  {
    "label": "GCOVBuffer()",
    "kind": "Method",
    "detail": "Function (} bool AllBlocks ; bool BranchInfo ; bool BranchCount ; bool FuncCoverage ; bool PreservePaths ; bool UncondBranch ; bool LongFileNames ; bool NoOutput ; } ; class GCOVBuffer { public :)",
    "insertText": "GCOVBuffer(MemoryBuffer *B) : Buffer(B), Cursor(0)"
  },
  {
    "label": "readGCNOFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "readGCNOFormat()"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (StringRef File = Buffer ->)",
    "insertText": "getBuffer().slice(0, 4)"
  },
  {
    "label": "errs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "errs()"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (StringRef VersionStr = Buffer ->)",
    "insertText": "getBuffer().slice(Cursor, Cursor + 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Cursor + = 4 ; Version = GCOV::V402 ; return true ; })",
    "insertText": "if(VersionStr == \"*404\")"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (Cursor + = 4 ;)",
    "insertText": "Val(const uint32_t *)(Str.data())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t Lo,Hi ;)",
    "insertText": "if(!readInt(Lo) || !readInt(Hi))"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Val((uint64_t)Hi << 32)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32_t Len = 0 ;)",
    "insertText": "while(Len == 0) if (!readInt(Len))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Len* = 4 ;)",
    "insertText": "if(Buffer->getBuffer().size() < Cursor + Len)"
  },
  {
    "label": "getCursor()",
    "kind": "Method",
    "detail": "Function (Cursor + = Len ; return true ; } uint64_t)",
    "insertText": "getCursor()"
  },
  {
    "label": "GCOVFile()",
    "kind": "Method",
    "detail": "Function (Cursor + = n* 4 ; } private : MemoryBuffer* Buffer ; uint64_t Cursor ; } ; class GCOVFile { public :)",
    "insertText": "GCOVFile() : GCNOInitialized(false), Checksum(0), Functions(), RunCount(0), ProgramCount(0)"
  },
  {
    "label": "readGCNO()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "readGCNO(GCOVBuffer &Buffer)"
  },
  {
    "label": "readGCDA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "readGCDA(GCOVBuffer &Buffer)"
  },
  {
    "label": "getChecksum()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getChecksum()"
  },
  {
    "label": "collectLineCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectLineCounts(FileInfo &FI)"
  },
  {
    "label": "GCOVEdge()",
    "kind": "Method",
    "detail": "Function (private : bool GCNOInitialized ; GCOV::GCOVVersion Version ; uint32_t Checksum ; SmallVector<std::unique_ptr<GCOVFunction>,1 6> Functions ; uint32_t RunCount ; uint32_t ProgramCount ; } ; struct GCOVEdge {)",
    "insertText": "GCOVEdge(GCOVBlock &S, GCOVBlock &D) : Src(S), Dst(D), Count(0)"
  },
  {
    "label": "GCOVFunction()",
    "kind": "Method",
    "detail": "Function (} GCOVBlock& Src ; GCOVBlock& Dst ; uint64_t Count ; } ; class GCOVFunction { public : typedef pointee_iterator<SmallVectorImpl<std::unique_ptr<GCOVBlock>>::const_iterator> BlockIterator ;)",
    "insertText": "GCOVFunction(GCOVFile &P) : Parent(P), Ident(0), LineNumber(0)"
  },
  {
    "label": "readGCNO()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "readGCNO(GCOVBuffer &Buffer, GCOV::GCOVVersion Version)"
  },
  {
    "label": "readGCDA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "readGCDA(GCOVBuffer &Buffer, GCOV::GCOVVersion Version)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "getEntryCount()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getEntryCount()"
  },
  {
    "label": "getExitCount()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getExitCount()"
  },
  {
    "label": "block_begin()",
    "kind": "Method",
    "detail": "Function (BlockIterator)",
    "insertText": "block_begin()"
  },
  {
    "label": "block_end()",
    "kind": "Method",
    "detail": "Function (} BlockIterator)",
    "insertText": "block_end()"
  },
  {
    "label": "blocks()",
    "kind": "Method",
    "detail": "Function (} iterator_range<BlockIterator>)",
    "insertText": "blocks()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (private : GCOVFile& Parent ; uint32_t Ident ; uint32_t Checksum ; uint32_t LineNumber ; StringRef Name ; StringRef Filename ; SmallVector<std::unique_ptr<GCOVBlock>,1 6> Blocks ; SmallVector<std::unique_ptr<GCOVEdge>,1 6> Edges ; } ; class GCOVBlock { struct EdgeWeight {)",
    "insertText": "EdgeWeight(GCOVBlock *D) : Dst(D), Count(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GCOVBlock* Dst ; uint64_t Count ; } ; struct SortDstEdgesFunctor { bool)",
    "insertText": "operator()(const GCOVEdge *E1, const GCOVEdge *E2)"
  },
  {
    "label": "GCOVBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GCOVBlock()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (const GCOVFunction&)",
    "insertText": "getParent()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Lines .)",
    "insertText": "push_back(N)"
  },
  {
    "label": "getLastLine()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getLastLine()"
  },
  {
    "label": "addCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addCount(size_t DstEdgeNo, uint64_t N)"
  },
  {
    "label": "getCount()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getCount()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(&Edge->Dst == this)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SrcEdges .)",
    "insertText": "push_back(Edge)"
  },
  {
    "label": "addDstEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addDstEdge(GCOVEdge *Edge)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(&Edge->Src == this)"
  },
  {
    "label": "getNumSrcEdges()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumSrcEdges()"
  },
  {
    "label": "getNumDstEdges()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumDstEdges()"
  },
  {
    "label": "sortDstEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sortDstEdges()"
  },
  {
    "label": "src_begin()",
    "kind": "Method",
    "detail": "Function (EdgeIterator)",
    "insertText": "src_begin()"
  },
  {
    "label": "src_end()",
    "kind": "Method",
    "detail": "Function (} EdgeIterator)",
    "insertText": "src_end()"
  },
  {
    "label": "srcs()",
    "kind": "Method",
    "detail": "Function (} iterator_range<EdgeIterator>)",
    "insertText": "srcs()"
  },
  {
    "label": "dst_begin()",
    "kind": "Method",
    "detail": "Function (} EdgeIterator)",
    "insertText": "dst_begin()"
  },
  {
    "label": "dst_end()",
    "kind": "Method",
    "detail": "Function (} EdgeIterator)",
    "insertText": "dst_end()"
  },
  {
    "label": "dsts()",
    "kind": "Method",
    "detail": "Function (} iterator_range<EdgeIterator>)",
    "insertText": "dsts()"
  },
  {
    "label": "LineData()",
    "kind": "Method",
    "detail": "Function (private : GCOVFunction& Parent ; uint32_t Number ; uint64_t Counter ; bool DstEdgesAreSorted ; SmallVector<GCOVEdge*,1 6> SrcEdges ; SmallVector<GCOVEdge*,1 6> DstEdges ; SmallVector<uint32_t,1 6> Lines ; } ; class FileInfo { typedef SmallVector<const GCOVFunction*,1> FunctionVector ; typedef DenseMap<uint32_t,FunctionVector> FunctionLines ; typedef SmallVector<const GCOVBlock*,4> BlockVector ; typedef DenseMap<uint32_t,BlockVector> BlockLines ; struct LineData {)",
    "insertText": "LineData() : LastLine(0)"
  },
  {
    "label": "GCOVCoverage()",
    "kind": "Method",
    "detail": "Function (} BlockLines Blocks ; FunctionLines Functions ; uint32_t LastLine ; } ; struct GCOVCoverage {)",
    "insertText": "GCOVCoverage(StringRef Name) : Name(Name), LogicalLines(0), LinesExec(0), Branches(0), BranchesExec(0), BranchesTaken(0)"
  },
  {
    "label": "FileInfo()",
    "kind": "Method",
    "detail": "Function (} StringRef Name ; uint32_t LogicalLines ; uint32_t LinesExec ; uint32_t Branches ; uint32_t BranchesExec ; uint32_t BranchesTaken ; } ; public :)",
    "insertText": "FileInfo(const GCOVOptions &Options) : Options(Options), LineInfo(), RunCount(0), ProgramCount(0)"
  },
  {
    "label": "addBlockLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addBlockLine(StringRef Filename, uint32_t Line, const GCOVBlock *Block)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LineInfo [ Filename ] . Blocks [ Line - 1 ] .)",
    "insertText": "push_back(Block)"
  },
  {
    "label": "addFunctionLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addFunctionLine(StringRef Filename, uint32_t Line, const GCOVFunction *Function)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LineInfo [ Filename ] . Functions [ Line - 1 ] .)",
    "insertText": "push_back(Function)"
  },
  {
    "label": "setRunCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRunCount(uint32_t Runs)"
  },
  {
    "label": "setProgramCount()",
    "kind": "Method",
    "detail": "Function (RunCount = Runs ; } void)",
    "insertText": "setProgramCount(uint32_t Programs)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (ProgramCount = Programs ; } void)",
    "insertText": "print(raw_ostream &OS, StringRef MainFilename, StringRef GCNOFile, StringRef GCDAFile)"
  },
  {
    "label": "getCoveragePath()",
    "kind": "Method",
    "detail": "Function (private : std::string)",
    "insertText": "getCoveragePath(StringRef Filename, StringRef MainFilename)"
  },
  {
    "label": "openCoveragePath()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<raw_ostream>)",
    "insertText": "openCoveragePath(StringRef CoveragePath)"
  },
  {
    "label": "printFunctionSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printFunctionSummary(raw_ostream &OS, const FunctionVector &Funcs)"
  },
  {
    "label": "printBlockInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBlockInfo(raw_ostream &OS, const GCOVBlock &Block, uint32_t LineIndex, uint32_t &BlockNo)"
  },
  {
    "label": "printBranchInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBranchInfo(raw_ostream &OS, const GCOVBlock &Block, GCOVCoverage &Coverage, uint32_t &EdgeNo)"
  },
  {
    "label": "printUncondBranchInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printUncondBranchInfo(raw_ostream &OS, uint32_t &EdgeNo, uint64_t Count)"
  },
  {
    "label": "printCoverage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printCoverage(raw_ostream &OS, const GCOVCoverage &Coverage)"
  },
  {
    "label": "printFuncCoverage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printFuncCoverage(raw_ostream &OS)"
  },
  {
    "label": "printFileCoverage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printFileCoverage(raw_ostream &OS)"
  }
]