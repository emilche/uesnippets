[
  {
    "label": "UNodeMappingContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNodeMappingContainer"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / SoftObjectPtr . h \" # include \" Animation / NodeMappingProviderInterface . h \" # include \" NodeMappingContainer . generated . h \")",
    "insertText": "UCLASS(hidecategories = Object, ClassGroup = \"Animation\", BlueprintType, Experimental, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY(VisibleAnywhere, Category = Mapping)"
  },
  {
    "label": "GetSourceAssetSoftObjectPtr()",
    "kind": "Method",
    "detail": "Function (public : const TSoftObjectPtr<UObject>&)",
    "insertText": "GetSourceAssetSoftObjectPtr()"
  },
  {
    "label": "GetSourceItems()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FNodeItem>&)",
    "insertText": "GetSourceItems()"
  },
  {
    "label": "SetSourceAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceAsset(UObject* InSourceAsset)"
  },
  {
    "label": "SetTargetAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetAsset(UObject* InTargetAsset)"
  },
  {
    "label": "GetSourceAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetSourceAsset()"
  },
  {
    "label": "GetTargetAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetTargetAsset()"
  },
  {
    "label": "AddMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMapping(const FName& InSourceNode, const FName& InTargetNode)"
  },
  {
    "label": "DeleteMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMapping(const FName& InSourceNode)"
  },
  {
    "label": "GetNodeMappingTable()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FName>&)",
    "insertText": "GetNodeMappingTable()"
  },
  {
    "label": "GetTargetToSourceMappingTable()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetTargetToSourceMappingTable(TMap<FName, FName>& OutMappingTable)"
  },
  {
    "label": "DoesContainMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesContainMapping(const FName& SourceNode)"
  },
  {
    "label": "GetSourceToTargetTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "GetSourceToTargetTransform(const FName& SourceNode)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FName* TargetNode = SourceToTarget .)",
    "insertText": "Find(SourceNode)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FNodeItem* Target = TargetItems .)",
    "insertText": "Find(*TargetNode)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform Result = Target -> Transform .)",
    "insertText": "GetRelativeTransform(Source->Transform)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "ValidateMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateMapping()"
  }
]