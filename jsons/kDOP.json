[
  {
    "label": "TkDOPLineCollisionCheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TkDOPLineCollisionCheck"
  },
  {
    "label": "FkHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FkHitResult"
  },
  {
    "label": "FVector3SOA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector3SOA"
  },
  {
    "label": "FVector4SOA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector4SOA"
  },
  {
    "label": "FTriangleSOA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleSOA"
  },
  {
    "label": "TTraversalHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTraversalHistory"
  },
  {
    "label": "FkDOPBuildCollisionTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FkDOPBuildCollisionTriangle"
  },
  {
    "label": "TkDOPNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TkDOPNode"
  },
  {
    "label": "TkDOPTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TkDOPTree"
  },
  {
    "label": "FFourBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFourBox"
  },
  {
    "label": "TkDOPCollisionCheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TkDOPCollisionCheck"
  },
  {
    "label": "FkHitResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ChunkedArray . h \" # include \" Templates / UnrealTemplate . h \" # include<limits> # define NUM_PLANES 3 template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPLineCollisionCheck ; struct FkHitResult { FVector4 Normal ; float Time ; int32 Item ;)",
    "insertText": "FkHitResult() : Normal (0,0,0,0) , Time (1.0f) , Item (INDEX_NONE)"
  },
  {
    "label": "TTraversalHistory()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVector3SOA { VectorRegister X ; VectorRegister Y ; VectorRegister Z ; } ; struct FVector4SOA { VectorRegister X ; VectorRegister Y ; VectorRegister Z ; VectorRegister W ; } ; struct FTriangleSOA { FVector3SOA Positions [ 3 ] ; FVector4SOA Normals ; uint32 Payload [ 4 ] ; } ; template<KDOP_IDX_TYPE> struct TTraversalHistory { enum { NodeHistoryLength = 1 } ; KDOP_IDX_TYPE Nodes [ NodeHistoryLength ] ;)",
    "insertText": "TTraversalHistory()"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (Nodes [ NodeIndex ] = 0 xFFFFFFFF ; } } TTraversalHistory)",
    "insertText": "AddNode(KDOP_IDX_TYPE NewNodeIndex)"
  },
  {
    "label": "CopyAssignItems()",
    "kind": "Method",
    "detail": "Function (TTraversalHistory NewHistory ;)",
    "insertText": "CopyAssignItems(NewHistory.Nodes + 1, Nodes, NodeHistoryLength - 1)"
  },
  {
    "label": "GetOldestNode()",
    "kind": "Method",
    "detail": "Function (NewHistory . Nodes [ 0 ] = NewNodeIndex ; return NewHistory ; } KDOP_IDX_TYPE)",
    "insertText": "GetOldestNode()"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (const FPlane::FReal StartDist =)",
    "insertText": "FPlane(Normal).PlaneDot(Start)"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (const FPlane::FReal EndDist =)",
    "insertText": "FPlane(Normal).PlaneDot(End)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if 1)",
    "insertText": "if((StartDist == EndDist) || (StartDist < -0.001f && EndDist < -0.001f) || (StartDist > 0.001f && EndDist > 0.001f)) #else if ( (StartDist * EndDist) > -0.0001f)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (const FVector4& SideDirection =)",
    "insertText": "Normal(*Verts[(SideIndex + 1) % 3] - *Verts[SideIndex])"
  },
  {
    "label": "Dot3()",
    "kind": "Method",
    "detail": "Function (const FVector4::FReal SideW =)",
    "insertText": "Dot3(SideDirection, *Verts[SideIndex])"
  },
  {
    "label": "Dot3()",
    "kind": "Method",
    "detail": "Function (const FVector4::FReal DotW =)",
    "insertText": "Dot3(SideDirection, Intersection)"
  },
  {
    "label": "DECLARE_VECTOR_REGISTER()",
    "kind": "Method",
    "detail": "Function (const VectorRegister GSmallNumber =)",
    "insertText": "DECLARE_VECTOR_REGISTER(0.0001f, 0.0001f, 0.0001f, 0.0001f)"
  },
  {
    "label": "DECLARE_VECTOR_REGISTER()",
    "kind": "Method",
    "detail": "Function (const VectorRegister GZeroVectorRegister =)",
    "insertText": "DECLARE_VECTOR_REGISTER(0.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (const VectorRegister VectorNegativeOne =)",
    "insertText": "MakeVectorRegister(-1.0f, -1.0f, -1.0f, -1.0f)"
  },
  {
    "label": "appLineCheckTriangleSOA()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "appLineCheckTriangleSOA(const FVector3SOA& Start, const FVector3SOA& End, const FVector3SOA& Dir, const FTriangleSOA& Triangle4, float& InOutIntersectionTime)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister TriangleMask ; VectorRegister StartDist ; StartDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.X, Start.X, Triangle4.Normals.W)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (StartDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.Y, Start.Y, StartDist)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (StartDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.Z, Start.Z, StartDist)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister EndDist ; EndDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.X, End.X, Triangle4.Normals.W)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (EndDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.Y, End.Y, EndDist)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (EndDist =)",
    "insertText": "VectorMultiplyAdd(Triangle4.Normals.Z, End.Z, EndDist)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (TriangleMask =)",
    "insertText": "VectorCompareLE(VectorMultiply(StartDist, EndDist), GSmallNegativeNumber)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (VectorRegister IntersectionTime =)",
    "insertText": "VectorLoadFloat1(&InOutIntersectionTime)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (TriangleMask =)",
    "insertText": "VectorBitwiseAnd(TriangleMask, VectorCompareGE( Time, VectorZero() ))"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (TriangleMask =)",
    "insertText": "VectorBitwiseAnd(TriangleMask, VectorCompareLT( Time, IntersectionTime ))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister IntersectionY =)",
    "insertText": "VectorMultiplyAdd(Dir.Y, Time, Start.Y)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister IntersectionZ =)",
    "insertText": "VectorMultiplyAdd(Dir.Z, Time, Start.Z)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister EdgeX =)",
    "insertText": "VectorSubtract(Triangle4.Positions[(SideIndex + 1) % 3].X, Triangle4.Positions[SideIndex].X)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister EdgeY =)",
    "insertText": "VectorSubtract(Triangle4.Positions[(SideIndex + 1) % 3].Y, Triangle4.Positions[SideIndex].Y)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister EdgeZ =)",
    "insertText": "VectorSubtract(Triangle4.Positions[(SideIndex + 1) % 3].Z, Triangle4.Positions[SideIndex].Z)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SideDirectionX =)",
    "insertText": "VectorNegateMultiplyAdd(Triangle4.Normals.Z, EdgeY, VectorMultiply(Triangle4.Normals.Y, EdgeZ))"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SideDirectionY =)",
    "insertText": "VectorNegateMultiplyAdd(Triangle4.Normals.X, EdgeZ, VectorMultiply(Triangle4.Normals.Z, EdgeX))"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SideDirectionZ =)",
    "insertText": "VectorNegateMultiplyAdd(Triangle4.Normals.Y, EdgeX, VectorMultiply(Triangle4.Normals.X, EdgeY))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister SideW ; SideW =)",
    "insertText": "VectorMultiply(SideDirectionX, Triangle4.Positions[SideIndex].X)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (SideW =)",
    "insertText": "VectorMultiplyAdd(SideDirectionY, Triangle4.Positions[SideIndex].Y, SideW)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (SideW =)",
    "insertText": "VectorMultiplyAdd(SideDirectionZ, Triangle4.Positions[SideIndex].Z, SideW)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister DotW ; DotW =)",
    "insertText": "VectorMultiply(SideDirectionX, IntersectionX)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (TriangleMask =)",
    "insertText": "VectorBitwiseAnd(TriangleMask, VectorCompareLT( VectorSubtract(DotW, SideW), GSmallNumber ))"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (VectorRegister BestTimes =)",
    "insertText": "VectorMin(Time, VectorSwizzle(Time, 2, 3, 0, 0))"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (BestTimes =)",
    "insertText": "VectorMin(BestTimes, VectorSwizzle(BestTimes, 1, 0, 0, 0))"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (IntersectionTime =)",
    "insertText": "VectorReplicate(BestTimes, 0)"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (int32 SubIndex =)",
    "insertText": "VectorMaskBits(VectorCompareEQ( Time, IntersectionTime ))"
  },
  {
    "label": "appCountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (SubIndex =)",
    "insertText": "appCountTrailingZeros(SubIndex)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(IntersectionTime, &InOutIntersectionTime)"
  },
  {
    "label": "GetLocalNormal()",
    "kind": "Method",
    "detail": "Function (} FVector4)",
    "insertText": "GetLocalNormal()"
  },
  {
    "label": "LocalNormal()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "LocalNormal((V1 - V2) ^ (V0 - V2)).GetSafeNormal()"
  },
  {
    "label": "Dot3()",
    "kind": "Method",
    "detail": "Function (LocalNormal . W =)",
    "insertText": "Dot3(V0, LocalNormal)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (} } ; template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPNode ; template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPTree ; template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPLineCollisionCheck ; struct FFourBox {)",
    "insertText": "MS_ALIGN(16) FVector4 Min[3] GCC_ALIGN(16)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (FVector4 Max [ 3 ] ; void)",
    "insertText": "SetBox(int32 BoundingVolumeIndex, const FBox& Box)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using FVec4Real =)",
    "insertText": "decltype(FVector4::X)"
  },
  {
    "label": "Component()",
    "kind": "Method",
    "detail": "Function (Min [ 0 ] .)",
    "insertText": "Component(BoundingVolumeIndex) = (FVec4Real)"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetBox(int32 BoundingVolumeIndex)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (FBox Box ; Box . Min =)",
    "insertText": "FVector4(Min[0][BoundingVolumeIndex],Min[1][BoundingVolumeIndex],Min[2][BoundingVolumeIndex],1)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (Box . Max =)",
    "insertText": "FVector4(Max[0][BoundingVolumeIndex],Max[1][BoundingVolumeIndex],Max[2][BoundingVolumeIndex],1)"
  },
  {
    "label": "LeftNode()",
    "kind": "Method",
    "detail": "Function (n .)",
    "insertText": "LeftNode((KDOP_IDX_TYPE) -1)"
  },
  {
    "label": "RightNode()",
    "kind": "Method",
    "detail": "Function (n .)",
    "insertText": "RightNode((KDOP_IDX_TYPE) -1)"
  },
  {
    "label": "SplitTriangleList()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "SplitTriangleList(int32 Start,int32 NumTris, TArray<FkDOPBuildCollisionTriangle<KDOP_IDX_TYPE> >& BuildTriangles, kDOPArray<FTriangleSOA>& SOATriangles, kDOPArray<NodeType>& Nodes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bIsLeaf = 0 ; Occupancy = 0 ; int32 BestPlane = - 1 ; double BestMean = 0 . f ; double BestVariance = 0 . f ; { double Mean [ NUM_PLANES ] = { 0 } ; double Variance [ NUM_PLANES ] = { 0 } ;)",
    "insertText": "for(int32 nTriangle = Start; nTriangle < Start + NumTris; nTriangle++)"
  },
  {
    "label": "GetCentroid()",
    "kind": "Method",
    "detail": "Function (FVector4 Centroid = BuildTriangles [ nTriangle ] .)",
    "insertText": "GetCentroid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mean [ nPlane ] + = Centroid [ nPlane ] ; } })",
    "insertText": "for(int32 nPlane = 0; nPlane < NUM_PLANES; nPlane++)"
  },
  {
    "label": "nPlane()",
    "kind": "Method",
    "detail": "Function (Variance [)",
    "insertText": "nPlane(Centroid[nPlane] - Mean[nPlane]) * (Centroid[nPlane] - Mean[nPlane])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Variance [ nPlane ] / = NumTris ;)",
    "insertText": "if(Variance[nPlane] >= BestVariance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BestPlane = nPlane ; BestVariance = Variance [ nPlane ] ; BestMean = Mean [ nPlane ] ; } } } int32 Left = Start - 1 ; int32 Right = Start + NumTris ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVector4::FReal Dot ;)",
    "insertText": "for(++Left; Left < Right; ++Left)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(Left == Right)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "for(--Right; Left < Right; --Right)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "Swap(BuildTriangles[Left], BuildTriangles[Right])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Left == Start + NumTris || Right == Start)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (Left =)",
    "insertText": "Start(NumTris / 2)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} n . LeftNode = Nodes .)",
    "insertText": "AddZeroed(2)"
  },
  {
    "label": "SplitTriangleList()",
    "kind": "Method",
    "detail": "Function (n . RightNode = n . LeftNode + 1 ; FBox LeftBoundingVolume = Nodes [ n . LeftNode ] .)",
    "insertText": "SplitTriangleList(Start,Left - Start,BuildTriangles,SOATriangles,Nodes)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(0,LeftBoundingVolume)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(2,Nodes[n.LeftNode].BoundingVolumes.GetBox(0))"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(3,Nodes[n.LeftNode].BoundingVolumes.GetBox(1))"
  },
  {
    "label": "SplitTriangleList()",
    "kind": "Method",
    "detail": "Function (FBox RightBoundingVolume = Nodes [ n . RightNode ] .)",
    "insertText": "SplitTriangleList(Left,Start + NumTris - Left,BuildTriangles,SOATriangles,Nodes)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(1,RightBoundingVolume)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (t . StartIndex = SOATriangles .)",
    "insertText": "Num()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (t . NumTriangles = Align<)",
    "insertText": "int32(NumTris, 4)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (SOATriangles .)",
    "insertText": "AddZeroed(t.NumTriangles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 BuildTriIndex = Start ;)",
    "insertText": "for(uint32 SOAIndex=0; SOAIndex < t.NumTriangles; ++SOAIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FkDOPBuildCollisionTriangle<KDOP_IDX_TYPE>* Tris [ 4 ] = {& EmptyTriangle,& EmptyTriangle,& EmptyTriangle,& EmptyTriangle } ; FTriangleSOA& SOA = SOATriangles [ t . StartIndex + SOAIndex ] ; int32 SubIndex = 0 ;)",
    "insertText": "for(; SubIndex < 4 && BuildTriIndex < (Start+NumTris); ++SubIndex, ++BuildTriIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Tris [ SubIndex ] =& BuildTriangles [ BuildTriIndex ] ; SOA . Payload [ SubIndex ] = Tris [ SubIndex ] -> MaterialIndex ; })",
    "insertText": "for(; SubIndex < 4; ++SubIndex)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Payload [ SubIndex ] = 0 xffffffff ; } SOA . Positions [ 0 ] . X =)",
    "insertText": "VectorSet(Tris[0]->V0.X, Tris[1]->V0.X, Tris[2]->V0.X, Tris[3]->V0.X)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 0 ] . Y =)",
    "insertText": "VectorSet(Tris[0]->V0.Y, Tris[1]->V0.Y, Tris[2]->V0.Y, Tris[3]->V0.Y)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 0 ] . Z =)",
    "insertText": "VectorSet(Tris[0]->V0.Z, Tris[1]->V0.Z, Tris[2]->V0.Z, Tris[3]->V0.Z)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 1 ] . X =)",
    "insertText": "VectorSet(Tris[0]->V1.X, Tris[1]->V1.X, Tris[2]->V1.X, Tris[3]->V1.X)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 1 ] . Y =)",
    "insertText": "VectorSet(Tris[0]->V1.Y, Tris[1]->V1.Y, Tris[2]->V1.Y, Tris[3]->V1.Y)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 1 ] . Z =)",
    "insertText": "VectorSet(Tris[0]->V1.Z, Tris[1]->V1.Z, Tris[2]->V1.Z, Tris[3]->V1.Z)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 2 ] . X =)",
    "insertText": "VectorSet(Tris[0]->V2.X, Tris[1]->V2.X, Tris[2]->V2.X, Tris[3]->V2.X)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 2 ] . Y =)",
    "insertText": "VectorSet(Tris[0]->V2.Y, Tris[1]->V2.Y, Tris[2]->V2.Y, Tris[3]->V2.Y)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Positions [ 2 ] . Z =)",
    "insertText": "VectorSet(Tris[0]->V2.Z, Tris[1]->V2.Z, Tris[2]->V2.Z, Tris[3]->V2.Z)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Normals . X =)",
    "insertText": "VectorSet(Tris0LocalNormal.X, Tris1LocalNormal.X, Tris2LocalNormal.X, Tris3LocalNormal.X)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Normals . Y =)",
    "insertText": "VectorSet(Tris0LocalNormal.Y, Tris1LocalNormal.Y, Tris2LocalNormal.Y, Tris3LocalNormal.Y)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Normals . Z =)",
    "insertText": "VectorSet(Tris0LocalNormal.Z, Tris1LocalNormal.Z, Tris2LocalNormal.Z, Tris3LocalNormal.Z)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (SOA . Normals . W =)",
    "insertText": "VectorSet(-Tris0LocalNormal.W, -Tris1LocalNormal.W, -Tris2LocalNormal.W, -Tris3LocalNormal.W)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} bIsLeaf = 1 ;)",
    "insertText": "check(NumTris <= std::numeric_limits<uint8>::max())"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Occupancy = static_cast<)",
    "insertText": "uint8(NumTris)"
  },
  {
    "label": "BoundingVolume()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "BoundingVolume(ForceInit)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (BoundingVolume + =)",
    "insertText": "FVector(BuildTriangles[TriangleIndex].V0)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (BoundingVolume + =)",
    "insertText": "FVector(BuildTriangles[TriangleIndex].V1)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (BoundingVolume + =)",
    "insertText": "FVector(BuildTriangles[TriangleIndex].V2)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (} BoundingVolumes .)",
    "insertText": "SetBox(0,BoundingVolume)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(1,BoundingVolume)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(2,BoundingVolume)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (BoundingVolumes .)",
    "insertText": "SetBox(3,BoundingVolume)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# define PLAIN_C 0 # if PLAIN_C)",
    "insertText": "for(int32 BoxIndex=0; BoxIndex<4; BoxIndex++)"
  },
  {
    "label": "BoxMin()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "BoxMin(BoundingVolumes.Min[0][BoxIndex], BoundingVolumes.Min[1][BoxIndex], BoundingVolumes.Min[2][BoxIndex], 0)"
  },
  {
    "label": "BoxMax()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "BoxMax(BoundingVolumes.Max[0][BoxIndex], BoundingVolumes.Max[1][BoxIndex], BoundingVolumes.Max[2][BoxIndex], 0)"
  },
  {
    "label": "Slab1()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Slab1(BoxMin - Check.LocalStart)"
  },
  {
    "label": "Slab2()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "Slab2(BoxMax - Check.LocalStart)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (FVector4 SlabMin =)",
    "insertText": "FVector4(FMath::Min(Slab1.X, Slab2.X), FMath::Min(Slab1.Y, Slab2.Y), FMath::Min(Slab1.Z, Slab2.Z), FMath::Min(Slab1.W, Slab2.W))"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (FVector4 SlabMax =)",
    "insertText": "FVector4(FMath::Max(Slab1.X, Slab2.X), FMath::Max(Slab1.Y, Slab2.Y), FMath::Max(Slab1.Z, Slab2.Z), FMath::Max(Slab1.W, Slab2.W))"
  },
  {
    "label": "Max3()",
    "kind": "Method",
    "detail": "Function (float MinTime =)",
    "insertText": "Max3(SlabMin.X, SlabMin.Y, SlabMin.Z)"
  },
  {
    "label": "Min3()",
    "kind": "Method",
    "detail": "Function (float MaxTime =)",
    "insertText": "Min3(SlabMax.X, SlabMax.Y, SlabMax.Z)"
  },
  {
    "label": "BoxIndex()",
    "kind": "Method",
    "detail": "Function (HitTime [ BoxIndex ] = MinTime ; NodeHit [)",
    "insertText": "BoxIndex(MaxTime >= 0 && MaxTime >= MinTime && MinTime < Check.Result->Time)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (} # else const VectorRegister OriginX =)",
    "insertText": "VectorSetFloat1(Check.LocalStart.X)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister OriginY =)",
    "insertText": "VectorSetFloat1(Check.LocalStart.Y)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister OriginZ =)",
    "insertText": "VectorSetFloat1(Check.LocalStart.Z)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister InvDirX =)",
    "insertText": "VectorSetFloat1(Check.LocalOneOverDir.X)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister InvDirY =)",
    "insertText": "VectorSetFloat1(Check.LocalOneOverDir.Y)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister InvDirZ =)",
    "insertText": "VectorSetFloat1(Check.LocalOneOverDir.Z)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister CurrentHitTime =)",
    "insertText": "VectorSetFloat1(Check.Result->Time)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinX =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Min[0])"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinY =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Min[1])"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinZ =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Min[2])"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxX =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Max[0])"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxY =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Max[1])"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxZ =)",
    "insertText": "VectorLoadAligned(&BoundingVolumes.Max[2])"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinSlabX =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMinX, OriginX ), InvDirX)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinSlabY =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMinY, OriginY ), InvDirY)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMinSlabZ =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMinZ, OriginZ ), InvDirZ)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxSlabX =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMaxX, OriginX ), InvDirX)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxSlabY =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMaxY, OriginY ), InvDirY)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister BoxMaxSlabZ =)",
    "insertText": "VectorMultiply(VectorSubtract( BoxMaxZ, OriginZ ), InvDirZ)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMinX =)",
    "insertText": "VectorMin(BoxMinSlabX, BoxMaxSlabX)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMinY =)",
    "insertText": "VectorMin(BoxMinSlabY, BoxMaxSlabY)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMinZ =)",
    "insertText": "VectorMin(BoxMinSlabZ, BoxMaxSlabZ)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMaxX =)",
    "insertText": "VectorMax(BoxMinSlabX, BoxMaxSlabX)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMaxY =)",
    "insertText": "VectorMax(BoxMinSlabY, BoxMaxSlabY)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMaxZ =)",
    "insertText": "VectorMax(BoxMinSlabZ, BoxMaxSlabZ)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMinXY =)",
    "insertText": "VectorMax(SlabMinX , SlabMinY)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const VectorRegister MinTime =)",
    "insertText": "VectorMax(SlabMinXY, SlabMinZ)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister SlabMaxXY =)",
    "insertText": "VectorMin(SlabMaxX , SlabMaxY)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const VectorRegister MaxTime =)",
    "insertText": "VectorMin(SlabMaxXY, SlabMaxZ)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(MinTime, &HitTime)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister OutNodeHit =)",
    "insertText": "VectorBitwiseAnd(VectorCompareGE( MaxTime, VectorZero() ), VectorCompareGE( MaxTime, MinTime ))"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister CloserNodeHit =)",
    "insertText": "VectorBitwiseAnd(OutNodeHit, VectorCompareGT( CurrentHitTime, MinTime ))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(CloserNodeHit, (float*) NodeHit)"
  },
  {
    "label": "LineCheck()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "LineCheck(TkDOPLineCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>& Check, TTraversalHistory<KDOP_IDX_TYPE> History)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHit = 0 ;)",
    "insertText": "if(bIsLeaf == 0)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (FVector4 NodeHitTime ;)",
    "insertText": "MS_ALIGN(16) int32 NodeHit[4] GCC_ALIGN(16)"
  },
  {
    "label": "LineCheckBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LineCheckBounds(Check, NodeHitTime, NodeHit)"
  },
  {
    "label": "LineCheckPreCalculated()",
    "kind": "Method",
    "detail": "Function (bHit = Check . Nodes [ n . LeftNode ] .)",
    "insertText": "LineCheckPreCalculated(Check,NodeHitTime,History.AddNode(n.LeftNode),NodeHit)"
  },
  {
    "label": "LineCheck()",
    "kind": "Method",
    "detail": "Function (bHit | = Check . Nodes [ n . RightNode ] .)",
    "insertText": "LineCheck(Check,History.AddNode(n.RightNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(NodeHit[1])"
  },
  {
    "label": "LineCheckTriangles()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } } } else { bHit =)",
    "insertText": "LineCheckTriangles(Check,History)"
  },
  {
    "label": "LineCheckPreCalculated()",
    "kind": "Method",
    "detail": "Function (} return bHit ; } bool)",
    "insertText": "LineCheckPreCalculated(TkDOPLineCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>& Check, const FVector4& NodeHitTime, TTraversalHistory<KDOP_IDX_TYPE> History, int32* NodeHit)"
  },
  {
    "label": "LineCheck()",
    "kind": "Method",
    "detail": "Function (bHit = Check . Nodes [ n . LeftNode ] .)",
    "insertText": "LineCheck(Check,History.AddNode(n.LeftNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(NodeHit[3])"
  },
  {
    "label": "LineCheckTriangles()",
    "kind": "Method",
    "detail": "Function (} return bHit ; } bool)",
    "insertText": "LineCheckTriangles(TkDOPLineCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>& Check, const TTraversalHistory<KDOP_IDX_TYPE>& History)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ;)",
    "insertText": "for(KDOP_IDX_TYPE SOAIndex = t.StartIndex; SOAIndex < (t.StartIndex + t.NumTriangles); SOAIndex++)"
  },
  {
    "label": "appLineCheckTriangleSOA()",
    "kind": "Method",
    "detail": "Function (const FTriangleSOA& TriangleSOA = Check . SOATriangles [ SOAIndex ] ; int32 SubIndex =)",
    "insertText": "appLineCheckTriangleSOA(Check.StartSOA, Check.EndSOA, Check.DirSOA, TriangleSOA, Check.Result->Time)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (bHit = true ; Check . LocalHitNormal .)",
    "insertText": "X(decltype(FVector4::X))VectorGetComponentDynamic(TriangleSOA.Normals.X, SubIndex)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (break ; } } } return bHit ; } } ; template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPTree { typedef COLL_DATA_PROVIDER DataProviderType ; typedef TkDOPNode<DataProviderType,KDOP_IDX_TYPE> NodeType ; kDOPArray<NodeType> Nodes ; kDOPArray<FTriangleSOA> SOATriangles ; void)",
    "insertText": "Build(TArray<FkDOPBuildCollisionTriangle<KDOP_IDX_TYPE> >& BuildTriangles)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (float kDOPBuildTime = 0 ; { Nodes .)",
    "insertText": "Empty(BuildTriangles.Num())"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "AddZeroed()"
  },
  {
    "label": "SplitTriangleList()",
    "kind": "Method",
    "detail": "Function (Nodes [ 0 ] .)",
    "insertText": "SplitTriangleList(0,BuildTriangles.Num(),BuildTriangles,SOATriangles,Nodes)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Shrink()"
  },
  {
    "label": "LineCheck()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "LineCheck(TkDOPLineCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>& Check)"
  },
  {
    "label": "LineCheck()",
    "kind": "Method",
    "detail": "Function (TTraversalHistory<KDOP_IDX_TYPE> History ; bool bHit = Nodes [ 0 ] .)",
    "insertText": "LineCheck(Check, History.AddNode(0))"
  },
  {
    "label": "TkDOPLineCollisionCheck()",
    "kind": "Method",
    "detail": "Function (} } ; template<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> struct TkDOPLineCollisionCheck : public TkDOPCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE> { FkHitResult* Result ; const FVector4& Start ; const FVector4& End ; const bool bFindClosestIntersection ; FVector4 LocalStart ; FVector4 LocalEnd ; FVector4 LocalDir ; FVector4 LocalOneOverDir ; FVector4 LocalHitNormal ; KDOP_IDX_TYPE HitNodeIndex ; FVector3SOA StartSOA ; FVector3SOA EndSOA ; FVector3SOA DirSOA ;)",
    "insertText": "TkDOPLineCollisionCheck(const FVector4& InStart,const FVector4& InEnd, bool bInbFindClosestIntersection, const COLL_DATA_PROVIDER& InCollDataProvider, FkHitResult* InResult) : TkDOPCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>(InCollDataProvider), Result(InResult), Start(InStart), End(InEnd), bFindClosestIntersection(bInbFindClosestIntersection), HitNodeIndex(0xFFFFFFFF)"
  },
  {
    "label": "GetWorldToLocal()",
    "kind": "Method",
    "detail": "Function (const FMatrix& WorldToLocal = TkDOPCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>::CollDataProvider .)",
    "insertText": "GetWorldToLocal()"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (LocalStart = WorldToLocal .)",
    "insertText": "TransformPosition(Start)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (LocalEnd = WorldToLocal .)",
    "insertText": "TransformPosition(End)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (LocalDir = LocalEnd - LocalStart ; LocalOneOverDir . X = LocalDir . X ? 1 . f / LocalDir . X : MAX_FLT ; LocalOneOverDir . Y = LocalDir . Y ? 1 . f / LocalDir . Y : MAX_FLT ; LocalOneOverDir . Z = LocalDir . Z ? 1 . f / LocalDir . Z : MAX_FLT ; StartSOA . X =)",
    "insertText": "VectorLoadFloat1(&LocalStart.X)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (StartSOA . Y =)",
    "insertText": "VectorLoadFloat1(&LocalStart.Y)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (StartSOA . Z =)",
    "insertText": "VectorLoadFloat1(&LocalStart.Z)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (EndSOA . X =)",
    "insertText": "VectorLoadFloat1(&LocalEnd.X)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (EndSOA . Y =)",
    "insertText": "VectorLoadFloat1(&LocalEnd.Y)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (EndSOA . Z =)",
    "insertText": "VectorLoadFloat1(&LocalEnd.Z)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (DirSOA . X =)",
    "insertText": "VectorLoadFloat1(&LocalDir.X)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (DirSOA . Y =)",
    "insertText": "VectorLoadFloat1(&LocalDir.Y)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (DirSOA . Z =)",
    "insertText": "VectorLoadFloat1(&LocalDir.Z)"
  },
  {
    "label": "GetHitNormal()",
    "kind": "Method",
    "detail": "Function (} FVector4)",
    "insertText": "GetHitNormal(void)"
  },
  {
    "label": "GetLocalToWorldTransposeAdjoint()",
    "kind": "Method",
    "detail": "Function (FVector4 Normal = TkDOPCollisionCheck<COLL_DATA_PROVIDER,KDOP_IDX_TYPE>::CollDataProvider .)",
    "insertText": "GetLocalToWorldTransposeAdjoint().TransformVector(LocalHitNormal).GetSafeNormal()"
  }
]