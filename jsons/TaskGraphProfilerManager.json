[
  {
    "label": "FTaskInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskInfo"
  },
  {
    "label": "ITasksProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITasksProvider"
  },
  {
    "label": "FThreadTrackEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTrackEvent"
  },
  {
    "label": "FThreadTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FTaskGraphRelation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskGraphRelation"
  },
  {
    "label": "FTaskTimingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskTimingSharedState"
  },
  {
    "label": "STaskTableTreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STaskTableTreeView"
  },
  {
    "label": "FTaskGraphProfilerTabs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskGraphProfilerTabs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTaskGraphProfilerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskGraphProfilerManager"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / TaskTrace . h \" # include \" Containers / Ticker . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / InsightsManager . h \" # include \" Insights / IUnrealInsightsModule . h \" namespace TraceServices { struct FTaskInfo ; class ITasksProvider ; } class FThreadTrackEvent ; namespace UE::Insights::TimingProfiler { class FThreadTimingTrack ; class STimingView ; } namespace UE::Insights::TaskGraphProfiler { class FTaskGraphRelation ; class FTaskTimingSharedState ; class STaskTableTreeView ; struct FTaskGraphProfilerTabs { const FName TaskTableTreeViewTabID ; } ; enum class ETaskEventType : uint32 { Created,Launched,Scheduled,Started,Finished,Completed,PrerequisiteStarted,ParentStarted,NestedStarted,NestedCompleted,SubsequentStarted,CriticalPath,NumTaskEventTypes,} ; class FTaskGraphProfilerManager : public TSharedFromThis<FTaskGraphProfilerManager>,public IInsightsComponent { public : typedef TFunctionRef<)",
    "insertText": "void(double , uint32 , double , uint32 , ETaskEventType)"
  },
  {
    "label": "FTaskGraphProfilerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTaskGraphProfilerManager(TSharedRef<FUICommandList> InCommandList)"
  },
  {
    "label": "FTaskGraphProfilerManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTaskGraphProfilerManager()"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTaskGraphProfilerManager>)",
    "insertText": "CreateInstance()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTaskGraphProfilerManager>)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "RegisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMajorTabs(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "UnregisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMajorTabs()"
  },
  {
    "label": "OnWindowClosedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowClosedEvent()"
  },
  {
    "label": "SpawnTab_TaskTableTreeView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_TaskTableTreeView(const FSpawnTabArgs& Args)"
  },
  {
    "label": "CanSpawnTab_TaskTableTreeView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpawnTab_TaskTableTreeView(const FSpawnTabArgs& Args)"
  },
  {
    "label": "OnTaskTableTreeViewTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskTableTreeViewTabClosed(TSharedRef<SDockTab> TabBeingClosed)"
  },
  {
    "label": "GetIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsAvailable()"
  },
  {
    "label": "ShowTaskRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTaskRelations(const FThreadTrackEvent* InSelectedEvent, uint32 ThreadId)"
  },
  {
    "label": "ShowTaskRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTaskRelations(TaskTrace::FId TaskId)"
  },
  {
    "label": "AddRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelation(const FThreadTrackEvent* InSelectedEvent, double SourceTimestamp, uint32 SourceThreadId, double TargetTimestamp, uint32 TargetThreadId, ETaskEventType Type)"
  },
  {
    "label": "AddRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelation(const FThreadTrackEvent* InSelectedEvent, double SourceTimestamp, uint32 SourceThreadId, int32 SourceDepth, double TargetTimestamp, uint32 TargetThreadId, int32 TargetDepth, ETaskEventType Type)"
  },
  {
    "label": "ClearTaskRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTaskRelations()"
  },
  {
    "label": "GetColorForTaskEvent()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorForTaskEvent(ETaskEventType InEvent)"
  },
  {
    "label": "GetColorForTaskEventAsPackedARGB()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetColorForTaskEventAsPackedARGB(ETaskEventType InEvent)"
  },
  {
    "label": "GetTaskTimingSharedState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTaskTimingSharedState>)",
    "insertText": "GetTaskTimingSharedState()"
  },
  {
    "label": "GetShowTransitions()",
    "kind": "Method",
    "detail": "Function (bShowCriticalPath = bInValue ; } bool)",
    "insertText": "GetShowTransitions()"
  },
  {
    "label": "GetShowConnections()",
    "kind": "Method",
    "detail": "Function (bShowTransitions = bInValue ; } bool)",
    "insertText": "GetShowConnections()"
  },
  {
    "label": "GetShowPrerequisites()",
    "kind": "Method",
    "detail": "Function (bShowConnections = bInValue ; } bool)",
    "insertText": "GetShowPrerequisites()"
  },
  {
    "label": "GetShowSubsequents()",
    "kind": "Method",
    "detail": "Function (bShowPrerequisites = bInValue ; } bool)",
    "insertText": "GetShowSubsequents()"
  },
  {
    "label": "GetShowParentTasks()",
    "kind": "Method",
    "detail": "Function (bShowSubsequents = bInValue ; } bool)",
    "insertText": "GetShowParentTasks()"
  },
  {
    "label": "GetShowNestedTasks()",
    "kind": "Method",
    "detail": "Function (bShowParentTasks = bInValue ; } bool)",
    "insertText": "GetShowNestedTasks()"
  },
  {
    "label": "GetShowAnyRelations()",
    "kind": "Method",
    "detail": "Function (bShowNestedTasks = bInValue ; } bool)",
    "insertText": "GetShowAnyRelations()"
  },
  {
    "label": "GetDepthOfTaskExecution()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetDepthOfTaskExecution(double TaskStartedTime, double TaskFinishedTime, uint32 ThreadId)"
  },
  {
    "label": "SelectTaskInTaskTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTaskInTaskTable(TaskTrace::FId)"
  },
  {
    "label": "RegisterOnWindowClosedEventHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnWindowClosedEventHandle()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RegisterTimingProfilerLayoutExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTimingProfilerLayoutExtensions(FInsightsMajorTabExtender& InOutExtender)"
  },
  {
    "label": "ShowTaskRelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTaskRelations(const TraceServices::FTaskInfo* Task, const TraceServices::ITasksProvider* TasksProvider, const FThreadTrackEvent* InSelectedEvent)"
  },
  {
    "label": "GetSingleTaskTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSingleTaskTransitions(const TraceServices::FTaskInfo* Task, const TraceServices::ITasksProvider* TasksProvider, const FThreadTrackEvent* InSelectedEvent)"
  },
  {
    "label": "GetSingleTaskConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSingleTaskConnections(const TraceServices::FTaskInfo* Task, const TraceServices::ITasksProvider* TasksProvider, const FThreadTrackEvent* InSelectedEvent)"
  },
  {
    "label": "GetRelationsOnCriticalPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRelationsOnCriticalPath(const TraceServices::FTaskInfo* Task)"
  },
  {
    "label": "InitializeColorCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeColorCode()"
  },
  {
    "label": "GetRelationDisplayDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRelationDisplayDepth(TSharedPtr<const TimingProfiler::FThreadTimingTrack> Track, double Time, int32 KnownDepth)"
  },
  {
    "label": "OutputWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputWarnings()"
  },
  {
    "label": "GetTimingView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Insights::TimingProfiler::STimingView>)",
    "insertText": "GetTimingView()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (private : bool bIsInitialized ; bool bIsAvailable ; FAvailabilityCheck AvailabilityCheck ; FTickerDelegate OnTick ; FTSTicker::FDelegateHandle OnTickHandle ; TSharedPtr<FTaskGraphProfilerManager> Instance ; TSharedPtr<FTaskTimingSharedState> TaskTimingSharedState ; TWeakPtr<FTabManager> TimingTabManager ; TSharedPtr<STaskTableTreeView> TaskTableTreeView ; FLinearColor ColorCode [ static_cast<)",
    "insertText": "uint32(ETaskEventType::NumTaskEventTypes)"
  }
]