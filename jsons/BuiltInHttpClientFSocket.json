[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FBuiltInHttpClientFSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuiltInHttpClientFSocket"
  },
  {
    "label": "FBuiltInHttpClientFSocketPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuiltInHttpClientFSocketPool"
  },
  {
    "label": "FBuiltInHttpClientFSocket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuiltInHttpClient . h \" # include \" Containers / LockFreeList . h \" # if ! UE_BUILD_SHIPPING class FSocket ; class FBuiltInHttpClientFSocket : public IBuiltInHttpClientSocket { public :)",
    "insertText": "FBuiltInHttpClientFSocket(FSocket* InSocket)"
  },
  {
    "label": "FBuiltInHttpClientFSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuiltInHttpClientFSocket()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const uint8* Data, const uint64 DataSize)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recv(uint8* Data, const uint64 DataSize, uint64& BytesRead, ESocketReceiveFlags::Type ReceiveFlags)"
  },
  {
    "label": "HasPendingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingData(uint64& PendingDataSize)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "FBuiltInHttpClientFSocketPool()",
    "kind": "Method",
    "detail": "Function (private : FSocket* Socket ; } ; class FBuiltInHttpClientFSocketPool : public IBuiltInHttpClientSocketPool { public :)",
    "insertText": "FBuiltInHttpClientFSocketPool(TSharedPtr<FInternetAddr> InServerAddr, ISocketSubsystem& InSocketSubsystem)"
  },
  {
    "label": "FBuiltInHttpClientFSocketPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuiltInHttpClientFSocketPool()"
  },
  {
    "label": "AcquireSocket()",
    "kind": "Method",
    "detail": "Function (IBuiltInHttpClientSocket*)",
    "insertText": "AcquireSocket(float TimeoutSeconds = -1.f)"
  },
  {
    "label": "ReleaseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSocket(IBuiltInHttpClientSocket* Socket, bool bKeepAlive)"
  }
]