[
  {
    "label": "ILMTHREAD_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILMTHREAD_EXPORT_TYPE"
  },
  {
    "label": "sema_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sema_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_ILM_THREAD_SEMAPHORE_H # define INCLUDED_ILM_THREAD_SEMAPHORE_H # include \" IlmThreadExport . h \" # include \" IlmThreadConfig . h \" # include \" IlmThreadNamespace . h \" # if ILMTHREAD_THREADING_ENABLED # if ILMTHREAD_HAVE_POSIX_SEMAPHORES # include<semaphore . h> # define ILMTHREAD_SEMAPHORE_POSIX 1 # elif)",
    "insertText": "defined(__APPLE__) # include <AvailabilityMacros.h> # if MAC_OS_X_VERSION_MIN_REQUIRED > 1050 && !defined(__ppc__) # include <dispatch/dispatch.h> # define ILMTHREAD_SEMAPHORE_OSX 1 # else # include <condition_variable> # include <mutex> # define ILMTHREAD_SEMAPHORE_OTHER 1 # endif # elif (defined(_WIN32) || defined(_WIN64))"
  },
  {
    "label": "Semaphore()",
    "kind": "Method",
    "detail": "Function (public : ILMTHREAD_EXPORT)",
    "insertText": "Semaphore(unsigned int value = 0)"
  },
  {
    "label": "Semaphore()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT ~)",
    "insertText": "Semaphore()"
  },
  {
    "label": "wait()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "wait()"
  },
  {
    "label": "tryWait()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT bool)",
    "insertText": "tryWait()"
  },
  {
    "label": "post()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "post()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT int)",
    "insertText": "value()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : # if ILMTHREAD_SEMAPHORE_POSIX sem_t _semaphore ; # elif ILMTHREAD_SEMAPHORE_OSX dispatch_semaphore_t _semaphore ; # elif ILMTHREAD_SEMAPHORE_WINDOWS HANDLE _semaphore ; # elif ILMTHREAD_SEMAPHORE_OTHER struct sema_t { unsigned int count ; unsigned long numWaiting ; std::mutex mutex ; std::condition_variable nonZero ; } ; sema_t _semaphore ; # endif void)",
    "insertText": "operator(const Semaphore& s)"
  },
  {
    "label": "Semaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Semaphore(const Semaphore& s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(Semaphore&& s)"
  },
  {
    "label": "Semaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Semaphore(Semaphore&& s)"
  }
]