[
  {
    "label": "arpack_wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "arpack_wrapper"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OP"
  },
  {
    "label": "ArpackGeneralizedSelfAdjointEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArpackGeneralizedSelfAdjointEigenSolver"
  },
  {
    "label": "ArpackGeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARPACKGENERALIZEDSELFADJOINTEIGENSOLVER_H # define EIGEN_ARPACKGENERALIZEDSELFADJOINTEIGENSOLVER_H # include \" . . / . . / . . / . . / Eigen / Dense \" namespace Eigen { namespace internal { template<Scalar,RealScalar> struct arpack_wrapper ; template<MatrixSolver,MatrixType,Scalar,bool BisSPD> struct OP ; } template<MatrixType,MatrixSolver = SimplicialLLT<MatrixType>,bool BisSPD = false> class ArpackGeneralizedSelfAdjointEigenSolver { public : typedef MatrixType::Scalar Scalar ; typedef MatrixType::Index Index ; typedef NumTraits<Scalar>::Real RealScalar ; typedef internal::plain_col_type<MatrixType,RealScalar>::type RealVectorType ;)",
    "insertText": "ArpackGeneralizedSelfAdjointEigenSolver() : m_eivec(), m_eivalues(), m_isInitialized(false), m_eigenvectorsOk(false), m_nbrConverged(0), m_nbrIterations(0)"
  },
  {
    "label": "ArpackGeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArpackGeneralizedSelfAdjointEigenSolver(const MatrixType& A, const MatrixType& B, Index nbrEigenvalues, std::string eigs_sigma=\"LM\", int options=ComputeEigenvectors, RealScalar tol=0.0) : m_eivec(), m_eivalues(), m_isInitialized(false), m_eigenvectorsOk(false), m_nbrConverged(0), m_nbrIterations(0)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(A, B, nbrEigenvalues, eigs_sigma, options, tol)"
  },
  {
    "label": "ArpackGeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArpackGeneralizedSelfAdjointEigenSolver(const MatrixType& A, Index nbrEigenvalues, std::string eigs_sigma=\"LM\", int options=ComputeEigenvectors, RealScalar tol=0.0) : m_eivec(), m_eivalues(), m_isInitialized(false), m_eigenvectorsOk(false), m_nbrConverged(0), m_nbrIterations(0)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(A, nbrEigenvalues, eigs_sigma, options, tol)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} ArpackGeneralizedSelfAdjointEigenSolver&)",
    "insertText": "compute(const MatrixType& A, const MatrixType& B, Index nbrEigenvalues, std::string eigs_sigma=\"LM\", int options=ComputeEigenvectors, RealScalar tol=0.0)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (ArpackGeneralizedSelfAdjointEigenSolver&)",
    "insertText": "compute(const MatrixType& A, Index nbrEigenvalues, std::string eigs_sigma=\"LM\", int options=ComputeEigenvectors, RealScalar tol=0.0)"
  },
  {
    "label": "eigenvectors()",
    "kind": "Method",
    "detail": "Function (const Matrix<Scalar,Dynamic,Dynamic>&)",
    "insertText": "eigenvectors()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"ArpackGeneralizedSelfAdjointEigenSolver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"SelfAdjointEigenSolver is not initialized.\")"
  },
  {
    "label": "operatorInverseSqrt()",
    "kind": "Method",
    "detail": "Function (} Matrix<Scalar,Dynamic,Dynamic>)",
    "insertText": "operatorInverseSqrt()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "B(0,0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(A.cols() == A.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(B.cols() == B.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(B.rows() == 0 || A.cols() == B.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((options &~ (EigVecMask | GenEigMask)) == 0 && (options & EigVecMask) != EigVecMask && \"invalid option parameter\")"
  },
  {
    "label": "isBempty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBempty(B.rows() == 0) || (B.cols() == 0)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (int ido = 0 ; int)",
    "insertText": "n(int)A.cols()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char whch [ 3 ] = \" LM \" ; RealScalar sigma = 0 . 0 ;)",
    "insertText": "if(eigs_sigma.length() >= 2 && isalpha(eigs_sigma[0]) && isalpha(eigs_sigma[1]))"
  },
  {
    "label": "toupper()",
    "kind": "Method",
    "detail": "Function (eigs_sigma [ 0 ] =)",
    "insertText": "toupper(eigs_sigma[0])"
  },
  {
    "label": "toupper()",
    "kind": "Method",
    "detail": "Function (eigs_sigma [ 1 ] =)",
    "insertText": "toupper(eigs_sigma[1])"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (whch [ 0 ] = eigs_sigma [ 0 ] ; whch [ 1 ] = eigs_sigma [ 1 ] ; } } else {)",
    "insertText": "eigen_assert(false && \"Specifying clustered eigenvalues is not yet supported!\")"
  },
  {
    "label": "atof()",
    "kind": "Method",
    "detail": "Function (sigma =)",
    "insertText": "atof(eigs_sigma.c_str())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} char bmat [ 2 ] = \" I \" ;)",
    "insertText": "if(eigs_sigma.substr(0,2) == \"SM\" || !(isalpha(eigs_sigma[0]) && isalpha(eigs_sigma[1])) || (!isBempty && !BisSPD))"
  },
  {
    "label": "mode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mode(bmat[0] == 'G')"
  },
  {
    "label": "nev()",
    "kind": "Method",
    "detail": "Function (mode = 3 ; } int)",
    "insertText": "nev(int)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (Scalar* resid = new Scalar [ n ] ; int ncv =)",
    "insertText": "min(std::max(2*nev, 20), n)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (Scalar* v = new Scalar [ n* ncv ] ; int ldv = n ; Scalar* workd = new Scalar [ 3* n ] ; int lworkl = ncv* ncv + 8* ncv ; Scalar* workl = new Scalar [ lworkl ] ; int* iparam = new int [ 1 1 ] ; iparam [ 0 ] = 1 ; iparam [ 2 ] =)",
    "insertText": "max(300, (int)std::ceil(2*n/std::max(ncv,1)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iparam [ 6 ] = mode ; int* ipntr = new int [ 1 1 ] ; int info = 0 ; Scalar scale = 1 . 0 ; MatrixSolver OP ;)",
    "insertText": "if(mode == 1 || mode == 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mode == 3)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (OP .)",
    "insertText": "compute(A)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(isBempty)"
  },
  {
    "label": "AminusSigmaB()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "AminusSigmaB(A)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (OP .)",
    "insertText": "compute(AminusSigmaB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(!(mode == 1 && isBempty) && !(mode == 2 && isBempty) && OP.info() != Success)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar* in = workd + ipntr [ 0 ] - 1 ; Scalar* out = workd + ipntr [ 1 ] - 1 ;)",
    "insertText": "if(ido == 1 && mode != 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar* out2 = workd + ipntr [ 2 ] - 1 ;)",
    "insertText": "if(isBempty || mode == 1) Matrix<Scalar, Dynamic, 1>::Map(out2, n) = Matrix<Scalar, Dynamic, 1>::Map(in, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (in = workd + ipntr [ 2 ] - 1 ; })",
    "insertText": "if(mode == 1)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = A * Matrix<Scalar, Dynamic, 1>::Map(in, n)"
  },
  {
    "label": "applyOP()",
    "kind": "Method",
    "detail": "Function (} else { internal::OP<MatrixSolver,MatrixType,Scalar,BisSPD)",
    "insertText": "applyOP(OP, A, n, in, out)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(mode == 2)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = OP.solve(Matrix<Scalar, Dynamic, 1>::Map(in, n))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ido == 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar* in = workd + ipntr [ 0 ] - 1 ; Scalar* out = workd + ipntr [ 1 ] - 1 ;)",
    "insertText": "if(isBempty || mode == 1) Matrix<Scalar, Dynamic, 1>::Map(out, n) = Matrix<Scalar, Dynamic, 1>::Map(in, n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(ido != 99)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (char howmny [ 2 ] = \" A \" ; int* select = new int [ ncv ] ; m_eivalues .)",
    "insertText": "resize(nev, 1)"
  },
  {
    "label": "seupd()",
    "kind": "Method",
    "detail": "Function (internal::arpack_wrapper<Scalar,RealScalar)",
    "insertText": "seupd(&rvec, howmny, select, m_eivalues.data(), v, &ldv, &sigma, bmat, &n, whch, &nev, &tol, resid, &ncv, v, &ldv, iparam, ipntr, workd, workl, &lworkl, &info)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "resize(A.rows(), nev)"
  },
  {
    "label": "ssaupd_()",
    "kind": "Method",
    "detail": "Function (m_eigenvectorsOk = true ; } m_nbrIterations = iparam [ 2 ] ; m_nbrConverged = iparam [ 4 ] ; m_info = Success ; } delete [ ] select ; } delete [ ] v ; delete [ ] iparam ; delete [ ] ipntr ; delete [ ] workd ; delete [ ] workl ; delete [ ] resid ; m_isInitialized = true ; return* this ; } \" C \" void)",
    "insertText": "ssaupd_(int *ido, char *bmat, int *n, char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, float *workl, int *lworkl, int *info)"
  },
  {
    "label": "sseupd_()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "sseupd_(int *rvec, char *All, int *select, float *d, float *z, int *ldz, float *sigma, char *bmat, int *n, char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, float *workl, int *lworkl, int *ierr)"
  },
  {
    "label": "dsaupd_()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "dsaupd_(int *ido, char *bmat, int *n, char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, double *workl, int *lworkl, int *info)"
  },
  {
    "label": "dseupd_()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "dseupd_(int *rvec, char *All, int *select, double *d, double *z, int *ldz, double *sigma, char *bmat, int *n, char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, double *workl, int *lworkl, int *ierr)"
  },
  {
    "label": "saupd()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Scalar,RealScalar> struct arpack_wrapper { void)",
    "insertText": "saupd(int *ido, char *bmat, int *n, char *which, int *nev, RealScalar *tol, Scalar *resid, int *ncv, Scalar *v, int *ldv, int *iparam, int *ipntr, Scalar *workd, Scalar *workl, int *lworkl, int *info)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL) } static inline void seupd(int *rvec, char *All, int *select, Scalar *d, Scalar *z, int *ldz, RealScalar *sigma, char *bmat, int *n, char *which, int *nev, RealScalar *tol, Scalar *resid, int *ncv, Scalar *v, int *ldv, int *iparam, int *ipntr, Scalar *workd, Scalar *workl, int *lworkl, int *ierr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL)"
  },
  {
    "label": "saupd()",
    "kind": "Method",
    "detail": "Function (template<> struct arpack_wrapper<float,float> { void)",
    "insertText": "saupd(int *ido, char *bmat, int *n, char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, float *workl, int *lworkl, int *info)"
  },
  {
    "label": "ssaupd_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ssaupd_(ido, bmat, n, which, nev, tol, resid, ncv, v, ldv, iparam, ipntr, workd, workl, lworkl, info)"
  },
  {
    "label": "seupd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "seupd(int *rvec, char *All, int *select, float *d, float *z, int *ldz, float *sigma, char *bmat, int *n, char *which, int *nev, float *tol, float *resid, int *ncv, float *v, int *ldv, int *iparam, int *ipntr, float *workd, float *workl, int *lworkl, int *ierr)"
  },
  {
    "label": "sseupd_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sseupd_(rvec, All, select, d, z, ldz, sigma, bmat, n, which, nev, tol, resid, ncv, v, ldv, iparam, ipntr, workd, workl, lworkl, ierr)"
  },
  {
    "label": "saupd()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct arpack_wrapper<double,double> { void)",
    "insertText": "saupd(int *ido, char *bmat, int *n, char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, double *workl, int *lworkl, int *info)"
  },
  {
    "label": "dsaupd_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dsaupd_(ido, bmat, n, which, nev, tol, resid, ncv, v, ldv, iparam, ipntr, workd, workl, lworkl, info)"
  },
  {
    "label": "seupd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "seupd(int *rvec, char *All, int *select, double *d, double *z, int *ldz, double *sigma, char *bmat, int *n, char *which, int *nev, double *tol, double *resid, int *ncv, double *v, int *ldv, int *iparam, int *ipntr, double *workd, double *workl, int *lworkl, int *ierr)"
  },
  {
    "label": "dseupd_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dseupd_(rvec, All, select, d, v, ldv, sigma, bmat, n, which, nev, tol, resid, ncv, v, ldv, iparam, ipntr, workd, workl, lworkl, ierr)"
  },
  {
    "label": "applyOP()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixSolver,MatrixType,Scalar,bool BisSPD> struct OP { void)",
    "insertText": "applyOP(MatrixSolver &OP, const MatrixType &A, int n, Scalar *in, Scalar *out)"
  },
  {
    "label": "project()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "project(MatrixSolver &OP, int n, int k, Scalar *vecs)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = OP.matrixU().solve(Matrix<Scalar, Dynamic, 1>::Map(in, n))"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = OP.permutationPinv() * Matrix<Scalar, Dynamic, 1>::Map(out, n)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = A * Matrix<Scalar, Dynamic, 1>::Map(out, n)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = OP.permutationP() * Matrix<Scalar, Dynamic, 1>::Map(out, n)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,1)",
    "insertText": "Map(out, n) = OP.matrixL().solve(Matrix<Scalar, Dynamic, 1>::Map(out, n))"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,Dynamic)",
    "insertText": "Map(vecs, n, k) = OP.matrixU().solve(Matrix<Scalar, Dynamic, Dynamic>::Map(vecs, n, k))"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,Dynamic)",
    "insertText": "Map(vecs, n, k) = OP.permutationPinv() * Matrix<Scalar, Dynamic, Dynamic>::Map(vecs, n, k)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"Should never be in here...\")"
  }
]