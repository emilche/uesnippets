[
  {
    "label": "FPBDLongRangeConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDLongRangeConstraints"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDLongRangeConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos PBD Long Range Constraint\"), STAT_PBD_LongRange, STATGROUP_Chaos)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { class FPBDLongRangeConstraints : public FPBDLongRangeConstraintsBase { public : typedef FPBDLongRangeConstraintsBase Base ; typedef Base::FTether FTether ; bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDLongRangeConstraints(const FSolverParticlesRange& Particles, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal MeshScale) : FPBDLongRangeConstraintsBase( Particles, InTethers, WeightMaps.FindRef(GetTetherStiffnessString(PropertyCollection, TetherStiffnessName.ToString())), WeightMaps.FindRef(GetTetherScaleString(PropertyCollection, TetherScaleName.ToString())), FSolverVec2(GetWeightedFloatTetherStiffness(PropertyCollection, 1.f)), FSolverVec2(GetWeightedFloatTetherScale(PropertyCollection, 1.f)), FPBDStiffness::DefaultPBDMaxStiffness, MeshScale) , TetherStiffnessIndex(PropertyCollection) , TetherScaleIndex(PropertyCollection)"
  },
  {
    "label": "FPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDLongRangeConstraints(const FSolverParticles& Particles, const int32 InParticleOffset, const int32 InParticleCount, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal MeshScale) : FPBDLongRangeConstraintsBase( Particles, InParticleOffset, InParticleCount, InTethers, WeightMaps.FindRef(GetTetherStiffnessString(PropertyCollection, TetherStiffnessName.ToString())), WeightMaps.FindRef(GetTetherScaleString(PropertyCollection, TetherScaleName.ToString())), FSolverVec2(GetWeightedFloatTetherStiffness(PropertyCollection, 1.f)), FSolverVec2(GetWeightedFloatTetherScale(PropertyCollection, 1.f)), FPBDStiffness::DefaultPBDMaxStiffness, MeshScale) , TetherStiffnessIndex(PropertyCollection) , TetherScaleIndex(PropertyCollection)"
  },
  {
    "label": "FPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDLongRangeConstraints(const FSolverParticles& Particles, const int32 InParticleOffset, const int32 InParticleCount, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& ScaleMultipliers, const FSolverVec2& InStiffness = FSolverVec2::UnitVector, const FSolverVec2& InScale = FSolverVec2::UnitVector, FSolverReal MeshScale = (FSolverReal)1.) : FPBDLongRangeConstraintsBase( Particles, InParticleOffset, InParticleCount, InTethers, StiffnessMultipliers, ScaleMultipliers, InStiffness, InScale, MeshScale) , TetherStiffnessIndex(ForceInit) , TetherScaleIndex(ForceInit)"
  },
  {
    "label": "FPBDLongRangeConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDLongRangeConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} using Base::SetProperties ; void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, FSolverReal MeshScale)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : using Base::MinTetherScale ; using Base::MaxTetherScale ; using Base::Tethers ; using Base::Stiffness ; using Base::TetherScale ; using Base::ParticleOffset ; using Base::ParticleCount ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(TetherStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(TetherScale, float)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_LONG_RANGE_ISPC_ENABLED_DEFAULT)"
  }
]