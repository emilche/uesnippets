[
  {
    "label": "PIXCaptureStorage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PIXCaptureStorage"
  },
  {
    "label": "GpuCaptureParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GpuCaptureParameters"
  },
  {
    "label": "TimingCaptureParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingCaptureParameters"
  },
  {
    "label": "GpuTraceParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GpuTraceParameters"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef _PIX3_H_ # define _PIX3_H_ # include<sal . h> # ifndef __cplusplus # error \" Only C + + files can include pix3 . h . C is not supported . \" # endif # if !)",
    "insertText": "defined(USE_PIX_SUPPORTED_ARCHITECTURE) #if defined(_M_X64) || defined(USE_PIX_ON_ALL_ARCHITECTURES) || defined(_M_ARM64) #define USE_PIX_SUPPORTED_ARCHITECTURE #endif #endif #if !defined(USE_PIX) #if defined(USE_PIX_SUPPORTED_ARCHITECTURE) && (defined(_DEBUG) || DBG || defined(PROFILE) || defined(PROFILE_BUILD)) && !defined(_PREFAST_) #define USE_PIX #endif #endif #if defined(USE_PIX) && !defined(USE_PIX_SUPPORTED_ARCHITECTURE) #pragma message(\"Warning: Pix markers are only supported on AMD64 and ARM64\") #endif #define PIX_CAPTURE_TIMING (1 << 0) #define PIX_CAPTURE_GPU (1 << 1) #define PIX_CAPTURE_FUNCTION_SUMMARY (1 << 2) #define PIX_CAPTURE_FUNCTION_DETAILS (1 << 3) #define PIX_CAPTURE_CALLGRAPH (1 << 4) #define PIX_CAPTURE_INSTRUCTION_TRACE (1 << 5) #define PIX_CAPTURE_SYSTEM_MONITOR_COUNTERS (1 << 6) #define PIX_CAPTURE_VIDEO (1 << 7) #define PIX_CAPTURE_AUDIO (1 << 8) #define PIX_CAPTURE_GPU_TRACE (1 << 9) #define PIX_CAPTURE_RESERVED (1 << 15)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (enum PIXCaptureStorage { Memory = 0,MemoryCircular = 1,FileCircular = 2,} ; struct GpuCaptureParameters { PCWSTR FileName ; } GpuCaptureParameters ; struct TimingCaptureParameters { PCWSTR FileName ; UINT32 MaximumToolingMemorySizeMb ; PIXCaptureStorage CaptureStorage ; BOOL CaptureGpuTiming ; BOOL CaptureCallstacks ; BOOL CaptureCpuSamples ; UINT32 CpuSamplesPerSecond ; BOOL CaptureFileIO ; BOOL CaptureVirtualAllocEvents ; BOOL CaptureHeapAllocEvents ; BOOL CaptureXMemEvents ; BOOL CapturePixMemEvents ; } TimingCaptureParameters ; struct GpuTraceParameters { PWSTR FileName ; UINT32 MaximumToolingMemorySizeMb ; BOOL CaptureGpuOccupancy ; } GpuTraceParameters ; } ; typedef PIXCaptureParameters* PPIXCaptureParameters ; # if)",
    "insertText": "defined(XBOX) || defined(_XBOX_ONE) || defined(_DURANGO) || defined(_GAMING_XBOX) || defined(_GAMING_XBOX_SCARLETT) #include \"pix3_xbox.h\" #else #include \"pix3_win.h\" #endif #if defined(XBOX) || defined(_XBOX_ONE) || defined(_DURANGO) || defined(_GAMING_XBOX) || defined(_GAMING_XBOX_SCARLETT) #define PIX_XBOX #if defined(_GAMING_XBOX) || defined(_GAMING_XBOX_SCARLETT) #define PIX_GAMING_XBOX #endif #endif #if !defined(PIX_USE_GPU_MARKERS_V2) #ifdef PIX_GAMING_XBOX #define PIX_USE_GPU_MARKERS_V2 #endif #endif #if defined(USE_PIX_SUPPORTED_ARCHITECTURE) && (defined(USE_PIX) || defined(USE_PIX_RETAIL)) #define PIX_EVENTS_ARE_TURNED_ON #include \"PIXEventsCommon.h\" #include \"PIXEvents.h\" #ifdef USE_PIX extern \"C\" HRESULT WINAPI PIXBeginCapture2(DWORD captureFlags, _In_opt_ const PPIXCaptureParameters captureParameters)"
  },
  {
    "label": "PIXBeginCapture()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PIXBeginCapture(DWORD captureFlags, _In_opt_ const PPIXCaptureParameters captureParameters)"
  },
  {
    "label": "PIXEndCapture()",
    "kind": "Method",
    "detail": "Function (} \" C \" HRESULT WINAPI)",
    "insertText": "PIXEndCapture(BOOL discard)"
  },
  {
    "label": "PIXGetCaptureState()",
    "kind": "Method",
    "detail": "Function (\" C \" DWORD WINAPI)",
    "insertText": "PIXGetCaptureState()"
  },
  {
    "label": "PIXReportCounter()",
    "kind": "Method",
    "detail": "Function (\" C \" void WINAPI)",
    "insertText": "PIXReportCounter(_In_ PCWSTR name, float value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if !)",
    "insertText": "defined(USE_PIX_SUPPORTED_ARCHITECTURE) || !defined(USE_PIX) inline HRESULT PIXBeginCapture2(DWORD, _In_opt_ const PIXCaptureParameters*)"
  },
  {
    "label": "PIXNotifyWakeFromFenceSignal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXNotifyWakeFromFenceSignal(_In_ HANDLE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(USE_PIX_RETAIL) inline void PIXBeginEvent(UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginEvent(UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginEvent(void*, UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginEvent(void*, UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXEndEvent()"
  },
  {
    "label": "PIXEndEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXEndEvent(void*)"
  },
  {
    "label": "PIXSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetMarker(UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetMarker(UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetMarker(void*, UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXSetMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetMarker(void*, UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXBeginRetailEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginRetailEvent(void*, UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXBeginRetailEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginRetailEvent(void*, UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXEndRetailEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXEndRetailEvent(void*)"
  },
  {
    "label": "PIXSetRetailMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetRetailMarker(void*, UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXSetRetailMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetRetailMarker(void*, UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXScopedEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXScopedEvent(UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXScopedEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXScopedEvent(UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "PIXScopedEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXScopedEvent(void*, UINT64, _In_ PCSTR, ...)"
  },
  {
    "label": "PIXScopedEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXScopedEvent(void*, UINT64, _In_ PCWSTR, ...)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} # endif # pragma)",
    "insertText": "warning(disable:4548) #pragma warning(disable:4555) #endif inline UINT32 PIX_COLOR(UINT8 r, UINT8 g, UINT8 b)"
  },
  {
    "label": "PIX_COLOR_INDEX()",
    "kind": "Method",
    "detail": "Function (} UINT8)",
    "insertText": "PIX_COLOR_INDEX(UINT8 i)"
  }
]