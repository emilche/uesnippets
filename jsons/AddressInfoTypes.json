[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAddressInfoResultData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressInfoResultData"
  },
  {
    "label": "FAddressInfoResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressInfoResult"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IPAddress . h \" # include \" SocketTypes . h \" class FInternetAddr ; enum class EAddressInfoFlags : uint16 { AllResults = 1<<0,NoResolveHost = 1<<1,NoResolveService = 1<<2,OnlyUsableAddresses = 1<<3,BindableAddress = 1<<4,CanonicalName = 1<<5,FQDomainName = 1<<6,AllowV4MappedAddresses = 1<<7,AllResultsWithMapping = AllowV4MappedAddresses | AllResults,Default = 0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAddressInfoFlags)"
  },
  {
    "label": "FAddressInfoResultData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAddressInfoResultData(TSharedRef<FInternetAddr> InAddr, SIZE_T InAddrLen, const FName InProtocol, ESocketType InSocketConfiguration) : AddressProtocol(ESocketProtocolFamily::None), AddressProtocolName(InProtocol), SocketConfiguration(InSocketConfiguration), AddressLen(InAddrLen), Address(InAddr)"
  },
  {
    "label": "GetSocketTypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetSocketTypeName()"
  },
  {
    "label": "FAddressInfoResult()",
    "kind": "Method",
    "detail": "Function (} ESocketProtocolFamily AddressProtocol ; FName AddressProtocolName ; ESocketType SocketConfiguration ; SIZE_T AddressLen ; TSharedRef<FInternetAddr> Address ; } ; struct FAddressInfoResult {)",
    "insertText": "FAddressInfoResult(const TCHAR* InHostName, const TCHAR* InServiceName) : QueryHostName(InHostName), QueryServiceName(InServiceName), ReturnCode(SE_NO_DATA)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} FString QueryHostName ; FString QueryServiceName ; FString CanonicalNameResult ; ESocketErrors ReturnCode ; TArray<FAddressInfoResultData> Results ; } ; typedef TFunction<)",
    "insertText": "void(FAddressInfoResult)"
  }
]