[
  {
    "label": "TDenseGrid2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDenseGrid2"
  },
  {
    "label": "TDenseGrid2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoxTypes . h \" # include \" IntBoxTypes . h \" # include \" HAL / PlatformAtomics . h \" namespace UE { namespace Geometry { template<ElemType> class TDenseGrid2 { protected : TArray64<ElemType> Buffer ; int64 DimensionX,DimensionY ; public :)",
    "insertText": "TDenseGrid2() : DimensionX(0), DimensionY(0)"
  },
  {
    "label": "TDenseGrid2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDenseGrid2(int32 DimX, int32 DimY, ElemType InitialValue)"
  },
  {
    "label": "DimensionX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DimensionX(int64)"
  },
  {
    "label": "DimensionY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DimensionY(int64)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Init(InitialValue, Size())"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Size()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Resize(int32 DimX, int32 DimY, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "SetNumUninitialized(DimensionX*DimensionY, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Resize\") FORCEINLINE void Resize(int32 DimX, int32 DimY, bool bAllowShrinking)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(DimX, DimY, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "AssignAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignAll(ElemType Value)"
  },
  {
    "label": "SetMin()",
    "kind": "Method",
    "detail": "Function (Buffer [ i ] = Value ; } } void)",
    "insertText": "SetMin(const FVector2i& IJK, ElemType NewValue)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Idx(int64)IJK.X + (DimensionX * (int64)IJK.Y)"
  },
  {
    "label": "SetMax()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] = NewValue ; } } void)",
    "insertText": "SetMax(const FVector2i& IJK, ElemType NewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] = NewValue ; } } ElemType&)",
    "insertText": "operator(int64 Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ElemType&)",
    "insertText": "operator(FVector2i Idx)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} ElemType&)",
    "insertText": "At(int32 X, int32 Y)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} ElemType&)",
    "insertText": "At(int64 X, int64 Y)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (AOut = Buffer [ Offset + X0 ] ; BOut = Buffer [ Offset + X0 + 1 ] ; } void)",
    "insertText": "Apply(TFunctionRef<ElemType(ElemType)> ApplyFunc)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (Buffer [ Idx ] =)",
    "insertText": "F(Buffer[Idx])"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (} } FAxisAlignedBox2i)",
    "insertText": "Bounds()"
  },
  {
    "label": "BoundsInclusive()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox2i)",
    "insertText": "BoundsInclusive()"
  },
  {
    "label": "GetCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetCoords(int64 LinearIndex)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndex(int32 X, int32 Y)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&Grid.At(i, j))"
  },
  {
    "label": "AtomicDecrement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicDecrement(FDenseGrid2i& Grid, int32 i, int32 j)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedDecrement(&Grid.At(i, j))"
  },
  {
    "label": "AtomicIncDec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicIncDec(FDenseGrid2i& Grid, int32 i, int32 j, bool bDecrement = false)"
  }
]