[
  {
    "label": "response",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "response"
  },
  {
    "label": "make_result()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef RESPONSE_H_MVRZEKPX # define RESPONSE_H_MVRZEKPX # include \" rpc / detail / log . h \" # include \" rpc / detail / make_unique . h \" # include \" rpc / msgpack . hpp \" namespace rpc { namespace detail { class response { public : template<T> response)",
    "insertText": "make_result(uint32_t id, T &&result)"
  },
  {
    "label": "make_error()",
    "kind": "Method",
    "detail": "Function (template<T> response)",
    "insertText": "make_error(uint32_t id, T &&error)"
  },
  {
    "label": "response()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "response(RPCLIB_MSGPACK::object_handle o)"
  },
  {
    "label": "get_data()",
    "kind": "Method",
    "detail": "Function (RPCLIB_MSGPACK::sbuffer)",
    "insertText": "get_data()"
  },
  {
    "label": "capture_result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "capture_result(RPCLIB_MSGPACK::object_handle &r)"
  },
  {
    "label": "capture_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "capture_error(RPCLIB_MSGPACK::object_handle &e)"
  },
  {
    "label": "get_id()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "get_id()"
  },
  {
    "label": "get_error()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<RPCLIB_MSGPACK::object_handle>)",
    "insertText": "get_error()"
  },
  {
    "label": "get_result()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<RPCLIB_MSGPACK::object_handle>)",
    "insertText": "get_result()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (response)",
    "insertText": "empty()"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "response()",
    "kind": "Method",
    "detail": "Function (using response_type = std::tuple<uint32_t,uint32_t,RPCLIB_MSGPACK::object,RPCLIB_MSGPACK::object> ; private :)",
    "insertText": "response()"
  },
  {
    "label": "RPCLIB_CREATE_LOG_CHANNEL()",
    "kind": "Method",
    "detail": "Function (uint32_t id_ ; std::shared_ptr<RPCLIB_MSGPACK::object_handle> error_ ; std::shared_ptr<RPCLIB_MSGPACK::object_handle> result_ ; bool empty_ ;)",
    "insertText": "RPCLIB_CREATE_LOG_CHANNEL(response)"
  },
  {
    "label": "zone()",
    "kind": "Method",
    "detail": "Function (auto z = rpc::detail::make_unique<)",
    "insertText": "zone()"
  },
  {
    "label": "o()",
    "kind": "Method",
    "detail": "Function (RPCLIB_MSGPACK::object)",
    "insertText": "o(std::forward<T>(result), *z)"
  },
  {
    "label": "object_handle()",
    "kind": "Method",
    "detail": "Function (response inst ; inst . id_ = id ; inst . result_ = std::make_shared<)",
    "insertText": "object_handle(o, std::move(z))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (response inst ; inst . id_ = id ; inst . result_ =)",
    "insertText": "move(r)"
  },
  {
    "label": "o()",
    "kind": "Method",
    "detail": "Function (RPCLIB_MSGPACK::object)",
    "insertText": "o(std::forward<T>(error), *z)"
  }
]