[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FOverviewFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverviewFileActivityTimingTrack"
  },
  {
    "label": "FDetailedFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailedFileActivityTimingTrack"
  },
  {
    "label": "FFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivityTimingTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FIoFileActivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoFileActivity"
  },
  {
    "label": "FIoTimingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoTimingEvent"
  },
  {
    "label": "FFileActivitySharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivitySharedState"
  },
  {
    "label": "FFileActivitySharedState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / ITimingViewExtender . h \" namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights::TimingProfiler { class FOverviewFileActivityTimingTrack ; class FDetailedFileActivityTimingTrack ; class FFileActivityTimingTrack ; class STimingView ; struct FIoFileActivity { uint64 Id ; const TCHAR* Path ; double StartTime ; double EndTime ; double CloseStartTime ; double CloseEndTime ; int32 EventCount ; int32 Index ; int32 MaxConcurrentEvents ; uint32 StartingDepth ; } ; struct FIoTimingEvent { double StartTime ; double EndTime ; uint32 Depth ; uint32 Type ; uint64 Offset ; uint64 Size ; uint64 ActualSize ; int32 FileActivityIndex ; uint64 FileHandle ; uint64 ReadWriteHandle ; } ; class FFileActivitySharedState : public Timing::ITimingViewExtender,public TSharedFromThis<FFileActivitySharedState> { class FOverviewFileActivityTimingTrack ; class FDetailedFileActivityTimingTrack ; class FFileActivityTimingTrack ; public :)",
    "insertText": "FFileActivitySharedState(STimingView* InTimingView) : TimingView(InTimingView)"
  },
  {
    "label": "FFileActivitySharedState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFileActivitySharedState()"
  },
  {
    "label": "OnBeginSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "OnEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(Timing::ITimingViewSession& InSession, const TraceServices::IAnalysisSession& InAnalysisSession)"
  },
  {
    "label": "ExtendOtherTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendOtherTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InOutMenuBuilder)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "GetAllEvents()",
    "kind": "Method",
    "detail": "Function (const TArray<FIoTimingEvent>&)",
    "insertText": "GetAllEvents()"
  },
  {
    "label": "IsAllIoTracksToggleOn()",
    "kind": "Method",
    "detail": "Function (bForceIoEventsUpdate = true ; } bool)",
    "insertText": "IsAllIoTracksToggleOn()"
  },
  {
    "label": "ShowAllIoTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllIoTracks()"
  },
  {
    "label": "SetAllIoTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllIoTracksToggle(true)"
  },
  {
    "label": "HideAllIoTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideAllIoTracks()"
  },
  {
    "label": "SetAllIoTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllIoTracksToggle(false)"
  },
  {
    "label": "ShowHideAllIoTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowHideAllIoTracks()"
  },
  {
    "label": "SetAllIoTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllIoTracksToggle(!IsAllIoTracksToggleOn())"
  },
  {
    "label": "IsIoOverviewTrackVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIoOverviewTrackVisible()"
  },
  {
    "label": "ShowHideIoOverviewTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideIoOverviewTrack()"
  },
  {
    "label": "IsIoActivityTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIoActivityTrackVisible()"
  },
  {
    "label": "ShowHideIoActivityTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowHideIoActivityTrack()"
  },
  {
    "label": "IsOnlyErrorsToggleOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnlyErrorsToggleOn()"
  },
  {
    "label": "ToggleOnlyErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOnlyErrors()"
  },
  {
    "label": "AreBackgroundEventsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreBackgroundEventsVisible()"
  },
  {
    "label": "ToggleBackgroundEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleBackgroundEvents()"
  },
  {
    "label": "BuildSubMenu()",
    "kind": "Method",
    "detail": "Function (const uint32 MaxLanes ; private : void)",
    "insertText": "BuildSubMenu(FMenuBuilder& InOutMenuBuilder)"
  }
]