[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_FUNCTIONAL_H # define _LIBCPP___TYPE_TRAITS_IS_FUNCTIONAL_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_const . h> # include<__type_traits / is_reference . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_function) template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function : integral_constant<bool, __is_function(_Tp)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; # else template<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function : public integral_constant<)",
    "insertText": "bool(is_reference<_Tp>::value || is_const<const _Tp>::value)"
  }
]