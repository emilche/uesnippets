[
  {
    "label": "FSlateVectorArtInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateVectorArtInstanceData"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Misc / AssertionMacros . h \" struct FSlateVectorArtInstanceData { public : const FVector4&)",
    "insertText": "GetData()"
  },
  {
    "label": "SetScaleFixedPoint16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScaleFixedPoint16(float Scale)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(FVector2D Position)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(float Scale)"
  },
  {
    "label": "SetBaseAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseAddress(float Address)"
  },
  {
    "label": "PackFloatIntoByte()",
    "kind": "Method",
    "detail": "Function (template<int32 Component,int32 ByteIndex> void)",
    "insertText": "PackFloatIntoByte(float InValue)"
  },
  {
    "label": "ByteIndex()",
    "kind": "Method",
    "detail": "Function (PackByteIntoByte<Component,)",
    "insertText": "ByteIndex(static_cast<uint8>(FMath::RoundToInt(InValue * 0xFFu)))"
  },
  {
    "label": "PackByteIntoByte()",
    "kind": "Method",
    "detail": "Function (} template<int32 Component,int32 ByteIndex> void)",
    "insertText": "PackByteIntoByte(uint8 InValue)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Mask(0xFF << ByteIndex * 8)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentData = static_cast<)",
    "insertText": "uint32(Data[Component])"
  },
  {
    "label": "CurrentData()",
    "kind": "Method",
    "detail": "Function (Data [ Component ] =)",
    "insertText": "CurrentData(InValue << ByteIndex * 8)"
  },
  {
    "label": "PackByteIntoByte()",
    "kind": "Method",
    "detail": "Function (} template<int32 Component,int32 ByteIndex> void)",
    "insertText": "PackByteIntoByte(float InValue)"
  }
]