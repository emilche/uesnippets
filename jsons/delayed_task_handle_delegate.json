[
  {
    "label": "TaskQueueImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueImpl"
  },
  {
    "label": "DelayedTaskHandleDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedTaskHandleDelegate"
  },
  {
    "label": "DelayedTaskHandleDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_DELAYED_TASK_HANDLE_DELEGATE_H_ # define BASE_TASK_SEQUENCE_MANAGER_DELAYED_TASK_HANDLE_DELEGATE_H_ # include \" base / containers / intrusive_heap . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / sequence_checker . h \" # include \" base / task / delayed_task_handle . h \" namespace base { namespace sequence_manager { namespace internal { class TaskQueueImpl ; class DelayedTaskHandleDelegate : public DelayedTaskHandle::Delegate { public :)",
    "insertText": "DelayedTaskHandleDelegate(TaskQueueImpl* outer)"
  },
  {
    "label": "DelayedTaskHandleDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTaskHandleDelegate(const DelayedTaskHandleDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandleDelegate&)",
    "insertText": "operator(const DelayedTaskHandleDelegate&)"
  },
  {
    "label": "DelayedTaskHandleDelegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelayedTaskHandleDelegate()"
  },
  {
    "label": "AsWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<DelayedTaskHandleDelegate>)",
    "insertText": "AsWeakPtr()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CancelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTask()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeapHandle(HeapHandle heap_handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "WillRunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillRunTask()"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (private : const raw_ptr<TaskQueueImpl,DanglingUntriaged> outer_)",
    "insertText": "GUARDED_BY_CONTEXT(sequence_checker_)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]