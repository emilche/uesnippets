[
  {
    "label": "LeakCheckDisabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeakCheckDisabler"
  },
  {
    "label": "HaveLeakSanitizer()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_DEBUGGING_LEAK_CHECK_H_ # define ABSL_DEBUGGING_LEAK_CHECK_H_ # include<cstddef> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN bool)",
    "insertText": "HaveLeakSanitizer()"
  },
  {
    "label": "LeakCheckerIsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LeakCheckerIsActive()"
  },
  {
    "label": "DoIgnoreLeak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoIgnoreLeak(const void* ptr)"
  },
  {
    "label": "IgnoreLeak()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "IgnoreLeak(T* ptr)"
  },
  {
    "label": "LeakCheckDisabler()",
    "kind": "Method",
    "detail": "Function (class LeakCheckDisabler { public :)",
    "insertText": "LeakCheckDisabler()"
  },
  {
    "label": "LeakCheckDisabler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeakCheckDisabler(const LeakCheckDisabler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LeakCheckDisabler&)",
    "insertText": "operator(const LeakCheckDisabler&)"
  },
  {
    "label": "RegisterLivePointers()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RegisterLivePointers(const void* ptr, size_t size)"
  },
  {
    "label": "UnRegisterLivePointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterLivePointers(const void* ptr, size_t size)"
  }
]