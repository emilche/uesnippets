[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SFbxOptionWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFbxOptionWindow"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Factories / FbxImportUI . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" InputCoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" class SButton ; struct FGeometry ; class SFbxOptionWindow : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SFbxOptionWindow ) : _ImportUI(NULL) , _WidgetWindow() , _FullPath() , _ForcedImportType() , _IsObjFormat(false) , _MaxWindowHeight(0.0f) , _MaxWindowWidth(0.0f)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UFbxImportUI*, ImportUI ) SLATE_ARGUMENT( TSharedPtr<SWindow>, WidgetWindow ) SLATE_ARGUMENT( FText, FullPath ) SLATE_ARGUMENT( TOptional<EFBXImportType>, ForcedImportType ) SLATE_ARGUMENT( bool, IsObjFormat ) SLATE_ARGUMENT( float, MaxWindowHeight) SLATE_ARGUMENT(float, MaxWindowWidth) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bShouldImport = true ;)",
    "insertText": "if(WidgetWindow.IsValid())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (WidgetWindow .)",
    "insertText": "Pin()->RequestDestroyWindow()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnImportAll()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnImportAll()"
  },
  {
    "label": "OnImport()",
    "kind": "Method",
    "detail": "Function (bShouldImportAll = true ; return)",
    "insertText": "OnImport()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnCancel()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldImport()"
  },
  {
    "label": "SetFocusPostConstruct()",
    "kind": "Method",
    "detail": "Function (} private : EActiveTimerReturnType)",
    "insertText": "SetFocusPostConstruct(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CanImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImport()"
  },
  {
    "label": "OnResetToDefaultClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnResetToDefaultClick()"
  },
  {
    "label": "GetImportTypeDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetImportTypeDisplayText()"
  }
]