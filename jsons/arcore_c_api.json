[
  {
    "label": "ArConfig_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArConfig_"
  },
  {
    "label": "ArCameraConfig_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArCameraConfig_"
  },
  {
    "label": "ArCameraConfigList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArCameraConfigList_"
  },
  {
    "label": "ArCameraConfigFilter_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArCameraConfigFilter_"
  },
  {
    "label": "ArRecordingConfig_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArRecordingConfig_"
  },
  {
    "label": "ArTrack_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArTrack_"
  },
  {
    "label": "ArSession_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArSession_"
  },
  {
    "label": "ArPose_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArPose_"
  },
  {
    "label": "ArCamera_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArCamera_"
  },
  {
    "label": "ArCameraIntrinsics_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArCameraIntrinsics_"
  },
  {
    "label": "ArFrame_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArFrame_"
  },
  {
    "label": "ArLightEstimate_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArLightEstimate_"
  },
  {
    "label": "ArPointCloud_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArPointCloud_"
  },
  {
    "label": "ArImageMetadata_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArImageMetadata_"
  },
  {
    "label": "ArImage_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArImage_"
  },
  {
    "label": "ArTrackable_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArTrackable_"
  },
  {
    "label": "ArTrackableList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArTrackableList_"
  },
  {
    "label": "ArTrackData_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArTrackData_"
  },
  {
    "label": "ArTrackDataList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArTrackDataList_"
  },
  {
    "label": "ArPlane_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArPlane_"
  },
  {
    "label": "ArPoint_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArPoint_"
  },
  {
    "label": "ArDepthPoint_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArDepthPoint_"
  },
  {
    "label": "ArInstantPlacementPoint_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArInstantPlacementPoint_"
  },
  {
    "label": "ArAugmentedImage_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAugmentedImage_"
  },
  {
    "label": "ArAugmentedFace_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAugmentedFace_"
  },
  {
    "label": "ArStreetscapeGeometry_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArStreetscapeGeometry_"
  },
  {
    "label": "ArEarth_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArEarth_"
  },
  {
    "label": "ArGeospatialPose_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArGeospatialPose_"
  },
  {
    "label": "ArAugmentedImageDatabase_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAugmentedImageDatabase_"
  },
  {
    "label": "ArAnchor_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAnchor_"
  },
  {
    "label": "ArAnchorList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAnchorList_"
  },
  {
    "label": "ArMesh_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArMesh_"
  },
  {
    "label": "ArHitResult_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArHitResult_"
  },
  {
    "label": "ArHitResultList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArHitResultList_"
  },
  {
    "label": "_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_type"
  },
  {
    "label": "ArFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArFuture_"
  },
  {
    "label": "ArHostCloudAnchorFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArHostCloudAnchorFuture_"
  },
  {
    "label": "ArResolveCloudAnchorFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArResolveCloudAnchorFuture_"
  },
  {
    "label": "ArResolveAnchorOnTerrainFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArResolveAnchorOnTerrainFuture_"
  },
  {
    "label": "ArResolveAnchorOnRooftopFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArResolveAnchorOnRooftopFuture_"
  },
  {
    "label": "ArVpsAvailabilityFuture_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArVpsAvailabilityFuture_"
  },
  {
    "label": "ArImageMetadata_rational",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArImageMetadata_rational"
  },
  {
    "label": "ArImageMetadata_const_entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArImageMetadata_const_entry"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (# ifndef ARCORE_C_API_H_ # define ARCORE_C_API_H_ # include<stddef . h> # include<stdint . h> # ifdef __cplusplus # endif typedef struct ArConfig_ ArConfig ; typedef struct ArCameraConfig_ ArCameraConfig ; typedef struct ArCameraConfigList_ ArCameraConfigList ; typedef void* ArJavaObject ; typedef struct ArCameraConfigFilter_ ArCameraConfigFilter ; typedef struct ArRecordingConfig_ ArRecordingConfig ; typedef struct ArTrack_ ArTrack ; typedef struct ArSession_ ArSession ; typedef struct ArPose_ ArPose ; typedef struct ArCamera_ ArCamera ; typedef struct ArCameraIntrinsics_ ArCameraIntrinsics ; typedef struct ArFrame_ ArFrame ; typedef struct ArLightEstimate_ ArLightEstimate ; typedef struct ArPointCloud_ ArPointCloud ; typedef struct ArImageMetadata_ ArImageMetadata ; typedef struct ArImage_ ArImage ; typedef ArImage* ArImageCubemap [ 6 ] ; typedef struct ArTrackable_ ArTrackable ; typedef struct ArTrackableList_ ArTrackableList ; typedef struct ArTrackData_ ArTrackData ; typedef struct ArTrackDataList_ ArTrackDataList ; typedef struct ArPlane_ ArPlane ; typedef struct ArPoint_ ArPoint ; typedef struct ArDepthPoint_ ArDepthPoint ; typedef struct ArInstantPlacementPoint_ ArInstantPlacementPoint ; typedef struct ArAugmentedImage_ ArAugmentedImage ; typedef struct ArAugmentedFace_ ArAugmentedFace ; typedef struct ArStreetscapeGeometry_ ArStreetscapeGeometry ; typedef struct ArEarth_ ArEarth ; typedef struct ArGeospatialPose_ ArGeospatialPose ; typedef struct ArAugmentedImageDatabase_ ArAugmentedImageDatabase ; typedef struct ArAnchor_ ArAnchor ; typedef struct ArAnchorList_ ArAnchorList ; typedef struct ArMesh_ ArMesh ; typedef struct ArHitResult_ ArHitResult ; typedef struct ArHitResultList_ ArHitResultList ; # ifdef __cplusplus ArTrackable*)",
    "insertText": "ArAsTrackable(ArPlane *plane)"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (} ArTrackable*)",
    "insertText": "ArAsTrackable(ArPoint *point)"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (} ArTrackable*)",
    "insertText": "ArAsTrackable(ArAugmentedImage *augmented_image)"
  },
  {
    "label": "ArAsPlane()",
    "kind": "Method",
    "detail": "Function (} ArPlane*)",
    "insertText": "ArAsPlane(ArTrackable *trackable)"
  },
  {
    "label": "ArAsPoint()",
    "kind": "Method",
    "detail": "Function (} ArPoint*)",
    "insertText": "ArAsPoint(ArTrackable *trackable)"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (} ArTrackable*)",
    "insertText": "ArAsTrackable(ArInstantPlacementPoint *instant_placement_point)"
  },
  {
    "label": "ArAsInstantPlacementPoint()",
    "kind": "Method",
    "detail": "Function (} ArInstantPlacementPoint*)",
    "insertText": "ArAsInstantPlacementPoint(ArTrackable *trackable)"
  },
  {
    "label": "ArAsAugmentedImage()",
    "kind": "Method",
    "detail": "Function (} ArAugmentedImage*)",
    "insertText": "ArAsAugmentedImage(ArTrackable *trackable)"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (} ArTrackable*)",
    "insertText": "ArAsTrackable(ArAugmentedFace *face)"
  },
  {
    "label": "ArAsFace()",
    "kind": "Method",
    "detail": "Function (} ArAugmentedFace*)",
    "insertText": "ArAsFace(ArTrackable *trackable)"
  },
  {
    "label": "ArAsTrackable()",
    "kind": "Method",
    "detail": "Function (} ArTrackable*)",
    "insertText": "ArAsTrackable(ArStreetscapeGeometry *streetscape_geometry)"
  },
  {
    "label": "ArAsStreetscapeGeometry()",
    "kind": "Method",
    "detail": "Function (} ArStreetscapeGeometry*)",
    "insertText": "ArAsStreetscapeGeometry(ArTrackable *trackable)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (} # endif # if __cplusplus> = 2 0 1 1 0 0 # define)",
    "insertText": "AR_DEFINE_ENUM(_type) enum _type : int32_t #else #define AR_DEFINE_ENUM(_type)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ enum # endif # if)",
    "insertText": "defined(__GNUC__) && !defined(AR_DEPRECATED_SUPPRESS) #define AR_DEPRECATED(_deprecation_string) \\ __attribute__((deprecated(_deprecation_string))) #else #define AR_DEPRECATED(_deprecation_string) #endif AR_DEFINE_ENUM(ArTrackableType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_TRACKABLE_BASE_TRACKABLE = 0 x41520100,AR_TRACKABLE_PLANE = 0 x41520101,AR_TRACKABLE_POINT = 0 x41520102,AR_TRACKABLE_AUGMENTED_IMAGE = 0 x41520104,AR_TRACKABLE_FACE = 0 x41520105,AR_TRACKABLE_STREETSCAPE_GEOMETRY = 0 x41520103,AR_TRACKABLE_EARTH = 0 x41520109,AR_TRACKABLE_DEPTH_POINT = 0 x41520111,AR_TRACKABLE_INSTANT_PLACEMENT_POINT = 0 x41520112,AR_TRACKABLE_NOT_VALID = 0 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArSessionFeature)"
  },
  {
    "label": "AR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (AR_SESSION_FEATURE_END_OF_LIST = 0,AR_SESSION_FEATURE_FRONT_CAMERA)",
    "insertText": "AR_DEPRECATED(\"To create a session using the front-facing (selfie) camera, use \" \"@c ::ArSession_setCameraConfig with the desired config retrieved \" \"from @c ::ArSession_getSupportedCameraConfigsWithFilter.\")"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArStatus)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_SUCCESS = 0,AR_ERROR_INVALID_ARGUMENT = - 1,AR_ERROR_FATAL = - 2,AR_ERROR_SESSION_PAUSED = - 3,AR_ERROR_SESSION_NOT_PAUSED = - 4,AR_ERROR_NOT_TRACKING = - 5,AR_ERROR_TEXTURE_NOT_SET = - 6,AR_ERROR_MISSING_GL_CONTEXT = - 7,AR_ERROR_UNSUPPORTED_CONFIGURATION = - 8,AR_ERROR_CAMERA_PERMISSION_NOT_GRANTED = - 9,AR_ERROR_DEADLINE_EXCEEDED = - 1 0,AR_ERROR_RESOURCE_EXHAUSTED = - 1 1,AR_ERROR_NOT_YET_AVAILABLE = - 1 2,AR_ERROR_CAMERA_NOT_AVAILABLE = - 1 3,AR_ERROR_CLOUD_ANCHORS_NOT_CONFIGURED = - 1 4,AR_ERROR_INTERNET_PERMISSION_NOT_GRANTED = - 1 5,AR_ERROR_ANCHOR_NOT_SUPPORTED_FOR_HOSTING = - 1 6,AR_ERROR_IMAGE_INSUFFICIENT_QUALITY = - 1 7,AR_ERROR_DATA_INVALID_FORMAT = - 1 8,AR_ERROR_DATA_UNSUPPORTED_VERSION = - 1 9,AR_ERROR_ILLEGAL_STATE = - 2 0,AR_ERROR_FINE_LOCATION_PERMISSION_NOT_GRANTED = - 2 1,AR_ERROR_GOOGLE_PLAY_SERVICES_LOCATION_LIBRARY_NOT_LINKED = - 2 2,AR_ERROR_RECORDING_FAILED = - 2 3,AR_ERROR_PLAYBACK_FAILED = - 2 4,AR_ERROR_SESSION_UNSUPPORTED = - 2 5,AR_ERROR_METADATA_NOT_FOUND = - 2 6,AR_UNAVAILABLE_ARCORE_NOT_INSTALLED = - 1 0 0,AR_UNAVAILABLE_DEVICE_NOT_COMPATIBLE = - 1 0 1,AR_UNAVAILABLE_APK_TOO_OLD = - 1 0 3,AR_UNAVAILABLE_SDK_TOO_OLD = - 1 0 4,AR_UNAVAILABLE_USER_DECLINED_INSTALLATION = - 1 0 5 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArTrackingState)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_TRACKING_STATE_TRACKING = 0,AR_TRACKING_STATE_PAUSED = 1,AR_TRACKING_STATE_STOPPED = 2 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArTrackingFailureReason)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_TRACKING_FAILURE_REASON_NONE = 0,AR_TRACKING_FAILURE_REASON_BAD_STATE = 1,AR_TRACKING_FAILURE_REASON_INSUFFICIENT_LIGHT = 2,AR_TRACKING_FAILURE_REASON_EXCESSIVE_MOTION = 3,AR_TRACKING_FAILURE_REASON_INSUFFICIENT_FEATURES = 4,AR_TRACKING_FAILURE_REASON_CAMERA_UNAVAILABLE = 5 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArCloudAnchorState)"
  },
  {
    "label": "AR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (AR_CLOUD_ANCHOR_STATE_NONE = 0,AR_CLOUD_ANCHOR_STATE_TASK_IN_PROGRESS)",
    "insertText": "AR_DEPRECATED(\"Not returned by async cloud anchor APIs - replaced by \" \"AR_FUTURE_STATE_PENDING.\") = 1, AR_CLOUD_ANCHOR_STATE_SUCCESS = 2, AR_CLOUD_ANCHOR_STATE_ERROR_INTERNAL = -1, AR_CLOUD_ANCHOR_STATE_ERROR_NOT_AUTHORIZED = -2, AR_CLOUD_ANCHOR_STATE_ERROR_SERVICE_UNAVAILABLE AR_DEPRECATED( \"AR_CLOUD_ANCHOR_STATE_ERROR_SERVICE_UNAVAILABLE is deprecated in \" \"ARCore SDK 1.12. See release notes to learn more.\") = -3, AR_CLOUD_ANCHOR_STATE_ERROR_RESOURCE_EXHAUSTED = -4, AR_CLOUD_ANCHOR_STATE_ERROR_HOSTING_DATASET_PROCESSING_FAILED = -5, AR_CLOUD_ANCHOR_STATE_ERROR_CLOUD_ID_NOT_FOUND = -6, AR_CLOUD_ANCHOR_STATE_ERROR_RESOLVING_LOCALIZATION_NO_MATCH AR_DEPRECATED( \"AR_CLOUD_ANCHOR_STATE_ERROR_RESOLVING_LOCALIZATION_NO_MATCH is \" \"deprecated in ARCore SDK 1.12. See release notes to learn more.\")"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArAvailability)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_AVAILABILITY_UNKNOWN_ERROR = 0,AR_AVAILABILITY_UNKNOWN_CHECKING = 1,AR_AVAILABILITY_UNKNOWN_TIMED_OUT = 2,AR_AVAILABILITY_UNSUPPORTED_DEVICE_NOT_CAPABLE = 1 0 0,AR_AVAILABILITY_SUPPORTED_NOT_INSTALLED = 2 0 1,AR_AVAILABILITY_SUPPORTED_APK_TOO_OLD = 2 0 2,AR_AVAILABILITY_SUPPORTED_INSTALLED = 2 0 3 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArInstallStatus)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_INSTALL_STATUS_INSTALLED = 0,AR_INSTALL_STATUS_INSTALL_REQUESTED = 1 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArInstallBehavior)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_INSTALL_BEHAVIOR_REQUIRED = 0,AR_INSTALL_BEHAVIOR_OPTIONAL = 1 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArInstallUserMessageType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_INSTALL_USER_MESSAGE_TYPE_APPLICATION = 0,AR_INSTALL_USER_MESSAGE_TYPE_FEATURE = 1,AR_INSTALL_USER_MESSAGE_TYPE_USER_ALREADY_INFORMED = 2 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArLightEstimationMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_LIGHT_ESTIMATION_MODE_DISABLED = 0,AR_LIGHT_ESTIMATION_MODE_AMBIENT_INTENSITY = 1,AR_LIGHT_ESTIMATION_MODE_ENVIRONMENTAL_HDR = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArPlaneFindingMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_PLANE_FINDING_MODE_DISABLED = 0,AR_PLANE_FINDING_MODE_HORIZONTAL = 1,AR_PLANE_FINDING_MODE_VERTICAL = 2,AR_PLANE_FINDING_MODE_HORIZONTAL_AND_VERTICAL = 3,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArRecordingStatus)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_RECORDING_NONE = 0,AR_RECORDING_OK = 1,AR_RECORDING_IO_ERROR = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArUpdateMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_UPDATE_MODE_BLOCKING = 0,AR_UPDATE_MODE_LATEST_CAMERA_IMAGE = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArAugmentedFaceMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_AUGMENTED_FACE_MODE_DISABLED = 0,AR_AUGMENTED_FACE_MODE_MESH3D = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArAugmentedImageTrackingMethod)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_AUGMENTED_IMAGE_TRACKING_METHOD_NOT_TRACKING = 0,AR_AUGMENTED_IMAGE_TRACKING_METHOD_FULL_TRACKING = 1,AR_AUGMENTED_IMAGE_TRACKING_METHOD_LAST_KNOWN_POSE = 2 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArAugmentedFaceRegionType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_AUGMENTED_FACE_REGION_NOSE_TIP = 0,AR_AUGMENTED_FACE_REGION_FOREHEAD_LEFT = 1,AR_AUGMENTED_FACE_REGION_FOREHEAD_RIGHT = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArFocusMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_FOCUS_MODE_FIXED = 0,AR_FOCUS_MODE_AUTO = 1 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArImageStabilizationMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_IMAGE_STABILIZATION_MODE_OFF = 0,AR_IMAGE_STABILIZATION_MODE_EIS = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArDepthMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_DEPTH_MODE_DISABLED = 0,AR_DEPTH_MODE_AUTOMATIC = 1,AR_DEPTH_MODE_RAW_DEPTH_ONLY = 3,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArTextureUpdateMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_TEXTURE_UPDATE_MODE_BIND_TO_TEXTURE_EXTERNAL_OES = 0,AR_TEXTURE_UPDATE_MODE_EXPOSE_HARDWARE_BUFFER = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArSemanticMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_SEMANTIC_MODE_DISABLED = 0,AR_SEMANTIC_MODE_ENABLED = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArSemanticLabel)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_SEMANTIC_LABEL_UNLABELED = 0,AR_SEMANTIC_LABEL_SKY = 1,AR_SEMANTIC_LABEL_BUILDING = 2,AR_SEMANTIC_LABEL_TREE = 3,AR_SEMANTIC_LABEL_ROAD = 4,AR_SEMANTIC_LABEL_SIDEWALK = 5,AR_SEMANTIC_LABEL_TERRAIN = 6,AR_SEMANTIC_LABEL_STRUCTURE = 7,AR_SEMANTIC_LABEL_OBJECT = 8,AR_SEMANTIC_LABEL_VEHICLE = 9,AR_SEMANTIC_LABEL_PERSON = 1 0,AR_SEMANTIC_LABEL_WATER = 1 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArPlaneType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_PLANE_HORIZONTAL_UPWARD_FACING = 0,AR_PLANE_HORIZONTAL_DOWNWARD_FACING = 1,AR_PLANE_VERTICAL = 2 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArLightEstimateState)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_LIGHT_ESTIMATE_STATE_NOT_VALID = 0,AR_LIGHT_ESTIMATE_STATE_VALID = 1 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArPointOrientationMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_POINT_ORIENTATION_INITIALIZED_TO_IDENTITY = 0,AR_POINT_ORIENTATION_ESTIMATED_SURFACE_NORMAL = 1 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArInstantPlacementPointTrackingMethod)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_INSTANT_PLACEMENT_POINT_TRACKING_METHOD_NOT_TRACKING = 0,AR_INSTANT_PLACEMENT_POINT_TRACKING_METHOD_SCREENSPACE_WITH_APPROXIMATE_DISTANCE = 1,AR_INSTANT_PLACEMENT_POINT_TRACKING_METHOD_FULL_TRACKING = 2 } ;)",
    "insertText": "AR_DEFINE_ENUM(ArCloudAnchorMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_CLOUD_ANCHOR_MODE_DISABLED = 0,AR_CLOUD_ANCHOR_MODE_ENABLED = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArGeospatialMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_GEOSPATIAL_MODE_DISABLED = 0,AR_GEOSPATIAL_MODE_ENABLED = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArStreetscapeGeometryMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_STREETSCAPE_GEOMETRY_MODE_DISABLED = 0,AR_STREETSCAPE_GEOMETRY_MODE_ENABLED = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArStreetscapeGeometryType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_STREETSCAPE_GEOMETRY_TYPE_TERRAIN = 0,AR_STREETSCAPE_GEOMETRY_TYPE_BUILDING = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArStreetscapeGeometryQuality)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_STREETSCAPE_GEOMETRY_QUALITY_NONE = 0,AR_STREETSCAPE_GEOMETRY_QUALITY_BUILDING_LOD_1 = 1,AR_STREETSCAPE_GEOMETRY_QUALITY_BUILDING_LOD_2 = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArInstantPlacementMode)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_INSTANT_PLACEMENT_MODE_DISABLED = 0,AR_INSTANT_PLACEMENT_MODE_LOCAL_Y_UP = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCoordinates2dType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_COORDINATES_2D_TEXTURE_TEXELS = 0,AR_COORDINATES_2D_TEXTURE_NORMALIZED = 1,AR_COORDINATES_2D_IMAGE_PIXELS = 2,AR_COORDINATES_2D_IMAGE_NORMALIZED = 3,AR_COORDINATES_2D_OPENGL_NORMALIZED_DEVICE_COORDINATES = 6,AR_COORDINATES_2D_VIEW = 7,AR_COORDINATES_2D_VIEW_NORMALIZED = 8,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCoordinates3dType)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_COORDINATES_3D_EIS_TEXTURE_NORMALIZED = 0,AR_COORDINATES_3D_EIS_NORMALIZED_DEVICE_COORDINATES = 1,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCameraConfigFacingDirection)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_CAMERA_CONFIG_FACING_DIRECTION_BACK = 0,AR_CAMERA_CONFIG_FACING_DIRECTION_FRONT = 1 } ; typedef struct ArFuture_ ArFuture ;)",
    "insertText": "AR_DEFINE_ENUM(ArFutureState)"
  },
  {
    "label": "ArAsFuture()",
    "kind": "Method",
    "detail": "Function (AR_FUTURE_STATE_PENDING = 0,AR_FUTURE_STATE_CANCELLED = 1,AR_FUTURE_STATE_DONE = 2,} ; typedef struct ArHostCloudAnchorFuture_ ArHostCloudAnchorFuture ; # ifdef __cplusplus ArFuture*)",
    "insertText": "ArAsFuture(ArHostCloudAnchorFuture *future)"
  },
  {
    "label": "ArAsFuture()",
    "kind": "Method",
    "detail": "Function (} # endif typedef struct ArResolveCloudAnchorFuture_ ArResolveCloudAnchorFuture ; # ifdef __cplusplus ArFuture*)",
    "insertText": "ArAsFuture(ArResolveCloudAnchorFuture *future)"
  },
  {
    "label": "ArAsFuture()",
    "kind": "Method",
    "detail": "Function (} # endif typedef struct ArResolveAnchorOnTerrainFuture_ ArResolveAnchorOnTerrainFuture ; # ifdef __cplusplus ArFuture*)",
    "insertText": "ArAsFuture(ArResolveAnchorOnTerrainFuture *future)"
  },
  {
    "label": "ArAsFuture()",
    "kind": "Method",
    "detail": "Function (} # endif typedef struct ArResolveAnchorOnRooftopFuture_ ArResolveAnchorOnRooftopFuture ; # ifdef __cplusplus ArFuture*)",
    "insertText": "ArAsFuture(ArResolveAnchorOnRooftopFuture *future)"
  },
  {
    "label": "ArCoreApk_checkAvailability()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef __cplusplus \" C \" { # endif void)",
    "insertText": "ArCoreApk_checkAvailability(void *env, void *context, ArAvailability *out_availability)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ArAvailabilityCallback)(void *callback_context, ArAvailability availability)"
  },
  {
    "label": "ArCoreApk_checkAvailabilityAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCoreApk_checkAvailabilityAsync(void *env, void *application_context, void *callback_context, ArAvailabilityCallback callback)"
  },
  {
    "label": "ArCoreApk_requestInstall()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArCoreApk_requestInstall(void *env, void *application_activity, int32_t user_requested_install, ArInstallStatus *out_install_status)"
  },
  {
    "label": "ArCoreApk_requestInstallCustom()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArCoreApk_requestInstallCustom(void *env, void *application_activity, int32_t user_requested_install, ArInstallBehavior install_behavior, ArInstallUserMessageType message_type, ArInstallStatus *out_install_status)"
  },
  {
    "label": "ArSession_create()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_create(void *env, void *context, ArSession **out_session_pointer)"
  },
  {
    "label": "ArSession_createWithFeatures()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_createWithFeatures(void *env, void *context, const ArSessionFeature *features, ArSession **out_session_pointer)"
  },
  {
    "label": "ArFuture_getState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFuture_getState(const ArSession *session, const ArFuture *future, ArFutureState *out_state)"
  },
  {
    "label": "ArFuture_cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFuture_cancel(const ArSession *session, ArFuture *future, int32_t *out_was_cancelled)"
  },
  {
    "label": "ArFuture_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFuture_release(ArFuture *future)"
  },
  {
    "label": "ArConfig_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_create(const ArSession *session, ArConfig **out_config)"
  },
  {
    "label": "ArConfig_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_destroy(ArConfig *config)"
  },
  {
    "label": "ArConfig_getLightEstimationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getLightEstimationMode(const ArSession *session, const ArConfig *config, ArLightEstimationMode *light_estimation_mode)"
  },
  {
    "label": "ArConfig_setLightEstimationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setLightEstimationMode(const ArSession *session, ArConfig *config, ArLightEstimationMode light_estimation_mode)"
  },
  {
    "label": "ArConfig_getPlaneFindingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getPlaneFindingMode(const ArSession *session, const ArConfig *config, ArPlaneFindingMode *plane_finding_mode)"
  },
  {
    "label": "ArConfig_setPlaneFindingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setPlaneFindingMode(const ArSession *session, ArConfig *config, ArPlaneFindingMode plane_finding_mode)"
  },
  {
    "label": "ArConfig_getUpdateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getUpdateMode(const ArSession *session, const ArConfig *config, ArUpdateMode *update_mode)"
  },
  {
    "label": "ArConfig_setUpdateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setUpdateMode(const ArSession *session, ArConfig *config, ArUpdateMode update_mode)"
  },
  {
    "label": "ArConfig_getCloudAnchorMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getCloudAnchorMode(const ArSession *session, const ArConfig *config, ArCloudAnchorMode *out_cloud_anchor_mode)"
  },
  {
    "label": "ArConfig_setCloudAnchorMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setCloudAnchorMode(const ArSession *session, ArConfig *config, ArCloudAnchorMode cloud_anchor_mode)"
  },
  {
    "label": "ArConfig_setAugmentedImageDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setAugmentedImageDatabase(const ArSession *session, ArConfig *config, const ArAugmentedImageDatabase *augmented_image_database)"
  },
  {
    "label": "ArConfig_getAugmentedImageDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getAugmentedImageDatabase(const ArSession *session, const ArConfig *config, ArAugmentedImageDatabase *out_augmented_image_database)"
  },
  {
    "label": "ArConfig_getTextureUpdateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getTextureUpdateMode(const ArSession *session, const ArConfig *config, ArTextureUpdateMode *out_texture_update_mode)"
  },
  {
    "label": "ArConfig_setTextureUpdateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setTextureUpdateMode(const ArSession *session, ArConfig *config, ArTextureUpdateMode texture_update_mode)"
  },
  {
    "label": "ArConfig_getAugmentedFaceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getAugmentedFaceMode(const ArSession *session, const ArConfig *config, ArAugmentedFaceMode *augmented_face_mode)"
  },
  {
    "label": "ArConfig_setAugmentedFaceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setAugmentedFaceMode(const ArSession *session, ArConfig *config, ArAugmentedFaceMode augmented_face_mode)"
  },
  {
    "label": "ArConfig_setFocusMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setFocusMode(const ArSession *session, ArConfig *config, ArFocusMode focus_mode)"
  },
  {
    "label": "ArConfig_getFocusMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getFocusMode(const ArSession *session, ArConfig *config, ArFocusMode *focus_mode)"
  },
  {
    "label": "ArConfig_getImageStabilizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getImageStabilizationMode(const ArSession *session, const ArConfig *config, ArImageStabilizationMode *out_image_stabilization_mode)"
  },
  {
    "label": "ArConfig_setImageStabilizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setImageStabilizationMode(const ArSession *session, ArConfig *config, ArImageStabilizationMode image_stabilization_mode)"
  },
  {
    "label": "ArConfig_setGeospatialMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setGeospatialMode(const ArSession *session, ArConfig *config, ArGeospatialMode geospatial_mode)"
  },
  {
    "label": "ArConfig_getGeospatialMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getGeospatialMode(const ArSession *session, const ArConfig *config, ArGeospatialMode *out_geospatial_mode)"
  },
  {
    "label": "ArConfig_setStreetscapeGeometryMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setStreetscapeGeometryMode(const ArSession *session, ArConfig *config, ArStreetscapeGeometryMode streetscape_geometry_mode)"
  },
  {
    "label": "ArConfig_getStreetscapeGeometryMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getStreetscapeGeometryMode(const ArSession *session, const ArConfig *config, ArStreetscapeGeometryMode *out_streetscape_geometry_mode)"
  },
  {
    "label": "ArConfig_getDepthMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getDepthMode(const ArSession *session, const ArConfig *config, ArDepthMode *out_depth_mode)"
  },
  {
    "label": "ArConfig_getSemanticMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getSemanticMode(const ArSession *session, const ArConfig *config, ArSemanticMode *out_semantic_mode)"
  },
  {
    "label": "ArConfig_setDepthMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setDepthMode(const ArSession *session, ArConfig *config, ArDepthMode mode)"
  },
  {
    "label": "ArConfig_setSemanticMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setSemanticMode(const ArSession *session, ArConfig *config, ArSemanticMode semantic_mode)"
  },
  {
    "label": "ArConfig_setInstantPlacementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_setInstantPlacementMode(const ArSession *session, ArConfig *config, ArInstantPlacementMode instant_placement_mode)"
  },
  {
    "label": "ArConfig_getInstantPlacementMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArConfig_getInstantPlacementMode(const ArSession *session, const ArConfig *config, ArInstantPlacementMode *instant_placement_mode)"
  },
  {
    "label": "ArCameraConfigList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigList_create(const ArSession *session, ArCameraConfigList **out_list)"
  },
  {
    "label": "ArCameraConfigList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigList_destroy(ArCameraConfigList *list)"
  },
  {
    "label": "ArCameraConfigList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigList_getSize(const ArSession *session, const ArCameraConfigList *list, int32_t *out_size)"
  },
  {
    "label": "ArCameraConfigList_getItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigList_getItem(const ArSession *session, const ArCameraConfigList *list, int32_t index, ArCameraConfig *out_camera_config)"
  },
  {
    "label": "ArCameraConfig_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_create(const ArSession *session, ArCameraConfig **out_camera_config)"
  },
  {
    "label": "ArCameraConfig_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_destroy(ArCameraConfig *camera_config)"
  },
  {
    "label": "ArCameraConfig_getImageDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getImageDimensions(const ArSession *session, const ArCameraConfig *camera_config, int32_t *out_width, int32_t *out_height)"
  },
  {
    "label": "ArCameraConfig_getTextureDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getTextureDimensions(const ArSession *session, const ArCameraConfig *camera_config, int32_t *out_width, int32_t *out_height)"
  },
  {
    "label": "ArCameraConfig_getFpsRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getFpsRange(const ArSession *session, const ArCameraConfig *camera_config, int32_t *out_min_fps, int32_t *out_max_fps)"
  },
  {
    "label": "ArCameraConfig_getDepthSensorUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getDepthSensorUsage(const ArSession *session, const ArCameraConfig *camera_config, uint32_t *out_depth_sensor_usage)"
  },
  {
    "label": "ArCameraConfig_getCameraId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getCameraId(const ArSession *session, const ArCameraConfig *camera_config, char **out_camera_id)"
  },
  {
    "label": "ArCameraConfig_getFacingDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfig_getFacingDirection(const ArSession *session, const ArCameraConfig *camera_config, ArCameraConfigFacingDirection *out_facing)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArCameraConfigTargetFps)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_CAMERA_CONFIG_TARGET_FPS_30 = 0 x0001,AR_CAMERA_CONFIG_TARGET_FPS_60 = 0 x0002,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCameraConfigDepthSensorUsage)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_CAMERA_CONFIG_DEPTH_SENSOR_USAGE_REQUIRE_AND_USE = 0 x0001,AR_CAMERA_CONFIG_DEPTH_SENSOR_USAGE_DO_NOT_USE = 0 x0002,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCameraConfigStereoCameraUsage)"
  },
  {
    "label": "ArCameraConfig_getStereoCameraUsage()",
    "kind": "Method",
    "detail": "Function (AR_CAMERA_CONFIG_STEREO_CAMERA_USAGE_REQUIRE_AND_USE = 0 x0001,AR_CAMERA_CONFIG_STEREO_CAMERA_USAGE_DO_NOT_USE = 0 x0002,} ; void)",
    "insertText": "ArCameraConfig_getStereoCameraUsage(const ArSession *session, const ArCameraConfig *camera_config, ArCameraConfigStereoCameraUsage *out_stereo_camera_usage)"
  },
  {
    "label": "ArCameraConfigFilter_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_create(const ArSession *session, ArCameraConfigFilter **out_filter)"
  },
  {
    "label": "ArCameraConfigFilter_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_destroy(ArCameraConfigFilter *filter)"
  },
  {
    "label": "ArCameraConfigFilter_setTargetFps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_setTargetFps(const ArSession *session, ArCameraConfigFilter *filter, uint32_t fps_filters)"
  },
  {
    "label": "ArCameraConfigFilter_getTargetFps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_getTargetFps(const ArSession *session, ArCameraConfigFilter *filter, uint32_t *out_fps_filters)"
  },
  {
    "label": "ArCameraConfigFilter_setDepthSensorUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_setDepthSensorUsage(const ArSession *session, ArCameraConfigFilter *filter, uint32_t depth_sensor_usage_filters)"
  },
  {
    "label": "ArCameraConfigFilter_getDepthSensorUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_getDepthSensorUsage(const ArSession *session, ArCameraConfigFilter *filter, uint32_t *out_depth_sensor_usage)"
  },
  {
    "label": "ArCameraConfigFilter_setStereoCameraUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_setStereoCameraUsage(const ArSession *session, ArCameraConfigFilter *filter, uint32_t stereo_camera_usage_filters)"
  },
  {
    "label": "ArCameraConfigFilter_getStereoCameraUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_getStereoCameraUsage(const ArSession *session, ArCameraConfigFilter *filter, uint32_t *out_stereo_camera_usage)"
  },
  {
    "label": "ArCameraConfigFilter_setFacingDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_setFacingDirection(const ArSession *session, ArCameraConfigFilter *filter, ArCameraConfigFacingDirection facing_direction_filter)"
  },
  {
    "label": "ArCameraConfigFilter_getFacingDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraConfigFilter_getFacingDirection(const ArSession *session, ArCameraConfigFilter *filter, ArCameraConfigFacingDirection *out_facing_direction_filter)"
  },
  {
    "label": "ArRecordingConfig_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_create(const ArSession *session, ArRecordingConfig **out_config)"
  },
  {
    "label": "ArRecordingConfig_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_destroy(ArRecordingConfig *config)"
  },
  {
    "label": "ArRecordingConfig_getMp4DatasetFilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_getMp4DatasetFilePath(const ArSession *session, const ArRecordingConfig *config, char **out_mp4_dataset_file_path) AR_DEPRECATED( \"Deprecated in release 1.26.0. Please see function documentation\")"
  },
  {
    "label": "ArRecordingConfig_setMp4DatasetFilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_setMp4DatasetFilePath(const ArSession *session, ArRecordingConfig *config, const char *mp4_dataset_file_path) AR_DEPRECATED( \"Deprecated in release 1.26.0. Please see function documentation\")"
  },
  {
    "label": "ArRecordingConfig_getMp4DatasetUri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_getMp4DatasetUri(const ArSession *session, const ArRecordingConfig *config, char **out_mp4_dataset_uri)"
  },
  {
    "label": "ArRecordingConfig_setMp4DatasetUri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_setMp4DatasetUri(const ArSession *session, ArRecordingConfig *config, const char *mp4_dataset_uri)"
  },
  {
    "label": "ArRecordingConfig_getAutoStopOnPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_getAutoStopOnPause(const ArSession *session, const ArRecordingConfig *config, int32_t *out_config_enabled)"
  },
  {
    "label": "ArRecordingConfig_setAutoStopOnPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_setAutoStopOnPause(const ArSession *session, ArRecordingConfig *config, int32_t config_enabled)"
  },
  {
    "label": "ArRecordingConfig_getRecordingRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_getRecordingRotation(const ArSession *session, const ArRecordingConfig *config, int32_t *out_recording_rotation)"
  },
  {
    "label": "ArRecordingConfig_setRecordingRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_setRecordingRotation(const ArSession *session, ArRecordingConfig *config, int32_t recording_rotation)"
  },
  {
    "label": "ArRecordingConfig_addTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArRecordingConfig_addTrack(const ArSession *session, ArRecordingConfig *config, const ArTrack *track)"
  },
  {
    "label": "ArTrack_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrack_create(const ArSession *session, ArTrack **out_track)"
  },
  {
    "label": "ArTrack_setId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrack_setId(const ArSession *session, ArTrack *track, const uint8_t *track_id_uuid_16)"
  },
  {
    "label": "ArTrack_setMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrack_setMetadata(const ArSession *session, ArTrack *track, const uint8_t *track_metadata_buffer, size_t track_metadata_buffer_size)"
  },
  {
    "label": "ArTrack_setMimeType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrack_setMimeType(const ArSession *session, ArTrack *track, const char *mime_type)"
  },
  {
    "label": "ArTrack_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrack_destroy(ArTrack *track)"
  },
  {
    "label": "ArSession_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_destroy(ArSession *session)"
  },
  {
    "label": "ArSession_checkSupported()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_checkSupported(const ArSession *session, const ArConfig *config) AR_DEPRECATED( \"Deprecated in release 1.2.0. Please see function documentation\")"
  },
  {
    "label": "ArSession_configure()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_configure(ArSession *session, const ArConfig *config)"
  },
  {
    "label": "ArSession_getConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getConfig(ArSession *session, ArConfig *out_config)"
  },
  {
    "label": "ArSession_resume()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_resume(ArSession *session)"
  },
  {
    "label": "ArSession_pause()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_pause(ArSession *session)"
  },
  {
    "label": "ArSession_setCameraTextureNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_setCameraTextureNames(ArSession *session, int32_t number_of_textures, const uint32_t *texture_ids)"
  },
  {
    "label": "ArSession_setCameraTextureName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_setCameraTextureName(ArSession *session, uint32_t texture_id)"
  },
  {
    "label": "ArSession_setDisplayGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_setDisplayGeometry(ArSession *session, int32_t rotation, int32_t width, int32_t height)"
  },
  {
    "label": "ArSession_update()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_update(ArSession *session, ArFrame *out_frame)"
  },
  {
    "label": "ArSession_acquireNewAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_acquireNewAnchor(ArSession *session, const ArPose *pose, ArAnchor **out_anchor)"
  },
  {
    "label": "ArSession_getAllAnchors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getAllAnchors(const ArSession *session, ArAnchorList *out_anchor_list)"
  },
  {
    "label": "ArSession_getAllTrackables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getAllTrackables(const ArSession *session, ArTrackableType filter_type, ArTrackableList *out_trackable_list)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArFeatureMapQuality)"
  },
  {
    "label": "ArSession_estimateFeatureMapQualityForHosting()",
    "kind": "Method",
    "detail": "Function (AR_FEATURE_MAP_QUALITY_INSUFFICIENT = 0,AR_FEATURE_MAP_QUALITY_SUFFICIENT = 1,AR_FEATURE_MAP_QUALITY_GOOD = 2,} ; ArStatus)",
    "insertText": "ArSession_estimateFeatureMapQualityForHosting(const ArSession *session, const ArPose *pose, ArFeatureMapQuality *out_feature_map_quality)"
  },
  {
    "label": "ArSession_hostAndAcquireNewCloudAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_hostAndAcquireNewCloudAnchor(ArSession *session, const ArAnchor *anchor, ArAnchor **out_cloud_anchor) AR_DEPRECATED( \"Use ArSession_hostCloudAnchorAsync with ttl_days = 1 instead.\")"
  },
  {
    "label": "ArSession_resolveAndAcquireNewCloudAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_resolveAndAcquireNewCloudAnchor(ArSession *session, const char *cloud_anchor_id, ArAnchor **out_cloud_anchor) AR_DEPRECATED(\"Use @c ::ArSession_resolveCloudAnchorAsync instead.\")"
  },
  {
    "label": "ArSession_hostAndAcquireNewCloudAnchorWithTtl()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_hostAndAcquireNewCloudAnchorWithTtl(ArSession *session, const ArAnchor *anchor, int32_t ttl_days, ArAnchor **out_cloud_anchor) AR_DEPRECATED( \"Use ArSession_hostCloudAnchorAsync with ttl_days = 1 instead.\")"
  },
  {
    "label": "ArHostCloudAnchorFuture_acquireResultCloudAnchorId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHostCloudAnchorFuture_acquireResultCloudAnchorId(const ArSession *session, const ArHostCloudAnchorFuture *future, char **out_cloud_anchor_id)"
  },
  {
    "label": "ArHostCloudAnchorFuture_getResultCloudAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHostCloudAnchorFuture_getResultCloudAnchorState(const ArSession *session, const ArHostCloudAnchorFuture *future, ArCloudAnchorState *out_cloud_anchor_state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ArHostCloudAnchorCallback)( void *context, char *cloud_anchor_id, ArCloudAnchorState cloud_anchor_state)"
  },
  {
    "label": "ArSession_hostCloudAnchorAsync()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_hostCloudAnchorAsync(ArSession *session, const ArAnchor *anchor, int32_t ttl_days, void *context, ArHostCloudAnchorCallback callback, ArHostCloudAnchorFuture **out_future)"
  },
  {
    "label": "ArResolveCloudAnchorFuture_acquireResultAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArResolveCloudAnchorFuture_acquireResultAnchor(const ArSession *session, const ArResolveCloudAnchorFuture *future, ArAnchor **out_anchor)"
  },
  {
    "label": "ArResolveCloudAnchorFuture_getResultCloudAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArResolveCloudAnchorFuture_getResultCloudAnchorState(const ArSession *session, const ArResolveCloudAnchorFuture *future, ArCloudAnchorState *out_cloud_anchor_state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ArResolveCloudAnchorCallback)( void *context, ArAnchor *anchor, ArCloudAnchorState cloud_anchor_state)"
  },
  {
    "label": "ArSession_resolveCloudAnchorAsync()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_resolveCloudAnchorAsync(ArSession *session, const char *cloud_anchor_id, void *context, ArResolveCloudAnchorCallback callback, ArResolveCloudAnchorFuture **out_future)"
  },
  {
    "label": "ArSession_getSupportedCameraConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getSupportedCameraConfigs(const ArSession *session, ArCameraConfigList *list) AR_DEPRECATED( \"Deprecated in release 1.11.0. Please see function documentation.\")"
  },
  {
    "label": "ArSession_setCameraConfig()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_setCameraConfig(const ArSession *session, const ArCameraConfig *camera_config)"
  },
  {
    "label": "ArSession_getCameraConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getCameraConfig(const ArSession *session, ArCameraConfig *out_camera_config)"
  },
  {
    "label": "ArSession_getSupportedCameraConfigsWithFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getSupportedCameraConfigsWithFilter(const ArSession *session, const ArCameraConfigFilter *filter, ArCameraConfigList *list)"
  },
  {
    "label": "ArSession_acquireEarth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_acquireEarth(const ArSession *session, ArEarth **out_earth)"
  },
  {
    "label": "ArSession_setPlaybackDataset()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_setPlaybackDataset(ArSession *session, const char *mp4_dataset_file_path) AR_DEPRECATED( \"Deprecated in release 1.26.0. Please see function documentation\")"
  },
  {
    "label": "ArSession_setPlaybackDatasetUri()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_setPlaybackDatasetUri(ArSession *session, const char *mp4_dataset_uri)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArPlaybackStatus)"
  },
  {
    "label": "ArSession_getPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (AR_PLAYBACK_NONE = 0,AR_PLAYBACK_OK = 1,AR_PLAYBACK_IO_ERROR = 2,AR_PLAYBACK_FINISHED = 3,} ; void)",
    "insertText": "ArSession_getPlaybackStatus(ArSession *session, ArPlaybackStatus *out_playback_status)"
  },
  {
    "label": "ArSession_startRecording()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_startRecording(ArSession *session, const ArRecordingConfig *recording_config)"
  },
  {
    "label": "ArSession_stopRecording()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_stopRecording(ArSession *session)"
  },
  {
    "label": "ArSession_getRecordingStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getRecordingStatus(ArSession *session, ArRecordingStatus *out_recording_status)"
  },
  {
    "label": "ArFrame_recordTrackData()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_recordTrackData(ArSession *session, const ArFrame *frame, const uint8_t *track_id_uuid_16, const void *payload, size_t payload_size)"
  },
  {
    "label": "ArSession_isDepthModeSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_isDepthModeSupported(const ArSession *session, ArDepthMode depth_mode, int32_t *out_is_supported)"
  },
  {
    "label": "ArSession_isImageStabilizationModeSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_isImageStabilizationModeSupported(const ArSession *session, ArImageStabilizationMode image_stabilization_mode, int32_t *out_is_supported)"
  },
  {
    "label": "ArSession_isSemanticModeSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_isSemanticModeSupported(const ArSession *session, ArSemanticMode semantic_mode, int32_t *out_is_supported)"
  },
  {
    "label": "ArSession_isGeospatialModeSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_isGeospatialModeSupported(const ArSession *session, ArGeospatialMode geospatial_mode, int32_t *out_is_supported)"
  },
  {
    "label": "ArPose_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_create(const ArSession *session, const float *pose_raw, ArPose **out_pose)"
  },
  {
    "label": "ArPose_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_destroy(ArPose *pose)"
  },
  {
    "label": "ArPose_getPoseRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_getPoseRaw(const ArSession *session, const ArPose *pose, float *out_pose_raw_7)"
  },
  {
    "label": "ArPose_getMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_getMatrix(const ArSession *session, const ArPose *pose, float *out_matrix_col_major_4x4)"
  },
  {
    "label": "ArCamera_getPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getPose(const ArSession *session, const ArCamera *camera, ArPose *out_pose)"
  },
  {
    "label": "ArCamera_getDisplayOrientedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getDisplayOrientedPose(const ArSession *session, const ArCamera *camera, ArPose *out_pose)"
  },
  {
    "label": "ArCamera_getViewMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getViewMatrix(const ArSession *session, const ArCamera *camera, float *out_col_major_4x4)"
  },
  {
    "label": "ArCamera_getTrackingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getTrackingState(const ArSession *session, const ArCamera *camera, ArTrackingState *out_tracking_state)"
  },
  {
    "label": "ArCamera_getTrackingFailureReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getTrackingFailureReason(const ArSession *session, const ArCamera *camera, ArTrackingFailureReason *out_tracking_failure_reason)"
  },
  {
    "label": "ArCamera_getProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getProjectionMatrix(const ArSession *session, const ArCamera *camera, float near, float far, float *dest_col_major_4x4)"
  },
  {
    "label": "ArCamera_getImageIntrinsics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getImageIntrinsics(const ArSession *session, const ArCamera *camera, ArCameraIntrinsics *out_camera_intrinsics)"
  },
  {
    "label": "ArCamera_getTextureIntrinsics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_getTextureIntrinsics(const ArSession *session, const ArCamera *camera, ArCameraIntrinsics *out_camera_intrinsics)"
  },
  {
    "label": "ArCamera_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCamera_release(ArCamera *camera)"
  },
  {
    "label": "ArCameraIntrinsics_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraIntrinsics_create(const ArSession *session, ArCameraIntrinsics **out_camera_intrinsics)"
  },
  {
    "label": "ArCameraIntrinsics_getFocalLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraIntrinsics_getFocalLength(const ArSession *session, const ArCameraIntrinsics *intrinsics, float *out_fx, float *out_fy)"
  },
  {
    "label": "ArCameraIntrinsics_getPrincipalPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraIntrinsics_getPrincipalPoint(const ArSession *session, const ArCameraIntrinsics *intrinsics, float *out_cx, float *out_cy)"
  },
  {
    "label": "ArCameraIntrinsics_getImageDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraIntrinsics_getImageDimensions(const ArSession *session, const ArCameraIntrinsics *intrinsics, int32_t *out_width, int32_t *out_height)"
  },
  {
    "label": "ArCameraIntrinsics_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArCameraIntrinsics_destroy(ArCameraIntrinsics *camera_intrinsics)"
  },
  {
    "label": "ArFrame_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_create(const ArSession *session, ArFrame **out_frame)"
  },
  {
    "label": "ArFrame_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_destroy(ArFrame *frame)"
  },
  {
    "label": "ArFrame_getDisplayGeometryChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getDisplayGeometryChanged(const ArSession *session, const ArFrame *frame, int32_t *out_geometry_changed)"
  },
  {
    "label": "ArFrame_getTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getTimestamp(const ArSession *session, const ArFrame *frame, int64_t *out_timestamp_ns)"
  },
  {
    "label": "ArFrame_getAndroidSensorPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getAndroidSensorPose(const ArSession *session, const ArFrame *frame, ArPose *out_pose)"
  },
  {
    "label": "ArFrame_transformDisplayUvCoords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_transformDisplayUvCoords(const ArSession *session, const ArFrame *frame, int32_t num_elements, const float *uvs_in, float *uvs_out) AR_DEPRECATED( \"Deprecated in release 1.7.0. Please see function documentation.\")"
  },
  {
    "label": "ArFrame_transformCoordinates2d()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_transformCoordinates2d(const ArSession *session, const ArFrame *frame, ArCoordinates2dType input_coordinates, int32_t number_of_vertices, const float *vertices_2d, ArCoordinates2dType output_coordinates, float *out_vertices_2d)"
  },
  {
    "label": "ArFrame_transformCoordinates3d()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_transformCoordinates3d(const ArSession *session, const ArFrame *frame, ArCoordinates2dType input_coordinates, int32_t number_of_vertices, const float *vertices_2d, ArCoordinates3dType output_coordinates, float *out_vertices_3d)"
  },
  {
    "label": "ArFrame_hitTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_hitTest(const ArSession *session, const ArFrame *frame, float pixel_x, float pixel_y, ArHitResultList *hit_result_list)"
  },
  {
    "label": "ArFrame_hitTestInstantPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_hitTestInstantPlacement(const ArSession *session, const ArFrame *frame, float pixel_x, float pixel_y, float approximate_distance_meters, ArHitResultList *hit_result_list)"
  },
  {
    "label": "ArFrame_hitTestRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_hitTestRay(const ArSession *session, const ArFrame *frame, const float *ray_origin_3, const float *ray_direction_3, ArHitResultList *hit_result_list)"
  },
  {
    "label": "ArFrame_getLightEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getLightEstimate(const ArSession *session, const ArFrame *frame, ArLightEstimate *out_light_estimate)"
  },
  {
    "label": "ArFrame_acquirePointCloud()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquirePointCloud(const ArSession *session, const ArFrame *frame, ArPointCloud **out_point_cloud)"
  },
  {
    "label": "ArFrame_acquireCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_acquireCamera(const ArSession *session, const ArFrame *frame, ArCamera **out_camera)"
  },
  {
    "label": "ArFrame_acquireImageMetadata()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireImageMetadata(const ArSession *session, const ArFrame *frame, ArImageMetadata **out_metadata)"
  },
  {
    "label": "ArFrame_acquireCameraImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireCameraImage(ArSession *session, ArFrame *frame, ArImage **out_image)"
  },
  {
    "label": "ArFrame_getUpdatedAnchors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getUpdatedAnchors(const ArSession *session, const ArFrame *frame, ArAnchorList *out_anchor_list)"
  },
  {
    "label": "ArFrame_getUpdatedTrackables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getUpdatedTrackables(const ArSession *session, const ArFrame *frame, ArTrackableType filter_type, ArTrackableList *out_trackable_list)"
  },
  {
    "label": "ArFrame_getUpdatedTrackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getUpdatedTrackData(const ArSession *session, const ArFrame *frame, const uint8_t *track_id_uuid_16, ArTrackDataList *out_track_data_list)"
  },
  {
    "label": "ArTrackData_getFrameTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackData_getFrameTimestamp(const ArSession *session, const ArTrackData *track_data, int64_t *out_timestamp_ns)"
  },
  {
    "label": "ArTrackData_getData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackData_getData(const ArSession *session, const ArTrackData *track_data, const uint8_t **out_data, int32_t *out_size)"
  },
  {
    "label": "ArTrackData_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackData_release(ArTrackData *track_data)"
  },
  {
    "label": "ArTrackDataList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackDataList_create(const ArSession *session, ArTrackDataList **out_track_data_list)"
  },
  {
    "label": "ArTrackDataList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackDataList_destroy(ArTrackDataList *track_data_list)"
  },
  {
    "label": "ArTrackDataList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackDataList_getSize(const ArSession *session, const ArTrackDataList *track_data_list, int32_t *out_size)"
  },
  {
    "label": "ArTrackDataList_acquireItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackDataList_acquireItem(const ArSession *session, const ArTrackDataList *track_data_list, int32_t index, ArTrackData **out_track_data)"
  },
  {
    "label": "ArFrame_acquireDepthImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireDepthImage(const ArSession *session, const ArFrame *frame, ArImage **out_depth_image) AR_DEPRECATED( \"Deprecated in release 1.31.0. Please use \" \"ArFrame_acquireDepthImage16Bits instead, which expands the depth \" \"range from 8191mm to 65535mm. This deprecated version may \" \"be slower than ArFrame_acquireDepthImage16Bits due to the clearing of \" \"the top 3 bits per pixel.\")"
  },
  {
    "label": "ArFrame_acquireDepthImage16Bits()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireDepthImage16Bits(const ArSession *session, const ArFrame *frame, ArImage **out_depth_image)"
  },
  {
    "label": "ArFrame_acquireRawDepthImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireRawDepthImage(const ArSession *session, const ArFrame *frame, ArImage **out_depth_image) AR_DEPRECATED( \"Deprecated in release 1.31.0. Please use \" \"ArFrame_acquireRawDepthImage16Bits instead, which expands the depth \" \"range from 8191mm to 65535mm. This deprecated version may \" \"be slower than ArFrame_acquireRawDepthImage16Bits due to the clearing \" \"of the top 3 bits per pixel.\")"
  },
  {
    "label": "ArFrame_acquireRawDepthImage16Bits()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireRawDepthImage16Bits(const ArSession *session, const ArFrame *frame, ArImage **out_depth_image)"
  },
  {
    "label": "ArFrame_acquireRawDepthConfidenceImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireRawDepthConfidenceImage(const ArSession *session, const ArFrame *frame, ArImage **out_confidence_image)"
  },
  {
    "label": "ArFrame_acquireSemanticImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireSemanticImage(const ArSession *session, const ArFrame *frame, ArImage **out_semantic_image)"
  },
  {
    "label": "ArFrame_acquireSemanticConfidenceImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_acquireSemanticConfidenceImage(const ArSession *session, const ArFrame *frame, ArImage **out_semantic_confidence_image)"
  },
  {
    "label": "ArFrame_getSemanticLabelFraction()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_getSemanticLabelFraction(const ArSession *session, const ArFrame *frame, ArSemanticLabel query_label, float *out_fraction)"
  },
  {
    "label": "ArFrame_getHardwareBuffer()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArFrame_getHardwareBuffer(const ArSession *session, const ArFrame *frame, void **out_hardware_buffer)"
  },
  {
    "label": "ArFrame_getCameraTextureName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getCameraTextureName(const ArSession *session, const ArFrame *frame, uint32_t *out_texture_id)"
  },
  {
    "label": "ArMesh_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArMesh_release(ArMesh *mesh)"
  },
  {
    "label": "ArMesh_getVertexListSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArMesh_getVertexListSize(const ArSession *session, const ArMesh *mesh, int32_t *out_num_vertices)"
  },
  {
    "label": "ArMesh_getVertexList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArMesh_getVertexList(const ArSession *session, const ArMesh *mesh, const float **out_vertex_positions_xyz)"
  },
  {
    "label": "ArMesh_getIndexListSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArMesh_getIndexListSize(const ArSession *session, const ArMesh *mesh, int32_t *out_num_indices)"
  },
  {
    "label": "ArMesh_getIndexList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArMesh_getIndexList(const ArSession *session, const ArMesh *mesh, const uint32_t **out_indices)"
  },
  {
    "label": "ArPointCloud_getNumberOfPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPointCloud_getNumberOfPoints(const ArSession *session, const ArPointCloud *point_cloud, int32_t *out_number_of_points)"
  },
  {
    "label": "ArPointCloud_getData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPointCloud_getData(const ArSession *session, const ArPointCloud *point_cloud, const float **out_point_cloud_data)"
  },
  {
    "label": "ArPointCloud_getPointIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPointCloud_getPointIds(const ArSession *session, const ArPointCloud *point_cloud, const int32_t **out_point_ids)"
  },
  {
    "label": "ArPointCloud_getTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPointCloud_getTimestamp(const ArSession *session, const ArPointCloud *point_cloud, int64_t *out_timestamp_ns)"
  },
  {
    "label": "ArPointCloud_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPointCloud_release(ArPointCloud *point_cloud)"
  },
  {
    "label": "ArImageMetadata_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImageMetadata_release(ArImageMetadata *metadata)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArImageFormat)"
  },
  {
    "label": "ArImage_getWidth()",
    "kind": "Method",
    "detail": "Function (AR_IMAGE_FORMAT_INVALID = 0,AR_IMAGE_FORMAT_YUV_420_888 = 0 x23,AR_IMAGE_FORMAT_DEPTH16 = 0 x44363159,AR_IMAGE_FORMAT_D_16 = 0 x00000030,AR_IMAGE_FORMAT_Y8 = 0 x20203859,AR_IMAGE_FORMAT_RGBA_FP16 = 0 x16,} ; void)",
    "insertText": "ArImage_getWidth(const ArSession *session, const ArImage *image, int32_t *out_width)"
  },
  {
    "label": "ArImage_getHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getHeight(const ArSession *session, const ArImage *image, int32_t *out_height)"
  },
  {
    "label": "ArImage_getTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getTimestamp(const ArSession *session, const ArImage *image, int64_t *out_timestamp_ns)"
  },
  {
    "label": "ArImage_getFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getFormat(const ArSession *session, const ArImage *image, ArImageFormat *out_format)"
  },
  {
    "label": "ArImage_getNumberOfPlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getNumberOfPlanes(const ArSession *session, const ArImage *image, int32_t *out_num_planes)"
  },
  {
    "label": "ArImage_getPlanePixelStride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getPlanePixelStride(const ArSession *session, const ArImage *image, int32_t plane_index, int32_t *out_pixel_stride)"
  },
  {
    "label": "ArImage_getPlaneRowStride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getPlaneRowStride(const ArSession *session, const ArImage *image, int32_t plane_index, int32_t *out_row_stride)"
  },
  {
    "label": "ArImage_getPlaneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_getPlaneData(const ArSession *session, const ArImage *image, int32_t plane_index, const uint8_t **out_data, int32_t *out_data_length)"
  },
  {
    "label": "ArImage_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArImage_release(ArImage *image)"
  },
  {
    "label": "ArLightEstimate_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_create(const ArSession *session, ArLightEstimate **out_light_estimate)"
  },
  {
    "label": "ArLightEstimate_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_destroy(ArLightEstimate *light_estimate)"
  },
  {
    "label": "ArLightEstimate_getState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getState(const ArSession *session, const ArLightEstimate *light_estimate, ArLightEstimateState *out_light_estimate_state)"
  },
  {
    "label": "ArLightEstimate_getPixelIntensity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getPixelIntensity(const ArSession *session, const ArLightEstimate *light_estimate, float *out_pixel_intensity)"
  },
  {
    "label": "ArLightEstimate_getColorCorrection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getColorCorrection(const ArSession *session, const ArLightEstimate *light_estimate, float *out_color_correction_4)"
  },
  {
    "label": "ArLightEstimate_getTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getTimestamp(const ArSession *session, const ArLightEstimate *light_estimate, int64_t *out_timestamp_ns)"
  },
  {
    "label": "ArLightEstimate_getEnvironmentalHdrMainLightDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getEnvironmentalHdrMainLightDirection(const ArSession *session, const ArLightEstimate *light_estimate, float *out_direction_3)"
  },
  {
    "label": "ArLightEstimate_getEnvironmentalHdrMainLightIntensity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getEnvironmentalHdrMainLightIntensity(const ArSession *session, const ArLightEstimate *light_estimate, float *out_intensity_3)"
  },
  {
    "label": "ArLightEstimate_getEnvironmentalHdrAmbientSphericalHarmonics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_getEnvironmentalHdrAmbientSphericalHarmonics(const ArSession *session, const ArLightEstimate *light_estimate, float *out_coefficients_27)"
  },
  {
    "label": "ArLightEstimate_acquireEnvironmentalHdrCubemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArLightEstimate_acquireEnvironmentalHdrCubemap(const ArSession *session, const ArLightEstimate *light_estimate, ArImageCubemap out_textures_6)"
  },
  {
    "label": "ArAnchorList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_create(const ArSession *session, ArAnchorList **out_anchor_list)"
  },
  {
    "label": "ArAnchorList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_destroy(ArAnchorList *anchor_list)"
  },
  {
    "label": "ArAnchorList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_getSize(const ArSession *session, const ArAnchorList *anchor_list, int32_t *out_size)"
  },
  {
    "label": "ArAnchorList_acquireItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_acquireItem(const ArSession *session, const ArAnchorList *anchor_list, int32_t index, ArAnchor **out_anchor)"
  },
  {
    "label": "ArAnchor_getPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getPose(const ArSession *session, const ArAnchor *anchor, ArPose *out_pose)"
  },
  {
    "label": "ArAnchor_getTrackingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getTrackingState(const ArSession *session, const ArAnchor *anchor, ArTrackingState *out_tracking_state)"
  },
  {
    "label": "ArAnchor_detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_detach(ArSession *session, ArAnchor *anchor)"
  },
  {
    "label": "ArAnchor_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_release(ArAnchor *anchor)"
  },
  {
    "label": "ArAnchor_acquireCloudAnchorId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_acquireCloudAnchorId(ArSession *session, ArAnchor *anchor, char **out_cloud_anchor_id) AR_DEPRECATED( \"For anchors hosted using ArSession_hostCloudAnchorAsync, the cloud \" \"anchor ID can be obtained from the callback or future object. This \" \"function will always return the empty string except for anchors \" \"created using the deprecated functions \" \"ArSession_resolveAndAcquireNewCloudAnchor, \" \"ArSession_hostAndAcquireNewCloudAnchor, and \" \"ArSession_hostAndAcquireNewCloudAnchorWithTtl.\")"
  },
  {
    "label": "ArAnchor_getCloudAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getCloudAnchorState(const ArSession *session, const ArAnchor *anchor, ArCloudAnchorState *out_state) AR_DEPRECATED( \"For anchors hosted or resolved using async cloud anchor APIs, the \" \"state can be obtained from the callback or future object. This \" \"function will always return AR_CLOUD_ANCHOR_STATE_NONE except for \" \"anchors created using the deprecated functions \" \"ArSession_resolveAndAcquireNewCloudAnchor, \" \"ArSession_hostAndAcquireNewCloudAnchor, and \" \"ArSession_hostAndAcquireNewCloudAnchorWithTtl.\")"
  },
  {
    "label": "ArTrackableList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackableList_create(const ArSession *session, ArTrackableList **out_trackable_list)"
  },
  {
    "label": "ArTrackableList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackableList_destroy(ArTrackableList *trackable_list)"
  },
  {
    "label": "ArTrackableList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackableList_getSize(const ArSession *session, const ArTrackableList *trackable_list, int32_t *out_size)"
  },
  {
    "label": "ArTrackableList_acquireItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackableList_acquireItem(const ArSession *session, const ArTrackableList *trackable_list, int32_t index, ArTrackable **out_trackable)"
  },
  {
    "label": "ArTrackable_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackable_release(ArTrackable *trackable)"
  },
  {
    "label": "ArTrackable_getType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackable_getType(const ArSession *session, const ArTrackable *trackable, ArTrackableType *out_trackable_type)"
  },
  {
    "label": "ArTrackable_getTrackingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackable_getTrackingState(const ArSession *session, const ArTrackable *trackable, ArTrackingState *out_tracking_state)"
  },
  {
    "label": "ArTrackable_acquireNewAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArTrackable_acquireNewAnchor(ArSession *session, ArTrackable *trackable, ArPose *pose, ArAnchor **out_anchor)"
  },
  {
    "label": "ArTrackable_getAnchors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArTrackable_getAnchors(const ArSession *session, const ArTrackable *trackable, ArAnchorList *out_anchor_list)"
  },
  {
    "label": "ArPlane_acquireSubsumedBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_acquireSubsumedBy(const ArSession *session, const ArPlane *plane, ArPlane **out_subsumed_by)"
  },
  {
    "label": "ArPlane_getType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getType(const ArSession *session, const ArPlane *plane, ArPlaneType *out_plane_type)"
  },
  {
    "label": "ArPlane_getCenterPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getCenterPose(const ArSession *session, const ArPlane *plane, ArPose *out_pose)"
  },
  {
    "label": "ArPlane_getExtentX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getExtentX(const ArSession *session, const ArPlane *plane, float *out_extent_x)"
  },
  {
    "label": "ArPlane_getExtentZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getExtentZ(const ArSession *session, const ArPlane *plane, float *out_extent_z)"
  },
  {
    "label": "ArPlane_getPolygonSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getPolygonSize(const ArSession *session, const ArPlane *plane, int32_t *out_polygon_size)"
  },
  {
    "label": "ArPlane_getPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_getPolygon(const ArSession *session, const ArPlane *plane, float *out_polygon_xz)"
  },
  {
    "label": "ArPlane_isPoseInExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_isPoseInExtents(const ArSession *session, const ArPlane *plane, const ArPose *pose, int32_t *out_pose_in_extents)"
  },
  {
    "label": "ArPlane_isPoseInPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPlane_isPoseInPolygon(const ArSession *session, const ArPlane *plane, const ArPose *pose, int32_t *out_pose_in_polygon)"
  },
  {
    "label": "ArPoint_getPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPoint_getPose(const ArSession *session, const ArPoint *point, ArPose *out_pose)"
  },
  {
    "label": "ArPoint_getOrientationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPoint_getOrientationMode(const ArSession *session, const ArPoint *point, ArPointOrientationMode *out_orientation_mode)"
  },
  {
    "label": "ArInstantPlacementPoint_getPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArInstantPlacementPoint_getPose(const ArSession *session, const ArInstantPlacementPoint *instant_placement_point, ArPose *out_pose)"
  },
  {
    "label": "ArInstantPlacementPoint_getTrackingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArInstantPlacementPoint_getTrackingMethod(const ArSession *session, const ArInstantPlacementPoint *instant_placement_point, ArInstantPlacementPointTrackingMethod *out_tracking_method)"
  },
  {
    "label": "ArAugmentedImage_getCenterPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_getCenterPose(const ArSession *session, const ArAugmentedImage *augmented_image, ArPose *out_pose)"
  },
  {
    "label": "ArAugmentedImage_getExtentX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_getExtentX(const ArSession *session, const ArAugmentedImage *augmented_image, float *out_extent_x)"
  },
  {
    "label": "ArAugmentedImage_getExtentZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_getExtentZ(const ArSession *session, const ArAugmentedImage *augmented_image, float *out_extent_z)"
  },
  {
    "label": "ArAugmentedImage_getIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_getIndex(const ArSession *session, const ArAugmentedImage *augmented_image, int32_t *out_index)"
  },
  {
    "label": "ArAugmentedImage_acquireName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_acquireName(const ArSession *session, const ArAugmentedImage *augmented_image, char **out_augmented_image_name)"
  },
  {
    "label": "ArAugmentedImage_getTrackingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImage_getTrackingMethod(const ArSession *session, const ArAugmentedImage *image, ArAugmentedImageTrackingMethod *out_tracking_method)"
  },
  {
    "label": "ArAugmentedFace_getMeshVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getMeshVertices(const ArSession *session, const ArAugmentedFace *face, const float **out_vertices, int32_t *out_number_of_vertices)"
  },
  {
    "label": "ArAugmentedFace_getMeshNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getMeshNormals(const ArSession *session, const ArAugmentedFace *face, const float **out_normals, int32_t *out_number_of_normals)"
  },
  {
    "label": "ArAugmentedFace_getMeshTextureCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getMeshTextureCoordinates(const ArSession *session, const ArAugmentedFace *face, const float **out_texture_coordinates, int32_t *out_number_of_texture_coordinates)"
  },
  {
    "label": "ArAugmentedFace_getMeshTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getMeshTriangleIndices(const ArSession *session, const ArAugmentedFace *face, const uint16_t **out_triangle_indices, int32_t *out_number_of_triangles)"
  },
  {
    "label": "ArAugmentedFace_getRegionPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getRegionPose(const ArSession *session, const ArAugmentedFace *face, const ArAugmentedFaceRegionType region_type, ArPose *out_pose)"
  },
  {
    "label": "ArAugmentedFace_getCenterPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedFace_getCenterPose(const ArSession *session, const ArAugmentedFace *face, ArPose *out_pose)"
  },
  {
    "label": "ArAugmentedImageDatabase_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImageDatabase_create(const ArSession *session, ArAugmentedImageDatabase **out_augmented_image_database)"
  },
  {
    "label": "ArAugmentedImageDatabase_deserialize()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArAugmentedImageDatabase_deserialize(const ArSession *session, const uint8_t *database_raw_bytes, int64_t database_raw_bytes_size, ArAugmentedImageDatabase **out_augmented_image_database)"
  },
  {
    "label": "ArAugmentedImageDatabase_serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImageDatabase_serialize(const ArSession *session, const ArAugmentedImageDatabase *augmented_image_database, uint8_t **out_image_database_raw_bytes, int64_t *out_image_database_raw_bytes_size)"
  },
  {
    "label": "ArAugmentedImageDatabase_addImage()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArAugmentedImageDatabase_addImage(const ArSession *session, ArAugmentedImageDatabase *augmented_image_database, const char *image_name, const uint8_t *image_grayscale_pixels, int32_t image_width_in_pixels, int32_t image_height_in_pixels, int32_t image_stride_in_pixels, int32_t *out_index)"
  },
  {
    "label": "ArAugmentedImageDatabase_addImageWithPhysicalSize()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArAugmentedImageDatabase_addImageWithPhysicalSize(const ArSession *session, ArAugmentedImageDatabase *augmented_image_database, const char *image_name, const uint8_t *image_grayscale_pixels, int32_t image_width_in_pixels, int32_t image_height_in_pixels, int32_t image_stride_in_pixels, float image_width_in_meters, int32_t *out_index)"
  },
  {
    "label": "ArAugmentedImageDatabase_getNumImages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImageDatabase_getNumImages(const ArSession *session, const ArAugmentedImageDatabase *augmented_image_database, int32_t *out_number_of_images)"
  },
  {
    "label": "ArAugmentedImageDatabase_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAugmentedImageDatabase_destroy(ArAugmentedImageDatabase *augmented_image_database)"
  },
  {
    "label": "ArHitResultList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResultList_create(const ArSession *session, ArHitResultList **out_hit_result_list)"
  },
  {
    "label": "ArHitResultList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResultList_destroy(ArHitResultList *hit_result_list)"
  },
  {
    "label": "ArHitResultList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResultList_getSize(const ArSession *session, const ArHitResultList *hit_result_list, int32_t *out_size)"
  },
  {
    "label": "ArHitResultList_getItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResultList_getItem(const ArSession *session, const ArHitResultList *hit_result_list, int32_t index, ArHitResult *out_hit_result)"
  },
  {
    "label": "ArHitResult_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResult_create(const ArSession *session, ArHitResult **out_hit_result)"
  },
  {
    "label": "ArHitResult_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResult_destroy(ArHitResult *hit_result)"
  },
  {
    "label": "ArHitResult_getDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResult_getDistance(const ArSession *session, const ArHitResult *hit_result, float *out_distance)"
  },
  {
    "label": "ArHitResult_getHitPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResult_getHitPose(const ArSession *session, const ArHitResult *hit_result, ArPose *out_pose)"
  },
  {
    "label": "ArHitResult_acquireTrackable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArHitResult_acquireTrackable(const ArSession *session, const ArHitResult *hit_result, ArTrackable **out_trackable)"
  },
  {
    "label": "ArHitResult_acquireNewAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArHitResult_acquireNewAnchor(ArSession *session, ArHitResult *hit_result, ArAnchor **out_anchor)"
  },
  {
    "label": "ArString_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArString_release(char *str)"
  },
  {
    "label": "ArByteArray_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArByteArray_release(uint8_t *byte_array)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArEarthState)"
  },
  {
    "label": "ArEarth_getEarthState()",
    "kind": "Method",
    "detail": "Function (AR_EARTH_STATE_ENABLED = 0,AR_EARTH_STATE_ERROR_INTERNAL = - 1,AR_EARTH_STATE_ERROR_GEOSPATIAL_MODE_DISABLED = - 2,AR_EARTH_STATE_ERROR_NOT_AUTHORIZED = - 3,AR_EARTH_STATE_ERROR_RESOURCE_EXHAUSTED = - 4,AR_EARTH_STATE_ERROR_APK_VERSION_TOO_OLD = - 5,} ; void)",
    "insertText": "ArEarth_getEarthState(const ArSession *session, const ArEarth *earth, ArEarthState *out_state)"
  },
  {
    "label": "ArEarth_getCameraGeospatialPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArEarth_getCameraGeospatialPose(const ArSession *session, const ArEarth *earth, ArGeospatialPose *out_camera_geospatial_pose)"
  },
  {
    "label": "ArEarth_getGeospatialPose()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_getGeospatialPose(const ArSession *session, const ArEarth *earth, const ArPose *pose, ArGeospatialPose *out_geospatial_pose)"
  },
  {
    "label": "ArEarth_getPose()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_getPose(const ArSession *session, const ArEarth *earth, double latitude, double longitude, double altitude, const float *eus_quaternion_4, ArPose *out_pose)"
  },
  {
    "label": "ArEarth_acquireNewAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_acquireNewAnchor(ArSession *session, ArEarth *earth, double latitude, double longitude, double altitude, const float *eus_quaternion_4, ArAnchor **out_anchor)"
  },
  {
    "label": "ArEarth_resolveAndAcquireNewAnchorOnTerrain()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_resolveAndAcquireNewAnchorOnTerrain(ArSession *session, ArEarth *earth, double latitude, double longitude, double altitude_above_terrain, const float *eus_quaternion_4, ArAnchor **out_anchor) AR_DEPRECATED(\"Use ArEarth_resolveAnchorOnTerrainAsync instead.\")"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArTerrainAnchorState)"
  },
  {
    "label": "AR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (AR_TERRAIN_ANCHOR_STATE_NONE = 0,AR_TERRAIN_ANCHOR_STATE_TASK_IN_PROGRESS)",
    "insertText": "AR_DEPRECATED(\"Not returned by async APIs - replaced by \" \"AR_FUTURE_STATE_PENDING.\")"
  },
  {
    "label": "ArAnchor_getTerrainAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getTerrainAnchorState(const ArSession *session, const ArAnchor *anchor, ArTerrainAnchorState *out_state) AR_DEPRECATED( \"For anchors resolved using async terrain anchor APIs, the state can \" \"be obtained from the callback or future object.\")"
  },
  {
    "label": "ArResolveAnchorOnTerrainFuture_acquireResultAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArResolveAnchorOnTerrainFuture_acquireResultAnchor(const ArSession *session, const ArResolveAnchorOnTerrainFuture *future, ArAnchor **out_anchor)"
  },
  {
    "label": "ArResolveAnchorOnTerrainFuture_getResultTerrainAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArResolveAnchorOnTerrainFuture_getResultTerrainAnchorState(const ArSession *session, const ArResolveAnchorOnTerrainFuture *future, ArTerrainAnchorState *out_terrain_anchor_state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ArResolveAnchorOnTerrainCallback)( void *context, ArAnchor *anchor, ArTerrainAnchorState terrain_anchor_state)"
  },
  {
    "label": "ArEarth_resolveAnchorOnTerrainAsync()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_resolveAnchorOnTerrainAsync(ArSession *session, ArEarth *earth, double latitude, double longitude, double altitude_above_terrain, const float *eus_quaternion_4, void *context, ArResolveAnchorOnTerrainCallback callback, ArResolveAnchorOnTerrainFuture **out_future)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArRooftopAnchorState)"
  },
  {
    "label": "ArResolveAnchorOnRooftopFuture_acquireResultAnchor()",
    "kind": "Method",
    "detail": "Function (AR_ROOFTOP_ANCHOR_STATE_NONE = 0,AR_ROOFTOP_ANCHOR_STATE_SUCCESS = 1,AR_ROOFTOP_ANCHOR_STATE_ERROR_INTERNAL = - 1,AR_ROOFTOP_ANCHOR_STATE_ERROR_NOT_AUTHORIZED = - 2,AR_ROOFTOP_ANCHOR_STATE_ERROR_UNSUPPORTED_LOCATION = - 3,} ; void)",
    "insertText": "ArResolveAnchorOnRooftopFuture_acquireResultAnchor(const ArSession *session, const ArResolveAnchorOnRooftopFuture *future, ArAnchor **out_anchor)"
  },
  {
    "label": "ArResolveAnchorOnRooftopFuture_getResultRooftopAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArResolveAnchorOnRooftopFuture_getResultRooftopAnchorState(const ArSession *session, const ArResolveAnchorOnRooftopFuture *future, ArRooftopAnchorState *out_rooftop_anchor_state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ArResolveAnchorOnRooftopCallback)( void *context, ArAnchor *anchor, ArRooftopAnchorState rooftop_anchor_state)"
  },
  {
    "label": "ArEarth_resolveAnchorOnRooftopAsync()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArEarth_resolveAnchorOnRooftopAsync(ArSession *session, ArEarth *earth, double latitude, double longitude, double altitude_above_rooftop, const float *eus_quaternion_4, void *context, ArResolveAnchorOnRooftopCallback callback, ArResolveAnchorOnRooftopFuture **out_future)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AR_DEFINE_ENUM(ArVpsAvailability)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (AR_VPS_AVAILABILITY_UNKNOWN = 0,AR_VPS_AVAILABILITY_AVAILABLE = 1,AR_VPS_AVAILABILITY_UNAVAILABLE = 2,AR_VPS_AVAILABILITY_ERROR_INTERNAL = - 1,AR_VPS_AVAILABILITY_ERROR_NETWORK_CONNECTION = - 2,AR_VPS_AVAILABILITY_ERROR_NOT_AUTHORIZED = - 3,AR_VPS_AVAILABILITY_ERROR_RESOURCE_EXHAUSTED = - 4,} ; typedef)",
    "insertText": "void(*ArVpsAvailabilityCallback)(void *context, ArVpsAvailability availability)"
  },
  {
    "label": "AR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (typedef ArVpsAvailabilityCallback ArCheckVpsAvailabilityCallback)",
    "insertText": "AR_DEPRECATED(\"Deprecated in release 1.37. \" \"Use ArVpsAvailabilityCallback instead.\")"
  },
  {
    "label": "ArAsFuture()",
    "kind": "Method",
    "detail": "Function (typedef struct ArVpsAvailabilityFuture_ ArVpsAvailabilityFuture ; # ifdef __cplusplus ArFuture*)",
    "insertText": "ArAsFuture(ArVpsAvailabilityFuture *future)"
  },
  {
    "label": "ArSession_checkVpsAvailabilityAsync()",
    "kind": "Method",
    "detail": "Function (} # endif ArStatus)",
    "insertText": "ArSession_checkVpsAvailabilityAsync(ArSession *session, double latitude_degrees, double longitude_degrees, void *context, ArVpsAvailabilityCallback callback, ArVpsAvailabilityFuture **out_future)"
  },
  {
    "label": "ArVpsAvailabilityFuture_getState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArVpsAvailabilityFuture_getState(const ArSession *session, const ArVpsAvailabilityFuture *future, ArFutureState *out_state) AR_DEPRECATED(\"Deprecated in release 1.37. Use ArFuture_getState instead.\")"
  },
  {
    "label": "ArVpsAvailabilityFuture_getResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArVpsAvailabilityFuture_getResult(const ArSession *session, const ArVpsAvailabilityFuture *future, ArVpsAvailability *out_result_availability)"
  },
  {
    "label": "ArVpsAvailabilityFuture_cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArVpsAvailabilityFuture_cancel(const ArSession *session, ArVpsAvailabilityFuture *future, int32_t *out_was_cancelled) AR_DEPRECATED(\"Deprecated in release 1.37. Use ArFuture_cancel instead.\")"
  },
  {
    "label": "ArVpsAvailabilityFuture_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArVpsAvailabilityFuture_release(ArVpsAvailabilityFuture *future) AR_DEPRECATED(\"Deprecated in release 1.37. Use ArFuture_release instead.\")"
  },
  {
    "label": "ArGeospatialPose_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_create(const ArSession *session, ArGeospatialPose **out_pose)"
  },
  {
    "label": "ArGeospatialPose_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_destroy(ArGeospatialPose *pose)"
  },
  {
    "label": "ArGeospatialPose_getLatitudeLongitude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getLatitudeLongitude(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_latitude_degrees, double *out_longitude_degrees)"
  },
  {
    "label": "ArGeospatialPose_getHorizontalAccuracy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getHorizontalAccuracy(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_horizontal_accuracy_meters)"
  },
  {
    "label": "ArGeospatialPose_getAltitude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getAltitude(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_altitude_meters)"
  },
  {
    "label": "ArGeospatialPose_getVerticalAccuracy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getVerticalAccuracy(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_vertical_accuracy_meters)"
  },
  {
    "label": "ArGeospatialPose_getHeading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getHeading(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_heading_degrees) AR_DEPRECATED(\"Deprecated in release 1.35.0. Please use \" \"ArGeospatialPose_getEastUpSouthQuaternion instead.\")"
  },
  {
    "label": "ArGeospatialPose_getHeadingAccuracy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getHeadingAccuracy(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_heading_accuracy_degrees) AR_DEPRECATED(\"Deprecated in release 1.35.0. Please use \" \"ArGeospatialPose_getOrientationYawAccuracy instead.\")"
  },
  {
    "label": "ArGeospatialPose_getEastUpSouthQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getEastUpSouthQuaternion(const ArSession *session, const ArGeospatialPose *geospatial_pose, float *out_quaternion_4)"
  },
  {
    "label": "ArGeospatialPose_getOrientationYawAccuracy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArGeospatialPose_getOrientationYawAccuracy(const ArSession *session, const ArGeospatialPose *geospatial_pose, double *out_orientation_yaw_accuracy_degrees)"
  },
  {
    "label": "ArStreetscapeGeometry_getMeshPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArStreetscapeGeometry_getMeshPose(const ArSession *session, const ArStreetscapeGeometry *streetscape_geometry, ArPose *out_pose)"
  },
  {
    "label": "ArStreetscapeGeometry_getType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArStreetscapeGeometry_getType(const ArSession *session, const ArStreetscapeGeometry *streetscape_geometry, ArStreetscapeGeometryType *out_type)"
  },
  {
    "label": "ArStreetscapeGeometry_getQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArStreetscapeGeometry_getQuality(const ArSession *session, const ArStreetscapeGeometry *streetscape_geometry, ArStreetscapeGeometryQuality *out_quality)"
  },
  {
    "label": "ArStreetscapeGeometry_acquireMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArStreetscapeGeometry_acquireMesh(const ArSession *session, const ArStreetscapeGeometry *streetscape_geometry, ArMesh **out_mesh)"
  },
  {
    "label": "ArImageMetadata_getAllKeys()",
    "kind": "Method",
    "detail": "Function (typedef struct ArImageMetadata_rational { int32_t numerator ; int32_t denominator ; } ArImageMetadata_rational ; typedef struct ArImageMetadata_const_entry { uint32_t tag ; uint8_t type ; uint32_t count ; union { const uint8_t* u8 ; const int32_t* i32 ; const float* f ; const int64_t* i64 ; const double* d ; const ArImageMetadata_rational* r ; } data ; } ArImageMetadata_const_entry ; void)",
    "insertText": "ArImageMetadata_getAllKeys(const ArSession *session, const ArImageMetadata *image_metadata, int32_t *out_number_of_tags, const uint32_t **out_tags)"
  },
  {
    "label": "ArImageMetadata_getConstEntry()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArImageMetadata_getConstEntry(const ArSession *session, const ArImageMetadata *image_metadata, uint32_t tag, ArImageMetadata_const_entry *out_metadata_entry)"
  }
]