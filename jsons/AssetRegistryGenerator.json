[
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "IChunkDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDataGenerator"
  },
  {
    "label": "UChunkDependencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChunkDependencyInfo"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FChunkDependencyTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkDependencyTreeNode"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FAssetRegistryMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryMPCollector"
  },
  {
    "label": "FAssetRegistryPackageMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryPackageMessage"
  },
  {
    "label": "FCookSandbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookSandbox"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAssetRegistryGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryGenerator"
  },
  {
    "label": "FComputeDifferenceOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeDifferenceOptions"
  },
  {
    "label": "FGeneratorPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratorPackageInfo"
  },
  {
    "label": "EDifference",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDifference"
  },
  {
    "label": "FAssetRegistryDifference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryDifference"
  },
  {
    "label": "FGetShortestReferenceChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetShortestReferenceChain"
  },
  {
    "label": "FIterativelySkippedPackageUpdateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterativelySkippedPackageUpdateData"
  },
  {
    "label": "IAssetRegistryReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistryReporter"
  },
  {
    "label": "FAssetRegistryReporterLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReporterLocal"
  },
  {
    "label": "FAssetRegistryReporterRemote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReporterRemote"
  },
  {
    "label": "FAssetRegistryPackageMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryPackageMessage"
  },
  {
    "label": "FAssetRegistryMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryMPCollector"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TArray<FName> &StartupPackages, bool bInitializeFromExisting)"
  },
  {
    "label": "CloneGlobalAssetRegistryFilteredByPreviousState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneGlobalAssetRegistryFilteredByPreviousState(const FAssetRegistryState& PreviousState)"
  },
  {
    "label": "SetPreviousAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviousAssetRegistry(TUniquePtr<FAssetRegistryState>&& PreviousState)"
  },
  {
    "label": "ComputePackageDifferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePackageDifferences(const FComputeDifferenceOptions& Options, const FAssetRegistryState& PreviousState, \n\t\tFAssetRegistryDifference& OutDifference)"
  },
  {
    "label": "ComputePackageRemovals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePackageRemovals(const FAssetRegistryState& PreviousState, TArray<FName>& OutRemovedPackages,\n\t\tTMap<FName, FGeneratorPackageInfo>& OutGeneratorPackages, int32& OutNumNeverCookPlaceHolderPackages)"
  },
  {
    "label": "FinalizeChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeChunkIDs(const TSet<FName>& CookedPackages, const TSet<FName>& DevelopmentOnlyPackages,\n\t\tUE::Cook::FCookSandbox& InSandboxFile, bool bGenerateStreamingInstallManifest)"
  },
  {
    "label": "RegisterChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterChunkDataGenerator(TSharedRef<IChunkDataGenerator> InChunkDataGenerator)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(const TSet<FName>& InCookedPackages)"
  },
  {
    "label": "PostSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSave()"
  },
  {
    "label": "CleanManifestDirectories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanManifestDirectories(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "SaveManifests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifests(UE::Cook::FCookSandbox& InSandboxFile, int64 InOverrideChunkSize = 0,\n\t\tconst TCHAR* InManifestSubDir = nullptr)"
  },
  {
    "label": "SaveAssetRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAssetRegistry(const FString& SandboxPath, bool bSerializeDevelopmentAssetRegistry, bool bForceNoFilterAssets, uint64& OutDevelopmentAssetRegistryHash)"
  },
  {
    "label": "WriteCookerOpenOrder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCookerOpenOrder(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "AddAssetToFileOrderRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetToFileOrderRecursive(const FName& InPackageName, TArray<FName>& OutFileOrder, TSet<FName>& OutEncounteredNames, const TSet<FName>& InPackageNameSet, const TSet<FName>& InTopLevelAssets)"
  },
  {
    "label": "UpdateAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetRegistryData(FName PackageName, const UPackage* Package,\n\t\tUE::Cook::ECookResult CookResult, FSavePackageResultStruct* SavePackageResult,\n\t\tTOptional<TArray<FAssetData>>&& AssetDatasFromSave,\n\t\tTOptional<FAssetPackageData>&& OverrideAssetPackageData,\n\t\tTOptional<TArray<FAssetDependency>>&& OverridePackageDependencies,\n\t\tUCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "UpdateAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetRegistryData(UE::Cook::FMPCollectorServerMessageContext& Context,\n\t\tUE::Cook::FAssetRegistryPackageMessage&& Message, UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "UpdateAssetManagerDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetManagerDatabase()"
  },
  {
    "label": "UpdateAssetPackageFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAssetPackageFlags(const FName& PackageName, const uint32 PackageFlags)"
  },
  {
    "label": "UpdateKeptPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeptPackages()"
  },
  {
    "label": "SetOverridePackageDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverridePackageDependencies(FName PackageName, TConstArrayView<FAssetDependency> OverridePackageDependencies)"
  },
  {
    "label": "ComputePackageDifferences_IsPackageFileUnchanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePackageDifferences_IsPackageFileUnchanged(const FComputeDifferenceOptions& Options, FName PackageName,\n\t\tconst FAssetPackageData& CurrentPackageData, const FAssetPackageData& PreviousPackageData)"
  },
  {
    "label": "CopyAssetPackageDataForIncrementalCook()",
    "kind": "Method",
    "detail": "Function (FAssetPackageData)",
    "insertText": "CopyAssetPackageDataForIncrementalCook(const FAssetPackageData& Source)"
  },
  {
    "label": "UpdateCollectionAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollectionAssetData()"
  },
  {
    "label": "AddPackageToManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageToManifest(const FString& PackageSandboxPath, FName PackageName, int32 ChunkId)"
  },
  {
    "label": "RemovePackageFromManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePackageFromManifest(FName PackageName, int32 ChunkId)"
  },
  {
    "label": "FixupPackageDependenciesForChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupPackageDependenciesForChunks(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "InjectEncryptionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectEncryptionData(FAssetRegistryState& TargetState)"
  },
  {
    "label": "AddPackageToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageToChunk(FChunkPackageSet& ThisPackageSet, FName InPkgName,\n\t\tconst FString& InSandboxFile, int32 PakchunkIndex, UE::Cook::FCookSandbox& SandboxPlatformFile)"
  },
  {
    "label": "GetExistingPackageChunkAssignments()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetExistingPackageChunkAssignments(FName PackageFName)"
  },
  {
    "label": "GetExplicitChunkIDs()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetExplicitChunkIDs(const FName& PackageFName)"
  },
  {
    "label": "CalculateChunkIdsAndAssignToManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateChunkIdsAndAssignToManifest(const FName& PackageFName, const FString& PackagePathName,\n\t\tconst FString& SandboxFilename, const FString& LastLoadedMapName, UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingInstallManifest(int64 InOverrideChunkSize, const TCHAR* InManifestSubDir,\n\t\tUE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "GatherAllPackageDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherAllPackageDependencies(FName PackageName, TArray<FName>& DependentPackageNames)"
  },
  {
    "label": "GetPackageDependencyChain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageDependencyChain(FName SourcePackage, FName TargetPackage, TSet<FName>& VisitedPackages, TArray<FName>& OutDependencyChain)"
  },
  {
    "label": "GetPackageDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageDependencies(FName PackageName, TArray<FName>& DependentPackageNames, UE::AssetRegistry::EDependencyQuery InDependencyQuery)"
  },
  {
    "label": "GenerateAssetChunkInformationCSV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateAssetChunkInformationCSV(const FString& OutputPath, bool bWriteIndividualFiles = false)"
  },
  {
    "label": "SubtractParentChunkPackagesFromChildChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractParentChunkPackagesFromChildChunks(const FChunkDependencyTreeNode& Node,\n\t\tconst TSet<FName>& CumulativeParentPackages, TArray<TArray<FName>>& OutPackagesMovedBetweenChunks)"
  },
  {
    "label": "CheckChunkAssetsAreNotInChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckChunkAssetsAreNotInChild(const FChunkDependencyTreeNode& Node)"
  },
  {
    "label": "CreateOrEmptyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrEmptyCollection(FName CollectionName)"
  },
  {
    "label": "WriteCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCollection(FName CollectionName, const TArray<FName>& PackageNames)"
  },
  {
    "label": "InitializeChunkIdPakchunkIndexMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChunkIdPakchunkIndexMapping()"
  },
  {
    "label": "GetGeneratorPackage()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGeneratorPackage(FName PackageName, const FAssetRegistryState& InState)"
  },
  {
    "label": "FAssetRegistryReporterRemote()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAssetRegistryReporterRemote(FCookWorkerClient& InClient, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"AssetRegistryPackageMessage\")"
  },
  {
    "label": "FAssetRegistryMPCollector()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAssetRegistryMPCollector(UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"AssetRegistry\")"
  }
]