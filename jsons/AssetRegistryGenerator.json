[
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "IChunkDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDataGenerator"
  },
  {
    "label": "UChunkDependencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChunkDependencyInfo"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FChunkDependencyTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkDependencyTreeNode"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FAssetRegistryMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryMPCollector"
  },
  {
    "label": "FAssetRegistryPackageMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryPackageMessage"
  },
  {
    "label": "FCookSandbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookSandbox"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FAssetRegistryGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryGenerator"
  },
  {
    "label": "FComputeDifferenceOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeDifferenceOptions"
  },
  {
    "label": "FGeneratorPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratorPackageInfo"
  },
  {
    "label": "EDifference",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDifference"
  },
  {
    "label": "FAssetRegistryDifference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryDifference"
  },
  {
    "label": "FGetShortestReferenceChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetShortestReferenceChain"
  },
  {
    "label": "FIterativelySkippedPackageUpdateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterativelySkippedPackageUpdateData"
  },
  {
    "label": "IAssetRegistryReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistryReporter"
  },
  {
    "label": "FAssetRegistryReporterLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReporterLocal"
  },
  {
    "label": "FAssetRegistryReporterRemote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReporterRemote"
  },
  {
    "label": "FAssetRegistryGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" AssetRegistry / AssetRegistryState . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Cooker / MPCollector . h \" # include \" Misc / AssetRegistryInterface . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectHash . h \" class IAssetRegistry ; class ITargetPlatform ; class IChunkDataGenerator ; class UChunkDependencyInfo ; class UCookOnTheFlyServer ; struct FChunkDependencyTreeNode ; struct FSoftObjectPath ; namespace UE::Cook { class FAssetRegistryMPCollector ; } namespace UE::Cook { class FAssetRegistryPackageMessage ; } namespace UE::Cook { class FCookSandbox ; } namespace UE::Cook { class FCookWorkerClient ; } namespace UE::Cook { struct FPackageData ; } class FAssetRegistryGenerator { public :)",
    "insertText": "FAssetRegistryGenerator(const ITargetPlatform* InPlatform)"
  },
  {
    "label": "FAssetRegistryGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetRegistryGenerator()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TArray<FName> &StartupPackages, bool bInitializeFromExisting)"
  },
  {
    "label": "CloneGlobalAssetRegistryFilteredByPreviousState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneGlobalAssetRegistryFilteredByPreviousState(const FAssetRegistryState& PreviousState)"
  },
  {
    "label": "GetTargetPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "GetTargetPlatform()"
  },
  {
    "label": "ComputePackageDifferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePackageDifferences(const FComputeDifferenceOptions& Options, const FAssetRegistryState& PreviousState, FAssetRegistryDifference& OutDifference)"
  },
  {
    "label": "ComputePackageRemovals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePackageRemovals(const FAssetRegistryState& PreviousState, TArray<FName>& OutRemovedPackages, TMap<FName, FGeneratorPackageInfo>& OutGeneratorPackages, int32& OutNumNeverCookPlaceHolderPackages)"
  },
  {
    "label": "FinalizeChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeChunkIDs(const TSet<FName>& CookedPackages, const TSet<FName>& DevelopmentOnlyPackages, UE::Cook::FCookSandbox& InSandboxFile, bool bGenerateStreamingInstallManifest)"
  },
  {
    "label": "RegisterChunkDataGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterChunkDataGenerator(TSharedRef<IChunkDataGenerator> InChunkDataGenerator)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(const TSet<FName>& InCookedPackages)"
  },
  {
    "label": "PostSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSave()"
  },
  {
    "label": "ContainsMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsMap(const FName& PackageName)"
  },
  {
    "label": "GetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (FAssetPackageData*)",
    "insertText": "GetAssetPackageData(const FName& PackageName)"
  },
  {
    "label": "CleanManifestDirectories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanManifestDirectories(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "SaveManifests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifests(UE::Cook::FCookSandbox& InSandboxFile, int64 InOverrideChunkSize = 0, const TCHAR* InManifestSubDir = nullptr)"
  },
  {
    "label": "SaveAssetRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveAssetRegistry(const FString& SandboxPath, bool bSerializeDevelopmentAssetRegistry, bool bForceNoFilterAssets, uint64& OutDevelopmentAssetRegistryHash)"
  },
  {
    "label": "WriteCookerOpenOrder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCookerOpenOrder(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "AddAssetToFileOrderRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetToFileOrderRecursive(const FName& InPackageName, TArray<FName>& OutFileOrder, TSet<FName>& OutEncounteredNames, const TSet<FName>& InPackageNameSet, const TSet<FName>& InTopLevelAssets)"
  },
  {
    "label": "GetPakchunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPakchunkIndex(int32 ChunkId)"
  },
  {
    "label": "GetChunkAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChunkAssignments(TArray<TSet<FName>>& OutAssignments)"
  },
  {
    "label": "UpdateAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetRegistryData(FName PackageName, const UPackage* Package, UE::Cook::ECookResult CookResult, FSavePackageResultStruct* SavePackageResult, TOptional<TArray<FAssetData>>&& AssetDatasFromSave, TOptional<FAssetPackageData>&& OverrideAssetPackageData, TOptional<TArray<FAssetDependency>>&& OverridePackageDependencies, UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "UpdateAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetRegistryData(UE::Cook::FMPCollectorServerMessageContext& Context, UE::Cook::FAssetRegistryPackageMessage&& Message, UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "UpdateAssetManagerDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetManagerDatabase()"
  },
  {
    "label": "UpdateAssetPackageFlags()",
    "kind": "Method",
    "detail": "Function (private : class FGetShortestReferenceChain ; bool)",
    "insertText": "UpdateAssetPackageFlags(const FName& PackageName, const uint32 PackageFlags)"
  },
  {
    "label": "UpdateKeptPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeptPackages()"
  },
  {
    "label": "SetOverridePackageDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverridePackageDependencies(FName PackageName, TConstArrayView<FAssetDependency> OverridePackageDependencies)"
  },
  {
    "label": "ComputePackageDifferences_IsPackageFileUnchanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePackageDifferences_IsPackageFileUnchanged(const FComputeDifferenceOptions& Options, FName PackageName, const FAssetPackageData& CurrentPackageData, const FAssetPackageData& PreviousPackageData)"
  },
  {
    "label": "CopyAssetPackageDataForIncrementalCook()",
    "kind": "Method",
    "detail": "Function (FAssetPackageData)",
    "insertText": "CopyAssetPackageDataForIncrementalCook(const FAssetPackageData& Source)"
  },
  {
    "label": "UpdateCollectionAssetData()",
    "kind": "Method",
    "detail": "Function (FAssetRegistryState State ; struct FIterativelySkippedPackageUpdateData { TArray<FAssetData> AssetDatas ; FAssetPackageData PackageData ; TArray<FAssetDependency> PackageDependencies ; TArray<FAssetDependency> PackageReferencers ; } ; TMap<FName,FIterativelySkippedPackageUpdateData> PreviousPackagesToUpdate ; TSet<FName> StartupPackages ; TSet<FName> CookedPackages ; TSet<FName> DevelopmentOnlyPackages ; TArray<FName> KeptPackages ; typedef TMap<FName,FString> FChunkPackageSet ; IAssetRegistry& AssetRegistry ; const ITargetPlatform* TargetPlatform ; TSet<FName> AssetsLoadedWithLastPackage ; TMap<FName,TArray<int32>> ExplicitChunkIDs ; TSet<FName> PackagesContainingMaps ; bool bGenerateChunks ; bool bClonedGlobalAssetRegistry ; int32 HighestChunkId ; TArray<TUniquePtr<FChunkPackageSet>> ChunkManifests ; FChunkPackageSet UnassignedPackageSet ; FChunkPackageSet AllCookedPackageSet ; TArray<TUniquePtr<FChunkPackageSet>> FinalChunkManifests ; TArray<TSharedRef<IChunkDataGenerator>> ChunkDataGenerators ; UChunkDependencyInfo& DependencyInfo ; UE::AssetRegistry::EDependencyQuery DependencyQuery ; TMap<int32,int32> ChunkIdPakchunkIndexMapping ; void)",
    "insertText": "UpdateCollectionAssetData()"
  },
  {
    "label": "AddPackageToManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageToManifest(const FString& PackageSandboxPath, FName PackageName, int32 ChunkId)"
  },
  {
    "label": "RemovePackageFromManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePackageFromManifest(FName PackageName, int32 ChunkId)"
  },
  {
    "label": "FixupPackageDependenciesForChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupPackageDependenciesForChunks(UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "InjectEncryptionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectEncryptionData(FAssetRegistryState& TargetState)"
  },
  {
    "label": "AddPackageToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageToChunk(FChunkPackageSet& ThisPackageSet, FName InPkgName, const FString& InSandboxFile, int32 PakchunkIndex, UE::Cook::FCookSandbox& SandboxPlatformFile)"
  },
  {
    "label": "GetChunkManifestDirectoryForPlatform()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetChunkManifestDirectoryForPlatform(const FString& Platform, UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "GetMaxChunkSizePerPlatform()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMaxChunkSizePerPlatform(const ITargetPlatform* Platform)"
  },
  {
    "label": "GetExistingPackageChunkAssignments()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetExistingPackageChunkAssignments(FName PackageFName)"
  },
  {
    "label": "GetExplicitChunkIDs()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetExplicitChunkIDs(const FName& PackageFName)"
  },
  {
    "label": "CalculateChunkIdsAndAssignToManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateChunkIdsAndAssignToManifest(const FName& PackageFName, const FString& PackagePathName, const FString& SandboxFilename, const FString& LastLoadedMapName, UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "ShouldPlatformGenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPlatformGenerateStreamingInstallManifest(const ITargetPlatform* Platform)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingInstallManifest(int64 InOverrideChunkSize, const TCHAR* InManifestSubDir, UE::Cook::FCookSandbox& InSandboxFile)"
  },
  {
    "label": "GatherAllPackageDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherAllPackageDependencies(FName PackageName, TArray<FName>& DependentPackageNames)"
  },
  {
    "label": "GetPackageDependencyChain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageDependencyChain(FName SourcePackage, FName TargetPackage, TSet<FName>& VisitedPackages, TArray<FName>& OutDependencyChain)"
  },
  {
    "label": "GetPackageDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageDependencies(FName PackageName, TArray<FName>& DependentPackageNames, UE::AssetRegistry::EDependencyQuery InDependencyQuery)"
  },
  {
    "label": "GenerateAssetChunkInformationCSV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateAssetChunkInformationCSV(const FString& OutputPath, bool bWriteIndividualFiles = false)"
  },
  {
    "label": "SubtractParentChunkPackagesFromChildChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractParentChunkPackagesFromChildChunks(const FChunkDependencyTreeNode& Node, const TSet<FName>& CumulativeParentPackages, TArray<TArray<FName>>& OutPackagesMovedBetweenChunks)"
  },
  {
    "label": "CheckChunkAssetsAreNotInChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckChunkAssetsAreNotInChild(const FChunkDependencyTreeNode& Node)"
  },
  {
    "label": "CreateOrEmptyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrEmptyCollection(FName CollectionName)"
  },
  {
    "label": "WriteCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCollection(FName CollectionName, const TArray<FName>& PackageNames)"
  },
  {
    "label": "InitializeChunkIdPakchunkIndexMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChunkIdPakchunkIndexMapping()"
  },
  {
    "label": "GetGeneratorPackage()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGeneratorPackage(FName PackageName, const FAssetRegistryState& InState)"
  },
  {
    "label": "IAssetRegistryReporter()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::Cook { class IAssetRegistryReporter { public : ~)",
    "insertText": "IAssetRegistryReporter()"
  },
  {
    "label": "FAssetRegistryReporterLocal()",
    "kind": "Method",
    "detail": "Function (} ; class FAssetRegistryReporterLocal : public IAssetRegistryReporter { public :)",
    "insertText": "FAssetRegistryReporterLocal(FAssetRegistryGenerator& InGenerator) : Generator(InGenerator)"
  },
  {
    "label": "UpdateAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (Generator .)",
    "insertText": "UpdateAssetRegistryData(PackageName, Package, CookResult, SavePackageResult, MoveTemp(AssetDatasFromSave), MoveTemp(OverrideAssetPackageData), MoveTemp(OverridePackageDependencies), COTFS)"
  },
  {
    "label": "FAssetRegistryReporterRemote()",
    "kind": "Method",
    "detail": "Function (} private : FAssetRegistryGenerator& Generator ; } ; class FAssetRegistryReporterRemote : public IAssetRegistryReporter { public :)",
    "insertText": "FAssetRegistryReporterRemote(FCookWorkerClient& InClient, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (private : FCookWorkerClient& Client ; const ITargetPlatform* TargetPlatform = nullptr ; TMap<FName,FCbObject> PackageUpdateMessages ; FAssetRegistryMPCollector ; } ; class FAssetRegistryPackageMessage : public IMPCollectorMessage { public : void)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbObjectView Object)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "FAssetRegistryMPCollector()",
    "kind": "Method",
    "detail": "Function (} FName PackageName ; const ITargetPlatform* TargetPlatform ; TArray<FAssetData> AssetDatas ; TOptional<FAssetPackageData> OverrideAssetPackageData ; TOptional<TArray<FAssetDependency>> OverridePackageDependencies ; uint32 PackageFlags = 0 ; int64 DiskSize = - 1 ; public : FGuid MessageType ; } ; class FAssetRegistryMPCollector : public UE::Cook::IMPCollector { public :)",
    "insertText": "FAssetRegistryMPCollector(UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "ClientTickPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTickPackage(FMPCollectorClientTickPackageContext& Context)"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReceiveMessage(FMPCollectorServerMessageContext& Context, FCbObjectView Message)"
  }
]