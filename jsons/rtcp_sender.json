[
  {
    "label": "RTCPReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCPReceiver"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "RTCPSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCPSender"
  },
  {
    "label": "Configuration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Configuration"
  },
  {
    "label": "FeedbackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeedbackState"
  },
  {
    "label": "RtcpContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpContext"
  },
  {
    "label": "PacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSender"
  },
  {
    "label": "ReportFlag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReportFlag"
  },
  {
    "label": "FromRtpRtcpConfiguration()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_SENDER_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_SENDER_H_ # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / call / transport . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" modules / remote_bitrate_estimator / include / remote_bitrate_estimator . h \" # include \" modules / rtp_rtcp / include / receive_statistics . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtcp_nack_stats . h \" # include \" modules / rtp_rtcp / source / rtcp_packet . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / compound_packet . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / dlrr . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / loss_notification . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / report_block . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmb_item . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" rtc_base / random . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RTCPReceiver ; class RtcEventLog ; class RTCPSender final { public : struct Configuration { Configuration)",
    "insertText": "FromRtpRtcpConfiguration(const RtpRtcpInterface::Configuration& config)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool audio = false ; uint32_t local_media_ssrc = 0 ; Clock* clock = nullptr ; Transport* outgoing_transport = nullptr ; bool non_sender_rtt_measurement = false ; std::function<)",
    "insertText": "void(TimeDelta)"
  },
  {
    "label": "FeedbackState()",
    "kind": "Method",
    "detail": "Function (RtcEventLog* event_log = nullptr ; absl::optional<TimeDelta> rtcp_report_interval ; ReceiveStatisticsProvider* receive_statistics = nullptr ; RtcpPacketTypeCounterObserver* rtcp_packet_type_counter_observer = nullptr ; } ; struct FeedbackState {)",
    "insertText": "FeedbackState()"
  },
  {
    "label": "FeedbackState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FeedbackState(const FeedbackState&)"
  },
  {
    "label": "FeedbackState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FeedbackState(FeedbackState&&)"
  },
  {
    "label": "RTCPSender()",
    "kind": "Method",
    "detail": "Function (uint32_t packets_sent ; size_t media_bytes_sent ; uint32_t send_bitrate ; uint32_t last_rr_ntp_secs ; uint32_t last_rr_ntp_frac ; uint32_t remote_sr ; std::vector<rtcp::ReceiveTimeInfo> last_xr_rtis ; RTCPReceiver* receiver ; } ;)",
    "insertText": "RTCPSender(Configuration config)"
  },
  {
    "label": "RTCPSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCPSender()"
  },
  {
    "label": "RTCPSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCPSender(const RTCPSender&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTCPSender&)",
    "insertText": "operator(const RTCPSender&)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (RtcpMode)",
    "insertText": "Status() const RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetRTCPStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRTCPStatus(RtcpMode method) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "Sending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sending() const RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetSendingStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendingStatus(const FeedbackState& feedback_state, bool enabled) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetTimestampOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestampOffset(uint32_t timestamp_offset) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetLastRtpTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastRtpTime(uint32_t rtp_timestamp, absl::optional<Timestamp> capture_time, absl::optional<int8_t> payload_type) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetRtpClockRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpClockRate(int8_t payload_type, int rtp_clock_rate_hz) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SSRC()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SSRC()"
  },
  {
    "label": "SetSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSsrc(uint32_t ssrc)"
  },
  {
    "label": "SetRemoteSSRC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSSRC(uint32_t ssrc) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetCNAME()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetCNAME(absl::string_view cName) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "TimeToSendRTCPReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeToSendRTCPReport(bool sendKeyframeBeforeRTP = false) const RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendRTCP(const FeedbackState& feedback_state, RTCPPacketType packetType, int32_t nackSize = 0, const uint16_t* nackList = 0) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SendLossNotification()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendLossNotification(const FeedbackState& feedback_state, uint16_t last_decoded_seq_num, uint16_t last_received_seq_num, bool decodability_flag, bool buffering_allowed) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "UnsetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetRemb() RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "TMMBR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TMMBR() const RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetMaxRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxRtpPacketSize(size_t max_packet_size) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetTmmbn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTmmbn(std::vector<rtcp::TmmbItem> bounding_set) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCsrcs(const std::vector<uint32_t>& csrcs) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(unsigned int target_bitrate) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetVideoBitrateAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoBitrateAllocation(const VideoBitrateAllocation& bitrate) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "SendCombinedRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCombinedRtcpPacket(std::vector<std::unique_ptr<rtcp::RtcpPacket>> rtcp_packets) RTC_LOCKS_EXCLUDED(mutex_rtcp_sender_)"
  },
  {
    "label": "ComputeCompoundRTCPPacket()",
    "kind": "Method",
    "detail": "Function (private : class RtcpContext ; class PacketSender ; absl::optional<int32_t>)",
    "insertText": "ComputeCompoundRTCPPacket(const FeedbackState& feedback_state, RTCPPacketType packet_type, int32_t nack_size, const uint16_t* nack_list, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "PrepareReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareReport(const FeedbackState& feedback_state) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "CreateReportBlocks()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::ReportBlock>)",
    "insertText": "CreateReportBlocks(const FeedbackState& feedback_state) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildSR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSR(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildRR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRR(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildSDES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSDES(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildPLI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPLI(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildREMB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildREMB(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildTMMBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTMMBR(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildTMMBN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTMMBN(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildAPP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAPP(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLossNotification(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildExtendedReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildExtendedReports(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildBYE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBYE(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildFIR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFIR(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "BuildNACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNACK(const RtcpContext& context, PacketSender& sender) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetNextRtcpSendEvaluationDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextRtcpSendEvaluationDuration(TimeDelta duration) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const bool audio_ ; uint32_t ssrc_)",
    "insertText": "RTC_GUARDED_BY(mutex_rtcp_sender_)"
  },
  {
    "label": "CheckAndUpdateLayerStructure()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoBitrateAllocation>)",
    "insertText": "CheckAndUpdateLayerStructure(const VideoBitrateAllocation& bitrate) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlag(uint32_t type, bool is_volatile) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "IsFlagPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlagPresent(uint32_t type) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "ConsumeFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeFlag(uint32_t type, bool forced = false) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "AllVolatileFlagsConsumed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllVolatileFlagsConsumed() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_rtcp_sender_)"
  },
  {
    "label": "ReportFlag()",
    "kind": "Method",
    "detail": "Function (struct ReportFlag {)",
    "insertText": "ReportFlag(uint32_t type, bool is_volatile) : type(type), is_volatile(is_volatile)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ReportFlag& flag)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(RTCPSender::*BuilderFunc)(const RtcpContext&, PacketSender&)"
  }
]