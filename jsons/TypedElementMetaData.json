[
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "FQueryDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryDescription"
  },
  {
    "label": "FMetaDataEntryView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetaDataEntryView"
  },
  {
    "label": "FMetaDataBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetaDataBase"
  },
  {
    "label": "FMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetaData"
  },
  {
    "label": "FColumnMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColumnMetaData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetaDataView"
  },
  {
    "label": "FQueryMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueryMetaDataView"
  },
  {
    "label": "FColumnsMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColumnsMetaDataView"
  },
  {
    "label": "FGenericMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericMetaDataView"
  },
  {
    "label": "FForwardingMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForwardingMetaDataView"
  },
  {
    "label": "FComboMetaDataView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComboMetaDataView"
  },
  {
    "label": "IsEditableName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" CoreMinimal . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / TVariant . h \" # include \" Templates / Tuple . h \" # include \" UObject / WeakObjectPtr . h \" class UScriptStruct ; namespace UE::Editor::DataStorage { struct FQueryDescription ; const FName)",
    "insertText": "IsEditableName(TEXT(\"IsEditable\"))"
  },
  {
    "label": "IsConstName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "IsConstName(TEXT(\"IsConst\"))"
  },
  {
    "label": "FMetaDataEntryView()",
    "kind": "Method",
    "detail": "Function (using MetaDataType = TVariant<bool,uint64,int64,double,FString> ; using MetaDataTypeView = TVariant<FEmptyVariantState,bool,uint64,int64,double,const FString*> ; class FMetaDataEntryView final { public :)",
    "insertText": "FMetaDataEntryView()"
  },
  {
    "label": "FMetaDataEntryView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaDataEntryView(const MetaDataType& MetaData)"
  },
  {
    "label": "FMetaDataEntryView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetaDataEntryView(const FString& MetaDataString)"
  },
  {
    "label": "FMetaDataEntryView()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FMetaDataEntryView(T&& MetaDataValue)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsType()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "IsType()"
  },
  {
    "label": "TryGetExact()",
    "kind": "Method",
    "detail": "Function (template<T> const T*)",
    "insertText": "TryGetExact()"
  },
  {
    "label": "AddImmutableData()",
    "kind": "Method",
    "detail": "Function (private : MetaDataTypeView DataView ; } ; class FMetaDataBase { public : template<T> bool)",
    "insertText": "AddImmutableData(FName Name, T&& Value)"
  },
  {
    "label": "AddOrSetMutableData()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddOrSetMutableData(FName Name, T&& Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FMetaDataEntryView)",
    "insertText": "Find(FName Name)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "FMetaDataBase()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FMetaDataBase()"
  },
  {
    "label": "FColumnMetaData()",
    "kind": "Method",
    "detail": "Function (TMap<FName,MetaDataType> ImmutableData ; TMap<FName,MetaDataType> MutableData ; } ; class FMetaData final : public FMetaDataBase { } ; class FColumnMetaData final : public FMetaDataBase { public : enum class EFlags { None = 0,IsMutable = 1<<0 } ;)",
    "insertText": "FColumnMetaData()"
  },
  {
    "label": "FColumnMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColumnMetaData(const UScriptStruct* InColumnType, EFlags InFlags)"
  },
  {
    "label": "FMetaDataView()",
    "kind": "Method",
    "detail": "Function (private : const UScriptStruct* ColumnType { nullptr } ; EFlags Flags = EFlags::None ; } ; class FMetaDataView { public : ~)",
    "insertText": "FMetaDataView()"
  },
  {
    "label": "FindGeneric()",
    "kind": "Method",
    "detail": "Function (FMetaDataEntryView)",
    "insertText": "FindGeneric(FName AttributeName)"
  },
  {
    "label": "FindForColumn()",
    "kind": "Method",
    "detail": "Function (FMetaDataEntryView)",
    "insertText": "FindForColumn(TWeakObjectPtr<const UScriptStruct> Column, FName AttributeName)"
  },
  {
    "label": "FindForColumn()",
    "kind": "Method",
    "detail": "Function (template<Column> FMetaDataEntryView)",
    "insertText": "FindForColumn(FName AttributeName)"
  },
  {
    "label": "FQueryMetaDataView()",
    "kind": "Method",
    "detail": "Function (} ; class FQueryMetaDataView final : public FMetaDataView { public : ~)",
    "insertText": "FQueryMetaDataView()"
  },
  {
    "label": "FQueryMetaDataView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQueryMetaDataView(const FQueryDescription& InQuery)"
  },
  {
    "label": "FColumnsMetaDataView()",
    "kind": "Method",
    "detail": "Function (private : const FQueryDescription& Query ; } ; class FColumnsMetaDataView final : public FMetaDataView { public : ~)",
    "insertText": "FColumnsMetaDataView()"
  },
  {
    "label": "FColumnsMetaDataView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColumnsMetaDataView(TConstArrayView<TWeakObjectPtr<const UScriptStruct>> InColumns)"
  },
  {
    "label": "FGenericMetaDataView()",
    "kind": "Method",
    "detail": "Function (private : TConstArrayView<TWeakObjectPtr<const UScriptStruct>> Columns ; } ; class FGenericMetaDataView final : public FMetaDataView { public : ~)",
    "insertText": "FGenericMetaDataView()"
  },
  {
    "label": "FGenericMetaDataView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGenericMetaDataView(const FMetaData& InMetaData)"
  },
  {
    "label": "FForwardingMetaDataView()",
    "kind": "Method",
    "detail": "Function (private : const FMetaData& MetaData ; } ; class FForwardingMetaDataView final : public FMetaDataView { public : ~)",
    "insertText": "FForwardingMetaDataView()"
  },
  {
    "label": "FForwardingMetaDataView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FForwardingMetaDataView(const FMetaDataView& InView)"
  },
  {
    "label": "FComboMetaDataView()",
    "kind": "Method",
    "detail": "Function (private : const FMetaDataView& View ; } ; template<. . . ViewTypes> class FComboMetaDataView final : public FMetaDataView { public :)",
    "insertText": "FComboMetaDataView(const ViewTypes&... InViews)"
  },
  {
    "label": "FComboMetaDataView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComboMetaDataView(ViewTypes&&... InViews)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (template<NextViewType> FComboMetaDataView<ViewTypes . . .,NextViewType>)",
    "insertText": "Next(NextViewType&& NextView)"
  }
]