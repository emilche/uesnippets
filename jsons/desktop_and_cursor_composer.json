[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "DesktopAndCursorComposerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopAndCursorComposerTest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_ # include<memory> # if)",
    "insertText": "defined(WEBRTC_USE_GIO)"
  },
  {
    "label": "DesktopAndCursorComposer()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT DesktopAndCursorComposer : public DesktopCapturer,public DesktopCapturer::Callback,public MouseCursorMonitor::Callback { public :)",
    "insertText": "DesktopAndCursorComposer(std::unique_ptr<DesktopCapturer> desktop_capturer, const DesktopCaptureOptions& options)"
  },
  {
    "label": "DesktopAndCursorComposer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DesktopAndCursorComposer()"
  },
  {
    "label": "DesktopAndCursorComposer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopAndCursorComposer(const DesktopAndCursorComposer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopAndCursorComposer&)",
    "insertText": "operator(const DesktopAndCursorComposer&)"
  },
  {
    "label": "CreateWithoutMouseCursorMonitor()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopAndCursorComposer>)",
    "insertText": "CreateWithoutMouseCursorMonitor(std::unique_ptr<DesktopCapturer> desktop_capturer)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(DesktopCapturer::Callback* callback)"
  },
  {
    "label": "SetSharedMemoryFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedMemoryFactory(std::unique_ptr<SharedMemoryFactory> shared_memory_factory)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "SetExcludedWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedWindow(WindowId window)"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* sources)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "FocusOnSelectedSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FocusOnSelectedSource()"
  },
  {
    "label": "IsOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOccluded(const DesktopVector& pos)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_GIO) DesktopCaptureMetadata GetMetadata()"
  },
  {
    "label": "OnMouseCursor()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnMouseCursor(MouseCursor* cursor)"
  },
  {
    "label": "OnMouseCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCursorPosition(const DesktopVector& position)"
  },
  {
    "label": "DesktopAndCursorComposer()",
    "kind": "Method",
    "detail": "Function (private : class DesktopAndCursorComposerTest ;)",
    "insertText": "DesktopAndCursorComposer(DesktopCapturer* desktop_capturer, MouseCursorMonitor* mouse_monitor)"
  },
  {
    "label": "OnCaptureResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCaptureResult(DesktopCapturer::Result result, std::unique_ptr<DesktopFrame> frame)"
  }
]