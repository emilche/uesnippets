[
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "CCState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCState"
  },
  {
    "label": "FastISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastISel"
  },
  {
    "label": "FunctionLoweringInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionLoweringInfo"
  },
  {
    "label": "ImmutableCallSite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableCallSite"
  },
  {
    "label": "IntrinsicInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntrinsicInst"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineJumpTableInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineJumpTableInfo"
  },
  {
    "label": "MachineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoop"
  },
  {
    "label": "Mangler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mangler"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "TargetLoweringObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLoweringObjectFile"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Preference",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Preference"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "TargetLoweringBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLoweringBase"
  },
  {
    "label": "indicates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "indicates"
  },
  {
    "label": "LegalizeAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LegalizeAction"
  },
  {
    "label": "indicates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "indicates"
  },
  {
    "label": "LegalizeTypeAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LegalizeTypeAction"
  },
  {
    "label": "BooleanContent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BooleanContent"
  },
  {
    "label": "SelectSupportKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SelectSupportKind"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ValueTypeActionImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueTypeActionImpl"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "types"
  },
  {
    "label": "IntrinsicInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntrinsicInfo"
  },
  {
    "label": "opcode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "opcode"
  },
  {
    "label": "constructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructor"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "natively",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "natively"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "AddrMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddrMode"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "would",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "would"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "defines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "defines"
  },
  {
    "label": "also",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "also"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "TargetLoweringOpt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetLoweringOpt"
  },
  {
    "label": "DAGCombinerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DAGCombinerInfo"
  },
  {
    "label": "ArgListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgListEntry"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in"
  },
  {
    "label": "CallLoweringInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallLoweringInfo"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "ConstraintType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConstraintType"
  },
  {
    "label": "ConstraintWeight",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConstraintWeight"
  },
  {
    "label": "AsmOperandInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AsmOperandInfo"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "constraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constraint"
  },
  {
    "label": "pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pointer"
  },
  {
    "label": "TargetLoweringBase()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TargetLoweringBase(const TargetMachine &TM)"
  },
  {
    "label": "initActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initActions()"
  },
  {
    "label": "getPointerTy()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getPointerTy(DL)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Type is not legal nor is it to be expanded!\")"
  },
  {
    "label": "getVectorTypeBreakdown()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getVectorTypeBreakdown(Context, VT, VT1, NumIntermediates, VT2)"
  },
  {
    "label": "setJumpIsExpensive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setJumpIsExpensive(bool isExpensive = true)"
  },
  {
    "label": "computeRegisterProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRegisterProperties(const TargetRegisterInfo *TRI)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (buffer)",
    "insertText": "size(in bytes)"
  },
  {
    "label": "alignment()",
    "kind": "Method",
    "detail": "Function (buffer)",
    "insertText": "alignment(in bytes)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Instruction is not an extension\")"
  },
  {
    "label": "isExtFreeImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isExtFreeImpl(I)"
  },
  {
    "label": "TargetLowering()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TargetLowering(const TargetMachine &TM)"
  },
  {
    "label": "ShrinkDemandedConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShrinkDemandedConstant(SDValue Op, const APInt &Demanded)"
  },
  {
    "label": "ShrinkDemandedOp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShrinkDemandedOp(SDValue Op, unsigned BitWidth, const APInt &Demanded,\n                          SDLoc dl)"
  },
  {
    "label": "AddToWorklist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToWorklist(SDNode *N)"
  },
  {
    "label": "RemoveFromWorklist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromWorklist(SDNode *N)"
  },
  {
    "label": "CombineTo()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CombineTo(SDNode *N, ArrayRef<SDValue> To, bool AddTo = true)"
  },
  {
    "label": "CombineTo()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CombineTo(SDNode *N, SDValue Res, bool AddTo = true)"
  },
  {
    "label": "CombineTo()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "CombineTo(SDNode *N, SDValue Res0, SDValue Res1, bool AddTo = true)"
  },
  {
    "label": "CommitTargetLoweringOpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitTargetLoweringOpt(const TargetLoweringOpt &TLO)"
  },
  {
    "label": "isTypeLegal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTypeLegal(VT)"
  },
  {
    "label": "setAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttributes(ImmutableCallSite *CS, unsigned AttrIdx)"
  },
  {
    "label": "SDValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SDValue()"
  },
  {
    "label": "SDValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SDValue()"
  },
  {
    "label": "SDValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SDValue()"
  },
  {
    "label": "GetReturnInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReturnInfo(Type *ReturnType, AttributeSet attr,\n                   SmallVectorImpl<ISD::OutputArg> &Outs,\n                   const TargetLowering &TLI, const DataLayout &DL)"
  }
]