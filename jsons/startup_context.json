[
  {
    "label": "ServiceDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ServiceDirectory"
  },
  {
    "label": "OutgoingDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingDirectory"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "StartupContext()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_STARTUP_CONTEXT_H_ # define BASE_FUCHSIA_STARTUP_CONTEXT_H_ # include<fuchsia / component / runner / cpp / fidl . h> # include<fuchsia / io / cpp / fidl . h> # include<fuchsia / sys / cpp / fidl . h> # include<lib / sys / cpp / component_context . h> # include<lib / zx / channel . h> # include<memory> # include \" base / base_export . h \" namespace sys { class ServiceDirectory ; class OutgoingDirectory ; } namespace base { class BASE_EXPORT StartupContext final { public :)",
    "insertText": "StartupContext(::fuchsia::component::runner::ComponentStartInfo start_info)"
  },
  {
    "label": "StartupContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StartupContext()"
  },
  {
    "label": "StartupContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupContext(::fuchsia::sys::StartupInfo startup_info)"
  },
  {
    "label": "StartupContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupContext(const StartupContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StartupContext&)",
    "insertText": "operator(const StartupContext&)"
  },
  {
    "label": "component_context()",
    "kind": "Method",
    "detail": "Function (sys::ComponentContext*)",
    "insertText": "component_context()"
  },
  {
    "label": "svc()",
    "kind": "Method",
    "detail": "Function (} const sys::ServiceDirectory*)",
    "insertText": "svc()"
  },
  {
    "label": "outgoing()",
    "kind": "Method",
    "detail": "Function (} sys::OutgoingDirectory*)",
    "insertText": "outgoing()"
  },
  {
    "label": "ServeOutgoingDirectory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ServeOutgoingDirectory()"
  },
  {
    "label": "has_outgoing_directory_request()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_outgoing_directory_request()"
  }
]