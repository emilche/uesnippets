[
  {
    "label": "IPAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPAddress"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NetworkBinderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBinderInterface"
  },
  {
    "label": "NetworkMonitorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkMonitorInterface"
  },
  {
    "label": "InterfaceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InterfaceInfo"
  },
  {
    "label": "NetworkPreferenceToString()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NETWORK_MONITOR_H_ # define RTC_BASE_NETWORK_MONITOR_H_ # include<functional> # include<utility> # include \" absl / strings / string_view . h \" # include \" rtc_base / network_constants . h \" namespace rtc { class IPAddress ; enum class NetworkBindingResult { SUCCESS = 0,FAILURE = - 1,NOT_IMPLEMENTED = - 2,ADDRESS_NOT_FOUND = - 3,NETWORK_CHANGED = - 4 } ; enum class NetworkPreference { NEUTRAL = 0,NOT_PREFERRED = - 1,} ; const char*)",
    "insertText": "NetworkPreferenceToString(NetworkPreference preference)"
  },
  {
    "label": "BindSocketToNetwork()",
    "kind": "Method",
    "detail": "Function (class NetworkBinderInterface { public : NetworkBindingResult)",
    "insertText": "BindSocketToNetwork(int socket_fd, const IPAddress& address)"
  },
  {
    "label": "NetworkBinderInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkBinderInterface()"
  },
  {
    "label": "NetworkMonitorInterface()",
    "kind": "Method",
    "detail": "Function (} } ; class NetworkMonitorInterface { public : struct InterfaceInfo { AdapterType adapter_type ; AdapterType underlying_type_for_vpn = ADAPTER_TYPE_UNKNOWN ; NetworkPreference network_preference = NetworkPreference::NEUTRAL ; bool available = true ; } ;)",
    "insertText": "NetworkMonitorInterface()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (InterfaceInfo)",
    "insertText": "GetInterfaceInfo(absl::string_view interface_name)"
  },
  {
    "label": "SupportsBindSocketToNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBindSocketToNetwork()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (networks_changed_callback_ =)",
    "insertText": "move(callback)"
  },
  {
    "label": "InvokeNetworksChangedCallback()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "InvokeNetworksChangedCallback()"
  },
  {
    "label": "networks_changed_callback_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "networks_changed_callback_()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : std::function<)",
    "insertText": "void()"
  }
]