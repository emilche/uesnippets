[
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "FLocalPlayerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalPlayerIterator"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBasePlayerControllerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBasePlayerControllerIterator"
  },
  {
    "label": "TPlayerControllerIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPlayerControllerIterator"
  },
  {
    "label": "FTickStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickStats"
  },
  {
    "label": "FDetailedTickStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDetailedTickStats"
  },
  {
    "label": "FScopedDetailTickStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedDetailTickStats"
  },
  {
    "label": "FScopedConditionalWorldSwitcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedConditionalWorldSwitcher"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "FCachedSystemScalabilityCVars",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedSystemScalabilityCVars"
  },
  {
    "label": "FSystemResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemResolution"
  },
  {
    "label": "FTemporaryPlayInEditorIDOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporaryPlayInEditorIDOverride"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderCommandFence . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" Engine / Engine . h \" # include \" SceneTypes . h \" class FViewportClient ; class UFont ; class ULocalPlayer ; int32 GShowMaterialDrawEvents ; int32 GDoAsyncLoadingWhileWaitingForVSync ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEngine, Log, All)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (class FLocalPlayerIterator { protected : TArray<class ULocalPlayer*>::TConstIterator Iter ; void)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "FLocalPlayerIterator()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FLocalPlayerIterator(UEngine* InEngine, class UWorld* InWorld) : Iter(InEngine->GetLocalPlayerIterator(InWorld))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()"
  },
  {
    "label": "TBasePlayerControllerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,bool LocalOnly> class TBasePlayerControllerIterator { public :)",
    "insertText": "TBasePlayerControllerIterator(class UWorld* InWorld) : Iter(InWorld->GetPlayerControllerIterator())"
  },
  {
    "label": "AdvanceCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceCurrent()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Current = Iter ? Cast<)",
    "insertText": "T(*Iter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TPlayerControllerIterator { typedef TBasePlayerControllerIterator<T,true> LocalOnly ; typedef TBasePlayerControllerIterator<T,false> ServerAll ; } ; struct FTickStats { FString ObjectPathName ; FString ObjectDetailedInfo ; FName ObjectClassFName ; int32 GCIndex ; float TotalTime ; int32 Count ; bool bForSummary ; bool)",
    "insertText": "operator()( const FTickStats& A, const FTickStats& B)"
  },
  {
    "label": "FDetailedTickStats()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDetailedTickStats {)",
    "insertText": "FDetailedTickStats(int32 InNumClassesToReport, float InTimeBetweenLogDumps, float InMinTimeBetweenLogDumps, float InTimesToReport, const TCHAR* InOperationPerformed)"
  },
  {
    "label": "FDetailedTickStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDetailedTickStats()"
  },
  {
    "label": "BeginObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginObject(UObject* Object)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndObject(UObject* Object, float DeltaTime, bool bForSummary)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreGarbageCollect()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (GCIndex + + ;)",
    "insertText": "check(ObjectsInFlight.Num() == 0)"
  },
  {
    "label": "FScopedDetailTickStats()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FTickStats> AllStats ; TMap<const UObject*,int32> ObjectToStatsMap ; TSet<const UObject*> ObjectsInFlight ; int32 GCIndex ; bool GCCallBackRegistered ; int32 NumObjectsToReport ; float TimeBetweenLogDumps ; float MinTimeBetweenLogDumps ; double LastTimeOfLogDump ; float TimesToReport ; FString OperationPerformed ; FDelegateHandle OnPreGarbageCollectDelegateHandle ; } ; struct FScopedDetailTickStats {)",
    "insertText": "FScopedDetailTickStats(FDetailedTickStats& InDetailedTickStats, UObject* ObjectToTrack)"
  },
  {
    "label": "FScopedDetailTickStats()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedDetailTickStats()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (private : FDetailedTickStats& DetailedTickStats ; UObject* Object ; uint32 StartCycles ; bool bShouldTrackObject ; bool bShouldTrackObjectClass ; } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSwitchWorldForPIE, bool, UWorld*)"
  },
  {
    "label": "FScopedConditionalWorldSwitcher()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class FScopedConditionalWorldSwitcher { public :)",
    "insertText": "FScopedConditionalWorldSwitcher(class FViewportClient* InViewportClient)"
  },
  {
    "label": "FScopedConditionalWorldSwitcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedConditionalWorldSwitcher(UWorld* InWorld)"
  },
  {
    "label": "FScopedConditionalWorldSwitcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedConditionalWorldSwitcher()"
  },
  {
    "label": "ConditionalSwitchWorld()",
    "kind": "Method",
    "detail": "Function (FOnSwitchWorldForPIE SwitchWorldForPIEDelegate ; private : void)",
    "insertText": "ConditionalSwitchWorld(class FViewportClient* InViewportClient, UWorld* InWorld)"
  },
  {
    "label": "appGetStartupMap()",
    "kind": "Method",
    "detail": "Function (} } ; # endif FString)",
    "insertText": "appGetStartupMap(const TCHAR* CommandLine)"
  },
  {
    "label": "CalculateFPSTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFPSTimings()"
  },
  {
    "label": "GetStatsFont()",
    "kind": "Method",
    "detail": "Function (UFont*)",
    "insertText": "GetStatsFont()"
  },
  {
    "label": "Sync()",
    "kind": "Method",
    "detail": "Function (namespace FFrameEndSync { void)",
    "insertText": "Sync(bool bFullSync = false)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; class IEngineLoop { public : int32)",
    "insertText": "Init()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "ClearPendingCleanupObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingCleanupObjects()"
  },
  {
    "label": "CalculateFieldOfViewDistanceScale()",
    "kind": "Method",
    "detail": "Function (} ; struct FCachedSystemScalabilityCVars { bool bInitialized ; int32 DetailMode ; int32 CookOutUnusedDetailModeComponents ; EMaterialQualityLevel::Type MaterialQualityLevel ; int32 MaxShadowResolution ; int32 MaxCSMShadowResolution ; float ViewDistanceScale ; float ViewDistanceScaleSquared ; int32 FieldOfViewAffectsHLOD ; float StaticMeshLODDistanceScale ; float SkeletalMeshOverlayDistanceScale ; float)",
    "insertText": "CalculateFieldOfViewDistanceScale(const float FieldOfView)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float ClampedFoV =)",
    "insertText": "Clamp(FieldOfView, FieldOfViewMinAngle, FieldOfViewMaxAngle)"
  },
  {
    "label": "ClampedFoV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampedFoV(ClampedFoV - FieldOfViewMinAngle) / (FieldOfViewMaxAngle - FieldOfViewMinAngle)"
  },
  {
    "label": "FCachedSystemScalabilityCVars()",
    "kind": "Method",
    "detail": "Function (} return FieldOfViewMaxAngleScale ; })",
    "insertText": "FCachedSystemScalabilityCVars()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCachedSystemScalabilityCVars& Other)"
  },
  {
    "label": "ScalabilityCVarsSinkCallback()",
    "kind": "Method",
    "detail": "Function (protected : int32 MaxAnisotropy ; float FieldOfViewMinAngle ; float FieldOfViewMinAngleScale ; float FieldOfViewMaxAngle ; float FieldOfViewMaxAngleScale ; void)",
    "insertText": "ScalabilityCVarsSinkCallback()"
  },
  {
    "label": "AllowHighQualityLightmaps()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "AllowHighQualityLightmaps(const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "GetCachedScalabilityCVars()",
    "kind": "Method",
    "detail": "Function (const FCachedSystemScalabilityCVars&)",
    "insertText": "GetCachedScalabilityCVars()"
  },
  {
    "label": "RequestResolutionChange()",
    "kind": "Method",
    "detail": "Function (struct FSystemResolution { int32 ResX ; int32 ResY ; EWindowMode::Type WindowMode ; bool bForceRefresh ; void)",
    "insertText": "RequestResolutionChange(int32 InResX, int32 InResY, EWindowMode::Type InWindowMode)"
  },
  {
    "label": "FSystemResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSystemResolution() : ResX(0) , ResY(0) , WindowMode(EWindowMode::Windowed) , bForceRefresh(false)"
  },
  {
    "label": "ForceRefresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForceRefresh()"
  },
  {
    "label": "RequestResolutionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResolutionChange(ResX, ResY, WindowMode)"
  },
  {
    "label": "UpdatePlayInEditorWorldDebugString()",
    "kind": "Method",
    "detail": "Function (bForceRefresh = true ; } } ; FSystemResolution GSystemResolution ; int32 GUnbuiltHLODCount ; # ifndef UE_ENABLE_LOG_STACK_ON_FORCE_GC # define UE_ENABLE_LOG_STACK_ON_FORCE_GC 0 # endif # if UE_ENABLE_LOG_STACK_ON_FORCE_GC bool GLogStackOnForceGC ; # endif void)",
    "insertText": "UpdatePlayInEditorWorldDebugString(const FWorldContext* WorldContext)"
  },
  {
    "label": "GetDebugStringForWorld()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugStringForWorld(const UWorld* World)"
  },
  {
    "label": "FTemporaryPlayInEditorIDOverride()",
    "kind": "Method",
    "detail": "Function (struct FTemporaryPlayInEditorIDOverride { public :)",
    "insertText": "FTemporaryPlayInEditorIDOverride(int32 NewOverrideID)"
  },
  {
    "label": "FTemporaryPlayInEditorIDOverride()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTemporaryPlayInEditorIDOverride()"
  },
  {
    "label": "SetID()",
    "kind": "Method",
    "detail": "Function (private : int32 PreviousID ; void)",
    "insertText": "SetID(int32 NewID)"
  }
]