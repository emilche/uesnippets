[
  {
    "label": "FCinematicShotTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCinematicShotTrackEditor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "FTrackEditorThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorThumbnailPool"
  },
  {
    "label": "UMovieSceneCinematicShotSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCinematicShotSection"
  },
  {
    "label": "FCinematicShotSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCinematicShotSection"
  },
  {
    "label": "FCinematicSectionCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCinematicSectionCache"
  },
  {
    "label": "FCinematicShotSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Sections / ThumbnailSection . h \" # include \" TrackEditors / SubTrackEditorBase . h \" class FCinematicShotTrackEditor ; class FMenuBuilder ; class FSequencerSectionPainter ; class FTrackEditorThumbnailPool ; class UMovieSceneCinematicShotSection ; class FCinematicShotSection : public TSubSectionMixin<FViewportThumbnailSection> { public :)",
    "insertText": "FCinematicShotSection(TSharedPtr<ISequencer> InSequencer, UMovieSceneCinematicShotSection& InSection, TSharedPtr<FCinematicShotTrackEditor> InCinematicShotTrackEditor, TSharedPtr<FTrackEditorThumbnailPool> InThumbnailPool)"
  },
  {
    "label": "FCinematicShotSection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCinematicShotSection()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const FGeometry& ClippedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& Painter)"
  },
  {
    "label": "BuildSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionContextMenu(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "BuildSectionSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionSidebarMenu(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "SetSingleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleTime(double GlobalTime)"
  },
  {
    "label": "HandleThumbnailTextBlockText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleThumbnailTextBlockText()"
  },
  {
    "label": "HandleThumbnailTextBlockTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleThumbnailTextBlockTextCommitted(const FText& NewThumbnailName, ETextCommit::Type CommitType)"
  },
  {
    "label": "GetViewCamera()",
    "kind": "Method",
    "detail": "Function (UCameraComponent*)",
    "insertText": "GetViewCamera()"
  },
  {
    "label": "AddShotMenuSection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddShotMenuSection(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "FCinematicSectionCache()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FCinematicShotTrackEditor> CinematicShotTrackEditor ; struct FCinematicSectionCache {)",
    "insertText": "FCinematicSectionCache(UMovieSceneCinematicShotSection* Section = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCinematicSectionCache& RHS)"
  }
]