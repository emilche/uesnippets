[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Aligned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Aligned"
  },
  {
    "label": "NotAligned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotAligned"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Type"
  },
  {
    "label": "SizeOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SizeOf"
  },
  {
    "label": "AlignOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlignOf"
  },
  {
    "label": "From",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "From"
  },
  {
    "label": "To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "To"
  },
  {
    "label": "Needle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Needle"
  },
  {
    "label": "Elements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Elements"
  },
  {
    "label": "SizeSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SizeSeq"
  },
  {
    "label": "OffsetSeq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OffsetSeq"
  },
  {
    "label": "LayoutImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LayoutImpl"
  },
  {
    "label": "Char",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Char"
  },
  {
    "label": "Layout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Layout"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_LAYOUT_H_ # define ABSL_CONTAINER_INTERNAL_LAYOUT_H_ # include<assert . h> # include<stddef . h> # include<stdint . h> # include<ostream> # include<string> # include<tuple> # include<type_traits> # include<typeinfo> # include<utility> # include \" absl / base / config . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / str_cat . h \" # include \" absl / types / span . h \" # include \" absl / utility / utility . h \" # ifdef ABSL_HAVE_ADDRESS_SANITIZER # include<sanitizer / asan_interface . h> # endif # if)",
    "insertText": "defined(__GXX_RTTI)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace container_internal { template<class T,size_t N> struct Aligned ; namespace internal_layout { template<class T> struct NotAligned { } ; template<class T,size_t N> struct NotAligned<const Aligned<T,N>> {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Aligned<T, N> cannot be const-qualified\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<size_t> using IntToSize = size_t ; template<class> using TypeToSize = size_t ; template<class T> struct Type : NotAligned<T> { using type = T ; } ; template<class T,size_t N> struct Type<Aligned<T,N>> { using type = T ; } ; template<class T> struct SizeOf : NotAligned<T>,std::integral_constant<size_t,)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct AlignOf : NotAligned<T> { size_t value =)",
    "insertText": "alignof(T)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,size_t N> struct AlignOf<Aligned<T,N>> {)",
    "insertText": "static_assert(N % alignof(T) == 0, \"Custom alignment can't be lower than the type's alignment\")"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (size_t value = N ; } ; template<class T,class . . . Ts> using Contains = absl::disjunction<std::is_same<T,Ts> . . .> ; template<class From,class To> using CopyConst = std::conditional<std::is_const<From>::value,const To,To>::type ; template<class T> using SliceType = Span<T> ; namespace adl_barrier { template<class Needle,class . . . Ts> size_t)",
    "insertText": "Find(Needle, Needle, Ts...)"
  },
  {
    "label": "IsPow2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPow2(size_t n)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Align(size_t n, size_t m)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Min(size_t a, size_t b)"
  },
  {
    "label": "TypeName()",
    "kind": "Method",
    "detail": "Function (} template<class T> std::string)",
    "insertText": "TypeName()"
  },
  {
    "label": "__cxa_demangle()",
    "kind": "Method",
    "detail": "Function (std::string out ; int status = 0 ; char* demangled = nullptr ; # ifdef ABSL_INTERNAL_HAS_CXA_DEMANGLE demangled =)",
    "insertText": "__cxa_demangle(typeid(T).name(), nullptr, nullptr, &status)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(status == 0 && demangled != nullptr)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(&out, \"<\", demangled, \">\")"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(demangled)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} else { # if)",
    "insertText": "defined(__GXX_RTTI) || defined(_CPPRTTI) absl::StrAppend(&out, \"<\", typeid(T).name(), \">\")"
  },
  {
    "label": "IsPow2()",
    "kind": "Method",
    "detail": "Function (# endif } return out ; } } template<bool C> using EnableIf = std::enable_if<C,int>::type ; template<class T> using IsLegalElementType = std::integral_constant<bool,! std::is_reference<T>::value&& ! std::is_volatile<T>::value&& ! std::is_reference<Type<T>::type>::value&& ! std::is_volatile<Type<T>::type>::value&&)",
    "insertText": "IsPow2(AlignOf<T>::value)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class Elements,class SizeSeq,class OffsetSeq> class LayoutImpl ; template<class . . . Elements,size_t . . . SizeSeq,size_t . . . OffsetSeq> class LayoutImpl<std::tuple<Elements . . .>,absl::index_sequence<SizeSeq . . .>,absl::index_sequence<OffsetSeq . . .>> { private :)",
    "insertText": "static_assert(sizeof...(Elements) > 0, \"At least one field is required\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum { NumTypes =)",
    "insertText": "sizeof(Elements), NumSizes = sizeof...(SizeSeq), NumOffsets = sizeof...(OffsetSeq)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (template<class T> size_t)",
    "insertText": "ElementIndex()"
  },
  {
    "label": "LayoutImpl()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> using ElementAlignment = AlignOf<std::tuple_element<N,std::tuple<Elements . . .>>::type> ; public : using ElementTypes = std::tuple<Type<Elements>::type . . .> ; template<size_t N> using ElementType = std::tuple_element<N,ElementTypes>::type ;)",
    "insertText": "LayoutImpl(IntToSize<SizeSeq>... sizes)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (sizes . . . } { } size_t)",
    "insertText": "Alignment()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,EnableIf<N = = 0> = 0> size_t)",
    "insertText": "Offset()"
  },
  {
    "label": "Offsets()",
    "kind": "Method",
    "detail": "Function (} std::array<size_t,NumOffsets>)",
    "insertText": "Offsets()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Sizes()",
    "kind": "Method",
    "detail": "Function (} std::array<size_t,NumSizes>)",
    "insertText": "Sizes()"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,class Char> CopyConst<Char,ElementType<N>>*)",
    "insertText": "Pointer(Char* p)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using C = std::remove_const<Char>::type ;)",
    "insertText": "static_assert(std::is_same<C, char>() || std::is_same<C, unsigned char>() || std::is_same<C, signed char>(), \"The argument must be a pointer to [const] [signed|unsigned] char\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(reinterpret_cast<uintptr_t>(p) % alignment == 0)"
  },
  {
    "label": "Pointers()",
    "kind": "Method",
    "detail": "Function (} template<class Char> std::tuple<CopyConst<Char,std::tuple_element<OffsetSeq,ElementTypes>::type>* . . .>)",
    "insertText": "Pointers(Char* p)"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,class Char> SliceType<CopyConst<Char,ElementType<N>>>)",
    "insertText": "Slice(Char* p)"
  },
  {
    "label": "Slices()",
    "kind": "Method",
    "detail": "Function (} template<class Char> std::tuple<SliceType<CopyConst<Char,std::tuple_element<SizeSeq,ElementTypes>::type>> . . .>)",
    "insertText": "Slices(Char* p)"
  },
  {
    "label": "AllocSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "AllocSize()"
  },
  {
    "label": "PoisonPadding()",
    "kind": "Method",
    "detail": "Function (} template<class Char,size_t N = NumOffsets - 1,EnableIf<N = = 0> = 0> void)",
    "insertText": "PoisonPadding(const Char* p)"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pointer(p)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_ADDRESS_SANITIZER PoisonPadding<Char,)",
    "insertText": "N(p)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (size_t start = Offset<)",
    "insertText": "N()"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASAN_POISON_MEMORY_REGION(p + start, Offset<N>() - start)"
  },
  {
    "label": "DebugString()",
    "kind": "Method",
    "detail": "Function (} # endif } std::string)",
    "insertText": "DebugString()"
  },
  {
    "label": "OffsetSeq()",
    "kind": "Method",
    "detail": "Function (const size_t sizes [ ] = { SizeOf<ElementType<OffsetSeq>>::value . . . } ; const std::string types [ ] = { adl_barrier::<ElementType<)",
    "insertText": "OffsetSeq()"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (std::string res =)",
    "insertText": "StrCat(\"@0\", types[0], \"(\", sizes[0], \")\")"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(&res, \"[\", size_[i], \"]; @\", offsets[i + 1], types[i + 1], \"(\", sizes[i + 1], \")\")"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} int last = static_cast<)",
    "insertText": "int(NumSizes)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(&res, \"[\", size_[last], \"]\")"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} return res ; } private : size_t size_ [ NumSizes> 0 ? NumSizes : 1 ] ; } ; template<size_t NumSizes,class . . . Ts> using LayoutType = LayoutImpl<std::tuple<Ts . . .>,absl::make_index_sequence<NumSizes>,absl::make_index_sequence<)",
    "insertText": "Min(sizeof...(Ts), NumSizes + 1)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<class . . . Ts> class Layout : public internal_layout::LayoutType<)",
    "insertText": "sizeof(Ts)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "static_assert(sizeof...(Ts) > 0, \"At least one field is required\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<size_t NumSizes> using PartialType = internal_layout::LayoutType<NumSizes,Ts . . .> ; template<class . . . Sizes> PartialType<)",
    "insertText": "sizeof(Sizes)> Partial(Sizes&&... sizes)"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Layout(internal_layout::TypeToSize<Ts>... sizes) : internal_layout::LayoutType<sizeof...(Ts), Ts...>(sizes...)"
  }
]