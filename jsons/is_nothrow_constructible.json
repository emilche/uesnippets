[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__libcpp_is_nothrow_constructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__libcpp_is_nothrow_constructible"
  },
  {
    "label": "_Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Arg"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_NOTHROW_CONSTRUCTIBLE_H # define _LIBCPP___TYPE_TRAITS_IS_NOTHROW_CONSTRUCTIBLE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_nothrow_constructible) template <class _Tp, class... _Args> struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)"
  },
  {
    "label": "noexcept()",
    "kind": "Method",
    "detail": "Function (} ; # else template<bool,bool,class _Tp,class . . . _Args> struct __libcpp_is_nothrow_constructible ; template<class _Tp,class . . . _Args> struct __libcpp_is_nothrow_constructible<true,false,_Tp,_Args . . .> : public integral_constant<bool,)",
    "insertText": "noexcept(_Tp(declval<_Args>()...))"
  },
  {
    "label": "__implicit_conversion_to()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> void)",
    "insertText": "__implicit_conversion_to(_Tp)"
  },
  {
    "label": "noexcept()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Arg> struct __libcpp_is_nothrow_constructible<true,true,_Tp,_Arg> : public integral_constant<bool,)",
    "insertText": "noexcept(_VSTD::__implicit_conversion_to<_Tp>(declval<_Arg>()))"
  }
]