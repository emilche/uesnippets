[
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SMyBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMyBlueprint"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FShowDetailsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShowDetailsOptions"
  },
  {
    "label": "FPropertyAndParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndParent"
  },
  {
    "label": "FKismetSelectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKismetSelectionInfo"
  },
  {
    "label": "SNameEditingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNameEditingWidget"
  },
  {
    "label": "IStructureDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStructureDetailsView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Framework / Text / SlateHyperlinkRun . h \" # include \" IStructureDetailsView . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" PropertyEditorDelegates . h \" # include \" SlateFwd . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakFieldPtr . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class FBlueprintEditor ; class FProperty ; class FStructOnScope ; class IDetailsView ; class SBorder ; class SDockTab ; class SMyBlueprint ; class SWidget ; class SScrollBar ; class UObject ; struct FGeometry ; struct FPropertyChangedEvent ; typedef TSet<class UObject*> FInspectorSelectionSet ; class SKismetInspector : public SCompoundWidget,public FGCObject { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SKismetInspector ) : _ShowPublicViewControl(false) , _HideNameArea(true) , _SetNotifyHook(true) , _ShowTitleArea(false) , _ShowLocalVariables(false) , _ScrollbarAlignment(HAlign_Right) , _ShowSectionSelector(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TWeakPtr<FBlueprintEditor>, Kismet2) SLATE_ARGUMENT(TWeakPtr<SMyBlueprint>, MyBlueprintWidget) SLATE_ATTRIBUTE( bool, ShowPublicViewControl ) SLATE_ARGUMENT( bool, HideNameArea ) SLATE_ARGUMENT( FIsPropertyEditingEnabled, IsPropertyEditingEnabledDelegate ) SLATE_ARGUMENT( FOnFinishedChangingProperties::FDelegate, OnFinishedChangingProperties ) SLATE_ARGUMENT( FName, ViewIdentifier) SLATE_ARGUMENT( bool, SetNotifyHook) SLATE_ARGUMENT( bool, ShowTitleArea) SLATE_ARGUMENT( bool, ShowLocalVariables) SLATE_ARGUMENT( TSharedPtr<SScrollBar>, ExternalScrollbar) SLATE_ARGUMENT( EHorizontalAlignment, ScrollbarAlignment) SLATE_ARGUMENT( bool, ShowSectionSelector) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "FShowDetailsOptions()",
    "kind": "Method",
    "detail": "Function (struct FShowDetailsOptions { FText ForcedTitle ; bool bForceRefresh ; bool bShowComponents ; bool bHideFilterArea ;)",
    "insertText": "FShowDetailsOptions() :ForcedTitle() ,bForceRefresh(false) ,bShowComponents(true) ,bHideFilterArea(false)"
  },
  {
    "label": "FShowDetailsOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShowDetailsOptions(const FText& InForcedTitle, bool bInForceRefresh = false) :ForcedTitle(InForcedTitle) ,bForceRefresh(bInForceRefresh) ,bShowComponents(true) ,bHideFilterArea(false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ShowDetailsForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDetailsForSingleObject(UObject* Object, const FShowDetailsOptions& Options = FShowDetailsOptions())"
  },
  {
    "label": "ShowDetailsForObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDetailsForObjects(const TArray<UObject*>& PropertyObjects, const FShowDetailsOptions& Options = FShowDetailsOptions())"
  },
  {
    "label": "ShowSingleStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSingleStruct(TSharedPtr<FStructOnScope> InStructToDisplay)"
  },
  {
    "label": "IsPropertyVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyVisible(const struct FPropertyAndParent& PropertyAndParent)"
  },
  {
    "label": "EnableComponentDetailsCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableComponentDetailsCustomization(bool bEnable)"
  },
  {
    "label": "GetPropertyView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IDetailsView>)",
    "insertText": "GetPropertyView()"
  },
  {
    "label": "GetOwnerTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetOwnerTab()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelected(UObject* Object)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (const TArray<TWeakObjectPtr<UObject>>&)",
    "insertText": "GetSelectedObjects()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "UpdateFromObjects()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateFromObjects(const TArray<UObject*>& PropertyObjects, struct FKismetSelectionInfo& SelectionInfo, const FShowDetailsOptions& Options)"
  },
  {
    "label": "AddPropertiesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPropertiesRecursive(FProperty* Property)"
  },
  {
    "label": "UpdateFromSingleStruct()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FBlueprintEditor> BlueprintEditorPtr ; TWeakPtr<SDockTab> OwnerTab ; FText PropertyViewTitle ; bool bShowInspectorPropertyView ; bool bShowComponents ; ECheckBoxState PublicViewState ; TSharedPtr<class IDetailsView> PropertyView ; TArray<TWeakObjectPtr<UObject>> SelectedObjects ; TSharedPtr<class SNameEditingWidget> EditNameWidget ; TSharedPtr<SBorder> ContextualEditingBorderWidget ; TAttribute<bool> bShowPublicView ; bool bShowTitleArea ; bool bComponenetDetailsCustomizationEnabled ; TSet<TWeakFieldPtr<FProperty>> SelectedObjectProperties ; FIsPropertyEditingEnabled IsPropertyEditingEnabledDelegate ; FOnFinishedChangingProperties::FDelegate UserOnFinishedChangingProperties ; bool bRefreshOnTick ; TArray<TObjectPtr<UObject>> RefreshPropertyObjects ; FShowDetailsOptions RefreshOptions ; TSharedPtr<FStructOnScope> StructToDisplay ; TSharedPtr<class IStructureDetailsView> StructureDetailsView ; void)",
    "insertText": "UpdateFromSingleStruct(const TSharedPtr<FStructOnScope>& InStructToDisplay)"
  },
  {
    "label": "IsStructViewPropertyReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStructViewPropertyReadOnly(const struct FPropertyAndParent& PropertyAndParent)"
  },
  {
    "label": "SetPropertyWindowContents()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetPropertyWindowContents(TArray<UObject*> Objects)"
  },
  {
    "label": "GetPropertyViewVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPropertyViewVisibility()"
  },
  {
    "label": "IsPropertyEditingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyEditingEnabled()"
  },
  {
    "label": "GetInheritedBlueprintComponentWarningVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetInheritedBlueprintComponentWarningVisibility()"
  },
  {
    "label": "OnInheritedBlueprintComponentWarningHyperlinkClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInheritedBlueprintComponentWarningHyperlinkClicked(const FSlateHyperlinkRun::FMetadata& Metadata)"
  },
  {
    "label": "MakeContextualEditingWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeContextualEditingWidget(struct FKismetSelectionInfo& SelectionInfo, const FShowDetailsOptions& Options)"
  },
  {
    "label": "GetContextualEditingWidgetTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetContextualEditingWidgetTitle()"
  },
  {
    "label": "GetPublicViewCheckboxState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetPublicViewCheckboxState()"
  },
  {
    "label": "SetPublicViewCheckboxState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPublicViewCheckboxState(ECheckBoxState InIsChecked)"
  },
  {
    "label": "IsAnyParentOrContainerSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyParentOrContainerSelected(const FPropertyAndParent& PropertyAndParent)"
  },
  {
    "label": "OnFinishedChangingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingProperties(const FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "ImportNamespacesForPropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportNamespacesForPropertyValue(const FProperty* InProperty)"
  }
]