[
  {
    "label": "RepeatingTaskHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepeatingTaskHandle"
  },
  {
    "label": "RepeatingTaskHandleDTraceProbeStart()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TASK_UTILS_REPEATING_TASK_H_ # define RTC_BASE_TASK_UTILS_REPEATING_TASK_H_ # include<memory> # include<type_traits> # include<utility> # include \" absl / functional / any_invocable . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace webrtc_repeating_task_impl { void)",
    "insertText": "RepeatingTaskHandleDTraceProbeStart()"
  },
  {
    "label": "RepeatingTaskHandleDTraceProbeDelayedStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatingTaskHandleDTraceProbeDelayedStart()"
  },
  {
    "label": "RepeatingTaskImplDTraceProbeRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatingTaskImplDTraceProbeRun()"
  },
  {
    "label": "RepeatingTaskHandle()",
    "kind": "Method",
    "detail": "Function (} class RepeatingTaskHandle { public :)",
    "insertText": "RepeatingTaskHandle()"
  },
  {
    "label": "RepeatingTaskHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatingTaskHandle(RepeatingTaskHandle&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RepeatingTaskHandle&)",
    "insertText": "operator(RepeatingTaskHandle&& other)"
  },
  {
    "label": "RepeatingTaskHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatingTaskHandle(const RepeatingTaskHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RepeatingTaskHandle&)",
    "insertText": "operator(const RepeatingTaskHandle&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (RepeatingTaskHandle)",
    "insertText": "Start(TaskQueueBase* task_queue, absl::AnyInvocable<TimeDelta()> closure, TaskQueueBase::DelayPrecision precision = TaskQueueBase::DelayPrecision::kLow, Clock* clock = Clock::GetRealTimeClock())"
  },
  {
    "label": "DelayedStart()",
    "kind": "Method",
    "detail": "Function (RepeatingTaskHandle)",
    "insertText": "DelayedStart(TaskQueueBase* task_queue, TimeDelta first_delay, absl::AnyInvocable<TimeDelta()> closure, TaskQueueBase::DelayPrecision precision = TaskQueueBase::DelayPrecision::kLow, Clock* clock = Clock::GetRealTimeClock())"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Running()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Running()"
  },
  {
    "label": "RepeatingTaskHandle()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RepeatingTaskHandle(rtc::scoped_refptr<PendingTaskSafetyFlag> alive_flag) : repeating_task_(std::move(alive_flag))"
  }
]