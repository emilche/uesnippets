[
  {
    "label": "UQuartzClockHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzClockHandle"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Curves / RichCurve . h \" # include \" Curves / CurveBase . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Sound / QuartzSubscription . h \" # include \" Quartz / QuartzSubsystem . h \" # include \" Quartz / QuartzMetronome . h \" # include \" AudioMixerClockHandle . generated . h \")",
    "insertText": "UCLASS(BlueprintType, Blueprintable, Transient, ClassGroup = Quartz, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AUDIOMIXER_API UQuartzClockHandle()"
  },
  {
    "label": "UQuartzClockHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UQuartzClockHandle()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "QueueQuantizedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueQuantizedSound(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle, const FAudioComponentCommandInfo& AudioComponentData, const FOnQuartzCommandEventBP& InDelegate, const FQuartzQuantizationBoundary& InTargetBoundary)"
  },
  {
    "label": "SubscribeToClock()",
    "kind": "Method",
    "detail": "Function (UQuartzClockHandle*)",
    "insertText": "SubscribeToClock(const UObject* WorldContextObject, FName ClockName, Audio::FQuartzClockProxy const* InHandlePtr = nullptr)"
  },
  {
    "label": "GetClockName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClockName()"
  },
  {
    "label": "GetCurrentTickRate()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetCurrentTickRate(const UObject* WorldContextObject, Audio::FQuartzClockTickRate& OutTickRate)"
  },
  {
    "label": "SetTickRateInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetTickRateInternal(const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, const Audio::FQuartzClockTickRate& NewTickRate)"
  }
]