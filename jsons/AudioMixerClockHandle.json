[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "UQuartzClockHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzClockHandle"
  },
  {
    "label": "UQuartzClockHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UQuartzClockHandle"
  },
  {
    "label": "UQuartzClockHandle()",
    "kind": "Method",
    "detail": "Function (AUDIOMIXER_API)",
    "insertText": "UQuartzClockHandle()"
  },
  {
    "label": "StartClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartClock(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "StopClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopClock(const UObject* WorldContextObject, bool CancelPendingEvents, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "PauseClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseClock(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "ResumeClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeClock(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "ResetTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransport(const UObject* WorldContextObject, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "ResetTransportQuantized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransportQuantized(const UObject* WorldContextObject, FQuartzQuantizationBoundary InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "IsClockRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClockRunning(const UObject* WorldContextObject)"
  },
  {
    "label": "NotifyOnQuantizationBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyOnQuantizationBoundary(const UObject* WorldContextObject, FQuartzQuantizationBoundary InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, float InMsOffset = 0.f)"
  },
  {
    "label": "GetDurationOfQuantizationTypeInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDurationOfQuantizationTypeInSeconds(const UObject* WorldContextObject, const EQuartzCommandQuantization& QuantizationType, float Multiplier = 1.0f)"
  },
  {
    "label": "GetCurrentTimestamp()",
    "kind": "Method",
    "detail": "Function (FQuartzTransportTimeStamp)",
    "insertText": "GetCurrentTimestamp(const UObject* WorldContextObject)"
  },
  {
    "label": "GetEstimatedRunTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEstimatedRunTime(const UObject* WorldContextObject)"
  },
  {
    "label": "StartOtherClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartOtherClock(const UObject* WorldContextObject, FName OtherClockName, FQuartzQuantizationBoundary InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate)"
  },
  {
    "label": "SubscribeToQuantizationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToQuantizationEvent(const UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, const FOnQuartzMetronomeEventBP& OnQuantizationEvent, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "SubscribeToAllQuantizationEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllQuantizationEvents(const UObject* WorldContextObject, const FOnQuartzMetronomeEventBP& OnQuantizationEvent, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(const UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle)"
  },
  {
    "label": "GetBeatProgressPercent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBeatProgressPercent(EQuartzCommandQuantization QuantizationBoundary = EQuartzCommandQuantization::Beat, float PhaseOffset = 0.f, float MsOffset = 0.f)"
  },
  {
    "label": "SetNotificationAnticipationAmountInMilliseconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotificationAnticipationAmountInMilliseconds(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle, const double Milliseconds = 0.0)"
  },
  {
    "label": "SetNotificationAnticipationAmountAsMusicalDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotificationAnticipationAmountAsMusicalDuration(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle, const EQuartzCommandQuantization MusicalDuration = EQuartzCommandQuantization::QuarterNote, const double Multiplier = 1.0)"
  },
  {
    "label": "QueueQuantizedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueQuantizedSound(const UObject* WorldContextObject, UQuartzClockHandle*& ClockHandle, const FAudioComponentCommandInfo& AudioComponentData, const FOnQuartzCommandEventBP& InDelegate, const FQuartzQuantizationBoundary& InTargetBoundary)"
  },
  {
    "label": "SetTickRateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickRateInternal(const FQuartzQuantizationBoundary& InQuantizationBoundary, const FOnQuartzCommandEventBP& InDelegate, const Audio::FQuartzClockTickRate& NewTickRate)"
  }
]