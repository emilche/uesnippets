[
  {
    "label": "_Ip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ip"
  },
  {
    "label": "_Op",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Op"
  },
  {
    "label": "_I1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I1"
  },
  {
    "label": "_I2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I2"
  },
  {
    "label": "_O1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_O1"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "_Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Func"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_InIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_InIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_TRANSFORM_H # define _LIBCPP___ALGORITHM_RANGES_TRANSFORM_H # include<__algorithm / in_in_out_result . h> # include<__algorithm / in_out_result . h> # include<__concepts / constructible . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__unary()",
    "kind": "Method",
    "detail": "Function (template<class _Ip,class _Op> using unary_transform_result = in_out_result<_Ip,_Op> ; template<class _I1,class _I2,class _O1> using binary_transform_result = in_in_out_result<_I1,_I2,_O1> ; namespace __transform { struct __fn { private : template<class _InIter,class _Sent,class _OutIter,class _Func,class _Proj> _LIBCPP_HIDE_FROM_ABI unary_transform_result<_InIter,_OutIter>)",
    "insertText": "__unary(_InIter __first, _Sent __last, _OutIter __result, _Func& __operation, _Proj& __projection)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (* __result =)",
    "insertText": "invoke(__operation, std::invoke(__projection, *__first))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (+ + __first ; + + __result ; } return {)",
    "insertText": "move(__first), std::move(__result)"
  },
  {
    "label": "__binary()",
    "kind": "Method",
    "detail": "Function (} template<class _InIter1,class _Sent1,class _InIter2,class _Sent2,class _OutIter,class _Func,class _Proj1,class _Proj2> _LIBCPP_HIDE_FROM_ABI binary_transform_result<_InIter1,_InIter2,_OutIter>)",
    "insertText": "__binary(_InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Func& __binary_operation, _Proj1& __projection1, _Proj2& __projection2)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (* __result =)",
    "insertText": "invoke(__binary_operation, std::invoke(__projection1, *__first1), std::invoke(__projection2, *__first2))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; + + __first2 ; + + __result ; } return {)",
    "insertText": "move(__first1), std::move(__first2), std::move(__result)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : template<input_iterator _InIter,sentinel_for<_InIter> _Sent,weakly_incrementable _OutIter,copy_constructible _Func,class _Proj = identity> requires indirectly_writable<_OutIter,indirect_result_t<_Func&,projected<_InIter,_Proj>>> _LIBCPP_HIDE_FROM_ABI unary_transform_result<_InIter,_OutIter>)",
    "insertText": "operator()(_InIter __first, _Sent __last, _OutIter __result, _Func __operation, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,weakly_incrementable _OutIter,copy_constructible _Func,class _Proj = identity> requires indirectly_writable<_OutIter,indirect_result_t<_Func,projected<iterator_t<_Range>,_Proj>>> _LIBCPP_HIDE_FROM_ABI unary_transform_result<borrowed_iterator_t<_Range>,_OutIter>)",
    "insertText": "operator()(_Range&& __range, _OutIter __result, _Func __operation, _Proj __projection = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_iterator _InIter1,sentinel_for<_InIter1> _Sent1,input_iterator _InIter2,sentinel_for<_InIter2> _Sent2,weakly_incrementable _OutIter,copy_constructible _Func,class _Proj1 = identity,class _Proj2 = identity> requires indirectly_writable<_OutIter,indirect_result_t<_Func&,projected<_InIter1,_Proj1>,projected<_InIter2,_Proj2>>> _LIBCPP_HIDE_FROM_ABI binary_transform_result<_InIter1,_InIter2,_OutIter>)",
    "insertText": "operator()(_InIter1 __first1, _Sent1 __last1, _InIter2 __first2, _Sent2 __last2, _OutIter __result, _Func __binary_operation, _Proj1 __projection1 = {}, _Proj2 __projection2 = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range1,input_range _Range2,weakly_incrementable _OutIter,copy_constructible _Func,class _Proj1 = identity,class _Proj2 = identity> requires indirectly_writable<_OutIter,indirect_result_t<_Func&,projected<iterator_t<_Range1>,_Proj1>,projected<iterator_t<_Range2>,_Proj2>>> _LIBCPP_HIDE_FROM_ABI binary_transform_result<borrowed_iterator_t<_Range1>,borrowed_iterator_t<_Range2>,_OutIter>)",
    "insertText": "operator()(_Range1&& __range1, _Range2&& __range2, _OutIter __result, _Func __binary_operation, _Proj1 __projection1 = {}, _Proj2 __projection2 = {})"
  }
]