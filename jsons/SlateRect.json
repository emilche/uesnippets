[
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FMargin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMargin"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FSlateRect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Types / SlateVector2 . h \" class FSlateRect { public : float Left ; float Top ; float Right ; float Bottom ;)",
    "insertText": "FSlateRect(float InLeft = -1, float InTop = -1, float InRight = -1, float InBottom = -1 ) : Left(InLeft) , Top(InTop) , Right(InRight) , Bottom(InBottom)"
  },
  {
    "label": "FSlateRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateRect(const UE::Slate::FDeprecateVector2DParameter& InStartPos, const UE::Slate::FDeprecateVector2DParameter& InEndPos ) : Left(InStartPos.X) , Top(InStartPos.Y) , Right(InEndPos.X) , Bottom(InEndPos.Y)"
  },
  {
    "label": "FromPointAndExtent()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "FromPointAndExtent(const UE::Slate::FDeprecateVector2DParameter& TopLeft, const UE::Slate::FDeprecateVector2DParameter& Size)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetSize2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetSize2f()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetArea()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetCenter2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetCenter2f()"
  },
  {
    "label": "GetTopLeft()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetTopLeft()"
  },
  {
    "label": "GetTopLeft2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetTopLeft2f()"
  },
  {
    "label": "GetTopRight()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetTopRight()"
  },
  {
    "label": "GetTopRight2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetTopRight2f()"
  },
  {
    "label": "GetBottomRight()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetBottomRight()"
  },
  {
    "label": "GetBottomRight2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetBottomRight2f()"
  },
  {
    "label": "GetBottomLeft()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetBottomLeft()"
  },
  {
    "label": "GetBottomLeft2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetBottomLeft2f()"
  },
  {
    "label": "InsetBy()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "InsetBy(const struct FMargin& InsetAmount)"
  },
  {
    "label": "ExtendBy()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "ExtendBy(const FMargin& ExtendAmount)"
  },
  {
    "label": "OffsetBy()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "OffsetBy(const UE::Slate::FDeprecateVector2DParameter& OffsetAmount)"
  },
  {
    "label": "ScaleBy()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "ScaleBy(float ScaleBy)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "Expand(const FSlateRect& Other)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "Round()"
  },
  {
    "label": "IntersectionWith()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "IntersectionWith(const FSlateRect& Other)"
  },
  {
    "label": "IntersectionWith()",
    "kind": "Method",
    "detail": "Function (bool bOverlapping ; return)",
    "insertText": "IntersectionWith(Other, bOverlapping)"
  },
  {
    "label": "IntersectionWith()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "IntersectionWith(const FSlateRect& Other, bool& OutOverlapping)"
  },
  {
    "label": "Intersected()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "Intersected(FMath::Max( this->Left, Other.Left ), FMath::Max(this->Top, Other.Top), FMath::Min( this->Right, Other.Right ), FMath::Min( this->Bottom, Other.Bottom ))"
  },
  {
    "label": "FSlateRect()",
    "kind": "Method",
    "detail": "Function (OutOverlapping = false ; return)",
    "insertText": "FSlateRect(0,0,0,0)"
  },
  {
    "label": "ContainsPoint()",
    "kind": "Method",
    "detail": "Function (} else { OutOverlapping = true ; return Intersected ; } } bool)",
    "insertText": "ContainsPoint(const UE::Slate::FDeprecateVector2DParameter& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "operator(const FSlateRect& A, const FSlateRect& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSlateRect)",
    "insertText": "operator(float Scalar, const FSlateRect& Rect)"
  },
  {
    "label": "DoRectanglesIntersect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoRectanglesIntersect(const FSlateRect& A, const FSlateRect& B)"
  },
  {
    "label": "IsRectangleContained()",
    "kind": "Method",
    "detail": "Function (const bool bDoNotOverlap = B . Right<A . Left | | A . Right<B . Left | | B . Bottom<A . Top | | A . Bottom<B . Top ; return ! bDoNotOverlap ; } bool)",
    "insertText": "IsRectangleContained(const FSlateRect& A, const FSlateRect& B)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromString(const FString& InSourceString)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FSlateRect& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Left))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Right))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Top))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Bottom))"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (FVector2f TopLeftTransformed =)",
    "insertText": "TransformPoint(Transform, FVector2f(Rect.Left, Rect.Top))"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (FVector2f BottomRightTransformed =)",
    "insertText": "TransformPoint(Transform, FVector2f(Rect.Right, Rect.Bottom))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(TopLeftTransformed.X, BottomRightTransformed.X)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TopLeftTransformed.Y > BottomRightTransformed.Y)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(TopLeftTransformed.Y, BottomRightTransformed.Y)"
  },
  {
    "label": "FSlateRect()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSlateRect(TopLeftTransformed, BottomRightTransformed)"
  }
]