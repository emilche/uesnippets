[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "RawPtrType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawPtrType"
  },
  {
    "label": "raw_ref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ref"
  },
  {
    "label": "is_raw_ref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_raw_ref"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "I"
  },
  {
    "label": "PA_TRIVIAL_ABI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_TRIVIAL_ABI"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "J",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "J"
  },
  {
    "label": "IsRawRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRawRef"
  },
  {
    "label": "RemoveRawRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveRawRef"
  },
  {
    "label": "less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_RAW_REF_H_ # define BASE_MEMORY_RAW_REF_H_ # include<memory> # include<type_traits> # include<utility> # include \" base / allocator / partition_allocator / partition_alloc_base / augmentations / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / memory / raw_ptr . h \" namespace base { template<class T,class RawPtrType> class raw_ref ; namespace internal { template<class T> struct is_raw_ref : std::false_type { } ; template<class T,class I> struct is_raw_ref<::base::raw_ref<T,I>> : std::true_type { } ; template<class T> bool is_raw_ref_v = is_raw_ref<T>::value ; } template<class T,class RawPtrType = DefaultRawPtrType> class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ref { using Inner = raw_ptr<T,RawPtrType> ; using Impl = raw_ptr_traits::RawPtrTypeToImpl<RawPtrType>::Impl ; bool need_clear_after_move = std::is_same_v<Impl,internal::RawPtrNoOpImpl> | | # if)",
    "insertText": "defined(RAW_PTR_USE_MTE_CHECKED_PTR)"
  },
  {
    "label": "raw_ref()",
    "kind": "Method",
    "detail": "Function (public : PA_ALWAYS_INLINE)",
    "insertText": "raw_ref(T& p) noexcept : inner_(std::addressof(p))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE raw_ref&)",
    "insertText": "operator(T& p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (inner_ .)",
    "insertText": "operator(&p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (raw_ref&)",
    "insertText": "operator(const T&& p)"
  },
  {
    "label": "raw_ref()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE)",
    "insertText": "raw_ref(const raw_ref& p) noexcept : inner_(p.inner_)"
  },
  {
    "label": "PA_RAW_PTR_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_RAW_PTR_CHECK(inner_.get())"
  },
  {
    "label": "raw_ref()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE)",
    "insertText": "raw_ref(raw_ref&& p) noexcept : inner_(std::move(p.inner_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE raw_ref&)",
    "insertText": "operator(const raw_ref& p)"
  },
  {
    "label": "PA_RAW_PTR_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_RAW_PTR_CHECK(p.inner_.get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (inner_ .)",
    "insertText": "operator(p.inner_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (inner_ .)",
    "insertText": "operator(std::move(p.inner_))"
  },
  {
    "label": "raw_ref()",
    "kind": "Method",
    "detail": "Function (} template<class U,class = std::enable_if_t<std::is_convertible_v<U&,T&>>> PA_ALWAYS_INLINE)",
    "insertText": "raw_ref(raw_ref<U, RawPtrType>&& p) noexcept : inner_(std::move(p.inner_))"
  },
  {
    "label": "from_ptr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE raw_ref)",
    "insertText": "from_ptr(T* ptr)"
  },
  {
    "label": "PA_RAW_PTR_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_RAW_PTR_CHECK(ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class U,class = std::enable_if_t<std::is_convertible_v<U&,T&>>> PA_ALWAYS_INLINE raw_ref&)",
    "insertText": "operator(const raw_ref<U, RawPtrType>& p)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE T&)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE T*)",
    "insertText": "operator()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "swap(raw_ref& lhs, raw_ref& rhs)"
  },
  {
    "label": "PA_RAW_PTR_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_RAW_PTR_CHECK(lhs.inner_.get())"
  },
  {
    "label": "PA_RAW_PTR_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_RAW_PTR_CHECK(rhs.inner_.get())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lhs.inner_, rhs.inner_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(PA_USE_BASE_TRACING) template <class U = T> typename perfetto::check_traced_value_support<U>::type WriteIntoTrace( perfetto::TracedValue&& context)"
  },
  {
    "label": "WriteIntoTrace()",
    "kind": "Method",
    "detail": "Function (inner_ .)",
    "insertText": "WriteIntoTrace(std::move(context))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif template<class U> PA_ALWAYS_INLINE bool)",
    "insertText": "operator(const raw_ref& lhs, const raw_ref<U, RawPtrType>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> struct IsRawRef : std::false_type { } ; template<T,I> struct IsRawRef<raw_ref<T,I>> : std::true_type { } ; template<T> bool IsRawRefV = IsRawRef<T>::value ; template<T> struct RemoveRawRef { using type = T ; } ; template<T,I> struct RemoveRawRef<raw_ref<T,I>> { using type = T ; } ; template<T> using RemoveRawRefT = RemoveRawRef<T>::type ; } using base::raw_ref ; namespace std { template<T,RawPtrType> struct less<raw_ref<T,RawPtrType>> { using Impl = base::raw_ptr_traits::RawPtrTypeToImpl<RawPtrType>::Impl ; using is_transparent = void ; bool)",
    "insertText": "operator()(const raw_ref<T, RawPtrType>& lhs, const raw_ref<T, RawPtrType>& rhs)"
  },
  {
    "label": "IncrementLessCountForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementLessCountForTest()"
  }
]