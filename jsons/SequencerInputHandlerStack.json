[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FInputHandlerStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputHandlerStack"
  },
  {
    "label": "FInputHandlerStack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Input / Reply . h \" # include \" Delegates / Delegate . h \" # include \" ISequencerInputHandler . h \" class SWidget ; namespace UE { namespace Sequencer { class FInputHandlerStack { public : FSimpleMulticastDelegate OnBeginCapture ; FSimpleMulticastDelegate OnEndCapture ;)",
    "insertText": "FInputHandlerStack() : CapturedIndex(INDEX_NONE)"
  },
  {
    "label": "AddHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHandler(ISequencerInputHandler* Handler)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Handlers .)",
    "insertText": "Add(Handler)"
  },
  {
    "label": "SetHandlerAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHandlerAt(int32 Index, ISequencerInputHandler* Handler)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (CapturedIndex = INDEX_NONE ; OnEndCapture .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetCapturedIndex()",
    "kind": "Method",
    "detail": "Function (} } Handlers [ Index ] = Handler ; } } int32)",
    "insertText": "GetCapturedIndex()"
  },
  {
    "label": "HandleMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleMouseButtonUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseMove()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleMouseMove(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleMouseWheel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleMouseWheel(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleKeyDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleKeyUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "FReply()",
    "kind": "Method",
    "detail": "Function (} private : typedef)",
    "insertText": "FReply(ISequencerInputHandler::*InputHandlerFunction)(SWidget&, const FGeometry&, const FPointerEvent&)"
  },
  {
    "label": "FReply()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FReply(ISequencerInputHandler::* KeyInputHandlerFunction)(SWidget&, const FGeometry&, const FKeyEvent&)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ProcessEvent(InputHandlerFunction Function, SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Unhandled()"
  },
  {
    "label": "Reply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reply(Handlers[CapturedIndex]->*Function)(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 Index = 0; Index < Handlers.Num(); ++Index)"
  },
  {
    "label": "Reply()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "Reply(Handlers[Index]->*Function)(OwnerWidget, MyGeometry, MouseEvent)"
  },
  {
    "label": "ProcessReply()",
    "kind": "Method",
    "detail": "Function (} } return Reply ; } const FReply&)",
    "insertText": "ProcessReply(const FReply& Reply, int32 ThisIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Reply.ShouldReleaseMouse())"
  },
  {
    "label": "ProcessKeyEvent()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } FReply)",
    "insertText": "ProcessKeyEvent(KeyInputHandlerFunction Function, SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "Reply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reply(Handlers[CapturedIndex]->*Function)(OwnerWidget, MyGeometry, KeyEvent)"
  },
  {
    "label": "Reply()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "Reply(Handlers[Index]->*Function)(OwnerWidget, MyGeometry, KeyEvent)"
  }
]