[
  {
    "label": "FFPSAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFPSAnalyzer"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "IHistogramDataSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHistogramDataSource"
  },
  {
    "label": "FHistogramDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHistogramDescription"
  },
  {
    "label": "SHistogram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHistogram"
  },
  {
    "label": "FHistogramDescription()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ProfilerSample . h \" class FFPSAnalyzer ; class FPaintArgs ; class FSlateWindowElementList ; typedef TSharedPtr<class IHistogramDataSource> FHistogramDataSourcePtr ; typedef TSharedRef<class IHistogramDataSource> FHistogramDataSourceRef ; class FHistogramDescription { public :)",
    "insertText": "FHistogramDescription()"
  },
  {
    "label": "FHistogramDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHistogramDescription(const FHistogramDataSourceRef& InDataSource, float InBinInterval, float InMinValue, float InMaxValue, bool InBinNormalize = false) : HistogramDataSource(InDataSource) , Interval(InBinInterval) , MinValue(InMinValue) , MaxValue(InMaxValue) , Normalize(InBinNormalize)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (BinCount =)",
    "insertText": "CeilToInt((MaxValue - MinValue) / Interval)"
  },
  {
    "label": "GetBinCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBinCount()"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (float MinVal =)",
    "insertText": "MinValue(float)"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (float MaxVal =)",
    "insertText": "MinValue(float)(Bin+1)"
  },
  {
    "label": "GetTotalCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTotalCount()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} FHistogramDataSourcePtr HistogramDataSource ; float Interval ; float MinValue ; float MaxValue ; bool Normalize ; int32 BinCount ; } ; class SHistogram : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SHistogram ) : _Description()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FHistogramDescription, Description ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SetFPSAnalyzer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFPSAnalyzer(const TSharedPtr<FFPSAnalyzer>& InAnalyzer)"
  }
]