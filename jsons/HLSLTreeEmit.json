[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialCompilationOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompilationOutput"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FPreshaderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreshaderData"
  },
  {
    "label": "FErrorHandlerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FErrorHandlerInterface"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNode"
  },
  {
    "label": "FOwnedNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOwnedNode"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpression"
  },
  {
    "label": "FFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunction"
  },
  {
    "label": "FRequestedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestedType"
  },
  {
    "label": "FPreparedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreparedType"
  },
  {
    "label": "FPrepareValueResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrepareValueResult"
  },
  {
    "label": "FEmitScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitScope"
  },
  {
    "label": "FEmitShaderExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitShaderExpression"
  },
  {
    "label": "FEmitShaderStatement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitShaderStatement"
  },
  {
    "label": "FEmitPreshaderScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitPreshaderScope"
  },
  {
    "label": "FEmitValuePreshaderResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitValuePreshaderResult"
  },
  {
    "label": "FEmitShaderScopeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitShaderScopeEntry"
  },
  {
    "label": "FEmitShaderNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitShaderNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFormatArgVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatArgVariant"
  },
  {
    "label": "FEmitCustomHLSLInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitCustomHLSLInput"
  },
  {
    "label": "FEmitCustomHLSL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitCustomHLSL"
  },
  {
    "label": "FPreshaderLocalPHIScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreshaderLocalPHIScope"
  },
  {
    "label": "FTargetParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetParameters"
  },
  {
    "label": "FConnectionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectionKey"
  },
  {
    "label": "FEmitContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitContext"
  },
  {
    "label": "FCustomDataWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomDataWrapper"
  },
  {
    "label": "TCustomDataWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCustomDataWrapper"
  },
  {
    "label": "FPreshaderLoopScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreshaderLoopScope"
  },
  {
    "label": "FEmitOwnerScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmitOwnerScope"
  },
  {
    "label": "FEmitShaderScopeEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" Misc / StringBuilder . h \" # include \" Misc / MemStack . h \" # include \" Misc / GeneratedTypeName . h \" # include \" RHIDefinitions . h \" # include \" RHIShaderPlatform . h \" # include \" RHIFeatureLevel . h \" # include \" HLSLTree / HLSLTreeTypes . h \" # include \" HLSLTree / HLSLTreeHash . h \" # include \" MaterialShared . h \" class FMaterial ; class FMaterialCompilationOutput ; class ITargetPlatform ; namespace UE::Shader { class FPreshaderData ; } namespace UE::HLSLTree { class FErrorHandlerInterface ; class FNode ; class FOwnedNode ; class FScope ; class FExpression ; class FFunction ; class FRequestedType ; class FPreparedType ; class FPrepareValueResult ; class FEmitScope ; class FEmitShaderExpression ; class FEmitShaderStatement ; struct FEmitPreshaderScope ; struct FEmitValuePreshaderResult ; struct FEmitShaderScopeEntry {)",
    "insertText": "FEmitShaderScopeEntry()"
  },
  {
    "label": "FEmitShaderScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEmitShaderScopeEntry(FEmitScope* InScope, int32 InIndent, FStringBuilderBase& InCode) : Scope(InScope), Code(&InCode), Indent(InIndent)"
  },
  {
    "label": "EmitShaderCode()",
    "kind": "Method",
    "detail": "Function (} FEmitScope* Scope = nullptr ; FStringBuilderBase* Code = nullptr ; int32 Indent = 0 ; } ; using FEmitShaderScopeStack = TArray<FEmitShaderScopeEntry,TInlineAllocator<1 6>> ; class FEmitShaderNode { public : void)",
    "insertText": "EmitShaderCode(FEmitShaderScopeStack& Stack, int32 Indent, FStringBuilderBase& OutString)"
  },
  {
    "label": "AsExpression()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "AsExpression()"
  },
  {
    "label": "FEmitShaderExpression()",
    "kind": "Method",
    "detail": "Function (FEmitScope* Scope = nullptr ; FEmitShaderNode* NextScopedNode = nullptr ; TArrayView<FEmitShaderNode*> Dependencies ; } ; using FEmitShaderDependencies = TArray<FEmitShaderNode*,TInlineAllocator<8>> ; class FEmitShaderExpression final : public FEmitShaderNode { public :)",
    "insertText": "FEmitShaderExpression(FEmitScope& InScope, TArrayView<FEmitShaderNode*> InDependencies, const Shader::FType& InType, FXxHash64 InHash) : FEmitShaderNode(InScope, InDependencies) , Type(InType) , Hash(InHash)"
  },
  {
    "label": "AsStatement()",
    "kind": "Method",
    "detail": "Function (FEmitShaderStatement*)",
    "insertText": "AsStatement()"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(FEmitShaderExpression* InValue) : Type(EFormatArgType::ShaderValue), ShaderValue(InValue)"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(const TCHAR* InValue) : Type(EFormatArgType::String), String(InValue)"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(int32 InValue) : Type(EFormatArgType::Int), Int(InValue)"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(uint32 InValue) : Type(EFormatArgType::Uint), Uint(InValue)"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(float InValue) : Type(EFormatArgType::Float), Float(InValue)"
  },
  {
    "label": "FFormatArgVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFormatArgVariant(bool InValue) : Type(EFormatArgType::Bool), Bool(InValue)"
  },
  {
    "label": "BuildFormatArgList()",
    "kind": "Method",
    "detail": "Function (} EFormatArgType Type = EFormatArgType::Void ; union { FEmitShaderExpression* ShaderValue ; const TCHAR* String ; int32 Int ; uint32 Uint ; float Float ; bool Bool ; } ; } ; using FFormatArgList = TArray<FFormatArgVariant,TInlineAllocator<8>> ; namespace Private { void)",
    "insertText": "BuildFormatArgList(FFormatArgList&)"
  },
  {
    "label": "BuildFormatArgList()",
    "kind": "Method",
    "detail": "Function (} template<Type,. . . Types> void)",
    "insertText": "BuildFormatArgList(FFormatArgList& OutList, Type Arg, Types... Args)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutList .)",
    "insertText": "Add(Arg)"
  },
  {
    "label": "BuildFormatArgList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFormatArgList(OutList, Forward<Types>(Args)...)"
  },
  {
    "label": "InternalFormatStrings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InternalFormatStrings(FStringBuilderBase* OutString0, FStringBuilderBase* OutString1, FEmitShaderDependencies& OutDependencies, FStringView Format0, FStringView Format1, const FFormatArgList& ArgList)"
  },
  {
    "label": "FormatString()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> void)",
    "insertText": "FormatString(FStringBuilderBase& OutString, FEmitShaderDependencies& OutDependencies, const FormatType& Format, Types... Args)"
  },
  {
    "label": "BuildFormatArgList()",
    "kind": "Method",
    "detail": "Function (FFormatArgList ArgList ;)",
    "insertText": "BuildFormatArgList(ArgList, Forward<Types>(Args)...)"
  },
  {
    "label": "InternalFormatStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFormatStrings(&OutString, nullptr, OutDependencies, Format, FStringView(), ArgList)"
  },
  {
    "label": "FormatStrings()",
    "kind": "Method",
    "detail": "Function (} template<FormatType0,FormatType1,. . . Types> void)",
    "insertText": "FormatStrings(FStringBuilderBase& OutString0, FStringBuilderBase& OutString1, FEmitShaderDependencies& OutDependencies, const FormatType0& Format0, const FormatType1& Format1, Types... Args)"
  },
  {
    "label": "InternalFormatStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFormatStrings(&OutString0, &OutString1, OutDependencies, Format0, Format1, ArgList)"
  },
  {
    "label": "FindSharedParent()",
    "kind": "Method",
    "detail": "Function (} enum class EEmitScopeState : uint8 { Uninitialized,Initializing,Live,Dead,} ; class FEmitScope { public : FEmitScope*)",
    "insertText": "FindSharedParent(FEmitScope* Lhs, FEmitScope* Rhs)"
  },
  {
    "label": "HasParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasParent(const FEmitScope* InParent)"
  },
  {
    "label": "IsLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoop()"
  },
  {
    "label": "FindLoop()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "FindLoop()"
  },
  {
    "label": "EmitShaderCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitShaderCode(FEmitShaderScopeStack& Stack)"
  },
  {
    "label": "IsScopeDead()",
    "kind": "Method",
    "detail": "Function (FEmitScope* ParentScope = nullptr ; FStatement* OwnerStatement = nullptr ; FStatement* ContainedStatement = nullptr ; FEmitShaderNode* FirstNode = nullptr ; int32 NestedLevel = 0 ; EEmitScopeState State = EEmitScopeState::Uninitialized ; EExpressionEvaluation Evaluation = EExpressionEvaluation::None ; } ; bool)",
    "insertText": "IsScopeDead(const FEmitScope* Scope)"
  },
  {
    "label": "ZeroExtendScalar()",
    "kind": "Method",
    "detail": "Function (} const FExpression* ExpressionLocalPHI ; int32 ValueStackPosition ; } ; enum class EEmitCastFlags : uint32 { None = 0 u,)",
    "insertText": "ZeroExtendScalar(1u << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EEmitCastFlags)"
  },
  {
    "label": "FTargetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTargetParameters()"
  },
  {
    "label": "FTargetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTargetParameters(EShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel, const ITargetPlatform* InTargetPlatform) : ShaderPlatform(InShaderPlatform) , FeatureLevel(InFeatureLevel) , TargetPlatform(InTargetPlatform)"
  },
  {
    "label": "IsGenericTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGenericTarget()"
  },
  {
    "label": "FConnectionKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConnectionKey(const UObject* InInputObject, const FExpression* InOutputExpression) : InputObject(InInputObject), OutputExpression(InOutputExpression)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} const UObject* InputObject = nullptr ; const FExpression* OutputExpression = nullptr ; } ; uint32)",
    "insertText": "GetTypeHash(const FConnectionKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FConnectionKey& Lhs, const FConnectionKey& Rhs)"
  },
  {
    "label": "FEmitContext()",
    "kind": "Method",
    "detail": "Function (} class FEmitContext { public :)",
    "insertText": "FEmitContext(FMemStackBase& InAllocator, const FTargetParameters& InTargetParameters, FErrorHandlerInterface& InErrors, const Shader::FStructTypeRegistry& InTypeRegistry)"
  },
  {
    "label": "FEmitContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEmitContext()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (template<StringType> bool)",
    "insertText": "Error(const StringType& InError)"
  },
  {
    "label": "Errorf()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> bool)",
    "insertText": "Errorf(const FormatType& Format, Types... Args)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String ; String .)",
    "insertText": "Appendf(Format, Forward<Types>(Args)...)"
  },
  {
    "label": "AcquireData()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "AcquireData()"
  },
  {
    "label": "HashValue()",
    "kind": "Method",
    "detail": "Function (const FXxHash64 TypeHash =)",
    "insertText": "HashValue(GetGeneratedTypeName<T>())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TCustomDataWrapper<T>* Wrapper = static_cast<TCustomDataWrapper<)",
    "insertText": "T(InternalFindData(TypeHash))"
  },
  {
    "label": "InternalRegisterData()",
    "kind": "Method",
    "detail": "Function (Wrapper = new TCustomDataWrapper<T> ;)",
    "insertText": "InternalRegisterData(TypeHash, Wrapper)"
  },
  {
    "label": "FindData()",
    "kind": "Method",
    "detail": "Function (} return Wrapper -> Data ; } template<T> const T&)",
    "insertText": "FindData()"
  },
  {
    "label": "GetPreparedType()",
    "kind": "Method",
    "detail": "Function (FPreparedType)",
    "insertText": "GetPreparedType(const FExpression* Expression, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetResultType()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetResultType(const FExpression* Expression, const FRequestedType& RequestedType)"
  },
  {
    "label": "GetTypeForPinColoring()",
    "kind": "Method",
    "detail": "Function (Shader::FType)",
    "insertText": "GetTypeForPinColoring(const FExpression* Expression)"
  },
  {
    "label": "GetEvaluation()",
    "kind": "Method",
    "detail": "Function (EExpressionEvaluation)",
    "insertText": "GetEvaluation(const FExpression* Expression, const FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "PrepareExpression()",
    "kind": "Method",
    "detail": "Function (FPreparedType)",
    "insertText": "PrepareExpression(const FExpression* InExpression, FEmitScope& Scope, const FRequestedType& RequestedType)"
  },
  {
    "label": "MarkInputType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkInputType(const FExpression* InExpression, const Shader::FType& Type)"
  },
  {
    "label": "InternalPrepareScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "InternalPrepareScope(FScope* Scope, FScope* ParentScope)"
  },
  {
    "label": "PrepareScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "PrepareScope(FScope* Scope)"
  },
  {
    "label": "PrepareScopeWithParent()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "PrepareScopeWithParent(FScope* Scope, FScope* ParentScope)"
  },
  {
    "label": "MarkScopeEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScopeEvaluation(FEmitScope& EmitParentScope, FScope* Scope, EExpressionEvaluation Evaluation)"
  },
  {
    "label": "MarkScopeDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScopeDead(FEmitScope& EmitParentScope, FScope* Scope)"
  },
  {
    "label": "EmitPreshaderScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitPreshaderScope(const FScope* Scope, const FRequestedType& RequestedType, TArrayView<const FEmitPreshaderScope> PreshaderScopes, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "EmitPreshaderScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitPreshaderScope(FEmitScope& EmitScope, const FRequestedType& RequestedType, TArrayView<const FEmitPreshaderScope> PreshaderScopes, Shader::FPreshaderData& OutPreshader)"
  },
  {
    "label": "AcquireEmitScopeWithParent()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "AcquireEmitScopeWithParent(const FScope* Scope, FEmitScope* EmitParentScope)"
  },
  {
    "label": "AcquireEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "AcquireEmitScope(const FScope* Scope)"
  },
  {
    "label": "FindEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "FindEmitScope(const FScope* Scope)"
  },
  {
    "label": "InternalEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope*)",
    "insertText": "InternalEmitScope(const FScope* Scope)"
  },
  {
    "label": "MakeDependencies()",
    "kind": "Method",
    "detail": "Function (template<T> TArrayView<FEmitShaderNode*>)",
    "insertText": "MakeDependencies(T*& Dependency)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finalize()"
  },
  {
    "label": "ResetPastRequestedTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPastRequestedTypes()"
  },
  {
    "label": "InternalEmitExpression()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "InternalEmitExpression(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, bool bInline, const Shader::FType& Type, FStringView Code)"
  },
  {
    "label": "EmitExpressionWithDependencies()",
    "kind": "Method",
    "detail": "Function (template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitExpressionWithDependencies(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "LocalDependencies()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<2 0 4 8> String ; FEmitShaderDependencies)",
    "insertText": "LocalDependencies(Dependencies)"
  },
  {
    "label": "EmitExpressionWithDependency()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitExpressionWithDependency(FEmitScope& Scope, FEmitShaderNode* Dependency, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitInlineExpressionWithDependencies()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitInlineExpressionWithDependencies(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitInlineExpressionWithDependency()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitInlineExpressionWithDependency(FEmitScope& Scope, FEmitShaderNode* Dependency, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitExpression()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitExpression(FEmitScope& Scope, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitInlineExpression()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderExpression*)",
    "insertText": "EmitInlineExpression(FEmitScope& Scope, const Shader::FType& Type, const FormatType& Format, Types... Args)"
  },
  {
    "label": "InternalEmitStatement()",
    "kind": "Method",
    "detail": "Function (} FEmitShaderStatement*)",
    "insertText": "InternalEmitStatement(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, EEmitScopeFormat ScopeFormat, FEmitScope* NestedScope0, FEmitScope* NestedScope1, FStringView Code0, FStringView Code1)"
  },
  {
    "label": "EmitFormatStatementInternal()",
    "kind": "Method",
    "detail": "Function (template<FormatType0,FormatType1,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitFormatStatementInternal(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, EEmitScopeFormat ScopeFormat, FEmitScope* NestedScope0, FEmitScope* NestedScope1, const FormatType0& Format0, const FormatType1& Format1, Types... Args)"
  },
  {
    "label": "EmitStatementWithDependencies()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitStatementWithDependencies(FEmitScope& Scope, TArrayView<FEmitShaderNode*> Dependencies, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitStatementWithDependency()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitStatementWithDependency(FEmitScope& Scope, FEmitShaderNode* Dependency, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitStatement()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitStatement(FEmitScope& Scope, const FormatType& Format, Types... Args)"
  },
  {
    "label": "EmitNextScopeWithDependency()",
    "kind": "Method",
    "detail": "Function (} FEmitShaderStatement*)",
    "insertText": "EmitNextScopeWithDependency(FEmitScope& Scope, FEmitShaderNode* Dependency, FScope* NextScope)"
  },
  {
    "label": "InternalEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope* EmitScope =)",
    "insertText": "InternalEmitScope(NextScope)"
  },
  {
    "label": "EmitNextScope()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FEmitShaderStatement*)",
    "insertText": "EmitNextScope(FEmitScope& Scope, FScope* NextScope)"
  },
  {
    "label": "EmitNestedScope()",
    "kind": "Method",
    "detail": "Function (} template<FormatType,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitNestedScope(FEmitScope& Scope, FScope* NestedScope, const FormatType& Format, Types... Args)"
  },
  {
    "label": "InternalEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope* EmitScope =)",
    "insertText": "InternalEmitScope(NestedScope)"
  },
  {
    "label": "FormatString()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String ; FEmitShaderDependencies LocalDependencies ;)",
    "insertText": "FormatString(String, LocalDependencies, Format, Forward<Types>(Args)...)"
  },
  {
    "label": "EmitNestedScopes()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<FormatType0,FormatType1,. . . Types> FEmitShaderStatement*)",
    "insertText": "EmitNestedScopes(FEmitScope& Scope, FScope* NestedScope0, FScope* NestedScope1, const FormatType0& Format0, const FormatType1& Format1, Types... Args)"
  },
  {
    "label": "InternalEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope* EmitScope0 =)",
    "insertText": "InternalEmitScope(NestedScope0)"
  },
  {
    "label": "InternalEmitScope()",
    "kind": "Method",
    "detail": "Function (FEmitScope* EmitScope1 =)",
    "insertText": "InternalEmitScope(NestedScope1)"
  },
  {
    "label": "FormatStrings()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String0 ; TStringBuilder<1 0 2 4> String1 ; FEmitShaderDependencies LocalDependencies ;)",
    "insertText": "FormatStrings(String0, String1, LocalDependencies, Format0, Format1, Forward<Types>(Args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(EmitScope0)"
  },
  {
    "label": "FormatString()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> String ; FEmitShaderDependencies LocalDependencies ;)",
    "insertText": "FormatString(String, LocalDependencies, Format0, Forward<Types>(Args)...)"
  },
  {
    "label": "EmitPreshaderOrConstant()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FEmitShaderExpression*)",
    "insertText": "EmitPreshaderOrConstant(FEmitScope& Scope, const FRequestedType& RequestedType, const Shader::FType& ResultType, const FExpression* Expression)"
  },
  {
    "label": "EmitConstantZero()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "EmitConstantZero(FEmitScope& Scope, const Shader::FType& Type)"
  },
  {
    "label": "EmitCast()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "EmitCast(FEmitScope& Scope, FEmitShaderExpression* ShaderValue, const Shader::FType& DestType, EEmitCastFlags Flags = EEmitCastFlags::None)"
  },
  {
    "label": "EmitCustomHLSL()",
    "kind": "Method",
    "detail": "Function (FEmitShaderExpression*)",
    "insertText": "EmitCustomHLSL(FEmitScope& Scope, FStringView DeclarationCode, FStringView FunctionCode, TConstArrayView<FCustomHLSLInput> Inputs, const Shader::FStructType* OutputType)"
  },
  {
    "label": "FCustomDataWrapper()",
    "kind": "Method",
    "detail": "Function (class FCustomDataWrapper { public : ~)",
    "insertText": "FCustomDataWrapper()"
  },
  {
    "label": "InternalError()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class TCustomDataWrapper : public FCustomDataWrapper { public : T Data ; } ; bool)",
    "insertText": "InternalError(FStringView ErrorMessage)"
  },
  {
    "label": "InternalRegisterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalRegisterData(FXxHash64 Hash, FCustomDataWrapper* Data)"
  },
  {
    "label": "InternalFindData()",
    "kind": "Method",
    "detail": "Function (FCustomDataWrapper*)",
    "insertText": "InternalFindData(FXxHash64 Hash)"
  },
  {
    "label": "FEmitOwnerScope()",
    "kind": "Method",
    "detail": "Function (FMemStackBase* Allocator = nullptr ; FErrorHandlerInterface* Errors = nullptr ; const Shader::FStructTypeRegistry* TypeRegistry = nullptr ; FTargetParameters TargetParameters ; EShaderFrequency ShaderFrequency = SF_Pixel ; bool bMarkLiveValues = false ; bool bUseAnalyticDerivatives = false ; bool bCompiledShadingModels = false ; bool bUsesSkyAtmosphere = false ; bool bUsesSpeedTree = false ; bool bUsesSphericalParticleOpacity = false ; bool bUsesWorldPositionExcludingShaderOffsets = false ; uint32 DynamicParticleParameterMask = 0 u ; FActiveStructFieldStack ActiveStructFieldStack ; TArray<const FOwnedNode*,TInlineAllocator<3 2>> OwnerStack ; TArray<FEmitShaderNode*> EmitNodes ; TMap<const FScope*,FEmitScope*> EmitScopeMap ; TMap<FXxHash64,FPrepareValueResult*> PrepareValueMap ; TMap<FXxHash64,FRequestedType*> RequestedTypeTracker ; TMap<FMaterialParameterInfo,FMaterialParameterValue> SeenStaticParameterValues ; TMap<const FExpression*,FEmitScope*> PrepareLocalPHIMap ; TMap<FXxHash64,FEmitShaderExpression*> EmitLocalPHIMap ; TMap<FXxHash64,FEmitShaderExpression*> EmitExpressionMap ; TMap<FXxHash64,FEmitShaderExpression*> EmitPreshaderMap ; TMap<FXxHash64,FEmitShaderExpression*> EmitValueMap ; TMap<const FFunction*,FEmitShaderNode*> EmitFunctionMap ; TMap<FXxHash64,FEmitCustomHLSL> EmitCustomHLSLMap ; TArray<struct FPreshaderLoopScope*> PreshaderLoopScopes ; TArray<const FPreshaderLocalPHIScope*> PreshaderLocalPHIScopes ; TMap<FXxHash64,FCustomDataWrapper*> CustomDataMap ; TMap<FConnectionKey,Shader::FType> ConnectionMap ; int32 PreshaderStackPosition = 0 ; int32 NumErrors = 0 ; int32 NumExpressionLocals = 0 ; int32 NumExpressionLocalPHIs = 0 ; const FMaterial* Material = nullptr ; const UMaterialInterface* MaterialInterface = nullptr ; FMaterialCompilationOutput* MaterialCompilationOutput = nullptr ; uint32 UniformPreshaderOffset = 0 u ; uint32 CurrentBoolUniformOffset = ~ 0 u ; uint32 CurrentNumBoolComponents = 3 2 u ; } ; struct FEmitOwnerScope {)",
    "insertText": "FEmitOwnerScope(FEmitContext& InContext, const FOwnedNode* InNode) : Context(InContext), Node(InNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InContext . OwnerStack .)",
    "insertText": "Add(InNode)"
  },
  {
    "label": "FEmitOwnerScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEmitOwnerScope()"
  },
  {
    "label": "MoveToScope()",
    "kind": "Method",
    "detail": "Function (} FEmitContext& Context ; const FOwnedNode* Node ; } ; namespace Private { void)",
    "insertText": "MoveToScope(FEmitShaderNode* EmitNode, FEmitScope& Scope)"
  },
  {
    "label": "EmitPreshaderField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitPreshaderField(FEmitContext& Context, TMemoryImageArray<FMaterialUniformPreshaderHeader>& UniformPreshaders, TMemoryImageArray<FMaterialUniformPreshaderField>& UniformPreshaderFields, Shader::FPreshaderData& UniformPreshaderData, FMaterialUniformPreshaderHeader*& PreshaderHeader, TFunction<void (FEmitValuePreshaderResult&)> EmitPreshaderOpcode, const Shader::FValueTypeDescription& TypeDesc, int32 ComponentIndex, FStringBuilderBase& FormattedCode)"
  }
]