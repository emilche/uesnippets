[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConsole"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "HActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HActor"
  },
  {
    "label": "HBSPBrushVert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HBSPBrushVert"
  },
  {
    "label": "HStaticMeshVert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HStaticMeshVert"
  },
  {
    "label": "HTranslucentActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HTranslucentActor"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FActorIteratorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorIteratorState"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "TActorIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIteratorBase"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "FActorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorIterator"
  },
  {
    "label": "TActorIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIteratorBase"
  },
  {
    "label": "FActorRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorRange"
  },
  {
    "label": "TActorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIterator"
  },
  {
    "label": "TActorIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIteratorBase"
  },
  {
    "label": "TActorRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorRange"
  },
  {
    "label": "FSelectedActorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedActorIterator"
  },
  {
    "label": "TActorIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIteratorBase"
  },
  {
    "label": "FSelectedActorRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectedActorRange"
  },
  {
    "label": "FConsoleOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleOutputDevice"
  },
  {
    "label": "UConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConsole"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FDebugDisplayProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugDisplayProperty"
  },
  {
    "label": "FSubLevelActorDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubLevelActorDetails"
  },
  {
    "label": "FSubLevelStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubLevelStatus"
  },
  {
    "label": "containing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "containing"
  },
  {
    "label": "FContentComparisonAssetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContentComparisonAssetInfo"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FContentComparisonHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentComparisonHelper"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "EAssetToLoad",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAssetToLoad"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FStripDataFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStripDataFlags"
  },
  {
    "label": "strip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "strip"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (retrieved)",
    "insertText": "Swap(LocalWorldActors, ActorArray)"
  },
  {
    "label": "FActorIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FActorIterator(Range.World, Range.Flags)"
  },
  {
    "label": "FActorIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FActorIterator(EActorIteratorType::End)"
  },
  {
    "label": "FSelectedActorIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FSelectedActorIterator(Range.World)"
  },
  {
    "label": "FSelectedActorIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FSelectedActorIterator(EActorIteratorType::End)"
  },
  {
    "label": "DrawStatsHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStatsHUD( UWorld* InWorld, FViewport* Viewport, FCanvas* Canvas, UCanvas* CanvasObject, TArray<struct FDebugDisplayProperty>& DebugProperties, const FVector& ViewLocation, const FRotator& ViewRotation )"
  },
  {
    "label": "GetSubLevelsStatus()",
    "kind": "Method",
    "detail": "Function (TArray<FSubLevelStatus>)",
    "insertText": "GetSubLevelsStatus( UWorld* InWorld, bool SortByActorCount = false )"
  },
  {
    "label": "FContentComparisonHelper()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FContentComparisonHelper()"
  },
  {
    "label": "CompareClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareClasses(const FString& InBaseClassName, int32 InRecursionDepth)"
  },
  {
    "label": "CompareClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareClasses(const FString& InBaseClassName, const TArray<FString>& InBaseClassesToIgnore, int32 InRecursionDepth)"
  },
  {
    "label": "RecursiveObjectCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveObjectCollection(UObject* InStartObject, int32 InCurrDepth, int32 InMaxDepth, TMap<UObject*,bool>& OutCollectedReferences)"
  },
  {
    "label": "FindOrLoadAssetsByPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOrLoadAssetsByPath(const FString& Path, TArray<UObject*>& OutAssets, EAssetToLoad Type)"
  },
  {
    "label": "FStripDataFlags()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FStripDataFlags(FArchive& Ar, uint8 InClassFlags = 0, const FPackageFileVersion& InVersion = GOldestLoadablePackageFileUEVersion)"
  },
  {
    "label": "FStripDataFlags()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FStripDataFlags( FArchive& Ar, uint8 InGlobalFlags, uint8 InClassFlags, const FPackageFileVersion& InVersion = GOldestLoadablePackageFileUEVersion)"
  },
  {
    "label": "FStripDataFlags()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FStripDataFlags(FStructuredArchive::FSlot Slot, uint8 InClassFlags = 0, const FPackageFileVersion& InVersion = GOldestLoadablePackageFileUEVersion)"
  },
  {
    "label": "FStripDataFlags()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FStripDataFlags(FStructuredArchive::FSlot Slot, uint8 InGlobalFlags, uint8 InClassFlags, const FPackageFileVersion& InVersion = GOldestLoadablePackageFileUEVersion)"
  },
  {
    "label": "IsAudioVisualDataStripped()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsAudioVisualDataStripped()"
  },
  {
    "label": "CheckAndReportInvalidUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndReportInvalidUsage(const UObject* Owner, const FName& PropertyName, const UTexture* Texture)"
  }
]