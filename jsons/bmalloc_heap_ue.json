[
  {
    "label": "bmalloc_allocate()",
    "kind": "Method",
    "detail": "Function (# ifndef BMALLOC_HEAP_UE_H # define BMALLOC_HEAP_UE_H # include \" pas_reallocate_free_mode_ue . h \" # ifdef __cplusplus \" C \" { # endif void*)",
    "insertText": "bmalloc_allocate(size_t size)"
  },
  {
    "label": "bmalloc_try_allocate_with_alignment()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "bmalloc_try_allocate_with_alignment(size_t size, size_t alignment)"
  },
  {
    "label": "bmalloc_allocate_with_alignment()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "bmalloc_allocate_with_alignment(size_t size, size_t alignment)"
  },
  {
    "label": "bmalloc_try_reallocate_with_alignment()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "bmalloc_try_reallocate_with_alignment(void* old_ptr, size_t new_size, size_t alignment, pas_reallocate_free_mode free_mode)"
  },
  {
    "label": "bmalloc_reallocate_with_alignment()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "bmalloc_reallocate_with_alignment(void* old_ptr, size_t new_size, size_t alignment, pas_reallocate_free_mode free_mode)"
  },
  {
    "label": "bmalloc_deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bmalloc_deallocate(void*)"
  },
  {
    "label": "bmalloc_get_allocation_size()",
    "kind": "Method",
    "detail": "Function (PAS_BAPI size_t)",
    "insertText": "bmalloc_get_allocation_size(void* ptr)"
  }
]