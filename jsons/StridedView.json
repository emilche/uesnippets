[
  {
    "label": "TStridedView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStridedView"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainersFwd . h \" # include \" Templates / UnrealTemplate . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / ArrayView . h \" # include \" HAL / PlatformString . h \" # include<type_traits> template<InElementType,InSizeType> class TStridedView { public : using ElementType = InElementType ; using SizeType = InSizeType ;)",
    "insertText": "static_assert(std::is_signed_v<SizeType>, \"TStridedView only supports signed index types\")"
  },
  {
    "label": "TStridedView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStridedView()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<OtherElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherElementType**, ElementType* const*>) > FORCEINLINE TStridedView(SizeType InBytesBetweenElements, OtherElementType* InFirstElementPtr, SizeType InNumElements) : FirstElementPtr(InFirstElementPtr) , BytesBetweenElements(InBytesBetweenElements) , NumElements(InNumElements)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherElementType**, ElementType* const*>) > FORCEINLINE TStridedView(const TStridedView<OtherElementType, SizeType>& Other) : FirstElementPtr(nullptr) , BytesBetweenElements(Other.GetStride()) , NumElements(Other.Num())"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (FirstElementPtr =& Other [ 0 ] ; } } bool)",
    "insertText": "IsValidIndex(SizeType Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(SizeType Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct FIterator { const TStridedView* Owner ; SizeType Index ; FIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIterator& Other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; FIterator)",
    "insertText": "begin()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RangeCheck(SizeType Index)"
  },
  {
    "label": "ByteType()",
    "kind": "Method",
    "detail": "Function (using ByteType = std::conditional_t<std::is_const_v<ElementType>,const uint8,uint8> ; ByteType* AsBytes = reinterpret_cast<)",
    "insertText": "ByteType(FirstElementPtr)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (ElementType* AsElement = reinterpret_cast<)",
    "insertText": "ElementType(AsBytes + uint64(Index) * uint64(BytesBetweenElements))"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeCheck(Index)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (} private : ElementType* FirstElementPtr = nullptr ; SizeType BytesBetweenElements = 0 ; SizeType NumElements = 0 ; } ; template<ElementType> TStridedView<ElementType>)",
    "insertText": "MakeStridedView(int32 BytesBetweenElements, ElementType* FirstElement, int32 Count)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> TConstStridedView<ElementType>)",
    "insertText": "MakeConstStridedView(int32 BytesBetweenElements, const ElementType* FirstElement, int32 Count)"
  },
  {
    "label": "MakeStridedViewOfBase()",
    "kind": "Method",
    "detail": "Function (} template<BaseStructureType,DerivedStructureType> TStridedView<BaseStructureType>)",
    "insertText": "MakeStridedViewOfBase(TArrayView<DerivedStructureType> StructuredView)"
  },
  {
    "label": "MakeConstStridedViewOfBase()",
    "kind": "Method",
    "detail": "Function (} template<BaseStructureType,DerivedStructureType> TConstStridedView<BaseStructureType>)",
    "insertText": "MakeConstStridedViewOfBase(TConstArrayView<DerivedStructureType> StructuredView)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (} template<StructureType> TStridedView<StructureType>)",
    "insertText": "MakeStridedView(TArrayView<StructureType> StructuredView)"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (} template<StructureType> TConstStridedView<StructureType>)",
    "insertText": "MakeConstStridedView(TConstArrayView<StructureType> StructuredView)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<StructuredRangeType,ElementType,StructureType,)",
    "insertText": "decltype(GetData(std::declval<StructuredRangeType>()))* = nullptr, decltype(GetNum(std::declval<StructuredRangeType>()))* = nullptr > TStridedView<ElementType> MakeStridedView(StructuredRangeType&& StructuredRange, ElementType StructureType::* Member)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<StructuredRangeType,ElementType,StructureType,)",
    "insertText": "decltype(GetData(std::declval<StructuredRangeType>()))* = nullptr, decltype(GetNum(std::declval<StructuredRangeType>()))* = nullptr > TConstStridedView<ElementType> MakeConstStridedView(StructuredRangeType&& StructuredRange, const ElementType StructureType::* Member)"
  },
  {
    "label": "MakeStridedView()",
    "kind": "Method",
    "detail": "Function (} template<StructuredRangeType> auto)",
    "insertText": "MakeStridedView(StructuredRangeType&& StructuredRange) -> TStridedView<std::remove_reference_t<decltype(*GetData(StructuredRange))"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (auto StructuredView =)",
    "insertText": "MakeArrayView(Forward<StructuredRangeType>(StructuredRange))"
  },
  {
    "label": "MakeConstStridedView()",
    "kind": "Method",
    "detail": "Function (} template<StructuredRangeType> auto)",
    "insertText": "MakeConstStridedView(StructuredRangeType&& StructuredRange) -> TConstStridedView<std::remove_reference_t<decltype(*GetData(StructuredRange))"
  }
]