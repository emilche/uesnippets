[
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FAudioVirtualLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVirtualLoop"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FAudioDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDebugger"
  },
  {
    "label": "FDebugNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugNames"
  },
  {
    "label": "FAudioDebugger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDefines . h \" # include \" Audio . h \" # if ENABLE_AUDIO_DEBUG struct FActiveSound ; struct FAudioVirtualLoop ; struct FListener ; struct FWaveInstance ; class FSoundSource ; class FViewportClient ; class USoundWave ; class UWorld ; namespace Audio { namespace DebugStatNames { const FName SoundWaves ; const FName SoundCues ; const FName Sounds ; const FName SoundMixes ; const FName SoundModulation ; const FName SoundReverb ; const FName AudioStreaming ; const FName DebugSounds ; const FName LongSoundNames ; } class FAudioDebugger { public :)",
    "insertText": "FAudioDebugger()"
  },
  {
    "label": "FDebugNames()",
    "kind": "Method",
    "detail": "Function (struct FDebugNames { TArray<FName> SoloSoundClass ; TArray<FName> SoloSoundWave ; TArray<FName> SoloSoundCue ; TArray<FName> MuteSoundClass ; TArray<FName> MuteSoundWave ; TArray<FName> MuteSoundCue ; FString DebugAudioMixerSoundName ; FString DebugSoundName ; bool bDebugSoundName ;)",
    "insertText": "FDebugNames() : bDebugSoundName(false)"
  },
  {
    "label": "DrawDebugInfo()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "DrawDebugInfo(const FSoundSource& SoundSource)"
  },
  {
    "label": "DrawDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugInfo(const FActiveSound& ActiveSound, const TArray<FWaveInstance*>& ThisSoundsWaveInstances, const float DeltaTime)"
  },
  {
    "label": "DrawDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugInfo(UWorld& World, const TArray<FListener>& Listeners)"
  },
  {
    "label": "DrawDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugInfo(const FAudioVirtualLoop& VirtualLoop)"
  },
  {
    "label": "DrawDebugStats()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawDebugStats(UWorld& World, FViewport* Viewport, FCanvas* Canvas, int32 Y)"
  },
  {
    "label": "DrawDebugStatsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DrawDebugStatsEnabled()"
  },
  {
    "label": "PostStatModulatorHelp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostStatModulatorHelp(UWorld* World, FCommonViewportClient* ViewportClient, const TCHAR* Stream)"
  },
  {
    "label": "RenderStatCues()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatCues(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y)"
  },
  {
    "label": "RenderStatMixes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatMixes(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y)"
  },
  {
    "label": "RenderStatModulators()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatModulators(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "RenderStatReverb()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatReverb(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y)"
  },
  {
    "label": "RenderStatSounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatSounds(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y)"
  },
  {
    "label": "RenderStatWaves()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatWaves(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y)"
  },
  {
    "label": "RenderStatStreaming()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatStreaming(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "RemoveDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDevice(const FAudioDevice& AudioDevice)"
  },
  {
    "label": "ResolveDesiredStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDesiredStats(FViewportClient* ViewportClient)"
  },
  {
    "label": "SendUpdateResultsToGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUpdateResultsToGameThread(const FAudioDevice& AudioDevice, const int32 FirstActiveIndex)"
  },
  {
    "label": "UpdateAudibleInactiveSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudibleInactiveSounds(const uint32 FirstIndex, const TArray<FWaveInstance*>& WaveInstances)"
  },
  {
    "label": "LogSubtitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogSubtitle(const TCHAR* InCmd, USoundWave& InSoundWave)"
  },
  {
    "label": "ClearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStats(const FName StatsToToggle, UWorld* InWorld)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const TSet<FName>& StatsToToggle, UWorld* InWorld)"
  },
  {
    "label": "IsVirtualLoopVisualizeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVirtualLoopVisualizeEnabled()"
  },
  {
    "label": "ClearMutesAndSolos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMutesAndSolos()"
  },
  {
    "label": "DumpActiveSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpActiveSounds()"
  },
  {
    "label": "IsVisualizeDebug3dEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizeDebug3dEnabled()"
  },
  {
    "label": "ToggleVisualizeDebug3dEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleVisualizeDebug3dEnabled()"
  },
  {
    "label": "OnBeginPIE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnBeginPIE()"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE()"
  },
  {
    "label": "QuerySoloMuteSoundClass()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "QuerySoloMuteSoundClass(const FString& Name, bool& bOutIsSoloed, bool& bOutIsMuted, FString& OutReason)"
  },
  {
    "label": "QuerySoloMuteSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySoloMuteSoundWave(const FString& Name, bool& bOutIsSoloed, bool& bOutIsMuted, FString& OutReason)"
  },
  {
    "label": "QuerySoloMuteSoundCue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySoloMuteSoundCue(const FString& Name, bool& bOutIsSoloed, bool& bOutIsMuted, FString& OutReason)"
  },
  {
    "label": "IsSoloSoundClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoloSoundClass(FName InName)"
  },
  {
    "label": "IsSoloSoundWave()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSoloSoundWave(FName InName)"
  },
  {
    "label": "IsSoloSoundCue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSoloSoundCue(FName InName)"
  },
  {
    "label": "IsMuteSoundClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMuteSoundClass(FName InName)"
  },
  {
    "label": "IsMuteSoundWave()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMuteSoundWave(FName InName)"
  },
  {
    "label": "IsMuteSoundCue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMuteSoundCue(FName InName)"
  },
  {
    "label": "ToggleSoloSoundClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleSoloSoundClass(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.SoloSoundClass, bExclusive)"
  },
  {
    "label": "ToggleSoloSoundWave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleSoloSoundWave(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.SoloSoundWave, bExclusive)"
  },
  {
    "label": "ToggleSoloSoundCue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleSoloSoundCue(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.SoloSoundCue, bExclusive)"
  },
  {
    "label": "ToggleMuteSoundClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleMuteSoundClass(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.MuteSoundClass, bExclusive)"
  },
  {
    "label": "ToggleMuteSoundWave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleMuteSoundWave(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.MuteSoundWave, bExclusive)"
  },
  {
    "label": "ToggleMuteSoundCue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleMuteSoundCue(FName InName, bool bExclusive = false)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(InName, DebugNames.MuteSoundCue, bExclusive)"
  },
  {
    "label": "SetMuteSoundCue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMuteSoundCue(FName InName, bool bInOnOff)"
  },
  {
    "label": "SetNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameArray(InName, DebugNames.MuteSoundCue, bInOnOff)"
  },
  {
    "label": "SetMuteSoundWave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMuteSoundWave(FName InName, bool bInOnOff)"
  },
  {
    "label": "SetNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameArray(InName, DebugNames.MuteSoundWave, bInOnOff)"
  },
  {
    "label": "SetSoloSoundCue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSoloSoundCue(FName InName, bool bInOnOff)"
  },
  {
    "label": "SetNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameArray(InName, DebugNames.SoloSoundCue, bInOnOff)"
  },
  {
    "label": "SetSoloSoundWave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSoloSoundWave(FName InName, bool bInOnOff)"
  },
  {
    "label": "SetNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameArray(InName, DebugNames.SoloSoundWave, bInOnOff)"
  },
  {
    "label": "SetAudioMixerDebugSound()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAudioMixerDebugSound(const TCHAR* SoundName)"
  },
  {
    "label": "SetAudioDebugSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioDebugSound(const TCHAR* SoundName)"
  },
  {
    "label": "GetAudioMixerDebugSoundName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAudioMixerDebugSoundName()"
  },
  {
    "label": "GetAudioDebugSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAudioDebugSound(FString& OutDebugSound)"
  },
  {
    "label": "DrawDebugStatsInternal()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "DrawDebugStatsInternal(UWorld& World, FViewport& Viewport, FCanvas* Canvas, int32 InY)"
  },
  {
    "label": "SetNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameArray(FName InName, TArray<FName>& InNameArray, bool bOnOff)"
  },
  {
    "label": "ToggleNameArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleNameArray(FName InName, TArray<FName>& NameArray, bool bExclusive)"
  },
  {
    "label": "ExecuteCmdOnAudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCmdOnAudioThread(TFunction<void()> Cmd)"
  },
  {
    "label": "GetDebugSoloMuteStateX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDebugSoloMuteStateX(const FString& Name, const TArray<FName>& Solos, const TArray<FName>& Mutes, bool& bOutIsSoloed, bool& bOutIsMuted, FString& OutReason)"
  },
  {
    "label": "ClearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStats(FDeviceId DeviceId, FName StatsToClear)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(FDeviceId DeviceId, const TSet<FName>& StatsToSet)"
  },
  {
    "label": "ToggleStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleStats(UWorld* World, const TSet<FName>& StatToToggle)"
  },
  {
    "label": "ToggleStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleStats(FDeviceId DeviceId, const TSet<FName>& StatsToToggle)"
  }
]