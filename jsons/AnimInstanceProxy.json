[
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FAnimBlueprintDebugData_NodeVisit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_NodeVisit"
  },
  {
    "label": "FAnimBlueprintDebugData_AttributeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_AttributeRecord"
  },
  {
    "label": "FAnimGroupInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimGroupInstance"
  },
  {
    "label": "FAnimNodePoseWatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodePoseWatch"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FAnimNode_LinkedInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedInputPose"
  },
  {
    "label": "FAnimNode_SaveCachedPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SaveCachedPose"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTickRecord"
  },
  {
    "label": "FBakedAnimationStateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakedAnimationStateMachine"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FMontageEvaluationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageEvaluationState"
  },
  {
    "label": "FNodeDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDebugData"
  },
  {
    "label": "FPoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseContext"
  },
  {
    "label": "FPoseSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseSnapshot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimSyncGroupScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSyncGroupScope"
  },
  {
    "label": "FActiveStateMachineScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveStateMachineScope"
  },
  {
    "label": "FAnimSyncParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSyncParams"
  },
  {
    "label": "PoseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoseType"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FQueuedDrawDebugItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedDrawDebugItem"
  },
  {
    "label": "FVectorEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorEntry"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrace"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FAnimNode_ControlRigInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_ControlRigInputPose"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "data"
  },
  {
    "label": "indices",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indices"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimInstanceProxy()"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimInstanceProxy(UAnimInstance* Instance)"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAnimInstanceProxy(const FAnimInstanceProxy&)"
  },
  {
    "label": "RecordNodeVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeVisit(int32 TargetNodeIndex, int32 SourceNodeIndex, float BlendWeight)"
  },
  {
    "label": "RecordNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeAttribute(const FAnimInstanceProxy& InSourceProxy, int32 InTargetNodeIndex, int32 InSourceNodeIndex, FName InAttribute)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCompactPose& Pose, int32 LinkID)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCSPose<FCompactPose>& Pose, int32 LinkID)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCompactPose& Pose, const FBlendedCurve& InCurve, int32 LinkID)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCSPose<FCompactPose>& Pose, const FBlendedCurve& InCurve, int32 LinkID)"
  },
  {
    "label": "TickAssetPlayerInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetPlayerInstances(float DeltaSeconds)"
  },
  {
    "label": "TickAssetPlayerInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetPlayerInstances()"
  },
  {
    "label": "AddAnimNotifyFromGeneratedClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimNotifyFromGeneratedClass(int32 NotifyIndex)"
  },
  {
    "label": "TriggerAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAnimNotifies(USkeletalMeshComponent* SkelMeshComp, float DeltaSeconds)"
  },
  {
    "label": "SavePoseSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePoseSnapshot(USkeletalMeshComponent* InSkeletalMeshComponent, FName SnapshotName)"
  },
  {
    "label": "RemovePoseSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "ensureAlways()",
    "kind": "Method",
    "detail": "Function (earlier)",
    "insertText": "ensureAlways(Skeleton)"
  },
  {
    "label": "ensureAlways()",
    "kind": "Method",
    "detail": "Function (earlier)",
    "insertText": "ensureAlways(SkeletalMeshComponent)"
  },
  {
    "label": "SlotEvaluatePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotEvaluatePose(const FName& SlotNodeName, const FCompactPose& SourcePose, const FBlendedCurve& SourceCurve, float InSourceWeight, FCompactPose& BlendedPose, FBlendedCurve& BlendedCurve, float InBlendWeight, float InTotalNodeWeight)"
  },
  {
    "label": "SlotEvaluatePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotEvaluatePose(const FName& SlotNodeName, const FAnimationPoseData& SourceAnimationPoseData, float InSourceWeight, FAnimationPoseData& OutBlendedAnimationPoseData, float InBlendWeight, float InTotalNodeWeight)"
  },
  {
    "label": "UpdateSlotNodeWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSlotNodeWeight(const FName& SlotNodeName, float InLocalMontageWeight, float InNodeGlobalWeight)"
  },
  {
    "label": "GetSlotInertializationRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSlotInertializationRequest(const FName& SlotName, UE::Anim::FSlotInertializationRequest& OutRequest)"
  },
  {
    "label": "GetSlotInertializationRequestData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSlotInertializationRequestData(const FName& SlotName, FInertializationRequest& OutRequest)"
  },
  {
    "label": "RegisterSlotNodeWithAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlotNodeWithAnimInstance(const FName& SlotNodeName)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "GatherDebugData_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData_WithRoot(FNodeDebugData& DebugData, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "AnimDrawDebugOnScreenMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugOnScreenMessage(const FString& DebugMessage, const FColor& Color, const FVector2D& TextScale = FVector2D::UnitVector, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugInWorldMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugInWorldMessage(const FString& DebugMessage, const FVector& TextLocation, const FColor& Color, float TextScale)"
  },
  {
    "label": "AnimDrawDebugLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugLine(const FVector& StartLoc, const FVector& EndLoc, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugDirectionalArrow(const FVector& LineStart, const FVector& LineEnd, float ArrowSize, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugSphere(const FVector& Center, float Radius, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCoordinateSystem(FVector const& AxisLoc, FRotator const& AxisRot, float Scale = 1.f, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugPlane(const FTransform& BaseTransform, float Radii, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugPoint(const FVector& Loc, float Size, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCircle(const FVector& Center, float Radius, int32 Segments, const FColor& Color, const FVector& UpVector = FVector::UpVector, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World, float Thickness = 0.f)"
  },
  {
    "label": "AnimDrawDebugCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCone(const FVector& Center, float Radius, const FVector& Direction, float AngleWidth, float AngleHeight, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World, float Thickness = 0.f)"
  },
  {
    "label": "AnimDrawDebugCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCapsule(const FVector& Center, float HalfHeight, float Radius, const FRotator& Rotation, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f)"
  },
  {
    "label": "RecordMachineWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordMachineWeight(const int32 InMachineClassIndex, const float InMachineWeight)"
  },
  {
    "label": "RecordStateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStateWeight(const int32 InMachineClassIndex, const int32 InStateIndex, const float InStateWeight, const float InElapsedTime)"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics(ETeleportType InTeleportType)"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics()"
  },
  {
    "label": "TraceMontageEvaluationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceMontageEvaluationData(const FAnimationUpdateContext& InContext, const FName& InSlotName)"
  },
  {
    "label": "AddAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimNotifies(const TArray<FAnimNotifyEventReference>& NewNotifies, const float InstanceWeight)"
  },
  {
    "label": "SetInterpolationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolationOverride(TOptional<EAnimInterpolationType> InterpolationType)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "UpdateActiveAnimNotifiesSinceLastTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveAnimNotifiesSinceLastTick(const FAnimNotifyQueue& AnimInstanceQueue)"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdate(UAnimInstance* InAnimInstance, float DeltaSeconds)"
  },
  {
    "label": "OnPreUpdateLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreUpdateLODChanged(const int32 PreviousLODIndex, const int32 NewLODIndex)"
  },
  {
    "label": "UpdateAnimationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimationNode(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "UpdateAnimationNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimationNode_WithRoot(const FAnimationUpdateContext& InContext, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "PreEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluateAnimation(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "CacheBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones()"
  },
  {
    "label": "CacheBones_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_WithRoot(FAnimNode_Base* InRootNode)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Evaluate(Output)"
  },
  {
    "label": "PostEvaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluate(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "InitializeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeObjects(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "ClearObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjects()"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimation()"
  },
  {
    "label": "UpdateAnimation_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimation_WithRoot(const FAnimationUpdateContext& InContext, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "EvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimation(FPoseContext& Output)"
  },
  {
    "label": "EvaluateAnimation_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimation_WithRoot(FPoseContext& Output, FAnimNode_Base* InRootNode)"
  },
  {
    "label": "EvaluateAnimationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimationNode(FPoseContext& Output)"
  },
  {
    "label": "EvaluateAnimationNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimationNode_WithRoot(FPoseContext& Output, FAnimNode_Base* InRootNode)"
  },
  {
    "label": "SequenceAdvanceImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceAdvanceImmediate(UAnimSequenceBase* Sequence, bool bLooping, float PlayRate, float DeltaSeconds, /*inout*/ float& CurrentTime, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "BlendSpaceAdvanceImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendSpaceAdvanceImmediate(UBlendSpace* BlendSpace, const FVector& BlendInput, TArray<FBlendSampleData> & BlendSampleDataCache, FBlendFilter & BlendFilter, bool bLooping, float PlayRate, float DeltaSeconds, /*inout*/ float& CurrentTime, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "GetBufferReadIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetBufferReadIndex()"
  },
  {
    "label": "GetBufferWriteIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetBufferWriteIndex()"
  },
  {
    "label": "ReinitializeSlotNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitializeSlotNodes()"
  },
  {
    "label": "ClearSlotNodeWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSlotNodeWeights()"
  },
  {
    "label": "RecalcRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredBones(USkeletalMeshComponent* Component, UObject* Asset)"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const UE::Anim::FCurveFilterSettings& CurveFilterSettings)"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const FCurveEvaluationOption& CurveEvalOption)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInStateMachine(int32 MachineIndex, FName NotifyName)"
  },
  {
    "label": "RequestTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestTransitionEvent(const FName& EventName, const double RequestTimeout, const ETransitionRequestQueueMode& QueueMode, const ETransitionRequestOverwriteMode& OverwriteMode)"
  },
  {
    "label": "ClearTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransitionEvents(const FName& EventName)"
  },
  {
    "label": "ClearAllTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllTransitionEvents()"
  },
  {
    "label": "QueryAndMarkTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAndMarkTransitionEvent(int32 MachineIndex, int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "AddNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, const FCanTakeTransition& NativeTransitionDelegate, const FName& TransitionName = NAME_None)"
  },
  {
    "label": "HasNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateEntryBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeEnteredDelegate, const FName& BindingName = NAME_None)"
  },
  {
    "label": "HasNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateEntryBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateExitBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeExitedDelegate, const FName& BindingName = NAME_None)"
  },
  {
    "label": "HasNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateExitBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "BindNativeDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindNativeDelegates()"
  },
  {
    "label": "InitializeRootNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRootNode(bool bInDeferRootNodeInitialization = false)"
  },
  {
    "label": "InitializeRootNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRootNode_WithRoot(FAnimNode_Base* InRootNode)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UAnimInstance* InAnimInstance, FReferenceCollector& Collector)"
  },
  {
    "label": "ResetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAnimationCurves()"
  },
  {
    "label": "UpdateCurvesToEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesToEvaluationContext(const FAnimationEvaluationContext& InContext)"
  },
  {
    "label": "UpdateCurvesPostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesPostEvaluation(USkeletalMeshComponent* SkelMeshComp)"
  },
  {
    "label": "AddCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveValue(const FName& CurveName, float Value, bool bMorphtarget = false, bool bMaterial = false)"
  },
  {
    "label": "InitializeInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInputProxy(FAnimInstanceProxy* InputProxy, UAnimInstance* InAnimInstance)"
  },
  {
    "label": "GatherInputProxyDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInputProxyDebugData(FAnimInstanceProxy* InputProxy, FNodeDebugData& DebugData)"
  },
  {
    "label": "CacheBonesInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBonesInputProxy(FAnimInstanceProxy* InputProxy)"
  },
  {
    "label": "UpdateInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputProxy(FAnimInstanceProxy* InputProxy, const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateInputProxy(FAnimInstanceProxy* InputProxy, FPoseContext& Output)"
  },
  {
    "label": "ResetCounterInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCounterInputProxy(FAnimInstanceProxy* InputProxy)"
  },
  {
    "label": "SlotEvaluatePoseWithBlendProfiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotEvaluatePoseWithBlendProfiles(const FName& SlotNodeName, const FAnimationPoseData& SourceAnimationPoseData, float InSourceWeight, FAnimationPoseData& OutBlendedAnimationPoseData, float InBlendWeight)"
  },
  {
    "label": "InitializeCachedClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCachedClassData()"
  }
]