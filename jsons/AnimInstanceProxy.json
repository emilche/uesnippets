[
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FAnimBlueprintDebugData_NodeVisit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_NodeVisit"
  },
  {
    "label": "FAnimBlueprintDebugData_AttributeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData_AttributeRecord"
  },
  {
    "label": "FAnimGroupInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimGroupInstance"
  },
  {
    "label": "FAnimNodePoseWatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodePoseWatch"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FAnimNode_LinkedInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedInputPose"
  },
  {
    "label": "FAnimNode_SaveCachedPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SaveCachedPose"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimTickRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTickRecord"
  },
  {
    "label": "FBakedAnimationStateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakedAnimationStateMachine"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FMontageEvaluationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageEvaluationState"
  },
  {
    "label": "FNodeDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDebugData"
  },
  {
    "label": "FPoseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseContext"
  },
  {
    "label": "FPoseSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseSnapshot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimSyncGroupScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSyncGroupScope"
  },
  {
    "label": "FActiveStateMachineScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveStateMachineScope"
  },
  {
    "label": "FAnimSyncParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSyncParams"
  },
  {
    "label": "PoseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoseType"
  },
  {
    "label": "FCSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCSPose"
  },
  {
    "label": "FQueuedDrawDebugItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedDrawDebugItem"
  },
  {
    "label": "FVectorEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorEntry"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "UPoseAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseAsset"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrace"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FAnimNode_ControlRigInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_ControlRigInputPose"
  },
  {
    "label": "ENABLE_ANIM_DRAW_DEBUG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimBlueprint . h \" # include \" Animation / AnimClassInterface . h \" # include \" Animation / AnimTrace . h \" # include \" Animation / AnimSync . h \" # include \" Animation / AnimInertializationRequest . h \" # include \" AnimInstanceProxy . generated . h \" class UAnimInstance ; class UBlendProfile ; class UBlendSpace ; class FTokenizedMessage ; namespace EMessageSeverity { enum Type : int ; } struct FAnimationPoseData ; struct FAnimBlueprintDebugData_NodeVisit ; struct FAnimBlueprintDebugData_AttributeRecord ; struct FAnimGroupInstance ; struct FAnimNodePoseWatch ; struct FAnimNode_AssetPlayerBase ; struct FAnimNode_AssetPlayerRelevancyBase ; struct FAnimNode_Base ; struct FAnimNode_LinkedInputPose ; struct FAnimNode_SaveCachedPose ; struct FAnimNode_StateMachine ; struct FAnimTickRecord ; struct FBakedAnimationStateMachine ; struct FCompactPose ; struct FMontageEvaluationState ; struct FNodeDebugData ; struct FPoseContext ; struct FPoseSnapshot ; enum class ETransitionRequestQueueMode : uint8 ; enum class ETransitionRequestOverwriteMode : uint8 ; namespace UE::Anim { class FAnimSyncGroupScope ; class FActiveStateMachineScope ; struct FAnimSyncParams ; using FSlotInertializationRequest = TPair<float,const UBlendProfile*> ; } template<class PoseType> struct FCSPose ; # define)",
    "insertText": "ENABLE_ANIM_DRAW_DEBUG(1 && !(UE_BUILD_SHIPPING || UE_BUILD_TEST)) #define ENABLE_ANIM_LOGGING (1 && !NO_LOGGING && !(UE_BUILD_SHIPPING || UE_BUILD_TEST))"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (const FName NAME_Evaluate ; const FName NAME_Update ; const FName NAME_AnimGraph ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FVectorEntry()",
    "kind": "Method",
    "detail": "Function (enum Type : int { DirectionalArrow,Sphere,Line,OnScreenMessage,CoordinateSystem,Point,Circle,Cone,InWorldMessage,Capsule,} ; } struct FQueuedDrawDebugItem { struct FVectorEntry {)",
    "insertText": "FVectorEntry(const FVector& InVector) : Value(InVector)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} FVector Value ; } ; TEnumAsByte<EDrawDebugItemType::Type> ItemType = EDrawDebugItemType::DirectionalArrow ; union { FVector StartLoc ; struct { float Length ; float AngleWidth ; float AngleHeight ; } ; } ; union { FVectorEntry EndLoc ; FVectorEntry Direction ; } ; FVector Center =)",
    "insertText": "FVector(0.f)"
  },
  {
    "label": "FRotator()",
    "kind": "Method",
    "detail": "Function (FRotator Rotation =)",
    "insertText": "FRotator(0.f)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (float Radius = 0 . f ; float Size = 0 . f ; int32 Segments = 0 ; FColor Color =)",
    "insertText": "FColor(0)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (bool bPersistentLines = false ; float LifeTime = 0 . f ; float Thickness = 0 . f ; FString Message ; FVector2D TextScale =)",
    "insertText": "FVector2D(0.f)"
  },
  {
    "label": "FQueuedDrawDebugItem()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<ESceneDepthPriorityGroup> DepthPriority = SDPG_World ;)",
    "insertText": "FQueuedDrawDebugItem() : StartLoc(FVector(0.f)) , EndLoc(FVector(0.f))"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; } ;)",
    "insertText": "USTRUCT(meta = (DisplayName = \"Native Variables\"))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimInstanceProxy()"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimInstanceProxy(UAnimInstance* Instance)"
  },
  {
    "label": "FAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimInstanceProxy(const FAnimInstanceProxy&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimInstanceProxy&)",
    "insertText": "operator(FAnimInstanceProxy&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimInstanceProxy&)",
    "insertText": "operator(const FAnimInstanceProxy&)"
  },
  {
    "label": "GetAnimClassInterface()",
    "kind": "Method",
    "detail": "Function (IAnimClassInterface*)",
    "insertText": "GetAnimClassInterface()"
  },
  {
    "label": "RecordNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeAttribute(const FAnimInstanceProxy& InSourceProxy, int32 InTargetNodeIndex, int32 InSourceNodeIndex, FName InAttribute)"
  },
  {
    "label": "RecordNodeSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNodeSync(int32 InSourceNodeIndex, FName InSyncGroup)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (NodeSyncsThisFrame .)",
    "insertText": "FindOrAdd(InSourceNodeIndex, InSyncGroup)"
  },
  {
    "label": "GetAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (} UAnimBlueprint*)",
    "insertText": "GetAnimBlueprint()"
  },
  {
    "label": "GetActualAnimClass()",
    "kind": "Method",
    "detail": "Function (UClass* ActualAnimClass =)",
    "insertText": "GetActualAnimClass(AnimClassInterface)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCompactPose& Pose, const FBlendedCurve& InCurve, int32 LinkID)"
  },
  {
    "label": "RegisterWatchedPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWatchedPose(const FCSPose<FCompactPose>& Pose, const FBlendedCurve& InCurve, int32 LinkID)"
  },
  {
    "label": "FlipBufferWriteIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBufferWriteIndex()"
  },
  {
    "label": "GetBufferReadIndex()",
    "kind": "Method",
    "detail": "Function (BufferWriteIndex =)",
    "insertText": "GetBufferReadIndex()"
  },
  {
    "label": "GetSyncGroupMapRead()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnimGroupInstance> Dummy ; return Dummy ; } const FSyncGroupMap&)",
    "insertText": "GetSyncGroupMapRead()"
  },
  {
    "label": "GetUngroupedActivePlayersRead()",
    "kind": "Method",
    "detail": "Function (} const TArray<FAnimTickRecord>&)",
    "insertText": "GetUngroupedActivePlayersRead()"
  },
  {
    "label": "AddAnimNotifyFromGeneratedClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimNotifyFromGeneratedClass(int32 NotifyIndex)"
  },
  {
    "label": "TriggerAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAnimNotifies(USkeletalMeshComponent* SkelMeshComp, float DeltaSeconds)"
  },
  {
    "label": "AddPoseSnapshot()",
    "kind": "Method",
    "detail": "Function (FPoseSnapshot&)",
    "insertText": "AddPoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "RemovePoseSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "GetPoseSnapshot()",
    "kind": "Method",
    "detail": "Function (const FPoseSnapshot*)",
    "insertText": "GetPoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "GetInitializationCounter()",
    "kind": "Method",
    "detail": "Function (const FGraphTraversalCounter&)",
    "insertText": "GetInitializationCounter()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (UpdateCounter .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetExtractedRootMotion()",
    "kind": "Method",
    "detail": "Function (} FRootMotionMovementParams&)",
    "insertText": "GetExtractedRootMotion()"
  },
  {
    "label": "GetNodeFromIndexUntyped()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_Base*)",
    "insertText": "GetNodeFromIndexUntyped(int32 NodeIdx, UScriptStruct* RequiredStructType)"
  },
  {
    "label": "GetCheckedMutableNodeFromIndexUntyped()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Base*)",
    "insertText": "GetCheckedMutableNodeFromIndexUntyped(int32 NodeIdx, UScriptStruct* RequiredStructType)"
  },
  {
    "label": "GetCheckedNodeFromIndexUntyped()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_Base*)",
    "insertText": "GetCheckedNodeFromIndexUntyped(int32 NodeIdx, UScriptStruct* RequiredStructType)"
  },
  {
    "label": "GetCheckedNodeFromIndex()",
    "kind": "Method",
    "detail": "Function (template<class NodeType> const NodeType*)",
    "insertText": "GetCheckedNodeFromIndex(int32 NodeIdx)"
  },
  {
    "label": "GetCheckedMutableNodeFromIndex()",
    "kind": "Method",
    "detail": "Function (} template<class NodeType> NodeType*)",
    "insertText": "GetCheckedMutableNodeFromIndex(int32 NodeIdx)"
  },
  {
    "label": "GetNodeFromIndex()",
    "kind": "Method",
    "detail": "Function (} template<class NodeType> const NodeType*)",
    "insertText": "GetNodeFromIndex(int32 NodeIdx)"
  },
  {
    "label": "GetMutableNodeFromIndex()",
    "kind": "Method",
    "detail": "Function (} template<class NodeType> NodeType*)",
    "insertText": "GetMutableNodeFromIndex(int32 NodeIdx)"
  },
  {
    "label": "GetRequiredBones()",
    "kind": "Method",
    "detail": "Function (} const FBoneContainer&)",
    "insertText": "GetRequiredBones()"
  },
  {
    "label": "AddTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTickRecord(const FAnimTickRecord& InTickRecord, const UE::Anim::FAnimSyncParams& InSyncParams = UE::Anim::FAnimSyncParams())"
  },
  {
    "label": "AddTickRecord()",
    "kind": "Method",
    "detail": "Function (Sync .)",
    "insertText": "AddTickRecord(InTickRecord, InSyncParams)"
  },
  {
    "label": "GetSlotWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSlotWeight(const FName& SlotNodeName, float& out_SlotNodeWeight, float& out_SourceWeight, float& out_TotalNodeWeight)"
  },
  {
    "label": "SlotEvaluatePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotEvaluatePose(const FName& SlotNodeName, const FAnimationPoseData& SourceAnimationPoseData, float InSourceWeight, FAnimationPoseData& OutBlendedAnimationPoseData, float InBlendWeight, float InTotalNodeWeight)"
  },
  {
    "label": "UpdateSlotNodeWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSlotNodeWeight(const FName& SlotNodeName, float InLocalMontageWeight, float InNodeGlobalWeight)"
  },
  {
    "label": "GetSlotInertializationRequestData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSlotInertializationRequestData(const FName& SlotName, FInertializationRequest& OutRequest)"
  },
  {
    "label": "RegisterSlotNodeWithAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlotNodeWithAnimInstance(const FName& SlotNodeName)"
  },
  {
    "label": "HasRootNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootNode()"
  },
  {
    "label": "GatherDebugData_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData_WithRoot(FNodeDebugData& DebugData, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "AnimDrawDebugOnScreenMessage()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_ANIM_DRAW_DEBUG TArray<FQueuedDrawDebugItem> QueuedDrawDebugItems ; void)",
    "insertText": "AnimDrawDebugOnScreenMessage(const FString& DebugMessage, const FColor& Color, const FVector2D& TextScale = FVector2D::UnitVector, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugInWorldMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugInWorldMessage(const FString& DebugMessage, const FVector& TextLocation, const FColor& Color, float TextScale)"
  },
  {
    "label": "AnimDrawDebugLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugLine(const FVector& StartLoc, const FVector& EndLoc, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugDirectionalArrow(const FVector& LineStart, const FVector& LineEnd, float ArrowSize, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugSphere(const FVector& Center, float Radius, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCoordinateSystem(FVector const& AxisLoc, FRotator const& AxisRot, float Scale = 1.f, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugPlane(const FTransform& BaseTransform, float Radii, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugPoint(const FVector& Loc, float Size, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World)"
  },
  {
    "label": "AnimDrawDebugCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCircle(const FVector& Center, float Radius, int32 Segments, const FColor& Color, const FVector& UpVector = FVector::UpVector, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World, float Thickness = 0.f)"
  },
  {
    "label": "AnimDrawDebugCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCone(const FVector& Center, float Radius, const FVector& Direction, float AngleWidth, float AngleHeight, int32 Segments, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World, float Thickness = 0.f)"
  },
  {
    "label": "AnimDrawDebugCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimDrawDebugCapsule(const FVector& Center, float HalfHeight, float Radius, const FRotator& Rotation, const FColor& Color, bool bPersistentLines = false, float LifeTime = -1.f, float Thickness = 0.f)"
  },
  {
    "label": "AnimDrawDebugCircle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnimDrawDebugCircle(const FVector& Center, float Radius, int32 Segments, const FColor& Color, const FVector& UpVector = FVector::UpVector, bool bPersistentLines = false, float LifeTime=-1.f, ESceneDepthPriorityGroup DepthPriority = SDPG_World, float Thickness = 0.f)"
  },
  {
    "label": "GetActorName()",
    "kind": "Method",
    "detail": "Function (} # endif # if ENABLE_ANIM_LOGGING const FString&)",
    "insertText": "GetActorName()"
  },
  {
    "label": "GetStateMachineInstance()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_StateMachine*)",
    "insertText": "GetStateMachineInstance(int32 MachineIndex)"
  },
  {
    "label": "GetMachineDescription()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationStateMachine*)",
    "insertText": "GetMachineDescription(IAnimClassInterface* AnimBlueprintClass, const FAnimNode_StateMachine* MachineInstance)"
  },
  {
    "label": "GetInstanceAssetPlayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceAssetPlayerIndex(FName MachineName, FName StateName, FName InstanceName = NAME_None)"
  },
  {
    "label": "GetRecordedMachineWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRecordedMachineWeight(const int32 InMachineClassIndex)"
  },
  {
    "label": "RecordMachineWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordMachineWeight(const int32 InMachineClassIndex, const float InMachineWeight)"
  },
  {
    "label": "GetRecordedStateWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRecordedStateWeight(const int32 InMachineClassIndex, const int32 InStateIndex)"
  },
  {
    "label": "RecordStateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStateWeight(const int32 InMachineClassIndex, const int32 InStateIndex, const float InStateWeight, const float InElapsedTime)"
  },
  {
    "label": "IsSlotNodeRelevantForNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSlotNodeRelevantForNotifies(const FName& SlotNodeName)"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics(ETeleportType InTeleportType)"
  },
  {
    "label": "GetInstanceAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<const FAnimNode_AssetPlayerBase*>)",
    "insertText": "GetInstanceAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetMutableInstanceAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNode_AssetPlayerBase*>)",
    "insertText": "GetMutableInstanceAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetInstanceRelevantAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<const FAnimNode_AssetPlayerRelevancyBase*>)",
    "insertText": "GetInstanceRelevantAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetMutableInstanceRelevantAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNode_AssetPlayerRelevancyBase*>)",
    "insertText": "GetMutableInstanceRelevantAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "IsSyncGroupValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyncGroupValid(FName InSyncGroupName)"
  },
  {
    "label": "GetComponentRelativeTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetComponentRelativeTransform()"
  },
  {
    "label": "GetAnimBlueprintDebugData()",
    "kind": "Method",
    "detail": "Function (# endif FAnimBlueprintDebugData*)",
    "insertText": "GetAnimBlueprintDebugData()"
  },
  {
    "label": "AddAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimNotifies(const TArray<FAnimNotifyEventReference>& NewNotifies, const float InstanceWeight)"
  },
  {
    "label": "SetInterpolationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolationOverride(TOptional<EAnimInterpolationType> InterpolationType)"
  },
  {
    "label": "GetInterpolationOverride()",
    "kind": "Method",
    "detail": "Function (TOptional<EAnimInterpolationType>)",
    "insertText": "GetInterpolationOverride()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (class UAnimInstance ; class UAnimSingleNodeInstance ; class USkeletalMeshComponent ; struct FAnimNode_LinkedAnimGraph ; struct FAnimNode_LinkedAnimLayer ; struct FAnimationBaseContext ; struct FAnimTrace ; struct UE::Anim::FAnimSync ; class UE::Anim::FAnimSyncGroupScope ; class UE::Anim::FActiveStateMachineScope ; struct FAnimNode_ControlRigInputPose ; protected : void)",
    "insertText": "Initialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "UpdateActiveAnimNotifiesSinceLastTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveAnimNotifiesSinceLastTick(const FAnimNotifyQueue& AnimInstanceQueue)"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdate(UAnimInstance* InAnimInstance, float DeltaSeconds)"
  },
  {
    "label": "OnPreUpdateLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreUpdateLODChanged(const int32 PreviousLODIndex, const int32 NewLODIndex)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(float DeltaSeconds)"
  },
  {
    "label": "UpdateAnimationNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateAnimationNode(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "UpdateAnimationNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimationNode_WithRoot(const FAnimationUpdateContext& InContext, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "PreEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluateAnimation(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "GetCustomRootNode()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Base*)",
    "insertText": "GetCustomRootNode()"
  },
  {
    "label": "CacheBones()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheBones()"
  },
  {
    "label": "CacheBones_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_WithRoot(FAnimNode_Base* InRootNode)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(FPoseContext& Output)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostUpdate(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "PostEvaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluate(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "InitializeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeObjects(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "ClearObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjects()"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimation()"
  },
  {
    "label": "UpdateAnimation_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimation_WithRoot(const FAnimationUpdateContext& InContext, FAnimNode_Base* InRootNode, FName InLayerName)"
  },
  {
    "label": "EvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimation(FPoseContext& Output)"
  },
  {
    "label": "EvaluateAnimation_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimation_WithRoot(FPoseContext& Output, FAnimNode_Base* InRootNode)"
  },
  {
    "label": "EvaluateAnimationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimationNode(FPoseContext& Output)"
  },
  {
    "label": "EvaluateAnimationNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimationNode_WithRoot(FPoseContext& Output, FAnimNode_Base* InRootNode)"
  },
  {
    "label": "SequenceAdvanceImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceAdvanceImmediate(UAnimSequenceBase* Sequence, bool bLooping, float PlayRate, float DeltaSeconds, float& CurrentTime, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "BlendSpaceAdvanceImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendSpaceAdvanceImmediate(UBlendSpace* BlendSpace, const FVector& BlendInput, TArray<FBlendSampleData> & BlendSampleDataCache, FBlendFilter & BlendFilter, bool bLooping, float PlayRate, float DeltaSeconds, float& CurrentTime, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "GetTimeToClosestMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime)"
  },
  {
    "label": "HasMarkerBeenHitThisFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName)"
  },
  {
    "label": "IsSyncGroupBetweenMarkers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder = true)"
  },
  {
    "label": "GetSyncGroupPosition()",
    "kind": "Method",
    "detail": "Function (FMarkerSyncAnimPosition)",
    "insertText": "GetSyncGroupPosition(FName InSyncGroupName)"
  },
  {
    "label": "SetSyncMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSyncMirror(const UMirrorDataTable* MirrorDataTable)"
  },
  {
    "label": "SetMirror()",
    "kind": "Method",
    "detail": "Function (Sync .)",
    "insertText": "SetMirror(MirrorDataTable)"
  },
  {
    "label": "ReinitializeSlotNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReinitializeSlotNodes()"
  },
  {
    "label": "ClearSlotNodeWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSlotNodeWeights()"
  },
  {
    "label": "GetSlotNodeGlobalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlotNodeGlobalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "GetSlotMontageGlobalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlotMontageGlobalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "GetSlotMontageLocalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlotMontageLocalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "CalcSlotMontageLocalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcSlotMontageLocalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "RecalcRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredBones(USkeletalMeshComponent* Component, UObject* Asset)"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const UE::Anim::FCurveFilterSettings& CurveFilterSettings)"
  },
  {
    "label": "GetActiveMontageEvaluationState()",
    "kind": "Method",
    "detail": "Function (} const FMontageEvaluationState*)",
    "insertText": "GetActiveMontageEvaluationState()"
  },
  {
    "label": "GetSlotGroupInertializationRequestDataMap()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FInertializationRequest>&)",
    "insertText": "GetSlotGroupInertializationRequestDataMap()"
  },
  {
    "label": "GetMontageEvaluationData()",
    "kind": "Method",
    "detail": "Function (TArray<FMontageEvaluationState>&)",
    "insertText": "GetMontageEvaluationData()"
  },
  {
    "label": "GetNodeFromProperty()",
    "kind": "Method",
    "detail": "Function (template<class NodeType> NodeType*)",
    "insertText": "GetNodeFromProperty(FProperty* Property)"
  },
  {
    "label": "GetInstanceAssetPlayerLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetInstanceAssetPlayerLength(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTime(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFromEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFromEndFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceMachineWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceMachineWeight(int32 MachineIndex)"
  },
  {
    "label": "GetInstanceStateWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetInstanceCurrentStateElapsedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceCurrentStateElapsedTime(int32 MachineIndex)"
  },
  {
    "label": "GetInstanceTransitionCrossfadeDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetInstanceTransitionTimeElapsed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetInstanceTransitionTimeElapsedFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "WasAnimNotifyStateActiveInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInAnyState(TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyStateActiveInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInStateMachine(int32 MachineIndex, TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyStateActiveInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInSourceState(int32 MachineIndex, int32 StateIndex, TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyTriggeredInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, FName NotifyName)"
  },
  {
    "label": "WasAnimNotifyTriggeredInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInStateMachine(int32 MachineIndex, TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyTriggeredInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInAnyState(TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInAnyState(FName NotifyName)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInStateMachine(int32 MachineIndex, FName NotifyName)"
  },
  {
    "label": "RequestTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestTransitionEvent(const FName& EventName, const double RequestTimeout, const ETransitionRequestQueueMode& QueueMode, const ETransitionRequestOverwriteMode& OverwriteMode)"
  },
  {
    "label": "ClearTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransitionEvents(const FName& EventName)"
  },
  {
    "label": "ClearAllTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllTransitionEvents()"
  },
  {
    "label": "QueryTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryTransitionEvent(int32 MachineIndex, int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "QueryAndMarkTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAndMarkTransitionEvent(int32 MachineIndex, int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "AddNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, const FCanTakeTransition& NativeTransitionDelegate, const FName& TransitionName = NAME_None)"
  },
  {
    "label": "HasNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateEntryBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeEnteredDelegate, const FName& BindingName = NAME_None)"
  },
  {
    "label": "HasNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateEntryBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateExitBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeExitedDelegate, const FName& BindingName = NAME_None)"
  },
  {
    "label": "HasNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateExitBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "BindNativeDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindNativeDelegates()"
  },
  {
    "label": "GetStateMachineInstanceDesc()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationStateMachine*)",
    "insertText": "GetStateMachineInstanceDesc(FName MachineName)"
  },
  {
    "label": "GetStateMachineIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStateMachineIndex(FName MachineName)"
  },
  {
    "label": "GetStateMachineIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStateMachineIndex(FAnimNode_StateMachine* StateMachine)"
  },
  {
    "label": "GetStateMachineIndexAndDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStateMachineIndexAndDescription(FName InMachineName, int32& OutMachineIndex, const FBakedAnimationStateMachine** OutMachineDescription)"
  },
  {
    "label": "InitializeRootNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRootNode(bool bInDeferRootNodeInitialization = false)"
  },
  {
    "label": "InitializeRootNode_WithRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRootNode_WithRoot(FAnimNode_Base* InRootNode)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UAnimInstance* InAnimInstance, FReferenceCollector& Collector)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(FName InLogType, EMessageSeverity::Type InSeverity, const FText& InMessage)"
  },
  {
    "label": "LogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessage(FName InLogType, const TSharedRef<FTokenizedMessage>& InMessage)"
  },
  {
    "label": "GetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (TMap<FName,float>&)",
    "insertText": "GetAnimationCurves(EAnimCurveType InCurveType)"
  },
  {
    "label": "ResetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetAnimationCurves()"
  },
  {
    "label": "UpdateCurvesToEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesToEvaluationContext(const FAnimationEvaluationContext& InContext)"
  },
  {
    "label": "UpdateCurvesPostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesPostEvaluation(USkeletalMeshComponent* SkelMeshComp)"
  },
  {
    "label": "HasActiveCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveCurves()"
  },
  {
    "label": "AddCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveValue(CurveName, Value)"
  },
  {
    "label": "AddCurveValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCurveValue(const FName& CurveName, float Value, bool bMorphtarget = false, bool bMaterial = false)"
  },
  {
    "label": "InitializeInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInputProxy(FAnimInstanceProxy* InputProxy, UAnimInstance* InAnimInstance)"
  },
  {
    "label": "GatherInputProxyDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInputProxyDebugData(FAnimInstanceProxy* InputProxy, FNodeDebugData& DebugData)"
  },
  {
    "label": "CacheBonesInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBonesInputProxy(FAnimInstanceProxy* InputProxy)"
  },
  {
    "label": "UpdateInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputProxy(FAnimInstanceProxy* InputProxy, const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateInputProxy(FAnimInstanceProxy* InputProxy, FPoseContext& Output)"
  },
  {
    "label": "ResetCounterInputProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCounterInputProxy(FAnimInstanceProxy* InputProxy)"
  },
  {
    "label": "ResetSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSync()"
  },
  {
    "label": "ResetAll()",
    "kind": "Method",
    "detail": "Function (Sync .)",
    "insertText": "ResetAll()"
  },
  {
    "label": "FlushQueuedDebugDrawItems()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_ANIM_DRAW_DEBUG void)",
    "insertText": "FlushQueuedDebugDrawItems(AActor* InActor, UWorld* InWorld)"
  },
  {
    "label": "GetTargetLogNameForCurrentWorldType()",
    "kind": "Method",
    "detail": "Function (# endif private : FName)",
    "insertText": "GetTargetLogNameForCurrentWorldType()"
  },
  {
    "label": "ForEachStateMachine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachStateMachine(const TFunctionRef<void(FAnimNode_StateMachine&)>& Functor)"
  },
  {
    "label": "SlotEvaluatePoseWithBlendProfiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlotEvaluatePoseWithBlendProfiles(const FName& SlotNodeName, const FAnimationPoseData& SourceAnimationPoseData, float InSourceWeight, FAnimationPoseData& OutBlendedAnimationPoseData, float InBlendWeight)"
  },
  {
    "label": "InitializeCachedClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCachedClassData()"
  },
  {
    "label": "AnimationCurves()",
    "kind": "Method",
    "detail": "Function (FTransform ComponentTransform ; FTransform ComponentRelativeTransform ; FTransform ActorTransform ; UObject* AnimInstanceObject ; IAnimClassInterface* AnimClassInterface ; USkeleton* Skeleton ; USkeletalMeshComponent* SkeletalMeshComponent ; FAnimInstanceProxy* MainInstanceProxy ; float CurrentDeltaSeconds ; float CurrentTimeDilation ; # if WITH_EDITORONLY_DATA TArray<FAnimBlueprintDebugData_NodeVisit> UpdatedNodesThisFrame ; TMap<int32,TArray<FAnimBlueprintDebugData_AttributeRecord>> NodeInputAttributesThisFrame ; TMap<int32,TArray<FAnimBlueprintDebugData_AttributeRecord>> NodeOutputAttributesThisFrame ; TMap<int32,FName> NodeSyncsThisFrame ; # endif # if ENABLE_ANIM_LOGGING FString ActorName ; # endif FString AnimInstanceName ; FAnimNode_Base* RootNode ; FAnimNode_LinkedInputPose* DefaultLinkedInstanceInputNode ; TMap<FName,TArray<FAnimNode_SaveCachedPose*>> SavedPoseQueueMap ; UE::Anim::FAnimSync Sync ; TArray<float> MachineWeightArrays [ 2 ] ; TArray<float> StateWeightArrays [ 2 ] ; TMap<int32,int32> StateMachineClassIndexToWeightOffset ; int32 BufferWriteIndex ; FAnimNotifyQueue NotifyQueue ; ERootMotionMode::Type RootMotionMode ; TMap<FName,int32> SlotNameToTrackerIndex ; TArray<FMontageActiveSlotTracker> SlotWeightTracker [ 2 ] ; TMap<FName,float>)",
    "insertText": "AnimationCurves(uint8)"
  }
]