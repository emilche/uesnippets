[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FColorVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorVertexBuffer"
  },
  {
    "label": "FSkinWeightVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinWeightVertexBuffer"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "FPositionVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPositionVertexBuffer"
  },
  {
    "label": "UMeshDeformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDeformer"
  },
  {
    "label": "UMeshDeformerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDeformerInstance"
  },
  {
    "label": "UMeshDeformerInstanceSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDeformerInstanceSettings"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FExternalMorphSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalMorphSet"
  },
  {
    "label": "FExternalMorphWeightData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalMorphWeightData"
  },
  {
    "label": "FSkinWeightProfileStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinWeightProfileStack"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FSkinnedMeshComponentExtensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinnedMeshComponentExtensions"
  },
  {
    "label": "EBoneVisibilityStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBoneVisibilityStatus"
  },
  {
    "label": "EPhysBodyOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPhysBodyOp"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSkelMeshSkinWeightInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshSkinWeightInfo"
  },
  {
    "label": "FSkelMeshComponentLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshComponentLODInfo"
  },
  {
    "label": "FVertexOffsetUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexOffsetUsage"
  },
  {
    "label": "FMeshDeformerSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDeformerSet"
  },
  {
    "label": "FMeshDeformerInstanceSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDeformerInstanceSet"
  },
  {
    "label": "USkinnedMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedMeshComponent"
  },
  {
    "label": "FSkinnedMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FMissingLeaderBoneCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMissingLeaderBoneCacheEntry"
  },
  {
    "label": "FFinalSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFinalSkinVertex"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FSkeletalMeshStreamOut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshStreamOut"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "FAnimUpdateRateParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimUpdateRateParameters"
  },
  {
    "label": "FRenderStateRecreator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderStateRecreator"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GPUSkinPublicDefs . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Engine / EngineTypes . h \" # include \" Components / SceneComponent . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" Components / MeshComponent . h \" # include \" Containers / SortedMap . h \" # include \" LODSyncInterface . h \" # include \" BoneContainer . h \" # include \" ClothingSystemRuntimeTypes . h \" # include \" Animation / SkinWeightProfile . h \" # include \" SkinnedMeshComponent . generated . h \" enum class ESkinCacheUsage : uint8 ; enum class EPreviousBoneTransformUpdateMode ; class FPrimitiveSceneProxy ; class FColorVertexBuffer ; class FSkinWeightVertexBuffer ; class FSkeletalMeshRenderData ; class FSkeletalMeshLODRenderData ; struct FSkelMeshRenderSection ; class FPositionVertexBuffer ; class UMeshDeformer ; class UMeshDeformerInstance ; class UMeshDeformerInstanceSettings ; class UMorphTarget ; class USkinnedAsset ; struct FExternalMorphSet ; struct FExternalMorphWeightData ; struct FSkinWeightProfileStack ; namespace Nanite { struct FResources ; } namespace UE::Anim { struct FSkinnedMeshComponentExtensions ; })",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAnimUpdateRateParamsCreated, FAnimUpdateRateParameters*) DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnTickPose, USkinnedMeshComponent* , float , bool ) DECLARE_MULTICAST_DELEGATE(FOnBoneTransformsFinalizedMultiCast)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (PBO_None,PBO_Term,PBO_MAX,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { WorldSpace)",
    "insertText": "UMETA(DisplayName = \"World Space\"), ComponentSpace UMETA(DisplayName = \"Component Space\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Primary,Secondary,} ; using FMorphTargetWeightMap = TMap<const UMorphTarget*,int32> ;)",
    "insertText": "USTRUCT(BlueprintType, meta = (HasNativeMake = \"/Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo\", HasNativeBreak = \"/Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo\"))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "FSkelMeshComponentLODInfo()",
    "kind": "Method",
    "detail": "Function (FColorVertexBuffer* OverrideVertexColors ; FSkinWeightVertexBuffer* OverrideSkinWeights ; FSkinWeightVertexBuffer* OverrideProfileSkinWeights ;)",
    "insertText": "FSkelMeshComponentLODInfo()"
  },
  {
    "label": "ReleaseOverrideVertexColorsAndBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOverrideVertexColorsAndBlock()"
  },
  {
    "label": "BeginReleaseOverrideVertexColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginReleaseOverrideVertexColors()"
  },
  {
    "label": "EndReleaseOverrideVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReleaseOverrideVertexColors()"
  },
  {
    "label": "CleanUpOverrideVertexColors()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CleanUpOverrideVertexColors()"
  },
  {
    "label": "ReleaseOverrideSkinWeightsAndBlock()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReleaseOverrideSkinWeightsAndBlock()"
  },
  {
    "label": "BeginReleaseOverrideSkinWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginReleaseOverrideSkinWeights()"
  },
  {
    "label": "EndReleaseOverrideSkinWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReleaseOverrideSkinWeights()"
  },
  {
    "label": "CleanUpOverrideSkinWeights()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CleanUpOverrideSkinWeights()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = \"Mesh\", meta = (Bitmask, BitmaskEnum = \"/Script/Engine.EVertexOffsetUsageType\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TArray<int8> InstanceIndexForLOD ; } ; using FExternalMorphSets = TMap<int32,TSharedPtr<FExternalMorphSet>> ;)",
    "insertText": "UCLASS(hidecategories=Object, config=Engine, editinlinenew, abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "USkinnedMeshComponent()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "USkinnedMeshComponent(FVTableHelper& Helper)"
  },
  {
    "label": "USkinnedMeshComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "USkinnedMeshComponent()"
  },
  {
    "label": "SetMeshDeformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshDeformer(bool bInSetMeshDeformer, UMeshDeformer* InMeshDeformer)"
  },
  {
    "label": "GetActiveMeshDeformers()",
    "kind": "Method",
    "detail": "Function (FMeshDeformerSet)",
    "insertText": "GetActiveMeshDeformers()"
  },
  {
    "label": "CreateMeshDeformerInstances()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateMeshDeformerInstances(const FMeshDeformerSet& DeformerSet)"
  },
  {
    "label": "GetMeshDeformerInstanceForLOD()",
    "kind": "Method",
    "detail": "Function (UMeshDeformerInstance*)",
    "insertText": "GetMeshDeformerInstanceForLOD(int32 LODIndex)"
  },
  {
    "label": "GetMeshDeformerMaxLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshDeformerMaxLOD()"
  },
  {
    "label": "GetPreviousBoneVisibilityStates()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetPreviousBoneVisibilityStates()"
  },
  {
    "label": "GetPreviousComponentTransformsArray()",
    "kind": "Method",
    "detail": "Function (} const TArray<FTransform>&)",
    "insertText": "GetPreviousComponentTransformsArray()"
  },
  {
    "label": "GetBoneTransformRevisionNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBoneTransformRevisionNumber()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const USkinnedMeshComponent* LeaderPoseComponentPtr = LeaderPoseComponent .)",
    "insertText": "Get()"
  },
  {
    "label": "GetPreviousBoneTransformRevisionNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPreviousBoneTransformRevisionNumber()"
  },
  {
    "label": "GetCurrentBoneTransformFrame()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCurrentBoneTransformFrame()"
  },
  {
    "label": "ClearMotionVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearMotionVector()"
  },
  {
    "label": "ForceMotionVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceMotionVector()"
  },
  {
    "label": "UpdateBoneTransformRevisionNumber()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateBoneTransformRevisionNumber()"
  },
  {
    "label": "GetPreviousBoneTransformUpdateMode()",
    "kind": "Method",
    "detail": "Function (EPreviousBoneTransformUpdateMode)",
    "insertText": "GetPreviousBoneTransformUpdateMode()"
  },
  {
    "label": "FMissingLeaderBoneCacheEntry()",
    "kind": "Method",
    "detail": "Function (enum class EBoneTransformUpdateMethod { AnimationUpdate,ClearMotionVector,ForceMotionVector } ; TArray<EBoneTransformUpdateMethod> BoneTransformUpdateMethodQueue ; TArray<FTransform> ComponentSpaceTransformsArray [ 2 ] ; protected : TArray<uint8> PreviousBoneVisibilityStates ; TArray<FTransform> PreviousComponentSpaceTransformsArray ; protected : float LastStreamerUpdateBoundsRadius ; int32 CurrentEditableComponentTransforms ; int32 CurrentReadComponentTransforms ; uint32 PreviousBoneTransformRevisionNumber ; uint32 CurrentBoneTransformRevisionNumber ; uint32 CurrentBoneTransformFrame ; int32 LeaderBoneMapCacheCount ; TArray<TWeakObjectPtr<USkinnedMeshComponent>> FollowerPoseComponents ; TArray<int32> LeaderBoneMap ; struct FMissingLeaderBoneCacheEntry {)",
    "insertText": "FMissingLeaderBoneCacheEntry() : RelativeTransform(FTransform::Identity) , CommonAncestorBoneIndex(INDEX_NONE)"
  },
  {
    "label": "FMissingLeaderBoneCacheEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMissingLeaderBoneCacheEntry(const FTransform& InRelativeTransform, int32 InCommonAncestorBoneIndex) : RelativeTransform(InRelativeTransform) , CommonAncestorBoneIndex(InCommonAncestorBoneIndex)"
  },
  {
    "label": "GetLeaderBoneMap()",
    "kind": "Method",
    "detail": "Function (# endif # if UE_ENABLE_DEBUG_DRAWING TOptional<FLinearColor> DebugDrawColor ; # endif protected : TSharedPtr<FSkelMeshRefPoseOverride> RefPoseOverride ; public : const TArray<int32>&)",
    "insertText": "GetLeaderBoneMap()"
  },
  {
    "label": "GetExternalMorphWeights()",
    "kind": "Method",
    "detail": "Function (} const FExternalMorphWeightData&)",
    "insertText": "GetExternalMorphWeights(int32 LOD)"
  },
  {
    "label": "AddExternalMorphSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalMorphSet(int32 LOD, int32 ID, TSharedPtr<FExternalMorphSet> MorphSet)"
  },
  {
    "label": "RemoveExternalMorphSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExternalMorphSet(int32 LOD, int32 ID)"
  },
  {
    "label": "ClearExternalMorphSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExternalMorphSets(int32 LOD)"
  },
  {
    "label": "HasExternalMorphSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExternalMorphSet(int32 LOD, int32 ID)"
  },
  {
    "label": "IsValidExternalMorphSetLODIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidExternalMorphSetLODIndex(int32 LOD)"
  },
  {
    "label": "GetExternalMorphSets()",
    "kind": "Method",
    "detail": "Function (const FExternalMorphSets&)",
    "insertText": "GetExternalMorphSets(int32 LOD)"
  },
  {
    "label": "GetCPUSkinnedCachedFinalVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCPUSkinnedCachedFinalVertices(TArray<FFinalSkinVertex>& OutVertices)"
  },
  {
    "label": "GetNaniteResources()",
    "kind": "Method",
    "detail": "Function (const Nanite::FResources*)",
    "insertText": "GetNaniteResources()"
  },
  {
    "label": "HasValidNaniteData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidNaniteData()"
  },
  {
    "label": "ShouldDrawDebugSkeleton()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING bool)",
    "insertText": "ShouldDrawDebugSkeleton()"
  },
  {
    "label": "GetDebugDrawColor()",
    "kind": "Method",
    "detail": "Function (bDrawDebugSkeleton = bInDraw ; } const TOptional<FLinearColor>&)",
    "insertText": "GetDebugDrawColor()"
  },
  {
    "label": "EnableExternalTickRateControl()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING private : uint8 bDrawDebugSkeleton : 1 ; # endif public : void)",
    "insertText": "EnableExternalTickRateControl(bool bInEnable)"
  },
  {
    "label": "IsUsingExternalTickRateControl()",
    "kind": "Method",
    "detail": "Function (bExternalTickRateControlled = bInEnable ; } bool)",
    "insertText": "IsUsingExternalTickRateControl()"
  },
  {
    "label": "GetExternalTickRate()",
    "kind": "Method",
    "detail": "Function (ExternalTickRate = InTickRate ; } uint8)",
    "insertText": "GetExternalTickRate()"
  },
  {
    "label": "IsUsingExternalInterpolation()",
    "kind": "Method",
    "detail": "Function (bExternalInterpolate = bInEnable ; } bool)",
    "insertText": "IsUsingExternalInterpolation()"
  },
  {
    "label": "SetExternalInterpolationAlpha()",
    "kind": "Method",
    "detail": "Function (bExternalUpdate = bInEnable ; } void)",
    "insertText": "SetExternalInterpolationAlpha(float InAlpha)"
  },
  {
    "label": "SetExternalDeltaTime()",
    "kind": "Method",
    "detail": "Function (ExternalInterpolationAlpha = InAlpha ; } void)",
    "insertText": "SetExternalDeltaTime(float InDeltaTime)"
  },
  {
    "label": "EnableExternalEvaluationRateLimiting()",
    "kind": "Method",
    "detail": "Function (ExternalDeltaTime = InDeltaTime ; } void)",
    "insertText": "EnableExternalEvaluationRateLimiting(bool bInEnable)"
  },
  {
    "label": "FSkeletalMeshObject()",
    "kind": "Method",
    "detail": "Function (class FSkeletalMeshObject* MeshObject ; class)",
    "insertText": "FSkeletalMeshObject(*MeshObjectFactory)(void* UserData, USkinnedMeshComponent* InMeshComponent, FSkeletalMeshRenderData* InSkelMeshRenderData, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetSkeletalMeshRenderData()",
    "kind": "Method",
    "detail": "Function (void* MeshObjectFactoryUserData ; class FSkeletalMeshObject* PreviousMeshObject ; FSkeletalMeshRenderData*)",
    "insertText": "GetSkeletalMeshRenderData()"
  },
  {
    "label": "GetUpdateClothSimulationData_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUpdateClothSimulationData_AnyThread(TMap<int32, FClothSimulData>& OutClothSimulData, FMatrix& OutLocalToWorld, float& OutClothBlendWeight)"
  },
  {
    "label": "GetLODBias()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "GetLODBias()"
  },
  {
    "label": "SetSkinnedAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkinnedAsset(class USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "IsSkinCacheAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkinCacheAllowed(int32 LodIdx)"
  },
  {
    "label": "HasMeshDeformer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMeshDeformer()"
  },
  {
    "label": "ComputeMinLOD()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ComputeMinLOD()"
  },
  {
    "label": "GetValidMinLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetValidMinLOD(const int32 InMinLODIndex)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetDetailedInfoInternal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDetailedInfoInternal()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "RequiresGameThreadEndOfFrameRecreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresGameThreadEndOfFrameRecreate()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (UObject const*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "GetMaterialPropertyPath()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR bool)",
    "insertText": "GetMaterialPropertyPath(int32 ElementIndex, UObject*& OutOwner, FString& OutPropertyPath, FProperty*& OutProperty)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace = RTS_World)"
  },
  {
    "label": "DoesSocketExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSocketExist(FName InSocketName)"
  },
  {
    "label": "HasAnySockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySockets()"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySupportedSockets(TArray<FComponentSocketDescription>& OutSockets)"
  },
  {
    "label": "UpdateOverlapsImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOverlapsImpl(const TOverlapArrayView* PendingOverlaps=nullptr, bool bDoNotifies=true, const TOverlapArrayView* OverlapsAtEndLocation=nullptr)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "GetMaterialIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaterialIndex(FName MaterialSlotName)"
  },
  {
    "label": "GetMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetMaterialSlotNames()"
  },
  {
    "label": "IsMaterialSlotNameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialSlotNameValid(FName MaterialSlotName)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetMaterialStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialStreamingData(int32 MaterialIndex, FPrimitiveMaterialInfo& MaterialData)"
  },
  {
    "label": "GetStreamingRenderAssetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStreamingRenderAssetInfo(FStreamingTextureLevelContext& LevelContext, TArray<FStreamingRenderAssetPrimitiveInfo>& OutStreamingRenderAssets)"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetStreamingScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStreamingScale()"
  },
  {
    "label": "GetPrimitiveStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPrimitiveStats(FPrimitiveStats& PrimitiveStats)"
  },
  {
    "label": "RegisterLODStreamingCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLODStreamingCallback(FLODStreamingCallback&& Callback, int32 LODIdx, float TimeoutSecs, bool bOnStreamIn)"
  },
  {
    "label": "RegisterLODStreamingCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLODStreamingCallback(FLODStreamingCallback&& CallbackStreamingStart, FLODStreamingCallback&& CallbackStreamingDone, float TimeoutStartSecs, float TimeoutDoneSecs)"
  },
  {
    "label": "PrestreamMeshLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrestreamMeshLODs(float Seconds)"
  },
  {
    "label": "GetPreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreSkinnedLocalBounds(FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "ResizeExternalMorphTargetSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeExternalMorphTargetSets()"
  },
  {
    "label": "RefreshExternalMorphTargetWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshExternalMorphTargetWeights(bool bZeroOldWeights = true)"
  },
  {
    "label": "SetForceWireframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceWireframe(bool InForceWireframe)"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "GetSectionPreview()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "GetSectionPreview()"
  },
  {
    "label": "GetMaterialPreview()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaterialPreview()"
  },
  {
    "label": "GetSelectedEditorSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedEditorSection()"
  },
  {
    "label": "GetSelectedEditorMaterial()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedEditorMaterial()"
  },
  {
    "label": "ShouldNaniteSkin()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldNaniteSkin()"
  },
  {
    "label": "ShouldCPUSkin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCPUSkin()"
  },
  {
    "label": "GetCPUSkinningEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCPUSkinningEnabled()"
  },
  {
    "label": "SetCPUSkinningEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCPUSkinningEnabled(bool bEnable, bool bRecreateRenderStateImmediately = false)"
  },
  {
    "label": "PostInitMeshObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitMeshObject(class FSkeletalMeshObject*)"
  },
  {
    "label": "GetSkinnedVertexPosition()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetSkinnedVertexPosition(USkinnedMeshComponent* Component, int32 VertexIndex, const FSkeletalMeshLODRenderData& LODDatal, FSkinWeightVertexBuffer& SkinWeightBuffer)"
  },
  {
    "label": "GetSkinnedVertexPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetSkinnedVertexPosition(USkinnedMeshComponent* Component, int32 VertexIndex, const FSkeletalMeshLODRenderData& LODData, FSkinWeightVertexBuffer& SkinWeightBuffer, TArray<FMatrix44f>& CachedRefToLocals)"
  },
  {
    "label": "ComputeSkinnedPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSkinnedPositions(USkinnedMeshComponent* Component, TArray<FVector3f> & OutPositions, TArray<FMatrix44f>& CachedRefToLocals, const FSkeletalMeshLODRenderData& LODData, const FSkinWeightVertexBuffer& SkinWeightBuffer)"
  },
  {
    "label": "CacheRefToLocalMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheRefToLocalMatrices(TArray<FMatrix44f>& OutRefToLocal)"
  },
  {
    "label": "GetCurrentRefToLocalMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurrentRefToLocalMatrices(TArray<FMatrix44f>& OutRefToLocals, int32 InLodIdx, const TArray<FBoneIndexType>* ExtraRequiredBoneIndices = nullptr)"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (} FColor)",
    "insertText": "GetVertexColor(int32 VertexIndex)"
  },
  {
    "label": "SetVertexColorOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexColorOverride(int32 LODIndex, const TArray<FColor>& VertexColors)"
  },
  {
    "label": "GetVertexUV()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetVertexUV(int32 VertexIndex, uint32 UVChannel)"
  },
  {
    "label": "IsSkinWeightProfilePending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkinWeightProfilePending()"
  },
  {
    "label": "SetSkinWeightProfileStack()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SetSkinWeightProfileStack(const FSkinWeightProfileStack& InProfileStack)"
  },
  {
    "label": "GetSkinWeightBuffer()",
    "kind": "Method",
    "detail": "Function (FName CurrentSkinWeightProfileLayers [ 2 ] = { NAME_None } ; public : FSkinWeightVertexBuffer*)",
    "insertText": "GetSkinWeightBuffer(int32 LODIndex)"
  },
  {
    "label": "SetRefPoseOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefPoseOverride(const TArray<FTransform>& NewRefPoseTransforms)"
  },
  {
    "label": "GetRefPoseOverride()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSkelMeshRefPoseOverride>&)",
    "insertText": "GetRefPoseOverride()"
  },
  {
    "label": "RefreshBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneTransforms(FActorComponentTickFunction* TickFunction = nullptr) PURE_VIRTUAL(USkinnedMeshComponent::RefreshBoneTransforms,)"
  },
  {
    "label": "DispatchParallelTickPose()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DispatchParallelTickPose(FActorComponentTickFunction* TickFunction)"
  },
  {
    "label": "UpdateLODStatus_Internal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateLODStatus_Internal(int32 InLeaderPoseComponentPredictedLODLevel, bool bRequestedByLeaderPoseComponent = false)"
  },
  {
    "label": "TickPose()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickPose(float DeltaTime, bool bNeedsValidRootMotion)"
  },
  {
    "label": "UpdateFollowerComponent()",
    "kind": "Method",
    "detail": "Function (FOnTickPose OnTickPose ; void)",
    "insertText": "UpdateFollowerComponent()"
  },
  {
    "label": "UpdateLODStatus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateLODStatus()"
  },
  {
    "label": "SetPredictedLODLevel()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return PredictedLODLevel ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } protected : class FSkeletalMeshStreamOut ; void)",
    "insertText": "SetPredictedLODLevel(int32 InPredictedLODLevel)"
  },
  {
    "label": "UpdateVisualizeLODString()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS PredictedLODLevel = InPredictedLODLevel ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } public : void)",
    "insertText": "UpdateVisualizeLODString(FString& DebugString)"
  },
  {
    "label": "FinalizeBoneTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeBoneTransform()"
  },
  {
    "label": "InitLODInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLODInfos()"
  },
  {
    "label": "RebuildVisibilityArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildVisibilityArray()"
  },
  {
    "label": "UpdateMorphMaterialUsageOnProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphMaterialUsageOnProxy()"
  },
  {
    "label": "GetComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>&)",
    "insertText": "GetComponentSpaceTransforms()"
  },
  {
    "label": "GetBoneVisibilityStates()",
    "kind": "Method",
    "detail": "Function (} const TArray<uint8>&)",
    "insertText": "GetBoneVisibilityStates()"
  },
  {
    "label": "GetCachedLocalBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetCachedLocalBounds()"
  },
  {
    "label": "ShouldUpdateTransform()",
    "kind": "Method",
    "detail": "Function (} else { return CachedWorldOrLocalSpaceBounds ; } } bool)",
    "insertText": "ShouldUpdateTransform(bool bLODHasChanged)"
  },
  {
    "label": "FlipEditableSpaceBases()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "FlipEditableSpaceBases()"
  },
  {
    "label": "ShouldTickPose()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldTickPose()"
  },
  {
    "label": "AllocateTransformData()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AllocateTransformData()"
  },
  {
    "label": "DeallocateTransformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateTransformData()"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "InvalidateCachedBounds()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InvalidateCachedBounds()"
  },
  {
    "label": "CalcMeshBound()",
    "kind": "Method",
    "detail": "Function (protected : FBoxSphereBounds)",
    "insertText": "CalcMeshBound(const FVector3f& RootOffset, bool UsePhysicsAsset, const FTransform& Transform)"
  },
  {
    "label": "ShouldUpdateBoneVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateBoneVisibility()"
  },
  {
    "label": "ReleaseUpdateRateParams()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ReleaseUpdateRateParams()"
  },
  {
    "label": "RefreshUpdateRateParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshUpdateRateParams()"
  },
  {
    "label": "TickUpdateRate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TickUpdateRate(float DeltaTime, bool bNeedsValidRootMotion)"
  },
  {
    "label": "SetLeaderPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLeaderPoseComponent(NewMasterBoneComponent, bForceUpdate)"
  },
  {
    "label": "GetFollowerPoseComponents()",
    "kind": "Method",
    "detail": "Function (} const TArray<TWeakObjectPtr<USkinnedMeshComponent>>&)",
    "insertText": "GetFollowerPoseComponents()"
  },
  {
    "label": "AddFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddFollowerPoseComponent(USkinnedMeshComponent* SkinnedMeshComponent)"
  },
  {
    "label": "AddFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFollowerPoseComponent(SkinnedMeshComponent)"
  },
  {
    "label": "RemoveFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFollowerPoseComponent(USkinnedMeshComponent* SkinnedMeshComponent)"
  },
  {
    "label": "RemoveFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFollowerPoseComponent(SkinnedMeshComponent)"
  },
  {
    "label": "GetDefaultOverlayMaterial()",
    "kind": "Method",
    "detail": "Function (} protected : UMaterialInterface*)",
    "insertText": "GetDefaultOverlayMaterial()"
  },
  {
    "label": "GetDefaultOverlayMaterialMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultOverlayMaterialMaxDrawDistance()"
  },
  {
    "label": "RefreshFollowerComponents()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RefreshFollowerComponents()"
  },
  {
    "label": "UpdateLeaderBoneMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateLeaderBoneMap()"
  },
  {
    "label": "GetSocketInfoByName()",
    "kind": "Method",
    "detail": "Function (} class USkeletalMeshSocket const*)",
    "insertText": "GetSocketInfoByName(FName InSocketName, FTransform& OutTransform, int32& OutBoneIndex)"
  },
  {
    "label": "GetSocketByName()",
    "kind": "Method",
    "detail": "Function (class USkeletalMeshSocket const*)",
    "insertText": "GetSocketByName(FName InSocketName)"
  },
  {
    "label": "AddSocketOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSocketOverride(FName SourceSocketName, FName OverrideSocketName, bool bWarnHasOverrided = true)"
  },
  {
    "label": "RemoveSocketOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSocketOverrides(FName SourceSocketName)"
  },
  {
    "label": "RemoveAllSocketOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllSocketOverrides()"
  },
  {
    "label": "GetBoneMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetBoneMatrix(int32 BoneIndex)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetBoneTransform(int32 BoneIndex, const FTransform& LocalToWorld)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetBoneTransform(int32 BoneIndex)"
  },
  {
    "label": "GetBoneQuaternion()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetBoneQuaternion(FName BoneName, EBoneSpaces::Type Space = EBoneSpaces::WorldSpace)"
  },
  {
    "label": "GetBoneLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBoneLocation(FName BoneName, EBoneSpaces::Type Space = EBoneSpaces::WorldSpace)"
  },
  {
    "label": "GetBoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneNames(TArray<FName>& BoneNames)"
  },
  {
    "label": "GetBoneAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetBoneAxis(FName BoneName, EAxis::Type Axis)"
  },
  {
    "label": "FindClosestBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindClosestBone(FVector TestLocation, FVector* BoneLocation = nullptr, float IgnoreScale = 0.f, bool bRequirePhysicsAsset = false)"
  },
  {
    "label": "FindMorphTarget()",
    "kind": "Method",
    "detail": "Function (class UMorphTarget*)",
    "insertText": "FindMorphTarget(FName MorphTargetName)"
  },
  {
    "label": "HideBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideBone(int32 BoneIndex, EPhysBodyOp PhysBodyOption)"
  },
  {
    "label": "UnHideBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnHideBone(int32 BoneIndex)"
  },
  {
    "label": "IsBoneHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneHidden(int32 BoneIndex)"
  },
  {
    "label": "GetPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (class UPhysicsAsset*)",
    "insertText": "GetPhysicsAsset()"
  },
  {
    "label": "RefreshMorphTargets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshMorphTargets()"
  },
  {
    "label": "GetMissingLeaderBoneRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetMissingLeaderBoneRelativeTransform(int32 InBoneIndex, FMissingLeaderBoneCacheEntry& OutInfo)"
  },
  {
    "label": "GetDesiredSyncLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDesiredSyncLOD()"
  },
  {
    "label": "GetBestAvailableLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBestAvailableLOD()"
  },
  {
    "label": "SetForceStreamedLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceStreamedLOD(int32 LODIndex)"
  },
  {
    "label": "SetForceRenderedLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceRenderedLOD(int32 LODIndex)"
  },
  {
    "label": "GetNumSyncLODs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSyncLODs()"
  },
  {
    "label": "GetForceStreamedLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetForceStreamedLOD()"
  },
  {
    "label": "GetForceRenderedLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetForceRenderedLOD()"
  },
  {
    "label": "IsPlayingRootMotion()",
    "kind": "Method",
    "detail": "Function (public : FOnAnimUpdateRateParamsCreated OnAnimUpdateRateParamsCreated ; struct FAnimUpdateRateParameters* AnimUpdateRateParams ; bool)",
    "insertText": "IsPlayingRootMotion()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "BindWorldDelegates()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BindWorldDelegates()"
  },
  {
    "label": "HandlePostWorldCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostWorldCreation(UWorld* InWorld)"
  },
  {
    "label": "HandleFeatureLevelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFeatureLevelChanged(ERHIFeatureLevel::Type InFeatureLevel, TWeakObjectPtr<UWorld> InWorld)"
  },
  {
    "label": "GetPhysicsRequiredBones()",
    "kind": "Method",
    "detail": "Function (# endif class FRenderStateRecreator ; class FSkeletalMeshStreamOut ; struct UE::Anim::FSkinnedMeshComponentExtensions ; void)",
    "insertText": "GetPhysicsRequiredBones(const USkinnedAsset* SkinnedAsset, const UPhysicsAsset* PhysicsAsset, TArray<FBoneIndexType>& OutRequiredBones)"
  },
  {
    "label": "GetSocketRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSocketRequiredBones(const USkinnedAsset* SkinnedAsset, TArray<FBoneIndexType>& OutRequiredBones, TArray<FBoneIndexType>& NeededBonesForFillComponentSpaceTransforms)"
  },
  {
    "label": "MergeInBoneIndexArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeInBoneIndexArrays(TArray<FBoneIndexType>& BaseArray, const TArray<FBoneIndexType>& InsertArray)"
  },
  {
    "label": "GetAdditionalRequiredBonesForLeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAdditionalRequiredBonesForLeader(int32 LODIndex, TArray<FBoneIndexType>& InOutRequiredBones)"
  },
  {
    "label": "RegisterOnBoneTransformsFinalizedDelegate()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterOnBoneTransformsFinalizedDelegate(const FOnBoneTransformsFinalizedMultiCast::FDelegate&)"
  },
  {
    "label": "UnregisterOnBoneTransformsFinalizedDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnBoneTransformsFinalizedDelegate(const FDelegateHandle&)"
  },
  {
    "label": "FRenderStateRecreator()",
    "kind": "Method",
    "detail": "Function (} } ; class FRenderStateRecreator { USkinnedMeshComponent* Component ; const bool bWasInitiallyRegistered ; const bool bWasRenderStateCreated ; public :)",
    "insertText": "FRenderStateRecreator(USkinnedMeshComponent* InActorComponent) : Component(InActorComponent), bWasInitiallyRegistered(Component->IsRegistered()), bWasRenderStateCreated(Component->IsRenderStateCreated())"
  },
  {
    "label": "FRenderStateRecreator()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FRenderStateRecreator()"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (const bool bIsRegistered = Component ->)",
    "insertText": "IsRegistered()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "CreateRenderState_Concurrent(nullptr)"
  },
  {
    "label": "GetTypedSkinnedTangentBasis()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "GetTypedSkinnedTangentBasis(const USkinnedMeshComponent* SkinnedComp, const FSkelMeshRenderSection& Section, const FStaticMeshVertexBuffers& StaticVertexBuffers, const FSkinWeightVertexBuffer& SkinWeightVertexBuffer, const int32 VertIndex, const TArray<FMatrix44f> & RefToLocals, FVector3f& OutTangentX, FVector3f& OutTangentY, FVector3f& OutTangentZ)"
  },
  {
    "label": "GetTypedSkinnedVertexPosition()",
    "kind": "Method",
    "detail": "Function (template<bool bCachedMatrices> FVector3f)",
    "insertText": "GetTypedSkinnedVertexPosition(const USkinnedMeshComponent* SkinnedComp, const FSkelMeshRenderSection& Section, const FPositionVertexBuffer& PositionVertexBuffer, const FSkinWeightVertexBuffer& SkinWeightVertexBuffer, const int32 VertIndex, const TArray<FMatrix44f> & RefToLocals = TArray<FMatrix44f>())"
  }
]