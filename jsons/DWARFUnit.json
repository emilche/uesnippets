[
  {
    "label": "ObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectFile"
  },
  {
    "label": "DWARFContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFContext"
  },
  {
    "label": "DWARFDebugAbbrev",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFDebugAbbrev"
  },
  {
    "label": "DWARFUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFUnit"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DWARFUnitSectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFUnitSectionBase"
  },
  {
    "label": "DWARFUnitSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFUnitSection"
  },
  {
    "label": "UnitOffsetComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnitOffsetComparator"
  },
  {
    "label": "DWOHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWOHolder"
  },
  {
    "label": "getUnitForOffset()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_DEBUGINFO_DWARFUNIT_H # define LLVM_LIB_DEBUGINFO_DWARFUNIT_H # include \" llvm / ADT / STLExtras . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugAbbrev . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugInfoEntry . h \" # include \" llvm / DebugInfo / DWARF / DWARFDebugRangeList . h \" # include \" llvm / DebugInfo / DWARF / DWARFRelocMap . h \" # include \" llvm / DebugInfo / DWARF / DWARFSection . h \" # include<vector> namespace llvm { namespace object { class ObjectFile ; } class DWARFContext ; class DWARFDebugAbbrev ; class DWARFUnit ; class StringRef ; class raw_ostream ; class DWARFUnitSectionBase { public : DWARFUnit*)",
    "insertText": "getUnitForOffset(uint32_t Offset)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(DWARFContext &C, const DWARFSection &Section)"
  },
  {
    "label": "parseDWO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseDWO(DWARFContext &C, const DWARFSection &DWOSection)"
  },
  {
    "label": "parseImpl()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "parseImpl(DWARFContext &Context, const DWARFSection &Section, const DWARFDebugAbbrev *DA, StringRef RS, StringRef SS, StringRef SOS, StringRef AOS, bool isLittleEndian)"
  },
  {
    "label": "DWARFUnitSectionBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DWARFUnitSectionBase()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<UnitType> class DWARFUnitSection final : public SmallVector<std::unique_ptr<UnitType>,1>,public DWARFUnitSectionBase { struct UnitOffsetComparator { bool)",
    "insertText": "operator()(uint32_t LHS, const std::unique_ptr<UnitType> &RHS)"
  },
  {
    "label": "DWARFUnitSection()",
    "kind": "Method",
    "detail": "Function (} } ; bool Parsed ; public :)",
    "insertText": "DWARFUnitSection() : Parsed(false)"
  },
  {
    "label": "DWARFUnitSection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DWARFUnitSection(DWARFUnitSection &&DUS) : SmallVector<std::unique_ptr<UnitType>, 1>(std::move(DUS)), Parsed(DUS.Parsed)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (auto* CU =)",
    "insertText": "upper_bound(this->begin(), this->end(), Offset, UnitOffsetComparator())"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (DataExtractor)",
    "insertText": "Data(Section.Data, LE, 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32_t Offset = 0 ;)",
    "insertText": "while(Data.isValidOffset(Offset))"
  },
  {
    "label": "UnitType()",
    "kind": "Method",
    "detail": "Function (auto U = llvm::make_unique<)",
    "insertText": "UnitType(Context, Section, DA, RS, SS, SOS, AOS, LE, *this)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "push_back(std::move(U))"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (Offset = this ->)",
    "insertText": "back()->getNextUnitOffset()"
  },
  {
    "label": "DWOHolder()",
    "kind": "Method",
    "detail": "Function (} Parsed = true ; } } ; class DWARFUnit { DWARFContext& Context ; const DWARFSection& InfoSection ; const DWARFDebugAbbrev* Abbrev ; StringRef RangeSection ; uint32_t RangeSectionBase ; StringRef StringSection ; StringRef StringOffsetSection ; StringRef AddrOffsetSection ; uint32_t AddrOffsetSectionBase ; bool isLittleEndian ; const DWARFUnitSectionBase& UnitSection ; uint32_t Offset ; uint32_t Length ; uint16_t Version ; const DWARFAbbreviationDeclarationSet* Abbrevs ; uint8_t AddrSize ; uint64_t BaseAddr ; std::vector<DWARFDebugInfoEntryMinimal> DieArray ; class DWOHolder { object::OwningBinary<object::ObjectFile> DWOFile ; std::unique_ptr<DWARFContext> DWOContext ; DWARFUnit* DWOU ; public :)",
    "insertText": "DWOHolder(StringRef DWOPath)"
  },
  {
    "label": "getUnit()",
    "kind": "Method",
    "detail": "Function (DWARFUnit*)",
    "insertText": "getUnit()"
  },
  {
    "label": "getHeaderSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getHeaderSize()"
  },
  {
    "label": "DWARFUnit()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DWARFUnit()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (DWARFContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "setRangesSection()",
    "kind": "Method",
    "detail": "Function (AddrOffsetSection = AOS ; AddrOffsetSectionBase = Base ; } void)",
    "insertText": "setRangesSection(StringRef RS, uint32_t Base)"
  },
  {
    "label": "getAddrOffsetSectionItem()",
    "kind": "Method",
    "detail": "Function (RangeSection = RS ; RangeSectionBase = Base ; } bool)",
    "insertText": "getAddrOffsetSectionItem(uint32_t Index, uint64_t &Result)"
  },
  {
    "label": "getStringOffsetSectionItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getStringOffsetSectionItem(uint32_t Index, uint32_t &Result)"
  },
  {
    "label": "getDebugInfoExtractor()",
    "kind": "Method",
    "detail": "Function (DataExtractor)",
    "insertText": "getDebugInfoExtractor()"
  },
  {
    "label": "getStringExtractor()",
    "kind": "Method",
    "detail": "Function (} DataExtractor)",
    "insertText": "getStringExtractor()"
  },
  {
    "label": "getRelocMap()",
    "kind": "Method",
    "detail": "Function (} const RelocAddrMap*)",
    "insertText": "getRelocMap()"
  },
  {
    "label": "extractRangeList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "extractRangeList(uint32_t RangeListOffset, DWARFDebugRangeList &RangeList)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getOffset()"
  },
  {
    "label": "getUnitDIE()",
    "kind": "Method",
    "detail": "Function (BaseAddr = base_addr ; } const DWARFDebugInfoEntryMinimal*)",
    "insertText": "getUnitDIE(bool ExtractUnitDIEOnly = true)"
  },
  {
    "label": "extractDIEsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractDIEsIfNeeded(ExtractUnitDIEOnly)"
  },
  {
    "label": "getCompilationDir()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getCompilationDir()"
  },
  {
    "label": "getDWOId()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getDWOId()"
  },
  {
    "label": "collectAddressRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectAddressRanges(DWARFAddressRangesVector &CURanges)"
  },
  {
    "label": "getInlinedChainForAddress()",
    "kind": "Method",
    "detail": "Function (DWARFDebugInfoEntryInlinedChain)",
    "insertText": "getInlinedChainForAddress(uint64_t Address)"
  },
  {
    "label": "getUnitSection()",
    "kind": "Method",
    "detail": "Function (const DWARFUnitSectionBase&)",
    "insertText": "getUnitSection()"
  },
  {
    "label": "extractDIEsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractDIEsIfNeeded(false)"
  },
  {
    "label": "getDIEIndex()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getDIEIndex(const DWARFDebugInfoEntryMinimal *DIE)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!DieArray.empty() && DIE >= &DieArray[0] && DIE < &DieArray[0] + DieArray.size())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < DieArray.size())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!DieArray.empty())"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "lower_bound(DieArray.begin(), DieArray.end(), Offset, [=](const DWARFDebugInfoEntryMinimal &LHS, uint32_t Offset) { return LHS.getOffset() < Offset; })"
  },
  {
    "label": "getDebugInfoSize()",
    "kind": "Method",
    "detail": "Function (} private : size_t)",
    "insertText": "getDebugInfoSize()"
  },
  {
    "label": "extractDIEsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "extractDIEsIfNeeded(bool CUDieOnly)"
  },
  {
    "label": "extractDIEsToVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractDIEsToVector(bool AppendCUDie, bool AppendNonCUDIEs, std::vector<DWARFDebugInfoEntryMinimal> &DIEs)"
  },
  {
    "label": "setDIERelations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDIERelations()"
  },
  {
    "label": "clearDIEs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearDIEs(bool KeepCUDie)"
  },
  {
    "label": "parseDWO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseDWO()"
  },
  {
    "label": "getSubprogramForAddress()",
    "kind": "Method",
    "detail": "Function (const DWARFDebugInfoEntryMinimal*)",
    "insertText": "getSubprogramForAddress(uint64_t Address)"
  }
]