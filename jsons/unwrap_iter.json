[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "__unwrap_iter_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unwrap_iter_impl"
  },
  {
    "label": "_Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Impl"
  },
  {
    "label": "_OrigIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OrigIter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_UNWRAP_ITER_H # define _LIBCPP___ALGORITHM_UNWRAP_ITER_H # include<__config> # include<__iterator / iterator_traits . h> # include<__memory / pointer_traits . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__rewrap()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter)",
    "insertText": "__rewrap(_Iter, _Iter __iter)"
  },
  {
    "label": "__rewrap()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter)",
    "insertText": "__rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter)"
  },
  {
    "label": "__unwrap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT)",
    "insertText": "__unwrap(_Iter __i)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<class _Iter,class _Impl = __unwrap_iter_impl<_Iter>,__enable_if_t<is_copy_constructible<_Iter>::value,int> = 0> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "decltype(_Impl::__unwrap(std::declval<_Iter>())) __unwrap_iter(_Iter __i)"
  },
  {
    "label": "__rewrap_iter()",
    "kind": "Method",
    "detail": "Function (} template<class _OrigIter,class _Iter,class _Impl = __unwrap_iter_impl<_OrigIter>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter)",
    "insertText": "__rewrap_iter(_OrigIter __orig_iter, _Iter __iter)"
  }
]