[
  {
    "label": "FPackageUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageUtils"
  },
  {
    "label": "IsMapPackageAsset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / PackageName . h \" # include \" Misc / Paths . h \" namespace UE { namespace Interchange { class FPackageUtils { public : bool)",
    "insertText": "IsMapPackageAsset(const FString& ObjectPath)"
  },
  {
    "label": "IsMapPackageAsset()",
    "kind": "Method",
    "detail": "Function (FString MapFilePath ; return)",
    "insertText": "IsMapPackageAsset(ObjectPath, MapFilePath)"
  },
  {
    "label": "IsMapPackageAsset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMapPackageAsset(const FString& ObjectPath, FString& MapFilePath)"
  },
  {
    "label": "ExtractPackageName()",
    "kind": "Method",
    "detail": "Function (const FString PackageName =)",
    "insertText": "ExtractPackageName(ObjectPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString PackagePath ;)",
    "insertText": "if(FPackageName::DoesPackageExist(PackageName, &PackagePath))"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (const FString FileExtension =)",
    "insertText": "GetExtension(PackagePath, true)"
  },
  {
    "label": "ExtractPackageName()",
    "kind": "Method",
    "detail": "Function (MapFilePath = PackagePath ; return true ; } } } return false ; } FString)",
    "insertText": "ExtractPackageName(const FString& ObjectPath)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 PackageDelimiterPos = ObjectPath .)",
    "insertText": "Find(TEXT(\".\"), ESearchCase::CaseSensitive, ESearchDir::FromStart)"
  }
]