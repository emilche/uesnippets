[
  {
    "label": "FilePathWatcherFSEvents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePathWatcherFSEvents"
  },
  {
    "label": "FilePathWatcherFSEvents()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_PATH_WATCHER_FSEVENTS_H_ # define BASE_FILES_FILE_PATH_WATCHER_FSEVENTS_H_ # include<CoreServices / CoreServices . h> # include<stddef . h> # include<vector> # include \" base / files / file_path . h \" # include \" base / files / file_path_watcher . h \" # include \" base / mac / scoped_dispatch_object . h \" # include \" base / memory / weak_ptr . h \" namespace base { class FilePathWatcherFSEvents : public FilePathWatcher::PlatformDelegate { public :)",
    "insertText": "FilePathWatcherFSEvents()"
  },
  {
    "label": "FilePathWatcherFSEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePathWatcherFSEvents(const FilePathWatcherFSEvents&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilePathWatcherFSEvents&)",
    "insertText": "operator(const FilePathWatcherFSEvents&)"
  },
  {
    "label": "Watch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Watch(const FilePath& path, Type type, const FilePathWatcher::Callback& callback)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "FSEventsCallback()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FSEventsCallback(ConstFSEventStreamRef stream, void* event_watcher, size_t num_events, void* event_paths, const FSEventStreamEventFlags flags[], const FSEventStreamEventId event_ids[])"
  },
  {
    "label": "OnFilePathsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilePathsChanged(const std::vector<FilePath>& paths)"
  },
  {
    "label": "DispatchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchEvents(const std::vector<FilePath>& paths, const FilePath& target, const FilePath& resolved_target)"
  },
  {
    "label": "UpdateEventStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventStream(FSEventStreamEventId start_event)"
  },
  {
    "label": "ResolveTargetPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveTargetPath()"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError(const FilePath& target)"
  },
  {
    "label": "DestroyEventStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEventStream()"
  },
  {
    "label": "StartEventStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEventStream(FSEventStreamEventId start_event, const FilePath& path)"
  }
]