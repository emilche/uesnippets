[
  {
    "label": "_Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Arg"
  },
  {
    "label": "__conjunction_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__conjunction_impl"
  },
  {
    "label": "conjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conjunction"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_CONJUNCTION_H # define _LIBCPP___TYPE_TRAITS_CONJUNCTION_H # include<__config> # include<__type_traits / conditional . h> # include<__type_traits / enable_if . h> # include<__type_traits / integral_constant . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using type = conditional_t<!)",
    "insertText": "bool(_Arg::value)"
  },
  {
    "label": "__and_helper()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Arg> struct __conjunction_impl<_Arg> { using type = _Arg ; } ; template<class . . . _Args> struct conjunction : __conjunction_impl<true_type,_Args . . .>::type { } ; template<class . . . _Args> bool conjunction_v = conjunction<_Args . . .>::value ; # endif template<class . . .> using __expand_to_true = true_type ; template<class . . . _Pred> __expand_to_true<__enable_if_t<_Pred::value> . . .>)",
    "insertText": "__and_helper(int)"
  },
  {
    "label": "__and_helper()",
    "kind": "Method",
    "detail": "Function (template<class . . .> false_type)",
    "insertText": "__and_helper(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Pred> using _And _LIBCPP_NODEBUG =)",
    "insertText": "decltype(__and_helper<_Pred...>(0))"
  }
]