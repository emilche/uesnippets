[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FEdModeActorPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeActorPicker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEdModeActorPicker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" EdMode . h \" # include \" ActorPickerMode . h \" class FEditorViewportClient ; class FViewport ; class SWindow ; namespace EPickState { enum Type { NotOverViewport,OverViewport,OverIncompatibleActor,OverActor,} ; } class FEdModeActorPicker : public FEdMode { public :)",
    "insertText": "FEdModeActorPicker()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseEnter(FEditorViewportClient* ViewportClient, FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseLeave(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursor(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "GetCursorDecoratorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCursorDecoratorText()"
  },
  {
    "label": "IsActorValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorValid(const AActor *const Actor)"
  },
  {
    "label": "UpdateWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<AActor> HoveredActor ; EPickState::Type PickState ; TSharedPtr<SWindow> CursorDecoratorWindow ; FOnActorSelected OnActorSelected ; FOnGetAllowedClasses OnGetAllowedClasses ; FOnShouldFilterActor OnShouldFilterActor ; private : enum class WidgetVisibilityState : uint8 { StoreAndHide,Restore } ; void)",
    "insertText": "UpdateWidgetVisibility(const WidgetVisibilityState InState, FEditorViewportClient* InViewportClient = nullptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()> WidgetVisibilityFunction = TFunction<void()>()"
  }
]