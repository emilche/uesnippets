[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRandomPlayerSequenceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRandomPlayerSequenceEntry"
  },
  {
    "label": "FRandomAnimPlayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRandomAnimPlayData"
  },
  {
    "label": "FAnimNode_RandomPlayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_RandomPlayer"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AlphaBlend . h \" # include \" Animation / AnimNode_RelevantAssetPlayerBase . h \" # include \" Animation / AnimationAsset . h \" # include \" CoreMinimal . h \" # include \" Math / RandomStream . h \" # include \" UObject / ObjectMacros . h \" # include \" AnimNode_RandomPlayer . generated . h \" enum class ERandomDataIndexType { Current,Next,} ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FRandomPlayerSequenceEntry() : Sequence(nullptr) , ChanceToPlay(1.0f) , MinLoopCount(0) , MaxLoopCount(0) , MinPlayRate(1.0f) , MaxPlayRate(1.0f)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ANIMGRAPHRUNTIME_API FAnimNode_RandomPlayer()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "GetAnimAsset()",
    "kind": "Method",
    "detail": "Function (UAnimationAsset*)",
    "insertText": "GetAnimAsset()"
  },
  {
    "label": "GetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAccumulatedTime()"
  },
  {
    "label": "GetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreForRelevancyTest()"
  },
  {
    "label": "SetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIgnoreForRelevancyTest(bool bInIgnoreForRelevancyTest)"
  },
  {
    "label": "GetCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCachedBlendWeight()"
  },
  {
    "label": "ClearCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedBlendWeight()"
  },
  {
    "label": "GetDeltaTimeRecord()",
    "kind": "Method",
    "detail": "Function (const FDeltaTimeRecord*)",
    "insertText": "GetDeltaTimeRecord()"
  },
  {
    "label": "GetNextValidEntryIndex()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetNextValidEntryIndex()"
  },
  {
    "label": "GetPlayData()",
    "kind": "Method",
    "detail": "Function (FRandomAnimPlayData&)",
    "insertText": "GetPlayData(ERandomDataIndexType Type)"
  },
  {
    "label": "InitPlayData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPlayData(FRandomAnimPlayData& Data, int32 InValidEntryIndex, float InBlendWeight)"
  },
  {
    "label": "AdvanceToNextSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToNextSequence()"
  },
  {
    "label": "BuildShuffleList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildShuffleList(int32 LastEntry)"
  }
]