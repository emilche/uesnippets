[
  {
    "label": "FEditorBulkDataWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkDataWriter"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FEditorBulkDataWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Serialization / EditorBulkData . h \" # if WITH_EDITORONLY_DATA namespace UE::Serialization { class FEditorBulkDataWriter : public FArchive { public :)",
    "insertText": "FEditorBulkDataWriter(FEditorBulkData& InBulkData, bool bIsPersistent = false) : BulkData(InBulkData)"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "SetIsPersistent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPersistent(bIsPersistent)"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer Payload = InBulkData .)",
    "insertText": "GetPayload().Get()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (const int64 CurrentDataLength = Payload .)",
    "insertText": "GetSize()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "Malloc(CurrentDataLength, DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Buffer, Payload.GetData(), CurrentDataLength)"
  },
  {
    "label": "FEditorBulkDataWriter()",
    "kind": "Method",
    "detail": "Function (BufferLength = CurrentDataLength ; CurPos = CurrentDataLength ; DataLength = CurrentDataLength ; } else { Buffer = nullptr ; BufferLength = 0 ; CurPos = 0 ; DataLength = 0 ; } } ~)",
    "insertText": "FEditorBulkDataWriter()"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "Realloc(Buffer, DataLength, DEFAULT_ALIGNMENT)"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (BulkData .)",
    "insertText": "UpdatePayload(FSharedBuffer::TakeOwnership(Buffer, DataLength, FMemory::Free))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const int64 NewPos = CurPos + Num ;)",
    "insertText": "checkf(NewPos >= CurPos, TEXT(\"Serialization has somehow gone backwards\"))"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (const int64 NewLength = NewPos + 3* NewPos / 8 + 1 6 ; Buffer =)",
    "insertText": "Realloc(Buffer, NewLength, DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (BufferLength = NewLength ; })",
    "insertText": "Memcpy(static_cast<unsigned char*>(Buffer) + CurPos, Data, Num)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (CurPos + = Num ; DataLength =)",
    "insertText": "Max(DataLength, CurPos)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using FArchive::operator<<; FArchive&)",
    "insertText": "operator(class FName& Name)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString StringName = Name .)",
    "insertText": "ToString()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (* this<<StringName ; return* this ; } int64)",
    "insertText": "Tell()"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (CurPos = InPos ; } bool)",
    "insertText": "AtEnd()"
  }
]