[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeSliderController"
  },
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "FSegmentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegmentData"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FPaintArgs ; class FSlateWindowElementList ; class FTimeSliderController ; class SSegmentedTimelineView : public SCompoundWidget { public : struct FSegmentData { public : TArray<TRange<double>> Segments ; TOptional<TArray<FLinearColor>> AlternatingSegmentsColors ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSegmentedTimelineView) : _ViewRange(TRange<double>(0,10)) , _DesiredSize(FVector2D(100.f,20.f))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TRange<double>, ViewRange)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<FSegmentData>, SegmentData)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(FVector2D, DesiredSize)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(FLinearColor, FillColor)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "PaintBlock()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PaintBlock(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  }
]