[
  {
    "label": "M4Bitstream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M4Bitstream"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" vdecmpeg4 . h \" # include \" vdecmpeg4_Stream . h \" # include \" M4Memory . h \" namespace vdecmpeg4 { # if 1 uint32)",
    "insertText": "XSWAP(uint32 value)"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "XSWAP(a) (a)"
  },
  {
    "label": "M4Bitstream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "M4Bitstream()"
  },
  {
    "label": "setMemoryHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMemoryHook(M4MemHandler& memSys)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const uint8* bitstream, uint32 length)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(VIDStreamIO* pStream, uint32 streamBufferBytes)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "show(const uint32 bits)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip(const uint32 bits)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "align()"
  },
  {
    "label": "nextStartCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nextStartCode()"
  },
  {
    "label": "nextResyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nextResyncMarker()"
  },
  {
    "label": "skipResyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skipResyncMarker()"
  },
  {
    "label": "showBitsByteAligned()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "showBitsByteAligned(const uint32 bits)"
  },
  {
    "label": "validStuffingBits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validStuffingBits()"
  },
  {
    "label": "getBits()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "getBits(const uint32 bits)"
  },
  {
    "label": "getBit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "getBit()"
  },
  {
    "label": "isEof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEof()"
  },
  {
    "label": "totalBitsClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "totalBitsClear()"
  },
  {
    "label": "totalBitsGet()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "totalBitsGet()"
  },
  {
    "label": "getBaseAddr()",
    "kind": "Method",
    "detail": "Function (const uint32*)",
    "insertText": "getBaseAddr()"
  },
  {
    "label": "ReadStreamBuffered()",
    "kind": "Method",
    "detail": "Function (private : VIDError)",
    "insertText": "ReadStreamBuffered(uint32& value)"
  },
  {
    "label": "M4Bitstream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4Bitstream(const M4Bitstream& pObj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const M4Bitstream&)",
    "insertText": "operator(const M4Bitstream& pObj)"
  },
  {
    "label": "M4Bitstream()",
    "kind": "Method",
    "detail": "Function (mTotalBits = 0 ; })",
    "insertText": "M4Bitstream() : mTail(nullptr) , mLength(0) , mStart(nullptr) , mpStreamIO(nullptr) , mpInternalBuffer(nullptr) , mInternalBufferBytes(0) , mInternalBufferCurrentBytes(0) , mInternalBufferIndex(0) , mpMemSys(nullptr) , mTotalBits(0)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (mpMemSys ->)",
    "insertText": "free(mpInternalBuffer)"
  },
  {
    "label": "mTail()",
    "kind": "Method",
    "detail": "Function (mStart =)",
    "insertText": "mTail(uint32*)"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (mAWord =)",
    "insertText": "XSWAP(mStart[0])"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (mBWord =)",
    "insertText": "XSWAP(mStart[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mPos = 0 ; mLength = length ; mpStreamIO = nullptr ;)",
    "insertText": "if(mpInternalBuffer)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (mInternalBufferIndex = 0 ; VIDStreamResult result = mpStreamIO ->)",
    "insertText": "Read(mpInternalBuffer, mInternalBufferBytes, mInternalBufferCurrentBytes)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (value = 0 ; mInternalBufferCurrentBytes = 0 ; return result = = VID_STREAM_EOF ? VID_ERROR_STREAM_EOF : VID_ERROR_STREAM_ERROR ; } else {)",
    "insertText": "M4CHECK((mInternalBufferCurrentBytes & 0x3) == 0)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(mInternalBufferCurrentBytes > 0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "value((uint32*)(mpInternalBuffer + mInternalBufferIndex))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (mInternalBufferIndex + = 4 ; return VID_OK ; } void)",
    "insertText": "init(VIDStreamIO* pStreamIO, uint32 streamBufferBytes)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(streamBufferBytes > 0)"
  },
  {
    "label": "mpInternalBuffer()",
    "kind": "Method",
    "detail": "Function (} mInternalBufferBytes = streamBufferBytes ;)",
    "insertText": "mpInternalBuffer(uint8*)mpMemSys->malloc(mInternalBufferBytes)"
  },
  {
    "label": "ReadStreamBuffered()",
    "kind": "Method",
    "detail": "Function (mInternalBufferCurrentBytes = 0 ; mInternalBufferIndex = 0 ; uint32 value ;)",
    "insertText": "ReadStreamBuffered(value)"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (mAWord =)",
    "insertText": "XSWAP(value)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(bits>0 && bits<=32)"
  },
  {
    "label": "nbit()",
    "kind": "Method",
    "detail": "Function (uint32 res2 ; int32)",
    "insertText": "nbit(int32)bits + int32(mPos - 32)"
  },
  {
    "label": "res2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res2((mAWord & (0xffffffff >> mPos)) << nbit) | (mBWord >> (32 - nbit))"
  },
  {
    "label": "res2()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "res2(mAWord & (0xffffffff >> mPos)) >> (32 - mPos - bits)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (} return res2 ; } void)",
    "insertText": "skip(uint32 bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mPos + = bits ; mTotalBits + = bits ;)",
    "insertText": "if(mPos >= 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mAWord = mBWord ;)",
    "insertText": "if(mpStreamIO)"
  },
  {
    "label": "XSWAP()",
    "kind": "Method",
    "detail": "Function (} else { mBWord =)",
    "insertText": "XSWAP(*(mTail+2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 remainder = mPos& 7 ;)",
    "insertText": "if(remainder)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip(8 - remainder)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(zeroBit == 0)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(oneBit == 1)"
  },
  {
    "label": "M4CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M4CHECK(bits>0 && bits<=23)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 rem = mPos& 7 ;)",
    "insertText": "if(rem == 0)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (uint32 v =)",
    "insertText": "show(8 + bits)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "show(bits)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (} } else { uint32 v =)",
    "insertText": "show(8 - (mPos & 7) + bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint8 stuffing [ 8 ] = { 0 x7f,0 x3f,0 x1f,0 x0f,0 x07,0 x03,0 x01,0 x00 } ; uint32 rb = mPos& 7 ;)",
    "insertText": "if(rb == 0)"
  },
  {
    "label": "show()",
    "kind": "Method",
    "detail": "Function (} else { uint32 rem =)",
    "insertText": "show(8 - rb)"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip(bits)"
  }
]