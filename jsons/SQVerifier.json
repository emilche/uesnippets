[
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PhysicsCore . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # include \" Chaos / PBDRigidsEvolutionGBF . h \" # include \" PhysicsInterfaceUtilsCore . h \" # include \" PhysTestSerializer . h \" # include \" SQAccelerator . h \" # ifndef SQ_REPLAY_TEST # define)",
    "insertText": "SQ_REPLAY_TEST(cond) bEnsureOnMismatch ? ensure(cond) : (cond) #endif template <bool bHasPhysX = false> void SQPerfComparisonHelper(const FString& TestName, FPhysTestSerializer& Serializer, bool bEnsureOnMismatch = false)"
  },
  {
    "label": "GetSQCapture()",
    "kind": "Method",
    "detail": "Function (using namespace Chaos ; uint32 PhysXSum = 0 ; uint32 ChaosSum = 0 ; double NumIterations = bHasPhysX ? 1 0 0 : 1 0 0 0 0 ; FPendingSpatialDataQueue Empty ; const FSQCapture& CapturedSQ =* Serializer .)",
    "insertText": "GetSQCapture()"
  },
  {
    "label": "SQAccelerator()",
    "kind": "Method",
    "detail": "Function (FChaosSQAccelerator)",
    "insertText": "SQAccelerator(*Accelerator)"
  },
  {
    "label": "FRaycastHit()",
    "kind": "Method",
    "detail": "Function (auto ChaosHitBuffer = MakeUnique<ChaosInterface::FSQHitBuffer<)",
    "insertText": "FRaycastHit()"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (uint32 StartTime =)",
    "insertText": "Cycles()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Raycast(CapturedSQ.StartPoint, CapturedSQ.Dir, CapturedSQ.DeltaMag, *ChaosHitBuffer, CapturedSQ.OutputFlags.HitFlags, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "GetChaosData()",
    "kind": "Method",
    "detail": "Function (} break ; } case FSQCapture::ESQType::Sweep : { ISpatialAccelerationCollection<FAccelerationStructureHandle,FReal,3>* Accelerator = nullptr ; Serializer .)",
    "insertText": "GetChaosData()->UpdateExternalAccelerationStructure_External(Accelerator, Empty)"
  },
  {
    "label": "FSweepHit()",
    "kind": "Method",
    "detail": "Function (auto ChaosHitBuffer = MakeUnique<ChaosInterface::FSQHitBuffer<)",
    "insertText": "FSweepHit()"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Sweep(*CapturedSQ.ChaosImplicitGeometry, CapturedSQ.StartTM, CapturedSQ.Dir, CapturedSQ.DeltaMag, *ChaosHitBuffer, CapturedSQ.OutputFlags.HitFlags, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "FOverlapHit()",
    "kind": "Method",
    "detail": "Function (auto ChaosHitBuffer = MakeUnique<ChaosInterface::FSQHitBuffer<)",
    "insertText": "FOverlapHit()"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Overlap(*CapturedSQ.ChaosImplicitGeometry, CapturedSQ.StartTM, *ChaosHitBuffer, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "ToMilliseconds()",
    "kind": "Method",
    "detail": "Function (} break ; } } float ChaosMs =)",
    "insertText": "ToMilliseconds(ChaosSum)"
  },
  {
    "label": "ChaosAvgUs()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ChaosAvgUs(ChaosMs * 1000)"
  },
  {
    "label": "ToMilliseconds()",
    "kind": "Method",
    "detail": "Function (float PhysXMs =)",
    "insertText": "ToMilliseconds(PhysXSum)"
  },
  {
    "label": "PhysXAvgUs()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PhysXAvgUs(PhysXMs * 1000)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogPhysicsCore, Warning, TEXT(\"Perf Test:%s\\nChaos:%f(us), Total:%f(ms)\"), *TestName, ChaosAvgUs, ChaosMs)"
  },
  {
    "label": "SQComparisonHelper()",
    "kind": "Method",
    "detail": "Function (} } # if 0 bool)",
    "insertText": "SQComparisonHelper(FPhysTestSerializer& Serializer, bool bEnsureOnMismatch = false)"
  },
  {
    "label": "GetPhysXData()",
    "kind": "Method",
    "detail": "Function (Serializer .)",
    "insertText": "GetPhysXData()->raycast(U2PVector(CapturedSQ.StartPoint), U2PVector(CapturedSQ.Dir), CapturedSQ.DeltaMag, *PxHitBuffer, U2PHitFlags(CapturedSQ.OutputFlags.HitFlags), CapturedSQ.QueryFilterData, CapturedSQ.FilterCallback.Get())"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(PxHitBuffer->hasBlock == CapturedSQ.PhysXRaycastBuffer.hasBlock)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(PxHitBuffer->GetNumHits() == CapturedSQ.PhysXRaycastBuffer.GetNumHits())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PxHitBuffer->hasBlock)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(PxHitBuffer->block.position.x, CapturedSQ.PhysXRaycastBuffer.block.position.x, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(PxHitBuffer->block.position.y, CapturedSQ.PhysXRaycastBuffer.block.position.y, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(PxHitBuffer->block.position.z, CapturedSQ.PhysXRaycastBuffer.block.position.z, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(ChaosHitBuffer->HasBlockingHit() == CapturedSQ.PhysXRaycastBuffer.hasBlock)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(ChaosHitBuffer->GetNumHits() == CapturedSQ.PhysXRaycastBuffer.GetNumHits())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ChaosHitBuffer->HasBlockingHit())"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldPosition.X, CapturedSQ.PhysXRaycastBuffer.block.position.x, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldPosition.Y, CapturedSQ.PhysXRaycastBuffer.block.position.y, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldPosition.Z, CapturedSQ.PhysXRaycastBuffer.block.position.z, DistanceTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldNormal.X, CapturedSQ.PhysXRaycastBuffer.block.normal.x, NormalTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldNormal.Y, CapturedSQ.PhysXRaycastBuffer.block.normal.y, NormalTolerance))"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->WorldNormal.Z, CapturedSQ.PhysXRaycastBuffer.block.normal.z, NormalTolerance))"
  },
  {
    "label": "PxSweepHit()",
    "kind": "Method",
    "detail": "Function (} break ; } case FSQCapture::ESQType::Sweep : { auto PxHitBuffer = MakeUnique<PhysXInterface::FDynamicHitBuffer<)",
    "insertText": "PxSweepHit()"
  },
  {
    "label": "GetPhysXData()",
    "kind": "Method",
    "detail": "Function (Serializer .)",
    "insertText": "GetPhysXData()->sweep(CapturedSQ.PhysXGeometry.any(), U2PTransform(CapturedSQ.StartTM), U2PVector(CapturedSQ.Dir), CapturedSQ.DeltaMag, *PxHitBuffer, U2PHitFlags(CapturedSQ.OutputFlags.HitFlags), CapturedSQ.QueryFilterData, CapturedSQ.FilterCallback.Get())"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(PxHitBuffer->hasBlock == CapturedSQ.PhysXSweepBuffer.hasBlock)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(PxHitBuffer->GetNumHits() == CapturedSQ.PhysXSweepBuffer.GetNumHits())"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Sweep(*CapturedSQ.ChaosGeometry, CapturedSQ.StartTM, CapturedSQ.Dir, CapturedSQ.DeltaMag, *ChaosHitBuffer, CapturedSQ.OutputFlags.HitFlags, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(ChaosHitBuffer->HasBlockingHit() == CapturedSQ.PhysXSweepBuffer.hasBlock)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(ChaosHitBuffer->GetNumHits() == CapturedSQ.PhysXSweepBuffer.GetNumHits())"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(FMath::IsNearlyEqual(ChaosHitBuffer->GetBlock()->Distance, CapturedSQ.PhysXSweepBuffer.block.distance, DistanceTolerance))"
  },
  {
    "label": "PxOverlapHit()",
    "kind": "Method",
    "detail": "Function (} break ; } case FSQCapture::ESQType::Overlap : { auto PxHitBuffer = MakeUnique<PhysXInterface::FDynamicHitBuffer<)",
    "insertText": "PxOverlapHit()"
  },
  {
    "label": "GetPhysXData()",
    "kind": "Method",
    "detail": "Function (Serializer .)",
    "insertText": "GetPhysXData()->overlap(CapturedSQ.PhysXGeometry.any(), U2PTransform(CapturedSQ.StartTM), *PxHitBuffer, CapturedSQ.QueryFilterData, CapturedSQ.FilterCallback.Get())"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(PxHitBuffer->GetNumHits() == CapturedSQ.PhysXOverlapBuffer.GetNumHits())"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Overlap(*CapturedSQ.ChaosGeometry, CapturedSQ.StartTM, *ChaosHitBuffer, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "SQ_REPLAY_TEST()",
    "kind": "Method",
    "detail": "Function (bTestPassed& =)",
    "insertText": "SQ_REPLAY_TEST(ChaosHitBuffer->GetNumHits() == CapturedSQ.PhysXOverlapBuffer.GetNumHits())"
  },
  {
    "label": "SQValidityHelper()",
    "kind": "Method",
    "detail": "Function (break ; } } return bTestPassed ; } # endif bool)",
    "insertText": "SQValidityHelper(FPhysTestSerializer& Serializer)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Raycast(CapturedSQ.StartPoint, CapturedSQ.Dir, CapturedSQ.DeltaMag, ChaosHitBuffer, CapturedSQ.OutputFlags.HitFlags, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "HasBlockingHit()",
    "kind": "Method",
    "detail": "Function (const bool bHasBlockingHit = ChaosHitBuffer .)",
    "insertText": "HasBlockingHit()"
  },
  {
    "label": "GetNumHits()",
    "kind": "Method",
    "detail": "Function (const int32 NumHits = ChaosHitBuffer .)",
    "insertText": "GetNumHits()"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Sweep(*CapturedSQ.ChaosImplicitGeometry, CapturedSQ.StartTM, CapturedSQ.Dir, CapturedSQ.DeltaMag, ChaosHitBuffer, CapturedSQ.OutputFlags.HitFlags, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  },
  {
    "label": "GetHits()",
    "kind": "Method",
    "detail": "Function (ChaosInterface::FSweepHit& Hit = ChaosHitBuffer .)",
    "insertText": "GetHits()"
  },
  {
    "label": "FindFaceIndex()",
    "kind": "Method",
    "detail": "Function (const int32 FaceIdx =)",
    "insertText": "FindFaceIndex(Hit, CapturedSQ.Dir)"
  },
  {
    "label": "bTestPassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bTestPassed(FaceIdx != INDEX_NONE)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SQAccelerator .)",
    "insertText": "Overlap(*CapturedSQ.ChaosImplicitGeometry, CapturedSQ.StartTM, ChaosHitBuffer, CapturedSQ.QueryFilterData, *CapturedSQ.FilterCallback)"
  }
]