[
  {
    "label": "FStringNetSerializerUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringNetSerializerUtils"
  },
  {
    "label": "TStringCodec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringCodec"
  },
  {
    "label": "FNetSerializeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetSerializeArgs"
  },
  {
    "label": "FNetDeserializeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDeserializeArgs"
  },
  {
    "label": "FNetCloneDynamicStateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetCloneDynamicStateArgs"
  },
  {
    "label": "FNetFreeDynamicStateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetFreeDynamicStateArgs"
  },
  {
    "label": "FNetQuantizeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetQuantizeArgs"
  },
  {
    "label": "FNetDequantizeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDequantizeArgs"
  },
  {
    "label": "FNetIsEqualArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetIsEqualArgs"
  },
  {
    "label": "FNetValidateArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetValidateArgs"
  },
  {
    "label": "FStringNetSerializerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringNetSerializerBase"
  },
  {
    "label": "FQuantizedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedType"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / Serialization / NetSerializationContext . h \" # include \" Iris / Serialization / InternalNetSerializationContext . h \" namespace UE::Net { const FName GNetError_CorruptString ; } namespace UE::Net::Private { class FStringNetSerializerUtils { public : template<InWideCharType> class TStringCodec { public : typedef uint32 Codepoint ; typedef uint8 EncodeType ; typedef InWideCharType WideCharType ; bool)",
    "insertText": "Encode(EncodeType* Dest, uint32 DestLen, const WideCharType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Decode(WideCharType* Dest, uint32 DestLen, const EncodeType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "GetSafeEncodedBufferLength()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSafeEncodedBufferLength(uint32 DecodedLen)"
  },
  {
    "label": "IsValidEncoding()",
    "kind": "Method",
    "detail": "Function (} else { return EncodedLen ; } } bool)",
    "insertText": "IsValidEncoding(const EncodeType* Encoding, uint32 EncodeLen)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Continue = 0 ;)",
    "insertText": "for(uint32 EncodeIt = 0, EncodeEndIt = EncodeLen; EncodeIt != EncodeEndIt; ++EncodeIt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 EncodedCount = 0 ; do {)",
    "insertText": "if((++EncodedCount > 3U) | (EncodeIt == EncodeEndIt))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (EncodeIt + = Continue ; })",
    "insertText": "while(Continue)"
  },
  {
    "label": "IsInvalidCodepoint()",
    "kind": "Method",
    "detail": "Function (} return true ; } private : bool)",
    "insertText": "IsInvalidCodepoint(uint32 Codepoint)"
  },
  {
    "label": "IsSurrogate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSurrogate(uint32 Codepoint)"
  },
  {
    "label": "IsHighSurrogate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHighSurrogate(WideCharType Char)"
  },
  {
    "label": "IsLowSurrogate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLowSurrogate(WideCharType Char)"
  },
  {
    "label": "GetCodepointFromSurrogates()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCodepointFromSurrogates(WideCharType HighSurrogate, WideCharType LowSurrogate)"
  },
  {
    "label": "IsInNeedOfSurrogates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInNeedOfSurrogates(uint32 Codepoint)"
  },
  {
    "label": "GetHighSurrogate()",
    "kind": "Method",
    "detail": "Function (} WideCharType)",
    "insertText": "GetHighSurrogate(uint32 Codepoint)"
  },
  {
    "label": "GetLowSurrogate()",
    "kind": "Method",
    "detail": "Function (} WideCharType)",
    "insertText": "GetLowSurrogate(uint32 Codepoint)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T = WideCharType,TEnableIf<)",
    "insertText": "sizeof(T) == 4, char>::Type CharSize = 4> static bool EncodeImpl(EncodeType* Dest, uint32 DestLen, const WideCharType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WideCharType LastCodePoint = 0 x10FFFF ; WideCharType ReplacementCharacter = 0 xFFFD ;)",
    "insertText": "if(DestLen < 3U*SourceLen)"
  },
  {
    "label": "Char()",
    "kind": "Method",
    "detail": "Function (WideCharType Char = Source [ SourceIt ] ;)",
    "insertText": "Char(Char > LastCodePoint ? ReplacementCharacter : Char)"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + + ] = static_cast<)",
    "insertText": "EncodeType(Char)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Char < WideCharType(0x400))"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + 0 ] =)",
    "insertText": "EncodeType(0x80) | static_cast<EncodeType>(Char >> 7U)"
  },
  {
    "label": "DestIt()",
    "kind": "Method",
    "detail": "Function (Dest [)",
    "insertText": "DestIt(Char & 0x7F)"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (DestIt + = 2 ; } else { Dest [ DestIt + 0 ] =)",
    "insertText": "EncodeType(0x80) | static_cast<EncodeType>(Char >> 14U)"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + 1 ] =)",
    "insertText": "EncodeType(0x80) | static_cast<EncodeType>((Char >> 7U) & 0x7F)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (DestIt + = 3 ; } } OutDestLen = DestIt ; return SourceIt = = SourceLen ; } template<T = WideCharType,TEnableIf<)",
    "insertText": "sizeof(T) == 2, char>::Type CharSize = 2> static bool EncodeImpl(EncodeType* Dest, uint32 DestLen, const WideCharType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const WideCharType Char = Source [ SourceIt ] ; const WideCharType NextChar = Source [)",
    "insertText": "Min(SourceIt + 1U, SourceEndIt - 1U)"
  },
  {
    "label": "GetCodepointFromSurrogates()",
    "kind": "Method",
    "detail": "Function (const uint32 Codepoint =)",
    "insertText": "GetCodepointFromSurrogates(Char, NextChar)"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + 0 ] =)",
    "insertText": "EncodeType(0x80) | static_cast<EncodeType>(Codepoint >> 14U)"
  },
  {
    "label": "EncodeType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + 1 ] =)",
    "insertText": "EncodeType(0x80) | static_cast<EncodeType>((Codepoint >> 7U) & 0x7F)"
  },
  {
    "label": "DestIt()",
    "kind": "Method",
    "detail": "Function (Dest [)",
    "insertText": "DestIt(Codepoint & 0x7F)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DestIt + = 3 ; + + SourceIt ; } else)",
    "insertText": "if(Char < WideCharType(0x80))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (DestIt + = 3 ; } } OutDestLen = DestIt ; return SourceIt = = SourceLen ; } template<T = WideCharType,TEnableIf<)",
    "insertText": "sizeof(T) == 4, char>::Type CharSize = 4> static bool DecodeImpl(WideCharType* Dest, uint32 DestLen, const EncodeType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutDestLen = 0 ; return true ; })",
    "insertText": "if(DestLen < GetSafeDecodedBufferLength(SourceLen))"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (EncodeType Byte ; uint32 Codepoint ; uint8 Mask ; Byte = Source [ SourceIt ] ; Codepoint = Byte& 0 x7FU ; Mask =)",
    "insertText": "int8(Byte)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SourceIt + = 1 U& Mask ;)",
    "insertText": "if(SourceIt >= SourceEndIt)"
  },
  {
    "label": "Codepoint()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = true ; break ; } Byte = Source [ SourceIt ] ;)",
    "insertText": "Codepoint(Codepoint << (7U & Mask)) | (Byte & 0x7FU)"
  },
  {
    "label": "IsInvalidCodepoint()",
    "kind": "Method",
    "detail": "Function (const bool bIsInvalidCodepoint =)",
    "insertText": "IsInvalidCodepoint(Codepoint)"
  },
  {
    "label": "IsSurrogate()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = bIsErrorDetected | bIsInvalidCodepoint ; SurrogateCount + =)",
    "insertText": "IsSurrogate(Codepoint)"
  },
  {
    "label": "WideCharType()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + + ] = bIsInvalidCodepoint ? ReplacementCharacter : static_cast<)",
    "insertText": "WideCharType(Codepoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Dest[DestIt - 1] != 0)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = true ; uint32 LastIndex =)",
    "insertText": "Min(DestIt, DestLen - 1U)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Dest [ LastIndex ] = 0 ; DestIt = LastIndex + 1 U ; } uint32 CurrentLength = DestIt ;)",
    "insertText": "if(SurrogateCount > 0)"
  },
  {
    "label": "CombineSurrogatesInPlace()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = bIsErrorDetected | | !)",
    "insertText": "CombineSurrogatesInPlace(SurrogateCount, Dest, DestLen, CurrentLength)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} OutDestLen = CurrentLength ; return ! bIsErrorDetected ; } template<T = WideCharType,TEnableIf<)",
    "insertText": "sizeof(T) == 2, char>::Type CharSize = 2> static bool DecodeImpl(WideCharType* Dest, uint32 DestLen, const EncodeType* Source, uint32 SourceLen, uint32& OutDestLen)"
  },
  {
    "label": "IsInNeedOfSurrogates()",
    "kind": "Method",
    "detail": "Function (const bool bIsInNeedOfSurrogates =)",
    "insertText": "IsInNeedOfSurrogates(Codepoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = bIsErrorDetected | bIsInvalidCodePoint ; Codepoint = bIsInvalidCodePoint ? ReplacementCharacter : Codepoint ;)",
    "insertText": "if(bIsInNeedOfSurrogates)"
  },
  {
    "label": "GetHighSurrogate()",
    "kind": "Method",
    "detail": "Function (bIsErrorDetected = true ; break ; } Dest [ DestIt + 0 ] =)",
    "insertText": "GetHighSurrogate(Codepoint)"
  },
  {
    "label": "GetLowSurrogate()",
    "kind": "Method",
    "detail": "Function (Dest [ DestIt + 1 ] =)",
    "insertText": "GetLowSurrogate(Codepoint)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } OutDestLen = DestIt ; return ! bIsErrorDetected ; } template<T = WideCharType,TEnableIf<)",
    "insertText": "sizeof(T) == 4, char>::Type CharSize = 4> static bool CombineSurrogatesInPlace(uint32 SurrogateCount, WideCharType* Buffer, uint32 BufferCapacity, uint32& InOutBufferLen)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 InBufferLen = static_cast<)",
    "insertText": "int32(InOutBufferLen)"
  },
  {
    "label": "WideCharType()",
    "kind": "Method",
    "detail": "Function (const int32 NewLength = StringConv::InlineCombineSurrogates_Buffer<)",
    "insertText": "WideCharType(Buffer, InBufferLen)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 ExpectedNewLength = InBufferLen - static_cast<)",
    "insertText": "int32(SurrogateCount/2U)"
  },
  {
    "label": "bSuccess()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bSuccess(NewLength == ExpectedNewLength) & ((SurrogateCount & 1) == 0)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (InOutBufferLen = static_cast<)",
    "insertText": "uint32(NewLength)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Target = Source ; SIZE_T ElementSize =)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (SIZE_T ElementAlignment =)",
    "insertText": "Align(alignof(ElementType), 4U)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* ElementStorage = nullptr ;)",
    "insertText": "if(Source.ElementCount > 0)"
  },
  {
    "label": "GetInternalContext()",
    "kind": "Method",
    "detail": "Function (ElementStorage = Context .)",
    "insertText": "GetInternalContext()->Alloc(Align(ElementSize*Source.ElementCount, 4U), ElementAlignment)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ElementStorage, Source.ElementStorage, ElementSize*Source.ElementCount)"
  },
  {
    "label": "FreeDynamicState()",
    "kind": "Method",
    "detail": "Function (} Target . ElementCapacityCount = Source . ElementCount ; Target . ElementCount = Source . ElementCount ; Target . ElementStorage = ElementStorage ; } template<QuantizedType,ElementType> void)",
    "insertText": "FreeDynamicState(FNetSerializationContext& Context, QuantizedType& Array)"
  },
  {
    "label": "GetInternalContext()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "GetInternalContext()->Free(Array.ElementStorage)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (Array =)",
    "insertText": "QuantizedType()"
  },
  {
    "label": "GrowDynamicState()",
    "kind": "Method",
    "detail": "Function (} template<QuantizedType,ElementType> void)",
    "insertText": "GrowDynamicState(FNetSerializationContext& Context, QuantizedType& Array, uint16 NewElementCount)"
  },
  {
    "label": "GetInternalContext()",
    "kind": "Method",
    "detail": "Function (void* NewElementStorage = Context .)",
    "insertText": "GetInternalContext()->Alloc(Align(ElementSize*NewElementCount, 4U), ElementAlignment)"
  },
  {
    "label": "AdjustArraySize()",
    "kind": "Method",
    "detail": "Function (Array . ElementCapacityCount = NewElementCount ; Array . ElementCount = NewElementCount ; Array . ElementStorage = NewElementStorage ; } template<QuantizedType,ElementType> void)",
    "insertText": "AdjustArraySize(FNetSerializationContext& Context, QuantizedType& Array, uint16 NewElementCount)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (FreeDynamicState<QuantizedType,)",
    "insertText": "ElementType(Context, Array)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NewElementCount > Array.ElementCapacityCount)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (GrowDynamicState<QuantizedType,)",
    "insertText": "ElementType(Context, Array, NewElementCount)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} else { Array . ElementCount = NewElementCount ; } } } ; template class FStringNetSerializerUtils::TStringCodec<TCHAR> ; } namespace UE::Net { struct FNetSerializeArgs ; struct FNetDeserializeArgs ; struct FNetCloneDynamicStateArgs ; struct FNetFreeDynamicStateArgs ; struct FNetQuantizeArgs ; struct FNetDequantizeArgs ; struct FNetIsEqualArgs ; struct FNetValidateArgs ; } namespace UE::Net::Private { struct FStringNetSerializerBase { bool bHasDynamicState = true ; struct FQuantizedType { uint32 bIsEncoded : 1 U ; uint16 ElementCapacityCount ; uint16 ElementCount ; void* ElementStorage ; } ; typedef FQuantizedType QuantizedType ; void)",
    "insertText": "Serialize(FNetSerializationContext&, const FNetSerializeArgs& Args)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext&, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "CloneDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneDynamicState(FNetSerializationContext&, const FNetCloneDynamicStateArgs&)"
  },
  {
    "label": "FreeDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDynamicState(FNetSerializationContext&, const FNetFreeDynamicStateArgs&)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Quantize(FNetSerializationContext&, const FNetQuantizeArgs&, const FString& Source)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dequantize(FNetSerializationContext&, const FNetDequantizeArgs&, FString& Target)"
  },
  {
    "label": "IsQuantizedEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQuantizedEqual(FNetSerializationContext&, const FNetIsEqualArgs&)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(FNetSerializationContext&, const FNetValidateArgs&, const FString& Source)"
  }
]