[
  {
    "label": "ILauncherProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILauncherProfile"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SProjectLauncherLaunchRoleEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherLaunchRoleEditor"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherProfileLaunchRole . h \" # include \" SlateFwd . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Input / SComboBox . h \" class ILauncherProfile ; class SEditableTextBox ; class SProjectLauncherLaunchRoleEditor : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherLaunchRoleEditor) : _AvailableCultures() , _AvailableMaps()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(ILauncherProfileLaunchRolePtr, InitialRole) SLATE_ARGUMENT(const TArray<FString>*, AvailableCultures) SLATE_ARGUMENT(const TArray<FString>*, AvailableMaps) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh(const ILauncherProfileLaunchRolePtr& InRole)"
  },
  {
    "label": "HandleCommandLineTextBoxTextChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleCommandLineTextBoxTextChanged(const FText& InText)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (ILauncherProfileLaunchRolePtr RolePtr = Role .)",
    "insertText": "Pin()"
  },
  {
    "label": "SetCommandLine()",
    "kind": "Method",
    "detail": "Function (RolePtr ->)",
    "insertText": "SetCommandLine(InText.ToString())"
  },
  {
    "label": "HandleInstanceTypeComboButtonContentText()",
    "kind": "Method",
    "detail": "Function (} } FText)",
    "insertText": "HandleInstanceTypeComboButtonContentText()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleInstanceTypeMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleInstanceTypeMenuEntryClicked(ELauncherProfileRoleInstanceTypes::Type InstanceType)"
  },
  {
    "label": "SetInstanceType()",
    "kind": "Method",
    "detail": "Function (RolePtr ->)",
    "insertText": "SetInstanceType(InstanceType)"
  },
  {
    "label": "HandleCultureComboBoxColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} } FSlateColor)",
    "insertText": "HandleCultureComboBoxColorAndOpacity()"
  },
  {
    "label": "GetInitialCulture()",
    "kind": "Method",
    "detail": "Function (const FString& InitialCulture = RolePtr ->)",
    "insertText": "GetInitialCulture()"
  },
  {
    "label": "HandleCultureComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} } return FLinearColor::Red ; } void)",
    "insertText": "HandleCultureComboBoxSelectionChanged(TSharedPtr<FString> Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SetInitialCulture()",
    "kind": "Method",
    "detail": "Function (RolePtr ->)",
    "insertText": "SetInitialCulture(*Selection)"
  },
  {
    "label": "SetInitialCulture()",
    "kind": "Method",
    "detail": "Function (} else { RolePtr ->)",
    "insertText": "SetInitialCulture(FString())"
  },
  {
    "label": "HandleCultureValidationErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (} } } EVisibility)",
    "insertText": "HandleCultureValidationErrorIconVisibility()"
  },
  {
    "label": "GetInitialMap()",
    "kind": "Method",
    "detail": "Function (const FString& InitialMap = RolePtr ->)",
    "insertText": "GetInitialMap()"
  },
  {
    "label": "HandleMapComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} } return FLinearColor::Red ; } void)",
    "insertText": "HandleMapComboBoxSelectionChanged(TSharedPtr<FString> Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SetInitialMap()",
    "kind": "Method",
    "detail": "Function (RolePtr ->)",
    "insertText": "SetInitialMap(*Selection)"
  },
  {
    "label": "SetInitialMap()",
    "kind": "Method",
    "detail": "Function (} else { RolePtr ->)",
    "insertText": "SetInitialMap(FString())"
  },
  {
    "label": "HandleMapValidationErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (} } } EVisibility)",
    "insertText": "HandleMapValidationErrorIconVisibility()"
  },
  {
    "label": "SetVsyncEnabled()",
    "kind": "Method",
    "detail": "Function (RolePtr ->)",
    "insertText": "SetVsyncEnabled(NewState == ECheckBoxState::Checked)"
  },
  {
    "label": "HandleVsyncCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} } ECheckBoxState)",
    "insertText": "HandleVsyncCheckBoxIsChecked()"
  }
]