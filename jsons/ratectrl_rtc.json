[
  {
    "label": "VP9RateControlRtcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9RateControlRtcConfig"
  },
  {
    "label": "VP9FrameParamsQpRTC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9FrameParamsQpRTC"
  },
  {
    "label": "VP9RateControlRTC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VP9RateControlRTC"
  },
  {
    "label": "VP9RateControlRtcConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_RATECTRL_RTC_H_ # define VPX_VP9_RATECTRL_RTC_H_ # include<cstdint> # include<memory> # include \" vp9 / common / vp9_entropymode . h \" # include \" vp9 / common / vp9_enums . h \" # include \" vp9 / common / vp9_onyxc_int . h \" # include \" vp9 / vp9_iface_common . h \" # include \" vp9 / encoder / vp9_aq_cyclicrefresh . h \" # include \" vp9 / encoder / vp9_encoder . h \" # include \" vp9 / encoder / vp9_firstpass . h \" # include \" vp9 / vp9_cx_iface . h \" # include \" vpx / internal / vpx_ratectrl_rtc . h \" # include \" vpx_mem / vpx_mem . h \" namespace libvpx { struct VP9RateControlRtcConfig : public VpxRateControlRtcConfig { public :)",
    "insertText": "VP9RateControlRtcConfig()"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(max_quantizers)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(min_quantizers)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(scaling_factor_den)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(scaling_factor_num)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(layer_target_bitrate)"
  },
  {
    "label": "vp9_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_zero(ts_rate_decimator)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (scaling_factor_num [ 0 ] = 1 ; scaling_factor_den [ 0 ] = 1 ; max_quantizers [ 0 ] = max_quantizer ; min_quantizers [ 0 ] = min_quantizer ; } int ss_number_layers ; int ts_number_layers ; int max_quantizers [ VPX_MAX_LAYERS ] ; int min_quantizers [ VPX_MAX_LAYERS ] ; int scaling_factor_num [ VPX_SS_MAX_LAYERS ] ; int scaling_factor_den [ VPX_SS_MAX_LAYERS ] ; } ; struct VP9FrameParamsQpRTC { FRAME_TYPE frame_type ; int spatial_layer_id ; int temporal_layer_id ; } ; class VP9RateControlRTC { public : std::unique_ptr<VP9RateControlRTC>)",
    "insertText": "Create(const VP9RateControlRtcConfig &cfg)"
  },
  {
    "label": "VP9RateControlRTC()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VP9RateControlRTC()"
  },
  {
    "label": "LAYER_IDS_TO_IDX()",
    "kind": "Method",
    "detail": "Function (int layer =)",
    "insertText": "LAYER_IDS_TO_IDX(sl, tl, cpi_->oxcf.ts_number_layers)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (LAYER_CONTEXT* const lc =& cpi_ -> svc . layer_context [ layer ] ;)",
    "insertText": "vpx_free(lc->map)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(lc->last_coded_q_map)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(lc->consec_zero_mv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(cpi_->oxcf.aq_mode == CYCLIC_REFRESH_AQ)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_free(cpi_->segmentation_map)"
  },
  {
    "label": "vp9_cyclic_refresh_free()",
    "kind": "Method",
    "detail": "Function (cpi_ -> segmentation_map = NULL ;)",
    "insertText": "vp9_cyclic_refresh_free(cpi_->cyclic_refresh)"
  },
  {
    "label": "vpx_free()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "vpx_free(cpi_)"
  },
  {
    "label": "UpdateRateControl()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateRateControl(const VP9RateControlRtcConfig &rc_cfg)"
  },
  {
    "label": "GetQP()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetQP()"
  },
  {
    "label": "GetLoopfilterLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLoopfilterLevel()"
  },
  {
    "label": "GetCyclicRefreshMap()",
    "kind": "Method",
    "detail": "Function (signed char*)",
    "insertText": "GetCyclicRefreshMap()"
  },
  {
    "label": "GetDeltaQ()",
    "kind": "Method",
    "detail": "Function (int*)",
    "insertText": "GetDeltaQ()"
  },
  {
    "label": "ComputeQP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeQP(const VP9FrameParamsQpRTC &frame_params)"
  },
  {
    "label": "PostEncodeUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEncodeUpdate(uint64_t encoded_frame_size)"
  },
  {
    "label": "InitRateControl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRateControl(const VP9RateControlRtcConfig &cfg)"
  }
]