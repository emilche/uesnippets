[
  {
    "label": "FAndroidPlatformString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidPlatformString"
  },
  {
    "label": "Strupr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Build . h \" # include \" HAL / Platform . h \" # if PLATFORM_TCHAR_IS_CHAR16 # include \" GenericPlatform / GenericWidePlatformString . h \" typedef FGenericWidePlatformString FAndroidPlatformString ; # else # include \" Misc / Char . h \" # include \" GenericPlatform / GenericPlatformMemory . h \" # include \" GenericPlatform / GenericPlatformString . h \" struct FAndroidPlatformString : public FGenericPlatformString { using FGenericPlatformString::Stricmp ; using FGenericPlatformString::Strncmp ; using FGenericPlatformString::Strnicmp ; template<CharType> CharType*)",
    "insertText": "Strupr(CharType* Dest, SIZE_T DestCount)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (* Char = TChar<CharType)",
    "insertText": "ToUpper(*Char)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (} return Dest ; } WIDECHAR*)",
    "insertText": "Strcpy(WIDECHAR* Dest, SIZE_T DestCount, const WIDECHAR* Src)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Pos = 0 ;)",
    "insertText": "while(Src[Pos])"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (Dest [ Pos ] = Src [ Pos ] ; + + Pos ; } Dest [ Pos ] = 0 ; return Dest ; } WIDECHAR*)",
    "insertText": "Strncpy(WIDECHAR* Dest, const WIDECHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Pos = 0 ;)",
    "insertText": "while((Pos < MaxLen) && Src[Pos])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Dest [ Pos ] = Src [ Pos ] ; + + Pos ; })",
    "insertText": "while(Pos < MaxLen)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (Dest [ Pos ] = 0 ; + + Pos ; } Dest [ MaxLen - 1 ] = 0 ; return Dest ; } WIDECHAR*)",
    "insertText": "Strcat(WIDECHAR* Dest, SIZE_T DestCount, const WIDECHAR* Src)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int DestPos =)",
    "insertText": "Strlen(Dest)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int SrcPos = 0 ;)",
    "insertText": "while(Src[SrcPos])"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (Dest [ DestPos ] = Src [ SrcPos ] ; + + SrcPos ; + + DestPos ; } Dest [ DestPos ] = 0 ; return Dest ; } int32)",
    "insertText": "Strcmp(const WIDECHAR* String1, const WIDECHAR* String2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Len = 0 ;)",
    "insertText": "while(String[Len])"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (+ + Len ; } return Len ; } int32)",
    "insertText": "Strnlen(const WIDECHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Len = 0 ;)",
    "insertText": "while(StringSize-- > 0 && *String++)"
  },
  {
    "label": "CopyWideToAnsi()",
    "kind": "Method",
    "detail": "Function (+ + Len ; } return Len ; } void)",
    "insertText": "CopyWideToAnsi(ANSICHAR* Dest, const WIDECHAR* Src)"
  },
  {
    "label": "CopyAnsiToWide()",
    "kind": "Method",
    "detail": "Function (Dest [ Pos ] = Src [ Pos ] ; } else { Dest [ Pos ] = ' ? ' ; } + + Pos ; } Dest [ Pos ] = 0 ; } void)",
    "insertText": "CopyAnsiToWide(WIDECHAR* Dest, const ANSICHAR* Src)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (Dest [ Pos ] = Src [ Pos ] ; + + Pos ; } Dest [ Pos ] = 0 ; } const WIDECHAR*)",
    "insertText": "Strstr(const WIDECHAR* String, const WIDECHAR* Find)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WIDECHAR FindChar =* Find ;)",
    "insertText": "if(!FindChar)"
  },
  {
    "label": "wcslen()",
    "kind": "Method",
    "detail": "Function (+ + Find ; size_t MemCmpLen =)",
    "insertText": "wcslen(Find)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (WIDECHAR* FoundChar ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "wcschr()",
    "kind": "Method",
    "detail": "Function (FoundChar =)",
    "insertText": "wcschr(String, FindChar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } String = FoundChar + 1 ;)",
    "insertText": "if(!wmemcmp(String, Find, MemCmpLen))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int Pos = 0 ;)",
    "insertText": "while(String[Pos])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + Pos ; })",
    "insertText": "if(C == 0)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } const WIDECHAR*)",
    "insertText": "Strrchr(const WIDECHAR* String, WIDECHAR C)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Last(String[Pos])"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} return Last ; } int32)",
    "insertText": "Atoi(const WIDECHAR* String)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int StringLen =)",
    "insertText": "Strlen(String)"
  },
  {
    "label": "AnsiString()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "AnsiString(ANSICHAR*)FMemory_Alloca(StringLen+1)"
  },
  {
    "label": "CopyWideToAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWideToAnsi(AnsiString, String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const WIDECHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const WIDECHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const WIDECHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int StartLen =)",
    "insertText": "Strlen(Start)"
  },
  {
    "label": "AnsiStart()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "AnsiStart(ANSICHAR*)FMemory_Alloca(StartLen+1)"
  },
  {
    "label": "CopyWideToAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWideToAnsi(AnsiStart, Start)"
  },
  {
    "label": "strtol()",
    "kind": "Method",
    "detail": "Function (ANSICHAR* AnsiEnd = NULL ; int32 Res =)",
    "insertText": "strtol(AnsiStart, &AnsiEnd, Base)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (* End = NULL ; } else {*)",
    "insertText": "End(WIDECHAR*)(Start + (AnsiEnd - AnsiStart))"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} } return Res ; } int64)",
    "insertText": "Strtoi64(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "strtoll()",
    "kind": "Method",
    "detail": "Function (ANSICHAR* AnsiEnd = NULL ; uint64 Res =)",
    "insertText": "strtoll(AnsiStart, &AnsiEnd, Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (} } return Res ; } uint64)",
    "insertText": "Strtoui64(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "strtoull()",
    "kind": "Method",
    "detail": "Function (ANSICHAR* AnsiEnd = NULL ; uint64 Res =)",
    "insertText": "strtoull(AnsiStart, &AnsiEnd, Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (} } return Res ; } WIDECHAR*)",
    "insertText": "Strtok(WIDECHAR* StrToken, const WIDECHAR* Delim, WIDECHAR** Context)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int StrTokenLen =)",
    "insertText": "Strlen(StrToken)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int DelimLen =)",
    "insertText": "Strlen(Delim)"
  },
  {
    "label": "AnsiStrToken()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "AnsiStrToken(ANSICHAR*)FMemory_Alloca(StrTokenLen+1)"
  },
  {
    "label": "AnsiDelim()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "AnsiDelim(ANSICHAR*)FMemory_Alloca(DelimLen+1)"
  },
  {
    "label": "CopyWideToAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWideToAnsi(AnsiStrToken, StrToken)"
  },
  {
    "label": "CopyWideToAnsi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWideToAnsi(AnsiDelim, Delim)"
  },
  {
    "label": "strtok()",
    "kind": "Method",
    "detail": "Function (ANSICHAR* Pos =)",
    "insertText": "strtok(AnsiStrToken, AnsiDelim)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(WIDECHAR* Dest, SIZE_T DestSize, const WIDECHAR*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "NewFormat()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USE_LS_SPEC_FOR_WIDECHAR const WIDECHAR* OldFormat = Fmt ; WIDECHAR*)",
    "insertText": "NewFormat(WIDECHAR*)FMemory_Alloca((Strlen(Fmt) * 2 + 1) * sizeof(WIDECHAR))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = 0 ;)",
    "insertText": "for(; *OldFormat != 0; NewIndex++, OldFormat++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex + + ] =* OldFormat + + ;)",
    "insertText": "if(*OldFormat == LITERAL(WIDECHAR, '%'))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex ] =* OldFormat ; } else { const WIDECHAR* NextChar = OldFormat ;)",
    "insertText": "while(*NextChar != 0 && !FChar::IsAlpha(*NextChar))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex + + ] =* NextChar ; + + NextChar ; } ;)",
    "insertText": "if(*NextChar == LITERAL(WIDECHAR, 's'))"
  },
  {
    "label": "LITERAL()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex + + ] =)",
    "insertText": "LITERAL(WIDECHAR, 'l')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex ] =* NextChar ; } else)",
    "insertText": "if(*NextChar == LITERAL(WIDECHAR, 'S'))"
  },
  {
    "label": "LITERAL()",
    "kind": "Method",
    "detail": "Function (NewFormat [ NewIndex ] =)",
    "insertText": "LITERAL(WIDECHAR, 's')"
  },
  {
    "label": "vswprintf()",
    "kind": "Method",
    "detail": "Function (} else { NewFormat [ NewIndex ] =* NextChar ; } OldFormat = NextChar ; } } else { NewFormat [ NewIndex ] =* OldFormat ; } } NewFormat [ NewIndex ] = 0 ; # endif int32 Result =)",
    "insertText": "vswprintf(Dest, DestSize, NewFormat, ArgPtr)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (} ANSICHAR*)",
    "insertText": "Strncpy(ANSICHAR* Dest, const ANSICHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strncpy(Dest, Src, MaxLen)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (Dest [ MaxLen - 1 ] = 0 ; return Dest ; } ANSICHAR*)",
    "insertText": "Strcat(ANSICHAR* Dest, SIZE_T DestCount, const ANSICHAR* Src)"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const ANSICHAR* String1, const ANSICHAR* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strncmp(const ANSICHAR* String1, const ANSICHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const ANSICHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const ANSICHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strstr(const ANSICHAR* String, const ANSICHAR* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strchr(const ANSICHAR* String, ANSICHAR C)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strrchr(const ANSICHAR* String, ANSICHAR C)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Atoi(const ANSICHAR* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const ANSICHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const ANSICHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const ANSICHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Strtoi64(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (; } uint64)",
    "insertText": "Strtoui64(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (; } ANSICHAR*)",
    "insertText": "Strtok(ANSICHAR* StrToken, const ANSICHAR* Delim, ANSICHAR** Context)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(ANSICHAR* Dest, SIZE_T DestSize, const ANSICHAR*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "vsnprintf(Dest, DestSize, Fmt, ArgPtr)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strcpy(UTF8CHAR* Dest, SIZE_T DestCount, const UTF8CHAR* Src)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strncpy(UTF8CHAR* Dest, const UTF8CHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strcat(UTF8CHAR* Dest, SIZE_T DestCount, const UTF8CHAR* Src)"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const UTF8CHAR* String1, const UTF8CHAR* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strncmp(const UTF8CHAR* String1, const UTF8CHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const UTF8CHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const UTF8CHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strstr(const UTF8CHAR* String, const UTF8CHAR* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strchr(const UTF8CHAR* String, UTF8CHAR C)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strrchr(const UTF8CHAR* String, UTF8CHAR C)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Atoi(const UTF8CHAR* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const UTF8CHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const UTF8CHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const UTF8CHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Strtoi64(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Strtoui64(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strtok(UTF8CHAR* StrToken, const UTF8CHAR* Delim, UTF8CHAR** Context)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(UTF8CHAR* Dest, SIZE_T DestSize, const UTF8CHAR*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const UCS2CHAR* String)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Result = 0 ;)",
    "insertText": "while(*String++)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (+ + Result ; } return Result ; } int32)",
    "insertText": "Strnlen(const UCS2CHAR* String, SIZE_T StringSize)"
  }
]