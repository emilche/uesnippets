[
  {
    "label": "FMinimalSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalSceneTextures"
  },
  {
    "label": "IVariableRateShadingImageGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVariableRateShadingImageGenerator"
  },
  {
    "label": "FVariableRateShadingImageManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVariableRateShadingImageManager"
  },
  {
    "label": "EVRSPassType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVRSPassType"
  },
  {
    "label": "EVRSImageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVRSImageType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Logging / LogMacros . h \" # include \" RHI . h \" # include \" RendererInterface . h \" # include \" RenderGraphDefinitions . h \" struct FMinimalSceneTextures ; class IVariableRateShadingImageGenerator ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVRS, Log, All)"
  },
  {
    "label": "FVariableRateShadingImageManager()",
    "kind": "Method",
    "detail": "Function (class FVariableRateShadingImageManager : public FRenderResource { public : enum EVRSPassType { BasePass,TranslucencyAll,NaniteEmitGBufferPass,SSAO,SSR,ReflectionEnvironmentAndSky,LightFunctions,Decals,Num } ; enum EVRSImageType : uint32 { Disabled = 0,Full = 1,Conservative = 2 } ; enum class EVRSSourceType : uint32 { FixedFoveation = 0 x1,EyeTrackedFoveation = 0 x2,ContrastAdaptiveShading = 0 x4,All = FixedFoveation | EyeTrackedFoveation | ContrastAdaptiveShading,XRFoveation = FixedFoveation | EyeTrackedFoveation,None = 0 x0,} ;)",
    "insertText": "FVariableRateShadingImageManager()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetVariableRateShadingImage()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetVariableRateShadingImage(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, EVRSPassType PassType, bool bRequestSoftwareImage = false)"
  },
  {
    "label": "PrepareImageBasedVRS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareImageBasedVRS(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily, const FMinimalSceneTextures& SceneTextures, bool bLumenEnabled = false)"
  },
  {
    "label": "IsTypeEnabledForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTypeEnabledForView(const FSceneView& View, EVRSSourceType Type)"
  },
  {
    "label": "RegisterExternalImageGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalImageGenerator(IVariableRateShadingImageGenerator* ExternalGenerator)"
  },
  {
    "label": "UnregisterExternalImageGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExternalImageGenerator(IVariableRateShadingImageGenerator* ExternalGenerator)"
  },
  {
    "label": "IsHardwareVRSSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareVRSSupported()"
  },
  {
    "label": "IsSoftwareVRSSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftwareVRSSupported()"
  },
  {
    "label": "IsPipelineVRSEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPipelineVRSEnabled()"
  },
  {
    "label": "IsAttachmentVRSEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttachmentVRSEnabled()"
  },
  {
    "label": "IsVRSEnabledForFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVRSEnabledForFrame()"
  },
  {
    "label": "IsHardwareVRSEnabledForFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareVRSEnabledForFrame()"
  },
  {
    "label": "IsSoftwareVRSEnabledForFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftwareVRSEnabledForFrame()"
  },
  {
    "label": "GetNeedStaticMeshUpdate()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetNeedStaticMeshUpdate()"
  },
  {
    "label": "SetNeedStaticMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeedStaticMeshUpdate(bool bInNeedStaticMeshUpdate)"
  },
  {
    "label": "IsVRSCompatibleWithView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVRSCompatibleWithView(const FViewInfo& View)"
  },
  {
    "label": "IsVRSCompatibleWithOutputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVRSCompatibleWithOutputType(const EDisplayOutputFormat& DisplayOutputFormat)"
  },
  {
    "label": "GetSRITileSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSRITileSize(bool bSoftwareSize = false)"
  },
  {
    "label": "GetSRIDesc()",
    "kind": "Method",
    "detail": "Function (FRDGTextureDesc)",
    "insertText": "GetSRIDesc(const FSceneViewFamily& ViewFamily, bool bSoftwareSize = false)"
  },
  {
    "label": "GetNumberOfSupportedRates()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSupportedRates()"
  },
  {
    "label": "DrawDebugPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPreview(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily, FRDGTextureRef OutputSceneColor)"
  },
  {
    "label": "CombineShadingRateImages()",
    "kind": "Method",
    "detail": "Function (private : TRefCountPtr<IPooledRenderTarget> MobileHMDFixedFoveationOverrideImage ; TArray<IVariableRateShadingImageGenerator*> ImageGenerators ; TArray<IVariableRateShadingImageGenerator*> ActiveGenerators ; TArray<TUniquePtr<IVariableRateShadingImageGenerator>> InternalGenerators ; FRWLock GeneratorsMutex ; FRDGTextureRef)",
    "insertText": "CombineShadingRateImages(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily, TArray<FRDGTextureRef> Sources)"
  },
  {
    "label": "GetForceRateImage()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetForceRateImage(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily, int RateIndex = 0, bool bGetSoftwareImage = false)"
  },
  {
    "label": "GetImageTypeFromPassType()",
    "kind": "Method",
    "detail": "Function (} ; EVRSImageType)",
    "insertText": "GetImageTypeFromPassType(EVRSPassType PassType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (bool bHardwareVRSEnabledForFrame = false ; bool bSoftwareVRSEnabledForFrame = false ; int32 VRSForceRateForFrame = - 1 ; bool bNeedStaticMeshUpdate = false ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FVariableRateShadingImageManager::EVRSSourceType)"
  },
  {
    "label": "IVariableRateShadingImageGenerator()",
    "kind": "Method",
    "detail": "Function (TGlobalResource<FVariableRateShadingImageManager> GVRSImageManager ; class IVariableRateShadingImageGenerator { public : ~)",
    "insertText": "IVariableRateShadingImageGenerator()"
  },
  {
    "label": "GetImage()",
    "kind": "Method",
    "detail": "Function (} ; FRDGTextureRef)",
    "insertText": "GetImage(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, FVariableRateShadingImageManager::EVRSImageType ImageType, bool bGetSoftwareImage = false)"
  },
  {
    "label": "PrepareImages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareImages(FRDGBuilder& GraphBuilder, const FSceneViewFamily& ViewFamily, const FMinimalSceneTextures& SceneTextures, bool bPrepareHardwareImages, bool bPrepareSoftwareImages)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  }
]