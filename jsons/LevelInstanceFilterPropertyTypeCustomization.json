[
  {
    "label": "ILevelInstanceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelInstanceInterface"
  },
  {
    "label": "FLevelInstancePropertyTypeIdentifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelInstancePropertyTypeIdentifier"
  },
  {
    "label": "FLevelInstanceFilterPropertyTypeCustomization",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelInstanceFilterPropertyTypeCustomization"
  },
  {
    "label": "FLevelInstancePropertyTypeIdentifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IPropertyTypeCustomization . h \" # include \" Internationalization / Text . h \" # include \" PropertyEditorModule . h \" # include \" PropertyHandle . h \" # include \" Templates / SharedPointer . h \" # include \" WorldPartition / Filter / WorldPartitionActorFilterPropertyTypeCustomization . h \" # include \" WorldPartition / Filter / WorldPartitionActorFilterMode . h \" # include \" LevelInstance / LevelInstanceComponent . h \" class ILevelInstanceInterface ; class FLevelInstancePropertyTypeIdentifier : public IPropertyTypeIdentifier { public :)",
    "insertText": "FLevelInstancePropertyTypeIdentifier(bool bInIsEditFilter) : bIsEditFilter(bInIsEditFilter)"
  },
  {
    "label": "IsPropertyTypeCustomized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPropertyTypeCustomized(const IPropertyHandle& PropertyHandle)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsEditFilter ; } ; struct FLevelInstanceFilterPropertyTypeCustomization : public FWorldPartitionActorFilterPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance(bool bInIsEditFilter)"
  },
  {
    "label": "FLevelInstanceFilterPropertyTypeCustomization()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FLevelInstanceFilterPropertyTypeCustomization(bool bInIsEditFilter) : bIsEditFilter(bInIsEditFilter)"
  },
  {
    "label": "CreateModeFilter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FWorldPartitionActorFilterMode::FFilter>)",
    "insertText": "CreateModeFilter(TArray<UObject*> OuterObjects)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter(TSharedRef<IPropertyHandle> PropertyHandle, const FWorldPartitionActorFilterMode& Mode)"
  }
]