[
  {
    "label": "FRDGBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBufferPool"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRDGTransientRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTransientRenderTarget"
  },
  {
    "label": "FRDGTransientResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTransientResourceAllocator"
  },
  {
    "label": "FRDGBufferPool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" RendererInterface . h \" # include \" RenderGraphResources . h \" # include \" Async / RecursiveMutex . h \" class FRDGBufferPool : public FRenderResource { public :)",
    "insertText": "FRDGBufferPool()"
  },
  {
    "label": "TickPoolElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPoolElements()"
  },
  {
    "label": "FindFreeBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>)",
    "insertText": "FindFreeBuffer(FRHICommandListBase& RHICmdList, const FRDGBufferDesc& Desc, const TCHAR* InDebugName, ERDGPooledBufferAlignment Alignment = ERDGPooledBufferAlignment::Page)"
  },
  {
    "label": "FindFreeBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>)",
    "insertText": "FindFreeBuffer(const FRDGBufferDesc& Desc, const TCHAR* InDebugName, ERDGPooledBufferAlignment Alignment = ERDGPooledBufferAlignment::Page)"
  },
  {
    "label": "DumpMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpMemoryUsage(FOutputDevice& OutputDevice)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer*)",
    "insertText": "CreateBuffer(FRHICommandListBase& RHICmdList, const FRDGBufferDesc& Desc, uint32 DescHash, const TCHAR* InDebugName)"
  },
  {
    "label": "ScheduleAllocation()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer*)",
    "insertText": "ScheduleAllocation(FRHICommandListBase& RHICmdList, const FRDGBufferDesc& Desc, const TCHAR* Name, ERDGPooledBufferAlignment Alignment, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "ScheduleDeallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDeallocation(FRDGPooledBuffer* PooledBuffer, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "FinishSchedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishSchedule(FRHICommandListBase& RHICmdList, FRDGPooledBuffer* PooledBuffer)"
  },
  {
    "label": "TryFindPooledBuffer()",
    "kind": "Method",
    "detail": "Function (template<T> FRDGPooledBuffer*)",
    "insertText": "TryFindPooledBuffer(const FRDGBufferDesc& Desc, uint32 DescHash, T&& Predicate)"
  },
  {
    "label": "TryFindPooledBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer*)",
    "insertText": "TryFindPooledBuffer(const FRDGBufferDesc& Desc, uint32 DescHash)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} UE::FRecursiveMutex Mutex ; TArray<TRefCountPtr<FRDGPooledBuffer>> AllocatedBuffers ; TArray<uint32> AllocatedBufferHashes ; uint32 FrameCounter = 0 ; class FRDGBuilder ; } ; TGlobalResource<FRDGBufferPool> GRenderGraphResourcePool ; enum class ERDGTransientResourceLifetimeState { Deallocated,Allocated,PendingDeallocation } ; class FRDGTransientRenderTarget final : public IPooledRenderTarget { public : uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "FRDGTransientRenderTarget()",
    "kind": "Method",
    "detail": "Function (Texture = nullptr ; RenderTargetItem . ShaderResourceTexture = nullptr ; RenderTargetItem . TargetableTexture = nullptr ; } private :)",
    "insertText": "FRDGTransientRenderTarget()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRHITransientTexture* Texture ; FPooledRenderTargetDesc Desc ; ERDGTransientResourceLifetimeState LifetimeState ; int32 RefCount = 0 ; class FRDGTransientResourceAllocator ; } ; class FRDGTransientResourceAllocator : public FRenderResource { public : IRHITransientResourceAllocator*)",
    "insertText": "Get()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(TRefCountPtr<FRDGTransientRenderTarget>&& RenderTarget, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "ReleasePendingDeallocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePendingDeallocations()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AddPendingDeallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingDeallocation(FRDGTransientRenderTarget* RenderTarget)"
  }
]