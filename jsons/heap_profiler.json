[
  {
    "label": "HeapProfilerScopedTaskExecutionTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeapProfilerScopedTaskExecutionTracker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "INTERNAL_HEAP_PROFILER_UID3()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_HEAP_PROFILER_H_ # define BASE_TRACE_EVENT_HEAP_PROFILER_H_ # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / trace_event / heap_profiler_allocation_context_tracker . h \" # define)",
    "insertText": "INTERNAL_HEAP_PROFILER_UID3(a, b) heap_profiler_unique_##a##b #define INTERNAL_HEAP_PROFILER_UID2(a, b) INTERNAL_HEAP_PROFILER_UID3(a, b) #define INTERNAL_HEAP_PROFILER_UID(name_prefix) \\ INTERNAL_HEAP_PROFILER_UID2(name_prefix, __LINE__) #define TRACE_HEAP_PROFILER_API_SCOPED_TASK_EXECUTION \\ trace_event_internal::HeapProfilerScopedTaskExecutionTracker #define TRACE_HEAP_PROFILER_API_GET_CURRENT_TASK_CONTEXT \\ trace_event_internal::HeapProfilerCurrentTaskContext #define HEAP_PROFILER_SCOPED_IGNORE \\ trace_event_internal::HeapProfilerScopedIgnore INTERNAL_HEAP_PROFILER_UID( \\ scoped_ignore)"
  },
  {
    "label": "HeapProfilerScopedTaskExecutionTracker()",
    "kind": "Method",
    "detail": "Function (class HeapProfilerScopedTaskExecutionTracker { public :)",
    "insertText": "HeapProfilerScopedTaskExecutionTracker(const char* task_context) : context_(task_context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using base::trace_event::AllocationContextTracker ;)",
    "insertText": "if(UNLIKELY(AllocationContextTracker::capture_mode() != AllocationContextTracker::CaptureMode::DISABLED))"
  },
  {
    "label": "GetInstanceForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceForCurrentThread() ->PushCurrentTaskContext(context_)"
  },
  {
    "label": "HeapProfilerScopedTaskExecutionTracker()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "HeapProfilerScopedTaskExecutionTracker()"
  },
  {
    "label": "GetInstanceForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceForCurrentThread() ->PopCurrentTaskContext(context_)"
  },
  {
    "label": "HeapProfilerCurrentTaskContext()",
    "kind": "Method",
    "detail": "Function (} } private : const char* context_ ; } ; const char*)",
    "insertText": "HeapProfilerCurrentTaskContext()"
  },
  {
    "label": "HeapProfilerScopedIgnore()",
    "kind": "Method",
    "detail": "Function (} class BASE_EXPORT HeapProfilerScopedIgnore { public :)",
    "insertText": "HeapProfilerScopedIgnore()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using base::trace_event::AllocationContextTracker ;)",
    "insertText": "if(UNLIKELY( AllocationContextTracker::capture_mode() != AllocationContextTracker::CaptureMode::DISABLED))"
  },
  {
    "label": "GetInstanceForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceForCurrentThread() ->begin_ignore_scope()"
  },
  {
    "label": "GetInstanceForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceForCurrentThread() ->end_ignore_scope()"
  }
]