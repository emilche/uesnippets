[
  {
    "label": "Fence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Fence"
  },
  {
    "label": "QueueSyncPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QueueSyncPoint"
  },
  {
    "label": "DeviceWideSyncPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeviceWideSyncPoint"
  },
  {
    "label": "LRUCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LRUCache"
  },
  {
    "label": "ResidencyManagerInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResidencyManagerInternal"
  },
  {
    "label": "AsyncWorkload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AsyncWorkload"
  },
  {
    "label": "ResidencyManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResidencyManager"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (/ void)",
    "insertText": "InitializeListHead(LIST_ENTRY* pHead)"
  },
  {
    "label": "InsertHeadList()",
    "kind": "Method",
    "detail": "Function (pHead -> Flink = pHead -> Blink = pHead ; } void)",
    "insertText": "InsertHeadList(LIST_ENTRY* pHead, LIST_ENTRY* pEntry)"
  },
  {
    "label": "InsertTailList()",
    "kind": "Method",
    "detail": "Function (pEntry -> Blink = pHead ; pEntry -> Flink = pHead -> Flink ; pHead -> Flink -> Blink = pEntry ; pHead -> Flink = pEntry ; } void)",
    "insertText": "InsertTailList(LIST_ENTRY* pHead, LIST_ENTRY* pEntry)"
  },
  {
    "label": "RemoveEntryList()",
    "kind": "Method",
    "detail": "Function (pEntry -> Flink = pHead ; pEntry -> Blink = pHead -> Blink ; pHead -> Blink -> Flink = pEntry ; pHead -> Blink = pEntry ; } void)",
    "insertText": "RemoveEntryList(LIST_ENTRY* pEntry)"
  },
  {
    "label": "RemoveHeadList()",
    "kind": "Method",
    "detail": "Function (pEntry -> Blink -> Flink = pEntry -> Flink ; pEntry -> Flink -> Blink = pEntry -> Blink ; } LIST_ENTRY*)",
    "insertText": "RemoveHeadList(LIST_ENTRY* pHead)"
  },
  {
    "label": "RemoveEntryList()",
    "kind": "Method",
    "detail": "Function (LIST_ENTRY* pEntry = pHead -> Flink ;)",
    "insertText": "RemoveEntryList(pEntry)"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeListHead(&ListEntry)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT)",
    "insertText": "Initialize(ID3D12Device* pDevice)"
  },
  {
    "label": "CreateFence()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = pDevice ->)",
    "insertText": "CreateFence(0, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&pFence))"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(hr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (pFence ->)",
    "insertText": "Release()"
  },
  {
    "label": "GPUWait()",
    "kind": "Method",
    "detail": "Function (pFence = nullptr ; } } HRESULT)",
    "insertText": "GPUWait(ID3D12CommandQueue* pQueue)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = pQueue ->)",
    "insertText": "Wait(pFence, FenceValue)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = pQueue ->)",
    "insertText": "Signal(pFence, FenceValue)"
  },
  {
    "label": "QueueSyncPoint()",
    "kind": "Method",
    "detail": "Function (FenceValue + + ; } ID3D12Fence* pFence ; UINT64 FenceValue ; LIST_ENTRY ListEntry ; } ; struct QueueSyncPoint {)",
    "insertText": "QueueSyncPoint() : pFence(nullptr), LastUsedValue(0)"
  },
  {
    "label": "IsCompleted()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsCompleted()"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForCompletion(HANDLE Event)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(pFence->pFence->SetEventOnCompletion(LastUsedValue, Event))"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(WaitForSingleObject(Event, INFINITE))"
  },
  {
    "label": "DeviceWideSyncPoint()",
    "kind": "Method",
    "detail": "Function (} Fence* pFence ; UINT64 LastUsedValue ; } ; struct DeviceWideSyncPoint {)",
    "insertText": "DeviceWideSyncPoint(UINT32 NumQueues, UINT64 Generation) : GenerationID(Generation), NumQueueSyncPoints(NumQueues)"
  },
  {
    "label": "CreateSyncPoint()",
    "kind": "Method",
    "detail": "Function (} ; DeviceWideSyncPoint*)",
    "insertText": "CreateSyncPoint(UINT32 NumQueues, UINT64 Generation)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (DeviceWideSyncPoint* pSyncPoint = nullptr ; const SIZE_T Size =)",
    "insertText": "sizeof(DeviceWideSyncPoint) + (sizeof(QueueSyncPoint) * (NumQueues - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BYTE* pAlloc = new BYTE [ Size ] ;)",
    "insertText": "if(pAlloc && Size >= sizeof(DeviceWideSyncPoint))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (pSyncPoint =)",
    "insertText": "new(pAlloc) DeviceWideSyncPoint(NumQueues, Generation)"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (pQueueSyncPoints [ i ] .)",
    "insertText": "WaitForCompletion(Event)"
  },
  {
    "label": "LRUCache()",
    "kind": "Method",
    "detail": "Function (} } } const UINT64 GenerationID ; const UINT32 NumQueueSyncPoints ; LIST_ENTRY ListEntry ; QueueSyncPoint pQueueSyncPoints [ 1 ] ; } ; class LRUCache { public :)",
    "insertText": "LRUCache() : NumResidentObjects(0), NumEvictedObjects(0), ResidentSize(0)"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeListHead(&ResidentObjectListHead)"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeListHead(&EvictedObjectListHead)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Insert(ManagedObject* pObject)"
  },
  {
    "label": "InsertHeadList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertHeadList(&ResidentObjectListHead, &pObject->ListEntry)"
  },
  {
    "label": "InsertHeadList()",
    "kind": "Method",
    "detail": "Function (NumResidentObjects + + ; ResidentSize + = pObject -> Size ; } else {)",
    "insertText": "InsertHeadList(&EvictedObjectListHead, &pObject->ListEntry)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (NumEvictedObjects + + ; } } void)",
    "insertText": "Remove(ManagedObject* pObject)"
  },
  {
    "label": "RemoveEntryList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntryList(&pObject->ListEntry)"
  },
  {
    "label": "ObjectReferenced()",
    "kind": "Method",
    "detail": "Function (NumResidentObjects - - ; ResidentSize - = pObject -> Size ; } else { NumEvictedObjects - - ; } } void)",
    "insertText": "ObjectReferenced(ManagedObject* pObject)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK(pObject->ResidencyStatus == ManagedObject::RESIDENCY_STATUS::RESIDENT)"
  },
  {
    "label": "InsertTailList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTailList(&ResidentObjectListHead, &pObject->ListEntry)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeResident(ManagedObject* pObject)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK(pObject->ResidencyStatus == ManagedObject::RESIDENCY_STATUS::EVICTED)"
  },
  {
    "label": "Evict()",
    "kind": "Method",
    "detail": "Function (NumEvictedObjects - - ; NumResidentObjects + + ; ResidentSize + = pObject -> Size ; } void)",
    "insertText": "Evict(ManagedObject* pObject)"
  },
  {
    "label": "InsertTailList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTailList(&EvictedObjectListHead, &pObject->ListEntry)"
  },
  {
    "label": "TrimToSyncPointInclusive()",
    "kind": "Method",
    "detail": "Function (NumResidentObjects - - ; ResidentSize - = pObject -> Size ; NumEvictedObjects + + ; } void)",
    "insertText": "TrimToSyncPointInclusive(INT64 CurrentUsage, INT64 CurrentBudget, ID3D12Pageable** EvictionList, UINT32& NumObjectsToEvict, UINT64 SyncPoint)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (NumObjectsToEvict = 0 ; LIST_ENTRY* pResourceEntry = ResidentObjectListHead . Flink ;)",
    "insertText": "while(pResourceEntry != &ResidentObjectListHead)"
  },
  {
    "label": "CONTAINING_RECORD()",
    "kind": "Method",
    "detail": "Function (ManagedObject* pObject =)",
    "insertText": "CONTAINING_RECORD(pResourceEntry, ManagedObject, ListEntry)"
  },
  {
    "label": "Evict()",
    "kind": "Method",
    "detail": "Function (EvictionList [ NumObjectsToEvict + + ] = pObject -> pUnderlying ;)",
    "insertText": "Evict(pObject)"
  },
  {
    "label": "TrimAgedAllocations()",
    "kind": "Method",
    "detail": "Function (CurrentUsage - = pObject -> Size ; pResourceEntry = ResidentObjectListHead . Flink ; } } void)",
    "insertText": "TrimAgedAllocations(DeviceWideSyncPoint* MaxSyncPoint, ID3D12Pageable** EvictionList, UINT32& NumObjectsToEvict, UINT64 CurrentTimeStamp, UINT64 MinDelta)"
  },
  {
    "label": "GetResidentListHead()",
    "kind": "Method",
    "detail": "Function (pResourceEntry = ResidentObjectListHead . Flink ; } } ManagedObject*)",
    "insertText": "GetResidentListHead()"
  },
  {
    "label": "ResidencyManagerInternal()",
    "kind": "Method",
    "detail": "Function (} LIST_ENTRY ResidentObjectListHead ; LIST_ENTRY EvictedObjectListHead ; UINT32 NumResidentObjects ; UINT32 NumEvictedObjects ; UINT64 ResidentSize ; } ; class ResidencyManagerInternal { public :)",
    "insertText": "ResidencyManagerInternal(SyncManager* pSyncManagerIn) : Device(nullptr), Device3(nullptr), #ifdef __ID3D12DeviceDownlevel_INTERFACE_DEFINED__ DeviceDownlevel(nullptr), #endif AsyncThreadFence(0), CompletionEvent(INVALID_HANDLE_VALUE), AsyncThreadWorkCompletionEvent(INVALID_HANDLE_VALUE), Adapter(nullptr), AsyncWorkEvent(INVALID_HANDLE_VALUE), AsyncWorkThread(INVALID_HANDLE_VALUE), FinishAsyncWork(false), cStartEvicted(false), CurrentSyncPointGeneration(0), NumQueuesSeen(0), NodeIndex(0), CurrentAsyncWorkloadHead(0), CurrentAsyncWorkloadTail(0), cMinEvictionGracePeriod(1.0f), cMaxEvictionGracePeriod(60.0f), cTrimPercentageMemoryUsageThreshold(0.7f), AsyncWorkQueue(nullptr), MaxSoftwareQueueLatency(6), AsyncWorkQueueSize(7), pSyncManager(pSyncManagerIn)"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeListHead(&QueueFencesListHead)"
  },
  {
    "label": "InitializeListHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeListHead(&InFlightSyncPointsHead)"
  },
  {
    "label": "AllocateLocallyUniqueId()",
    "kind": "Method",
    "detail": "Function (BOOL LuidSuccess =)",
    "insertText": "AllocateLocallyUniqueId(&ResidencyManagerUniqueID)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK(LuidSuccess)"
  },
  {
    "label": "UNREFERENCED_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNREFERENCED_PARAMETER(LuidSuccess)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT)",
    "insertText": "Initialize(ID3D12Device* ParentDevice, UINT DeviceNodeIndex, IDXGIAdapter* ParentAdapter, UINT32 MaxLatency)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Device = ParentDevice ; NodeIndex = DeviceNodeIndex ; MaxSoftwareQueueLatency = MaxLatency ;)",
    "insertText": "if(FAILED(Device->QueryInterface(&Device3)))"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (AsyncThreadFence .)",
    "insertText": "Increment()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (} # ifdef __ID3D12DeviceDownlevel_INTERFACE_DEFINED__ Device ->)",
    "insertText": "QueryInterface(&DeviceDownlevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(ParentAdapter)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (ParentAdapter ->)",
    "insertText": "QueryInterface(&Adapter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} AsyncWorkQueueSize = MaxLatency + 1 ; AsyncWorkQueue = new AsyncWorkload [ AsyncWorkQueueSize ] ;)",
    "insertText": "if(AsyncWorkQueue == nullptr)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (MinEvictionGracePeriodTicks =)",
    "insertText": "UINT64(Frequency.QuadPart * cMinEvictionGracePeriod)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (MaxEvictionGracePeriodTicks =)",
    "insertText": "UINT64(Frequency.QuadPart * cMaxEvictionGracePeriod)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ; hr = AsyncThreadFence .)",
    "insertText": "Initialize(Device)"
  },
  {
    "label": "CreateEvent()",
    "kind": "Method",
    "detail": "Function (CompletionEvent =)",
    "insertText": "CreateEvent(nullptr, false, false, nullptr)"
  },
  {
    "label": "HRESULT_FROM_WIN32()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "HRESULT_FROM_WIN32(GetLastError())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SUCCEEDED(hr))"
  },
  {
    "label": "CreateEvent()",
    "kind": "Method",
    "detail": "Function (AsyncWorkEvent =)",
    "insertText": "CreateEvent(nullptr, true, false, nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # if ! RESIDENCY_SINGLE_THREADED)",
    "insertText": "if(SUCCEEDED(hr) && !Device3)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (AsyncWorkThread =)",
    "insertText": "CreateThread(nullptr, 0, AsyncThreadStart, (void*) this, 0, nullptr)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} } # endif return hr ; } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(CompletionEvent)"
  },
  {
    "label": "DequeueAsyncWork()",
    "kind": "Method",
    "detail": "Function (CompletionEvent = INVALID_HANDLE_VALUE ; } # if ! RESIDENCY_SINGLE_THREADED AsyncWorkload* pWork =)",
    "insertText": "DequeueAsyncWork()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FinishAsyncWork = true ;)",
    "insertText": "if(SetEvent(AsyncWorkEvent) == false)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(HRESULT_FROM_WIN32(GetLastError()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AsyncWorkThread != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(AsyncWorkThread, INFINITE)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(AsyncWorkThread)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AsyncWorkThread = INVALID_HANDLE_VALUE ; })",
    "insertText": "if(AsyncWorkEvent != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(AsyncWorkEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AsyncWorkEvent = INVALID_HANDLE_VALUE ; } # endif)",
    "insertText": "if(AsyncThreadWorkCompletionEvent != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(AsyncThreadWorkCompletionEvent)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (AsyncThreadWorkCompletionEvent = INVALID_HANDLE_VALUE ; })",
    "insertText": "while(Internal::IsListEmpty(&QueueFencesListHead) == false)"
  },
  {
    "label": "CONTAINING_RECORD()",
    "kind": "Method",
    "detail": "Function (Internal::Fence* pObject =)",
    "insertText": "CONTAINING_RECORD(QueueFencesListHead.Flink, Internal::Fence, ListEntry)"
  },
  {
    "label": "RemoveHeadList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHeadList(&QueueFencesListHead)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(pObject)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(Internal::IsListEmpty(&InFlightSyncPointsHead) == false)"
  },
  {
    "label": "CONTAINING_RECORD()",
    "kind": "Method",
    "detail": "Function (Internal::DeviceWideSyncPoint* pPoint =)",
    "insertText": "CONTAINING_RECORD(InFlightSyncPointsHead.Flink, Internal::DeviceWideSyncPoint, ListEntry)"
  },
  {
    "label": "RemoveHeadList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHeadList(&InFlightSyncPointsHead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete pPoint ; } delete [ ] AsyncWorkQueue ;)",
    "insertText": "if(Device3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Device3 = nullptr ; } # ifdef __ID3D12DeviceDownlevel_INTERFACE_DEFINED__)",
    "insertText": "if(DeviceDownlevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DeviceDownlevel = nullptr ; } # endif)",
    "insertText": "if(Adapter)"
  },
  {
    "label": "BeginTrackingObject()",
    "kind": "Method",
    "detail": "Function (Adapter = nullptr ; } } void)",
    "insertText": "BeginTrackingObject(ManagedObject* pObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Internal::ScopedLock)",
    "insertText": "Lock(&Mutex)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK(pObject->pUnderlying != nullptr)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (pObject -> ResidencyStatus = ManagedObject::RESIDENCY_STATUS::EVICTED ;)",
    "insertText": "RESIDENCY_CHECK_RESULT(Device->Evict(1, &pObject->pUnderlying))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} LRU .)",
    "insertText": "Insert(pObject)"
  },
  {
    "label": "EndTrackingObject()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EndTrackingObject(ManagedObject* pObject)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LRU .)",
    "insertText": "Remove(pObject)"
  },
  {
    "label": "ExecuteCommandLists()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "ExecuteCommandLists(ID3D12CommandQueue* Queue, ID3D12CommandList** CommandLists, ResidencySet** ResidencySets, UINT32 Count)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "MakeResident(ID3D12CommandQueue* Queue, ResidencySet* MasterSet)"
  },
  {
    "label": "GetFence()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ; Internal::Fence* QueueFence = nullptr ; hr =)",
    "insertText": "GetFence(Queue, QueueFence)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Internal::ScopedLock)",
    "insertText": "Lock(&ExecutionCS)"
  },
  {
    "label": "EnqueueAsyncWork()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "EnqueueAsyncWork(MasterSet, AsyncThreadFence.FenceValue, CurrentSyncPointGeneration)"
  },
  {
    "label": "ProcessPagingWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPagingWork(pWorkload)"
  },
  {
    "label": "GPUWait()",
    "kind": "Method",
    "detail": "Function (hr = AsyncThreadFence .)",
    "insertText": "GPUWait(Queue)"
  },
  {
    "label": "SignalFence()",
    "kind": "Method",
    "detail": "Function (} } } return hr ; } HRESULT)",
    "insertText": "SignalFence(ID3D12CommandQueue* Queue)"
  },
  {
    "label": "GetCurrentGPUSyncPoint()",
    "kind": "Method",
    "detail": "Function (UINT64 GPUSyncPoint = 0 ; return)",
    "insertText": "GetCurrentGPUSyncPoint(Queue, &GPUSyncPoint)"
  },
  {
    "label": "GetCurrentGPUSyncPoint()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "GetCurrentGPUSyncPoint(ID3D12CommandQueue* Queue, UINT64 *pGPUSyncPoint)"
  },
  {
    "label": "SignalFence()",
    "kind": "Method",
    "detail": "Function (* pGPUSyncPoint = QueueFence -> FenceValue ; hr =)",
    "insertText": "SignalFence(Queue, QueueFence)"
  },
  {
    "label": "GetFence()",
    "kind": "Method",
    "detail": "Function (} return hr ; } UINT64 LocalMemoryBudgetLimit = ~ 0 ull ; private : HRESULT)",
    "insertText": "GetFence(ID3D12CommandQueue *Queue, Internal::Fence *&QueueFence)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (GUID FenceGuid = { 0 xf0,0,0 xd,{ 0,0,0,0,0,0,0,0 } } ;)",
    "insertText": "memcpy(&FenceGuid.Data4, &ResidencyManagerUniqueID, sizeof(ResidencyManagerUniqueID))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (QueueFence = nullptr ; HRESULT hr = S_OK ; struct { Internal::Fence* pFence ; } CommandQueuePrivateData ; { UINT32 Size =)",
    "insertText": "sizeof(CommandQueuePrivateData)"
  },
  {
    "label": "GetPrivateData()",
    "kind": "Method",
    "detail": "Function (hr = Queue ->)",
    "insertText": "GetPrivateData(FenceGuid, &Size, &CommandQueuePrivateData)"
  },
  {
    "label": "Fence()",
    "kind": "Method",
    "detail": "Function (QueueFence = new)",
    "insertText": "Fence(1)"
  },
  {
    "label": "InsertTailList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTailList(&QueueFencesListHead, &QueueFence->ListEntry)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&NumQueuesSeen)"
  },
  {
    "label": "SetPrivateData()",
    "kind": "Method",
    "detail": "Function (CommandQueuePrivateData = { QueueFence } ; hr = Queue ->)",
    "insertText": "SetPrivateData(FenceGuid, UINT32(sizeof(CommandQueuePrivateData)), &CommandQueuePrivateData)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (} } QueueFence = CommandQueuePrivateData . pFence ;)",
    "insertText": "RESIDENCY_CHECK(QueueFence != nullptr)"
  },
  {
    "label": "SignalFence()",
    "kind": "Method",
    "detail": "Function (} return hr ; } HRESULT)",
    "insertText": "SignalFence(ID3D12CommandQueue *Queue, Internal::Fence *QueueFence)"
  },
  {
    "label": "GPUSignal()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = QueueFence ->)",
    "insertText": "GPUSignal(Queue)"
  },
  {
    "label": "EnqueueSyncPoint()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "EnqueueSyncPoint()"
  },
  {
    "label": "ExecuteSubset()",
    "kind": "Method",
    "detail": "Function (} CurrentSyncPointGeneration + + ; return hr ; } HRESULT)",
    "insertText": "ExecuteSubset(ID3D12CommandQueue* Queue, ID3D12CommandList** CommandLists, ResidencySet** ResidencySets, UINT32 Count)"
  },
  {
    "label": "ZeroMemory()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ; DXGI_QUERY_VIDEO_MEMORY_INFO LocalMemory ;)",
    "insertText": "ZeroMemory(&LocalMemory, sizeof(LocalMemory))"
  },
  {
    "label": "GetCurrentBudget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurrentBudget(&LocalMemory, DXGI_MEMORY_SEGMENT_GROUP_LOCAL)"
  },
  {
    "label": "ZeroMemory()",
    "kind": "Method",
    "detail": "Function (DXGI_QUERY_VIDEO_MEMORY_INFO NonLocalMemory ;)",
    "insertText": "ZeroMemory(&NonLocalMemory, sizeof(NonLocalMemory))"
  },
  {
    "label": "GetCurrentBudget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurrentBudget(&NonLocalMemory, DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UINT64 TotalSizeNeeded = 0 ; UINT32 MaxObjectsReferenced = 0 ;)",
    "insertText": "for(UINT32 i = 0; i < Count; i++)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (TotalSizeNeeded + = ResidencySets [ i ] -> ppSet [ x ] -> Size ; } } } } hr = pMasterSet ->)",
    "insertText": "Close()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(pMasterSet)"
  },
  {
    "label": "ExecuteSubset()",
    "kind": "Method",
    "detail": "Function (const UINT32 Half = Count / 2 ; const HRESULT LowerHR =)",
    "insertText": "ExecuteSubset(Queue, CommandLists, ResidencySets, Half)"
  },
  {
    "label": "ExecuteSubset()",
    "kind": "Method",
    "detail": "Function (const HRESULT UpperHR =)",
    "insertText": "ExecuteSubset(Queue, &CommandLists[Half], &ResidencySets[Half], Count - Half)"
  },
  {
    "label": "EnqueueAsyncWork()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "EnqueueAsyncWork(pMasterSet, AsyncThreadFence.FenceValue, CurrentSyncPointGeneration)"
  },
  {
    "label": "ExecuteCommandLists()",
    "kind": "Method",
    "detail": "Function (} } Queue ->)",
    "insertText": "ExecuteCommandLists(Count, CommandLists)"
  },
  {
    "label": "AsyncWorkload()",
    "kind": "Method",
    "detail": "Function (} } return hr ; } struct AsyncWorkload {)",
    "insertText": "AsyncWorkload() : pMasterSet(nullptr), FenceValueToSignal(0), SyncPointGeneration(0)"
  },
  {
    "label": "AsyncThreadStart()",
    "kind": "Method",
    "detail": "Function (} UINT64 SyncPointGeneration ; ResidencySet* pMasterSet ; UINT64 FenceValueToSignal ; } ; SIZE_T AsyncWorkQueueSize ; AsyncWorkload* AsyncWorkQueue ; HANDLE AsyncWorkEvent ; HANDLE AsyncWorkThread ; Internal::CriticalSection AsyncWorkMutex ; volatile bool FinishAsyncWork ; volatile SIZE_T CurrentAsyncWorkloadHead ; volatile SIZE_T CurrentAsyncWorkloadTail ; unsigned long WINAPI)",
    "insertText": "AsyncThreadStart(void* pData)"
  },
  {
    "label": "pManager()",
    "kind": "Method",
    "detail": "Function (ResidencyManagerInternal*)",
    "insertText": "pManager(ResidencyManagerInternal*)"
  },
  {
    "label": "ProcessPagingWork()",
    "kind": "Method",
    "detail": "Function (pManager ->)",
    "insertText": "ProcessPagingWork(pWork)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WaitForSingleObject(pManager->AsyncWorkEvent, INFINITE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pManager->FinishAsyncWork)"
  },
  {
    "label": "DequeueCompletedSyncPoints()",
    "kind": "Method",
    "detail": "Function (Internal::DeviceWideSyncPoint* FirstUncompletedSyncPoint =)",
    "insertText": "DequeueCompletedSyncPoints()"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (union ResidentScratchSpace { ManagedObject* pManagedObject ; ID3D12Pageable* pUnderlying ; } ; ResidentScratchSpace* pMakeResidentList = nullptr ; UINT32 NumObjectsToMakeResident = 0 ; ID3D12Pageable** pEvictionList = nullptr ; UINT32 NumObjectsToEvict = 0 ; UINT64 SizeToMakeResident = 0 ; LARGE_INTEGER CurrentTime ;)",
    "insertText": "QueryPerformanceCounter(&CurrentTime)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pMakeResidentList = new ResidentScratchSpace [ pWork -> pMasterSet -> CurrentSetSize ] ; pEvictionList = new ID3D12Pageable* [ LRU . NumResidentObjects ] ;)",
    "insertText": "for(INT32 i = 0; i < pWork->pMasterSet->CurrentSetSize; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ManagedObject*& pObject = pWork -> pMasterSet -> ppSet [ i ] ;)",
    "insertText": "if(pObject->ResidencyStatus == ManagedObject::RESIDENCY_STATUS::EVICTED)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (pMakeResidentList [ NumObjectsToMakeResident + + ] . pManagedObject = pObject ; LRU .)",
    "insertText": "MakeResident(pObject)"
  },
  {
    "label": "ObjectReferenced()",
    "kind": "Method",
    "detail": "Function (SizeToMakeResident + = pObject -> Size ; } pObject -> LastGPUSyncPoint = pWork -> SyncPointGeneration ; pObject -> LastUsedTimestamp = CurrentTime . QuadPart ; LRU .)",
    "insertText": "ObjectReferenced(pObject)"
  },
  {
    "label": "GetCurrentEvictionGracePeriod()",
    "kind": "Method",
    "detail": "Function (UINT64 EvictionGracePeriod =)",
    "insertText": "GetCurrentEvictionGracePeriod(&LocalMemory)"
  },
  {
    "label": "TrimAgedAllocations()",
    "kind": "Method",
    "detail": "Function (EvictionGracePeriod = 0 ; } LRU .)",
    "insertText": "TrimAgedAllocations(FirstUncompletedSyncPoint, pEvictionList, NumObjectsToEvict, CurrentTime.QuadPart, EvictionGracePeriod)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(Device->Evict(NumObjectsToEvict, pEvictionList))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumObjectsToEvict = 0 ; })",
    "insertText": "if(NumObjectsToMakeResident)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (UINT32 ObjectsMadeResident = 0 ; UINT32 MakeResidentIndex = 0 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (INT64 TotalUsage = LocalMemory . CurrentUsage + NonLocalMemory . CurrentUsage ; INT64 TotalBudget = LocalMemory . Budget + NonLocalMemory . Budget ; INT64 AvailableSpace = TotalBudget - TotalUsage ; UINT64 BatchSize = 0 ; UINT32 NumObjectsInBatch = 0 ; UINT32 BatchStart = MakeResidentIndex ; HRESULT hr = S_OK ;)",
    "insertText": "if(AvailableSpace > 0)"
  },
  {
    "label": "EnqueueMakeResident()",
    "kind": "Method",
    "detail": "Function (hr = Device3 ->)",
    "insertText": "EnqueueMakeResident(D3D12_RESIDENCY_FLAG_NONE, NumObjectsInBatch, &pMakeResidentList[BatchStart].pUnderlying, AsyncThreadFence.pFence, AsyncThreadFence.FenceValue + 1)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (} } else { hr = Device ->)",
    "insertText": "MakeResident(NumObjectsInBatch, &pMakeResidentList[BatchStart].pUnderlying)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeToMakeResident - = BatchSize ; } })",
    "insertText": "if(FAILED(hr) || ObjectsMadeResident != NumObjectsToMakeResident)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UINT32 NumObjects = NumObjectsToMakeResident - ObjectsMadeResident ;)",
    "insertText": "for(UINT32 i = MakeResidentIndex; i < NumObjectsToMakeResident; i++)"
  },
  {
    "label": "EnqueueMakeResident()",
    "kind": "Method",
    "detail": "Function (hr = Device3 ->)",
    "insertText": "EnqueueMakeResident(D3D12_RESIDENCY_FLAG_NONE, NumObjects, &pMakeResidentList[MakeResidentIndex].pUnderlying, AsyncThreadFence.pFence, AsyncThreadFence.FenceValue + 1)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (} } else { hr = Device ->)",
    "insertText": "MakeResident(NumObjects, &pMakeResidentList[MakeResidentIndex].pUnderlying)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FAILED(hr))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; } UINT64 GenerationToWaitFor = FirstUncompletedSyncPoint -> GenerationID ;)",
    "insertText": "if(GenerationToWaitFor == pWork->SyncPointGeneration)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK(GenerationToWaitFor >= 0)"
  },
  {
    "label": "WaitForSyncPoint()",
    "kind": "Method",
    "detail": "Function (GenerationToWaitFor - = 1 ; })",
    "insertText": "WaitForSyncPoint(GenerationToWaitFor)"
  },
  {
    "label": "TrimToSyncPointInclusive()",
    "kind": "Method",
    "detail": "Function (LRU .)",
    "insertText": "TrimToSyncPointInclusive(TotalUsage + INT64(SizeToMakeResident), LocalMemoryBudgetLimit == 0 ? 0 : TotalBudget, pEvictionList, NumObjectsToEvict, GenerationToWaitFor)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} else { break ; } } })",
    "insertText": "delete(pMakeResidentList)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(pEvictionList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Device3)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(AsyncThreadFence.pFence->Signal(pWork->FenceValueToSignal))"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "delete(pWork->pMasterSet)"
  },
  {
    "label": "EnqueueAsyncWork()",
    "kind": "Method",
    "detail": "Function (pWork -> pMasterSet = nullptr ; } HRESULT)",
    "insertText": "EnqueueAsyncWork(ResidencySet* pMasterSet, UINT64 FenceValueToSignal, UINT64 SyncPointGeneration)"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(AsyncThreadWorkCompletionEvent, INFINITE)"
  },
  {
    "label": "RESIDENCY_CHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RESIDENCY_CHECK(CurrentAsyncWorkloadTail >= CurrentAsyncWorkloadHead)"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(Adapter->QueryVideoMemoryInfo(NodeIndex, Segment, InfoOut))"
  },
  {
    "label": "RESIDENCY_CHECK_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESIDENCY_CHECK_RESULT(DeviceDownlevel->QueryVideoMemoryInfo(NodeIndex, Segment, InfoOut))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(Segment == DXGI_MEMORY_SEGMENT_GROUP_LOCAL)"
  },
  {
    "label": "RESIDENCY_MIN()",
    "kind": "Method",
    "detail": "Function (InfoOut -> Budget =)",
    "insertText": "RESIDENCY_MIN(LocalMemoryBudgetLimit, InfoOut->Budget)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Internal::ScopedLock)",
    "insertText": "Lock(&AsyncWorkMutex)"
  },
  {
    "label": "CreateSyncPoint()",
    "kind": "Method",
    "detail": "Function (Internal::DeviceWideSyncPoint* pPoint = Internal::)",
    "insertText": "CreateSyncPoint(NumQueuesSeen, CurrentSyncPointGeneration)"
  },
  {
    "label": "CONTAINING_RECORD()",
    "kind": "Method",
    "detail": "Function (Internal::Fence* pFence =)",
    "insertText": "CONTAINING_RECORD(pFenceEntry, Internal::Fence, ListEntry)"
  },
  {
    "label": "InsertTailList()",
    "kind": "Method",
    "detail": "Function (pFenceEntry = pFenceEntry -> Flink ; pPoint -> pQueueSyncPoints [ i ] . pFence = pFence ; pPoint -> pQueueSyncPoints [ i ] . LastUsedValue = pFence -> FenceValue - 1 ; i + + ; })",
    "insertText": "InsertTailList(&InFlightSyncPointsHead, &pPoint->ListEntry)"
  },
  {
    "label": "WaitForSyncPoint()",
    "kind": "Method",
    "detail": "Function (delete pPoint ; } else { return pPoint ; } } return nullptr ; } void)",
    "insertText": "WaitForSyncPoint(UINT64 SyncPointID)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (LIST_ENTRY* pPointEntry = InFlightSyncPointsHead . Flink ;)",
    "insertText": "while(pPointEntry != &InFlightSyncPointsHead)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(pPoint)"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (} else { pPoint ->)",
    "insertText": "WaitForCompletion(CompletionEvent)"
  },
  {
    "label": "RESIDENCY_MIN()",
    "kind": "Method",
    "detail": "Function (Pressure =)",
    "insertText": "RESIDENCY_MIN(Pressure, 1.0)"
  },
  {
    "label": "Pressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pressure(Pressure - cTrimPercentageMemoryUsageThreshold) / (1.0 - cTrimPercentageMemoryUsageThreshold)"
  },
  {
    "label": "ResidencyManager()",
    "kind": "Method",
    "detail": "Function (} else { return MAXUINT64 ; } } LIST_ENTRY QueueFencesListHead ; UINT32 NumQueuesSeen ; Internal::Fence AsyncThreadFence ; LIST_ENTRY InFlightSyncPointsHead ; UINT64 CurrentSyncPointGeneration ; HANDLE CompletionEvent ; HANDLE AsyncThreadWorkCompletionEvent ; ID3D12Device* Device ; ID3D12Device3* Device3 ; # ifdef __ID3D12DeviceDownlevel_INTERFACE_DEFINED__ ID3D12DeviceDownlevel* DeviceDownlevel ; # endif UINT NodeIndex ; IDXGIAdapter3* Adapter ; Internal::LRUCache LRU ; Internal::CriticalSection Mutex ; Internal::CriticalSection ExecutionCS ; const bool cStartEvicted ; const float cMinEvictionGracePeriod ; UINT64 MinEvictionGracePeriodTicks ; const float cMaxEvictionGracePeriod ; UINT64 MaxEvictionGracePeriodTicks ; const float cTrimPercentageMemoryUsageThreshold ; UINT32 MaxSoftwareQueueLatency ; LUID ResidencyManagerUniqueID ; SyncManager* pSyncManager ; } ; } class ResidencyManager { public :)",
    "insertText": "ResidencyManager() : Manager(&SyncManager)"
  },
  {
    "label": "BeginTrackingObject()",
    "kind": "Method",
    "detail": "Function (Manager .)",
    "insertText": "BeginTrackingObject(pObject)"
  },
  {
    "label": "EndTrackingObject()",
    "kind": "Method",
    "detail": "Function (Manager .)",
    "insertText": "EndTrackingObject(pObject)"
  },
  {
    "label": "GetCurrentGPUSyncPoint()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "GetCurrentGPUSyncPoint(ID3D12CommandQueue* Queue, UINT64 *pCurrentGPUSyncPoint)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "MakeResident(ID3D12CommandQueue* Queue, ResidencySet*&& MasterSet)"
  },
  {
    "label": "MakeResident()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = Manager .)",
    "insertText": "MakeResident(Queue, MasterSet)"
  },
  {
    "label": "CreateResidencySet()",
    "kind": "Method",
    "detail": "Function (} ResidencySet*)",
    "insertText": "CreateResidencySet()"
  },
  {
    "label": "ResidencySet()",
    "kind": "Method",
    "detail": "Function (ResidencySet* pSet = new)",
    "insertText": "ResidencySet()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (pSet ->)",
    "insertText": "Initialize(&SyncManager)"
  },
  {
    "label": "DestroyResidencySet()",
    "kind": "Method",
    "detail": "Function (} return pSet ; } void)",
    "insertText": "DestroyResidencySet(ResidencySet* pSet)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete(pSet)"
  },
  {
    "label": "SetLocalMemoryBudgetLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalMemoryBudgetLimit(UINT64 InLocalMemoryBudgetLimit)"
  }
]