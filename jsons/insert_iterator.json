[
  {
    "label": "_Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Container"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_INSERT_ITERATOR_H # define _LIBCPP___ITERATOR_INSERT_ITERATOR_H # include<__config> # include<__iterator / iterator . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__ranges / access . h> # include<__utility / move . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else template<class _Container> using __insert_iterator_iter_t = _Container::iterator ; # endif _LIBCPP_SUPPRESS_DEPRECATED_PUSH template<class _Container> class _LIBCPP_TEMPLATE_VIS insert_iterator # if _LIBCPP_STD_VER<= 1 4 | | !)",
    "insertText": "defined(_LIBCPP_ABI_NO_ITERATOR_BASES)"
  },
  {
    "label": "insert_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP protected : _Container* container ; __insert_iterator_iter_t<_Container> iter ; public : typedef output_iterator_tag iterator_category ; typedef void value_type ; # if _LIBCPP_STD_VER> 1 7 typedef ptrdiff_t difference_type ; # else typedef void difference_type ; # endif typedef void pointer ; typedef void reference ; typedef _Container container_type ; _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17)",
    "insertText": "insert_iterator(_Container& __x, __insert_iterator_iter_t<_Container> __i) : container(_VSTD::addressof(__x)), iter(__i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 insert_iterator&)",
    "insertText": "operator(const typename _Container::value_type& __value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iter = container ->)",
    "insertText": "insert(iter, __value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + iter ; return* this ; } # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 insert_iterator&)",
    "insertText": "operator(typename _Container::value_type&& __value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iter = container ->)",
    "insertText": "insert(iter, _VSTD::move(__value))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + iter ; return* this ; } # endif _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 insert_iterator&)",
    "insertText": "operator()"
  }
]