[
  {
    "label": "FEdgeHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeHash"
  },
  {
    "label": "FAdjacency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdjacency"
  },
  {
    "label": "HashPosition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / HashTable . h \" namespace Nanite { uint32)",
    "insertText": "HashPosition(const FVector3f& Position)"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (union { float f ; uint32 i ; } x ; union { float f ; uint32 i ; } y ; union { float f ; uint32 i ; } z ; x . f = Position . X ; y . f = Position . Y ; z . f = Position . Z ; return)",
    "insertText": "Murmur32({ Position.X == 0.0f ? 0u : x.i, Position.Y == 0.0f ? 0u : y.i, Position.Z == 0.0f ? 0u : z.i })"
  },
  {
    "label": "Cycle3()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Cycle3(uint32 Value)"
  },
  {
    "label": "Value1Mod3()",
    "kind": "Method",
    "detail": "Function (uint32 ValueMod3 = Value % 3 ; uint32)",
    "insertText": "Value1Mod3(1 << ValueMod3)"
  },
  {
    "label": "EquilateralArea()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EquilateralArea(float EdgeLength)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (const float sqrt3_4 = 0 . 4 3 3 0 1 2 7 f ; return sqrt3_4*)",
    "insertText": "Square(EdgeLength * EdgeLength)"
  },
  {
    "label": "EquilateralEdgeLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EquilateralEdgeLength(float Area)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const float sqrt3_4 = 0 . 4 3 3 0 1 2 7 f ; return)",
    "insertText": "Sqrt(Area / sqrt3_4)"
  },
  {
    "label": "TriangleArea()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "TriangleArea(float a, float b, float c)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float AreaSqrTimes16 =)",
    "insertText": "Max(0.0f, ( a + b + c ) * (-a + b + c ) * ( a - b + c ) * ( a + b - c ))"
  },
  {
    "label": "ApproxNumTris()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ApproxNumTris(int32 a, int32 b, int32 c)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float s = 0 . 5 f*)",
    "insertText": "float(a + b + c)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (float NumTris = 4 . 0 f*)",
    "insertText": "Sqrt(FMath::Max( 0.0625f, s * (s - (float)a) * (s - (float)b) * (s - (float)c) / 3.0f ))"
  },
  {
    "label": "Max3()",
    "kind": "Method",
    "detail": "Function (int32 MaxFactor =)",
    "insertText": "Max3(a, b, c)"
  },
  {
    "label": "LengthSquared()",
    "kind": "Method",
    "detail": "Function (} namespace Barycentric { float)",
    "insertText": "LengthSquared(const FVector3f& Barycentrics0, const FVector3f& Barycentrics1, const FVector3f& EdgeLengthsSqr)"
  },
  {
    "label": "SubtriangleArea()",
    "kind": "Method",
    "detail": "Function (FVector3f Disp = Barycentrics0 - Barycentrics1 ; return - Disp . X* Disp . Y* EdgeLengthsSqr [ 0 ] - Disp . Y* Disp . Z* EdgeLengthsSqr [ 1 ] - Disp . Z* Disp . X* EdgeLengthsSqr [ 2 ] ; } float)",
    "insertText": "SubtriangleArea(const FVector3f& Barycentrics0, const FVector3f& Barycentrics1, const FVector3f& Barycentrics2, float TriangleArea)"
  },
  {
    "label": "DistanceToEdge()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DistanceToEdge(float Barycentric, float EdgeLength, float TriangleArea)"
  },
  {
    "label": "LengthSquared()",
    "kind": "Method",
    "detail": "Function (FVector3f LengthsSqr ; LengthsSqr [ 0 ] =)",
    "insertText": "LengthSquared(Barycentrics1, Barycentrics2, EdgeLengthsSqr)"
  },
  {
    "label": "LengthSquared()",
    "kind": "Method",
    "detail": "Function (LengthsSqr [ 1 ] =)",
    "insertText": "LengthSquared(Barycentrics2, Barycentrics0, EdgeLengthsSqr)"
  },
  {
    "label": "LengthSquared()",
    "kind": "Method",
    "detail": "Function (LengthsSqr [ 2 ] =)",
    "insertText": "LengthSquared(Barycentrics0, Barycentrics1, EdgeLengthsSqr)"
  },
  {
    "label": "SubtriangleArea()",
    "kind": "Method",
    "detail": "Function (float Area =)",
    "insertText": "SubtriangleArea(Barycentrics0, Barycentrics1, Barycentrics2, TriangleArea)"
  },
  {
    "label": "SubtriangleBarycentrics()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SubtriangleBarycentrics(uint32 TriX, uint32 TriY, uint32 FlipTri, uint32 NumSubdivisions, FVector3f Barycentrics[3])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 VertXY [ 3 ] [ 2 ] = { { TriX,TriY },{ TriX,TriY + 1 },{ TriX + 1,TriY },} ; VertXY [ 0 ] [ 1 ] + = FlipTri ; VertXY [ 1 ] [ 0 ] + = FlipTri ;)",
    "insertText": "for(int Corner = 0; Corner < 3; Corner++)"
  },
  {
    "label": "Corner()",
    "kind": "Method",
    "detail": "Function (Barycentrics [)",
    "insertText": "Corner(float)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Barycentrics [ Corner ] [ 2 ] =)",
    "insertText": "float(NumSubdivisions - VertXY[ Corner ][0] - VertXY[ Corner ][1])"
  },
  {
    "label": "FEdgeHash()",
    "kind": "Method",
    "detail": "Function (} } class FEdgeHash { public : FHashTable HashTable ;)",
    "insertText": "FEdgeHash(int32 Num ) : HashTable( 1 << FMath::FloorLog2( Num ), Num)"
  },
  {
    "label": "Add_Concurrent()",
    "kind": "Method",
    "detail": "Function (} template<FGetPosition> void)",
    "insertText": "Add_Concurrent(int32 EdgeIndex, FGetPosition&& GetPosition)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (const FVector3f& Position0 =)",
    "insertText": "GetPosition(EdgeIndex)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (const FVector3f& Position1 =)",
    "insertText": "GetPosition(Cycle3( EdgeIndex ))"
  },
  {
    "label": "HashPosition()",
    "kind": "Method",
    "detail": "Function (uint32 Hash0 =)",
    "insertText": "HashPosition(Position0)"
  },
  {
    "label": "HashPosition()",
    "kind": "Method",
    "detail": "Function (uint32 Hash1 =)",
    "insertText": "HashPosition(Position1)"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "Murmur32({ Hash0, Hash1 })"
  },
  {
    "label": "Add_Concurrent()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Add_Concurrent(Hash, EdgeIndex)"
  },
  {
    "label": "ForAllMatching()",
    "kind": "Method",
    "detail": "Function (} template<FGetPosition,FuncType> void)",
    "insertText": "ForAllMatching(int32 EdgeIndex, bool bAdd, FGetPosition&& GetPosition, FuncType&& Function)"
  },
  {
    "label": "Murmur32()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "Murmur32({ Hash1, Hash0 })"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(EdgeIndex, OtherEdgeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bAdd ) HashTable.Add( Murmur32( { Hash0, Hash1 } ), EdgeIndex)"
  },
  {
    "label": "FAdjacency()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAdjacency { TArray<int32> Direct ; TMultiMap<int32,int32> Extended ;)",
    "insertText": "FAdjacency(int32 Num)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Direct .)",
    "insertText": "AddUninitialized(Num)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Link(int32 EdgeIndex0, int32 EdgeIndex1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Direct [ EdgeIndex0 ] = EdgeIndex1 ; Direct [ EdgeIndex1 ] = EdgeIndex0 ; } else { Extended .)",
    "insertText": "AddUnique(EdgeIndex0, EdgeIndex1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Extended .)",
    "insertText": "AddUnique(EdgeIndex1, EdgeIndex0)"
  },
  {
    "label": "ForAll()",
    "kind": "Method",
    "detail": "Function (} } template<FuncType> void)",
    "insertText": "ForAll(int32 EdgeIndex, FuncType&& Function)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 AdjIndex = Direct [ EdgeIndex ] ;)",
    "insertText": "if(AdjIndex >= 0)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(EdgeIndex, AdjIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto Iter = Extended.CreateConstKeyIterator( EdgeIndex ); Iter; ++Iter)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(EdgeIndex, Iter.Value())"
  }
]