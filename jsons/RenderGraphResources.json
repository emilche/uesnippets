[
  {
    "label": "FRDGBarrierBatchBegin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBarrierBatchBegin"
  },
  {
    "label": "FRDGBarrierValidation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBarrierValidation"
  },
  {
    "label": "FRDGBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuffer"
  },
  {
    "label": "FRDGBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBufferPool"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRDGResourceDumpContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGResourceDumpContext"
  },
  {
    "label": "FRDGTextureUAV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTextureUAV"
  },
  {
    "label": "FRDGTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTrace"
  },
  {
    "label": "FRDGUserValidation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGUserValidation"
  },
  {
    "label": "FRHITransientBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientBuffer"
  },
  {
    "label": "FRHITransientTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientTexture"
  },
  {
    "label": "FRenderTargetPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTargetPool"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "FPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPooledRenderTarget"
  },
  {
    "label": "FRDGBufferDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGBufferDebugData"
  },
  {
    "label": "FRDGResourceDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGResourceDebugData"
  },
  {
    "label": "FRDGTextureDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureDebugData"
  },
  {
    "label": "FRDGViewableResourceDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGViewableResourceDebugData"
  },
  {
    "label": "FRDGProducerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGProducerState"
  },
  {
    "label": "FRDGSubresourceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGSubresourceState"
  },
  {
    "label": "FRDGResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGResource"
  },
  {
    "label": "FRDGUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGUniformBuffer"
  },
  {
    "label": "TRDGUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRDGUniformBuffer"
  },
  {
    "label": "FRDGViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGViewableResource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAccessModeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessModeState"
  },
  {
    "label": "FRDGView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGView"
  },
  {
    "label": "FRDGPooledTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGPooledTexture"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "FRDGShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGShaderResourceView"
  },
  {
    "label": "FRDGUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGUnorderedAccessView"
  },
  {
    "label": "FRDGTextureSRVDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTextureSRVDesc"
  },
  {
    "label": "FRDGTextureSRV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTextureSRV"
  },
  {
    "label": "FRDGTextureUAVDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTextureUAVDesc"
  },
  {
    "label": "FRDGBufferDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGBufferDesc"
  },
  {
    "label": "FRDGBufferSRVDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGBufferSRVDesc"
  },
  {
    "label": "FRDGBufferUAVDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGBufferUAVDesc"
  },
  {
    "label": "FRDGPooledBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGPooledBuffer"
  },
  {
    "label": "FRDGBufferSRV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBufferSRV"
  },
  {
    "label": "FRDGBufferUAV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBufferUAV"
  },
  {
    "label": "IsTransitionRequired()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" PixelFormat . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" RHIResources . h \" # include \" RHITransientResourceAllocator . h \" # include \" RenderGraphAllocator . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderGraphParameter . h \" # include \" RenderGraphTextureSubresource . h \" # include \" RendererInterface . h \" # include \" ShaderParameterMacros . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" class FRDGBarrierBatchBegin ; class FRDGBarrierValidation ; class FRDGBuffer ; class FRDGBufferPool ; class FRDGBuilder ; class FRDGResourceDumpContext ; class FRDGTextureUAV ; class FRDGTrace ; class FRDGUserValidation ; class FRHITransientBuffer ; class FRHITransientTexture ; class FRenderTargetPool ; class FShaderParametersMetadata ; struct FPooledRenderTarget ; struct FRDGBufferDebugData ; struct FRDGResourceDebugData ; struct FRDGTextureDebugData ; struct FRDGViewableResourceDebugData ; struct FRDGProducerState { FRDGPass* Pass = nullptr ; FRDGPass* PassIfSkipUAVBarrier = nullptr ; FRDGPass* PassIfReadAccess = nullptr ; ERHIAccess Access = ERHIAccess::Unknown ; FRDGViewHandle NoUAVBarrierHandle ; } ; using FRDGProducerStatesByPipeline = TRHIPipelineArray<FRDGProducerState> ; struct FRDGSubresourceState { bool)",
    "insertText": "IsTransitionRequired(const FRDGSubresourceState& Previous, const FRDGSubresourceState& Next)"
  },
  {
    "label": "IsMergeAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMergeAllowed(ERDGViewableResourceType ResourceType, const FRDGSubresourceState& Previous, const FRDGSubresourceState& Next)"
  },
  {
    "label": "FRDGSubresourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGSubresourceState()"
  },
  {
    "label": "FRDGSubresourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGSubresourceState(ERHIAccess InAccess) : Access(InAccess)"
  },
  {
    "label": "FRDGSubresourceState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGSubresourceState(ERHIPipeline Pipeline, FRDGPassHandle PassHandle)"
  },
  {
    "label": "SetPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPass(Pipeline, PassHandle)"
  },
  {
    "label": "SetPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPass(ERHIPipeline Pipeline, FRDGPassHandle PassHandle)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "IsUsedBy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedBy(ERHIPipeline Pipeline)"
  },
  {
    "label": "GetLastPass()",
    "kind": "Method",
    "detail": "Function (FRDGPassHandle)",
    "insertText": "GetLastPass()"
  },
  {
    "label": "GetFirstPass()",
    "kind": "Method",
    "detail": "Function (FRDGPassHandle)",
    "insertText": "GetFirstPass()"
  },
  {
    "label": "GetPipelines()",
    "kind": "Method",
    "detail": "Function (ERHIPipeline)",
    "insertText": "GetPipelines()"
  },
  {
    "label": "FRDGResource()",
    "kind": "Method",
    "detail": "Function (ERHIAccess Access = ERHIAccess::Unknown ; FRDGPassHandlesByPipeline FirstPass ; FRDGPassHandlesByPipeline LastPass ; FRDGViewUniqueFilter NoUAVBarrierFilter ; FRDGBufferReservedCommitHandle ReservedCommitHandle ; EResourceTransitionFlags Flags = EResourceTransitionFlags::None ; } ; using FRDGTextureSubresourceState = TRDGTextureSubresourceArray<FRDGSubresourceState*,FRDGArrayAllocator> ; class FRDGResource { public :)",
    "insertText": "FRDGResource(const FRDGResource&)"
  },
  {
    "label": "FRDGResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRDGResource()"
  },
  {
    "label": "MarkResourceAsUsed()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const Name = nullptr ; # if RDG_ENABLE_DEBUG void)",
    "insertText": "MarkResourceAsUsed()"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (} # endif FRHIResource*)",
    "insertText": "GetRHI()"
  },
  {
    "label": "GetRHIUnchecked()",
    "kind": "Method",
    "detail": "Function (} FRHIResource*)",
    "insertText": "GetRHIUnchecked()"
  },
  {
    "label": "GetDebugData()",
    "kind": "Method",
    "detail": "Function (# endif private : # if RDG_ENABLE_DEBUG struct FRDGResourceDebugData* DebugData = nullptr ; FRDGResourceDebugData&)",
    "insertText": "GetDebugData()"
  },
  {
    "label": "FRDGUniformBuffer()",
    "kind": "Method",
    "detail": "Function (# endif FRDGBuilder ; FRDGUserValidation ; FRDGBarrierValidation ; } ; class FRDGUniformBuffer : public FRDGResource { public : ~)",
    "insertText": "FRDGUniformBuffer()"
  },
  {
    "label": "FRDGUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} protected : template<TParameterStruct>)",
    "insertText": "FRDGUniformBuffer(const TParameterStruct* InParameters, const TCHAR* InName) : FRDGResource(InName) , ParameterStruct(InParameters, TParameterStruct::FTypeInfo::GetStructMetadata())"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI()"
  },
  {
    "label": "TRDGUniformBuffer()",
    "kind": "Method",
    "detail": "Function (const FRDGParameterStruct ParameterStruct ; TRefCountPtr<FRHIUniformBuffer> UniformBufferRHI ; FRDGUniformBufferHandle Handle ; bool bExternal = false ; FRDGBuilder ; FRDGUniformBufferRegistry ; FRDGAllocator ; } ; template<ParameterStructType> class TRDGUniformBuffer : public FRDGUniformBuffer { public : ~)",
    "insertText": "TRDGUniformBuffer()"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (} ; const TRDGParameterStruct<ParameterStructType>&)",
    "insertText": "GetParameters()"
  },
  {
    "label": "GetContents()",
    "kind": "Method",
    "detail": "Function (} const ParameterStructType*)",
    "insertText": "GetContents()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ParameterStructType*)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const ParameterStructType* Parameters ; FRDGBuilder ; FRDGUniformBufferRegistry ; FRDGAllocator ; } ; class FRDGViewableResource : public FRDGResource { public : #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual ~FRDGViewableResource()"
  },
  {
    "label": "IsExternal()",
    "kind": "Method",
    "detail": "Function (delete [ ] Name ; } } # endif const ERDGViewableResourceType Type ; bool)",
    "insertText": "IsExternal()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_ENABLE_RESOURCE_INFO OwnerName = InOwnerName ; # endif } #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) inline void SetDebugNameIsHeapAllocated()"
  },
  {
    "label": "IsDebugNameHeapAllocated()",
    "kind": "Method",
    "detail": "Function (bHeapAllocatedDebugName = 1 ; } # endif bool)",
    "insertText": "IsDebugNameHeapAllocated()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FRDGViewableResource()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } protected :)",
    "insertText": "FRDGViewableResource(const TCHAR* InName, ERDGViewableResourceType InType, bool bSkipTracking, bool bImmediateFirstBarrier)"
  },
  {
    "label": "IsCullRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCullRoot()"
  },
  {
    "label": "SetRHI()",
    "kind": "Method",
    "detail": "Function (# endif ETransientExtractionHint TransientExtractionHint ; FRDGPassHandle AcquirePass ; FRDGPassHandle DiscardPass ; FRDGPassHandle FirstPass ; FRDGPassHandlesByPipeline LastPasses ; uint32 ReferenceCount ; uint32 PassStateIndex = 0 ; TArrayView<const FRHITransientAliasingOverlap> AliasingOverlaps ; ERHIAccess EpilogueAccess = DefaultEpilogueAccess ; private : const uint32 DeallocatedReferenceCount = ~ 0 ; void)",
    "insertText": "SetRHI(FRHIResource* Resource)"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (ResourceRHI = Resource ; # if RHI_ENABLE_RESOURCE_INFO ResourceRHI ->)",
    "insertText": "SetOwnerName(OwnerName)"
  },
  {
    "label": "SetExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "SetExternalAccessMode(ERHIAccess InAccess, ERHIPipeline InPipelines)"
  },
  {
    "label": "GetViewableDebugData()",
    "kind": "Method",
    "detail": "Function (AccessModeState . Mode = EAccessMode::External ; AccessModeState . Access = InAccess ; AccessModeState . Pipelines = InPipelines ; EpilogueAccess = InAccess ; } # if RHI_ENABLE_RESOURCE_INFO FName OwnerName ; # endif # if RDG_ENABLE_TRACE uint32 TraceOrder = 0 ; TArray<FRDGPassHandle,FRDGArrayAllocator> TracePasses ; # endif # if RDG_ENABLE_DEBUG struct FRDGViewableResourceDebugData* ViewableDebugData = nullptr ; FRDGViewableResourceDebugData&)",
    "insertText": "GetViewableDebugData()"
  },
  {
    "label": "IsExtendedLifetimeResource()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsExtendedLifetimeResource(FRDGViewableResource*)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FRDGBuilder ; FRDGUserValidation ; FRDGBarrierBatchBegin ; FRDGResourceDumpContext ; FRDGTrace ; FRDGPass ; } ; class FRDGView : public FRDGResource { public : const ERDGViewType Type ; FRDGViewableResource*)",
    "insertText": "GetParent()"
  },
  {
    "label": "GetParentType()",
    "kind": "Method",
    "detail": "Function (ERDGViewableResourceType)",
    "insertText": "GetParentType()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FRDGViewHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (} private : FRDGViewHandle Handle ; FRDGPassHandle LastPass ; FRDGBuilder ; FRDGViewRegistry ; FRDGAllocator ; } ; FRDGTextureDesc)",
    "insertText": "Translate(const FPooledRenderTargetDesc& InDesc)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc)",
    "insertText": "Translate(const FRHITextureDesc& InDesc)"
  },
  {
    "label": "FRDGPooledTexture()",
    "kind": "Method",
    "detail": "Function (class FRDGPooledTexture final : public FRefCountBase { public :)",
    "insertText": "FRDGPooledTexture(FRHITexture* InTexture) : Texture(InTexture)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Fences .)",
    "insertText": "Emplace()"
  },
  {
    "label": "GetOrCreateUAV()",
    "kind": "Method",
    "detail": "Function (} FRHIUnorderedAccessView*)",
    "insertText": "GetOrCreateUAV(FRHICommandListBase& RHICmdList, const FRHITextureUAVCreateInfo& UAVDesc)"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, const FRHITextureSRVCreateInfo& SRVDesc)"
  },
  {
    "label": "GetSubresourceRangeSRV()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSubresourceRange)",
    "insertText": "GetSubresourceRangeSRV()"
  },
  {
    "label": "FRDGTexture()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRDGTexture(const TCHAR* InName, const FRDGTextureDesc& InDesc, ERDGTextureFlags InFlags)"
  },
  {
    "label": "GetTextureDebugData()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureHandle Handle ; FRDGTextureHandle PreviousOwner ; FRDGTextureHandle NextOwner ; FRDGTextureSubresourceLayout Layout ; FRDGTextureSubresourceRange WholeRange ; const uint16 SubresourceCount ; FRDGTextureSubresourceState State ; FRDGTextureSubresourceState FirstState ; FRDGTextureSubresourceState MergeState ; TRDGTextureSubresourceArray<FRDGProducerStatesByPipeline,FRDGArrayAllocator> LastProducers ; IPooledRenderTarget* RenderTarget = nullptr ; FRDGPooledTexture* PooledTexture = nullptr ; FRHITransientTexture* TransientTexture = nullptr ; FRHITextureViewCache* ViewCache = nullptr ; TRefCountPtr<IPooledRenderTarget> Allocation ; # if RDG_ENABLE_DEBUG struct FRDGTextureDebugData* TextureDebugData = nullptr ; FRDGTextureDebugData&)",
    "insertText": "GetTextureDebugData()"
  },
  {
    "label": "EncloseVisualizeExtent()",
    "kind": "Method",
    "detail": "Function (# endif # if SUPPORTS_VISUALIZE_TEXTURE FIntPoint VisualizeTextureExtent = { 0,0 } ; public : void)",
    "insertText": "EncloseVisualizeExtent(const FIntPoint& Point)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (VisualizeTextureExtent . X =)",
    "insertText": "Max(VisualizeTextureExtent.X, Point.X)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (VisualizeTextureExtent . Y =)",
    "insertText": "Max(VisualizeTextureExtent.Y, Point.Y)"
  },
  {
    "label": "GetVisualizeExtent()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetVisualizeExtent()"
  },
  {
    "label": "FRDGShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FRDGShaderResourceView(const TCHAR* InName, ERDGViewType InType) : FRDGView(InName, InType)"
  },
  {
    "label": "FRDGUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FRDGUnorderedAccessView(const TCHAR* InName, ERDGViewType InType, ERDGUnorderedAccessViewFlags InFlags) : FRDGView(InName, InType) , Flags(InFlags)"
  },
  {
    "label": "FRDGTextureSRVDesc()",
    "kind": "Method",
    "detail": "Function (} } ; class FRDGTextureSRVDesc final : public FRHITextureSRVCreateInfo { public :)",
    "insertText": "FRDGTextureSRVDesc()"
  },
  {
    "label": "FRDGTextureSRVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGTextureSRVDesc(FRDGTexture* InTexture)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Texture = InTexture ; NumMipLevels = InTexture -> Desc . NumMips ;)",
    "insertText": "if(InTexture->Desc.IsTextureArray())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (NumArraySlices = InTexture -> Desc . ArraySize ; } } FRDGTextureSRVDesc)",
    "insertText": "Create(FRDGTextureRef Texture)"
  },
  {
    "label": "CreateForMipLevel()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSRVDesc)",
    "insertText": "CreateForMipLevel(FRDGTextureRef Texture, int32 MipLevel)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FRDGTextureSRVDesc Desc =)",
    "insertText": "Create(Texture)"
  },
  {
    "label": "MipLevel()",
    "kind": "Method",
    "detail": "Function (Desc .)",
    "insertText": "MipLevel(int8)"
  },
  {
    "label": "CreateForSlice()",
    "kind": "Method",
    "detail": "Function (Desc . NumMipLevels = 1 ; return Desc ; } FRDGTextureSRVDesc)",
    "insertText": "CreateForSlice(FRDGTextureRef Texture, int32 SliceIndex)"
  },
  {
    "label": "FirstArraySlice()",
    "kind": "Method",
    "detail": "Function (Desc .)",
    "insertText": "FirstArraySlice(uint16)"
  },
  {
    "label": "CreateWithPixelFormat()",
    "kind": "Method",
    "detail": "Function (Desc . NumArraySlices = 1 ; Desc . DimensionOverride = ETextureDimension::Texture2D ; return Desc ; } FRDGTextureSRVDesc)",
    "insertText": "CreateWithPixelFormat(FRDGTextureRef Texture, EPixelFormat PixelFormat)"
  },
  {
    "label": "CreateForMetaData()",
    "kind": "Method",
    "detail": "Function (Desc . Format = PixelFormat ; return Desc ; } FRDGTextureSRVDesc)",
    "insertText": "CreateForMetaData(FRDGTextureRef Texture, ERDGTextureMetaDataAccess MetaData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Desc . MetaData = MetaData ; return Desc ; } bool)",
    "insertText": "operator(const FRDGTextureSRVDesc& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRDGTextureSRVDesc& Desc)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FRDGTextureSRV()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRDGTextureSRV(const TCHAR* InName, const FRDGTextureSRVDesc& InDesc) : FRDGShaderResourceView(InName, ERDGViewType::TextureSRV) , Desc(InDesc)"
  },
  {
    "label": "FRDGTextureUAVDesc()",
    "kind": "Method",
    "detail": "Function (} FRDGBuilder ; FRDGViewRegistry ; FRDGAllocator ; } ; class FRDGTextureUAVDesc final : public FRHITextureUAVCreateInfo { public :)",
    "insertText": "FRDGTextureUAVDesc()"
  },
  {
    "label": "FRDGTextureUAVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGTextureUAVDesc(FRDGTextureRef InTexture, uint8 InMipLevel = 0, EPixelFormat InFormat = PF_Unknown, uint16 InFirstArraySlice = 0, uint16 InNumArraySlices = 0) : FRHITextureUAVCreateInfo(InMipLevel, InFormat != PF_Unknown ? InFormat : InTexture->Desc.UAVFormat, InFirstArraySlice, InNumArraySlices) , Texture(InTexture)"
  },
  {
    "label": "FRDGTextureUAVDesc()",
    "kind": "Method",
    "detail": "Function (FRDGTextureUAVDesc Desc =)",
    "insertText": "FRDGTextureUAVDesc(Texture, 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Desc . MetaData = MetaData ; return Desc ; } bool)",
    "insertText": "operator(const FRDGTextureUAVDesc& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRDGTextureUAVDesc& Desc)"
  },
  {
    "label": "GetSubresourceRange()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSubresourceRange)",
    "insertText": "GetSubresourceRange()"
  },
  {
    "label": "FRDGTextureUAV()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRDGTextureUAV(const TCHAR* InName, const FRDGTextureUAVDesc& InDesc, ERDGUnorderedAccessViewFlags InFlags) : FRDGUnorderedAccessView(InName, ERDGViewType::TextureUAV, InFlags) , Desc(InDesc)"
  },
  {
    "label": "CreateByteAddressDesc()",
    "kind": "Method",
    "detail": "Function (} FRDGBuilder ; FRDGViewRegistry ; FRDGAllocator ; } ; struct FRDGBufferDesc { FRDGBufferDesc)",
    "insertText": "CreateByteAddressDesc(uint32 NumBytes)"
  },
  {
    "label": "CreateByteAddressDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::| EBufferUsageFlags::UnorderedAccess | EBufferUsageFlags::ShaderResource | EBufferUsageFlags::StructuredBuffer | EBufferUsageFlags::ByteAddressBuffer ; Desc . BytesPerElement = 4 ; Desc . NumElements = NumBytes / 4 ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateByteAddressDesc(uint32 NumElements)"
  },
  {
    "label": "CreateByteAddressDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateByteAddressDesc(sizeof(ParameterStruct) * NumElements)"
  },
  {
    "label": "GetStructMetadata()",
    "kind": "Method",
    "detail": "Function (Desc . Metadata = ParameterStruct::)",
    "insertText": "GetStructMetadata()"
  },
  {
    "label": "CreateRawIndirectDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::| EBufferUsageFlags::DrawIndirect | EBufferUsageFlags::UnorderedAccess | EBufferUsageFlags::ShaderResource | EBufferUsageFlags::VertexBuffer ; Desc . BytesPerElement = BytesPerElement ; Desc . NumElements = NumElements ; return Desc ; } FRDGBufferDesc)",
    "insertText": "CreateRawIndirectDesc(uint32 NumBytes)"
  },
  {
    "label": "CreateByteAddressDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateByteAddressDesc(NumBytes)"
  },
  {
    "label": "CreateIndirectDesc()",
    "kind": "Method",
    "detail": "Function (Desc . Usage | = EBufferUsageFlags::DrawIndirect ; return Desc ; } template<IndirectParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateIndirectDesc(uint32 NumElements = 1)"
  },
  {
    "label": "CreateStructuredDesc()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferDesc)",
    "insertText": "CreateStructuredDesc(uint32 BytesPerElement, uint32 NumElements)"
  },
  {
    "label": "CreateStructuredDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::| EBufferUsageFlags::UnorderedAccess | EBufferUsageFlags::ShaderResource | EBufferUsageFlags::StructuredBuffer ; Desc . BytesPerElement = BytesPerElement ; Desc . NumElements = NumElements ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateStructuredDesc(uint32 NumElements)"
  },
  {
    "label": "CreateStructuredDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateStructuredDesc(sizeof(ParameterStruct), NumElements)"
  },
  {
    "label": "CreateBufferDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::| EBufferUsageFlags::UnorderedAccess | EBufferUsageFlags::ShaderResource | EBufferUsageFlags::VertexBuffer ; Desc . BytesPerElement = BytesPerElement ; Desc . NumElements = NumElements ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateBufferDesc(uint32 NumElements)"
  },
  {
    "label": "CreateBufferDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateBufferDesc(sizeof(ParameterStruct), NumElements)"
  },
  {
    "label": "CreateUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::ShaderResource | EBufferUsageFlags::VertexBuffer ; Desc . BytesPerElement = BytesPerElement ; Desc . NumElements = NumElements ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateUploadDesc(uint32 NumElements)"
  },
  {
    "label": "CreateUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateUploadDesc(sizeof(ParameterStruct), NumElements)"
  },
  {
    "label": "CreateStructuredUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::ShaderResource | EBufferUsageFlags::StructuredBuffer ; Desc . BytesPerElement = BytesPerElement ; Desc . NumElements = NumElements ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateStructuredUploadDesc(uint32 NumElements)"
  },
  {
    "label": "CreateStructuredUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateStructuredUploadDesc(sizeof(ParameterStruct), NumElements)"
  },
  {
    "label": "CreateByteAddressUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc ; Desc . Usage = EBufferUsageFlags::ShaderResource | EBufferUsageFlags::ByteAddressBuffer | EBufferUsageFlags::StructuredBuffer ; Desc . BytesPerElement = 4 ; Desc . NumElements = NumBytes / 4 ; return Desc ; } template<ParameterStruct> FRDGBufferDesc)",
    "insertText": "CreateByteAddressUploadDesc(uint32 NumElements)"
  },
  {
    "label": "CreateByteAddressUploadDesc()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc Desc =)",
    "insertText": "CreateByteAddressUploadDesc(sizeof(ParameterStruct) * NumElements)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Desc.BytesPerElement)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.NumElements))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Usage))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Metadata))"
  },
  {
    "label": "FRDGBufferSRVDesc()",
    "kind": "Method",
    "detail": "Function (} uint32 BytesPerElement = 1 ; uint32 NumElements = 1 ; EBufferUsageFlags Usage = EBufferUsageFlags::None ; const FShaderParametersMetadata* Metadata = nullptr ; } ; struct FRDGBufferSRVDesc final : public FRHIBufferSRVCreateInfo {)",
    "insertText": "FRDGBufferSRVDesc()"
  },
  {
    "label": "FRDGBufferSRVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBufferSRVDesc(FRDGBufferRef InBuffer)"
  },
  {
    "label": "FRDGBufferSRVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBufferSRVDesc(FRDGBufferRef InBuffer, EPixelFormat InFormat) : FRHIBufferSRVCreateInfo(InFormat) , Buffer(InBuffer)"
  },
  {
    "label": "FRDGBufferSRVDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGBufferSRVDesc(FRDGBufferRef InBuffer, uint32 InStartOffsetBytes, uint32 InNumElements) : FRHIBufferSRVCreateInfo(InStartOffsetBytes, InNumElements) , Buffer(InBuffer)"
  },
  {
    "label": "FRDGBufferSRVDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGBufferSRVDesc(FRDGBufferRef InBuffer, FRHIRayTracingScene* InRayTracingScene, uint32 InStartOffsetBytes) : FRHIBufferSRVCreateInfo(InRayTracingScene, InStartOffsetBytes) , Buffer(InBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRDGBufferSRVDesc& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRDGBufferSRVDesc& Desc)"
  },
  {
    "label": "FRDGBufferUAVDesc()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef Buffer = nullptr ; } ; struct FRDGBufferUAVDesc final : public FRHIBufferUAVCreateInfo {)",
    "insertText": "FRDGBufferUAVDesc()"
  },
  {
    "label": "FRDGBufferUAVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBufferUAVDesc(FRDGBufferRef InBuffer)"
  },
  {
    "label": "FRDGBufferUAVDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBufferUAVDesc(FRDGBufferRef InBuffer, EPixelFormat InFormat) : FRHIBufferUAVCreateInfo(InFormat) , Buffer(InBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRDGBufferUAVDesc& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRDGBufferUAVDesc& Desc)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef Buffer = nullptr ; } ; FRHIBufferCreateInfo)",
    "insertText": "Translate(const FRDGBufferDesc& InDesc)"
  },
  {
    "label": "FRDGPooledBuffer()",
    "kind": "Method",
    "detail": "Function (class FRDGPooledBuffer final : public FRefCountBase { public :)",
    "insertText": "FRDGPooledBuffer(FRHICommandListBase& RHICmdList, TRefCountPtr<FRHIBuffer> InBuffer, const FRDGBufferDesc& InDesc, uint32 InNumAllocatedElements, const TCHAR* InName) : Desc(InDesc) , Buffer(MoveTemp(InBuffer)) , Name(InName) , NumAllocatedElements(InNumAllocatedElements)"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (CachedSRV =)",
    "insertText": "GetOrCreateSRV(RHICmdList, FRHIBufferSRVCreateInfo())"
  },
  {
    "label": "FRDGPooledBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGPooledBuffer(TRefCountPtr<FRHIBuffer> InBuffer, const FRDGBufferDesc& InDesc, uint32 InNumAllocatedElements, const TCHAR* InName)"
  },
  {
    "label": "GetOrCreateUAV()",
    "kind": "Method",
    "detail": "Function (const FRDGBufferDesc Desc ; FRHIUnorderedAccessView*)",
    "insertText": "GetOrCreateUAV(FRHICommandListBase& RHICmdList, const FRHIBufferUAVCreateInfo& UAVDesc)"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, const FRHIBufferSRVCreateInfo& SRVDesc)"
  },
  {
    "label": "GetSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetSRV(FRHICommandListBase& RHICmdList, const FRHIBufferSRVCreateInfo& SRVDesc)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetAlignedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAlignedSize()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "SetDebugLabelName()",
    "kind": "Method",
    "detail": "Function (FRDGBufferDesc AlignedDesc = Desc ; AlignedDesc . NumElements = NumAllocatedElements ; return AlignedDesc ; } void)",
    "insertText": "SetDebugLabelName(FRHICommandListBase& RHICmdList, const TCHAR* InName)"
  },
  {
    "label": "SetCommittedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCommittedSize(uint64 InCommittedSizeInBytes)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkf(EnumHasAllFlags(Desc.Usage, EBufferUsageFlags::ReservedResource), TEXT(\"CommitReservedResource() may only be used on reserved buffers\"))"
  },
  {
    "label": "GetIndirectRHICallBuffer()",
    "kind": "Method",
    "detail": "Function (} FRHIBuffer*)",
    "insertText": "GetIndirectRHICallBuffer()"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetStride()"
  },
  {
    "label": "FRDGBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBuffer(const TCHAR* InName, const FRDGBufferDesc& InDesc, ERDGBufferFlags InFlags, FRDGBufferNumElementsCallback&& InNumElementsCallback) : FRDGBuffer(InName, InDesc, InFlags)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NumElementsCallback =)",
    "insertText": "MoveTemp(InNumElementsCallback)"
  },
  {
    "label": "FinalizeDesc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeDesc()"
  },
  {
    "label": "GetBufferDebugData()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferHandle Handle ; FRDGBufferHandle PreviousOwner ; FRDGBufferHandle NextOwner ; FRDGPooledBuffer* PooledBuffer = nullptr ; FRHITransientBuffer* TransientBuffer = nullptr ; FRHIBufferViewCache* ViewCache = nullptr ; TRefCountPtr<FRDGPooledBuffer> Allocation ; FRDGProducerStatesByPipeline LastProducer ; FRDGBufferNumElementsCallback NumElementsCallback ; uint64 PendingCommitSize = 0 ; FRDGSubresourceState* State = nullptr ; FRDGSubresourceState* FirstState = nullptr ; FRDGSubresourceState* MergeState = nullptr ; # if RDG_ENABLE_DEBUG struct FRDGBufferDebugData* BufferDebugData = nullptr ; FRDGBufferDebugData&)",
    "insertText": "GetBufferDebugData()"
  },
  {
    "label": "GetAs()",
    "kind": "Method",
    "detail": "Function (} FRDGBuilder ; FRDGViewRegistry ; FRDGAllocator ; } ; template<ViewableResourceType> ViewableResourceType*)",
    "insertText": "GetAs(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetAs()",
    "kind": "Method",
    "detail": "Function (} template<ViewType> ViewType*)",
    "insertText": "GetAs(FRDGView* View)"
  },
  {
    "label": "GetAsBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBuffer*)",
    "insertText": "GetAsBuffer(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetAsTexture()",
    "kind": "Method",
    "detail": "Function (} FRDGTexture*)",
    "insertText": "GetAsTexture(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetAsBufferUAV()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferUAV*)",
    "insertText": "GetAsBufferUAV(FRDGView* View)"
  },
  {
    "label": "GetAsBufferSRV()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferSRV*)",
    "insertText": "GetAsBufferSRV(FRDGView* View)"
  },
  {
    "label": "GetAsTextureUAV()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureUAV*)",
    "insertText": "GetAsTextureUAV(FRDGView* View)"
  },
  {
    "label": "GetAsTextureSRV()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSRV*)",
    "insertText": "GetAsTextureSRV(FRDGView* View)"
  },
  {
    "label": "ExtractRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (} FGraphicsPipelineRenderTargetsInfo)",
    "insertText": "ExtractRenderTargetsInfo(const FRDGParameterStruct& ParameterStruct)"
  },
  {
    "label": "ExtractRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineRenderTargetsInfo)",
    "insertText": "ExtractRenderTargetsInfo(const FRenderTargetBindingSlots& RenderTargets)"
  }
]