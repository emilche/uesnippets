[
  {
    "label": "chkder()",
    "kind": "Method",
    "detail": "Function (# define chkder_log10e 0 . 4 3 4 2 9 4 4 8 1 9 0 3 2 5 1 8 2 7 6 5 # define chkder_factor 1 0 0 . namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "chkder(const Matrix< Scalar, Dynamic, 1 > &x, const Matrix< Scalar, Dynamic, 1 > &fvec, const Matrix< Scalar, Dynamic, Dynamic > &fjac, Matrix< Scalar, Dynamic, 1 > &xp, const Matrix< Scalar, Dynamic, 1 > &fvecp, int mode, Matrix< Scalar, Dynamic, 1 > &err)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; using std::log ; typedef DenseIndex Index ; const Scalar eps =)",
    "insertText": "sqrt(NumTraits<Scalar>::epsilon())"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (const Scalar epsf = chkder_factor* NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (const Scalar epslog = chkder_log10e*)",
    "insertText": "log(eps)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Scalar temp ; const Index m = fvec .)",
    "insertText": "size(), n = x.size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (xp .)",
    "insertText": "resize(n)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (temp = eps*)",
    "insertText": "abs(x[j])"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (xp [ j ] = x [ j ] + temp ; } } else { err .)",
    "insertText": "setZero(m)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (err + = temp* fjac .)",
    "insertText": "col(j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i = 0; i < m; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (temp = 1 . ;)",
    "insertText": "if(fvec[i] != 0. && fvecp[i] != 0. && abs(fvecp[i] - fvec[i]) >= epsf * abs(fvec[i])) temp = eps * abs((fvecp[i] - fvec[i]) / eps - err[i]) / (abs(fvec[i]) + abs(fvecp[i]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (err [ i ] = 1 . ;)",
    "insertText": "if(temp > NumTraits<Scalar>::epsilon() && temp < eps) err[i] = (chkder_log10e * log(temp) - epslog)"
  }
]