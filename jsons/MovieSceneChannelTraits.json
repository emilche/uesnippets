[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKeyDataOptimizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDataOptimizationParams"
  },
  {
    "label": "TMovieSceneChannelTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraitsBase"
  },
  {
    "label": "TMovieSceneChannelTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraits"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Optional . h \" # include \" MovieSceneChannelEditorData . h \" # include \" MovieSceneSection . h \" enum class EMovieSceneKeyInterpolation : uint8 ; struct FKeyDataOptimizationParams { float Tolerance = KINDA_SMALL_NUMBER ; bool bAutoSetInterpolation = false ; TRange<FFrameNumber> Range = TRange<FFrameNumber)",
    "insertText": "All()"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (FFrameRate DisplayRate ; } ; template<ChannelType> struct TMovieSceneChannelTraitsBase { enum { SupportsDefaults = true } ; # if WITH_EDITOR typedef void ExtendedEditorDataType ; # endif } ; template<ChannelType> struct TMovieSceneChannelTraits : TMovieSceneChannelTraitsBase<ChannelType> { } ; namespace UE { namespace MovieScene { template<ChannelType,ValueType> bool)",
    "insertText": "EvaluateChannel(const ChannelType* InChannel, FFrameTime InTime, ValueType& OutValue)"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> bool)",
    "insertText": "EvaluateChannel(const UMovieSceneSection* InSection, const ChannelType* InChannel, FFrameTime InTime, ValueType& OutValue)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> bool)",
    "insertText": "AssignValue(ChannelType* InChannel, FKeyHandle InKeyHandle, ValueType&& InValue)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto ChannelData = InChannel ->)",
    "insertText": "GetData()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32 ValueIndex = ChannelData .)",
    "insertText": "GetIndex(InKeyHandle)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (ChannelData .)",
    "insertText": "GetValues()[ValueIndex] = Forward<ValueType>(InValue)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (OutValue = ChannelData .)",
    "insertText": "GetValues()"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (int32 ExistingIndex = ChannelInterface .)",
    "insertText": "FindKey(InTime)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (FKeyHandle Handle =)",
    "insertText": "Invalid()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (Handle = ChannelInterface .)",
    "insertText": "GetHandle(ExistingIndex)"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(InChannel, Handle, Forward<ValueType>(Value))"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (} else { ExistingIndex = ChannelInterface .)",
    "insertText": "AddKey(InTime, Forward<ValueType>(Value))"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (} return Handle ; } template<ChannelType,ValueType> bool)",
    "insertText": "ValueExistsAtTime(const ChannelType* InChannel, FFrameNumber InTime, const ValueType& InValue)"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (ValueType ExistingValue { } ; return)",
    "insertText": "EvaluateChannel(InChannel, InTime, ExistingValue)"
  },
  {
    "label": "SetChannelDefault()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> TEnableIf<TMovieSceneChannelTraits<ChannelType>::SupportsDefaults>::Type)",
    "insertText": "SetChannelDefault(ChannelType* Channel, ValueType&& DefaultValue)"
  },
  {
    "label": "SetDefault()",
    "kind": "Method",
    "detail": "Function (Channel ->)",
    "insertText": "SetDefault(DefaultValue)"
  },
  {
    "label": "RemoveChannelDefault()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> TEnableIf<TMovieSceneChannelTraits<ChannelType>::SupportsDefaults>::Type)",
    "insertText": "RemoveChannelDefault(ChannelType* Channel)"
  },
  {
    "label": "RemoveDefault()",
    "kind": "Method",
    "detail": "Function (Channel ->)",
    "insertText": "RemoveDefault()"
  },
  {
    "label": "GetChannelDefault()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType> TEnableIf<TMovieSceneChannelTraits<ChannelType>::SupportsDefaults,bool>::Type)",
    "insertText": "GetChannelDefault(ChannelType* Channel, ValueType& OutDefaultValue)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (OutDefaultValue = Channel ->)",
    "insertText": "GetDefault().GetValue()"
  },
  {
    "label": "GetTimes()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = 0 ; int32 EndIndex = 0 ; { TArrayView<const FFrameNumber> Times = ChannelInterface .)",
    "insertText": "GetTimes()"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (StartIndex = Params . Range .)",
    "insertText": "GetLowerBound().IsClosed() ? Algo::LowerBound(Times, Params.Range.GetLowerBoundValue())"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (EndIndex = Params . Range .)",
    "insertText": "GetUpperBound().IsClosed() ? Algo::UpperBound(Times, Params.Range.GetUpperBoundValue()) : Times.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = StartIndex; Index < EndIndex && Index < ChannelInterface.GetTimes().Num(); ++Index)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (ChannelInterface .)",
    "insertText": "RemoveKey(Index)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (Index - - ; } else { ChannelInterface .)",
    "insertText": "AddKey(Time, MoveTemp(OriginalValue))"
  }
]