[
  {
    "label": "TSequenceNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSequenceNumber"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / IsSigned . h \" template<SIZE_T NumBits,SequenceType> class TSequenceNumber {)",
    "insertText": "static_assert(TIsSigned<SequenceType>::Value == false, \"The base type for sequence numbers must be unsigned\")"
  },
  {
    "label": "SequenceT()",
    "kind": "Method",
    "detail": "Function (public : using SequenceT = SequenceType ; using DifferenceT = int32 ; enum { SeqNumberBits = NumBits } ; enum { SeqNumberCount =)",
    "insertText": "SequenceT(1)"
  },
  {
    "label": "SequenceT()",
    "kind": "Method",
    "detail": "Function (enum { SeqNumberHalf =)",
    "insertText": "SequenceT(1) << (NumBits - 1)"
  },
  {
    "label": "TSequenceNumber()",
    "kind": "Method",
    "detail": "Function (enum { SeqNumberMax = SeqNumberCount - 1 u } ; enum { SeqNumberMask = SeqNumberMax } ;)",
    "insertText": "TSequenceNumber() : Value(0u)"
  },
  {
    "label": "TSequenceNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSequenceNumber(SequenceT ValueIn) : Value(ValueIn & SeqNumberMask)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} SequenceT)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TSequenceNumber& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSequenceNumber&)",
    "insertText": "operator()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment(1u)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (TSequenceNumber)",
    "insertText": "Tmp(*this)"
  },
  {
    "label": "TSequenceNumber()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "TSequenceNumber(Value + InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SequenceT Value ; bool)",
    "insertText": "operator(const TSequenceNumber& Lhs, const TSequenceNumber& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const TSequenceNumber)",
    "insertText": "operator(const TSequenceNumber& Lhs, SequenceType Rhs)"
  },
  {
    "label": "Diff()",
    "kind": "Method",
    "detail": "Function (} } ; template<SIZE_T NumBits,SequenceType> TSequenceNumber<NumBits,SequenceType>::DifferenceT TSequenceNumber<NumBits,SequenceType)",
    "insertText": "Diff(TSequenceNumber A, TSequenceNumber B)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T ShiftValue =)",
    "insertText": "sizeof(DifferenceT)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const SequenceT ValueA = A . Value ; const SequenceT ValueB = B . Value ;)",
    "insertText": "return(DifferenceT)((ValueA - ValueB) << ShiftValue)"
  }
]