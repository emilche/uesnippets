[
  {
    "label": "SparseSetValTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseSetValTraits"
  },
  {
    "label": "SparseSetValFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseSetValFunctor"
  },
  {
    "label": "SparseSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSet"
  },
  {
    "label": "getValIndex()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SPARSESET_H # define LLVM_ADT_SPARSESET_H # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / DataTypes . h \" # include<limits> namespace llvm { template<ValueT> struct SparseSetValTraits { unsigned)",
    "insertText": "getValIndex(const ValueT &Val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValueT,KeyFunctorT> struct SparseSetValFunctor { unsigned)",
    "insertText": "operator()(const ValueT &Val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,KeyFunctorT> struct SparseSetValFunctor<KeyT,KeyT,KeyFunctorT> { unsigned)",
    "insertText": "operator()(const KeyT &Key)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT,KeyFunctorT = llvm::identity<unsigned>,SparseT = uint8_t> class SparseSet {)",
    "insertText": "static_assert(std::numeric_limits<SparseT>::is_integer && !std::numeric_limits<SparseT>::is_signed, \"SparseT must be an unsigned integer type\")"
  },
  {
    "label": "SparseSet()",
    "kind": "Method",
    "detail": "Function (typedef KeyFunctorT::argument_type KeyT ; typedef SmallVector<ValueT,8> DenseT ; typedef unsigned size_type ; DenseT Dense ; SparseT* Sparse ; unsigned Universe ; KeyFunctorT KeyIndexOf ; SparseSetValFunctor<KeyT,ValueT,KeyFunctorT> ValIndexOf ;)",
    "insertText": "SparseSet(const SparseSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SparseSet&)",
    "insertText": "operator(const SparseSet&)"
  },
  {
    "label": "SparseSet()",
    "kind": "Method",
    "detail": "Function (public : typedef ValueT value_type ; typedef ValueT& reference ; typedef const ValueT& const_reference ; typedef ValueT* pointer ; typedef const ValueT* const_pointer ;)",
    "insertText": "SparseSet() : Sparse(nullptr), Universe(0)"
  },
  {
    "label": "SparseSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseSet()"
  },
  {
    "label": "setUniverse()",
    "kind": "Method",
    "detail": "Function (delete [ ] Sparse ; } void)",
    "insertText": "setUniverse(unsigned U)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(empty() && \"Can only resize universe on an empty map\")"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (delete [ ] Sparse ; Sparse = new SparseT [ U ] ;)",
    "insertText": "memset(Sparse, 0, U * sizeof(SparseT))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Universe = U ; } typedef DenseT::iterator iterator ; typedef DenseT::const_iterator const_iterator ; const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "findIndex(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < Universe && \"Key out of range\")"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const unsigned Stride = std::numeric_limits<SparseT)",
    "insertText": "max()"
  },
  {
    "label": "ValIndexOf()",
    "kind": "Method",
    "detail": "Function (const unsigned FoundIdx =)",
    "insertText": "ValIndexOf(Dense[i])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(FoundIdx < Universe && \"Invalid key in set. Did object mutate?\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const KeyT &Key)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const KeyT &Key)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(const ValueT &Val)"
  },
  {
    "label": "ValIndexOf()",
    "kind": "Method",
    "detail": "Function (unsigned Idx =)",
    "insertText": "ValIndexOf(Val)"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (iterator I =)",
    "insertText": "findIndex(Idx)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Dense .)",
    "insertText": "push_back(Val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT&)",
    "insertText": "operator(const KeyT &Key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(I - begin()) < size() && \"Invalid iterator\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (* I = Dense .)",
    "insertText": "back()"
  },
  {
    "label": "ValIndexOf()",
    "kind": "Method",
    "detail": "Function (unsigned BackIdx =)",
    "insertText": "ValIndexOf(Dense.back())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BackIdx < Universe && \"Invalid key in set. Did object mutate?\")"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (} Dense .)",
    "insertText": "pop_back()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator I =)",
    "insertText": "find(Key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(I)"
  }
]