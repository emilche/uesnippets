[
  {
    "label": "pcg_engine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pcg_engine"
  },
  {
    "label": "SeedSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeedSequence"
  },
  {
    "label": "CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharT"
  },
  {
    "label": "Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Traits"
  },
  {
    "label": "pcg128_params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pcg128_params"
  },
  {
    "label": "pcg_xsl_rr_128_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pcg_xsl_rr_128_64"
  },
  {
    "label": "pcg64_params",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pcg64_params"
  },
  {
    "label": "pcg_xsh_rr_64_32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pcg_xsh_rr_64_32"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_PCG_ENGINE_H_ # define ABSL_RANDOM_INTERNAL_PCG_ENGINE_H_ # include<type_traits> # include \" absl / base / config . h \" # include \" absl / meta / type_traits . h \" # include \" absl / numeric / bits . h \" # include \" absl / numeric / int128 . h \" # include \" absl / random / internal / fastmath . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<Params,Mix> class pcg_engine {)",
    "insertText": "static_assert(std::is_same<typename Params::state_type, typename Mix::state_type>::value, \"Class-template absl::pcg_engine must be parameterized by \" \"Params and Mix with identical state_type\")"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using params_type = Params ; using mix_type = Mix ; using state_type = Mix::state_type ; public : using result_type = Mix::result_type ;)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "pcg_engine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pcg_engine(uint64_t seed_value = 0)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(seed_value)"
  },
  {
    "label": "pcg_engine()",
    "kind": "Method",
    "detail": "Function (} template<class SeedSequence,= absl::enable_if_t<! std::is_same<SeedSequence,pcg_engine>::value>>)",
    "insertText": "pcg_engine(SeedSequence&& seq)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(seq)"
  },
  {
    "label": "pcg_engine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pcg_engine(const pcg_engine&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (pcg_engine&)",
    "insertText": "operator(const pcg_engine&)"
  },
  {
    "label": "pcg_engine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pcg_engine(pcg_engine&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (pcg_engine&)",
    "insertText": "operator(pcg_engine&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "lcg()",
    "kind": "Method",
    "detail": "Function (state_ =)",
    "insertText": "lcg(state_)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "seed(uint64_t seed_value = 0)"
  },
  {
    "label": "lcg()",
    "kind": "Method",
    "detail": "Function (state_type tmp = seed_value ; state_ =)",
    "insertText": "lcg(tmp + Params::increment())"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} template<class SeedSequence> absl::enable_if_t<! std::is_convertible<SeedSequence,uint64_t>::value,void>)",
    "insertText": "seed(SeedSequence&& seq)"
  },
  {
    "label": "reseed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reseed(seq)"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "discard(uint64_t count)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (state_ =)",
    "insertText": "advance(state_, count)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const pcg_engine& other)"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (} template<class CharT,class Traits>)",
    "insertText": "enable_if_t(sizeof(state_type) == 16), std::basic_ostream<CharT, Traits>&> operator<<( std::basic_ostream<CharT, Traits>& os, const pcg_engine& engine)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (random_internal::stream_u128_helper<state_type> helper ; helper .)",
    "insertText": "write(pcg_engine::params_type::multiplier(), os)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (os<<os .)",
    "insertText": "fill()"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (helper .)",
    "insertText": "write(pcg_engine::params_type::increment(), os)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (helper .)",
    "insertText": "write(engine.state_, os)"
  },
  {
    "label": "multiplier()",
    "kind": "Method",
    "detail": "Function (os<<pcg_engine::)",
    "insertText": "multiplier() << os.fill()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (os<<pcg_engine::)",
    "insertText": "increment() << os.fill()"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (os<<engine . state_ ; return os ; } template<class CharT,class Traits>)",
    "insertText": "enable_if_t(sizeof(state_type) == 16), std::basic_istream<CharT, Traits>&> operator>>( std::basic_istream<CharT, Traits>& is, pcg_engine& engine)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (random_internal::stream_u128_helper<state_type> helper ; auto mult = helper .)",
    "insertText": "read(is)"
  },
  {
    "label": "setstate()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "setstate(is.rdstate() | std::ios_base::failbit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!is.fail())"
  },
  {
    "label": "enable_if_t()",
    "kind": "Method",
    "detail": "Function (engine . state_ = tmp ; } return is ; } template<class CharT,class Traits>)",
    "insertText": "enable_if_t(sizeof(state_type) <= 8), std::basic_istream<CharT, Traits>&> operator>>( std::basic_istream<CharT, Traits>& is, pcg_engine& engine)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state_type mult { },inc { },tmp { } ; is>> mult>> inc>> tmp ;)",
    "insertText": "if(mult != pcg_engine::params_type::multiplier() || inc != pcg_engine::params_type::increment())"
  },
  {
    "label": "lcg()",
    "kind": "Method",
    "detail": "Function (engine . state_ = tmp ; } return is ; } private : state_type state_ ; state_type)",
    "insertText": "lcg(state_type s)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (} state_type)",
    "insertText": "advance(state_type s, uint64_t n)"
  },
  {
    "label": "multiplier()",
    "kind": "Method",
    "detail": "Function (state_type mult =)",
    "insertText": "multiplier()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (state_type inc =)",
    "insertText": "increment()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (state_type m = 1 ; state_type i = 0 ;)",
    "insertText": "while(n > 0)"
  },
  {
    "label": "inc()",
    "kind": "Method",
    "detail": "Function (m* = mult ; i = i* mult + inc ; })",
    "insertText": "inc(mult + 1)"
  },
  {
    "label": "reseed()",
    "kind": "Method",
    "detail": "Function (mult* = mult ; n>> = 1 ; } return m* s + i ; } template<class SeedSequence> void)",
    "insertText": "reseed(SeedSequence& seq)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using sequence_result_type = SeedSequence::result_type ; size_t kBufferSize =)",
    "insertText": "sizeof(state_type) / sizeof(sequence_result_type)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (sequence_result_type buffer [ kBufferSize ] ; seq .)",
    "insertText": "generate(std::begin(buffer), std::end(buffer))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (state_type tmp = buffer [ 0 ] ;)",
    "insertText": "for(size_t i = 1; i < kBufferSize; i++)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tmp(sizeof(sequence_result_type) * 8)"
  },
  {
    "label": "lcg()",
    "kind": "Method",
    "detail": "Function (tmp | = buffer [ i ] ; } state_ =)",
    "insertText": "lcg(tmp + params_type::increment())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct pcg_xsl_rr_128_64 { using state_type = absl::uint128 ; using result_type = uint64_t ; uint64_t)",
    "insertText": "operator()(state_type state)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t rotate = static_cast<)",
    "insertText": "uint64_t(state >> 122u)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (state ^ = state>> 6 4 ; uint64_t s = static_cast<)",
    "insertText": "uint64_t(state)"
  }
]