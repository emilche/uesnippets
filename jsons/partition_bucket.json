[
  {
    "label": "PartitionBucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionBucket"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_BUCKET_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_BUCKET_H_ # include<cstddef> # include<cstdint> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" namespace partition_alloc::internal { int kPartitionNumSystemPagesPerSlotSpanBits = 8 ;)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uint8_t ComputeSystemPagesPerSlotSpan(size_t slot_size, bool prefer_smaller_slot_spans)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool CompareSlotSpans(SlotSpanMetadata<ThreadSafe>* a, SlotSpanMetadata<ThreadSafe>* b)"
  },
  {
    "label": "kReciprocalMask()",
    "kind": "Method",
    "detail": "Function (template<bool thread_safe> struct PartitionBucket { SlotSpanMetadata<thread_safe>* active_slot_spans_head ; SlotSpanMetadata<thread_safe>* empty_slot_spans_head ; SlotSpanMetadata<thread_safe>* decommitted_slot_spans_head ; uint32_t slot_size ; uint32_t num_system_pages_per_slot_span : kPartitionNumSystemPagesPerSlotSpanBits ; uint32_t num_full_slot_spans : 2 4 ; uint64_t slot_size_reciprocal ; uint64_t kReciprocalShift = 4 2 ; uint64_t)",
    "insertText": "kReciprocalMask(1ull << kReciprocalShift)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (size_t kMaxSlotSpansToSort = 2 0 0 ;)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void Init(uint32_t new_slot_size)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) PA_NOINLINE uintptr_t SlowPathAlloc(PartitionRoot<thread_safe>* root, unsigned int flags, size_t raw_size, size_t slot_span_alignment, bool* is_already_zeroed) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "CanStoreRawSize()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "CanStoreRawSize()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((slot_size % SystemPageSize()) == 0)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(is_direct_mapped() || get_slots_per_span() == 1)"
  },
  {
    "label": "get_slots_per_span()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "get_slots_per_span()"
  },
  {
    "label": "GetSlotNumber()",
    "kind": "Method",
    "detail": "Function (size_t ret =)",
    "insertText": "GetSlotNumber(get_bytes_per_span())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(ret <= SlotSpanMetadata<thread_safe>::kMaxSlotsPerSlotSpan)"
  },
  {
    "label": "SetNewActiveSlotSpan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetNewActiveSlotSpan()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void MaintainActiveList()"
  },
  {
    "label": "GetSlotNumber()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE size_t)",
    "insertText": "GetSlotNumber(size_t offset_in_slot_span)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(offset_in_slot_span <= kMaxBucketed)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(slot_size <= kMaxBucketed)"
  },
  {
    "label": "offset_in_slot()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "offset_in_slot((offset_in_slot_span * slot_size_reciprocal) >> kReciprocalShift)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(offset_in_slot_span / slot_size == offset_in_slot)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void SortActiveSlotSpans()"
  },
  {
    "label": "AllocNewSuperPageSpanForGwpAsan()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "AllocNewSuperPageSpanForGwpAsan(PartitionRoot<thread_safe>* root, size_t super_page_count, unsigned int flags) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "InitializeSlotSpanForGwpAsan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSlotSpanForGwpAsan(SlotSpanMetadata<thread_safe>* slot_span)"
  },
  {
    "label": "AllocNewSuperPageSpan()",
    "kind": "Method",
    "detail": "Function (private : PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "AllocNewSuperPageSpan(PartitionRoot<thread_safe>* root, size_t super_page_count, unsigned int flags) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "AllocNewSlotSpan()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE SlotSpanMetadata<thread_safe>*)",
    "insertText": "AllocNewSlotSpan(PartitionRoot<thread_safe>* root, unsigned int flags, size_t slot_span_alignment) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "AllocNewSuperPage()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "AllocNewSuperPage(PartitionRoot<thread_safe>* root, unsigned int flags) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "InitializeSlotSpan()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "InitializeSlotSpan(SlotSpanMetadata<thread_safe>* slot_span)"
  },
  {
    "label": "InitializeSuperPage()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "InitializeSuperPage(PartitionRoot<thread_safe>* root, uintptr_t super_page, uintptr_t requested_address) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  },
  {
    "label": "ProvisionMoreSlotsAndAllocOne()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ProvisionMoreSlotsAndAllocOne(PartitionRoot<thread_safe>* root, SlotSpanMetadata<thread_safe>* slot_span) PA_EXCLUSIVE_LOCKS_REQUIRED(root->lock_)"
  }
]