[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "DxilWaveSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilWaveSize"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DxilFunctionProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilFunctionProps"
  },
  {
    "label": "NodeProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeProps"
  },
  {
    "label": "DxilWaveSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<cstring> # include<vector> # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / DXIL / DxilNodeProps . h \" # include \" llvm / ADT / StringRef . h \" namespace llvm { class Function ; class Constant ; } namespace hlsl { struct DxilWaveSize { unsigned Min = 0 ; unsigned Max = 0 ; unsigned Preferred = 0 ;)",
    "insertText": "DxilWaveSize()"
  },
  {
    "label": "DxilWaveSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DxilWaveSize(unsigned min, unsigned max = 0, unsigned preferred = 0) : Min(min), Max(max), Preferred(preferred)"
  },
  {
    "label": "DxilWaveSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DxilWaveSize(const DxilWaveSize &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DxilWaveSize&)",
    "insertText": "operator(const DxilWaveSize &other)"
  },
  {
    "label": "IsValidValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValue(unsigned Value)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} enum class ValidationResult { Success,InvalidMin,InvalidMax,InvalidPreferred,MaxOrPreferredWhenUndefined,PreferredWhenNoRange,MaxEqualsMin,MaxLessThanMin,PreferredOutOfRange,NoRangeOrMin,} ; ValidationResult)",
    "insertText": "Validate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!IsValidValue(Max))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return ValidationResult::Success ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsDefined()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefined()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&ShaderProps, 0, sizeof(ShaderProps))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (shaderKind = DXIL::ShaderKind::Invalid ; NodeShaderID = { } ; NodeShaderSharedInput = { } ;)",
    "insertText": "memset(&Node, 0, sizeof(Node))"
  },
  {
    "label": "SetSerializedRootSignature()",
    "kind": "Method",
    "detail": "Function (Node . LaunchType = DXIL::NodeLaunchType::Invalid ; Node . LocalRootArgumentsTableIndex = - 1 ; } union { struct { DXIL::InputPrimitive inputPrimitive ; unsigned maxVertexCount ; unsigned instanceCount ; DXIL::PrimitiveTopology streamPrimitiveTopologies [ DXIL::kNumOutputStreams ] ; } GS ; struct { llvm::Function* patchConstantFunc ; DXIL::TessellatorDomain domain ; DXIL::TessellatorPartitioning partition ; DXIL::TessellatorOutputPrimitive outputPrimitive ; unsigned inputControlPoints ; unsigned outputControlPoints ; float maxTessFactor ; } HS ; struct { DXIL::TessellatorDomain domain ; unsigned inputControlPoints ; } DS ; struct { llvm::Constant* clipPlanes [ DXIL::kNumClipPlanes ] ; } VS ; struct { bool EarlyDepthStencil ; } PS ; struct { union { unsigned payloadSizeInBytes ; unsigned paramSizeInBytes ; } ; unsigned attributeSizeInBytes ; } Ray ; struct { unsigned maxVertexCount ; unsigned maxPrimitiveCount ; DXIL::MeshOutputTopology outputTopology ; unsigned payloadSizeInBytes ; } MS ; struct { unsigned payloadSizeInBytes ; } AS ; } ShaderProps ; unsigned numThreads [ 3 ] ; struct NodeProps { DXIL::NodeLaunchType LaunchType = DXIL::NodeLaunchType::Invalid ; bool IsProgramEntry ; int LocalRootArgumentsTableIndex ; unsigned DispatchGrid [ 3 ] ; unsigned MaxDispatchGrid [ 3 ] ; unsigned MaxRecursionDepth ; } Node ; DXIL::ShaderKind shaderKind ; NodeID NodeShaderID ; NodeID NodeShaderSharedInput ; std::vector<NodeIOProperties> InputNodes ; std::vector<NodeIOProperties> OutputNodes ; DxilWaveSize WaveSize ; std::vector<uint8_t> serializedRootSignature ; void)",
    "insertText": "SetSerializedRootSignature(const uint8_t *pData, unsigned size)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (serializedRootSignature .)",
    "insertText": "assign(pData, pData + size)"
  },
  {
    "label": "IsPS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPS()"
  },
  {
    "label": "IsRayGeneration()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRayGeneration()"
  },
  {
    "label": "IsMS()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMS()"
  }
]