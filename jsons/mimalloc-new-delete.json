[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef MIMALLOC_NEW_DELETE_H # define MIMALLOC_NEW_DELETE_H # if)",
    "insertText": "defined(__cplusplus) #include <new> #include <mimalloc.h> void operator delete(void* p)"
  },
  {
    "label": "mi_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free(p)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} ; void operator)",
    "insertText": "delete(void* p)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} ; void* operator)",
    "insertText": "new(std::size_t n) noexcept(false)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(std::size_t n, const std::nothrow_t& tag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(__cplusplus >= 201402L || _MSC_VER >= 1916) void operator delete (void* p, std::size_t n)"
  },
  {
    "label": "mi_free_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free_size(p,n)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} ; void operator)",
    "insertText": "delete(void* p, std::size_t n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; # endif #)",
    "insertText": "if(__cplusplus > 201402L || defined(__cpp_aligned_new)) void operator delete (void* p, std::align_val_t al)"
  },
  {
    "label": "mi_free_aligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free_aligned(p, static_cast<size_t>(al))"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* p, std::align_val_t al)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* p, std::size_t n, std::align_val_t al)"
  },
  {
    "label": "mi_free_size_aligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free_size_aligned(p, n, static_cast<size_t>(al))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} ; void* operator)",
    "insertText": "new(std::size_t n, std::align_val_t al) noexcept(false)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(std::size_t n, std::align_val_t al, const std::nothrow_t&)"
  }
]