[
  {
    "label": "TWeakPtrVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakPtrVariant"
  },
  {
    "label": "TStrongPtrVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStrongPtrVariant"
  },
  {
    "label": "TPtrVariantBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPtrVariantBase"
  },
  {
    "label": "FObjectPtrWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtrWrapper"
  },
  {
    "label": "FObjectPtrWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / TVariant . h \" # include \" Templates / Requires . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / StrongObjectPtr . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UnrealTypeTraits . h \" # include \" UnrealTemplate . h \" # include<type_traits> template<BaseType> struct TWeakPtrVariant ; template<BaseType> struct TStrongPtrVariant ; namespace UE::Core::Private { template<BaseType,bool bIsStrong> struct TPtrVariantBase { struct TWeakPtrVariant<BaseType> ; struct TStrongPtrVariant<BaseType> ; using SharedType = std::conditional_t<bIsStrong,TSharedPtr<BaseType>,TWeakPtr<BaseType>> ; struct FObjectPtrWrapper { using ObjectPtrType = std::conditional_t<bIsStrong,TStrongObjectPtr<const UObject>,TWeakObjectPtr<const UObject>> ;)",
    "insertText": "FObjectPtrWrapper(const UObject* InObjectPtr, BaseType* const InCastedPtr) : ObjectPtr(InObjectPtr) , CastedPtr(InCastedPtr)"
  },
  {
    "label": "TPtrVariantBase()",
    "kind": "Method",
    "detail": "Function (} ObjectPtrType ObjectPtr ; BaseType* CastedPtr = nullptr ; } ; public :)",
    "insertText": "TPtrVariantBase()"
  },
  {
    "label": "TPtrVariantBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPtrVariantBase(TYPE_OF_NULLPTR)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<DerivedType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<DerivedType*, BaseType*> && (std::is_base_of_v<UObject, DerivedType> || IsDerivedFromSharedFromThis<DerivedType>())) > constexpr TPtrVariantBase(DerivedType* InDerived)"
  },
  {
    "label": "FObjectPtrWrapper()",
    "kind": "Method",
    "detail": "Function (PtrVariant . template Emplace<)",
    "insertText": "FObjectPtrWrapper(Cast<const UObject>(InDerived), Cast<BaseType>(InDerived))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else { if)",
    "insertText": "constexpr(bIsStrong)"
  },
  {
    "label": "SharedType()",
    "kind": "Method",
    "detail": "Function (PtrVariant . template Emplace<)",
    "insertText": "SharedType(StaticCastSharedRef<BaseType>(StaticCastSharedRef<DerivedType>(InDerived->AsShared())).ToSharedPtr())"
  },
  {
    "label": "SharedType()",
    "kind": "Method",
    "detail": "Function (} else { PtrVariant . template Emplace<)",
    "insertText": "SharedType(StaticCastSharedRef<BaseType>(StaticCastSharedRef<DerivedType>(InDerived->AsShared())).ToWeakPtr())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } TPtrVariantBase&)",
    "insertText": "operator(TYPE_OF_NULLPTR)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit([](auto& StoredValue) { using StoredValueType = std::decay_t<decltype(StoredValue)>; if constexpr (std::is_same_v<StoredValueType, SharedType>) { StoredValue.Reset(); } else { StoredValue.ObjectPtr.Reset(); } }, PtrVariant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} private : TVariant<SharedType,FObjectPtrWrapper> PtrVariant ; } ; } template<LhsType,bool bLhsStrength,RhsType,bool bRhsStrength,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false > bool operator==(const UE::Core::Private::TPtrVariantBase<LhsType, bLhsStrength>& Lhs, const UE::Core::Private::TPtrVariantBase<RhsType, bRhsStrength>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsType,bool bLhsStrength,RhsType,bool bRhsStrength,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false> bool operator!=(const UE::Core::Private::TPtrVariantBase<LhsType, bLhsStrength>& Lhs, const UE::Core::Private::TPtrVariantBase<RhsType, bRhsStrength>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsType,RhsType,bool bRhsStrength,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false> bool operator==(LhsType* Lhs, const UE::Core::Private::TPtrVariantBase<RhsType, bRhsStrength>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsType,RhsType,bool bRhsStrength,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false> bool operator!=(LhsType* Lhs, const UE::Core::Private::TPtrVariantBase<RhsType, bRhsStrength>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsType,bool bLhsStrength,RhsType,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false> bool operator==(const UE::Core::Private::TPtrVariantBase<LhsType, bLhsStrength>& Lhs, RhsType* Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsType,bool bLhsStrength,RhsType,)",
    "insertText": "decltype((LhsType*)nullptr == (RhsType*)nullptr) = false> bool operator!=(const UE::Core::Private::TPtrVariantBase<LhsType, bLhsStrength>& Lhs, RhsType* Rhs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<BaseType> struct TStrongPtrVariant : public UE::Core::Private::TPtrVariantBase<BaseType,true> { using Super = UE::Core::Private::TPtrVariantBase<BaseType,true> ; using Super::Super ; BaseType*)",
    "insertText": "Get()"
  },
  {
    "label": "ToWeakVariant()",
    "kind": "Method",
    "detail": "Function (} TWeakPtrVariant<BaseType>)",
    "insertText": "ToWeakVariant()"
  },
  {
    "label": "BaseType()",
    "kind": "Method",
    "detail": "Function (} else { return TWeakPtrVariant<)",
    "insertText": "BaseType()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (} } } ; template<BaseType> struct TWeakPtrVariant : public UE::Core::Private::TPtrVariantBase<BaseType,false> { using Super = UE::Core::Private::TPtrVariantBase<BaseType,false> ; using Super::Super ; TStrongPtrVariant<BaseType>)",
    "insertText": "Pin()"
  }
]