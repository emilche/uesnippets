[
  {
    "label": "FMemoryReaderView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReaderView"
  },
  {
    "label": "FMemoryWriter64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryWriter64"
  },
  {
    "label": "FShaderCodeResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeResource"
  },
  {
    "label": "FCacheRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecord"
  },
  {
    "label": "FCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheKey"
  },
  {
    "label": "FShaderSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderSerializeContext"
  },
  {
    "label": "FShaderCacheSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCacheSerializeContext"
  },
  {
    "label": "FShaderCacheSaveContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCacheSaveContext"
  },
  {
    "label": "FShaderCacheLoadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCacheLoadContext"
  },
  {
    "label": "FShaderSerializeContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Memory / CompositeBuffer . h \" # include \" Memory / SharedBuffer . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FMemoryReaderView ; class FMemoryWriter64 ; class FShaderCodeResource ; # if WITH_EDITOR namespace UE::DerivedData { class FCacheRecord ; struct FCacheKey ; } # endif struct FShaderSerializeContext {)",
    "insertText": "FShaderSerializeContext()"
  },
  {
    "label": "FShaderSerializeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderSerializeContext(FArchive& InArchive) : Ar(&InArchive)"
  },
  {
    "label": "EnableCustomCodeSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableCustomCodeSerialize()"
  },
  {
    "label": "ReserveCode()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ReserveCode(int32 Count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; FArchive* Ar = nullptr ; bool bLoadingCooked = false ; FName SerializingAsset = NAME_None ; TFunction<)",
    "insertText": "void(int32)"
  },
  {
    "label": "GetMainArchive()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "GetMainArchive()"
  },
  {
    "label": "FShaderCacheSerializeContext()",
    "kind": "Method",
    "detail": "Function (ShaderCode = OwnedShaderCode ; } ~)",
    "insertText": "FShaderCacheSerializeContext()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 Size = 0 u ;)",
    "insertText": "if(ShaderObjectData)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (Size + = ShaderObjectData .)",
    "insertText": "GetSize()"
  },
  {
    "label": "MoveCode()",
    "kind": "Method",
    "detail": "Function (} } return Size ; } void)",
    "insertText": "MoveCode(TArray<FCompositeBuffer>& TargetCode)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TargetCode =)",
    "insertText": "MoveTemp(OwnedShaderCode)"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (ShaderCode = TargetCode ; } bool)",
    "insertText": "HasData()"
  },
  {
    "label": "FShaderCacheSaveContext()",
    "kind": "Method",
    "detail": "Function (} } ; struct FShaderCacheSaveContext : public FShaderCacheSerializeContext {)",
    "insertText": "FShaderCacheSaveContext()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "SerializeCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCode(FShaderCodeResource& Resource, int32 Index)"
  },
  {
    "label": "BuildCacheRecord()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UE::DerivedData::FCacheRecord)",
    "insertText": "BuildCacheRecord(const UE::DerivedData::FCacheKey& Key)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Reset()"
  },
  {
    "label": "FShaderCacheLoadContext()",
    "kind": "Method",
    "detail": "Function (TArray64<uint8> ShaderObjectRawData ; TUniquePtr<FMemoryWriter64> Writer ; } ; struct FShaderCacheLoadContext : public FShaderCacheSerializeContext {)",
    "insertText": "FShaderCacheLoadContext()"
  },
  {
    "label": "FShaderCacheLoadContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCacheLoadContext(FSharedBuffer ShaderObjectData, TArrayView<FCompositeBuffer> CodeBuffers)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FSharedBuffer ShaderObjectData, TArrayView<FCompositeBuffer> CodeBuffers)"
  },
  {
    "label": "Reuse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reuse()"
  },
  {
    "label": "ReadFromRecord()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ReadFromRecord(const UE::DerivedData::FCacheRecord& CacheRecord, bool bIsPersistent = false)"
  }
]