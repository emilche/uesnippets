[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__proxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__proxy"
  },
  {
    "label": "istreambuf_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "istreambuf_iterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_ISTREAMBUF_ITERATOR_H # define _LIBCPP___ITERATOR_ISTREAMBUF_ITERATOR_H # include<__config> # include<__iterator / default_sentinel . h> # include<__iterator / iterator . h> # include<__iterator / iterator_traits . h> # include<iosfwd> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_SUPPRESS_DEPRECATED_PUSH template<class _CharT, class _Traits> class _LIBCPP_TEMPLATE_VIS istreambuf_iterator #if _LIBCPP_STD_VER <= 14 || !defined(_LIBCPP_ABI_NO_ITERATOR_BASES)"
  },
  {
    "label": "__proxy()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP public : typedef input_iterator_tag iterator_category ; typedef _CharT value_type ; typedef _Traits::off_type difference_type ; typedef _CharT* pointer ; typedef _CharT reference ; typedef _CharT char_type ; typedef _Traits traits_type ; typedef _Traits::int_type int_type ; typedef basic_streambuf<_CharT,_Traits> streambuf_type ; typedef basic_istream<_CharT,_Traits> istream_type ; private : streambuf_type* __sbuf_ ; class __proxy { char_type __keep_ ; streambuf_type* __sbuf_ ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__proxy(char_type __c, streambuf_type* __s) : __keep_(__c), __sbuf_(__s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class istreambuf_iterator ; public : _LIBCPP_INLINE_VISIBILITY char_type)",
    "insertText": "operator()"
  },
  {
    "label": "istreambuf_iterator()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7 _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "istreambuf_iterator(default_sentinel_t) noexcept : istreambuf_iterator()"
  },
  {
    "label": "istreambuf_iterator()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "istreambuf_iterator(istream_type& __s) _NOEXCEPT : __sbuf_(__s.rdbuf())"
  },
  {
    "label": "istreambuf_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "istreambuf_iterator(streambuf_type* __s) _NOEXCEPT : __sbuf_(__s)"
  },
  {
    "label": "istreambuf_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "istreambuf_iterator(const __proxy& __p) _NOEXCEPT : __sbuf_(__p.__sbuf_)"
  },
  {
    "label": "sbumpc()",
    "kind": "Method",
    "detail": "Function (__sbuf_ ->)",
    "insertText": "sbumpc()"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "equal(const istreambuf_iterator& __b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7 _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const istreambuf_iterator& __i, default_sentinel_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<class _CharT,class _Traits> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const istreambuf_iterator<_CharT,_Traits>& __a, const istreambuf_iterator<_CharT,_Traits>& __b)"
  }
]