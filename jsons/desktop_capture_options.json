[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_ # include \" api / scoped_refptr . h \" # include \" rtc_base / system / rtc_export . h \" # if)",
    "insertText": "defined(WEBRTC_USE_X11) #include \"modules/desktop_capture/linux/x11/shared_x_display.h\" #endif #if defined(WEBRTC_USE_PIPEWIRE) #include \"modules/desktop_capture/linux/wayland/shared_screencast_stream.h\" #endif #if defined(WEBRTC_MAC) && !defined(WEBRTC_IOS)"
  },
  {
    "label": "CreateDefault()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT DesktopCaptureOptions { public : DesktopCaptureOptions)",
    "insertText": "CreateDefault()"
  },
  {
    "label": "DesktopCaptureOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopCaptureOptions()"
  },
  {
    "label": "DesktopCaptureOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopCaptureOptions(const DesktopCaptureOptions& options)"
  },
  {
    "label": "DesktopCaptureOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopCaptureOptions(DesktopCaptureOptions&& options)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopCaptureOptions&)",
    "insertText": "operator(const DesktopCaptureOptions& options)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopCaptureOptions&)",
    "insertText": "operator(DesktopCaptureOptions&& options)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_USE_X11) const rtc::scoped_refptr<SharedXDisplay>& x_display()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (x_display_ = x_display ; } # endif # if)",
    "insertText": "defined(WEBRTC_MAC) && !defined(WEBRTC_IOS) const rtc::scoped_refptr<DesktopConfigurationMonitor>& configuration_monitor()"
  },
  {
    "label": "allow_iosurface()",
    "kind": "Method",
    "detail": "Function (configuration_monitor_ = m ; } bool)",
    "insertText": "allow_iosurface()"
  },
  {
    "label": "full_screen_window_detector()",
    "kind": "Method",
    "detail": "Function (allow_iosurface_ = allow ; } # endif const rtc::scoped_refptr<FullScreenWindowDetector>&)",
    "insertText": "full_screen_window_detector()"
  },
  {
    "label": "use_update_notifications()",
    "kind": "Method",
    "detail": "Function (full_screen_window_detector_ = detector ; } bool)",
    "insertText": "use_update_notifications()"
  },
  {
    "label": "disable_effects()",
    "kind": "Method",
    "detail": "Function (use_update_notifications_ = use_update_notifications ; } bool)",
    "insertText": "disable_effects()"
  },
  {
    "label": "detect_updated_region()",
    "kind": "Method",
    "detail": "Function (disable_effects_ = disable_effects ; } bool)",
    "insertText": "detect_updated_region()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (detect_updated_region_ = detect_updated_region ; } # if)",
    "insertText": "defined(WEBRTC_WIN) bool enumerate_current_process_windows()"
  },
  {
    "label": "allow_use_magnification_api()",
    "kind": "Method",
    "detail": "Function (enumerate_current_process_windows_ = enumerate_current_process_windows ; } bool)",
    "insertText": "allow_use_magnification_api()"
  },
  {
    "label": "allow_directx_capturer()",
    "kind": "Method",
    "detail": "Function (allow_use_magnification_api_ = allow ; } bool)",
    "insertText": "allow_directx_capturer()"
  },
  {
    "label": "allow_cropping_window_capturer()",
    "kind": "Method",
    "detail": "Function (allow_directx_capturer_ = enabled ; } bool)",
    "insertText": "allow_cropping_window_capturer()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (allow_cropping_window_capturer_ = allow ; } # if)",
    "insertText": "defined(RTC_ENABLE_WIN_WGC) bool allow_wgc_capturer()"
  },
  {
    "label": "allow_wgc_capturer_fallback()",
    "kind": "Method",
    "detail": "Function (allow_wgc_capturer_ = allow ; } bool)",
    "insertText": "allow_wgc_capturer_fallback()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (allow_wgc_capturer_fallback_ = allow ; } # endif # endif # if)",
    "insertText": "defined(WEBRTC_USE_PIPEWIRE) bool allow_pipewire()"
  },
  {
    "label": "screencast_stream()",
    "kind": "Method",
    "detail": "Function (allow_pipewire_ = allow ; } const rtc::scoped_refptr<SharedScreenCastStream>&)",
    "insertText": "screencast_stream()"
  },
  {
    "label": "set_width()",
    "kind": "Method",
    "detail": "Function (screencast_stream_ = stream ; } void)",
    "insertText": "set_width(uint32_t width)"
  },
  {
    "label": "get_width()",
    "kind": "Method",
    "detail": "Function (width_ = width ; } uint32_t)",
    "insertText": "get_width()"
  },
  {
    "label": "get_height()",
    "kind": "Method",
    "detail": "Function (height_ = height ; } uint32_t)",
    "insertText": "get_height()"
  },
  {
    "label": "pipewire_use_damage_region()",
    "kind": "Method",
    "detail": "Function (pipewire_use_damage_region_ = use_damage_regions ; } bool)",
    "insertText": "pipewire_use_damage_region()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_USE_PIPEWIRE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_MAC) && !defined(WEBRTC_IOS)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (bool allow_iosurface_ = false ; # endif rtc::scoped_refptr<FullScreenWindowDetector> full_screen_window_detector_ ; # if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (bool allow_use_magnification_api_ = false ; bool allow_directx_capturer_ = false ; bool allow_cropping_window_capturer_ = false ; # if)",
    "insertText": "defined(RTC_ENABLE_WIN_WGC)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (bool allow_wgc_capturer_fallback_ = false ; # endif # endif # if)",
    "insertText": "defined(WEBRTC_USE_X11)"
  }
]