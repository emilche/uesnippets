[
  {
    "label": "LogStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogStreamer"
  },
  {
    "label": "LogStreamer()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_LOG_STREAMER_H_ # define ABSL_LOG_LOG_STREAMER_H_ # include<ios> # include<memory> # include<ostream> # include<string> # include<utility> # include \" absl / base / config . h \" # include \" absl / base / log_severity . h \" # include \" absl / log / log . h \" # include \" absl / strings / internal / ostringstream . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN class LogStreamer final { public :)",
    "insertText": "LogStreamer(absl::LogSeverity severity, absl::string_view file, int line) : severity_(severity), line_(line), file_(file), stream_(absl::in_place, &buf_)"
  },
  {
    "label": "setf()",
    "kind": "Method",
    "detail": "Function (stream_ ->)",
    "insertText": "setf(std::ios_base::showbase | std::ios_base::boolalpha)"
  },
  {
    "label": "LogStreamer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LogStreamer(LogStreamer&& that) noexcept : severity_(that.severity_), line_(that.line_), file_(std::move(that.file_)), buf_(std::move(that.buf_)), stream_(std::move(that.stream_))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (that . stream_ .)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LogStreamer&)",
    "insertText": "operator(LogStreamer&& that)"
  },
  {
    "label": "LOG_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LOG_IF(LEVEL(severity_), stream_).AtLocation(file_, line_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (severity_ = that . severity_ ; file_ =)",
    "insertText": "move(that.file_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (line_ = that . line_ ; buf_ =)",
    "insertText": "move(that.buf_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (stream_ =)",
    "insertText": "move(that.stream_)"
  },
  {
    "label": "LOG_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LOG_IF(LEVEL(severity_), stream_.has_value()).AtLocation(file_, line_)"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "stream()"
  },
  {
    "label": "LogWarningStreamer()",
    "kind": "Method",
    "detail": "Function (} LogStreamer)",
    "insertText": "LogWarningStreamer(absl::string_view file, int line)"
  },
  {
    "label": "LogErrorStreamer()",
    "kind": "Method",
    "detail": "Function (} LogStreamer)",
    "insertText": "LogErrorStreamer(absl::string_view file, int line)"
  },
  {
    "label": "LogFatalStreamer()",
    "kind": "Method",
    "detail": "Function (} LogStreamer)",
    "insertText": "LogFatalStreamer(absl::string_view file, int line)"
  }
]