[
  {
    "label": "FPerParticleGravity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleGravity"
  },
  {
    "label": "FChaosDebugDrawSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosDebugDrawSettings"
  },
  {
    "label": "FPBDIslandMergeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandMergeSet"
  },
  {
    "label": "FPBDIslandParticle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandParticle"
  },
  {
    "label": "FPBDIslandManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandManager"
  },
  {
    "label": "FPBDIsland",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIsland"
  },
  {
    "label": "FPBDIslandConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandConstraint"
  },
  {
    "label": "FPBDIslandGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDIslandGroupManager"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "FPBDIslandParticle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Framework / PoolBackedArray . h \" # include \" Chaos / Framework / Handles . h \" # include \" Chaos / Island / IslandManagerFwd . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Evolution / IterationSettings . h \" # include \" Chaos / Serializable . h \" namespace Chaos { class FPerParticleGravity ; } namespace Chaos::DebugDraw { struct FChaosDebugDrawSettings ; } namespace Chaos::Private { class FPBDIslandMergeSet ; class FPBDIslandParticle { public :)",
    "insertText": "FPBDIslandParticle()"
  },
  {
    "label": "FPBDIslandParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDIslandParticle(FGeometryParticleHandle* InParticle)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (FGeometryParticleHandle*)",
    "insertText": "GetParticle()"
  },
  {
    "label": "Reuse()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = InIndex ; } void)",
    "insertText": "Reuse(FGeometryParticleHandle* InParticle)"
  },
  {
    "label": "Trash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trash()"
  },
  {
    "label": "GetIslandId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIslandId()"
  },
  {
    "label": "GetIterationSettings()",
    "kind": "Method",
    "detail": "Function (FIterationSettings)",
    "insertText": "GetIterationSettings()"
  },
  {
    "label": "SetIterationSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIterationSettings(const FIterationSettings& InIterations)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "CastToRigidParticle()->SetIterationSettings(InIterations)"
  },
  {
    "label": "FFlags()",
    "kind": "Method",
    "detail": "Function (} private : class FPBDIslandManager ; class FPBDIsland ; union FFlags { public :)",
    "insertText": "FFlags() : Bits(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FPBDIslandConstraint()",
    "kind": "Method",
    "detail": "Function (Bits = 0 ; } struct { uint32 bIsDynamic : 1 ; uint32 bIsSleeping : 1 ; uint32 bIsMoving : 1 ; uint32 bNeedsResim : 1 ; } ; private : uint32 Bits ; } ; FGeometryParticleHandle* Particle = nullptr ; FPBDIsland* Island = nullptr ; TArray<FPBDIslandConstraint*> Edges ; int32 VisitEpoch = INDEX_NONE ; int32 ArrayIndex = INDEX_NONE ; int32 IslandArrayIndex = INDEX_NONE ; FFlags Flags ; int32 Level = 0 ; FRealSingle SleepLinearThresholdSq = 0 ; FRealSingle SleepAngularThresholdSq = 0 ; int32 SleepCounterThreshold = 0 ; FRealSingle DisableLinearThresholdSq = 0 ; FRealSingle DisableAngularThresholdSq = 0 ; int32 ResimFrame = INDEX_NONE ; } ; class FPBDIslandConstraint { public :)",
    "insertText": "FPBDIslandConstraint()"
  },
  {
    "label": "FPBDIslandConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDIslandConstraint(const int32 InContainerId, FConstraintHandle* InConstraint)"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (FConstraintHandle*)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "GetArrayIndex()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "GetArrayIndex()"
  },
  {
    "label": "Reuse()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = InIndex ; } void)",
    "insertText": "Reuse(const int32 InContainerId, FConstraintHandle* InConstraint)"
  },
  {
    "label": "FPBDIsland()",
    "kind": "Method",
    "detail": "Function (Bits = 0 ; } struct { uint32 bIsSleeping : 1 ; } ; private : uint32 Bits ; } ; FConstraintHandle* Constraint = nullptr ; FPBDIsland* Island = nullptr ; FPBDIslandParticle* Nodes [ 2 ] = { nullptr,nullptr } ; int32 VisitEpoch = INDEX_NONE ; int32 ArrayIndex = INDEX_NONE ; int32 NodeArrayIndices [ 2 ] = { INDEX_NONE,INDEX_NONE } ; int32 ContainerIndex = INDEX_NONE ; int32 IslandArrayIndex = INDEX_NONE ; int32 Level = 0 ; uint32 LevelSortKey = 0 ; FFlags Flags ; } ; class FPBDIsland { public :)",
    "insertText": "FPBDIsland()"
  },
  {
    "label": "GetNumParticles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumParticles()"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} const FPBDIslandParticle*)",
    "insertText": "GetNode(const int32 NodeIndex)"
  },
  {
    "label": "IsSleepAllowed()",
    "kind": "Method",
    "detail": "Function (SleepCounter = InSleepCounter ; } bool)",
    "insertText": "IsSleepAllowed()"
  },
  {
    "label": "GetResimFrame()",
    "kind": "Method",
    "detail": "Function (Flags . bNeedsResim = bInNeedsResim ; } int32)",
    "insertText": "GetResimFrame()"
  },
  {
    "label": "IsUsingCache()",
    "kind": "Method",
    "detail": "Function (ResimFrame = InResimFrame ; } bool)",
    "insertText": "IsUsingCache()"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (Flags . bIsUsingCache = bInIsUsingCache ; } TArrayView<FPBDIslandParticle*>)",
    "insertText": "GetParticles()"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FPBDIslandConstraint*>)",
    "insertText": "GetConstraints(const int32 ContainerId)"
  },
  {
    "label": "Reuse()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = InIndex ; } void)",
    "insertText": "Reuse()"
  },
  {
    "label": "UpdateSyncState()",
    "kind": "Method",
    "detail": "Function (Iterations = InIterations ; } private : class FPBDIslandManager ; void)",
    "insertText": "UpdateSyncState()"
  },
  {
    "label": "FPBDIslandMergeSet()",
    "kind": "Method",
    "detail": "Function (Bits = 0 ; } struct { uint32 bItemsAdded : 1 ; uint32 bItemsRemoved : 1 ; uint32 bIsSleepAllowed : 1 ; uint32 bIsSleeping : 1 ; uint32 bWasSleeping : 1 ; uint32 bCheckSleep : 1 ; uint32 bNeedsResim : 1 ; uint32 bIsUsingCache : 1 ; } ; private : uint32 Bits ; } ; TArray<FPBDIslandParticle*> Nodes ; TConstraintTypeArray<TArray<FPBDIslandConstraint*>> ContainerEdges ; FPBDIslandMergeSet* MergeSet = nullptr ; int32 MergeSetIslandIndex = INDEX_NONE ; int32 ArrayIndex = INDEX_NONE ; int32 NumEdges = 0 ; int32 SleepCounter = 0 ; int32 DisableCounter = 0 ; int32 ResimFrame = INDEX_NONE ; FFlags Flags ; FIterationSettings Iterations ; } ; class FPBDIslandMergeSet { public :)",
    "insertText": "FPBDIslandMergeSet()"
  },
  {
    "label": "FPBDIslandManager()",
    "kind": "Method",
    "detail": "Function (private : class FPBDIslandManager ; TArray<FPBDIsland*> Islands ; int32 NumEdges = 0 ; int32 ArrayIndex = INDEX_NONE ; } ; class FPBDIslandManager { public :)",
    "insertText": "FPBDIslandManager(FPBDRigidsSOAs& InParticles)"
  },
  {
    "label": "FPBDIslandManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDIslandManager()"
  },
  {
    "label": "GetNumConstraintContainers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumConstraintContainers()"
  },
  {
    "label": "AddParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "RemoveParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "ReserveParticles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReserveParticles(const int32 InNumParticles)"
  },
  {
    "label": "UpdateParticleMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParticleMaterial(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "GetParticleLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleLevel(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "WakeParticleIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeParticleIslands(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "SleepParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraint(const int32 ContainerId, FConstraintHandle* Constraint, const TVec2<FGeometryParticleHandle*>& ConstrainedParticles)"
  },
  {
    "label": "AddContainerConstraints()",
    "kind": "Method",
    "detail": "Function (template<ConstraintContainerType> void)",
    "insertText": "AddContainerConstraints(ConstraintContainerType& ConstraintContainer)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(FConstraintHandle* ConstraintHandle)"
  },
  {
    "label": "RemoveParticleConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParticleConstraints(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "RemoveParticleContainerConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParticleContainerConstraints(FGeometryParticleHandle* Particle, const int32 ContainerId)"
  },
  {
    "label": "RemoveContainerConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveContainerConstraints(const int32 ContainerId)"
  },
  {
    "label": "WakeConstraintIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeConstraintIsland(FConstraintHandle* Constraint)"
  },
  {
    "label": "GetNumIslands()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumIslands()"
  },
  {
    "label": "GetIsland()",
    "kind": "Method",
    "detail": "Function (} const FPBDIsland*)",
    "insertText": "GetIsland(const int32 IslandIndex)"
  },
  {
    "label": "GetConstraintIsland()",
    "kind": "Method",
    "detail": "Function (const FPBDIsland*)",
    "insertText": "GetConstraintIsland(const FConstraintHandle* Constraint)"
  },
  {
    "label": "RemoveAllConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllConstraints()"
  },
  {
    "label": "AddConstraintContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintContainer(const FPBDConstraintContainer& Container)"
  },
  {
    "label": "RemoveConstraintContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraintContainer(const FPBDConstraintContainer& Container)"
  },
  {
    "label": "SetMaterialContainers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialContainers(const TArrayCollectionArray<TSerializablePtr<FChaosPhysicsMaterial>>* InPhysicsMaterials, const TArrayCollectionArray<TUniquePtr<FChaosPhysicsMaterial>>* InPerParticlePhysicsMaterials, const THandleArray<FChaosPhysicsMaterial>* InSimMaterials)"
  },
  {
    "label": "SetGravityForces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityForces(const FPerParticleGravity* InGravity)"
  },
  {
    "label": "SetDisableCounterThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableCounterThreshold(const int32 InDisableCounterThreshold)"
  },
  {
    "label": "SetIsDeterministic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDeterministic(const bool bInIsDeterministic)"
  },
  {
    "label": "SetAssignLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssignLevels(const bool bInAssignLevels)"
  },
  {
    "label": "UpdateExplicitSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExplicitSleep()"
  },
  {
    "label": "UpdateParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParticles()"
  },
  {
    "label": "UpdateIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIslands()"
  },
  {
    "label": "UpdateSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSleep(const FReal Dt = 0)"
  },
  {
    "label": "UpdateDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDisable(TFunctionRef<void(FPBDRigidParticleHandle*)> ParticleDisableFunctor)"
  },
  {
    "label": "EndTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTick()"
  },
  {
    "label": "GetParticleLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleLevel(const FPBDIslandParticle* Node)"
  },
  {
    "label": "GetParticleColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleColor(const FPBDIslandParticle* Node)"
  },
  {
    "label": "GetConstraintLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintLevel(const FPBDIslandConstraint* Edge)"
  },
  {
    "label": "GetConstraintColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintColor(const FPBDIslandConstraint* Edge)"
  },
  {
    "label": "VisitAwakeConstraints()",
    "kind": "Method",
    "detail": "Function (template<VisitorType> void)",
    "insertText": "VisitAwakeConstraints(const int32 ContainerId, const VisitorType& Visitor)"
  },
  {
    "label": "VisitAwakeConstConstraints()",
    "kind": "Method",
    "detail": "Function (template<VisitorType> void)",
    "insertText": "VisitAwakeConstConstraints(const int32 ContainerId, const VisitorType& Visitor)"
  },
  {
    "label": "VisitConstraints()",
    "kind": "Method",
    "detail": "Function (template<VisitorType> void)",
    "insertText": "VisitConstraints(const int32 ContainerId, const VisitorType& Visitor)"
  },
  {
    "label": "VisitConstConstraints()",
    "kind": "Method",
    "detail": "Function (template<VisitorType> void)",
    "insertText": "VisitConstConstraints(const int32 ContainerId, const VisitorType& Visitor)"
  },
  {
    "label": "GetParticleResimFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleResimFrame(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "SetParticleResimFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleResimFrame(FGeometryParticleHandle* Particle, const int32 ResimFrame)"
  },
  {
    "label": "ResetParticleResimFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticleResimFrame(const int32 ResetFrame = INDEX_NONE)"
  },
  {
    "label": "GetIslandArrayIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIslandArrayIndex(const FPBDIslandConstraint* Edge)"
  },
  {
    "label": "FindParticleIslands()",
    "kind": "Method",
    "detail": "Function (TArray<const FPBDIsland*>)",
    "insertText": "FindParticleIslands(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "FindParticlesInIslands()",
    "kind": "Method",
    "detail": "Function (TArray<const FGeometryParticleHandle*>)",
    "insertText": "FindParticlesInIslands(const TArray<const FPBDIsland*> Islands)"
  },
  {
    "label": "FindConstraintsInIslands()",
    "kind": "Method",
    "detail": "Function (TArray<const FConstraintHandle*>)",
    "insertText": "FindConstraintsInIslands(const TArray<const FPBDIsland*> Islands, int32 ContainerId)"
  },
  {
    "label": "DebugDrawSleepState()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_DRAW void)",
    "insertText": "DebugDrawSleepState(const DebugDraw::FChaosDebugDrawSettings* DebugDrawSettings)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(Constraint)"
  },
  {
    "label": "GetGraphNode()",
    "kind": "Method",
    "detail": "Function (} private : class FPBDIslandGroupManager ; class FPBDRigidsEvolutionGBF ; FPBDIslandParticle*)",
    "insertText": "GetGraphNode(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "GetGraphNode()",
    "kind": "Method",
    "detail": "Function (FPBDIslandParticle*)",
    "insertText": "GetGraphNode(const FTransientGeometryParticleHandle& Particle)"
  },
  {
    "label": "CreateGraphNode()",
    "kind": "Method",
    "detail": "Function (FPBDIslandParticle*)",
    "insertText": "CreateGraphNode(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "GetOrCreateGraphNode()",
    "kind": "Method",
    "detail": "Function (FPBDIslandParticle*)",
    "insertText": "GetOrCreateGraphNode(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "DestroyGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyGraphNode(FPBDIslandParticle* Node)"
  },
  {
    "label": "GetGraphEdge()",
    "kind": "Method",
    "detail": "Function (FPBDIslandConstraint*)",
    "insertText": "GetGraphEdge(const FConstraintHandle* Constraint)"
  },
  {
    "label": "CreateGraphEdge()",
    "kind": "Method",
    "detail": "Function (FPBDIslandConstraint*)",
    "insertText": "CreateGraphEdge(const int32 ContainerId, FConstraintHandle* Constraint, const TVec2<FGeometryParticleHandle*>& ConstrainedParticles)"
  },
  {
    "label": "DestroyGraphEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyGraphEdge(FPBDIslandConstraint* Edge)"
  },
  {
    "label": "BindEdgeToNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindEdgeToNodes(FPBDIslandConstraint* Edge, FPBDIslandParticle* Node0, FPBDIslandParticle* Node1)"
  },
  {
    "label": "UnbindEdgeFromNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindEdgeFromNodes(FPBDIslandConstraint* Edge)"
  },
  {
    "label": "UpdateGraphNodeSleepSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphNodeSleepSettings(FPBDIslandParticle* Node)"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphNode(FPBDIslandParticle* Node)"
  },
  {
    "label": "UpdateGraphEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphEdge(FPBDIslandConstraint* Edge)"
  },
  {
    "label": "CreateIsland()",
    "kind": "Method",
    "detail": "Function (FPBDIsland*)",
    "insertText": "CreateIsland()"
  },
  {
    "label": "DestroyIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIsland(FPBDIsland* Island)"
  },
  {
    "label": "AssignNodeIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignNodeIsland(FPBDIslandParticle* Node)"
  },
  {
    "label": "AssignEdgeIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignEdgeIsland(FPBDIslandConstraint* Edge)"
  },
  {
    "label": "AddNodeToIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeToIsland(FPBDIslandParticle* Node, FPBDIsland* Island)"
  },
  {
    "label": "RemoveNodeFromIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNodeFromIsland(FPBDIslandParticle* Node)"
  },
  {
    "label": "DestroyIslandNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIslandNodes(FPBDIsland* Island)"
  },
  {
    "label": "AddEdgeToIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEdgeToIsland(FPBDIslandConstraint* Edge, FPBDIsland* Island)"
  },
  {
    "label": "RemoveEdgeFromIsland()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEdgeFromIsland(FPBDIslandConstraint* Edge)"
  },
  {
    "label": "WakeNodeIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeNodeIslands(const FPBDIslandParticle* Node)"
  },
  {
    "label": "EnqueueIslandCheckSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueIslandCheckSleep(FPBDIsland* Island, const bool bIsSleepAllowed)"
  },
  {
    "label": "MergeNodeIslands()",
    "kind": "Method",
    "detail": "Function (FPBDIsland*)",
    "insertText": "MergeNodeIslands(FPBDIslandParticle* Node0, FPBDIslandParticle* Node1)"
  },
  {
    "label": "MergeIslands()",
    "kind": "Method",
    "detail": "Function (FPBDIsland*)",
    "insertText": "MergeIslands(FPBDIsland* Island0, FPBDIsland* Island1)"
  },
  {
    "label": "CreateMergeSet()",
    "kind": "Method",
    "detail": "Function (FPBDIslandMergeSet*)",
    "insertText": "CreateMergeSet(FPBDIsland* Island0, FPBDIsland* Island1)"
  },
  {
    "label": "DestroyMergeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMergeSet(FPBDIslandMergeSet* IslandMergeSet)"
  },
  {
    "label": "AddIslandToMergeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIslandToMergeSet(FPBDIsland* Island, FPBDIslandMergeSet* IslandMergeSet)"
  },
  {
    "label": "RemoveIslandFromMergeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIslandFromMergeSet(FPBDIsland* Island)"
  },
  {
    "label": "CombineMergeSets()",
    "kind": "Method",
    "detail": "Function (FPBDIslandMergeSet*)",
    "insertText": "CombineMergeSets(FPBDIslandMergeSet* IslandMergeSetParent, FPBDIslandMergeSet* IslandMergeSetChild)"
  },
  {
    "label": "GetMergeSetParentIsland()",
    "kind": "Method",
    "detail": "Function (FPBDIsland*)",
    "insertText": "GetMergeSetParentIsland(FPBDIslandMergeSet* MergeSet, int32& OutNumEdges, const TArrayView<int32>& OutNumContainerEdges)"
  },
  {
    "label": "ProcessIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIslands()"
  },
  {
    "label": "ProcessWakes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessWakes()"
  },
  {
    "label": "ProcessMerges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMerges()"
  },
  {
    "label": "ProcessSplits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSplits()"
  },
  {
    "label": "AssignLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignLevels()"
  },
  {
    "label": "ProcessIslandMerge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIslandMerge(FPBDIsland* ParentIsland, FPBDIsland* ChildIsland)"
  },
  {
    "label": "ProcessIslandSplits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIslandSplits(FPBDIsland* Island)"
  },
  {
    "label": "AssignIslandLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIslandLevels(FPBDIsland* Island)"
  },
  {
    "label": "SortIslandEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortIslandEdges(FPBDIsland* Island)"
  },
  {
    "label": "ProcessSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSleep(const FRealSingle Dt)"
  },
  {
    "label": "ProcessParticlesSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessParticlesSleep(const FRealSingle Dt)"
  },
  {
    "label": "ProcessIslandSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIslandSleep(FPBDIsland* Island, const FRealSingle Dt)"
  },
  {
    "label": "PropagateIslandSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateIslandSleep(FPBDIsland* Island)"
  },
  {
    "label": "PropagateIslandSleepToParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateIslandSleepToParticles(FPBDIsland* Island)"
  },
  {
    "label": "PropagateIslandSleepToConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateIslandSleepToConstraints(FPBDIsland* Island)"
  },
  {
    "label": "ProcessDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDisable(TFunctionRef<void(FPBDRigidParticleHandle*)> ParticleDisableFunctor)"
  },
  {
    "label": "ProcessParticlesDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessParticlesDisable(TArray<FPBDRigidParticleHandle*>& OutDisableParticles)"
  },
  {
    "label": "ProcessIslandDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIslandDisable(FPBDIsland* Island, TArray<FPBDRigidParticleHandle*>& OutDisableParticles)"
  },
  {
    "label": "FinalizeIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeIslands()"
  },
  {
    "label": "ApplyDeterminism()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeterminism()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "GetNextVisitEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextVisitEpoch()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FPBDRigidsSOAs& Particles ; const TArrayCollectionArray<TSerializablePtr<FChaosPhysicsMaterial>>* PhysicsMaterials ; const TArrayCollectionArray<TUniquePtr<FChaosPhysicsMaterial>>* PerParticlePhysicsMaterials ; const THandleArray<FChaosPhysicsMaterial>* SimMaterials ; const FPerParticleGravity* Gravity ; int32 DisableCounterThreshold = TNumericLimits<int32)",
    "insertText": "Max()"
  },
  {
    "label": "GetContainerId()",
    "kind": "Method",
    "detail": "Function (const int32 ContainerId = ConstraintContainer .)",
    "insertText": "GetContainerId()"
  },
  {
    "label": "IsInConstraintGraph()",
    "kind": "Method",
    "detail": "Function (const bool bIsInGraph = ConstraintHandle ->)",
    "insertText": "IsInConstraintGraph()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (const bool bShouldBeInGraph = ConstraintHandle ->)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraint(ContainerId, ConstraintHandle, ConstraintHandle->GetConstrainedParticles())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!bShouldBeInGraph && bIsInGraph)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraint(ConstraintHandle)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(Edge)"
  },
  {
    "label": "FPBDIslandManager()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FPBDIslandManager(this)->VisitAwakeConstConstraints(ContainerId, [&Visitor](const FPBDIslandConstraint* Edge) { Visitor(const_cast<FPBDIslandConstraint*>(Edge)); })"
  },
  {
    "label": "FPBDIslandManager()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FPBDIslandManager(this)->VisitConstConstraints(ContainerId, [&Visitor](const FPBDIslandConstraint* Edge) { Visitor(const_cast<FPBDIslandConstraint*>(Edge)); })"
  }
]