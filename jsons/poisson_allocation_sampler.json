[
  {
    "label": "HeapProfilerControllerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeapProfilerControllerTest"
  },
  {
    "label": "SamplingHeapProfilerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingHeapProfilerTest"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "AllocatorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "SamplesObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplesObserver"
  },
  {
    "label": "makes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "makes"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "makes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "makes"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "makes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "makes"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "heap_profiling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "heap_profiling"
  },
  {
    "label": "NoDestructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoDestructor"
  },
  {
    "label": "SamplingHeapProfilerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingHeapProfilerTest"
  },
  {
    "label": "ScopedMuteThreadSamples()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedMuteThreadSamples()"
  },
  {
    "label": "IsMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMuted()"
  },
  {
    "label": "ScopedSuppressRandomnessForTesting()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedSuppressRandomnessForTesting()"
  },
  {
    "label": "IsSuppressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSuppressed()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "AddSamplesObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamplesObserver(SamplesObserver*)"
  },
  {
    "label": "RemoveSamplesObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSamplesObserver(SamplesObserver*)"
  },
  {
    "label": "SetSamplingInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplingInterval(size_t sampling_interval_bytes)"
  },
  {
    "label": "RecordAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordAlloc(void* address,\n                          size_t,\n                          AllocatorType,\n                          const char* context)"
  },
  {
    "label": "RecordFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFree(void* address)"
  },
  {
    "label": "AreHookedSamplesMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreHookedSamplesMuted()"
  },
  {
    "label": "ScopedMuteHookedSamplesForTesting()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedMuteHookedSamplesForTesting()"
  },
  {
    "label": "InstallAllocatorHooksOnce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallAllocatorHooksOnce()"
  },
  {
    "label": "GetNextSampleInterval()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNextSampleInterval(size_t base_interval)"
  },
  {
    "label": "DoRecordAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRecordAlloc(intptr_t accumulated_bytes,\n                     size_t size,\n                     void* address,\n                     AllocatorType type,\n                     const char* context)"
  },
  {
    "label": "DoRecordFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRecordFree(void* address)"
  },
  {
    "label": "BalanceAddressesHashSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BalanceAddressesHashSet()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (observers_)",
    "insertText": "GUARDED_BY(mutex_)"
  }
]