[
  {
    "label": "FIntegerBlendResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntegerBlendResult"
  },
  {
    "label": "FIntegerAccumulationBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntegerAccumulationBuffers"
  },
  {
    "label": "UMovieScenePiecewiseIntegerBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePiecewiseIntegerBlenderSystem"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / MovieSceneBlenderSystem . h \" # include \" EntitySystem / MovieSceneDecompositionQuery . h \" # include \" EntitySystem / MovieSceneCachedEntityFilterResult . h \" # include \" MovieScenePiecewiseIntegerBlenderSystem . generated . h \" namespace UE { namespace MovieScene { struct FIntegerBlendResult { int32 Total = 0 ; double Weight = 0 . f ; } ; struct FIntegerAccumulationBuffers { bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TArray<FIntegerBlendResult> Absolute ; TArray<FIntegerBlendResult> Relative ; TArray<FIntegerBlendResult> Additive ; TArray<FIntegerBlendResult> AdditiveFromBase ; } ; } })",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UMovieScenePiecewiseIntegerBlenderSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "OnLink()",
    "kind": "Method",
    "detail": "Function (using FMovieSceneEntityID = UE::MovieScene::FMovieSceneEntityID ; using FComponentTypeID = UE::MovieScene::FComponentTypeID ; void)",
    "insertText": "OnLink()"
  },
  {
    "label": "OnSchedulePersistentTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSchedulePersistentTasks(UE::MovieScene::IEntitySystemScheduler* TaskScheduler)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "ReinitializeAccumulationBuffers()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ReinitializeAccumulationBuffers()"
  },
  {
    "label": "ZeroAccumulationBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroAccumulationBuffers()"
  }
]