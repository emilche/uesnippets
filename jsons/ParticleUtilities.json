[
  {
    "label": "FParticleSpatialAccessorXR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSpatialAccessorXR"
  },
  {
    "label": "FParticleSpatialAccessorPQ",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSpatialAccessorPQ"
  },
  {
    "label": "FParticleUtilities_ActorSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleUtilities_ActorSpace"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Utilities . h \" # define CHAOS_PARTICLE_ACTORTRANSFORM 1 namespace Chaos { class FParticleSpatialAccessorXR { public : template<T_PARTICLEHANDLE> FVec3&)",
    "insertText": "Position(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> const FVec3&)",
    "insertText": "GetPosition(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> const FRotation3)",
    "insertText": "GetRotation(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "Position(TPBDRigidParticles<FReal, 3>& Particles, const int32 Index)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (} const FRotation3)",
    "insertText": "Rotation(TPBDRigidParticles<FReal, 3>& Particles, const int32 Index)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FRotation3&)",
    "insertText": "Rotation(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "GetActorWorldTransform()",
    "kind": "Method",
    "detail": "Function (} } ; template<TSpatialAccessor> class FParticleUtilities_ActorSpace { public : template<T_PARTICLEHANDLE> FRigidTransform3)",
    "insertText": "GetActorWorldTransform(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "SetActorWorldTransform()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> void)",
    "insertText": "SetActorWorldTransform(T_PARTICLEHANDLE Particle, const FRigidTransform3& ActorWorldT)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Position(Particle) = ActorWorldT.GetTranslation()"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotation(Particle) = ActorWorldT.GetRotation()"
  },
  {
    "label": "ActorLocalToParticleLocal()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> const FRigidTransform3&)",
    "insertText": "ActorLocalToParticleLocal(T_PARTICLEHANDLE Particle, const FRigidTransform3& ActorLocalT)"
  },
  {
    "label": "GetWorldInvInertia()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FMatrix33)",
    "insertText": "GetWorldInvInertia(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "ParticleLocalToCoMLocal()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FVec3)",
    "insertText": "ParticleLocalToCoMLocal(T_PARTICLEHANDLE Particle, const FVec3& P)"
  },
  {
    "label": "ParticleLocalToCoMLocal()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FRotation3)",
    "insertText": "ParticleLocalToCoMLocal(T_PARTICLEHANDLE Particle, const FRotation3& Q)"
  },
  {
    "label": "ParticleLocalToCoMLocal()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FRigidTransform3)",
    "insertText": "ParticleLocalToCoMLocal(T_PARTICLEHANDLE Particle, const FRigidTransform3& T)"
  },
  {
    "label": "GetVelocityAtCoMRelativePosition()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FVec3)",
    "insertText": "GetVelocityAtCoMRelativePosition(T_PARTICLEHANDLE Particle, const FVec3& RelPos)"
  },
  {
    "label": "GetPreviousVelocityAtCoMRelativePosition()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FVec3)",
    "insertText": "GetPreviousVelocityAtCoMRelativePosition(T_PARTICLEHANDLE Particle, const FVec3& RelPos)"
  },
  {
    "label": "GetCoMWorldPosition()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FVec3)",
    "insertText": "GetCoMWorldPosition(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "GetCoMWorldPosition()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCoMWorldPosition(TPBDRigidParticles<FReal, 3>& Particles, const int32 Index)"
  },
  {
    "label": "GetCoMWorldRotation()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FRotation3)",
    "insertText": "GetCoMWorldRotation(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "GetCoMWorldRotation()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetCoMWorldRotation(TPBDRigidParticles<FReal, 3>& Particles, const int32 Index)"
  },
  {
    "label": "GetCoMWorldTransform()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> FRigidTransform3)",
    "insertText": "GetCoMWorldTransform(T_PARTICLEHANDLE Particle)"
  },
  {
    "label": "SetCoMWorldTransform()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> void)",
    "insertText": "SetCoMWorldTransform(T_PARTICLEHANDLE Particle, const FVec3& PCoM, const FRotation3& QCoM)"
  },
  {
    "label": "RotationOfMass()",
    "kind": "Method",
    "detail": "Function (const FRotation3 Q = QCoM* Particle ->)",
    "insertText": "RotationOfMass().Inverse()"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (const FVec3 P = PCoM - Q .)",
    "insertText": "RotateVector(Particle->CenterOfMass())"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Position(Particle)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotation(Particle)"
  },
  {
    "label": "SetCoMWorldTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCoMWorldTransform(TPBDRigidParticles<FReal, 3>& Particles, const int32 Index, const FVec3& PCoM, const FRotation3& QCoM)"
  },
  {
    "label": "RotationOfMass()",
    "kind": "Method",
    "detail": "Function (const FRotation3 Q = QCoM* Particles .)",
    "insertText": "RotationOfMass(Index).Inverse()"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (const FVec3 P = PCoM - Q .)",
    "insertText": "RotateVector(Particles.CenterOfMass(Index))"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Position(Particles, Index)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotation(Particles, Index)"
  },
  {
    "label": "AddForceAtPositionLocal()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> void)",
    "insertText": "AddForceAtPositionLocal(T_PARTICLEHANDLE Particle, const FVec3& LocalForce, const FVec3& LocalPosition)"
  },
  {
    "label": "GetActorWorldTransform()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 ParticleTransform =)",
    "insertText": "GetActorWorldTransform(Particle)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (const FVec3 WorldPosition = ParticleTransform .)",
    "insertText": "TransformPosition(LocalPosition)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const FVec3 WorldForce = ParticleTransform .)",
    "insertText": "TransformVector(LocalForce)"
  },
  {
    "label": "AddForceAtPositionWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPositionWorld(Particle, WorldForce, WorldPosition)"
  },
  {
    "label": "AddForceAtPositionWorld()",
    "kind": "Method",
    "detail": "Function (} template<T_PARTICLEHANDLE> void)",
    "insertText": "AddForceAtPositionWorld(T_PARTICLEHANDLE Particle, const FVec3& Force, const FVec3& Position)"
  },
  {
    "label": "GetCoMWorldPosition()",
    "kind": "Method",
    "detail": "Function (const FVec3 WorldCOM =)",
    "insertText": "GetCoMWorldPosition(Particle)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FVec3 Torque =)",
    "insertText": "CrossProduct(Position - WorldCOM, Force)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "AddForce(Force)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "AddTorque(Torque)"
  }
]