[
  {
    "label": "GlslShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlslShaderGenerator"
  },
  {
    "label": "MX_GENGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENGLSL_API"
  },
  {
    "label": "Space",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Space"
  },
  {
    "label": "GlslShaderGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_GLSLSHADERGENERATOR_H # define MATERIALX_GLSLSHADERGENERATOR_H # include<MaterialXGenGlsl / Export . h> # include<MaterialXGenShader / HwShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN using GlslShaderGeneratorPtr = shared_ptr<class GlslShaderGenerator> ; class GlslShaderGenerator : public HwShaderGenerator { public :)",
    "insertText": "GlslShaderGenerator()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderGeneratorPtr)",
    "insertText": "create()"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (} ShaderPtr)",
    "insertText": "generate(const string& name, ElementPtr element, GenContext& context)"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (ShaderNodeImplPtr)",
    "insertText": "getImplementation(const NodeDef& nodedef, GenContext& context)"
  },
  {
    "label": "getVertexDataPrefix()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getVertexDataPrefix(const VariableBlock& vertexData)"
  },
  {
    "label": "emitVertexStage()",
    "kind": "Method",
    "detail": "Function (public : const string TARGET ; const string VERSION ; protected : void)",
    "insertText": "emitVertexStage(const ShaderGraph& graph, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitPixelStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitPixelStage(const ShaderGraph& graph, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitDirectives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitDirectives(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitConstants(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitUniforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitUniforms(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitLightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLightData(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitInputs(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitOutputs(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "getResourceBindingContext()",
    "kind": "Method",
    "detail": "Function (HwResourceBindingContextPtr)",
    "insertText": "getResourceBindingContext(GenContext& context)"
  },
  {
    "label": "requiresLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requiresLighting(const ShaderGraph& graph)"
  },
  {
    "label": "emitSpecularEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitSpecularEnvironment(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitTransmissionRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitTransmissionRender(GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitLightFunctionDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitLightFunctionDefinitions(const ShaderGraph& graph, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "toVec4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toVec4(const TypeDesc* type, string& variable)"
  },
  {
    "label": "isEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEditable(const ShaderInput& input)"
  },
  {
    "label": "GlslImplementation()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "GlslImplementation()"
  }
]