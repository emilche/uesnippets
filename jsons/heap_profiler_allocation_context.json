[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AllocationMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocationMetrics"
  },
  {
    "label": "FromThreadName()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_HEAP_PROFILER_ALLOCATION_CONTEXT_H_ # define BASE_TRACE_EVENT_HEAP_PROFILER_ALLOCATION_CONTEXT_H_ # include<stddef . h> # include<stdint . h> # include<functional> # include \" base / base_export . h \" namespace base { namespace trace_event { struct BASE_EXPORT StackFrame { enum class Type { THREAD_NAME,PROGRAM_COUNTER,} ; StackFrame)",
    "insertText": "FromThreadName(const char* name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool BASE_EXPORT)",
    "insertText": "operator(const StackFrame& lhs, const StackFrame& rhs)"
  },
  {
    "label": "Backtrace()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT Backtrace {)",
    "insertText": "Backtrace()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum { kMaxFrameCount = 4 8 } ; StackFrame frames [ kMaxFrameCount ] ; size_t frame_count = 0 ; } ; bool BASE_EXPORT)",
    "insertText": "operator(const Backtrace& lhs, const Backtrace& rhs)"
  },
  {
    "label": "AllocationContext()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT AllocationContext {)",
    "insertText": "AllocationContext()"
  },
  {
    "label": "AllocationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocationContext(const Backtrace& backtrace, const char* type_name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Backtrace backtrace ; const char* type_name ; } ; bool BASE_EXPORT)",
    "insertText": "operator(const AllocationContext& lhs, const AllocationContext& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct AllocationMetrics { size_t size ; size_t count ; } ; } } namespace std { template<> struct BASE_EXPORT hash<base::trace_event::StackFrame> { size_t)",
    "insertText": "operator()(const base::trace_event::StackFrame& frame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct BASE_EXPORT hash<base::trace_event::Backtrace> { size_t)",
    "insertText": "operator()(const base::trace_event::Backtrace& backtrace)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct BASE_EXPORT hash<base::trace_event::AllocationContext> { size_t)",
    "insertText": "operator()(const base::trace_event::AllocationContext& context)"
  }
]