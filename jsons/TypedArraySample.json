[
  {
    "label": "TRAITS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRAITS"
  },
  {
    "label": "TypedArraySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedArraySample"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_TypedArraySample_h # define Alembic_Abc_TypedArraySample_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / TypedPropertyTraits . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { using Alembic::Util::Dimensions ; template<class TRAITS> class TypedArraySample : public AbcA::ArraySample { public : typedef TRAITS traits_type ; typedef TypedArraySample<TRAITS> this_type ; typedef TRAITS::value_type value_type ; typedef std::vector<value_type> value_vector ;)",
    "insertText": "TypedArraySample() : AbcA::ArraySample( NULL, TRAITS::dataType(), Dimensions())"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedArraySample(const value_type *iValues, size_t iNumVals ) : AbcA::ArraySample( reinterpret_cast<const void *>( iValues ), TRAITS::dataType(), Dimensions( iNumVals ))"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedArraySample(const value_type *iValues, const Dimensions &iDims ) : AbcA::ArraySample( reinterpret_cast<const void *>( iValues ), TRAITS::dataType(), iDims)"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedArraySample(const value_vector &iVec ) : AbcA::ArraySample( reinterpret_cast<const void *>( iVec.size() > 0 ? &iVec.front() : NULL ), TRAITS::dataType(), Dimensions( iVec.size() ))"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedArraySample(const value_vector &iVec, const Dimensions &iDims ) : AbcA::ArraySample( reinterpret_cast<const void *>( iVec.size() > 0 ? &iVec.front() : NULL ), TRAITS::dataType(), iDims)"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(iDims.numPoints() == iVec.size(), \"Invalid dimensions in TypedArraySample\")"
  },
  {
    "label": "TypedArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedArraySample(const AbcA::ArraySample &iCopy ) : AbcA::ArraySample( iCopy)"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(iCopy.getDataType() == TRAITS::dataType(), \"Invalid DataType in TypedArraySample. Expected: \" << TRAITS::dataType() << \", but got: \" << iCopy.getDataType())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TypedArraySample<TRAITS>)",
    "insertText": "operator(const AbcA::ArraySample &iCopy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(iCopy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const value_type*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const value_type&)",
    "insertText": "operator(const size_t i)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "emptySample()",
    "kind": "Method",
    "detail": "Function (} TypedArraySample<TRAITS>)",
    "insertText": "emptySample()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(ArraySample::valid())"
  }
]