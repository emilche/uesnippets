[
  {
    "label": "FDelegateHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelegateHandle"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" SequencerCoreFwd . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class FDelegateHandle ; namespace UE { namespace Sequencer { class FViewModel ; class FSharedViewModelData : public FViewModel { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSharedViewModelData, FViewModel)"
  },
  {
    "label": "PreHierarchicalChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreHierarchicalChange(const TSharedPtr<FViewModel>& InChangedModel)"
  },
  {
    "label": "BroadcastHierarchicalChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastHierarchicalChange(const TSharedPtr<FViewModel>& InChangedModel)"
  },
  {
    "label": "ReportLatentHierarchicalOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportLatentHierarchicalOperations()"
  },
  {
    "label": "SubscribeToHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "SubscribeToHierarchyChanged(const TSharedPtr<FViewModel>& InModel)"
  },
  {
    "label": "UnsubscribeFromHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromHierarchyChanged(const TSharedPtr<FViewModel>& InModel, FDelegateHandle InHandle)"
  },
  {
    "label": "UnsubscribeFromHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromHierarchyChanged(const TSharedPtr<FViewModel>& InModel, const void* InUserObject)"
  },
  {
    "label": "PurgeStaleHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeStaleHandlers()"
  }
]