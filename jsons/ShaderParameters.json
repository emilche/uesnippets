[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRHIComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeShader"
  },
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "FRHIUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIUnorderedAccessView"
  },
  {
    "label": "FShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterMap"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "FRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBuffer"
  },
  {
    "label": "FRWBufferStructured",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBufferStructured"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FRHIUniformBufferShaderBindingLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferShaderBindingLayout"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderParameterFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderParameterFlags"
  },
  {
    "label": "FShaderParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameter"
  },
  {
    "label": "FShaderResourceParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderResourceParameter"
  },
  {
    "label": "FShaderUniformBufferParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderUniformBufferParameter"
  },
  {
    "label": "TShaderUniformBufferParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShaderUniformBufferParameter"
  },
  {
    "label": "FShaderUniformBufferMemberParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderUniformBufferMemberParameter"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryLayout . h \" class FPointerTableBase ; class FRHIComputeShader ; class FRHITexture ; class FRHIUnorderedAccessView ; class FShaderParameterMap ; class FShaderParametersMetadata ; struct FRWBuffer ; struct FRWBufferStructured ; struct FShaderCompilerEnvironment ; struct FRHIUniformBufferShaderBindingLayout ; enum class EShaderParameterType : uint8 ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(EShaderParameterType)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (enum class EShaderCodeResourceBindingType : uint8 ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(EShaderCodeResourceBindingType)"
  },
  {
    "label": "CreateUniformBufferShaderDeclaration()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR namespace UE::ShaderParameters { FString)",
    "insertText": "CreateUniformBufferShaderDeclaration(const TCHAR* Name, const FShaderParametersMetadata& UniformBufferStruct, const FRHIUniformBufferShaderBindingLayout* UniformBufferSBLayout)"
  },
  {
    "label": "AddUniformBufferIncludesToEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUniformBufferIncludesToEnvironment(FShaderCompilerEnvironment& OutEnvironment, const TSet<const FShaderParametersMetadata*>& InUniformBuffers)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} # endif enum EShaderParameterFlags { SPF_Optional,SPF_Mandatory } ; class FShaderParameter {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FShaderParameter, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "FShaderParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderParameter() : BufferIndex(0) , BaseIndex(0) , NumBytes(0)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap,const TCHAR* ParameterName, EShaderParameterFlags Flags = SPF_Optional)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderParameter& P)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint16, BaseIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint16, NumBytes)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FShaderResourceParameter {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FShaderResourceParameter, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "FShaderResourceParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderResourceParameter()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap,const TCHAR* ParameterName,EShaderParameterFlags Flags = SPF_Optional)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderResourceParameter& P)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(uint8, NumResources, 0)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(EShaderParameterType, Type, {})"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FShaderUniformBufferParameter {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FShaderUniformBufferParameter, RENDERCORE_API, NonVirtual)"
  },
  {
    "label": "FShaderUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderUniformBufferParameter() : BaseIndex(0xffff)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "ModifyCompilationEnvironment(const TCHAR* ParameterName,const FShaderParametersMetadata& Struct,EShaderPlatform Platform,FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderUniformBufferParameter& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (Ar<<BaseIndex ; } bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; template<TBufferStruct> class TShaderUniformBufferParameter : public FShaderUniformBufferParameter { public : # if WITH_EDITOR void)",
    "insertText": "ModifyCompilationEnvironment(const TCHAR* ParameterName,EShaderPlatform Platform, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(ParameterName,TBufferStruct::StaticStruct,Platform,OutEnvironment)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif FArchive&)",
    "insertText": "operator(FArchive& Ar,TShaderUniformBufferParameter& P)"
  },
  {
    "label": "FShaderUniformBufferMemberParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderUniformBufferMemberParameter()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap, const TCHAR* ParameterName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderUniformBufferMemberParameter& P)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef RootUniformBuffer ; void)",
    "insertText": "AddBindlessParameter(const FRHIShaderParameterResource& Parameter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BindlessParameters .)",
    "insertText": "Add(Parameter)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FShaderResourceParameter& Param, FRHITexture* Value)"
  },
  {
    "label": "GetBaseIndex()",
    "kind": "Method",
    "detail": "Function (Textures [ Param .)",
    "insertText": "GetBaseIndex()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const FShaderResourceParameter& Param, FRHIShaderResourceView* Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const FShaderUniformBufferParameter& Param, FRHIUniformBuffer* Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const FShaderResourceParameter& Param, FRHIUnorderedAccessView* Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const FShaderResourceParameter& Param, FRHISamplerState* Value)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTexture(uint16 BaseIndex, FRHITexture* Value)"
  },
  {
    "label": "SetSRV()",
    "kind": "Method",
    "detail": "Function (Textures [ BaseIndex ] = Value ; } void)",
    "insertText": "SetSRV(uint16 BaseIndex, FRHIShaderResourceView* Value)"
  },
  {
    "label": "SetSampler()",
    "kind": "Method",
    "detail": "Function (SRVs [ BaseIndex ] = Value ; } void)",
    "insertText": "SetSampler(uint16 BaseIndex, FRHISamplerState* Value)"
  },
  {
    "label": "SetUAV()",
    "kind": "Method",
    "detail": "Function (Samplers [ BaseIndex ] = Value ; } void)",
    "insertText": "SetUAV(uint16 BaseIndex, FRHIUnorderedAccessView* Value)"
  },
  {
    "label": "SetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (UAVs [ BaseIndex ] = Value ; } void)",
    "insertText": "SetUniformBuffer(uint16 BaseIndex, FRHIUniformBuffer* Value)"
  }
]