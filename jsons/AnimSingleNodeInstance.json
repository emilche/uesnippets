[
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "SetMirrorDataTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMirrorDataTable(const UMirrorDataTable* MirrorDataTable)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLooping(bool bIsLooping)"
  },
  {
    "label": "SetPlayRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayRate(float InPlayRate)"
  },
  {
    "label": "SetReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReverse(bool bInReverse)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(float InPosition, bool bFireNotifies=true)"
  },
  {
    "label": "SetPositionWithPreviousTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies=true)"
  },
  {
    "label": "SetBlendSpacePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendSpacePosition(const FVector& InPosition)"
  },
  {
    "label": "SetPlaying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaying(bool bIsPlaying)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLength()"
  },
  {
    "label": "PlayAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayAnim(bool bIsLooping=false, float InPlayRate=1.f, float InStartPosition=0.f)"
  },
  {
    "label": "StopAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAnim()"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping=true, float InPlayRate=1.f)"
  },
  {
    "label": "SetPreviewCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewCurveOverride(const FName& PoseName, float Value, bool bRemoveIfZero)"
  },
  {
    "label": "StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForward()"
  },
  {
    "label": "StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackward()"
  },
  {
    "label": "SetMontagePreviewSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMontagePreviewSlot(FName PreviewSlot)"
  },
  {
    "label": "UpdateMontageWeightForTimeSkip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMontageWeightForTimeSkip(float TimeDifference)"
  },
  {
    "label": "UpdateBlendspaceSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlendspaceSamples(FVector InBlendInput)"
  },
  {
    "label": "GetFilterLastOutput()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFilterLastOutput()"
  },
  {
    "label": "SetInterpolationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpolationOverride(TOptional<EAnimInterpolationType> InterpolationType)"
  }
]