[
  {
    "label": "R",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "R"
  },
  {
    "label": "Tuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tuple"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "FrontBinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrontBinder"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FUNCTIONAL_INTERNAL_FRONT_BINDER_H_ # define ABSL_FUNCTIONAL_INTERNAL_FRONT_BINDER_H_ # include<cstddef> # include<type_traits> # include<utility> # include \" absl / base / internal / invoke . h \" # include \" absl / container / internal / compressed_tuple . h \" # include \" absl / meta / type_traits . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace functional_internal { template<class R,class Tuple,size_t . . . Idx,class . . . Args> R)",
    "insertText": "Apply(Tuple&& bound, absl::index_sequence<Idx...>, Args&&... free)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<class F,class . . . BoundArgs> class FrontBinder { using BoundArgsT = absl::container_internal::CompressedTuple<F,BoundArgs . . .> ; using Idx = absl::make_index_sequence<)",
    "insertText": "sizeof(BoundArgs)"
  },
  {
    "label": "FrontBinder()",
    "kind": "Method",
    "detail": "Function (BoundArgsT bound_args_ ; public : template<class . . . Ts>)",
    "insertText": "FrontBinder(absl::in_place_t, Ts&&... ts) : bound_args_(absl::forward<Ts>(ts)...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class . . . FreeArgs,class R = base_internal::invoke_result_t<F&,BoundArgs& . . .,FreeArgs&& . . .>> R)",
    "insertText": "operator()(FreeArgs&&... free_args)"
  }
]