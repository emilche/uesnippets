[
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_MINMAX_ELEMENT_H # define _LIBCPP___ALGORITHM_RANGES_MINMAX_ELEMENT_H # include<__algorithm / min_max_result . h> # include<__algorithm / minmax_element . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / forward . h> # include<__utility / move . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _T1> using minmax_element_result = min_max_result<_T1> ; namespace __minmax_element { struct __fn { template<forward_iterator _Ip,sentinel_for<_Ip> _Sp,class _Proj = identity,indirect_strict_weak_order<projected<_Ip,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI ranges::minmax_element_result<_Ip>)",
    "insertText": "operator()(_Ip __first, _Sp __last, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "__minmax_element_impl(std::move(__first), std::move(__last), __comp, __proj)"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "__minmax_element_impl(ranges::begin(__r), ranges::end(__r), __comp, __proj)"
  }
]