[
  {
    "label": "CUnknownType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUnknownType"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CUnknownType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / SharedPointerArray . h \" # include \" uLang / Common / Containers / UniquePointer . h \" # include \" uLang / Semantics / SemanticClass . h \" namespace uLang { class CUnknownType : public CNormalType { public : ETypeKind StaticTypeKind = ETypeKind::Unknown ; TArray<const CTypeBase*> _SuggestedTypes ;)",
    "insertText": "CUnknownType(const CSymbol& Name, CScope& EnclosingScope) : CNormalType(ETypeKind::Unknown, EnclosingScope.GetProgram()), _Name(Name)"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (} CUTF8String)",
    "insertText": "AsCodeRecursive(ETypeSyntaxPrecedence , TArray<const CFlowType*>& , bool bLinkable)"
  },
  {
    "label": "GetNodeType()",
    "kind": "Method",
    "detail": "Function (EAstNodeType)",
    "insertText": "GetNodeType()"
  },
  {
    "label": "CanFail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFail()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (_UnknownChildren .)",
    "insertText": "Add(Move(Child))"
  },
  {
    "label": "VisitChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitChildren(SAstVisitor& Visitor)"
  },
  {
    "label": "VisitArray()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "VisitArray(\"UnknownChildren\", _UnknownChildren)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CExpressionBase& Other)"
  }
]