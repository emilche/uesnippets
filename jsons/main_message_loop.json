[
  {
    "label": "MainMessageLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainMessageLoop"
  },
  {
    "label": "DeleteOnMainThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeleteOnMainThread"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_SHARED_BROWSER_MAIN_MESSAGE_LOOP_H_ # define CEF_TESTS_SHARED_BROWSER_MAIN_MESSAGE_LOOP_H_ # pragma once # include<memory> # include \" include / base / cef_callback . h \" # include \" include / cef_task . h \" # if)",
    "insertText": "defined(OS_WIN)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class MainMessageLoop { public : MainMessageLoop*)",
    "insertText": "Get()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Run()"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(CefRefPtr<CefTask> task)"
  },
  {
    "label": "RunsTasksOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksOnCurrentThread()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OS_WIN) virtual void SetCurrentModelessDialog(HWND hWndDialog)"
  },
  {
    "label": "PostClosure()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostClosure(base::OnceClosure closure)"
  },
  {
    "label": "PostClosure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostClosure(const base::RepeatingClosure& closure)"
  },
  {
    "label": "MainMessageLoop()",
    "kind": "Method",
    "detail": "Function (protected : std::default_delete<MainMessageLoop> ;)",
    "insertText": "MainMessageLoop()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(MainMessageLoop)"
  },
  {
    "label": "CURRENTLY_ON_MAIN_THREAD()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "CURRENTLY_ON_MAIN_THREAD() \\ client::MainMessageLoop::Get()->RunsTasksOnCurrentThread() #define REQUIRE_MAIN_THREAD() DCHECK(CURRENTLY_ON_MAIN_THREAD()) #define MAIN_POST_TASK(task) client::MainMessageLoop::Get()->PostTask(task) #define MAIN_POST_CLOSURE(closure) \\ client::MainMessageLoop::Get()->PostClosure(closure)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Destruct(const T* x)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (delete x ; } else { client::)",
    "insertText": "Get()->PostClosure(base::BindOnce( &DeleteOnMainThread::Destruct<T>, base::Unretained(x)))"
  }
]