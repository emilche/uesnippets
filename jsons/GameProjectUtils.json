[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UTemplateCategories",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTemplateCategories"
  },
  {
    "label": "UTemplateProjectDefs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTemplateProjectDefs"
  },
  {
    "label": "FAddToProjectConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddToProjectConfig"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FModuleContextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleContextInfo"
  },
  {
    "label": "FNewClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewClassInfo"
  },
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTemplateConfigValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemplateConfigValue"
  },
  {
    "label": "FProjectInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectInformation"
  },
  {
    "label": "GAMEPROJECTGENERATION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GAMEPROJECTGENERATION_API"
  },
  {
    "label": "FProjectInformation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AddToProjectConfig . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" GameProjectGenerationModule . h \" # include \" HAL / Platform . h \" # include \" HardwareTargetingSettings . h \" # include \" Misc / Optional . h \" # include \" SlateFwd . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FText ; class SNotificationItem ; class UClass ; class UTemplateCategories ; class UTemplateProjectDefs ; struct FAddToProjectConfig ; struct FGuid ; struct FModuleContextInfo ; struct FNewClassInfo ; struct FProjectDescriptor ; enum class EClassDomain : uint8 ; struct FTemplateConfigValue ; struct FProjectInformation {)",
    "insertText": "FProjectInformation()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (FString ProjectFilename ; FString TemplateFile ; FName TemplateCategory ; bool bShouldGenerateCode = false ; bool bCopyStarterContent = false ; bool bIsBlankTemplate = false ; bool bIsEnterpriseProject = false ; TOptional<bool> bEnableXR ; TOptional<EHardwareClass> TargetedHardware ; TOptional<EGraphicsPreset> DefaultGraphicsPerformance ; FString StarterContent ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FProjectDescriptorModifier, FProjectDescriptor&)"
  },
  {
    "label": "IsValidProjectFileForCreation()",
    "kind": "Method",
    "detail": "Function (class GameProjectUtils { public : enum class EClassLocation : uint8 { UserDefined,Public,Private,Classes,} ; enum class EAddCodeToProjectResult : uint8 { Succeeded,InvalidInput,FailedToAddCode,FailedToHotReload,} ; enum class EProjectDuplicateResult : uint8 { Succeeded,Failed,UserCanceled } ; enum class EReloadStatus : uint8 { Reloaded,NotReloaded,} ; bool)",
    "insertText": "IsValidProjectFileForCreation(const FString& ProjectFile, FText& OutFailReason)"
  },
  {
    "label": "OpenProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenProject(const FString& ProjectFile, FText& OutFailReason)"
  },
  {
    "label": "OpenCodeIDE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenCodeIDE(const FString& ProjectFile, FText& OutFailReason)"
  },
  {
    "label": "CreateProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateProject(const FProjectInformation& InProjectInfo, FText& OutFailReason, FText& OutFailLog, TArray<FString>* OutCreatedFiles = nullptr)"
  },
  {
    "label": "CheckForOutOfDateGameProjectFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForOutOfDateGameProjectFile()"
  },
  {
    "label": "CheckAndWarnProjectFilenameValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAndWarnProjectFilenameValid()"
  },
  {
    "label": "TryMakeProjectFileWriteable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryMakeProjectFileWriteable(const FString& ProjectFile)"
  },
  {
    "label": "UpdateGameProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProject(const FString& ProjectFile, const FString& EngineIdentifier, FText& OutFailReason)"
  },
  {
    "label": "OpenAddToProjectDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAddToProjectDialog(const FAddToProjectConfig& Config, EClassDomain InDomain)"
  },
  {
    "label": "IsValidClassNameForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidClassNameForCreation(const FString& NewClassName, FText& OutFailReason)"
  },
  {
    "label": "IsValidClassNameForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidClassNameForCreation(const FString& NewClassName, const FModuleContextInfo& ModuleInfo, const TSet<FString>& DisallowedHeaderNames, FText& OutFailReason)"
  },
  {
    "label": "IsValidBaseClassForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseClassForCreation(const UClass* InClass, const FModuleContextInfo& InModuleInfo)"
  },
  {
    "label": "IsValidBaseClassForCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseClassForCreation(const UClass* InClass, const TArray<FModuleContextInfo>& InModuleInfoArray)"
  },
  {
    "label": "AddCodeToProject()",
    "kind": "Method",
    "detail": "Function (EAddCodeToProjectResult)",
    "insertText": "AddCodeToProject(const FString& NewClassName, const FString& NewClassPath, const FModuleContextInfo& ModuleInfo, const FNewClassInfo ParentClassInfo, const TSet<FString>& DisallowedHeaderNames, FString& OutHeaderFilePath, FString& OutCppFilePath, FText& OutFailReason)"
  },
  {
    "label": "AddCodeToProject()",
    "kind": "Method",
    "detail": "Function (EAddCodeToProjectResult)",
    "insertText": "AddCodeToProject(const FString& NewClassName, const FString& NewClassPath, const FModuleContextInfo& ModuleInfo, const FNewClassInfo ParentClassInfo, const TSet<FString>& DisallowedHeaderNames, FString& OutHeaderFilePath, FString& OutCppFilePath, FText& OutFailReason, EReloadStatus& OutReloadStatus)"
  },
  {
    "label": "LoadTemplateCategories()",
    "kind": "Method",
    "detail": "Function (UTemplateCategories*)",
    "insertText": "LoadTemplateCategories(const FString& RootDir)"
  },
  {
    "label": "LoadTemplateDefs()",
    "kind": "Method",
    "detail": "Function (UTemplateProjectDefs*)",
    "insertText": "LoadTemplateDefs(const FString& ProjectDirectory)"
  },
  {
    "label": "GetProjectCodeFileCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProjectCodeFileCount()"
  },
  {
    "label": "GetProjectSourceDirectoryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProjectSourceDirectoryInfo(int32& OutNumFiles, int64& OutDirectorySize)"
  },
  {
    "label": "GetDefaultProjectTemplateFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultProjectTemplateFilename()"
  },
  {
    "label": "BuildCodeProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildCodeProject(const FString& ProjectFilename)"
  },
  {
    "label": "GenerateCodeProjectFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCodeProjectFiles(const FString& ProjectFilename, FText& OutFailReason, FText& OutFailLog)"
  },
  {
    "label": "IsEngineStarterContentAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEngineStarterContentAvailable()"
  },
  {
    "label": "IsUsingEngineStarterContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingEngineStarterContent(const FProjectInformation& ProjectInfo)"
  },
  {
    "label": "IsStarterContentAvailableForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStarterContentAvailableForProject(const FProjectInformation& ProjectInfo)"
  },
  {
    "label": "GetCurrentProjectModules()",
    "kind": "Method",
    "detail": "Function (const TArray<FModuleContextInfo>&)",
    "insertText": "GetCurrentProjectModules()"
  },
  {
    "label": "GetCurrentProjectPluginModules()",
    "kind": "Method",
    "detail": "Function (TArray<FModuleContextInfo>)",
    "insertText": "GetCurrentProjectPluginModules()"
  },
  {
    "label": "ResetCurrentProjectModulesCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCurrentProjectModulesCache()"
  },
  {
    "label": "IsValidSourcePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSourcePath(const FString& InPath, const FModuleContextInfo& ModuleInfo, FText* const OutFailReason = nullptr)"
  },
  {
    "label": "CalculateSourcePaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateSourcePaths(const FString& InPath, const FModuleContextInfo& ModuleInfo, FString& OutHeaderPath, FString& OutSourcePath, FText* const OutFailReason = nullptr)"
  },
  {
    "label": "GetClassLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClassLocation(const FString& InPath, const FModuleContextInfo& ModuleInfo, EClassLocation& OutClassLocation, FText* const OutFailReason = nullptr)"
  },
  {
    "label": "DuplicateProjectForUpgrade()",
    "kind": "Method",
    "detail": "Function (EProjectDuplicateResult)",
    "insertText": "DuplicateProjectForUpgrade(const FString& InProjectFile, FString& OutNewProjectFile)"
  },
  {
    "label": "UpdateSupportedTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSupportedTargetPlatforms(const FName& InPlatformName, const bool bIsSupported)"
  },
  {
    "label": "ClearSupportedTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSupportedTargetPlatforms()"
  },
  {
    "label": "DetermineModuleIncludePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DetermineModuleIncludePath(const FModuleContextInfo& ModuleInfo, const FString& FileRelativeTo)"
  },
  {
    "label": "GenerateBasicSourceCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateBasicSourceCode(TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "GenerateGameModuleBuildFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateGameModuleBuildFile(const FString& NewBuildFileName, const FString& ModuleName, const TArray<FString>& PublicDependencyModuleNames, const TArray<FString>& PrivateDependencyModuleNames, FText& OutFailReason)"
  },
  {
    "label": "GeneratePluginModuleBuildFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePluginModuleBuildFile(const FString& NewBuildFileName, const FString& ModuleName, const TArray<FString>& PublicDependencyModuleNames, const TArray<FString>& PrivateDependencyModuleNames, FText& OutFailReason, bool bUseExplicitOrSharedPCHs = true)"
  },
  {
    "label": "GeneratePluginModuleCPPFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePluginModuleCPPFile(const FString& CPPFileName, const FString& ModuleName, const FString& StartupSourceCode, FText& OutFailReason)"
  },
  {
    "label": "GeneratePluginModuleHeaderFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePluginModuleHeaderFile(const FString& HeaderFileName, const TArray<FString>& PublicHeaderIncludes, FText& OutFailReason)"
  },
  {
    "label": "ProjectHasCodeFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectHasCodeFiles()"
  },
  {
    "label": "ReadTemplateFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTemplateFile(const FString& TemplateFileName, FString& OutFileContents, FText& OutFailReason)"
  },
  {
    "label": "WriteOutputFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteOutputFile(const FString& OutputFilename, const FString& OutputFileContents, FText& OutFailReason)"
  },
  {
    "label": "MakeCommaDelimitedList()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeCommaDelimitedList(const TArray<FString>& InList, bool bPlaceQuotesAroundEveryElement = true)"
  },
  {
    "label": "NameContainsOnlyLegalCharacters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NameContainsOnlyLegalCharacters(const FString& TestName, FString& OutIllegalCharacters)"
  },
  {
    "label": "NameMatchesPlatformModuleName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NameMatchesPlatformModuleName(const FString& TestName)"
  },
  {
    "label": "MakeIncludeList()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeIncludeList(const TArray<FString>& InList)"
  },
  {
    "label": "DeleteCreatedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCreatedFiles(const FString& RootFolder, const TArray<FString>& CreatedFiles)"
  },
  {
    "label": "UpdateAdditionalPluginDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAdditionalPluginDirectory(const FString& InDir, const bool bAddOrRemove)"
  },
  {
    "label": "GetDefaultBuildSettingsVersion()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDefaultBuildSettingsVersion()"
  },
  {
    "label": "AddHardwareConfigValues()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddHardwareConfigValues(const FProjectInformation& InProjectInfo, TArray<FTemplateConfigValue>& ConfigValues)"
  },
  {
    "label": "GetStarterContentName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStarterContentName(const FProjectInformation& InProjectInfo)"
  },
  {
    "label": "GenerateProjectFromScratch()",
    "kind": "Method",
    "detail": "Function (TOptional<FGuid>)",
    "insertText": "GenerateProjectFromScratch(const FProjectInformation& InProjectInfo, FText& OutFailReason, FText& OutFailLog)"
  },
  {
    "label": "CreateProjectFromTemplate()",
    "kind": "Method",
    "detail": "Function (TOptional<FGuid>)",
    "insertText": "CreateProjectFromTemplate(const FProjectInformation& InProjectInfo, FText& OutFailReason, FText& OutFailLog, TArray<FString>* OutCreatedFiles = nullptr)"
  },
  {
    "label": "SetEngineAssociationForForeignProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEngineAssociationForForeignProject(const FString& ProjectFileName, FText& OutFailReason)"
  },
  {
    "label": "InsertFeaturePacksIntoINIFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertFeaturePacksIntoINIFile(const FProjectInformation& InProjectInfo, FText& OutFailReason)"
  },
  {
    "label": "AddSharedContentToProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSharedContentToProject(const FProjectInformation &InProjectInfo, TArray<FString> &CreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "GetTemplateDefsFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTemplateDefsFilename()"
  },
  {
    "label": "GetIncludePathForFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetIncludePathForFile(const FString& InFullFilePath, const FString& ModuleRootPath)"
  },
  {
    "label": "ProjectFileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectFileExists(const FString& ProjectFile)"
  },
  {
    "label": "AnyProjectFilesExistInFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyProjectFilesExistInFolder(const FString& Path)"
  },
  {
    "label": "CleanupIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanupIsEnabled()"
  },
  {
    "label": "GenerateConfigFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateConfigFiles(const FProjectInformation& InProjectInfo, TArray<FString>& OutCreatedFiles, FText& OutFailReason, FGuid& OutProjectID)"
  },
  {
    "label": "GeneratePlatformConfigFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePlatformConfigFiles(const FProjectInformation& InProjectInfo, FText& OutFailReason)"
  },
  {
    "label": "GenerateBasicSourceCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateBasicSourceCode(const FString& NewProjectSourcePath, const FString& NewProjectName, const FString& NewProjectRoot, TArray<FString>& OutGeneratedStartupModuleNames, TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "GenerateGameFrameworkSourceCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateGameFrameworkSourceCode(const FString& NewProjectSourcePath, const FString& NewProjectName, TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "GenerateCodeProjectGenerationBatchFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCodeProjectGenerationBatchFile(const FString& ProjectFolder, TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "GenerateLaunchBatchFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateLaunchBatchFile(const FString& ProjectName, const FString& ProjectFolder, bool bLaunchEditor, TArray<FString>& OutCreatedFiles, FText& OutFailReason)"
  },
  {
    "label": "MakeCopyrightLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeCopyrightLine()"
  },
  {
    "label": "GenerateClassHeaderFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateClassHeaderFile(const FString& NewHeaderFileName, const FString UnPrefixedClassName, const FNewClassInfo ParentClassInfo, const TArray<FString>& ClassSpecifierList, const FString& ClassProperties, const FString& ClassFunctionDeclarations, FString& OutSyncLocation, const FModuleContextInfo& ModuleInfo, bool bDeclareConstructor, FText& OutFailReason)"
  },
  {
    "label": "HarvestCursorSyncLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HarvestCursorSyncLocation(FString& FinalOutput, FString& OutSyncLocation)"
  },
  {
    "label": "GenerateClassCPPFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateClassCPPFile(const FString& NewCPPFileName, const FString UnPrefixedClassName, const FNewClassInfo ParentClassInfo, const TArray<FString>& AdditionalIncludes, const TArray<FString>& PropertyOverrides, const FString& AdditionalMemberDefinitions, FString& OutSyncLocation, const FModuleContextInfo& ModuleInfo, FText& OutFailReason)"
  },
  {
    "label": "GenerateGameModuleTargetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateGameModuleTargetFile(const FString& NewTargetFileName, const FString& ModuleName, const TArray<FString>& ExtraModuleNames, FText& OutFailReason)"
  },
  {
    "label": "GenerateEditorModuleBuildFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateEditorModuleBuildFile(const FString& NewBuildFileName, const FString& ModuleName, const TArray<FString>& PublicDependencyModuleNames, const TArray<FString>& PrivateDependencyModuleNames, FText& OutFailReason)"
  },
  {
    "label": "GenerateEditorModuleTargetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateEditorModuleTargetFile(const FString& NewTargetFileName, const FString& ModuleName, const TArray<FString>& ExtraModuleNames, FText& OutFailReason)"
  },
  {
    "label": "GenerateGameModuleCPPFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateGameModuleCPPFile(const FString& NewGameModuleCPPFileName, const FString& ModuleName, const FString& GameName, FText& OutFailReason)"
  },
  {
    "label": "GenerateGameModuleHeaderFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateGameModuleHeaderFile(const FString& NewGameModuleHeaderFileName, const TArray<FString>& PublicHeaderIncludes, FText& OutFailReason)"
  },
  {
    "label": "ReplaceWildcard()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReplaceWildcard(const FString& Input, const FString& From, const FString& To, bool bLeadingTab = false, bool bTrailingNewLine = false)"
  },
  {
    "label": "OnUpdateProjectConfirm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateProjectConfirm()"
  },
  {
    "label": "GetProjectCodeFilenames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProjectCodeFilenames(TArray<FString>& OutProjectCodeFilenames)"
  },
  {
    "label": "UpdateProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProject(const FProjectDescriptorModifier& Modifier)"
  },
  {
    "label": "UpdateProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProject()"
  },
  {
    "label": "UpdateProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProject(const TArray<FString>* StartupModuleNames)"
  },
  {
    "label": "OnUpdateProjectCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateProjectCancel()"
  },
  {
    "label": "UpdateGameProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProjectFile(const FString& ProjectFilename, const FString& EngineIdentifier, const TArray<FString>* StartupModuleNames, FText& OutFailReason)"
  },
  {
    "label": "UpdateGameProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProjectFile(const FString& ProjectFilename, const FString& EngineIdentifier, const FProjectDescriptorModifier& Modifier, FText& OutFailReason)"
  },
  {
    "label": "UpdateGameProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProjectFile(const FString& ProjectFilename, const FString& EngineIdentifier, FText& OutFailReason)"
  },
  {
    "label": "CheckoutGameProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckoutGameProjectFile(const FString& ProjectFilename, FText& OutFailReason)"
  },
  {
    "label": "AddCodeToProject_Internal()",
    "kind": "Method",
    "detail": "Function (EAddCodeToProjectResult)",
    "insertText": "AddCodeToProject_Internal(const FString& NewClassName, const FString& NewClassPath, const FModuleContextInfo& ModuleInfo, const FNewClassInfo ParentClassInfo, const TSet<FString>& DisallowedHeaderNames, FString& OutHeaderFilePath, FString& OutCppFilePath, FText& OutFailReason, EReloadStatus& OutReloadStatus)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FDoesClassNeedAPIExportCallback, const FString&)"
  },
  {
    "label": "IsValidBaseClassForCreation_Internal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseClassForCreation_Internal(const UClass* InClass, const FDoesClassNeedAPIExportCallback& InDoesClassNeedAPIExport)"
  },
  {
    "label": "OnWarningReasonOk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWarningReasonOk()"
  },
  {
    "label": "FindSourceFileInProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindSourceFileInProject(const FString& InFilename, const FString& InSearchPath, FString& OutPath)"
  },
  {
    "label": "GetRequiredAdditionalDependencies()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetRequiredAdditionalDependencies(const FNewClassInfo& ClassInfo)"
  },
  {
    "label": "UpdateStartupModuleNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateStartupModuleNames(FProjectDescriptor& Descriptor, const TArray<FString>* StartupModuleNames)"
  },
  {
    "label": "UpdateRequiredAdditionalDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRequiredAdditionalDependencies(FProjectDescriptor& Descriptor, TArray<FString>& RequiredDependencies, const FString& ModuleName)"
  },
  {
    "label": "UpdateProject_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProject_Impl(const FProjectDescriptorModifier* Modifier)"
  },
  {
    "label": "UpdateGameProjectFile_Impl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGameProjectFile_Impl(const FString& ProjectFilename, const FString& EngineIdentifier, const FProjectDescriptorModifier* Modifier, FText& OutFailReason)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SNotificationItem> UpdateGameProjectNotification ; TWeakPtr<SNotificationItem> WarningProjectNameNotification ; bool bUseAudioMixerForAllPlatforms ; const TCHAR IncludePathFormatString [ ] =)",
    "insertText": "TEXT(\"#include \\\"%s\\\"\")"
  }
]