[
  {
    "label": "search_site_config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "search_site_config"
  },
  {
    "label": "buf_2d",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "buf_2d"
  },
  {
    "label": "VP9_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9_COMP"
  },
  {
    "label": "SPEED_FEATURES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPEED_FEATURES"
  },
  {
    "label": "macroblock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblock"
  },
  {
    "label": "mv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mv"
  },
  {
    "label": "vp9_variance_vtable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vp9_variance_vtable"
  },
  {
    "label": "TplDepStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TplDepStats"
  },
  {
    "label": "TplDepFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TplDepFrame"
  },
  {
    "label": "MotionField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MotionField"
  },
  {
    "label": "MAX_FULL_PEL_VAL()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_ENCODER_VP9_MCOMP_H_ # define VPX_VP9_ENCODER_VP9_MCOMP_H_ # include \" vp9 / encoder / vp9_block . h \" # if CONFIG_NON_GREEDY_MV # include \" vp9 / encoder / vp9_non_greedy_mv . h \" # endif # include \" vpx_dsp / variance . h \" # ifdef __cplusplus \" C \" { # endif # define MAX_MVSEARCH_STEPS 1 1 # define)",
    "insertText": "MAX_FULL_PEL_VAL((1 << (MAX_MVSEARCH_STEPS - 1)) - 1) #define MAX_FIRST_STEP (1 << (MAX_MVSEARCH_STEPS - 1)) #define BORDER_MV_PIXELS_B16 (16 + VP9_INTERP_EXTEND)"
  },
  {
    "label": "get_buf_from_mv()",
    "kind": "Method",
    "detail": "Function (MV ss_mv [ 8* MAX_MVSEARCH_STEPS ] ; intptr_t ss_os [ 8* MAX_MVSEARCH_STEPS ] ; int searches_per_step ; int total_steps ; } search_site_config ; const uint8_t*)",
    "insertText": "get_buf_from_mv(const struct buf_2d *buf, const MV *mv)"
  },
  {
    "label": "vp9_init3smotion_compensation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_init3smotion_compensation(search_site_config *cfg, int stride)"
  },
  {
    "label": "vp9_set_mv_search_range()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_mv_search_range(MvLimits *mv_limits, const MV *mv)"
  },
  {
    "label": "vp9_mv_bit_cost()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_mv_bit_cost(const MV *mv, const MV *ref, const int *mvjcost, int *mvcost[2], int weight)"
  },
  {
    "label": "vp9_get_mvpred_var()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_mvpred_var(const MACROBLOCK *x, const MV *best_mv, const MV *center_mv, const vp9_variance_fn_ptr_t *vfp, int use_mvcost)"
  },
  {
    "label": "vp9_get_mvpred_av_var()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_mvpred_av_var(const MACROBLOCK *x, const MV *best_mv, const MV *center_mv, const uint8_t *second_pred, const vp9_variance_fn_ptr_t *vfp, int use_mvcost)"
  },
  {
    "label": "vp9_init_search_range()",
    "kind": "Method",
    "detail": "Function (struct VP9_COMP ; struct SPEED_FEATURES ; int)",
    "insertText": "vp9_init_search_range(int size)"
  },
  {
    "label": "vp9_refining_search_sad()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_refining_search_sad(const struct macroblock *x, struct mv *ref_mv, int error_per_bit, int search_range, const struct vp9_variance_vtable *fn_ptr, const struct mv *center_mv)"
  },
  {
    "label": "vp9_int_pro_motion_estimation()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "vp9_int_pro_motion_estimation(const struct VP9_COMP *cpi, MACROBLOCK *x, BLOCK_SIZE bsize, int mi_row, int mi_col, const MV *ref_mv)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "uint32_t(fractional_mv_step_fp)( const MACROBLOCK *x, MV *bestmv, const MV *ref_mv, int allow_hp, int error_per_bit, const vp9_variance_fn_ptr_t *vfp, int forced_stop, int iters_per_step, int *cost_list, int *mvjcost, int *mvcost[2], uint32_t *distortion, uint32_t *sse1, const uint8_t *second_pred, int w, int h, int use_accurate_subpel_search)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (fractional_mv_step_fp vp9_find_best_sub_pixel_tree ; fractional_mv_step_fp vp9_find_best_sub_pixel_tree_pruned ; fractional_mv_step_fp vp9_find_best_sub_pixel_tree_pruned_more ; fractional_mv_step_fp vp9_find_best_sub_pixel_tree_pruned_evenmore ; fractional_mv_step_fp vp9_skip_sub_pixel_tree ; fractional_mv_step_fp vp9_return_max_sub_pixel_mv ; fractional_mv_step_fp vp9_return_min_sub_pixel_mv ; typedef)",
    "insertText": "int(*vp9_diamond_search_fn_t)( const MACROBLOCK *x, const search_site_config *cfg, MV *ref_mv, MV *best_mv, int search_param, int sad_per_bit, int *num00, const vp9_variance_fn_ptr_t *fn_ptr, const MV *center_mv)"
  },
  {
    "label": "vp9_refining_search_8p_c()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_refining_search_8p_c(const MACROBLOCK *x, MV *ref_mv, int error_per_bit, int search_range, const vp9_variance_fn_ptr_t *fn_ptr, const MV *center_mv, const uint8_t *second_pred)"
  },
  {
    "label": "vp9_full_pixel_search()",
    "kind": "Method",
    "detail": "Function (struct VP9_COMP ; int)",
    "insertText": "vp9_full_pixel_search(const struct VP9_COMP *const cpi, const MACROBLOCK *const x, BLOCK_SIZE bsize, MV *mvp_full, int step_param, int search_method, int error_per_bit, int *cost_list, const MV *ref_mv, MV *tmp_mv, int var_max, int rd)"
  },
  {
    "label": "vp9_set_subpel_mv_search_range()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_set_subpel_mv_search_range(MvLimits *subpel_mv_limits, const MvLimits *umv_window_limits, const MV *ref_mv)"
  },
  {
    "label": "vp9_refining_search_sad_new()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_NON_GREEDY_MV struct TplDepStats ; int64_t)",
    "insertText": "vp9_refining_search_sad_new(const MACROBLOCK *x, MV *best_full_mv, int lambda, int search_range, const vp9_variance_fn_ptr_t *fn_ptr, const int_mv *nb_full_mvs, int full_mv_num)"
  },
  {
    "label": "vp9_full_pixel_diamond_new()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_full_pixel_diamond_new(const struct VP9_COMP *cpi, MACROBLOCK *x, BLOCK_SIZE bsize, MV *mvp_full, int step_param, int lambda, int do_refine, const int_mv *nb_full_mvs, int full_mv_num, MV *best_mv)"
  },
  {
    "label": "get_full_mv()",
    "kind": "Method",
    "detail": "Function (MV)",
    "insertText": "get_full_mv(const MV *mv)"
  },
  {
    "label": "vp9_prepare_nb_full_mvs()",
    "kind": "Method",
    "detail": "Function (MV out_mv ; out_mv . row = mv -> row>> 3 ; out_mv . col = mv -> col>> 3 ; return out_mv ; } struct TplDepFrame ; int)",
    "insertText": "vp9_prepare_nb_full_mvs(const struct MotionField *motion_field, int mi_row, int mi_col, int_mv *nb_full_mvs)"
  },
  {
    "label": "get_square_block_size()",
    "kind": "Method",
    "detail": "Function (BLOCK_SIZE)",
    "insertText": "get_square_block_size(BLOCK_SIZE bsize)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (BLOCK_SIZE square_bsize ;)",
    "insertText": "switch(bsize)"
  }
]