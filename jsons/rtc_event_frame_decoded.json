[
  {
    "label": "LoggedFrameDecoded",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedFrameDecoded"
  },
  {
    "label": "RtcEventFrameDecoded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventFrameDecoded"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FRAME_DECODED_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FRAME_DECODED_H_ # include<stdint . h> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_codec_type . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" namespace webrtc { struct LoggedFrameDecoded { int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "RtcEventFrameDecoded()",
    "kind": "Method",
    "detail": "Function (int64_t render_time_ms ; uint32_t ssrc ; int width ; int height ; VideoCodecType codec ; uint8_t qp ; } ; class RtcEventFrameDecoded final : public RtcEvent { public : Type kType = Type::FrameDecoded ;)",
    "insertText": "RtcEventFrameDecoded(int64_t render_time_ms, uint32_t ssrc, int width, int height, VideoCodecType codec, uint8_t qp)"
  },
  {
    "label": "RtcEventFrameDecoded()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventFrameDecoded()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "render_time_ms()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "render_time_ms()"
  },
  {
    "label": "RtcEventFrameDecoded()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventFrameDecoded(const RtcEventFrameDecoded& other)"
  }
]