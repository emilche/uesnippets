[
  {
    "label": "SSubobjectEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobjectEditor"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SExtensionPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SExtensionPanel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FSubobjectEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubobjectEditorTreeNode"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "ISCSEditorUICustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISCSEditorUICustomization"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FSubobjectEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubobjectEditorTreeNode"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "SUBOBJECTEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUBOBJECTEDITOR_API"
  },
  {
    "label": "EFilteredState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFilteredState"
  },
  {
    "label": "SSubobjectEditorDragDropTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobjectEditorDragDropTree"
  },
  {
    "label": "SSubobject_RowWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobject_RowWidget"
  },
  {
    "label": "viewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "viewer"
  },
  {
    "label": "SUBOBJECTEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUBOBJECTEDITOR_API"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Utils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Utils"
  },
  {
    "label": "FSubobjectEditorTreeNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FSubobjectEditorTreeNode(const FSubobjectDataHandle& DataSource, bool InbIsSeperator = false)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(FSubobjectEditorTreeNodePtrType AttachToPtr)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild(FSubobjectEditorTreeNodePtrType InChildNodePtr)"
  },
  {
    "label": "FindChild()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindChild(const FSubobjectDataHandle& InHandle)"
  },
  {
    "label": "SetCachedFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedFilterState(bool bMatchesFilter, bool bUpdateParent)"
  },
  {
    "label": "ApplyFilteredStateToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilteredStateToParent()"
  },
  {
    "label": "RefreshCachedChildFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCachedChildFilterState(bool bUpdateParent)"
  },
  {
    "label": "RefreshFilteredState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshFilteredState(const UClass* InFilterType, const TArray<FString>& InFilterTerms, bool bRecursive)"
  },
  {
    "label": "SetOngoingCreateTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOngoingCreateTransaction(TUniquePtr<FScopedTransaction> InTransaction)"
  },
  {
    "label": "CloseOngoingCreateTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOngoingCreateTransaction()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TWeakPtr<SSubobjectEditor> InEditor, FSubobjectEditorTreeNodePtrType InNodePtr, TSharedPtr<STableViewBase> InOwnerTableView)"
  },
  {
    "label": "HandleOnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleOnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleOnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleOnCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleOnCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, FSubobjectEditorTreeNodePtrType TargetItem)"
  },
  {
    "label": "HandleOnAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOnAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, FSubobjectEditorTreeNodePtrType TargetItem)"
  },
  {
    "label": "AddToToolTipInfoBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToToolTipInfoBox(const TSharedRef<SVerticalBox>& InfoBox, const FText& Key, TSharedRef<SWidget> ValueIcon, const TAttribute<FText>& Value, bool bImportant)"
  },
  {
    "label": "GetInheritedLinkWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetInheritedLinkWidget()"
  },
  {
    "label": "OnEditBlueprintClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditBlueprintClicked()"
  },
  {
    "label": "OnEditNativeCppClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditNativeCppClicked()"
  },
  {
    "label": "OnNameTextCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommit(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnNameTextVerifyChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnNameTextVerifyChanged(const FText& InNewText, FText& OutErrorMessage)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSelectionUpdated, const TArray<FSubobjectEditorTreeNodePtrType>&)"
  },
  {
    "label": "MakeTableRowWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeTableRowWidget(FSubobjectEditorTreeNodePtrType InNodePtr, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetChildrenForTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenForTree(FSubobjectEditorTreeNodePtrType InNodePtr, TArray<FSubobjectEditorTreeNodePtrType>& OutChildren)"
  },
  {
    "label": "UpdateSelectionFromNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionFromNodes(const TArray<FSubobjectEditorTreeNodePtrType>& SelectedNodes)"
  },
  {
    "label": "OnTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeSelectionChanged(FSubobjectEditorTreeNodePtrType InSelectedNodePtr, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDoubleClicked(FSubobjectEditorTreeNodePtrType InItem)"
  },
  {
    "label": "OnFindReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFindReferences(bool bSearchAllBlueprints, const EGetFindReferenceSearchStringFlags Flags)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView(FSubobjectEditorTreeNodePtrType InItem, const TSharedPtr<ITableRow>& InWidget)"
  },
  {
    "label": "SelectNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNode(FSubobjectEditorTreeNodePtrType InNodeToSelect, bool bIsCntrlDown)"
  },
  {
    "label": "SelectNodeFromHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeFromHandle(const FSubobjectDataHandle& InHandle, bool bIsCntrlDown)"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree(bool bRegenerateTreeNodes = true)"
  },
  {
    "label": "DumpTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpTree()"
  },
  {
    "label": "RefreshSelectionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelectionDetails()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SelectRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRoot()"
  },
  {
    "label": "TryHandleAssetDragDropOperation()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "TryHandleAssetDragDropOperation(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SetUICustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUICustomization(TSharedPtr<ISCSEditorUICustomization> InUICustomization)"
  },
  {
    "label": "RefreshComponentTypesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshComponentTypesList()"
  },
  {
    "label": "RestoreSelectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSelectionState(TArray<FSubobjectEditorTreeNodePtrType>& SelectedTreeNodes, bool bFallBackToVariableName = true)"
  },
  {
    "label": "CutSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedNodes()"
  },
  {
    "label": "OnRenameComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameComponent()"
  },
  {
    "label": "OnRenameComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameComponent(TUniquePtr<FScopedTransaction> InComponentCreateTransaction)"
  },
  {
    "label": "OnPostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostTick(float)"
  },
  {
    "label": "CreateMenuBuilder()",
    "kind": "Method",
    "detail": "Function (FMenuBuilder)",
    "insertText": "CreateMenuBuilder()"
  },
  {
    "label": "ConstructTreeWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructTreeWidget()"
  },
  {
    "label": "CreateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommandList()"
  },
  {
    "label": "FindOrCreateSlateNodeForHandle()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindOrCreateSlateNodeForHandle(const FSubobjectDataHandle& Handle, TMap<FSubobjectDataHandle, FSubobjectEditorTreeNodePtrType>& ExistingNodes)"
  },
  {
    "label": "SetNodeExpansionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeExpansionState(FSubobjectEditorTreeNodePtrType InNodeToChange, const bool bIsExpanded)"
  },
  {
    "label": "SetItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansionRecursive(FSubobjectEditorTreeNodePtrType Model, bool bInExpansionState)"
  },
  {
    "label": "RegisterContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterContextMenu()"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenu()"
  },
  {
    "label": "PopulateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateContextMenu(UToolMenu* InMenu)"
  },
  {
    "label": "RefreshFilteredState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshFilteredState(FSubobjectEditorTreeNodePtrType TreeNode, bool bRecursive)"
  },
  {
    "label": "OnPromoteToBlueprintClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPromoteToBlueprintClicked()"
  },
  {
    "label": "PerformComboAddClass()",
    "kind": "Method",
    "detail": "Function (FSubobjectDataHandle)",
    "insertText": "PerformComboAddClass(TSubclassOf<UActorComponent> ComponentClass, EComponentCreateAction::Type ComponentCreateAction, UObject* AssetOverride)"
  },
  {
    "label": "PopulateHandlesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateHandlesArray(const TArray<FSubobjectEditorTreeNodePtrType>& SlateNodePtrs, TArray<FSubobjectDataHandle>& OutHandles)"
  }
]