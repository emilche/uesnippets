[
  {
    "label": "SSubobjectEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobjectEditor"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SExtensionPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SExtensionPanel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FSubobjectEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubobjectEditorTreeNode"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "ISCSEditorUICustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISCSEditorUICustomization"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "SUBOBJECTEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUBOBJECTEDITOR_API"
  },
  {
    "label": "EFilteredState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFilteredState"
  },
  {
    "label": "SSubobjectEditorDragDropTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobjectEditorDragDropTree"
  },
  {
    "label": "SSubobject_RowWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobject_RowWidget"
  },
  {
    "label": "Utils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Utils"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / ActorComponent . h \" # include \" Components / SceneComponent . h \" # include \" SubobjectDataSubsystem . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Framework / Commands / UICommandList . h \" # include \" SComponentClassCombo . h \" # include \" BlueprintEditor . h \" # include \" ScopedTransaction . h \" class SSubobjectEditor ; class SToolTip ; class SExtensionPanel ; class AActor ; class FSubobjectEditorTreeNode ; class SInlineEditableTextBlock ; class ISCSEditorUICustomization ; class UBlueprint ; class UToolMenu ; class UPrimitiveComponent ; using FSubobjectEditorTreeNodePtrType = TSharedPtr<class FSubobjectEditorTreeNode> ; class FSubobjectEditorTreeNode : public TSharedFromThis<FSubobjectEditorTreeNode> { public :)",
    "insertText": "DECLARE_DELEGATE(FOnRenameRequested)"
  },
  {
    "label": "FSubobjectEditorTreeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubobjectEditorTreeNode(const FSubobjectDataHandle& DataSource, bool InbIsSeperator = false)"
  },
  {
    "label": "FSubobjectEditorTreeNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSubobjectEditorTreeNode()"
  },
  {
    "label": "IsSeperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeperator()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetObject(bool bEvenIfPendingKill = false)"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (FSubobjectData*)",
    "insertText": "GetDataSource()"
  },
  {
    "label": "GetDataHandle()",
    "kind": "Method",
    "detail": "Function (FSubobjectDataHandle)",
    "insertText": "GetDataHandle()"
  },
  {
    "label": "IsComponentNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentNode()"
  },
  {
    "label": "IsRootActorNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootActorNode()"
  },
  {
    "label": "CanReparent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReparent()"
  },
  {
    "label": "GetVariableName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetVariableName()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsChildSubtreeNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsChildSubtreeNode()"
  },
  {
    "label": "IsNativeComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeComponent()"
  },
  {
    "label": "IsAttachedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttachedTo(FSubobjectEditorTreeNodePtrType InNodePtr)"
  },
  {
    "label": "IsDirectlyAttachedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectlyAttachedTo(FSubobjectEditorTreeNodePtrType InNodePtr)"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete()"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<FSubobjectEditorTreeNodePtrType>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild(FSubobjectEditorTreeNodePtrType InChildNodePtr)"
  },
  {
    "label": "FindChild()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindChild(const FSubobjectDataHandle& InHandle)"
  },
  {
    "label": "IsFlaggedForFiltration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlaggedForFiltration()"
  },
  {
    "label": "SetCachedFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedFilterState(bool bMatchesFilter, bool bUpdateParent)"
  },
  {
    "label": "ApplyFilteredStateToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilteredStateToParent()"
  },
  {
    "label": "RefreshCachedChildFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCachedChildFilterState(bool bUpdateParent)"
  },
  {
    "label": "RefreshFilteredState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshFilteredState(const UClass* InFilterType, const TArray<FString>& InFilterTerms, bool bRecursive)"
  },
  {
    "label": "MatchesFilterType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesFilterType(const UClass* InFilterType)"
  },
  {
    "label": "SetOngoingCreateTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOngoingCreateTransaction(TUniquePtr<FScopedTransaction> InTransaction)"
  },
  {
    "label": "CloseOngoingCreateTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOngoingCreateTransaction()"
  },
  {
    "label": "GetOngoingCreateTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOngoingCreateTransaction(TUniquePtr<FScopedTransaction>& OutPtr)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutPtr =)",
    "insertText": "MoveTemp(OngoingCreateTransaction)"
  },
  {
    "label": "HasOngoingTransaction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOngoingTransaction()"
  },
  {
    "label": "SetRenameRequestedDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRenameRequestedDelegate(FOnRenameRequested InRenameRequested)"
  },
  {
    "label": "GetRenameRequestedDelegate()",
    "kind": "Method",
    "detail": "Function (RenameRequestedDelegate = InRenameRequested ; } FOnRenameRequested)",
    "insertText": "GetRenameRequestedDelegate()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (uint8 FilterFlags ; uint8 bIsSeperator : 1 ; } ; class SSubobjectEditorDragDropTree : public STreeView<FSubobjectEditorTreeNodePtrType> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSubobjectEditorDragDropTree) : _SubobjectEditor(nullptr) , _OnGenerateRow() , _OnGetChildren() , _OnSetExpansionRecursive() , _TreeItemsSource(static_cast<TArray<FSubobjectEditorTreeNodePtrType>*>(nullptr)) , _ItemHeight(16) , _OnContextMenuOpening() , _OnMouseButtonDoubleClick() , _OnSelectionChanged() , _SelectionMode(ESelectionMode::Multi) , _ClearSelectionOnClick(true) , _ExternalScrollbar() , _OnTableViewBadState()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ARGUMENT(SSubobjectEditor*, SubobjectEditor) SLATE_EVENT(FOnGenerateRow, OnGenerateRow) SLATE_EVENT(FOnItemScrolledIntoView, OnItemScrolledIntoView) SLATE_EVENT(FOnGetChildren, OnGetChildren) SLATE_EVENT(FOnSetExpansionRecursive, OnSetExpansionRecursive) SLATE_ARGUMENT(TArray<FSubobjectEditorTreeNodePtrType>*, TreeItemsSource) SLATE_ATTRIBUTE_DEPRECATED(float, ItemHeight, 5.5, \"The ItemHeight is only used for Tile. See ShouldArrangeAsTiles\") SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT(FOnMouseButtonDoubleClick, OnMouseButtonDoubleClick) SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged) SLATE_ATTRIBUTE(ESelectionMode::Type, SelectionMode) SLATE_ARGUMENT(TSharedPtr<SHeaderRow>, HeaderRow) SLATE_ARGUMENT(bool, ClearSelectionOnClick) SLATE_ARGUMENT(TSharedPtr<SScrollBar>, ExternalScrollbar) SLATE_EVENT(FOnTableViewBadState, OnTableViewBadState) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : SSubobjectEditor* SubobjectEditor ; } ; class SSubobject_RowWidget : public SMultiColumnTableRow<FSubobjectEditorTreeNodePtrType> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSubobject_RowWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TWeakPtr<SSubobjectEditor> InEditor, FSubobjectEditorTreeNodePtrType InNodePtr, TSharedPtr<STableViewBase> InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (protected : ESelectionMode::Type)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "HandleOnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleOnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleOnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleOnCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleOnCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, FSubobjectEditorTreeNodePtrType TargetItem)"
  },
  {
    "label": "HandleOnAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOnAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, FSubobjectEditorTreeNodePtrType TargetItem)"
  },
  {
    "label": "GetAssetName()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "GetAssetName()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "GetNameLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameLabel()"
  },
  {
    "label": "GetAssetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAssetVisibility()"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "GetColorTintForIcon()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColorTintForIcon()"
  },
  {
    "label": "GetSubobjectPtr()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "GetSubobjectPtr()"
  },
  {
    "label": "CreateToolTipWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SToolTip>)",
    "insertText": "CreateToolTipWidget()"
  },
  {
    "label": "CreateComponentTooltipWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SToolTip>)",
    "insertText": "CreateComponentTooltipWidget(const FSubobjectEditorTreeNodePtrType& InNode)"
  },
  {
    "label": "CreateActorTooltipWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SToolTip>)",
    "insertText": "CreateActorTooltipWidget(const FSubobjectEditorTreeNodePtrType& InNode)"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetActorClassNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActorClassNameText()"
  },
  {
    "label": "GetActorSuperClassNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActorSuperClassNameText()"
  },
  {
    "label": "GetActorMobilityText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActorMobilityText()"
  },
  {
    "label": "GetInheritedLinkWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetInheritedLinkWidget()"
  },
  {
    "label": "GetObjectContextText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetObjectContextText()"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationLink()"
  },
  {
    "label": "GetDocumentationExcerptName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationExcerptName()"
  },
  {
    "label": "OnEditBlueprintClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditBlueprintClicked()"
  },
  {
    "label": "GetEditBlueprintVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditBlueprintVisibility()"
  },
  {
    "label": "GetEditNativeCppVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditNativeCppVisibility()"
  },
  {
    "label": "OnEditNativeCppClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditNativeCppClicked()"
  },
  {
    "label": "GetMobilityToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMobilityToolTipText()"
  },
  {
    "label": "GetMobilityIconImage()",
    "kind": "Method",
    "detail": "Function (FSlateBrush const*)",
    "insertText": "GetMobilityIconImage()"
  },
  {
    "label": "GetIntroducedInToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIntroducedInToolTipText()"
  },
  {
    "label": "GetComponentAddSourceToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetComponentAddSourceToolTipText()"
  },
  {
    "label": "GetComponentEditorOnlyTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetComponentEditorOnlyTooltipText()"
  },
  {
    "label": "GetNativeComponentNameToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNativeComponentNameToolTipText()"
  },
  {
    "label": "GetActorDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetActorDisplayText()"
  },
  {
    "label": "OnNameTextCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommit(const FText& InNewName, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "OnNameTextVerifyChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnNameTextVerifyChanged(const FText& InNewText, FText& OutErrorMessage)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SSubobjectEditor> SubobjectEditor ; TSharedPtr<SInlineEditableTextBlock> InlineWidget ; FSubobjectEditorTreeNodePtrType SubobjectPtr ; } ; class SSubobjectEditor : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSelectionUpdated, const TArray<FSubobjectEditorTreeNodePtrType>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnItemDoubleClicked, const FSubobjectEditorTreeNodePtrType)"
  },
  {
    "label": "SSubobjectEditor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SSubobjectEditor()"
  },
  {
    "label": "MakeTableRowWidget()",
    "kind": "Method",
    "detail": "Function (FOnSelectionUpdated OnSelectionUpdated ; FOnItemDoubleClicked OnItemDoubleClicked ; TAttribute<UObject*> ObjectContext ; TAttribute<bool> AllowEditing ; TAttribute<bool> HideComponentClassCombo ; TAttribute<TSubclassOf<UActorComponent>> ComponentTypeFilter ; protected : TSharedRef<ITableRow>)",
    "insertText": "MakeTableRowWidget(FSubobjectEditorTreeNodePtrType InNodePtr, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetComponentsTreeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetComponentsTreeVisibility()"
  },
  {
    "label": "OnGetChildrenForTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenForTree(FSubobjectEditorTreeNodePtrType InNodePtr, TArray<FSubobjectEditorTreeNodePtrType>& OutChildren)"
  },
  {
    "label": "UpdateSelectionFromNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionFromNodes(const TArray<FSubobjectEditorTreeNodePtrType>& SelectedNodes)"
  },
  {
    "label": "OnTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTreeSelectionChanged(FSubobjectEditorTreeNodePtrType InSelectedNodePtr, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemDoubleClicked(FSubobjectEditorTreeNodePtrType InItem)"
  },
  {
    "label": "OnFindReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFindReferences(bool bSearchAllBlueprints, const EGetFindReferenceSearchStringFlags Flags)"
  },
  {
    "label": "GetComponentsFilterBoxVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetComponentsFilterBoxVisibility()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView(FSubobjectEditorTreeNodePtrType InItem, const TSharedPtr<ITableRow>& InWidget)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SelectNode()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SelectNode(FSubobjectEditorTreeNodePtrType InNodeToSelect, bool bIsCntrlDown)"
  },
  {
    "label": "SelectNodeFromHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeFromHandle(const FSubobjectDataHandle& InHandle, bool bIsCntrlDown)"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree(bool bRegenerateTreeNodes = true)"
  },
  {
    "label": "DumpTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpTree()"
  },
  {
    "label": "RefreshSelectionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelectionDetails()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SelectRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRoot()"
  },
  {
    "label": "GetColorTintForIcon()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColorTintForIcon(FSubobjectEditorTreeNodePtrType Node)"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (TArray<FSubobjectEditorTreeNodePtrType>)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "GetNumSelectedNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSelectedNodes()"
  },
  {
    "label": "GetSelectedHandles()",
    "kind": "Method",
    "detail": "Function (} TArray<FSubobjectDataHandle>)",
    "insertText": "GetSelectedHandles()"
  },
  {
    "label": "GetSceneRootNode()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "GetSceneRootNode()"
  },
  {
    "label": "TryHandleAssetDragDropOperation()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "TryHandleAssetDragDropOperation(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SetUICustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUICustomization(TSharedPtr<ISCSEditorUICustomization> InUICustomization)"
  },
  {
    "label": "IsEditingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingAllowed()"
  },
  {
    "label": "GetToolButtonsBox()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetToolButtonsBox()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FSubobjectEditorTreeNodePtrType> DroppedNodePtrs ; DroppedNodePtrs .)",
    "insertText": "Add(DroppedNodePtr)"
  },
  {
    "label": "OnAttachToDropAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachToDropAction(DroppedOn, DroppedNodePtrs)"
  },
  {
    "label": "OnAttachToDropAction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAttachToDropAction(FSubobjectEditorTreeNodePtrType DroppedOn, const TArray<FSubobjectEditorTreeNodePtrType>& DroppedNodePtrs)"
  },
  {
    "label": "OnDetachFromDropAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDetachFromDropAction(const TArray<FSubobjectEditorTreeNodePtrType>& DroppedNodePtrs)"
  },
  {
    "label": "OnMakeNewRootDropAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMakeNewRootDropAction(FSubobjectEditorTreeNodePtrType DroppedNodePtr)"
  },
  {
    "label": "PostDragDropAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDragDropAction(bool bRegenerateTreeNodes)"
  },
  {
    "label": "BuildSceneRootDropActionMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildSceneRootDropActionMenu(FSubobjectEditorTreeNodePtrType DroppedOntoNodePtr, FSubobjectEditorTreeNodePtrType DroppedNodePtr)"
  },
  {
    "label": "CanMakeNewRootOnDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMakeNewRootOnDrag(UBlueprint* DraggedFromBlueprint)"
  },
  {
    "label": "FindSlateNodeForObject()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindSlateNodeForObject(const UObject* InObject, bool bIncludeAttachmentComponents = true)"
  },
  {
    "label": "IsComponentSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentSelected(const UPrimitiveComponent* PrimComponent)"
  },
  {
    "label": "SetSelectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionOverride(UPrimitiveComponent* PrimComponent)"
  },
  {
    "label": "GetSelectedItemsForContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedItemsForContextMenu(TArray<FComponentEventConstructionData>& OutSelectedItems)"
  },
  {
    "label": "GetRootNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<FSubobjectEditorTreeNodePtrType>&)",
    "insertText": "GetRootNodes()"
  },
  {
    "label": "FindSlateNodeForVariableName()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindSlateNodeForVariableName(FName InVariableName)"
  },
  {
    "label": "GetObjectContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectContext()"
  },
  {
    "label": "GetObjectContextHandle()",
    "kind": "Method",
    "detail": "Function (FSubobjectDataHandle)",
    "insertText": "GetObjectContextHandle()"
  },
  {
    "label": "RefreshComponentTypesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshComponentTypesList()"
  },
  {
    "label": "RestoreSelectionState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RestoreSelectionState(TArray<FSubobjectEditorTreeNodePtrType>& SelectedTreeNodes, bool bFallBackToVariableName = true)"
  },
  {
    "label": "ShouldModifyBPOnAssetDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldModifyBPOnAssetDrop()"
  },
  {
    "label": "CutSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedNodes()"
  },
  {
    "label": "CanCopyNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyNodes()"
  },
  {
    "label": "CopySelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedNodes()"
  },
  {
    "label": "CanPasteNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteNodes()"
  },
  {
    "label": "PasteNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteNodes()"
  },
  {
    "label": "CanDeleteNodes()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanDeleteNodes()"
  },
  {
    "label": "OnDeleteNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteNodes()"
  },
  {
    "label": "CanDuplicateComponent()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanDuplicateComponent()"
  },
  {
    "label": "OnDuplicateComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDuplicateComponent()"
  },
  {
    "label": "CanRenameComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameComponent()"
  },
  {
    "label": "OnRenameComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameComponent()"
  },
  {
    "label": "OnRenameComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameComponent(TUniquePtr<FScopedTransaction> InComponentCreateTransaction)"
  },
  {
    "label": "OnPostTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostTick(float)"
  },
  {
    "label": "CreateMenuBuilder()",
    "kind": "Method",
    "detail": "Function (TArray<FSubobjectEditorTreeNodePtrType> RootNodes ; TSharedPtr<SSubobjectEditorDragDropTree> TreeWidget ; TSharedPtr<FUICommandList> CommandList ; TSharedPtr<SSearchBox> FilterBox ; TSharedPtr<SHorizontalBox> ButtonBox ; TSharedPtr<SComponentClassCombo> ComponentClassCombo ; bool bUpdatingSelection ; bool bAllowTreeUpdates ; TSharedPtr<ISCSEditorUICustomization> UICustomization ; TSharedPtr<SExtensionPanel> ExtensionPanel ; TUniquePtr<FScopedTransaction> DeferredOngoingCreateTransaction ; FDelegateHandle PostTickHandle ; FSubobjectDataHandle DeferredRenameRequest ; FSubobjectDataHandle CachedRootHandle ; FMenuBuilder)",
    "insertText": "CreateMenuBuilder()"
  },
  {
    "label": "ConstructTreeWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructTreeWidget()"
  },
  {
    "label": "CreateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommandList()"
  },
  {
    "label": "DepthFirstTraversal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DepthFirstTraversal(const FSubobjectEditorTreeNodePtrType& InNodePtr, TSet<FSubobjectEditorTreeNodePtrType>& OutVisitedNodes, const TFunctionRef<void(const FSubobjectEditorTreeNodePtrType&)> InFunction)"
  },
  {
    "label": "GetCollapsedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollapsedNodes(const FSubobjectEditorTreeNodePtrType& InNodePtr, TSet<FSubobjectEditorTreeNodePtrType>& OutCollapsedNodes)"
  },
  {
    "label": "FindOrCreateSlateNodeForHandle()",
    "kind": "Method",
    "detail": "Function (FSubobjectEditorTreeNodePtrType)",
    "insertText": "FindOrCreateSlateNodeForHandle(const FSubobjectDataHandle& Handle, TMap<FSubobjectDataHandle, FSubobjectEditorTreeNodePtrType>& ExistingNodes)"
  },
  {
    "label": "SetNodeExpansionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeExpansionState(FSubobjectEditorTreeNodePtrType InNodeToChange, const bool bIsExpanded)"
  },
  {
    "label": "SetItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansionRecursive(FSubobjectEditorTreeNodePtrType Model, bool bInExpansionState)"
  },
  {
    "label": "RegisterContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterContextMenu()"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenu()"
  },
  {
    "label": "PopulateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateContextMenu(UToolMenu* InMenu)"
  },
  {
    "label": "PopulateContextMenuImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateContextMenuImpl(UToolMenu* InMenu, TArray<FSubobjectEditorTreeNodePtrType>& InSelectedItems, bool bIsChildActorSubtreeNodeSelected)"
  },
  {
    "label": "GetComponentTypeFilterToApply()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UActorComponent>)",
    "insertText": "GetComponentTypeFilterToApply()"
  },
  {
    "label": "RefreshFilteredState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshFilteredState(FSubobjectEditorTreeNodePtrType TreeNode, bool bRecursive)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "PromoteToBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteToBlueprint()"
  },
  {
    "label": "OnPromoteToBlueprintClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPromoteToBlueprintClicked()"
  },
  {
    "label": "OnOpenBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenBlueprintEditor(bool bForceCodeEditing)"
  },
  {
    "label": "SpawnCreateNewCppComponentWindow()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "SpawnCreateNewCppComponentWindow(TSubclassOf<UActorComponent> ComponentClass)"
  },
  {
    "label": "SpawnCreateNewBPComponentWindow()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "SpawnCreateNewBPComponentWindow(TSubclassOf<UActorComponent> ComponentClass)"
  },
  {
    "label": "PerformComboAddClass()",
    "kind": "Method",
    "detail": "Function (FSubobjectDataHandle)",
    "insertText": "PerformComboAddClass(TSubclassOf<UActorComponent> ComponentClass, EComponentCreateAction::Type ComponentCreateAction, UObject* AssetOverride)"
  },
  {
    "label": "GetPromoteToBlueprintButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPromoteToBlueprintButtonVisibility()"
  },
  {
    "label": "GetEditBlueprintButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditBlueprintButtonVisibility()"
  },
  {
    "label": "GetComponentClassComboButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetComponentClassComboButtonVisibility()"
  },
  {
    "label": "ClearSelectionOnClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearSelectionOnClick()"
  },
  {
    "label": "PopulateHandlesArray()",
    "kind": "Method",
    "detail": "Function (struct Utils { void)",
    "insertText": "PopulateHandlesArray(const TArray<FSubobjectEditorTreeNodePtrType>& SlateNodePtrs, TArray<FSubobjectDataHandle>& OutHandles)"
  }
]