[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderStateUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStateUsage"
  },
  {
    "label": "FPrecacheUsageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecacheUsageData"
  },
  {
    "label": "FPrecacheStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrecacheStats"
  },
  {
    "label": "FPrecacheStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecacheStatsCollector"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheMaterial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PSOPrecache . h \" # include \" PSOPrecacheMaterial . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" MaterialShared . h \" # define PSO_PRECACHING_TRACKING ! WITH_EDITOR&& ! UE_BUILD_SHIPPING&& ! UE_BUILD_TEST&& UE_WITH_PSO_PRECACHING # if UE_WITH_PSO_PRECACHING # if PSO_PRECACHING_VALIDATE class FPrimitiveSceneProxy ; class FMaterialRenderProxy ; void)",
    "insertText": "ConditionalBreakOnPSOPrecacheMaterial(const FMaterial& Material, int32 PSOCollectorIndex)"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBreakOnPSOPrecacheShader(const FGraphicsPipelineStateInitializer& GraphicsPSOInitializer)"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBreakOnPSOPrecacheShader(const FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "LogPSOMissInfo()",
    "kind": "Method",
    "detail": "Function (enum class EPSOPrecacheMissType : uint8 { ShadersOnly = 0,MinimalPSOState,FullPSO } ; void)",
    "insertText": "LogPSOMissInfo(const FGraphicsPipelineStateInitializer& GraphicsPSOInitializer, EPSOPrecacheMissType MissType, EPSOPrecacheResult PrecacheResult, const FMaterial* Material, const FVertexFactoryType* VFType, const FPrimitiveSceneProxy* PrimitiveSceneProxy, int32 PSOCollectorIndex, uint64 ShadersOnlyPSOInitializerHash)"
  },
  {
    "label": "LogPSOMissInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPSOMissInfo(const FRHIComputeShader& ComputeShader, EPSOPrecacheResult PrecacheResult, const FMaterial* Material, int32 PSOCollectorIndex)"
  },
  {
    "label": "GetPrecachingValidationMode()",
    "kind": "Method",
    "detail": "Function (namespace PSOCollectorStats { enum class EPSOPrecacheValidationMode : uint8 { Disabled = 0,Lightweight = 1,Full = 2 } ; EPSOPrecacheValidationMode)",
    "insertText": "GetPrecachingValidationMode()"
  },
  {
    "label": "IsPrecachingValidationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecachingValidationEnabled()"
  },
  {
    "label": "IsFullPrecachingValidationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullPrecachingValidationEnabled()"
  },
  {
    "label": "GetPSOPrecacheHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPSOPrecacheHash(const FGraphicsPipelineStateInitializer& GraphicsPSOInitializer)"
  },
  {
    "label": "GetPSOPrecacheHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPSOPrecacheHash(const FRHIComputeShader& ComputeShader)"
  },
  {
    "label": "CheckFullPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckFullPipelineStateInCache(const FGraphicsPipelineStateInitializer& Initializer, EPSOPrecacheResult PSOPrecacheResult, const FMaterialRenderProxy* Material, const FVertexFactoryType* VFType, const FPrimitiveSceneProxy* PrimitiveSceneProxy, int32 PSOCollectorIndex)"
  },
  {
    "label": "CheckComputePipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckComputePipelineStateInCache(const FRHIComputeShader& ComputeShader, EPSOPrecacheResult PSOPrecacheResult, const FMaterialRenderProxy* Material, int32 PSOCollectorIndex)"
  },
  {
    "label": "UpdateCSVStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCSVStats(EPSOPrecacheResult PSOPrecacheResult)"
  },
  {
    "label": "FPrecacheUsageData()",
    "kind": "Method",
    "detail": "Function (using VertexFactoryCountTableType = Experimental::TRobinHoodHashMap<const FVertexFactoryType*,uint32> ; struct FShaderStateUsage { bool bPrecached = false ; bool bUsed = false ; # if PSO_PRECACHING_TRACKING FString MaterialName ; int32 PSOCollectorIndex = INDEX_NONE ; const FVertexFactoryType* VertexFactoryType = nullptr ; # endif } ; class FPrecacheUsageData { public :)",
    "insertText": "FPrecacheUsageData(FName StatFName = FName()) : StatFName(StatFName)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetTotalCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetTotalCount()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(int32 PSOCollectorIndex, const FVertexFactoryType* VFType)"
  },
  {
    "label": "ShouldRecordFullStats()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldRecordFullStats(int32 PSOCollectorIndex, const FVertexFactoryType* VFType)"
  },
  {
    "label": "FPrecacheStats()",
    "kind": "Method",
    "detail": "Function (} volatile int64 Count ; FName StatFName ; FCriticalSection StatsLock ; uint32 PerMeshPassCount [ FPSOCollectorCreateManager::MaxPSOCollectorCount ] ; uint32 UntrackedMeshPassCount ; VertexFactoryCountTableType PerVertexFactoryCount ; } ; struct FPrecacheStats {)",
    "insertText": "FPrecacheStats(FName UntrackedStatFName = FName(), FName MissStatFName = FName(), FName HitStatFName = FName(), FName UsedStatFName = FName(), FName TooLateStatFName = FName()) : UsageData(UsedStatFName) , HitData(HitStatFName) , MissData(MissStatFName) , TooLateData(TooLateStatFName) , UntrackedData(UntrackedStatFName)"
  },
  {
    "label": "FPrecacheStatsCollector()",
    "kind": "Method",
    "detail": "Function (} FPrecacheUsageData PrecacheData ; FPrecacheUsageData UsageData ; FPrecacheUsageData HitData ; FPrecacheUsageData MissData ; FPrecacheUsageData TooLateData ; FPrecacheUsageData UntrackedData ; } ; class FPrecacheStatsCollector { public :)",
    "insertText": "FPrecacheStatsCollector(FName UntrackedStatFName = FName(), FName MissStatFName = FName(), FName HitStatFName = FName(), FName UsedStatFName = FName(), FName TooLateStatFName = FName()) : Stats(UntrackedStatFName, MissStatFName, HitStatFName, UsedStatFName, TooLateStatFName)"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetStats()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} const FPrecacheStats&)",
    "insertText": "GetStats()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bool bUpdateStats = false ; { FScopeLock)",
    "insertText": "Lock(&StateMapLock)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FShaderStateUsage* Value = HashedStateMap .)",
    "insertText": "FindOrAdd(PrecacheStateHash, FShaderStateUsage())"
  },
  {
    "label": "GetAssetName()",
    "kind": "Method",
    "detail": "Function (Value -> bPrecached = true ; bUpdateStats = true ; # if PSO_PRECACHING_TRACKING Value -> MaterialName = Material ? Material ->)",
    "insertText": "GetAssetName() : FString(TEXT(\"Unknown\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value -> PSOCollectorIndex = PSOCollectorIndex ; Value -> VertexFactoryType = VertexFactoryType ; # endif } })",
    "insertText": "if(bUpdateStats)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (Stats . PrecacheData .)",
    "insertText": "UpdateStats(PSOCollectorIndex, VertexFactoryType)"
  },
  {
    "label": "CheckStateInCache()",
    "kind": "Method",
    "detail": "Function (} return bUpdateStats ; } template<TPrecacheState> bool)",
    "insertText": "CheckStateInCache(const TPrecacheState& PrecacheState, uint64 HashFn(const TPrecacheState&), int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType, EPSOPrecacheResult& InOutPrecacheResult)"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (InOutPrecacheResult = EPSOPrecacheResult::Unknown ; return false ; } uint64 PrecacheStateHash =)",
    "insertText": "HashFn(PrecacheState)"
  },
  {
    "label": "CheckStateInCacheByHash()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckStateInCacheByHash(const uint64 PrecacheStateHash, int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType, EPSOPrecacheResult& InOutPrecacheResult)"
  },
  {
    "label": "IsStateTracked()",
    "kind": "Method",
    "detail": "Function (InOutPrecacheResult = EPSOPrecacheResult::Unknown ; return false ; } bool bTracked =)",
    "insertText": "IsStateTracked(PSOCollectorIndex, VertexFactoryType)"
  },
  {
    "label": "IsPrecached()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrecached(uint64 PrecacheStateHash)"
  },
  {
    "label": "GetPrecacheData()",
    "kind": "Method",
    "detail": "Function (# if PSO_PRECACHING_TRACKING bool)",
    "insertText": "GetPrecacheData(uint64 PrecacheStateHash, FString& OutMaterialName, int32& OutPSOCollectorIndex, const FVertexFactoryType*& OutVertexFactoryType)"
  },
  {
    "label": "IsStateTracked()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsStateTracked(int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "UpdatePrecacheStats()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UpdatePrecacheStats(uint64 PrecacheHash, int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType, bool bTracked, EPSOPrecacheResult& InOutPrecacheResult)"
  },
  {
    "label": "GetShadersOnlyPSOPrecacheStatsCollector()",
    "kind": "Method",
    "detail": "Function (FPrecacheStats Stats ; FCriticalSection StateMapLock ; Experimental::TRobinHoodHashMap<uint64,FShaderStateUsage> HashedStateMap ; } ; FPrecacheStatsCollector&)",
    "insertText": "GetShadersOnlyPSOPrecacheStatsCollector()"
  },
  {
    "label": "GetMinimalPSOPrecacheStatsCollector()",
    "kind": "Method",
    "detail": "Function (FPrecacheStatsCollector&)",
    "insertText": "GetMinimalPSOPrecacheStatsCollector()"
  },
  {
    "label": "GetFullPSOPrecacheStatsCollector()",
    "kind": "Method",
    "detail": "Function (FPrecacheStatsCollector&)",
    "insertText": "GetFullPSOPrecacheStatsCollector()"
  }
]