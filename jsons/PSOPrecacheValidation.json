[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderStateUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStateUsage"
  },
  {
    "label": "FPrecacheUsageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecacheUsageData"
  },
  {
    "label": "FPrecacheStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrecacheStats"
  },
  {
    "label": "FPrecacheStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecacheStatsCollector"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBreakOnPSOPrecacheMaterial(const FMaterial& Material, int32 PSOCollectorIndex)"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBreakOnPSOPrecacheShader(const FGraphicsPipelineStateInitializer& GraphicsPSOInitializer)"
  },
  {
    "label": "ConditionalBreakOnPSOPrecacheShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBreakOnPSOPrecacheShader(const FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "LogPSOMissInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPSOMissInfo(\n\tconst FGraphicsPipelineStateInitializer& GraphicsPSOInitializer, \n\tEPSOPrecacheMissType MissType,\n\tEPSOPrecacheResult PrecacheResult,\n\tconst FMaterial* Material,\n\tconst FVertexFactoryType* VFType,\n\tconst FPrimitiveSceneProxy* PrimitiveSceneProxy,\n\tint32 PSOCollectorIndex,\n\tuint64 ShadersOnlyPSOInitializerHash)"
  },
  {
    "label": "LogPSOMissInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPSOMissInfo(\n\tconst FRHIComputeShader& ComputeShader,\n\tEPSOPrecacheResult PrecacheResult,\n\tconst FMaterial* Material,\n\tint32 PSOCollectorIndex)"
  },
  {
    "label": "GetPrecachingValidationMode()",
    "kind": "Method",
    "detail": "Function (EPSOPrecacheValidationMode)",
    "insertText": "GetPrecachingValidationMode()"
  },
  {
    "label": "IsPrecachingValidationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecachingValidationEnabled()"
  },
  {
    "label": "IsFullPrecachingValidationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullPrecachingValidationEnabled()"
  },
  {
    "label": "GetPSOPrecacheHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPSOPrecacheHash(const FGraphicsPipelineStateInitializer& GraphicsPSOInitializer)"
  },
  {
    "label": "GetPSOPrecacheHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPSOPrecacheHash(const FRHIComputeShader& ComputeShader)"
  },
  {
    "label": "CheckFullPipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckFullPipelineStateInCache(\n\t\tconst FGraphicsPipelineStateInitializer& Initializer, \n\t\tEPSOPrecacheResult PSOPrecacheResult, \n\t\tconst FMaterialRenderProxy* Material, \n\t\tconst FVertexFactoryType* VFType, \n\t\tconst FPrimitiveSceneProxy* PrimitiveSceneProxy, \n\t\tint32 PSOCollectorIndex)"
  },
  {
    "label": "CheckComputePipelineStateInCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckComputePipelineStateInCache(\n\t\tconst FRHIComputeShader& ComputeShader,\n\t\tEPSOPrecacheResult PSOPrecacheResult,\n\t\tconst FMaterialRenderProxy* Material,\n\t\tint32 PSOCollectorIndex)"
  },
  {
    "label": "UpdateCSVStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCSVStats(EPSOPrecacheResult PSOPrecacheResult)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(int32 PSOCollectorIndex, const FVertexFactoryType* VFType)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&StateMapLock)"
  },
  {
    "label": "CheckStateInCacheByHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CheckStateInCacheByHash(PrecacheStateHash, PSOCollectorIndex, VertexFactoryType, InOutPrecacheResult)"
  },
  {
    "label": "UpdatePrecacheStats()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UpdatePrecacheStats(PrecacheStateHash, PSOCollectorIndex, VertexFactoryType, bTracked, InOutPrecacheResult)"
  },
  {
    "label": "IsPrecached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecached(uint64 PrecacheStateHash)"
  },
  {
    "label": "GetPrecacheData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrecacheData(uint64 PrecacheStateHash, FString& OutMaterialName, int32& OutPSOCollectorIndex, const FVertexFactoryType*& OutVertexFactoryType)"
  },
  {
    "label": "IsStateTracked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStateTracked(int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "UpdatePrecacheStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePrecacheStats(uint64 PrecacheHash, int32 PSOCollectorIndex, const FVertexFactoryType* VertexFactoryType, bool bTracked, EPSOPrecacheResult& InOutPrecacheResult)"
  }
]