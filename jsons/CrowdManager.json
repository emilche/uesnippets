[
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "dtCrowd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtCrowd"
  },
  {
    "label": "dtObstacleAvoidanceDebugData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtObstacleAvoidanceDebugData"
  },
  {
    "label": "ICrowdAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICrowdAgentInterface"
  },
  {
    "label": "UCrowdFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdFollowingComponent"
  },
  {
    "label": "UCrowdManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdManager"
  },
  {
    "label": "dtCrowdAgent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgent"
  },
  {
    "label": "dtCrowdAgentDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentDebugInfo"
  },
  {
    "label": "dtCrowdAgentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentParams"
  },
  {
    "label": "FNavMeshPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshPath"
  },
  {
    "label": "dtQuerySpecialLinkFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtQuerySpecialLinkFilter"
  },
  {
    "label": "FNavigationQueryFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationQueryFilter"
  },
  {
    "label": "FCrowdAvoidanceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrowdAvoidanceConfig"
  },
  {
    "label": "FCrowdAvoidanceSamplingPattern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrowdAvoidanceSamplingPattern"
  },
  {
    "label": "FCrowdAgentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrowdAgentData"
  },
  {
    "label": "FCrowdTickHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrowdTickHelper"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CrowdManagerBase . h \" # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" Tickable . h \" # include \" DrawDebugHelpers . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" CrowdManager . generated . h \" class ANavigationData ; class dtCrowd ; class dtObstacleAvoidanceDebugData ; class ICrowdAgentInterface ; class UCrowdFollowingComponent ; class UCrowdManager ; struct dtCrowdAgent ; struct dtCrowdAgentDebugInfo ; struct dtCrowdAgentParams ; struct FNavMeshPath ; # if WITH_RECAST struct dtQuerySpecialLinkFilter ; struct dtCrowdAgentParams ; class dtCrowd ; struct dtCrowdAgent ; struct dtCrowdAgentDebugInfo ; class dtObstacleAvoidanceDebugData ; # endif struct FNavigationQueryFilter ; typedef TSharedPtr<const FNavigationQueryFilter,ESPMode::ThreadSafe> FSharedConstNavQueryFilter ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=Crowd)"
  },
  {
    "label": "FCrowdAvoidanceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCrowdAvoidanceConfig() : VelocityBias(0.4f), DesiredVelocityWeight(2.0f), CurrentVelocityWeight(0.75f), SideBiasWeight(0.75f), ImpactTimeWeight(2.5f), ImpactTimeRange(2.5f), CustomPatternIdx(0xff), AdaptiveDivisions(7), AdaptiveRings(2), AdaptiveDepth(5)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSample(float AngleInDegrees, float NormalizedRadius)"
  },
  {
    "label": "AddSampleWithMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSampleWithMirror(float AngleInDegrees, float NormalizedRadius)"
  },
  {
    "label": "FCrowdAgentData()",
    "kind": "Method",
    "detail": "Function (} ; struct FCrowdAgentData { # if WITH_RECAST TSharedPtr<dtQuerySpecialLinkFilter> LinkFilter ; # endif NavNodeRef PrevPoly ; int32 AgentIndex ; float PathOptRemainingTime ; uint32 bIsSimulated : 1 ; uint32 bWantsPathOptimization : 1 ;)",
    "insertText": "FCrowdAgentData() : PrevPoly(0), AgentIndex(-1), PathOptRemainingTime(0), bIsSimulated(false), bWantsPathOptimization(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FCrowdTickHelper()",
    "kind": "Method",
    "detail": "Function (} ; struct FCrowdTickHelper : FTickableGameObject { TWeakObjectPtr<UCrowdManager> Owner ;)",
    "insertText": "FCrowdTickHelper() : Owner(NULL)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = Engine, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AIMODULE_API UCrowdManager(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "RegisterAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAgent(ICrowdAgentInterface* Agent)"
  },
  {
    "label": "UnregisterAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAgent(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "UpdateAgentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAgentParams(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "UpdateAgentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAgentState(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "OnAgentFinishedCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAgentFinishedCustomLink(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "SetAgentMoveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAgentMoveTarget(const UCrowdFollowingComponent* AgentComponent, const FVector& MoveTarget, FSharedConstNavQueryFilter Filter)"
  },
  {
    "label": "SetAgentMoveDirection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAgentMoveDirection(const UCrowdFollowingComponent* AgentComponent, const FVector& MoveDirection)"
  },
  {
    "label": "SetAgentMovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAgentMovePath(const UCrowdFollowingComponent* AgentComponent, const FNavMeshPath* Path, int32 PathSectionStart, int32 PathSectionEnd, const FVector& PathSectionEndLocation)"
  },
  {
    "label": "ClearAgentMoveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAgentMoveTarget(const UCrowdFollowingComponent* AgentComponent)"
  },
  {
    "label": "PauseAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseAgent(const UCrowdFollowingComponent* AgentComponent)"
  },
  {
    "label": "ResumeAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeAgent(const UCrowdFollowingComponent* AgentComponent, bool bForceReplanPath = true)"
  },
  {
    "label": "IsAgentValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAgentValid(const UCrowdFollowingComponent* AgentComponent)"
  },
  {
    "label": "IsAgentValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAgentValid(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "GetNumNearbyAgents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNearbyAgents(const ICrowdAgentInterface* Agent)"
  },
  {
    "label": "GetNearbyAgentLocations()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNearbyAgentLocations(const ICrowdAgentInterface* Agent, TArray<FVector>& OutLocations)"
  },
  {
    "label": "GetAvoidanceConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAvoidanceConfig(int32 Idx, FCrowdAvoidanceConfig& Data)"
  },
  {
    "label": "SetAvoidanceConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAvoidanceConfig(int32 Idx, const FCrowdAvoidanceConfig& Data)"
  },
  {
    "label": "SetOffmeshConnectionPruning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffmeshConnectionPruning(bool bRemoveFromCorridor)"
  },
  {
    "label": "SetSingleAreaVisibilityOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleAreaVisibilityOptimization(bool bEnable)"
  },
  {
    "label": "AdjustAgentPathStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustAgentPathStart(const UCrowdFollowingComponent* AgentComponent, const FNavMeshPath* Path, int32& PathStartIdx)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "DebugTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugTick()"
  },
  {
    "label": "OnNavMeshUpdate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnNavMeshUpdate()"
  },
  {
    "label": "IsSuitableNavData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSuitableNavData(const ANavigationData& NavData)"
  },
  {
    "label": "OnNavDataRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavDataRegistered(ANavigationData& NavData)"
  },
  {
    "label": "OnNavDataUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavDataUnregistered(ANavigationData& NavData)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(float DeltaTime)"
  },
  {
    "label": "GetNavData()",
    "kind": "Method",
    "detail": "Function (} ; const ANavigationData*)",
    "insertText": "GetNavData()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UCrowdManager*)",
    "insertText": "GetCurrent(UObject* WorldContextObject)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UCrowdManager*)",
    "insertText": "GetCurrent(UWorld* World)"
  },
  {
    "label": "UpdateNavData()",
    "kind": "Method",
    "detail": "Function (TMap<ICrowdAgentInterface*,FCrowdAgentData> ActiveAgents ; TArray<uint8> AgentFlags ; # if WITH_RECAST dtCrowd* DetourCrowd ; dtCrowdAgentDebugInfo* DetourAgentDebug ; dtObstacleAvoidanceDebugData* DetourAvoidanceDebug ; # endif # if WITH_EDITOR FCrowdTickHelper* TickHelper ; # endif void)",
    "insertText": "UpdateNavData()"
  },
  {
    "label": "UpdateAvoidanceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAvoidanceConfig()"
  },
  {
    "label": "PostProximityUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProximityUpdate()"
  },
  {
    "label": "PostMovePointUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostMovePointUpdate()"
  },
  {
    "label": "SetNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavData(ANavigationData* NavData, const bool bFindNewNavDataIfNull = true)"
  },
  {
    "label": "AddAgent()",
    "kind": "Method",
    "detail": "Function (# if WITH_RECAST void)",
    "insertText": "AddAgent(const ICrowdAgentInterface* Agent, FCrowdAgentData& AgentData)"
  },
  {
    "label": "RemoveAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAgent(const ICrowdAgentInterface* Agent, FCrowdAgentData* AgentData)"
  },
  {
    "label": "GetAgentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAgentParams(const ICrowdAgentInterface* Agent, dtCrowdAgentParams& AgentParams)"
  },
  {
    "label": "PrepareAgentStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAgentStep(const ICrowdAgentInterface* Agent, FCrowdAgentData& AgentData, float DeltaTime)"
  },
  {
    "label": "ApplyVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocity(UCrowdFollowingComponent* AgentComponent, int32 AgentIndex)"
  },
  {
    "label": "UpdateAgentPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAgentPaths()"
  },
  {
    "label": "UpdateSelectedDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedDebug(const ICrowdAgentInterface* Agent, int32 AgentIndex)"
  },
  {
    "label": "CreateCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCrowdManager()"
  },
  {
    "label": "DestroyCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCrowdManager()"
  },
  {
    "label": "GetDebugDrawingWorld()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_DRAW_DEBUG UWorld*)",
    "insertText": "GetDebugDrawingWorld()"
  },
  {
    "label": "DrawDebugCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCorners(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugCollisionSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCollisionSegments(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPath(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugVelocityObstacles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugVelocityObstacles(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugPathOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPathOptimization(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugNeighbors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugNeighbors(const dtCrowdAgent* CrowdAgent)"
  },
  {
    "label": "DrawDebugSharedBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSharedBoundary()"
  }
]