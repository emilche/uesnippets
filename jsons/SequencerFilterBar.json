[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerTrackFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter"
  },
  {
    "label": "FSequencerTrackFilter_CustomText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_CustomText"
  },
  {
    "label": "FSequencerTrackFilter_Group",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Group"
  },
  {
    "label": "FSequencerTrackFilter_HideIsolate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_HideIsolate"
  },
  {
    "label": "FSequencerTrackFilter_Level",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Level"
  },
  {
    "label": "FSequencerTrackFilter_Modified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Modified"
  },
  {
    "label": "FSequencerTrackFilter_Selected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Selected"
  },
  {
    "label": "FSequencerTrackFilter_Text",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Text"
  },
  {
    "label": "FSequencerTrackFilterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterCollection"
  },
  {
    "label": "FSequencerTrackFilterMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterMenu"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SFilterBarIsolateHideShow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterBarIsolateHideShow"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "SSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "FSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerFilterBar"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Filters / CustomTextFilters . h \" # include \" Filters / ISequencerTrackFilters . h \" # include \" Filters / SequencerFilterData . h \" # include \" Filters / SequencerTrackFilterBase . h \" class FSequencer ; class FSequencerTrackFilter ; class FSequencerTrackFilter_CustomText ; class FSequencerTrackFilter_Group ; class FSequencerTrackFilter_HideIsolate ; class FSequencerTrackFilter_Level ; class FSequencerTrackFilter_Modified ; class FSequencerTrackFilter_Selected ; class FSequencerTrackFilter_Text ; class FSequencerTrackFilterCollection ; class FSequencerTrackFilterMenu ; class FUICommandList ; class SComboButton ; class SFilterBarIsolateHideShow ; class SFilterSearchBox ; class SSequencerFilterBar ; enum class EFilterBarLayout : uint8 ; namespace UE::Sequencer { class IOutlinerExtension ; } enum class ESequencerFilterChange : uint8 { Enable,Disable,Activate,Deactivate } ; class FSequencerFilterBar : public TSharedFromThis<FSequencerFilterBar>,public ISequencerTrackFilters { public : const FName SharedIdentifier ;)",
    "insertText": "DECLARE_EVENT_TwoParams(FSequencerFilterBar, FSequencerFiltersChanged, const ESequencerFilterChange , const TSharedRef<FSequencerTrackFilter>&)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(FSequencerFilterBar, FSequencerCustomTextFiltersChanged, const ESequencerFilterChange , const TSharedRef<FSequencerTrackFilter_CustomText>&)"
  },
  {
    "label": "FSequencerFilterBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerFilterBar(FSequencer& InSequencer)"
  },
  {
    "label": "FSequencerFilterBar()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerFilterBar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "CreateCustomTextFiltersFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCustomTextFiltersFromConfig()"
  },
  {
    "label": "CreateTextFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICustomTextFilter<FSequencerTrackFilterType>>)",
    "insertText": "CreateTextFilter()"
  },
  {
    "label": "GenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SSequencerFilterBar>)",
    "insertText": "GenerateWidget(const TSharedPtr<SFilterSearchBox>& InSearchBox, const EFilterBarLayout InLayout)"
  },
  {
    "label": "AreFiltersMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreFiltersMuted()"
  },
  {
    "label": "MuteFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteFilters(const bool bInMute)"
  },
  {
    "label": "ToggleMuteFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMuteFilters()"
  },
  {
    "label": "ResetFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFilters()"
  },
  {
    "label": "CanResetFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetFilters()"
  },
  {
    "label": "GetOnFiltersChanged()",
    "kind": "Method",
    "detail": "Function (FSequencerFiltersChanged&)",
    "insertText": "GetOnFiltersChanged()"
  },
  {
    "label": "GetFilterErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterErrorText()"
  },
  {
    "label": "GetHiddenTracks()",
    "kind": "Method",
    "detail": "Function (TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>)",
    "insertText": "GetHiddenTracks()"
  },
  {
    "label": "GetIsolatedTracks()",
    "kind": "Method",
    "detail": "Function (TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>)",
    "insertText": "GetIsolatedTracks()"
  },
  {
    "label": "HideTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks, const bool bInAddToExisting)"
  },
  {
    "label": "UnhideTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhideTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks)"
  },
  {
    "label": "IsolateTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsolateTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks, const bool bInAddToExisting)"
  },
  {
    "label": "UnisolateTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnisolateTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks)"
  },
  {
    "label": "ShowAllTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllTracks()"
  },
  {
    "label": "HasHiddenTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHiddenTracks()"
  },
  {
    "label": "HasIsolatedTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIsolatedTracks()"
  },
  {
    "label": "EmptyHiddenTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyHiddenTracks()"
  },
  {
    "label": "EmptyIsolatedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyIsolatedTracks()"
  },
  {
    "label": "FindFilterByDisplayName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerTrackFilter>)",
    "insertText": "FindFilterByDisplayName(const FString& InFilterName)"
  },
  {
    "label": "FindCustomTextFilterByDisplayName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerTrackFilter_CustomText>)",
    "insertText": "FindCustomTextFilterByDisplayName(const FString& InFilterName)"
  },
  {
    "label": "HasAnyFiltersEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyFiltersEnabled()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (FSequencer&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "GetTextFilterString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTextFilterString()"
  },
  {
    "label": "SetTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFilterString(const FString& InText)"
  },
  {
    "label": "DoesTextFilterStringContainExpressionPair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesTextFilterStringContainExpressionPair(const FSequencerTextFilterExpressionContext& InExpression)"
  },
  {
    "label": "RequestFilterUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFilterUpdate()"
  },
  {
    "label": "EnableAllFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllFilters(const bool bInEnable, const TArray<FString> InExceptionFilterNames)"
  },
  {
    "label": "ActivateCommonFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCommonFilters(const bool bInActivate, const TArray<FString> InExceptionFilterNames)"
  },
  {
    "label": "AreAllEnabledFiltersActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllEnabledFiltersActive(const bool bInActive, const TArray<FString> InExceptionFilterNames)"
  },
  {
    "label": "ActivateAllEnabledFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateAllEnabledFilters(const bool bInActivate, const TArray<FString> InExceptionFilterNames)"
  },
  {
    "label": "ToggleActivateAllEnabledFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActivateAllEnabledFilters()"
  },
  {
    "label": "IsFilterActiveByDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterActiveByDisplayName(const FString InFilterName)"
  },
  {
    "label": "IsFilterEnabledByDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterEnabledByDisplayName(const FString InFilterName)"
  },
  {
    "label": "SetFilterActiveByDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterActiveByDisplayName(const FString InFilterName, const bool bInActive, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "SetFilterEnabledByDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterEnabledByDisplayName(const FString InFilterName, const bool bInEnabled, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "GetFilterDisplayNames()",
    "kind": "Method",
    "detail": "Function (TArray<FText>)",
    "insertText": "GetFilterDisplayNames()"
  },
  {
    "label": "GetCustomTextFilterNames()",
    "kind": "Method",
    "detail": "Function (TArray<FText>)",
    "insertText": "GetCustomTextFilterNames()"
  },
  {
    "label": "GetTotalDisplayNodeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalDisplayNodeCount()"
  },
  {
    "label": "GetFilteredDisplayNodeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFilteredDisplayNodeCount()"
  },
  {
    "label": "HideSelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideSelectedTracks()"
  },
  {
    "label": "IsolateSelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsolateSelectedTracks()"
  },
  {
    "label": "ShowOnlyLocationCategoryGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlyLocationCategoryGroups()"
  },
  {
    "label": "ShowOnlyRotationCategoryGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlyRotationCategoryGroups()"
  },
  {
    "label": "ShowOnlyScaleCategoryGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlyScaleCategoryGroups()"
  },
  {
    "label": "HasSelectedTracks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedTracks()"
  },
  {
    "label": "GetFilterData()",
    "kind": "Method",
    "detail": "Function (FSequencerFilterData&)",
    "insertText": "GetFilterData()"
  },
  {
    "label": "AnyCommonFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyCommonFilterActive()"
  },
  {
    "label": "AnyInternalFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyInternalFilterActive()"
  },
  {
    "label": "HasAnyFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyFilterActive(const bool bCheckTextFilter = true , const bool bInCheckHideIsolateFilter = true , const bool bInCheckCommonFilters = true , const bool bInCheckInternalFilters = true , const bool bInCheckCustomTextFilters = true)"
  },
  {
    "label": "IsFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterActive(const TSharedRef<FSequencerTrackFilter> InFilter)"
  },
  {
    "label": "SetFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterActive(const TSharedRef<FSequencerTrackFilter>& InFilter, const bool bInActive, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "ActivateCommonFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCommonFilters(const bool bInActivate , const TArray<TSharedRef<FFilterCategory>> InMatchCategories , const TArray<TSharedRef<FSequencerTrackFilter>>& InExceptions)"
  },
  {
    "label": "GetActiveFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetActiveFilters()"
  },
  {
    "label": "HasEnabledCommonFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEnabledCommonFilters()"
  },
  {
    "label": "HasEnabledFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEnabledFilter(const TArray<TSharedRef<FSequencerTrackFilter>>& InFilters = {})"
  },
  {
    "label": "HasAnyFilterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyFilterEnabled()"
  },
  {
    "label": "IsFilterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterEnabled(TSharedRef<FSequencerTrackFilter> InFilter)"
  },
  {
    "label": "SetFilterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterEnabled(const TSharedRef<FSequencerTrackFilter> InFilter, const bool bInEnabled, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "EnableFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFilters(const bool bInEnable , const TArray<TSharedRef<FFilterCategory>> InMatchCategories = {} , const TArray<TSharedRef<FSequencerTrackFilter>> InExceptions = {})"
  },
  {
    "label": "ToggleFilterEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilterEnabled(const TSharedRef<FSequencerTrackFilter> InFilter)"
  },
  {
    "label": "GetEnabledFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetEnabledFilters()"
  },
  {
    "label": "HasAnyCommonFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyCommonFilters()"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFilter(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFilter(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "GetCommonFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetCommonFilters(const TArray<TSharedRef<FFilterCategory>>& InCategories = {})"
  },
  {
    "label": "AnyCustomTextFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyCustomTextFilterActive()"
  },
  {
    "label": "HasEnabledCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEnabledCustomTextFilters()"
  },
  {
    "label": "GetAllCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter_CustomText>>)",
    "insertText": "GetAllCustomTextFilters()"
  },
  {
    "label": "AddCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCustomTextFilter(const TSharedRef<FSequencerTrackFilter_CustomText>& InFilter, const bool bInAddToConfig)"
  },
  {
    "label": "RemoveCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCustomTextFilter(const TSharedRef<FSequencerTrackFilter_CustomText>& InFilter, const bool bInAddToConfig)"
  },
  {
    "label": "ActivateCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCustomTextFilters(const bool bInActivate, const TArray<TSharedRef<FSequencerTrackFilter_CustomText>> InExceptions = {})"
  },
  {
    "label": "EnableCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCustomTextFilters(const bool bInEnable, const TArray<TSharedRef<FSequencerTrackFilter_CustomText>> InExceptions = {})"
  },
  {
    "label": "GetEnabledCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter_CustomText>>)",
    "insertText": "GetEnabledCustomTextFilters()"
  },
  {
    "label": "GetFilterCategories()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<FFilterCategory>>)",
    "insertText": "GetFilterCategories(const TSet<TSharedRef<FSequencerTrackFilter>>* InFilters = nullptr)"
  },
  {
    "label": "GetConfigCategories()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<FFilterCategory>>)",
    "insertText": "GetConfigCategories()"
  },
  {
    "label": "GetClassTypeCategory()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterCategory>)",
    "insertText": "GetClassTypeCategory()"
  },
  {
    "label": "GetComponentTypeCategory()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterCategory>)",
    "insertText": "GetComponentTypeCategory()"
  },
  {
    "label": "GetMiscCategory()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterCategory>)",
    "insertText": "GetMiscCategory()"
  },
  {
    "label": "ForEachFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachFilter(const TFunctionRef<bool(const TSharedRef<FSequencerTrackFilter>&)>& InFunction , const bool bInCheckSupportsSequence , const TArray<TSharedRef<FFilterCategory>>& InCategories = {})"
  },
  {
    "label": "HasActiveLevelFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveLevelFilter()"
  },
  {
    "label": "HasAllLevelFiltersActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllLevelFiltersActive()"
  },
  {
    "label": "GetActiveLevelFilters()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>&)",
    "insertText": "GetActiveLevelFilters()"
  },
  {
    "label": "ActivateLevelFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateLevelFilter(const FString& InLevelName, const bool bInActivate)"
  },
  {
    "label": "IsLevelFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelFilterActive(const FString InLevelName)"
  },
  {
    "label": "EnableAllLevelFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllLevelFilters(const bool bInEnable)"
  },
  {
    "label": "CanEnableAllLevelFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnableAllLevelFilters(const bool bInEnable)"
  },
  {
    "label": "EnableAllGroupFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllGroupFilters(const bool bInEnable)"
  },
  {
    "label": "IsGroupFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroupFilterActive(const FString& InGroupName)"
  },
  {
    "label": "GetSelectedTracksOrAll()",
    "kind": "Method",
    "detail": "Function (TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>)",
    "insertText": "GetSelectedTracksOrAll()"
  },
  {
    "label": "SetTrackParentsExpanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackParentsExpanded(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode, const bool bInExpanded)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FilterNodes()",
    "kind": "Method",
    "detail": "Function (const FSequencerFilterData&)",
    "insertText": "FilterNodes()"
  },
  {
    "label": "GenerateTextFilterStringFromEnabledFilters()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateTextFilterStringFromEnabledFilters()"
  },
  {
    "label": "ShouldUpdateOnTrackValueChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateOnTrackValueChanged()"
  },
  {
    "label": "MakeIsolateHideShowPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilterBarIsolateHideShow>)",
    "insertText": "MakeIsolateHideShowPanel()"
  },
  {
    "label": "MakeAddFilterButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SComboButton>)",
    "insertText": "MakeAddFilterButton()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SSequencerFilterBar>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "CreateDefaultFilters()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CreateDefaultFilters()"
  },
  {
    "label": "PassesAnyCommonFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAnyCommonFilter(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "PassesAllInternalFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAllInternalFilters(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "PassesAllCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAllCustomTextFilters(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "GetFilterList()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetFilterList(const bool bInIncludeCustomTextFilters = false)"
  },
  {
    "label": "FilterNodesRecursive()",
    "kind": "Method",
    "detail": "Function (FSequencer& Sequencer ; TSharedRef<FUICommandList> CommandList ; bool bFiltersMuted = false ; TSharedRef<FFilterCategory> ClassTypeCategory ; TSharedRef<FFilterCategory> ComponentTypeCategory ; TSharedRef<FFilterCategory> MiscCategory ; TSharedRef<FFilterCategory> TransientCategory ; TSharedPtr<FSequencerTrackFilterCollection> CommonFilters ; TSharedPtr<FSequencerTrackFilterCollection> InternalFilters ; TSharedRef<FSequencerTrackFilter_Text> TextFilter ; TSharedRef<FSequencerTrackFilter_HideIsolate> HideIsolateFilter ; TSharedRef<FSequencerTrackFilter_Level> LevelFilter ; TSharedRef<FSequencerTrackFilter_Group> GroupFilter ; TSharedRef<FSequencerTrackFilter_Selected> SelectedFilter ; TSharedRef<FSequencerTrackFilter_Modified> ModifiedFilter ; TArray<TSharedRef<FSequencerTrackFilter_CustomText>> CustomTextFilters ; TSharedPtr<FSequencerTrackFilterMenu> FilterMenu ; FSequencerFiltersChanged FiltersChangedEvent ; FSequencerFilterData FilterData ; private : int32 InstanceCount ; bool)",
    "insertText": "FilterNodesRecursive(const bool bInHasActiveFilter, const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InStartNode)"
  }
]