[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerTrackFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter"
  },
  {
    "label": "FSequencerTrackFilter_CustomText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_CustomText"
  },
  {
    "label": "FSequencerTrackFilter_Group",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Group"
  },
  {
    "label": "FSequencerTrackFilter_HideIsolate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_HideIsolate"
  },
  {
    "label": "FSequencerTrackFilter_Level",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Level"
  },
  {
    "label": "FSequencerTrackFilter_Modified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Modified"
  },
  {
    "label": "FSequencerTrackFilter_Selected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Selected"
  },
  {
    "label": "FSequencerTrackFilter_Text",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Text"
  },
  {
    "label": "FSequencerTrackFilterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterCollection"
  },
  {
    "label": "FSequencerTrackFilterMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterMenu"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SFilterBarIsolateHideShow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterBarIsolateHideShow"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "SSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerFilterBar"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "CreateCustomTextFiltersFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCustomTextFiltersFromConfig()"
  },
  {
    "label": "CreateTextFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICustomTextFilter<FSequencerTrackFilterType>>)",
    "insertText": "CreateTextFilter()"
  },
  {
    "label": "GenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SSequencerFilterBar>)",
    "insertText": "GenerateWidget(const TSharedPtr<SFilterSearchBox>& InSearchBox, const EFilterBarLayout InLayout)"
  },
  {
    "label": "MuteFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteFilters(const bool bInMute)"
  },
  {
    "label": "ToggleMuteFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleMuteFilters()"
  },
  {
    "label": "ResetFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFilters()"
  },
  {
    "label": "HideTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks, const bool bInAddToExisting)"
  },
  {
    "label": "UnhideTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhideTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks)"
  },
  {
    "label": "IsolateTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsolateTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks, const bool bInAddToExisting)"
  },
  {
    "label": "UnisolateTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnisolateTracks(const TSet<UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension>>& InTracks)"
  },
  {
    "label": "ShowAllTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllTracks()"
  },
  {
    "label": "EmptyHiddenTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyHiddenTracks()"
  },
  {
    "label": "EmptyIsolatedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyIsolatedTracks()"
  },
  {
    "label": "ToggleActivateAllEnabledFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleActivateAllEnabledFilters()"
  },
  {
    "label": "SetFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterActive(const TSharedRef<FSequencerTrackFilter>& InFilter, const bool bInActive, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "ActivateCommonFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCommonFilters(const bool bInActivate\n\t\t, const TArray<TSharedRef<FFilterCategory>> InMatchCategories\n\t\t, const TArray<TSharedRef<FSequencerTrackFilter>>& InExceptions)"
  },
  {
    "label": "SetFilterEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterEnabled(const TSharedRef<FSequencerTrackFilter> InFilter, const bool bInEnabled, const bool bInRequestFilterUpdate = true)"
  },
  {
    "label": "EnableFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFilters(const bool bInEnable\n\t\t, const TArray<TSharedRef<FFilterCategory>> InMatchCategories = {}\n\t\t, const TArray<TSharedRef<FSequencerTrackFilter>> InExceptions = {})"
  },
  {
    "label": "ToggleFilterEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilterEnabled(const TSharedRef<FSequencerTrackFilter> InFilter)"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFilter(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFilter(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "ActivateCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCustomTextFilters(const bool bInActivate, const TArray<TSharedRef<FSequencerTrackFilter_CustomText>> InExceptions = {})"
  },
  {
    "label": "EnableCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCustomTextFilters(const bool bInEnable, const TArray<TSharedRef<FSequencerTrackFilter_CustomText>> InExceptions = {})"
  },
  {
    "label": "ActivateLevelFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateLevelFilter(const FString& InLevelName, const bool bInActivate)"
  },
  {
    "label": "EnableAllLevelFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllLevelFilters(const bool bInEnable)"
  },
  {
    "label": "CanEnableAllLevelFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnableAllLevelFilters(const bool bInEnable)"
  },
  {
    "label": "EnableAllGroupFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllGroupFilters(const bool bInEnable)"
  },
  {
    "label": "SetTrackParentsExpanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackParentsExpanded(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode, const bool bInExpanded)"
  },
  {
    "label": "MakeIsolateHideShowPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilterBarIsolateHideShow>)",
    "insertText": "MakeIsolateHideShowPanel()"
  },
  {
    "label": "MakeAddFilterButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SComboButton>)",
    "insertText": "MakeAddFilterButton()"
  },
  {
    "label": "CreateDefaultFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultFilters()"
  },
  {
    "label": "PassesAnyCommonFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAnyCommonFilter(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "PassesAllInternalFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAllInternalFilters(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "PassesAllCustomTextFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesAllCustomTextFilters(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "FilterNodesRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterNodesRecursive(const bool bInHasActiveFilter, const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InStartNode)"
  }
]