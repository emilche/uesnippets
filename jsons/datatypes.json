[
  {
    "label": "octet_get_weight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "octet_get_weight(uint8_t octet)"
  },
  {
    "label": "v128_copy_octet_string()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_copy_octet_string(v128_t *x, const uint8_t s[16])"
  },
  {
    "label": "v128_left_shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_left_shift(v128_t *x, int shift_index)"
  },
  {
    "label": "v128_right_shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_right_shift(v128_t *x, int shift_index)"
  },
  {
    "label": "v128_set_to_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_set_to_zero(v128_t *x)"
  },
  {
    "label": "v128_is_eq()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "v128_is_eq(const v128_t *x, const v128_t *y)"
  },
  {
    "label": "v128_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_copy(v128_t *x, const v128_t *y)"
  },
  {
    "label": "v128_xor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_xor(v128_t *z, v128_t *x, v128_t *y)"
  },
  {
    "label": "v128_and()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_and(v128_t *z, v128_t *x, v128_t *y)"
  },
  {
    "label": "v128_or()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_or(v128_t *z, v128_t *x, v128_t *y)"
  },
  {
    "label": "v128_complement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_complement(v128_t *x)"
  },
  {
    "label": "v128_get_bit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "v128_get_bit(const v128_t *x, int i)"
  },
  {
    "label": "v128_set_bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_set_bit(v128_t *x, int i)"
  },
  {
    "label": "v128_clear_bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_clear_bit(v128_t *x, int i)"
  },
  {
    "label": "v128_set_bit_to()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v128_set_bit_to(v128_t *x, int i, int y)"
  },
  {
    "label": "srtp_octet_string_is_eq()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "srtp_octet_string_is_eq(uint8_t *a, uint8_t *b, int len)"
  },
  {
    "label": "srtp_cleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_cleanse(void *s, size_t len)"
  },
  {
    "label": "octet_string_set_to_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "octet_string_set_to_zero(void *s, size_t len)"
  },
  {
    "label": "bitvector_get_bit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bitvector_get_bit(const bitvector_t *v, int bit_index)"
  },
  {
    "label": "bitvector_set_bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bitvector_set_bit(bitvector_t *v, int bit_index)"
  },
  {
    "label": "bitvector_clear_bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bitvector_clear_bit(bitvector_t *v, int bit_index)"
  },
  {
    "label": "bitvector_get_length()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "bitvector_get_length(const bitvector_t *v)"
  },
  {
    "label": "bitvector_alloc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bitvector_alloc(bitvector_t *v, unsigned long length)"
  },
  {
    "label": "bitvector_dealloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bitvector_dealloc(bitvector_t *v)"
  },
  {
    "label": "bitvector_set_to_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bitvector_set_to_zero(bitvector_t *x)"
  },
  {
    "label": "bitvector_left_shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bitvector_left_shift(bitvector_t *x, int index)"
  }
]