[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectBase"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FMovieSceneExportedEntity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneExportedEntity"
  },
  {
    "label": "FChildEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChildEntityInitializer"
  },
  {
    "label": "FComponentRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentRegistry"
  },
  {
    "label": "FEntityAllocationIteratorProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationIteratorProxy"
  },
  {
    "label": "FFreeEntityOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFreeEntityOperation"
  },
  {
    "label": "FMutualEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualEntityInitializer"
  },
  {
    "label": "IComponentTypeHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IComponentTypeHandler"
  },
  {
    "label": "IMovieSceneEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneEntityMutation"
  },
  {
    "label": "TReadOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOptional"
  },
  {
    "label": "TWriteOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteOptional"
  },
  {
    "label": "IMovieSceneConditionalEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneConditionalEntityMutation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityInitializer"
  },
  {
    "label": "FEntityAllocationProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationProxy"
  },
  {
    "label": "FEntityAllocationIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationIterator"
  },
  {
    "label": "FEntityLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityLocation"
  },
  {
    "label": "FAllocationMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationMask"
  },
  {
    "label": "FCommitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommitData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / AllOf . h \" # include \" Algo / AnyOf . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" EntitySystem / MovieSceneComponentTypeHandler . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" # include \" EntitySystem / MovieSceneEntityFactoryTypes . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneMaybeAtomic . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / InlineValue . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / StrongObjectPtr . h \" # include \" UObject / UObjectArray . h \" # include<initializer_list> class FArchive ; class FReferenceCollector ; class UObjectBase ; struct FGuid ; struct FMovieSceneExportedEntity ; namespace UE { namespace MovieScene { struct FChildEntityInitializer ; struct FComponentRegistry ; struct FEntityAllocationIteratorProxy ; struct FFreeEntityOperation ; struct FMutualEntityInitializer ; struct IComponentTypeHandler ; struct IMovieSceneEntityMutation ; template<T> struct TReadOptional ; template<T> struct TWriteOptional ; struct IMovieSceneConditionalEntityMutation ; enum class EMutuallyInclusiveComponentType : uint8 ; enum class EEntityRecursion : uint8 { This = 1<<0,Children = 1<<1,Full = This | Children,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EEntityRecursion)"
  },
  {
    "label": "FEntityManager()",
    "kind": "Method",
    "detail": "Function (class FEntityManager : public FUObjectArray::FUObjectDeleteListener { public :)",
    "insertText": "FEntityManager()"
  },
  {
    "label": "FEntityManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityManager(const FEntityManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FEntityManager&)"
  },
  {
    "label": "FEntityManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityManager(FEntityManager&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FEntityManager&&)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (FComponentRegistry*)",
    "insertText": "GetComponents()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (ComponentRegistry = InComponents ; } public : void)",
    "insertText": "Destroy()"
  },
  {
    "label": "AllocateEntity()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID)",
    "insertText": "AllocateEntity()"
  },
  {
    "label": "FreeEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeEntity(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "FreeEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FreeEntities(const FEntityComponentFilter& Filter, TSet<FMovieSceneEntityID>* OutFreedEntities = nullptr)"
  },
  {
    "label": "FreeEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FreeEntities(const FFreeEntityOperation& Operation, TSet<FMovieSceneEntityID>* OutFreedEntities = nullptr)"
  },
  {
    "label": "AllocateContiguousEntities()",
    "kind": "Method",
    "detail": "Function (FEntityDataLocation)",
    "insertText": "AllocateContiguousEntities(const FComponentMask& EntityComponentMask, int32* InOutNum)"
  },
  {
    "label": "AllocateEntity()",
    "kind": "Method",
    "detail": "Function (FEntityInfo)",
    "insertText": "AllocateEntity(const FComponentMask& EntityComponentMask)"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (FEntityInfo)",
    "insertText": "GetEntity(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "GetEntityHandle()",
    "kind": "Method",
    "detail": "Function (FEntityHandle)",
    "insertText": "GetEntityHandle(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocated(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "IsHandleValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHandleValid(FEntityHandle EntityID)"
  },
  {
    "label": "ComputeThreadingModel()",
    "kind": "Method",
    "detail": "Function (EEntityThreadingModel)",
    "insertText": "ComputeThreadingModel()"
  },
  {
    "label": "UpdateThreadingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadingModel()"
  },
  {
    "label": "GetThreadingModel()",
    "kind": "Method",
    "detail": "Function (EEntityThreadingModel)",
    "insertText": "GetThreadingModel()"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (public : template<T,ValueType> void)",
    "insertText": "AddComponent(FMovieSceneEntityID EntityID, TComponentTypeID<T> ComponentTypeID, ValueType&& InValue)"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponent(EntityID, ComponentTypeID)"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (FEntityInfo Entry =)",
    "insertText": "GetEntity(EntityID)"
  },
  {
    "label": "GetComponentHeaderChecked()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader& Header = Entry . Data . Allocation ->)",
    "insertText": "GetComponentHeaderChecked(ComponentTypeID)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (FScopedHeaderWriteLock)",
    "insertText": "WriteLock(&Header, Entry.Data.Allocation->GetCurrentLockMode(), FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Component = reinterpret_cast<)",
    "insertText": "T(Header.GetValuePtr(Entry.Data.ComponentOffset))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (* Component = Forward<)",
    "insertText": "ValueType(InValue)"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddComponent(FMovieSceneEntityID EntityID, FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponent(FMovieSceneEntityID EntityID, FComponentTypeID ComponentTypeID, EEntityRecursion Recursion)"
  },
  {
    "label": "AddComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponents(FMovieSceneEntityID EntityID, const FComponentMask& EntityComponentMask)"
  },
  {
    "label": "AddComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponents(FMovieSceneEntityID EntityID, const FComponentMask& EntityComponentMask, EEntityRecursion Recursion)"
  },
  {
    "label": "RemoveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponent(FMovieSceneEntityID EntityID, FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "RemoveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponent(FMovieSceneEntityID EntityID, FComponentTypeID ComponentTypeID, EEntityRecursion Recursion)"
  },
  {
    "label": "RemoveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponents(FMovieSceneEntityID EntityID, const FComponentMask& ComponentsToRemove)"
  },
  {
    "label": "RemoveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponents(FMovieSceneEntityID EntityID, const FComponentMask& ComponentsToRemove, EEntityRecursion Recursion)"
  },
  {
    "label": "CopyComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyComponent(FMovieSceneEntityID SrcEntityID, FMovieSceneEntityID DstEntityID, FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "CopyComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyComponents(FMovieSceneEntityID SrcEntityID, FMovieSceneEntityID DstEntityID, const FComponentMask& ComponentsToCopy)"
  },
  {
    "label": "HasComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasComponent(FMovieSceneEntityID EntityID, FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (const FComponentMask&)",
    "insertText": "GetEntityType(FMovieSceneEntityID InEntity)"
  },
  {
    "label": "ChangeEntityType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeEntityType(FMovieSceneEntityID InEntity, const FComponentMask& InNewMask)"
  },
  {
    "label": "FilterComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterComponents(FMovieSceneEntityID EntityID, const FComponentMask& EntitiesToKeep)"
  },
  {
    "label": "CombineComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineComponents(FMovieSceneEntityID DestinationEntityID, FMovieSceneEntityID SourceEntityID, const FComponentMask* OptionalMask = nullptr)"
  },
  {
    "label": "DuplicateEntity()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID)",
    "insertText": "DuplicateEntity(FMovieSceneEntityID InOther)"
  },
  {
    "label": "OverwriteEntityWithDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteEntityWithDuplicate(FMovieSceneEntityID& InOutEntity, FMovieSceneEntityID InEntityToDuplicate)"
  },
  {
    "label": "DefineInstancedChildInitializer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DefineInstancedChildInitializer(TInlineValue<FChildEntityInitializer>&& InInitializer)"
  },
  {
    "label": "InitializeChildAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeChildAllocation(const FComponentMask& ParentType, const FComponentMask& ChildType, const FEntityAllocation* ParentAllocation, TArrayView<const int32> ParentAllocationOffsets, const FEntityRange& InChildEntityRange)"
  },
  {
    "label": "DestroyInstancedChildInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyInstancedChildInitializer(int32 Index)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (InstancedChildInitializers .)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "AddMutualComponents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMutualComponents()"
  },
  {
    "label": "AddMutualComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMutualComponents(const FEntityComponentFilter& InFilter)"
  },
  {
    "label": "ReadComponent()",
    "kind": "Method",
    "detail": "Function (public : template<T> TComponentLock<TReadOptional<T>>)",
    "insertText": "ReadComponent(FMovieSceneEntityID Entity, TComponentTypeID<T> ComponentTypeID)"
  },
  {
    "label": "AsIndex()",
    "kind": "Method",
    "detail": "Function (} FEntityLocation Location = EntityLocations [ Entity .)",
    "insertText": "AsIndex()"
  },
  {
    "label": "GetAllocationIndex()",
    "kind": "Method",
    "detail": "Function (} FEntityAllocation* Allocation = EntityAllocations [ Location .)",
    "insertText": "GetAllocationIndex()"
  },
  {
    "label": "GetEntryIndexWithinAllocation()",
    "kind": "Method",
    "detail": "Function (const int32 ComponentOffset = Location .)",
    "insertText": "GetEntryIndexWithinAllocation()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} } return TComponentLock<TReadOptional<)",
    "insertText": "T()"
  },
  {
    "label": "ReadComponentChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "ReadComponentChecked(FMovieSceneEntityID Entity, TComponentTypeID<T> ComponentTypeID)"
  },
  {
    "label": "ReadComponent()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TReadOptional<T>> Value =)",
    "insertText": "ReadComponent(Entity, ComponentTypeID)"
  },
  {
    "label": "WriteComponentChecked()",
    "kind": "Method",
    "detail": "Function (} template<T,ValueType> void)",
    "insertText": "WriteComponentChecked(FMovieSceneEntityID Entity, TComponentTypeID<T> ComponentTypeID, ValueType&& Value)"
  },
  {
    "label": "WriteComponent()",
    "kind": "Method",
    "detail": "Function (TComponentLock<TWriteOptional<T>> ComponentPtr =)",
    "insertText": "WriteComponent(Entity, ComponentTypeID)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (* ComponentPtr = Forward<)",
    "insertText": "ValueType(Value)"
  },
  {
    "label": "SetGatherThread()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetGatherThread(ENamedThreads::Type InGatherThread)"
  },
  {
    "label": "GetGatherThread()",
    "kind": "Method",
    "detail": "Function (GatherThread = InGatherThread ; } ENamedThreads::Type)",
    "insertText": "GetGatherThread()"
  },
  {
    "label": "GetDispatchThread()",
    "kind": "Method",
    "detail": "Function (DispatchThread = InDispatchThread ; } ENamedThreads::Type)",
    "insertText": "GetDispatchThread()"
  },
  {
    "label": "MutateAll()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MutateAll(const FEntityComponentFilter& Filter, const IMovieSceneEntityMutation& Mutation, EMutuallyInclusiveComponentType MutualTypes = EMutuallyInclusiveComponentType::Mandatory)"
  },
  {
    "label": "MutateConditional()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MutateConditional(const FEntityComponentFilter& Filter, const IMovieSceneConditionalEntityMutation& Mutation, EMutuallyInclusiveComponentType MutualTypes = EMutuallyInclusiveComponentType::Mandatory)"
  },
  {
    "label": "TouchEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TouchEntity(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChild(FMovieSceneEntityID ParentID, FMovieSceneEntityID ChildID)"
  },
  {
    "label": "GetImmediateChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateChildren(FMovieSceneEntityID ParentID, TArray<FMovieSceneEntityID>& OutChildren)"
  },
  {
    "label": "GetChildren_ParentFirst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren_ParentFirst(FMovieSceneEntityID ParentID, TArray<FMovieSceneEntityID>& OutChildren)"
  },
  {
    "label": "IterateImmediateChildren()",
    "kind": "Method",
    "detail": "Function (template<IteratorType> void)",
    "insertText": "IterateImmediateChildren(FMovieSceneEntityID ParentID, IteratorType&& Iterator)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(ChildIt.Value())"
  },
  {
    "label": "IterateChildren_ParentFirst()",
    "kind": "Method",
    "detail": "Function (} } template<IteratorType> void)",
    "insertText": "IterateChildren_ParentFirst(FMovieSceneEntityID ParentID, IteratorType&& Iterator)"
  },
  {
    "label": "IterateChildren_ParentFirst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateChildren_ParentFirst(ChildIt.Value(), Iterator)"
  },
  {
    "label": "CountMemory()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "CountMemory(FArchive& Ar, FMovieSceneEntityID EntityID)"
  },
  {
    "label": "FindComponentTypeHandler()",
    "kind": "Method",
    "detail": "Function (IComponentTypeHandler*)",
    "insertText": "FindComponentTypeHandler(const FGuid& ComponentGuid)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (public : FEntityAllocationIteratorProxy)",
    "insertText": "Iterate(const FEntityComponentFilter* InFilter)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FEntityComponentFilter& InFilter)"
  },
  {
    "label": "ContainsComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsComponent(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "ContainsAnyComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAnyComponent(std::initializer_list<FComponentTypeID> ComponentTypeIDs)"
  },
  {
    "label": "GetAccumulatedMask()",
    "kind": "Method",
    "detail": "Function (const FComponentMask& Mask =)",
    "insertText": "GetAccumulatedMask()"
  },
  {
    "label": "ContainsAnyComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAnyComponent(const FComponentMask& ComponentTypeIDs)"
  },
  {
    "label": "ContainsAllComponents()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAllComponents(std::initializer_list<FComponentTypeID> ComponentTypeIDs)"
  },
  {
    "label": "AccumulateMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateMask(const FEntityComponentFilter& InFilter, FComponentMask& OutMask)"
  },
  {
    "label": "EnterIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterIteration()"
  },
  {
    "label": "ExitIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitIteration()"
  },
  {
    "label": "CheckCanChangeStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckCanChangeStructure()"
  },
  {
    "label": "IsLockedDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLockedDown()"
  },
  {
    "label": "ReleaseLockDown()",
    "kind": "Method",
    "detail": "Function (LockdownState = ELockdownState::Locked ; } void)",
    "insertText": "ReleaseLockDown()"
  },
  {
    "label": "GetGlobalIterationFilter()",
    "kind": "Method",
    "detail": "Function (LockdownState = ELockdownState::Unlocked ; } const FEntityComponentFilter&)",
    "insertText": "GetGlobalIterationFilter()"
  },
  {
    "label": "GetSystemSerial()",
    "kind": "Method",
    "detail": "Function (SystemSerialNumber + = IncAmount ; } uint64)",
    "insertText": "GetSystemSerial()"
  },
  {
    "label": "OnStructureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStructureChanged()"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetDebugName(FString&& InNewDebugName)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ManagerDebugName =)",
    "insertText": "MoveTemp(InNewDebugName)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& ReferenceCollector)"
  },
  {
    "label": "ReplaceEntityID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceEntityID(FMovieSceneEntityID& InOutEntity, FMovieSceneEntityID EntityToDiscard)"
  },
  {
    "label": "GetHandleGeneration()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHandleGeneration()"
  },
  {
    "label": "CreateEntityAllocation()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation*)",
    "insertText": "CreateEntityAllocation(const FComponentMask& EntityComponentMask, uint16 InitialCapacity, uint16 MaxCapacity, FEntityAllocation* MigrateComponentDataFrom = nullptr)"
  },
  {
    "label": "CreateEntityAllocationEntry()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateEntityAllocationEntry(const FComponentMask& EntityComponentMask, uint16 InitialCapacity, uint16 MaxCapacity)"
  },
  {
    "label": "GetOrCreateAllocationWithSlack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOrCreateAllocationWithSlack(const FComponentMask& EntityComponentMask, int32* InOutDesiredSlack = nullptr)"
  },
  {
    "label": "CreateAllocationWithSlack()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateAllocationWithSlack(const FComponentMask& EntityComponentMask, int32* InOutDesiredSlack = nullptr)"
  },
  {
    "label": "MigrateEntity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MigrateEntity(int32 DestIndex, int32 SourceIndex, int32 SourceEntryIndexWithinAllocation)"
  },
  {
    "label": "CopyComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyComponents(int32 DestAllocationIndex, int32 DestEntityIndex, int32 SourceAllocationIndex, int32 SourceEntityIndex, const FComponentMask* OptionalMask = nullptr)"
  },
  {
    "label": "AddEntityToAllocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddEntityToAllocation(int32 AllocationIndex, FMovieSceneEntityID ID, EMemoryType MemoryType = EMemoryType::DefaultConstructed)"
  },
  {
    "label": "RemoveEntityFromAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntityFromAllocation(int32 AllocationIndex, int32 SourceEntryIndexWithinAllocation)"
  },
  {
    "label": "MigrateAllocation()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation*)",
    "insertText": "MigrateAllocation(int32 AllocationIndex, const FComponentMask& NewComponentMask)"
  },
  {
    "label": "CombineAllocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineAllocations(int32 DestinationIndex, int32 SourceIndex)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation*)",
    "insertText": "GetAllocation(int32 AllocationIndex)"
  },
  {
    "label": "GrowAllocation()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation*)",
    "insertText": "GrowAllocation(int32 AllocationIndex, int32 MinNumToGrowBy = 1)"
  },
  {
    "label": "DestroyAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllocation(FEntityAllocation* Allocation, bool bDestructComponentData = true)"
  },
  {
    "label": "NotifyUObjectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUObjectDeleted(const UObjectBase* Object, int32 Index)"
  },
  {
    "label": "OnUObjectArrayShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUObjectArrayShutdown()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (AllocationIndex = INVALID ; EntryIndexWithinAllocation = 0 ; } void)",
    "insertText": "Set(int32 InAllocationIndex, int32 InEntryIndexWithinAllocation)"
  },
  {
    "label": "AllocationIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocationIndex(uint16)"
  },
  {
    "label": "EntryIndexWithinAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EntryIndexWithinAllocation(uint16)"
  },
  {
    "label": "GetParentID()",
    "kind": "Method",
    "detail": "Function (ParentID = InParentID ; } FMovieSceneEntityID)",
    "insertText": "GetParentID()"
  },
  {
    "label": "FFreeEntityOperation()",
    "kind": "Method",
    "detail": "Function (uint16 AllocationIndex ; uint16 EntryIndexWithinAllocation ; FMovieSceneEntityID ParentID ; } ; TSparseArray<FComponentMask> EntityAllocationMasks ; TBitArray<> AllocationsWithCapacity ; TSparseArray<FEntityAllocation*> EntityAllocations ; TSparseArray<FEntityLocation> EntityLocations ; TMultiMap<FMovieSceneEntityID,FMovieSceneEntityID> ParentToChild ; TSparseArray<TInlineValue<FChildEntityInitializer>> InstancedChildInitializers ; TMap<FMovieSceneEntityID,uint32> EntityGenerationMap ; FComponentMask AccumulatedMask ; FEntityComponentFilter GlobalIterationFilter ; FComponentRegistry* ComponentRegistry ; FString ManagerDebugName ; uint64 SystemSerialNumber ; uint64 StructureMutationSystemSerialNumber ; uint32 NextAllocationID ; uint32 CurrentHandleGeneration ; bool bHandleGenerationStale ; bool bAccumulatedMaskStale ; FEntitySystemMaybeAtomicInt32 IterationCount ; ENamedThreads::Type GatherThread ; ENamedThreads::Type DispatchThread ; EEntityThreadingModel ThreadingModel ; enum class ELockdownState { Locked,Unlocked } ; ELockdownState LockdownState ; } ; struct FFreeEntityOperation {)",
    "insertText": "FFreeEntityOperation(FEntityManager* InEntityManager) : EntityManager(InEntityManager)"
  },
  {
    "label": "MarkAllocationForFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkAllocationForFree(int32 AllocationIndex)"
  },
  {
    "label": "MarkEntityForFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkEntityForFree(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (private : struct FAllocationMask { TBitArray<> Mask ; bool bDestroyAllocation = false ; } ; struct FCommitData { TMap<int32,FAllocationMask> AllocationsToEntities ; TArray<FMovieSceneEntityID> EmptyEntities ; } ; FCommitData)",
    "insertText": "Commit()"
  }
]