[
  {
    "label": "SAccessLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAccessLevel"
  },
  {
    "label": "SQualifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SQualifier"
  },
  {
    "label": "CAstPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAstPackage"
  },
  {
    "label": "CAstCompilationUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAstCompilationUnit"
  },
  {
    "label": "CControlScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CControlScope"
  },
  {
    "label": "CClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClass"
  },
  {
    "label": "CClassDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClassDefinition"
  },
  {
    "label": "CDataDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDataDefinition"
  },
  {
    "label": "CEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumeration"
  },
  {
    "label": "CEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CEnumerator"
  },
  {
    "label": "CFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFunction"
  },
  {
    "label": "CInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CInterface"
  },
  {
    "label": "CModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CModule"
  },
  {
    "label": "CModulePart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CModulePart"
  },
  {
    "label": "CModuleAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CModuleAlias"
  },
  {
    "label": "CSnippet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSnippet"
  },
  {
    "label": "CLogicalScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLogicalScope"
  },
  {
    "label": "CSemanticAnalyzerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticAnalyzerImpl"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "CScopedAccessLevelDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CScopedAccessLevelDefinition"
  },
  {
    "label": "CTypeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeBase"
  },
  {
    "label": "CTypeAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeAlias"
  },
  {
    "label": "CTypeScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeScope"
  },
  {
    "label": "CTypeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeType"
  },
  {
    "label": "CTypeVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTypeVariable"
  },
  {
    "label": "SResolvedDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SResolvedDefinition"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDefinition"
  },
  {
    "label": "CScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CScope"
  },
  {
    "label": "SResolvedDefinition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / Function . h \" # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / Semantics / FilteredDefinitionRange . h \" # include \" uLang / Semantics / MemberOrigin . h \" # include \" uLang / Semantics / Revision . h \" # include \" uLang / Semantics / SmallDefinitionArray . h \" # include \" uLang / Semantics / StructOrClass . h \" # include \" uLang / Semantics / VisitStamp . h \" namespace uLang { struct SAccessLevel ; struct SQualifier ; class CAstPackage ; class CAstCompilationUnit ; class CControlScope ; class CClass ; class CClassDefinition ; class CDataDefinition ; class CEnumeration ; class CEnumerator ; class CFunction ; class CInterface ; class CModule ; class CModulePart ; class CModuleAlias ; class CSnippet ; class CLogicalScope ; class CSemanticAnalyzerImpl ; class CSemanticProgram ; class CScopedAccessLevelDefinition ; class CTypeBase ; class CTypeAlias ; class CTypeScope ; class CTypeType ; class CTypeVariable ; struct SResolvedDefinition { CDefinition* _Definition ; const CDataDefinition* _Context ;)",
    "insertText": "SResolvedDefinition(CDefinition* Definition) : _Definition(Definition), _Context(nullptr)"
  },
  {
    "label": "SResolvedDefinition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SResolvedDefinition(CDefinition* Definition, const CDataDefinition* Context) : _Definition(Definition), _Context(Context)"
  },
  {
    "label": "KindToCString()",
    "kind": "Method",
    "detail": "Function (} } ; using SResolvedDefinitionArray = TArrayG<SResolvedDefinition,TInlineElementAllocator<1>> ; class CScope { public : enum class EKind : uint8_t { Program,CompatConstraintRoot,Module,ModulePart,Snippet,Class,Function,ControlScope,Interface,Type,Enumeration } ; const char*)",
    "insertText": "KindToCString(EKind Kind)"
  },
  {
    "label": "CScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CScope(EKind Kind, CScope* Parent, CSemanticProgram& Program) : _Kind(Kind), _Parent(Parent), _Program(Program)"
  },
  {
    "label": "CScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CScope()"
  },
  {
    "label": "CScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CScope(const CScope&)"
  },
  {
    "label": "CScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CScope(CScope&&)"
  },
  {
    "label": "GetScopeName()",
    "kind": "Method",
    "detail": "Function (CSymbol)",
    "insertText": "GetScopeName()"
  },
  {
    "label": "ScopeAsType()",
    "kind": "Method",
    "detail": "Function (const CTypeBase*)",
    "insertText": "ScopeAsType()"
  },
  {
    "label": "GetScopePath()",
    "kind": "Method",
    "detail": "Function (enum class EPathMode : uint8_t { Default,PrefixSeparator,PackageRelative,PackageRelativeWithRoot } ; CUTF8String)",
    "insertText": "GetScopePath(uLang::UTF8Char SeparatorChar = '.', EPathMode Mode = EPathMode::Default)"
  },
  {
    "label": "GetModule()",
    "kind": "Method",
    "detail": "Function (const CModule*)",
    "insertText": "GetModule()"
  },
  {
    "label": "GetModulePart()",
    "kind": "Method",
    "detail": "Function (const CModulePart*)",
    "insertText": "GetModulePart()"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (CAstPackage*)",
    "insertText": "GetPackage()"
  },
  {
    "label": "GetCompilationUnit()",
    "kind": "Method",
    "detail": "Function (CAstCompilationUnit*)",
    "insertText": "GetCompilationUnit()"
  },
  {
    "label": "GetSnippet()",
    "kind": "Method",
    "detail": "Function (const CSnippet*)",
    "insertText": "GetSnippet()"
  },
  {
    "label": "GetSymbols()",
    "kind": "Method",
    "detail": "Function (const TSPtr<CSymbolTable>&)",
    "insertText": "GetSymbols()"
  },
  {
    "label": "GetProgram()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE CSemanticProgram&)",
    "insertText": "GetProgram()"
  },
  {
    "label": "GetLogicalScope()",
    "kind": "Method",
    "detail": "Function (const CLogicalScope&)",
    "insertText": "GetLogicalScope()"
  },
  {
    "label": "AsLogicalScopeNullable()",
    "kind": "Method",
    "detail": "Function (} const CLogicalScope*)",
    "insertText": "AsLogicalScopeNullable()"
  },
  {
    "label": "IsSameOrChildOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSameOrChildOf(const CScope* Other)"
  },
  {
    "label": "IsControlScope()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControlScope()"
  },
  {
    "label": "IsModuleOrSnippet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModuleOrSnippet()"
  },
  {
    "label": "IsBuiltInScope()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBuiltInScope()"
  },
  {
    "label": "CreateModule()",
    "kind": "Method",
    "detail": "Function (CModule&)",
    "insertText": "CreateModule(const CSymbol& ModuleName)"
  },
  {
    "label": "CreateClass()",
    "kind": "Method",
    "detail": "Function (CClassDefinition&)",
    "insertText": "CreateClass(const CSymbol& ClassName, CClass* Superclass = nullptr, TArray<CInterface*>&& SuperInterfaces = {}, EStructOrClass StructOrClass = EStructOrClass::Class)"
  },
  {
    "label": "CreateEnumeration()",
    "kind": "Method",
    "detail": "Function (CEnumeration&)",
    "insertText": "CreateEnumeration(const CSymbol& EnumerationName)"
  },
  {
    "label": "CreateInterface()",
    "kind": "Method",
    "detail": "Function (CInterface&)",
    "insertText": "CreateInterface(const CSymbol& InterfaceName, const TArray<CInterface*>& SuperInterfaces = {})"
  },
  {
    "label": "CreateFunction()",
    "kind": "Method",
    "detail": "Function (TSRef<CFunction>)",
    "insertText": "CreateFunction(const CSymbol FunctionName)"
  },
  {
    "label": "CreateNegativeFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNegativeFunction(const CFunction& PositiveFunction)"
  },
  {
    "label": "CreateDataDefinition()",
    "kind": "Method",
    "detail": "Function (} TSRef<CDataDefinition>)",
    "insertText": "CreateDataDefinition(const CSymbol VarName)"
  },
  {
    "label": "CreateDataDefinition()",
    "kind": "Method",
    "detail": "Function (TSRef<CDataDefinition>)",
    "insertText": "CreateDataDefinition(const CSymbol VarName, const CTypeBase* Type)"
  },
  {
    "label": "CreateNegativeDataDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNegativeDataDefinition(const CDataDefinition& PositiveDataDefinition)"
  },
  {
    "label": "CreateTypeAlias()",
    "kind": "Method",
    "detail": "Function (} TSRef<CTypeAlias>)",
    "insertText": "CreateTypeAlias(const CSymbol Name)"
  },
  {
    "label": "CreateTypeVariable()",
    "kind": "Method",
    "detail": "Function (TSRef<CTypeVariable>)",
    "insertText": "CreateTypeVariable(const CSymbol Name, const CTypeBase* Type)"
  },
  {
    "label": "CreateModuleAlias()",
    "kind": "Method",
    "detail": "Function (TSRef<CModuleAlias>)",
    "insertText": "CreateModuleAlias(const CSymbol Name)"
  },
  {
    "label": "CreateAccessLevelDefinition()",
    "kind": "Method",
    "detail": "Function (TSRef<CScopedAccessLevelDefinition>)",
    "insertText": "CreateAccessLevelDefinition(TOptional<CSymbol> ClassName)"
  },
  {
    "label": "AddUsingScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUsingScope(const CLogicalScope* UsingScope)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (_UsingScopes .)",
    "insertText": "AddUnique(UsingScope)"
  },
  {
    "label": "GetUsingScopes()",
    "kind": "Method",
    "detail": "Function (} const TArray<const CLogicalScope*>&)",
    "insertText": "GetUsingScopes()"
  },
  {
    "label": "GetUsingInstances()",
    "kind": "Method",
    "detail": "Function (const TArray<const CDataDefinition*>&)",
    "insertText": "GetUsingInstances()"
  },
  {
    "label": "ResolvedDefnsAppendWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvedDefnsAppendWithContext(SResolvedDefinitionArray* ResolvedDefns, const SmallDefinitionArray& Definitions, const CDataDefinition* Context)"
  },
  {
    "label": "ResolveDefinition()",
    "kind": "Method",
    "detail": "Function (SResolvedDefinitionArray)",
    "insertText": "ResolveDefinition(const CSymbol& Name, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr)"
  },
  {
    "label": "CreateNestedControlScope()",
    "kind": "Method",
    "detail": "Function (TSRef<CControlScope>)",
    "insertText": "CreateNestedControlScope(CSymbol Name = CSymbol())"
  },
  {
    "label": "GetNestedControlScopes()",
    "kind": "Method",
    "detail": "Function (const TSRefArray<CControlScope>&)",
    "insertText": "GetNestedControlScopes()"
  },
  {
    "label": "GenerateNewVisitStamp()",
    "kind": "Method",
    "detail": "Function (VisitStampType)",
    "insertText": "GenerateNewVisitStamp()"
  },
  {
    "label": "IsAuthoredByEpic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuthoredByEpic()"
  },
  {
    "label": "CanAccessEpicInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAccessEpicInternal()"
  },
  {
    "label": "CanAccess()",
    "kind": "Method",
    "detail": "Function (protected : class CSemanticAnalyzerImpl ; class CDefinition ; class CDataDefinition ; bool)",
    "insertText": "CanAccess(const CDefinition& Definition, const SAccessLevel& DefinitionAccessLevel)"
  },
  {
    "label": "CLogicalScope()",
    "kind": "Method",
    "detail": "Function (EKind _Kind ; CScope* _Parent ; CSemanticProgram& _Program ; TArray<const CLogicalScope*> _UsingScopes ; TArray<const CDataDefinition*> _UsingInstances ; TSRefArray<CControlScope> _NestedControlScopes ; TSRefArray<CTypeScope> _NestedTypeScopes ; } ; class CLogicalScope : public CScope { public :)",
    "insertText": "CLogicalScope(EKind Kind, CScope* Parent, CSemanticProgram& Program) : CScope(Kind, Parent, Program), _LastVisitStamp(0)"
  },
  {
    "label": "CLogicalScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CLogicalScope()"
  },
  {
    "label": "CLogicalScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CLogicalScope(const CLogicalScope&)"
  },
  {
    "label": "CLogicalScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CLogicalScope(CLogicalScope&&)"
  },
  {
    "label": "IterateRecurseLogicalScopes()",
    "kind": "Method",
    "detail": "Function (EIterateResult)",
    "insertText": "IterateRecurseLogicalScopes(const TFunction<EVisitResult(const CLogicalScope&)>& Functor)"
  },
  {
    "label": "IterateRecurseLogicalScopes()",
    "kind": "Method",
    "detail": "Function (EIterateResult)",
    "insertText": "IterateRecurseLogicalScopes(TFunction<EVisitResult(const CLogicalScope&)>&& Functor)"
  },
  {
    "label": "GetDefinitions()",
    "kind": "Method",
    "detail": "Function (const TArray<TSRef<CDefinition>>&)",
    "insertText": "GetDefinitions()"
  },
  {
    "label": "FindDefinitions()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray)",
    "insertText": "FindDefinitions(const CSymbol& Name, EMemberOrigin Origin = EMemberOrigin::InheritedOrOriginal, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = GenerateNewVisitStamp())"
  },
  {
    "label": "FindFirstDefinitionOfKind()",
    "kind": "Method",
    "detail": "Function (template<FilterClass> FilterClass*)",
    "insertText": "FindFirstDefinitionOfKind(const CSymbol& Name, EMemberOrigin Origin = EMemberOrigin::InheritedOrOriginal, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = GenerateNewVisitStamp())"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevision(SemanticRevision Revision)"
  },
  {
    "label": "GetRevision()",
    "kind": "Method",
    "detail": "Function (SemanticRevision)",
    "insertText": "GetRevision()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(VisitStamp >= _LastVisitStamp, \"Guard against situations where this is used in a nested context.\")"
  },
  {
    "label": "GetDefinitionsOfKind()",
    "kind": "Method",
    "detail": "Function (protected : class CScope ; TArray<TSRef<CDefinition>> _Definitions ; SemanticRevision _CumulativeRevision = 1 ; VisitStampType _LastVisitStamp { 0 } ; private : int32_t _NextDefinitionOrdinal { 0 } ; } ; template<FilterClass> TFilteredDefinitionRange<FilterClass>)",
    "insertText": "GetDefinitionsOfKind()"
  },
  {
    "label": "FindFirstDefinitionOfKind()",
    "kind": "Method",
    "detail": "Function (} template<FilterClass> FilterClass*)",
    "insertText": "FindFirstDefinitionOfKind(const CSymbol& Name, EMemberOrigin Origin, const SQualifier& Qualifier, const CAstPackage* ContextPackage, VisitStampType VisitStamp)"
  },
  {
    "label": "FindDefinitions()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray Definitions =)",
    "insertText": "FindDefinitions(Name, Origin, Qualifier, ContextPackage, VisitStamp)"
  }
]