[
  {
    "label": "FTextProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextProperty"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetPackageNamespace()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / TextNamespaceFwd . h \" # include \" Internationalization / TextNamespaceUtil . h \" class FTextProperty ; class UObject ; class UPackage ; namespace TextNamespaceUtil { # if USE_STABLE_LOCALIZATION_KEYS FString)",
    "insertText": "GetPackageNamespace(const UPackage* InPackage)"
  },
  {
    "label": "GetPackageNamespace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackageNamespace(const UObject* InObject)"
  },
  {
    "label": "EnsurePackageNamespace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "EnsurePackageNamespace(UPackage* InPackage)"
  },
  {
    "label": "EnsurePackageNamespace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "EnsurePackageNamespace(UObject* InObject)"
  },
  {
    "label": "ClearPackageNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPackageNamespace(UPackage* InPackage)"
  },
  {
    "label": "ClearPackageNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPackageNamespace(UObject* InObject)"
  },
  {
    "label": "ForcePackageNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePackageNamespace(UPackage* InPackage, const FString& InNamespace)"
  },
  {
    "label": "ForcePackageNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePackageNamespace(UObject* InObject, const FString& InNamespace)"
  },
  {
    "label": "CopyTextToPackage()",
    "kind": "Method",
    "detail": "Function (# endif FText)",
    "insertText": "CopyTextToPackage(const FText& InText, UPackage* InPackage, const ETextCopyMethod InCopyMethod = ETextCopyMethod::NewKey, const bool bAlwaysApplyPackageNamespace = false)"
  },
  {
    "label": "CopyTextToPackage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "CopyTextToPackage(const FText& InText, UObject* InObject, const ETextCopyMethod InCopyMethod = ETextCopyMethod::NewKey, const bool bAlwaysApplyPackageNamespace = false)"
  },
  {
    "label": "GenerateDeterministicPackageNamespace()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FString)",
    "insertText": "GenerateDeterministicPackageNamespace(const UPackage* InPackage)"
  },
  {
    "label": "GenerateRandomTextKey()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GenerateRandomTextKey()"
  },
  {
    "label": "GenerateDeterministicTextKey()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateDeterministicTextKey(UObject* InTextOwner, const FTextProperty* InTextProperty, const bool bApplyPackageNamespace = true)"
  },
  {
    "label": "GenerateDeterministicTextKey()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateDeterministicTextKey(UObject* InTextOwner, const FName InTextPropertyName, const bool bApplyPackageNamespace = true)"
  },
  {
    "label": "GetTextIdForEdit()",
    "kind": "Method",
    "detail": "Function (enum class ETextEditAction : uint8 { Namespace,Key,SourceString,} ; void)",
    "insertText": "GetTextIdForEdit(UPackage* InPackage, const ETextEditAction InEditAction, const FString& InTextSource, const FString& InProposedNamespace, const FString& InProposedKey, FString& OutStableNamespace, FString& OutStableKey, TFunctionRef<FString()> InTextKeyGenerator = &GenerateRandomTextKey, const bool bApplyPackageNamespace = true)"
  },
  {
    "label": "EditTextProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditTextProperty(UObject* InTextOwner, const FTextProperty* InTextProperty, const ETextEditAction InEditAction, const FString& InEditValue, TFunctionRef<FString()> InTextKeyGenerator = &GenerateRandomTextKey, const bool bApplyPackageNamespace = true)"
  },
  {
    "label": "EditTextProperty_Direct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditTextProperty_Direct(UPackage* InPackage, void* InTextValue, const FTextProperty* InTextProperty, const ETextEditAction InEditAction, const FString& InEditValue, TFunctionRef<FString()> InTextKeyGenerator = &GenerateRandomTextKey, const bool bApplyPackageNamespace = true)"
  }
]