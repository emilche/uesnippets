[
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQualityLevels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualityLevels"
  },
  {
    "label": "FResolutionPreset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolutionPreset"
  },
  {
    "label": "FQualityLevels()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" enum EShaderPlatform : uint16 ; namespace Scalability { enum class EQualityLevelBehavior { EAbsolute,ERelativeToMax,} ; const int32 DefaultQualityLevel = 3 ; struct FQualityLevels { float ResolutionQuality ; int32 ViewDistanceQuality ; int32 AntiAliasingQuality ; int32 ShadowQuality ; int32 GlobalIlluminationQuality ; int32 ReflectionQuality ; int32 PostProcessQuality ; int32 TextureQuality ; int32 EffectsQuality ; int32 FoliageQuality ; int32 ShadingQuality ; int32 LandscapeQuality ; float CPUBenchmarkResults ; float GPUBenchmarkResults ; TArray<float> CPUBenchmarkSteps ; TArray<float> GPUBenchmarkSteps ;)",
    "insertText": "FQualityLevels(bool bSetDefaults = true) : CPUBenchmarkResults(-1.0f) , GPUBenchmarkResults(-1.0f)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaults()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FQualityLevels& Other)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "SetFromSingleQualityLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFromSingleQualityLevel(int32 Value)"
  },
  {
    "label": "SetFromSingleQualityLevelRelativeToMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromSingleQualityLevelRelativeToMax(int32 Value)"
  },
  {
    "label": "GetSingleQualityLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSingleQualityLevel()"
  },
  {
    "label": "GetMinQualityLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinQualityLevel()"
  },
  {
    "label": "SetViewDistanceQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewDistanceQuality(int32 Value)"
  },
  {
    "label": "SetAntiAliasingQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAntiAliasingQuality(int32 Value)"
  },
  {
    "label": "SetShadowQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadowQuality(int32 Value)"
  },
  {
    "label": "SetGlobalIlluminationQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalIlluminationQuality(int32 Value)"
  },
  {
    "label": "SetReflectionQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReflectionQuality(int32 Value)"
  },
  {
    "label": "SetPostProcessQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostProcessQuality(int32 Value)"
  },
  {
    "label": "SetTextureQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureQuality(int32 Value)"
  },
  {
    "label": "SetEffectsQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEffectsQuality(int32 Value)"
  },
  {
    "label": "SetFoliageQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFoliageQuality(int32 Value)"
  },
  {
    "label": "SetShadingQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadingQuality(int32 Value)"
  },
  {
    "label": "SetLandscapeQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLandscapeQuality(int32 Value)"
  },
  {
    "label": "SetBenchmarkFallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBenchmarkFallback()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnScalabilitySettingsChanged, const Scalability::FQualityLevels&)"
  },
  {
    "label": "GetResolutionPresets()",
    "kind": "Method",
    "detail": "Function (FOnScalabilitySettingsChanged OnScalabilitySettingsChanged ; struct FResolutionPreset { FString Name ; int32 Id = 0 ; float ResolutionQuality = 1 0 0 . 0 f ; } ; TArray<FResolutionPreset>)",
    "insertText": "GetResolutionPresets()"
  },
  {
    "label": "SetQualityLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQualityLevels(const FQualityLevels& QualityLevels, bool bForce = false)"
  },
  {
    "label": "ApplyCachedQualityLevelForShaderPlatform()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ApplyCachedQualityLevelForShaderPlatform(const EShaderPlatform& ShaderPlatform)"
  },
  {
    "label": "GetQualityLevels()",
    "kind": "Method",
    "detail": "Function (# endif FQualityLevels)",
    "insertText": "GetQualityLevels()"
  },
  {
    "label": "ToggleTemporaryQualityLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTemporaryQualityLevels(bool bEnable, const FQualityLevels& QualityLevelsOverride = FQualityLevels())"
  },
  {
    "label": "IsTemporaryQualityLevelActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemporaryQualityLevelActive()"
  },
  {
    "label": "GetEffectsQualityDirect()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEffectsQualityDirect(bool bGameThread)"
  },
  {
    "label": "InitScalabilitySystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitScalabilitySystem()"
  },
  {
    "label": "LoadState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadState(const FString& IniName)"
  },
  {
    "label": "SaveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveState(const FString& IniName)"
  },
  {
    "label": "RecordQualityLevelsAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordQualityLevelsAnalytics(bool bAutoApplied)"
  },
  {
    "label": "ComputeQualityLevelsFromPerfIndex()",
    "kind": "Method",
    "detail": "Function (FQualityLevels)",
    "insertText": "ComputeQualityLevelsFromPerfIndex(float CPUPerfIndex, float GPUPerfIndex)"
  },
  {
    "label": "BenchmarkQualityLevels()",
    "kind": "Method",
    "detail": "Function (FQualityLevels)",
    "insertText": "BenchmarkQualityLevels(uint32 WorkScale=10, float CPUMultiplier = 1.0f, float GPUMultiplier = 1.0f)"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetQualityLevelCounts()",
    "kind": "Method",
    "detail": "Function (FQualityLevels)",
    "insertText": "GetQualityLevelCounts()"
  },
  {
    "label": "GetScalabilityNameFromQualityLevel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetScalabilityNameFromQualityLevel(int32 QualityLevel)"
  },
  {
    "label": "ChangeScalabilityPreviewPlatform()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ChangeScalabilityPreviewPlatform(FName NewPlatformScalabilityName, const EShaderPlatform& ShaderPlatform)"
  },
  {
    "label": "GetQualityLevelText()",
    "kind": "Method",
    "detail": "Function (# endif FText)",
    "insertText": "GetQualityLevelText(int32 Value, int32 NumLevels)"
  },
  {
    "label": "GetScalabilitySectionString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetScalabilitySectionString(const TCHAR* InGroupName, int32 InQualityLevel, int32 InNumLevels)"
  }
]