[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FParameterSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParameterSection"
  },
  {
    "label": "FParameterSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" ISequencerSection . h \" # include \" Input / Reply . h \" class FName ; class FSequencerSectionPainter ; class ISequencer ; class UMovieSceneSection ; struct FKeyHandle ; class FParameterSection : public FSequencerSection { public :)",
    "insertText": "FParameterSection(UMovieSceneSection& InSectionObject, TWeakPtr<ISequencer> InSequencer) : FSequencerSection(InSectionObject) , WeakSequencer(InSequencer)"
  },
  {
    "label": "OnKeyDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} public : FReply)",
    "insertText": "OnKeyDoubleClicked(const TArray<FKeyHandle>& KeyHandles)"
  },
  {
    "label": "RequestDeleteCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestDeleteCategory(const TArray<FName>& CategoryNamePath)"
  },
  {
    "label": "RequestDeleteKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestDeleteKeyArea(const TArray<FName>& KeyAreaNamePath)"
  },
  {
    "label": "ConstructCategoryModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::FCategoryModel>)",
    "insertText": "ConstructCategoryModel(FName InCategoryName, const FText& InDisplayText, TArrayView<const FChannelData> Channels)"
  }
]