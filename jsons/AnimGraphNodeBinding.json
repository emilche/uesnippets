[
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FSearchTagDataPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchTagDataPair"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FMemberReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemberReference"
  },
  {
    "label": "UAnimGraphNodeBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNodeBinding"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "UAnimGraphNode_CustomProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_CustomProperty"
  },
  {
    "label": "FAnimBlueprintCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimBlueprintCompilerContext"
  },
  {
    "label": "UAnimBlueprintExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintExtension"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimGraphNode_Base . h \" # include \" Widgets / SNullWidget . h \" # include \" AnimGraphNodeBinding . generated . h \" class UEdGraphPin ; struct FSearchTagDataPair ; class UClass ; class UBlueprint ; struct FMemberReference ;)",
    "insertText": "UCLASS(MinimalAPI, Abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetAnimNodeHandlerStruct()",
    "kind": "Method",
    "detail": "Function (class UAnimGraphNode_CustomProperty ; class FAnimBlueprintCompilerContext ; class UAnimBlueprintExtension ; UScriptStruct*)",
    "insertText": "GetAnimNodeHandlerStruct() const PURE_VIRTUAL(UAnimGraphNodeBinding::GetAnimNodeHandlerStruct, return nullptr;) virtual void OnInternalPinCreation(UAnimGraphNode_Base* InNode)"
  },
  {
    "label": "OnReconstructNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReconstructNode(UAnimGraphNode_Base* InNode)"
  },
  {
    "label": "OnExpandNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnExpandNode(IAnimBlueprintCompilationContext& InCompilationContext, UAnimGraphNode_Base* InNode, UEdGraph* InSourceGraph)"
  },
  {
    "label": "HasBinding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBinding(FName InBindingName, bool bCheckArrayIndexName) const PURE_VIRTUAL(UAnimGraphNodeBinding::HasBinding, return false;) virtual void RemoveBindings(FName InBindingName) PURE_VIRTUAL(UAnimGraphNodeBinding::RemoveBindings, ) virtual void AddPinSearchMetaDataInfo(const UEdGraphPin* InPin, FName InBindingName, TArray<FSearchTagDataPair>& OutTaggedMetaData)"
  },
  {
    "label": "HandleVariableRenamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleVariableRenamed(UBlueprint* InBlueprint, UClass* InVariableClass, UEdGraph* InGraph, const FName& InOldVarName, const FName& InNewVarName)"
  },
  {
    "label": "HandleFunctionRenamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleFunctionRenamed(UBlueprint* InBlueprint, UClass* InFunctionClass, UEdGraph* InGraph, const FName& InOldFuncName, const FName& InNewFuncName)"
  },
  {
    "label": "ReplaceReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceReferences(UBlueprint* InBlueprint, UBlueprint* InReplacementBlueprint, const FMemberReference& InSource, const FMemberReference& InReplacement)"
  },
  {
    "label": "ReferencesVariable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReferencesVariable(const FName& InVarName, const UStruct* InScope)"
  },
  {
    "label": "ProcessDuringCompilation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessDuringCompilation(IAnimBlueprintCompilationContext& InCompilationContext, IAnimBlueprintGeneratedClassCompiledData& OutCompiledData)"
  },
  {
    "label": "MakePropertyBindingWidget()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR TSharedRef<SWidget>)",
    "insertText": "MakePropertyBindingWidget(const UAnimGraphNode_Base::FAnimPropertyBindingWidgetArgs& InArgs)"
  }
]