[
  {
    "label": "fields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fields"
  },
  {
    "label": "second_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "second_tag"
  },
  {
    "label": "minute_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "minute_tag"
  },
  {
    "label": "hour_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hour_tag"
  },
  {
    "label": "day_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "day_tag"
  },
  {
    "label": "month_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "month_tag"
  },
  {
    "label": "year_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "year_tag"
  },
  {
    "label": "civil_time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "civil_time"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "__cpp_constexpr()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_CIVIL_TIME_DETAIL_H_ # define ABSL_TIME_INTERNAL_CCTZ_CIVIL_TIME_DETAIL_H_ # include<cstdint> # include<limits> # include<ostream> # include<type_traits> # include \" absl / base / config . h \" # if)",
    "insertText": "__cpp_constexpr(defined(_MSC_VER) && _MSC_VER >= 1910)"
  },
  {
    "label": "fields()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { using year_t = std::int_fast64_t ; using diff_t = std::int_fast64_t ; namespace detail { using month_t = std::int_fast8_t ; using day_t = std::int_fast8_t ; using hour_t = std::int_fast8_t ; using minute_t = std::int_fast8_t ; using second_t = std::int_fast8_t ; struct fields { CONSTEXPR_M)",
    "insertText": "fields(year_t year, month_t month, day_t day, hour_t hour, minute_t minute, second_t second) : y(year), m(month), d(day), hh(hour), mm(minute), ss(second)"
  },
  {
    "label": "is_leap_year()",
    "kind": "Method",
    "detail": "Function (} std::int_least64_t y ; std::int_least8_t m ; std::int_least8_t d ; std::int_least8_t hh ; std::int_least8_t mm ; std::int_least8_t ss ; } ; struct second_tag { } ; struct minute_tag : second_tag { } ; struct hour_tag : minute_tag { } ; struct day_tag : hour_tag { } ; struct month_tag : day_tag { } ; struct year_tag : month_tag { } ; namespace impl { CONSTEXPR_F bool)",
    "insertText": "is_leap_year(year_t y)"
  },
  {
    "label": "year_index()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F int)",
    "insertText": "year_index(year_t y, month_t m)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int yi = static_cast<)",
    "insertText": "int((y + (m > 2)) % 400)"
  },
  {
    "label": "days_per_4years()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F int)",
    "insertText": "days_per_4years(int yi)"
  },
  {
    "label": "days_per_year()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F int)",
    "insertText": "days_per_year(year_t y, month_t m)"
  },
  {
    "label": "days_per_month()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F int)",
    "insertText": "days_per_month(year_t y, month_t m)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (CONSTEXPR_D int k_days_per_month [ 1 + 1 2 ] = { - 1,3 1,2 8,3 1,3 0,3 1,3 0,3 1,3 1,3 0,3 1,3 0,3 1 } ; return k_days_per_month [)",
    "insertText": "m(m == 2 && is_leap_year(y))"
  },
  {
    "label": "n_day()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "n_day(year_t y, month_t m, diff_t d, diff_t cd, hour_t hh, minute_t mm, second_t ss)"
  },
  {
    "label": "ey()",
    "kind": "Method",
    "detail": "Function (year_t ey = y % 4 0 0 ; const year_t oey = ey ;)",
    "insertText": "ey(cd / 146097)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cd % = 1 4 6 0 9 7 ;)",
    "insertText": "if(cd < 0)"
  },
  {
    "label": "ey()",
    "kind": "Method",
    "detail": "Function (ey - = 4 0 0 ; cd + = 1 4 6 0 9 7 ; })",
    "insertText": "ey(d / 146097)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (d = d % 1 4 6 0 9 7 + cd ;)",
    "insertText": "if(d > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ey + = 4 0 0 ; d - = 1 4 6 0 9 7 ; } } else {)",
    "insertText": "if(d > -365)"
  },
  {
    "label": "days_per_year()",
    "kind": "Method",
    "detail": "Function (ey - = 1 ; d + =)",
    "insertText": "days_per_year(ey, m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { ey - = 4 0 0 ; d + = 1 4 6 0 9 7 ; } })",
    "insertText": "if(d > 365)"
  },
  {
    "label": "year_index()",
    "kind": "Method",
    "detail": "Function (int yi =)",
    "insertText": "year_index(ey, m)"
  },
  {
    "label": "days_per_century()",
    "kind": "Method",
    "detail": "Function (int n =)",
    "insertText": "days_per_century(yi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (d - = n ; ey + = 1 0 0 ; yi + = 1 0 0 ;)",
    "insertText": "if(yi >= 400)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(;;)"
  },
  {
    "label": "days_per_4years()",
    "kind": "Method",
    "detail": "Function (int n =)",
    "insertText": "days_per_4years(yi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (d - = n ; + + ey ; } })",
    "insertText": "if(d > 28)"
  },
  {
    "label": "days_per_month()",
    "kind": "Method",
    "detail": "Function (int n =)",
    "insertText": "days_per_month(ey, m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (d - = n ;)",
    "insertText": "if(++m > 12)"
  },
  {
    "label": "fields()",
    "kind": "Method",
    "detail": "Function (+ + ey ; m = 1 ; } } } return)",
    "insertText": "fields(y + (ey - oey), m, static_cast<day_t>(d), hh, mm, ss)"
  },
  {
    "label": "n_mon()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "n_mon(year_t y, diff_t m, diff_t d, diff_t cd, hour_t hh, minute_t mm, second_t ss)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (y + = m / 1 2 ; m % = 1 2 ;)",
    "insertText": "if(m <= 0)"
  },
  {
    "label": "n_day()",
    "kind": "Method",
    "detail": "Function (y - = 1 ; m + = 1 2 ; } } return)",
    "insertText": "n_day(y, static_cast<month_t>(m), d, cd, hh, mm, ss)"
  },
  {
    "label": "n_hour()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "n_hour(year_t y, diff_t m, diff_t d, diff_t cd, diff_t hh, minute_t mm, second_t ss)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cd + = hh / 2 4 ; hh % = 2 4 ;)",
    "insertText": "if(hh < 0)"
  },
  {
    "label": "n_mon()",
    "kind": "Method",
    "detail": "Function (cd - = 1 ; hh + = 2 4 ; } return)",
    "insertText": "n_mon(y, m, d, cd, static_cast<hour_t>(hh), mm, ss)"
  },
  {
    "label": "n_min()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "n_min(year_t y, diff_t m, diff_t d, diff_t hh, diff_t ch, diff_t mm, second_t ss)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ch + = mm / 6 0 ; mm % = 6 0 ;)",
    "insertText": "if(mm < 0)"
  },
  {
    "label": "n_hour()",
    "kind": "Method",
    "detail": "Function (ch - = 1 ; mm + = 6 0 ; } return)",
    "insertText": "n_hour(y, m, d, hh / 24 + ch / 24, hh % 24 + ch % 24, static_cast<minute_t>(mm), ss)"
  },
  {
    "label": "n_sec()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "n_sec(year_t y, diff_t m, diff_t d, diff_t hh, diff_t mm, diff_t ss)"
  },
  {
    "label": "second_t()",
    "kind": "Method",
    "detail": "Function (const second_t nss = static_cast<)",
    "insertText": "second_t(ss)"
  },
  {
    "label": "minute_t()",
    "kind": "Method",
    "detail": "Function (const minute_t nmm = static_cast<)",
    "insertText": "minute_t(mm)"
  },
  {
    "label": "hour_t()",
    "kind": "Method",
    "detail": "Function (const hour_t nhh = static_cast<)",
    "insertText": "hour_t(hh)"
  },
  {
    "label": "day_t()",
    "kind": "Method",
    "detail": "Function (const day_t nd = static_cast<)",
    "insertText": "day_t(d)"
  },
  {
    "label": "month_t()",
    "kind": "Method",
    "detail": "Function (const month_t nm = static_cast<)",
    "insertText": "month_t(m)"
  },
  {
    "label": "n_mon()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "n_mon(y, m, d, 0, nhh, nmm, nss)"
  },
  {
    "label": "n_hour()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "n_hour(y, m, d, hh / 24, hh % 24, nmm, nss)"
  },
  {
    "label": "n_min()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "n_min(y, m, d, hh, mm / 60, mm % 60, nss)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} diff_t cm = ss / 6 0 ; ss % = 6 0 ;)",
    "insertText": "if(ss < 0)"
  },
  {
    "label": "n_min()",
    "kind": "Method",
    "detail": "Function (cm - = 1 ; ss + = 6 0 ; } return)",
    "insertText": "n_min(y, m, d, hh, mm / 60 + cm / 60, mm % 60 + cm % 60, static_cast<second_t>(ss))"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} } CONSTEXPR_F fields)",
    "insertText": "step(second_tag, fields f, diff_t n)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "step(minute_tag, fields f, diff_t n)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "step(hour_tag, fields f, diff_t n)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "step(day_tag, fields f, diff_t n)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "step(month_tag, fields f, diff_t n)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "step(year_tag, fields f, diff_t n)"
  },
  {
    "label": "scale_add()",
    "kind": "Method",
    "detail": "Function (} namespace impl { CONSTEXPR_F diff_t)",
    "insertText": "scale_add(diff_t v, diff_t f, diff_t a)"
  },
  {
    "label": "ymd_ord()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "ymd_ord(year_t y, month_t m, day_t d)"
  },
  {
    "label": "eyear()",
    "kind": "Method",
    "detail": "Function (const diff_t)",
    "insertText": "eyear(m <= 2)"
  },
  {
    "label": "era()",
    "kind": "Method",
    "detail": "Function (const diff_t)",
    "insertText": "era(eyear >= 0 ? eyear : eyear - 399)"
  },
  {
    "label": "doy()",
    "kind": "Method",
    "detail": "Function (const diff_t yoe = eyear - era* 4 0 0 ; const diff_t)",
    "insertText": "doy(153 * (m + (m > 2 ? -3 : 9)) + 2)"
  },
  {
    "label": "day_difference()",
    "kind": "Method",
    "detail": "Function (const diff_t doe = yoe* 3 6 5 + yoe / 4 - yoe / 1 0 0 + doy ; return era* 1 4 6 0 9 7 + doe - 7 1 9 4 6 8 ; } CONSTEXPR_F diff_t)",
    "insertText": "day_difference(year_t y1, month_t m1, day_t d1, year_t y2, month_t m2, day_t d2)"
  },
  {
    "label": "c4_diff()",
    "kind": "Method",
    "detail": "Function (const diff_t a_c4_off = y1 % 4 0 0 ; const diff_t b_c4_off = y2 % 4 0 0 ; diff_t)",
    "insertText": "c4_diff(y1 - a_c4_off) - (y2 - b_c4_off)"
  },
  {
    "label": "ymd_ord()",
    "kind": "Method",
    "detail": "Function (diff_t delta =)",
    "insertText": "ymd_ord(a_c4_off, m1, d1) - ymd_ord(b_c4_off, m2, d2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delta + = 2* 1 4 6 0 9 7 ; c4_diff - = 2* 4 0 0 ; } else)",
    "insertText": "if(c4_diff < 0 && delta > 0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (delta - = 2* 1 4 6 0 9 7 ; c4_diff + = 2* 4 0 0 ; })",
    "insertText": "return(c4_diff / 400 * 146097)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (} } CONSTEXPR_F diff_t)",
    "insertText": "difference(year_tag, fields f1, fields f2)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "difference(day_tag, fields f1, fields f2)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "difference(hour_tag, fields f1, fields f2)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "difference(minute_tag, fields f1, fields f2)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "difference(second_tag, fields f1, fields f2)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F fields)",
    "insertText": "align(second_tag, fields f)"
  },
  {
    "label": "AbslHashValueImpl()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValueImpl(minute_tag, H h, fields f)"
  },
  {
    "label": "AbslHashValueImpl()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValueImpl(hour_tag, H h, fields f)"
  },
  {
    "label": "AbslHashValueImpl()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValueImpl(day_tag, H h, fields f)"
  },
  {
    "label": "AbslHashValueImpl()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValueImpl(month_tag, H h, fields f)"
  },
  {
    "label": "AbslHashValueImpl()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValueImpl(year_tag, H h, fields f)"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} } template<T> class civil_time { public : CONSTEXPR_M)",
    "insertText": "civil_time(year_t y, diff_t m = 1, diff_t d = 1, diff_t hh = 0, diff_t mm = 0, diff_t ss = 0) noexcept : civil_time(impl::n_sec(y, m, d, hh, mm, ss))"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_M)",
    "insertText": "civil_time()"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (1 9 7 0,1,1,0,0,0 } { })",
    "insertText": "civil_time(const civil_time&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (civil_time&)",
    "insertText": "operator(const civil_time&)"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (template<U,S> using preserves_data = std::enable_if<std::is_base_of<U,S>::value>::type ; template<U> CONSTEXPR_M)",
    "insertText": "civil_time(const civil_time<U>& ct, preserves_data<T, U>* = nullptr) noexcept : civil_time(ct.f_)"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} template<U> CONSTEXPR_M)",
    "insertText": "civil_time(const civil_time<U>& ct, preserves_data<U, T>* = nullptr) noexcept : civil_time(ct.f_)"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F)",
    "insertText": "civil_time(max)()"
  },
  {
    "label": "max_year()",
    "kind": "Method",
    "detail": "Function (const auto)",
    "insertText": "max_year(std::numeric_limits<std::int_least64_t>::max)()"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F)",
    "insertText": "civil_time(min)()"
  },
  {
    "label": "min_year()",
    "kind": "Method",
    "detail": "Function (const auto)",
    "insertText": "min_year(std::numeric_limits<std::int_least64_t>::min)()"
  },
  {
    "label": "year()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_M year_t)",
    "insertText": "year()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const civil_time a =* this ; + +* this ; return a ; } CONSTEXPR_M civil_time&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const civil_time a =* this ; - -* this ; return a ; } CONSTEXPR_F civil_time)",
    "insertText": "operator(civil_time a, diff_t n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F civil_time)",
    "insertText": "operator(diff_t n, civil_time a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CONSTEXPR_F diff_t)",
    "insertText": "operator(civil_time lhs, civil_time rhs)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H h, civil_time a)"
  },
  {
    "label": "civil_time()",
    "kind": "Method",
    "detail": "Function (} private : template<U> class civil_time ; CONSTEXPR_M)",
    "insertText": "civil_time(fields f) noexcept : f_(align(T{}, f))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} fields f_ ; } ; template<T,U> CONSTEXPR_F diff_t)",
    "insertText": "operator(civil_time<T>, civil_time<U>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using civil_year = civil_time<year_tag> ; using civil_month = civil_time<month_tag> ; using civil_day = civil_time<day_tag> ; using civil_hour = civil_time<hour_tag> ; using civil_minute = civil_time<minute_tag> ; using civil_second = civil_time<second_tag> ; template<T1,T2> CONSTEXPR_F bool)",
    "insertText": "operator(const civil_time<T1>& lhs, const civil_time<T2>& rhs)"
  },
  {
    "label": "get_weekday()",
    "kind": "Method",
    "detail": "Function (} enum class weekday { monday,tuesday,wednesday,thursday,friday,saturday,sunday,} ; CONSTEXPR_F weekday)",
    "insertText": "get_weekday(const civil_second& cs)"
  },
  {
    "label": "wd()",
    "kind": "Method",
    "detail": "Function (CONSTEXPR_D weekday k_weekday_by_mon_off [ 1 3 ] = { weekday::monday,weekday::tuesday,weekday::wednesday,weekday::thursday,weekday::friday,weekday::saturday,weekday::sunday,weekday::monday,weekday::tuesday,weekday::wednesday,weekday::thursday,weekday::friday,weekday::saturday,} ; CONSTEXPR_D int k_weekday_offsets [ 1 + 1 2 ] = { - 1,0,3,2,5,0,3,5,1,4,6,2,4,} ; year_t)",
    "insertText": "wd(cs.year() % 400) - (cs.month() < 3)"
  },
  {
    "label": "month()",
    "kind": "Method",
    "detail": "Function (wd + = wd / 4 - wd / 1 0 0 + wd / 4 0 0 ; wd + = k_weekday_offsets [ cs .)",
    "insertText": "month()] + cs.day()"
  },
  {
    "label": "get_weekday()",
    "kind": "Method",
    "detail": "Function (CONSTEXPR_D weekday k_weekdays_forw [ 1 4 ] = { weekday::monday,weekday::tuesday,weekday::wednesday,weekday::thursday,weekday::friday,weekday::saturday,weekday::sunday,weekday::monday,weekday::tuesday,weekday::wednesday,weekday::thursday,weekday::friday,weekday::saturday,weekday::sunday,} ; weekday base =)",
    "insertText": "get_weekday(cd)"
  },
  {
    "label": "prev_weekday()",
    "kind": "Method",
    "detail": "Function (} } } } } CONSTEXPR_F civil_day)",
    "insertText": "prev_weekday(civil_day cd, weekday wd)"
  },
  {
    "label": "get_yearday()",
    "kind": "Method",
    "detail": "Function (} } } } } CONSTEXPR_F int)",
    "insertText": "get_yearday(const civil_second& cs)"
  },
  {
    "label": "feb29()",
    "kind": "Method",
    "detail": "Function (CONSTEXPR_D int k_month_offsets [ 1 + 1 2 ] = { - 1,0,3 1,5 9,9 0,1 2 0,1 5 1,1 8 1,2 1 2,2 4 3,2 7 3,3 0 4,3 3 4,} ; const int)",
    "insertText": "feb29(cs.month() > 2 && impl::is_leap_year(cs.year()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_year& y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_month& m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_day& d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_hour& h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_minute& m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const civil_second& s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, weekday wd)"
  }
]