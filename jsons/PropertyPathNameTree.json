[
  {
    "label": "FPropertyPathNameTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPathNameTree"
  },
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "FConstNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstNode"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Templates / TypeHash . h \" # include \" UObject / PropertyPathName . h \" # include \" UObject / PropertyTag . h \" # include \" UObject / PropertyTypeName . h \" # define namespace UE { class FPropertyPathNameTree { struct FKey { FName Name ; FPropertyTypeName Type ; [ [ nodiscard ] ] bool)",
    "insertText": "operator(const FKey& Lhs, const FKey& Rhs)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; struct FValue { TUniquePtr<FPropertyPathNameTree> SubTree ; FPropertyTag Tag ; } ; public : struct FConstNode { const FValue* Value = nullptr ; operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (} const FPropertyTag*)",
    "insertText": "GetTag()"
  },
  {
    "label": "GetSubTree()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNode : FConstNode { using FConstNode::GetSubTree ; using FConstNode::GetTag ; FPropertyPathNameTree*)",
    "insertText": "GetSubTree()"
  },
  {
    "label": "SetTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTag(const FPropertyTag& Tag)"
  },
  {
    "label": "FPropertyPathNameTree()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FPropertyPathNameTree()"
  },
  {
    "label": "FPropertyPathNameTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyPathNameTree(FPropertyPathNameTree&&)"
  },
  {
    "label": "FPropertyPathNameTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyPathNameTree(const FPropertyPathNameTree&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyPathNameTree&)",
    "insertText": "operator(FPropertyPathNameTree&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyPathNameTree&)",
    "insertText": "operator(const FPropertyPathNameTree&)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNode)",
    "insertText": "Add(const FPropertyPathName& Path, int32 StartIndex = 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FNode)",
    "insertText": "Find(const FPropertyPathName& Path, int32 StartIndex = 0)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (} class FConstIterator { public :)",
    "insertText": "FConstIterator(const TMap<FKey, FValue>::TConstIterator& InNodeIt) : NodeIt(InNodeIt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FConstIterator& Rhs)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FPropertyTypeName)",
    "insertText": "GetType()"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} FConstNode)",
    "insertText": "GetNode()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FKey,FValue>::TConstIterator NodeIt ; } ; FConstIterator)",
    "insertText": "CreateConstIterator()"
  }
]