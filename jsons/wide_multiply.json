[
  {
    "label": "wide_multiply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wide_multiply"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_WIDE_MULTIPLY_H_ # define ABSL_RANDOM_INTERNAL_WIDE_MULTIPLY_H_ # include<cstdint> # include<limits> # include<type_traits> #)",
    "insertText": "if(defined(_WIN32) || defined(_WIN64)) && defined(_M_IA64) #include <intrin.h> #pragma intrinsic(_umul128)"
  },
  {
    "label": "multiply()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace random_internal { template<UIntType> struct wide_multiply { size_t kN = std::numeric_limits<UIntType>::digits ; using input_type = UIntType ; using result_type = random_internal::unsigned_bits<kN* 2>::type ; result_type)",
    "insertText": "multiply(input_type a, input_type b)"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (} input_type)",
    "insertText": "hi(result_type r)"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (} input_type)",
    "insertText": "lo(result_type r)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(std::is_unsigned<UIntType>::value, \"Class-template wide_multiply<> argument must be unsigned.\")"
  },
  {
    "label": "MultiplyU128ToU256()",
    "kind": "Method",
    "detail": "Function (} ; U256)",
    "insertText": "MultiplyU128ToU256(uint128 a, uint128 b)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (const uint128 a00 = static_cast<)",
    "insertText": "uint64_t(a)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (const uint128 a64 = a>> 6 4 ; const uint128 b00 = static_cast<)",
    "insertText": "uint64_t(b)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (const uint128 b64 = b>> 6 4 ; const uint128 c00 = a00* b00 ; const uint128 c64a = a00* b64 ; const uint128 c64b = a64* b00 ; const uint128 c128 = a64* b64 ; const uint64_t carry = static_cast<)",
    "insertText": "uint64_t(((c00 >> 64) + static_cast<uint64_t>(c64a) + static_cast<uint64_t>(c64b)) >> 64)"
  }
]