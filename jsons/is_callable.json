[
  {
    "label": "_Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Func"
  },
  {
    "label": "__is_callable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_callable"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_CALLABLE_H # define _LIBCPP___TYPE_TRAITS_IS_CALLABLE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template<class _Func, class... _Args, class = decltype(std::declval<_Func>()(std::declval<_Args>()...))> true_type __is_callable_helper(int)"
  },
  {
    "label": "__is_callable_helper()",
    "kind": "Method",
    "detail": "Function (template<class . . .> false_type)",
    "insertText": "__is_callable_helper(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _Func,class . . . _Args> struct __is_callable :)",
    "insertText": "decltype(__is_callable_helper<_Func, _Args...>(0))"
  }
]