[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FSlateDrawLayerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawLayerHandle"
  },
  {
    "label": "FSlateRenderDataHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderDataHandle"
  },
  {
    "label": "FSlateDataPayload()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateDataPayload()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetBrushMargin()",
    "kind": "Method",
    "detail": "Function (FMargin Margin ; FBox2f UVRegion ; const FSlateShaderResourceProxy* ResourceProxy ; ESlateBrushTileType::Type Tiling ; ESlateBrushMirrorType::Type Mirroring ; ESlateBrushDrawType::Type DrawType ; const FMargin&)",
    "insertText": "GetBrushMargin()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (Margin = InBrush ->)",
    "insertText": "GetMargin()"
  },
  {
    "label": "GetUVRegion()",
    "kind": "Method",
    "detail": "Function (UVRegion = InBrush ->)",
    "insertText": "GetUVRegion()"
  },
  {
    "label": "GetTiling()",
    "kind": "Method",
    "detail": "Function (Tiling = InBrush ->)",
    "insertText": "GetTiling()"
  },
  {
    "label": "GetMirroring()",
    "kind": "Method",
    "detail": "Function (Mirroring = InBrush ->)",
    "insertText": "GetMirroring()"
  },
  {
    "label": "GetDrawType()",
    "kind": "Method",
    "detail": "Function (DrawType = InBrush ->)",
    "insertText": "GetDrawType()"
  },
  {
    "label": "GetRenderingResource()",
    "kind": "Method",
    "detail": "Function (const FSlateResourceHandle& Handle = InBrush ->)",
    "insertText": "GetRenderingResource(LocalSize, DrawScale)"
  },
  {
    "label": "GetResourceProxy()",
    "kind": "Method",
    "detail": "Function (ResourceProxy = Handle .)",
    "insertText": "GetResourceProxy()"
  },
  {
    "label": "FSlateBoxPayload()",
    "kind": "Method",
    "detail": "Function (} else { ResourceProxy = nullptr ; } } FORCENOINLINE ~)",
    "insertText": "FSlateBoxPayload()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (FLinearColor OutlineColor ; FVector4f Radius ; float OutlineWeight ; void)",
    "insertText": "SetRadius(FVector4f InRadius)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (Radius = InRadius ; } FVector4f)",
    "insertText": "GetRadius()"
  },
  {
    "label": "GetOutlineColor()",
    "kind": "Method",
    "detail": "Function (OutlineColor = InOutlineColor ; OutlineWeight = InOutlineWeight ; } FLinearColor)",
    "insertText": "GetOutlineColor()"
  },
  {
    "label": "GetFontInfo()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo FontInfo ; FString ImmutableText ; const FSlateFontInfo&)",
    "insertText": "GetFontInfo()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetText(const FString& InText, const FSlateFontInfo& InFontInfo, int32 InStartIndex, int32 InEndIndex)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FontInfo = InFontInfo ; const int32 StartIndex = FMath::Min<)",
    "insertText": "int32(InStartIndex, InText.Len())"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 EndIndex = FMath::Min<)",
    "insertText": "int32(InEndIndex, InText.Len())"
  },
  {
    "label": "TextLength()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "TextLength(EndIndex > StartIndex)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (ImmutableText = InText .)",
    "insertText": "Mid(StartIndex, TextLength)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetText(const FString& InText, const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (FontInfo .)",
    "insertText": "AddReferencedObjects(Collector)"
  },
  {
    "label": "GetShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequencePtr ShapedGlyphSequence ; FLinearColor OutlineTint ; FTextOverflowArgs OverflowArgs ; const FShapedGlyphSequencePtr&)",
    "insertText": "GetShapedGlyphSequence()"
  },
  {
    "label": "SetOverflowArgs()",
    "kind": "Method",
    "detail": "Function (ShapedGlyphSequence = InShapedGlyphSequence ; OutlineTint = InOutlineTint ; } void)",
    "insertText": "SetOverflowArgs(const FTextOverflowArgs& InArgs)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (OverflowArgs = InArgs ;)",
    "insertText": "check(InArgs.OverflowDirection == ETextOverflowDirection::NoOverflow || InArgs.OverflowTextPtr.IsValid())"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FShapedGlyphSequence(ShapedGlyphSequence.Get())->AddReferencedObjects(Collector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OverflowArgs.OverflowTextPtr.IsValid())"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FShapedGlyphSequence(OverflowArgs.OverflowTextPtr.Get())->AddReferencedObjects(Collector)"
  },
  {
    "label": "SetGradient()",
    "kind": "Method",
    "detail": "Function (TArray<FSlateGradientStop> GradientStops ; EOrientation GradientType ; FVector4f CornerRadius ; void)",
    "insertText": "SetGradient(TArray<FSlateGradientStop> InGradientStops, EOrientation InGradientType, FVector4f InCornerRadius)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (GradientStops =)",
    "insertText": "MoveTemp(InGradientStops)"
  },
  {
    "label": "SetThickness()",
    "kind": "Method",
    "detail": "Function (TArray<FSlateGradientStop> GradientStops ; FVector2f P0 ; FVector2f P1 ; FVector2f P2 ; FVector2f P3 ; float Thickness ; void)",
    "insertText": "SetThickness(float InThickness)"
  },
  {
    "label": "GetThickness()",
    "kind": "Method",
    "detail": "Function (Thickness = InThickness ; } float)",
    "insertText": "GetThickness()"
  },
  {
    "label": "SetHermiteSpline()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; P0 = InP0 ; P1 = InP1 ; P2 = InP2 ; P3 = InP3 ; Thickness = InThickness ; } void)",
    "insertText": "SetHermiteSpline(const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness, const FLinearColor InTint)"
  },
  {
    "label": "SetGradientHermiteSpline()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; P0 = InStart ; P1 = InStart + InStartDir / 3 . 0 f ; P2 = InEnd - InEndDir / 3 . 0 f ; P3 = InEnd ; Thickness = InThickness ; } void)",
    "insertText": "SetGradientHermiteSpline(const UE::Slate::FDeprecateVector2DParameter InStart, const UE::Slate::FDeprecateVector2DParameter InStartDir, const UE::Slate::FDeprecateVector2DParameter InEnd, const UE::Slate::FDeprecateVector2DParameter InEndDir, float InThickness, TArray<FSlateGradientStop> InGradientStops)"
  },
  {
    "label": "IsAntialiased()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2f> Points ; TArray<FLinearColor> PointColors ; float Thickness ; bool bAntialias ; bool)",
    "insertText": "IsAntialiased()"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (Thickness = InThickness ; } # if UE_ENABLE_SLATE_VECTOR_DEPRECATION_MECHANISMS void)",
    "insertText": "SetLines(const TArray<FVector2D>& InPoints, bool bInAntialias, const TArray<FLinearColor>* InPointColors = nullptr)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FVector2f> NewPoints ; NewPoints .)",
    "insertText": "Reserve(InPoints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewPoints .)",
    "insertText": "Add(UE::Slate::CastToVector2f(Vect))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InPointColors)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLines(MoveTemp(NewPoints), bInAntialias, *InPointColors)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetLines(MoveTemp(NewPoints), bInAntialias)"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "SetLines(TArray<FVector2f> InPoints, bool bInAntialias)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (bAntialias = bInAntialias ; Points =)",
    "insertText": "MoveTemp(InPoints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PointColors .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetLines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLines(TArray<FVector2f> InPoints, bool bInAntialias, TArray<FLinearColor> InPointColors)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PointColors =)",
    "insertText": "MoveTemp(InPointColors)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource* RenderTargetResource ; uint8 bAllowViewportScaling : 1 ; uint8 bViewportTextureAlphaOnly : 1 ; uint8 bRequiresVSync : 1 ; void)",
    "insertText": "SetViewport(const TSharedPtr<const ISlateViewport>& InViewport, const FLinearColor& InTint)"
  },
  {
    "label": "GetViewportRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (Tint = InTint ; RenderTargetResource = InViewport ->)",
    "insertText": "GetViewportRenderTargetTexture()"
  },
  {
    "label": "AllowScaling()",
    "kind": "Method",
    "detail": "Function (bAllowViewportScaling = InViewport ->)",
    "insertText": "AllowScaling()"
  },
  {
    "label": "IsViewportTextureAlphaOnly()",
    "kind": "Method",
    "detail": "Function (bViewportTextureAlphaOnly = InViewport ->)",
    "insertText": "IsViewportTextureAlphaOnly()"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (bRequiresVSync = InViewport ->)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "SetCustomDrawer()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<ICustomSlateElement,ESPMode::ThreadSafe> CustomDrawer ; void)",
    "insertText": "SetCustomDrawer(const TSharedPtr<ICustomSlateElement, ESPMode::ThreadSafe>& InCustomDrawer)"
  },
  {
    "label": "SetLayer()",
    "kind": "Method",
    "detail": "Function (class FSlateDrawLayerHandle* LayerHandle ; void)",
    "insertText": "SetLayer(FSlateDrawLayerHandle* InLayerHandle)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (LayerHandle = InLayerHandle ;)",
    "insertText": "checkSlow(LayerHandle)"
  },
  {
    "label": "SetCachedBuffer()",
    "kind": "Method",
    "detail": "Function (class FSlateRenderDataHandle* CachedRenderData ; FVector2f CachedRenderDataOffset ; void)",
    "insertText": "SetCachedBuffer(FSlateRenderDataHandle* InRenderDataHandle, const UE::Slate::FDeprecateVector2DParameter Offset)"
  },
  {
    "label": "SetCustomVerts()",
    "kind": "Method",
    "detail": "Function (const FSlateShaderResourceProxy* ResourceProxy ; TArray<FSlateVertex> Vertices ; TArray<SlateIndex> Indices ; ISlateUpdatableInstanceBufferRenderProxy* InstanceData ; uint32 InstanceOffset ; uint32 NumInstances ; void)",
    "insertText": "SetCustomVerts(const FSlateShaderResourceProxy* InRenderProxy, TArray<FSlateVertex> InVerts, TArray<SlateIndex> InIndices, ISlateUpdatableInstanceBufferRenderProxy* InInstanceData, uint32 InInstanceOffset, uint32 InNumInstances)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ResourceProxy = InRenderProxy ; Vertices =)",
    "insertText": "MoveTemp(InVerts)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Indices =)",
    "insertText": "MoveTemp(InIndices)"
  }
]