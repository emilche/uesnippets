[
  {
    "label": "GEMVPacketSizeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GEMVPacketSizeType"
  },
  {
    "label": "gemv_packet_cond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gemv_packet_cond"
  },
  {
    "label": "gemv_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gemv_traits"
  },
  {
    "label": "general_matrix_vector_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "general_matrix_vector_product"
  },
  {
    "label": "PACKET_DECL_COND_PREFIX()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERAL_MATRIX_VECTOR_H # define EIGEN_GENERAL_MATRIX_VECTOR_H namespace Eigen { namespace internal { enum GEMVPacketSizeType { GEMVPacketFull = 0,GEMVPacketHalf,GEMVPacketQuarter } ; template<int N,T1,T2,T3> struct gemv_packet_cond { typedef T3 type ; } ; template<T1,T2,T3> struct gemv_packet_cond<GEMVPacketFull,T1,T2,T3> { typedef T1 type ; } ; template<T1,T2,T3> struct gemv_packet_cond<GEMVPacketHalf,T1,T2,T3> { typedef T2 type ; } ; template<LhsScalar,RhsScalar,int _PacketSize = GEMVPacketFull> class gemv_traits { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; # define)",
    "insertText": "PACKET_DECL_COND_PREFIX(prefix, name, packet_size) \\ typedef typename gemv_packet_cond<packet_size, \\ typename packet_traits<name ## Scalar>::type, \\ typename packet_traits<name ## Scalar>::half, \\ typename unpacket_traits<typename packet_traits<name ## Scalar>::half>::half>::type \\ prefix ## name ## Packet PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize)"
  },
  {
    "label": "PACKET_DECL_COND_PREFIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize)"
  },
  {
    "label": "PACKET_DECL_COND_PREFIX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PACKET_DECL_COND_PREFIX(_, Res, _PacketSize)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# undef PACKET_DECL_COND_PREFIX public : enum { Vectorizable = unpacket_traits<_LhsPacket>::vectorizable&& unpacket_traits<_RhsPacket>::vectorizable&&)",
    "insertText": "int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket ; typedef conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket ; typedef conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket ; } ; template<Index,LhsScalar,LhsMapper,bool ConjugateLhs,RhsScalar,RhsMapper,bool ConjugateRhs,int Version> struct general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version> { typedef gemv_traits<LhsScalar,RhsScalar> Traits ; typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketHalf> HalfTraits ; typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketQuarter> QuarterTraits ; typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; typedef Traits::LhsPacket LhsPacket ; typedef Traits::RhsPacket RhsPacket ; typedef Traits::ResPacket ResPacket ; typedef HalfTraits::LhsPacket LhsPacketHalf ; typedef HalfTraits::RhsPacket RhsPacketHalf ; typedef HalfTraits::ResPacket ResPacketHalf ; typedef QuarterTraits::LhsPacket LhsPacketQuarter ; typedef QuarterTraits::RhsPacket RhsPacketQuarter ; typedef QuarterTraits::ResPacket ResPacketQuarter ; EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void)",
    "insertText": "run(Index rows, Index cols, const LhsMapper& lhs, const RhsMapper& rhs, ResScalar* res, Index resIncr, RhsScalar alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Index,LhsScalar,LhsMapper,bool ConjugateLhs,RhsScalar,RhsMapper,bool ConjugateRhs,int Version> EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version)",
    "insertText": "run(Index rows, Index cols, const LhsMapper& alhs, const RhsMapper& rhs, ResScalar* res, Index resIncr, RhsScalar alpha)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(resIncr)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(resIncr==1)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (LhsMapper)",
    "insertText": "lhs(alhs)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj ; conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj ; conj_helper<LhsPacketHalf,RhsPacketHalf,ConjugateLhs,ConjugateRhs> pcj_half ; conj_helper<LhsPacketQuarter,RhsPacketQuarter,ConjugateLhs,ConjugateRhs> pcj_quarter ; const Index lhsStride = lhs .)",
    "insertText": "stride()"
  },
  {
    "label": "HasHalf()",
    "kind": "Method",
    "detail": "Function (enum { LhsAlignment = Unaligned,ResPacketSize = Traits::ResPacketSize,ResPacketSizeHalf = HalfTraits::ResPacketSize,ResPacketSizeQuarter = QuarterTraits::ResPacketSize,LhsPacketSize = Traits::LhsPacketSize,)",
    "insertText": "HasHalf(int)ResPacketSizeHalf < (int)ResPacketSize, HasQuarter = (int)ResPacketSizeQuarter < (int)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index n8 = rows - 8* ResPacketSize + 1 ; const Index n4 = rows - 4* ResPacketSize + 1 ; const Index n3 = rows - 3* ResPacketSize + 1 ; const Index n2 = rows - 2* ResPacketSize + 1 ; const Index n1 = rows - 1* ResPacketSize + 1 ; const Index n_half = rows - 1* ResPacketSizeHalf + 1 ; const Index n_quarter = rows - 1* ResPacketSizeQuarter + 1 ; const Index block_cols = cols<1 2 8 ?)",
    "insertText": "cols(lhsStride*sizeof(LhsScalar)<32000?16:4)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket palpha = pset1<)",
    "insertText": "ResPacket(alpha)"
  },
  {
    "label": "ResPacketHalf()",
    "kind": "Method",
    "detail": "Function (ResPacketHalf palpha_half = pset1<)",
    "insertText": "ResPacketHalf(alpha)"
  },
  {
    "label": "ResPacketQuarter()",
    "kind": "Method",
    "detail": "Function (ResPacketQuarter palpha_quarter = pset1<)",
    "insertText": "ResPacketQuarter(alpha)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Index jend =)",
    "insertText": "mini(j2+block_cols,cols)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "for(; i<n8; i+=ResPacketSize*8)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket c0 = pset1<)",
    "insertText": "ResPacket(ResScalar(0)), c1 = pset1<ResPacket>(ResScalar(0)), c2 = pset1<ResPacket>(ResScalar(0)), c3 = pset1<ResPacket>(ResScalar(0)), c4 = pset1<ResPacket>(ResScalar(0)), c5 = pset1<ResPacket>(ResScalar(0)), c6 = pset1<ResPacket>(ResScalar(0)), c7 = pset1<ResPacket>(ResScalar(0))"
  },
  {
    "label": "RhsPacket()",
    "kind": "Method",
    "detail": "Function (RhsPacket b0 = pset1<)",
    "insertText": "RhsPacket(rhs(j,0))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*0,j),b0,c0)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c1 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*1,j),b0,c1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c2 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*2,j),b0,c2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c3 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*3,j),b0,c3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c4 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*4,j),b0,c4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c5 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*5,j),b0,c5)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c6 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*6,j),b0,c6)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c7 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+LhsPacketSize*7,j),b0,c7)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pstoreu(res+i+ResPacketSize*0, pmadd(c0,palpha,ploadu<ResPacket>(res+i+ResPacketSize*0)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*1, pmadd(c1,palpha,ploadu<ResPacket>(res+i+ResPacketSize*1)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*2, pmadd(c2,palpha,ploadu<ResPacket>(res+i+ResPacketSize*2)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*3, pmadd(c3,palpha,ploadu<ResPacket>(res+i+ResPacketSize*3)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*4, pmadd(c4,palpha,ploadu<ResPacket>(res+i+ResPacketSize*4)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*5, pmadd(c5,palpha,ploadu<ResPacket>(res+i+ResPacketSize*5)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*6, pmadd(c6,palpha,ploadu<ResPacket>(res+i+ResPacketSize*6)))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(res+i+ResPacketSize*7, pmadd(c7,palpha,ploadu<ResPacket>(res+i+ResPacketSize*7)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i<n4)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket c0 = pset1<)",
    "insertText": "ResPacket(ResScalar(0)), c1 = pset1<ResPacket>(ResScalar(0)), c2 = pset1<ResPacket>(ResScalar(0)), c3 = pset1<ResPacket>(ResScalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSize* 4 ; })",
    "insertText": "if(i<n3)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket c0 = pset1<)",
    "insertText": "ResPacket(ResScalar(0)), c1 = pset1<ResPacket>(ResScalar(0)), c2 = pset1<ResPacket>(ResScalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSize* 3 ; })",
    "insertText": "if(i<n2)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket c0 = pset1<)",
    "insertText": "ResPacket(ResScalar(0)), c1 = pset1<ResPacket>(ResScalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSize* 2 ; })",
    "insertText": "if(i<n1)"
  },
  {
    "label": "ResPacket()",
    "kind": "Method",
    "detail": "Function (ResPacket c0 = pset1<)",
    "insertText": "ResPacket(ResScalar(0))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+0,j),b0,c0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSize ; })",
    "insertText": "if(HasHalf && i<n_half)"
  },
  {
    "label": "ResPacketHalf()",
    "kind": "Method",
    "detail": "Function (ResPacketHalf c0 = pset1<)",
    "insertText": "ResPacketHalf(ResScalar(0))"
  },
  {
    "label": "RhsPacketHalf()",
    "kind": "Method",
    "detail": "Function (RhsPacketHalf b0 = pset1<)",
    "insertText": "RhsPacketHalf(rhs(j,0))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0 = pcj_half .)",
    "insertText": "pmadd(lhs.template load<LhsPacketHalf,LhsAlignment>(i+0,j),b0,c0)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pstoreu(res+i+ResPacketSizeHalf*0, pmadd(c0,palpha_half,ploadu<ResPacketHalf>(res+i+ResPacketSizeHalf*0)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSizeHalf ; })",
    "insertText": "if(HasQuarter && i<n_quarter)"
  },
  {
    "label": "ResPacketQuarter()",
    "kind": "Method",
    "detail": "Function (ResPacketQuarter c0 = pset1<)",
    "insertText": "ResPacketQuarter(ResScalar(0))"
  },
  {
    "label": "RhsPacketQuarter()",
    "kind": "Method",
    "detail": "Function (RhsPacketQuarter b0 = pset1<)",
    "insertText": "RhsPacketQuarter(rhs(j,0))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0 = pcj_quarter .)",
    "insertText": "pmadd(lhs.template load<LhsPacketQuarter,LhsAlignment>(i+0,j),b0,c0)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pstoreu(res+i+ResPacketSizeQuarter*0, pmadd(c0,palpha_quarter,ploadu<ResPacketQuarter>(res+i+ResPacketSizeQuarter*0)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (i + = ResPacketSizeQuarter ; })",
    "insertText": "for(;i<rows;++i)"
  },
  {
    "label": "c0()",
    "kind": "Method",
    "detail": "Function (ResScalar)",
    "insertText": "c0(0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (res [ i ] + = alpha* c0 ; } } } template<Index,LhsScalar,LhsMapper,bool ConjugateLhs,RhsScalar,RhsMapper,bool ConjugateRhs,int Version> struct general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version> { typedef gemv_traits<LhsScalar,RhsScalar> Traits ; typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketHalf> HalfTraits ; typedef gemv_traits<LhsScalar,RhsScalar,GEMVPacketQuarter> QuarterTraits ; typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResScalar ; typedef Traits::LhsPacket LhsPacket ; typedef Traits::RhsPacket RhsPacket ; typedef Traits::ResPacket ResPacket ; typedef HalfTraits::LhsPacket LhsPacketHalf ; typedef HalfTraits::RhsPacket RhsPacketHalf ; typedef HalfTraits::ResPacket ResPacketHalf ; typedef QuarterTraits::LhsPacket LhsPacketQuarter ; typedef QuarterTraits::RhsPacket RhsPacketQuarter ; typedef QuarterTraits::ResPacket ResPacketQuarter ; EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void)",
    "insertText": "run(Index rows, Index cols, const LhsMapper& lhs, const RhsMapper& rhs, ResScalar* res, Index resIncr, ResScalar alpha)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Index,LhsScalar,LhsMapper,bool ConjugateLhs,RhsScalar,RhsMapper,bool ConjugateRhs,int Version> EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,ConjugateLhs,RhsScalar,RhsMapper,ConjugateRhs,Version)",
    "insertText": "run(Index rows, Index cols, const LhsMapper& alhs, const RhsMapper& rhs, ResScalar* res, Index resIncr, ResScalar alpha)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(rhs.stride()==1)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (conj_helper<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> cj ; conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj ; conj_helper<LhsPacketHalf,RhsPacketHalf,ConjugateLhs,ConjugateRhs> pcj_half ; conj_helper<LhsPacketQuarter,RhsPacketQuarter,ConjugateLhs,ConjugateRhs> pcj_quarter ; const Index n8 = lhs .)",
    "insertText": "stride()*sizeof(LhsScalar)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "for(; i<n8; i+=8)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index j = 0 ;)",
    "insertText": "for(; j+LhsPacketSize<=cols; j+=LhsPacketSize)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (RhsPacket b0 = rhs . template load<RhsPacket,)",
    "insertText": "Unaligned(j,0)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c1 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+1,j),b0,c1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c2 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+2,j),b0,c2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c3 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+3,j),b0,c3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c4 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+4,j),b0,c4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c5 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+5,j),b0,c5)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c6 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+6,j),b0,c6)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c7 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i+7,j),b0,c7)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} ResScalar cc0 =)",
    "insertText": "predux(c0)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc1 =)",
    "insertText": "predux(c1)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc2 =)",
    "insertText": "predux(c2)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc3 =)",
    "insertText": "predux(c3)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc4 =)",
    "insertText": "predux(c4)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc5 =)",
    "insertText": "predux(c5)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc6 =)",
    "insertText": "predux(c6)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (ResScalar cc7 =)",
    "insertText": "predux(c7)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsScalar b0 =)",
    "insertText": "rhs(j,0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc0 + = cj .)",
    "insertText": "pmul(lhs(i+0,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc1 + = cj .)",
    "insertText": "pmul(lhs(i+1,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc2 + = cj .)",
    "insertText": "pmul(lhs(i+2,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc3 + = cj .)",
    "insertText": "pmul(lhs(i+3,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc4 + = cj .)",
    "insertText": "pmul(lhs(i+4,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc5 + = cj .)",
    "insertText": "pmul(lhs(i+5,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc6 + = cj .)",
    "insertText": "pmul(lhs(i+6,j), b0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc7 + = cj .)",
    "insertText": "pmul(lhs(i+7,j), b0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "res(i+0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+1)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+2)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+3)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+4)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+5)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+6)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i+7)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; i<n4; i+=4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; i<n2; i+=2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; i<rows; ++i)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0 = pcj .)",
    "insertText": "pmadd(lhs.template load<LhsPacket,LhsAlignment>(i,j),b0,c0)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0_h = pcj_half .)",
    "insertText": "pmadd(lhs.template load<LhsPacketHalf,LhsAlignment>(i,j),b0,c0_h)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} cc0 + =)",
    "insertText": "predux(c0_h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(HasQuarter)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (c0_q = pcj_quarter .)",
    "insertText": "pmadd(lhs.template load<LhsPacketQuarter,LhsAlignment>(i,j),b0,c0_q)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} cc0 + =)",
    "insertText": "predux(c0_q)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; j<cols; ++j)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (cc0 + = cj .)",
    "insertText": "pmul(lhs(i,j), rhs(j,0))"
  }
]