[
  {
    "label": "dtNavMeshQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMeshQuery"
  },
  {
    "label": "dtQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtQueryFilter"
  },
  {
    "label": "dtPathCorridor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtPathCorridor"
  },
  {
    "label": "dtPathCorridor()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOUTPATHCORRIDOR_H # define DETOUTPATHCORRIDOR_H # include \" CoreMinimal . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourNavMesh . h \" # include \" HAL / Platform . h \" class dtNavMeshQuery ; class dtQueryFilter ; class dtPathCorridor { dtReal m_pos [ 3 ] ; dtReal m_target [ 3 ] ; dtReal m_prevMovePoint [ 3 ] ; dtReal m_nextExpectedCorner [ 3 ] ; dtReal m_nextExpectedCorner2 [ 3 ] ; dtReal m_moveSegAngle ; uint32 m_hasNextExpectedCorner : 1 ; uint32 m_hasNextExpectedCorner2 : 1 ; uint32 m_isInSkipRange : 1 ; uint32 m_enableEarlyReach : 1 ; dtPolyRef* m_path ; int m_npath ; int m_maxPath ; public :)",
    "insertText": "dtPathCorridor()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxPath)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "findCorners()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findCorners(dtReal* cornerVerts, unsigned char* cornerFlags, dtPolyRef* cornerPolys, const int maxCorners, dtNavMeshQuery* navquery, const dtQueryFilter* filter, dtReal pathOffsetDistance, dtReal earlyReachDistance, bool bAllowEarlyReach = true)"
  },
  {
    "label": "optimizePathVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimizePathVisibility(const dtReal* next, const dtReal pathOptimizationRange, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "optimizePathTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimizePathTopology(dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "moveOverOffmeshConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "moveOverOffmeshConnection(dtPolyRef offMeshConRef, dtPolyRef* refs, const dtReal* agentPos, dtReal* startPos, dtReal* endPos, dtNavMeshQuery* navquery)"
  },
  {
    "label": "canMoveOverOffmeshConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canMoveOverOffmeshConnection(dtPolyRef offMeshConRef, dtPolyRef* refs, const dtReal* agentPos, dtReal* startPos, dtReal* endPos, dtNavMeshQuery* navquery)"
  },
  {
    "label": "pruneOffmeshConenction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneOffmeshConenction(dtPolyRef offMeshConRef)"
  },
  {
    "label": "fixPathStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fixPathStart(dtPolyRef safeRef, const dtReal* safePos)"
  },
  {
    "label": "trimInvalidPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "trimInvalidPath(dtPolyRef safeRef, const dtReal* safePos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValid(const int maxLookAhead, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "movePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "movePosition(const dtReal* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "moveTargetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveTargetPosition(const dtReal* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "setCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCorridor(const dtReal* target, const dtPolyRef* polys, const int npath)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (const dtReal*)",
    "insertText": "getPos()"
  },
  {
    "label": "getSegmentAngle()",
    "kind": "Method",
    "detail": "Function (m_enableEarlyReach = enable ; } dtReal)",
    "insertText": "getSegmentAngle()"
  },
  {
    "label": "dtMergeCorridorEndMoved()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "dtMergeCorridorEndMoved(dtPolyRef* path, const int npath, const int maxPath, const dtPolyRef* visited, const int nvisited)"
  },
  {
    "label": "dtMergeCorridorStartShortcut()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "dtMergeCorridorStartShortcut(dtPolyRef* path, const int npath, const int maxPath, const dtPolyRef* visited, const int nvisited)"
  }
]