[
  {
    "label": "dtNavMeshQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMeshQuery"
  },
  {
    "label": "dtQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtQueryFilter"
  },
  {
    "label": "dtPathCorridor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtPathCorridor"
  },
  {
    "label": "dtPathCorridor()",
    "kind": "Method",
    "detail": "Function (NAVMESH_API)",
    "insertText": "dtPathCorridor()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxPath)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "findCorners()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findCorners(dtReal* cornerVerts, unsigned char* cornerFlags,\n\t\t\t\t\tdtPolyRef* cornerPolys, const int maxCorners,\n\t\t\t\t\tdtNavMeshQuery* navquery, const dtQueryFilter* filter,\n\t\t\t\t\tdtReal pathOffsetDistance, dtReal earlyReachDistance, bool bAllowEarlyReach = true)"
  },
  {
    "label": "optimizePathVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimizePathVisibility(const dtReal* next, const dtReal pathOptimizationRange,\n\t\t\t\t\t\t\t\tdtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "optimizePathTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimizePathTopology(dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "moveOverOffmeshConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "moveOverOffmeshConnection(dtPolyRef offMeshConRef, dtPolyRef* refs,\n\t\t\t\t\t\t\t\t   const dtReal* agentPos,\n\t\t\t\t\t\t\t\t   dtReal* startPos, dtReal* endPos,\n\t\t\t\t\t\t\t\t   dtNavMeshQuery* navquery)"
  },
  {
    "label": "pruneOffmeshConenction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneOffmeshConenction(dtPolyRef offMeshConRef)"
  },
  {
    "label": "fixPathStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fixPathStart(dtPolyRef safeRef, const dtReal* safePos)"
  },
  {
    "label": "trimInvalidPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "trimInvalidPath(dtPolyRef safeRef, const dtReal* safePos,\n\t\t\t\t\t\t dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValid(const int maxLookAhead, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "movePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "movePosition(const dtReal* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "moveTargetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveTargetPosition(const dtReal* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)"
  },
  {
    "label": "setCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCorridor(const dtReal* target, const dtPolyRef* polys, const int npath)"
  },
  {
    "label": "dtMergeCorridorStartMoved()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "dtMergeCorridorStartMoved(dtPolyRef* path, const int npath, const int maxPath,\n\t\t\t\t\t\t\t  const dtPolyRef* visited, const int nvisited)"
  },
  {
    "label": "dtMergeCorridorEndMoved()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "dtMergeCorridorEndMoved(dtPolyRef* path, const int npath, const int maxPath,\n\t\t\t\t\t\t\tconst dtPolyRef* visited, const int nvisited)"
  },
  {
    "label": "dtMergeCorridorStartShortcut()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "dtMergeCorridorStartShortcut(dtPolyRef* path, const int npath, const int maxPath,\n\t\t\t\t\t\t\t\t const dtPolyRef* visited, const int nvisited)"
  }
]