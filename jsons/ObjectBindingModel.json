[
  {
    "label": "FMovieSceneBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBinding"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPropertyPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPath"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "FLayerBarModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayerBarModel"
  },
  {
    "label": "FTrackModelStorageExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackModelStorageExtension"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Guid . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / ViewModels / OutlinerItemModel . h \" # include \" MVVM / ViewModels / BindingLifetimeOverlayModel . h \" # include \" MVVM / Extensions / IRenameableExtension . h \" # include \" MVVM / Extensions / ITrackAreaExtension . h \" # include \" MVVM / Extensions / IGroupableExtension . h \" # include \" MVVM / Extensions / IObjectBindingExtension . h \" # include \" MVVM / Extensions / ISortableExtension . h \" # include \" MVVM / Extensions / IDraggableOutlinerExtension . h \" # include \" MVVM / Extensions / IDeletableExtension . h \" struct FMovieSceneBinding ; class UMovieScene ; class UMovieSceneTrack ; class FMenuBuilder ; class FPropertyPath ; class FStructOnScope ; enum class ECheckBoxState : uint8 ; namespace UE { namespace Sequencer { class FSequenceModel ; class FLayerBarModel ; class FTrackModelStorageExtension ; enum class EObjectBindingType { Possessable,Spawnable,Unknown } ; class FObjectBindingModel : public FMuteSoloOutlinerItemModel,public IObjectBindingExtension,public IDraggableOutlinerExtension,public ITrackAreaExtension,public IGroupableExtension,public IRenameableExtension,public ISortableExtension,public IDeletableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FObjectBindingModel , FMuteSoloOutlinerItemModel , IObjectBindingExtension , IDraggableOutlinerExtension , ITrackAreaExtension , IGroupableExtension , IRenameableExtension , ISortableExtension , IDeletableExtension)"
  },
  {
    "label": "FObjectBindingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectBindingModel(FSequenceModel* OwnerModel, const FMovieSceneBinding& InBinding)"
  },
  {
    "label": "FObjectBindingModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FObjectBindingModel()"
  },
  {
    "label": "GetTopLevelChildTrackAreaGroupType()",
    "kind": "Method",
    "detail": "Function (EViewModelListType)",
    "insertText": "GetTopLevelChildTrackAreaGroupType()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(UMovieSceneTrack* Track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTrack(UMovieSceneTrack* Track)"
  },
  {
    "label": "GetObjectGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetObjectGuid()"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FText& NewName)"
  },
  {
    "label": "GetOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (FOutlinerSizing)",
    "insertText": "GetOutlinerSizing()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "CreateOutlinerViewForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateOutlinerViewForColumn(const FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "GetTrackAreaParameters()",
    "kind": "Method",
    "detail": "Function (FTrackAreaParameters)",
    "insertText": "GetTrackAreaParameters()"
  },
  {
    "label": "GetTrackAreaModelList()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator)",
    "insertText": "GetTrackAreaModelList()"
  },
  {
    "label": "GetTopLevelChildTrackAreaModels()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator)",
    "insertText": "GetTopLevelChildTrackAreaModels()"
  },
  {
    "label": "GetIdentifierForGrouping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIdentifierForGrouping(TStringBuilder<128>& OutString)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren()"
  },
  {
    "label": "GetSortingKey()",
    "kind": "Method",
    "detail": "Function (FSortingKey)",
    "insertText": "GetSortingKey()"
  },
  {
    "label": "SetCustomOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomOrder(int32 InCustomOrder)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildOrganizeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOrganizeContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetDefaultExpansionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultExpansionState()"
  },
  {
    "label": "BuildSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSidebarMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CanDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDrag()"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete(FText* OutErrorMessage)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "SetParentBindingID()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetParentBindingID(const FGuid& InObjectBindingID)"
  },
  {
    "label": "GetDesiredParentBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetDesiredParentBinding()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EObjectBindingType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetTooltipForSingleObjectBinding()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipForSingleObjectBinding()"
  },
  {
    "label": "FindObjectClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "FindObjectClass()"
  },
  {
    "label": "SupportsRebinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRebinding()"
  },
  {
    "label": "GetInvalidBindingLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetInvalidBindingLabelColor()"
  },
  {
    "label": "OnConstruct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnConstruct()"
  },
  {
    "label": "AddPropertyMenuItems()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddPropertyMenuItems(FMenuBuilder& AddTrackMenuBuilder, TArray<FPropertyPath> KeyableProperties, int32 PropertyNameIndexStart, int32 PropertyNameIndexEnd)"
  },
  {
    "label": "HandleAddTrackSubMenuNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddTrackSubMenuNew(FMenuBuilder& AddTrackMenuBuilder, TArray<FPropertyPath> KeyablePropertyPaths, int32 PropertyNameIndexStart)"
  },
  {
    "label": "HandlePropertyMenuItemExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePropertyMenuItemExecute(FPropertyPath PropertyPath)"
  },
  {
    "label": "AddTagMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetTagCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetTagCheckState(FName TagName)"
  },
  {
    "label": "ToggleTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTag(FName TagName)"
  },
  {
    "label": "HandleDeleteTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteTag(FName TagName)"
  },
  {
    "label": "HandleAddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddTag(FName TagName)"
  },
  {
    "label": "HandleTemplateActorClassPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTemplateActorClassPicked(UClass* ChosenClass)"
  },
  {
    "label": "OnFinishedChangingDynamicBindingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingDynamicBindingProperties(const FPropertyChangedEvent& ChangeEvent, TSharedPtr<FStructOnScope> ValueStruct)"
  }
]