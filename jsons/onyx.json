[
  {
    "label": "VP8_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP8_COMP"
  },
  {
    "label": "vpx_rational",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rational"
  },
  {
    "label": "vpx_codec_pkt_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_pkt_list"
  },
  {
    "label": "vpx_ref_frame_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "vpx_ref_frame_type"
  },
  {
    "label": "Scale2Ratio()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_COMMON_ONYX_H_ # define VPX_VP8_COMMON_ONYX_H_ # ifdef __cplusplus \" C \" { # endif # include \" vpx_config . h \" # include \" vpx / internal / vpx_codec_internal . h \" # include \" vpx / vp8cx . h \" # include \" vpx / vpx_encoder . h \" # include \" vpx_scale / yv12config . h \" # include \" ppflags . h \" struct VP8_COMP ; typedef enum { NORMAL = 0,FOURFIVE = 1,THREEFIVE = 2,ONETWO = 3 } VPX_SCALING ; typedef enum { USAGE_LOCAL_FILE_PLAYBACK = 0 x0,USAGE_STREAM_FROM_SERVER = 0 x1,USAGE_CONSTRAINED_QUALITY = 0 x2,USAGE_CONSTANT_QUALITY = 0 x3 } END_USAGE ; typedef enum { MODE_REALTIME = 0 x0,MODE_GOODQUALITY = 0 x1,MODE_BESTQUALITY = 0 x2,MODE_FIRSTPASS = 0 x3,MODE_SECONDPASS = 0 x4,MODE_SECONDPASS_BEST = 0 x5 } MODE ; typedef enum { FRAMEFLAGS_KEY = 1,FRAMEFLAGS_GOLDEN = 2,FRAMEFLAGS_ALTREF = 4 } FRAMETYPE_FLAGS ; # include<assert . h> void)",
    "insertText": "Scale2Ratio(int mode, int *hr, int *hs)"
  },
  {
    "label": "vp8_initialize()",
    "kind": "Method",
    "detail": "Function (break ; } } typedef struct { int Version ; int Width ; int Height ; struct vpx_rational timebase ; unsigned int target_bandwidth ; int noise_sensitivity ; int Sharpness ; int cpu_used ; unsigned int rc_max_intra_bitrate_pct ; unsigned int gf_cbr_boost_pct ; unsigned int screen_content_mode ; int Mode ; int auto_key ; int key_freq ; int allow_lag ; int lag_in_frames ; int end_usage ; int under_shoot_pct ; int over_shoot_pct ; int64_t starting_buffer_level ; int64_t optimal_buffer_level ; int64_t maximum_buffer_size ; int64_t starting_buffer_level_in_ms ; int64_t optimal_buffer_level_in_ms ; int64_t maximum_buffer_size_in_ms ; int fixed_q ; int worst_allowed_q ; int best_allowed_q ; int cq_level ; int allow_spatial_resampling ; int resample_down_water_mark ; int resample_up_water_mark ; int allow_df ; int drop_frames_water_mark ; int two_pass_vbrbias ; int two_pass_vbrmin_section ; int two_pass_vbrmax_section ; int play_alternate ; int alt_freq ; int alt_q ; int key_q ; int gold_q ; int multi_threaded ; int token_partitions ; int encode_breakout ; unsigned int error_resilient_mode ; int arnr_max_frames ; int arnr_strength ; int arnr_type ; vpx_fixed_buf_t two_pass_stats_in ; struct vpx_codec_pkt_list* output_pkt_list ; vp8e_tuning tuning ; unsigned int number_of_layers ; unsigned int target_bitrate [ VPX_TS_MAX_PERIODICITY ] ; unsigned int rate_decimator [ VPX_TS_MAX_PERIODICITY ] ; unsigned int periodicity ; unsigned int layer_id [ VPX_TS_MAX_PERIODICITY ] ; # if CONFIG_MULTI_RES_ENCODING unsigned int mr_total_resolutions ; unsigned int mr_encoder_id ; vpx_rational_t mr_down_sampling_factor ; void* mr_low_res_mode_info ; # endif } VP8_CONFIG ; void)",
    "insertText": "vp8_initialize()"
  },
  {
    "label": "vp8_create_compressor()",
    "kind": "Method",
    "detail": "Function (struct VP8_COMP*)",
    "insertText": "vp8_create_compressor(VP8_CONFIG *oxcf)"
  },
  {
    "label": "vp8_remove_compressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_remove_compressor(struct VP8_COMP **comp)"
  },
  {
    "label": "vp8_init_config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_init_config(struct VP8_COMP *onyx, VP8_CONFIG *oxcf)"
  },
  {
    "label": "vp8_change_config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_change_config(struct VP8_COMP *cpi, VP8_CONFIG *oxcf)"
  },
  {
    "label": "vp8_receive_raw_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_receive_raw_frame(struct VP8_COMP *cpi, unsigned int frame_flags, YV12_BUFFER_CONFIG *sd, int64_t time_stamp, int64_t end_time)"
  },
  {
    "label": "vp8_get_compressed_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_get_compressed_data(struct VP8_COMP *cpi, unsigned int *frame_flags, size_t *size, unsigned char *dest, unsigned char *dest_end, int64_t *time_stamp, int64_t *time_end, int flush)"
  },
  {
    "label": "vp8_get_preview_raw_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_get_preview_raw_frame(struct VP8_COMP *cpi, YV12_BUFFER_CONFIG *dest, vp8_ppflags_t *flags)"
  },
  {
    "label": "vp8_use_as_reference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_use_as_reference(struct VP8_COMP *cpi, int ref_frame_flags)"
  },
  {
    "label": "vp8_update_reference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_update_reference(struct VP8_COMP *cpi, int ref_frame_flags)"
  },
  {
    "label": "vp8_get_reference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_get_reference(struct VP8_COMP *cpi, enum vpx_ref_frame_type ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "vp8_set_reference()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_set_reference(struct VP8_COMP *cpi, enum vpx_ref_frame_type ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "vp8_update_entropy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_update_entropy(struct VP8_COMP *cpi, int update)"
  },
  {
    "label": "vp8_set_roimap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_set_roimap(struct VP8_COMP *cpi, unsigned char *map, unsigned int rows, unsigned int cols, int delta_q[4], int delta_lf[4], unsigned int threshold[4])"
  },
  {
    "label": "vp8_set_active_map()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_set_active_map(struct VP8_COMP *cpi, unsigned char *map, unsigned int rows, unsigned int cols)"
  },
  {
    "label": "vp8_set_internal_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_set_internal_size(struct VP8_COMP *cpi, VPX_SCALING horiz_mode, VPX_SCALING vert_mode)"
  },
  {
    "label": "vp8_get_quantizer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_get_quantizer(struct VP8_COMP *cpi)"
  }
]