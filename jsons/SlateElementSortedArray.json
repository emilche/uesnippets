[
  {
    "label": "TSlateElementSortedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateElementSortedArray"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Containers / Array . h \" # include \" Templates / UnrealTypeTraits . h \" template<InElementType,InSortPredicate = TLess<>> class TSlateElementSortedArray { using DataType = TArray<InElementType> ; DataType Data ; public : using SizeType = DataType::SizeType ; using ElementType = InElementType ; using ElementParamType = TCallTraits<ElementType>::ParamType ; using SortPredicate = TLess<> ; public : ElementParamType)",
    "insertText": "operator(SizeType Index)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Empty(SizeType ExpectedNumElements = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Empty(ExpectedNumElements)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(SizeType Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "Num()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} public : SizeType)",
    "insertText": "Find(ElementParamType Item)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(ElementParamType Item)"
  },
  {
    "label": "FindLowerBound()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "FindLowerBound(ElementParamType Value)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (const SizeType FoundIndex =)",
    "insertText": "LowerBound(Data, Value, SortPredicate())"
  },
  {
    "label": "FindUpperBound()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "FindUpperBound(ElementParamType Value)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (const SizeType FoundIndex =)",
    "insertText": "UpperBound(Data, Value, SortPredicate())"
  },
  {
    "label": "InsertUnique()",
    "kind": "Method",
    "detail": "Function (} public : SizeType)",
    "insertText": "InsertUnique(ElementParamType Item)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (SizeType LowerBoundIndex =)",
    "insertText": "LowerBound(Data, Item, SortPredicate())"
  },
  {
    "label": "AddUnsorted()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } SizeType)",
    "insertText": "AddUnsorted(ElementType Item)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "RemoveSingle(ElementParamType Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (SizeType Index =)",
    "insertText": "Find(Item)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "RemoveAt(Index, EAllowShrinking::No)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "RemoveAt(Index, Count, EAllowShrinking::No)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Data, SortPredicate())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : using RangedForConstIteratorType = DataType::RangedForConstIteratorType ; RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForConstIteratorType)",
    "insertText": "end()"
  }
]