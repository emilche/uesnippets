[
  {
    "label": "LibvpxVp8Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp8Encoder"
  },
  {
    "label": "VariableFramerateExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableFramerateExperiment"
  },
  {
    "label": "LibvpxVp8Encoder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LibvpxVp8Encoder(std::unique_ptr<LibvpxInterface> interface,\n                   VP8Encoder::Settings settings)"
  },
  {
    "label": "EncodeFlags()",
    "kind": "Method",
    "detail": "Function (vpx_enc_frame_flags_t)",
    "insertText": "EncodeFlags(const Vp8FrameConfig& references)"
  },
  {
    "label": "GetCpuSpeed()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCpuSpeed(int width, int height)"
  },
  {
    "label": "NumberOfThreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfThreads(int width, int height, int number_of_cores)"
  },
  {
    "label": "InitAndSetControlSettings()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitAndSetControlSettings()"
  },
  {
    "label": "PopulateCodecSpecific()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCodecSpecific(CodecSpecificInfo* codec_specific,\n                             const vpx_codec_cx_pkt& pkt,\n                             int stream_idx,\n                             int encoder_idx,\n                             uint32_t timestamp)"
  },
  {
    "label": "GetEncodedPartitions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEncodedPartitions(const VideoFrame& input_image,\n                           bool retransmission_allowed)"
  },
  {
    "label": "SetStreamState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamState(bool send_stream, int stream_idx)"
  },
  {
    "label": "MaxIntraTarget()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "MaxIntraTarget(uint32_t optimal_buffer_size)"
  },
  {
    "label": "SteadyStateSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SteadyStateSize(int sid, int tid)"
  },
  {
    "label": "UpdateVpxConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateVpxConfiguration(size_t stream_index)"
  },
  {
    "label": "MaybeUpdatePixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdatePixelFormat(vpx_img_fmt fmt)"
  },
  {
    "label": "PrepareBuffers()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<VideoFrameBuffer>>)",
    "insertText": "PrepareBuffers(\n      rtc::scoped_refptr<VideoFrameBuffer> buffer)"
  },
  {
    "label": "ParseVariableFramerateConfig()",
    "kind": "Method",
    "detail": "Function (VariableFramerateExperiment)",
    "insertText": "ParseVariableFramerateConfig(\n      std::string group_name)"
  }
]