[
  {
    "label": "LibvpxVp8Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp8Encoder"
  },
  {
    "label": "VariableFramerateExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableFramerateExperiment"
  },
  {
    "label": "LibvpxVp8Encoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_ENCODER_H_ # define MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_ENCODER_H_ # include<memory> # include<string> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / vp8_frame_buffer_controller . h \" # include \" api / video_codecs / vp8_frame_config . h \" # include \" modules / video_coding / codecs / interface / libvpx_interface . h \" # include \" modules / video_coding / codecs / vp8 / include / vp8 . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / utility / framerate_controller_deprecated . h \" # include \" modules / video_coding / utility / vp8_constants . h \" # include \" rtc_base / experiments / cpu_speed_experiment . h \" # include \" rtc_base / experiments / encoder_info_settings . h \" # include \" rtc_base / experiments / rate_control_settings . h \" # include \" vpx / vp8cx . h \" # include \" vpx / vpx_encoder . h \" namespace webrtc { class LibvpxVp8Encoder : public VideoEncoder { public :)",
    "insertText": "LibvpxVp8Encoder(std::unique_ptr<LibvpxInterface> interface, VP8Encoder::Settings settings)"
  },
  {
    "label": "LibvpxVp8Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LibvpxVp8Encoder()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Release()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, const VideoEncoder::Settings& settings)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const LossNotification& loss_notification)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "EncodeFlags()",
    "kind": "Method",
    "detail": "Function (vpx_enc_frame_flags_t)",
    "insertText": "EncodeFlags(const Vp8FrameConfig& references)"
  },
  {
    "label": "GetCpuSpeed()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "GetCpuSpeed(int width, int height)"
  },
  {
    "label": "NumberOfThreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfThreads(int width, int height, int number_of_cores)"
  },
  {
    "label": "InitAndSetControlSettings()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitAndSetControlSettings()"
  },
  {
    "label": "PopulateCodecSpecific()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCodecSpecific(CodecSpecificInfo* codec_specific, const vpx_codec_cx_pkt& pkt, int stream_idx, int encoder_idx, uint32_t timestamp)"
  },
  {
    "label": "GetEncodedPartitions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEncodedPartitions(const VideoFrame& input_image, bool retransmission_allowed)"
  },
  {
    "label": "SetStreamState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamState(bool send_stream, int stream_idx)"
  },
  {
    "label": "MaxIntraTarget()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "MaxIntraTarget(uint32_t optimal_buffer_size)"
  },
  {
    "label": "FrameDropThreshold()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FrameDropThreshold(size_t spatial_idx)"
  },
  {
    "label": "SteadyStateSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SteadyStateSize(int sid, int tid)"
  },
  {
    "label": "UpdateVpxConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateVpxConfiguration(size_t stream_index)"
  },
  {
    "label": "MaybeUpdatePixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdatePixelFormat(vpx_img_fmt fmt)"
  },
  {
    "label": "PrepareBuffers()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<VideoFrameBuffer>>)",
    "insertText": "PrepareBuffers(rtc::scoped_refptr<VideoFrameBuffer> buffer)"
  },
  {
    "label": "ParseVariableFramerateConfig()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<LibvpxInterface> libvpx_ ; const CpuSpeedExperiment experimental_cpu_speed_config_arm_ ; const RateControlSettings rate_control_settings_ ; EncodedImageCallback* encoded_complete_callback_ = nullptr ; VideoCodec codec_ ; bool inited_ = false ; int64_t timestamp_ = 0 ; int qp_max_ = 5 6 ; int cpu_speed_default_ = - 6 ; int number_of_cores_ = 0 ; uint32_t rc_max_intra_target_ = 0 ; int num_active_streams_ = 0 ; const std::unique_ptr<Vp8FrameBufferControllerFactory> frame_buffer_controller_factory_ ; std::unique_ptr<Vp8FrameBufferController> frame_buffer_controller_ ; const std::vector<VideoEncoder::ResolutionBitrateLimits> resolution_bitrate_limits_ ; std::vector<bool> key_frame_request_ ; std::vector<bool> send_stream_ ; std::vector<int> cpu_speed_ ; std::vector<vpx_image_t> raw_images_ ; std::vector<EncodedImage> encoded_images_ ; std::vector<vpx_codec_ctx_t> encoders_ ; std::vector<vpx_codec_enc_cfg_t> vpx_configs_ ; std::vector<Vp8EncoderConfig> config_overrides_ ; std::vector<vpx_rational_t> downsampling_factors_ ; const struct VariableFramerateExperiment { bool enabled = false ; float framerate_limit = 5 . 0 ; int steady_state_qp = kVp8SteadyStateQpThreshold ; int steady_state_undershoot_percentage = 3 0 ; } variable_framerate_experiment_ ; VariableFramerateExperiment)",
    "insertText": "ParseVariableFramerateConfig(std::string group_name)"
  }
]