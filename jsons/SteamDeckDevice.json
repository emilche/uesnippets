[
  {
    "label": "ParentDeviceClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParentDeviceClass"
  },
  {
    "label": "TSteamDeckDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSteamDeckDevice"
  },
  {
    "label": "TSteamDeckDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformBase . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Serialization / MemoryLayout . h \" # include \" Logging / LogMacros . h \" template<class ParentDeviceClass> class TSteamDeckDevice : public ParentDeviceClass { public :)",
    "insertText": "TSteamDeckDevice(FString InIpAddr, FString InDeviceName, FString InUserName, FString InPassword, const ITargetPlatformControls& InTargetPlatformControls, const TCHAR* InRuntimeOSName) : ParentDeviceClass(InTargetPlatformControls) , IpAddr(InIpAddr) , UserName(InUserName) , Password(InPassword) , RuntimeOSName(InRuntimeOSName)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (DeviceName =)",
    "insertText": "Printf(TEXT(\"%s (%s)\"), *InDeviceName, InRuntimeOSName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetOperatingSystemName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetOperatingSystemName()"
  },
  {
    "label": "GetUserCredentials()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetUserCredentials(FString& OutUserName, FString& OutUserPassword)"
  },
  {
    "label": "DiscoverDevices()",
    "kind": "Method",
    "detail": "Function (OutUserName = UserName ; OutUserPassword = Password ; return true ; } TArray<ITargetDevicePtr>)",
    "insertText": "DiscoverDevices(const ITargetPlatformControls& TargetPlatformControls, const TCHAR* RuntimeOSName)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> EngineIniSteamDeckDevices ; GConfig ->)",
    "insertText": "GetArray(TEXT(\"SteamDeck\"), TEXT(\"SteamDeckDevice\"), EngineIniSteamDeckDevices, GEngineIni)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<ITargetDevicePtr> SteamDevices ;)",
    "insertText": "for(const FString& Device : EngineIniSteamDeckDevices)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString IpAddr ; FString Name ; FString ConfigUserName ; FString ConfigPassword ; const FString DefaultUserName =)",
    "insertText": "TEXT(\"deck\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(!FParse::Value(*Device, TEXT(\"Name=\"), Name))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FString DefaultNamePrefix = \" [ SteamDeck ] \" ; Name = DefaultNamePrefix + IpAddr ; })",
    "insertText": "if(!FParse::Value(*Device, TEXT(\"UserName=\"), ConfigUserName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ConfigUserName = DefaultUserName ; })",
    "insertText": "if(!FParse::Value(*Device, TEXT(\"Password=\"), ConfigPassword))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (ConfigPassword =)",
    "insertText": "FString()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} SteamDevices .)",
    "insertText": "Add(MakeShareable(new TSteamDeckDevice<ParentDeviceClass>(IpAddr, Name, ConfigUserName, ConfigPassword, TargetPlatformControls, RuntimeOSName)))"
  }
]