[
  {
    "label": "hb_ot_name_entry_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_name_entry_t"
  },
  {
    "label": "hb_ot_name_list_names()",
    "kind": "Method",
    "detail": "Function (# ifndef HB_OT_H_IN # error \" Include<hb - ot . h> instead . \" # endif # ifndef HB_OT_NAME_H # define HB_OT_NAME_H # include \" hb . h \" HB_BEGIN_DECLS enum { HB_OT_NAME_ID_COPYRIGHT = 0,HB_OT_NAME_ID_FONT_FAMILY = 1,HB_OT_NAME_ID_FONT_SUBFAMILY = 2,HB_OT_NAME_ID_UNIQUE_ID = 3,HB_OT_NAME_ID_FULL_NAME = 4,HB_OT_NAME_ID_VERSION_STRING = 5,HB_OT_NAME_ID_POSTSCRIPT_NAME = 6,HB_OT_NAME_ID_TRADEMARK = 7,HB_OT_NAME_ID_MANUFACTURER = 8,HB_OT_NAME_ID_DESIGNER = 9,HB_OT_NAME_ID_DESCRIPTION = 1 0,HB_OT_NAME_ID_VENDOR_URL = 1 1,HB_OT_NAME_ID_DESIGNER_URL = 1 2,HB_OT_NAME_ID_LICENSE = 1 3,HB_OT_NAME_ID_LICENSE_URL = 1 4,HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY = 1 6,HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY = 1 7,HB_OT_NAME_ID_MAC_FULL_NAME = 1 8,HB_OT_NAME_ID_SAMPLE_TEXT = 1 9,HB_OT_NAME_ID_CID_FINDFONT_NAME = 2 0,HB_OT_NAME_ID_WWS_FAMILY = 2 1,HB_OT_NAME_ID_WWS_SUBFAMILY = 2 2,HB_OT_NAME_ID_LIGHT_BACKGROUND = 2 3,HB_OT_NAME_ID_DARK_BACKGROUND = 2 4,HB_OT_NAME_ID_VARIATIONS_PS_PREFIX = 2 5,HB_OT_NAME_ID_INVALID = 0 xFFFF } ; typedef unsigned int hb_ot_name_id_t ; typedef struct hb_ot_name_entry_t { hb_ot_name_id_t name_id ; hb_var_int_t var ; hb_language_t language ; } hb_ot_name_entry_t ; HB_EXTERN const hb_ot_name_entry_t*)",
    "insertText": "hb_ot_name_list_names(hb_face_t *face, unsigned int *num_entries)"
  },
  {
    "label": "hb_ot_name_get_utf8()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_name_get_utf8(hb_face_t *face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int *text_size , char *text)"
  },
  {
    "label": "hb_ot_name_get_utf16()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_name_get_utf16(hb_face_t *face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int *text_size , uint16_t *text)"
  },
  {
    "label": "hb_ot_name_get_utf32()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_name_get_utf32(hb_face_t *face, hb_ot_name_id_t name_id, hb_language_t language, unsigned int *text_size , uint32_t *text)"
  }
]