[
  {
    "label": "specifies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specifies"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "IntervalMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalMapInfo"
  },
  {
    "label": "IntervalMapHalfOpenInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalMapHalfOpenInfo"
  },
  {
    "label": "LeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafNode"
  },
  {
    "label": "BranchNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchNode"
  },
  {
    "label": "NodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeBase"
  },
  {
    "label": "NodeSizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeSizer"
  },
  {
    "label": "NodeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeRef"
  },
  {
    "label": "CacheAlignedPointerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheAlignedPointerTraits"
  },
  {
    "label": "LeafNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafNode"
  },
  {
    "label": "BranchNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchNode"
  },
  {
    "label": "also",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "also"
  },
  {
    "label": "Path",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Path"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "RootBranchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootBranchData"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "IntervalMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMap"
  },
  {
    "label": "IntervalMapOverlaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntervalMapOverlaps"
  },
  {
    "label": "IntervalMap()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "IntervalMap(Allocator&)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(KeyT x)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(KeyT a, KeyT b, ValT y)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "goToBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "goToBegin()"
  },
  {
    "label": "goToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "goToEnd()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "find(KeyT x)"
  },
  {
    "label": "advanceTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advanceTo(KeyT x)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(KeyT a, KeyT b, Value y)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase()"
  },
  {
    "label": "distribute()",
    "kind": "Method",
    "detail": "Function (IdxPair)",
    "insertText": "distribute(unsigned Nodes, unsigned Elements, unsigned Capacity,\n                   const unsigned *CurSize, unsigned NewSize[],\n                   unsigned Position, bool Grow)"
  },
  {
    "label": "insertFrom()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "insertFrom(unsigned &Pos, unsigned Size, KeyT a, KeyT b, ValT y)"
  },
  {
    "label": "replaceRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceRoot(void *Root, unsigned Size, IdxPair Offsets)"
  },
  {
    "label": "moveLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveLeft(unsigned Level)"
  },
  {
    "label": "moveRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveRight(unsigned Level)"
  },
  {
    "label": "branchRoot()",
    "kind": "Method",
    "detail": "Function (IdxPair)",
    "insertText": "branchRoot(unsigned Position)"
  },
  {
    "label": "splitRoot()",
    "kind": "Method",
    "detail": "Function (IdxPair)",
    "insertText": "splitRoot(unsigned Position)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteNode(IntervalMapImpl::NodeRef Node, unsigned Level)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "I(*this)"
  },
  {
    "label": "NewOffset()",
    "kind": "Method",
    "detail": "Function (IdxPair)",
    "insertText": "NewOffset(0, Position)"
  },
  {
    "label": "NewOffset()",
    "kind": "Method",
    "detail": "Function (IdxPair)",
    "insertText": "NewOffset(0, Position)"
  },
  {
    "label": "pathFillFind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pathFillFind(KeyT x)"
  },
  {
    "label": "treeFind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "treeFind(KeyT x)"
  },
  {
    "label": "treeAdvanceTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "treeAdvanceTo(KeyT x)"
  },
  {
    "label": "unsafeStart()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "unsafeStart()"
  },
  {
    "label": "unsafeStop()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "unsafeStop()"
  },
  {
    "label": "unsafeValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "unsafeValue()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "value()"
  },
  {
    "label": "pathFillFind()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "pathFillFind(x)"
  },
  {
    "label": "pathFillFind()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "pathFillFind(x)"
  },
  {
    "label": "setNodeStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNodeStop(unsigned Level, KeyT Stop)"
  },
  {
    "label": "insertNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "insertNode(unsigned Level, IntervalMapImpl::NodeRef Node, KeyT Stop)"
  },
  {
    "label": "overflow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "overflow(unsigned Level)"
  },
  {
    "label": "treeInsert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "treeInsert(KeyT a, KeyT b, ValT y)"
  },
  {
    "label": "eraseNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseNode(unsigned Level)"
  },
  {
    "label": "treeErase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "treeErase(bool UpdateRoot = true)"
  },
  {
    "label": "canCoalesceLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canCoalesceLeft(KeyT Start, ValT x)"
  },
  {
    "label": "canCoalesceRight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canCoalesceRight(KeyT Stop, ValT x)"
  },
  {
    "label": "setStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStart(KeyT a)"
  },
  {
    "label": "setStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStop(KeyT b)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(ValT x)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(KeyT a, KeyT b, ValT y)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase()"
  },
  {
    "label": "treeInsert()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "treeInsert(a, b, y)"
  },
  {
    "label": "treeErase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "treeErase()"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (IntervalMapOverlaps)",
    "insertText": "I(a, b)"
  },
  {
    "label": "skipA()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "skipA()"
  }
]