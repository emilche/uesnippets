[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "JITSymbolBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JITSymbolBase"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_JITSYMBOLFLAGS_H # define LLVM_EXECUTIONENGINE_JITSYMBOLFLAGS_H # include \" llvm / IR / GlobalValue . h \" namespace llvm { enum class JITSymbolFlags : char { None = 0,Weak = 1 U<<0,Exported = 1 U<<1 } ; JITSymbolFlags)",
    "insertText": "operator(JITSymbolFlags LHS, JITSymbolFlags RHS)"
  },
  {
    "label": "JITSymbolFlags()",
    "kind": "Method",
    "detail": "Function (typedef std::underlying_type<JITSymbolFlags>::type UT ; return static_cast<)",
    "insertText": "JITSymbolFlags(static_cast<UT>(LHS) | static_cast<UT>(RHS))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} JITSymbolFlags&)",
    "insertText": "operator(JITSymbolFlags &LHS, JITSymbolFlags RHS)"
  },
  {
    "label": "JITSymbolFlags()",
    "kind": "Method",
    "detail": "Function (typedef std::underlying_type<JITSymbolFlags>::type UT ; return static_cast<)",
    "insertText": "JITSymbolFlags(static_cast<UT>(LHS) & static_cast<UT>(RHS))"
  },
  {
    "label": "JITSymbolBase()",
    "kind": "Method",
    "detail": "Function (LHS = LHS& RHS ; return LHS ; } class JITSymbolBase { public :)",
    "insertText": "JITSymbolBase(JITSymbolFlags Flags) : Flags(Flags)"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (} JITSymbolFlags)",
    "insertText": "getFlags()"
  },
  {
    "label": "isExported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExported()"
  },
  {
    "label": "flagsFromGlobalValue()",
    "kind": "Method",
    "detail": "Function (} JITSymbolFlags)",
    "insertText": "flagsFromGlobalValue(const GlobalValue &GV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (JITSymbolFlags Flags = JITSymbolFlags::None ;)",
    "insertText": "if(GV.hasWeakLinkage())"
  }
]