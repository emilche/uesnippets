[
  {
    "label": "ThreadTaskRunnerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTaskRunnerHandle"
  },
  {
    "label": "TestMockTimeTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMockTimeTaskRunner"
  },
  {
    "label": "ScopedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NonOwningProxyTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonOwningProxyTaskRunner"
  },
  {
    "label": "MockClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockClock"
  },
  {
    "label": "TestOrderedPendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestOrderedPendingTask"
  },
  {
    "label": "TemporalOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TemporalOrder"
  },
  {
    "label": "ScopedContext()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_MOCK_TIME_TASK_RUNNER_H_ # define BASE_TEST_TEST_MOCK_TIME_TASK_RUNNER_H_ # include<stddef . h> # include<memory> # include<queue> # include<vector> # include \" base / callback . h \" # include \" base / callback_helpers . h \" # include \" base / containers / circular_deque . h \" # include \" base / memory / raw_ptr . h \" # include \" base / run_loop . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / test / test_pending_task . h \" # include \" base / threading / thread_checker_impl . h \" # include \" base / threading / thread_task_runner_handle . h \" # include \" base / time / clock . h \" # include \" base / time / tick_clock . h \" # include \" base / time / time . h \" namespace base { class ThreadTaskRunnerHandle ; class TestMockTimeTaskRunner : public SingleThreadTaskRunner,public RunLoop::Delegate { public : class ScopedContext { public :)",
    "insertText": "ScopedContext(scoped_refptr<TestMockTimeTaskRunner> scope)"
  },
  {
    "label": "ScopedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedContext(const ScopedContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedContext&)",
    "insertText": "operator(const ScopedContext&)"
  },
  {
    "label": "ScopedContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedContext()"
  },
  {
    "label": "TestMockTimeTaskRunner()",
    "kind": "Method",
    "detail": "Function (private : ThreadTaskRunnerHandleOverrideForTesting thread_task_runner_handle_override_ ; } ; enum class Type { kStandalone,kBoundToThread,} ;)",
    "insertText": "TestMockTimeTaskRunner(Type type = Type::kStandalone)"
  },
  {
    "label": "TestMockTimeTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestMockTimeTaskRunner(Time start_time, TimeTicks start_ticks, Type type = Type::kStandalone)"
  },
  {
    "label": "TestMockTimeTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestMockTimeTaskRunner(const TestMockTimeTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestMockTimeTaskRunner&)",
    "insertText": "operator(const TestMockTimeTaskRunner&)"
  },
  {
    "label": "FastForwardBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardBy(TimeDelta delta)"
  },
  {
    "label": "AdvanceMockTickClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMockTickClock(TimeDelta delta)"
  },
  {
    "label": "AdvanceWallClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceWallClock(TimeDelta delta)"
  },
  {
    "label": "FastForwardUntilNoTasksRemain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardUntilNoTasksRemain()"
  },
  {
    "label": "RunUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntilIdle()"
  },
  {
    "label": "ProcessNextNTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNextNTasks(int n)"
  },
  {
    "label": "ClearPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingTasks()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "Now()"
  },
  {
    "label": "NowTicks()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "NowTicks()"
  },
  {
    "label": "GetMockClock()",
    "kind": "Method",
    "detail": "Function (Clock*)",
    "insertText": "GetMockClock()"
  },
  {
    "label": "GetMockTickClock()",
    "kind": "Method",
    "detail": "Function (const TickClock*)",
    "insertText": "GetMockTickClock()"
  },
  {
    "label": "TakePendingTasks()",
    "kind": "Method",
    "detail": "Function (base::circular_deque<TestPendingTask>)",
    "insertText": "TakePendingTasks()"
  },
  {
    "label": "HasPendingTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingTask()"
  },
  {
    "label": "GetPendingTaskCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPendingTaskCount()"
  },
  {
    "label": "NextPendingTaskDelay()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "NextPendingTaskDelay()"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& from_here, OnceClosure task, TimeTicks delayed_run_time, subtle::DelayPolicy deadline_policy)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "TestMockTimeTaskRunner()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "TestMockTimeTaskRunner()"
  },
  {
    "label": "OnBeforeSelectingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeSelectingTask()"
  },
  {
    "label": "OnAfterTimePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterTimePassed()"
  },
  {
    "label": "OnAfterTaskRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterTaskRun()"
  },
  {
    "label": "MockClock()",
    "kind": "Method",
    "detail": "Function (private : class NonOwningProxyTaskRunner ; class MockClock : public TickClock,public Clock { public :)",
    "insertText": "MockClock(TestMockTimeTaskRunner* task_runner) : task_runner_(task_runner)"
  },
  {
    "label": "MockClock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MockClock(const MockClock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MockClock&)",
    "insertText": "operator(const MockClock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<TestMockTimeTaskRunner> task_runner_ ; } ; struct TestOrderedPendingTask ; class TemporalOrder { public : bool)",
    "insertText": "operator()(const TestOrderedPendingTask& first_task, const TestOrderedPendingTask& second_task)"
  },
  {
    "label": "ProcessTasksNoLaterThan()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::priority_queue<TestOrderedPendingTask,std::vector<TestOrderedPendingTask>,TemporalOrder> TaskPriorityQueue ; void)",
    "insertText": "ProcessTasksNoLaterThan(TimeDelta max_delta, int limit = -1)"
  },
  {
    "label": "ForwardClocksUntilTickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardClocksUntilTickTime(TimeTicks later_ticks)"
  },
  {
    "label": "DequeueNextTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DequeueNextTask(const TimeTicks& reference, const TimeDelta& max_delta, TestPendingTask* next_task)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(bool application_tasks_allowed, TimeDelta timeout)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "EnsureWorkScheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureWorkScheduled()"
  }
]