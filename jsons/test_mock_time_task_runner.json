[
  {
    "label": "ThreadTaskRunnerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTaskRunnerHandle"
  },
  {
    "label": "TestMockTimeTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMockTimeTaskRunner"
  },
  {
    "label": "ExampleFixture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExampleFixture"
  },
  {
    "label": "ScopedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NonOwningProxyTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonOwningProxyTaskRunner"
  },
  {
    "label": "MockClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockClock"
  },
  {
    "label": "TestOrderedPendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestOrderedPendingTask"
  },
  {
    "label": "TemporalOrder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TemporalOrder"
  },
  {
    "label": "TestMockTimeTaskRunner()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "TestMockTimeTaskRunner()"
  },
  {
    "label": "ScopedContext()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedContext(scoped_refptr<TestMockTimeTaskRunner> scope)"
  },
  {
    "label": "FastForwardBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardBy(TimeDelta delta)"
  },
  {
    "label": "AdvanceMockTickClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMockTickClock(TimeDelta delta)"
  },
  {
    "label": "AdvanceWallClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceWallClock(TimeDelta delta)"
  },
  {
    "label": "FastForwardUntilNoTasksRemain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardUntilNoTasksRemain()"
  },
  {
    "label": "RunUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntilIdle()"
  },
  {
    "label": "ProcessNextNTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNextNTasks(int n)"
  },
  {
    "label": "ClearPendingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingTasks()"
  },
  {
    "label": "TakePendingTasks()",
    "kind": "Method",
    "detail": "Function (base::circular_deque<TestPendingTask>)",
    "insertText": "TakePendingTasks()"
  },
  {
    "label": "HasPendingTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingTask()"
  },
  {
    "label": "GetPendingTaskCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPendingTaskCount()"
  },
  {
    "label": "NextPendingTaskDelay()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "NextPendingTaskDelay()"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "OnBeforeSelectingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeSelectingTask()"
  },
  {
    "label": "OnAfterTimePassed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterTimePassed()"
  },
  {
    "label": "OnAfterTaskRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterTaskRun()"
  },
  {
    "label": "ProcessTasksNoLaterThan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTasksNoLaterThan(TimeDelta max_delta, int limit = -1)"
  },
  {
    "label": "ForwardClocksUntilTickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardClocksUntilTickTime(TimeTicks later_ticks)"
  },
  {
    "label": "DequeueNextTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DequeueNextTask(const TimeTicks& reference,\n                       const TimeDelta& max_delta,\n                       TestPendingTask* next_task)"
  }
]