[
  {
    "label": "Scenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scenario"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_SCENARIO_H_ # define TEST_SCENARIO_SCENARIO_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / functional / any_invocable . h \" # include \" absl / strings / string_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / test / time_controller . h \" # include \" rtc_base / fake_clock . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" test / gtest . h \" # include \" test / logging / log_writer . h \" # include \" test / network / network_emulation_manager . h \" # include \" test / scenario / audio_stream . h \" # include \" test / scenario / call_client . h \" # include \" test / scenario / column_printer . h \" # include \" test / scenario / network_node . h \" # include \" test / scenario / scenario_config . h \" # include \" test / scenario / video_stream . h \" namespace webrtc { namespace test { class Scenario { public :)",
    "insertText": "Scenario()"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scenario(const testing::TestInfo* test_info)"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scenario(absl::string_view file_name)"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scenario(absl::string_view file_name, bool real_time)"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scenario(std::unique_ptr<LogWriterFactoryInterface> log_writer_manager, bool real_time)"
  },
  {
    "label": "Scenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scenario(const Scenario&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Scenario&)",
    "insertText": "operator(const Scenario&)"
  },
  {
    "label": "net()",
    "kind": "Method",
    "detail": "Function (NetworkEmulationManagerImpl*)",
    "insertText": "net()"
  },
  {
    "label": "CreateSimulationNode()",
    "kind": "Method",
    "detail": "Function (EmulatedNetworkNode*)",
    "insertText": "CreateSimulationNode(std::function<void(NetworkSimulationConfig*)> config_modifier)"
  },
  {
    "label": "CreateMutableSimulationNode()",
    "kind": "Method",
    "detail": "Function (SimulationNode*)",
    "insertText": "CreateMutableSimulationNode(NetworkSimulationConfig config)"
  },
  {
    "label": "CreateMutableSimulationNode()",
    "kind": "Method",
    "detail": "Function (SimulationNode*)",
    "insertText": "CreateMutableSimulationNode(std::function<void(NetworkSimulationConfig*)> config_modifier)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (CallClient*)",
    "insertText": "CreateClient(absl::string_view name, CallClientConfig config)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (CallClient*)",
    "insertText": "CreateClient(absl::string_view name, std::function<void(CallClientConfig*)> config_modifier)"
  },
  {
    "label": "CreateRoutes()",
    "kind": "Method",
    "detail": "Function (CallClientPair*)",
    "insertText": "CreateRoutes(CallClient* first, std::vector<EmulatedNetworkNode*> send_link, CallClient* second, std::vector<EmulatedNetworkNode*> return_link)"
  },
  {
    "label": "CreateRoutes()",
    "kind": "Method",
    "detail": "Function (CallClientPair*)",
    "insertText": "CreateRoutes(CallClient* first, std::vector<EmulatedNetworkNode*> send_link, DataSize first_overhead, CallClient* second, std::vector<EmulatedNetworkNode*> return_link, DataSize second_overhead)"
  },
  {
    "label": "ChangeRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeRoute(std::pair<CallClient*, CallClient*> clients, std::vector<EmulatedNetworkNode*> over_nodes)"
  },
  {
    "label": "ChangeRoute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeRoute(std::pair<CallClient*, CallClient*> clients, std::vector<EmulatedNetworkNode*> over_nodes, DataSize overhead)"
  },
  {
    "label": "CreateVideoStream()",
    "kind": "Method",
    "detail": "Function (VideoStreamPair*)",
    "insertText": "CreateVideoStream(std::pair<CallClient*, CallClient*> clients, std::function<void(VideoStreamConfig*)> config_modifier)"
  },
  {
    "label": "CreateVideoStream()",
    "kind": "Method",
    "detail": "Function (VideoStreamPair*)",
    "insertText": "CreateVideoStream(std::pair<CallClient*, CallClient*> clients, VideoStreamConfig config)"
  },
  {
    "label": "CreateAudioStream()",
    "kind": "Method",
    "detail": "Function (AudioStreamPair*)",
    "insertText": "CreateAudioStream(std::pair<CallClient*, CallClient*> clients, std::function<void(AudioStreamConfig*)> config_modifier)"
  },
  {
    "label": "CreateAudioStream()",
    "kind": "Method",
    "detail": "Function (AudioStreamPair*)",
    "insertText": "CreateAudioStream(std::pair<CallClient*, CallClient*> clients, AudioStreamConfig config)"
  },
  {
    "label": "Every()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Every(TimeDelta interval, absl::AnyInvocable<void(TimeDelta)> function)"
  },
  {
    "label": "Every()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Every(TimeDelta interval, absl::AnyInvocable<void()> function)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Post(absl::AnyInvocable<void() &&> function)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "At(TimeDelta offset, absl::AnyInvocable<void() &&> function)"
  },
  {
    "label": "NetworkDelayedAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkDelayedAction(std::vector<EmulatedNetworkNode*> over_nodes, size_t packet_size, std::function<void()> action)"
  },
  {
    "label": "RunFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunFor(TimeDelta duration)"
  },
  {
    "label": "RunUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntil(TimeDelta target_time_since_start)"
  },
  {
    "label": "RunUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntil(TimeDelta target_time_since_start, TimeDelta check_interval, std::function<bool()> exit_function)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "TriggerPacketBurst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerPacketBurst(std::vector<EmulatedNetworkNode*> over_nodes, size_t num_packets, size_t packet_size)"
  },
  {
    "label": "TimePrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "TimePrinter()"
  },
  {
    "label": "CreatePrinter()",
    "kind": "Method",
    "detail": "Function (StatesPrinter*)",
    "insertText": "CreatePrinter(absl::string_view name, TimeDelta interval, std::vector<ColumnPrinter> printers)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "TimeSinceStart()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TimeSinceStart()"
  },
  {
    "label": "GetLogWriter()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtcEventLogOutput>)",
    "insertText": "GetLogWriter(absl::string_view name)"
  },
  {
    "label": "GetLogWriterFactory()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<LogWriterFactoryInterface>)",
    "insertText": "GetLogWriterFactory(absl::string_view name)"
  },
  {
    "label": "TimeUntilTarget()",
    "kind": "Method",
    "detail": "Function (} private : TimeDelta)",
    "insertText": "TimeUntilTarget(TimeDelta target_time_offset)"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<LogWriterFactoryInterface> log_writer_factory_ ; NetworkEmulationManagerImpl network_manager_ ; Clock* clock_ ; std::vector<std::unique_ptr<CallClient>> clients_ ; std::vector<std::unique_ptr<CallClientPair>> client_pairs_ ; std::vector<std::unique_ptr<VideoStreamPair>> video_streams_ ; std::vector<std::unique_ptr<AudioStreamPair>> audio_streams_ ; std::vector<std::unique_ptr<SimulationNode>> simulation_nodes_ ; std::vector<std::unique_ptr<StatesPrinter>> printers_ ; rtc::scoped_refptr<AudioDecoderFactory> audio_decoder_factory_ ; rtc::scoped_refptr<AudioEncoderFactory> audio_encoder_factory_ ; Timestamp start_time_ =)",
    "insertText": "PlusInfinity()"
  }
]