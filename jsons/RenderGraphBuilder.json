[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FParallelPassSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParallelPassSet"
  },
  {
    "label": "FRHIRenderPassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIRenderPassInfo"
  },
  {
    "label": "FRHITrackedAccessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITrackedAccessInfo"
  },
  {
    "label": "FRHITransientAliasingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientAliasingInfo"
  },
  {
    "label": "TStatId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStatId"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FAsyncDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncDeleter"
  },
  {
    "label": "FExtractedTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtractedTexture"
  },
  {
    "label": "FExtractedBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtractedBuffer"
  },
  {
    "label": "FCollectResourceOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectResourceOp"
  },
  {
    "label": "FCollectResourceContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectResourceContext"
  },
  {
    "label": "FAsyncSetupOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncSetupOp"
  },
  {
    "label": "FAsyncSetupQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncSetupQueue"
  },
  {
    "label": "FParallelExecute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParallelExecute"
  },
  {
    "label": "FUploadedBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUploadedBuffer"
  },
  {
    "label": "FAuxiliaryPass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAuxiliaryPass"
  },
  {
    "label": "FRDGAsyncComputeBudgetScopeGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGAsyncComputeBudgetScopeGuard"
  },
  {
    "label": "FRHITransientBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientBuffer"
  },
  {
    "label": "FRHITransientTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientTexture"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "IRHITransientResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHITransientResourceAllocator"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" Containers / StridedView . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" MultiGPU . h \" # include \" PixelFormat . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" RHIBreadcrumbs . h \" # include \" RHIDefinitions . h \" # include \" RenderGraphAllocator . h \" # include \" RenderGraphBlackboard . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderGraphEvent . h \" # include \" RenderGraphPass . h \" # include \" RenderGraphResources . h \" # include \" RenderGraphTrace . h \" # include \" RenderGraphValidation . h \" # include \" RendererInterface . h \" # include \" ShaderParameterMacros . h \" # include \" Stats / Stats2 . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UnrealTemplate . h \" # include \" Tasks / Pipe . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" enum class ERenderTargetTexture : uint8 ; struct FParallelPassSet ; struct FRHIRenderPassInfo ; struct FRHITrackedAccessInfo ; struct FRHITransientAliasingInfo ; struct TStatId ; class FRDGBuilder : public FRDGScopeState { struct FAsyncDeleter { TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FAsyncDeleter()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask Prerequisites ; UE::Tasks::FTask LastTask ; ~)",
    "insertText": "FAsyncDeleter()"
  },
  {
    "label": "GetByteCount()",
    "kind": "Method",
    "detail": "Function (} AsyncDeleter ; struct { FRDGAllocator Root ; FRDGAllocator Task ; FRDGAllocator Transition ; int32)",
    "insertText": "GetByteCount()"
  },
  {
    "label": "FRDGBuilder()",
    "kind": "Method",
    "detail": "Function (} } Allocators ; FRDGAllocatorScope RootAllocatorScope ; public :)",
    "insertText": "FRDGBuilder(FRHICommandListImmediate& RHICmdList, FRDGEventName Name = {}, ERDGBuilderFlags Flags = ERDGBuilderFlags::None)"
  },
  {
    "label": "FRDGBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGBuilder(const FRDGBuilder&)"
  },
  {
    "label": "FRDGBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRDGBuilder()"
  },
  {
    "label": "FindExternalTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTexture*)",
    "insertText": "FindExternalTexture(FRHITexture* Texture)"
  },
  {
    "label": "FindExternalTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTexture*)",
    "insertText": "FindExternalTexture(IPooledRenderTarget* ExternalPooledTexture)"
  },
  {
    "label": "FindExternalBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "FindExternalBuffer(FRHIBuffer* Buffer)"
  },
  {
    "label": "FindExternalBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "FindExternalBuffer(FRDGPooledBuffer* ExternalPooledBuffer)"
  },
  {
    "label": "RegisterExternalTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "RegisterExternalTexture(const TRefCountPtr<IPooledRenderTarget>& ExternalPooledTexture, ERDGTextureFlags Flags = ERDGTextureFlags::None)"
  },
  {
    "label": "RegisterExternalTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "RegisterExternalTexture(const TRefCountPtr<IPooledRenderTarget>& ExternalPooledTexture, const TCHAR* NameIfNotRegistered, ERDGTextureFlags Flags = ERDGTextureFlags::None)"
  },
  {
    "label": "RegisterExternalBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "RegisterExternalBuffer(const TRefCountPtr<FRDGPooledBuffer>& ExternalPooledBuffer, ERDGBufferFlags Flags = ERDGBufferFlags::None)"
  },
  {
    "label": "RegisterExternalBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "RegisterExternalBuffer(const TRefCountPtr<FRDGPooledBuffer>& ExternalPooledBuffer, ERDGBufferFlags Flags, ERHIAccess AccessFinal)"
  },
  {
    "label": "RegisterExternalBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "RegisterExternalBuffer(const TRefCountPtr<FRDGPooledBuffer>& ExternalPooledBuffer, const TCHAR* NameIfNotRegistered, ERDGBufferFlags Flags = ERDGBufferFlags::None)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CreateTexture(const FRDGTextureDesc& Desc, const TCHAR* Name, ERDGTextureFlags Flags = ERDGTextureFlags::None)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "CreateBuffer(const FRDGBufferDesc& Desc, const TCHAR* Name, ERDGBufferFlags Flags = ERDGBufferFlags::None)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "CreateBuffer(const FRDGBufferDesc& Desc, const TCHAR* Name, FRDGBufferNumElementsCallback&& NumElementsCallback, ERDGBufferFlags Flags = ERDGBufferFlags::None)"
  },
  {
    "label": "CreateSRV()",
    "kind": "Method",
    "detail": "Function (FRDGTextureSRVRef)",
    "insertText": "CreateSRV(const FRDGTextureSRVDesc& Desc)"
  },
  {
    "label": "CreateSRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRVRef)",
    "insertText": "CreateSRV(const FRDGBufferSRVDesc& Desc)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureUAVRef)",
    "insertText": "CreateUAV(const FRDGTextureUAVDesc& Desc, ERDGUnorderedAccessViewFlags Flags = ERDGUnorderedAccessViewFlags::None)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferUAVRef)",
    "insertText": "CreateUAV(const FRDGBufferUAVDesc& Desc, ERDGUnorderedAccessViewFlags Flags = ERDGUnorderedAccessViewFlags::None)"
  },
  {
    "label": "CreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ParameterStructType> TRDGUniformBufferRef<ParameterStructType>)",
    "insertText": "CreateUniformBuffer(const ParameterStructType* ParameterStruct)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(uint64 SizeInBytes, uint32 AlignInBytes = 16)"
  },
  {
    "label": "AllocPOD()",
    "kind": "Method",
    "detail": "Function (template<PODType> PODType*)",
    "insertText": "AllocPOD()"
  },
  {
    "label": "AllocPODArray()",
    "kind": "Method",
    "detail": "Function (template<PODType> PODType*)",
    "insertText": "AllocPODArray(uint32 Count)"
  },
  {
    "label": "AllocPODArrayView()",
    "kind": "Method",
    "detail": "Function (template<PODType> TArrayView<PODType>)",
    "insertText": "AllocPODArrayView(uint32 Count)"
  },
  {
    "label": "AllocObject()",
    "kind": "Method",
    "detail": "Function (template<ObjectType,. . . TArgs> ObjectType*)",
    "insertText": "AllocObject(TArgs&&... Args)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (template<ObjectType> TArray<ObjectType,SceneRenderingAllocator>&)",
    "insertText": "AllocArray()"
  },
  {
    "label": "AllocParameters()",
    "kind": "Method",
    "detail": "Function (template<ParameterStructType> ParameterStructType*)",
    "insertText": "AllocParameters()"
  },
  {
    "label": "AllocParameters()",
    "kind": "Method",
    "detail": "Function (template<ParameterStructType> ParameterStructType*)",
    "insertText": "AllocParameters(const ParameterStructType* StructToCopy)"
  },
  {
    "label": "AllocParameters()",
    "kind": "Method",
    "detail": "Function (template<BaseParameterStructType> BaseParameterStructType*)",
    "insertText": "AllocParameters(const FShaderParametersMetadata* ParametersMetadata)"
  },
  {
    "label": "AllocParameters()",
    "kind": "Method",
    "detail": "Function (template<BaseParameterStructType> TStridedView<BaseParameterStructType>)",
    "insertText": "AllocParameters(const FShaderParametersMetadata* ParametersMetadata, uint32 NumStructs)"
  },
  {
    "label": "AddPostExecuteCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostExecuteCallback(TUniqueFunction<void()>&& Callback)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (PostExecuteCallbacks .)",
    "insertText": "Emplace(Forward<TUniqueFunction<void()>&&>(Callback))"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<ParameterStructType,ExecuteLambdaType> FRDGPassRef)",
    "insertText": "AddPass(FRDGEventName&& Name, const ParameterStructType* ParameterStruct, ERDGPassFlags Flags, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (template<ExecuteLambdaType> FRDGPassRef)",
    "insertText": "AddPass(FRDGEventName&& Name, const FShaderParametersMetadata* ParametersMetadata, const void* ParameterStruct, ERDGPassFlags Flags, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (template<ExecuteLambdaType> FRDGPassRef)",
    "insertText": "AddPass(FRDGEventName&& Name, ERDGPassFlags Flags, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "AddDispatchPass()",
    "kind": "Method",
    "detail": "Function (template<ParameterStructType,LaunchLambdaType> FRDGPassRef)",
    "insertText": "AddDispatchPass(FRDGEventName&& Name, const ParameterStructType* ParameterStruct, ERDGPassFlags Flags, LaunchLambdaType&& LaunchLambda)"
  },
  {
    "label": "SetPassWorkload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPassWorkload(FRDGPass* Pass, uint32 Workload)"
  },
  {
    "label": "AddPassDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPassDependency(FRDGPass* Producer, FRDGPass* Consumer)"
  },
  {
    "label": "AddDispatchHint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDispatchHint()"
  },
  {
    "label": "AddSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddSetupTask(TaskLambda&& Task, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddSetupTask(TaskLambda&& Task, UE::Tasks::ETaskPriority Priority, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddSetupTask(TaskLambda&& Task, UE::Tasks::FPipe* Pipe, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda,PrerequisitesCollectionType> UE::Tasks::FTask)",
    "insertText": "AddSetupTask(TaskLambda&& Task, PrerequisitesCollectionType&& Prerequisites, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda,PrerequisitesCollectionType> UE::Tasks::FTask)",
    "insertText": "AddSetupTask(TaskLambda&& Task, UE::Tasks::FPipe* Pipe, PrerequisitesCollectionType&& Prerequisites, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddCommandListSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddCommandListSetupTask(TaskLambda&& Task, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddCommandListSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddCommandListSetupTask(TaskLambda&& Task, UE::Tasks::ETaskPriority Priority, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddCommandListSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda> UE::Tasks::FTask)",
    "insertText": "AddCommandListSetupTask(TaskLambda&& Task, UE::Tasks::FPipe* Pipe, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddCommandListSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda,PrerequisitesCollectionType> UE::Tasks::FTask)",
    "insertText": "AddCommandListSetupTask(TaskLambda&& Task, PrerequisitesCollectionType&& Prerequisites, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "AddCommandListSetupTask()",
    "kind": "Method",
    "detail": "Function (template<TaskLambda,PrerequisitesCollectionType> UE::Tasks::FTask)",
    "insertText": "AddCommandListSetupTask(TaskLambda&& Task, UE::Tasks::FPipe* Pipe, PrerequisitesCollectionType&& Prerequisites, UE::Tasks::ETaskPriority Priority = UE::Tasks::ETaskPriority::Normal, bool bCondition = true, ERDGSetupTaskWaitPoint WaitPoint = ERDGSetupTaskWaitPoint::Compile)"
  },
  {
    "label": "IsParallelSetupEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParallelSetupEnabled()"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, const void* InitialData, uint64 InitialDataSize, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (template<ElementType> void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, TArrayView<ElementType, int32> Container, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferUpload(Buffer, Container.GetData(), Container.Num() * sizeof(ElementType), InitialDataFlags)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, const void* InitialData, uint64 InitialDataSize, FRDGBufferInitialDataFreeCallback&& InitialDataFreeCallback)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (template<ElementType> void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, TArrayView<ElementType, int32> Container, FRDGBufferInitialDataFreeCallback&& InitialDataFreeCallback)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferUpload(Buffer, Container.GetData(), Container.Num() * sizeof(ElementType), InitialDataFreeCallback)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, FRDGBufferInitialDataFillCallback&& InitialDataFillCallback)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, FRDGBufferInitialDataCallback&& InitialDataCallback, FRDGBufferInitialDataSizeCallback&& InitialDataSizeCallback)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferUpload(FRDGBufferRef Buffer, FRDGBufferInitialDataCallback&& InitialDataCallback, FRDGBufferInitialDataSizeCallback&& InitialDataSizeCallback, FRDGBufferInitialDataFreeCallback&& InitialDataFreeCallback)"
  },
  {
    "label": "QueueCommitReservedBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueCommitReservedBuffer(FRDGBufferRef Buffer, uint64 CommitSizeInBytes)"
  },
  {
    "label": "QueueTextureExtraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTextureExtraction(FRDGTextureRef Texture, TRefCountPtr<IPooledRenderTarget>* OutPooledTexturePtr, ERDGResourceExtractionFlags Flags = ERDGResourceExtractionFlags::None)"
  },
  {
    "label": "QueueTextureExtraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTextureExtraction(FRDGTextureRef Texture, TRefCountPtr<IPooledRenderTarget>* OutPooledTexturePtr, ERHIAccess AccessFinal, ERDGResourceExtractionFlags Flags = ERDGResourceExtractionFlags::None)"
  },
  {
    "label": "QueueBufferExtraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferExtraction(FRDGBufferRef Buffer, TRefCountPtr<FRDGPooledBuffer>* OutPooledBufferPtr)"
  },
  {
    "label": "QueueBufferExtraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueBufferExtraction(FRDGBufferRef Buffer, TRefCountPtr<FRDGPooledBuffer>* OutPooledBufferPtr, ERHIAccess AccessFinal)"
  },
  {
    "label": "ConvertToExternalTexture()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "ConvertToExternalTexture(FRDGTextureRef Texture)"
  },
  {
    "label": "ConvertToExternalBuffer()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "ConvertToExternalBuffer(FRDGBufferRef Buffer)"
  },
  {
    "label": "ConvertToExternalUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "ConvertToExternalUniformBuffer(FRDGUniformBufferRef UniformBuffer)"
  },
  {
    "label": "GetPooledTexture()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "GetPooledTexture(FRDGTextureRef Texture)"
  },
  {
    "label": "GetPooledBuffer()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetPooledBuffer(FRDGBufferRef Buffer)"
  },
  {
    "label": "SetTextureAccessFinal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureAccessFinal(FRDGTextureRef Texture, ERHIAccess Access)"
  },
  {
    "label": "SetBufferAccessFinal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferAccessFinal(FRDGBufferRef Buffer, ERHIAccess Access)"
  },
  {
    "label": "UseExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseExternalAccessMode(FRDGViewableResource* Resource, ERHIAccess ReadOnlyAccess, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "UseExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseExternalAccessMode(TArrayView<FRDGViewableResource* const> Resources, ERHIAccess ReadOnlyAccess, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "UseExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseExternalAccessMode(Resource, ReadOnlyAccess, Pipelines)"
  },
  {
    "label": "UseInternalAccessMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UseInternalAccessMode(FRDGViewableResource* Resource)"
  },
  {
    "label": "UseInternalAccessMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseInternalAccessMode(TArrayView<FRDGViewableResource* const> Resources)"
  },
  {
    "label": "UseInternalAccessMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseInternalAccessMode(Resource)"
  },
  {
    "label": "RemoveUnusedTextureWarning()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveUnusedTextureWarning(FRDGTextureRef Texture)"
  },
  {
    "label": "RemoveUnusedBufferWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedBufferWarning(FRDGBufferRef Buffer)"
  },
  {
    "label": "FlushSetupQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushSetupQueue()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute()"
  },
  {
    "label": "TickPoolElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPoolElements()"
  },
  {
    "label": "IsImmediateMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImmediateMode()"
  },
  {
    "label": "WaitForAsyncDeleteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncDeleteTask()"
  },
  {
    "label": "WaitForAsyncExecuteTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncExecuteTask()"
  },
  {
    "label": "GetAsyncExecuteTask()",
    "kind": "Method",
    "detail": "Function (const UE::Tasks::FTask&)",
    "insertText": "GetAsyncExecuteTask()"
  },
  {
    "label": "BeginResourceDump()",
    "kind": "Method",
    "detail": "Function (FRDGBlackboard Blackboard ; # if RDG_DUMP_RESOURCES FString)",
    "insertText": "BeginResourceDump(const TCHAR* Cmd)"
  },
  {
    "label": "IsDumpingFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDumpingFrame()"
  },
  {
    "label": "OverridePassFlags()",
    "kind": "Method",
    "detail": "Function (bForceCopyCrossGPU = true ; } # endif private : const char* const kDefaultUnaccountedCSVStat ; const FRDGEventName BuilderName ; FRDGPass* ProloguePass = nullptr ; FRDGPass* EpiloguePass = nullptr ; uint32 AsyncComputePassCount = 0 ; uint32 RasterPassCount = 0 ; TArray<FRDGDispatchPass*,FRDGArrayAllocator> DispatchPasses ; ERDGPassFlags)",
    "insertText": "OverridePassFlags(const TCHAR* PassName, ERDGPassFlags Flags)"
  },
  {
    "label": "GetEpiloguePassHandle()",
    "kind": "Method",
    "detail": "Function (} FRDGPassHandle)",
    "insertText": "GetEpiloguePassHandle()"
  },
  {
    "label": "GetRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (} FRHIRenderPassInfo)",
    "insertText": "GetRenderPassInfo(const FRDGPass* Pass)"
  },
  {
    "label": "AddPassInternal()",
    "kind": "Method",
    "detail": "Function (template<ParameterStructType,ExecuteLambdaType> FRDGPass*)",
    "insertText": "AddPassInternal(FRDGEventName&& Name, const FShaderParametersMetadata* ParametersMetadata, const ParameterStructType* ParameterStruct, ERDGPassFlags Flags, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "MarkResourcesAsProduced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkResourcesAsProduced(FRDGPass* Pass)"
  },
  {
    "label": "SetupEmptyPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass*)",
    "insertText": "SetupEmptyPass(FRDGPass* Pass)"
  },
  {
    "label": "SetupParameterPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass*)",
    "insertText": "SetupParameterPass(FRDGPass* Pass)"
  },
  {
    "label": "SetupPassInternals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPassInternals(FRDGPass* Pass)"
  },
  {
    "label": "SetupPassResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPassResources(FRDGPass* Pass)"
  },
  {
    "label": "SetupPassDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPassDependencies(FRDGPass* Pass)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "CompilePassOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompilePassOps(FRDGPass* Pass)"
  },
  {
    "label": "ExecuteSerialPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSerialPass(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "ExecutePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePass(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "ExecutePassPrologue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePassPrologue(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "ExecutePassEpilogue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePassEpilogue(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "PushPreScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPreScopes(FRHIComputeCommandList& RHICmdListPass, FRDGPass* FirstPass)"
  },
  {
    "label": "PushPassScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPassScopes(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "PopPassScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopPassScopes(FRHIComputeCommandList& RHICmdListPass, FRDGPass* Pass)"
  },
  {
    "label": "PopPreScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopPreScopes(FRHIComputeCommandList& RHICmdListPass, FRDGPass* LastPass)"
  },
  {
    "label": "FExtractedTexture()",
    "kind": "Method",
    "detail": "Function (FRDGPassRegistry Passes ; FRDGTextureRegistry Textures ; FRDGBufferRegistry Buffers ; FRDGViewRegistry Views ; FRDGUniformBufferRegistry UniformBuffers ; struct FExtractedTexture {)",
    "insertText": "FExtractedTexture()"
  },
  {
    "label": "FExtractedTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExtractedTexture(FRDGTexture* InTexture, TRefCountPtr<IPooledRenderTarget>* InPooledTexture) : Texture(InTexture) , PooledTexture(InPooledTexture)"
  },
  {
    "label": "FExtractedBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGTexture* Texture { } ; TRefCountPtr<IPooledRenderTarget>* PooledTexture { } ; } ; TArray<FExtractedTexture,FRDGArrayAllocator> ExtractedTextures ; struct FExtractedBuffer {)",
    "insertText": "FExtractedBuffer()"
  },
  {
    "label": "FExtractedBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExtractedBuffer(FRDGBuffer* InBuffer, TRefCountPtr<FRDGPooledBuffer>* InPooledBuffer) : Buffer(InBuffer) , PooledBuffer(InPooledBuffer)"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (} FRDGBuffer* Buffer { } ; TRefCountPtr<FRDGPooledBuffer>* PooledBuffer { } ; } ; TArray<FExtractedBuffer,FRDGArrayAllocator> ExtractedBuffers ; Experimental::TRobinHoodHashMap<FRHITexture*,FRDGTexture*,DefaultKeyFuncs<FRHITexture*>,FRDGArrayAllocator> ExternalTextures ; Experimental::TRobinHoodHashMap<FRHIBuffer*,FRDGBuffer*,DefaultKeyFuncs<FRHIBuffer*>,FRDGArrayAllocator> ExternalBuffers ; TArray<FRDGBuffer*,FRDGArrayAllocator> NumElementsCallbackBuffers ; IRHITransientResourceAllocator* TransientResourceAllocator = nullptr ; bool bSupportsTransientTextures = false ; bool bSupportsTransientBuffers = false ; bool)",
    "insertText": "IsTransient(FRDGTextureRef Texture)"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransient(FRDGBufferRef Buffer)"
  },
  {
    "label": "IsTransientInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransientInternal(FRDGViewableResource* Resource, bool bFastVRAM)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (struct FCollectResourceOp { enum class EOp : uint8 { Allocate,Deallocate } ; FCollectResourceOp)",
    "insertText": "Allocate(FRDGBufferHandle BufferHandle)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} FCollectResourceOp)",
    "insertText": "Allocate(FRDGTextureHandle TextureHandle)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (} FCollectResourceOp)",
    "insertText": "Deallocate(FRDGBufferHandle BufferHandle)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (} FCollectResourceOp)",
    "insertText": "Deallocate(FRDGTextureHandle TextureHandle)"
  },
  {
    "label": "FCollectResourceOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollectResourceOp()"
  },
  {
    "label": "FCollectResourceOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectResourceOp(uint32 InResourceIndex, ERDGViewableResourceType InResourceType, EOp InOp) : ResourceIndex(InResourceIndex) , ResourceType(static_cast<uint32>(InResourceType)) , Op(static_cast<uint32>(InOp))"
  },
  {
    "label": "GetOp()",
    "kind": "Method",
    "detail": "Function (} EOp)",
    "insertText": "GetOp()"
  },
  {
    "label": "GetResourceType()",
    "kind": "Method",
    "detail": "Function (} ERDGViewableResourceType)",
    "insertText": "GetResourceType()"
  },
  {
    "label": "GetTextureHandle()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureHandle)",
    "insertText": "GetTextureHandle()"
  },
  {
    "label": "GetBufferHandle()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferHandle)",
    "insertText": "GetBufferHandle()"
  },
  {
    "label": "CollectAllocations()",
    "kind": "Method",
    "detail": "Function (} uint32 ResourceIndex : 3 0 ; uint32 ResourceType : 1 ; uint32 Op : 1 ; } ; using FCollectResourceOpArray = TArray<FCollectResourceOp,FRDGArrayAllocator> ; struct FCollectResourceContext { FCollectResourceOpArray TransientResources ; FCollectResourceOpArray PooledTextures ; FCollectResourceOpArray PooledBuffers ; TArray<FRDGUniformBufferHandle,FRDGArrayAllocator> UniformBuffers ; TArray<FRDGViewHandle,FRDGArrayAllocator> Views ; FRDGUniformBufferBitArray UniformBufferMap ; FRDGViewBitArray ViewMap ; } ; Experimental::TRobinHoodHashMap<FRDGPooledTexture*,FRDGTexture*,DefaultKeyFuncs<FRDGPooledTexture*>,FConcurrentLinearArrayAllocator> PooledTextureOwnershipMap ; Experimental::TRobinHoodHashMap<FRDGPooledBuffer*,FRDGBuffer*,DefaultKeyFuncs<FRDGPooledBuffer*>,FConcurrentLinearArrayAllocator> PooledBufferOwnershipMap ; void)",
    "insertText": "CollectAllocations(FCollectResourceContext& Context, FRDGPass* Pass)"
  },
  {
    "label": "CollectAllocateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAllocateTexture(FCollectResourceContext& Context, ERHIPipeline PassPipeline, FRDGPassHandle PassHandle, FRDGTexture* Texture)"
  },
  {
    "label": "CollectAllocateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAllocateBuffer(FCollectResourceContext& Context, ERHIPipeline PassPipeline, FRDGPassHandle PassHandle, FRDGBuffer* Buffer)"
  },
  {
    "label": "CollectDeallocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectDeallocations(FCollectResourceContext& Context, FRDGPass* Pass)"
  },
  {
    "label": "CollectDeallocateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectDeallocateTexture(FCollectResourceContext& Context, ERHIPipeline PassPipeline, FRDGPassHandle PassHandle, FRDGTexture* Texture, uint32 ReferenceCount)"
  },
  {
    "label": "CollectDeallocateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectDeallocateBuffer(FCollectResourceContext& Context, ERHIPipeline PassPipeline, FRDGPassHandle PassHandle, FRDGBuffer* Buffer, uint32 ReferenceCount)"
  },
  {
    "label": "AllocateTransientResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateTransientResources(TConstArrayView<FCollectResourceOp> Ops)"
  },
  {
    "label": "AllocatePooledTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocatePooledTextures(FRHICommandListBase& RHICmdList, TConstArrayView<FCollectResourceOp> Ops)"
  },
  {
    "label": "AllocatePooledBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocatePooledBuffers(FRHICommandListBase& RHICmdList, TConstArrayView<FCollectResourceOp> Ops)"
  },
  {
    "label": "CreateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViews(FRHICommandListBase& RHICmdList, TConstArrayView<FRDGViewHandle> ViewsToCreate)"
  },
  {
    "label": "CreateUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUniformBuffers(TConstArrayView<FRDGUniformBufferHandle> UniformBuffersToCreate)"
  },
  {
    "label": "AllocatePooledRenderTargetRHI()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "AllocatePooledRenderTargetRHI(FRHICommandListBase& RHICmdList, FRDGTextureRef Texture)"
  },
  {
    "label": "AllocatePooledBufferRHI()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>)",
    "insertText": "AllocatePooledBufferRHI(FRHICommandListBase& RHICmdList, FRDGBufferRef Buffer)"
  },
  {
    "label": "SetExternalPooledRenderTargetRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalPooledRenderTargetRHI(FRDGTexture* Texture, IPooledRenderTarget* RenderTarget)"
  },
  {
    "label": "SetPooledTextureRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPooledTextureRHI(FRDGTexture* Texture, FRDGPooledTexture* PooledTexture)"
  },
  {
    "label": "SetTransientTextureRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransientTextureRHI(FRDGTexture* Texture, FRHITransientTexture* TransientTexture)"
  },
  {
    "label": "SetDiscardPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDiscardPass(FRDGTexture* Texture, FRHITransientTexture* TransientTexture)"
  },
  {
    "label": "SetExternalPooledBufferRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalPooledBufferRHI(FRDGBuffer* Buffer, const TRefCountPtr<FRDGPooledBuffer>& PooledBuffer)"
  },
  {
    "label": "SetPooledBufferRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPooledBufferRHI(FRDGBuffer* Buffer, FRDGPooledBuffer* PooledBuffer)"
  },
  {
    "label": "SetTransientBufferRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransientBufferRHI(FRDGBuffer* Buffer, FRHITransientBuffer* TransientBuffer)"
  },
  {
    "label": "InitViewRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitViewRHI(FRHICommandListBase& RHICmdList, FRDGView* View)"
  },
  {
    "label": "InitBufferViewRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBufferViewRHI(FRHICommandListBase& RHICmdList, FRDGBufferSRV* SRV)"
  },
  {
    "label": "InitBufferViewRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBufferViewRHI(FRHICommandListBase& RHICmdList, FRDGBufferUAV* UAV)"
  },
  {
    "label": "InitTextureViewRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureViewRHI(FRHICommandListBase& RHICmdList, FRDGTextureSRV* SRV)"
  },
  {
    "label": "InitTextureViewRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureViewRHI(FRHICommandListBase& RHICmdList, FRDGTextureUAV* UAV)"
  },
  {
    "label": "CompilePassBarriers()",
    "kind": "Method",
    "detail": "Function (TMap<FRDGBarrierBatchBeginId,FRDGBarrierBatchBegin*,FRDGSetAllocator> BarrierBatchMap ; TArray<FRHITrackedAccessInfo,FRDGArrayAllocator> EpilogueResourceAccesses ; TArray<TRefCountPtr<IPooledRenderTarget>,FRDGArrayAllocator> ActivePooledTextures ; TArray<TRefCountPtr<FRDGPooledBuffer>,FRDGArrayAllocator> ActivePooledBuffers ; FRDGTransitionCreateQueue TransitionCreateQueue ; FRDGTextureSubresourceState ScratchTextureState ; FRDGSubresourceState PrologueSubresourceState ; void)",
    "insertText": "CompilePassBarriers()"
  },
  {
    "label": "CollectPassBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPassBarriers()"
  },
  {
    "label": "CollectPassBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPassBarriers(FRDGPassHandle PassHandle)"
  },
  {
    "label": "CreatePassBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePassBarriers()"
  },
  {
    "label": "FinalizeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeResources()"
  },
  {
    "label": "AddFirstTextureTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFirstTextureTransition(FRDGTextureRef Texture)"
  },
  {
    "label": "AddFirstBufferTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFirstBufferTransition(FRDGBufferRef Buffer)"
  },
  {
    "label": "AddLastTextureTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLastTextureTransition(FRDGTextureRef Texture)"
  },
  {
    "label": "AddLastBufferTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLastBufferTransition(FRDGBufferRef Buffer)"
  },
  {
    "label": "AddTextureTransition()",
    "kind": "Method",
    "detail": "Function (template<FilterSubresourceLambdaType> void)",
    "insertText": "AddTextureTransition(FRDGTextureRef Texture, FRDGTextureSubresourceState& StateBefore, FRDGTextureSubresourceState& StateAfter, FilterSubresourceLambdaType&& FilterSubresourceLambda)"
  },
  {
    "label": "AddTextureTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextureTransition(FRDGTextureRef Texture, FRDGTextureSubresourceState& StateBefore, FRDGTextureSubresourceState& StateAfter)"
  },
  {
    "label": "AddTextureTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextureTransition(Texture, StateBefore, StateAfter, [](FRDGSubresourceState*, int32) { return true; })"
  },
  {
    "label": "AddBufferTransition()",
    "kind": "Method",
    "detail": "Function (} template<FilterSubresourceLambdaType> void)",
    "insertText": "AddBufferTransition(FRDGBufferRef Buffer, FRDGSubresourceState*& StateBefore, FRDGSubresourceState* StateAfter, FilterSubresourceLambdaType&& FilterSubresourceLambda)"
  },
  {
    "label": "AddBufferTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBufferTransition(FRDGBufferRef Buffer, FRDGSubresourceState*& StateBefore, FRDGSubresourceState* StateAfter)"
  },
  {
    "label": "AddBufferTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBufferTransition(Buffer, StateBefore, StateAfter, [](FRDGSubresourceState*) { return true; })"
  },
  {
    "label": "AddTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTransition(FRDGViewableResource* Resource, FRDGSubresourceState StateBefore, FRDGSubresourceState StateAfter, FRDGTransitionInfo TransitionInfo)"
  },
  {
    "label": "AddAliasingTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAliasingTransition(FRDGPassHandle BeginPassHandle, FRDGPassHandle EndPassHandle, FRDGViewableResource* Resource, const FRHITransientAliasingInfo& Info)"
  },
  {
    "label": "GetEpilogueBarrierPassHandle()",
    "kind": "Method",
    "detail": "Function (FRDGPassHandle)",
    "insertText": "GetEpilogueBarrierPassHandle(FRDGPassHandle Handle)"
  },
  {
    "label": "GetPrologueBarrierPass()",
    "kind": "Method",
    "detail": "Function (} FRDGPass*)",
    "insertText": "GetPrologueBarrierPass(FRDGPassHandle Handle)"
  },
  {
    "label": "AddToPrologueBarriersToEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToPrologueBarriersToEnd(FRDGPassHandle Handle, FRDGBarrierBatchBegin& BarriersToBegin)"
  },
  {
    "label": "GetPrologueBarrierPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass* Pass =)",
    "insertText": "GetPrologueBarrierPass(Handle)"
  },
  {
    "label": "GetPrologueBarriersToEnd()",
    "kind": "Method",
    "detail": "Function (Pass ->)",
    "insertText": "GetPrologueBarriersToEnd(Allocators.Transition).AddDependency(&BarriersToBegin)"
  },
  {
    "label": "AddToEpilogueBarriersToEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToEpilogueBarriersToEnd(FRDGPassHandle Handle, FRDGBarrierBatchBegin& BarriersToBegin)"
  },
  {
    "label": "GetEpilogueBarrierPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass* Pass =)",
    "insertText": "GetEpilogueBarrierPass(Handle)"
  },
  {
    "label": "GetEpilogueBarriersToEnd()",
    "kind": "Method",
    "detail": "Function (Pass ->)",
    "insertText": "GetEpilogueBarriersToEnd(Allocators.Transition).AddDependency(&BarriersToBegin)"
  },
  {
    "label": "AddToPrologueBarriers()",
    "kind": "Method",
    "detail": "Function (} template<FunctionType> void)",
    "insertText": "AddToPrologueBarriers(FRDGPassHandle PassHandle, FunctionType Function)"
  },
  {
    "label": "GetPrologueBarrierPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass* Pass =)",
    "insertText": "GetPrologueBarrierPass(PassHandle)"
  },
  {
    "label": "GetPrologueBarriersToBegin()",
    "kind": "Method",
    "detail": "Function (FRDGBarrierBatchBegin& BarriersToBegin = Pass ->)",
    "insertText": "GetPrologueBarriersToBegin(Allocators.Transition, TransitionCreateQueue)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(BarriersToBegin)"
  },
  {
    "label": "AddToEpilogueBarriers()",
    "kind": "Method",
    "detail": "Function (} template<FunctionType> void)",
    "insertText": "AddToEpilogueBarriers(FRDGPassHandle PassHandle, FunctionType Function)"
  },
  {
    "label": "GetEpilogueBarrierPass()",
    "kind": "Method",
    "detail": "Function (FRDGPass* Pass =)",
    "insertText": "GetEpilogueBarrierPass(PassHandle)"
  },
  {
    "label": "GetEpilogueBarriersToBeginFor()",
    "kind": "Method",
    "detail": "Function (FRDGBarrierBatchBegin& BarriersToBegin = Pass ->)",
    "insertText": "GetEpilogueBarriersToBeginFor(Allocators.Transition, TransitionCreateQueue, Pass->GetPipeline())"
  },
  {
    "label": "GetAllocateFences()",
    "kind": "Method",
    "detail": "Function (} FRHITransientAllocationFences)",
    "insertText": "GetAllocateFences(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetDeallocateFences()",
    "kind": "Method",
    "detail": "Function (FRHITransientAllocationFences)",
    "insertText": "GetDeallocateFences(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetPassPipeline()",
    "kind": "Method",
    "detail": "Function (ERHIPipeline)",
    "insertText": "GetPassPipeline(FRDGPassHandle PassHandle)"
  },
  {
    "label": "AllocSubresource()",
    "kind": "Method",
    "detail": "Function (FRDGSubresourceState*)",
    "insertText": "AllocSubresource()"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (FAsyncSetupOp)",
    "insertText": "Op(EType::SetupPassResources)"
  },
  {
    "label": "CullRootBuffer()",
    "kind": "Method",
    "detail": "Function (Op . Pass = Pass ; return Op ; } FAsyncSetupOp)",
    "insertText": "CullRootBuffer(FRDGBuffer* Buffer)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (FAsyncSetupOp)",
    "insertText": "Op(EType::CullRootBuffer)"
  },
  {
    "label": "CullRootTexture()",
    "kind": "Method",
    "detail": "Function (Op . Buffer = Buffer ; return Op ; } FAsyncSetupOp)",
    "insertText": "CullRootTexture(FRDGTexture* Texture)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (FAsyncSetupOp)",
    "insertText": "Op(EType::CullRootTexture)"
  },
  {
    "label": "ReservedBufferCommit()",
    "kind": "Method",
    "detail": "Function (Op . Texture = Texture ; return Op ; } FAsyncSetupOp)",
    "insertText": "ReservedBufferCommit(FRDGBuffer* Buffer, uint64 CommitSizeInBytes)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (FAsyncSetupOp)",
    "insertText": "Op(EType::ReservedBufferCommit, CommitSizeInBytes)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Op . Buffer = Buffer ; return Op ; } EType)",
    "insertText": "GetType()"
  },
  {
    "label": "FAsyncSetupOp()",
    "kind": "Method",
    "detail": "Function (} uint64 Type : 8 ; uint64 Payload : 4 8 ;)",
    "insertText": "FAsyncSetupOp(EType InType, uint64 InPayload = 0) : Type((uint8)InType) , Payload(InPayload)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} union { FRDGPass* Pass ; FRDGBuffer* Buffer ; FRDGTexture* Texture ; } ; } ; struct FAsyncSetupQueue { void)",
    "insertText": "Push(FAsyncSetupOp Op)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TScopeLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Ops .)",
    "insertText": "Emplace(Op)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} UE::FMutex Mutex ; TArray<FAsyncSetupOp,FRDGArrayAllocator> Ops ; UE::Tasks::FPipe Pipe {)",
    "insertText": "TEXT(\"FRDGBuilder::AsyncSetupQueue\")"
  },
  {
    "label": "LaunchAsyncSetupQueueTask()",
    "kind": "Method",
    "detail": "Function (} AsyncSetupQueue ; void)",
    "insertText": "LaunchAsyncSetupQueueTask()"
  },
  {
    "label": "ProcessAsyncSetupQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncSetupQueue()"
  },
  {
    "label": "AcquireReservedCommitHandle()",
    "kind": "Method",
    "detail": "Function (FRDGBufferReservedCommitHandle)",
    "insertText": "AcquireReservedCommitHandle(FRDGBuffer* Buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRDGBufferReservedCommitHandle Handle ;)",
    "insertText": "if(Buffer->PendingCommitSize > 0)"
  },
  {
    "label": "FRDGBufferReservedCommitHandle()",
    "kind": "Method",
    "detail": "Function (Handle =)",
    "insertText": "FRDGBufferReservedCommitHandle(ReservedBufferCommitSizes.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ReservedBufferCommitSizes .)",
    "insertText": "Emplace(Buffer->PendingCommitSize)"
  },
  {
    "label": "GetReservedCommitSize()",
    "kind": "Method",
    "detail": "Function (Buffer -> PendingCommitSize = 0 ; } return Handle ; } uint64)",
    "insertText": "GetReservedCommitSize(FRDGBufferReservedCommitHandle Handle)"
  },
  {
    "label": "AddCullingDependency()",
    "kind": "Method",
    "detail": "Function (} TArray<uint64,FRDGArrayAllocator> ReservedBufferCommitSizes ; TArray<FRDGPass*,FRDGArrayAllocator> CullPassStack ; bool)",
    "insertText": "AddCullingDependency(FRDGProducerStatesByPipeline& LastProducers, const FRDGProducerState& NextState, ERHIPipeline NextPipeline)"
  },
  {
    "label": "AddCullRootBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCullRootBuffer(FRDGBuffer* Buffer)"
  },
  {
    "label": "AddCullRootTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCullRootTexture(FRDGTexture* Texture)"
  },
  {
    "label": "AddLastProducersToCullStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLastProducersToCullStack(const FRDGProducerStatesByPipeline& LastProducers)"
  },
  {
    "label": "FlushCullStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCullStack()"
  },
  {
    "label": "FRDGArrayAllocator()",
    "kind": "Method",
    "detail": "Function (struct { TStaticArray<TArray<UE::Tasks::FTask,)",
    "insertText": "FRDGArrayAllocator(int32)"
  },
  {
    "label": "WaitForParallelSetupTasks()",
    "kind": "Method",
    "detail": "Function (bool bEnabled = false ; } ParallelSetup ; void)",
    "insertText": "WaitForParallelSetupTasks(ERDGSetupTaskWaitPoint WaitPoint)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool bParallelCompileEnabled = false ; struct FParallelExecute { TArray<FParallelPassSet,FRDGArrayAllocator> ParallelPassSets ; TOptional<UE::Tasks::FTaskEvent> TasksAwait ; TOptional<UE::Tasks::FTaskEvent> TasksAsync ; TOptional<UE::Tasks::FTaskEvent> DispatchTaskEventAwait ; TOptional<UE::Tasks::FTaskEvent> DispatchTaskEventAsync ; ERDGPassTaskMode TaskMode = ERDGPassTaskMode::; bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetupDispatchPassExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDispatchPassExecute()"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (struct FUploadedBuffer {)",
    "insertText": "FUploadedBuffer()"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUploadedBuffer(FRDGBuffer* InBuffer, const void* InData, uint64 InDataSize) : Buffer(InBuffer) , Data(InData) , DataSize(InDataSize)"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUploadedBuffer(FRDGBuffer* InBuffer, FRDGBufferInitialDataFillCallback&& InDataFillCallback) : Buffer(InBuffer) , DataFillCallback(MoveTemp(InDataFillCallback))"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUploadedBuffer(FRDGBuffer* InBuffer, const void* InData, uint64 InDataSize, FRDGBufferInitialDataFreeCallback&& InDataFreeCallback) : bUseFreeCallbacks(true) , Buffer(InBuffer) , Data(InData) , DataSize(InDataSize) , DataFreeCallback(MoveTemp(InDataFreeCallback))"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUploadedBuffer(FRDGBuffer* InBuffer, FRDGBufferInitialDataCallback&& InDataCallback, FRDGBufferInitialDataSizeCallback&& InDataSizeCallback) : bUseDataCallbacks(true) , Buffer(InBuffer) , DataCallback(MoveTemp(InDataCallback)) , DataSizeCallback(MoveTemp(InDataSizeCallback))"
  },
  {
    "label": "FUploadedBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUploadedBuffer(FRDGBuffer* InBuffer, FRDGBufferInitialDataCallback&& InDataCallback, FRDGBufferInitialDataSizeCallback&& InDataSizeCallback, FRDGBufferInitialDataFreeCallback&& InDataFreeCallback) : bUseDataCallbacks(true) , bUseFreeCallbacks(true) , Buffer(InBuffer) , DataCallback(MoveTemp(InDataCallback)) , DataSizeCallback(MoveTemp(InDataSizeCallback)) , DataFreeCallback(MoveTemp(InDataFreeCallback))"
  },
  {
    "label": "SubmitBufferUploads()",
    "kind": "Method",
    "detail": "Function (} bool bUseDataCallbacks = false ; bool bUseFreeCallbacks = false ; FRDGBuffer* Buffer { } ; const void* Data { } ; uint64 DataSize { } ; FRDGBufferInitialDataCallback DataCallback ; FRDGBufferInitialDataSizeCallback DataSizeCallback ; FRDGBufferInitialDataFreeCallback DataFreeCallback ; FRDGBufferInitialDataFillCallback DataFillCallback ; } ; TArray<FUploadedBuffer,FRDGArrayAllocator> UploadedBuffers ; void)",
    "insertText": "SubmitBufferUploads(FRHICommandListBase& InRHICmdList, UE::Tasks::FTaskEvent* AllocateUploadBuffersTask = nullptr)"
  },
  {
    "label": "FlushAccessModeQueue()",
    "kind": "Method",
    "detail": "Function (TArray<FRDGViewableResource*,FRDGArrayAllocator> AccessModeQueue ; TSet<FRDGViewableResource*,DefaultKeyFuncs<FRDGViewableResource*>,FRDGSetAllocator> ExternalAccessResources ; void)",
    "insertText": "FlushAccessModeQueue()"
  },
  {
    "label": "BeginFlushResourcesRHI()",
    "kind": "Method",
    "detail": "Function (FGraphEventArray WaitOutstandingTasks ; bool bFlushResourcesRHI = false ; FRHICommandListScopedExtendResourceLifetime ExtendResourceLifetimeScope ; void)",
    "insertText": "BeginFlushResourcesRHI()"
  },
  {
    "label": "EndFlushResourcesRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFlushResourcesRHI()"
  },
  {
    "label": "IsDumpAllowed()",
    "kind": "Method",
    "detail": "Function (struct FAuxiliaryPass { uint8 Clobber = 0 ; uint8 Visualize = 0 ; uint8 Dump = 0 ; uint8 FlushAccessModeQueue = 0 ; bool)",
    "insertText": "IsDumpAllowed()"
  },
  {
    "label": "DumpNewGraphBuilder()",
    "kind": "Method",
    "detail": "Function (# if RDG_DUMP_RESOURCES void)",
    "insertText": "DumpNewGraphBuilder()"
  },
  {
    "label": "DumpResourcePassOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpResourcePassOutputs(const FRDGPass* Pass)"
  },
  {
    "label": "VisualizePassOutputs()",
    "kind": "Method",
    "detail": "Function (# endif # if RDG_ENABLE_DEBUG void)",
    "insertText": "VisualizePassOutputs(const FRDGPass* Pass)"
  },
  {
    "label": "ClobberPassOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClobberPassOutputs(const FRDGPass* Pass)"
  },
  {
    "label": "ForceCopyCrossGPU()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_MGPU bool bForceCopyCrossGPU = false ; void)",
    "insertText": "ForceCopyCrossGPU()"
  },
  {
    "label": "IF_RDG_ENABLE_TRACE()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "IF_RDG_ENABLE_TRACE(FRDGTrace Trace)"
  },
  {
    "label": "FRDGAsyncComputeBudgetScopeGuard()",
    "kind": "Method",
    "detail": "Function (# if RDG_ENABLE_DEBUG FRDGUserValidation UserValidation ; FRDGBarrierValidation BarrierValidation ; # endif FRDGTrace ; FRDGAsyncComputeBudgetScopeGuard ; FRDGScopedCsvStatExclusive ; FRDGScopedCsvStatExclusiveConditional ; FRDGDispatchPassBuilder ; } ; class FRDGAsyncComputeBudgetScopeGuard final { public :)",
    "insertText": "FRDGAsyncComputeBudgetScopeGuard(FRDGBuilder& InGraphBuilder, EAsyncComputeBudget InAsyncComputeBudget) : GraphBuilder(InGraphBuilder)"
  },
  {
    "label": "FRDGAsyncComputeBudgetScopeGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRDGAsyncComputeBudgetScopeGuard()"
  },
  {
    "label": "RDG_ASYNC_COMPUTE_BUDGET_SCOPE()",
    "kind": "Method",
    "detail": "Function (} private : FRDGBuilder& GraphBuilder ; } ; # define)",
    "insertText": "RDG_ASYNC_COMPUTE_BUDGET_SCOPE(GraphBuilder, AsyncComputeBudget) \\ FRDGAsyncComputeBudgetScopeGuard PREPROCESSOR_JOIN(FRDGAsyncComputeBudgetScope, __LINE__)(GraphBuilder, AsyncComputeBudget) #if WITH_MGPU #define RDG_GPU_MASK_SCOPE(GraphBuilder, GPUMask) SCOPED_GPU_MASK(GraphBuilder.RHICmdList, GPUMask) #else #define RDG_GPU_MASK_SCOPE(GraphBuilder, GPUMask)"
  }
]