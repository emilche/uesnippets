[
  {
    "label": "TDynamicVertexSkinWeightsAttributeChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexSkinWeightsAttributeChange"
  },
  {
    "label": "FChangeVertexBoneWeights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeVertexBoneWeights"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexSkinWeightsAttribute"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttributeChange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicAttribute . h \" # include \" BoneWeights . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / MemStack . h \" namespace UE { namespace Geometry { template<ParentType> class TDynamicVertexSkinWeightsAttributeChange final : public TDynamicAttributeChangeBase<ParentType> { struct FChangeVertexBoneWeights { UE::AnimationCore::FBoneWeights Weights ; int VertexID ; } ; TArray<FChangeVertexBoneWeights> OldVertexBoneWeights,NewVertexBoneWeights ; public :)",
    "insertText": "TDynamicVertexSkinWeightsAttributeChange()"
  },
  {
    "label": "SaveInitialVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialVertex(const TDynamicAttributeBase<ParentType>* Attribute, int VertexID)"
  },
  {
    "label": "StoreAllFinalVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreAllFinalVertices(const TDynamicAttributeBase<ParentType>* Attribute, const TArray<int>& VertexIDs)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(TDynamicAttributeBase<ParentType>* Attribute, bool bRevert)"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (} ; template<ParentType> class TDynamicVertexSkinWeightsAttribute final : public TDynamicAttributeBase<ParentType> { public : using FBoneWeights = UE::AnimationCore::FBoneWeights ; using FBoneWeight = UE::AnimationCore::FBoneWeight ; protected : class FDynamicMeshAttributeSet ; ParentType* Parent = nullptr ; TDynamicVector<FBoneWeights> VertexBoneWeights ; public :)",
    "insertText": "TDynamicVertexSkinWeightsAttribute()"
  },
  {
    "label": "TDynamicVertexSkinWeightsAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDynamicVertexSkinWeightsAttribute(ParentType* ParentIn, bool bAutoInit = true) : Parent(ParentIn)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (const ParentType*)",
    "insertText": "GetParent()"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (Parent = NewParent ; } public : TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeNew(ParentType* ParentIn)"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (TDynamicVertexSkinWeightsAttribute<ParentType>* Matching = new TDynamicVertexSkinWeightsAttribute<)",
    "insertText": "ParentType(ParentIn)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "Copy(*this)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase<ParentType)",
    "insertText": "CopyParentClassData(Copy)"
  },
  {
    "label": "MakeCompactCopy()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights = Copy . VertexBoneWeights ; } TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeCompactCopy(const FCompactMaps& CompactMaps, ParentType* ParentTypeIn)"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (TDynamicVertexSkinWeightsAttribute<ParentType>* ToFill = new TDynamicVertexSkinWeightsAttribute<)",
    "insertText": "ParentType(ParentTypeIn)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "CompactCopy(CompactMaps, *this)"
  },
  {
    "label": "GetVertexMapping()",
    "kind": "Method",
    "detail": "Function (const int32 ToVID = CompactMaps .)",
    "insertText": "GetVertexMapping(VID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(ensure(ToVID <= VID))"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(VID, ToVID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } VertexBoneWeights .)",
    "insertText": "Resize(Parent->MaxVertexID())"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompactCopy(const FCompactMaps& CompactMaps, const TDynamicVertexSkinWeightsAttribute<ParentType>& ToCopy)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase<ParentType)",
    "insertText": "CopyParentClassData(ToCopy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FBoneWeights Data ;)",
    "insertText": "for(int32 VID = 0, NumVID = CompactMaps.NumVertexMappings(); VID < NumVID; VID++)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (continue ; } ToCopy .)",
    "insertText": "GetValue(VID, Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(ToVID, Data)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Initialize(const FBoneWeights InitialValue = {})"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights .)",
    "insertText": "Fill(InitialValue)"
  },
  {
    "label": "SetNewValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewValue(int32 InNewVertexID, const FBoneWeights InBoneWeights)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights .)",
    "insertText": "InsertAt(InBoneWeights, InNewVertexID)"
  },
  {
    "label": "ReindexBoneIndicesToSkeleton()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReindexBoneIndicesToSkeleton(const TArray<FName>& FromRefSkeleton, const TArray<FName>& ToRefSkeleton)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FName& BoneName = ToRefSkeleton [ BoneID ] ;)",
    "insertText": "if(NameToIndex.Contains(BoneName))"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} TDynamicVector<FBoneWeights> NewVertexBoneWeights ; NewVertexBoneWeights .)",
    "insertText": "Resize(VertexBoneWeights.Num())"
  },
  {
    "label": "SetNormalizeType()",
    "kind": "Method",
    "detail": "Function (UE::AnimationCore::FBoneWeightsSettings BoneSettings ; BoneSettings .)",
    "insertText": "SetNormalizeType(UE::AnimationCore::EBoneWeightNormalizeType::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBoneWeights BoneWeights = VertexBoneWeights [ VertexID ] ;)",
    "insertText": "if(BoneWeights.Num() == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } FBoneWeights NewWeights ;)",
    "insertText": "for(int32 Idx = 0; Idx < BoneWeights.Num(); ++Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FBoneWeight& BoneWeight = BoneWeights [ Idx ] ;)",
    "insertText": "if(BoneWeight.GetBoneIndex() >= FromRefSkeleton.Num())"
  },
  {
    "label": "GetRawWeight()",
    "kind": "Method",
    "detail": "Function (const uint16 FromWeight = BoneWeight .)",
    "insertText": "GetRawWeight()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* ToIdx = NameToIndex .)",
    "insertText": "Find(FromName)"
  },
  {
    "label": "SetBoneWeight()",
    "kind": "Method",
    "detail": "Function (NewWeights .)",
    "insertText": "SetBoneWeight(FBoneWeight(static_cast<FBoneIndexType>(*ToIdx), FromWeight), BoneSettings)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NewVertexBoneWeights [ VertexID ] = NewWeights ; } else { return false ; } } } VertexBoneWeights =)",
    "insertText": "MoveTemp(NewVertexBoneWeights)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UniqueBoneIndices .)",
    "insertText": "Add(BoneWeight.GetBoneIndex())"
  },
  {
    "label": "CopyThroughMapping()",
    "kind": "Method",
    "detail": "Function (} } return UniqueBoneIndices ; } bool)",
    "insertText": "CopyThroughMapping(const TDynamicAttributeBase<ParentType>* Source, const FMeshIndexMappings& Mapping)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32 BufferSize =)",
    "insertText": "sizeof(FBoneWeights)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int8 BufferData [ BufferSize ] ;)",
    "insertText": "for(const TPair<int32, int32>& MapVID : Mapping.GetVertexMap().GetForwardMap())"
  },
  {
    "label": "CopyOut()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CopyOut(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Data = VertexBoneWeights [ VertexID ] ; } template<AsType> void)",
    "insertText": "GetValue(int VertexID, AsType& Data)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Data = VertexBoneWeights [ VertexID ] ; } template<BoneIndexType,BoneFloatWeightType> void)",
    "insertText": "GetValue(int VertexID, TArray<BoneIndexType>& OutBones, TArray<BoneFloatWeightType>& OutWeights)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FBoneWeights BoneWeights ;)",
    "insertText": "GetValue(VertexID, BoneWeights)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumEntries = BoneWeights .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutBones .)",
    "insertText": "SetNum(NumEntries, EAllowShrinking::No)"
  },
  {
    "label": "BoneIndexType()",
    "kind": "Method",
    "detail": "Function (OutBones [ BoneIdx ] = static_cast<)",
    "insertText": "BoneIndexType(BoneWeights[BoneIdx].GetBoneIndex())"
  },
  {
    "label": "BoneFloatWeightType()",
    "kind": "Method",
    "detail": "Function (OutWeights [ BoneIdx ] = static_cast<)",
    "insertText": "BoneFloatWeightType(BoneWeights[BoneIdx].GetWeight())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetValue(int VertexID, const FBoneWeights& Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ VertexID ] = Data ; } template<ContainerAdapter> void)",
    "insertText": "SetValue(int VertexID, const UE::AnimationCore::TBoneWeights<ContainerAdapter>& Data)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ VertexID ] =)",
    "insertText": "Create(Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} template<BoneIndexType,BoneFloatWeightType> void)",
    "insertText": "SetValue(int VertexID, const TArray<BoneIndexType>& InBones, const TArray<BoneFloatWeightType>& InWeights, int32 InNumEntries)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<FBoneIndexType,TMemStackAllocator<>> Bones ; TArray<float,TMemStackAllocator<>> Weights ; Bones .)",
    "insertText": "SetNumUninitialized(InNumEntries)"
  },
  {
    "label": "FBoneIndexType()",
    "kind": "Method",
    "detail": "Function (Bones [ Idx ] = static_cast<)",
    "insertText": "FBoneIndexType(InBones[Idx])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Weights [ Idx ] = static_cast<)",
    "insertText": "float(InWeights[Idx])"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} VertexBoneWeights [ VertexID ] =)",
    "insertText": "Create(Bones.GetData(), Weights.GetData(), InNumEntries)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyValue(int FromVertexID, int ToVertexID)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights .)",
    "insertText": "InsertAt(VertexBoneWeights[FromVertexID], ToVertexID)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "OnSplitEdge(const FDynamicMesh3::FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAttribStoreIfNeeded(SplitInfo.NewVertex)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromLerp(SplitInfo.NewVertex, SplitInfo.OriginalVertices.A, SplitInfo.OriginalVertices.B, SplitInfo.SplitT)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFlipEdge(const FDynamicMesh3::FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCollapseEdge(const FDynamicMesh3::FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromLerp(CollapseInfo.KeptVertex, CollapseInfo.KeptVertex, CollapseInfo.RemovedVertex, CollapseInfo.CollapseT)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeAttribStoreIfNeeded(int VertexID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights .)",
    "insertText": "Resize(NeededSize, FBoneWeights{})"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnNewVertex(int VertexID, bool bInserted)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAttribStoreIfNeeded(VertexID)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPokeTriangle(const FDynamicMesh3::FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = PokeInfo . TriVertices ;)",
    "insertText": "ResizeAttribStoreIfNeeded(PokeInfo.NewVertex)"
  },
  {
    "label": "SetBoneWeightsFromBary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromBary(PokeInfo.NewVertex, Tri.A, Tri.B, Tri.C, PokeInfo.BaryCoords)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeEdges(const FDynamicMesh3::FMergeEdgesInfo& MergeInfo)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromLerp(MergeInfo.KeptVerts.A, MergeInfo.KeptVerts.A, MergeInfo.RemovedVerts.A, MergeInfo.InterpolationT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MergeInfo.RemovedVerts.B != FDynamicMesh3::InvalidID)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromLerp(MergeInfo.KeptVerts.B, MergeInfo.KeptVerts.B, MergeInfo.RemovedVerts.B, MergeInfo.InterpolationT)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnMergeVertices(const FDynamicMesh3::FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneWeightsFromLerp(MergeInfo.KeptVertex, MergeInfo.KeptVertex, MergeInfo.RemovedVertex, MergeInfo.InterpolationT)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSplitVertex(const FDynamicMesh3::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(SplitInfo.OriginalVertex, SplitInfo.NewVertex)"
  },
  {
    "label": "NewBlankChange()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<TDynamicAttributeChangeBase<ParentType>>)",
    "insertText": "NewBlankChange()"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckValidity(bool bAllowNonmanifold, EValidityCheckFailMode FailMode)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (default : return false ; } } return true ; } void)",
    "insertText": "Serialize(FArchive& Ar, const FCompactMaps* CompactMaps, bool bUseCompression)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5MainStreamObjectVersion::GUID)"
  },
  {
    "label": "VertexMapIsSet()",
    "kind": "Method",
    "detail": "Function (Ar<<bUseCompression ; const bool bUseVertexCompactMap = CompactMaps&& CompactMaps ->)",
    "insertText": "VertexMapIsSet()"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights . Serialize<false,)",
    "insertText": "false(Ar)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} else { TDynamicVector<FBoneWeights> VertexBoneWeightsCompact ; VertexBoneWeightsCompact .)",
    "insertText": "Resize(Parent->VertexCount())"
  },
  {
    "label": "GetVertexMapping()",
    "kind": "Method",
    "detail": "Function (const int32 VidCompact = CompactMaps ->)",
    "insertText": "GetVertexMapping(Vid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { TArray<int32> Buffer ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (int32 BufferSize ; Ar<<BufferSize ; Buffer .)",
    "insertText": "SetNumUninitialized(BufferSize)"
  },
  {
    "label": "SerializeCompressedNew()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeCompressedNew(Buffer.GetData(), Buffer.Num() * sizeof(int32), NAME_Oodle, NAME_Oodle, COMPRESS_NoFlags, false, nullptr)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (int32* BufferPtr = Buffer .)",
    "insertText": "GetData()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights .)",
    "insertText": "Resize(*BufferPtr++)"
  },
  {
    "label": "SetNormalizeType()",
    "kind": "Method",
    "detail": "Function (AnimationCore::FBoneWeightsSettings BoneWeightsSettings ; BoneWeightsSettings .)",
    "insertText": "SetNormalizeType(AnimationCore::EBoneWeightNormalizeType::None)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 Num =* BufferPtr + + ;)",
    "insertText": "for(int32 i = 0; i < Num; ++i)"
  },
  {
    "label": "SetBoneWeight()",
    "kind": "Method",
    "detail": "Function (BoneWeights .)",
    "insertText": "SetBoneWeight(reinterpret_cast<AnimationCore::FBoneWeight&>(*BufferPtr++), BoneWeightsSettings)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "checkSlow(BufferPtr == Buffer.GetData() + Buffer.Num())"
  },
  {
    "label": "CountBoneWeights()",
    "kind": "Method",
    "detail": "Function (} else { auto)",
    "insertText": "CountBoneWeights(const FBoneWeights& BoneWeights, SIZE_T& NumBoneWeights)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; SIZE_T NumBoneWeights = 0 ;)",
    "insertText": "if(!bUseVertexCompactMap)"
  },
  {
    "label": "CountBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBoneWeights(BoneWeights, NumBoneWeights)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 Vid = 0, Num = VertexBoneWeights.Num(); Vid < Num; ++Vid)"
  },
  {
    "label": "CountBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBoneWeights(VertexBoneWeights[Vid], NumBoneWeights)"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (} } } const uint32 NumVertexBoneWeightArrays = bUseVertexCompactMap ? Parent ->)",
    "insertText": "VertexCount() : VertexBoneWeights.Num()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 BufferSize = 1 + NumVertexBoneWeightArrays + IntCastChecked<)",
    "insertText": "uint32(NumBoneWeights)"
  },
  {
    "label": "WriteBoneWeights()",
    "kind": "Method",
    "detail": "Function (Ar<<BufferSize ; auto)",
    "insertText": "WriteBoneWeights(const FBoneWeights& BoneWeights, int32*& BufferPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* BufferPtr + + = Num ;)",
    "insertText": "if(Num > 0)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(BufferPtr, &BoneWeights[0], Num * sizeof(int32))"
  },
  {
    "label": "WriteBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBoneWeights(BoneWeights, BufferPtr)"
  },
  {
    "label": "WriteBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBoneWeights(VertexBoneWeights[Vid], BufferPtr)"
  },
  {
    "label": "SetBoneWeightsFromLerp()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "SetBoneWeightsFromLerp(int SetAttribute, int AttributeA, int AttributeB, double Alpha)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Alpha =)",
    "insertText": "Clamp(Alpha, 0.0, 1.0)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ SetAttribute ] =)",
    "insertText": "Blend(VertexBoneWeights[AttributeA], VertexBoneWeights[AttributeB], (float)Alpha)"
  },
  {
    "label": "SetBoneWeightsFromBary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBoneWeightsFromBary(int SetAttribute, int AttributeA, int AttributeB, int AttributeC, const FVector3d& BaryCoords)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float BaryX = static_cast<)",
    "insertText": "float(BaryCoords.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float BaryY = static_cast<)",
    "insertText": "float(BaryCoords.Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float BaryZ = static_cast<)",
    "insertText": "float(BaryCoords.Z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ SetAttribute ] = VertexBoneWeights [ AttributeA ] ; } } else)",
    "insertText": "if(FMath::IsNearlyEqual(BaryY, 1.0f))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ SetAttribute ] = VertexBoneWeights [ AttributeB ] ; } } else)",
    "insertText": "if(FMath::IsNearlyEqual(BaryZ, 1.0f))"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (VertexBoneWeights [ SetAttribute ] = VertexBoneWeights [ AttributeC ] ; } } else { VertexBoneWeights [ SetAttribute ] =)",
    "insertText": "Blend(VertexBoneWeights[AttributeA], VertexBoneWeights[AttributeB], VertexBoneWeights[AttributeC], BaryX, BaryY, BaryZ)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FChangeVertexBoneWeights& Change = OldVertexBoneWeights .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (Change . VertexID = VertexID ; const TDynamicVertexSkinWeightsAttribute<ParentType>* AttribCast = static_cast<const TDynamicVertexSkinWeightsAttribute<)",
    "insertText": "ParentType(Attribute)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "GetValue(VertexID, Change.Weights)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (NewVertexBoneWeights .)",
    "insertText": "Reserve(NewVertexBoneWeights.Num() + VertexIDs.Num())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "SetValue(Change.VertexID, Change.Weights)"
  }
]