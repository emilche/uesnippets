[
  {
    "label": "MinMax",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MinMax"
  },
  {
    "label": "Extrema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Extrema"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stats"
  },
  {
    "label": "Histogram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Histogram"
  },
  {
    "label": "MinMax()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_STATS_HAS_BEEN_INCLUDED # define OPENVDB_MATH_STATS_HAS_BEEN_INCLUDED # include<iosfwd> # include<openvdb / version . h> # include<openvdb / Exceptions . h> # include<iostream> # include<iomanip> # include<sstream> # include<vector> # include<functional> # include \" Math . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { template<ValueType,Less = std::less<ValueType>> class MinMax { using Limits = std::numeric_limits<ValueType> ; public :)",
    "insertText": "MinMax() : mMin(Limits::max()), mMax(Limits::lowest())"
  },
  {
    "label": "MinMax()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MinMax(const ValueType &min, const ValueType &max) : mMin(min), mMax(max)"
  },
  {
    "label": "MinMax()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MinMax(const MinMax &other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(const ValueType &val, const Less &less = Less())"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} const ValueType&)",
    "insertText": "min()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(const std::string &name= \"\", std::ostream &strm=std::cout, int precision=3)"
  },
  {
    "label": "setprecision()",
    "kind": "Method",
    "detail": "Function (std::ostringstream os ; os<<)",
    "insertText": "setprecision(precision) << std::setiosflags(std::ios::fixed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (os<<\" MinMax \" ;)",
    "insertText": "if(!name.empty())"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (os<<\" Min = \"<<mMin<<\",Max = \"<<mMax<<std::endl ; strm<<os .)",
    "insertText": "str()"
  },
  {
    "label": "Extrema()",
    "kind": "Method",
    "detail": "Function (} protected : ValueType mMin,mMax ; } ; class Extrema { public :)",
    "insertText": "Extrema() : mSize(0) , mMin(std::numeric_limits<double>::max()) , mMax(-mMin)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add(double val)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (+ + mSize ; mMin = std::min<)",
    "insertText": "double(val, mMin)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mMax = std::max<)",
    "insertText": "double(val, mMax)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add(double val, uint64_t n)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "size()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (os<<\" with \"<<mSize<<\" samples : \\ n \"<<\" Min = \"<<mMin<<\",Max = \"<<mMax<<\",Range = \"<<this ->)",
    "insertText": "range()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "join(const Extrema& other)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(other.mSize > 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mSize + = other . mSize ; mMin = std::min<)",
    "insertText": "double(mMin, other.mMin)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mMax = std::max<)",
    "insertText": "double(mMax, other.mMax)"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (} uint64_t mSize ; double mMin,mMax ; } ; class Stats : public Extrema { public :)",
    "insertText": "Stats() : Extrema() , mAvg(0.0) , mAux(0.0)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(val)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double delta = val - mAvg ; mAvg + = delta /)",
    "insertText": "double(mSize)"
  },
  {
    "label": "delta()",
    "kind": "Method",
    "detail": "Function (mAux + =)",
    "insertText": "delta(val - mAvg)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double denom = 1 . 0 /)",
    "insertText": "double(mSize + n)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double delta = val - mAvg ; mAvg + = denom* delta*)",
    "insertText": "double(n)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mAux + = denom* delta* delta*)",
    "insertText": "double(mSize) * double(n)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(val, n)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add(const Stats& other)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double denom = 1 . 0 /)",
    "insertText": "double(mSize + other.mSize)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double delta = other . mAvg - mAvg ; mAvg + = denom* delta*)",
    "insertText": "double(other.mSize)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mAux + = other . mAux + denom* delta* delta*)",
    "insertText": "double(mSize) * double(other.mSize)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(other)"
  },
  {
    "label": "avg()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "avg()"
  },
  {
    "label": "variance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "variance()"
  },
  {
    "label": "std()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "std()"
  },
  {
    "label": "stdDev()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "stdDev()"
  },
  {
    "label": "stdDev()",
    "kind": "Method",
    "detail": "Function (os<<\" with \"<<mSize<<\" samples : \\ n \"<<\" Min = \"<<mMin<<\",Max = \"<<mMax<<\",Ave = \"<<mAvg<<\",Std = \"<<this ->)",
    "insertText": "stdDev() << \", Var=\" << this->variance()"
  },
  {
    "label": "Histogram()",
    "kind": "Method",
    "detail": "Function (} protected : using Extrema::mSize ; using Extrema::mMin ; using Extrema::mMax ; double mAvg,mAux ; } ; class Histogram { public :)",
    "insertText": "Histogram(double min, double max, size_t numBins = 10) : mSize(0), mMin(min), mMax(max + 1e-10), mDelta(double(numBins)/(max-min)), mBins(numBins)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"Histogram: expected min < max\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(numBins == 0)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"Histogram: expected at least one bin\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i=0; i<numBins; ++i)"
  },
  {
    "label": "Histogram()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Histogram(const Stats& s, size_t numBins = 10): mSize(0), mMin(s.min()), mMax(s.max()+1e-10), mDelta(double(numBins)/(mMax-mMin)), mBins(numBins)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "add(double val, uint64_t n = 1)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (mBins [)",
    "insertText": "size_t(mDelta*(val-mMin))"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (mSize + = n ; return true ; } bool)",
    "insertText": "add(const Histogram& other)"
  },
  {
    "label": "numBins()",
    "kind": "Method",
    "detail": "Function (mSize + = other . mSize ; return true ; } size_t)",
    "insertText": "numBins()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "count(int n)"
  },
  {
    "label": "setprecision()",
    "kind": "Method",
    "detail": "Function (std::ostringstream os ; os<<)",
    "insertText": "setprecision(6) << std::setiosflags(std::ios::fixed)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (os<<\" with \"<<mSize<<\" samples : \\ n \" ; os<<\" = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \\ n \" ; os<<\" | | # | Min | Max | Frequency | % | | \\ n \" ; os<<\" = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \\ n \" ;)",
    "insertText": "for(int i = 0, e = int(mBins.size()); i != e; ++i)"
  },
  {
    "label": "setw()",
    "kind": "Method",
    "detail": "Function (os<<\" | | \"<<)",
    "insertText": "setw(4) << i << \" | \" << std::setw(14) << this->min(i) << \" | \" << std::setw(14) << this->max(i) << \" | \" << std::setw(9) << mBins[i] << \" | \" << std::setw(3) << (100*mBins[i]/mSize)"
  }
]