[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimNode_Fabrik",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Fabrik"
  },
  {
    "label": "EBoneControlSpace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBoneControlSpace"
  },
  {
    "label": "EBoneRotationSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBoneRotationSource"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneIndices . h \" # include \" BoneContainer . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" AnimNode_Fabrik . generated . h \" class FPrimitiveDrawInterface ; class USkeletalMeshComponent ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = EndEffector, meta = (PinShownByDefault))"
  },
  {
    "label": "FAnimNode_Fabrik()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FAnimNode_Fabrik()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "ConditionalDebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalDebugDraw(FPrimitiveDrawInterface* PDI, USkeletalMeshComponent* PreviewSkelMeshComp)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetCurrentLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCurrentLocation(FCSPose<FCompactPose>& MeshBases, const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetTargetTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTargetTransform(const FTransform& InComponentTransform, FCSPose<FCompactPose>& MeshBases, FBoneSocketTarget& InTarget, EBoneControlSpace Space, const FTransform& InOffset)"
  }
]