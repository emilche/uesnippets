[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxNoOpDestruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNoOpDestruct"
  },
  {
    "label": "FbxPtrDestruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxPtrDestruct"
  },
  {
    "label": "FbxDefaultComparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxDefaultComparator"
  },
  {
    "label": "Destruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Destruct"
  },
  {
    "label": "Comparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Comparator"
  },
  {
    "label": "FbxHashMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxHashMap"
  },
  {
    "label": "ListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListItem"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "DoIt()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_HASHMAP_H_ # define _FBXSDK_CORE_BASE_HASHMAP_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxarray . h> # include<fbxsdk / core / base / fbxmap . h> # include<fbxsdk / fbxsdk_nsbegin . h> template<class T> class FbxNoOpDestruct { public : void)",
    "insertText": "DoIt(T&)"
  },
  {
    "label": "DoIt()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> class FbxPtrDestruct { public : void)",
    "insertText": "DoIt(T& v)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(v)"
  },
  {
    "label": "CompareIt()",
    "kind": "Method",
    "detail": "Function (v = NULL ; } } ; template<class T> class FbxDefaultComparator { public : bool)",
    "insertText": "CompareIt(const T& t1, const T& t2)"
  },
  {
    "label": "ListItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ListItem()"
  },
  {
    "label": "DoIt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoIt(mValue)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} } ; public : class Iterator { public : typedef ListItem ListItemType ; typedef FbxPair<KeyType,ValueType> KeyValuePair ;)",
    "insertText": "Iterator(const Iterator& pOther ) : mMap( pOther.mMap ), mBucketIndex( pOther.mBucketIndex ), mCurrentItem( pOther.mCurrentItem)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; KeyValuePair)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (KeyValuePair lItem ;)",
    "insertText": "if(mCurrentItem)"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (lItem . mFirst = mCurrentItem -> mKey ; lItem . mSecond = mCurrentItem -> mValue ; return lItem ; })",
    "insertText": "FBX_ASSERT_NOW(\"Accessing out of bounds iterator\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (mCurrentItem = mCurrentItem -> mNext ; return ; } else { mBucketIndex + + ;)",
    "insertText": "for(; mBucketIndex < mMap->mBuckets.GetCount(); ++mBucketIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mCurrentItem = mMap -> mBuckets [ mBucketIndex ] ; return ; } })",
    "insertText": "if(mBucketIndex >= mMap->mBuckets.GetCount())"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (* this = mMap ->)",
    "insertText": "End()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Iterator&)",
    "insertText": "operator(const Iterator& pOther)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (this -> mBucketIndex = pOther . mBucketIndex ; this -> mMap = pOther . mMap ; this -> mCurrentItem = pOther . mCurrentItem ; return* this ; } private : const FbxHashMap* mMap ; int mBucketIndex ; ListItemType* mCurrentItem ;)",
    "insertText": "Iterator(const FbxHashMap* pMap, int pBucketIndex, ListItemType* pCurrentItem) : mMap( pMap ), mBucketIndex(pBucketIndex), mCurrentItem(pCurrentItem)"
  },
  {
    "label": "FbxHashMap()",
    "kind": "Method",
    "detail": "Function (} class FbxHashMap ; } ;)",
    "insertText": "FbxHashMap(int pBucketSize)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (mBuckets .)",
    "insertText": "Resize(pBucketSize)"
  },
  {
    "label": "FbxHashMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxHashMap()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (mBuckets .)",
    "insertText": "Resize(30)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ListItem* lNext = mBuckets [ i ] -> mNext ;)",
    "insertText": "while(lNext)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (ListItem* lNextNext = lNext -> mNext ;)",
    "insertText": "FbxDelete(lNext)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (lNext = lNextNext ; })",
    "insertText": "FbxDelete(mBuckets[i])"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (mBuckets [ i ] = NULL ; } } } const Iterator)",
    "insertText": "Find(const KeyType& pKey)"
  },
  {
    "label": "mHashFunctor()",
    "kind": "Method",
    "detail": "Function (unsigned int lIndex =)",
    "insertText": "mHashFunctor(pKey)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (lIndex = lIndex % mBuckets .)",
    "insertText": "GetCount()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ListItem* lItem = mBuckets [ lIndex ] ;)",
    "insertText": "while(lItem)"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "lIt(this, lIndex, lItem)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} VALUE)",
    "insertText": "Remove(const KEY& pKey)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (ListItem* lItem = mBuckets .)",
    "insertText": "GetAt(lIndex)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (VALUE lValue = lItem -> mValue ;)",
    "insertText": "FbxDelete(lItem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "operator(const KeyType& pKey)"
  },
  {
    "label": "InternalFind()",
    "kind": "Method",
    "detail": "Function (unsigned int lIndex = 0 ; Iterator lIt =)",
    "insertText": "InternalFind(pKey, lIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lItem -> mNext = NULL ; lItem -> mKey = pKey ;)",
    "insertText": "if(!mBuckets.GetAt(lIndex))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (mBuckets .)",
    "insertText": "SetAt(lIndex, lItem)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} return lItem -> mValue ; } Iterator)",
    "insertText": "Start()"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "lIt(this, i, mBuckets[i])"
  },
  {
    "label": "lIt()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "lIt(this, 0, NULL)"
  },
  {
    "label": "FbxHashMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxHashMap(const FbxHashMap& pOther)"
  }
]