[
  {
    "label": "CrossMediaMetricsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CrossMediaMetricsReporter"
  },
  {
    "label": "StatsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsInfo"
  },
  {
    "label": "CrossMediaMetricsReporter()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_CROSS_MEDIA_METRICS_REPORTER_H_ # define TEST_PC_E2E_CROSS_MEDIA_METRICS_REPORTER_H_ # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / peerconnection_quality_test_fixture . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace webrtc_pc_e2e { class CrossMediaMetricsReporter : public PeerConnectionE2EQualityTestFixture::QualityMetricsReporter { public :)",
    "insertText": "CrossMediaMetricsReporter(test::MetricsLogger* metrics_logger)"
  },
  {
    "label": "CrossMediaMetricsReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CrossMediaMetricsReporter()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(absl::string_view test_case_name, const TrackIdStreamInfoMap* reporter_helper)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "StopAndReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndReportResults()"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (private : struct StatsInfo { SamplesStatsCounter audio_ahead_ms ; SamplesStatsCounter video_ahead_ms ; TrackIdStreamInfoMap::StreamInfo audio_stream_info ; TrackIdStreamInfoMap::StreamInfo video_stream_info ; std::string audio_stream_label ; std::string video_stream_label ; } ; std::string)",
    "insertText": "GetTestCaseName(const std::string& stream_label, const std::string& sync_group)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (test::MetricsLogger* const metrics_logger_ ; std::string test_case_name_ ; const TrackIdStreamInfoMap* reporter_helper_ ; Mutex mutex_ ; std::map<std::string,StatsInfo> stats_info_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]