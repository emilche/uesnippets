[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "NoDestructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoDestructor"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_DUMMY_HISTOGRAM_H_ # define BASE_METRICS_DUMMY_HISTOGRAM_H_ # include<stdint . h> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / metrics / histogram_base . h \" # include \" base / no_destructor . h \" # include \" base / values . h \" namespace base { class BASE_EXPORT DummyHistogram : public HistogramBase { public : DummyHistogram*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "DummyHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DummyHistogram(const DummyHistogram&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DummyHistogram&)",
    "insertText": "operator(const DummyHistogram&)"
  },
  {
    "label": "CheckName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckName(const StringPiece& name)"
  },
  {
    "label": "name_hash()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "name_hash()"
  },
  {
    "label": "GetHistogramType()",
    "kind": "Method",
    "detail": "Function (HistogramType)",
    "insertText": "GetHistogramType()"
  },
  {
    "label": "HasConstructionArguments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConstructionArguments(Sample expected_minimum, Sample expected_maximum, size_t expected_bucket_count)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Sample value)"
  },
  {
    "label": "AddCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCount(Sample value, int count)"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSamples(const HistogramSamples& samples)"
  },
  {
    "label": "AddSamplesFromPickle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddSamplesFromPickle(PickleIterator* iter)"
  },
  {
    "label": "SnapshotSamples()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotSamples()"
  },
  {
    "label": "SnapshotDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotDelta()"
  },
  {
    "label": "SnapshotFinalDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotFinalDelta()"
  },
  {
    "label": "WriteAscii()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAscii(std::string* output)"
  },
  {
    "label": "ToGraphDict()",
    "kind": "Method",
    "detail": "Function (} Value::Dict)",
    "insertText": "ToGraphDict()"
  },
  {
    "label": "SerializeInfoImpl()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SerializeInfoImpl(Pickle* pickle)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (} Value::Dict)",
    "insertText": "GetParameters()"
  },
  {
    "label": "DummyHistogram()",
    "kind": "Method",
    "detail": "Function (private : class NoDestructor<DummyHistogram> ;)",
    "insertText": "DummyHistogram() : HistogramBase(\"dummy_histogram\")"
  },
  {
    "label": "DummyHistogram()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DummyHistogram()"
  }
]