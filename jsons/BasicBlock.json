[
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "LandingPadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LandingPadInst"
  },
  {
    "label": "TerminatorInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TerminatorInst"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "BlockAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockAddress"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "SymbolTableListTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolTableListTraits"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_BASICBLOCK_H # define LLVM_IR_BASICBLOCK_H # include \" llvm / ADT / Twine . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / IR / Instruction . h \" # include \" llvm / IR / SymbolTableListTraits . h \" # include \" llvm / Support / CBindingWrapping . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class CallInst ; class LandingPadInst ; class TerminatorInst ; class LLVMContext ; class BlockAddress ; class Function ; template<> struct ilist_traits<BasicBlock> : public SymbolTableListTraits<BasicBlock,Function> { BasicBlock*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroySentinel(BasicBlock*)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "ensureHead(BasicBlock*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(BasicBlock*, BasicBlock*)"
  },
  {
    "label": "getSymTab()",
    "kind": "Method",
    "detail": "Function (} ValueSymbolTable*)",
    "insertText": "getSymTab(Function *ItemParent)"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (private : ilist_half_node<BasicBlock> Sentinel ; } ; class BasicBlock : public Value,public ilist_node<BasicBlock> { class BlockAddress ; public : typedef iplist<Instruction> InstListType ; private : InstListType InstList ; Function* Parent ; void)",
    "insertText": "setParent(Function *parent)"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (class SymbolTableListTraits<BasicBlock,Function> ;)",
    "insertText": "BasicBlock(const BasicBlock &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const BasicBlock &)"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicBlock(LLVMContext &C, const Twine &Name = \"\", Function *Parent = nullptr, BasicBlock *InsertBefore = nullptr)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (public : LLVMContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (typedef InstListType::iterator iterator ; typedef InstListType::const_iterator const_iterator ; typedef InstListType::reverse_iterator reverse_iterator ; typedef InstListType::const_reverse_iterator const_reverse_iterator ; BasicBlock*)",
    "insertText": "Create(LLVMContext &Context, const Twine &Name = \"\", Function *Parent = nullptr, BasicBlock *InsertBefore = nullptr)"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BasicBlock()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (const Function*)",
    "insertText": "getParent()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (Module*)",
    "insertText": "getModule()"
  },
  {
    "label": "getTerminator()",
    "kind": "Method",
    "detail": "Function (TerminatorInst*)",
    "insertText": "getTerminator()"
  },
  {
    "label": "getTerminatingMustTailCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "getTerminatingMustTailCall()"
  },
  {
    "label": "getFirstNonPHI()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getFirstNonPHI()"
  },
  {
    "label": "getFirstNonPHIOrDbg()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getFirstNonPHIOrDbg()"
  },
  {
    "label": "getFirstNonPHIOrDbgOrLifetime()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getFirstNonPHIOrDbgOrLifetime()"
  },
  {
    "label": "getFirstInsertionPt()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "getFirstInsertionPt()"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (iplist<BasicBlock>::iterator)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "moveBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveBefore(BasicBlock *MovePos)"
  },
  {
    "label": "moveAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveAfter(BasicBlock *MovePos)"
  },
  {
    "label": "insertInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertInto(Function *Parent, BasicBlock *InsertBefore = nullptr)"
  },
  {
    "label": "getSinglePredecessor()",
    "kind": "Method",
    "detail": "Function (BasicBlock*)",
    "insertText": "getSinglePredecessor()"
  },
  {
    "label": "getUniquePredecessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getUniquePredecessor()"
  },
  {
    "label": "getSingleSuccessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getSingleSuccessor()"
  },
  {
    "label": "getUniqueSuccessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getUniqueSuccessor()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const Instruction&)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const Instruction&)",
    "insertText": "back()"
  },
  {
    "label": "compute_size_no_dbg()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "compute_size_no_dbg()"
  },
  {
    "label": "getInstList()",
    "kind": "Method",
    "detail": "Function (const InstListType&)",
    "insertText": "getInstList()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Value *V)"
  },
  {
    "label": "dropAllReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dropAllReferences()"
  },
  {
    "label": "removePredecessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePredecessor(BasicBlock *Pred, bool DontDeleteUselessPHIs = false)"
  },
  {
    "label": "splitBasicBlock()",
    "kind": "Method",
    "detail": "Function (BasicBlock*)",
    "insertText": "splitBasicBlock(iterator I, const Twine &BBName = \"\")"
  },
  {
    "label": "hasAddressTaken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasAddressTaken()"
  },
  {
    "label": "replaceSuccessorsPhiUsesWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceSuccessorsPhiUsesWith(BasicBlock *New)"
  },
  {
    "label": "isLandingPad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLandingPad()"
  },
  {
    "label": "getLandingPadInst()",
    "kind": "Method",
    "detail": "Function (LandingPadInst*)",
    "insertText": "getLandingPadInst()"
  },
  {
    "label": "AdjustBlockAddressRefCount()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AdjustBlockAddressRefCount(int Amt)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData(getSubclassDataFromValue()+Amt)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((int)(signed char)getSubclassDataFromValue() >= 0 && \"Refcount wrap-around\")"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueSubclassData(unsigned short D)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData(D)"
  }
]