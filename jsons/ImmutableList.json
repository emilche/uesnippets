[
  {
    "label": "ImmutableListFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableListFactory"
  },
  {
    "label": "ImmutableListImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableListImpl"
  },
  {
    "label": "ImmutableList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableList"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "ImmutableListImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_IMMUTABLELIST_H # define LLVM_ADT_IMMUTABLELIST_H # include \" llvm / ADT / FoldingSet . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> namespace llvm { template<T> class ImmutableListFactory ; template<T> class ImmutableListImpl : public FoldingSetNode { T Head ; const ImmutableListImpl* Tail ;)",
    "insertText": "ImmutableListImpl(const T& head, const ImmutableListImpl* tail = 0) : Head(head), Tail(tail)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class ImmutableListFactory<T> ; void)",
    "insertText": "operator(const ImmutableListImpl&)"
  },
  {
    "label": "ImmutableListImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmutableListImpl(const ImmutableListImpl&)"
  },
  {
    "label": "getHead()",
    "kind": "Method",
    "detail": "Function (public : const T&)",
    "insertText": "getHead()"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "AddPointer(L)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "Add(H)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Profile(ID, Head, Tail)"
  },
  {
    "label": "ImmutableList()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class ImmutableList { public : typedef T value_type ; typedef ImmutableListFactory<T> Factory ; private : const ImmutableListImpl<T>* X ; public :)",
    "insertText": "ImmutableList(const ImmutableListImpl<T>* x = 0) : X(x)"
  },
  {
    "label": "getInternalPointer()",
    "kind": "Method",
    "detail": "Function (} const ImmutableListImpl<T>*)",
    "insertText": "getInternalPointer()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "iterator(ImmutableList l) : L(l.getInternalPointer())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "getTail()",
    "kind": "Method",
    "detail": "Function (L = L ->)",
    "insertText": "getTail()"
  },
  {
    "label": "getList()",
    "kind": "Method",
    "detail": "Function (} ImmutableList)",
    "insertText": "getList()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "isEqual(const ImmutableList& L)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isEmpty() && \"Cannot get the head of an empty list.\")"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "AddPointer(X)"
  },
  {
    "label": "ownsAllocator()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class ImmutableListFactory { typedef ImmutableListImpl<T> ListTy ; typedef FoldingSet<ListTy> CacheTy ; CacheTy Cache ; uintptr_t Allocator ; bool)",
    "insertText": "ownsAllocator()"
  },
  {
    "label": "ImmutableListFactory()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "ImmutableListFactory() : Allocator(reinterpret_cast<uintptr_t>(new BumpPtrAllocator()))"
  },
  {
    "label": "ImmutableListFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ImmutableListFactory(BumpPtrAllocator& Alloc) : Allocator(reinterpret_cast<uintptr_t>(&Alloc) | 0x1)"
  },
  {
    "label": "ImmutableListFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ImmutableListFactory()"
  },
  {
    "label": "concat()",
    "kind": "Method",
    "detail": "Function (} ImmutableList<T>)",
    "insertText": "concat(const T& Head, ImmutableList<T> Tail)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Profile(ID, Head, TailImpl)"
  },
  {
    "label": "FindNodeOrInsertPos()",
    "kind": "Method",
    "detail": "Function (ListTy* L = Cache .)",
    "insertText": "FindNodeOrInsertPos(ID, InsertPos)"
  },
  {
    "label": "getAllocator()",
    "kind": "Method",
    "detail": "Function (BumpPtrAllocator& A =)",
    "insertText": "getAllocator()"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "L(ListTy*) A.Allocate<ListTy>()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(L) ListTy(Head, TailImpl)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (Cache .)",
    "insertText": "InsertNode(L, InsertPos)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} return L ; } ImmutableList<T>)",
    "insertText": "add(const T& D, ImmutableList<T> L)"
  },
  {
    "label": "getEmptyList()",
    "kind": "Method",
    "detail": "Function (} ImmutableList<T>)",
    "insertText": "getEmptyList()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} ImmutableList<T>)",
    "insertText": "create(const T& X)"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct DenseMapInfo ; template<T> struct DenseMapInfo<ImmutableList<T>> { ImmutableList<T>)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} ImmutableList<T>)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(ImmutableList<T> X)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t PtrVal = reinterpret_cast<)",
    "insertText": "uintptr_t(X.getInternalPointer())"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(ImmutableList<T> X1, ImmutableList<T> X2)"
  }
]