[
  {
    "label": "IterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterTraits"
  },
  {
    "label": "GetValImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetValImpl"
  },
  {
    "label": "GetVal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetVal"
  },
  {
    "label": "StatsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsOp"
  },
  {
    "label": "HistOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HistOp"
  },
  {
    "label": "MathOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MathOp"
  },
  {
    "label": "histogram()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_STATISTICS_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_STATISTICS_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / Exceptions . h> # include<openvdb / math / Stats . h> # include \" ValueTransformer . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<IterT> math::Histogram)",
    "insertText": "histogram(const IterT& iter, double minVal, double maxVal, size_t numBins = 10, bool threaded = true)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (template<IterT> math::Extrema)",
    "insertText": "extrema(const IterT& iter, bool threaded = true)"
  },
  {
    "label": "statistics()",
    "kind": "Method",
    "detail": "Function (template<IterT> math::Stats)",
    "insertText": "statistics(const IterT& iter, bool threaded = true)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (template<IterT,ValueOp> math::Extrema)",
    "insertText": "extrema(const IterT& iter, const ValueOp& op, bool threaded)"
  },
  {
    "label": "statistics()",
    "kind": "Method",
    "detail": "Function (template<IterT,ValueOp> math::Stats)",
    "insertText": "statistics(const IterT& iter, const ValueOp& op, bool threaded)"
  },
  {
    "label": "opStatistics()",
    "kind": "Method",
    "detail": "Function (template<OperatorT,IterT> math::Stats)",
    "insertText": "opStatistics(const IterT& iter, const OperatorT& op = OperatorT(), bool threaded = true)"
  },
  {
    "label": "opExtrema()",
    "kind": "Method",
    "detail": "Function (template<OperatorT,IterT> math::Extrema)",
    "insertText": "opExtrema(const IterT& iter, const OperatorT& op = OperatorT(), bool threaded = true)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (namespace stats_internal { template<IterT,AuxT = void> struct IterTraits { using ValueType = IterT::ValueType ; } ; template<TreeT,ValueIterT> struct IterTraits<tree::TreeValueIteratorBase<TreeT,ValueIterT>> { using ValueType = tree::TreeValueIteratorBase<TreeT,ValueIterT>::ValueT ; } ; template<T,bool IsVector> struct GetValImpl ; template<T> struct GetValImpl<T,false> { double)",
    "insertText": "get(const T& val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<IterT,StatsT> struct GetVal { using ValueT = IterTraits<IterT>::ValueType ; using ImplT = GetValImpl<ValueT,VecTraits<ValueT>::IsVec> ; void)",
    "insertText": "operator()(const IterT& iter, StatsT& stats)"
  },
  {
    "label": "StatsOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<IterT,ValueOp,StatsT> struct StatsOp {)",
    "insertText": "StatsOp(const ValueOp& op): getValue(op)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const IterT& iter)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValue(iter, stats)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(StatsOp& other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (stats .)",
    "insertText": "add(other.stats)"
  },
  {
    "label": "HistOp()",
    "kind": "Method",
    "detail": "Function (} StatsT stats ; ValueOp getValue ; } ; template<IterT,ValueOp> struct HistOp {)",
    "insertText": "HistOp(const ValueOp& op, double vmin, double vmax, size_t bins): hist(vmin, vmax, bins), getValue(op)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValue(iter, hist)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(HistOp& other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (hist .)",
    "insertText": "add(other.hist)"
  },
  {
    "label": "THROW_IF_NULL()",
    "kind": "Method",
    "detail": "Function (} math::Histogram hist ; ValueOp getValue ; } ; template<IterT,OpT,StatsT> struct MathOp { using TreeT = IterT::TreeT ; using ValueT = TreeT::ValueType ; using ConstAccessor = tree::ValueAccessor<const TreeT> ; ConstAccessor mAcc ; OpT mOp ; StatsT mStats ; template<TreeT> TreeT*)",
    "insertText": "THROW_IF_NULL(TreeT* ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const IterT& it)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (mStats .)",
    "insertText": "add(mOp.result(mAcc, it.getCoord()))"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} else { CoordBBox bbox = it .)",
    "insertText": "getBoundingBox()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (Coord xyz ; int& x = xyz .)",
    "insertText": "x(), &y = xyz.y(), &z = xyz.z()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "join(MathOp& other)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (mStats .)",
    "insertText": "add(other.mStats)"
  },
  {
    "label": "histogram()",
    "kind": "Method",
    "detail": "Function (} } ; } template<IterT> math::Histogram)",
    "insertText": "histogram(const IterT& iter, double vmin, double vmax, size_t numBins, bool threaded)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (using ValueOp = stats_internal::GetVal<IterT,math::Histogram> ; ValueOp valOp ; stats_internal::HistOp<IterT,ValueOp>)",
    "insertText": "op(valOp, vmin, vmax, numBins)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "accumulate(iter, op, threaded)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (stats_internal::GetVal<IterT,math::Extrema> valOp ; return)",
    "insertText": "extrema(iter, valOp, threaded)"
  },
  {
    "label": "statistics()",
    "kind": "Method",
    "detail": "Function (} template<IterT> math::Stats)",
    "insertText": "statistics(const IterT& iter, bool threaded)"
  },
  {
    "label": "statistics()",
    "kind": "Method",
    "detail": "Function (stats_internal::GetVal<IterT,math::Stats> valOp ; return)",
    "insertText": "statistics(iter, valOp, threaded)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (} template<IterT,ValueOp> math::Extrema)",
    "insertText": "extrema(const IterT& iter, const ValueOp& valOp, bool threaded)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (stats_internal::StatsOp<IterT,const ValueOp,math::Extrema>)",
    "insertText": "op(valOp)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (stats_internal::MathOp<IterT,OperatorT,math::Extrema>)",
    "insertText": "func(iter, op)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "accumulate(iter, func, threaded)"
  }
]