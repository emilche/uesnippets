[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "IMediaEventSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaEventSink"
  },
  {
    "label": "IMediaOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOptions"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IMediaPlayerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayerFactory"
  },
  {
    "label": "CanPlayUrl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" class FString ; class IMediaEventSink ; class IMediaOptions ; class IMediaPlayer ; enum class EMediaFeature { AudioSamples,AudioTracks,CaptionTracks,MetadataTracks,OverlaySamples,SubtitleTracks,TextTracks,Video360,VideoSamples,VideoStereo,VideoTracks } ; class IMediaPlayerFactory { public : bool)",
    "insertText": "CanPlayUrl(const FString& Url, const IMediaOptions* Options, TArray<FText>* OutWarnings, TArray<FText>* OutErrors)"
  },
  {
    "label": "CreatePlayer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMediaPlayer,ESPMode::ThreadSafe>)",
    "insertText": "CreatePlayer(IMediaEventSink& EventSink)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetPlayerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlayerName()"
  },
  {
    "label": "GetPlayerPluginGUID()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetPlayerPluginGUID()"
  },
  {
    "label": "GetSupportedPlatforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetSupportedPlatforms()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFeature(EMediaFeature Feature)"
  },
  {
    "label": "CanPlayUrl()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanPlayUrl(const FString& Url, const IMediaOptions* Options)"
  },
  {
    "label": "GetPlayabilityConfidenceScore()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlayabilityConfidenceScore(const FString& Url, const IMediaOptions* Options, TArray<FText>* OutWarnings, TArray<FText>* OutErrors)"
  },
  {
    "label": "SupportsPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsPlatform(const FString& PlatformName)"
  },
  {
    "label": "IMediaPlayerFactory()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IMediaPlayerFactory()"
  }
]