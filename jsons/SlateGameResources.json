[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UCurveFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFloat"
  },
  {
    "label": "UCurveLinearColor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveLinearColor"
  },
  {
    "label": "UCurveVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveVector"
  },
  {
    "label": "FSlateWidgetStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateWidgetStyle"
  },
  {
    "label": "FSlateGameResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateGameResources"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Styling / StyleDefaults . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateStyle . h \" struct FAssetData ; class UCurveFloat ; class UCurveLinearColor ; class UCurveVector ; struct FSlateWidgetStyle ; class FSlateGameResources : public FSlateStyleSet,public FGCObject { public : TSharedRef<FSlateGameResources>)",
    "insertText": "New(const FName& InStyleSetName, const FString& ScopeToDirectory, const FString& InBasePath = FString())"
  },
  {
    "label": "FSlateGameResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateGameResources(const FName& InStyleSetName)"
  },
  {
    "label": "FSlateGameResources()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateGameResources()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FString& ScopeToDirectory, const FString& InBasePath)"
  },
  {
    "label": "GetResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResources(TArray< const FSlateBrush* >& OutResources)"
  },
  {
    "label": "SetContentRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentRoot(const FString& InContentRootDir)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBrush(const FName PropertyName, const ANSICHAR* Specifier = NULL, const ISlateStyle* RequestingStyle = nullptr)"
  },
  {
    "label": "GetOptionalBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOptionalBrush(const FName PropertyName, const ANSICHAR* Specifier = NULL, const FSlateBrush* const DefaultBrush = FStyleDefaults::GetNoBrush())"
  },
  {
    "label": "GetCurveFloat()",
    "kind": "Method",
    "detail": "Function (UCurveFloat*)",
    "insertText": "GetCurveFloat(const FName AssetName)"
  },
  {
    "label": "GetCurveVector()",
    "kind": "Method",
    "detail": "Function (UCurveVector*)",
    "insertText": "GetCurveVector(const FName AssetName)"
  },
  {
    "label": "GetCurveLinearColor()",
    "kind": "Method",
    "detail": "Function (UCurveLinearColor*)",
    "insertText": "GetCurveLinearColor(const FName AssetName)"
  },
  {
    "label": "GetWidgetStyleInternal()",
    "kind": "Method",
    "detail": "Function (protected : const FSlateWidgetStyle*)",
    "insertText": "GetWidgetStyleInternal(const FName DesiredTypeName, const FName StyleName, const FSlateWidgetStyle* DefaultStyle, bool bWarnIfNotFound)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(ISlateStyle::EStyleMessageSeverity Severity, const FText& Message)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const TSharedRef< class FTokenizedMessage >& Message)"
  },
  {
    "label": "AddAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsset(const FAssetData& InAddedAssetData)"
  },
  {
    "label": "RemoveAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAsset(const FAssetData& InRemovedAssetData)"
  },
  {
    "label": "ShouldCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCache(const FAssetData& InAssetData)"
  },
  {
    "label": "AddAssetToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetToCache(UObject* InStyleObject, bool bEnsureUniqueness)"
  },
  {
    "label": "RemoveAssetFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetFromCache(const FAssetData& AssetData)"
  },
  {
    "label": "GenerateMapName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenerateMapName(const FAssetData& AssetData)"
  },
  {
    "label": "GenerateMapName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenerateMapName(UObject* StyleObject)"
  },
  {
    "label": "GetCleanName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCleanName(const FName& AssetName)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  }
]