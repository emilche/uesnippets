[
  {
    "label": "IFixedDecimal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFixedDecimal"
  },
  {
    "label": "FieldPositionIteratorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldPositionIteratorHandler"
  },
  {
    "label": "NumberParserImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberParserImpl"
  },
  {
    "label": "MultiplierParseHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierParseHandler"
  },
  {
    "label": "UnlocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnlocalizedNumberFormatter"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "Notation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Notation"
  },
  {
    "label": "ScientificNotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificNotation"
  },
  {
    "label": "Precision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Precision"
  },
  {
    "label": "FractionPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FractionPrecision"
  },
  {
    "label": "CurrencyPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencyPrecision"
  },
  {
    "label": "IncrementPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncrementPrecision"
  },
  {
    "label": "IntegerWidth",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntegerWidth"
  },
  {
    "label": "initialization",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "initialization"
  },
  {
    "label": "Padder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Padder"
  },
  {
    "label": "MacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MacroProps"
  },
  {
    "label": "MicroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MicroProps"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "UFormattedNumberData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFormattedNumberData"
  },
  {
    "label": "NumberFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterImpl"
  },
  {
    "label": "ParsedPatternInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParsedPatternInfo"
  },
  {
    "label": "ScientificModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificModifier"
  },
  {
    "label": "MultiplierProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierProducer"
  },
  {
    "label": "RoundingImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RoundingImpl"
  },
  {
    "label": "ScientificHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificHandler"
  },
  {
    "label": "Modifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Modifier"
  },
  {
    "label": "NumberStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStringBuilder"
  },
  {
    "label": "AffixPatternProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AffixPatternProvider"
  },
  {
    "label": "NumberPropertyMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberPropertyMapper"
  },
  {
    "label": "DecimalFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecimalFormatProperties"
  },
  {
    "label": "MultiplierFormatHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierFormatHandler"
  },
  {
    "label": "CurrencySymbols",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencySymbols"
  },
  {
    "label": "GeneratorHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeneratorHelpers"
  },
  {
    "label": "DecNum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecNum"
  },
  {
    "label": "NumberRangeFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberRangeFormatterImpl"
  },
  {
    "label": "RangeMacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeMacroProps"
  },
  {
    "label": "UFormattedNumberImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UFormattedNumberImpl"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NotationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NotationType"
  },
  {
    "label": "ScientificSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScientificSettings"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "ScientificNotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificNotation"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "Notation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Notation"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "PrecisionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrecisionType"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FractionSignificantSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FractionSignificantSettings"
  },
  {
    "label": "IncrementSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IncrementSettings"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "FractionPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FractionPrecision"
  },
  {
    "label": "CurrencyPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencyPrecision"
  },
  {
    "label": "IncrementPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncrementPrecision"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "Precision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Precision"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "Precision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Precision"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "Precision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Precision"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "MultiplierFormatHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierFormatHandler"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "SymbolsPointerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolsPointerType"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "MacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MacroProps"
  },
  {
    "label": "MicroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MicroProps"
  },
  {
    "label": "NumberFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterImpl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "MacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MacroProps"
  },
  {
    "label": "MicroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MicroProps"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "UnlocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnlocalizedNumberFormatter"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "impl"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NumberFormatterSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterSettings"
  },
  {
    "label": "NumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatter"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "definition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "definition"
  },
  {
    "label": "NumberFormatterSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterSettings"
  },
  {
    "label": "NumberFormatterSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterSettings"
  },
  {
    "label": "UnlocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnlocalizedNumberFormatter"
  },
  {
    "label": "allows",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allows"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "populated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "populated"
  },
  {
    "label": "touchRangeLocales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "touchRangeLocales(impl::RangeMacroProps& macros)"
  },
  {
    "label": "scientific()",
    "kind": "Method",
    "detail": "Function (ScientificNotation)",
    "insertText": "scientific()"
  },
  {
    "label": "engineering()",
    "kind": "Method",
    "detail": "Function (ScientificNotation)",
    "insertText": "engineering()"
  },
  {
    "label": "compactShort()",
    "kind": "Method",
    "detail": "Function (CompactNotation)",
    "insertText": "compactShort()"
  },
  {
    "label": "compactLong()",
    "kind": "Method",
    "detail": "Function (CompactNotation)",
    "insertText": "compactLong()"
  },
  {
    "label": "simple()",
    "kind": "Method",
    "detail": "Function (SimpleNotation)",
    "insertText": "simple()"
  },
  {
    "label": "ScientificNotation()",
    "kind": "Method",
    "detail": "Function (NumberPropertyMapper)",
    "insertText": "ScientificNotation(int8_t fEngineeringInterval, bool fRequireMinInt, impl::digits_t fMinExponentDigits,\n                       UNumberSignDisplay fExponentSignDisplay)"
  },
  {
    "label": "unlimited()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "unlimited()"
  },
  {
    "label": "integer()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "integer()"
  },
  {
    "label": "fixedFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "fixedFraction(int32_t minMaxFractionPlaces)"
  },
  {
    "label": "minFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "minFraction(int32_t minFractionPlaces)"
  },
  {
    "label": "maxFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "maxFraction(int32_t maxFractionPlaces)"
  },
  {
    "label": "places()",
    "kind": "Method",
    "detail": "Function (fraction)",
    "insertText": "places(numerals after the decimal separator)"
  },
  {
    "label": "minMaxFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "minMaxFraction(int32_t minFractionPlaces, int32_t maxFractionPlaces)"
  },
  {
    "label": "fixedSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "fixedSignificantDigits(int32_t minMaxSignificantDigits)"
  },
  {
    "label": "minSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "minSignificantDigits(int32_t minSignificantDigits)"
  },
  {
    "label": "maxSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "maxSignificantDigits(int32_t maxSignificantDigits)"
  },
  {
    "label": "minMaxSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "minMaxSignificantDigits(int32_t minSignificantDigits,\n                                                              int32_t maxSignificantDigits)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (IncrementPrecision)",
    "insertText": "increment(double roundingIncrement)"
  },
  {
    "label": "currency()",
    "kind": "Method",
    "detail": "Function (CurrencyPrecision)",
    "insertText": "currency(UCurrencyUsage currencyUsage)"
  },
  {
    "label": "constructFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "constructFraction(int32_t minFrac, int32_t maxFrac)"
  },
  {
    "label": "constructSignificant()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructSignificant(int32_t minSig, int32_t maxSig)"
  },
  {
    "label": "constructFractionSignificant()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructFractionSignificant(const FractionPrecision &base, int32_t minSig, int32_t maxSig)"
  },
  {
    "label": "constructIncrement()",
    "kind": "Method",
    "detail": "Function (IncrementPrecision)",
    "insertText": "constructIncrement(double increment, int32_t minFrac)"
  },
  {
    "label": "constructCurrency()",
    "kind": "Method",
    "detail": "Function (CurrencyPrecision)",
    "insertText": "constructCurrency(UCurrencyUsage usage)"
  },
  {
    "label": "constructPassThrough()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructPassThrough()"
  },
  {
    "label": "zeroFillTo()",
    "kind": "Method",
    "detail": "Function (IntegerWidth)",
    "insertText": "zeroFillTo(int32_t minInt)"
  },
  {
    "label": "truncateAt()",
    "kind": "Method",
    "detail": "Function (IntegerWidth)",
    "insertText": "truncateAt(int32_t maxInt)"
  },
  {
    "label": "none()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "none()"
  },
  {
    "label": "powerOfTen()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "powerOfTen(int32_t power)"
  },
  {
    "label": "byDecimal()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDecimal(StringPiece multiplicand)"
  },
  {
    "label": "byDouble()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDouble(double multiplicand)"
  },
  {
    "label": "byDoubleAndPowerOfTen()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDoubleAndPowerOfTen(double multiplicand, int32_t power)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTo(const DecimalFormatSymbols &dfs)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTo(const NumberingSystem *ns)"
  },
  {
    "label": "doCopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCopyFrom(const SymbolsWrapper &other)"
  },
  {
    "label": "doMoveFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doMoveFrom(SymbolsWrapper&& src)"
  },
  {
    "label": "doCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCleanup()"
  },
  {
    "label": "forStrategy()",
    "kind": "Method",
    "detail": "Function (Grouper)",
    "insertText": "forStrategy(UNumberGroupingStrategy grouping)"
  },
  {
    "label": "forProperties()",
    "kind": "Method",
    "detail": "Function (Grouper)",
    "insertText": "forProperties(const DecimalFormatProperties& properties)"
  },
  {
    "label": "forProperties()",
    "kind": "Method",
    "detail": "Function (Grouper)",
    "insertText": "forProperties(DecimalFormatProperties& properties)"
  },
  {
    "label": "setLocaleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocaleData(const impl::ParsedPatternInfo &patternInfo, const Locale& locale)"
  },
  {
    "label": "none()",
    "kind": "Method",
    "detail": "Function (Padder)",
    "insertText": "none()"
  },
  {
    "label": "codePoints()",
    "kind": "Method",
    "detail": "Function (Padder)",
    "insertText": "codePoints(UChar32 cp, int32_t targetWidth, UNumberFormatPadPosition position)"
  },
  {
    "label": "forProperties()",
    "kind": "Method",
    "detail": "Function (Padder)",
    "insertText": "forProperties(const DecimalFormatProperties& properties)"
  },
  {
    "label": "U_FAILURE()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "U_FAILURE(outErrorCode)"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UnlocalizedNumberFormatter(const NumberFormatterSettings<UnlocalizedNumberFormatter>& other)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LocalizedNumberFormatter(const NumberFormatterSettings<LocalizedNumberFormatter>& other)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "lnfMoveHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lnfMoveHelper(LocalizedNumberFormatter&& src)"
  },
  {
    "label": "fpos()",
    "kind": "Method",
    "detail": "Function (FieldPosition)",
    "insertText": "fpos(UNUM_GROUPING_SEPARATOR_FIELD)"
  },
  {
    "label": "with()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter)",
    "insertText": "with()"
  },
  {
    "label": "withLocale()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberFormatter)",
    "insertText": "withLocale(const Locale &locale)"
  },
  {
    "label": "forSkeleton()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter)",
    "insertText": "forSkeleton(const UnicodeString& skeleton, UErrorCode& status)"
  },
  {
    "label": "forSkeleton()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter)",
    "insertText": "forSkeleton(const UnicodeString& skeleton,\n                                                  UParseError& perror, UErrorCode& status)"
  }
]