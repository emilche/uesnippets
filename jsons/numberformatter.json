[
  {
    "label": "IFixedDecimal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFixedDecimal"
  },
  {
    "label": "FieldPositionIteratorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldPositionIteratorHandler"
  },
  {
    "label": "NumberParserImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberParserImpl"
  },
  {
    "label": "MultiplierParseHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierParseHandler"
  },
  {
    "label": "UnlocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnlocalizedNumberFormatter"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "FormattedNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedNumber"
  },
  {
    "label": "Notation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Notation"
  },
  {
    "label": "ScientificNotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificNotation"
  },
  {
    "label": "Precision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Precision"
  },
  {
    "label": "FractionPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FractionPrecision"
  },
  {
    "label": "CurrencyPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencyPrecision"
  },
  {
    "label": "IncrementPrecision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncrementPrecision"
  },
  {
    "label": "IntegerWidth",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntegerWidth"
  },
  {
    "label": "Padder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Padder"
  },
  {
    "label": "MacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MacroProps"
  },
  {
    "label": "MicroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MicroProps"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "UFormattedNumberData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFormattedNumberData"
  },
  {
    "label": "NumberFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterImpl"
  },
  {
    "label": "ParsedPatternInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParsedPatternInfo"
  },
  {
    "label": "ScientificModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificModifier"
  },
  {
    "label": "MultiplierProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierProducer"
  },
  {
    "label": "RoundingImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RoundingImpl"
  },
  {
    "label": "ScientificHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScientificHandler"
  },
  {
    "label": "Modifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Modifier"
  },
  {
    "label": "NumberStringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberStringBuilder"
  },
  {
    "label": "AffixPatternProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AffixPatternProvider"
  },
  {
    "label": "NumberPropertyMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberPropertyMapper"
  },
  {
    "label": "DecimalFormatProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecimalFormatProperties"
  },
  {
    "label": "MultiplierFormatHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiplierFormatHandler"
  },
  {
    "label": "CurrencySymbols",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrencySymbols"
  },
  {
    "label": "GeneratorHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeneratorHelpers"
  },
  {
    "label": "DecNum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecNum"
  },
  {
    "label": "NumberRangeFormatterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberRangeFormatterImpl"
  },
  {
    "label": "RangeMacroProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeMacroProps"
  },
  {
    "label": "UFormattedNumberImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UFormattedNumberImpl"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NotationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NotationType"
  },
  {
    "label": "ScientificSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScientificSettings"
  },
  {
    "label": "impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "impl"
  },
  {
    "label": "PrecisionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrecisionType"
  },
  {
    "label": "FractionSignificantSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FractionSignificantSettings"
  },
  {
    "label": "IncrementSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IncrementSettings"
  },
  {
    "label": "SymbolsPointerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolsPointerType"
  },
  {
    "label": "NumberFormatterSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatterSettings"
  },
  {
    "label": "NumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatter"
  },
  {
    "label": "touchRangeLocales()",
    "kind": "Method",
    "detail": "Function (# include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # ifndef __NUMBERFORMATTER_H__ # define __NUMBERFORMATTER_H__ # include \" unicode / appendable . h \" # include \" unicode / dcfmtsym . h \" # include \" unicode / currunit . h \" # include \" unicode / fieldpos . h \" # include \" unicode / formattedvalue . h \" # include \" unicode / fpositer . h \" # include \" unicode / measunit . h \" # include \" unicode / nounit . h \" # include \" unicode / parseerr . h \" # include \" unicode / plurrule . h \" # include \" unicode / ucurr . h \" # include \" unicode / unum . h \" # include \" unicode / unumberformatter . h \" # include \" unicode / uobject . h \" # ifndef U_NAMESPACE_BEGIN class IFixedDecimal ; class FieldPositionIteratorHandler ; namespace numparse { namespace impl { class NumberParserImpl ; class MultiplierParseHandler ; } } namespace number { class UnlocalizedNumberFormatter ; class LocalizedNumberFormatter ; class FormattedNumber ; class Notation ; class ScientificNotation ; class Precision ; class FractionPrecision ; class CurrencyPrecision ; class IncrementPrecision ; class IntegerWidth ; namespace impl { typedef int16_t digits_t ; int32_t kInternalDefaultThreshold = 3 ; class Padder ; struct MacroProps ; struct MicroProps ; class DecimalQuantity ; class UFormattedNumberData ; class NumberFormatterImpl ; struct ParsedPatternInfo ; class ScientificModifier ; class MultiplierProducer ; class RoundingImpl ; class ScientificHandler ; class Modifier ; class NumberStringBuilder ; class AffixPatternProvider ; class NumberPropertyMapper ; struct DecimalFormatProperties ; class MultiplierFormatHandler ; class CurrencySymbols ; class GeneratorHelpers ; class DecNum ; class NumberRangeFormatterImpl ; struct RangeMacroProps ; struct UFormattedNumberImpl ; void)",
    "insertText": "touchRangeLocales(impl::RangeMacroProps& macros)"
  },
  {
    "label": "scientific()",
    "kind": "Method",
    "detail": "Function (} typedef Notation CompactNotation ; typedef Notation SimpleNotation ; class U_I18N_API Notation : public UMemory { public : ScientificNotation)",
    "insertText": "scientific()"
  },
  {
    "label": "engineering()",
    "kind": "Method",
    "detail": "Function (ScientificNotation)",
    "insertText": "engineering()"
  },
  {
    "label": "compactShort()",
    "kind": "Method",
    "detail": "Function (CompactNotation)",
    "insertText": "compactShort()"
  },
  {
    "label": "compactLong()",
    "kind": "Method",
    "detail": "Function (CompactNotation)",
    "insertText": "compactLong()"
  },
  {
    "label": "simple()",
    "kind": "Method",
    "detail": "Function (SimpleNotation)",
    "insertText": "simple()"
  },
  {
    "label": "Notation()",
    "kind": "Method",
    "detail": "Function (private : enum NotationType { NTN_SCIENTIFIC,NTN_COMPACT,NTN_SIMPLE,NTN_ERROR } fType ; union NotationUnion { struct ScientificSettings { int8_t fEngineeringInterval ; bool fRequireMinInt ; impl::digits_t fMinExponentDigits ; UNumberSignDisplay fExponentSignDisplay ; } scientific ; UNumberCompactStyle compactStyle ; UErrorCode errorCode ; } fUnion ; typedef NotationUnion::ScientificSettings ScientificSettings ;)",
    "insertText": "Notation(const NotationType &type, const NotationUnion &union_) : fType(type), fUnion(union_)"
  },
  {
    "label": "Notation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Notation(UErrorCode errorCode) : fType(NTN_ERROR)"
  },
  {
    "label": "Notation()",
    "kind": "Method",
    "detail": "Function (fUnion . errorCode = errorCode ; })",
    "insertText": "Notation() : fType(NTN_SIMPLE), fUnion()"
  },
  {
    "label": "copyErrorTo()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "copyErrorTo(UErrorCode &status)"
  },
  {
    "label": "withMinExponentDigits()",
    "kind": "Method",
    "detail": "Function (status = fUnion . errorCode ; return TRUE ; } return FALSE ; } struct impl::MacroProps ; class ScientificNotation ; class impl::NumberFormatterImpl ; class impl::ScientificModifier ; class impl::ScientificHandler ; class impl::GeneratorHelpers ; } ; class U_I18N_API ScientificNotation : public Notation { public : ScientificNotation)",
    "insertText": "withMinExponentDigits(int32_t minExponentDigits)"
  },
  {
    "label": "withExponentSignDisplay()",
    "kind": "Method",
    "detail": "Function (ScientificNotation)",
    "insertText": "withExponentSignDisplay(UNumberSignDisplay exponentSignDisplay)"
  },
  {
    "label": "ScientificNotation()",
    "kind": "Method",
    "detail": "Function (private : using Notation::Notation ;)",
    "insertText": "ScientificNotation(int8_t fEngineeringInterval, bool fRequireMinInt, impl::digits_t fMinExponentDigits, UNumberSignDisplay fExponentSignDisplay)"
  },
  {
    "label": "unlimited()",
    "kind": "Method",
    "detail": "Function (class Notation ; class impl::NumberPropertyMapper ; } ; typedef Precision SignificantDigitsPrecision ; class U_I18N_API Precision : public UMemory { public : Precision)",
    "insertText": "unlimited()"
  },
  {
    "label": "integer()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "integer()"
  },
  {
    "label": "fixedFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "fixedFraction(int32_t minMaxFractionPlaces)"
  },
  {
    "label": "minFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "minFraction(int32_t minFractionPlaces)"
  },
  {
    "label": "maxFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "maxFraction(int32_t maxFractionPlaces)"
  },
  {
    "label": "minMaxFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "minMaxFraction(int32_t minFractionPlaces, int32_t maxFractionPlaces)"
  },
  {
    "label": "fixedSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "fixedSignificantDigits(int32_t minMaxSignificantDigits)"
  },
  {
    "label": "minSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "minSignificantDigits(int32_t minSignificantDigits)"
  },
  {
    "label": "maxSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "maxSignificantDigits(int32_t maxSignificantDigits)"
  },
  {
    "label": "minMaxSignificantDigits()",
    "kind": "Method",
    "detail": "Function (SignificantDigitsPrecision)",
    "insertText": "minMaxSignificantDigits(int32_t minSignificantDigits, int32_t maxSignificantDigits)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (IncrementPrecision)",
    "insertText": "increment(double roundingIncrement)"
  },
  {
    "label": "currency()",
    "kind": "Method",
    "detail": "Function (CurrencyPrecision)",
    "insertText": "currency(UCurrencyUsage currencyUsage)"
  },
  {
    "label": "Precision()",
    "kind": "Method",
    "detail": "Function (private : enum PrecisionType { RND_BOGUS,RND_NONE,RND_FRACTION,RND_SIGNIFICANT,RND_FRACTION_SIGNIFICANT,RND_INCREMENT,RND_INCREMENT_ONE,RND_INCREMENT_FIVE,RND_CURRENCY,RND_ERROR } fType ; union PrecisionUnion { struct FractionSignificantSettings { impl::digits_t fMinFrac ; impl::digits_t fMaxFrac ; impl::digits_t fMinSig ; impl::digits_t fMaxSig ; } fracSig ; struct IncrementSettings { double fIncrement ; impl::digits_t fMinFrac ; impl::digits_t fMaxFrac ; } increment ; UCurrencyUsage currencyUsage ; UErrorCode errorCode ; } fUnion ; typedef PrecisionUnion::FractionSignificantSettings FractionSignificantSettings ; typedef PrecisionUnion::IncrementSettings IncrementSettings ; UNumberFormatRoundingMode fRoundingMode ;)",
    "insertText": "Precision(const PrecisionType& type, const PrecisionUnion& union_, UNumberFormatRoundingMode roundingMode) : fType(type), fUnion(union_), fRoundingMode(roundingMode)"
  },
  {
    "label": "Precision()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Precision(UErrorCode errorCode) : fType(RND_ERROR)"
  },
  {
    "label": "Precision()",
    "kind": "Method",
    "detail": "Function (fUnion . errorCode = errorCode ; })",
    "insertText": "Precision() : fType(RND_BOGUS)"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBogus()"
  },
  {
    "label": "withCurrency()",
    "kind": "Method",
    "detail": "Function (status = fUnion . errorCode ; return TRUE ; } return FALSE ; } Precision)",
    "insertText": "withCurrency(const CurrencyUnit &currency, UErrorCode &status)"
  },
  {
    "label": "constructFraction()",
    "kind": "Method",
    "detail": "Function (FractionPrecision)",
    "insertText": "constructFraction(int32_t minFrac, int32_t maxFrac)"
  },
  {
    "label": "constructSignificant()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructSignificant(int32_t minSig, int32_t maxSig)"
  },
  {
    "label": "constructFractionSignificant()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructFractionSignificant(const FractionPrecision &base, int32_t minSig, int32_t maxSig)"
  },
  {
    "label": "constructIncrement()",
    "kind": "Method",
    "detail": "Function (IncrementPrecision)",
    "insertText": "constructIncrement(double increment, int32_t minFrac)"
  },
  {
    "label": "constructCurrency()",
    "kind": "Method",
    "detail": "Function (CurrencyPrecision)",
    "insertText": "constructCurrency(UCurrencyUsage usage)"
  },
  {
    "label": "constructPassThrough()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "constructPassThrough()"
  },
  {
    "label": "withMinDigits()",
    "kind": "Method",
    "detail": "Function (struct impl::MacroProps ; struct impl::MicroProps ; class impl::NumberFormatterImpl ; class impl::NumberPropertyMapper ; class impl::RoundingImpl ; class FractionPrecision ; class CurrencyPrecision ; class IncrementPrecision ; class impl::GeneratorHelpers ; } ; class U_I18N_API FractionPrecision : public Precision { public : Precision)",
    "insertText": "withMinDigits(int32_t minSignificantDigits)"
  },
  {
    "label": "withMaxDigits()",
    "kind": "Method",
    "detail": "Function (Precision)",
    "insertText": "withMaxDigits(int32_t maxSignificantDigits)"
  },
  {
    "label": "withCurrency()",
    "kind": "Method",
    "detail": "Function (private : using Precision::Precision ; class Precision ; } ; class U_I18N_API CurrencyPrecision : public Precision { public : Precision)",
    "insertText": "withCurrency(const CurrencyUnit &currency)"
  },
  {
    "label": "withMinFraction()",
    "kind": "Method",
    "detail": "Function (private : using Precision::Precision ; class Precision ; } ; class U_I18N_API IncrementPrecision : public Precision { public : Precision)",
    "insertText": "withMinFraction(int32_t minFrac)"
  },
  {
    "label": "zeroFillTo()",
    "kind": "Method",
    "detail": "Function (private : using Precision::Precision ; class Precision ; } ; class U_I18N_API IntegerWidth : public UMemory { public : IntegerWidth)",
    "insertText": "zeroFillTo(int32_t minInt)"
  },
  {
    "label": "truncateAt()",
    "kind": "Method",
    "detail": "Function (IntegerWidth)",
    "insertText": "truncateAt(int32_t maxInt)"
  },
  {
    "label": "IntegerWidth()",
    "kind": "Method",
    "detail": "Function (private : union { struct { impl::digits_t fMinInt ; impl::digits_t fMaxInt ; bool fFormatFailIfMoreThanMaxDigits ; } minMaxInt ; UErrorCode errorCode ; } fUnion ; bool fHasError = false ;)",
    "insertText": "IntegerWidth(impl::digits_t minInt, impl::digits_t maxInt, bool formatFailIfMoreThanMaxDigits)"
  },
  {
    "label": "IntegerWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegerWidth(UErrorCode errorCode)"
  },
  {
    "label": "IntegerWidth()",
    "kind": "Method",
    "detail": "Function (fUnion . errorCode = errorCode ; fHasError = true ; })",
    "insertText": "IntegerWidth()"
  },
  {
    "label": "standard()",
    "kind": "Method",
    "detail": "Function (fUnion . minMaxInt . fMinInt = - 1 ; } IntegerWidth)",
    "insertText": "standard()"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (status = fUnion . errorCode ; return TRUE ; } return FALSE ; } void)",
    "insertText": "apply(impl::DecimalQuantity &quantity, UErrorCode &status)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const IntegerWidth& other)"
  },
  {
    "label": "none()",
    "kind": "Method",
    "detail": "Function (struct impl::MacroProps ; struct impl::MicroProps ; class impl::NumberFormatterImpl ; class impl::NumberPropertyMapper ; class impl::GeneratorHelpers ; } ; class U_I18N_API Scale : public UMemory { public : Scale)",
    "insertText": "none()"
  },
  {
    "label": "powerOfTen()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "powerOfTen(int32_t power)"
  },
  {
    "label": "byDecimal()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDecimal(StringPiece multiplicand)"
  },
  {
    "label": "byDouble()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDouble(double multiplicand)"
  },
  {
    "label": "byDoubleAndPowerOfTen()",
    "kind": "Method",
    "detail": "Function (Scale)",
    "insertText": "byDoubleAndPowerOfTen(double multiplicand, int32_t power)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(const Scale& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Scale&)",
    "insertText": "operator(const Scale& other)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(Scale&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Scale&)",
    "insertText": "operator(Scale&& src)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Scale()"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "Scale(int32_t magnitude, impl::DecNum* arbitraryToAdopt)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (# endif private : int32_t fMagnitude ; impl::DecNum* fArbitrary ; UErrorCode fError ;)",
    "insertText": "Scale(UErrorCode error) : fMagnitude(0), fArbitrary(nullptr), fError(error)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Scale() : fMagnitude(0), fArbitrary(nullptr), fError(U_ZERO_ERROR)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "applyTo()",
    "kind": "Method",
    "detail": "Function (status = fError ; return TRUE ; } return FALSE ; } void)",
    "insertText": "applyTo(impl::DecimalQuantity& quantity)"
  },
  {
    "label": "applyReciprocalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyReciprocalTo(impl::DecimalQuantity& quantity)"
  },
  {
    "label": "SymbolsWrapper()",
    "kind": "Method",
    "detail": "Function (struct impl::MacroProps ; struct impl::MicroProps ; class impl::NumberFormatterImpl ; class impl::MultiplierFormatHandler ; class impl::GeneratorHelpers ; class::icu::numparse::impl::NumberParserImpl ; class::icu::numparse::impl::MultiplierParseHandler ; } ; namespace impl { class U_I18N_API SymbolsWrapper : public UMemory { public :)",
    "insertText": "SymbolsWrapper() : fType(SYMPTR_NONE)"
  },
  {
    "label": "SymbolsWrapper()",
    "kind": "Method",
    "detail": "Function (nullptr } { })",
    "insertText": "SymbolsWrapper(const SymbolsWrapper &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SymbolsWrapper&)",
    "insertText": "operator(const SymbolsWrapper &other)"
  },
  {
    "label": "SymbolsWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SymbolsWrapper(SymbolsWrapper&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SymbolsWrapper&)",
    "insertText": "operator(SymbolsWrapper&& src)"
  },
  {
    "label": "SymbolsWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SymbolsWrapper()"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "setTo(const DecimalFormatSymbols &dfs)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTo(const NumberingSystem *ns)"
  },
  {
    "label": "isDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDecimalFormatSymbols()"
  },
  {
    "label": "isNumberingSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNumberingSystem()"
  },
  {
    "label": "getDecimalFormatSymbols()",
    "kind": "Method",
    "detail": "Function (const DecimalFormatSymbols*)",
    "insertText": "getDecimalFormatSymbols()"
  },
  {
    "label": "getNumberingSystem()",
    "kind": "Method",
    "detail": "Function (const NumberingSystem*)",
    "insertText": "getNumberingSystem()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (status = U_MEMORY_ALLOCATION_ERROR ; return TRUE ; } else)",
    "insertText": "if(fType == SYMPTR_NS && fPtr.ns == nullptr)"
  },
  {
    "label": "doCopyFrom()",
    "kind": "Method",
    "detail": "Function (status = U_MEMORY_ALLOCATION_ERROR ; return TRUE ; } return FALSE ; } private : enum SymbolsPointerType { SYMPTR_NONE,SYMPTR_DFS,SYMPTR_NS } fType ; union { const DecimalFormatSymbols* dfs ; const NumberingSystem* ns ; } fPtr ; void)",
    "insertText": "doCopyFrom(const SymbolsWrapper &other)"
  },
  {
    "label": "doMoveFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doMoveFrom(SymbolsWrapper&& src)"
  },
  {
    "label": "doCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCleanup()"
  },
  {
    "label": "forStrategy()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API Grouper : public UMemory { public : # ifndef Grouper)",
    "insertText": "forStrategy(UNumberGroupingStrategy grouping)"
  },
  {
    "label": "forProperties()",
    "kind": "Method",
    "detail": "Function (Grouper)",
    "insertText": "forProperties(const DecimalFormatProperties& properties)"
  },
  {
    "label": "Grouper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grouper(int16_t grouping1, int16_t grouping2, int16_t minGrouping, UNumberGroupingStrategy strategy) : fGrouping1(grouping1), fGrouping2(grouping2), fMinGrouping(minGrouping), fStrategy(strategy)"
  },
  {
    "label": "getPrimary()",
    "kind": "Method",
    "detail": "Function (} # endif int16_t)",
    "insertText": "getPrimary()"
  },
  {
    "label": "getSecondary()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "getSecondary()"
  },
  {
    "label": "Grouper()",
    "kind": "Method",
    "detail": "Function (private : int16_t fGrouping1 ; int16_t fGrouping2 ; int16_t fMinGrouping ; UNumberGroupingStrategy fStrategy ;)",
    "insertText": "Grouper() : fGrouping1(-3)"
  },
  {
    "label": "groupAtPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "groupAtPosition(int32_t position, const impl::DecimalQuantity &value)"
  },
  {
    "label": "codePoints()",
    "kind": "Method",
    "detail": "Function (Padder)",
    "insertText": "codePoints(UChar32 cp, int32_t targetWidth, UNumberFormatPadPosition position)"
  },
  {
    "label": "Padder()",
    "kind": "Method",
    "detail": "Function (private : UChar32 fWidth ; union { struct { int32_t fCp ; UNumberFormatPadPosition fPosition ; } padding ; UErrorCode errorCode ; } fUnion ;)",
    "insertText": "Padder(UChar32 cp, int32_t width, UNumberFormatPadPosition position)"
  },
  {
    "label": "Padder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Padder(int32_t width)"
  },
  {
    "label": "Padder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Padder(UErrorCode errorCode) : fWidth(-3)"
  },
  {
    "label": "Padder()",
    "kind": "Method",
    "detail": "Function (fUnion . errorCode = errorCode ; })",
    "insertText": "Padder() : fWidth(-2)"
  },
  {
    "label": "notation()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> class U_I18N_API NumberFormatterSettings { public : Derived)",
    "insertText": "notation(const Notation &notation)"
  },
  {
    "label": "unit()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "unit(const icu::MeasureUnit &unit)"
  },
  {
    "label": "adoptUnit()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "adoptUnit(icu::MeasureUnit *unit)"
  },
  {
    "label": "perUnit()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "perUnit(const icu::MeasureUnit &perUnit)"
  },
  {
    "label": "adoptPerUnit()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "adoptPerUnit(icu::MeasureUnit *perUnit)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "precision(const Precision& precision)"
  },
  {
    "label": "roundingMode()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "roundingMode(UNumberFormatRoundingMode roundingMode)"
  },
  {
    "label": "grouping()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "grouping(UNumberGroupingStrategy strategy)"
  },
  {
    "label": "integerWidth()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "integerWidth(const IntegerWidth &style)"
  },
  {
    "label": "symbols()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "symbols(const DecimalFormatSymbols &symbols)"
  },
  {
    "label": "adoptSymbols()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "adoptSymbols(NumberingSystem *symbols)"
  },
  {
    "label": "unitWidth()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "unitWidth(UNumberUnitWidth width)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "sign(UNumberSignDisplay style)"
  },
  {
    "label": "decimal()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "decimal(UNumberDecimalSeparatorDisplay style)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "scale(const Scale &scale)"
  },
  {
    "label": "padding()",
    "kind": "Method",
    "detail": "Function (# ifndef Derived)",
    "insertText": "padding(const impl::Padder &padder)"
  },
  {
    "label": "threshold()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "threshold(int32_t threshold)"
  },
  {
    "label": "macros()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "macros(const impl::MacroProps& macros)"
  },
  {
    "label": "macros()",
    "kind": "Method",
    "detail": "Function (Derived)",
    "insertText": "macros(impl::MacroProps&& macros)"
  },
  {
    "label": "toSkeleton()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString)",
    "insertText": "toSkeleton(UErrorCode& status)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (LocalPointer<Derived>)",
    "insertText": "clone()"
  },
  {
    "label": "copyErrorTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "copyErrorTo(UErrorCode &outErrorCode)"
  },
  {
    "label": "NumberFormatterSettings()",
    "kind": "Method",
    "detail": "Function (} private : impl::MacroProps fMacros ;)",
    "insertText": "NumberFormatterSettings()"
  },
  {
    "label": "locale()",
    "kind": "Method",
    "detail": "Function (class impl::NumberRangeFormatterImpl ; } ; class U_I18N_API UnlocalizedNumberFormatter : public NumberFormatterSettings<UnlocalizedNumberFormatter>,public UMemory { public : LocalizedNumberFormatter)",
    "insertText": "locale(const icu::Locale &locale)"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberFormatter()"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberFormatter(const UnlocalizedNumberFormatter &other)"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberFormatter(UnlocalizedNumberFormatter&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter&)",
    "insertText": "operator(const UnlocalizedNumberFormatter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter&)",
    "insertText": "operator(UnlocalizedNumberFormatter&& src)"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UnlocalizedNumberFormatter(const NumberFormatterSettings<UnlocalizedNumberFormatter>& other)"
  },
  {
    "label": "UnlocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlocalizedNumberFormatter(NumberFormatterSettings<UnlocalizedNumberFormatter>&& src)"
  },
  {
    "label": "formatInt()",
    "kind": "Method",
    "detail": "Function (class NumberFormatterSettings<UnlocalizedNumberFormatter> ; class NumberFormatter ; } ; class U_I18N_API LocalizedNumberFormatter : public NumberFormatterSettings<LocalizedNumberFormatter>,public UMemory { public : FormattedNumber)",
    "insertText": "formatInt(int64_t value, UErrorCode &status)"
  },
  {
    "label": "formatDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedNumber)",
    "insertText": "formatDecimalQuantity(const impl::DecimalQuantity& dq, UErrorCode& status)"
  },
  {
    "label": "getAffixImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAffixImpl(bool isPrefix, bool isNegative, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "getCompiled()",
    "kind": "Method",
    "detail": "Function (const impl::NumberFormatterImpl*)",
    "insertText": "getCompiled()"
  },
  {
    "label": "getCallCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getCallCount()"
  },
  {
    "label": "toFormat()",
    "kind": "Method",
    "detail": "Function (# endif Format*)",
    "insertText": "toFormat(UErrorCode& status)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter()"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter(const LocalizedNumberFormatter &other)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter(LocalizedNumberFormatter&& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberFormatter&)",
    "insertText": "operator(const LocalizedNumberFormatter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberFormatter&)",
    "insertText": "operator(LocalizedNumberFormatter&& src)"
  },
  {
    "label": "formatImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "formatImpl(impl::UFormattedNumberData *results, UErrorCode &status)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (private : const impl::NumberFormatterImpl* fCompiled { nullptr } ; char fUnsafeCallCount [ 8 ] { } ;)",
    "insertText": "LocalizedNumberFormatter(const NumberFormatterSettings<LocalizedNumberFormatter>& other)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter(NumberFormatterSettings<LocalizedNumberFormatter>&& src)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter(const impl::MacroProps &macros, const Locale &locale)"
  },
  {
    "label": "LocalizedNumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalizedNumberFormatter(impl::MacroProps &&macros, const Locale &locale)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "lnfMoveHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lnfMoveHelper(LocalizedNumberFormatter&& src)"
  },
  {
    "label": "computeCompiled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeCompiled(UErrorCode& status)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (class NumberFormatterSettings<UnlocalizedNumberFormatter> ; class NumberFormatterSettings<LocalizedNumberFormatter> ; class UnlocalizedNumberFormatter ; } ; class U_I18N_API FormattedNumber : public UMemory,public FormattedValue { public :)",
    "insertText": "FormattedNumber() : fData(nullptr), fErrorCode(U_INVALID_STATE_ERROR)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedNumber(FormattedNumber&& src)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormattedNumber()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toString(UErrorCode& status)"
  },
  {
    "label": "toTempString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toTempString(UErrorCode& status)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (Appendable&)",
    "insertText": "appendTo(Appendable& appendable, UErrorCode& status)"
  },
  {
    "label": "nextPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextPosition(ConstrainedFieldPosition& cfpos, UErrorCode& status)"
  },
  {
    "label": "nextFieldPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextFieldPosition(FieldPosition& fieldPosition, UErrorCode& status)"
  },
  {
    "label": "getAllFieldPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllFieldPositions(FieldPositionIterator &iterator, UErrorCode &status)"
  },
  {
    "label": "getDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "getDecimalQuantity(impl::DecimalQuantity& output, UErrorCode& status)"
  },
  {
    "label": "getAllFieldPositionsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllFieldPositionsImpl(FieldPositionIteratorHandler& fpih, UErrorCode& status)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (# endif private : const impl::UFormattedNumberData* fData ; UErrorCode fErrorCode ;)",
    "insertText": "FormattedNumber(impl::UFormattedNumberData *results) : fData(results), fErrorCode(U_ZERO_ERROR)"
  },
  {
    "label": "FormattedNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedNumber(UErrorCode errorCode) : fData(nullptr), fErrorCode(errorCode)"
  },
  {
    "label": "with()",
    "kind": "Method",
    "detail": "Function (} class LocalizedNumberFormatter ; struct impl::UFormattedNumberImpl ; } ; class U_I18N_API NumberFormatter final { public : UnlocalizedNumberFormatter)",
    "insertText": "with()"
  },
  {
    "label": "withLocale()",
    "kind": "Method",
    "detail": "Function (LocalizedNumberFormatter)",
    "insertText": "withLocale(const Locale &locale)"
  },
  {
    "label": "forSkeleton()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter)",
    "insertText": "forSkeleton(const UnicodeString& skeleton, UErrorCode& status)"
  },
  {
    "label": "forSkeleton()",
    "kind": "Method",
    "detail": "Function (UnlocalizedNumberFormatter)",
    "insertText": "forSkeleton(const UnicodeString& skeleton, UParseError& perror, UErrorCode& status)"
  },
  {
    "label": "NumberFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumberFormatter()"
  }
]