[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_ATOMIC_FLAG_H_ # define BASE_SYNCHRONIZATION_ATOMIC_FLAG_H_ # include<stdint . h> # include<atomic> # include \" base / base_export . h \" # include \" base / sequence_checker . h \" namespace base { class BASE_EXPORT AtomicFlag { public :)",
    "insertText": "AtomicFlag()"
  },
  {
    "label": "AtomicFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicFlag(const AtomicFlag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AtomicFlag&)",
    "insertText": "operator(const AtomicFlag&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "UnsafeResetForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsafeResetForTesting()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<uint_fast8_t> flag_ { 0 } ;)",
    "insertText": "SEQUENCE_CHECKER(set_sequence_checker_)"
  }
]