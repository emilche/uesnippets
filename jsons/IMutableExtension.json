[
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / Extensions / HierarchicalCacheExtension . h \" namespace UE { namespace Sequencer { class IMutableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IMutableExtension) virtual ~IMutableExtension()"
  },
  {
    "label": "IsMuted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMuted()"
  },
  {
    "label": "SetIsMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsMuted(bool bIsMuted)"
  },
  {
    "label": "IsInheritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInheritable()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (class FMuteStateCacheExtension : public TFlagStateCacheExtension<ECachedMuteState> { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FMuteStateCacheExtension)"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (private : ECachedMuteState)",
    "insertText": "ComputeFlagsForModel(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(const FViewModelPtr& ViewModel, ECachedMuteState& OutThisModelFlags, ECachedMuteState& OutPropagateToParentFlags)"
  }
]