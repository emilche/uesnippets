[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SequenceCheckerDoNothing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceCheckerDoNothing"
  },
  {
    "label": "SequenceCheckerImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SYNCHRONIZATION_SEQUENCE_CHECKER_INTERNAL_H_ # define RTC_BASE_SYNCHRONIZATION_SEQUENCE_CHECKER_INTERNAL_H_ # include<string> # include<type_traits> # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / platform_thread_types . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace webrtc_sequence_checker_internal { class RTC_EXPORT SequenceCheckerImpl { public :)",
    "insertText": "SequenceCheckerImpl()"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "ExpectationToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ExpectationToString()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex lock_ ; bool attached_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "ExpectationToString()",
    "kind": "Method",
    "detail": "Function (} } ; template<ThreadLikeObject> std::enable_if_t<std::is_base_of_v<SequenceCheckerImpl,ThreadLikeObject>,std::string>)",
    "insertText": "ExpectationToString(const ThreadLikeObject* checker)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "string()"
  },
  {
    "label": "ExpectationToString()",
    "kind": "Method",
    "detail": "Function (# endif } template<ThreadLikeObject> std::enable_if_t<! std::is_base_of_v<SequenceCheckerImpl,ThreadLikeObject>,std::string>)",
    "insertText": "ExpectationToString(const ThreadLikeObject*)"
  }
]