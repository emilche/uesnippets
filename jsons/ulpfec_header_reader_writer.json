[
  {
    "label": "UlpfecHeaderReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecHeaderReader"
  },
  {
    "label": "UlpfecHeaderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecHeaderWriter"
  },
  {
    "label": "UlpfecHeaderReader()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_ULPFEC_HEADER_READER_WRITER_H_ # define MODULES_RTP_RTCP_SOURCE_ULPFEC_HEADER_READER_WRITER_H_ # include<stddef . h> # include<stdint . h> # include \" modules / rtp_rtcp / source / forward_error_correction . h \" namespace webrtc { class UlpfecHeaderReader : public FecHeaderReader { public :)",
    "insertText": "UlpfecHeaderReader()"
  },
  {
    "label": "ReadFecHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFecHeader(ForwardErrorCorrection::ReceivedFecPacket* fec_packet)"
  },
  {
    "label": "UlpfecHeaderWriter()",
    "kind": "Method",
    "detail": "Function (} ; class UlpfecHeaderWriter : public FecHeaderWriter { public :)",
    "insertText": "UlpfecHeaderWriter()"
  },
  {
    "label": "MinPacketMaskSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MinPacketMaskSize(const uint8_t* packet_mask, size_t packet_mask_size)"
  },
  {
    "label": "FecHeaderSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FecHeaderSize(size_t packet_mask_row_size)"
  },
  {
    "label": "FinalizeFecHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFecHeader(uint32_t media_ssrc, uint16_t seq_num_base, const uint8_t* packet_mask, size_t packet_mask_size, ForwardErrorCorrection::Packet* fec_packet)"
  }
]