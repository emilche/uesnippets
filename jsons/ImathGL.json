[
  {
    "label": "GLPushMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GLPushMatrix"
  },
  {
    "label": "GLPushAttrib",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GLPushAttrib"
  },
  {
    "label": "GLBegin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GLBegin"
  },
  {
    "label": "glVertex()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHGL_H # define INCLUDED_IMATHGL_H # include<GL / gl . h> # include \" ImathFun . h \" # include \" ImathMatrix . h \" # include \" ImathNamespace . h \" # include \" ImathVec . h \" void)",
    "insertText": "glVertex(const IMATH_INTERNAL_NAMESPACE::V3f& v)"
  },
  {
    "label": "glVertex3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertex3f(v.x, v.y, v.z)"
  },
  {
    "label": "glVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glVertex(const IMATH_INTERNAL_NAMESPACE::V2f& v)"
  },
  {
    "label": "glVertex2f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertex2f(v.x, v.y)"
  },
  {
    "label": "glNormal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glNormal(const IMATH_INTERNAL_NAMESPACE::V3f& n)"
  },
  {
    "label": "glNormal3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glNormal3f(n.x, n.y, n.z)"
  },
  {
    "label": "glColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glColor(const IMATH_INTERNAL_NAMESPACE::V3f& c)"
  },
  {
    "label": "glColor3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glColor3f(c.x, c.y, c.z)"
  },
  {
    "label": "glTranslate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glTranslate(const IMATH_INTERNAL_NAMESPACE::V3f& t)"
  },
  {
    "label": "glTranslatef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTranslatef(t.x, t.y, t.z)"
  },
  {
    "label": "glTexCoord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glTexCoord(const IMATH_INTERNAL_NAMESPACE::V2f& t)"
  },
  {
    "label": "glTexCoord2f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexCoord2f(t.x, t.y)"
  },
  {
    "label": "glDisableTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glDisableTexture()"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glActiveTexture(GL_TEXTURE1)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindTexture(GL_TEXTURE_2D, 0)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDisable(GL_TEXTURE_2D)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glActiveTexture(GL_TEXTURE0)"
  },
  {
    "label": "badFloat()",
    "kind": "Method",
    "detail": "Function (} namespace { const float GL_FLOAT_MAX = 1 . 8 e + 1 9 ; bool)",
    "insertText": "badFloat(float f)"
  },
  {
    "label": "throwBadMatrix()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "throwBadMatrix(const IMATH_INTERNAL_NAMESPACE::M44f& m)"
  },
  {
    "label": "glMultMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glMultMatrix(const IMATH_INTERNAL_NAMESPACE::M44f& m)"
  },
  {
    "label": "throwBadMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "throwBadMatrix(m)"
  },
  {
    "label": "glMultMatrixf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glMultMatrixf((GLfloat*) m[0])"
  },
  {
    "label": "glMultMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glMultMatrix(const IMATH_INTERNAL_NAMESPACE::M44f* m)"
  },
  {
    "label": "throwBadMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "throwBadMatrix(*m)"
  },
  {
    "label": "glMultMatrixf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glMultMatrixf((GLfloat*) (*m)[0])"
  },
  {
    "label": "glLoadMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glLoadMatrix(const IMATH_INTERNAL_NAMESPACE::M44f& m)"
  },
  {
    "label": "glLoadMatrixf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glLoadMatrixf((GLfloat*) m[0])"
  },
  {
    "label": "glLoadMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "glLoadMatrix(const IMATH_INTERNAL_NAMESPACE::M44f* m)"
  },
  {
    "label": "glLoadMatrixf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glLoadMatrixf((GLfloat*) (*m)[0])"
  },
  {
    "label": "GLPushMatrix()",
    "kind": "Method",
    "detail": "Function (} IMATH_INTERNAL_NAMESPACE_HEADER_ENTER class GLPushMatrix { public :)",
    "insertText": "GLPushMatrix()"
  },
  {
    "label": "glPushMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushMatrix()"
  },
  {
    "label": "glPopMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopMatrix()"
  },
  {
    "label": "GLPushAttrib()",
    "kind": "Method",
    "detail": "Function (} } ; class GLPushAttrib { public :)",
    "insertText": "GLPushAttrib(GLbitfield mask)"
  },
  {
    "label": "glPushAttrib()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushAttrib(mask)"
  },
  {
    "label": "GLPushAttrib()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GLPushAttrib()"
  },
  {
    "label": "glPopAttrib()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopAttrib()"
  },
  {
    "label": "GLBegin()",
    "kind": "Method",
    "detail": "Function (} } ; class GLBegin { public :)",
    "insertText": "GLBegin(GLenum mode)"
  },
  {
    "label": "glBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBegin(mode)"
  },
  {
    "label": "GLBegin()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GLBegin()"
  },
  {
    "label": "glEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEnd()"
  }
]