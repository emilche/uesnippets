[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "CastToCStr()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_BUILDLIBCALLS_H # define LLVM_TRANSFORMS_UTILS_BUILDLIBCALLS_H # include \" llvm / IR / IRBuilder . h \" namespace llvm { class Value ; class DataLayout ; class TargetLibraryInfo ; Value*)",
    "insertText": "CastToCStr(Value *V, IRBuilder<> &B)"
  },
  {
    "label": "EmitStrLen()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrLen(Value *Ptr, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitStrNLen()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrNLen(Value *Ptr, Value *MaxLen, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitStrChr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrChr(Value *Ptr, char C, IRBuilder<> &B, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitStrNCmp()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrNCmp(Value *Ptr1, Value *Ptr2, Value *Len, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitStrCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrCpy(Value *Dst, Value *Src, IRBuilder<> &B, const TargetLibraryInfo *TLI, StringRef Name = \"strcpy\")"
  },
  {
    "label": "EmitStrNCpy()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitStrNCpy(Value *Dst, Value *Src, Value *Len, IRBuilder<> &B, const TargetLibraryInfo *TLI, StringRef Name = \"strncpy\")"
  },
  {
    "label": "EmitMemCpyChk()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitMemCpyChk(Value *Dst, Value *Src, Value *Len, Value *ObjSize, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitMemChr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitMemChr(Value *Ptr, Value *Val, Value *Len, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitMemCmp()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitMemCmp(Value *Ptr1, Value *Ptr2, Value *Len, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitUnaryFloatFnCall()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitUnaryFloatFnCall(Value *Op, StringRef Name, IRBuilder<> &B, const AttributeSet &Attrs)"
  },
  {
    "label": "EmitBinaryFloatFnCall()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitBinaryFloatFnCall(Value *Op1, Value *Op2, StringRef Name, IRBuilder<> &B, const AttributeSet &Attrs)"
  },
  {
    "label": "EmitPutChar()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitPutChar(Value *Char, IRBuilder<> &B, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitPutS()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitPutS(Value *Str, IRBuilder<> &B, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitFPutC()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitFPutC(Value *Char, Value *File, IRBuilder<> &B, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitFPutS()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitFPutS(Value *Str, Value *File, IRBuilder<> &B, const TargetLibraryInfo *TLI)"
  },
  {
    "label": "EmitFWrite()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "EmitFWrite(Value *Ptr, Value *Size, Value *File, IRBuilder<> &B, const DataLayout &DL, const TargetLibraryInfo *TLI)"
  }
]