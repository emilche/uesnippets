[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "HouseholderSequenceShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HouseholderSequenceShape"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "hseq_side_dependent_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hseq_side_dependent_impl"
  },
  {
    "label": "matrix_type_times_scalar_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_type_times_scalar_type"
  },
  {
    "label": "HouseholderSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HouseholderSequence"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "essentialVector()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_HOUSEHOLDER_SEQUENCE_H # define EIGEN_HOUSEHOLDER_SEQUENCE_H namespace Eigen { namespace internal { template<VectorsType,CoeffsType,int Side> struct traits<HouseholderSequence<VectorsType,CoeffsType,Side>> { typedef VectorsType::Scalar Scalar ; typedef VectorsType::StorageIndex StorageIndex ; typedef VectorsType::StorageKind StorageKind ; enum { RowsAtCompileTime = Side = = OnTheLeft ? traits<VectorsType>::RowsAtCompileTime : traits<VectorsType>::ColsAtCompileTime,ColsAtCompileTime = RowsAtCompileTime,MaxRowsAtCompileTime = Side = = OnTheLeft ? traits<VectorsType>::MaxRowsAtCompileTime : traits<VectorsType>::MaxColsAtCompileTime,MaxColsAtCompileTime = MaxRowsAtCompileTime,Flags = 0 } ; } ; struct HouseholderSequenceShape { } ; template<VectorsType,CoeffsType,int Side> struct evaluator_traits<HouseholderSequence<VectorsType,CoeffsType,Side>> : public evaluator_traits_base<HouseholderSequence<VectorsType,CoeffsType,Side>> { typedef HouseholderSequenceShape Shape ; } ; template<VectorsType,CoeffsType,int Side> struct hseq_side_dependent_impl { typedef Block<const VectorsType,Dynamic,1> EssentialVectorType ; typedef HouseholderSequence<VectorsType,CoeffsType,OnTheLeft> HouseholderSequenceType ; EIGEN_DEVICE_FUNC const EssentialVectorType)",
    "insertText": "essentialVector(const HouseholderSequenceType& h, Index k)"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (Index start = k + 1 + h . m_shift ; return Block<const VectorsType,)",
    "insertText": "Dynamic(h.m_vectors, start, k, h.rows()-start, 1)"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (Index start = k + 1 + h . m_shift ; return Block<const VectorsType,1,)",
    "insertText": "Dynamic(h.m_vectors, k, start, 1, h.rows()-start).transpose()"
  },
  {
    "label": "HouseholderSequence()",
    "kind": "Method",
    "detail": "Function (} } ; template<OtherScalarType,MatrixType> struct matrix_type_times_scalar_type { typedef ScalarBinaryOpTraits<OtherScalarType,MatrixType::Scalar>::ReturnType ResultScalar ; typedef Matrix<ResultScalar,MatrixType::RowsAtCompileTime,MatrixType::ColsAtCompileTime,0,MatrixType::MaxRowsAtCompileTime,MatrixType::MaxColsAtCompileTime> Type ; } ; } template<VectorsType,CoeffsType,int Side> class HouseholderSequence : public EigenBase<HouseholderSequence<VectorsType,CoeffsType,Side>> { typedef internal::hseq_side_dependent_impl<VectorsType,CoeffsType,Side>::EssentialVectorType EssentialVectorType ; public : enum { RowsAtCompileTime = internal::traits<HouseholderSequence>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<HouseholderSequence>::ColsAtCompileTime,MaxRowsAtCompileTime = internal::traits<HouseholderSequence>::MaxRowsAtCompileTime,MaxColsAtCompileTime = internal::traits<HouseholderSequence>::MaxColsAtCompileTime } ; typedef internal::traits<HouseholderSequence>::Scalar Scalar ; typedef HouseholderSequence<internal::conditional<NumTraits<Scalar>::IsComplex,internal::remove_all<VectorsType::ConjugateReturnType>::type,VectorsType>::type,internal::conditional<NumTraits<Scalar>::IsComplex,internal::remove_all<CoeffsType::ConjugateReturnType>::type,CoeffsType>::type,Side> ConjugateReturnType ; typedef HouseholderSequence<VectorsType,internal::conditional<NumTraits<Scalar>::IsComplex,internal::remove_all<CoeffsType::ConjugateReturnType>::type,CoeffsType>::type,Side> AdjointReturnType ; typedef HouseholderSequence<internal::conditional<NumTraits<Scalar>::IsComplex,internal::remove_all<VectorsType::ConjugateReturnType>::type,VectorsType>::type,CoeffsType,Side> TransposeReturnType ; typedef HouseholderSequence<internal::add_const<VectorsType>::type,internal::add_const<CoeffsType>::type,Side> ConstHouseholderSequence ; EIGEN_DEVICE_FUNC)",
    "insertText": "HouseholderSequence(const VectorsType& v, const CoeffsType& h) : m_vectors(v), m_coeffs(h), m_reverse(false), m_length(v.diagonalSize()), m_shift(0)"
  },
  {
    "label": "HouseholderSequence()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "HouseholderSequence(const HouseholderSequence& other) : m_vectors(other.m_vectors), m_coeffs(other.m_coeffs), m_reverse(other.m_reverse), m_length(other.m_length), m_shift(other.m_shift)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "essentialVector()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const EssentialVectorType)",
    "insertText": "essentialVector(Index k)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(k >= 0 && k < m_length)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} TransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (} ConjugateReturnType)",
    "insertText": "conjugate()"
  },
  {
    "label": "conjugateIf()",
    "kind": "Method",
    "detail": "Function (} template<bool Cond> EIGEN_DEVICE_FUNC internal::conditional<Cond,ConjugateReturnType,ConstHouseholderSequence>::type)",
    "insertText": "conjugateIf()"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<Cond,ConjugateReturnType,ConstHouseholderSequence>::type ReturnType ; return)",
    "insertText": "ReturnType(m_vectors.template conjugateIf<Cond>(), m_coeffs.template conjugateIf<Cond>())"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} AdjointReturnType)",
    "insertText": "inverse()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<DestType> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(DestType& dst)"
  },
  {
    "label": "workspace()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,DestType::RowsAtCompileTime,1,AutoAlign | ColMajor,DestType::MaxRowsAtCompileTime,1>)",
    "insertText": "workspace(rows())"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(dst, workspace)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest,Workspace> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Dest& dst, Workspace& workspace)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (workspace .)",
    "insertText": "resize(rows())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index vecs = m_length ;)",
    "insertText": "if(internal::is_same_dense(dst,m_vectors))"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "diagonal().setOnes()"
  },
  {
    "label": "StrictlyUpper()",
    "kind": "Method",
    "detail": "Function (dst . template triangularView<)",
    "insertText": "StrictlyUpper().setZero()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "col(k).tail(rows()-k-1).setZero()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index k = 0; k<cols()-vecs ; ++k) dst.col(k).tail(rows()-k-1).setZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(m_length>BlockSize)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setIdentity(rows(), rows())"
  },
  {
    "label": "applyThisOnTheRight()",
    "kind": "Method",
    "detail": "Function (} } } template<Dest> void)",
    "insertText": "applyThisOnTheRight(Dest& dst)"
  },
  {
    "label": "workspace()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,1,Dest::RowsAtCompileTime,RowMajor,1,Dest::MaxRowsAtCompileTime>)",
    "insertText": "workspace(dst.rows())"
  },
  {
    "label": "applyThisOnTheRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyThisOnTheRight(dst, workspace)"
  },
  {
    "label": "applyThisOnTheRight()",
    "kind": "Method",
    "detail": "Function (} template<Dest,Workspace> void)",
    "insertText": "applyThisOnTheRight(Dest& dst, Workspace& workspace)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (workspace .)",
    "insertText": "resize(dst.rows())"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (Index actual_k = m_reverse ? m_length - k - 1 : k ; dst .)",
    "insertText": "rightCols(rows()-m_shift-actual_k) .applyHouseholderOnTheRight(essentialVector(actual_k), m_coeffs.coeff(actual_k), workspace.data())"
  },
  {
    "label": "applyThisOnTheLeft()",
    "kind": "Method",
    "detail": "Function (} } template<Dest> void)",
    "insertText": "applyThisOnTheLeft(Dest& dst, bool inputIsIdentity = false)"
  },
  {
    "label": "applyThisOnTheLeft()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,1,Dest::ColsAtCompileTime,RowMajor,1,Dest::MaxColsAtCompileTime> workspace ;)",
    "insertText": "applyThisOnTheLeft(dst, workspace, inputIsIdentity)"
  },
  {
    "label": "applyThisOnTheLeft()",
    "kind": "Method",
    "detail": "Function (} template<Dest,Workspace> void)",
    "insertText": "applyThisOnTheLeft(Dest& dst, Workspace& workspace, bool inputIsIdentity = false)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index blockSize = m_length<)",
    "insertText": "Index(2*BlockSize) ? (m_length+1)/2 : Index(BlockSize)"
  },
  {
    "label": "m_reverse()",
    "kind": "Method",
    "detail": "Function (Index end =)",
    "insertText": "m_reverse(std::min)(m_length,i+blockSize)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Index k = m_reverse ?)",
    "insertText": "i(std::max)(Index(0),end-blockSize)"
  },
  {
    "label": "sub_vecs1()",
    "kind": "Method",
    "detail": "Function (Index bs = end - k ; Index start = k + m_shift ; typedef Block<internal::remove_all<VectorsType>::type,Dynamic,Dynamic> SubVectorsType ; SubVectorsType)",
    "insertText": "sub_vecs1(m_vectors.const_cast_derived(), Side==OnTheRight ? k : start, Side==OnTheRight ? start : k, Side==OnTheRight ? bs : m_vectors.rows()-start, Side==OnTheRight ? m_vectors.cols()-start : bs)"
  },
  {
    "label": "sub_vecs()",
    "kind": "Method",
    "detail": "Function (internal::conditional<Side = = OnTheRight,Transpose<SubVectorsType>,SubVectorsType&>::type)",
    "insertText": "sub_vecs(sub_vecs1)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index dstStart = dst .)",
    "insertText": "rows()-rows()"
  },
  {
    "label": "sub_dst()",
    "kind": "Method",
    "detail": "Function (Block<Dest,Dynamic,Dynamic>)",
    "insertText": "sub_dst(dst, dstStart, inputIsIdentity ? dstStart : 0, dstRows, inputIsIdentity ? dstRows : dst.cols())"
  },
  {
    "label": "apply_block_householder_on_the_left()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "apply_block_householder_on_the_left(sub_dst, sub_vecs, m_coeffs.segment(k, bs), !m_reverse)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} } else { workspace .)",
    "insertText": "resize(dst.cols())"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRightCorner(dstStart, inputIsIdentity ? dstStart : dst.cols()) .applyHouseholderOnTheLeft(essentialVector(actual_k), m_coeffs.coeff(actual_k), workspace.data())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } template<OtherDerived> internal::matrix_type_times_scalar_type<Scalar,OtherDerived>::Type)",
    "insertText": "operator(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (internal::matrix_type_times_scalar_type<Scalar,OtherDerived>::Type)",
    "insertText": "res(other.template cast<typename internal::matrix_type_times_scalar_type<Scalar,OtherDerived>::ResultScalar>())"
  },
  {
    "label": "applyThisOnTheLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyThisOnTheLeft(res, internal::is_identity<OtherDerived>::value && res.rows()==res.cols())"
  },
  {
    "label": "setShift()",
    "kind": "Method",
    "detail": "Function (m_length = length ; return* this ; } EIGEN_DEVICE_FUNC HouseholderSequence&)",
    "insertText": "setShift(Index shift)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (m_shift = shift ; return* this ; } EIGEN_DEVICE_FUNC Index)",
    "insertText": "length()"
  },
  {
    "label": "reverseFlag()",
    "kind": "Method",
    "detail": "Function (m_reverse = reverse ; return* this ; } bool)",
    "insertText": "reverseFlag()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (internal::matrix_type_times_scalar_type<VectorsType::Scalar,OtherDerived>::Type)",
    "insertText": "res(other.template cast<typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::ResultScalar>())"
  },
  {
    "label": "applyThisOnTheRight()",
    "kind": "Method",
    "detail": "Function (h .)",
    "insertText": "applyThisOnTheRight(res)"
  },
  {
    "label": "rightHouseholderSequence()",
    "kind": "Method",
    "detail": "Function (} template<VectorsType,CoeffsType> HouseholderSequence<VectorsType,CoeffsType,OnTheRight>)",
    "insertText": "rightHouseholderSequence(const VectorsType& v, const CoeffsType& h)"
  }
]