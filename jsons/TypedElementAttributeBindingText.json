[
  {
    "label": "FTextAttributeFormatted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextAttributeFormatted"
  },
  {
    "label": "FAttributeBinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeBinder"
  },
  {
    "label": "FPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInfo"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Elements / Common / TypedElementHandles . h \" # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" TypedElementAttributeBindingProperty . h \" namespace UE::Editor::DataStorage { class FTextAttributeFormatted { class FAttributeBinder ; public : FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FFormatArgumentValue Value)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FText ColumnType::* Variable, FFormatArgumentValue Default = {}, FName ColumnIdentifier = NAME_None)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FString ColumnType::* Variable, FFormatArgumentValue Default = {}, FName ColumnIdentifier = NAME_None)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FName ColumnType::* Variable, FFormatArgumentValue Default = {}, FName ColumnIdentifier = NAME_None)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<DataType,TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, DataType ColumnType::* Variable, const TFunction<FText(const DataType&)>& Converter, FFormatArgumentValue Default = {}, FName ColumnIdentifier = NAME_None)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (template<DataType,TDataColumnType ColumnType,FunctionType> requires Private::AttributeBinderInvocable<FunctionType,DataType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, DataType ColumnType::* Variable, FunctionType Converter, FFormatArgumentValue Default = {}, FName ColumnIdentifier = NAME_None)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (operator TAttribute<)",
    "insertText": "FText()"
  },
  {
    "label": "FTextAttributeFormatted()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTextAttributeFormatted(FTextFormat InFormat, RowHandle InTargetRow, IEditorDataStorageProvider* InDataStorage)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (struct FPropertyInfo { Private::TProperty<FText> Property ; FFormatArgumentValue Default ; FName DynamicColumnIdentifier ; } ; TMap<FString,FPropertyInfo> NamedProperties ; FTextFormat Format ; RowHandle TargetRow ; IEditorDataStorageProvider* DataStorage ; } ; template<TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FText ColumnType::* Variable, FFormatArgumentValue Default, FName ColumnIdentifier)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Private::TProperty<FText> Prop ; Prop .)",
    "insertText": "Bind(Variable)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedProperties .)",
    "insertText": "Add(MoveTemp(Name), FPropertyInfo{ .Property = MoveTemp(Prop), .Default = MoveTemp(Default), .DynamicColumnIdentifier = ColumnIdentifier})"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} template<TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, FName ColumnType::* Variable, FFormatArgumentValue Default, FName ColumnIdentifier)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (} template<DataType,TDataColumnType ColumnType> FTextAttributeFormatted&)",
    "insertText": "Arg(FString Name, DataType ColumnType::* Variable, const TFunction<FText(const DataType&)>& Converter, FFormatArgumentValue Default, FName ColumnIdentifier)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Private::TProperty<FText> Prop ; Prop .)",
    "insertText": "Bind(Variable, Converter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NamedProperties .)",
    "insertText": "Add(MoveTemp(Name), FPropertyInfo{ .Property = MoveTemp(Prop), .Default = MoveTemp(Default), .DynamicColumnIdentifier = ColumnIdentifier })"
  }
]