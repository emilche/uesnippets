[
  {
    "label": "RtcpPacketParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpPacketParser"
  },
  {
    "label": "PacketCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketCounter"
  },
  {
    "label": "ParseSinglePacket()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_RTCP_PACKET_PARSER_H_ # define TEST_RTCP_PACKET_PARSER_H_ # include<stddef . h> # include<stdint . h> # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / app . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / bye . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / common_header . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / extended_reports . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / fir . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / loss_notification . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / nack . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / pli . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / rapid_resync_request . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / receiver_report . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / remb . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / sdes . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / sender_report . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmbn . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmbr . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / transport_feedback . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace test { template<Packet> bool)",
    "insertText": "ParseSinglePacket(const uint8_t* buffer, size_t size, Packet* packet)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (rtcp::CommonHeader header ;)",
    "insertText": "RTC_CHECK(header.Parse(buffer, size))"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(size, header.NextPacket() - buffer)"
  },
  {
    "label": "ParseSinglePacket()",
    "kind": "Method",
    "detail": "Function (} template<Packet> bool)",
    "insertText": "ParseSinglePacket(rtc::ArrayView<const uint8_t> buffer, Packet* packet)"
  },
  {
    "label": "num_packets()",
    "kind": "Method",
    "detail": "Function (} class RtcpPacketParser { public : template<TypedRtcpPacket> class PacketCounter : public TypedRtcpPacket { public : int)",
    "insertText": "num_packets()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Parse(const rtcp::CommonHeader& header, uint32_t* sender_ssrc)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (const bool result =)",
    "insertText": "Parse(header)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + num_packets_ ;)",
    "insertText": "if(*sender_ssrc == 0) *sender_ssrc = TypedRtcpPacket::sender_ssrc()"
  },
  {
    "label": "RtcpPacketParser()",
    "kind": "Method",
    "detail": "Function (} return result ; } private : int num_packets_ = 0 ; } ;)",
    "insertText": "RtcpPacketParser()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const void* packet, size_t packet_len)"
  },
  {
    "label": "app()",
    "kind": "Method",
    "detail": "Function (PacketCounter<rtcp::App>*)",
    "insertText": "app()"
  }
]