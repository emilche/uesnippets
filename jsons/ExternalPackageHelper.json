[
  {
    "label": "FExternalPackageHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalPackageHelper"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRenameExternalObjectsHelperContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" UObject / GarbageCollectionGlobals . h \" # include \" UObject / LinkerLoad . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectThreadContext . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetRegistry / AssetRegistryModule . h \" # include \" Misc / ArchiveMD5 . h \" # include \" Misc / PackageName . h \" # include \" Misc / PackagePath . h \" # include \" Delegates / DelegateCombinations . h \" # include \" WorldPartition / DataLayer / DataLayerInstanceProviderInterface . h \" # include \" WorldPartition / DataLayer / ExternalDataLayerInstance . h \" # include \" WorldPartition / DataLayer / ExternalDataLayerAsset . h \" # include \" WorldPartition / DataLayer / ExternalDataLayerHelper . h \" # include \" Engine / Level . h \" # include \" UObject / CoreRedirects . h \" class FExternalPackageHelper { public : class FRenameExternalObjectsHelperContext { public :)",
    "insertText": "FRenameExternalObjectsHelperContext()"
  },
  {
    "label": "FRenameExternalObjectsHelperContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenameExternalObjectsHelperContext(FRenameExternalObjectsHelperContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRenameExternalObjectsHelperContext&)",
    "insertText": "operator(FRenameExternalObjectsHelperContext&)"
  },
  {
    "label": "FRenameExternalObjectsHelperContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenameExternalObjectsHelperContext(const UObject* SourceObject, ERenameFlags Flags)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (private : const UObject* OldObject = nullptr ; const UPackage* SourcePackage = nullptr ; } ;)",
    "insertText": "DECLARE_EVENT_TwoParams(FExternalPackageHelper, FOnObjectPackagingModeChanged, UObject*, bool)"
  },
  {
    "label": "CreateExternalPackage()",
    "kind": "Method",
    "detail": "Function (FOnObjectPackagingModeChanged OnObjectPackagingModeChanged ; UPackage*)",
    "insertText": "CreateExternalPackage(const UObject* InObjectOuter, const FString& InObjectPath, EPackageFlags InFlags = FExternalPackageHelper::GetDefaultExternalPackageFlags(), const UExternalDataLayerAsset* InExternalDataLayerAsset = nullptr)"
  },
  {
    "label": "GetDefaultExternalPackageFlags()",
    "kind": "Method",
    "detail": "Function (EPackageFlags)",
    "insertText": "GetDefaultExternalPackageFlags()"
  },
  {
    "label": "SetPackagingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackagingMode(UObject* InObject, const UObject* InObjectOuter, bool bInIsPackageExternal, bool bInShouldDirty = true, EPackageFlags InExternalPackageFlags = FExternalPackageHelper::GetDefaultExternalPackageFlags())"
  },
  {
    "label": "GetExternalObjectsPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExternalObjectsPath(const FString& InOuterPackageName, const FString& InPackageShortName = FString())"
  },
  {
    "label": "GetExternalObjectsPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExternalObjectsPath(UPackage* InPackage, const FString& InPackageShortName = FString(), bool bTryUsingPackageLoadedPath = false)"
  },
  {
    "label": "GetExternalPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExternalPackageName(const FString& InOuterPackageName, const FString& InObjectPath)"
  },
  {
    "label": "LoadObjectsFromExternalPackages()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "LoadObjectsFromExternalPackages(UObject* InOuter, TFunctionRef<void(T*)> Operation)"
  },
  {
    "label": "CheckDirty()",
    "kind": "Method",
    "detail": "Function (enum class EGetExternalSaveableObjectsFlags : uint32 { None = 0,)",
    "insertText": "CheckDirty(1 << 0)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EGetExternalSaveableObjectsFlags)"
  },
  {
    "label": "GetExternalSaveableObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExternalSaveableObjects(UObject* InOuter, TArray<UObject*>& OutObjects, EGetExternalSaveableObjectsFlags InFlags = EGetExternalSaveableObjectsFlags::CheckDirty)"
  },
  {
    "label": "GetObjectsExternalPackageFilePath()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetObjectsExternalPackageFilePath(const TArray<const UObject*>& InObjects)"
  },
  {
    "label": "CopyObjectsExternalPackageFilePathToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyObjectsExternalPackageFilePathToClipboard(const TArray<const UObject*>& InObjects)"
  },
  {
    "label": "GetSortedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSortedAssets(const FARFilter& Filter, TArray<FAssetData>& OutAssets)"
  },
  {
    "label": "DuplicateExternalPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateExternalPackages(const UObject* InObject, FObjectDuplicationParameters& InDuplicationParameters, EActorPackagingScheme ActorPackagingScheme = EActorPackagingScheme::Reduced)"
  },
  {
    "label": "GetExternalObjectPackageInstanceName()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "GetExternalObjectPackageInstanceName(const FString& OuterPackageName, const FString& ObjectPackageName)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FExternalPackageHelper::LoadObjectsFromExternalPackages)"
  },
  {
    "label": "UPackage()",
    "kind": "Method",
    "detail": "Function (UPackage* OutermostPackage = InOuter -> IsA<)",
    "insertText": "UPackage() ? CastChecked<UPackage>(InOuter) : InOuter->GetOutermostObject()->GetPackage()"
  },
  {
    "label": "GetLoadedPath()",
    "kind": "Method",
    "detail": "Function (const FString OutermostPackageName = ! OutermostPackage ->)",
    "insertText": "GetLoadedPath().IsEmpty() ? OutermostPackage->GetLoadedPath().GetPackageName() : OutermostPackage->GetName()"
  },
  {
    "label": "IDataLayerInstanceProvider()",
    "kind": "Method",
    "detail": "Function (const IDataLayerInstanceProvider* DataLayerInstanceProvider = Cast<)",
    "insertText": "IDataLayerInstanceProvider(InOuter)"
  },
  {
    "label": "GetRootExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerAsset* ExternalDataLayerAsset = DataLayerInstanceProvider ? DataLayerInstanceProvider ->)",
    "insertText": "GetRootExternalDataLayerAsset()"
  },
  {
    "label": "GetExternalDataLayerLevelRootPath()",
    "kind": "Method",
    "detail": "Function (const FString RootPath = ExternalDataLayerAsset ?)",
    "insertText": "GetExternalDataLayerLevelRootPath(ExternalDataLayerAsset, OutermostPackageName)"
  },
  {
    "label": "GetExternalObjectsPath()",
    "kind": "Method",
    "detail": "Function (const FString ExternalObjectsPath =)",
    "insertText": "GetExternalObjectsPath(RootPath)"
  },
  {
    "label": "FAssetRegistryModule()",
    "kind": "Method",
    "detail": "Function (TArray<FString> ObjectPackageNames ; IAssetRegistry& AssetRegistry = FModuleManager::LoadModuleChecked<)",
    "insertText": "FAssetRegistryModule(TEXT(\"AssetRegistry\")).Get()"
  },
  {
    "label": "ScanSynchronous()",
    "kind": "Method",
    "detail": "Function (AssetRegistry .)",
    "insertText": "ScanSynchronous({ ExternalObjectsPath }, TArray<FString>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FTopLevelAssetPath> ClassPaths ; ClassPaths .)",
    "insertText": "Add(T::StaticClass()->GetClassPathName())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<UClass*> DerivedClasses ; DerivedClasses .)",
    "insertText": "Add(T::StaticClass())"
  },
  {
    "label": "GetDerivedClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDerivedClasses(T::StaticClass(), DerivedClasses)"
  },
  {
    "label": "FindPreviousNames()",
    "kind": "Method",
    "detail": "Function (TArray<FCoreRedirectObjectName> PreviousRedirectedNames ;)",
    "insertText": "FindPreviousNames(ECoreRedirectFlags::Type_Class, FCoreRedirectObjectName(Class->GetClassPathName()), PreviousRedirectedNames)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ClassPaths .)",
    "insertText": "Add(FTopLevelAssetPath(PreviousRedirectedName.PackageName, PreviousRedirectedName.ObjectName))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } } FARFilter Filter ; Filter . bRecursivePaths = true ; Filter . bIncludeOnlyOnDiskAssets = true ; Filter . ClassPaths =)",
    "insertText": "MoveTemp(ClassPaths)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Filter . bRecursiveClasses = true ; Filter . PackagePaths .)",
    "insertText": "Add(*ExternalObjectsPath)"
  },
  {
    "label": "GetSortedAssets()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData> Assets ;)",
    "insertText": "GetSortedAssets(Filter, Assets)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ObjectPackageNames .)",
    "insertText": "Reserve(Assets.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectPackageNames .)",
    "insertText": "Add(Asset.PackageName.ToString())"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} FLinkerInstancingContext InstancingContext ; TArray<UPackage*> InstancePackages ; UPackage* OuterPackage = InOuter ->)",
    "insertText": "GetPackage()"
  },
  {
    "label": "GetLoadedPath()",
    "kind": "Method",
    "detail": "Function (FName PackageResourceName = OuterPackage ->)",
    "insertText": "GetLoadedPath().GetPackageFName()"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (const bool bInstanced = ! PackageResourceName .)",
    "insertText": "IsNone() && (PackageResourceName != OuterPackage->GetFName())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FLinkerInstancingContext* OuterInstancingContext = nullptr ;)",
    "insertText": "if(FLinkerLoad* OuterLinker = InOuter->GetLinker())"
  },
  {
    "label": "GetInstancingContext()",
    "kind": "Method",
    "detail": "Function (OuterInstancingContext =& OuterLinker ->)",
    "insertText": "GetInstancingContext()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} TSet<const UPackage*> OuterPackages ; UObject* ItObj = InOuter ;)",
    "insertText": "while(ItObj)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bIsAlreadyInSet = false ; OuterPackages .)",
    "insertText": "Add(Package, &bIsAlreadyInSet)"
  },
  {
    "label": "AddPackageMapping()",
    "kind": "Method",
    "detail": "Function (InstancingContext .)",
    "insertText": "AddPackageMapping(Package->GetLoadedPath().GetPackageFName(), Package->GetFName())"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (} ItObj = ItObj ->)",
    "insertText": "GetOuter()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const FString& ObjectPackageName : ObjectPackageNames)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FName InstancedName ; FName ObjectPackageFName =* ObjectPackageName ;)",
    "insertText": "if(OuterInstancingContext)"
  },
  {
    "label": "RemapPackage()",
    "kind": "Method",
    "detail": "Function (InstancedName = OuterInstancingContext ->)",
    "insertText": "RemapPackage(ObjectPackageFName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InstancedName == ObjectPackageFName || InstancedName.IsNone())"
  },
  {
    "label": "GetExternalObjectPackageInstanceName()",
    "kind": "Method",
    "detail": "Function (InstancedName =*)",
    "insertText": "GetExternalObjectPackageInstanceName(OuterPackage->GetName(), ObjectPackageName)"
  },
  {
    "label": "AddPackageMapping()",
    "kind": "Method",
    "detail": "Function (} InstancingContext .)",
    "insertText": "AddPackageMapping(ObjectPackageFName, InstancedName)"
  },
  {
    "label": "CreatePackage()",
    "kind": "Method",
    "detail": "Function (UPackage* InstancePackage =)",
    "insertText": "CreatePackage(*InstancedName.ToString())"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (InstancePackage ->)",
    "insertText": "SetFlags(RF_Transient)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} InstancePackages .)",
    "insertText": "Add(InstancePackage)"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} } const ELoadFlags LoadFlags = InOuter ->)",
    "insertText": "GetPackage()->HasAnyPackageFlags(PKG_PlayInEditor)"
  },
  {
    "label": "ForEachObjectWithPackage()",
    "kind": "Method",
    "detail": "Function (T* LoadedObject = nullptr ;)",
    "insertText": "ForEachObjectWithPackage(Package, [&LoadedObject](UObject* Object) { if (T* TypedObj = Cast<T>(Object)) { LoadedObject = TypedObj; return false; } return true; }, true, RF_NoFlags, EInternalObjectFlags::Unreachable)"
  },
  {
    "label": "Operation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Operation(LoadedObject)"
  }
]