[
  {
    "label": "SStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SStack"
  },
  {
    "label": "IntroSortInternal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Algo / HeapSort . h \" # include \" uLang / Common / Misc / MathUtils . h \" # include \" uLang / Common / Templates / Invoke . h \" # include \" uLang / Common / Templates / Storage . h \" namespace uLang { namespace AlgoImpl { template<T,ProjectionType,PredicateType> void)",
    "insertText": "IntroSortInternal(T* First, size_t Num, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (struct SStack { T* Min ; T* Max ; uint32_t MaxDepth ; } ;)",
    "insertText": "if(Num < 2)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (Current =* StackTop ; Loop : int32_t Count =)",
    "insertText": "int32_t(Current.Max - Current.Min + 1)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSortInternal(Current.Min, Count, Projection, Predicate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Count <= 8)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T* Max,* Item ;)",
    "insertText": "for(Max=Current.Min, Item=Current.Min+1; Item<=Current.Max; Item++)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (Max = Item ; } })",
    "insertText": "Swap(*Max, *Current.Max--)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "Swap(Current.Min[Count/2], Current.Min[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Inner . Min = Current . Min ; Inner . Max = Current . Max + 1 ;)",
    "insertText": "for(; ;)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "Swap(*Inner.Min, *Inner.Max)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Swap(*Current.Min, *Inner.Max)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Current . MaxDepth ;)",
    "insertText": "if(Inner.Max-1-Current.Min >= Current.Max-Inner.Min)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StackTop -> Min = Current . Min ; StackTop -> Max = Inner . Max - 1 ; StackTop -> MaxDepth = Current . MaxDepth ; StackTop + + ; })",
    "insertText": "if(Current.Max>Inner.Min)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StackTop -> Min = Inner . Min ; StackTop -> Max = Current . Max ; StackTop -> MaxDepth = Current . MaxDepth ; StackTop + + ; })",
    "insertText": "if(Current.Min+1<Inner.Max)"
  },
  {
    "label": "IntroSort()",
    "kind": "Method",
    "detail": "Function (Current . Max = Inner . Max - 1 ; goto Loop ; } } } } } } namespace Algo { template<RangeType> ULANG_FORCEINLINE void)",
    "insertText": "IntroSort(RangeType&& Range)"
  },
  {
    "label": "IntroSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntroSortInternal(ULangGetData(Range), ULangGetNum(Range), SIdentityFunctor(), TLess<>())"
  },
  {
    "label": "IntroSort()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "IntroSort(RangeType&& Range, PredicateType Predicate)"
  },
  {
    "label": "IntroSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntroSortInternal(ULangGetData(Range), ULangGetNum(Range), SIdentityFunctor(), uLang::Move(Predicate))"
  },
  {
    "label": "IntroSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType> ULANG_FORCEINLINE void)",
    "insertText": "IntroSortBy(RangeType&& Range, ProjectionType Projection)"
  },
  {
    "label": "IntroSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntroSortInternal(ULangGetData(Range), ULangGetNum(Range), uLang::Move(Projection), TLess<>())"
  },
  {
    "label": "IntroSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "IntroSortBy(RangeType&& Range, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "IntroSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntroSortInternal(ULangGetData(Range), ULangGetNum(Range), uLang::Move(Projection), uLang::Move(Predicate))"
  }
]