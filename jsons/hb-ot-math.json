[
  {
    "label": "hb_ot_math_glyph_variant_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_math_glyph_variant_t"
  },
  {
    "label": "hb_ot_math_glyph_part_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_math_glyph_part_t"
  },
  {
    "label": "HB_TAG()",
    "kind": "Method",
    "detail": "Function (# ifndef HB_OT_H_IN # error \" Include<hb - ot . h> instead . \" # endif # ifndef HB_OT_MATH_H # define HB_OT_MATH_H # include \" hb . h \" HB_BEGIN_DECLS # define HB_OT_TAG_MATH)",
    "insertText": "HB_TAG('M','A','T','H') #define HB_OT_MATH_SCRIPT HB_TAG('m','a','t','h')"
  },
  {
    "label": "hb_ot_math_has_data()",
    "kind": "Method",
    "detail": "Function (HB_OT_MATH_CONSTANT_SCRIPT_PERCENT_SCALE_DOWN = 0,HB_OT_MATH_CONSTANT_SCRIPT_SCRIPT_PERCENT_SCALE_DOWN = 1,HB_OT_MATH_CONSTANT_DELIMITED_SUB_FORMULA_MIN_HEIGHT = 2,HB_OT_MATH_CONSTANT_DISPLAY_OPERATOR_MIN_HEIGHT = 3,HB_OT_MATH_CONSTANT_MATH_LEADING = 4,HB_OT_MATH_CONSTANT_AXIS_HEIGHT = 5,HB_OT_MATH_CONSTANT_ACCENT_BASE_HEIGHT = 6,HB_OT_MATH_CONSTANT_FLATTENED_ACCENT_BASE_HEIGHT = 7,HB_OT_MATH_CONSTANT_SUBSCRIPT_SHIFT_DOWN = 8,HB_OT_MATH_CONSTANT_SUBSCRIPT_TOP_MAX = 9,HB_OT_MATH_CONSTANT_SUBSCRIPT_BASELINE_DROP_MIN = 1 0,HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP = 1 1,HB_OT_MATH_CONSTANT_SUPERSCRIPT_SHIFT_UP_CRAMPED = 1 2,HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MIN = 1 3,HB_OT_MATH_CONSTANT_SUPERSCRIPT_BASELINE_DROP_MAX = 1 4,HB_OT_MATH_CONSTANT_SUB_SUPERSCRIPT_GAP_MIN = 1 5,HB_OT_MATH_CONSTANT_SUPERSCRIPT_BOTTOM_MAX_WITH_SUBSCRIPT = 1 6,HB_OT_MATH_CONSTANT_SPACE_AFTER_SCRIPT = 1 7,HB_OT_MATH_CONSTANT_UPPER_LIMIT_GAP_MIN = 1 8,HB_OT_MATH_CONSTANT_UPPER_LIMIT_BASELINE_RISE_MIN = 1 9,HB_OT_MATH_CONSTANT_LOWER_LIMIT_GAP_MIN = 2 0,HB_OT_MATH_CONSTANT_LOWER_LIMIT_BASELINE_DROP_MIN = 2 1,HB_OT_MATH_CONSTANT_STACK_TOP_SHIFT_UP = 2 2,HB_OT_MATH_CONSTANT_STACK_TOP_DISPLAY_STYLE_SHIFT_UP = 2 3,HB_OT_MATH_CONSTANT_STACK_BOTTOM_SHIFT_DOWN = 2 4,HB_OT_MATH_CONSTANT_STACK_BOTTOM_DISPLAY_STYLE_SHIFT_DOWN = 2 5,HB_OT_MATH_CONSTANT_STACK_GAP_MIN = 2 6,HB_OT_MATH_CONSTANT_STACK_DISPLAY_STYLE_GAP_MIN = 2 7,HB_OT_MATH_CONSTANT_STRETCH_STACK_TOP_SHIFT_UP = 2 8,HB_OT_MATH_CONSTANT_STRETCH_STACK_BOTTOM_SHIFT_DOWN = 2 9,HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_ABOVE_MIN = 3 0,HB_OT_MATH_CONSTANT_STRETCH_STACK_GAP_BELOW_MIN = 3 1,HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_SHIFT_UP = 3 2,HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_DISPLAY_STYLE_SHIFT_UP = 3 3,HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_SHIFT_DOWN = 3 4,HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_DISPLAY_STYLE_SHIFT_DOWN = 3 5,HB_OT_MATH_CONSTANT_FRACTION_NUMERATOR_GAP_MIN = 3 6,HB_OT_MATH_CONSTANT_FRACTION_NUM_DISPLAY_STYLE_GAP_MIN = 3 7,HB_OT_MATH_CONSTANT_FRACTION_RULE_THICKNESS = 3 8,HB_OT_MATH_CONSTANT_FRACTION_DENOMINATOR_GAP_MIN = 3 9,HB_OT_MATH_CONSTANT_FRACTION_DENOM_DISPLAY_STYLE_GAP_MIN = 4 0,HB_OT_MATH_CONSTANT_SKEWED_FRACTION_HORIZONTAL_GAP = 4 1,HB_OT_MATH_CONSTANT_SKEWED_FRACTION_VERTICAL_GAP = 4 2,HB_OT_MATH_CONSTANT_OVERBAR_VERTICAL_GAP = 4 3,HB_OT_MATH_CONSTANT_OVERBAR_RULE_THICKNESS = 4 4,HB_OT_MATH_CONSTANT_OVERBAR_EXTRA_ASCENDER = 4 5,HB_OT_MATH_CONSTANT_UNDERBAR_VERTICAL_GAP = 4 6,HB_OT_MATH_CONSTANT_UNDERBAR_RULE_THICKNESS = 4 7,HB_OT_MATH_CONSTANT_UNDERBAR_EXTRA_DESCENDER = 4 8,HB_OT_MATH_CONSTANT_RADICAL_VERTICAL_GAP = 4 9,HB_OT_MATH_CONSTANT_RADICAL_DISPLAY_STYLE_VERTICAL_GAP = 5 0,HB_OT_MATH_CONSTANT_RADICAL_RULE_THICKNESS = 5 1,HB_OT_MATH_CONSTANT_RADICAL_EXTRA_ASCENDER = 5 2,HB_OT_MATH_CONSTANT_RADICAL_KERN_BEFORE_DEGREE = 5 3,HB_OT_MATH_CONSTANT_RADICAL_KERN_AFTER_DEGREE = 5 4,HB_OT_MATH_CONSTANT_RADICAL_DEGREE_BOTTOM_RAISE_PERCENT = 5 5 } hb_ot_math_constant_t ; typedef enum { HB_OT_MATH_KERN_TOP_RIGHT = 0,HB_OT_MATH_KERN_TOP_LEFT = 1,HB_OT_MATH_KERN_BOTTOM_RIGHT = 2,HB_OT_MATH_KERN_BOTTOM_LEFT = 3 } hb_ot_math_kern_t ; typedef struct hb_ot_math_glyph_variant_t { hb_codepoint_t glyph ; hb_position_t advance ; } hb_ot_math_glyph_variant_t ; typedef enum { HB_MATH_GLYPH_PART_FLAG_EXTENDER = 0 x00000001u } hb_ot_math_glyph_part_flags_t ; typedef struct hb_ot_math_glyph_part_t { hb_codepoint_t glyph ; hb_position_t start_connector_length ; hb_position_t end_connector_length ; hb_position_t full_advance ; hb_ot_math_glyph_part_flags_t flags ; } hb_ot_math_glyph_part_t ; HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_math_has_data(hb_face_t *face)"
  },
  {
    "label": "hb_ot_math_get_constant()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_position_t)",
    "insertText": "hb_ot_math_get_constant(hb_font_t *font, hb_ot_math_constant_t constant)"
  },
  {
    "label": "hb_ot_math_get_glyph_italics_correction()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_italics_correction(hb_font_t *font, hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_get_glyph_top_accent_attachment()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_top_accent_attachment(hb_font_t *font, hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_is_glyph_extended_shape()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_math_is_glyph_extended_shape(hb_face_t *face, hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_get_glyph_kerning()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_kerning(hb_font_t *font, hb_codepoint_t glyph, hb_ot_math_kern_t kern, hb_position_t correction_height)"
  },
  {
    "label": "hb_ot_math_get_glyph_variants()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_math_get_glyph_variants(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int *variants_count, hb_ot_math_glyph_variant_t *variants)"
  },
  {
    "label": "hb_ot_math_get_min_connector_overlap()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_position_t)",
    "insertText": "hb_ot_math_get_min_connector_overlap(hb_font_t *font, hb_direction_t direction)"
  },
  {
    "label": "hb_ot_math_get_glyph_assembly()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_math_get_glyph_assembly(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, unsigned int start_offset, unsigned int *parts_count, hb_ot_math_glyph_part_t *parts, hb_position_t *italics_correction)"
  }
]