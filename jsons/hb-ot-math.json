[
  {
    "label": "hb_ot_math_glyph_variant_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_math_glyph_variant_t"
  },
  {
    "label": "hb_ot_math_glyph_part_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_math_glyph_part_t"
  },
  {
    "label": "hb_ot_math_has_data()",
    "kind": "Method",
    "detail": "Function (hb_bool_t)",
    "insertText": "hb_ot_math_has_data(hb_face_t *face)"
  },
  {
    "label": "hb_ot_math_get_constant()",
    "kind": "Method",
    "detail": "Function (hb_position_t)",
    "insertText": "hb_ot_math_get_constant(hb_font_t *font,\n\t\t\t hb_ot_math_constant_t constant)"
  },
  {
    "label": "hb_ot_math_get_glyph_italics_correction()",
    "kind": "Method",
    "detail": "Function (hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_italics_correction(hb_font_t *font,\n\t\t\t\t\t hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_get_glyph_top_accent_attachment()",
    "kind": "Method",
    "detail": "Function (hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_top_accent_attachment(hb_font_t *font,\n\t\t\t\t\t    hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_is_glyph_extended_shape()",
    "kind": "Method",
    "detail": "Function (hb_bool_t)",
    "insertText": "hb_ot_math_is_glyph_extended_shape(hb_face_t *face,\n\t\t\t\t    hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_math_get_glyph_kerning()",
    "kind": "Method",
    "detail": "Function (hb_position_t)",
    "insertText": "hb_ot_math_get_glyph_kerning(hb_font_t *font,\n\t\t\t      hb_codepoint_t glyph,\n\t\t\t      hb_ot_math_kern_t kern,\n\t\t\t      hb_position_t correction_height)"
  },
  {
    "label": "hb_ot_math_get_glyph_variants()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "hb_ot_math_get_glyph_variants(hb_font_t *font,\n\t\t\t       hb_codepoint_t glyph,\n\t\t\t       hb_direction_t direction,\n\t\t\t       unsigned int start_offset,\n\t\t\t       unsigned int *variants_count, /* IN/OUT */\n\t\t\t       hb_ot_math_glyph_variant_t *variants /* OUT */)"
  },
  {
    "label": "hb_ot_math_get_min_connector_overlap()",
    "kind": "Method",
    "detail": "Function (hb_position_t)",
    "insertText": "hb_ot_math_get_min_connector_overlap(hb_font_t *font,\n\t\t\t\t      hb_direction_t direction)"
  },
  {
    "label": "hb_ot_math_get_glyph_assembly()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "hb_ot_math_get_glyph_assembly(hb_font_t *font,\n\t\t\t       hb_codepoint_t glyph,\n\t\t\t       hb_direction_t direction,\n\t\t\t       unsigned int start_offset,\n\t\t\t       unsigned int *parts_count, /* IN/OUT */\n\t\t\t       hb_ot_math_glyph_part_t *parts, /* OUT */\n\t\t\t       hb_position_t *italics_correction /* OUT */)"
  }
]