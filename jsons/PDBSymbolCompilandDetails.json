[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "PDBSymbolCompilandDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PDBSymbolCompilandDetails"
  },
  {
    "label": "PDBSymbolCompilandDetails()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_DEBUGINFO_PDB_PDBSYMBOLCOMPILANDDETAILS_H # define LLVM_DEBUGINFO_PDB_PDBSYMBOLCOMPILANDDETAILS_H # include \" PDBSymbol . h \" # include \" PDBTypes . h \" namespace llvm { class raw_ostream ; class PDBSymbolCompilandDetails : public PDBSymbol { public :)",
    "insertText": "PDBSymbolCompilandDetails(const IPDBSession &PDBSession, std::unique_ptr<IPDBRawSymbol> Symbol)"
  },
  {
    "label": "DECLARE_PDB_SYMBOL_CONCRETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_PDB_SYMBOL_CONCRETE_TYPE(PDB_SymType::CompilandDetails) void dump(PDBSymDumper &Dumper)"
  },
  {
    "label": "getFrontEndVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFrontEndVersion(VersionInfo &Version)"
  },
  {
    "label": "getFrontEndVersion()",
    "kind": "Method",
    "detail": "Function (RawSymbol ->)",
    "insertText": "getFrontEndVersion(Version)"
  },
  {
    "label": "getBackEndVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getBackEndVersion(VersionInfo &Version)"
  },
  {
    "label": "getBackEndVersion()",
    "kind": "Method",
    "detail": "Function (RawSymbol ->)",
    "insertText": "getBackEndVersion(Version)"
  },
  {
    "label": "FORWARD_SYMBOL_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FORWARD_SYMBOL_METHOD(getCompilerName) FORWARD_SYMBOL_METHOD(isEditAndContinueEnabled) FORWARD_SYMBOL_METHOD(hasDebugInfo) FORWARD_SYMBOL_METHOD(hasManagedCode) FORWARD_SYMBOL_METHOD(hasSecurityChecks) FORWARD_SYMBOL_METHOD(isCVTCIL) FORWARD_SYMBOL_METHOD(isDataAligned) FORWARD_SYMBOL_METHOD(isHotpatchable) FORWARD_SYMBOL_METHOD(isLTCG) FORWARD_SYMBOL_METHOD(isMSILNetmodule) FORWARD_SYMBOL_METHOD(getLanguage) FORWARD_SYMBOL_METHOD(getLexicalParentId) FORWARD_SYMBOL_METHOD(getPlatform) FORWARD_SYMBOL_METHOD(getSymIndexId)"
  }
]