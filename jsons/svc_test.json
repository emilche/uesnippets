[
  {
    "label": "OnePassCbrSvc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnePassCbrSvc"
  },
  {
    "label": "OnePassCbrSvc()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_SVC_TEST_H_ # define VPX_TEST_SVC_TEST_H_ # include \" . / vpx_config . h \" # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" test / codec_factory . h \" # include \" test / encode_test_driver . h \" # include \" test / i420_video_source . h \" # include \" test / util . h \" # include \" test / y4m_video_source . h \" # include \" vpx / vpx_codec . h \" # include \" vpx_ports / bitops . h \" namespace svc_test { class OnePassCbrSvc : public::libvpx_test::EncoderTest { public :)",
    "insertText": "OnePassCbrSvc(const ::libvpx_test::CodecFactory *codec) : EncoderTest(codec), base_speed_setting_(0), speed_setting_(0), superframe_count_(0), temporal_layer_id_(0), number_temporal_layers_(0), number_spatial_layers_(0)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&svc_params_, 0, sizeof(svc_params_))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(bits_in_buffer_model_, 0, sizeof(bits_in_buffer_model_[0]) * VPX_MAX_LAYERS)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(layer_target_avg_bandwidth_, 0, sizeof(layer_target_avg_bandwidth_[0]) * VPX_MAX_LAYERS)"
  },
  {
    "label": "OnePassCbrSvc()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "OnePassCbrSvc()"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConfig(const int num_temporal_layer)"
  },
  {
    "label": "SetSvcConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSvcConfig(const int num_spatial_layer, const int num_temporal_layer)"
  },
  {
    "label": "PreEncodeFrameHookSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEncodeFrameHookSetup(::libvpx_test::VideoSource *video, ::libvpx_test::Encoder *encoder)"
  },
  {
    "label": "PostEncodeFrameHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEncodeFrameHook(::libvpx_test::Encoder *encoder)"
  },
  {
    "label": "AssignLayerBitrates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignLayerBitrates()"
  },
  {
    "label": "MismatchHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MismatchHook(const vpx_image_t *, const vpx_image_t *)"
  }
]