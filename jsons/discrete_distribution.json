[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "discrete_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "discrete_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "UnaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnaryOperation"
  },
  {
    "label": "discrete_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "discrete_distribution"
  },
  {
    "label": "UnaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnaryOperation"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (pairs)",
    "insertText": "static_assert(std::is_integral<result_type>::value,\n                  \"Class-template absl::discrete_distribution<> must be \"\n                  \"parameterized using an integral type.\")"
  },
  {
    "label": "InitDiscreteDistribution()",
    "kind": "Method",
    "detail": "Function (size_t>>)",
    "insertText": "InitDiscreteDistribution(\n    std::vector<double>* probabilities)"
  }
]