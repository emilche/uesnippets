[
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "URectLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URectLightComponent"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FRectLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRectLightSceneProxy"
  },
  {
    "label": "FRectLightRayTracingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRectLightRayTracingData"
  },
  {
    "label": "GetRectLightBarnDoorMaxAngle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / Scene . h \" # include \" Components / LocalLightComponent . h \" # include \" RectLightComponent . generated . h \" float)",
    "insertText": "GetRectLightBarnDoorMaxAngle()"
  },
  {
    "label": "CalculateRectLightCullingBarnExtentAndDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateRectLightCullingBarnExtentAndDepth(float Size, float Length, float AngleRad, float Radius, float& OutExtent, float& OutDepth)"
  },
  {
    "label": "CalculateRectLightBarnCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateRectLightBarnCorners(float SourceWidth, float SourceHeight, float BarnExtent, float BarnDepth, TStaticArray<FVector, 8>& OutCorners)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class FLightSceneProxy ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=(Lights), hidecategories=(Object, LightShafts), editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, interp, Category=Light, meta=(UIMin = \"0.0\", UIMax = \"1000.0\", ClampMax = \"100000\"))"
  },
  {
    "label": "ComputeLightBrightness()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "ComputeLightBrightness()"
  },
  {
    "label": "SetLightBrightness()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetLightBrightness(float InBrightness)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "GetLightType()",
    "kind": "Method",
    "detail": "Function (# endif ELightComponentType)",
    "insertText": "GetLightType()"
  },
  {
    "label": "GetUniformPenumbraSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUniformPenumbraSize()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FLightSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "UpdateRayTracingData()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "UpdateRayTracingData()"
  }
]