[
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IAssetTypeActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetTypeActions"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "over",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "over"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "IAssetTypeActions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Merge . h \" # include \" ThumbnailRendering / ThumbnailManager . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetDefinition . h \" class IToolkitHost ; enum class EAssetTypeActivationOpenedMethod : uint8 ; namespace EAssetTypeActivationMethod { enum Type { DoubleClicked,Opened,Previewed } ; } class IAssetTypeActions : public TSharedFromThis<IAssetTypeActions> { public : ~)",
    "insertText": "IAssetTypeActions()"
  },
  {
    "label": "IsAssetDefinitionInDisguise()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAssetDefinitionInDisguise()"
  },
  {
    "label": "GetSupportedClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetSupportedClass()"
  },
  {
    "label": "GetTypeColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetTypeColor()"
  },
  {
    "label": "ShouldCallGetActions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCallGetActions()"
  },
  {
    "label": "GetActions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetActions(const TArray<UObject*>& InObjects, struct FToolMenuSection& Section)"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OpenAssetEditor(const TArray<UObject*>& InObjects, TSharedPtr<IToolkitHost> EditWithinLevelEditor = TSharedPtr<IToolkitHost>())"
  },
  {
    "label": "OpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenAssetEditor(const TArray<UObject*>& InObjects, const EAssetTypeActivationOpenedMethod OpenedMethod, TSharedPtr<IToolkitHost> EditWithinLevelEditor = TSharedPtr<IToolkitHost>())"
  },
  {
    "label": "AssetsActivatedOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetsActivatedOverride(const TArray<UObject*>& InObjects, EAssetTypeActivationMethod::Type ActivationType)"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRename(const FAssetData& InAsset, FText* OutErrorMsg)"
  },
  {
    "label": "CanDuplicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicate(const FAssetData& InAsset, FText* OutErrorMsg)"
  },
  {
    "label": "GetValidAssetsForPreviewOrEdit()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData>)",
    "insertText": "GetValidAssetsForPreviewOrEdit(TArrayView<const FAssetData> InAssetDatas, bool bIsPreview)"
  },
  {
    "label": "CanFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFilter()"
  },
  {
    "label": "GetFilterName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFilterName()"
  },
  {
    "label": "CanLocalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLocalize()"
  },
  {
    "label": "CanMerge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMerge()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(UObject* InObject)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(UObject* BaseAsset, UObject* RemoteAsset, UObject* LocalAsset, const FOnMergeResolved& ResolutionCallback)"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCategories()"
  },
  {
    "label": "GetObjectDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetObjectDisplayName(UObject* Object)"
  },
  {
    "label": "GetSubMenus()",
    "kind": "Method",
    "detail": "Function (const TArray<FText>&)",
    "insertText": "GetSubMenus()"
  },
  {
    "label": "ShouldForceWorldCentric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceWorldCentric()"
  },
  {
    "label": "PerformAssetDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAssetDiff(UObject* OldAsset, UObject* NewAsset, const struct FRevisionInfo& OldRevision, const struct FRevisionInfo& NewRevision)"
  },
  {
    "label": "GetThumbnailInfo()",
    "kind": "Method",
    "detail": "Function (class UThumbnailInfo*)",
    "insertText": "GetThumbnailInfo(UObject* Asset)"
  },
  {
    "label": "GetAssetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAssetDescription(const FAssetData& AssetData)"
  },
  {
    "label": "IsImportedAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportedAsset()"
  },
  {
    "label": "GetResolvedSourceFilePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResolvedSourceFilePaths(const TArray<UObject*>& TypeAssets, TArray<FString>& OutSourceFilePaths)"
  },
  {
    "label": "GetSourceFileLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSourceFileLabels(const TArray<UObject*>& TypeAssets, TArray<FString>& OutSourceFileLabels)"
  },
  {
    "label": "BuildBackendFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildBackendFilter(struct FARFilter& InFilter)"
  },
  {
    "label": "GetDisplayNameFromAssetData()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameFromAssetData(const FAssetData& AssetData)"
  },
  {
    "label": "SupportsOpenedMethod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsOpenedMethod(const EAssetTypeActivationOpenedMethod OpenedMethod)"
  },
  {
    "label": "GetThumbnailBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetThumbnailBrush(const FAssetData& InAssetData, const FName InClassName)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush(const FAssetData& InAssetData, const FName InClassName)"
  }
]