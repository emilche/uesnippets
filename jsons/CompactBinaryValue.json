[
  {
    "label": "FCbValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbValue"
  },
  {
    "label": "FCbValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringView . h \" # include \" HAL / PlatformMemory . h \" # include \" IO / IoHash . h \" # include \" Memory / MemoryView . h \" # include \" Misc / ByteSwap . h \" # include \" Misc / Guid . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / VarInt . h \" class FCbValue { public :)",
    "insertText": "FCbValue(ECbFieldType Type, const void* Value)"
  },
  {
    "label": "AsObjectView()",
    "kind": "Method",
    "detail": "Function (FCbObjectView)",
    "insertText": "AsObjectView()"
  },
  {
    "label": "AsArrayView()",
    "kind": "Method",
    "detail": "Function (FCbArrayView)",
    "insertText": "AsArrayView()"
  },
  {
    "label": "AsBinary()",
    "kind": "Method",
    "detail": "Function (FMemoryView)",
    "insertText": "AsBinary()"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (FUtf8StringView)",
    "insertText": "AsString(ECbFieldError* OutError = nullptr, FUtf8StringView Default = FUtf8StringView())"
  },
  {
    "label": "AsInteger()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AsInteger(UE::CompactBinary::Private::FIntegerParams Params, ECbFieldError* OutError = nullptr, uint64 Default = 0)"
  },
  {
    "label": "AsIntegerPositive()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AsIntegerPositive()"
  },
  {
    "label": "AsIntegerNegative()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsIntegerNegative()"
  },
  {
    "label": "AsFloat32()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AsFloat32()"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "AsBinaryAttachment()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "AsBinaryAttachment()"
  },
  {
    "label": "AsAttachment()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "AsAttachment()"
  },
  {
    "label": "AsHash()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "AsHash()"
  },
  {
    "label": "AsUuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AsUuid()"
  },
  {
    "label": "AsDateTimeTicks()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsDateTimeTicks()"
  },
  {
    "label": "AsTimeSpanTicks()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsTimeSpanTicks()"
  },
  {
    "label": "AsObjectId()",
    "kind": "Method",
    "detail": "Function (FCbObjectId)",
    "insertText": "AsObjectId()"
  },
  {
    "label": "AsCustomById()",
    "kind": "Method",
    "detail": "Function (FCbCustomById)",
    "insertText": "AsCustomById()"
  },
  {
    "label": "AsCustomByName()",
    "kind": "Method",
    "detail": "Function (FCbCustomByName)",
    "insertText": "AsCustomByName()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} FCbValue)",
    "insertText": "GetValue()"
  },
  {
    "label": "FCbValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbValue(ECbFieldType InType, const void* InValue) : Data(InValue) , Type(InType)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (const uint8* const Bytes = static_cast<const)",
    "insertText": "uint8(Data)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (uint32 ValueSizeByteCount ; const uint64 ValueSize =)",
    "insertText": "ReadVarUInt(Bytes, ValueSizeByteCount)"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringView)",
    "insertText": "AsString(ECbFieldError* OutError, FUtf8StringView Default)"
  },
  {
    "label": "UTF8CHAR()",
    "kind": "Method",
    "detail": "Function (const UTF8CHAR* const Chars = static_cast<const)",
    "insertText": "UTF8CHAR(Data)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (uint32 ValueSizeByteCount ; const uint64 ValueSize =)",
    "insertText": "ReadVarUInt(Chars, ValueSizeByteCount)"
  },
  {
    "label": "FUtf8StringView()",
    "kind": "Method",
    "detail": "Function (* OutError = ECbFieldError::RangeError ; return Default ; }* OutError = ECbFieldError::None ; } return)",
    "insertText": "FUtf8StringView(Chars + ValueSizeByteCount, int32(ValueSize))"
  },
  {
    "label": "AsInteger()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "AsInteger(UE::CompactBinary::Private::FIntegerParams Params, ECbFieldError* OutError, uint64 Default)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64 OutOfRangeMask =)",
    "insertText": "uint64(-2) << (Params.MagnitudeBits - 1)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (const uint64 IsNegative =)",
    "insertText": "uint8(Type)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (uint32 MagnitudeByteCount ; const uint64 Magnitude =)",
    "insertText": "ReadVarUInt(Data, MagnitudeByteCount)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const uint64 Value = Magnitude ^ -)",
    "insertText": "int64(IsNegative)"
  },
  {
    "label": "IsInRange()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "IsInRange(!(Magnitude & OutOfRangeMask)) & ((!IsNegative) | Params.IsSigned)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (* OutError = IsInRange ? ECbFieldError::None : ECbFieldError::RangeError ; const uint64 UseValueMask = -)",
    "insertText": "int64(IsInRange)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (uint32 MagnitudeByteCount ; return)",
    "insertText": "int64(ReadVarUInt(Data, MagnitudeByteCount)) ^ -int64(1)"
  },
  {
    "label": "NETWORK_ORDER32()",
    "kind": "Method",
    "detail": "Function (const uint32 Value =)",
    "insertText": "NETWORK_ORDER32(FPlatformMemory::ReadUnaligned<uint32>(Data))"
  },
  {
    "label": "AsFloat64()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AsFloat64()"
  },
  {
    "label": "NETWORK_ORDER64()",
    "kind": "Method",
    "detail": "Function (const uint64 Value =)",
    "insertText": "NETWORK_ORDER64(FPlatformMemory::ReadUnaligned<uint64>(Data))"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (FGuid Value = FPlatformMemory::ReadUnaligned<)",
    "insertText": "FGuid(Data)"
  },
  {
    "label": "NETWORK_ORDER32()",
    "kind": "Method",
    "detail": "Function (Value . A =)",
    "insertText": "NETWORK_ORDER32(Value.A)"
  },
  {
    "label": "NETWORK_ORDER32()",
    "kind": "Method",
    "detail": "Function (Value . B =)",
    "insertText": "NETWORK_ORDER32(Value.B)"
  },
  {
    "label": "NETWORK_ORDER32()",
    "kind": "Method",
    "detail": "Function (Value . C =)",
    "insertText": "NETWORK_ORDER32(Value.C)"
  },
  {
    "label": "NETWORK_ORDER32()",
    "kind": "Method",
    "detail": "Function (Value . D =)",
    "insertText": "NETWORK_ORDER32(Value.D)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (uint32 DataSizeByteCount ; const uint64 DataSize =)",
    "insertText": "ReadVarUInt(Bytes, DataSizeByteCount)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (Bytes + = DataSizeByteCount ; FCbCustomById Value ; uint32 TypeIdByteCount ; Value . Id =)",
    "insertText": "ReadVarUInt(Bytes, TypeIdByteCount)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (Value . Data =)",
    "insertText": "MakeMemoryView(Bytes + TypeIdByteCount, DataSize - TypeIdByteCount)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (Bytes + = DataSizeByteCount ; uint32 TypeNameLenByteCount ; const uint64 TypeNameLen =)",
    "insertText": "ReadVarUInt(Bytes, TypeNameLenByteCount)"
  },
  {
    "label": "FUtf8StringView()",
    "kind": "Method",
    "detail": "Function (Bytes + = TypeNameLenByteCount ; FCbCustomByName Value ; Value . Name =)",
    "insertText": "FUtf8StringView(reinterpret_cast<const UTF8CHAR*>(Bytes), static_cast<int32>(TypeNameLen))"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (Value . Data =)",
    "insertText": "MakeMemoryView(Bytes + TypeNameLen, DataSize - TypeNameLen - TypeNameLenByteCount)"
  }
]