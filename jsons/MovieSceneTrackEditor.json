[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "FKeyPropertyResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPropertyResult"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FFindOrCreateHandleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindOrCreateHandleResult"
  },
  {
    "label": "FFindOrCreateTrackResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindOrCreateTrackResult"
  },
  {
    "label": "FFindOrCreateRootTrackResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindOrCreateRootTrackResult"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FKeyPropertyResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" ISequencer . h \" # include \" Framework / Commands / UICommandList . h \" # include \" ScopedTransaction . h \" # include \" MovieSceneTrack . h \" # include \" ISequencerTrackEditor . h \" # include \" MovieScene . h \" # include \" MovieSceneSequence . h \" class FMenuBuilder ; class FPaintArgs ; class FSlateWindowElementList ; class SHorizontalBox ; struct FKeyPropertyResult {)",
    "insertText": "FKeyPropertyResult() : bTrackModified(false) , bHandleCreated(false) , bTrackCreated(false) , bKeyCreated(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FKeyPropertyResult& A)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (bTrackModified | = A . bTrackModified ; bHandleCreated | = A . bHandleCreated ; bTrackCreated | = A . bTrackCreated ; bKeyCreated | = A . bKeyCreated ; SectionsCreated .)",
    "insertText": "Append(A.SectionsCreated)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (SectionsKeyed .)",
    "insertText": "Append(A.SectionsKeyed)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} bool bTrackModified ; bool bHandleCreated ; bool bTrackCreated ; bool bKeyCreated ; TArray<TWeakObjectPtr<UMovieSceneSection>> SectionsCreated ; TArray<TWeakObjectPtr<UMovieSceneSection>> SectionsKeyed ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FKeyPropertyResult, FOnKeyProperty, FFrameNumber) DECLARE_DELEGATE_RetVal_OneParam(bool, FCanKeyProperty, FFrameNumber)"
  },
  {
    "label": "FMovieSceneTrackEditor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMovieSceneTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "FMovieSceneTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieSceneTrackEditor()"
  },
  {
    "label": "GetMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneSequence*)",
    "insertText": "GetMovieSceneSequence()"
  },
  {
    "label": "GetTimeForKey()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "GetTimeForKey()"
  },
  {
    "label": "BeginKeying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginKeying(FFrameNumber InFrameNumber)"
  },
  {
    "label": "EndKeying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndKeying()"
  },
  {
    "label": "UpdatePlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackRange()"
  },
  {
    "label": "AnimatablePropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimatablePropertyChanged(FOnKeyProperty OnKeyProperty)"
  },
  {
    "label": "FindOrCreateHandleToObject()",
    "kind": "Method",
    "detail": "Function (struct FFindOrCreateHandleResult { FGuid Handle ; bool bWasCreated ; } ; FFindOrCreateHandleResult)",
    "insertText": "FindOrCreateHandleToObject(UObject* Object, bool bCreateHandleIfMissing = true, const FName& CreatedFolderName = NAME_None)"
  },
  {
    "label": "FFindOrCreateTrackResult()",
    "kind": "Method",
    "detail": "Function (struct FFindOrCreateTrackResult {)",
    "insertText": "FFindOrCreateTrackResult() : Track(nullptr), bWasCreated(false)"
  },
  {
    "label": "FindOrCreateTrackForObject()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneTrack* Track ; bool bWasCreated ; } ; FFindOrCreateTrackResult)",
    "insertText": "FindOrCreateTrackForObject(const FGuid& ObjectHandle, TSubclassOf<UMovieSceneTrack> TrackClass, FName PropertyName = NAME_None, bool bCreateTrackIfMissing = true)"
  },
  {
    "label": "FFindOrCreateRootTrackResult()",
    "kind": "Method",
    "detail": "Function (template<TrackClass> struct FFindOrCreateRootTrackResult {)",
    "insertText": "FFindOrCreateRootTrackResult() : Track(nullptr), bWasCreated(false)"
  },
  {
    "label": "FindOrCreateRootTrack()",
    "kind": "Method",
    "detail": "Function (} TrackClass* Track ; bool bWasCreated ; } ; template<TrackClass> FFindOrCreateRootTrackResult<TrackClass>)",
    "insertText": "FindOrCreateRootTrack()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (FFindOrCreateRootTrackResult<TrackClass> Result ; bool bTrackExisted ; UMovieScene* MovieScene =)",
    "insertText": "GetSequencer()->GetFocusedMovieSceneSequence()->GetMovieScene()"
  },
  {
    "label": "TrackClass()",
    "kind": "Method",
    "detail": "Function (Result . Track = MovieScene -> FindTrack<)",
    "insertText": "TrackClass()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTrackExisted = Result . Track ! = nullptr ;)",
    "insertText": "if(Result.Track == nullptr)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (} Result . bWasCreated = bTrackExisted = = false&& Result . Track ! = nullptr ; return Result ; } const TSharedPtr<ISequencer>)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneTrack*)",
    "insertText": "AddTrack(UMovieScene* FocusedMovieScene, const FGuid& ObjectHandle, TSubclassOf<class UMovieSceneTrack> TrackClass, FName UniqueTypeName)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> SequencerCommandBindings)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildObjectBindingColumnWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingColumnWidgets(TFunctionRef<TSharedRef<SHorizontalBox>()> GetEditBox, const UE::Sequencer::TViewModelPtr<UE::Sequencer::FObjectBindingModel>& ObjectBinding, const UE::Sequencer::FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildOutlinerEditWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerEditWidget(const FGuid& ObjectBinding, UMovieSceneTrack* Track, const FBuildEditWidgetParams& Params)"
  },
  {
    "label": "BuildOutlinerColumnWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerColumnWidget(const FBuildColumnWidgetParams& Params, const FName& ColumnName)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildTrackSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackSidebarMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "HandleAssetAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetAdded(UObject* Asset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<class UMovieSceneTrack> TrackClass)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "GetFocusedMovieScene()",
    "kind": "Method",
    "detail": "Function (protected : UMovieScene*)",
    "insertText": "GetFocusedMovieScene()"
  }
]