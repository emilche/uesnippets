[
  {
    "label": "SMeshMergingDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMeshMergingDialog"
  },
  {
    "label": "UMeshMergingSettingsObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshMergingSettingsObject"
  },
  {
    "label": "FMeshMergingTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMergingTool"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Widgets / SWidget . h \" # include \" MeshMerge / MeshMergingSettings . h \" # include \" MergeActorsTool . h \" # include \" MeshMergingTool . generated . h \" class SMeshMergingDialog ;)",
    "insertText": "UCLASS(config = Engine)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMeshMergingSettingsObject()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Settings . bMergePhysicsData = true ; Settings . LODSelectionType = EMeshLODSelectionType::AllLODs ; } UMeshMergingSettingsObject*)",
    "insertText": "Get()"
  },
  {
    "label": "DuplicateObject()",
    "kind": "Method",
    "detail": "Function (DefaultSettings =)",
    "insertText": "DuplicateObject(GetMutableDefault<UMeshMergingSettingsObject>(), nullptr)"
  },
  {
    "label": "AddToRoot()",
    "kind": "Method",
    "detail": "Function (DefaultSettings ->)",
    "insertText": "AddToRoot()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (bInitialized = true ; } return DefaultSettings ; } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "RemoveFromRoot()",
    "kind": "Method",
    "detail": "Function (DefaultSettings ->)",
    "insertText": "RemoveFromRoot()"
  },
  {
    "label": "MarkAsGarbage()",
    "kind": "Method",
    "detail": "Function (DefaultSettings ->)",
    "insertText": "MarkAsGarbage()"
  },
  {
    "label": "FMeshMergingTool()",
    "kind": "Method",
    "detail": "Function (} ; class FMeshMergingTool : public FMergeActorsTool { class SMeshMergingDialog ; public :)",
    "insertText": "FMeshMergingTool()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "GetToolNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolNameText()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetDefaultPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultPackageName()"
  },
  {
    "label": "RunMerge()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "RunMerge(const FString& PackageName, const TArray<TSharedPtr<FMergeComponentData>>& SelectedComponents)"
  },
  {
    "label": "GetSelectedComponentsInWidget()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FMergeComponentData>>&)",
    "insertText": "GetSelectedComponentsInWidget()"
  }
]