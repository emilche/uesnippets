[
  {
    "label": "RadAudioDecoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RadAudioDecoder"
  },
  {
    "label": "RR_STRING_JOIN3()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDE_RADAUDIO_DECODER_H # define INCLUDE_RADAUDIO_DECODER_H # include \" egttypes . h \" # include<stddef . h> typedef struct RadAudioDecoder RadAudioDecoder ; typedef struct { U16 sequential_version ; U8 minor_version ; U8 major_version ; int sample_rate ; int num_channels ; } RadAudioInfo ; # define RADAUDIO_DECODER_AT_EOF - 1 # define RADAUDIO_DECODER_INCOMPLETE_DATA - 2 # define RADAUDIO_DECODER_INVALID_DATA - 3 # define RADAUDIO_DECODER_START_OF_STREAM - 4 # define RADAUDIO_DECODER_INTERNAL_ERROR - 5 # define RADAUDIO_DECODER_MAX_OUTPUT_SAMPLES_PER_CHANNEL_PER_CHUNK 1 0 2 4 RADDEFSTART # define RADAUDIO_DECODER_LIBRARY_VERSION 1 # define RADAUDIO_STREAM_HEADER_SIZE 1 2 8 # ifndef RR_STRING_JOIN3 # define)",
    "insertText": "RR_STRING_JOIN3(arg1, arg2, arg3) RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) #define RR_STRING_JOIN_DELAY3(arg1, arg2, arg3) RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) #define RR_STRING_JOIN_IMMEDIATE3(arg1, arg2, arg3) arg1 ## arg2 ## arg3 #endif #ifdef RADAUDIO_WRAP #define RADAUDIO_DECODER_NAME(name) RR_STRING_JOIN3(RADAUDIO_WRAP, name##_, RADAUDIO_DECODER_LIBRARY_VERSION ) #else #define RADAUDIO_DECODER_NAME(name) RR_STRING_JOIN( name##_, RADAUDIO_DECODER_LIBRARY_VERSION ) #endif #define RadAudioDecoderMemoryRequired RADAUDIO_DECODER_NAME(RadAudioDecoderMemoryRequired) #define RadAudioDecoderOpen RADAUDIO_DECODER_NAME(RadAudioDecoderOpen) #define RadAudioDecoderGetInfo RADAUDIO_DECODER_NAME(RadAudioDecoderGetInfo) #define RadAudioDecoderGetInfoHeader RADAUDIO_DECODER_NAME(RadAudioDecoderGetInfoHeader) #define RadAudioDecoderDecodeChunk RADAUDIO_DECODER_NAME(RadAudioDecoderDecodeChunk) #define RadAudioDecoderGetProfileData RADAUDIO_DECODER_NAME(RadAudioDecoderGetProfileData) #define RadAudioDecoderDidSeek RADAUDIO_DECODER_NAME(RadAudioDecoderDidSeek) #define RadAudioDecoderGetChunkLength RADAUDIO_DECODER_NAME(RadAudioDecoderGetChunkLength) RADDEFFUNC size_t RadAudioDecoderMemoryRequired(U8* stream_header, size_t stream_header_bytes_valid)"
  },
  {
    "label": "RadAudioDecoderOpen()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC RadAudioDecoder*)",
    "insertText": "RadAudioDecoderOpen(U8 *stream_header, size_t stream_header_bytes_valid, void *mem, size_t memsize, size_t *out_header_size)"
  },
  {
    "label": "RadAudioDecoderGetInfo()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void)",
    "insertText": "RadAudioDecoderGetInfo(const RadAudioDecoder *radaudio_decoder, RadAudioInfo *out_info)"
  },
  {
    "label": "RadAudioDecoderGetInfoHeader()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC size_t)",
    "insertText": "RadAudioDecoderGetInfoHeader(U8* stream_header, size_t stream_header_bytes_valid, RadAudioInfo *out_info)"
  },
  {
    "label": "RadAudioDecoderDecodeChunk()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC int)",
    "insertText": "RadAudioDecoderDecodeChunk(RadAudioDecoder *radaudio_decoder, const U8 *data, size_t data_avail, size_t *data_consumed, F32 *(output_samples[2]), size_t max_samples)"
  },
  {
    "label": "RadAudioDecoderGetChunkLength()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC int)",
    "insertText": "RadAudioDecoderGetChunkLength(RadAudioDecoder *radaudio_decoder, const U8 *data, size_t data_avail)"
  },
  {
    "label": "RadAudioDecoderDidSeek()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void)",
    "insertText": "RadAudioDecoderDidSeek(RadAudioDecoder *radaudio_decoder)"
  }
]