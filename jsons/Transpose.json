[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "TransposeImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransposeImpl"
  },
  {
    "label": "Transpose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transpose"
  },
  {
    "label": "TransposeImpl_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransposeImpl_base"
  },
  {
    "label": "inplace_transpose_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "inplace_transpose_selector"
  },
  {
    "label": "check_transpose_aliasing_compile_time_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "check_transpose_aliasing_compile_time_selector"
  },
  {
    "label": "check_transpose_aliasing_run_time_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "check_transpose_aliasing_run_time_selector"
  },
  {
    "label": "checkTransposeAliasing_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "checkTransposeAliasing_impl"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRANSPOSE_H # define EIGEN_TRANSPOSE_H namespace Eigen { namespace internal { template<MatrixType> struct traits<Transpose<MatrixType>> : public traits<MatrixType> { typedef ref_selector<MatrixType>::type MatrixTypeNested ; typedef remove_reference<MatrixTypeNested>::type MatrixTypeNestedPlain ; enum { RowsAtCompileTime = MatrixType::ColsAtCompileTime,ColsAtCompileTime = MatrixType::RowsAtCompileTime,MaxRowsAtCompileTime = MatrixType::MaxColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxRowsAtCompileTime,FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,Flags0 = traits<MatrixTypeNestedPlain)",
    "insertText": "Flags(LvalueBit | NestByRefBit)"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<MatrixType,StorageKind> class TransposeImpl ; template<MatrixType> class Transpose : public TransposeImpl<MatrixType,internal::traits<MatrixType>::StorageKind> { public : typedef internal::ref_selector<MatrixType>::non_const_type MatrixTypeNested ; typedef TransposeImpl<MatrixType,internal::traits<MatrixType>::StorageKind>::Base Base ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(Transpose)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Transpose(MatrixType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const internal::remove_all<MatrixTypeNested>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_matrix .)",
    "insertText": "resize(ncols,nrows)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} protected : internal::ref_selector<MatrixType>::non_const_type m_matrix ; } ; namespace internal { template<MatrixType,bool HasDirectAccess = has_direct_access<MatrixType>::ret> struct TransposeImpl_base { typedef dense_xpr_base<Transpose<MatrixType>>::type type ; } ; template<MatrixType> struct TransposeImpl_base<MatrixType,false> { typedef dense_xpr_base<Transpose<MatrixType>>::type type ; } ; } template<XprType,StorageKind> class TransposeImpl : public internal::generic_xpr_base<Transpose<XprType>>::type { public : typedef internal::generic_xpr_base<Transpose<XprType>>::type Base ; } ; template<MatrixType> class TransposeImpl<MatrixType,Dense> : public internal::TransposeImpl_base<MatrixType>::type { public : typedef internal::TransposeImpl_base<MatrixType>::type Base ; using Base::coeffRef ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Transpose<MatrixType>) EIGEN_INHERIT_ASSIGNMENT_OPERATORS(TransposeImpl) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index innerStride()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} typedef internal::conditional<internal::is_lvalue<MatrixType>::value,Scalar,const Scalar>::type ScalarWithConstIfNotLvalue ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ScalarWithConstIfNotLvalue*)",
    "insertText": "data()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeffRef(Index rowId, Index colId)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Transpose<Derived> DenseBase<Derived)",
    "insertText": "transpose()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC const MatrixBase<Derived>::AdjointReturnType MatrixBase<Derived)",
    "insertText": "adjoint()"
  },
  {
    "label": "IsSquare()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<MatrixType,bool)",
    "insertText": "IsSquare(MatrixType::RowsAtCompileTime == MatrixType::ColsAtCompileTime) && MatrixType::RowsAtCompileTime!=Dynamic, bool MatchPacketSize = (int(MatrixType::RowsAtCompileTime) == int(internal::packet_traits<typename MatrixType::Scalar>::size)) && (internal::evaluator<MatrixType>::Flags&PacketAccessBit)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<MatrixType> struct inplace_transpose_selector<MatrixType,true,false> { void)",
    "insertText": "run(MatrixType& m)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "matrix().template triangularView<StrictlyUpper>().swap(m.matrix().transpose().template triangularView<StrictlyUpper>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef internal::packet_traits<MatrixType::Scalar>::type Packet ; const Index PacketSize = internal::packet_traits<Scalar>::size ; const Index Alignment = internal::evaluator<MatrixType>::Alignment ; PacketBlock<Packet> A ;)",
    "insertText": "for(Index i=0; i<PacketSize; ++i) A.packet[i] = m.template packetByOuterInner<Alignment>(i,0)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose(A)"
  },
  {
    "label": "BlockedInPlaceTranspose()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,Index Alignment> void)",
    "insertText": "BlockedInPlaceTranspose(MatrixType& m)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef internal::packet_traits<MatrixType::Scalar>::type Packet ; const Index PacketSize = internal::packet_traits<Scalar>::size ;)",
    "insertText": "eigen_assert(m.rows() == m.cols())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int row_start = 0 ;)",
    "insertText": "for(; row_start + PacketSize <= m.rows(); row_start += PacketSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PacketBlock<Packet> A ;)",
    "insertText": "if(row_start == col_start)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { PacketBlock<Packet> B ;)",
    "insertText": "for(Index i=0; i<PacketSize; ++i)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (A . packet [ i ] = m . template packetByOuterInner<)",
    "insertText": "Alignment(row_start + i,col_start)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (B . packet [ i ] = m . template packetByOuterInner<)",
    "insertText": "Alignment(col_start + i, row_start)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptranspose(B)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (m . template writePacket<)",
    "insertText": "Alignment(m.rowIndexByOuterInner(row_start + i, col_start), m.colIndexByOuterInner(row_start + i,col_start), B.packet[i])"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (m . template writePacket<)",
    "insertText": "Alignment(m.rowIndexByOuterInner(col_start + i, row_start), m.colIndexByOuterInner(col_start + i,row_start), A.packet[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "for(Index row = row_start; row < m.rows(); ++row)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "matrix().row(row).head(row).swap( m.matrix().col(row).head(row).transpose())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ;)",
    "insertText": "if(m.rows() == m.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index PacketSize = internal::packet_traits<Scalar>::size ;)",
    "insertText": "if(!NumTraits<Scalar>::IsComplex && m.rows() >= PacketSize)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} } else { m = m .)",
    "insertText": "transpose().eval()"
  },
  {
    "label": "transposeInPlace()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<Derived> EIGEN_DEVICE_FUNC void DenseBase<Derived)",
    "insertText": "transposeInPlace()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((rows() == cols() || (RowsAtCompileTime == Dynamic && ColsAtCompileTime == Dynamic)) && \"transposeInPlace() called on a non-square non-resizable matrix\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::inplace_transpose_selector<Derived)",
    "insertText": "run(derived())"
  },
  {
    "label": "adjointInPlace()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC void MatrixBase<Derived)",
    "insertText": "adjointInPlace()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived() = adjoint().eval()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_NO_DEBUG namespace internal { template<bool DestIsTransposed,OtherDerived> struct check_transpose_aliasing_compile_time_selector { enum { ret =)",
    "insertText": "bool(blas_traits<OtherDerived>::IsTransposed)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<bool DestIsTransposed,BinOp,DerivedA,DerivedB> struct check_transpose_aliasing_compile_time_selector<DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB>> { enum { ret =)",
    "insertText": "bool(blas_traits<DerivedA>::IsTransposed) != DestIsTransposed || bool(blas_traits<DerivedB>::IsTransposed)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar,bool DestIsTransposed,OtherDerived> struct check_transpose_aliasing_run_time_selector { bool)",
    "insertText": "run(const Scalar* dest, const OtherDerived& src)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,bool DestIsTransposed,BinOp,DerivedA,DerivedB> struct check_transpose_aliasing_run_time_selector<Scalar,DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB>> { bool)",
    "insertText": "run(const Scalar* dest, const CwiseBinaryOp<BinOp,DerivedA,DerivedB>& src)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived,OtherDerived,bool MightHaveTransposeAliasing = check_transpose_aliasing_compile_time_selector<blas_traits<Derived>::IsTransposed,OtherDerived>::ret> struct checkTransposeAliasing_impl { void)",
    "insertText": "run(const Derived& dst, const OtherDerived& other)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((!check_transpose_aliasing_run_time_selector <typename Derived::Scalar,blas_traits<Derived>::IsTransposed,OtherDerived> ::run(extract_data(dst), other)) && \"aliasing detected during transposition, use transposeInPlace() \" \"or evaluate the rhs into a temporary using .eval()\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived,OtherDerived> struct checkTransposeAliasing_impl<Derived,OtherDerived,false> { void)",
    "insertText": "run(const Derived&, const OtherDerived&)"
  },
  {
    "label": "check_for_aliasing()",
    "kind": "Method",
    "detail": "Function (} } ; template<Dst,Src> void)",
    "insertText": "check_for_aliasing(const Dst &dst, const Src &src)"
  }
]