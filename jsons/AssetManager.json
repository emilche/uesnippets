[
  {
    "label": "FPrimaryAssetTypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetTypeData"
  },
  {
    "label": "FPrimaryAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetData"
  },
  {
    "label": "FPrimaryAssetRulesCustomOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetRulesCustomOverride"
  },
  {
    "label": "ICookInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookInfo"
  },
  {
    "label": "UAssetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetManager"
  },
  {
    "label": "AssetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssetType"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "UAssetManagerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetManagerSettings"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FAssetManagerEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetManagerEditorModule"
  },
  {
    "label": "FPendingChunkInstall",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingChunkInstall"
  },
  {
    "label": "FCompiledAssetManagerSearchRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompiledAssetManagerSearchRules"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetManagerTypes . h \" # include \" Misc / AssetRegistryInterface . h \" # include \" StreamableManager . h \" # include \" AssetRegistry / AssetBundleData . h \" # include \" AssetRegistry / AssetRegistryModule . h \" # include \" GenericPlatform / GenericPlatformChunkInstall . h \" # include \" ContentEncryptionConfig . h \" # include \" Misc / SourceLocation . h \" # include \" Misc / SourceLocationUtils . h \" # include \" AssetManager . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAssetManager, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (struct FPrimaryAssetTypeData ; struct FPrimaryAssetData ; struct FPrimaryAssetRulesCustomOverride ; namespace UE::Cook { class ICookInfo ; })",
    "insertText": "DECLARE_DELEGATE_TwoParams(FAssetManagerAcquireResourceDelegateEx, bool , const TArray<int32>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FAssetManagerAcquireResourceDelegate, bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAddedAssetSearchRoot, const FString&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UAssetManager()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UAssetManager&)",
    "insertText": "Get()"
  },
  {
    "label": "GetIfInitialized()",
    "kind": "Method",
    "detail": "Function (UAssetManager*)",
    "insertText": "GetIfInitialized()"
  },
  {
    "label": "GetStreamableManager()",
    "kind": "Method",
    "detail": "Function (FStreamableManager&)",
    "insertText": "GetStreamableManager()"
  },
  {
    "label": "GetEncryptionKeyAssetTagName()",
    "kind": "Method",
    "detail": "Function (} const FPrimaryAssetType MapType ; const FPrimaryAssetType PrimaryAssetLabelType ; const FPrimaryAssetType PackageChunkType ; const FPrimaryAssetType SuppressionType ; const FString AssetSearchRootsVirtualPath ; const FString DynamicSearchRootsVirtualPath ; FName)",
    "insertText": "GetEncryptionKeyAssetTagName()"
  },
  {
    "label": "CreatePrimaryAssetIdFromChunkId()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "CreatePrimaryAssetIdFromChunkId(int32 ChunkId)"
  },
  {
    "label": "ExtractChunkIdFromPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExtractChunkIdFromPrimaryAssetId(const FPrimaryAssetId& PrimaryAssetId)"
  },
  {
    "label": "ScanPathsForPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ScanPathsForPrimaryAssets(FPrimaryAssetType PrimaryAssetType, const TArray<FString>& Paths, UClass* BaseClass, bool bHasBlueprintClasses, bool bIsEditorOnly = false, bool bForceSynchronousScan = true)"
  },
  {
    "label": "ScanPathForPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ScanPathForPrimaryAssets(FPrimaryAssetType PrimaryAssetType, const FString& Path, UClass* BaseClass, bool bHasBlueprintClasses, bool bIsEditorOnly = false, bool bForceSynchronousScan = true)"
  },
  {
    "label": "PushBulkScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBulkScanning()"
  },
  {
    "label": "PopBulkScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBulkScanning()"
  },
  {
    "label": "RemoveScanPathsForPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveScanPathsForPrimaryAssets(FPrimaryAssetType PrimaryAssetType, const TArray<FString>& Paths, UClass* BaseClass, bool bHasBlueprintClasses, bool bIsEditorOnly = false)"
  },
  {
    "label": "RemovePrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimaryAssetType(FPrimaryAssetType PrimaryAssetType)"
  },
  {
    "label": "StartBulkScanning()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "StartBulkScanning()"
  },
  {
    "label": "StopBulkScanning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopBulkScanning()"
  },
  {
    "label": "IsBulkScanning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBulkScanning()"
  },
  {
    "label": "RecursivelyExpandBundleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyExpandBundleData(FAssetBundleData& BundleData)"
  },
  {
    "label": "CallOrRegister_OnCompletedInitialScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallOrRegister_OnCompletedInitialScan(FSimpleMulticastDelegate::FDelegate&& Delegate)"
  },
  {
    "label": "CallOrRegister_OnAssetManagerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallOrRegister_OnAssetManagerCreated(FSimpleMulticastDelegate::FDelegate&& Delegate)"
  },
  {
    "label": "HasInitialScanCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInitialScanCompleted()"
  },
  {
    "label": "Register_OnAddedAssetSearchRoot()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "Register_OnAddedAssetSearchRoot(FOnAddedAssetSearchRoot::FDelegate&& Delegate)"
  },
  {
    "label": "Unregister_OnAddedAssetSearchRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister_OnAddedAssetSearchRoot(FDelegateHandle DelegateHandle)"
  },
  {
    "label": "ExpandVirtualPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandVirtualPaths(TArray<FString>& InOutPaths)"
  },
  {
    "label": "AddAssetSearchRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetSearchRoot(const FString& NewRootPath)"
  },
  {
    "label": "GetAssetSearchRoots()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetAssetSearchRoots(bool bIncludeDefaultRoots = true)"
  },
  {
    "label": "GetPrimaryAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetData(const FPrimaryAssetId& PrimaryAssetId, FAssetData& AssetData)"
  },
  {
    "label": "GetPrimaryAssetDataList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetDataList(FPrimaryAssetType PrimaryAssetType, TArray<FAssetData>& AssetDataList)"
  },
  {
    "label": "GetPrimaryAssetObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPrimaryAssetObject(const FPrimaryAssetId& PrimaryAssetId)"
  },
  {
    "label": "GetPrimaryAssetObject()",
    "kind": "Method",
    "detail": "Function (UObject* ObjectReturn =)",
    "insertText": "GetPrimaryAssetObject(PrimaryAssetId)"
  },
  {
    "label": "GetPrimaryAssetObjectClass()",
    "kind": "Method",
    "detail": "Function (} template<class AssetType> TSubclassOf<AssetType>)",
    "insertText": "GetPrimaryAssetObjectClass(const FPrimaryAssetId& PrimaryAssetId)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<AssetType> ReturnClass ; ReturnClass = Cast<)",
    "insertText": "UClass(GetPrimaryAssetObject(PrimaryAssetId))"
  },
  {
    "label": "GetPrimaryAssetPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetPrimaryAssetPath(const FPrimaryAssetId& PrimaryAssetId)"
  },
  {
    "label": "GetPrimaryAssetPathList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetPathList(FPrimaryAssetType PrimaryAssetType, TArray<FSoftObjectPath>& AssetPathList)"
  },
  {
    "label": "GetPrimaryAssetIdForObject()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdForObject(UObject* Object)"
  },
  {
    "label": "GetPrimaryAssetIdForPath()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdForPath(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "GetPrimaryAssetIdForPackage()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdForPackage(FName PackagePath)"
  },
  {
    "label": "GetPrimaryAssetIdForData()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdForData(const FAssetData& AssetData)"
  },
  {
    "label": "GetPrimaryAssetIdList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& PrimaryAssetIdList, EAssetManagerFilter Filter = EAssetManagerFilter::Default)"
  },
  {
    "label": "GetPrimaryAssetTypeInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetTypeInfo(FPrimaryAssetType PrimaryAssetType, FPrimaryAssetTypeInfo& AssetTypeInfo)"
  },
  {
    "label": "GetPrimaryAssetTypeInfoList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrimaryAssetTypeInfoList(TArray<FPrimaryAssetTypeInfo>& AssetTypeInfoList)"
  },
  {
    "label": "LoadPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadPrimaryAssets(const TArray<FPrimaryAssetId>& AssetsToLoad, const TArray<FName>& LoadBundles = TArray<FName>(), FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "LoadPrimaryAsset()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadPrimaryAsset(const FPrimaryAssetId& AssetToLoad, const TArray<FName>& LoadBundles = TArray<FName>(), FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "LoadPrimaryAssetsWithType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadPrimaryAssetsWithType(FPrimaryAssetType PrimaryAssetType, const TArray<FName>& LoadBundles = TArray<FName>(), FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "UnloadPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UnloadPrimaryAssets(const TArray<FPrimaryAssetId>& AssetsToUnload)"
  },
  {
    "label": "UnloadPrimaryAsset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UnloadPrimaryAsset(const FPrimaryAssetId& AssetToUnload)"
  },
  {
    "label": "UnloadPrimaryAssetsWithType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UnloadPrimaryAssetsWithType(FPrimaryAssetType PrimaryAssetType)"
  },
  {
    "label": "ChangeBundleStateForPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "ChangeBundleStateForPrimaryAssets(const TArray<FPrimaryAssetId>& AssetsToChange, const TArray<FName>& AddBundles, const TArray<FName>& RemoveBundles, bool bRemoveAllBundles = false, FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "ChangeBundleStateForMatchingPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "ChangeBundleStateForMatchingPrimaryAssets(const TArray<FName>& NewBundles, const TArray<FName>& OldBundles, FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "GetPrimaryAssetHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "GetPrimaryAssetHandle(const FPrimaryAssetId& PrimaryAssetId, bool bForceCurrent = false, TArray<FName>* Bundles = nullptr)"
  },
  {
    "label": "GetPrimaryAssetsWithBundleState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetsWithBundleState(TArray<FPrimaryAssetId>& PrimaryAssetList, const TArray<FPrimaryAssetType>& ValidTypes, const TArray<FName>& RequiredBundles, const TArray<FName>& ExcludedBundles = TArray<FName>(), bool bForceCurrent = false)"
  },
  {
    "label": "GetPrimaryAssetBundleStateMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrimaryAssetBundleStateMap(TMap<FPrimaryAssetId, TArray<FName>>& BundleStateMap, bool bForceCurrent = false)"
  },
  {
    "label": "GetPrimaryAssetLoadSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetLoadSet(TSet<FSoftObjectPath>& OutAssetLoadSet, const FPrimaryAssetId& PrimaryAssetId, const TArray<FName>& LoadBundles, bool bLoadRecursive)"
  },
  {
    "label": "GetPrimaryAssetLoadList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimaryAssetLoadList(TArray<FSoftObjectPath>& OutAssetLoadList, const FPrimaryAssetId& PrimaryAssetId, const TArray<FName>& LoadBundles, bool bLoadRecursive, bool bEnsureUniqueness = true)"
  },
  {
    "label": "PreloadPrimaryAssets()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "PreloadPrimaryAssets(const TArray<FPrimaryAssetId>& AssetsToLoad, const TArray<FName>& LoadBundles, bool bLoadRecursive, FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority)"
  },
  {
    "label": "LoadAssetList()",
    "kind": "Method",
    "detail": "Function (template<DebugNameType = UE::FSourceLocation> TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadAssetList(const TArray<FSoftObjectPath>& AssetList, FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority, DebugNameType&& DebugNameOrLocation = UE::FSourceLocation::Current())"
  },
  {
    "label": "LoadAssetList()",
    "kind": "Method",
    "detail": "Function (template<DebugNameType = UE::FSourceLocation> TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadAssetList(TArray<FSoftObjectPath>&& AssetList, FStreamableDelegate DelegateToCall = FStreamableDelegate(), TAsyncLoadPriority Priority = FStreamableManager::DefaultAsyncLoadPriority, DebugNameType&& DebugNameOrLocation = UE::FSourceLocation::Current())"
  },
  {
    "label": "GetAssetBundleEntry()",
    "kind": "Method",
    "detail": "Function (FAssetBundleEntry)",
    "insertText": "GetAssetBundleEntry(const FPrimaryAssetId& BundleScope, FName BundleName)"
  },
  {
    "label": "GetAssetBundleEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetBundleEntries(const FPrimaryAssetId& BundleScope, TArray<FAssetBundleEntry>& OutEntries)"
  },
  {
    "label": "FindMissingChunkList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindMissingChunkList(const TArray<FSoftObjectPath>& AssetList, TArray<int32>& OutMissingChunkList, TArray<int32>& OutErrorChunkList)"
  },
  {
    "label": "AcquireResourcesForAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireResourcesForAssetList(const TArray<FSoftObjectPath>& AssetList, FAssetManagerAcquireResourceDelegateEx CompleteDelegate, EChunkPriority::Type Priority = EChunkPriority::Immediate)"
  },
  {
    "label": "AcquireResourcesForAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireResourcesForAssetList(const TArray<FSoftObjectPath>& AssetList, FAssetManagerAcquireResourceDelegate CompleteDelegate, EChunkPriority::Type Priority = EChunkPriority::Immediate)"
  },
  {
    "label": "AcquireResourcesForPrimaryAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireResourcesForPrimaryAssetList(const TArray<FPrimaryAssetId>& PrimaryAssetList, FAssetManagerAcquireResourceDelegate CompleteDelegate, EChunkPriority::Type Priority = EChunkPriority::Immediate)"
  },
  {
    "label": "GetResourceAcquireProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResourceAcquireProgress(int32& OutAcquiredCount, int32& OutRequestedCount)"
  },
  {
    "label": "SetPrimaryAssetTypeRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryAssetTypeRules(FPrimaryAssetType PrimaryAssetType, const FPrimaryAssetRules& Rules)"
  },
  {
    "label": "SetPrimaryAssetRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryAssetRules(FPrimaryAssetId PrimaryAssetId, const FPrimaryAssetRules& Rules)"
  },
  {
    "label": "SetPrimaryAssetRulesExplicitly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryAssetRulesExplicitly(FPrimaryAssetId PrimaryAssetId, const FPrimaryAssetRulesExplicitOverride& ExplicitRules)"
  },
  {
    "label": "GetPrimaryAssetRules()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetRules)",
    "insertText": "GetPrimaryAssetRules(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "GetManagedPackageList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetManagedPackageList(FPrimaryAssetId PrimaryAssetId, TArray<FName>& AssetPackageList)"
  },
  {
    "label": "GetPackageManagers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageManagers(FName PackageName, bool bRecurseToParents, TSet<FPrimaryAssetId>& ManagerSet)"
  },
  {
    "label": "GetPackageManagers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageManagers(FName PackageName, bool bRecurseToParents, TMap<FPrimaryAssetId, UE::AssetRegistry::EDependencyProperty>& Managers)"
  },
  {
    "label": "ExtractPrimaryAssetIdFromData()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "ExtractPrimaryAssetIdFromData(const FAssetData& AssetData, FPrimaryAssetType SuggestedType = FPrimaryAssetType())"
  },
  {
    "label": "GetAssetDataForPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetDataForPath(const FSoftObjectPath& ObjectPath, FAssetData& AssetData)"
  },
  {
    "label": "IsAssetDataBlueprintOfClassSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetDataBlueprintOfClassSet(const FAssetData& AssetData, const TSet<FTopLevelAssetPath>& ClassNameSet)"
  },
  {
    "label": "GetAssetPathForData()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetAssetPathForData(const FAssetData& AssetData)"
  },
  {
    "label": "GetRedirectedPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetRedirectedPrimaryAssetId(const FPrimaryAssetId& OldId)"
  },
  {
    "label": "GetPreviousPrimaryAssetIds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreviousPrimaryAssetIds(const FPrimaryAssetId& NewId, TArray<FPrimaryAssetId>& OutOldIds)"
  },
  {
    "label": "DeterminePrimaryAssetIdForObject()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "DeterminePrimaryAssetIdForObject(const UObject* Object)"
  },
  {
    "label": "GetRedirectedAssetPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetRedirectedAssetPath(const FSoftObjectPath& OldPath)"
  },
  {
    "label": "ExtractSoftObjectPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSoftObjectPaths(const UStruct* Struct, const void* StructValue, TArray<FSoftObjectPath>& FoundAssetReferences, const TArray<FName>& PropertiesToSkip = TArray<FName>())"
  },
  {
    "label": "SearchAssetRegistryPaths()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SearchAssetRegistryPaths(TArray<FAssetData>& OutAssetDataList, const FAssetManagerSearchRules& Rules)"
  },
  {
    "label": "DoesAssetMatchSearchRules()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAssetMatchSearchRules(const FAssetData& AssetData, const FAssetManagerSearchRules& Rules)"
  },
  {
    "label": "ShouldScanPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldScanPrimaryAssetType(FPrimaryAssetTypeInfo& TypeInfo)"
  },
  {
    "label": "RegisterSpecificPrimaryAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSpecificPrimaryAsset(const FPrimaryAssetId& PrimaryAssetId, const FAssetData& NewAssetData)"
  },
  {
    "label": "ScanPathsSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPathsSynchronous(const TArray<FString>& PathsToScan)"
  },
  {
    "label": "OnAssetRegistryAvailableAfterInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAssetRegistryAvailableAfterInitialization(FName InName, FAssetRegistryState& OutNewState)"
  },
  {
    "label": "GetContentRootPathFromPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetContentRootPathFromPackageName(const FString& PackageName, FString& OutContentRootPath)"
  },
  {
    "label": "NormalizePackagePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizePackagePath(FString& InOutPath, bool bIncludeFinalSlash)"
  },
  {
    "label": "GetNormalizedPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNormalizedPackagePath(const FString& InPath, bool bIncludeFinalSlash)"
  },
  {
    "label": "DumpAssetTypeSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAssetTypeSummary()"
  },
  {
    "label": "DumpLoadedAssetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpLoadedAssetState()"
  },
  {
    "label": "DumpBundlesForAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpBundlesForAsset(const TArray<FString>& Args)"
  },
  {
    "label": "DumpAssetRegistryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAssetRegistryInfo()"
  },
  {
    "label": "DumpReferencersForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpReferencersForPackage(const TArray< FString >& PackageNames)"
  },
  {
    "label": "GetAllReferencersForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllReferencersForPackage(TSet<FAssetData>& OutFoundAssets, const TArray<FName>& InPackageNames, int32 MaxDepth)"
  },
  {
    "label": "StartInitialLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartInitialLoading()"
  },
  {
    "label": "FinishInitialLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishInitialLoading()"
  },
  {
    "label": "GetAssetRegistry()",
    "kind": "Method",
    "detail": "Function (class IAssetRegistry&)",
    "insertText": "GetAssetRegistry()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (const class UAssetManagerSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "GetTimerManager()",
    "kind": "Method",
    "detail": "Function (class FTimerManager*)",
    "insertText": "GetTimerManager()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "GetCachedPrimaryAssetEncryptionKeyGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedPrimaryAssetEncryptionKeyGuid(FPrimaryAssetId InPrimaryAssetId, FGuid& OutGuid)"
  },
  {
    "label": "LoadRedirectorMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRedirectorMaps()"
  },
  {
    "label": "RefreshPrimaryAssetDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPrimaryAssetDirectory(bool bForceRefresh = false)"
  },
  {
    "label": "InvalidatePrimaryAssetDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePrimaryAssetDirectory()"
  },
  {
    "label": "WarnAboutInvalidPrimaryAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WarnAboutInvalidPrimaryAsset(const FPrimaryAssetId& PrimaryAssetId, const FString& Message)"
  },
  {
    "label": "WriteCustomReport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteCustomReport(FString FileName, TArray<FString>& FileLines)"
  },
  {
    "label": "ApplyCustomPrimaryAssetRulesOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomPrimaryAssetRulesOverride(const FPrimaryAssetRulesCustomOverride& CustomOverride)"
  },
  {
    "label": "ModifyCook()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ModifyCook(TConstArrayView<const ITargetPlatform*> TargetPlatforms, TArray<FName>& PackagesToCook, TArray<FName>& PackagesToNeverCook)"
  },
  {
    "label": "ModifyDLCCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyDLCCook(const FString& DLCName, TConstArrayView<const ITargetPlatform*> TargetPlatforms, TArray<FName>& PackagesToCook, TArray<FName>& PackagesToNeverCook)"
  },
  {
    "label": "ModifyDLCBasePackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyDLCBasePackages(const ITargetPlatform* TargetPlatform, TArray<FName>& PlatformBasedPackages, TSet<FName>& PackagesToClearResults)"
  },
  {
    "label": "ModifyCookReferences()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ModifyCookReferences(FName PackageName, TArray<FName>& PackagesToCook)"
  },
  {
    "label": "ShouldCookForPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCookForPlatform(const UPackage* Package, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetPackageCookRule()",
    "kind": "Method",
    "detail": "Function (EPrimaryAssetCookRule)",
    "insertText": "GetPackageCookRule(FName PackageName)"
  },
  {
    "label": "CalculateCookRuleUnion()",
    "kind": "Method",
    "detail": "Function (EPrimaryAssetCookRule)",
    "insertText": "CalculateCookRuleUnion(const TMap<FPrimaryAssetId, UE::AssetRegistry::EDependencyProperty>& Managers, TOptional<TPair<FPrimaryAssetId, FPrimaryAssetId>>* OutConflictIds)"
  },
  {
    "label": "VerifyCanCookPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyCanCookPackage(UE::Cook::ICookInfo* CookInfo, FName PackageName, bool bLogError = true)"
  },
  {
    "label": "GetPackageChunkIds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPackageChunkIds(FName PackageName, const class ITargetPlatform* TargetPlatform, TArrayView<const int32> ExistingChunkList, TArray<int32>& OutChunkList, TArray<int32>* OutOverrideChunkList = nullptr)"
  },
  {
    "label": "GetChunkEncryptionKeyGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetChunkEncryptionKeyGuid(int32 InChunkId)"
  },
  {
    "label": "GetEncryptedChunkIDsForPackage()",
    "kind": "Method",
    "detail": "Function (} TSet<int32>)",
    "insertText": "GetEncryptedChunkIDsForPackage(FName InPackageName)"
  },
  {
    "label": "GetUniqueAssetRegistryName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetUniqueAssetRegistryName(int32 InChunkIndex)"
  },
  {
    "label": "ReinitializeFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitializeFromConfig()"
  },
  {
    "label": "UpdateManagementDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateManagementDatabase(bool bForceRefresh = false)"
  },
  {
    "label": "GetChunkManagementMap()",
    "kind": "Method",
    "detail": "Function (const TMap<int32,FAssetManagerChunkInfo>&)",
    "insertText": "GetChunkManagementMap()"
  },
  {
    "label": "ApplyPrimaryAssetLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPrimaryAssetLabels()"
  },
  {
    "label": "RefreshAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAssetData(UObject* ChangedObject)"
  },
  {
    "label": "InitializeAssetBundlesFromMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAssetBundlesFromMetadata(const UStruct* Struct, const void* StructValue, FAssetBundleData& AssetBundle, FName DebugName = NAME_None)"
  },
  {
    "label": "InitializeAssetBundlesFromMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAssetBundlesFromMetadata(const UObject* Object, FAssetBundleData& AssetBundle)"
  },
  {
    "label": "InitializeAssetBundlesFromMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAssetBundlesFromMetadata(Object->GetClass(), Object, AssetBundle, Object->GetFName())"
  },
  {
    "label": "PreSaveAssetRegistry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreSaveAssetRegistry(const class ITargetPlatform* TargetPlatform, const TSet<FName>& InCookedPackages)"
  },
  {
    "label": "PostSaveAssetRegistry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSaveAssetRegistry()"
  },
  {
    "label": "GetContentEncryptionConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetContentEncryptionConfig(FContentEncryptionConfig& OutContentEncryptionConfig)"
  },
  {
    "label": "HandleCookCommand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleCookCommand(FStringView Token)"
  },
  {
    "label": "TryUpdateCachedAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryUpdateCachedAssetData(const FPrimaryAssetId& PrimaryAssetId, const FAssetData& NewAssetData, bool bAllowDuplicates)"
  },
  {
    "label": "GetNameData()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetData*)",
    "insertText": "GetNameData(const FPrimaryAssetId& PrimaryAssetId, bool bCheckRedirector = true)"
  },
  {
    "label": "OnObjectReferenceListInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReferenceListInvalidated()"
  },
  {
    "label": "CallPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPreGarbageCollect()"
  },
  {
    "label": "PreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreGarbageCollect()"
  },
  {
    "label": "OnAssetStateChangeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetStateChangeCompleted(FPrimaryAssetId PrimaryAssetId, TSharedPtr<FStreamableHandle> BoundHandle, FStreamableDelegate WrappedDelegate)"
  },
  {
    "label": "ScanPrimaryAssetTypesFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPrimaryAssetTypesFromConfig()"
  },
  {
    "label": "ScanPrimaryAssetRulesFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPrimaryAssetRulesFromConfig()"
  },
  {
    "label": "DoesPrimaryAssetMatchCustomOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPrimaryAssetMatchCustomOverride(FPrimaryAssetId PrimaryAssetId, const FPrimaryAssetRulesCustomOverride& CustomOverride)"
  },
  {
    "label": "PostInitialAssetScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitialAssetScan()"
  },
  {
    "label": "IsPathExcludedFromScan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPathExcludedFromScan(const FString& Path)"
  },
  {
    "label": "IsScanningFromInitialConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScanningFromInitialConfig()"
  },
  {
    "label": "ShouldIncludeInAssetSearch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIncludeInAssetSearch(const FAssetData& AssetData, const FAssetManagerSearchRules& SearchRules)"
  },
  {
    "label": "AcquireChunkList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireChunkList(const TArray<int32>& ChunkList, FAssetManagerAcquireResourceDelegate CompleteDelegate, EChunkPriority::Type Priority, TSharedPtr<FStreamableHandle> StalledHandle)"
  },
  {
    "label": "OnChunkDownloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChunkDownloaded(uint32 ChunkId, bool bSuccess)"
  },
  {
    "label": "LoadAssetListInternal()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadAssetListInternal(TArray<FSoftObjectPath>&& AssetList, FStreamableDelegate&& DelegateToCall, TAsyncLoadPriority Priority, FString&& DebugName)"
  },
  {
    "label": "ShouldSetManager()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EAssetSetManagerResult::Type)",
    "insertText": "ShouldSetManager(const FAssetIdentifier& Manager, const FAssetIdentifier& Source, const FAssetIdentifier& Target, UE::AssetRegistry::EDependencyCategory Category, UE::AssetRegistry::EDependencyProperty Properties, EAssetSetManagerFlags::Type Flags)"
  },
  {
    "label": "OnAssetRegistryFilesLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRegistryFilesLoaded()"
  },
  {
    "label": "OnInMemoryAssetCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInMemoryAssetCreated(UObject *Object)"
  },
  {
    "label": "OnInMemoryAssetDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInMemoryAssetDeleted(UObject *Object)"
  },
  {
    "label": "OnObjectPreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPreSave(UObject* Object, FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRenamed(const FAssetData& NewData, const FString& OldPath)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const FAssetData& Data)"
  },
  {
    "label": "RemovePrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimaryAssetId(const FPrimaryAssetId& PrimaryAssetId)"
  },
  {
    "label": "GatherPublicAssetsForPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherPublicAssetsForPackage(FName PackagePath, TArray<FName>& PackagesToCook)"
  },
  {
    "label": "PreBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreBeginPIE(bool bStartSimulate)"
  },
  {
    "label": "EndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPIE(bool bStartSimulate)"
  },
  {
    "label": "BuildChunkMap()",
    "kind": "Method",
    "detail": "Function (TMap<int32,FAssetManagerChunkInfo>)",
    "insertText": "BuildChunkMap(const TSet<FName>& PackagesToUpdateChunksFor)"
  },
  {
    "label": "InternalAddAssetScanPath()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FName> PrimaryAssetTypeRedirects ; TMap<FString,FString> PrimaryAssetIdRedirects ; TMap<FSoftObjectPath,FSoftObjectPath> AssetPathRedirects ; FSimpleMulticastDelegate OnCompletedInitialScanDelegate ; FSimpleMulticastDelegate OnAssetManagerCreatedDelegate ; FOnAddedAssetSearchRoot OnAddedAssetSearchRootDelegate ; FDelegateHandle ChunkInstallDelegateHandle ; private : bool bOldTemporaryCachingMode = false ; bool bScanningFromInitialConfig = false ; void)",
    "insertText": "InternalAddAssetScanPath(FPrimaryAssetTypeData& TypeData, const FString& AssetScanPath)"
  },
  {
    "label": "InitializeAssetBundlesFromMetadata_Recursive()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InitializeAssetBundlesFromMetadata_Recursive(const UStruct* Struct, const void* StructValue, FAssetBundleData& AssetBundle, FName DebugName, TSet<const void*>& AllVisitedStructValues)"
  },
  {
    "label": "LoadAssetList()",
    "kind": "Method",
    "detail": "Function (# endif TMap<FName,TSharedRef<FPrimaryAssetTypeData>> AssetTypeMap ; # if WITH_EDITOR TMap<FName,TArray<FTopLevelAssetPath>> AssetBundlePathsForPackage ; # endif class IAssetRegistry* CachedAssetRegistry ; const class UAssetManagerSettings* CachedSettings ; struct FCompiledAssetManagerSearchRules ; } ; template<DebugNameType> TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadAssetList(TArray<FSoftObjectPath>&& AssetList, FStreamableDelegate DelegateToCall, TAsyncLoadPriority Priority, DebugNameType&& DebugNameOrLocation)"
  },
  {
    "label": "LoadAssetListInternal()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "LoadAssetListInternal(MoveTemp(AssetList), MoveTemp(DelegateToCall), Priority, FString{ Forward<DebugNameType>(DebugNameOrLocation) })"
  },
  {
    "label": "LoadAssetList()",
    "kind": "Method",
    "detail": "Function (} } template<DebugNameType> TSharedPtr<FStreamableHandle>)",
    "insertText": "LoadAssetList(const TArray<FSoftObjectPath>& AssetList, FStreamableDelegate DelegateToCall, TAsyncLoadPriority Priority, DebugNameType&& DebugNameOrLocation)"
  }
]