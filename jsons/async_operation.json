[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AsyncOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncOperation"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_ASYNC_OPERATION_H_ # define BASE_WIN_ASYNC_OPERATION_H_ # include<unknwn . h> # include<windows . foundation . h> # include<wrl / async . h> # include<wrl / client . h> # include<type_traits> # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / memory / weak_ptr . h \" # include \" base / task / task_runner_util . h \" # include \" base / threading / thread_checker . h \" # include \" base / win / winrt_foundation_helpers . h \" namespace base { namespace win { namespace internal { template<T> using AsyncOperationComplex = ABI::Windows::Foundation::IAsyncOperation<T>::TResult_complex ; template<T> using AsyncOperationAbi = AbiType<AsyncOperationComplex<T>> ; template<T> using AsyncOperationOptionalStorage = OptionalStorageType<AsyncOperationComplex<T>> ; template<T> using AsyncOperationStorage = StorageType<AsyncOperationComplex<T>> ; } template<class T> class AsyncOperation : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRt | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::IAsyncOperation<T>> { public : using AbiT = internal::AsyncOperationAbi<T> ; using OptionalStorageT = internal::AsyncOperationOptionalStorage<T> ; using StorageT = internal::AsyncOperationStorage<T> ; using Handler = ABI::Windows::Foundation::IAsyncOperationCompletedHandler<T> ; using ResultCallback = base::OnceCallback<)",
    "insertText": "void(StorageT)"
  },
  {
    "label": "AsyncOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncOperation()"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (callback_ =)",
    "insertText": "BindOnce(&AsyncOperation::OnResult, weak_factory_.GetWeakPtr())"
  },
  {
    "label": "AsyncOperation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsyncOperation(const AsyncOperation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncOperation&)",
    "insertText": "operator(const AsyncOperation&)"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_THREAD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_CALLED_ON_VALID_THREAD(thread_checker_)"
  },
  {
    "label": "put_Completed()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "put_Completed(Handler* handler)"
  },
  {
    "label": "get_Completed()",
    "kind": "Method",
    "detail": "Function (handler_ = handler ; return S_OK ; } IFACEMETHODIMP)",
    "insertText": "get_Completed(Handler** handler)"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "GetResults(AbiT* results)"
  },
  {
    "label": "callback()",
    "kind": "Method",
    "detail": "Function (} ResultCallback)",
    "insertText": "callback()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!callback_.is_null())"
  },
  {
    "label": "InvokeCompletedHandler()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InvokeCompletedHandler()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (handler_ ->)",
    "insertText": "Invoke(this, ABI::Windows::Foundation::AsyncStatus::Completed)"
  },
  {
    "label": "OnResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResult(StorageT result)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!results_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (results_ =)",
    "insertText": "move(result)"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (} ResultCallback callback_ ; Microsoft::WRL::ComPtr<Handler> handler_ ; OptionalStorageT results_ ;)",
    "insertText": "THREAD_CHECKER(thread_checker_)"
  }
]