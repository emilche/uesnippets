[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FActorDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropOp"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITreeItem"
  },
  {
    "label": "FDragDropPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDragDropPayload"
  },
  {
    "label": "FHLODOutlinerDragDropOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHLODOutlinerDragDropOp"
  },
  {
    "label": "ToolTipIconType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ToolTipIconType"
  },
  {
    "label": "FDragValidationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDragValidationInfo"
  },
  {
    "label": "FDragDropPayload()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HierarchicalLODType . h \" # include \" Input / DragAndDrop . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class AActor ; class FActorDragDropOp ; class SWidget ; class UWorld ; struct FSlateBrush ; enum class EClusterGenerationError : uint32 ; namespace HLODOutliner { struct ITreeItem ; typedef TSharedPtr<ITreeItem> FTreeItemPtr ; struct FDragDropPayload {)",
    "insertText": "FDragDropPayload()"
  },
  {
    "label": "FDragDropPayload()",
    "kind": "Method",
    "detail": "Function (template<TItem>)",
    "insertText": "FDragDropPayload(const TArray<TItem>& InDraggedItems)"
  },
  {
    "label": "PopulateDragDropPayload()",
    "kind": "Method",
    "detail": "Function (Item ->)",
    "insertText": "PopulateDragDropPayload(*this)"
  },
  {
    "label": "ParseDrag()",
    "kind": "Method",
    "detail": "Function (} } TOptional<TArray<TWeakObjectPtr<AActor>>> LODActors ; TOptional<TArray<TWeakObjectPtr<AActor>>> StaticMeshActors ; bool bSceneOutliner ; UWorld* OutlinerWorld ; EClusterGenerationError)",
    "insertText": "ParseDrag(const FDragDropOperation& Operation)"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (} ; TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation(const TArray<FTreeItemPtr>& InTreeItems)"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (struct FHLODOutlinerDragDropOp : public FDragDropOperation { enum ToolTipIconType { ToolTip_Compatible,ToolTip_Incompatible,ToolTip_Warning,ToolTip_MultipleSelection_Compatible,ToolTip_MultipleSelection_Incompatible,ToolTip_MultiSelection_Warning } ;)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FHLODOutlinerDragDropOp, FDragDropOperation)"
  },
  {
    "label": "FHLODOutlinerDragDropOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHLODOutlinerDragDropOp(const FDragDropPayload& DraggedObjects)"
  },
  {
    "label": "ResetTooltip()",
    "kind": "Method",
    "detail": "Function (using FDragDropOperation::Construct ; TSharedPtr<FActorDragDropOp> StaticMeshActorOp ; TSharedPtr<FActorDragDropOp> LODActorOp ; void)",
    "insertText": "ResetTooltip()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (OverrideText =)",
    "insertText": "FText()"
  },
  {
    "label": "SetTooltip()",
    "kind": "Method",
    "detail": "Function (OverrideIcon = nullptr ; } void)",
    "insertText": "SetTooltip(FText InOverrideText, const FSlateBrush* InOverrideIcon)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (OverrideText = InOverrideText ; OverrideIcon = InOverrideIcon ; } TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "GetOverrideVisibility()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "GetOverrideVisibility()"
  },
  {
    "label": "GetDefaultVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDefaultVisibility()"
  },
  {
    "label": "GetOverrideText()",
    "kind": "Method",
    "detail": "Function (FText OverrideText ; FText)",
    "insertText": "GetOverrideText()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FDragValidationInfo)",
    "insertText": "Invalid()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  }
]