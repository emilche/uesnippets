[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UMovieSceneSubTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubTrack"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FSubTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Widgets / SWidget . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" Tracks / MovieSceneSubTrack . h \" # include \" ISequencerSection . h \" # include \" ISequencerTrackEditor . h \" # include \" KeyframeTrackEditor . h \" # include \" MovieSceneTrackEditor . h \" class AActor ; struct FAssetData ; class FMenuBuilder ; class UMovieSceneSubTrack ; class FSubTrackEditor : public FKeyframeTrackEditor<UMovieSceneSubTrack> { public :)",
    "insertText": "FSubTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "FSubTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSubTrackEditor()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ProcessKeyOperation(FFrameNumber InKeyTime, const UE::Sequencer::FKeyOperation& Operation, ISequencer& InSequencer)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildOutlinerEditWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerEditWidget(const FGuid& ObjectBinding, UMovieSceneTrack* Track, const FBuildEditWidgetParams& Params)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "HandleAssetAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetAdded(UObject* Asset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResizable(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewSize, UMovieSceneTrack* InTrack)"
  },
  {
    "label": "GetDefaultExpansionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultExpansionState(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "InsertSection()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InsertSection(UMovieSceneTrack* Track)"
  },
  {
    "label": "DuplicateSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSection(UMovieSceneSubSection* Section)"
  },
  {
    "label": "CreateNewTake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewTake(UMovieSceneSubSection* Section)"
  },
  {
    "label": "ChangeTake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTake(UMovieSceneSequence* Sequence)"
  },
  {
    "label": "AddTakesMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTakesMenu(UMovieSceneSubSection* Section, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "EditMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditMetaData(UMovieSceneSubSection* Section)"
  },
  {
    "label": "UpdateActiveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveMode()"
  },
  {
    "label": "CanAddSubSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddSubSequence(const UMovieSceneSequence& Sequence)"
  },
  {
    "label": "GetSubTrackName()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "GetSubTrackName()"
  },
  {
    "label": "GetSubTrackToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSubTrackToolTip()"
  },
  {
    "label": "GetSubTrackBrushName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSubTrackBrushName()"
  },
  {
    "label": "GetSubSectionDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSubSectionDisplayName(const UMovieSceneSubSection* Section)"
  },
  {
    "label": "GetDefaultSubsequenceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultSubsequenceName()"
  },
  {
    "label": "GetDefaultSubsequenceDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultSubsequenceDirectory()"
  },
  {
    "label": "GetSubTrackClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UMovieSceneSubTrack>)",
    "insertText": "GetSubTrackClass()"
  },
  {
    "label": "UpdateOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrigin(FVector InPosition, FRotator InRotation)"
  },
  {
    "label": "ResetSectionPreviews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSectionPreviews()"
  },
  {
    "label": "ResetSectionPreviews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSectionPreviews(FMovieSceneSequenceIDRef IDRef)"
  },
  {
    "label": "ResetSectionPreviews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetSectionPreviews(const FMovieSceneChannelMetaData* MetaData, UMovieSceneSection* InSection)"
  },
  {
    "label": "GetTransformOriginDataForSubSection()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "GetTransformOriginDataForSubSection(const UMovieSceneSubSection* SubSection)"
  },
  {
    "label": "GetPreviousKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPreviousKey(FMovieSceneDoubleChannel& Channel, FFrameNumber Time)"
  },
  {
    "label": "GetSupportedSequenceClassPaths()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetSupportedSequenceClassPaths(TArray<FTopLevelAssetPath>& OutClassPaths)"
  },
  {
    "label": "HandleAddSubTrackMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddSubTrackMenuEntryExecute()"
  },
  {
    "label": "HandleAddSubTrackMenuEntryCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAddSubTrackMenuEntryCanExecute()"
  },
  {
    "label": "FindOrCreateSubTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSubTrack*)",
    "insertText": "FindOrCreateSubTrack(UMovieScene* MovieScene, UMovieSceneTrack* Track)"
  },
  {
    "label": "HandleAddSubSequenceComboButtonGetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleAddSubSequenceComboButtonGetMenuContent(UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::ITrackExtension> TrackModel)"
  },
  {
    "label": "HandleAddSubSequenceComboButtonMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleAddSubSequenceComboButtonMenuEntryExecute(const FAssetData& AssetData, UMovieSceneTrack* InTrack)"
  },
  {
    "label": "HandleAddSubSequenceComboButtonMenuEntryEnterPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddSubSequenceComboButtonMenuEntryEnterPressed(const TArray<FAssetData>& AssetData, UMovieSceneTrack* InTrack)"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult)",
    "insertText": "AddKeyInternal(FFrameNumber KeyTime, UMovieSceneSequence* InMovieSceneSequence, UMovieSceneTrack* InTrack, int32 RowIndex)"
  },
  {
    "label": "HandleSequenceAdded()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult)",
    "insertText": "HandleSequenceAdded(FFrameNumber KeyTime, UMovieSceneSequence* Sequence, UMovieSceneTrack* Track, int32 RowIndex)"
  },
  {
    "label": "ProcessKeyOperationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyOperationInternal(TArrayView<const UE::Sequencer::FKeySectionOperation> SectionsToKey, ISequencer& Sequencer, FFrameNumber KeyTime)"
  },
  {
    "label": "GetOriginKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOriginKeys(const FVector& CurrentPosition, const FRotator& CurrentRotation, UMovieSceneSection* Section, FGeneratedTrackKeys& OutGeneratedKeys)"
  }
]