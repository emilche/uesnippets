[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Cat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Cat"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COMPARE_THREE_WAY_COMPARABLE_H # define _LIBCPP___COMPARE_THREE_WAY_COMPARABLE_H # include<__compare / common_comparison_category . h> # include<__compare / ordering . h> # include<__concepts / common_reference_with . h> # include<__concepts / equality_comparable . h> # include<__concepts / same_as . h> # include<__concepts / totally_ordered . h> # include<__config> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,class _Cat = partial_ordering> concept three_way_comparable = __weakly_equality_comparable_with<_Tp,_Tp>&& __partially_ordered_with<_Tp,_Tp>&&)",
    "insertText": "requires(__make_const_lvalue_ref<_Tp> __a, __make_const_lvalue_ref<_Tp> __b)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function ({ __a<=> __b } -> __compares_as<_Cat> ; } ; template<class _Tp,class _Up,class _Cat = partial_ordering> concept three_way_comparable_with = three_way_comparable<_Tp,_Cat>&& three_way_comparable<_Up,_Cat>&& common_reference_with<__make_const_lvalue_ref<_Tp>,__make_const_lvalue_ref<_Up>>&& three_way_comparable<common_reference_t<__make_const_lvalue_ref<_Tp>,__make_const_lvalue_ref<_Up>>,_Cat>&& __weakly_equality_comparable_with<_Tp,_Up>&& __partially_ordered_with<_Tp,_Up>&&)",
    "insertText": "requires(__make_const_lvalue_ref<_Tp> __t, __make_const_lvalue_ref<_Up> __u)"
  }
]