[
  {
    "label": "LocalAllocDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalAllocDeleter"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_LOCALALLOC_H_ # define BASE_WIN_SCOPED_LOCALALLOC_H_ # include<memory> # include<utility> # include \" base / win / windows_types . h \" namespace base { namespace win { struct LocalAllocDeleter { void)",
    "insertText": "operator()(void* ptr)"
  },
  {
    "label": "LocalFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalFree(ptr)"
  },
  {
    "label": "TakeLocalAlloc()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> using ScopedLocalAllocTyped = std::unique_ptr<T,LocalAllocDeleter> ; using ScopedLocalAlloc = ScopedLocalAllocTyped<void> ; template<T> ScopedLocalAllocTyped<T>)",
    "insertText": "TakeLocalAlloc(T*& ptr)"
  }
]