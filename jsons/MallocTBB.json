[
  {
    "label": "FMallocTBB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocTBB"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformMemory . h \" # define TBBMALLOC_ENABLED PLATFORM_SUPPORTS_TBB&& TBB_ALLOCATOR_ALLOWED # if TBBMALLOC_ENABLED class FMallocTBB final : public FMalloc { public : void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "TryMalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryMalloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "TryRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryRealloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OutOfMemory(uint64 Size, uint32 Alignment)"
  },
  {
    "label": "OnOutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutOfMemory(Size, Alignment)"
  }
]