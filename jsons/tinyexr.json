[
  {
    "label": "_EXRVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRVersion"
  },
  {
    "label": "_EXRAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRAttribute"
  },
  {
    "label": "_EXRChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRChannelInfo"
  },
  {
    "label": "_EXRTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRTile"
  },
  {
    "label": "_EXRHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRHeader"
  },
  {
    "label": "_EXRMultiPartHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRMultiPartHeader"
  },
  {
    "label": "_EXRImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRImage"
  },
  {
    "label": "_EXRMultiPartImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXRMultiPartImage"
  },
  {
    "label": "_DeepImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_DeepImage"
  },
  {
    "label": "extern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extern"
  },
  {
    "label": "extern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extern"
  },
  {
    "label": "extern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extern"
  },
  {
    "label": "extern",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extern"
  },
  {
    "label": "members",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "members"
  },
  {
    "label": "mz_internal_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_internal_state"
  },
  {
    "label": "mz_stream_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_stream_s"
  },
  {
    "label": "mz_internal_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_internal_state"
  },
  {
    "label": "mz_zip_internal_state_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_zip_internal_state_tag"
  },
  {
    "label": "mz_zip_internal_state_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_zip_internal_state_tag"
  },
  {
    "label": "mz_zip_archive_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_zip_archive_tag"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "tinfl_decompressor_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tinfl_decompressor_tag"
  },
  {
    "label": "tinfl_decompressor_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tinfl_decompressor_tag"
  },
  {
    "label": "tinfl_decompressor_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tinfl_decompressor_tag"
  },
  {
    "label": "mz_internal_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_internal_state"
  },
  {
    "label": "mz_internal_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_internal_state"
  },
  {
    "label": "mz_zip_internal_state_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mz_zip_internal_state_tag"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "MZ_FILE_STAT_STRUCT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MZ_FILE_STAT_STRUCT"
  },
  {
    "label": "utimbuf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "utimbuf"
  },
  {
    "label": "MZ_FILE_STAT_STRUCT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MZ_FILE_STAT_STRUCT"
  },
  {
    "label": "ChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelInfo"
  },
  {
    "label": "HeaderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HeaderInfo"
  },
  {
    "label": "PIZChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIZChannelData"
  },
  {
    "label": "HufDec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HufDec"
  },
  {
    "label": "FHeapCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapCompare"
  },
  {
    "label": "ZFPCompressionParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ZFPCompressionParam"
  },
  {
    "label": "LayerChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LayerChannel"
  },
  {
    "label": "LoadEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXR(float **out_rgba, int *width, int *height,\n                   const char *filename, const char **err)"
  },
  {
    "label": "LoadEXRWithLayer()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRWithLayer(float **out_rgba, int *width, int *height,\n                   const char *filename, const char *layer_name, const char **err)"
  },
  {
    "label": "EXRLayers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EXRLayers(const char *filename, const char **layer_names[], int *num_layers, const char **err)"
  },
  {
    "label": "IsEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IsEXR(const char *filename)"
  },
  {
    "label": "SaveEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SaveEXR(const float *data, const int width, const int height,\n                   const int components, const int save_as_fp16,\n                   const char *filename, const char **err)"
  },
  {
    "label": "InitEXRHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEXRHeader(EXRHeader *exr_header)"
  },
  {
    "label": "InitEXRImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEXRImage(EXRImage *exr_image)"
  },
  {
    "label": "FreeEXRHeader()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FreeEXRHeader(EXRHeader *exr_header)"
  },
  {
    "label": "FreeEXRImage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FreeEXRImage(EXRImage *exr_image)"
  },
  {
    "label": "FreeEXRErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeEXRErrorMessage(const char *msg)"
  },
  {
    "label": "ParseEXRVersionFromFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRVersionFromFile(EXRVersion *version, const char *filename)"
  },
  {
    "label": "ParseEXRVersionFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRVersionFromMemory(EXRVersion *version,\n                                     const unsigned char *memory, size_t size)"
  },
  {
    "label": "ParseEXRHeaderFromFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRHeaderFromFile(EXRHeader *header, const EXRVersion *version,\n                                  const char *filename, const char **err)"
  },
  {
    "label": "ParseEXRHeaderFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRHeaderFromMemory(EXRHeader *header,\n                                    const EXRVersion *version,\n                                    const unsigned char *memory, size_t size,\n                                    const char **err)"
  },
  {
    "label": "ParseEXRMultipartHeaderFromFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRMultipartHeaderFromFile(EXRHeader ***headers,\n                                           int *num_headers,\n                                           const EXRVersion *version,\n                                           const char *filename,\n                                           const char **err)"
  },
  {
    "label": "ParseEXRMultipartHeaderFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEXRMultipartHeaderFromMemory(EXRHeader ***headers,\n                                             int *num_headers,\n                                             const EXRVersion *version,\n                                             const unsigned char *memory,\n                                             size_t size, const char **err)"
  },
  {
    "label": "LoadEXRImageFromFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRImageFromFile(EXRImage *image, const EXRHeader *header,\n                                const char *filename, const char **err)"
  },
  {
    "label": "LoadEXRImageFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRImageFromMemory(EXRImage *image, const EXRHeader *header,\n                                  const unsigned char *memory,\n                                  const size_t size, const char **err)"
  },
  {
    "label": "LoadEXRMultipartImageFromFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRMultipartImageFromFile(EXRImage *images,\n                                         const EXRHeader **headers,\n                                         unsigned int num_parts,\n                                         const char *filename,\n                                         const char **err)"
  },
  {
    "label": "LoadEXRMultipartImageFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRMultipartImageFromMemory(EXRImage *images,\n                                           const EXRHeader **headers,\n                                           unsigned int num_parts,\n                                           const unsigned char *memory,\n                                           const size_t size, const char **err)"
  },
  {
    "label": "SaveEXRImageToFile()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SaveEXRImageToFile(const EXRImage *image,\n                              const EXRHeader *exr_header, const char *filename,\n                              const char **err)"
  },
  {
    "label": "SaveEXRImageToMemory()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SaveEXRImageToMemory(const EXRImage *image,\n                                   const EXRHeader *exr_header,\n                                   unsigned char **memory, const char **err)"
  },
  {
    "label": "LoadDeepEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadDeepEXR(DeepImage *out_image, const char *filename,\n                       const char **err)"
  },
  {
    "label": "SaveDeepEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SaveDeepEXR(const DeepImage *in_image, const char *filename,\n//                       const char **err)"
  },
  {
    "label": "LoadMultiPartDeepEXR()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadMultiPartDeepEXR(DeepImage **out_image, int num_parts, const\n// char *filename,\n//                       const char **err)"
  },
  {
    "label": "LoadEXRFromMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LoadEXRFromMemory(float **out_rgba, int *width, int *height,\n                             const unsigned char *memory, size_t size,\n                             const char **err)"
  },
  {
    "label": "mz_zip_reader_locate_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName,\n   const char *pComment, mz_uint flags)"
  },
  {
    "label": "mz_zip_add_mem_to_archive_file_in_place()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename,\n   const char *pArchive_name,\n        const void *pBuf, size_t buf_size, const void *pComment, mz_uint16\n   comment_size, mz_uint level_and_flags)"
  },
  {
    "label": "mz_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mz_free(void *p)"
  },
  {
    "label": "mz_adler32()",
    "kind": "Method",
    "detail": "Function (mz_ulong)",
    "insertText": "mz_adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len)"
  },
  {
    "label": "mz_crc32()",
    "kind": "Method",
    "detail": "Function (mz_ulong)",
    "insertText": "mz_crc32(mz_ulong crc, const unsigned char *ptr, size_t buf_len)"
  },
  {
    "label": "mz_deflateInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_deflateInit(mz_streamp pStream, int level)"
  },
  {
    "label": "mz_deflateInit2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_deflateInit2(mz_streamp pStream, int level, int method, int window_bits,\n                    int mem_level, int strategy)"
  },
  {
    "label": "mz_deflateReset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_deflateReset(mz_streamp pStream)"
  },
  {
    "label": "mz_deflate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_deflate(mz_streamp pStream, int flush)"
  },
  {
    "label": "mz_deflateEnd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_deflateEnd(mz_streamp pStream)"
  },
  {
    "label": "mz_deflateBound()",
    "kind": "Method",
    "detail": "Function (mz_ulong)",
    "insertText": "mz_deflateBound(mz_streamp pStream, mz_ulong source_len)"
  },
  {
    "label": "mz_compress()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_compress(unsigned char *pDest, mz_ulong *pDest_len,\n                const unsigned char *pSource, mz_ulong source_len)"
  },
  {
    "label": "mz_compress2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_compress2(unsigned char *pDest, mz_ulong *pDest_len,\n                 const unsigned char *pSource, mz_ulong source_len, int level)"
  },
  {
    "label": "mz_compressBound()",
    "kind": "Method",
    "detail": "Function (mz_ulong)",
    "insertText": "mz_compressBound(mz_ulong source_len)"
  },
  {
    "label": "mz_inflateInit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_inflateInit(mz_streamp pStream)"
  },
  {
    "label": "mz_inflateInit2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_inflateInit2(mz_streamp pStream, int window_bits)"
  },
  {
    "label": "mz_inflate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_inflate(mz_streamp pStream, int flush)"
  },
  {
    "label": "mz_inflateEnd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_inflateEnd(mz_streamp pStream)"
  },
  {
    "label": "mz_uncompress()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_uncompress(unsigned char *pDest, mz_ulong *pDest_len,\n                  const unsigned char *pSource, mz_ulong source_len)"
  },
  {
    "label": "mz_zip_reader_init()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_init(mz_zip_archive *pZip, mz_uint64 size,\n                           mz_uint32 flags)"
  },
  {
    "label": "mz_zip_reader_init_mem()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_init_mem(mz_zip_archive *pZip, const void *pMem,\n                               size_t size, mz_uint32 flags)"
  },
  {
    "label": "mz_zip_reader_init_file()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_init_file(mz_zip_archive *pZip, const char *pFilename,\n                                mz_uint32 flags)"
  },
  {
    "label": "mz_zip_reader_get_num_files()",
    "kind": "Method",
    "detail": "Function (mz_uint)",
    "insertText": "mz_zip_reader_get_num_files(mz_zip_archive *pZip)"
  },
  {
    "label": "mz_zip_reader_file_stat()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_file_stat(mz_zip_archive *pZip, mz_uint file_index,\n                                mz_zip_archive_file_stat *pStat)"
  },
  {
    "label": "mz_zip_reader_is_file_a_directory()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip,\n                                          mz_uint file_index)"
  },
  {
    "label": "mz_zip_reader_is_file_encrypted()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip,\n                                        mz_uint file_index)"
  },
  {
    "label": "mz_zip_reader_get_filename()",
    "kind": "Method",
    "detail": "Function (mz_uint)",
    "insertText": "mz_zip_reader_get_filename(mz_zip_archive *pZip, mz_uint file_index,\n                                   char *pFilename, mz_uint filename_buf_size)"
  },
  {
    "label": "mz_zip_reader_locate_file()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName,\n                              const char *pComment, mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_to_mem_no_alloc()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_to_mem_no_alloc(mz_zip_archive *pZip,\n                                              mz_uint file_index, void *pBuf,\n                                              size_t buf_size, mz_uint flags,\n                                              void *pUser_read_buf,\n                                              size_t user_read_buf_size)"
  },
  {
    "label": "mz_zip_reader_extract_file_to_mem_no_alloc()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_file_to_mem_no_alloc(\n    mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size,\n    mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)"
  },
  {
    "label": "mz_zip_reader_extract_to_mem()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_to_mem(mz_zip_archive *pZip, mz_uint file_index,\n                                     void *pBuf, size_t buf_size,\n                                     mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_file_to_mem()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_file_to_mem(mz_zip_archive *pZip,\n                                          const char *pFilename, void *pBuf,\n                                          size_t buf_size, mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_to_callback()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_to_callback(mz_zip_archive *pZip,\n                                          mz_uint file_index,\n                                          mz_file_write_func pCallback,\n                                          void *pOpaque, mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_file_to_callback()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip,\n                                               const char *pFilename,\n                                               mz_file_write_func pCallback,\n                                               void *pOpaque, mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_to_file()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_to_file(mz_zip_archive *pZip, mz_uint file_index,\n                                      const char *pDst_filename, mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_extract_file_to_file()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_extract_file_to_file(mz_zip_archive *pZip,\n                                           const char *pArchive_filename,\n                                           const char *pDst_filename,\n                                           mz_uint flags)"
  },
  {
    "label": "mz_zip_reader_end()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_reader_end(mz_zip_archive *pZip)"
  },
  {
    "label": "mz_zip_writer_init()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_init(mz_zip_archive *pZip, mz_uint64 existing_size)"
  },
  {
    "label": "mz_zip_writer_init_heap()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_init_heap(mz_zip_archive *pZip,\n                                size_t size_to_reserve_at_beginning,\n                                size_t initial_allocation_size)"
  },
  {
    "label": "mz_zip_writer_init_file()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_init_file(mz_zip_archive *pZip, const char *pFilename,\n                                mz_uint64 size_to_reserve_at_beginning)"
  },
  {
    "label": "mz_zip_writer_init_from_reader()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_init_from_reader(mz_zip_archive *pZip,\n                                       const char *pFilename)"
  },
  {
    "label": "mz_zip_writer_add_mem()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_add_mem(mz_zip_archive *pZip, const char *pArchive_name,\n                              const void *pBuf, size_t buf_size,\n                              mz_uint level_and_flags)"
  },
  {
    "label": "mz_zip_writer_add_mem_ex()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_add_mem_ex(mz_zip_archive *pZip,\n                                 const char *pArchive_name, const void *pBuf,\n                                 size_t buf_size, const void *pComment,\n                                 mz_uint16 comment_size,\n                                 mz_uint level_and_flags, mz_uint64 uncomp_size,\n                                 mz_uint32 uncomp_crc32)"
  },
  {
    "label": "mz_zip_writer_add_file()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_add_file(mz_zip_archive *pZip, const char *pArchive_name,\n                               const char *pSrc_filename, const void *pComment,\n                               mz_uint16 comment_size, mz_uint level_and_flags)"
  },
  {
    "label": "mz_zip_writer_add_from_zip_reader()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip,\n                                          mz_zip_archive *pSource_zip,\n                                          mz_uint file_index)"
  },
  {
    "label": "mz_zip_writer_finalize_archive()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_finalize_archive(mz_zip_archive *pZip)"
  },
  {
    "label": "mz_zip_writer_finalize_heap_archive()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_finalize_heap_archive(mz_zip_archive *pZip, void **pBuf,\n                                            size_t *pSize)"
  },
  {
    "label": "mz_zip_writer_end()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_writer_end(mz_zip_archive *pZip)"
  },
  {
    "label": "mz_zip_add_mem_to_archive_file_in_place()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "mz_zip_add_mem_to_archive_file_in_place(\n    const char *pZip_filename, const char *pArchive_name, const void *pBuf,\n    size_t buf_size, const void *pComment, mz_uint16 comment_size,\n    mz_uint level_and_flags)"
  },
  {
    "label": "tinfl_decompress_mem_to_mem()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "tinfl_decompress_mem_to_mem(void *pOut_buf, size_t out_buf_len,\n                                   const void *pSrc_buf, size_t src_buf_len,\n                                   int flags)"
  },
  {
    "label": "tinfl_decompress_mem_to_callback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tinfl_decompress_mem_to_callback(const void *pIn_buf, size_t *pIn_buf_size,\n                                     tinfl_put_buf_func_ptr pPut_buf_func,\n                                     void *pPut_buf_user, int flags)"
  },
  {
    "label": "tinfl_decompress()",
    "kind": "Method",
    "detail": "Function (tinfl_status)",
    "insertText": "tinfl_decompress(tinfl_decompressor *r,\n                              const mz_uint8 *pIn_buf_next,\n                              size_t *pIn_buf_size, mz_uint8 *pOut_buf_start,\n                              mz_uint8 *pOut_buf_next, size_t *pOut_buf_size,\n                              const mz_uint32 decomp_flags)"
  },
  {
    "label": "tdefl_compress_mem_to_mem()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "tdefl_compress_mem_to_mem(void *pOut_buf, size_t out_buf_len,\n                                 const void *pSrc_buf, size_t src_buf_len,\n                                 int flags)"
  },
  {
    "label": "tdefl_compress_mem_to_output()",
    "kind": "Method",
    "detail": "Function (mz_bool)",
    "insertText": "tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len,\n                                     tdefl_put_buf_func_ptr pPut_buf_func,\n                                     void *pPut_buf_user, int flags)"
  },
  {
    "label": "tdefl_init()",
    "kind": "Method",
    "detail": "Function (tdefl_status)",
    "insertText": "tdefl_init(tdefl_compressor *d,\n                        tdefl_put_buf_func_ptr pPut_buf_func,\n                        void *pPut_buf_user, int flags)"
  },
  {
    "label": "tdefl_compress()",
    "kind": "Method",
    "detail": "Function (tdefl_status)",
    "insertText": "tdefl_compress(tdefl_compressor *d, const void *pIn_buf,\n                            size_t *pIn_buf_size, void *pOut_buf,\n                            size_t *pOut_buf_size, tdefl_flush flush)"
  },
  {
    "label": "tdefl_compress_buffer()",
    "kind": "Method",
    "detail": "Function (tdefl_status)",
    "insertText": "tdefl_compress_buffer(tdefl_compressor *d, const void *pIn_buf,\n                                   size_t in_buf_size, tdefl_flush flush)"
  },
  {
    "label": "tdefl_get_prev_return_status()",
    "kind": "Method",
    "detail": "Function (tdefl_status)",
    "insertText": "tdefl_get_prev_return_status(tdefl_compressor *d)"
  },
  {
    "label": "tdefl_get_adler32()",
    "kind": "Method",
    "detail": "Function (mz_uint32)",
    "insertText": "tdefl_get_adler32(tdefl_compressor *d)"
  },
  {
    "label": "tdefl_create_comp_flags_from_zip_params()",
    "kind": "Method",
    "detail": "Function (mz_uint)",
    "insertText": "tdefl_create_comp_flags_from_zip_params(int level, int window_bits,\n                                                int strategy)"
  },
  {
    "label": "MZ_MALLOC()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MZ_MALLOC(items * size)"
  },
  {
    "label": "MZ_REALLOC()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MZ_REALLOC(address, items * size)"
  },
  {
    "label": "mz_deflateInit2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_deflateInit2(pStream, level, MZ_DEFLATED, MZ_DEFAULT_WINDOW_BITS, 9,\n                         MZ_DEFAULT_STRATEGY)"
  },
  {
    "label": "mz_deflateEnd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_deflateEnd(&stream)"
  },
  {
    "label": "mz_compress2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_compress2(pDest, pDest_len, pSource, source_len,\n                      MZ_DEFAULT_COMPRESSION)"
  },
  {
    "label": "mz_deflateBound()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_deflateBound(NULL, source_len)"
  },
  {
    "label": "mz_inflateInit2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_inflateInit2(pStream, MZ_DEFAULT_WINDOW_BITS)"
  },
  {
    "label": "mz_inflateEnd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_inflateEnd(&stream)"
  },
  {
    "label": "TINFL_GET_BYTE()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "TINFL_GET_BYTE(7, r->m_raw_header[counter])"
  },
  {
    "label": "TINFL_GET_BYTE()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "TINFL_GET_BYTE(42, s)"
  },
  {
    "label": "tdefl_start_dynamic_block()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "tdefl_start_dynamic_block(d)"
  },
  {
    "label": "tdefl_compress_lz_codes()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "tdefl_compress_lz_codes(d)"
  },
  {
    "label": "tdefl_compress()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "tdefl_compress(d, pIn_buf, &in_buf_size, NULL, NULL, flush)"
  },
  {
    "label": "tdefl_write_image_to_png_file_in_memory_ex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "tdefl_write_image_to_png_file_in_memory_ex(pImage, w, h, num_chans,\n                                                    pLen_out, 6, MZ_FALSE)"
  },
  {
    "label": "mz_zip_array_reserve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_array_reserve(pZip, pArray, pArray->m_size + n, MZ_TRUE)"
  },
  {
    "label": "mktime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mktime(&tm)"
  },
  {
    "label": "MZ_FREAD()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MZ_FREAD(pBuf, 1, n, pZip->m_pState->m_pFile)"
  },
  {
    "label": "mz_zip_reader_locate_file_binary_search()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_locate_file_binary_search(pZip, pName)"
  },
  {
    "label": "mz_zip_reader_extract_to_mem_no_alloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_to_mem_no_alloc(pZip, file_index, pBuf, buf_size,\n                                               flags, pUser_read_buf,\n                                               user_read_buf_size)"
  },
  {
    "label": "mz_zip_reader_extract_to_mem_no_alloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_to_mem_no_alloc(pZip, file_index, pBuf, buf_size,\n                                               flags, NULL, 0)"
  },
  {
    "label": "mz_zip_reader_extract_file_to_mem_no_alloc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_file_to_mem_no_alloc(pZip, pFilename, pBuf,\n                                                    buf_size, flags, NULL, 0)"
  },
  {
    "label": "mz_zip_reader_extract_to_heap()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_to_heap(pZip, file_index, pSize, flags)"
  },
  {
    "label": "mz_zip_reader_extract_to_callback()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_to_callback(pZip, file_index, pCallback, pOpaque,\n                                           flags)"
  },
  {
    "label": "mz_zip_reader_extract_to_file()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_reader_extract_to_file(pZip, file_index, pDst_filename, flags)"
  },
  {
    "label": "MZ_FWRITE()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MZ_FWRITE(pBuf, 1, n, pZip->m_pState->m_pFile)"
  },
  {
    "label": "mz_zip_writer_add_mem_ex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mz_zip_writer_add_mem_ex(pZip, pArchive_name, pBuf, buf_size, NULL, 0,\n                                  level_and_flags, 0, 0)"
  },
  {
    "label": "MZ_FCLOSE()",
    "kind": "Method",
    "detail": "Function (yet)",
    "insertText": "MZ_FCLOSE(pSrc_file)"
  },
  {
    "label": "MZ_CLEAR_OBJ()",
    "kind": "Method",
    "detail": "Function (record)",
    "insertText": "MZ_CLEAR_OBJ(hdr)"
  },
  {
    "label": "tmpBuf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "tmpBuf(src_size)"
  },
  {
    "label": "tmpBuf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "tmpBuf(*uncompressed_size)"
  },
  {
    "label": "tmpBuf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "tmpBuf(src_size)"
  },
  {
    "label": "tmpBuf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "tmpBuf(uncompressed_size)"
  },
  {
    "label": "wenc16()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "wenc16(*px, *p10, i00, *p10)"
  },
  {
    "label": "wenc16()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "wenc16(*px, *p01, i00, *p01)"
  },
  {
    "label": "wdec16()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "wdec16(*px, *p10, i00, *p10)"
  },
  {
    "label": "wdec16()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "wdec16(*px, *p01, i00, *p01)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (null)",
    "insertText": "length(unused values)"
  },
  {
    "label": "hufBuildDecTable()",
    "kind": "Method",
    "detail": "Function (and)",
    "insertText": "hufBuildDecTable()"
  },
  {
    "label": "hlink()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "hlink(HUF_ENCSIZE)"
  },
  {
    "label": "scode()",
    "kind": "Method",
    "detail": "Function (long>)",
    "insertText": "scode(HUF_ENCSIZE)"
  },
  {
    "label": "hufDecode()",
    "kind": "Method",
    "detail": "Function (by)",
    "insertText": "hufDecode()"
  },
  {
    "label": "getChar()",
    "kind": "Method",
    "detail": "Function (bits)",
    "insertText": "getChar(c, lc, in)"
  },
  {
    "label": "freq()",
    "kind": "Method",
    "detail": "Function (long>)",
    "insertText": "freq(HUF_ENCSIZE)"
  },
  {
    "label": "freq()",
    "kind": "Method",
    "detail": "Function (long>)",
    "insertText": "freq(HUF_ENCSIZE)"
  },
  {
    "label": "hdec()",
    "kind": "Method",
    "detail": "Function (std::vector<HufDec>)",
    "insertText": "hdec(HUF_DECSIZE)"
  },
  {
    "label": "bitmap()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "bitmap(BITMAP_SIZE)"
  },
  {
    "label": "lut()",
    "kind": "Method",
    "detail": "Function (short>)",
    "insertText": "lut(USHORT_RANGE)"
  },
  {
    "label": "bitmap()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "bitmap(BITMAP_SIZE)"
  },
  {
    "label": "lut()",
    "kind": "Method",
    "detail": "Function (short>)",
    "insertText": "lut(USHORT_RANGE)"
  },
  {
    "label": "tmpBuffer()",
    "kind": "Method",
    "detail": "Function (short>)",
    "insertText": "tmpBuffer(tmpBufSize)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "buf(buf_size)"
  },
  {
    "label": "TEXR_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "TEXR_ASSERT(0 && \"PIZ is enabled in this build\")"
  },
  {
    "label": "tile_count()",
    "kind": "Method",
    "detail": "Function (std::atomic<size_t>)",
    "insertText": "tile_count(0)"
  },
  {
    "label": "y_count()",
    "kind": "Method",
    "detail": "Function (std::atomic<int>)",
    "insertText": "y_count(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "for(int y = 0; y < static_cast<int>(num_blocks)"
  },
  {
    "label": "offsets()",
    "kind": "Method",
    "detail": "Function (std::vector<tinyexr::tinyexr_uint64>)",
    "insertText": "offsets(num_blocks)"
  },
  {
    "label": "full_name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "full_name(exr_header.channels[c].name)"
  },
  {
    "label": "ch_name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ch_name(exr_header.channels[c].name)"
  },
  {
    "label": "LoadEXRWithLayer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LoadEXRWithLayer(out_rgba, width, height, filename, /* layername */NULL, err)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "buf(filesize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TINYEXR_USE_ZFP)",
    "insertText": "for(size_t i = 0; i < static_cast<size_t>(exr_header->num_channels)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "header(8)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "header(8)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "header(8)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "block(bufLen)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "header(8)"
  },
  {
    "label": "TEXR_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "TEXR_ASSERT(0)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "header(8)"
  },
  {
    "label": "TEXR_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "TEXR_ASSERT(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (parallel)",
    "insertText": "for(size_t i = 0; i < static_cast<size_t>(num_blocks)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (std::vector<char>)",
    "insertText": "buf(filesize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UINT)",
    "insertText": "for(size_t x = 0; x < static_cast<size_t>(samples_per_line)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "for(size_t x = 0; x < static_cast<size_t>(samples_per_line)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "for(size_t x = 0; x < static_cast<size_t>(samples_per_line)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "buf(filesize)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "buf(filesize)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "ParseEXRVersionFromMemory()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ParseEXRVersionFromMemory(version, buf, tinyexr::kEXRVersionSize)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "fseek(fp, 0, SEEK_END)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (char>)",
    "insertText": "buf(filesize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (layers)",
    "insertText": "for(size_t i = 0; i < static_cast<size_t>(width * height)"
  },
  {
    "label": "strncpy_s()",
    "kind": "Method",
    "detail": "Function (_MSC_VER)",
    "insertText": "strncpy_s(header.channels[0].name, \"A\", 255)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "strncpy(header.channels[0].name, \"A\", 255)"
  },
  {
    "label": "strncpy_s()",
    "kind": "Method",
    "detail": "Function (_MSC_VER)",
    "insertText": "strncpy_s(header.channels[0].name, \"B\", 255)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "strncpy(header.channels[0].name, \"B\", 255)"
  },
  {
    "label": "strncpy_s()",
    "kind": "Method",
    "detail": "Function (_MSC_VER)",
    "insertText": "strncpy_s(header.channels[0].name, \"A\", 255)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "strncpy(header.channels[0].name, \"A\", 255)"
  }
]