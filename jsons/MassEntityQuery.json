[
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FMassDebugger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassDebugger"
  },
  {
    "label": "EParallelForMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParallelForMode"
  },
  {
    "label": "FScopedSubsystemRequirementsRestore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSubsystemRequirementsRestore"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Class . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" MassEntityTypes . h \" # include \" MassArchetypeTypes . h \" # include \" MassExternalSubsystemTraits . h \" # include \" MassRequirements . h \" # include \" MassEntityQuery . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FMassEntityQuery()",
    "kind": "Method",
    "detail": "Function (public : enum EParallelForMode { Default,ForceParallelExecution } ;)",
    "insertText": "FMassEntityQuery()"
  },
  {
    "label": "FMassEntityQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassEntityQuery(std::initializer_list<UScriptStruct*> InitList)"
  },
  {
    "label": "FMassEntityQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassEntityQuery(TConstArrayView<const UScriptStruct*> InitList)"
  },
  {
    "label": "FMassEntityQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassEntityQuery(UMassProcessor& Owner)"
  },
  {
    "label": "RegisterWithProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWithProcessor(UMassProcessor& Owner)"
  },
  {
    "label": "ForEachEntityChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntityChunk(FMassEntityManager& EntityManager, FMassExecutionContext& ExecutionContext, const FMassExecuteFunction& ExecuteFunction)"
  },
  {
    "label": "ForEachEntityChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntityChunk(const FMassArchetypeEntityCollection& EntityCollection, FMassEntityManager& EntitySubsystem , FMassExecutionContext& ExecutionContext, const FMassExecuteFunction& ExecuteFunction)"
  },
  {
    "label": "ParallelForEachEntityChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelForEachEntityChunk(FMassEntityManager& EntityManager, FMassExecutionContext& ExecutionContext , const FMassExecuteFunction& ExecuteFunction, const EParallelForMode ParallelMode = Default)"
  },
  {
    "label": "ForEachEntityChunkInCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntityChunkInCollections(TConstArrayView<FMassArchetypeEntityCollection> EntityCollections, FMassEntityManager& EntityManager , FMassExecutionContext& ExecutionContext, const FMassExecuteFunction& ExecuteFunction)"
  },
  {
    "label": "ParallelForEachEntityChunkInCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelForEachEntityChunkInCollection(TConstArrayView<FMassArchetypeEntityCollection> EntityCollections , FMassEntityManager& EntityManager, FMassExecutionContext& ExecutionContext, const FMassExecuteFunction& ExecuteFunction , const EParallelForMode ParallelMode)"
  },
  {
    "label": "CacheArchetypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheArchetypes(const FMassEntityManager& InEntityManager)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "DirtyCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyCachedData()"
  },
  {
    "label": "DoesRequireGameThreadExecution()",
    "kind": "Method",
    "detail": "Function (EntitySubsystemHash = 0 ; LastUpdatedArchetypeDataVersion = 0 ; } bool)",
    "insertText": "DoesRequireGameThreadExecution()"
  },
  {
    "label": "RequireMutatingWorldAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequireMutatingWorldAccess()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bRequiresMutatingWorldAccess = true ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetArchetypes()",
    "kind": "Method",
    "detail": "Function (} const TArray<FMassArchetypeHandle>&)",
    "insertText": "GetArchetypes()"
  },
  {
    "label": "GetNumMatchingEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMatchingEntities(TConstArrayView<FMassArchetypeEntityCollection> EntityCollections)"
  },
  {
    "label": "HasMatchingEntities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMatchingEntities(FMassEntityManager& InEntityManager)"
  },
  {
    "label": "SetChunkFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkFilter(const FMassChunkConditionFunction& InFunction)"
  },
  {
    "label": "ClearChunkFilter()",
    "kind": "Method",
    "detail": "Function (ChunkCondition = InFunction ; } void)",
    "insertText": "ClearChunkFilter()"
  },
  {
    "label": "HasChunkFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChunkFilter()"
  },
  {
    "label": "GetRequirementsMappingForArchetype()",
    "kind": "Method",
    "detail": "Function (} const FMassQueryRequirementIndicesMapping&)",
    "insertText": "GetRequirementsMappingForArchetype(const FMassArchetypeHandle ArchetypeHandle)"
  },
  {
    "label": "ExportRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportRequirements(FMassExecutionRequirements& OutRequirements)"
  },
  {
    "label": "SetParallelCommandBufferEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParallelCommandBufferEnabled(const bool bInAllowParallelCommands)"
  },
  {
    "label": "FScopedSubsystemRequirementsRestore()",
    "kind": "Method",
    "detail": "Function (bAllowParallelCommands = bInAllowParallelCommands ; } private : struct FScopedSubsystemRequirementsRestore {)",
    "insertText": "FScopedSubsystemRequirementsRestore(FMassExecutionContext& ExecutionContext)"
  },
  {
    "label": "FScopedSubsystemRequirementsRestore()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSubsystemRequirementsRestore()"
  }
]