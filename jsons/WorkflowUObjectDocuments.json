[
  {
    "label": "FTabPayload_UObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabPayload_UObject"
  },
  {
    "label": "FDocumentTabFactoryForObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDocumentTabFactoryForObjects"
  },
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" Misc / Attribute . h \" # include \" Templates / Casts . h \" # include \" Widgets / SWidget . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" WorkflowOrientedApp / WorkflowTabFactory . h \" # include \" WorkflowOrientedApp / WorkflowTabFactory . h \" struct FTabPayload_UObject : public FTabPayload { public : TSharedRef<FTabPayload_UObject>)",
    "insertText": "Make(const UObject* DocumentID)"
  },
  {
    "label": "CastChecked()",
    "kind": "Method",
    "detail": "Function (} template<CastType> CastType*)",
    "insertText": "CastChecked(TSharedPtr<FTabPayload> Payload)"
  },
  {
    "label": "FTabPayload_UObject()",
    "kind": "Method",
    "detail": "Function (UObject* UntypedObject = StaticCastSharedPtr<)",
    "insertText": "FTabPayload_UObject(Payload)->DocumentID.Get(true)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(const TSharedRef<FTabPayload>& OtherPayload)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FTabPayload_UObject()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTabPayload_UObject()"
  },
  {
    "label": "FTabPayload_UObject()",
    "kind": "Method",
    "detail": "Function (} ; private :)",
    "insertText": "FTabPayload_UObject(UObject* InDocumentID) : FTabPayload(NAME_Object) , DocumentID(InDocumentID)"
  },
  {
    "label": "SupportsObjectType()",
    "kind": "Method",
    "detail": "Function (} private : TWeakObjectPtr<UObject> DocumentID ; } ; template<BaseClass> struct FDocumentTabFactoryForObjects : public FDocumentTabFactory { public : bool)",
    "insertText": "SupportsObjectType(UObject* DocumentID)"
  },
  {
    "label": "CreateTabBody()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<SWidget>)",
    "insertText": "CreateTabBody(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "BaseClass()",
    "kind": "Method",
    "detail": "Function (BaseClass* TypedDocumentID = FTabPayload_UObject::CastChecked<)",
    "insertText": "BaseClass(Info.Payload)"
  },
  {
    "label": "GetTabIcon()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetTabIcon(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "IsPayloadSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPayloadSupported(TSharedRef<FTabPayload> Payload)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* DocumentID = FTabPayload_UObject::CastChecked<)",
    "insertText": "UObject(Payload)"
  },
  {
    "label": "IsPayloadValid()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsPayloadValid(TSharedRef<FTabPayload> Payload)"
  },
  {
    "label": "FDocumentTabFactoryForObjects()",
    "kind": "Method",
    "detail": "Function (} return false ; } protected :)",
    "insertText": "FDocumentTabFactoryForObjects(FName InIdentifier, TSharedPtr<class FAssetEditorToolkit> InHostingApp) : FDocumentTabFactory(InIdentifier, InHostingApp)"
  },
  {
    "label": "ConstructTabName()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FText>)",
    "insertText": "ConstructTabName(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "ConstructTabNameForObject()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FText>)",
    "insertText": "ConstructTabNameForObject(BaseClass* DocumentID)"
  },
  {
    "label": "CreateTabBodyForObject()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTabBodyForObject(const FWorkflowTabSpawnInfo& Info, BaseClass* DocumentID)"
  },
  {
    "label": "GetTabIconForObject()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTabIconForObject(const FWorkflowTabSpawnInfo& Info, BaseClass* DocumentID)"
  }
]