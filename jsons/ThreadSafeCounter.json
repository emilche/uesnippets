[
  {
    "label": "FThreadSafeCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSafeCounter"
  },
  {
    "label": "FThreadSafeCounter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" class FThreadSafeCounter { public : typedef int32 IntegerType ;)",
    "insertText": "FThreadSafeCounter()"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (# if USING_THREAD_SANITISER)",
    "insertText": "AtomicStore(&Counter, 0)"
  },
  {
    "label": "FThreadSafeCounter()",
    "kind": "Method",
    "detail": "Function (# else Counter = 0 ; # endif })",
    "insertText": "FThreadSafeCounter(const FThreadSafeCounter& Other)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (# if USING_THREAD_SANITISER)",
    "insertText": "AtomicStore(&Counter, Other.GetValue())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (# else Counter = Other .)",
    "insertText": "GetValue()"
  },
  {
    "label": "FThreadSafeCounter()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FThreadSafeCounter(int32 Value)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (# if USING_THREAD_SANITISER)",
    "insertText": "AtomicStore(&Counter, Value)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (# else Counter = Value ; # endif } int32)",
    "insertText": "Increment()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(int32 Amount)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Decrement()"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Subtract(int32 Amount)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Set(int32 Value)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "operator(const FThreadSafeCounter& Other)"
  }
]