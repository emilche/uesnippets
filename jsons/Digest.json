[
  {
    "label": "Digest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Digest"
  },
  {
    "label": "Digest()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Util_Digest_h # define Alembic_Util_Digest_h # include<Alembic / Util / Foundation . h> # include<Alembic / Util / PlainOldDataType . h> namespace Alembic { namespace Util { namespace ALEMBIC_VERSION_NS { struct Digest : public Alembic::Util::totally_ordered<Digest> { union { uint8_t d [ 1 6 ] ; uint64_t words [ 2 ] ; } ;)",
    "insertText": "Digest()"
  },
  {
    "label": "Digest()",
    "kind": "Method",
    "detail": "Function (words [ 0 ] = words [ 1 ] = 0 ; })",
    "insertText": "Digest(const Digest &copy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (words [ 0 ] = copy . words [ 0 ] ; words [ 1 ] = copy . words [ 1 ] ; } Digest&)",
    "insertText": "operator(const Digest &copy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (words [ 0 ] = copy . words [ 0 ] ; words [ 1 ] = copy . words [ 1 ] ; return* this ; } uint8_t&)",
    "insertText": "operator(size_t i)"
  },
  {
    "label": "setfill()",
    "kind": "Method",
    "detail": "Function (ostr<<)",
    "insertText": "setfill('0' ) << std::setw( 2 ) << std::hex << std::noshowbase << ( int)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} } std::string)",
    "insertText": "str()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (std::stringstream sstr ;)",
    "insertText": "print(sstr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Digest &iRhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; std::ostream&)",
    "insertText": "operator(std::ostream &ostr, const Digest &a)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "print(ostr)"
  }
]