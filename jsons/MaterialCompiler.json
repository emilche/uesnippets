[
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "FMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterInfo"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "EMaterialForceCastFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialForceCastFlags"
  },
  {
    "label": "ESubstrateMaterialExport",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESubstrateMaterialExport"
  },
  {
    "label": "ESubstrateMaterialExportContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESubstrateMaterialExportContext"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "EMaterialSamplerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialSamplerType"
  },
  {
    "label": "UMaterialExpressionCustom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustom"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "FProxyMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProxyMaterialCompiler"
  },
  {
    "label": "FScopedMaterialCompilerAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedMaterialCompilerAttribute"
  },
  {
    "label": "FMaterialCompiler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" MaterialShared . h \" # include \" Materials / MaterialExpressionSpeedTree . h \" # include \" Materials / MaterialExpressionTextureSample . h \" # include \" Materials / MaterialExpressionLocalPosition . h \" # include \" Materials / MaterialExpressionWorldPosition . h \" # include \" Materials / MaterialExpressionTextureProperty . h \" # include \" Materials / MaterialExpressionViewProperty . h \" namespace UE { namespace Shader { struct FValue ; enum class EValueType : uint8 ; } } class Error ; class UMaterialParameterCollection ; class URuntimeVirtualTexture ; class UTexture ; class UTextureCollection ; struct FMaterialParameterInfo ; class USparseVolumeTexture ; enum EMaterialForceCastFlags { MFCF_ForceCast = 1<<0,MFCF_ExactMatch = 1<<2,MFCF_ReplicateValue = 1<<3 } ; enum class EVirtualTextureUnpackType { None,BaseColorYCoCg,NormalBC3,NormalBC5,NormalBC3BC3,NormalBC5BC1,HeightR16,NormalBGR565,BaseColorSRGB,DisplacementR16,} ; enum class EMaterialCompilerType { Standard,Lightmass,MaterialProxy,} ; enum ESubstrateMaterialExport : uint8 { SME_None = 0,SME_Diffuse = 1,SME_Normal = 2,SME_Emissive = 3,SME_Transmittance = 4,SME_MaterialPreview = 5 } ; enum ESubstrateMaterialExportContext : uint8 { SMEC_Opaque = 0,SMEC_Translucent = 1 } ; class FMaterialCompiler { public : ~)",
    "insertText": "FMaterialCompiler()"
  },
  {
    "label": "ShouldStopTranslating()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldStopTranslating()"
  },
  {
    "label": "SetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialProperty(EMaterialProperty InProperty, EShaderFrequency OverrideShaderFrequency = SF_NumFrequencies, bool bUsePreviousFrameTime = false)"
  },
  {
    "label": "PushMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMaterialAttribute(const FGuid& InAttributeID)"
  },
  {
    "label": "PopMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "PopMaterialAttribute()"
  },
  {
    "label": "GetMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (const FGuid)",
    "insertText": "GetMaterialAttribute()"
  },
  {
    "label": "SetBaseMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseMaterialAttribute(const FGuid& InAttributeID)"
  },
  {
    "label": "PushParameterOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushParameterOwner(const FMaterialParameterInfo& InOwnerInfo)"
  },
  {
    "label": "PopParameterOwner()",
    "kind": "Method",
    "detail": "Function (FMaterialParameterInfo)",
    "insertText": "PopParameterOwner()"
  },
  {
    "label": "GetCurrentShaderFrequency()",
    "kind": "Method",
    "detail": "Function (EShaderFrequency)",
    "insertText": "GetCurrentShaderFrequency()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Error(const TCHAR* Text)"
  },
  {
    "label": "Errorf()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Errorf(const TCHAR* Format,...)"
  },
  {
    "label": "AppendExpressionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExpressionError(UMaterialExpression* Expression, const TCHAR* Text)"
  },
  {
    "label": "CallExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CallExpression(FMaterialExpressionKey ExpressionKey,FMaterialCompiler* InCompiler)"
  },
  {
    "label": "CallExpressionExec()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CallExpressionExec(UMaterialExpression* Expression)"
  },
  {
    "label": "GetCompilerType()",
    "kind": "Method",
    "detail": "Function (EMaterialCompilerType)",
    "insertText": "GetCompilerType()"
  },
  {
    "label": "IsLightmassCompiler()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLightmassCompiler()"
  },
  {
    "label": "SetSubstrateMaterialExportType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubstrateMaterialExportType(ESubstrateMaterialExport InSubstrateMaterialExport, ESubstrateMaterialExportContext InSubstrateMaterialExportContext, uint8 InSubstrateMaterialExportLegacyBlendMode)"
  },
  {
    "label": "GetSubstrateMaterialExportType()",
    "kind": "Method",
    "detail": "Function (SubstrateMaterialExport = InSubstrateMaterialExport ; SubstrateMaterialExportContext = InSubstrateMaterialExportContext ; SubstrateMaterialExportLegacyBlendMode = InSubstrateMaterialExportLegacyBlendMode ; } ESubstrateMaterialExport)",
    "insertText": "GetSubstrateMaterialExportType()"
  },
  {
    "label": "GetQualityLevel()",
    "kind": "Method",
    "detail": "Function (EMaterialQualityLevel::Type)",
    "insertText": "GetQualityLevel()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "GetShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetShaderPlatform()"
  },
  {
    "label": "GetTargetPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "GetTargetPlatform()"
  },
  {
    "label": "IsTangentSpaceNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentSpaceNormal()"
  },
  {
    "label": "GetMaterialShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetMaterialShadingModels()"
  },
  {
    "label": "GetCompiledShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetCompiledShadingModels()"
  },
  {
    "label": "GetParameterType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetParameterType(int32 Index)"
  },
  {
    "label": "GetParameterUniformExpression()",
    "kind": "Method",
    "detail": "Function (FMaterialUniformExpression*)",
    "insertText": "GetParameterUniformExpression(int32 Index)"
  },
  {
    "label": "GetTextureForExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureForExpression(int32 Index, int32& OutTextureIndex, EMaterialSamplerType& OutSamplerType, TOptional<FName>& OutParameterName)"
  },
  {
    "label": "GetTextureCollectionForExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureCollectionForExpression(int32 Index, int32& OutTextureCollectionIndex, TOptional<FName>& OutParameterName)"
  },
  {
    "label": "IsMaterialPropertyUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialPropertyUsed(EMaterialProperty Property, int32 CodeChunkIdx)"
  },
  {
    "label": "ValidCast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ValidCast(int32 Code,EMaterialValueType DestType)"
  },
  {
    "label": "ForceCast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForceCast(int32 Code,EMaterialValueType DestType,uint32 ForceCastFlags = 0)"
  },
  {
    "label": "CastShadingModelToFloat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CastShadingModelToFloat(int32 Code)"
  },
  {
    "label": "TruncateLWC()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TruncateLWC(int32 Code)"
  },
  {
    "label": "PushFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFunction(FMaterialFunctionCompileState* FunctionState)"
  },
  {
    "label": "PopFunction()",
    "kind": "Method",
    "detail": "Function (FMaterialFunctionCompileState*)",
    "insertText": "PopFunction()"
  },
  {
    "label": "GetCurrentFunctionStackDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentFunctionStackDepth()"
  },
  {
    "label": "AccessCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AccessCollectionParameter(UMaterialParameterCollection* ParameterCollection, int32 ParameterIndex, int32 ComponentIndex)"
  },
  {
    "label": "NumericParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumericParameter(EMaterialParameterType ParameterType, FName ParameterName, const UE::Shader::FValue& DefaultValue)"
  },
  {
    "label": "ScalarParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ScalarParameter(FName ParameterName, float DefaultValue)"
  },
  {
    "label": "VectorParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VectorParameter(FName ParameterName, const FLinearColor& DefaultValue)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant(float X)"
  },
  {
    "label": "Constant2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant2(float X,float Y)"
  },
  {
    "label": "Constant3()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant3(float X,float Y,float Z)"
  },
  {
    "label": "Constant4()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Constant4(float X,float Y,float Z,float W)"
  },
  {
    "label": "GenericConstant()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericConstant(const UE::Shader::FValue& Value)"
  },
  {
    "label": "ViewProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ViewProperty(EMaterialExposedViewProperty Property, bool InvProperty = false)"
  },
  {
    "label": "IsOrthographic()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IsOrthographic()"
  },
  {
    "label": "GameTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GameTime(bool bPeriodic, float Period)"
  },
  {
    "label": "RealTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RealTime(bool bPeriodic, float Period)"
  },
  {
    "label": "DeltaTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeltaTime()"
  },
  {
    "label": "PeriodicHint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PeriodicHint(int32 PeriodicCode)"
  },
  {
    "label": "Cosine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Cosine(int32 X)"
  },
  {
    "label": "Tangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Tangent(int32 X)"
  },
  {
    "label": "Arcsine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arcsine(int32 X)"
  },
  {
    "label": "ArcsineFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArcsineFast(int32 X)"
  },
  {
    "label": "Arccosine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arccosine(int32 X)"
  },
  {
    "label": "ArccosineFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArccosineFast(int32 X)"
  },
  {
    "label": "Arctangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent(int32 X)"
  },
  {
    "label": "ArctangentFast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ArctangentFast(int32 X)"
  },
  {
    "label": "Arctangent2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent2(int32 Y, int32 X)"
  },
  {
    "label": "Arctangent2Fast()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Arctangent2Fast(int32 Y, int32 X)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Floor(int32 X)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Ceil(int32 X)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Round(int32 X)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Truncate(int32 X)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sign(int32 X)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Frac(int32 X)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Fmod(int32 A, int32 B)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Modulo(int32 A, int32 B)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Abs(int32 X)"
  },
  {
    "label": "ReflectionVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionVector()"
  },
  {
    "label": "ReflectionAboutCustomWorldNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionAboutCustomWorldNormal(int32 CustomWorldNormal, int32 bNormalizeCustomWorldNormal)"
  },
  {
    "label": "CameraVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CameraVector()"
  },
  {
    "label": "LightVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightVector()"
  },
  {
    "label": "GetViewportUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetViewportUV()"
  },
  {
    "label": "GetPixelPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPixelPosition()"
  },
  {
    "label": "LocalPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LocalPosition(EPositionIncludedOffsets IncludedOffsets, ELocalPositionOrigin OriginType)"
  },
  {
    "label": "WorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WorldPosition(EWorldPositionIncludedOffsets WorldPositionIncludedOffsets)"
  },
  {
    "label": "ObjectWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectWorldPosition(EPositionOrigin OriginType)"
  },
  {
    "label": "ObjectRadius()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ObjectRadius()"
  },
  {
    "label": "ObjectBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectBounds()"
  },
  {
    "label": "ObjectLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "InstanceLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InstanceLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "PreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedLocalBounds(int32 OutputIndex)"
  },
  {
    "label": "DistanceCullFade()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceCullFade()"
  },
  {
    "label": "ActorWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ActorWorldPosition(EPositionOrigin OriginType)"
  },
  {
    "label": "ParticleMacroUV()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleMacroUV()"
  },
  {
    "label": "ParticleSubUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSubUV(int32 TextureIndex, EMaterialSamplerType SamplerType, int32 MipValue0Index, int32 MipValue1Index, ETextureMipValueMode MipValueMode, bool bBlend)"
  },
  {
    "label": "ParticleSubUVProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSubUVProperty(int32 PropertyIndex)"
  },
  {
    "label": "ParticleColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleColor()"
  },
  {
    "label": "ParticlePosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticlePosition(EPositionOrigin OriginType)"
  },
  {
    "label": "ParticleRadius()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ParticleRadius()"
  },
  {
    "label": "SphericalParticleOpacity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SphericalParticleOpacity(int32 Density)"
  },
  {
    "label": "ParticleRelativeTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleRelativeTime()"
  },
  {
    "label": "ParticleMotionBlurFade()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleMotionBlurFade()"
  },
  {
    "label": "ParticleRandom()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleRandom()"
  },
  {
    "label": "ParticleDirection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleDirection()"
  },
  {
    "label": "ParticleSpeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSpeed()"
  },
  {
    "label": "ParticleSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSize()"
  },
  {
    "label": "ParticleSpriteRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ParticleSpriteRotation()"
  },
  {
    "label": "DynamicBranch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicBranch(int32 Condition, int32 A, int32 B)"
  },
  {
    "label": "If()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "If(int32 A,int32 B,int32 AGreaterThanB,int32 AEqualsB,int32 ALessThanB,int32 Threshold)"
  },
  {
    "label": "Switch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Switch(int32 SwitchValueInput, int32 DefaultInput, TArray<int32>& CompiledInputs)"
  },
  {
    "label": "TextureCoordinate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCoordinate(uint32 CoordinateIndex, bool UnMirrorU, bool UnMirrorV)"
  },
  {
    "label": "SetPotentiallyManipulateTexCoords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPotentiallyManipulateTexCoords()"
  },
  {
    "label": "TextureSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureSample(int32 Texture,int32 Coordinate,enum EMaterialSamplerType SamplerType,int32 MipValue0Index=INDEX_NONE,int32 MipValue1Index=INDEX_NONE,ETextureMipValueMode MipValueMode=TMVM_None,ESamplerSourceMode SamplerSource=SSM_FromTextureAsset,int32 TextureReferenceIndex=INDEX_NONE, bool AutomaticViewMipBias=false, bool AdaptiveVirtualTexture=false, bool EnableFeedback = true)"
  },
  {
    "label": "TextureProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureProperty(int32 InTexture, EMaterialExposedTextureProperty Property)"
  },
  {
    "label": "TextureDecalMipmapLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureDecalMipmapLevel(int32 TextureSizeInput)"
  },
  {
    "label": "TextureDecalDerivative()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureDecalDerivative(bool bDDY)"
  },
  {
    "label": "DecalColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecalColor()"
  },
  {
    "label": "DecalLifetimeOpacity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecalLifetimeOpacity()"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Texture(UTexture* Texture,int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource=SSM_FromTextureAsset,ETextureMipValueMode MipValueMode=TMVM_None)"
  },
  {
    "label": "TextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureParameter(FName ParameterName,UTexture* DefaultTexture,int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource=SSM_FromTextureAsset)"
  },
  {
    "label": "TextureCollection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollection(UTextureCollection* TextureCollection, int32& TextureCollectionReferenceIndex)"
  },
  {
    "label": "TextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollectionParameter(FName ParameterName, UTextureCollection* DefaultValue, int32& TextureCollectionReferenceIndex)"
  },
  {
    "label": "TextureCollectionCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureCollectionCount(int32 InTextureCollectionCodeIndex)"
  },
  {
    "label": "TextureFromCollection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TextureFromCollection(int32 TextureCollectionCodeIndex, int32 IndexIntoCollectionCodeIndex, EMaterialValueType ResultTextureType)"
  },
  {
    "label": "VirtualTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTexture(URuntimeVirtualTexture* InTexture, int32 TextureLayerIndex, int32 PageTableLayerIndex, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureParameter(FName ParameterName, URuntimeVirtualTexture* DefaultValue, int32 TextureLayerIndex, int32 PageTableLayerIndex, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureUniform(int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "VirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureUniform(FName ParameterName, int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "VirtualTextureWorldToUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureWorldToUV(int32 WorldPositionIndex, int32 P0, int32 P1, int32 P2, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "VirtualTextureUnpack()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VirtualTextureUnpack(int32 CodeIndex0, int32 CodeIndex1, int32 CodeIndex2, int32 P0, EVirtualTextureUnpackType UnpackType)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTexture(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTexture(UTexture* InTexture, int32& TextureReferenceIndex)"
  },
  {
    "label": "ExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureParameter(FName ParameterName, UTexture* DefaultValue, int32& TextureReferenceIndex)"
  },
  {
    "label": "ExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateScaleRotation(int32 TextureReferenceIndex, TOptional<FName> ParameterName)"
  },
  {
    "label": "ExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateScaleRotation(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "ExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateOffset(int32 TextureReferenceIndex, TOptional<FName> ParameterName)"
  },
  {
    "label": "ExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ExternalTextureCoordinateOffset(const FGuid& ExternalTextureGuid)"
  },
  {
    "label": "SparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTexture(USparseVolumeTexture* Texture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "SparseVolumeTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureParameter(FName ParameterName, USparseVolumeTexture* InDefaultTexture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "SparseVolumeTextureUniform()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureUniform(int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "SparseVolumeTextureUniformParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureUniformParameter(FName ParameterName, int32 TextureIndex, int32 VectorIndex, UE::Shader::EValueType Type)"
  },
  {
    "label": "SparseVolumeTextureSamplePageTable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSamplePageTable(int32 SparseVolumeTextureIndex, int32 UVWIndex, int32 MipLevelIndex, ESamplerSourceMode SamplerSource, bool bIsManualLinearMipMapSecondSample)"
  },
  {
    "label": "SparseVolumeTextureSamplePhysicalTileData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSamplePhysicalTileData(int32 SparseVolumeTextureIndex, int32 VoxelCoordIndex, int32 PhysicalTileDataIdxIndex, bool bIsManualLinearMipMapSecondSample)"
  },
  {
    "label": "SparseVolumeTextureSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SparseVolumeTextureSample(int32 SparseVolumeTextureIndex, int32 UVWIndex, int32 MipValue0Index, int32 MipValue1Index, int32 PhysicalTileDataIdxIndex, ETextureMipValueMode MipValueMode, ESamplerSourceMode SamplerSource)"
  },
  {
    "label": "GetReferencedTexture()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetReferencedTexture(int32 Index)"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "Texture(InTexture, TextureReferenceIndex, SamplerType, SamplerSource)"
  },
  {
    "label": "SparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SparseVolumeTexture(USparseVolumeTexture* Texture, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "SparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "SparseVolumeTexture(Texture, TextureReferenceIndex, SamplerType)"
  },
  {
    "label": "VirtualTexture()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VirtualTexture(URuntimeVirtualTexture* InTexture, int32 TextureLayerIndex, int32 PageTableLayerIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTexture()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "VirtualTexture(InTexture, TextureLayerIndex, PageTableLayerIndex, TextureReferenceIndex, SamplerType)"
  },
  {
    "label": "VirtualTextureParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VirtualTextureParameter(FName ParameterName, URuntimeVirtualTexture* DefaultValue, int32 TextureLayerIndex, int32 PageTableLayerIndex, EMaterialSamplerType SamplerType)"
  },
  {
    "label": "VirtualTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "VirtualTextureParameter(ParameterName, DefaultValue, TextureLayerIndex, PageTableLayerIndex, TextureReferenceIndex, SamplerType)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ExternalTexture(UTexture* DefaultTexture)"
  },
  {
    "label": "ExternalTexture()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "ExternalTexture(DefaultTexture, TextureReferenceIndex)"
  },
  {
    "label": "TextureParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TextureParameter(FName ParameterName,UTexture* DefaultTexture, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource=SSM_FromTextureAsset)"
  },
  {
    "label": "TextureParameter()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "TextureParameter(ParameterName, DefaultTexture, TextureReferenceIndex, SamplerType, SamplerSource)"
  },
  {
    "label": "ExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ExternalTextureParameter(FName ParameterName, UTexture* DefaultTexture)"
  },
  {
    "label": "ExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32 TextureReferenceIndex = INDEX_NONE ; return)",
    "insertText": "ExternalTextureParameter(ParameterName, DefaultTexture, TextureReferenceIndex)"
  },
  {
    "label": "TextureCollection()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TextureCollection(UTextureCollection* InTextureCollection)"
  },
  {
    "label": "TextureCollection()",
    "kind": "Method",
    "detail": "Function (int32 TextureCollectionReferenceIndex = INDEX_NONE ; return)",
    "insertText": "TextureCollection(InTextureCollection, TextureCollectionReferenceIndex)"
  },
  {
    "label": "TextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TextureCollectionParameter(FName ParameterName, UTextureCollection* DefaultValue)"
  },
  {
    "label": "TextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32 TextureCollectionReferenceIndex = INDEX_NONE ; return)",
    "insertText": "TextureCollectionParameter(ParameterName, DefaultValue, TextureCollectionReferenceIndex)"
  },
  {
    "label": "PixelDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PixelDepth()"
  },
  {
    "label": "SceneDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneDepth(int32 Offset, int32 ViewportUV, bool bUseOffset)"
  },
  {
    "label": "SceneColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneColor(int32 Offset, int32 ViewportUV, bool bUseOffset)"
  },
  {
    "label": "SceneTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneTextureLookup(int32 ViewportUV, uint32 SceneTextureId, bool bFiltered, bool bClamped, bool bUnused)"
  },
  {
    "label": "GetSceneTextureViewSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSceneTextureViewSize(int32 SceneTextureId, bool InvProperty)"
  },
  {
    "label": "FindOrAddUserSceneTexture()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddUserSceneTexture(FName UserSceneTextureName)"
  },
  {
    "label": "DBufferTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DBufferTextureLookup(int32 ViewportUV, uint32 DBufferTextureIndex)"
  },
  {
    "label": "PathTracingBufferTextureLookup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingBufferTextureLookup(int32 ViewportUV, uint32 PathTracingBufferTextureIndex)"
  },
  {
    "label": "StaticBool()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticBool(bool Value)"
  },
  {
    "label": "StaticBoolParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticBoolParameter(FName ParameterName,bool bDefaultValue)"
  },
  {
    "label": "DynamicBoolParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicBoolParameter(FName ParameterName,bool bDefaultValue)"
  },
  {
    "label": "StaticComponentMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticComponentMask(int32 Vector,FName ParameterName,bool bDefaultR,bool bDefaultG,bool bDefaultB,bool bDefaultA)"
  },
  {
    "label": "GetMaterialLayers()",
    "kind": "Method",
    "detail": "Function (const FMaterialLayersFunctions*)",
    "insertText": "GetMaterialLayers()"
  },
  {
    "label": "GetStaticBoolValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticBoolValue(int32 BoolIndex, bool& bSucceeded)"
  },
  {
    "label": "StaticTerrainLayerWeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StaticTerrainLayerWeight(FName ParameterName,int32 Default, bool bTextureArray = false)"
  },
  {
    "label": "FontSignedDistanceData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FontSignedDistanceData()"
  },
  {
    "label": "VertexColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexColor()"
  },
  {
    "label": "MeshPaintTextureCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureCoordinateIndex()"
  },
  {
    "label": "MeshPaintTextureDescriptor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureDescriptor()"
  },
  {
    "label": "MeshPaintTextureReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MeshPaintTextureReplace(int32 Invalid, int32 Valid)"
  },
  {
    "label": "PreSkinnedPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedPosition()"
  },
  {
    "label": "PreSkinnedNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PreSkinnedNormal()"
  },
  {
    "label": "VertexInterpolator()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexInterpolator(uint32 InterpolatorIndex)"
  },
  {
    "label": "MaterialBakingWorldPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "MaterialBakingWorldPosition()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "Add(int32 A,int32 B)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sub(int32 A,int32 B)"
  },
  {
    "label": "Mul()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Mul(int32 A,int32 B)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Div(int32 A,int32 B)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Dot(int32 A,int32 B)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Cross(int32 A,int32 B)"
  },
  {
    "label": "Power()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Power(int32 Base,int32 Exponent)"
  },
  {
    "label": "Exponential()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Exponential(int32 X)"
  },
  {
    "label": "Exponential2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Exponential2(int32 X)"
  },
  {
    "label": "Logarithm()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm(int32 X)"
  },
  {
    "label": "Logarithm2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm2(int32 X)"
  },
  {
    "label": "Logarithm10()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Logarithm10(int32 X)"
  },
  {
    "label": "SquareRoot()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SquareRoot(int32 X)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Length(int32 X)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Normalize(int32 X)"
  },
  {
    "label": "HsvToRgb()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HsvToRgb(int32 X)"
  },
  {
    "label": "RgbToHsv()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RgbToHsv(int32 X)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Lerp(int32 X,int32 Y,int32 A)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Min(int32 A,int32 B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Max(int32 A,int32 B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Clamp(int32 X,int32 A,int32 B)"
  },
  {
    "label": "Saturate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Saturate(int32 X)"
  },
  {
    "label": "SmoothStep()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SmoothStep(int32 X,int32 Y,int32 A)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Step(int32 Y,int32 X)"
  },
  {
    "label": "InvLerp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InvLerp(int32 X,int32 Y,int32 A)"
  },
  {
    "label": "ComponentMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComponentMask(int32 Vector,bool R,bool G,bool B,bool A)"
  },
  {
    "label": "AppendVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AppendVector(int32 A,int32 B)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformVector(EMaterialCommonBasis SourceCoordBasis, EMaterialCommonBasis DestCoordBasis, int32 A)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformPosition(EMaterialCommonBasis SourceCoordBasis, EMaterialCommonBasis DestCoordBasis, int32 A)"
  },
  {
    "label": "TransformFromPeriodicWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformFromPeriodicWorldPosition(EMaterialCommonBasis DestCoordBasis, int TileScaleIdx, int32 A)"
  },
  {
    "label": "TransformToPeriodicWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformToPeriodicWorldPosition(EMaterialCommonBasis SourceCoordBasis, int TileScaleIdx, int32 A)"
  },
  {
    "label": "TransformNormalFromRequestedBasisToWorld()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TransformNormalFromRequestedBasisToWorld(int32 NormalCodeChunk)"
  },
  {
    "label": "DynamicParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DynamicParameter(FLinearColor& DefaultValue, uint32 ParameterIndex = 0)"
  },
  {
    "label": "LightmapUVs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightmapUVs()"
  },
  {
    "label": "PrecomputedAOMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PrecomputedAOMask()"
  },
  {
    "label": "GIReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GIReplace(int32 Direct, int32 StaticIndirect, int32 DynamicIndirect)"
  },
  {
    "label": "ShadowReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ShadowReplace(int32 Default, int32 Shadow)"
  },
  {
    "label": "NaniteReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NaniteReplace(int32 Default, int32 Nanite)"
  },
  {
    "label": "RayTracingQualitySwitchReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RayTracingQualitySwitchReplace(int32 Normal, int32 RayTraced)"
  },
  {
    "label": "PathTracingQualitySwitchReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingQualitySwitchReplace(int32 Normal, int32 PathTraced)"
  },
  {
    "label": "PathTracingRayTypeSwitch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PathTracingRayTypeSwitch(int32 Main, int32 Shadow, int32 IndirectDiffuse, int32 IndirectSpecular, int32 IndirectVolume)"
  },
  {
    "label": "LightmassReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LightmassReplace(int32 Realtime, int32 Lightmass)"
  },
  {
    "label": "VirtualTextureOutputReplace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureOutputReplace(int32 Default, int32 VirtualTexture)"
  },
  {
    "label": "ReflectionCapturePassSwitch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReflectionCapturePassSwitch(int32 Default, int32 Reflection)"
  },
  {
    "label": "ObjectOrientation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ObjectOrientation()"
  },
  {
    "label": "RotateAboutAxis()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RotateAboutAxis(int32 NormalizedRotationAxisAndAngleIndex, int32 PositionOnAxisIndex, int32 PositionIndex)"
  },
  {
    "label": "TwoSidedSign()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TwoSidedSign()"
  },
  {
    "label": "VertexNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexNormal()"
  },
  {
    "label": "VertexTangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VertexTangent()"
  },
  {
    "label": "PixelNormalWS()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PixelNormalWS()"
  },
  {
    "label": "CustomExpression()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomExpression(class UMaterialExpressionCustom* Custom, int32 OutputIndex, TArray<int32>& CompiledInputs)"
  },
  {
    "label": "CustomOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomOutput(class UMaterialExpressionCustomOutput* Custom, int32 OutputIndex, int32 OutputCode)"
  },
  {
    "label": "VirtualTextureOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "VirtualTextureOutput(uint8 AttributeMask)"
  },
  {
    "label": "DDX()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DDX(int32 X)"
  },
  {
    "label": "DDY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DDY(int32 X)"
  },
  {
    "label": "PerInstanceRandom()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceRandom()"
  },
  {
    "label": "PerInstanceFadeAmount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceFadeAmount()"
  },
  {
    "label": "PerInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceCustomData(int32 DataIndex, int32 DefaultValueIndex)"
  },
  {
    "label": "PerInstanceCustomData3Vector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerInstanceCustomData3Vector(int32 DataIndex, int32 DefaultValueIndex)"
  },
  {
    "label": "AntialiasedTextureMask()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AntialiasedTextureMask(int32 Tex, int32 UV, float Threshold, uint8 Channel)"
  },
  {
    "label": "Sobol()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Sobol(int32 Cell, int32 Index, int32 Seed)"
  },
  {
    "label": "TemporalSobol()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TemporalSobol(int32 Index, int32 Seed)"
  },
  {
    "label": "Noise()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Noise(int32 Position, EPositionOrigin PositionOrigin, float Scale, int32 Quality, uint8 NoiseFunction, bool bTurbulence, int32 Levels, float OutputMin, float OutputMax, float LevelScale, int32 FilterWidth, bool bTiling, uint32 RepeatSize)"
  },
  {
    "label": "VectorNoise()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorNoise(int32 Position, EPositionOrigin PositionOrigin, int32 Quality, uint8 NoiseFunction, bool bTiling, uint32 RepeatSize)"
  },
  {
    "label": "BlackBody()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "BlackBody(int32 Temp)"
  },
  {
    "label": "DistanceToNearestSurface()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DistanceToNearestSurface(int32 PositionArg, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "DistanceFieldGradient()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DistanceFieldGradient(int32 PositionArg, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "DistanceFieldApproxAO()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DistanceFieldApproxAO(int32 PositionArg, EPositionOrigin PositionOrigin, int32 NormalArg, int32 BaseDistanceArg, int32 RadiusArg, uint32 NumSteps, float StepScale)"
  },
  {
    "label": "SamplePhysicsField()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SamplePhysicsField(int32 PositionArg, EPositionOrigin PositionOrigin, const int32 OutputType, const int32 TargetIndex)"
  },
  {
    "label": "DepthOfFieldFunction()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DepthOfFieldFunction(int32 Depth, int32 FunctionValueIndex)"
  },
  {
    "label": "PostVolumeUserFlagTestFunction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PostVolumeUserFlagTestFunction(int32 Input)"
  },
  {
    "label": "AtmosphericFogColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericFogColor(int32 WorldPosition, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "RotateScaleOffsetTexCoords()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RotateScaleOffsetTexCoords(int32 TexCoordCodeIndex, int32 RotationScale, int32 Offset)"
  },
  {
    "label": "SpeedTree()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SpeedTree(int32 GeometryArg, int32 WindArg, int32 LODArg, float BillboardThreshold, bool bAccurateWindVelocities, bool bExtraBend, int32 ExtraBendArg)"
  },
  {
    "label": "EyeAdaptation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EyeAdaptation()"
  },
  {
    "label": "EyeAdaptationInverse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EyeAdaptationInverse(int32 LightValueArg, int32 AlphaArg)"
  },
  {
    "label": "AtmosphericLightVector()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericLightVector()"
  },
  {
    "label": "AtmosphericLightColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AtmosphericLightColor()"
  },
  {
    "label": "SkyAtmosphereLightIlluminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightIlluminance(int32 WorldPosition, EPositionOrigin PositionOrigin, int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightIlluminanceOnGround()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SkyAtmosphereLightIlluminanceOnGround(int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightDirection(int32 LightIndex)"
  },
  {
    "label": "SkyAtmosphereLightDiskLuminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereLightDiskLuminance(int32 LightIndex, int32 OverrideAtmosphereLightDiscCosHalfApexAngle)"
  },
  {
    "label": "SkyAtmosphereViewLuminance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereViewLuminance()"
  },
  {
    "label": "SkyAtmosphereAerialPerspective()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyAtmosphereAerialPerspective(int32 WorldPosition, EPositionOrigin PositionOrigin)"
  },
  {
    "label": "SkyAtmosphereDistantLightScatteredLuminance()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SkyAtmosphereDistantLightScatteredLuminance()"
  },
  {
    "label": "SkyLightEnvMapSample()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SkyLightEnvMapSample(int32 DirectionCodeChunk, int32 RoughnessCodeChunk)"
  },
  {
    "label": "GetCloudSampleAltitude()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleAltitude()"
  },
  {
    "label": "GetCloudSampleAltitudeInLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleAltitudeInLayer()"
  },
  {
    "label": "GetCloudSampleNormAltitudeInLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleNormAltitudeInLayer()"
  },
  {
    "label": "GetCloudSampleShadowSampleDistance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudSampleShadowSampleDistance()"
  },
  {
    "label": "GetVolumeSampleConservativeDensity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVolumeSampleConservativeDensity()"
  },
  {
    "label": "GetCloudEmptySpaceSkippingSphereCenterWorldPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudEmptySpaceSkippingSphereCenterWorldPosition()"
  },
  {
    "label": "GetCloudEmptySpaceSkippingSphereRadius()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCloudEmptySpaceSkippingSphereRadius()"
  },
  {
    "label": "GetHairUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairUV()"
  },
  {
    "label": "GetHairDimensions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairDimensions()"
  },
  {
    "label": "GetHairSeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairSeed()"
  },
  {
    "label": "GetHairClumpID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairClumpID()"
  },
  {
    "label": "GetHairTangent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairTangent(bool bUseTangentSpace)"
  },
  {
    "label": "GetHairRootUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairRootUV()"
  },
  {
    "label": "GetHairBaseColor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairBaseColor()"
  },
  {
    "label": "GetHairRoughness()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairRoughness()"
  },
  {
    "label": "GetHairAO()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAO()"
  },
  {
    "label": "GetHairDepth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairDepth()"
  },
  {
    "label": "GetHairCoverage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairCoverage()"
  },
  {
    "label": "GetHairAuxilaryData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAuxilaryData()"
  },
  {
    "label": "GetHairAtlasUVs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairAtlasUVs()"
  },
  {
    "label": "GetHairGroupIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairGroupIndex()"
  },
  {
    "label": "GetHairColorFromMelanin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHairColorFromMelanin(int32 Melanin, int32 Redness, int32 DyeColor)"
  },
  {
    "label": "CustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CustomPrimitiveData(int32 OutputIndex, EMaterialValueType Type)"
  },
  {
    "label": "ShadingModel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ShadingModel(EMaterialShadingModel InSelectedShadingModel)"
  },
  {
    "label": "DefaultMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DefaultMaterialAttributes()"
  },
  {
    "label": "SetMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetMaterialAttribute(int32 MaterialAttributes, int32 Value, const FGuid& AttributeID)"
  },
  {
    "label": "BeginScope()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope()"
  },
  {
    "label": "BeginScope_If()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_If(int32 Condition)"
  },
  {
    "label": "BeginScope_Else()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_Else()"
  },
  {
    "label": "BeginScope_For()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginScope_For(const UMaterialExpression* Expression, int32 StartIndex, int32 EndIndex, int32 IndexStep)"
  },
  {
    "label": "EndScope()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndScope()"
  },
  {
    "label": "ForLoopIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForLoopIndex(const UMaterialExpression* Expression)"
  },
  {
    "label": "ReturnMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReturnMaterialAttributes(int32 MaterialAttributes)"
  },
  {
    "label": "SetLocal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetLocal(const FName& LocalName, int32 Value)"
  },
  {
    "label": "GetLocal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLocal(const FName& LocalName)"
  },
  {
    "label": "NeuralOutput()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NeuralOutput(int32 ViewportUV, uint32 NeuralIndexType)"
  },
  {
    "label": "SubstrateCreateAndRegisterNullMaterial()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateCreateAndRegisterNullMaterial()"
  },
  {
    "label": "SubstrateSlabBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateSlabBSDF(int32 DiffuseAlbedo, int32 F0, int32 F90, int32 Roughness, int32 Anisotropy, int32 SSSProfileId, int32 SSSMFP, int32 SSSMFPScale, int32 SSSPhaseAniso, int32 UseSSSDiffusion, int32 EmissiveColor, int32 SecondRoughness, int32 SecondRoughnessWeight, int32 SecondRoughnessAsSimpleClearCoat, int32 FuzzAmount, int32 FuzzColor, int32 FuzzRoughness, int32 Thickness, int32 GlintValue, int32 GlintUV, int32 SpecularProfileId, bool bIsAtTheBottomOfTopology, int32 Normal, int32 Tangent, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateConversionFromLegacy()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateConversionFromLegacy(bool bHasDynamicShadingModels, int32 BaseColor, int32 Specular, int32 Metallic, int32 Roughness, int32 Anisotropy, int32 SubSurfaceColor, int32 SubSurfaceProfileId, int32 ClearCoat, int32 ClearCoatRoughness, int32 EmissiveColor, int32 Opacity, int32 ThinTranslucentTransmittanceColor, int32 ThinTranslucentSurfaceCoverage, int32 WaterScatteringCoefficients, int32 WaterAbsorptionCoefficients, int32 WaterPhaseG, int32 ColorScaleBehindWater, int32 ShadingModel, int32 Normal, int32 Tangent, const FString& SharedLocalBasisIndexMacro, int32 ClearCoat_Normal, int32 ClearCoat_Tangent, const FString& ClearCoat_SharedLocalBasisIndexMacro, int32 CustomTangent_Tangent, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateVolumetricFogCloudBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVolumetricFogCloudBSDF(int32 Albedo, int32 Extinction, int32 EmissiveColor, int32 AmbientOcclusion, bool bEmissiveOnly)"
  },
  {
    "label": "SubstrateUnlitBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateUnlitBSDF(int32 EmissiveColor, int32 TransmittanceColor, int32 Normal, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateUIBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateUIBSDF(int32 EmissiveColor, int32 Opacity, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateHairBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHairBSDF(int32 BaseColor, int32 Scatter, int32 Specular, int32 Roughness, int32 Backlit, int32 EmissiveColor, int32 Tangent, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateEyeBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateEyeBSDF(int32 DiffuseAlbedo, int32 Roughness, int32 IrisMask, int32 IrisDistance, int32 IrisNormal, int32 IrisPlaneNormal, int32 SSSProfileId, int32 EmissiveColor, int32 CorneaNormal, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateSingleLayerWaterBSDF()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateSingleLayerWaterBSDF(int32 BaseColor, int32 Metallic, int32 Specular, int32 Roughness, int32 EmissiveColor, int32 TopMaterialOpacity, int32 WaterAlbedo, int32 WaterExtinction, int32 WaterPhaseG, int32 ColorScaleBehindWater, int32 Normal, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateHorizontalMixing()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixing(int32 Background, int32 Foreground, int32 Mix, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateHorizontalMixingParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixingParameterBlending(int32 Background, int32 Foreground, int32 HorizontalMixCodeChunk, int32 NormalMixCodeChunk, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateVerticalLayering()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayering(int32 Top, int32 Base, int32 Thickness, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateVerticalLayeringParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayeringParameterBlending(int32 Top, int32 Base, int32 Thickness, const FString& SharedLocalBasisIndexMacro, int32 TopBSDFNormalCodeChunk, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateAdd()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAdd(int32 A, int32 B, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateAddParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAddParameterBlending(int32 A, int32 B, int32 AMixWeight, const FString& SharedLocalBasisIndexMacro, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateWeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateWeight(int32 A, int32 Weight, int OperatorIndex, uint32 MaxDistanceFromLeaves)"
  },
  {
    "label": "SubstrateWeightParameterBlending()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateWeightParameterBlending(int32 A, int32 Weight, FSubstrateOperator* PromoteToOperator)"
  },
  {
    "label": "SubstrateTransmittanceToMFP()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateTransmittanceToMFP(int32 TransmittanceColor, int32 DesiredThickness, int32 OutputIndex)"
  },
  {
    "label": "SubstrateMetalnessToDiffuseAlbedoF0()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateMetalnessToDiffuseAlbedoF0(int32 BaseColor, int32 Specular, int32 Metallic, int32 OutputIndex)"
  },
  {
    "label": "SubstrateHazinessToSecondaryRoughness()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHazinessToSecondaryRoughness(int32 BaseRoughness, int32 Haziness, int32 OutputIndex)"
  },
  {
    "label": "SubstrateThinFilm()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThinFilm(int32 NormalCodeChunk, int32 SpecularColorCodeChunk, int32 EdgeSpecularColorCodeChunk, int32 ThicknessCodeChunk, int32 IORCodeChunk, int32 OutputIndex)"
  },
  {
    "label": "SubstrateCompilePreview()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateCompilePreview(int32 SubstrateDataCodeChunk)"
  },
  {
    "label": "SubstrateSkipsOpacityEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubstrateSkipsOpacityEvaluation()"
  },
  {
    "label": "SubstrateTreeStackPush()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackPush(UMaterialExpression* Expression, uint32 InputIndex)"
  },
  {
    "label": "SubstrateTreeStackGetPathUniqueId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackGetPathUniqueId()"
  },
  {
    "label": "SubstrateTreeStackGetParentPathUniqueId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "SubstrateTreeStackGetParentPathUniqueId()"
  },
  {
    "label": "SubstrateTreeStackPop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstrateTreeStackPop()"
  },
  {
    "label": "GetSubstrateTreeOutOfStackDepthOccurred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSubstrateTreeOutOfStackDepthOccurred()"
  },
  {
    "label": "SubstrateThicknessStackGetThicknessIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackGetThicknessIndex()"
  },
  {
    "label": "SubstrateThicknessStackGetThicknessCode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackGetThicknessCode(int32 Index)"
  },
  {
    "label": "SubstrateThicknessStackPush()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateThicknessStackPush(UMaterialExpression* Expression, FExpressionInput* Input)"
  },
  {
    "label": "SubstrateThicknessStackPop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstrateThicknessStackPop()"
  },
  {
    "label": "SubstrateCompilationRegisterOperator()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator&)",
    "insertText": "SubstrateCompilationRegisterOperator(int32 OperatorType, FGuid SubstrateExpressionGuid, UMaterialExpression* Child, UMaterialExpression* Parent, FGuid SubstrateParentExpressionGuid, bool bUseParameterBlending = false)"
  },
  {
    "label": "SubstrateCompilationGetOperator()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator&)",
    "insertText": "SubstrateCompilationGetOperator(FGuid SubstrateExpressionGuid)"
  },
  {
    "label": "SubstrateCompilationGetOperatorFromIndex()",
    "kind": "Method",
    "detail": "Function (FSubstrateOperator*)",
    "insertText": "SubstrateCompilationGetOperatorFromIndex(int32 OperatorIndex)"
  },
  {
    "label": "SubstrateCompilationInfoRegisterSharedLocalBasis()",
    "kind": "Method",
    "detail": "Function (FSubstrateRegisteredSharedLocalBasis)",
    "insertText": "SubstrateCompilationInfoRegisterSharedLocalBasis(int32 NormalCodeChunk)"
  },
  {
    "label": "SubstrateCompilationInfoRegisterSharedLocalBasis()",
    "kind": "Method",
    "detail": "Function (FSubstrateRegisteredSharedLocalBasis)",
    "insertText": "SubstrateCompilationInfoRegisterSharedLocalBasis(int32 NormalCodeChunk, int32 TangentCodeChunk)"
  },
  {
    "label": "GetSubstrateSharedLocalBasisIndexMacro()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSubstrateSharedLocalBasisIndexMacro(const FSubstrateRegisteredSharedLocalBasis& SharedLocalBasis)"
  },
  {
    "label": "SubstrateAddParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateAddParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 ACodeChunk, int32 BCodeChunk)"
  },
  {
    "label": "SubstrateVerticalLayeringParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateVerticalLayeringParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 TopCodeChunk)"
  },
  {
    "label": "SubstrateHorizontalMixingParameterBlendingBSDFCoverageToNormalMixCodeChunk()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SubstrateHorizontalMixingParameterBlendingBSDFCoverageToNormalMixCodeChunk(int32 BackgroundCodeChunk, int32 ForegroundCodeChunk, int32 HorizontalMixCodeChunk)"
  },
  {
    "label": "SceneDepthWithoutWater()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SceneDepthWithoutWater(int32 Offset, int32 ViewportUV, bool bUseOffset, float FallbackDepth)"
  },
  {
    "label": "MapARPassthroughCameraUV()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MapARPassthroughCameraUV(int32 UV)"
  },
  {
    "label": "IsCurrentlyCompilingForPreviousFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentlyCompilingForPreviousFrame()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return)",
    "insertText": "Printf(TEXT(\"SHAREDLOCALBASIS_INDEX_%u_%u\"), SharedLocalBasis.GraphSharedLocalBasisIndex, Mode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "FProxyMaterialCompiler()",
    "kind": "Method",
    "detail": "Function (# endif } private : ESubstrateMaterialExport SubstrateMaterialExport = SME_None ; ESubstrateMaterialExportContext SubstrateMaterialExportContext = SMEC_Opaque ; uint8 SubstrateMaterialExportLegacyBlendMode = 0 ; } ; class FProxyMaterialCompiler : public FMaterialCompiler { public :)",
    "insertText": "FProxyMaterialCompiler(FMaterialCompiler* InCompiler) : Compiler(InCompiler)"
  },
  {
    "label": "SetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaterialProperty(EMaterialProperty InProperty, EShaderFrequency OverrideShaderFrequency, bool bUsePreviousFrameTime)"
  },
  {
    "label": "SetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "SetMaterialProperty(InProperty, OverrideShaderFrequency, bUsePreviousFrameTime)"
  },
  {
    "label": "PushMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "PushMaterialAttribute(InAttributeID)"
  },
  {
    "label": "SetBaseMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "SetBaseMaterialAttribute(InAttributeID)"
  },
  {
    "label": "PushParameterOwner()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "PushParameterOwner(InOwnerInfo)"
  },
  {
    "label": "CallExpression()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CallExpression(FMaterialExpressionKey ExpressionKey, FMaterialCompiler* InCompiler)"
  },
  {
    "label": "PushFunction()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "PushFunction(FunctionState)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EMaterialValueType)",
    "insertText": "GetType(int32 Code)"
  },
  {
    "label": "ValidCast()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ValidCast(int32 Code, EMaterialValueType DestType)"
  },
  {
    "label": "ForceCast()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ForceCast(int32 Code, EMaterialValueType DestType, uint32 ForceCastFlags = 0)"
  },
  {
    "label": "Constant2()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Constant2(float X, float Y)"
  },
  {
    "label": "Constant3()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Constant3(float X, float Y, float Z)"
  },
  {
    "label": "Constant4()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Constant4(float X, float Y, float Z, float W)"
  },
  {
    "label": "ViewProperty()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ViewProperty(EMaterialExposedViewProperty Property, bool InvProperty)"
  },
  {
    "label": "Sine()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Sine(int32 X)"
  },
  {
    "label": "If()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "If(int32 A, int32 B, int32 AGreaterThanB, int32 AEqualsB, int32 ALessThanB, int32 Threshold)"
  },
  {
    "label": "TextureSample()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "TextureSample(int32 InTexture, int32 Coordinate, enum EMaterialSamplerType SamplerType, int32 MipValue0Index, int32 MipValue1Index, ETextureMipValueMode MipValueMode, ESamplerSourceMode SamplerSource, int32 TextureReferenceIndex, bool AutomaticViewMipBias, bool AdaptiveVirtualTexture, bool EnableFeedback)"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Texture(UTexture* InTexture, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource = SSM_FromTextureAsset, ETextureMipValueMode MipValueMode = TMVM_None)"
  },
  {
    "label": "TextureParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TextureParameter(FName ParameterName, UTexture* DefaultValue, int32& TextureReferenceIndex, EMaterialSamplerType SamplerType, ESamplerSourceMode SamplerSource = SSM_FromTextureAsset)"
  },
  {
    "label": "GetReferencedTextureCollection()",
    "kind": "Method",
    "detail": "Function (} UTextureCollection*)",
    "insertText": "GetReferencedTextureCollection(int32 Index)"
  },
  {
    "label": "SceneTextureLookup()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SceneTextureLookup(int32 ViewportUV, uint32 InSceneTextureId, bool bFiltered, bool bClamped, bool bUnused)"
  },
  {
    "label": "StaticBoolParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "StaticBoolParameter(FName ParameterName, bool bDefaultValue)"
  },
  {
    "label": "DynamicBoolParameter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DynamicBoolParameter(FName ParameterName, bool bDefaultValue)"
  },
  {
    "label": "StaticComponentMask()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "StaticComponentMask(int32 Vector, FName ParameterName, bool bDefaultR, bool bDefaultG, bool bDefaultB, bool bDefaultA)"
  },
  {
    "label": "StaticTerrainLayerWeight()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "StaticTerrainLayerWeight(FName ParameterName, int32 Default, bool bTextureArray = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(int32 A, int32 B)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Sub(int32 A, int32 B)"
  },
  {
    "label": "Mul()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Mul(int32 A, int32 B)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Div(int32 A, int32 B)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Dot(int32 A, int32 B)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Cross(int32 A, int32 B)"
  },
  {
    "label": "Power()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Power(int32 Base, int32 Exponent)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Lerp(int32 X, int32 Y, int32 A)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Min(int32 A, int32 B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Max(int32 A, int32 B)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Clamp(int32 X, int32 A, int32 B)"
  },
  {
    "label": "SmoothStep()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SmoothStep(int32 X, int32 Y, int32 A)"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Step(int32 Y, int32 X)"
  },
  {
    "label": "InvLerp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InvLerp(int32 X, int32 Y, int32 A)"
  },
  {
    "label": "ComponentMask()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ComponentMask(int32 Vector, bool R, bool G, bool B, bool A)"
  },
  {
    "label": "AppendVector()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AppendVector(int32 A, int32 B)"
  },
  {
    "label": "Noise()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Noise(int32 Position, EPositionOrigin PositionOrigin, float Scale, int32 Quality, uint8 NoiseFunction, bool bTurbulence, int32 Levels, float OutputMin, float OutputMax, float LevelScale, int32 FilterWidth, bool bTiling, uint32 TileSize)"
  },
  {
    "label": "VectorNoise()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorNoise(int32 Position, EPositionOrigin PositionOrigin, int32 Quality, uint8 NoiseFunction, bool bTiling, uint32 TileSize)"
  },
  {
    "label": "IsDevelopmentFeatureEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDevelopmentFeatureEnabled(const FName& FeatureName)"
  },
  {
    "label": "FScopedMaterialCompilerAttribute()",
    "kind": "Method",
    "detail": "Function (} protected : FMaterialCompiler* Compiler ; } ; class FScopedMaterialCompilerAttribute { public :)",
    "insertText": "FScopedMaterialCompilerAttribute(FMaterialCompiler* InCompiler, const FGuid& InAttributeID) : Compiler(InCompiler) , AttributeID(InAttributeID)"
  },
  {
    "label": "PushMaterialAttribute()",
    "kind": "Method",
    "detail": "Function (Compiler ->)",
    "insertText": "PushMaterialAttribute(AttributeID)"
  },
  {
    "label": "FScopedMaterialCompilerAttribute()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedMaterialCompilerAttribute()"
  }
]