[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_OPUS_AUDIO_DECODER_MULTI_CHANNEL_OPUS_H_ # define API_AUDIO_CODECS_OPUS_AUDIO_DECODER_MULTI_CHANNEL_OPUS_H_ # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_codec_pair_id . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / audio_codecs / opus / audio_decoder_multi_channel_opus_config . h \" # include \" api / field_trials_view . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT AudioDecoderMultiChannelOpus { using Config = AudioDecoderMultiChannelOpusConfig ; absl::optional<AudioDecoderMultiChannelOpusConfig>)",
    "insertText": "SdpToConfig(const SdpAudioFormat& audio_format)"
  },
  {
    "label": "AppendSupportedDecoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSupportedDecoders(std::vector<AudioCodecSpec>* specs)"
  },
  {
    "label": "MakeAudioDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioDecoder>)",
    "insertText": "MakeAudioDecoder(AudioDecoderMultiChannelOpusConfig config, absl::optional<AudioCodecPairId> codec_pair_id = absl::nullopt, const FieldTrialsView* field_trials = nullptr)"
  }
]