[
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "UAISense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense"
  },
  {
    "label": "FAISenseCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISenseCounter"
  },
  {
    "label": "FPerceptionListenerCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionListenerCounter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPerceptionChannelAllowList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionChannelAllowList"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "FAIStimulus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIStimulus"
  },
  {
    "label": "FResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FResult"
  },
  {
    "label": "FAISenseAffiliationFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAISenseAffiliationFilter"
  },
  {
    "label": "FPerceptionListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionListener"
  },
  {
    "label": "UAIPerceptionSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionSystem"
  },
  {
    "label": "FPerceptionStimuliSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionStimuliSource"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AITypes . h \" # include \" GenericTeamAgentInterface . h \" # include \" AIPerceptionTypes . generated . h \" class UAIPerceptionComponent ; class UAISense ; struct FAISenseCounter : FAIBasicCounter<uint8> { } ; typedef FAINamedID<FAISenseCounter> FAISenseID ; struct FPerceptionListenerCounter : FAIBasicCounter<uint32> { } ; typedef FAIGenericID<FPerceptionListenerCounter> FPerceptionListenerID ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FPerceptionChannelAllowList()",
    "kind": "Method",
    "detail": "Function (OnEveryPerception,OnPerceptionChange,} ; struct FPerceptionChannelAllowList { typedef int32 FFlagsContainer ; FFlagsContainer AcceptedChannelsMask ;)",
    "insertText": "FPerceptionChannelAllowList() : AcceptedChannelsMask()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (AcceptedChannelsMask = 0 ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FilterOutChannel()",
    "kind": "Method",
    "detail": "Function (} FPerceptionChannelAllowList&)",
    "insertText": "FilterOutChannel(FAISenseID Channel)"
  },
  {
    "label": "AcceptedChannelsMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcceptedChannelsMask(1 << Channel)"
  },
  {
    "label": "MergeFilterIn()",
    "kind": "Method",
    "detail": "Function (} FPerceptionChannelAllowList&)",
    "insertText": "MergeFilterIn(const FPerceptionChannelAllowList& OtherFilter)"
  },
  {
    "label": "GetAcceptedChannelsMask()",
    "kind": "Method",
    "detail": "Function (AcceptedChannelsMask | = OtherFilter . AcceptedChannelsMask ; return* this ; } FFlagsContainer)",
    "insertText": "GetAcceptedChannelsMask()"
  },
  {
    "label": "FindNextAcceptedChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextAcceptedChannel()"
  },
  {
    "label": "RemainingChannelsToTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemainingChannelsToTest(1 << CurrentIndex)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "operator()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAIStimulus()",
    "kind": "Method",
    "detail": "Function (uint32 bExpired : 1 ; public :)",
    "insertText": "FAIStimulus(const UAISense& Sense, float StimulusStrength, const FVector& InStimulusLocation, const FVector& InReceiverLocation, FResult Result = SensingSucceeded, FName InStimulusTag = NAME_None)"
  },
  {
    "label": "FAIStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIStimulus() : Age(NeverHappenedAge), ExpirationAge(NeverHappenedAge), Strength(-1.f), StimulusLocation(FAISystem::InvalidLocation) , ReceiverLocation(FAISystem::InvalidLocation), Tag(NAME_None), Type(FAISenseID::InvalidID()), bWantsToNotifyOnlyOnValueChange(false) , bSuccessfullySensed(false), bExpired(false)"
  },
  {
    "label": "SetExpirationAge()",
    "kind": "Method",
    "detail": "Function (} FAIStimulus&)",
    "insertText": "SetExpirationAge(float InExpirationAge)"
  },
  {
    "label": "SetStimulusAge()",
    "kind": "Method",
    "detail": "Function (ExpirationAge = InExpirationAge ; return* this ; } FAIStimulus&)",
    "insertText": "SetStimulusAge(float StimulusAge)"
  },
  {
    "label": "SetWantsNotifyOnlyOnValueChange()",
    "kind": "Method",
    "detail": "Function (Age = StimulusAge ; return* this ; } FAIStimulus&)",
    "insertText": "SetWantsNotifyOnlyOnValueChange(bool InEnable)"
  },
  {
    "label": "GetAge()",
    "kind": "Method",
    "detail": "Function (bWantsToNotifyOnlyOnValueChange = InEnable ; return* this ; } float)",
    "insertText": "GetAge()"
  },
  {
    "label": "WasSuccessfullySensed()",
    "kind": "Method",
    "detail": "Function (Age + = ConstPerceptionAgingRate ; return Age<ExpirationAge ; } bool)",
    "insertText": "WasSuccessfullySensed()"
  },
  {
    "label": "MarkExpired()",
    "kind": "Method",
    "detail": "Function (bSuccessfullySensed = false ; } void)",
    "insertText": "MarkExpired()"
  },
  {
    "label": "MarkNoLongerSensed()",
    "kind": "Method",
    "detail": "Function (bExpired = true ;)",
    "insertText": "MarkNoLongerSensed()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "WantsToNotifyOnlyOnPerceptionChange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WantsToNotifyOnlyOnPerceptionChange()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) AIMODULE_API FString GetDebugDescription()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FAISenseAffiliationFilter()"
  },
  {
    "label": "FAISenseAffiliationFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAISenseAffiliationFilter(bool bInDetectEnemies, bool bInDetectNeutrals, bool bInDetectFriendlies) : bDetectEnemies(bInDetectEnemies) , bDetectNeutrals(bInDetectNeutrals) , bDetectFriendlies(bInDetectFriendlies)"
  },
  {
    "label": "GetAsFlags()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetAsFlags()"
  },
  {
    "label": "ShouldDetectAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldDetectAll()"
  },
  {
    "label": "DetectAllFlags()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "DetectAllFlags()"
  },
  {
    "label": "ShouldSenseTeam()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSenseTeam(FGenericTeamId TeamA, FGenericTeamId TeamB, uint8 AffiliationFlags)"
  },
  {
    "label": "ShouldSenseTeam()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSenseTeam(const IGenericTeamAgentInterface* TeamAgent, const AActor& TargetActor, uint8 AffiliationFlags)"
  },
  {
    "label": "FPerceptionListener()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPerceptionListener { TWeakObjectPtr<UAIPerceptionComponent> Listener ; FPerceptionChannelAllowList Filter ; FVector CachedLocation ; FVector CachedDirection ; FGenericTeamId TeamIdentifier ; private : uint32 bHasStimulusToProcess : 1 ; FPerceptionListenerID ListenerID ;)",
    "insertText": "FPerceptionListener()"
  },
  {
    "label": "FPerceptionListener()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPerceptionListener(UAIPerceptionComponent& InListener)"
  },
  {
    "label": "UpdateListenerProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateListenerProperties(UAIPerceptionComponent& Listener)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const UAIPerceptionComponent* Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPerceptionListener& Other)"
  },
  {
    "label": "RegisterStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStimulus(AActor* Source, const FAIStimulus& Stimulus)"
  },
  {
    "label": "GetListenerID()",
    "kind": "Method",
    "detail": "Function (} const FPerceptionListener NullListener ; FPerceptionListenerID)",
    "insertText": "GetListenerID()"
  },
  {
    "label": "GetBodyActorUniqueID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBodyActorUniqueID()"
  },
  {
    "label": "GetBodyActor()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetBodyActor()"
  },
  {
    "label": "GetTeamAgent()",
    "kind": "Method",
    "detail": "Function (const IGenericTeamAgentInterface*)",
    "insertText": "GetTeamAgent()"
  },
  {
    "label": "SetListenerID()",
    "kind": "Method",
    "detail": "Function (private : class UAIPerceptionSystem ; void)",
    "insertText": "SetListenerID(FPerceptionListenerID InListenerID)"
  },
  {
    "label": "MarkForStimulusProcessing()",
    "kind": "Method",
    "detail": "Function (ListenerID = InListenerID ; } void)",
    "insertText": "MarkForStimulusProcessing()"
  }
]