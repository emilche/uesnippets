[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedServicePublisher()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_SCOPED_SERVICE_PUBLISHER_H_ # define BASE_FUCHSIA_SCOPED_SERVICE_PUBLISHER_H_ # include<memory> # include<string> # include<utility> # include<lib / async / dispatcher . h> # include<lib / fidl / cpp / interface_request . h> # include<lib / sys / cpp / outgoing_directory . h> # include<lib / vfs / cpp / pseudo_dir . h> # include<lib / vfs / cpp / service . h> # include<lib / zx / channel . h> # include \" base / base_export . h \" # include \" base / fuchsia / fuchsia_logging . h \" # include \" base / strings / string_piece . h \" namespace base { template<Interface> class BASE_EXPORT ScopedServicePublisher { public :)",
    "insertText": "ScopedServicePublisher(sys::OutgoingDirectory* outgoing_directory, fidl::InterfaceRequestHandler<Interface> handler, base::StringPiece name = Interface::Name_) : ScopedServicePublisher(outgoing_directory->GetOrCreateDirectory(\"svc\"), std::move(handler), name)"
  },
  {
    "label": "ScopedServicePublisher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedServicePublisher(vfs::PseudoDir* pseudo_dir, fidl::InterfaceRequestHandler<Interface> handler, base::StringPiece name = Interface::Name_) : pseudo_dir_(pseudo_dir), name_(name)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (zx_status_t status = pseudo_dir_ ->)",
    "insertText": "AddEntry(name_, std::make_unique<vfs::Service>(std::move(handler)))"
  },
  {
    "label": "ZX_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZX_DCHECK(status == ZX_OK, status)"
  },
  {
    "label": "ScopedServicePublisher()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedServicePublisher(const ScopedServicePublisher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedServicePublisher&)",
    "insertText": "operator(const ScopedServicePublisher&)"
  },
  {
    "label": "ScopedServicePublisher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedServicePublisher()"
  },
  {
    "label": "RemoveEntry()",
    "kind": "Method",
    "detail": "Function (pseudo_dir_ ->)",
    "insertText": "RemoveEntry(name_)"
  }
]