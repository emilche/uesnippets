[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDE_LIBYUV_PLANAR_FUNCTIONS_H_ # define INCLUDE_LIBYUV_PLANAR_FUNCTIONS_H_ # include \" libyuv / basic_types . h \" # include \" libyuv / convert . h \" # include \" libyuv / convert_argb . h \" # ifdef __cplusplus namespace libyuv { \" C \" { # endif # if)",
    "insertText": "defined(__pnacl__) || defined(__CLR_VER) || \\ (defined(__native_client__) && defined(__x86_64__)) || \\ (defined(__i386__) && !defined(__SSE__) && !defined(__clang__)) #define LIBYUV_DISABLE_X86 #endif #if defined(__has_feature) #if __has_feature(memory_sanitizer) #define LIBYUV_DISABLE_X86 #endif #endif #if !defined(LIBYUV_DISABLE_X86) && \\ (defined(_M_IX86) || defined(__x86_64__) || defined(__i386__)) #define HAS_ARGBAFFINEROW_SSE2 #endif LIBYUV_API void CopyPlane(const uint8_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "CopyPlane_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPlane_16(const uint16_t* src_y, int src_stride_y, uint16_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "Convert16To8Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert16To8Plane(const uint16_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int scale, int width, int height)"
  },
  {
    "label": "Convert8To16Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert8To16Plane(const uint8_t* src_y, int src_stride_y, uint16_t* dst_y, int dst_stride_y, int scale, int width, int height)"
  },
  {
    "label": "SetPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlane(uint8_t* dst_y, int dst_stride_y, int width, int height, uint32_t value)"
  },
  {
    "label": "DetilePlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetilePlane(const uint8_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int width, int height, int tile_height)"
  },
  {
    "label": "DetileSplitUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetileSplitUVPlane(const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height, int tile_height)"
  },
  {
    "label": "DetileToYUY2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetileToYUY2(const uint8_t* src_y, int src_stride_y, const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_yuy2, int dst_stride_yuy2, int width, int height, int tile_height)"
  },
  {
    "label": "SplitUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitUVPlane(const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "MergeUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeUVPlane(const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "SplitUVPlane_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitUVPlane_16(const uint16_t* src_uv, int src_stride_uv, uint16_t* dst_u, int dst_stride_u, uint16_t* dst_v, int dst_stride_v, int width, int height, int depth)"
  },
  {
    "label": "MergeUVPlane_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeUVPlane_16(const uint16_t* src_u, int src_stride_u, const uint16_t* src_v, int src_stride_v, uint16_t* dst_uv, int dst_stride_uv, int width, int height, int depth)"
  },
  {
    "label": "ConvertToMSBPlane_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToMSBPlane_16(const uint16_t* src_y, int src_stride_y, uint16_t* dst_y, int dst_stride_y, int width, int height, int depth)"
  },
  {
    "label": "ConvertToLSBPlane_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToLSBPlane_16(const uint16_t* src_y, int src_stride_y, uint16_t* dst_y, int dst_stride_y, int width, int height, int depth)"
  },
  {
    "label": "HalfMergeUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HalfMergeUVPlane(const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "SwapUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapUVPlane(const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_vu, int dst_stride_vu, int width, int height)"
  },
  {
    "label": "SplitRGBPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitRGBPlane(const uint8_t* src_rgb, int src_stride_rgb, uint8_t* dst_r, int dst_stride_r, uint8_t* dst_g, int dst_stride_g, uint8_t* dst_b, int dst_stride_b, int width, int height)"
  },
  {
    "label": "MergeRGBPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeRGBPlane(const uint8_t* src_r, int src_stride_r, const uint8_t* src_g, int src_stride_g, const uint8_t* src_b, int src_stride_b, uint8_t* dst_rgb, int dst_stride_rgb, int width, int height)"
  },
  {
    "label": "SplitARGBPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitARGBPlane(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_r, int dst_stride_r, uint8_t* dst_g, int dst_stride_g, uint8_t* dst_b, int dst_stride_b, uint8_t* dst_a, int dst_stride_a, int width, int height)"
  },
  {
    "label": "MergeARGBPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeARGBPlane(const uint8_t* src_r, int src_stride_r, const uint8_t* src_g, int src_stride_g, const uint8_t* src_b, int src_stride_b, const uint8_t* src_a, int src_stride_a, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "MergeXR30Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeXR30Plane(const uint16_t* src_r, int src_stride_r, const uint16_t* src_g, int src_stride_g, const uint16_t* src_b, int src_stride_b, uint8_t* dst_ar30, int dst_stride_ar30, int width, int height, int depth)"
  },
  {
    "label": "MergeAR64Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeAR64Plane(const uint16_t* src_r, int src_stride_r, const uint16_t* src_g, int src_stride_g, const uint16_t* src_b, int src_stride_b, const uint16_t* src_a, int src_stride_a, uint16_t* dst_ar64, int dst_stride_ar64, int width, int height, int depth)"
  },
  {
    "label": "MergeARGB16To8Plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeARGB16To8Plane(const uint16_t* src_r, int src_stride_r, const uint16_t* src_g, int src_stride_g, const uint16_t* src_b, int src_stride_b, const uint16_t* src_a, int src_stride_a, uint8_t* dst_argb, int dst_stride_argb, int width, int height, int depth)"
  },
  {
    "label": "I400ToI400()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I400ToI400(const uint8_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "I422Copy()",
    "kind": "Method",
    "detail": "Function (# define J400ToJ400 I400ToI400 # define I422ToI422 I422Copy int)",
    "insertText": "I422Copy(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "I444Copy()",
    "kind": "Method",
    "detail": "Function (# define I444ToI444 I444Copy int)",
    "insertText": "I444Copy(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "I210Copy()",
    "kind": "Method",
    "detail": "Function (# define I210ToI210 I210Copy int)",
    "insertText": "I210Copy(const uint16_t* src_y, int src_stride_y, const uint16_t* src_u, int src_stride_u, const uint16_t* src_v, int src_stride_v, uint16_t* dst_y, int dst_stride_y, uint16_t* dst_u, int dst_stride_u, uint16_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "NV12Copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NV12Copy(const uint8_t* src_y, int src_stride_y, const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "NV21Copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NV21Copy(const uint8_t* src_y, int src_stride_y, const uint8_t* src_vu, int src_stride_vu, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_vu, int dst_stride_vu, int width, int height)"
  },
  {
    "label": "YUY2ToI422()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "YUY2ToI422(const uint8_t* src_yuy2, int src_stride_yuy2, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "UYVYToI422()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UYVYToI422(const uint8_t* src_uyvy, int src_stride_uyvy, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "YUY2ToNV12()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "YUY2ToNV12(const uint8_t* src_yuy2, int src_stride_yuy2, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "UYVYToNV12()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UYVYToNV12(const uint8_t* src_uyvy, int src_stride_uyvy, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "NV21ToNV12()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NV21ToNV12(const uint8_t* src_y, int src_stride_y, const uint8_t* src_vu, int src_stride_vu, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "YUY2ToY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "YUY2ToY(const uint8_t* src_yuy2, int src_stride_yuy2, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "UYVYToY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UYVYToY(const uint8_t* src_uyvy, int src_stride_uyvy, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "I420ToI400()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I420ToI400(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "I420Mirror()",
    "kind": "Method",
    "detail": "Function (# define J420ToJ400 I420ToI400 # define I420ToI420Mirror I420Mirror int)",
    "insertText": "I420Mirror(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "I400Mirror()",
    "kind": "Method",
    "detail": "Function (# define I400ToI400Mirror I400Mirror int)",
    "insertText": "I400Mirror(const uint8_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "NV12Mirror()",
    "kind": "Method",
    "detail": "Function (# define NV12ToNV12Mirror NV12Mirror int)",
    "insertText": "NV12Mirror(const uint8_t* src_y, int src_stride_y, const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "ARGBMirror()",
    "kind": "Method",
    "detail": "Function (# define ARGBToARGBMirror ARGBMirror int)",
    "insertText": "ARGBMirror(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "RGB24Mirror()",
    "kind": "Method",
    "detail": "Function (# define RGB24ToRGB24Mirror RGB24Mirror int)",
    "insertText": "RGB24Mirror(const uint8_t* src_rgb24, int src_stride_rgb24, uint8_t* dst_rgb24, int dst_stride_rgb24, int width, int height)"
  },
  {
    "label": "MirrorPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorPlane(const uint8_t* src_y, int src_stride_y, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "MirrorUVPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorUVPlane(const uint8_t* src_uv, int src_stride_uv, uint8_t* dst_uv, int dst_stride_uv, int width, int height)"
  },
  {
    "label": "RAWToRGB24()",
    "kind": "Method",
    "detail": "Function (# define RGB24ToRAW RAWToRGB24 int)",
    "insertText": "RAWToRGB24(const uint8_t* src_raw, int src_stride_raw, uint8_t* dst_rgb24, int dst_stride_rgb24, int width, int height)"
  },
  {
    "label": "I420Rect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I420Rect(uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int x, int y, int width, int height, int value_y, int value_u, int value_v)"
  },
  {
    "label": "ARGBRect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBRect(uint8_t* dst_argb, int dst_stride_argb, int dst_x, int dst_y, int width, int height, uint32_t value)"
  },
  {
    "label": "ARGBGrayTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBGrayTo(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBGray()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBGray(uint8_t* dst_argb, int dst_stride_argb, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "ARGBSepia()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBSepia(uint8_t* dst_argb, int dst_stride_argb, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "ARGBColorMatrix()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBColorMatrix(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, const int8_t* matrix_argb, int width, int height)"
  },
  {
    "label": "RGBColorMatrix()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RGBColorMatrix(uint8_t* dst_argb, int dst_stride_argb, const int8_t* matrix_rgb, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "ARGBColorTable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBColorTable(uint8_t* dst_argb, int dst_stride_argb, const uint8_t* table_argb, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "RGBColorTable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RGBColorTable(uint8_t* dst_argb, int dst_stride_argb, const uint8_t* table_argb, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "ARGBLumaColorTable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBLumaColorTable(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, const uint8_t* luma, int width, int height)"
  },
  {
    "label": "ARGBPolynomial()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBPolynomial(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, const float* poly, int width, int height)"
  },
  {
    "label": "HalfFloatPlane()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HalfFloatPlane(const uint16_t* src_y, int src_stride_y, uint16_t* dst_y, int dst_stride_y, float scale, int width, int height)"
  },
  {
    "label": "ByteToFloat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ByteToFloat(const uint8_t* src_y, float* dst_y, float scale, int width)"
  },
  {
    "label": "ARGBQuantize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBQuantize(uint8_t* dst_argb, int dst_stride_argb, int scale, int interval_size, int interval_offset, int dst_x, int dst_y, int width, int height)"
  },
  {
    "label": "ARGBCopy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBCopy(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBCopyAlpha()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBCopyAlpha(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBExtractAlpha()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBExtractAlpha(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_a, int dst_stride_a, int width, int height)"
  },
  {
    "label": "ARGBCopyYToAlpha()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBCopyYToAlpha(const uint8_t* src_y, int src_stride_y, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*ARGBBlendRow)(const uint8_t* src_argb0, const uint8_t* src_argb1, uint8_t* dst_argb, int width)"
  },
  {
    "label": "GetARGBBlend()",
    "kind": "Method",
    "detail": "Function (ARGBBlendRow)",
    "insertText": "GetARGBBlend()"
  },
  {
    "label": "ARGBBlend()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBBlend(const uint8_t* src_argb0, int src_stride_argb0, const uint8_t* src_argb1, int src_stride_argb1, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "BlendPlane()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BlendPlane(const uint8_t* src_y0, int src_stride_y0, const uint8_t* src_y1, int src_stride_y1, const uint8_t* alpha, int alpha_stride, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "I420Blend()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I420Blend(const uint8_t* src_y0, int src_stride_y0, const uint8_t* src_u0, int src_stride_u0, const uint8_t* src_v0, int src_stride_v0, const uint8_t* src_y1, int src_stride_y1, const uint8_t* src_u1, int src_stride_u1, const uint8_t* src_v1, int src_stride_v1, const uint8_t* alpha, int alpha_stride, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height)"
  },
  {
    "label": "ARGBMultiply()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBMultiply(const uint8_t* src_argb0, int src_stride_argb0, const uint8_t* src_argb1, int src_stride_argb1, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBAdd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBAdd(const uint8_t* src_argb0, int src_stride_argb0, const uint8_t* src_argb1, int src_stride_argb1, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBSubtract()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBSubtract(const uint8_t* src_argb0, int src_stride_argb0, const uint8_t* src_argb1, int src_stride_argb1, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "I422ToYUY2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I422ToYUY2(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_yuy2, int dst_stride_yuy2, int width, int height)"
  },
  {
    "label": "I422ToUYVY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I422ToUYVY(const uint8_t* src_y, int src_stride_y, const uint8_t* src_u, int src_stride_u, const uint8_t* src_v, int src_stride_v, uint8_t* dst_uyvy, int dst_stride_uyvy, int width, int height)"
  },
  {
    "label": "ARGBAttenuate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBAttenuate(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBUnattenuate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBUnattenuate(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBComputeCumulativeSum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBComputeCumulativeSum(const uint8_t* src_argb, int src_stride_argb, int32_t* dst_cumsum, int dst_stride32_cumsum, int width, int height)"
  },
  {
    "label": "ARGBBlur()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBBlur(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int32_t* dst_cumsum, int dst_stride32_cumsum, int width, int height, int radius)"
  },
  {
    "label": "GaussPlane_F32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GaussPlane_F32(const float* src, int src_stride, float* dst, int dst_stride, int width, int height)"
  },
  {
    "label": "ARGBShade()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBShade(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height, uint32_t value)"
  },
  {
    "label": "InterpolatePlane()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InterpolatePlane(const uint8_t* src0, int src_stride0, const uint8_t* src1, int src_stride1, uint8_t* dst, int dst_stride, int width, int height, int interpolation)"
  },
  {
    "label": "InterpolatePlane_16()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InterpolatePlane_16(const uint16_t* src0, int src_stride0, const uint16_t* src1, int src_stride1, uint16_t* dst, int dst_stride, int width, int height, int interpolation)"
  },
  {
    "label": "ARGBInterpolate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBInterpolate(const uint8_t* src_argb0, int src_stride_argb0, const uint8_t* src_argb1, int src_stride_argb1, uint8_t* dst_argb, int dst_stride_argb, int width, int height, int interpolation)"
  },
  {
    "label": "I420Interpolate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "I420Interpolate(const uint8_t* src0_y, int src0_stride_y, const uint8_t* src0_u, int src0_stride_u, const uint8_t* src0_v, int src0_stride_v, const uint8_t* src1_y, int src1_stride_y, const uint8_t* src1_u, int src1_stride_u, const uint8_t* src1_v, int src1_stride_v, uint8_t* dst_y, int dst_stride_y, uint8_t* dst_u, int dst_stride_u, uint8_t* dst_v, int dst_stride_v, int width, int height, int interpolation)"
  },
  {
    "label": "ARGBAffineRow_C()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ARGBAffineRow_C(const uint8_t* src_argb, int src_argb_stride, uint8_t* dst_argb, const float* uv_dudv, int width)"
  },
  {
    "label": "ARGBAffineRow_SSE2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ARGBAffineRow_SSE2(const uint8_t* src_argb, int src_argb_stride, uint8_t* dst_argb, const float* uv_dudv, int width)"
  },
  {
    "label": "ARGBShuffle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBShuffle(const uint8_t* src_bgra, int src_stride_bgra, uint8_t* dst_argb, int dst_stride_argb, const uint8_t* shuffler, int width, int height)"
  },
  {
    "label": "AR64Shuffle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AR64Shuffle(const uint16_t* src_ar64, int src_stride_ar64, uint16_t* dst_ar64, int dst_stride_ar64, const uint8_t* shuffler, int width, int height)"
  },
  {
    "label": "ARGBSobelToPlane()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBSobelToPlane(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_y, int dst_stride_y, int width, int height)"
  },
  {
    "label": "ARGBSobel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBSobel(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  },
  {
    "label": "ARGBSobelXY()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ARGBSobelXY(const uint8_t* src_argb, int src_stride_argb, uint8_t* dst_argb, int dst_stride_argb, int width, int height)"
  }
]