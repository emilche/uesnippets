[
  {
    "label": "TVisitorPatternBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVisitorPatternBase"
  },
  {
    "label": "TVisitorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVisitorInterface"
  },
  {
    "label": "IVisitorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVisitorBase"
  },
  {
    "label": "IListenerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IListenerBase"
  },
  {
    "label": "TElementBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TElementBase"
  },
  {
    "label": "TargetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInterface"
  },
  {
    "label": "TVisitWithLambda",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVisitWithLambda"
  },
  {
    "label": "Interface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Function . h \" # include<type_traits> namespace Audio::Quartz::PrivateDefs { template<. . . Ts> class TVisitorPatternBase { private : template<. . . Interfaces> class TVisitorInterface ; template<Interface> class TVisitorInterface<Interface> { public : ~ TVisitorInterface<)",
    "insertText": "Interface()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Interface&)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} ; } ; template<First,. . . Rest> class TVisitorInterface<First,Rest . . .> : public TVisitorInterface<Rest . . .> { public : using TVisitorInterface<Rest . . .>::Visit ; void)",
    "insertText": "Visit(First&)"
  },
  {
    "label": "IListenerBase()",
    "kind": "Method",
    "detail": "Function (} ; } ; protected : class IVisitorBase : public TVisitorInterface<Ts . . .> { } ; class IListenerBase { public : ~)",
    "insertText": "IListenerBase()"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accept(IVisitorBase&)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (} ; public : template<. . . ListenerInterfaces> class TElementBase : public IListenerBase,public ListenerInterfaces . . . { public : void)",
    "insertText": "Accept(IVisitorBase& InVisitor)"
  },
  {
    "label": "TVisitWithLambda()",
    "kind": "Method",
    "detail": "Function (} } ; protected : template<class TargetInterface> class TVisitWithLambda : public IVisitorBase { public : using IVisitorBase::Visit ;)",
    "insertText": "TVisitWithLambda()"
  },
  {
    "label": "TargetInterface()",
    "kind": "Method",
    "detail": "Function (TVisitWithLambda<)",
    "insertText": "TargetInterface(TFunction<void(TargetInterface&)> InLambda) : Lambda (MoveTempIfPossible(InLambda))"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(TargetInterface& InTarget)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(InTarget)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : TFunction<)",
    "insertText": "void(TargetInterface&)"
  }
]