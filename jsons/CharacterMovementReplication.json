[
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FSavedMove_Character",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedMove_Character"
  },
  {
    "label": "UCharacterMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCharacterMovementComponent"
  },
  {
    "label": "FRootMotionSourceGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionSourceGroup"
  },
  {
    "label": "FCharacterNetworkSerializationPackedBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterNetworkSerializationPackedBits"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FCharacterNetworkMoveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterNetworkMoveData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FCharacterNetworkMoveDataContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterNetworkMoveDataContainer"
  },
  {
    "label": "FCharacterServerMovePackedBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterServerMovePackedBits"
  },
  {
    "label": "FClientAdjustment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClientAdjustment"
  },
  {
    "label": "FCharacterMoveResponseDataContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMoveResponseDataContainer"
  },
  {
    "label": "FCharacterMoveResponsePackedBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterMoveResponsePackedBits"
  },
  {
    "label": "DEPRECATED_CHARACTER_MOVEMENT_RPC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" Engine / NetSerialization . h \" # include \" Serialization / BitWriter . h \" # include \" Containers / BitArray . h \" # include \" Net / Core / NetToken / NetTokenExportContext . h \" # if UE_WITH_IRIS # include \" Iris / Serialization / IrisObjectReferencePackageMap . h \" # endif # include \" CharacterMovementReplication . generated . h \" class UPackageMap ; class FSavedMove_Character ; class UCharacterMovementComponent ; struct FRootMotionSourceGroup ; # ifndef SUPPORT_DEPRECATED_CHARACTER_MOVEMENT_RPCS # define SUPPORT_DEPRECATED_CHARACTER_MOVEMENT_RPCS 0 # endif # if SUPPORT_DEPRECATED_CHARACTER_MOVEMENT_RPCS # define)",
    "insertText": "DEPRECATED_CHARACTER_MOVEMENT_RPC(...) #else #define DEPRECATED_CHARACTER_MOVEMENT_RPC(DeprecatedFunction, NewFunction) UE_DEPRECATED_FORGAME(4.26, #DeprecatedFunction \"() is deprecated, use \" #NewFunction \"() instead, or define SUPPORT_DEPRECATED_CHARACTER_MOVEMENT_RPCS=1 in the project and set CVar p.NetUsePackedMovementRPCs=0 to use the old code path.\") #endif #ifndef CHARACTER_SERIALIZATION_PACKEDBITS_RESERVED_SIZE #define CHARACTER_SERIALIZATION_PACKEDBITS_RESERVED_SIZE 1024 #endif USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCharacterNetworkSerializationPackedBits() : SavedPackageMap(nullptr)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NetSerialize(FArchive& Ar, UPackageMap* PackageMap, bool& bOutSuccess)"
  },
  {
    "label": "GetPackageMap()",
    "kind": "Method",
    "detail": "Function (UPackageMap*)",
    "insertText": "GetPackageMap()"
  },
  {
    "label": "FCharacterNetworkMoveData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCharacterNetworkMoveData()"
  },
  {
    "label": "ClientFillNetworkMoveData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientFillNetworkMoveData(const FSavedMove_Character& ClientMove, ENetworkMoveType MoveType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(UCharacterMovementComponent& CharacterMovement, FArchive& Ar, UPackageMap* PackageMap, ENetworkMoveType MoveType)"
  },
  {
    "label": "FCharacterNetworkMoveDataContainer()",
    "kind": "Method",
    "detail": "Function (ENetworkMoveType NetworkMoveType ; float TimeStamp ; FVector_NetQuantize10 Acceleration ; FVector_NetQuantize100 Location ; FRotator ControlRotation ; uint8 CompressedMoveFlags ; uint8 MovementMode ; class UPrimitiveComponent* MovementBase ; FName MovementBaseBoneName ; } ; struct FCharacterNetworkMoveDataContainer { public :)",
    "insertText": "FCharacterNetworkMoveDataContainer() : bHasPendingMove(false) , bIsDualHybridRootMotionMove(false) , bHasOldMove(false) , bDisableCombinedScopedMove(false)"
  },
  {
    "label": "FCharacterNetworkMoveDataContainer()",
    "kind": "Method",
    "detail": "Function (NewMoveData =& BaseDefaultMoveData [ 0 ] ; PendingMoveData =& BaseDefaultMoveData [ 1 ] ; OldMoveData =& BaseDefaultMoveData [ 2 ] ; } ~)",
    "insertText": "FCharacterNetworkMoveDataContainer()"
  },
  {
    "label": "ClientFillNetworkMoveData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientFillNetworkMoveData(const FSavedMove_Character* ClientNewMove, const FSavedMove_Character* ClientPendingMove, const FSavedMove_Character* ClientOldMove)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(UCharacterMovementComponent& CharacterMovement, FArchive& Ar, UPackageMap* PackageMap)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCharacterServerMovePackedBits()"
  },
  {
    "label": "FClientAdjustment()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TStructOpsTypeTraits<FCharacterServerMovePackedBits> : public TStructOpsTypeTraitsBase2<FCharacterServerMovePackedBits> { enum { WithNetSerializer = true,} ; } ; struct FClientAdjustment { public :)",
    "insertText": "FClientAdjustment() : TimeStamp(0.f) , DeltaTime(0.f) , NewLoc(ForceInitToZero) , NewVel(ForceInitToZero) , NewRot(ForceInitToZero) , GravityDirection(FVector::DownVector) , NewBase(NULL) , NewBaseBoneName(NAME_None) , bAckGoodMove(false) , bBaseRelativePosition(false) , bBaseRelativeVelocity(false) , MovementMode(0)"
  },
  {
    "label": "FCharacterMoveResponseDataContainer()",
    "kind": "Method",
    "detail": "Function (} float TimeStamp ; float DeltaTime ; FVector NewLoc ; FVector NewVel ; FRotator NewRot ; FVector GravityDirection ; UPrimitiveComponent* NewBase ; FName NewBaseBoneName ; bool bAckGoodMove ; bool bBaseRelativePosition ; bool bBaseRelativeVelocity ; uint8 MovementMode ; } ; struct FCharacterMoveResponseDataContainer { public :)",
    "insertText": "FCharacterMoveResponseDataContainer() : bHasBase(false) , bHasRotation(false) , bRootMotionMontageCorrection(false) , bRootMotionSourceCorrection(false) , RootMotionTrackPosition(-1.0f) , RootMotionRotation(ForceInitToZero)"
  },
  {
    "label": "FCharacterMoveResponseDataContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCharacterMoveResponseDataContainer()"
  },
  {
    "label": "ServerFillResponseData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ServerFillResponseData(const UCharacterMovementComponent& CharacterMovement, const FClientAdjustment& PendingAdjustment)"
  },
  {
    "label": "IsGoodMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGoodMove()"
  },
  {
    "label": "GetRootMotionSourceGroup()",
    "kind": "Method",
    "detail": "Function (} FRootMotionSourceGroup*)",
    "insertText": "GetRootMotionSourceGroup(UCharacterMovementComponent& CharacterMovement)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (bool bHasBase ; bool bHasRotation ; bool bRootMotionMontageCorrection ; bool bRootMotionSourceCorrection ; FClientAdjustment ClientAdjustment ; float RootMotionTrackPosition ; FVector_NetQuantizeNormal RootMotionRotation ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FCharacterMoveResponsePackedBits()"
  }
]