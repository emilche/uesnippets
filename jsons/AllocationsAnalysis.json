[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FAllocationsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationsProvider"
  },
  {
    "label": "FMetadataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetadataProvider"
  },
  {
    "label": "FAllocationsAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationsAnalyzer"
  },
  {
    "label": "FAllocationsAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" namespace TraceServices { class IAnalysisSession ; class FAllocationsProvider ; class FMetadataProvider ; class FAllocationsAnalyzer : public UE::Trace::IAnalyzer { private : enum : uint16 { RouteId_Init,RouteId_Alloc,RouteId_AllocSystem,RouteId_AllocVideo,RouteId_Free,RouteId_FreeSystem,RouteId_FreeVideo,RouteId_ReallocAlloc,RouteId_ReallocAllocSystem,RouteId_ReallocFree,RouteId_ReallocFreeSystem,RouteId_Marker,RouteId_TagSpec,RouteId_HeapSpec,RouteId_HeapMarkAlloc,RouteId_HeapUnmarkAlloc,RouteId_MemScopeTag,RouteId_MemScopePtr,RouteId_MemSwapOp,} ; public :)",
    "insertText": "FAllocationsAnalyzer(IAnalysisSession& Session, FAllocationsProvider& AllocationsProvider, FMetadataProvider& MetadataProvider)"
  },
  {
    "label": "FAllocationsAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAllocationsAnalyzer()"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  }
]