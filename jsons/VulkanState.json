[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSamplerState"
  },
  {
    "label": "FVulkanRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRasterizerState"
  },
  {
    "label": "FVulkanDepthStencilState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDepthStencilState"
  },
  {
    "label": "FVulkanBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBlendState"
  },
  {
    "label": "FVulkanSamplerState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHI . h \" # include \" RHIResources . h \" # include \" VulkanCommon . h \" # include \" VulkanThirdParty . h \" class FVulkanDevice ; class FVulkanSamplerState : public FRHISamplerState { public :)",
    "insertText": "FVulkanSamplerState(const VkSamplerCreateInfo& InInfo, FVulkanDevice& InDevice, const bool bInIsImmutable = false)"
  },
  {
    "label": "IsImmutable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImmutable()"
  },
  {
    "label": "GetBindlessHandle()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "GetBindlessHandle()"
  },
  {
    "label": "ResetCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCreateInfo(VkPipelineRasterizationStateCreateInfo& OutInfo)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(OutInfo, VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (OutInfo . frontFace = VK_FRONT_FACE_CLOCKWISE ; OutInfo . lineWidth = 1 . 0 f ; } bool)",
    "insertText": "GetInitializer(FRasterizerStateInitializerRHI& Out)"
  },
  {
    "label": "FVulkanDepthStencilState()",
    "kind": "Method",
    "detail": "Function (Out = Initializer ; return true ; } VkPipelineRasterizationStateCreateInfo RasterizerState ; FRasterizerStateInitializerRHI Initializer ; } ; class FVulkanDepthStencilState : public FRHIDepthStencilState { public :)",
    "insertText": "FVulkanDepthStencilState(const FDepthStencilStateInitializerRHI& InInitializer)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (Initializer = InInitializer ; } bool)",
    "insertText": "GetInitializer(FDepthStencilStateInitializerRHI& Out)"
  },
  {
    "label": "SetupCreateInfo()",
    "kind": "Method",
    "detail": "Function (Out = Initializer ; return true ; } void)",
    "insertText": "SetupCreateInfo(const FGraphicsPipelineStateInitializer& GfxPSOInit, VkPipelineDepthStencilStateCreateInfo& OutDepthStencilState)"
  },
  {
    "label": "FVulkanBlendState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateInitializerRHI Initializer ; } ; class FVulkanBlendState : public FRHIBlendState { public :)",
    "insertText": "FVulkanBlendState(const FBlendStateInitializerRHI& InInitializer)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInitializer(FBlendStateInitializerRHI& Out)"
  }
]