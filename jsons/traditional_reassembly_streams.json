[
  {
    "label": "TraditionalReassemblyStreams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraditionalReassemblyStreams"
  },
  {
    "label": "StreamBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamBase"
  },
  {
    "label": "UnorderedStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedStream"
  },
  {
    "label": "OrderedStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OrderedStream"
  },
  {
    "label": "TraditionalReassemblyStreams()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_RX_TRADITIONAL_REASSEMBLY_STREAMS_H_ # define NET_DCSCTP_RX_TRADITIONAL_REASSEMBLY_STREAMS_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / common / sequence_numbers . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_common . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / rx / reassembly_streams . h \" namespace dcsctp { class TraditionalReassemblyStreams : public ReassemblyStreams { public :)",
    "insertText": "TraditionalReassemblyStreams(absl::string_view log_prefix, OnAssembledMessage on_assembled_message)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Add(UnwrappedTSN tsn, Data data)"
  },
  {
    "label": "HandleForwardTsn()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "HandleForwardTsn(UnwrappedTSN new_cumulative_ack_tsn, rtc::ArrayView<const AnyForwardTsnChunk::SkippedStream> skipped_streams)"
  },
  {
    "label": "ResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStreams(rtc::ArrayView<const StreamID> stream_ids)"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "StreamBase()",
    "kind": "Method",
    "detail": "Function (private : using ChunkMap = std::map<UnwrappedTSN,Data> ; class StreamBase { protected :)",
    "insertText": "StreamBase(TraditionalReassemblyStreams* parent) : parent_(*parent)"
  },
  {
    "label": "AssembleMessage()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "AssembleMessage(ChunkMap::iterator start, ChunkMap::iterator end)"
  },
  {
    "label": "UnorderedStream()",
    "kind": "Method",
    "detail": "Function (TraditionalReassemblyStreams& parent_ ; } ; class UnorderedStream : StreamBase { public :)",
    "insertText": "UnorderedStream(TraditionalReassemblyStreams* parent) : StreamBase(parent)"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EraseTo(UnwrappedTSN tsn)"
  },
  {
    "label": "has_unassembled_chunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_unassembled_chunks()"
  },
  {
    "label": "TryToAssembleMessage()",
    "kind": "Method",
    "detail": "Function (} private : size_t)",
    "insertText": "TryToAssembleMessage(ChunkMap::iterator iter)"
  },
  {
    "label": "OrderedStream()",
    "kind": "Method",
    "detail": "Function (ChunkMap chunks_ ; } ; class OrderedStream : StreamBase { public :)",
    "insertText": "OrderedStream(TraditionalReassemblyStreams* parent, SSN next_ssn = SSN(0)) : StreamBase(parent), next_ssn_(ssn_unwrapper_.Unwrap(next_ssn))"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EraseTo(SSN ssn)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (next_ssn_ = ssn_unwrapper_ .)",
    "insertText": "Unwrap(SSN(0))"
  },
  {
    "label": "next_ssn()",
    "kind": "Method",
    "detail": "Function (} SSN)",
    "insertText": "next_ssn()"
  },
  {
    "label": "TryToAssembleMessage()",
    "kind": "Method",
    "detail": "Function (} private : size_t)",
    "insertText": "TryToAssembleMessage()"
  },
  {
    "label": "TryToAssembleMessages()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "TryToAssembleMessages()"
  }
]