[
  {
    "label": "FOrientedEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOrientedEdge"
  },
  {
    "label": "FThinZone2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2D"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEdge2DProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdge2DProperties"
  },
  {
    "label": "FCuttingPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCuttingPoint"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FEdgeMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeMesh"
  },
  {
    "label": "FSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurface"
  },
  {
    "label": "FThinZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "FImposedCuttingPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Geo / Curves / RestrictionCurve . h \" # include \" Geo / Sampling / SurfacicPolyline . h \" # include \" Geo / GeoEnum . h \" # include \" Math / Boundary . h \" # include \" Mesh / MeshEnum . h \" # include \" Topo / Linkable . h \" # include \" Topo / TopologicalVertex . h \" # include \" Utils / Cache . h \" namespace UE::CADKernel { typedef TTopologicalLink<FTopologicalEdge> FEdgeLink ; class FOrientedEdge ; class FThinZone2D ; class FThinZoneSide ; struct FImposedCuttingPoint { const double Coordinate = 0 ; const int32 OppositNodeIndex = - 1 ; double DeltaU = 0 ;)",
    "insertText": "FImposedCuttingPoint()"
  },
  {
    "label": "FImposedCuttingPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImposedCuttingPoint(const double InCoordinate, const int32 NodeIndex1, const double InDeltaU = 0.) : Coordinate(InCoordinate) , OppositNodeIndex(NodeIndex1) , DeltaU(InDeltaU)"
  },
  {
    "label": "GetCuttingPointCoordinates()",
    "kind": "Method",
    "detail": "Function (} ; } ; template<FCuttingPointType> void)",
    "insertText": "GetCuttingPointCoordinates(const TArray<FCuttingPointType>& CuttingPoints, TArray<double>& CuttingPointCoordinates)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FAddCuttingPointFunc = TFunction<)",
    "insertText": "void(const double, const ECoordinateType, const FPairOfIndex, const double)"
  },
  {
    "label": "FTopologicalEdge()",
    "kind": "Method",
    "detail": "Function (struct FEdge2DProperties ; struct FCuttingPoint ; class FModelMesh ; class FEdgeMesh ; class FSurface ; class FThinZone ; class FTopologicalLoop ; class FTopologicalVertex ; class FTopologicalEdge : public TLinkable<FTopologicalEdge,FEdgeLink> { class FEntity ; class FTopologicalLoop ; class FTopologicalFace ; private : const double FactorToComputeMaxTol = 0 . 1 ; protected : TSharedPtr<FTopologicalVertex> StartVertex ; TSharedPtr<FTopologicalVertex> EndVertex ; FLinearBoundary Boundary ; TSharedPtr<FRestrictionCurve> Curve ; double Length3D = - 1 . ; double Max2DTolerance = - 1 ; FTopologicalLoop* Loop = nullptr ; TSharedPtr<FEdgeMesh> Mesh ; TArray<FCuttingPoint> CuttingPointUs ; TArray<FImposedCuttingPoint> ImposedCuttingPointUs ; TArray<FThinZoneSide*> ThinZoneSides ; TArray<FLinearBoundary> ThinZoneBounds ; TArray<double> CrossingPointUs ; TArray<double> CrossingPointDeltaUMins ; TArray<double> CrossingPointDeltaUMaxs ; private :)",
    "insertText": "FTopologicalEdge(const TSharedRef<FRestrictionCurve>& InCurve, const TSharedRef<FTopologicalVertex>& InVertex1, const TSharedRef<FTopologicalVertex>& InVertex2, const FLinearBoundary& InBoundary)"
  },
  {
    "label": "FTopologicalEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopologicalEdge(const TSharedRef<FRestrictionCurve>& InCurve, const TSharedRef<FTopologicalVertex>& InVertex1, const TSharedRef<FTopologicalVertex>& InVertex2)"
  },
  {
    "label": "FTopologicalEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopologicalEdge(const TSharedRef<FRestrictionCurve>& InCurve, const FLinearBoundary& InBoundary)"
  },
  {
    "label": "FTopologicalEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopologicalEdge(const TSharedRef<FSurface>& InSurface, const FPoint2D& InCoordinateVertex1, const TSharedRef<FTopologicalVertex>& InVertex1, const FPoint2D& InCoordinateVertex2, const TSharedRef<FTopologicalVertex>& InVertex2)"
  },
  {
    "label": "FTopologicalEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTopologicalEdge()"
  },
  {
    "label": "SetLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoop(FTopologicalLoop& NewBoundary)"
  },
  {
    "label": "RemoveLoop()",
    "kind": "Method",
    "detail": "Function (Loop =& NewBoundary ; } void)",
    "insertText": "RemoveLoop()"
  },
  {
    "label": "CheckVertices()",
    "kind": "Method",
    "detail": "Function (Loop = nullptr ; } bool)",
    "insertText": "CheckVertices()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FTopologicalEdge>)",
    "insertText": "Make(const TSharedRef<FRestrictionCurve>& InCurve, const TSharedRef<FTopologicalVertex>& InVertex1, const TSharedRef<FTopologicalVertex>& InVertex2, const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "Make(const TSharedRef<FRestrictionCurve>& InCurve, const TSharedRef<FTopologicalVertex>& InVertex1, const TSharedRef<FTopologicalVertex>& InVertex2)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "Make(const TSharedRef<FRestrictionCurve>& InCurve, const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "Make(const TSharedRef<FRestrictionCurve>& InCurve)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "Make(const TSharedRef<FSurface>& InSurface, const FPoint2D& InCoordinateVertex1, const TSharedRef<FTopologicalVertex>& InVertex1, const FPoint2D& InCoordinateVertex2, const TSharedRef<FTopologicalVertex>& InVertex2)"
  },
  {
    "label": "ReturnIfValid()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "ReturnIfValid(TSharedRef<FTopologicalEdge>& InEdge, bool bCheckVertices)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TLinkable<FTopologicalEdge,FEdgeLink)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, StartVertex)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, EndVertex)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, Curve)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (Ar<<Boundary ;)",
    "insertText": "SerializeIdent(Ar, &Loop)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (Ar<<Length3D ; Max2DTolerance = Length3D* FactorToComputeMaxTol ; } void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetTolerance3D()",
    "kind": "Method",
    "detail": "Function (# endif double)",
    "insertText": "GetTolerance3D()"
  },
  {
    "label": "GetTolerance2DAt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTolerance2DAt(double Coordinate)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (} EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "CheckIfDegenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfDegenerated()"
  },
  {
    "label": "IsLinkableTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinkableTo(const FTopologicalEdge& Edge, double EdgeLengthTolerance)"
  },
  {
    "label": "LinkIfCoincident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkIfCoincident(FTopologicalEdge& OtherEdge, double EdgeLengthTolerance, double SquareJoiningTolerance)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(FTopologicalEdge& OtherEdge)"
  },
  {
    "label": "Disjoin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disjoin()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "GetLinkActiveEdge()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FTopologicalEdge>)",
    "insertText": "GetLinkActiveEdge()"
  },
  {
    "label": "GetFirstTwinEdge()",
    "kind": "Method",
    "detail": "Function (} FTopologicalEdge*)",
    "insertText": "GetFirstTwinEdge()"
  },
  {
    "label": "GetTwinEntities()",
    "kind": "Method",
    "detail": "Function (const TArray<FTopologicalEdge*>& TwinEdges =)",
    "insertText": "GetTwinEntities()"
  },
  {
    "label": "IsTangentAtExtremitiesWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentAtExtremitiesWith(const FTopologicalEdge & Edge)"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "ReplaceEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceEdgeVertex(bool bIsStartVertex, TSharedRef<FTopologicalVertex>& NewVertex)"
  },
  {
    "label": "GetLoop()",
    "kind": "Method",
    "detail": "Function (const FTopologicalLoop*)",
    "insertText": "GetLoop()"
  },
  {
    "label": "GetStartVertex()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetStartVertex(EOrientation Forward)"
  },
  {
    "label": "GetEndVertex()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetEndVertex(EOrientation Forward)"
  },
  {
    "label": "GetStartVertex()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetStartVertex(bool Forward)"
  },
  {
    "label": "GetEndVertex()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetEndVertex(bool Forward)"
  },
  {
    "label": "GetStartVertex()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetStartVertex()"
  },
  {
    "label": "GetEndVertex()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTopologicalVertex>)",
    "insertText": "GetEndVertex()"
  },
  {
    "label": "GetOtherVertex()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FTopologicalVertex>)",
    "insertText": "GetOtherVertex(const TSharedRef<FTopologicalVertex>& Vertex)"
  },
  {
    "label": "GetOtherVertex()",
    "kind": "Method",
    "detail": "Function (} FTopologicalVertex*)",
    "insertText": "GetOtherVertex(FTopologicalVertex& Vertex)"
  },
  {
    "label": "GetOtherVertex()",
    "kind": "Method",
    "detail": "Function (} const FTopologicalVertex*)",
    "insertText": "GetOtherVertex(const FTopologicalVertex& Vertex)"
  },
  {
    "label": "SetStartVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStartVertex(const double NewCoordinate)"
  },
  {
    "label": "SetEndVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndVertex(const double NewCoordinate)"
  },
  {
    "label": "SetStartVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartVertex(const double NewCoordinate, const FPoint& NewPoint3D)"
  },
  {
    "label": "SetEndVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndVertex(const double NewCoordinate, const FPoint& NewPoint3D)"
  },
  {
    "label": "GetBoundary()",
    "kind": "Method",
    "detail": "Function (const FLinearBoundary&)",
    "insertText": "GetBoundary()"
  },
  {
    "label": "GetEndCurvilinearCoordinates()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetEndCurvilinearCoordinates()"
  },
  {
    "label": "GetStartBarycenter()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetStartBarycenter()"
  },
  {
    "label": "GetEndBarycenter()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetEndBarycenter()"
  },
  {
    "label": "GetStartCoordinate()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetStartCoordinate()"
  },
  {
    "label": "GetEndCoordinate()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetEndCoordinate()"
  },
  {
    "label": "GetTangentsAtExtremities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTangentsAtExtremities(FPoint& StartTangent, FPoint& EndTangent, bool bForward)"
  },
  {
    "label": "GetTangentsAtExtremities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentsAtExtremities(FPoint& StartTangent, FPoint& EndTangent, EOrientation Orientation)"
  },
  {
    "label": "GetTangentsAtExtremities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentsAtExtremities(StartTangent, EndTangent, Orientation == EOrientation::Front)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} const FEdgeMesh*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Mesh.IsValid())"
  },
  {
    "label": "GetOrCreateMesh()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FEdgeMesh&)",
    "insertText": "GetOrCreateMesh(FModelMesh& MeshModel)"
  },
  {
    "label": "RemovePreMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePreMesh()"
  },
  {
    "label": "GetPreMeshedTwin()",
    "kind": "Method",
    "detail": "Function (const FTopologicalEdge*)",
    "insertText": "GetPreMeshedTwin()"
  },
  {
    "label": "ComputeCrossingPointCoordinates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeCrossingPointCoordinates()"
  },
  {
    "label": "EvaluateCuttingPointNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EvaluateCuttingPointNum()"
  },
  {
    "label": "InitDeltaUs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDeltaUs()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Size = CrossingPointUs .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (CrossingPointUs .)",
    "insertText": "SetNum(Size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (CrossingPointDeltaUMins .)",
    "insertText": "Init(DOUBLE_SMALL_NUMBER, Size - 1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (CrossingPointDeltaUMaxs .)",
    "insertText": "Init(2.0 * (GetEndCurvilinearCoordinates() - GetStartCurvilinearCoordinates()), Size - 1)"
  },
  {
    "label": "GetCrossingPointUs()",
    "kind": "Method",
    "detail": "Function (} const TArray<double>&)",
    "insertText": "GetCrossingPointUs()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } Index = 0 ;)",
    "insertText": "if(Coordinate < CrossingPointUs[1])"
  },
  {
    "label": "GetCuttingPoints()",
    "kind": "Method",
    "detail": "Function (break ; } } } return CrossingPointDeltaUMaxs [ Index ] ; } TArray<FCuttingPoint>&)",
    "insertText": "GetCuttingPoints()"
  },
  {
    "label": "TransferCuttingPointFromMeshedEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferCuttingPointFromMeshedEdge(bool bOnlyWithOppositeNode, FAddCuttingPointFunc AddCuttingPoint)"
  },
  {
    "label": "GetPreElementLengths()",
    "kind": "Method",
    "detail": "Function (TArray<double>)",
    "insertText": "GetPreElementLengths()"
  },
  {
    "label": "SortImposedCuttingPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortImposedCuttingPoints()"
  },
  {
    "label": "GetImposedCuttingPoints()",
    "kind": "Method",
    "detail": "Function (const TArray<FImposedCuttingPoint>&)",
    "insertText": "GetImposedCuttingPoints()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ThinZoneSides .)",
    "insertText": "AddUnique(InThinZoneSide)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ThinZoneBounds .)",
    "insertText": "Add(InThinZoneBounds)"
  },
  {
    "label": "GetThinZoneCount()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetThinZoneCount()"
  },
  {
    "label": "GetThinZoneSides()",
    "kind": "Method",
    "detail": "Function (} const TArray<FThinZoneSide*>&)",
    "insertText": "GetThinZoneSides()"
  },
  {
    "label": "AddTwinsCuttingPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTwinsCuttingPoint(const double Coord, const double DeltaU)"
  },
  {
    "label": "GenerateMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateMeshElements(FModelMesh& MeshModel)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FRestrictionCurve>)",
    "insertText": "GetCurve()"
  },
  {
    "label": "ComputeLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeLength()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(const double DesiredSegmentLength, TArray<double>& OutCoordinates)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double InCoordinate, int32 Derivative, FCurvePoint& Point)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "EvaluatePoint(InCoordinate, Point, Derivative)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePoints(const TArray<double>& InCoordinates, int32 DerivativeOrder, TArray<FCurvePoint>& OutPoints)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "EvaluatePoints(InCoordinates, OutPoints, DerivativeOrder)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximatePoints(const TArray<double>& InCoordinates, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "Approximate3DPoints()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "Approximate3DPoints(InCoordinates, OutPoints)"
  },
  {
    "label": "Approximate2DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "Approximate2DPoint(const double InCoordinate)"
  },
  {
    "label": "Approximate2DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Approximate2DPoints(const TArray<double>& InCoordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "Approximate2DPoints()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "Approximate2DPoints(InCoordinates, OutPoints)"
  },
  {
    "label": "ApproximatePolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximatePolyline(FSurfacicPolyline& Polyline)"
  },
  {
    "label": "ApproximatePolyline()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "ApproximatePolyline(Polyline)"
  },
  {
    "label": "GetTangentAt()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetTangentAt(const double InCoordinate)"
  },
  {
    "label": "GetTangent2DAt()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "GetTangent2DAt(const double InCoordinate)"
  },
  {
    "label": "GetTangentAt()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetTangentAt(const FTopologicalVertex& InVertex)"
  },
  {
    "label": "GetTangent2DAt()",
    "kind": "Method",
    "detail": "Function (FPoint2D)",
    "insertText": "GetTangent2DAt(const FTopologicalVertex& InVertex)"
  },
  {
    "label": "ProjectPoint()",
    "kind": "Method",
    "detail": "Function (template<class PointType> double)",
    "insertText": "ProjectPoint(const PointType& InPointToProject, PointType& OutProjectedPoint)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectPoints(const TArray<FPoint>& InPointsToProject, TArray<double>& OutProjectedPointCoords, TArray<FPoint>& OutProjectedPoints)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "ProjectPoints(Boundary, InPointsToProject, OutProjectedPointCoords, OutProjectedPoints)"
  },
  {
    "label": "ProjectTwinEdgePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectTwinEdgePoints(const TArray<FPoint>& InPointsToProject, bool bSameOrientation, TArray<double>& OutProjectedPointCoords)"
  },
  {
    "label": "ProjectTwinCurvePoints()",
    "kind": "Method",
    "detail": "Function (const double ToleranceOfProjection = Length3D* 0 . 1 ; Curve ->)",
    "insertText": "ProjectTwinCurvePoints(Boundary, InPointsToProject, bSameOrientation, OutProjectedPointCoords, ToleranceOfProjection)"
  },
  {
    "label": "ProjectTwinEdgePointsOn2DCurve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectTwinEdgePointsOn2DCurve(const TSharedRef<FTopologicalEdge>& InTwinEdge, const TArray<double>& InTwinEdgePointCoords, TArray<FPoint2D>& OutPoints2D)"
  },
  {
    "label": "ComputeIntersectionsWithIsos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeIntersectionsWithIsos(const TArray<double>& InIsoCoordinates, const EIso InTypeIso, const FSurfacicTolerance& ToleranceIso, TArray<double>& OutIntersection)"
  },
  {
    "label": "ComputeIntersectionsWithIsos()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "ComputeIntersectionsWithIsos(Boundary, InIsoCoordinates, InTypeIso, ToleranceIso, OutIntersection)"
  },
  {
    "label": "GetDiscretization2DPoints()",
    "kind": "Method",
    "detail": "Function (} template<class PointType> void)",
    "insertText": "GetDiscretization2DPoints(EOrientation Orientation, TArray<PointType>& OutPoints)"
  },
  {
    "label": "GetDiscretizationPoints()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "GetDiscretizationPoints(Boundary, Orientation, OutPoints)"
  },
  {
    "label": "TransformLocalCoordinateToActiveEdgeCoordinate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "TransformLocalCoordinateToActiveEdgeCoordinate(const double LocalCoordinate)"
  },
  {
    "label": "TransformTwinEdgeCoordinatesToLocalCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformTwinEdgeCoordinatesToLocalCoordinates(const FTopologicalEdge& TwinEdge, const TArray<double>& InActiveEdgeCoordinate, TArray<double>& OutLocalCoordinate)"
  },
  {
    "label": "TransformActiveEdgeCoordinatesToLocalCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformActiveEdgeCoordinatesToLocalCoordinates(const TArray<double>& InActiveEdgeCoordinate, TArray<double>& OutLocalCoordinate)"
  },
  {
    "label": "TransformLocalCoordinatesToActiveEdgeCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformLocalCoordinatesToActiveEdgeCoordinates(const TArray<double>& InLocalCoordinate, TArray<double>& OutActiveEdgeCoordinate)"
  },
  {
    "label": "ComputeEdge2DProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeEdge2DProperties(FEdge2DProperties& SlopeCharacteristics)"
  },
  {
    "label": "GetExtremities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExtremities(FSurfacicCurveExtremities& Extremities)"
  },
  {
    "label": "GetExtremities()",
    "kind": "Method",
    "detail": "Function (Curve ->)",
    "insertText": "GetExtremities(Boundary, Extremities)"
  },
  {
    "label": "Offset2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Offset2D(const FPoint2D& OffsetDirection)"
  },
  {
    "label": "SplitAt()",
    "kind": "Method",
    "detail": "Function (FTopologicalVertex*)",
    "insertText": "SplitAt(double SplittingCoordinate, const FPoint& NewVertexCoordinate, bool bKeepStartVertexConnectivity, TSharedPtr<FTopologicalEdge>& OutNewEdge)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtendTo(bool bStartExtremity, const FPoint2D& NewExtremityCoordinate, TSharedRef<FTopologicalVertex>& NewVertex)"
  },
  {
    "label": "IsSharpEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharpEdge()"
  },
  {
    "label": "HasSameLengthAs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSameLengthAs(const FTopologicalEdge& Edge, double EdgeLengthTolerance)"
  },
  {
    "label": "IsDegenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDegenerated()"
  },
  {
    "label": "IsThinPeak()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsThinPeak()"
  },
  {
    "label": "SetThinPeakMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetThinPeakMarker()"
  },
  {
    "label": "ResetThinPeakMarker()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::ThinPeak ; } void)",
    "insertText": "ResetThinPeakMarker()"
  },
  {
    "label": "IsVirtuallyMeshed()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::ThinPeak ; } bool)",
    "insertText": "IsVirtuallyMeshed()"
  },
  {
    "label": "SetVirtuallyMeshedMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVirtuallyMeshedMarker()"
  },
  {
    "label": "ResetVirtuallyMeshedMarker()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsVirtuallyMeshed ; } void)",
    "insertText": "ResetVirtuallyMeshedMarker()"
  },
  {
    "label": "IsBorder()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsVirtuallyMeshed ; } bool)",
    "insertText": "IsBorder()"
  },
  {
    "label": "IsSurfacic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSurfacic()"
  },
  {
    "label": "IsConnectedTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectedTo(const FTopologicalFace* Face)"
  },
  {
    "label": "GetLinkedFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FTopologicalFace*>)",
    "insertText": "GetLinkedFaces()"
  },
  {
    "label": "CreateEdgeByMergingEdges()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTopologicalEdge>)",
    "insertText": "CreateEdgeByMergingEdges(const double SmallEdgeTolerance, TArray<FOrientedEdge>& Edges, const TSharedRef<FTopologicalVertex>& StartVertex, const TSharedRef<FTopologicalVertex>& EndVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; struct FEdge2DProperties { double StandardDeviation = 0 ; double MediumSlope = 0 ; double Length3D = 0 ; EIso IsoType = EIso::UndefinedIso ; bool bIsMesh = false ; double MeshedLength = 0 ; void)",
    "insertText": "Add(double InSlope, double InLength)"
  },
  {
    "label": "StandardDeviation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StandardDeviation(FMath::Square(StandardDeviation) + FMath::Square(MediumSlope)) * Length3D + (FMath::Square(Property.StandardDeviation) + FMath::Square(Property.MediumSlope))"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (MediumSlope = MediumSlope* Length3D + Property . MediumSlope* Property . Length3D ; Length3D + = Property . Length3D ; MediumSlope / = Length3D ; StandardDeviation / = Length3D ; StandardDeviation - =)",
    "insertText": "Square(MediumSlope)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (StandardDeviation =)",
    "insertText": "sqrt(StandardDeviation)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FEdge2DProperties& Property)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (StandardDeviation + = Property . StandardDeviation ; MediumSlope + = Property . MediumSlope ; Length3D + = Property . Length3D ; } void)",
    "insertText": "Finalize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} IsoType = EIso::UndefinedIso ;)",
    "insertText": "if(MediumSlope < 0.2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IsoType = EIso::IsoU ; } } else)",
    "insertText": "if(MediumSlope > 1.8)"
  },
  {
    "label": "FCuttingPoint()",
    "kind": "Method",
    "detail": "Function (IsoType = EIso::IsoV ; } } } } ; struct FCuttingPoint { double Coordinate ; ECoordinateType Type ; FPairOfIndex OppositNodeIndices ; double IsoDeltaU = 0 ;)",
    "insertText": "FCuttingPoint() : Coordinate(0) , Type(ECoordinateType::OtherCoordinate) , OppositNodeIndices(FPairOfIndex::Undefined) , IsoDeltaU(HUGE_VAL)"
  },
  {
    "label": "FCuttingPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCuttingPoint(double InCoordinate, ECoordinateType InType) : Coordinate(InCoordinate) , Type(InType) , OppositNodeIndices(FPairOfIndex::Undefined) , IsoDeltaU(HUGE_VAL)"
  },
  {
    "label": "FCuttingPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCuttingPoint(double InCoordinate, ECoordinateType InType, FPairOfIndex InOppositNodeIndices, double DeltaU) : Coordinate(InCoordinate) , Type(InType) , OppositNodeIndices(InOppositNodeIndices) , IsoDeltaU(DeltaU)"
  },
  {
    "label": "FCuttingPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCuttingPoint(double InCoordinate, ECoordinateType InType, int32 InOppositeNodeId, double DeltaU) : Coordinate(InCoordinate) , Type(InType) , OppositNodeIndices(InOppositeNodeId) , IsoDeltaU(DeltaU)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCuttingGrid { TArray<FCuttingPoint> Coordinates [ 2 ] ; TArray<FCuttingPoint>&)",
    "insertText": "operator(EIso Iso)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CuttingPointCoordinates .)",
    "insertText": "Empty(CuttingPoints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CuttingPointCoordinates .)",
    "insertText": "Add(CuttingPoint.Coordinate)"
  }
]