[
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "TIsArrayOrRefOfTypeByPredicate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsArrayOrRefOfTypeByPredicate"
  },
  {
    "label": "ArrType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" template<T,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate { enum { Value = false } ; } ; template<ArrType,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<ArrType [ ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<const ArrType [ ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<volatile ArrType [ ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<const volatile ArrType [ ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,unsigned int N,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<ArrType [ N ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,unsigned int N,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<const ArrType [ N ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,unsigned int N,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<volatile ArrType [ N ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,unsigned int N,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<const volatile ArrType [ N ],Predicate> { enum { Value = Predicate<ArrType>::Value } ; } ; template<ArrType,unsigned int N,template<> class Predicate> struct TIsArrayOrRefOfTypeByPredicate<)",
    "insertText": "ArrType(&)"
  }
]