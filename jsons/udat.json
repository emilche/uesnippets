[
  {
    "label": "UDateFormatStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateFormatStyle"
  },
  {
    "label": "UDateFormatField",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateFormatField"
  },
  {
    "label": "UDateFormatBooleanAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateFormatBooleanAttribute"
  },
  {
    "label": "UDateFormatSymbolType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateFormatSymbolType"
  },
  {
    "label": "UDateFormatSymbols",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UDateFormatSymbols"
  },
  {
    "label": "UDAT_RELATIVE()",
    "kind": "Method",
    "detail": "Function (# ifndef UDAT_H # define UDAT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / localpointer . h \" # include \" unicode / ucal . h \" # include \" unicode / unum . h \" # include \" unicode / udisplaycontext . h \" # include \" unicode / ufieldpositer . h \" typedef void* UDateFormat ; typedef enum UDateFormatStyle { UDAT_FULL,UDAT_LONG,UDAT_MEDIUM,UDAT_SHORT,UDAT_DEFAULT = UDAT_MEDIUM,)",
    "insertText": "UDAT_RELATIVE(1 << 7)"
  },
  {
    "label": "udat_toCalendarDateField()",
    "kind": "Method",
    "detail": "Function (# define UDAT_YEAR \" y \" # define UDAT_QUARTER \" QQQQ \" # define UDAT_ABBR_QUARTER \" QQQ \" # define UDAT_YEAR_QUARTER \" yQQQQ \" # define UDAT_YEAR_ABBR_QUARTER \" yQQQ \" # define UDAT_MONTH \" MMMM \" # define UDAT_ABBR_MONTH \" MMM \" # define UDAT_NUM_MONTH \" M \" # define UDAT_YEAR_MONTH \" yMMMM \" # define UDAT_YEAR_ABBR_MONTH \" yMMM \" # define UDAT_YEAR_NUM_MONTH \" yM \" # define UDAT_DAY \" d \" # define UDAT_YEAR_MONTH_DAY \" yMMMMd \" # define UDAT_YEAR_ABBR_MONTH_DAY \" yMMMd \" # define UDAT_YEAR_NUM_MONTH_DAY \" yMd \" # define UDAT_WEEKDAY \" EEEE \" # define UDAT_ABBR_WEEKDAY \" E \" # define UDAT_YEAR_MONTH_WEEKDAY_DAY \" yMMMMEEEEd \" # define UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY \" yMMMEd \" # define UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY \" yMEd \" # define UDAT_MONTH_DAY \" MMMMd \" # define UDAT_ABBR_MONTH_DAY \" MMMd \" # define UDAT_NUM_MONTH_DAY \" Md \" # define UDAT_MONTH_WEEKDAY_DAY \" MMMMEEEEd \" # define UDAT_ABBR_MONTH_WEEKDAY_DAY \" MMMEd \" # define UDAT_NUM_MONTH_WEEKDAY_DAY \" MEd \" # define UDAT_HOUR \" j \" # define UDAT_HOUR24 \" H \" # define UDAT_MINUTE \" m \" # define UDAT_HOUR_MINUTE \" jm \" # define UDAT_HOUR24_MINUTE \" Hm \" # define UDAT_SECOND \" s \" # define UDAT_HOUR_MINUTE_SECOND \" jms \" # define UDAT_HOUR24_MINUTE_SECOND \" Hms \" # define UDAT_MINUTE_SECOND \" ms \" # define UDAT_LOCATION_TZ \" VVVV \" # define UDAT_GENERIC_TZ \" vvvv \" # define UDAT_ABBR_GENERIC_TZ \" v \" # define UDAT_SPECIFIC_TZ \" zzzz \" # define UDAT_ABBR_SPECIFIC_TZ \" z \" # define UDAT_ABBR_UTC_TZ \" ZZZZ \" # ifndef # define UDAT_STANDALONE_MONTH \" LLLL \" # define UDAT_ABBR_STANDALONE_MONTH \" LLL \" # define UDAT_HOUR_MINUTE_GENERIC_TZ \" jmv \" # define UDAT_HOUR_MINUTE_TZ \" jmz \" # define UDAT_HOUR_GENERIC_TZ \" jv \" # define UDAT_HOUR_TZ \" jz \" # endif # ifndef # define JP_ERA_2019_ROOT \" Qqqq \" # define JP_ERA_2019_JA \" \\ \\ uFF31 \\ \\ uFF31 \" # define JP_ERA_2019_NARROW \" Q \" # endif typedef enum UDateFormatField { UDAT_ERA_FIELD = 0,UDAT_YEAR_FIELD = 1,UDAT_MONTH_FIELD = 2,UDAT_DATE_FIELD = 3,UDAT_HOUR_OF_DAY1_FIELD = 4,UDAT_HOUR_OF_DAY0_FIELD = 5,UDAT_MINUTE_FIELD = 6,UDAT_SECOND_FIELD = 7,UDAT_FRACTIONAL_SECOND_FIELD = 8,UDAT_DAY_OF_WEEK_FIELD = 9,UDAT_DAY_OF_YEAR_FIELD = 1 0,UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 1 1,UDAT_WEEK_OF_YEAR_FIELD = 1 2,UDAT_WEEK_OF_MONTH_FIELD = 1 3,UDAT_AM_PM_FIELD = 1 4,UDAT_HOUR1_FIELD = 1 5,UDAT_HOUR0_FIELD = 1 6,UDAT_TIMEZONE_FIELD = 1 7,UDAT_YEAR_WOY_FIELD = 1 8,UDAT_DOW_LOCAL_FIELD = 1 9,UDAT_EXTENDED_YEAR_FIELD = 2 0,UDAT_JULIAN_DAY_FIELD = 2 1,UDAT_MILLISECONDS_IN_DAY_FIELD = 2 2,UDAT_TIMEZONE_RFC_FIELD = 2 3,UDAT_TIMEZONE_GENERIC_FIELD = 2 4,UDAT_STANDALONE_DAY_FIELD = 2 5,UDAT_STANDALONE_MONTH_FIELD = 2 6,UDAT_QUARTER_FIELD = 2 7,UDAT_STANDALONE_QUARTER_FIELD = 2 8,UDAT_TIMEZONE_SPECIAL_FIELD = 2 9,UDAT_YEAR_NAME_FIELD = 3 0,UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 3 1,UDAT_TIMEZONE_ISO_FIELD = 3 2,UDAT_TIMEZONE_ISO_LOCAL_FIELD = 3 3,# ifndef UDAT_RELATED_YEAR_FIELD = 3 4,# endif UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 3 5,UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 3 6,# ifndef UDAT_TIME_SEPARATOR_FIELD = 3 7,# endif # ifndef UDAT_FIELD_COUNT = 3 8 # endif } UDateFormatField ; # ifndef # define UDAT_HAS_PATTERN_CHAR_FOR_TIME_SEPARATOR 0 # endif U_CAPI UCalendarDateFields U_EXPORT2)",
    "insertText": "udat_toCalendarDateField(UDateFormatField field)"
  },
  {
    "label": "udat_open()",
    "kind": "Method",
    "detail": "Function (U_CAPI UDateFormat* U_EXPORT2)",
    "insertText": "udat_open(UDateFormatStyle timeStyle, UDateFormatStyle dateStyle, const char *locale, const UChar *tzID, int32_t tzIDLength, const UChar *pattern, int32_t patternLength, UErrorCode *status)"
  },
  {
    "label": "udat_close()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_close(UDateFormat* format)"
  },
  {
    "label": "udat_getBooleanAttribute()",
    "kind": "Method",
    "detail": "Function (typedef enum UDateFormatBooleanAttribute { UDAT_PARSE_ALLOW_WHITESPACE = 0,UDAT_PARSE_ALLOW_NUMERIC = 1,UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2,UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3,UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4 } UDateFormatBooleanAttribute ; U_CAPI UBool U_EXPORT2)",
    "insertText": "udat_getBooleanAttribute(const UDateFormat* fmt, UDateFormatBooleanAttribute attr, UErrorCode* status)"
  },
  {
    "label": "udat_setBooleanAttribute()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setBooleanAttribute(UDateFormat *fmt, UDateFormatBooleanAttribute attr, UBool newValue, UErrorCode* status)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUDateFormatPointer, UDateFormat, udat_close)"
  },
  {
    "label": "udat_clone()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_CAPI UDateFormat* U_EXPORT2)",
    "insertText": "udat_clone(const UDateFormat *fmt, UErrorCode *status)"
  },
  {
    "label": "udat_format()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_format(const UDateFormat* format, UDate dateToFormat, UChar* result, int32_t resultLength, UFieldPosition* position, UErrorCode* status)"
  },
  {
    "label": "udat_formatCalendar()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_formatCalendar(const UDateFormat* format, UCalendar* calendar, UChar* result, int32_t capacity, UFieldPosition* position, UErrorCode* status)"
  },
  {
    "label": "udat_formatForFields()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_formatForFields(const UDateFormat* format, UDate dateToFormat, UChar* result, int32_t resultLength, UFieldPositionIterator* fpositer, UErrorCode* status)"
  },
  {
    "label": "udat_formatCalendarForFields()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_formatCalendarForFields(const UDateFormat* format, UCalendar* calendar, UChar* result, int32_t capacity, UFieldPositionIterator* fpositer, UErrorCode* status)"
  },
  {
    "label": "udat_parse()",
    "kind": "Method",
    "detail": "Function (U_CAPI UDate U_EXPORT2)",
    "insertText": "udat_parse(const UDateFormat* format, const UChar* text, int32_t textLength, int32_t *parsePos, UErrorCode *status)"
  },
  {
    "label": "udat_parseCalendar()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_parseCalendar(const UDateFormat* format, UCalendar* calendar, const UChar* text, int32_t textLength, int32_t *parsePos, UErrorCode *status)"
  },
  {
    "label": "udat_isLenient()",
    "kind": "Method",
    "detail": "Function (U_CAPI UBool U_EXPORT2)",
    "insertText": "udat_isLenient(const UDateFormat* fmt)"
  },
  {
    "label": "udat_setLenient()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setLenient(UDateFormat* fmt, UBool isLenient)"
  },
  {
    "label": "udat_getCalendar()",
    "kind": "Method",
    "detail": "Function (U_CAPI const UCalendar* U_EXPORT2)",
    "insertText": "udat_getCalendar(const UDateFormat* fmt)"
  },
  {
    "label": "udat_setCalendar()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setCalendar(UDateFormat* fmt, const UCalendar* calendarToSet)"
  },
  {
    "label": "udat_getNumberFormat()",
    "kind": "Method",
    "detail": "Function (U_CAPI const UNumberFormat* U_EXPORT2)",
    "insertText": "udat_getNumberFormat(const UDateFormat* fmt)"
  },
  {
    "label": "udat_getNumberFormatForField()",
    "kind": "Method",
    "detail": "Function (U_CAPI const UNumberFormat* U_EXPORT2)",
    "insertText": "udat_getNumberFormatForField(const UDateFormat* fmt, UChar field)"
  },
  {
    "label": "udat_adoptNumberFormatForFields()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_adoptNumberFormatForFields(UDateFormat* fmt, const UChar* fields, UNumberFormat* numberFormatToSet, UErrorCode* status)"
  },
  {
    "label": "udat_setNumberFormat()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setNumberFormat(UDateFormat* fmt, const UNumberFormat* numberFormatToSet)"
  },
  {
    "label": "udat_adoptNumberFormat()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_adoptNumberFormat(UDateFormat* fmt, UNumberFormat* numberFormatToAdopt)"
  },
  {
    "label": "udat_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_CAPI const char* U_EXPORT2)",
    "insertText": "udat_getAvailable(int32_t localeIndex)"
  },
  {
    "label": "udat_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_countAvailable(void)"
  },
  {
    "label": "udat_get2DigitYearStart()",
    "kind": "Method",
    "detail": "Function (U_CAPI UDate U_EXPORT2)",
    "insertText": "udat_get2DigitYearStart(const UDateFormat *fmt, UErrorCode *status)"
  },
  {
    "label": "udat_set2DigitYearStart()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_set2DigitYearStart(UDateFormat *fmt, UDate d, UErrorCode *status)"
  },
  {
    "label": "udat_toPattern()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_toPattern(const UDateFormat *fmt, UBool localized, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "udat_applyPattern()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_applyPattern(UDateFormat *format, UBool localized, const UChar *pattern, int32_t patternLength)"
  },
  {
    "label": "udat_getSymbols()",
    "kind": "Method",
    "detail": "Function (typedef enum UDateFormatSymbolType { UDAT_ERAS,UDAT_MONTHS,UDAT_SHORT_MONTHS,UDAT_WEEKDAYS,UDAT_SHORT_WEEKDAYS,UDAT_AM_PMS,UDAT_LOCALIZED_CHARS,UDAT_ERA_NAMES,UDAT_NARROW_MONTHS,UDAT_NARROW_WEEKDAYS,UDAT_STANDALONE_MONTHS,UDAT_STANDALONE_SHORT_MONTHS,UDAT_STANDALONE_NARROW_MONTHS,UDAT_STANDALONE_WEEKDAYS,UDAT_STANDALONE_SHORT_WEEKDAYS,UDAT_STANDALONE_NARROW_WEEKDAYS,UDAT_QUARTERS,UDAT_SHORT_QUARTERS,UDAT_STANDALONE_QUARTERS,UDAT_STANDALONE_SHORT_QUARTERS,UDAT_SHORTER_WEEKDAYS,UDAT_STANDALONE_SHORTER_WEEKDAYS,UDAT_CYCLIC_YEARS_WIDE,UDAT_CYCLIC_YEARS_ABBREVIATED,UDAT_CYCLIC_YEARS_NARROW,UDAT_ZODIAC_NAMES_WIDE,UDAT_ZODIAC_NAMES_ABBREVIATED,UDAT_ZODIAC_NAMES_NARROW } UDateFormatSymbolType ; struct UDateFormatSymbols ; typedef struct UDateFormatSymbols UDateFormatSymbols ; U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_getSymbols(const UDateFormat *fmt, UDateFormatSymbolType type, int32_t symbolIndex, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "udat_countSymbols()",
    "kind": "Method",
    "detail": "Function (U_CAPI int32_t U_EXPORT2)",
    "insertText": "udat_countSymbols(const UDateFormat *fmt, UDateFormatSymbolType type)"
  },
  {
    "label": "udat_setSymbols()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setSymbols(UDateFormat *format, UDateFormatSymbolType type, int32_t symbolIndex, UChar *value, int32_t valueLength, UErrorCode *status)"
  },
  {
    "label": "udat_getLocaleByType()",
    "kind": "Method",
    "detail": "Function (U_CAPI const char* U_EXPORT2)",
    "insertText": "udat_getLocaleByType(const UDateFormat *fmt, ULocDataLocaleType type, UErrorCode* status)"
  },
  {
    "label": "udat_setContext()",
    "kind": "Method",
    "detail": "Function (U_CAPI void U_EXPORT2)",
    "insertText": "udat_setContext(UDateFormat* fmt, UDisplayContext value, UErrorCode* status)"
  },
  {
    "label": "udat_getContext()",
    "kind": "Method",
    "detail": "Function (U_CAPI UDisplayContext U_EXPORT2)",
    "insertText": "udat_getContext(const UDateFormat* fmt, UDisplayContextType type, UErrorCode* status)"
  },
  {
    "label": "udat_toPatternRelativeDate()",
    "kind": "Method",
    "detail": "Function (# ifndef U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "udat_toPatternRelativeDate(const UDateFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "udat_toPatternRelativeTime()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL int32_t U_EXPORT2)",
    "insertText": "udat_toPatternRelativeTime(const UDateFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "udat_applyPatternRelative()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL void U_EXPORT2)",
    "insertText": "udat_applyPatternRelative(UDateFormat *format, const UChar *datePattern, int32_t datePatternLength, const UChar *timePattern, int32_t timePatternLength, UErrorCode *status)"
  },
  {
    "label": "UDateFormat()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "UDateFormat(U_EXPORT2 *UDateFormatOpener) (UDateFormatStyle timeStyle, UDateFormatStyle dateStyle, const char *locale, const UChar *tzID, int32_t tzIDLength, const UChar *pattern, int32_t patternLength, UErrorCode *status)"
  },
  {
    "label": "udat_registerOpener()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL void U_EXPORT2)",
    "insertText": "udat_registerOpener(UDateFormatOpener opener, UErrorCode *status)"
  },
  {
    "label": "udat_unregisterOpener()",
    "kind": "Method",
    "detail": "Function (U_INTERNAL UDateFormatOpener U_EXPORT2)",
    "insertText": "udat_unregisterOpener(UDateFormatOpener opener, UErrorCode *status)"
  }
]