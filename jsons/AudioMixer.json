[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FThreadSafeCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSafeCounter"
  },
  {
    "label": "FMixerNullCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerNullCallback"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "FSoundWaveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveProxy"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FAudioPlatformDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPlatformDeviceInfo"
  },
  {
    "label": "IAudioMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixer"
  },
  {
    "label": "IAudioPlatformDeviceInfoCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioPlatformDeviceInfoCache"
  },
  {
    "label": "FAudioMixerOpenStreamParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioMixerOpenStreamParams"
  },
  {
    "label": "FAudioOutputStreamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioOutputStreamInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAudioRenderTimeAnalysis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioRenderTimeAnalysis"
  },
  {
    "label": "FOutputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputBuffer"
  },
  {
    "label": "IAudioMixerDeviceChangedListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerDeviceChangedListener"
  },
  {
    "label": "FFormatChangedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatChangedData"
  },
  {
    "label": "IAudioMixerPlatformInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerPlatformInterface"
  },
  {
    "label": "FSingleThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleThreadRunnable"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "IAudioDeviceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioDeviceModule"
  },
  {
    "label": "AUDIO_PLATFORM_LOG_ONCE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixerLog . h \" # include \" AudioMixerNullDevice . h \" # include \" AudioMixerTypes . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / Dsp . h \" # include \" DSP / ParamInterpolator . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / Runnable . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Optional . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Modules / ModuleInterface . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / NameTypes . h \" class FEvent ; class FRunnableThread ; class FThreadSafeCounter ; namespace Audio { class FMixerNullCallback ; } # define)",
    "insertText": "AUDIO_PLATFORM_LOG_ONCE(INFO, VERBOSITY) (AudioMixerPlatformLogOnce(INFO, FString(__FILE__), __LINE__, ELogVerbosity::VERBOSITY)) #define AUDIO_PLATFORM_ERROR(INFO) (AudioMixerPlatformLogOnce(INFO, FString(__FILE__), __LINE__, ELogVerbosity::Error)) #ifndef AUDIO_MIXER_ENABLE_DEBUG_MODE #if (UE_BUILD_SHIPPING || UE_BUILD_TEST) #define AUDIO_MIXER_ENABLE_DEBUG_MODE 0 #else #define AUDIO_MIXER_ENABLE_DEBUG_MODE 1 #endif #endif #if AUDIO_MIXER_ENABLE_DEBUG_MODE #define AUDIO_MIXER_CHECK(expr) ensure(expr) #define AUDIO_MIXER_CHECK_GAME_THREAD(_MixerDevice) (_MixerDevice->CheckAudioThread()) #define AUDIO_MIXER_CHECK_AUDIO_PLAT_THREAD(_MixerDevice) (_MixerDevice->CheckAudioRenderingThread()) #else #define AUDIO_MIXER_CHECK(expr) #define AUDIO_MIXER_CHECK_GAME_THREAD(_MixerDevice) #define AUDIO_MIXER_CHECK_AUDIO_PLAT_THREAD(_MixerDevice) #endif #define AUDIO_MIXER_MAX_OUTPUT_CHANNELS 8 #define AUDIO_MIXER_DEFAULT_DEVICE_INDEX INDEX_NONE DECLARE_STATS_GROUP(TEXT(\"AudioMixer\"), STATGROUP_AudioMixer, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Render Audio\"), STAT_AudioMixerRenderAudio, STATGROUP_AudioMixer, AUDIOMIXERCORE_API)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (namespace EAudioMixerChannel { enum Type { FrontLeft,FrontRight,FrontCenter,LowFrequency,BackLeft,BackRight,FrontLeftOfCenter,FrontRightOfCenter,BackCenter,SideLeft,SideRight,TopCenter,TopFrontLeft,TopFrontCenter,TopFrontRight,TopBackLeft,TopBackCenter,TopBackRight,Unknown,ChannelTypeCount,DefaultChannel = FrontLeft } ; const int32 MaxSupportedChannel = EAudioMixerChannel::TopCenter ; const TCHAR*)",
    "insertText": "ToString(EAudioMixerChannel::Type InType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"UNSUPPORTED\")"
  },
  {
    "label": "FAudioPlatformDeviceInfo()",
    "kind": "Method",
    "detail": "Function (} } } class FSoundWaveData ; class FSoundWaveProxy ; class ICompressedAudioInfo ; class USoundWave ; using FSoundWaveProxyPtr = TSharedPtr<FSoundWaveProxy,ESPMode::ThreadSafe> ; using FSoundWavePtr = TSharedPtr<FSoundWaveData,ESPMode::ThreadSafe> ; namespace Audio { struct FAudioPlatformDeviceInfo { FString Name ; FString DeviceId ; int32 NumChannels ; int32 NumDirectOutChannels ; int32 SampleRate ; EAudioMixerStreamDataFormat::Type Format ; TArray<EAudioMixerChannel::Type> OutputChannelArray ; uint8 bIsSystemDefault : 1 ;)",
    "insertText": "FAudioPlatformDeviceInfo()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Name =)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "OnProcessAudioStream()",
    "kind": "Method",
    "detail": "Function (bIsSystemDefault = false ; } } ; class IAudioMixer { public : bool)",
    "insertText": "OnProcessAudioStream(FAlignedFloatBuffer& OutputBuffer)"
  },
  {
    "label": "OnAudioStreamShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioStreamShutdown()"
  },
  {
    "label": "IsMainAudioMixer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMainAudioMixer()"
  },
  {
    "label": "ShouldRecycleThreads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecycleThreads()"
  },
  {
    "label": "ShouldUseDeviceInfoCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseDeviceInfoCache()"
  },
  {
    "label": "IAudioMixer()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "IAudioMixer() : bIsMainAudioMixer(false)"
  },
  {
    "label": "IAudioPlatformDeviceInfoCache()",
    "kind": "Method",
    "detail": "Function (} bool bIsMainAudioMixer ; } ; class IAudioPlatformDeviceInfoCache { public : ~)",
    "insertText": "IAudioPlatformDeviceInfoCache()"
  },
  {
    "label": "FindActiveOutputDevice()",
    "kind": "Method",
    "detail": "Function (TOptional<FAudioPlatformDeviceInfo>)",
    "insertText": "FindActiveOutputDevice(FName InDeviceID)"
  },
  {
    "label": "GetAllActiveOutputDevices()",
    "kind": "Method",
    "detail": "Function (TArray<FAudioPlatformDeviceInfo>)",
    "insertText": "GetAllActiveOutputDevices()"
  },
  {
    "label": "FindDefaultOutputDevice()",
    "kind": "Method",
    "detail": "Function (TOptional<FAudioPlatformDeviceInfo>)",
    "insertText": "FindDefaultOutputDevice()"
  },
  {
    "label": "FAudioMixerOpenStreamParams()",
    "kind": "Method",
    "detail": "Function (} ; struct FAudioMixerOpenStreamParams { uint32 OutputDeviceIndex ; uint32 NumFrames ; int32 NumBuffers ; IAudioMixer* AudioMixer ; uint32 SampleRate ; bool bRestoreIfRemoved ; int32 MaxSources ;)",
    "insertText": "FAudioMixerOpenStreamParams() : OutputDeviceIndex(INDEX_NONE) , NumFrames(1024) , NumBuffers(1) , AudioMixer(nullptr) , SampleRate(44100) , bRestoreIfRemoved(false) , MaxSources(0)"
  },
  {
    "label": "FAudioOutputStreamInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAudioOutputStreamInfo { uint32 OutputDeviceIndex ; FAudioPlatformDeviceInfo DeviceInfo ; EAudioOutputStreamState::Type StreamState ; IAudioMixer* AudioMixer ; uint32 NumBuffers ; int32 NumOutputFrames ;)",
    "insertText": "FAudioOutputStreamInfo()"
  },
  {
    "label": "FAudioRenderTimeAnalysis()",
    "kind": "Method",
    "detail": "Function (StreamState = EAudioOutputStreamState::Closed ; AudioMixer = nullptr ; NumBuffers = 2 ; NumOutputFrames = 0 ; } } ; enum class EAudioDeviceRole { Console,Multimedia,Communications,COUNT,} ; enum class EAudioDeviceState { Active,Disabled,NotPresent,Unplugged,COUNT,} ; struct FAudioRenderTimeAnalysis { double AvgRenderTime ; double MaxRenderTime ; double TotalRenderTime ; double RenderTimeSinceLastLog ; uint32 StartTime ; double MaxSinceTick ; uint64 RenderTimeCount ; int32 RenderInstanceId ;)",
    "insertText": "FAudioRenderTimeAnalysis()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "FOutputBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FOutputBuffer { public :)",
    "insertText": "FOutputBuffer() : AudioMixer(nullptr) , DataFormat(EAudioMixerStreamDataFormat::Unknown)"
  },
  {
    "label": "FOutputBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOutputBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(IAudioMixer* InAudioMixer, const int32 InNumSamples, const int32 InNumBuffers, const EAudioMixerStreamDataFormat::Type InDataFormat)"
  },
  {
    "label": "MixNextBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MixNextBuffer()"
  },
  {
    "label": "PopBufferData()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "PopBufferData(int32& OutBytesPopped)"
  },
  {
    "label": "GetNumSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSamples()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (EAudioMixerStreamDataFormat::Type)",
    "insertText": "GetFormat()"
  },
  {
    "label": "IAudioMixerDeviceChangedListener()",
    "kind": "Method",
    "detail": "Function (int32 CallCounterMixNextBuffer { 0 } ; } ; class IAudioMixerDeviceChangedListener { public : ~)",
    "insertText": "IAudioMixerDeviceChangedListener()"
  },
  {
    "label": "RegisterDeviceChangedListener()",
    "kind": "Method",
    "detail": "Function (struct FFormatChangedData { int32 NumChannels = 0 ; int32 SampleRate = 0 ; uint32 ChannelBitmask = 0 ; } ; enum class EDisconnectReason { DeviceRemoval,ServerShutdown,FormatChanged,SessionLogoff,SessionDisconnected,ExclusiveModeOverride } ; void)",
    "insertText": "RegisterDeviceChangedListener()"
  },
  {
    "label": "UnregisterDeviceChangedListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterDeviceChangedListener()"
  },
  {
    "label": "OnDefaultCaptureDeviceChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDefaultCaptureDeviceChanged(const EAudioDeviceRole InAudioDeviceRole, const FString& DeviceId)"
  },
  {
    "label": "OnDefaultRenderDeviceChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDefaultRenderDeviceChanged(const EAudioDeviceRole InAudioDeviceRole, const FString& DeviceId)"
  },
  {
    "label": "OnDeviceAdded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeviceAdded(const FString& DeviceId, bool bIsRenderDevice)"
  },
  {
    "label": "OnDeviceRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeviceRemoved(const FString& DeviceId, bool bIsRenderDevice)"
  },
  {
    "label": "OnDeviceStateChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeviceStateChanged(const FString& DeviceId, const EAudioDeviceState InState, bool bIsRenderDevice)"
  },
  {
    "label": "OnFormatChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFormatChanged(const FString& InDeviceId, const FFormatChangedData& InFormat)"
  },
  {
    "label": "OnSessionDisconnect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSessionDisconnect(EDisconnectReason InReason)"
  },
  {
    "label": "GetDeviceId()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDeviceId()"
  },
  {
    "label": "IAudioMixerPlatformInterface()",
    "kind": "Method",
    "detail": "Function (} } ; class IAudioMixerPlatformInterface : public FRunnable,public FSingleThreadRunnable,public IAudioMixerDeviceChangedListener { public : ~)",
    "insertText": "IAudioMixerPlatformInterface()"
  },
  {
    "label": "GetPlatformApi()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformApi()"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "CheckAudioDeviceChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAudioDeviceChange()"
  },
  {
    "label": "TeardownHardware()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TeardownHardware()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetNumOutputDevices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNumOutputDevices(uint32& OutNumOutputDevices)"
  },
  {
    "label": "GetOutputDeviceInfo()",
    "kind": "Method",
    "detail": "Function (OutNumOutputDevices = 1 ; return true ; } bool)",
    "insertText": "GetOutputDeviceInfo(const uint32 InDeviceIndex, FAudioPlatformDeviceInfo& OutInfo)"
  },
  {
    "label": "GetCurrentDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentDeviceName()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "GetDefaultOutputDeviceIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultOutputDeviceIndex(uint32& OutDefaultDeviceIndex)"
  },
  {
    "label": "OpenAudioStream()",
    "kind": "Method",
    "detail": "Function (OutDefaultDeviceIndex = 0 ; return true ; } bool)",
    "insertText": "OpenAudioStream(const FAudioMixerOpenStreamParams& Params)"
  },
  {
    "label": "CloseAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseAudioStream()"
  },
  {
    "label": "StartAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAudioStream()"
  },
  {
    "label": "StopAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopAudioStream()"
  },
  {
    "label": "MoveAudioStreamToNewAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveAudioStreamToNewAudioDevice(const FString& InNewDeviceId)"
  },
  {
    "label": "SubmitBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitBuffer(const uint8* Buffer)"
  },
  {
    "label": "SubmitDirectOutBuffer()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SubmitDirectOutBuffer(const int32 InDirectOutIndex, const Audio::FAlignedFloatBuffer& InBuffer)"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetNumFrames(const int32 InNumReqestedFrames)"
  },
  {
    "label": "GetChannelTypeAtIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChannelTypeAtIndex(const int32 Index, EAudioMixerChannel::Type& OutType)"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "ResumeContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeContext()"
  },
  {
    "label": "OnHardwareUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnHardwareUpdate()"
  },
  {
    "label": "GetDeviceInfoCache()",
    "kind": "Method",
    "detail": "Function (} IAudioPlatformDeviceInfoCache*)",
    "insertText": "GetDeviceInfoCache()"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (class FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "ReadNextBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadNextBuffer()"
  },
  {
    "label": "FadeIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeIn()"
  },
  {
    "label": "FadeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeOut()"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLastError()"
  },
  {
    "label": "MainAudioDeviceRun()",
    "kind": "Method",
    "detail": "Function (protected : uint32)",
    "insertText": "MainAudioDeviceRun()"
  },
  {
    "label": "RunInternal()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RunInternal()"
  },
  {
    "label": "AudioMixerPlatformLogOnce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioMixerPlatformLogOnce(const FString& LogDetails, const FString& FileName, int32 LineNumber, ELogVerbosity::Type InVerbosity = ELogVerbosity::Error)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if ! NO_LOGGING FCriticalSection Cs ; TSet<uint32> LogHistory ; FScopeLock)",
    "insertText": "Lock(&Cs)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Message =)",
    "insertText": "Printf(TEXT(\"Audio Platform Device: %s (File %s, Line %d)\"), *LogDetails, *FileName, LineNumber)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (LastError = Message ; } uint32 Hash =)",
    "insertText": "GetTypeHash(Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::Error :)",
    "insertText": "UE_LOG(LogAudioMixer, Error, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::Warning :)",
    "insertText": "UE_LOG(LogAudioMixer, Warning, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::Display :)",
    "insertText": "UE_LOG(LogAudioMixer, Display, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::Log :)",
    "insertText": "UE_LOG(LogAudioMixer, Log, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::Verbose :)",
    "insertText": "UE_LOG(LogAudioMixer, Verbose, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; case ELogVerbosity::VeryVerbose :)",
    "insertText": "UE_LOG(LogAudioMixer, VeryVerbose, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "static_assert(static_cast<uint8>(ELogVerbosity::NumVerbosity) == 8, \"Missing ELogVerbosity case coverage\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} break ; } LogHistory .)",
    "insertText": "Add(Hash)"
  },
  {
    "label": "BeginGeneratingAudio()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "BeginGeneratingAudio()"
  },
  {
    "label": "StopGeneratingAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopGeneratingAudio()"
  },
  {
    "label": "ApplyPrimaryAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPrimaryAttenuation(TArrayView<const uint8>& InOutPoppedAudio)"
  },
  {
    "label": "ApplyAttenuationInternal()",
    "kind": "Method",
    "detail": "Function (template<BufferType> void)",
    "insertText": "ApplyAttenuationInternal(TArrayView<BufferType>& InOutBuffer)"
  },
  {
    "label": "StartRunningNullDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRunningNullDevice()"
  },
  {
    "label": "StopRunningNullDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRunningNullDevice()"
  },
  {
    "label": "CreateNullDeviceThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNullDeviceThread(const TFunction<void()> InCallback, float InBufferDuration, bool bShouldPauseOnStart)"
  },
  {
    "label": "IsAudioMixerModule()",
    "kind": "Method",
    "detail": "Function (protected : FAudioOutputStreamInfo AudioStreamInfo ; FAudioMixerOpenStreamParams OpenStreamParams ; Audio::FOutputBuffer OutputBuffer ; bool bWarnedBufferUnderrun ; TUniquePtr<FRunnableThread> AudioRenderThread ; FEvent* AudioRenderEvent ; FCriticalSection DeviceSwapCriticalSection ; FThreadSafeBool bIsInDeviceSwap ; FEvent* AudioFadeEvent ; int32 NumOutputBuffers ; float FadeVolume ; FParam FadeParam ; FString CurrentDeviceName ; FString LastError ; int32 CallCounterApplyAttenuationInternal { 0 } ; int32 CallCounterReadNextBuffer { 0 } ; FThreadSafeBool bPerformingFade ; FThreadSafeBool bFadedOut ; FThreadSafeBool bIsDeviceInitialized ; FThreadSafeBool bMoveAudioStreamToNewAudioDevice ; FThreadSafeBool bIsUsingNullDevice ; FThreadSafeBool bIsGeneratingAudio ; FThreadSafeCounter NextInstanceID ; const int32 InstanceID { - 1 } ; private : TUniquePtr<FMixerNullCallback> NullDeviceCallback ; } ; } class FAudioDevice ; class IAudioDeviceModule : public IModuleInterface { public : bool)",
    "insertText": "IsAudioMixerModule()"
  }
]