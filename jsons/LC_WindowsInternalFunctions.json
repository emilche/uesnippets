[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" LC_WindowsInternals . h \" # include \" LC_Logging . h \" namespace WindowsInternals { template<T> class Function { } ; template<R,. . . Args> class Function<)",
    "insertText": "R(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "R(NTAPI *PtrToFunction)(Args...)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Function(const char* moduleName, const char* functionName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (R)",
    "insertText": "operator()(Args... args)"
  },
  {
    "label": "ExecNoResultCheck()",
    "kind": "Method",
    "detail": "Function (R)",
    "insertText": "ExecNoResultCheck(Args... args)"
  },
  {
    "label": "CheckResult()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CheckResult(T)"
  },
  {
    "label": "CheckResult()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "CheckResult(NTSTATUS result)"
  },
  {
    "label": "LC_ERROR_USER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_ERROR_USER(\"Call to function %s in module %s failed. Error: 0x%X\", m_functionName, m_moduleName, result)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } private : const char* m_moduleName ; const char* m_functionName ; PtrToFunction m_function ; } ; } template<R,. . . Args> WindowsInternals::Function<)",
    "insertText": "R(Args...)>::Function(const char* moduleName, const char* functionName) : m_moduleName(moduleName) , m_functionName(functionName) , m_function(nullptr)"
  },
  {
    "label": "GetModuleHandleA()",
    "kind": "Method",
    "detail": "Function (HMODULE module)",
    "insertText": "GetModuleHandleA(moduleName)"
  },
  {
    "label": "LC_ERROR_USER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_ERROR_USER(\"Cannot get handle for module %s\", moduleName)"
  },
  {
    "label": "LC_ERROR_USER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_ERROR_USER(\"Cannot get address of function %s in module %s\", functionName, moduleName)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } template<R,. . . Args> R WindowsInternals::Function<)",
    "insertText": "R(Args...)>::operator()(Args... args)"
  },
  {
    "label": "m_function()",
    "kind": "Method",
    "detail": "Function (const R result =)",
    "insertText": "m_function(args...)"
  },
  {
    "label": "NtResumeProcess()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtResumeProcess(HANDLE ProcessHandle)"
  },
  {
    "label": "NtReadVirtualMemory()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, ULONG NumberOfBytesToRead, PULONG NumberOfBytesRead)"
  },
  {
    "label": "NtWriteVirtualMemory()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtWriteVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, ULONG NumberOfBytesToWrite, PULONG NumberOfBytesWritten)"
  },
  {
    "label": "NtQuerySystemInformation()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtQuerySystemInformation(WindowsInternals::NT_SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength)"
  },
  {
    "label": "NtQueryInformationProcess()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtQueryInformationProcess(HANDLE ProcessHandle, WindowsInternals::NT_PROCESS_INFORMATION_CLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength)"
  },
  {
    "label": "NtContinue()",
    "kind": "Method",
    "detail": "Function (\" C \" WindowsInternals::NTSTATUS)",
    "insertText": "NtContinue(CONTEXT* ThreadContext, BOOLEAN RaiseAlert)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (namespace WindowsInternals { Function<)",
    "insertText": "decltype(NtSuspendProcess)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtResumeProcess)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtReadVirtualMemory)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtWriteVirtualMemory)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtQuerySystemInformation)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtQueryInformationProcess)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Function<)",
    "insertText": "decltype(NtContinue)"
  }
]