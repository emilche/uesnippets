[
  {
    "label": "Vec4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec4"
  },
  {
    "label": "cassert()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_SIMD_3DNOW_H # define SQUISH_SIMD_3DNOW_H # include<mm3dnow . h> # include<)",
    "insertText": "cassert(( a ) | ( ( a ) << 2 ) | ( ( a ) << 4 ) | ( ( a ) << 6 ))"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (class Vec4 { public : typedef Vec4 const& Arg ;)",
    "insertText": "Vec4()"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(__m64 v0, __m64 v1 ) : m_v0( v0 ), m_v1( v1)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(Vec4 const& arg ) : m_v0( arg.m_v0 ), m_v1( arg.m_v1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Vec4 const& arg)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (m_v0 = arg . m_v0 ; m_v1 = arg . m_v1 ; return* this ; })",
    "insertText": "Vec4(float x, float y, float z, float w)"
  },
  {
    "label": "_mm_set_pi32()",
    "kind": "Method",
    "detail": "Function (m_v0 =)",
    "insertText": "_mm_set_pi32(*(int *)&x, *(int *)&y)"
  },
  {
    "label": "_mm_set_pi32()",
    "kind": "Method",
    "detail": "Function (m_v1 =)",
    "insertText": "_mm_set_pi32(*(int *)&z, *(int *)&w)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Arg v)"
  },
  {
    "label": "_m_pfadd()",
    "kind": "Method",
    "detail": "Function (m_v0 =)",
    "insertText": "_m_pfadd(m_v0, v.m_v0)"
  },
  {
    "label": "_m_pfadd()",
    "kind": "Method",
    "detail": "Function (m_v1 =)",
    "insertText": "_m_pfadd(m_v1, v.m_v1)"
  },
  {
    "label": "_m_pfsub()",
    "kind": "Method",
    "detail": "Function (m_v0 =)",
    "insertText": "_m_pfsub(m_v0, v.m_v0)"
  },
  {
    "label": "_m_pfsub()",
    "kind": "Method",
    "detail": "Function (m_v1 =)",
    "insertText": "_m_pfsub(m_v1, v.m_v1)"
  },
  {
    "label": "_m_pfmul()",
    "kind": "Method",
    "detail": "Function (m_v0 =)",
    "insertText": "_m_pfmul(m_v0, v.m_v0)"
  },
  {
    "label": "_m_pfmul()",
    "kind": "Method",
    "detail": "Function (m_v1 =)",
    "insertText": "_m_pfmul(m_v1, v.m_v1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "operator(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "MultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "MultiplyAdd(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "NegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "NegativeMultiplySubtract(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "Reciprocal()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Reciprocal(Vec4::Arg v)"
  },
  {
    "label": "_m_pfrcp()",
    "kind": "Method",
    "detail": "Function (__m64 x0 =)",
    "insertText": "_m_pfrcp(v.m_v0)"
  },
  {
    "label": "_m_pfrcp()",
    "kind": "Method",
    "detail": "Function (__m64 y1 =)",
    "insertText": "_m_pfrcp(v.m_v1)"
  },
  {
    "label": "_m_pfrcpit1()",
    "kind": "Method",
    "detail": "Function (__m64 x1 =)",
    "insertText": "_m_pfrcpit1(v.m_v0, x0)"
  },
  {
    "label": "_m_pfrcpit1()",
    "kind": "Method",
    "detail": "Function (__m64 y1 =)",
    "insertText": "_m_pfrcpit1(v.m_v1, y0)"
  },
  {
    "label": "_m_pfrcpit2()",
    "kind": "Method",
    "detail": "Function (__m64 x2 =)",
    "insertText": "_m_pfrcpit2(x1, x0)"
  },
  {
    "label": "_m_pfrcpit2()",
    "kind": "Method",
    "detail": "Function (__m64 y2 =)",
    "insertText": "_m_pfrcpit2(y1, y0)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Min(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Max(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Truncate(Vec4::Arg v)"
  },
  {
    "label": "_m_pf2id()",
    "kind": "Method",
    "detail": "Function (__m64 i0 =)",
    "insertText": "_m_pf2id(v.m_v0)"
  },
  {
    "label": "_m_pf2id()",
    "kind": "Method",
    "detail": "Function (__m64 i1 =)",
    "insertText": "_m_pf2id(v.m_v1)"
  },
  {
    "label": "_m_pi2fd()",
    "kind": "Method",
    "detail": "Function (__m64 f0 =)",
    "insertText": "_m_pi2fd(i0)"
  },
  {
    "label": "_m_pi2fd()",
    "kind": "Method",
    "detail": "Function (__m64 f1 =)",
    "insertText": "_m_pi2fd(i1)"
  },
  {
    "label": "CompareEqual()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "CompareEqual(Vec4::Arg left, Vec4::Arg right)"
  }
]