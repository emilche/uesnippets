[
  {
    "label": "FCompositeBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeBuffer"
  },
  {
    "label": "FCompositeBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / MemoryView . h \" # include \" Memory / SharedBuffer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / FunctionFwd . h \" # include<type_traits> class FCompositeBuffer { template<BufferType> using CanAppendBufferType = std::bool_constant<std::is_same_v<FCompositeBuffer,BufferType> | | std::is_same_v<FSharedBuffer,BufferType> | | TIsTArray_V<BufferType>> ; public : template<. . . BufferTypes,std::enable_if_t<std::conjunction_v<CanAppendBufferType<std::decay_t<BufferTypes>> . . .>>* = nullptr>)",
    "insertText": "FCompositeBuffer(BufferTypes&&... Buffers)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Reserve((GetBufferCount(Forward<BufferTypes>(Buffers)) + ...))"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "RemoveAll(&FSharedBuffer::IsNull)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetSegments()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TConstArrayView<FSharedBuffer>)",
    "insertText": "GetSegments()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "MakeOwned()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompositeBuffer)",
    "insertText": "MakeOwned()"
  },
  {
    "label": "ToShared()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "ToShared()"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompositeBuffer)",
    "insertText": "Mid(uint64 Offset, uint64 Size = MAX_uint64)"
  },
  {
    "label": "ViewOrCopyRange()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FMemoryView)",
    "insertText": "ViewOrCopyRange(uint64 Offset, uint64 Size, FUniqueBuffer& CopyBuffer)"
  },
  {
    "label": "ViewOrCopyRange()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FMemoryView)",
    "insertText": "ViewOrCopyRange(uint64 Offset, uint64 Size, FUniqueBuffer& CopyBuffer, TFunctionRef<FUniqueBuffer (uint64 Size)> Allocator)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(FMutableMemoryView Target, uint64 Offset = 0)"
  },
  {
    "label": "IterateRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateRange(uint64 Offset, uint64 Size, TFunctionRef<void (FMemoryView View)> Visitor)"
  },
  {
    "label": "IterateRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateRange(uint64 Offset, uint64 Size, TFunctionRef<void (FMemoryView View, const FSharedBuffer& ViewOuter)> Visitor)"
  },
  {
    "label": "EqualBytes()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "EqualBytes(const FCompositeBuffer& Other)"
  },
  {
    "label": "GetBufferCount()",
    "kind": "Method",
    "detail": "Function (const FCompositeBuffer Null ; private : int32)",
    "insertText": "GetBufferCount(const FCompositeBuffer& Buffer)"
  },
  {
    "label": "AppendBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendBuffers(const FCompositeBuffer& Buffer)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Append(Buffer.Segments)"
  },
  {
    "label": "AppendBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendBuffers(FCompositeBuffer&& Buffer)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Append(MoveTemp(Buffer.Segments))"
  },
  {
    "label": "GetBufferCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBufferCount(const FSharedBuffer& Buffer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Add(Buffer)"
  },
  {
    "label": "AppendBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendBuffers(FSharedBuffer&& Buffer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Add(MoveTemp(Buffer))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(std::declval<TArray<FSharedBuffer>>().Append(std::declval<BufferType>()))* = nullptr> static inline int32 GetBufferCount(BufferType&& Buffer)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(std::declval<TArray<FSharedBuffer>>().Append(std::declval<BufferType>()))* = nullptr> inline void AppendBuffers(BufferType&& Buffer)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Append(Forward<BufferType>(Buffer))"
  }
]