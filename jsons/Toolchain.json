[
  {
    "label": "CToolchain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CToolchain"
  },
  {
    "label": "CUTF8StringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUTF8StringView"
  },
  {
    "label": "SToolchainParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SToolchainParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SBuildResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildResults"
  },
  {
    "label": "needs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "needs"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "SOrderedPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SOrderedPackage"
  },
  {
    "label": "CreateToolchain()",
    "kind": "Method",
    "detail": "Function (TSRef<CToolchain>)",
    "insertText": "CreateToolchain(const SToolchainParams& Params)"
  },
  {
    "label": "Enum_HasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Enum_HasAnyFlags(E, ECompilerResult::CompileMask_Failure)"
  },
  {
    "label": "Enum_HasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Enum_HasAnyFlags(E, ECompilerResult::CompileMask_Aborted)"
  },
  {
    "label": "BuildProject()",
    "kind": "Method",
    "detail": "Function (SBuildResults)",
    "insertText": "BuildProject(const CSourceProject& SourceProject, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ParseSnippet()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "ParseSnippet(const uLang::TSRef<Verse::Vst::Snippet>& OutVst, const CUTF8StringView& TextSnippet, const SBuildContext& BuildContext)"
  },
  {
    "label": "CompileVst()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "CompileVst(const TSRef<Verse::Vst::Project>& Vst, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "SemanticAnalyzeVst()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "SemanticAnalyzeVst(TOptional<TSRef<CSemanticProgram>>& OutProgram, const TSRef<Verse::Vst::Project>& Vst, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ExtractLocalization()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "ExtractLocalization(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "IrGenerateProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "IrGenerateProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "AssembleProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "AssembleProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (ELinkerResult)",
    "insertText": "Link(const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "TakeLocalizationInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FSolLocalizationInfo>)",
    "insertText": "TakeLocalizationInfo()"
  },
  {
    "label": "TakeStringInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FSolLocalizationInfo>)",
    "insertText": "TakeStringInfo()"
  },
  {
    "label": "CreateToolchain()",
    "kind": "Method",
    "detail": "Function (TSRef<CToolchain>)",
    "insertText": "CreateToolchain(const SToolchainParams& Params)"
  }
]