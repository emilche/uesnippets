[
  {
    "label": "CToolchain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CToolchain"
  },
  {
    "label": "CUTF8StringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUTF8StringView"
  },
  {
    "label": "SToolchainParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SToolchainParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SBuildResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildResults"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "SOrderedPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SOrderedPackage"
  },
  {
    "label": "CreateToolchain()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointerArray . h \" # include \" uLang / Common / Misc / Optional . h \" # include \" uLang / Common / Misc / EnumUtils . h \" # include \" uLang / CompilerPasses / IParserPass . h \" # include \" uLang / CompilerPasses / IPostVstFilter . h \" # include \" uLang / CompilerPasses / ISemanticAnalyzerPass . h \" # include \" uLang / CompilerPasses / IPostSemanticAnalysisFilter . h \" # include \" uLang / CompilerPasses / IPostIrFilter . h \" # include \" uLang / CompilerPasses / IIRGeneratorPass . h \" # include \" uLang / CompilerPasses / IAssemblerPass . h \" # include \" uLang / CompilerPasses / ApiLayerInjections . h \" # include \" uLang / Semantics / SemanticProgram . h \" # include \" uLang / Syntax / VstNode . h \" # include \" uLang / SourceProject / SourceProject . h \" # include \" uLang / VerseLocalizationGen . h \" namespace uLang { class CToolchain ; class CUTF8StringView ; struct SToolchainParams { TOptional<TSRef<IParserPass>> Parser ; TSRefArray<IPostVstFilter> PostVstFilters ; TOptional<TSRef<ISemanticAnalyzerPass>> SemanticAnalyzer ; TSRefArray<IPostSemanticAnalysisFilter> PostSemanticAnalysisFilters ; TSRefArray<IPostIrFilter> PostIrFilters ; TOptional<TSRef<IIrGeneratorPass>> IrGenerator ; TOptional<TSRef<IAssemblerPass>> Assembler ; SToolchainInjections LayerInjections ; } ; TSRef<CToolchain>)",
    "insertText": "CreateToolchain(const SToolchainParams& Params)"
  },
  {
    "label": "Compile_NoOp()",
    "kind": "Method",
    "detail": "Function (enum class ECompilerResult : uint32_t {)",
    "insertText": "Compile_NoOp(0x00), Compile_RanSyntaxPass = (1<<0), Compile_RanSemanticPass = (1<<1), Compile_RanLocalizationPass = (1<<2), Compile_RanIrPass = (1<<3), Compile_RanCodeGenPass = (1<<4), Compile_SkippedByInjection = (1<<5), Compile_SkippedByEmptyPass = (1<<6), Compile_SyntaxError = (1<<7), Compile_SemanticError = (1<<8), Compile_IrError = (1<<9), Compile_LocalizationError = (1<<10), Compile_CodeGenError = (1<<11), CompileMask_Failure = (Compile_SyntaxError | Compile_SemanticError | Compile_IrError | Compile_LocalizationError | Compile_CodeGenError), CompileMask_Skipped = (Compile_SkippedByInjection | Compile_SkippedByEmptyPass), CompileMask_Aborted = (CompileMask_Failure | CompileMask_Skipped)"
  },
  {
    "label": "ULANG_ENUM_BIT_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ENUM_BIT_FLAGS(ECompilerResult, inline)"
  },
  {
    "label": "IsCompileFailure()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE bool)",
    "insertText": "IsCompileFailure(ECompilerResult E)"
  },
  {
    "label": "IsAbortedCompile()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsAbortedCompile(ECompilerResult E)"
  },
  {
    "label": "IsCompileIncomplete()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsCompileIncomplete(ECompilerResult E)"
  },
  {
    "label": "IsCompileComplete()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsCompileComplete(ECompilerResult E)"
  },
  {
    "label": "HasFailure()",
    "kind": "Method",
    "detail": "Function (} struct SBuildResults { bool)",
    "insertText": "HasFailure()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SBuildResults&)",
    "insertText": "operator(const SBuildResults& Other)"
  },
  {
    "label": "BuildProject()",
    "kind": "Method",
    "detail": "Function (SBuildStatistics _Statistics = { } ; bool _IOErrorsFound = false ; ECompilerResult _CompilerResult = ECompilerResult::Compile_NoOp ; ELinkerResult _LinkerResult = ELinkerResult::Link_Skipped ; } ; class CToolchain : public CSharedMix { public : SBuildResults)",
    "insertText": "BuildProject(const CSourceProject& SourceProject, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ParseSnippet()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "ParseSnippet(const uLang::TSRef<Verse::Vst::Snippet>& OutVst, const CUTF8StringView& TextSnippet, const SBuildContext& BuildContext)"
  },
  {
    "label": "CompileVst()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "CompileVst(const TSRef<Verse::Vst::Project>& Vst, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "SemanticAnalyzeVst()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "SemanticAnalyzeVst(TOptional<TSRef<CSemanticProgram>>& OutProgram, const TSRef<Verse::Vst::Project>& Vst, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ExtractLocalization()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "ExtractLocalization(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "IrGenerateProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "IrGenerateProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "AssembleProgram()",
    "kind": "Method",
    "detail": "Function (ECompilerResult)",
    "insertText": "AssembleProgram(const TSRef<CSemanticProgram>& Program, const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (ELinkerResult)",
    "insertText": "Link(const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "GetParser()",
    "kind": "Method",
    "detail": "Function (const TOptional<TSRef<IParserPass>>&)",
    "insertText": "GetParser()"
  },
  {
    "label": "TakeLocalizationInfo()",
    "kind": "Method",
    "detail": "Function (this -> _ProjectVst = NewProject ; } TArray<FSolLocalizationInfo>)",
    "insertText": "TakeLocalizationInfo()"
  },
  {
    "label": "TakeStringInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FSolLocalizationInfo>)",
    "insertText": "TakeStringInfo()"
  },
  {
    "label": "CToolchain()",
    "kind": "Method",
    "detail": "Function (TSRef<CToolchain> ;)",
    "insertText": "CToolchain(const SToolchainParams& Params)"
  },
  {
    "label": "BuildOrderedPackageList()",
    "kind": "Method",
    "detail": "Function (struct SOrderedPackage { const CSourcePackage* _Package = nullptr ; int32_t _DependencyDepth = - 1 ; } ; bool)",
    "insertText": "BuildOrderedPackageList(const CSourceProject& SourceProject, const SBuildContext& BuildContext, TArray<SOrderedPackage>& OutOrderedPackageList)"
  }
]