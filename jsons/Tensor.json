[
  {
    "label": "Tensor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tensor"
  },
  {
    "label": "isOfNormalIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isOfNormalIndex"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_H # define EIGEN_CXX11_TENSOR_TENSOR_H namespace Eigen { template<Scalar_,int NumIndices_,int Options_,IndexType_> class Tensor : public TensorBase<Tensor<Scalar_,NumIndices_,Options_,IndexType_>> { public : typedef Tensor<Scalar_,NumIndices_,Options_,IndexType_> Self ; typedef TensorBase<Tensor<Scalar_,NumIndices_,Options_,IndexType_>> Base ; typedef Eigen::internal::nested<Self>::type Nested ; typedef internal::traits<Self>::StorageKind StorageKind ; typedef internal::traits<Self>::Index Index ; typedef Scalar_ Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Base::CoeffReturnType CoeffReturnType ; enum { IsAligned =)",
    "insertText": "bool(EIGEN_MAX_ALIGN_BYTES>0) & !(Options_&DontAlign)"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (const int Options = Options_ ; const int NumIndices = NumIndices_ ; typedef DSizes<Index,NumIndices_> Dimensions ; protected : TensorStorage<Scalar,Dimensions,Options> m_storage ; # ifdef EIGEN_HAS_SFINAE template<CustomIndices> struct isOfNormalIndex { const bool is_array = internal::is_base_of<array<Index,NumIndices>,CustomIndices>::value ; const bool is_int = NumTraits<CustomIndices>::IsInteger ; const bool value = is_array | is_int ; } ; # endif public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rank()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} Self&)",
    "insertText": "base()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeff(array<Index, NumIndices>{{firstIndex, secondIndex, otherIndices...}})"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(checkIndexRange(indices))"
  },
  {
    "label": "EIGEN_SFINAE_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_SFINAE template<CustomIndices,)",
    "insertText": "EIGEN_SFINAE_ENABLE_IF(!(isOfNormalIndex<CustomIndices>::value) ) > EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar& coeff(CustomIndices& indices)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 0, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(index >= 0 && index < size())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> Scalar&)",
    "insertText": "coeffRef(Index firstIndex, Index secondIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeffRef(array<Index, NumIndices>{{firstIndex, secondIndex, otherIndices...}})"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "EIGEN_SFINAE_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_SFINAE template<CustomIndices,)",
    "insertText": "EIGEN_SFINAE_ENABLE_IF(!(isOfNormalIndex<CustomIndices>::value) ) > EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar& coeffRef(CustomIndices& indices)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> const Scalar&)",
    "insertText": "operator()(Index firstIndex, Index secondIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return this->operator()(array<Index, NumIndices>{{firstIndex, secondIndex, otherIndices...}})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # else EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3, Index i4)"
  },
  {
    "label": "EIGEN_SFINAE_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef EIGEN_HAS_SFINAE template<CustomIndices,)",
    "insertText": "EIGEN_SFINAE_ENABLE_IF(!(isOfNormalIndex<CustomIndices>::value) ) > EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar& operator()(CustomIndices& indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 1, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return operator()(array<Index, NumIndices>{{firstIndex, secondIndex, otherIndices...}})"
  },
  {
    "label": "EIGEN_SFINAE_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_SFINAE template<CustomIndices,)",
    "insertText": "EIGEN_SFINAE_ENABLE_IF(!(isOfNormalIndex<CustomIndices>::value) ) > EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar& operator()(CustomIndices& indices)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index >= 0 && index < size())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 1, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeffRef(index)"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor() : m_storage()"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor(const Self& other) : m_storage(other.m_storage)"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor(Index firstDimension, IndexTypes... otherDimensions) : m_storage(firstDimension, otherDimensions...)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherDimensions) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } #else EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit Tensor(Index dim1) : m_storage(dim1, array<Index, 1>(dim1))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor(Index dim1, Index dim2) : m_storage(dim1*dim2, array<Index, 2>(dim1, dim2))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(2 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor(Index dim1, Index dim2, Index dim3) : m_storage(dim1*dim2*dim3, array<Index, 3>(dim1, dim2, dim3))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(3 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor(Index dim1, Index dim2, Index dim3, Index dim4) : m_storage(dim1*dim2*dim3*dim4, array<Index, 4>(dim1, dim2, dim3, dim4))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(4 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor(Index dim1, Index dim2, Index dim3, Index dim4, Index dim5) : m_storage(dim1*dim2*dim3*dim4*dim5, array<Index, 5>(dim1, dim2, dim3, dim4, dim5))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(5 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) } #endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit Tensor(const array<Index, NumIndices>& dimensions) : m_storage(internal::array_prod(dimensions), dimensions)"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED } template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor(const TensorBase<OtherDerived, ReadOnlyAccessors>& other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<Tensor,const OtherDerived> Assign ; Assign)",
    "insertText": "assign(*this, other.derived())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(TensorEvaluator<const Assign, DefaultDevice>(assign, DefaultDevice()).dimensions())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::TensorExecutor<const Assign,DefaultDevice)",
    "insertText": "run(assign, DefaultDevice())"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor(const TensorBase<OtherDerived, WriteAccessors>& other)"
  },
  {
    "label": "Tensor()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_RVALUE_REFERENCES EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Tensor(Self&& other) : m_storage(std::move(other.m_storage))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Tensor&)",
    "insertText": "operator(Self&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (m_storage =)",
    "insertText": "move(other.m_storage)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<Tensor,const Tensor> Assign ; Assign)",
    "insertText": "assign(*this, other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherDimensions) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) resize(array<Index, NumIndices>{{firstDimension, otherDimensions...}})"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(const array<Index, NumIndices>& dimensions)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (int i ; Index size =)",
    "insertText": "Index(1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::check_rows_cols_for_overflow<Dynamic)",
    "insertText": "run(size, dimensions[i])"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_storage .)",
    "insertText": "resize(size, dimensions)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(const DSizes<Index, NumIndices>& dimensions)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array<Index,NumIndices> dims ;)",
    "insertText": "for(int i = 0; i < NumIndices; ++i)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (dims [ i ] = dimensions [ i ] ; })",
    "insertText": "resize(dims)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "resize()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_INDEX_LIST template<FirstType,. . . OtherTypes> EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(const Eigen::IndexList<FirstType, OtherTypes...>& dimensions)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (dims [ i ] = static_cast<)",
    "insertText": "Index(dimensions[i])"
  },
  {
    "label": "EIGEN_SFINAE_ENABLE_IF()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef EIGEN_HAS_SFINAE template<CustomDimension,)",
    "insertText": "EIGEN_SFINAE_ENABLE_IF(!(isOfNormalIndex<CustomDimension>::value) ) > EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(CustomDimension& dimensions)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(internal::customIndices2Array<Index,NumIndices>(dimensions))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef EIGEN_EMULATE_CXX11_META_H template<std::ptrdiff_t . . . Indices> EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(const Sizes<Indices...>& dimensions)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} # else template<std::size_t V1,std::size_t V2,std::size_t V3,std::size_t V4,std::size_t V5> EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(const Sizes<V1, V2, V3, V4, V5>& dimensions)"
  },
  {
    "label": "checkIndexRange()",
    "kind": "Method",
    "detail": "Function (} # endif protected : bool)",
    "insertText": "checkIndexRange(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "greater_equal_zero_op()",
    "kind": "Method",
    "detail": "Function (using internal::array_apply_and_reduce ; using internal::array_zip_and_reduce ; using internal::greater_equal_zero_op ; using internal::logical_and_op ; using internal::lesser_op ; return array_apply_and_reduce<logical_and_op,)",
    "insertText": "greater_equal_zero_op(indices) && array_zip_and_reduce<logical_and_op, lesser_op>(indices, m_storage.dimensions())"
  },
  {
    "label": "linearizedIndex()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "linearizedIndex(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} else { return m_storage .)",
    "insertText": "dimensions().IndexOfColMajor(indices)"
  }
]