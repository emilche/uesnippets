[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_CORD_TEST_HELPERS_H_ # define ABSL_STRINGS_CORD_TEST_HELPERS_H_ # include<cstdint> # include<iostream> # include<string> # include \" absl / base / config . h \" # include \" absl / strings / cord . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class TestCordSize { kEmpty = 0,kInlined = cord_internal::kMaxInline / 2 + 1,kStringSso1 = 1 5,kStringSso2 = 2 2,kSmall = cord_internal::kMaxBytesToCopy / 2 + 1,kMedium = cord_internal::kMaxFlatLength / 2 + 1,kLarge = cord_internal::kMaxFlatLength* 4 } ; absl::string_view)",
    "insertText": "ToString(TestCordSize size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& stream, TestCordSize size)"
  },
  {
    "label": "MakeFragmentedCord()",
    "kind": "Method",
    "detail": "Function (} template<Container> Cord)",
    "insertText": "MakeFragmentedCord(const Container& c)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Cord result ;)",
    "insertText": "for(const auto& s : c)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (auto* external = new)",
    "insertText": "string(s)"
  },
  {
    "label": "MakeCordFromExternal()",
    "kind": "Method",
    "detail": "Function (Cord tmp =)",
    "insertText": "MakeCordFromExternal(*external, [external](absl::string_view) { delete external; })"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "Prepend(result)"
  },
  {
    "label": "MakeFragmentedCord()",
    "kind": "Method",
    "detail": "Function (result = tmp ; } return result ; } Cord)",
    "insertText": "MakeFragmentedCord(std::initializer_list<absl::string_view> list)"
  }
]