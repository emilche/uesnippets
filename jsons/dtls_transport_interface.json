[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "DtlsTransportObserverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtlsTransportObserverInterface"
  },
  {
    "label": "DtlsTransportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtlsTransportInterface"
  },
  {
    "label": "DtlsTransportInformation()",
    "kind": "Method",
    "detail": "Function (# ifndef API_DTLS_TRANSPORT_INTERFACE_H_ # define API_DTLS_TRANSPORT_INTERFACE_H_ # include<memory> # include<utility> # include \" absl / types / optional . h \" # include \" api / ice_transport_interface . h \" # include \" api / rtc_error . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class DtlsTransportState { kNew,kConnecting,kConnected,kClosed,kFailed,kNumValues } ; enum class DtlsTransportTlsRole { kServer,kClient } ; class RTC_EXPORT DtlsTransportInformation { public :)",
    "insertText": "DtlsTransportInformation()"
  },
  {
    "label": "DtlsTransportInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtlsTransportInformation(DtlsTransportState state)"
  },
  {
    "label": "DtlsTransportInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtlsTransportInformation(DtlsTransportState state, absl::optional<DtlsTransportTlsRole> role, absl::optional<int> tls_version, absl::optional<int> ssl_cipher_suite, absl::optional<int> srtp_cipher_suite, std::unique_ptr<rtc::SSLCertChain> remote_ssl_certificates)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use version with role parameter\") DtlsTransportInformation( DtlsTransportState state, absl::optional<int> tls_version, absl::optional<int> ssl_cipher_suite, absl::optional<int> srtp_cipher_suite, std::unique_ptr<rtc::SSLCertChain> remote_ssl_certificates)"
  },
  {
    "label": "DtlsTransportInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtlsTransportInformation(const DtlsTransportInformation& c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DtlsTransportInformation&)",
    "insertText": "operator(const DtlsTransportInformation& c)"
  },
  {
    "label": "DtlsTransportInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtlsTransportInformation(DtlsTransportInformation&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DtlsTransportInformation&)",
    "insertText": "operator(DtlsTransportInformation&& other)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (DtlsTransportState)",
    "insertText": "state()"
  },
  {
    "label": "OnStateChange()",
    "kind": "Method",
    "detail": "Function (} private : DtlsTransportState state_ ; absl::optional<DtlsTransportTlsRole> role_ ; absl::optional<int> tls_version_ ; absl::optional<int> ssl_cipher_suite_ ; absl::optional<int> srtp_cipher_suite_ ; std::unique_ptr<rtc::SSLCertChain> remote_ssl_certificates_ ; } ; class DtlsTransportObserverInterface { public : void)",
    "insertText": "OnStateChange(DtlsTransportInformation info)"
  },
  {
    "label": "OnError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnError(RTCError error)"
  },
  {
    "label": "DtlsTransportObserverInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "DtlsTransportObserverInterface()"
  },
  {
    "label": "ice_transport()",
    "kind": "Method",
    "detail": "Function (} ; class DtlsTransportInterface : public rtc::RefCountInterface { public : rtc::scoped_refptr<IceTransportInterface>)",
    "insertText": "ice_transport()"
  },
  {
    "label": "Information()",
    "kind": "Method",
    "detail": "Function (DtlsTransportInformation)",
    "insertText": "Information()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObserver(DtlsTransportObserverInterface* observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver()"
  }
]