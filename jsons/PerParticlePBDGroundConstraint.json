[
  {
    "label": "FPerParticlePBDGroundConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticlePBDGroundConstraint"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticlePBDGroundConstraint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PerParticleRule . h \" namespace Chaos { class FPerParticlePBDGroundConstraint : public FPerParticleRule { public :)",
    "insertText": "FPerParticlePBDGroundConstraint(const FReal Height = 0) : MHeight(Height)"
  },
  {
    "label": "FPerParticlePBDGroundConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPerParticlePBDGroundConstraint()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(Index)"
  }
]