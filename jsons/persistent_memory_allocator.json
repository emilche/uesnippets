[
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "MemoryMappedFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryMappedFile"
  },
  {
    "label": "resides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "resides"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "MyPersistentObjectType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyPersistentObjectType"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MemoryState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryState"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryInfo"
  },
  {
    "label": "MemoryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryType"
  },
  {
    "label": "Memory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Memory"
  },
  {
    "label": "SharedMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedMetadata"
  },
  {
    "label": "BlockHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockHeader"
  },
  {
    "label": "PersistentMemoryAllocatorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentMemoryAllocatorTest"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "instead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instead"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Iterator(const PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(Reference starting_after)"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetLast()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetNext(uint32_t* type_return)"
  },
  {
    "label": "GetNextOfType()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetNextOfType(uint32_t type_match)"
  },
  {
    "label": "GetNextOfType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNextOfType(T::kPersistentTypeId)"
  },
  {
    "label": "IsMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemoryAcceptable(const void* data, size_t size,\n                                 size_t page_size, bool readonly)"
  },
  {
    "label": "SetMemoryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMemoryState(uint8_t memory_state)"
  },
  {
    "label": "CreateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackingHistograms(base::StringPiece name)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool sync)"
  },
  {
    "label": "ChangeType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChangeType(Reference ref,\n                  uint32_t to_type_id,\n                  uint32_t from_type_id,\n                  bool clear)"
  },
  {
    "label": "MakeIterable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeIterable(Reference ref)"
  },
  {
    "label": "UpdateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackingHistograms()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "Allocate(size_t size, uint32_t type_id)"
  },
  {
    "label": "GetAsReference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAsReference(obj, T::kPersistentTypeId)"
  },
  {
    "label": "FlushPartial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPartial(size_t length, bool sync)"
  },
  {
    "label": "AllocateImpl()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "AllocateImpl(size_t size, uint32_t type_id)"
  },
  {
    "label": "LocalPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LocalPersistentMemoryAllocator(size_t size, uint64_t id,\n                                 base::StringPiece name)"
  },
  {
    "label": "AllocateLocalMemory()",
    "kind": "Method",
    "detail": "Function (Memory)",
    "insertText": "AllocateLocalMemory(size_t size)"
  },
  {
    "label": "DeallocateLocalMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateLocalMemory(void* memory, size_t size, MemoryType type)"
  },
  {
    "label": "WritableSharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WritableSharedPersistentMemoryAllocator(\n      base::WritableSharedMemoryMapping memory,\n      uint64_t id,\n      base::StringPiece name)"
  },
  {
    "label": "IsSharedMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedMemoryAcceptable(\n      const base::WritableSharedMemoryMapping& memory)"
  },
  {
    "label": "ReadOnlySharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ReadOnlySharedPersistentMemoryAllocator(\n      base::ReadOnlySharedMemoryMapping memory,\n      uint64_t id,\n      base::StringPiece name)"
  },
  {
    "label": "IsSharedMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedMemoryAcceptable(\n      const base::ReadOnlySharedMemoryMapping& memory)"
  },
  {
    "label": "IsFileAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileAcceptable(const MemoryMappedFile& file, bool read_only)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache()"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (to)",
    "insertText": "zero(0)"
  }
]