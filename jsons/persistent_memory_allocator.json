[
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "MemoryMappedFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryMappedFile"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MemoryState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryState"
  },
  {
    "label": "MemoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryInfo"
  },
  {
    "label": "MemoryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemoryType"
  },
  {
    "label": "Memory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Memory"
  },
  {
    "label": "SharedMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedMetadata"
  },
  {
    "label": "BlockHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockHeader"
  },
  {
    "label": "PersistentMemoryAllocatorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentMemoryAllocatorTest"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_PERSISTENT_MEMORY_ALLOCATOR_H_ # define BASE_METRICS_PERSISTENT_MEMORY_ALLOCATOR_H_ # include<stdint . h> # include<atomic> # include<memory> # include<type_traits> # include \" base / atomicops . h \" # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / files / file_path . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" base / strings / string_piece . h \" # include \" build / build_config . h \" namespace base { class HistogramBase ; class MemoryMappedFile ; class BASE_EXPORT PersistentMemoryAllocator { public : typedef uint32_t Reference ; enum MemoryState : uint8_t { MEMORY_UNINITIALIZED = 0,MEMORY_INITIALIZED = 1,MEMORY_DELETED = 2,MEMORY_USER_DEFINED = 1 0 0,} ; class BASE_EXPORT Iterator { public :)",
    "insertText": "Iterator(const PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(const PersistentMemoryAllocator* allocator, Reference starting_after)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator&)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Iterator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(Reference starting_after)"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetLast()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetNext(uint32_t* type_return)"
  },
  {
    "label": "GetNextOfType()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetNextOfType(uint32_t type_match)"
  },
  {
    "label": "GetNextOfType()",
    "kind": "Method",
    "detail": "Function (template<T> Reference)",
    "insertText": "GetNextOfType()"
  },
  {
    "label": "GetNextOfObject()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetNextOfObject()"
  },
  {
    "label": "GetAsObject()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetAsObject(Reference ref)"
  },
  {
    "label": "GetAsArray()",
    "kind": "Method",
    "detail": "Function (} template<T> const T*)",
    "insertText": "GetAsArray(Reference ref, uint32_t type_id, size_t count)"
  },
  {
    "label": "GetAsReference()",
    "kind": "Method",
    "detail": "Function (} Reference)",
    "insertText": "GetAsReference(const void* memory, uint32_t type_id)"
  },
  {
    "label": "GetAsReference()",
    "kind": "Method",
    "detail": "Function (} template<T> Reference)",
    "insertText": "GetAsReference(const T* obj)"
  },
  {
    "label": "PersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (} private : raw_ptr<const PersistentMemoryAllocator> allocator_ ; std::atomic<Reference> last_record_ ; std::atomic<uint32_t> record_count_ ; } ; struct MemoryInfo { size_t total ; size_t free ; } ; enum : Reference { kReferenceNull = 0,} ; enum : uint32_t { kTypeIdAny = 0 x00000000,kTypeIdTransitioning = 0 xFFFFFFFF,} ; enum : size_t { kSizeAny = 1 } ; const base::FilePath::CharType kFileExtension [ ] ;)",
    "insertText": "PersistentMemoryAllocator(void* base, size_t size, size_t page_size, uint64_t id, base::StringPiece name, bool readonly)"
  },
  {
    "label": "PersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentMemoryAllocator(const PersistentMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator&)",
    "insertText": "operator(const PersistentMemoryAllocator&)"
  },
  {
    "label": "PersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentMemoryAllocator()"
  },
  {
    "label": "IsMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemoryAcceptable(const void* data, size_t size, size_t page_size, bool readonly)"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Id()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Name()"
  },
  {
    "label": "IsReadonly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadonly()"
  },
  {
    "label": "GetMemoryState()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetMemoryState()"
  },
  {
    "label": "CreateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackingHistograms(base::StringPiece name)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool sync)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "data()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length()"
  },
  {
    "label": "GetAllocSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetAllocSize(Reference ref)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetType(Reference ref)"
  },
  {
    "label": "ChangeType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChangeType(Reference ref, uint32_t to_type_id, uint32_t from_type_id, bool clear)"
  },
  {
    "label": "MakeIterable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeIterable(Reference ref)"
  },
  {
    "label": "GetMemoryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMemoryInfo(MemoryInfo* meminfo)"
  },
  {
    "label": "SetCorrupt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCorrupt()"
  },
  {
    "label": "IsCorrupt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCorrupt()"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "UpdateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackingHistograms()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "Allocate(size_t size, uint32_t type_id)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "New(size_t size)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (Reference ref =)",
    "insertText": "Allocate(size, T::kPersistentTypeId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* mem = const_cast<)",
    "insertText": "void(GetBlockData(ref, T::kPersistentTypeId, size))"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(0U, reinterpret_cast<uintptr_t>(mem) & (alignof(T) - 1))"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "New()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "New(Reference ref, uint32_t from_type_id, bool clear)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(sizeof(T), GetAllocSize(ref))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* mem = const_cast<)",
    "insertText": "void(GetBlockData(ref, 0, sizeof(T)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (T* obj =)",
    "insertText": "new(mem) T()"
  },
  {
    "label": "ChangeType()",
    "kind": "Method",
    "detail": "Function (bool success =)",
    "insertText": "ChangeType(ref, T::kPersistentTypeId, kTypeIdTransitioning, false)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(success)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Reference ref = GetAsReference<)",
    "insertText": "T(obj)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (obj -> ~)",
    "insertText": "T()"
  },
  {
    "label": "ChangeType()",
    "kind": "Method",
    "detail": "Function (bool success =)",
    "insertText": "ChangeType(ref, new_type, kTypeIdTransitioning, false)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Delete(T* obj)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Delete<)",
    "insertText": "T(obj, 0)"
  },
  {
    "label": "MakeIterable()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "MakeIterable(const T* obj)"
  },
  {
    "label": "MakeIterable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeIterable(GetAsReference<T>(obj))"
  },
  {
    "label": "Memory()",
    "kind": "Method",
    "detail": "Function (} protected : enum MemoryType { MEM_EXTERNAL,MEM_MALLOC,MEM_VIRTUAL,MEM_SHARED,MEM_FILE,} ; struct Memory {)",
    "insertText": "Memory(void* b, MemoryType t) : base(b), type(t)"
  },
  {
    "label": "PersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (} raw_ptr<void> base ; MemoryType type ; } ;)",
    "insertText": "PersistentMemoryAllocator(Memory memory, size_t size, size_t page_size, uint64_t id, base::StringPiece name, bool readonly)"
  },
  {
    "label": "FlushPartial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPartial(size_t length, bool sync)"
  },
  {
    "label": "shared_meta()",
    "kind": "Method",
    "detail": "Function (volatile char* const mem_base_ ; const MemoryType mem_type_ ; const uint32_t mem_size_ ; const uint32_t mem_page_ ; const size_t vm_page_size_ ; private : struct SharedMetadata ; struct BlockHeader ; size_t kAllocAlignment = 8 ; const Reference kReferenceQueue ; const SharedMetadata*)",
    "insertText": "shared_meta()"
  },
  {
    "label": "AllocateImpl()",
    "kind": "Method",
    "detail": "Function (} Reference)",
    "insertText": "AllocateImpl(size_t size, uint32_t type_id)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const volatile BlockHeader*)",
    "insertText": "GetBlock(Reference ref, uint32_t type_id, size_t size, bool queue_ok, bool free_ok)"
  },
  {
    "label": "GetBlockData()",
    "kind": "Method",
    "detail": "Function (} const volatile void*)",
    "insertText": "GetBlockData(Reference ref, uint32_t type_id, size_t size)"
  },
  {
    "label": "RecordError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordError(int error)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (const bool readonly_ ; std::atomic<bool> corrupt_ ; raw_ptr<HistogramBase> allocs_histogram_ ; raw_ptr<HistogramBase> used_histogram_ ; raw_ptr<HistogramBase> errors_histogram_ ; class PersistentMemoryAllocatorTest ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PersistentMemoryAllocatorTest, AllocateAndIterate)"
  },
  {
    "label": "LocalPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT LocalPersistentMemoryAllocator : public PersistentMemoryAllocator { public :)",
    "insertText": "LocalPersistentMemoryAllocator(size_t size, uint64_t id, base::StringPiece name)"
  },
  {
    "label": "LocalPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalPersistentMemoryAllocator(const LocalPersistentMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalPersistentMemoryAllocator&)",
    "insertText": "operator(const LocalPersistentMemoryAllocator&)"
  },
  {
    "label": "LocalPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LocalPersistentMemoryAllocator()"
  },
  {
    "label": "AllocateLocalMemory()",
    "kind": "Method",
    "detail": "Function (private : Memory)",
    "insertText": "AllocateLocalMemory(size_t size)"
  },
  {
    "label": "DeallocateLocalMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateLocalMemory(void* memory, size_t size, MemoryType type)"
  },
  {
    "label": "WritableSharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT WritableSharedPersistentMemoryAllocator : public PersistentMemoryAllocator { public :)",
    "insertText": "WritableSharedPersistentMemoryAllocator(base::WritableSharedMemoryMapping memory, uint64_t id, base::StringPiece name)"
  },
  {
    "label": "WritableSharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritableSharedPersistentMemoryAllocator(const WritableSharedPersistentMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WritableSharedPersistentMemoryAllocator&)",
    "insertText": "operator(const WritableSharedPersistentMemoryAllocator&)"
  },
  {
    "label": "WritableSharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WritableSharedPersistentMemoryAllocator()"
  },
  {
    "label": "IsSharedMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedMemoryAcceptable(const base::WritableSharedMemoryMapping& memory)"
  },
  {
    "label": "ReadOnlySharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (private : base::WritableSharedMemoryMapping shared_memory_ ; } ; class BASE_EXPORT ReadOnlySharedPersistentMemoryAllocator : public PersistentMemoryAllocator { public :)",
    "insertText": "ReadOnlySharedPersistentMemoryAllocator(base::ReadOnlySharedMemoryMapping memory, uint64_t id, base::StringPiece name)"
  },
  {
    "label": "ReadOnlySharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadOnlySharedPersistentMemoryAllocator(const ReadOnlySharedPersistentMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadOnlySharedPersistentMemoryAllocator&)",
    "insertText": "operator(const ReadOnlySharedPersistentMemoryAllocator&)"
  },
  {
    "label": "ReadOnlySharedPersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ReadOnlySharedPersistentMemoryAllocator()"
  },
  {
    "label": "IsSharedMemoryAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedMemoryAcceptable(const base::ReadOnlySharedMemoryMapping& memory)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : base::ReadOnlySharedMemoryMapping shared_memory_ ; } ; # if !)",
    "insertText": "BUILDFLAG(IS_NACL)"
  },
  {
    "label": "FilePersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FilePersistentMemoryAllocator(std::unique_ptr<MemoryMappedFile> file, size_t max_size, uint64_t id, base::StringPiece name, bool read_only)"
  },
  {
    "label": "FilePersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePersistentMemoryAllocator(const FilePersistentMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilePersistentMemoryAllocator&)",
    "insertText": "operator(const FilePersistentMemoryAllocator&)"
  },
  {
    "label": "FilePersistentMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FilePersistentMemoryAllocator()"
  },
  {
    "label": "IsFileAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileAcceptable(const MemoryMappedFile& file, bool read_only)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache()"
  },
  {
    "label": "DelayedPersistentAllocation()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<MemoryMappedFile> mapped_file_ ; } ; # endif class BASE_EXPORT DelayedPersistentAllocation { public : using Reference = PersistentMemoryAllocator::Reference ;)",
    "insertText": "DelayedPersistentAllocation(PersistentMemoryAllocator* allocator, std::atomic<Reference>* ref, uint32_t type, size_t size, bool make_iterable)"
  },
  {
    "label": "DelayedPersistentAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedPersistentAllocation(PersistentMemoryAllocator* allocator, std::atomic<Reference>* ref, uint32_t type, size_t size, size_t offset, bool make_iterable)"
  },
  {
    "label": "DelayedPersistentAllocation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelayedPersistentAllocation()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Get()"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "reference()"
  }
]