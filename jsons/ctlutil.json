[
  {
    "label": "CBaseDispatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseDispatch"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "COARefTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COARefTime"
  },
  {
    "label": "CPosPassThru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPosPassThru"
  },
  {
    "label": "CRendererPosPassThru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CRendererPosPassThru"
  },
  {
    "label": "CCmdQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCmdQueue"
  },
  {
    "label": "CDispParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDispParams"
  },
  {
    "label": "CDeferredCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDeferredCommand"
  },
  {
    "label": "OATRUE()",
    "kind": "Method",
    "detail": "Function (# ifndef __CTLUTIL__ # define __CTLUTIL__ # define)",
    "insertText": "OATRUE(-1) #define OAFALSE (0)"
  },
  {
    "label": "CBaseDispatch()",
    "kind": "Method",
    "detail": "Function (ITypeInfo* m_pti ; public :)",
    "insertText": "CBaseDispatch() : m_pti(NULL)"
  },
  {
    "label": "CBaseDispatch()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CBaseDispatch()"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(REFIID riid, UINT itinfo, LCID lcid, __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "GetIDsOfNames()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetIDsOfNames(REFIID riid, __in_ecount(cNames) LPOLESTR * rgszNames, UINT cNames, LCID lcid, __out_ecount(cNames) DISPID * rgdispid)"
  },
  {
    "label": "CMediaControl()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CMediaControl : public IMediaControl,public CUnknown { CBaseDispatch m_basedisp ; public :)",
    "insertText": "CMediaControl(const TCHAR *, LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(UINT itinfo, LCID lcid, __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(DISPID dispidMember, REFIID riid, LCID lcid, WORD wFlags, __in DISPPARAMS * pdispparams, __out_opt VARIANT * pvarResult, __out_opt EXCEPINFO * pexcepinfo, __out_opt UINT * puArgErr)"
  },
  {
    "label": "CMediaEvent()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CMediaEvent : public IMediaEventEx,public CUnknown { CBaseDispatch m_basedisp ; public :)",
    "insertText": "CMediaEvent(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "CMediaPosition()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CMediaPosition : public IMediaPosition,public CUnknown { CBaseDispatch m_basedisp ; public :)",
    "insertText": "CMediaPosition(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "CMediaPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CMediaPosition(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT *phr)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (} ; class COARefTime : public CRefTime { public :)",
    "insertText": "COARefTime()"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "COARefTime(CRefTime t) : CRefTime(t)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "COARefTime(REFERENCE_TIME t) : CRefTime(t)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "COARefTime(double d)"
  },
  {
    "label": "m_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_time(LONGLONG) (d * 10000000)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} ; operator)",
    "insertText": "double()"
  },
  {
    "label": "REFERENCE_TIME()",
    "kind": "Method",
    "detail": "Function (} ; operator)",
    "insertText": "REFERENCE_TIME()"
  },
  {
    "label": "m_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_time(LONGLONG) (rd * 10000000)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_time = rt ; return* this ; } BOOL)",
    "insertText": "operator(const COARefTime& rt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; COARefTime)",
    "insertText": "operator(LONG l)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (} ; private :)",
    "insertText": "COARefTime(LONG)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "operator(LONG)"
  },
  {
    "label": "GetPeer()",
    "kind": "Method",
    "detail": "Function (} ; class CPosPassThru : public IMediaSeeking,public CMediaPosition { IPin* m_pPin ; HRESULT)",
    "insertText": "GetPeer(__deref_out IMediaPosition **ppMP)"
  },
  {
    "label": "GetPeerSeeking()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPeerSeeking(__deref_out IMediaSeeking **ppMS)"
  },
  {
    "label": "CPosPassThru()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CPosPassThru(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, IPin *)"
  },
  {
    "label": "ForceRefresh()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN HRESULT)",
    "insertText": "ForceRefresh()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCapabilities(__out DWORD * pCapabilities)"
  },
  {
    "label": "CheckCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CheckCapabilities(__inout DWORD * pCapabilities)"
  },
  {
    "label": "SetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "GetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTimeFormat(__out GUID *pFormat)"
  },
  {
    "label": "IsUsingTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsUsingTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsFormatSupported(const GUID * pFormat)"
  },
  {
    "label": "QueryPreferredFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryPreferredFormat(__out GUID *pFormat)"
  },
  {
    "label": "ConvertTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConvertTimeFormat(__out LONGLONG * pTarget, __in_opt const GUID * pTargetFormat, LONGLONG Source, __in_opt const GUID * pSourceFormat)"
  },
  {
    "label": "SetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetPositions(__inout_opt LONGLONG * pCurrent, DWORD CurrentFlags , __inout_opt LONGLONG * pStop, DWORD StopFlags)"
  },
  {
    "label": "GetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPositions(__out_opt LONGLONG * pCurrent, __out_opt LONGLONG * pStop)"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCurrentPosition(__out LONGLONG * pCurrent)"
  },
  {
    "label": "GetStopPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetStopPosition(__out LONGLONG * pStop)"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetRate(double dRate)"
  },
  {
    "label": "GetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetRate(__out double * pdRate)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetDuration(__out LONGLONG *pDuration)"
  },
  {
    "label": "GetAvailable()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAvailable(__out_opt LONGLONG *pEarliest, __out_opt LONGLONG *pLatest)"
  },
  {
    "label": "GetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPreroll(__out LONGLONG *pllPreroll)"
  },
  {
    "label": "get_Duration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Duration(__out REFTIME * plength)"
  },
  {
    "label": "put_CurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_CurrentPosition(REFTIME llTime)"
  },
  {
    "label": "get_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_StopTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_StopTime(REFTIME llTime)"
  },
  {
    "label": "get_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_PrerollTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_PrerollTime(REFTIME llTime)"
  },
  {
    "label": "get_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Rate(__out double * pdRate)"
  },
  {
    "label": "put_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_Rate(double dRate)"
  },
  {
    "label": "get_CurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_CurrentPosition(__out REFTIME * pllTime)"
  },
  {
    "label": "CanSeekForward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekForward(__out LONG *pCanSeekForward)"
  },
  {
    "label": "CanSeekBackward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekBackward(__out LONG *pCanSeekBackward)"
  },
  {
    "label": "GetSeekingLongLong()",
    "kind": "Method",
    "detail": "Function (private : HRESULT)",
    "insertText": "GetSeekingLongLong(HRESULT (__stdcall IMediaSeeking::*pMethod)( LONGLONG * ), __out LONGLONG * pll)"
  },
  {
    "label": "CRendererPosPassThru()",
    "kind": "Method",
    "detail": "Function (} ; class CRendererPosPassThru : public CPosPassThru { CCritSec m_PositionLock ; LONGLONG m_StartMedia ; LONGLONG m_EndMedia ; BOOL m_bReset ; public :)",
    "insertText": "CRendererPosPassThru(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, IPin *)"
  },
  {
    "label": "RegisterMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterMediaTime(IMediaSample *pMediaSample)"
  },
  {
    "label": "RegisterMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterMediaTime(LONGLONG StartTime,LONGLONG EndTime)"
  },
  {
    "label": "GetMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaTime(__out LONGLONG *pStartTime,__out_opt LONGLONG *pEndTime)"
  },
  {
    "label": "ResetMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ResetMediaTime()"
  },
  {
    "label": "EOS()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EOS()"
  },
  {
    "label": "CreatePosPassThru()",
    "kind": "Method",
    "detail": "Function (} ; STDAPI)",
    "insertText": "CreatePosPassThru(__in_opt LPUNKNOWN pAgg, BOOL bRenderer, IPin *pPin, __deref_out IUnknown **ppPassThru)"
  },
  {
    "label": "CBasicAudio()",
    "kind": "Method",
    "detail": "Function (class AM_NOVTABLE CBasicAudio : public IBasicAudio,public CUnknown { CBaseDispatch m_basedisp ; public :)",
    "insertText": "CBasicAudio(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "CBaseBasicVideo()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CBaseBasicVideo : public IBasicVideo2,public CUnknown { CBaseDispatch m_basedisp ; public :)",
    "insertText": "CBaseBasicVideo(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "GetPreferredAspectRatio()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPreferredAspectRatio(__out long *plAspectX, __out long *plAspectY)"
  },
  {
    "label": "CSourcePosition()",
    "kind": "Method",
    "detail": "Function (} ; class AM_NOVTABLE CSourcePosition : public CMediaPosition { public :)",
    "insertText": "CSourcePosition(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, __in CCritSec *)"
  },
  {
    "label": "ChangeStop()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeStop()"
  },
  {
    "label": "ChangeRate()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeRate()"
  },
  {
    "label": "GetStopPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetStopPosition(__out LONGLONG *pStop)"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCurrentPosition(__out LONGLONG *pCurrent)"
  },
  {
    "label": "GetAvailable()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAvailable(__out_opt LONGLONG * pEarliest, __out_opt LONGLONG * pLatest)"
  },
  {
    "label": "GetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPreroll(__out LONGLONG *pPreroll)"
  },
  {
    "label": "CSourceSeeking()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "CSourceSeeking(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, __in CCritSec *)"
  },
  {
    "label": "ChangeStart()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ChangeStart()"
  },
  {
    "label": "CDispParams()",
    "kind": "Method",
    "detail": "Function (CRefTime m_rtDuration ; CRefTime m_rtStart ; CRefTime m_rtStop ; double m_dRateSeeking ; DWORD m_dwSeekingCaps ; CCritSec* m_pLock ; } ; class CCmdQueue ; class CDispParams : public DISPPARAMS { public :)",
    "insertText": "CDispParams(UINT nArgs, __in_ecount(nArgs) VARIANT* pArgs, __inout_opt HRESULT *phr = NULL)"
  },
  {
    "label": "CDispParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CDispParams()"
  },
  {
    "label": "CDeferredCommand()",
    "kind": "Method",
    "detail": "Function (} ; class CDeferredCommand : public CUnknown,public IDeferredCommand { public :)",
    "insertText": "CDeferredCommand(__inout CCmdQueue * pQ, __in_opt LPUNKNOWN pUnk, __inout HRESULT * phr, __in LPUNKNOWN pUnkExecutor, REFTIME time, __in GUID* iid, long dispidMethod, short wFlags, long cArgs, __in_ecount(cArgs) VARIANT* pDispParams, __out VARIANT* pvarResult, __out short* puArgErr, BOOL bStream)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __out void **ppv)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Cancel()"
  },
  {
    "label": "Confidence()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Confidence(__out LONG* pConfidence)"
  },
  {
    "label": "Postpone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Postpone(REFTIME newtime)"
  },
  {
    "label": "GetHResult()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetHResult(__out HRESULT* phrResult)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Invoke()"
  },
  {
    "label": "IsStreamTime()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "IsStreamTime()"
  },
  {
    "label": "CCmdQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CCmdQueue()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "New(__out CDeferredCommand **ppCmd, __in LPUNKNOWN pUnk, REFTIME time, __in GUID* iid, long dispidMethod, short wFlags, long cArgs, __in_ecount(cArgs) VARIANT* pDispParams, __out VARIANT* pvarResult, __out short* puArgErr, BOOL bStream)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Insert(__in CDeferredCommand* pCmd)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Remove(__in CDeferredCommand* pCmd)"
  },
  {
    "label": "SetSyncSource()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetSyncSource(__in_opt IReferenceClock*)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Run(REFERENCE_TIME tStreamTimeOffset)"
  },
  {
    "label": "EndRun()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EndRun()"
  },
  {
    "label": "GetDueCommand()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDueCommand(__out CDeferredCommand ** ppCmd, long msTimeout)"
  },
  {
    "label": "GetDueHandle()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "GetDueHandle()"
  },
  {
    "label": "GetCommandDueFor()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT)",
    "insertText": "GetCommandDueFor(REFERENCE_TIME tStream, __out CDeferredCommand**ppCmd)"
  },
  {
    "label": "CheckTime()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "CheckTime(CRefTime time, BOOL bStream)"
  },
  {
    "label": "SetTimeAdvise()",
    "kind": "Method",
    "detail": "Function (} ; protected : CCritSec m_Lock ; CGenericList<CDeferredCommand> m_listPresentation ; CGenericList<CDeferredCommand> m_listStream ; CAMEvent m_evDue ; void)",
    "insertText": "SetTimeAdvise(void)"
  }
]