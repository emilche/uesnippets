[
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "CBaseDispatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseDispatch"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "converts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "converts"
  },
  {
    "label": "COARefTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COARefTime"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "no",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "no"
  },
  {
    "label": "CPosPassThru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPosPassThru"
  },
  {
    "label": "CRendererPosPassThru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CRendererPosPassThru"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "providing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "providing"
  },
  {
    "label": "CCmdQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCmdQueue"
  },
  {
    "label": "CDispParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDispParams"
  },
  {
    "label": "CDeferredCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDeferredCommand"
  },
  {
    "label": "providing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "providing"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      REFIID riid,\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "CMediaControl()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CMediaControl(const TCHAR *, LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "CMediaEvent()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CMediaEvent(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "CMediaPosition()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CMediaPosition(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "COARefTime(m_time + rt.m_time)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "COARefTime(m_time - rt.m_time)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "COARefTime(m_time * l)"
  },
  {
    "label": "COARefTime()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "COARefTime(m_time / l)"
  },
  {
    "label": "LONG()",
    "kind": "Method",
    "detail": "Function (from)",
    "insertText": "LONG(which gets\n    //  converted to double and then multiplied by 10000000\n    COARefTime(LONG)"
  },
  {
    "label": "GetPeer()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPeer(__deref_out IMediaPosition **ppMP)"
  },
  {
    "label": "GetPeerSeeking()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPeerSeeking(__deref_out IMediaSeeking **ppMS)"
  },
  {
    "label": "CPosPassThru()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CPosPassThru(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, IPin *)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid,__deref_out void **ppv)"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCapabilities( __out DWORD * pCapabilities )"
  },
  {
    "label": "CheckCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CheckCapabilities( __inout DWORD * pCapabilities )"
  },
  {
    "label": "SetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "GetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTimeFormat(__out GUID *pFormat)"
  },
  {
    "label": "IsUsingTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsUsingTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsFormatSupported( const GUID * pFormat)"
  },
  {
    "label": "QueryPreferredFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryPreferredFormat( __out GUID *pFormat)"
  },
  {
    "label": "ConvertTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConvertTimeFormat(__out LONGLONG * pTarget, \n                                   __in_opt const GUID * pTargetFormat,\n                                   LONGLONG Source, \n                                   __in_opt const GUID * pSourceFormat )"
  },
  {
    "label": "SetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetPositions( __inout_opt LONGLONG * pCurrent, DWORD CurrentFlags\n                             , __inout_opt LONGLONG * pStop, DWORD StopFlags )"
  },
  {
    "label": "GetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPositions( __out_opt LONGLONG * pCurrent, __out_opt LONGLONG * pStop )"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCurrentPosition( __out LONGLONG * pCurrent )"
  },
  {
    "label": "GetStopPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetStopPosition( __out LONGLONG * pStop )"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetRate( double dRate)"
  },
  {
    "label": "GetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetRate( __out double * pdRate)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetDuration( __out LONGLONG *pDuration)"
  },
  {
    "label": "GetAvailable()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAvailable( __out_opt LONGLONG *pEarliest, __out_opt LONGLONG *pLatest )"
  },
  {
    "label": "GetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPreroll( __out LONGLONG *pllPreroll )"
  },
  {
    "label": "get_Duration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Duration(__out REFTIME * plength)"
  },
  {
    "label": "put_CurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_CurrentPosition(REFTIME llTime)"
  },
  {
    "label": "get_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_StopTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_StopTime(REFTIME llTime)"
  },
  {
    "label": "get_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_PrerollTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_PrerollTime(REFTIME llTime)"
  },
  {
    "label": "get_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Rate(__out double * pdRate)"
  },
  {
    "label": "put_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_Rate(double dRate)"
  },
  {
    "label": "get_CurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_CurrentPosition(__out REFTIME * pllTime)"
  },
  {
    "label": "CanSeekForward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekForward(__out LONG *pCanSeekForward)"
  },
  {
    "label": "CanSeekBackward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekBackward(__out LONG *pCanSeekBackward)"
  },
  {
    "label": "CRendererPosPassThru()",
    "kind": "Method",
    "detail": "Function (graph)",
    "insertText": "CRendererPosPassThru(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, IPin *)"
  },
  {
    "label": "RegisterMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterMediaTime(IMediaSample *pMediaSample)"
  },
  {
    "label": "RegisterMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RegisterMediaTime(LONGLONG StartTime,LONGLONG EndTime)"
  },
  {
    "label": "GetMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetMediaTime(__out LONGLONG *pStartTime,__out_opt LONGLONG *pEndTime)"
  },
  {
    "label": "ResetMediaTime()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ResetMediaTime()"
  },
  {
    "label": "EOS()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EOS()"
  },
  {
    "label": "CreatePosPassThru()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "CreatePosPassThru(\n    __in_opt LPUNKNOWN pAgg,\n    BOOL bRenderer,\n    IPin *pPin,\n    __deref_out IUnknown **ppPassThru\n)"
  },
  {
    "label": "CBasicAudio()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBasicAudio(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "CBaseBasicVideo()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseBasicVideo(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "CBaseVideoWindow()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseVideoWindow(__in_opt LPCTSTR, __in_opt LPUNKNOWN)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "GetTypeInfoCount()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfoCount(__out UINT * pctinfo)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTypeInfo(\n      UINT itinfo,\n      LCID lcid,\n      __deref_out ITypeInfo ** pptinfo)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Invoke(\n      DISPID dispidMember,\n      REFIID riid,\n      LCID lcid,\n      WORD wFlags,\n      __in DISPPARAMS * pdispparams,\n      __out_opt VARIANT * pvarResult,\n      __out_opt EXCEPINFO * pexcepinfo,\n      __out_opt UINT * puArgErr)"
  },
  {
    "label": "CSourcePosition()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CSourcePosition(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, __in CCritSec *)"
  },
  {
    "label": "get_Duration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Duration(__out REFTIME * plength)"
  },
  {
    "label": "put_CurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_CurrentPosition(REFTIME llTime)"
  },
  {
    "label": "get_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_StopTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_StopTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_StopTime(REFTIME llTime)"
  },
  {
    "label": "get_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_PrerollTime(__out REFTIME * pllTime)"
  },
  {
    "label": "put_PrerollTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_PrerollTime(REFTIME llTime)"
  },
  {
    "label": "get_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "get_Rate(__out double * pdRate)"
  },
  {
    "label": "put_Rate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "put_Rate(double dRate)"
  },
  {
    "label": "CanSeekForward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekForward(__out LONG *pCanSeekForward)"
  },
  {
    "label": "CanSeekBackward()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CanSeekBackward(__out LONG *pCanSeekBackward)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void **ppv)"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsFormatSupported(const GUID * pFormat)"
  },
  {
    "label": "QueryPreferredFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "QueryPreferredFormat(__out GUID *pFormat)"
  },
  {
    "label": "SetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "IsUsingTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "IsUsingTimeFormat(const GUID * pFormat)"
  },
  {
    "label": "GetTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTimeFormat(__out GUID *pFormat)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetDuration(__out LONGLONG *pDuration)"
  },
  {
    "label": "GetStopPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetStopPosition(__out LONGLONG *pStop)"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCurrentPosition(__out LONGLONG *pCurrent)"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetCapabilities( __out DWORD * pCapabilities )"
  },
  {
    "label": "CheckCapabilities()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CheckCapabilities( __inout DWORD * pCapabilities )"
  },
  {
    "label": "ConvertTimeFormat()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "ConvertTimeFormat( __out LONGLONG * pTarget, \n                                    __in_opt const GUID * pTargetFormat,\n                                    LONGLONG Source, \n                                    __in_opt const GUID * pSourceFormat )"
  },
  {
    "label": "SetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetPositions( __inout_opt LONGLONG * pCurrent,  DWORD CurrentFlags\n\t\t\t     , __inout_opt LONGLONG * pStop,  DWORD StopFlags )"
  },
  {
    "label": "GetPositions()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPositions( __out_opt LONGLONG * pCurrent, __out_opt LONGLONG * pStop )"
  },
  {
    "label": "GetAvailable()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetAvailable( __out_opt LONGLONG * pEarliest, __out_opt LONGLONG * pLatest )"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetRate( double dRate)"
  },
  {
    "label": "GetRate()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetRate( __out double * pdRate)"
  },
  {
    "label": "GetPreroll()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetPreroll(__out LONGLONG *pPreroll)"
  },
  {
    "label": "CSourceSeeking()",
    "kind": "Method",
    "detail": "Function (ctor)",
    "insertText": "CSourceSeeking(__in_opt LPCTSTR, __in_opt LPUNKNOWN, __inout HRESULT*, __in CCritSec *)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __out void **ppv)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Cancel()"
  },
  {
    "label": "Confidence()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Confidence(\n                    __out LONG* pConfidence)"
  },
  {
    "label": "Postpone()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Postpone(\n                    REFTIME newtime)"
  },
  {
    "label": "GetHResult()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetHResult(\n                    __out HRESULT* phrResult)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Invoke()"
  },
  {
    "label": "CCmdQueue()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CCmdQueue(__inout_opt HRESULT *phr = NULL)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Insert(__in CDeferredCommand* pCmd)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Remove(__in CDeferredCommand* pCmd)"
  },
  {
    "label": "GetDueCommand()",
    "kind": "Method",
    "detail": "Function (call)",
    "insertText": "GetDueCommand(probably with a 0 timeout)"
  },
  {
    "label": "presented()",
    "kind": "Method",
    "detail": "Function (be)",
    "insertText": "presented(only between Run\n    //      and EndRun calls, since outside of this, the mapping from\n    //      stream time to presentation time is not known.\n    //   -- any presentation-time command due now.\n    // This means that if you want accurate synchronisation on samples that\n    // might be processed during Paused mode, you need to use\n    // stream-time commands.\n    //\n    // In all cases, commands remain queued until Invoked or Cancelled. The\n    // setting and resetting of the event handle is managed entirely by this\n    // queue object.\n\n    // set the clock used for timing\n    virtual HRESULT SetSyncSource(__in_opt IReferenceClock*)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Run(REFERENCE_TIME tStreamTimeOffset)"
  },
  {
    "label": "EndRun()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "EndRun()"
  },
  {
    "label": "GetDueCommand()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDueCommand(__out CDeferredCommand ** ppCmd, long msTimeout)"
  },
  {
    "label": "HANDLE()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HANDLE(m_evDue)"
  },
  {
    "label": "GetCommandDueFor()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetCommandDueFor(REFERENCE_TIME tStream, __out CDeferredCommand**ppCmd)"
  },
  {
    "label": "SetTimeAdvise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeAdvise(void)"
  }
]