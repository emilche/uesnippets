[
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FRayTracingMaskAndFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingMaskAndFlags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRayTracingInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingInstance"
  },
  {
    "label": "FRayTracingMaskAndFlags()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" MeshBatch . h \" class FRayTracingGeometry ; struct FRayTracingMaskAndFlags {)",
    "insertText": "FRayTracingMaskAndFlags() : Mask(0xFF) , bForceOpaque(false) , bDoubleSided(false) , bReverseCulling(false) , bAnySegmentsDecal(false) , bAllSegmentsDecal(false)"
  },
  {
    "label": "OwnsMaterials()",
    "kind": "Method",
    "detail": "Function (} uint8 Mask ; uint8 bForceOpaque : 1 ; uint8 bDoubleSided : 1 ; uint8 bReverseCulling : 1 ; uint8 bAnySegmentsDecal : 1 ; uint8 bAllSegmentsDecal : 1 ; } ; enum class ERayTracingInstanceLayer : uint8 { NearField,FarField,} ; enum class ERayTracingViewMaskMode : uint8 ; struct FRayTracingInstance { const FRayTracingGeometry* Geometry ; TArray<FMeshBatch> Materials ; TConstArrayView<FMeshBatch> MaterialsView ; bool)",
    "insertText": "OwnsMaterials()"
  },
  {
    "label": "GetMaterials()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMeshBatch>)",
    "insertText": "GetMaterials()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Materials.Num() == 0)"
  },
  {
    "label": "OwnsPrimitiveInstanceIndices()",
    "kind": "Method",
    "detail": "Function (bool bApplyLocalBoundsTransform = false ; bool bThinGeometry = false ; ERayTracingInstanceLayer InstanceLayer = ERayTracingInstanceLayer::NearField ; bool bInstanceMaskAndFlagsDirty = true ; uint32 NumTransforms = 0 ; TArray<uint32> PrimitiveInstanceIndices ; TConstArrayView<uint32> PrimitiveInstanceIndicesView ; bool)",
    "insertText": "OwnsPrimitiveInstanceIndices()"
  },
  {
    "label": "GetPrimitiveInstanceIndices()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<uint32>)",
    "insertText": "GetPrimitiveInstanceIndices()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(PrimitiveInstanceIndices.Num() == 0)"
  },
  {
    "label": "GetTransforms()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FMatrix>)",
    "insertText": "GetTransforms()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(InstanceTransforms.Num() == 0)"
  },
  {
    "label": "FRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRayTracingInstance()"
  },
  {
    "label": "FRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingInstance(const FRayTracingInstance&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingInstance&)",
    "insertText": "operator(const FRayTracingInstance&)"
  },
  {
    "label": "FRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingInstance(FRayTracingInstance&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingInstance&)",
    "insertText": "operator(FRayTracingInstance&&)"
  }
]