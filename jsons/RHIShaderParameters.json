[
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FRHIShaderParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderParameter"
  },
  {
    "label": "FRHIShaderParameterResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderParameterResource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIBatchedShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBatchedShaderParameters"
  },
  {
    "label": "FRHIBatchedShaderParametersAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBatchedShaderParametersAllocator"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHIShaderParameterUnbind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderParameterUnbind"
  },
  {
    "label": "FRHIBatchedShaderUnbinds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBatchedShaderUnbinds"
  },
  {
    "label": "FRHIShaderBundleComputeDispatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderBundleComputeDispatch"
  },
  {
    "label": "FComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputePipelineState"
  },
  {
    "label": "FRHIShaderBundleGraphicsState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderBundleGraphicsState"
  },
  {
    "label": "FRHIShaderBundleGraphicsDispatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIShaderBundleGraphicsDispatch"
  },
  {
    "label": "FGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineState"
  },
  {
    "label": "FRHIShaderParameter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" RHIResources . h \" # include \" RHIResourceCollection . h \" # define RHI_VALIDATE_BATCHED_SHADER_PARAMETERS DO_CHECK class FRHICommandList ; class FRHIComputeCommandList ; struct FRHIShaderParameter {)",
    "insertText": "FRHIShaderParameter(uint16 InBufferIndex, uint16 InBaseIndex, uint16 InByteOffset, uint16 InByteSize) : BufferIndex(InBufferIndex) , BaseIndex(InBaseIndex) , ByteOffset(InByteOffset) , ByteSize(InByteSize)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (} uint16 BufferIndex ; uint16 BaseIndex ; uint16 ByteOffset ; uint16 ByteSize ; } ; struct FRHIShaderParameterResource { enum class EType : uint8 { Texture,ResourceView,UnorderedAccessView,Sampler,UniformBuffer,ResourceCollection,} ;)",
    "insertText": "FRHIShaderParameterResource()"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIShaderParameterResource(EType InType, FRHIResource* InResource, uint16 InIndex) : Resource(InResource) , Index(InIndex) , Type(InType)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHITexture* InTexture, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::Texture, InTexture, InIndex)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHIShaderResourceView* InView, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::ResourceView, InView, InIndex)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHIUnorderedAccessView* InUAV, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::UnorderedAccessView, InUAV, InIndex)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHISamplerState* InSamplerState, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::Sampler, InSamplerState, InIndex)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHIUniformBuffer* InUniformBuffer, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::UniformBuffer, InUniformBuffer, InIndex)"
  },
  {
    "label": "FRHIShaderParameterResource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIShaderParameterResource(FRHIResourceCollection* InResourceCollection, uint16 InIndex) : FRHIShaderParameterResource(FRHIShaderParameterResource::EType::ResourceCollection, InResourceCollection, InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIShaderParameterResource& Other)"
  },
  {
    "label": "FRHIBatchedShaderParametersAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIBatchedShaderParametersAllocator(FRHIBatchedShaderParametersAllocator*& InOutRootListLink, FRHICommandListBase& InRHICmdList, FMemStackBase::EPageSize PageSize) : Next(InOutRootListLink) , RHICmdList(InRHICmdList) , ParametersData(PageSize) , Parameters(PageSize) , ResourceParameters(PageSize) , BindlessParameters(PageSize)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (InOutRootListLink = this ; } void)",
    "insertText": "Attach(const FRHIBatchedShaderParameters* InParameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_VALIDATE_BATCHED_SHADER_PARAMETERS)",
    "insertText": "if(AttachedParameters != InParameters)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (AttachedParameters = InParameters ; } # endif } void)",
    "insertText": "Detach()"
  },
  {
    "label": "EmplaceParameter()",
    "kind": "Method",
    "detail": "Function (# if RHI_VALIDATE_BATCHED_SHADER_PARAMETERS AttachedParameters = nullptr ; # endif } template<. . . ArgsType> void)",
    "insertText": "EmplaceParameter(TArrayView<FRHIShaderParameter>& InOutArray, ArgsType&& ...Args)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(Parameters, InOutArray, Forward<ArgsType&&>(Args)...)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "AddResourceParameter(TArrayView<FRHIShaderParameterResource>& InOutArray, ArgsType&& ...Args)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(ResourceParameters, InOutArray, Forward<ArgsType&&>(Args)...)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "AddBindlessParameter(TArrayView<FRHIShaderParameterResource>& InOutArray, ArgsType&& ...Args)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emplace(BindlessParameters, InOutArray, Forward<ArgsType&&>(Args)...)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} # if RHI_VALIDATE_BATCHED_SHADER_PARAMETERS const FRHIBatchedShaderParameters* AttachedParameters = nullptr ; # endif template<ElementType,. . . ArgsType> void)",
    "insertText": "Emplace(FMemStackBase& MemStack, TArrayView<ElementType>& InOutArray, ArgsType&& ...Args)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t ElementSize =)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (const size_t Alignment =)",
    "insertText": "alignof(ElementType)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumElements = InOutArray .)",
    "insertText": "Num()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ElementType* Elements = InOutArray .)",
    "insertText": "GetData()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Elements =)",
    "insertText": "new(MemStack.Alloc(ElementSize, Alignment)) ElementType(Forward<ArgsType&>(Args)...)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(MemStack.GetTop() == (uint8*)(InOutArray.GetData() + InOutArray.Num()))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(MemStack.Alloc(ElementSize, 1)) ElementType(Forward<ArgsType&>(Args)...)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (} else { Elements = reinterpret_cast<)",
    "insertText": "ElementType(MemStack.Alloc(NumElements * ElementSize, Alignment))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ElementType* LastElement = Elements ;)",
    "insertText": "for(int32 Index = 0; Index < InOutArray.Num(); ++Index, ++LastElement)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(LastElement) ElementType(MoveTemp(InOutArray[Index]))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "new(LastElement) ElementType(Forward<ArgsType&>(Args)...)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (} } InOutArray = TArrayView<)",
    "insertText": "ElementType(Elements, NumElements)"
  },
  {
    "label": "AppendParametersData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendParametersData(TArrayView<uint8>& InOutArray, uint32 NumBytes, const uint8* Bytes)"
  },
  {
    "label": "ArrayBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayBytes(uint8*)ParametersData.Alloc(NumBytes, Alignment)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ArrayBytes, Bytes, NumBytes)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ParametersData.GetTop() == InOutArray.GetData() + InOutArray.Num())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ParametersData.Alloc(NumBytes, Alignment), Bytes, NumBytes)"
  },
  {
    "label": "ArrayBytes()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ArrayBytes(uint8*)ParametersData.Alloc(NumArrayBytes, Alignment)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ArrayBytes, InOutArray.GetData(), InOutArray.Num())"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ArrayBytes + InOutArray.Num(), Bytes, NumBytes)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} } InOutArray = TArrayView<)",
    "insertText": "uint8(ArrayBytes, NumArrayBytes)"
  },
  {
    "label": "FRHIBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHIBatchedShaderParameters { FRHIBatchedShaderParametersAllocator& Allocator ; TArrayView<uint8> ParametersData ; TArrayView<FRHIShaderParameter> Parameters ; TArrayView<FRHIShaderParameterResource> ResourceParameters ; TArrayView<FRHIShaderParameterResource> BindlessParameters ;)",
    "insertText": "FRHIBatchedShaderParameters(FRHIBatchedShaderParametersAllocator& InAllocator) : Allocator(InAllocator)"
  },
  {
    "label": "HasParameters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasParameters()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finish()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (ParametersData = { } ; Parameters = { } ; ResourceParameters = { } ; BindlessParameters = { } ; } template<. . . ArgsType> void)",
    "insertText": "AddResourceParameter(ArgsType&& ...Args)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Attach(this)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "AddResourceParameter(ResourceParameters, Forward<ArgsType&>(Args)...)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType> void)",
    "insertText": "AddBindlessParameter(ArgsType&& ...Args)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "AddBindlessParameter(BindlessParameters, Forward<ArgsType&>(Args)...)"
  },
  {
    "label": "SetShaderParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderParameter(uint32 BufferIndex, uint32 BaseIndex, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "AppendParametersData()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "AppendParametersData(ParametersData, NumBytes, (const uint8*)NewValue)"
  },
  {
    "label": "EmplaceParameter()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "EmplaceParameter(Parameters, (uint16)BufferIndex, (uint16)BaseIndex, (uint16)DestDataOffset, (uint16)NumBytes)"
  },
  {
    "label": "SetShaderUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderUniformBuffer(uint32 Index, FRHIUniformBuffer* UniformBuffer)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(UniformBuffer, (uint16)Index)"
  },
  {
    "label": "SetShaderTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderTexture(uint32 Index, FRHITexture* Texture)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(Texture, (uint16)Index)"
  },
  {
    "label": "SetShaderResourceViewParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderResourceViewParameter(uint32 Index, FRHIShaderResourceView* SRV)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(SRV, (uint16)Index)"
  },
  {
    "label": "SetShaderSampler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderSampler(uint32 Index, FRHISamplerState* State)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(State, (uint16)Index)"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUAVParameter(uint32 Index, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(UAV, (uint16)Index)"
  },
  {
    "label": "SetResourceCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResourceCollection(uint32 Index, FRHIResourceCollection* ResourceCollection)"
  },
  {
    "label": "AddResourceParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceParameter(ResourceCollection, (uint16)Index)"
  },
  {
    "label": "SetBindlessTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBindlessTexture(uint32 Index, FRHITexture* Texture)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindlessParameter(Texture, (uint16)Index)"
  },
  {
    "label": "SetBindlessResourceView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBindlessResourceView(uint32 Index, FRHIShaderResourceView* SRV)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindlessParameter(SRV, (uint16)Index)"
  },
  {
    "label": "SetBindlessSampler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBindlessSampler(uint32 Index, FRHISamplerState* State)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindlessParameter(State, (uint16)Index)"
  },
  {
    "label": "SetBindlessUAV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBindlessUAV(uint32 Index, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindlessParameter(UAV, (uint16)Index)"
  },
  {
    "label": "SetBindlessResourceCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBindlessResourceCollection(uint32 Index, FRHIResourceCollection* ResourceCollection)"
  },
  {
    "label": "AddBindlessParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindlessParameter(ResourceCollection, (uint16)Index)"
  },
  {
    "label": "FRHIShaderParameterUnbind()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHIShaderParameterUnbind { enum class EType : uint8 { ResourceView,UnorderedAccessView,} ;)",
    "insertText": "FRHIShaderParameterUnbind()"
  },
  {
    "label": "FRHIShaderParameterUnbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIShaderParameterUnbind(EType InType, uint16 InIndex) : Index(InIndex) , Type(InType)"
  },
  {
    "label": "UnsetSRV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsetSRV(uint32 Index)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Unbinds .)",
    "insertText": "Emplace(FRHIShaderParameterUnbind::EType::ResourceView, (uint16)Index)"
  },
  {
    "label": "UnsetUAV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsetUAV(uint32 Index)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Unbinds .)",
    "insertText": "Emplace(FRHIShaderParameterUnbind::EType::UnorderedAccessView, (uint16)Index)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHIShaderBundleComputeDispatch { uint32 RecordIndex = ~)",
    "insertText": "uint32(0u)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (class FComputePipelineState* PipelineState = nullptr ; FRHIComputeShader* Shader = nullptr ; FRHIWorkGraphShader* WorkGraphShader = nullptr ; FRHIComputePipelineState* RHIPipeline = nullptr ; TOptional<FRHIBatchedShaderParameters> Parameters ; FUint32Vector4 Constants ; bool)",
    "insertText": "IsValid()"
  }
]