[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FMeshApproximationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshApproximationSettings"
  },
  {
    "label": "IGeometryProcessing_ApproximateActors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGeometryProcessing_ApproximateActors"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInput"
  },
  {
    "label": "FOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptions"
  },
  {
    "label": "FResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResults"
  },
  {
    "label": "IGeometryProcessing_ApproximateActors()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" class AActor ; class UActorComponent ; class UStaticMesh ; class UMaterial ; class UMaterialInterface ; class UTexture2D ; struct FMeshApproximationSettings ; class IGeometryProcessing_ApproximateActors : public IModularFeature { public : ~)",
    "insertText": "IGeometryProcessing_ApproximateActors()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} enum class EMeshDataSourceLODPolicy { LOD0SourceMeshes,LOD0RenderMeshes } ; enum class EApproximationPolicy { MeshAndGeneratedMaterial,CollisionMesh } ; enum class EGroundPlanePolicy { NoGroundPlane = 0,FixedZHeightGroundPlane = 1 } ; enum class EGroundPlaneClippingPolicy { NoClipping = 0,DiscardFullyHiddenFaces = 1,CutFaces = 2,CutFacesAndFill = 3 } ; enum class EBaseCappingPolicy { NoBaseCapping = 0,ConvexPolygon = 1,ConvexSolid = 2 } ; enum class EOcclusionPolicy : uint8 { None = 0,VisibilityBased = 1 } ; enum class ESimplificationPolicy { FixedTriangleCount = 0,TrianglesPerUnitSqMeter = 1,GeometricTolerance = 2 } ; enum class EUVGenerationPolicy : uint8 { PreferUVAtlas = 0,PreferXAtlas = 1,PreferPatchBuilder = 2 } ; enum class ETextureSizePolicy : uint8 { TextureSize = 0,TexelDensity = 1,CustomTextureSize = 2 } ; enum class ENaniteFallbackTarget : uint8 { Auto,PercentTriangles,RelativeError } ; struct FInput { TArray<AActor*> Actors ; TArray<UActorComponent*> Components ; } ; struct FOptions { FString BasePackagePath ; EApproximationPolicy BasePolicy = EApproximationPolicy::MeshAndGeneratedMaterial ; EMeshDataSourceLODPolicy MeshDataLODPolicy = EMeshDataSourceLODPolicy::LOD0SourceMeshes ; bool bAutoThickenThinParts = false ; double AutoThickenThicknessMeters = 0 . 1 ; bool bIgnoreTinyParts = false ; double TinyPartMaxDimensionMeters = 0 . 1 ; EBaseCappingPolicy BaseCappingPolicy = EBaseCappingPolicy::NoBaseCapping ; double BaseThicknessOverrideMeters = 0 . 0 ; double BaseHeightOverrideMeters = 0 . 0 ; double WorldSpaceApproximationAccuracyMeters = 1 . 0 ; int32 ClampVoxelDimension = 1 0 2 4 ; double WindingThreshold = 0 . 5 ; bool bApplyMorphology = false ; double MorphologyDistanceMeters = 0 . 1 ; EOcclusionPolicy OcclusionPolicy = EOcclusionPolicy::VisibilityBased ; bool bAddDownwardFacesOccluder = true ; ESimplificationPolicy MeshSimplificationPolicy = ESimplificationPolicy::FixedTriangleCount ; int32 FixedTriangleCount = 5 0 0 0 ; double SimplificationTargetMetric = 0 . 1 ; bool bEnableFastSimplifyPrePass = false ; EGroundPlanePolicy GroundPlanePolicy = EGroundPlanePolicy::NoGroundPlane ; double GroundPlaneZHeight = 0 . 0 ; EGroundPlaneClippingPolicy GroundPlaneClippingPolicy = EGroundPlaneClippingPolicy::NoClipping ; bool bCalculateHardNormals = true ; double HardNormalsAngleDeg = 6 0 . 0 ; EUVGenerationPolicy UVPolicy = EUVGenerationPolicy::PreferXAtlas ; double UVAtlasStretchTarget = 0 . 1 ; int32 PatchBuilderInitialPatchCount = 2 5 0 ; double PatchBuilderCurvatureAlignment = 1 . 0 ; double PatchBuilderMergingThreshold = 1 . 5 ; double PatchBuilderMaxNormalDeviationDeg = 4 5 . 0 ; int32 RenderCaptureImageSize = 1 0 2 4 ; double FieldOfViewDegrees = 4 5 . 0 ; double NearPlaneDist = 1 . 0 ; bool bMaximizeBakeParallelism = true ; UMaterialInterface* BakeMaterial = nullptr ; FName BaseColorTexParamName =)",
    "insertText": "FName(\"BaseColor\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeBaseColor = true ; int32 CustomTextureSizeBaseColor = 1 0 2 4 ; FName RoughnessTexParamName =)",
    "insertText": "FName(\"Roughness\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeRoughness = true ; int32 CustomTextureSizeRoughness = 1 0 2 4 ; FName MetallicTexParamName =)",
    "insertText": "FName(\"Metallic\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeMetallic = true ; int32 CustomTextureSizeMetallic = 1 0 2 4 ; FName SpecularTexParamName =)",
    "insertText": "FName(\"Specular\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeSpecular = true ; int32 CustomTextureSizeSpecular = 1 0 2 4 ; FName EmissiveTexParamName =)",
    "insertText": "FName(\"Emissive\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeEmissive = true ; int32 CustomTextureSizeEmissive = 1 0 2 4 ; FName NormalTexParamName =)",
    "insertText": "FName(\"NormalMap\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bBakeNormalMap = true ; int32 CustomTextureSizeNormalMap = 1 0 2 4 ; bool bUsePackedMRS = true ; FName PackedMRSTexParamName =)",
    "insertText": "FName(\"PackedMRS\")"
  },
  {
    "label": "ConstructOptions()",
    "kind": "Method",
    "detail": "Function (ETextureSizePolicy TextureSizePolicy = ETextureSizePolicy::TextureSize ; int32 TextureImageSize = 1 0 2 4 ; float MeshTexelDensity = 0 ; int32 AntiAliasMultiSampling = 0 ; bool bGenerateNaniteEnabledMesh = false ; ENaniteFallbackTarget NaniteFallbackTarget = ENaniteFallbackTarget::Auto ; float NaniteFallbackPercentTriangles = 1 . 0 f ; float NaniteFallbackRelativeError = 1 . 0 f ; bool bSupportRayTracing = true ; bool bAllowDistanceField = true ; bool bGenerateLightmapUVs = false ; bool bCreatePhysicsBody = true ; bool bBuildReversedIndexBuffer = true ; bool bVerbose = false ; bool bWriteDebugMesh = false ; } ; enum class EResultCode { Success,MeshGenerationFailed,MaterialGenerationFailed,UnknownError } ; struct FResults { EResultCode ResultCode = EResultCode::UnknownError ; TArray<UStaticMesh*> NewMeshAssets ; TArray<UMaterialInterface*> NewMaterials ; TArray<UTexture2D*> NewTextures ; } ; FOptions)",
    "insertText": "ConstructOptions(const FMeshApproximationSettings& MeshApproximationSettings)"
  },
  {
    "label": "ApproximateActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximateActors(const FInput& Input, const FOptions& Options, FResults& ResultsOut)"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_OneParam(FApproximateActorsCompleteDelegate, FResults&)"
  }
]