[
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "USlateBrushAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateBrushAsset"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "UWidgetBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprintLibrary"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "SetInputMode_UIOnlyEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMode_UIOnlyEx(APlayerController* PlayerController, UWidget* InWidgetToFocus = nullptr, EMouseLockMode InMouseLockMode = EMouseLockMode::DoNotLock, const bool bFlushInput = false)"
  },
  {
    "label": "SetInputMode_GameAndUIEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMode_GameAndUIEx(APlayerController* PlayerController, UWidget* InWidgetToFocus = nullptr, EMouseLockMode InMouseLockMode = EMouseLockMode::DoNotLock, bool bHideCursorDuringCapture = true, const bool bFlushInput = false)"
  },
  {
    "label": "SetInputMode_GameOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMode_GameOnly(APlayerController* PlayerController, const bool bFlushInput = false)"
  },
  {
    "label": "SetFocusToGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusToGameViewport()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "Handled()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "Unhandled()"
  },
  {
    "label": "DetectDragIfPressed()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "DetectDragIfPressed(const FPointerEvent& PointerEvent, UWidget* WidgetDetectingDrag, FKey DragKey)"
  },
  {
    "label": "IsDragDropping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragDropping()"
  },
  {
    "label": "CancelDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelDragDrop()"
  },
  {
    "label": "MakeBrushFromAsset()",
    "kind": "Method",
    "detail": "Function (FSlateBrush)",
    "insertText": "MakeBrushFromAsset(USlateBrushAsset* BrushAsset)"
  },
  {
    "label": "MakeBrushFromTexture()",
    "kind": "Method",
    "detail": "Function (FSlateBrush)",
    "insertText": "MakeBrushFromTexture(UTexture2D* Texture, int32 Width = 0, int32 Height = 0)"
  },
  {
    "label": "MakeBrushFromMaterial()",
    "kind": "Method",
    "detail": "Function (FSlateBrush)",
    "insertText": "MakeBrushFromMaterial(UMaterialInterface* Material, int32 Width = 32, int32 Height = 32)"
  },
  {
    "label": "NoResourceBrush()",
    "kind": "Method",
    "detail": "Function (FSlateBrush)",
    "insertText": "NoResourceBrush()"
  },
  {
    "label": "DismissAllMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissAllMenus()"
  },
  {
    "label": "GetAllWidgetsOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWidgetsOfClass(UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, TSubclassOf<UUserWidget> WidgetClass, bool TopLevelOnly = true)"
  },
  {
    "label": "GetAllWidgetsWithInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWidgetsWithInterface(UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, TSubclassOf<UInterface> Interface, bool TopLevelOnly)"
  },
  {
    "label": "GetInputEventFromKeyEvent()",
    "kind": "Method",
    "detail": "Function (FInputEvent)",
    "insertText": "GetInputEventFromKeyEvent(const FKeyEvent& Event)"
  },
  {
    "label": "GetKeyEventFromAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (FKeyEvent)",
    "insertText": "GetKeyEventFromAnalogInputEvent(const FAnalogInputEvent& Event)"
  },
  {
    "label": "GetInputEventFromCharacterEvent()",
    "kind": "Method",
    "detail": "Function (FInputEvent)",
    "insertText": "GetInputEventFromCharacterEvent(const FCharacterEvent& Event)"
  },
  {
    "label": "GetInputEventFromPointerEvent()",
    "kind": "Method",
    "detail": "Function (FInputEvent)",
    "insertText": "GetInputEventFromPointerEvent(const FPointerEvent& Event)"
  },
  {
    "label": "GetInputEventFromNavigationEvent()",
    "kind": "Method",
    "detail": "Function (FInputEvent)",
    "insertText": "GetInputEventFromNavigationEvent(const FNavigationEvent& Event)"
  },
  {
    "label": "GetSafeZonePadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSafeZonePadding(UObject* WorldContextObject, FVector4& SafePadding, FVector2D& SafePaddingScale, FVector4& SpillOverPadding)"
  },
  {
    "label": "SetColorVisionDeficiencyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency)"
  },
  {
    "label": "SetHardwareCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHardwareCursor(UObject* WorldContextObject, EMouseCursor::Type CursorShape, FName CursorName, FVector2D HotSpot)"
  },
  {
    "label": "SetWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitleBarState(UWidget* TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible)"
  },
  {
    "label": "RestorePreviousWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePreviousWindowTitleBarState()"
  },
  {
    "label": "SetWindowTitleBarOnCloseClickedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitleBarOnCloseClickedDelegate(FOnGameWindowCloseButtonClickedDelegate Delegate)"
  },
  {
    "label": "SetWindowTitleBarCloseButtonActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitleBarCloseButtonActive(bool bActive)"
  }
]