[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IStatsAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStatsAggregator"
  },
  {
    "label": "IStatsAggregationWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStatsAggregationWorker"
  },
  {
    "label": "FStatsAggregationTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsAggregationTask"
  },
  {
    "label": "FStatsAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsAggregator"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / AsyncWork . h \" # include \" TraceServices / Common / CancellationToken . h \" # include \" InsightsCore / Common / IAsyncOperationStatusProvider . h \" # include \" InsightsCore / Common / Stopwatch . h \" namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights::TimingProfiler { class IStatsAggregator : public IAsyncOperationStatusProvider { public : void)",
    "insertText": "Start()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "IsCancelRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCancelRequested()"
  },
  {
    "label": "IStatsAggregationWorker()",
    "kind": "Method",
    "detail": "Function (} ; class IStatsAggregationWorker { public : ~)",
    "insertText": "IStatsAggregationWorker()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork(TSharedPtr<TraceServices::FCancellationToken> CancellationToken)"
  },
  {
    "label": "FStatsAggregator()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsAggregationTask ; typedef FAsyncTask<FStatsAggregationTask> FStatsAggregationAsyncTask ; class FStatsAggregator : public IStatsAggregator { public :)",
    "insertText": "FStatsAggregator(const FString InLogName)"
  },
  {
    "label": "FStatsAggregator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStatsAggregator()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (IntervalStartTime = InStartTime ; IntervalEndTime = InEndTime ; } void)",
    "insertText": "Tick(TSharedPtr<const TraceServices::IAnalysisSession> InSession, const double InCurrentTime, const float InDeltaTime, TFunctionRef<void()> OnFinishedCallback)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (AllOpsStopwatch .)",
    "insertText": "Update()"
  },
  {
    "label": "GetCurrentOperationDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCurrentOperationDuration()"
  },
  {
    "label": "GetOperationCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetOperationCount()"
  },
  {
    "label": "CreateWorker()",
    "kind": "Method",
    "detail": "Function (protected : IStatsAggregationWorker*)",
    "insertText": "CreateWorker(TSharedPtr<const TraceServices::IAnalysisSession> InSession)"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "ResetAsyncTask()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetAsyncTask()"
  }
]