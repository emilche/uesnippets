[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadProvider"
  },
  {
    "label": "FLogProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogProvider"
  },
  {
    "label": "FFrameProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameProvider"
  },
  {
    "label": "FChannelProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelProvider"
  },
  {
    "label": "FScreenshotProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenshotProvider"
  },
  {
    "label": "FRegionProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegionProvider"
  },
  {
    "label": "FMiscTraceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMiscTraceAnalyzer"
  },
  {
    "label": "FThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadState"
  },
  {
    "label": "FMiscTraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" # include \" Templates / SharedPointer . h \" # include \" ProfilingDebugging / MiscTrace . h \" # include \" Common / PagedArray . h \" namespace TraceServices { class IAnalysisSession ; class FThreadProvider ; class FLogProvider ; class FFrameProvider ; class FChannelProvider ; class FScreenshotProvider ; class FRegionProvider ; class FMiscTraceAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FMiscTraceAnalyzer(IAnalysisSession& Session, FThreadProvider& ThreadProvider, FLogProvider& LogProvider, FFrameProvider& FrameProvider, FChannelProvider& ChannelProvider, FScreenshotProvider& ScreenshotProvider, FRegionProvider& RegionProvider)"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnThreadInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadInfo(const FThreadInfo& ThreadInfo)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "GetThreadState()",
    "kind": "Method",
    "detail": "Function (private : enum : uint16 { RouteId_RegisterGameThread,RouteId_CreateThread,RouteId_SetThreadGroup,RouteId_BeginThreadGroupScope,RouteId_EndThreadGroupScope,RouteId_BeginFrame,RouteId_EndFrame,RouteId_BeginGameFrame,RouteId_EndGameFrame,RouteId_BeginRenderFrame,RouteId_EndRenderFrame,RouteId_ChannelAnnounce,RouteId_ChannelToggle,RouteId_ScreenshotHeader,RouteId_ScreenshotChunk,RouteId_RegionBegin,RouteId_RegionBeginWithId,RouteId_RegionEnd,RouteId_RegionEndWithId } ; struct FThreadState { TArray<const TCHAR*> ThreadGroupStack ; } ; FThreadState*)",
    "insertText": "GetThreadState(uint32 ThreadId)"
  },
  {
    "label": "OnChannelAnnounce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelAnnounce(const FOnEventContext& Context)"
  },
  {
    "label": "OnChannelToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelToggle(const FOnEventContext& Context)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (IAnalysisSession& Session ; FThreadProvider& ThreadProvider ; FLogProvider& LogProvider ; FFrameProvider& FrameProvider ; FChannelProvider& ChannelProvider ; FScreenshotProvider& ScreenshotProvider ; FRegionProvider& RegionProvider ; TMap<uint32,TSharedRef<FThreadState>> ThreadStateMap ; uint64 LastFrameCycle [ TraceFrameType_Count ] = { 0,0 } ; uint64 ScreenshotLogCategoryId =)",
    "insertText": "uint64(-1)"
  }
]