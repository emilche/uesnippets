[
  {
    "label": "symbol_table_entry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "symbol_table_entry"
  },
  {
    "label": "glsl_symbol_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glsl_symbol_table"
  },
  {
    "label": "_mesa_symbol_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mesa_symbol_table"
  },
  {
    "label": "_glsl_symbol_table_destructor()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef GLSL_SYMBOL_TABLE # define GLSL_SYMBOL_TABLE # include \" symbol_table . h \" # include \" ir . h \" # include \" glsl_types . h \" class symbol_table_entry ; struct glsl_symbol_table { private : void)",
    "insertText": "_glsl_symbol_table_destructor(glsl_symbol_table *table)"
  },
  {
    "label": "glsl_symbol_table()",
    "kind": "Method",
    "detail": "Function (table -> ~)",
    "insertText": "glsl_symbol_table()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} public : void* operator)",
    "insertText": "new(size_t size, void *ctx)"
  },
  {
    "label": "ralloc_size()",
    "kind": "Method",
    "detail": "Function (void* table ; table =)",
    "insertText": "ralloc_size(ctx, size)"
  },
  {
    "label": "ralloc_set_destructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ralloc_set_destructor(table, (void (*)(void*)) _glsl_symbol_table_destructor)"
  },
  {
    "label": "ralloc_set_destructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ralloc_set_destructor(table, NULL)"
  },
  {
    "label": "ralloc_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ralloc_free(table)"
  },
  {
    "label": "push_scope()",
    "kind": "Method",
    "detail": "Function (unsigned int language_version ; void)",
    "insertText": "push_scope()"
  },
  {
    "label": "pop_scope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop_scope()"
  },
  {
    "label": "name_declared_this_scope()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "name_declared_this_scope(const char *name)"
  },
  {
    "label": "add_variable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add_variable(ir_variable *v)"
  },
  {
    "label": "add_type()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add_type(const char *name, const glsl_type *t)"
  },
  {
    "label": "add_function()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add_function(ir_function *f)"
  },
  {
    "label": "add_global_function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_global_function(ir_function *f)"
  },
  {
    "label": "get_variable()",
    "kind": "Method",
    "detail": "Function (ir_variable*)",
    "insertText": "get_variable(const char *name)"
  },
  {
    "label": "get_type()",
    "kind": "Method",
    "detail": "Function (const glsl_type*)",
    "insertText": "get_type(const char *name)"
  },
  {
    "label": "get_function()",
    "kind": "Method",
    "detail": "Function (ir_function*)",
    "insertText": "get_function(const char *name)"
  },
  {
    "label": "get_entry()",
    "kind": "Method",
    "detail": "Function (private : symbol_table_entry*)",
    "insertText": "get_entry(const char *name)"
  }
]