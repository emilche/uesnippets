[
  {
    "label": "ClusterFit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClusterFit"
  },
  {
    "label": "ClusterFit()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_CLUSTERFIT_H # define SQUISH_CLUSTERFIT_H # include \" squish . h \" # include \" maths . h \" # include \" simd . h \" # include \" colourfit . h \" namespace squish { class ClusterFit : public ColourFit { public :)",
    "insertText": "ClusterFit()"
  },
  {
    "label": "ClusterFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterFit(ColourSet const* colours, int flags)"
  },
  {
    "label": "SetColourSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColourSet(ColourSet const* colours, int flags)"
  },
  {
    "label": "SetMetric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetric(float r, float g, float b)"
  },
  {
    "label": "GetBestError()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBestError()"
  },
  {
    "label": "Compress3()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Compress3(void* block)"
  },
  {
    "label": "Compress4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress4(void* block)"
  },
  {
    "label": "Reorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reorder(Vec3::Arg principle)"
  },
  {
    "label": "SolveLeastSquares()",
    "kind": "Method",
    "detail": "Function (Vec3 m_principle ; # if SQUISH_USE_SIMD Vec4)",
    "insertText": "SolveLeastSquares(Vec4& start, Vec4& end)"
  },
  {
    "label": "SolveLeastSquares()",
    "kind": "Method",
    "detail": "Function (Vec4 m_weighted [ 1 6 ] ; Vec4 m_unweighted [ 1 6 ] ; Vec4 m_weights [ 1 6 ] ; Vec4 m_metric ; Vec4 m_metricSqr ; Vec4 m_alpha [ 1 6 ] ; Vec4 m_beta [ 1 6 ] ; Vec4 m_xxsum ; Vec4 m_besterror ; # else float)",
    "insertText": "SolveLeastSquares(Vec3& start, Vec3& end)"
  }
]