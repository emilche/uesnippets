[
  {
    "label": "FGenericWindowDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericWindowDefinition"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWindowDrawAttentionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowDrawAttentionParameters"
  },
  {
    "label": "FGenericWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericWindow"
  },
  {
    "label": "ConvertIntToWindowMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / MathFwd . h \" # include \" Templates / SharedPointer . h \" struct FGenericWindowDefinition ; namespace EWindowMode { enum Type : int { Fullscreen,WindowedFullscreen,Windowed,NumWindowModes } ; Type)",
    "insertText": "ConvertIntToWindowMode(int32 InWindowMode)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (Type WindowMode = Windowed ;)",
    "insertText": "switch(InWindowMode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"Unknown\")"
  },
  {
    "label": "FWindowDrawAttentionParameters()",
    "kind": "Method",
    "detail": "Function (} } enum class EWindowDrawAttentionRequestType { UntilActivated,Stop,} ; struct FWindowDrawAttentionParameters {)",
    "insertText": "FWindowDrawAttentionParameters()"
  },
  {
    "label": "FWindowDrawAttentionParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWindowDrawAttentionParameters(EWindowDrawAttentionRequestType InRequestType ) : RequestType(InRequestType)"
  },
  {
    "label": "FGenericWindow()",
    "kind": "Method",
    "detail": "Function (} EWindowDrawAttentionRequestType RequestType = EWindowDrawAttentionRequestType::UntilActivated ; } ; class FGenericWindow { public :)",
    "insertText": "FGenericWindow()"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReshapeWindow(int32 X, int32 Y, int32 Width, int32 Height)"
  },
  {
    "label": "GetFullScreenInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFullScreenInfo(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(int32 X, int32 Y)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(bool bForce = false)"
  },
  {
    "label": "HACK_ForceToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HACK_ForceToFront()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode(EWindowMode::Type InNewWindowMode)"
  },
  {
    "label": "GetWindowMode()",
    "kind": "Method",
    "detail": "Function (EWindowMode::Type)",
    "insertText": "GetWindowMode()"
  },
  {
    "label": "IsMaximized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaximized()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "GetRestoredDimensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRestoredDimensions(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "SetWindowFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowFocus()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(const float InOpacity)"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool bEnable)"
  },
  {
    "label": "IsPointInWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInWindow(int32 X, int32 Y)"
  },
  {
    "label": "GetWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowBorderSize()"
  },
  {
    "label": "GetWindowTitleBarSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowTitleBarSize()"
  },
  {
    "label": "GetOSWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetOSWindowHandle()"
  },
  {
    "label": "IsForegroundWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForegroundWindow()"
  },
  {
    "label": "IsFullscreenSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullscreenSupported()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* const Text)"
  },
  {
    "label": "GetDefinition()",
    "kind": "Method",
    "detail": "Function (const FGenericWindowDefinition&)",
    "insertText": "GetDefinition()"
  },
  {
    "label": "IsDefinitionValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefinitionValid()"
  },
  {
    "label": "AdjustCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustCachedSize(FVector2D& Size)"
  },
  {
    "label": "GetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactor()"
  },
  {
    "label": "SetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDPIScaleFactor(const float Factor)"
  },
  {
    "label": "IsManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsManualManageDPIChanges()"
  },
  {
    "label": "SetManualManageDPIChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManualManageDPIChanges(const bool bAutoHandle)"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention(const FWindowDrawAttentionParameters& Parameters)"
  },
  {
    "label": "SetNativeWindowButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNativeWindowButtonsVisibility(bool bVisible)"
  }
]