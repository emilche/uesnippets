[
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FLoadAssetsSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadAssetsSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AssetRegistry / AssetData . h \" # include \" Interfaces / IPluginManager . h \" class FViewport ; namespace AssetViewUtils { bool)",
    "insertText": "OpenEditorForAsset(const FString& ObjectPath)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenEditorForAsset(UObject* Asset)"
  },
  {
    "label": "OpenEditorForAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenEditorForAsset(const TArray<UObject*>& Assets)"
  },
  {
    "label": "LoadAssetsIfNeeded()",
    "kind": "Method",
    "detail": "Function (struct FLoadAssetsSettings { bool bAlwaysPromptBeforeLoading = false ; bool bShowFailureNotification = true ; bool bFollowRedirectors = false ; bool bAllowCancel = false ; bool bLoadWorldPartitionMaps = false ; bool bLoadAllExternalObjects = false ; } ; enum class ELoadAssetsResult : uint8 { Success,Cancelled,SomeFailed,} ; ELoadAssetsResult)",
    "insertText": "LoadAssetsIfNeeded(TConstArrayView<FAssetData> Assets, TArray<UObject*>& LoadedObjects, const FLoadAssetsSettings& InSettings)"
  },
  {
    "label": "LoadAssetsIfNeeded()",
    "kind": "Method",
    "detail": "Function (ELoadAssetsResult)",
    "insertText": "LoadAssetsIfNeeded(TConstArrayView<FString> ObjectPaths, TArray<UObject*>& LoadedObjects, const FLoadAssetsSettings& InSettings)"
  },
  {
    "label": "LoadAssetsIfNeeded()",
    "kind": "Method",
    "detail": "Function (ELoadAssetsResult)",
    "insertText": "LoadAssetsIfNeeded(TConstArrayView<FSoftObjectPath> ObjectPaths, TArray<UObject*>& LoadedObjects, const FLoadAssetsSettings& InSettings)"
  },
  {
    "label": "GetUnloadedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnloadedAssets(const TArray<FString>& ObjectPaths, TArray<FString>& OutUnloadedObjects)"
  },
  {
    "label": "PromptToLoadAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PromptToLoadAssets(const TArray<FString>& UnloadedObjects)"
  },
  {
    "label": "CopyAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssets(const TArray<UObject*>& Assets, const FString& DestPath)"
  },
  {
    "label": "MoveAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssets(const TArray<UObject*>& Assets, const FString& DestPath, const FString& SourcePath = FString())"
  },
  {
    "label": "DeleteAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteAssets(const TArray<UObject*>& AssetsToDelete)"
  },
  {
    "label": "DeleteFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFolders(const TArray<FString>& PathsToDelete)"
  },
  {
    "label": "GetAssetsInPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsInPaths(const TArray<FString>& InPaths, TArray<FAssetData>& OutAssetDataList)"
  },
  {
    "label": "SavePackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SavePackages(const TArray<UPackage*>& Packages)"
  },
  {
    "label": "SaveDirtyPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveDirtyPackages()"
  },
  {
    "label": "LoadPackages()",
    "kind": "Method",
    "detail": "Function (TArray<UPackage*>)",
    "insertText": "LoadPackages(const TArray<FString>& PackageNames)"
  },
  {
    "label": "RenameFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameFolder(const FString& DestPath, const FString& SourcePath)"
  },
  {
    "label": "CopyFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFolders(const TArray<FString>& InSourcePathNames, const FString& DestPath)"
  },
  {
    "label": "MoveFolders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFolders(const TArray<FString>& InSourcePathNames, const FString& DestPath)"
  },
  {
    "label": "PrepareFoldersForDragDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareFoldersForDragDrop(const TArray<FString>& SourcePathNames, TMap< FString, TArray<UObject*> >& OutSourcePathToLoadedAssets)"
  },
  {
    "label": "CaptureThumbnailFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThumbnailFromViewport(FViewport* InViewport, const TArray<FAssetData>& InAssetsToAssign)"
  },
  {
    "label": "ClearCustomThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCustomThumbnails(const TArray<FAssetData>& InAssetsToAssign)"
  },
  {
    "label": "AssetHasCustomThumbnail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetHasCustomThumbnail(const FAssetData& AssetData)"
  },
  {
    "label": "IsProjectFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProjectFolder(const FStringView InPath, const bool bIncludePlugins = false)"
  },
  {
    "label": "IsEngineFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEngineFolder(const FStringView InPath, const bool bIncludePlugins = false)"
  },
  {
    "label": "IsDevelopersFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDevelopersFolder(const FStringView InPath)"
  },
  {
    "label": "IsPluginFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginFolder(const FStringView InPath, EPluginLoadedFrom* OutPluginSource = nullptr)"
  },
  {
    "label": "GetPluginForFolder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPlugin>)",
    "insertText": "GetPluginForFolder(const FStringView InPath)"
  },
  {
    "label": "GetObjectsInAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectsInAssetData(const TArray<FAssetData>& AssetList, TArray<UObject*>& OutDroppedObjects)"
  },
  {
    "label": "IsValidFolderName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFolderName(const FString& FolderName, FText& Reason)"
  },
  {
    "label": "DoesFolderExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesFolderExist(const FString& FolderPath)"
  },
  {
    "label": "GetPathColor()",
    "kind": "Method",
    "detail": "Function (TOptional<FLinearColor>)",
    "insertText": "GetPathColor(const FString& FolderPath)"
  },
  {
    "label": "SetPathColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPathColor(const FString& FolderPath, TOptional<FLinearColor> FolderColor)"
  },
  {
    "label": "HasCustomColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomColors(TArray< FLinearColor >* OutColors = NULL)"
  },
  {
    "label": "GetDefaultColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetDefaultColor()"
  },
  {
    "label": "IsValidObjectPathForCreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidObjectPathForCreate(const FString& ObjectPath, FText& OutErrorMessage, bool bAllowExistingAsset = false)"
  },
  {
    "label": "IsValidObjectPathForCreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidObjectPathForCreate(const FString& ObjectPath, const UClass* ObjectClass, FText& OutErrorMessage, bool bAllowExistingAsset = false)"
  },
  {
    "label": "IsValidFolderPathForCreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFolderPathForCreate(const FString& FolderPath, const FString& NewFolderName, FText& OutErrorMessage)"
  },
  {
    "label": "GetPackagePathWithinRoot()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackagePathWithinRoot(const FString& PackageName)"
  },
  {
    "label": "GetPackageLengthForCooking()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPackageLengthForCooking(const FString& PackageName, bool bIsInternalBuild)"
  },
  {
    "label": "IsValidPackageForCooking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPackageForCooking(const FString& PackageName, FText& OutErrorMessage)"
  },
  {
    "label": "GetMaxAssetPathLen()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxAssetPathLen()"
  },
  {
    "label": "GetMaxCookPathLen()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxCookPathLen()"
  },
  {
    "label": "SyncPackagesFromSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SyncPackagesFromSourceControl(const TArray<FString>& PackageNames)"
  },
  {
    "label": "SyncPathsFromSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SyncPathsFromSourceControl(const TArray<FString>& Paths)"
  },
  {
    "label": "SyncRevisionFromSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SyncRevisionFromSourceControl(const FString& Revision)"
  },
  {
    "label": "SyncLatestFromSourceControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SyncLatestFromSourceControl()"
  },
  {
    "label": "ShowErrorNotifcation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowErrorNotifcation(const FText& InErrorMsg)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAlwaysShowPath, const FString&)"
  },
  {
    "label": "OnAlwaysShowPath()",
    "kind": "Method",
    "detail": "Function (FOnAlwaysShowPath&)",
    "insertText": "OnAlwaysShowPath()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (using FMovedContentFolder = TTuple<FString,FString> ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnFolderPathChanged, TArrayView<const FMovedContentFolder>)"
  },
  {
    "label": "OnFolderPathChanged()",
    "kind": "Method",
    "detail": "Function (FOnFolderPathChanged&)",
    "insertText": "OnFolderPathChanged()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSyncStart)"
  },
  {
    "label": "OnSyncStart()",
    "kind": "Method",
    "detail": "Function (FOnSyncStart&)",
    "insertText": "OnSyncStart()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSyncFinish, bool , const TArray<FString>*)"
  },
  {
    "label": "OnSyncFinish()",
    "kind": "Method",
    "detail": "Function (FOnSyncFinish&)",
    "insertText": "OnSyncFinish()"
  }
]