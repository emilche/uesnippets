[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__range_adaptor_closure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__range_adaptor_closure"
  },
  {
    "label": "_Fn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn"
  },
  {
    "label": "__range_adaptor_closure_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__range_adaptor_closure_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_RANGE_ADAPTOR_H # define _LIBCPP___RANGES_RANGE_ADAPTOR_H # include<__config> # include<__functional / compose . h> # include<__functional / invoke . h> # include<__ranges / concepts . h> # include<__utility / forward . h> # include<__utility / move . h> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__range_adaptor_closure_t()",
    "kind": "Method",
    "detail": "Function (template<class _Fn> struct __range_adaptor_closure_t : _Fn,__range_adaptor_closure<__range_adaptor_closure_t<_Fn>> {)",
    "insertText": "__range_adaptor_closure_t(_Fn&& __f) : _Fn(std::move(__f))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Tp> concept _RangeAdaptorClosure = derived_from<remove_cvref_t<_Tp>,__range_adaptor_closure<remove_cvref_t<_Tp>>> ; template<class _Tp> struct __range_adaptor_closure { template<ranges::viewable_range _View,_RangeAdaptorClosure _Closure> requires same_as<_Tp,remove_cvref_t<_Closure>>&& invocable<_Closure,_View> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator|(_View&& __view, _Closure&& __closure) noexcept(is_nothrow_invocable_v<_Closure, _View>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<_RangeAdaptorClosure _Closure,_RangeAdaptorClosure _OtherClosure> requires same_as<_Tp,remove_cvref_t<_Closure>>&& constructible_from<decay_t<_Closure>,_Closure>&& constructible_from<decay_t<_OtherClosure>,_OtherClosure> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator(_Closure&& __c1, _OtherClosure&& __c2) noexcept(is_nothrow_constructible_v<decay_t<_Closure>, _Closure> && is_nothrow_constructible_v<decay_t<_OtherClosure>, _OtherClosure>)"
  }
]