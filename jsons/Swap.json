[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___UTILITY_SWAP_H # define _LIBCPP___UTILITY_SWAP_H # include<__config> # include<__utility / declval . h> # include<__utility / move . h> # include<cstddef> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (# else template<class> using __swap_result_t = void ; # endif template<class _Tp> _LIBCPP_INLINE_VISIBILITY __swap_result_t<_Tp> _LIBCPP_CONSTEXPR_AFTER_CXX17)",
    "insertText": "swap(_Tp& __x, _Tp& __y) _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value)"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (_Tp)",
    "insertText": "__t(_VSTD::move(__x))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__x =)",
    "insertText": "move(__y)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__y =)",
    "insertText": "move(__t)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,size_t _Np> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 enable_if<__is_swappable<_Tp>::value>::type)",
    "insertText": "swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__a[__i], __b[__i])"
  }
]