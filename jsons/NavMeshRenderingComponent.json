[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "ARecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARecastNavMesh"
  },
  {
    "label": "FColoredMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoredMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UNavMeshRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavMeshRenderingComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavMeshSceneProxyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshSceneProxyData"
  },
  {
    "label": "FDebugMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugMeshData"
  },
  {
    "label": "FDebugPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugPoint"
  },
  {
    "label": "FDebugText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugText"
  },
  {
    "label": "FNavTileRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavTileRef"
  },
  {
    "label": "FRecastInternalDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastInternalDebugData"
  },
  {
    "label": "FNavMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshSceneProxy"
  },
  {
    "label": "FNavMeshDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshDebugDrawDelegateHelper"
  },
  {
    "label": "FDebugPoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / EngineTypes . h \" # include \" PrimitiveViewRelevance . h \" # include \" MaterialShared . h \" # include \" DynamicMeshBuilder . h \" # include \" DebugRenderSceneProxy . h \" # include \" Debug / DebugDrawComponent . h \" # include \" MeshBatch . h \" # include \" LocalVertexFactory . h \" # include \" Math / GenericOctree . h \" # include \" StaticMeshResources . h \" # include \" NavigationSystemTypes . h \" # include \" Templates / UnrealTemplate . h \" # include \" NavMeshRenderingComponent . generated . h \" class APlayerController ; class ARecastNavMesh ; class FColoredMaterialRenderProxy ; class FMeshElementCollector ; class FPrimitiveDrawInterface ; class UCanvas ; class UNavMeshRenderingComponent ; enum class ENavMeshDetailFlags : uint8 { TriangleEdges,PolyEdges,BoundaryEdges,FilledPolys,TileBounds,PathCollidingGeometry,TileLabels,PolygonLabels,PolygonCost,PolygonFlags,PathLabels,NavLinks,FailedNavLinks,Clusters,NavOctree,NavOctreeDetails,MarkForbiddenPolys,TileBuildTimes,TileBuildTimesHeatMap,TileResolutions } ; struct FNavMeshSceneProxyData : public TSharedFromThis<FNavMeshSceneProxyData,ESPMode::ThreadSafe> { struct FDebugMeshData { TArray<FDynamicMeshVertex> Vertices ; TArray<uint32> Indices ; FColor ClusterColor ; } ; TArray<FDebugMeshData> MeshBuilders ; struct FDebugPoint {)",
    "insertText": "FDebugPoint(const FVector& InPosition, const FColor& InColor, const float InSize) : Position(InPosition), Color(InColor), Size(InSize)"
  },
  {
    "label": "FDebugText()",
    "kind": "Method",
    "detail": "Function (} FVector Position ; FColor Color ; float Size = 0 . f ; } ; TArray<FDebugRenderSceneProxy::FDebugLine> ThickLineItems ; TArray<FDebugRenderSceneProxy::FDebugLine> TileEdgeLines ; TArray<FDebugRenderSceneProxy::FDebugLine> NavMeshEdgeLines ; TArray<FDebugRenderSceneProxy::FDebugLine> NavLinkLines ; TArray<FDebugRenderSceneProxy::FDebugLine> ClusterLinkLines ; TArray<FDebugRenderSceneProxy::FDebugLine> AuxLines ; TArray<FDebugPoint> AuxPoints ; TArray<FDebugRenderSceneProxy::FDebugBox> AuxBoxes ; TArray<FDebugRenderSceneProxy::FMesh> Meshes ; struct FDebugText { FVector Location ; FString Text ;)",
    "insertText": "FDebugText()"
  },
  {
    "label": "FDebugText()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugText(const FVector& InLocation, const FString& InText) : Location(InLocation), Text(InText)"
  },
  {
    "label": "FDebugText()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugText(const FString& InText) : Location(FNavigationSystem::InvalidLocation), Text(InText)"
  },
  {
    "label": "FNavMeshSceneProxyData()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FDebugText> DebugLabels ; TArray<FBoxCenterAndExtent> OctreeBounds ; FBox Bounds ; FVector NavMeshDrawOffset ; uint32 bDataGathered : 1 ; uint32 bNeedsNewData : 1 ; int32 NavDetailFlags ;)",
    "insertText": "FNavMeshSceneProxyData() : NavMeshDrawOffset(0, 0, 10.f), bDataGathered(false), bNeedsNewData(true), NavDetailFlags(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GatherData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherData(const ARecastNavMesh* NavMesh, int32 InNavDetailFlags, const TArray<struct FNavTileRef>& TileSet)"
  },
  {
    "label": "AddMeshForInternalData()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA void)",
    "insertText": "AddMeshForInternalData(const struct FRecastInternalDebugData& InInternalData)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# endif # endif } ; class FNavMeshSceneProxy final : public FDebugRenderSceneProxy,public FNoncopyable { class FNavMeshDebugDrawDelegateHelper ; public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FNavMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavMeshSceneProxy(const UPrimitiveComponent* InComponent, FNavMeshSceneProxyData* InProxyData, bool ForceToRender = false)"
  },
  {
    "label": "FNavMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNavMeshSceneProxy()"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (protected : FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSizeInternal()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSizeInternal(void)"
  },
  {
    "label": "FNavMeshDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (private : FNavMeshSceneProxyData ProxyData ; FDynamicMeshIndexBuffer32 IndexBuffer ; FStaticMeshVertexBuffers VertexBuffers ; FLocalVertexFactory VertexFactory ; TArray<TUniquePtr<FColoredMaterialRenderProxy>> MeshColors ; TArray<FMeshBatchElement> MeshBatchElements ; FDebugDrawDelegate DebugTextDrawingDelegate ; FDelegateHandle DebugTextDrawingDelegateHandle ; TWeakObjectPtr<UNavMeshRenderingComponent> RenderingComponent ; uint32 bForceRendering : 1 ; uint32 bSkipDistanceCheck : 1 ; uint32 bUseThickLines : 1 ; } ; # if WITH_RECAST&& UE_ENABLE_DEBUG_DRAWING class FNavMeshDebugDrawDelegateHelper : public FDebugDrawDelegateHelper { typedef FDebugDrawDelegateHelper Super ; public :)",
    "insertText": "FNavMeshDebugDrawDelegateHelper() : bForceRendering(false) , bNeedsNewData(false)"
  },
  {
    "label": "SetupFromProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupFromProxy(const FNavMeshSceneProxy* InSceneProxy)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DebugLabels .)",
    "insertText": "Append(InSceneProxy->ProxyData.DebugLabels)"
  },
  {
    "label": "DrawDebugLabels()",
    "kind": "Method",
    "detail": "Function (bNeedsNewData = true ; } protected : void)",
    "insertText": "DrawDebugLabels(UCanvas* Canvas, APlayerController*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : TArray<FNavMeshSceneProxyData::FDebugText> DebugLabels ; uint32 bForceRendering : 1 ; uint32 bNeedsNewData : 1 ; } ; # endif)",
    "insertText": "UCLASS(editinlinenew, ClassGroup = Debug, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: void ForceUpdate()"
  },
  {
    "label": "IsForcingUpdate()",
    "kind": "Method",
    "detail": "Function (bForceUpdate = true ; } bool)",
    "insertText": "IsForcingUpdate()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "CreateDebugSceneProxy()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING FDebugRenderSceneProxy*)",
    "insertText": "CreateDebugSceneProxy()"
  },
  {
    "label": "GetDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (# if WITH_RECAST FDebugDrawDelegateHelper&)",
    "insertText": "GetDebugDrawDelegateHelper()"
  },
  {
    "label": "GatherData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherData(const ARecastNavMesh& NavMesh, FNavMeshSceneProxyData& OutProxyData)"
  },
  {
    "label": "TimerFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimerFunction()"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (protected : uint32 bCollectNavigationData : 1 ; uint32 bForceUpdate : 1 ; FTimerHandle TimerHandle ; protected : # if WITH_RECAST&& UE_ENABLE_DEBUG_DRAWING FNavMeshDebugDrawDelegateHelper NavMeshDebugDrawDelegateManager ; # endif } ; namespace FNavMeshRenderingHelpers { void)",
    "insertText": "AddVertex(FNavMeshSceneProxyData::FDebugMeshData& MeshData, const FVector& Pos, const FColor Color = FColor::White)"
  },
  {
    "label": "AddTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleIndices(FNavMeshSceneProxyData::FDebugMeshData& MeshData, int32 V0, int32 V1, int32 V2)"
  }
]