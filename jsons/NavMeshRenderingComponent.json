[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "ARecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARecastNavMesh"
  },
  {
    "label": "FColoredMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoredMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UNavMeshRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavMeshRenderingComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavMeshSceneProxyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMeshSceneProxyData"
  },
  {
    "label": "FDebugMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugMeshData"
  },
  {
    "label": "FDebugPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugPoint"
  },
  {
    "label": "FDebugText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugText"
  },
  {
    "label": "FNavTileRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavTileRef"
  },
  {
    "label": "FRecastInternalDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastInternalDebugData"
  },
  {
    "label": "FNavMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshSceneProxy"
  },
  {
    "label": "FNavMeshDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshDebugDrawDelegateHelper"
  },
  {
    "label": "FNavMeshDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshDebugDrawDelegateHelper"
  },
  {
    "label": "UNavMeshRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavMeshRenderingComponent"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GatherData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherData(const ARecastNavMesh* NavMesh, int32 InNavDetailFlags, const TArray<int32>& TileSet)"
  },
  {
    "label": "GatherData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherData(const ARecastNavMesh* NavMesh, int32 InNavDetailFlags, const TArray<struct FNavTileRef>& TileSet)"
  },
  {
    "label": "AddMeshForInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshForInternalData(const struct FRecastInternalDebugData& InInternalData)"
  },
  {
    "label": "FNavMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavMeshSceneProxy(const UPrimitiveComponent* InComponent, FNavMeshSceneProxyData* InProxyData, bool ForceToRender = false)"
  },
  {
    "label": "IsNavigationShowFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationShowFlagSet(const UWorld* World)"
  },
  {
    "label": "TimerFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimerFunction()"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVertex(FNavMeshSceneProxyData::FDebugMeshData& MeshData, const FVector& Pos, const FColor Color = FColor::White)"
  },
  {
    "label": "AddTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangleIndices(FNavMeshSceneProxyData::FDebugMeshData& MeshData, int32 V0, int32 V1, int32 V2)"
  }
]