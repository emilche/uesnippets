[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQuery"
  },
  {
    "label": "FAbstractNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbstractNavigationPath"
  },
  {
    "label": "FAbstractQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAbstractQueryFilter"
  },
  {
    "label": "AAbstractNavData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAbstractNavData"
  },
  {
    "label": "FAbstractNavigationPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AI / Navigation / NavQueryFilter . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" AI / Navigation / NavigationTypes . h \" # endif # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" Math / Box . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" Math / UnrealMathSSE . h \" # endif # include \" Math / Vector . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" NavigationData . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" AbstractNavData . generated . h \" class UClass ; class UObject ; struct FPathFindingQuery ; struct FAbstractNavigationPath : public FNavigationPath { typedef FNavigationPath Super ;)",
    "insertText": "FAbstractNavigationPath()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (const FNavPathType Type ; } ; class FAbstractQueryFilter : public INavigationQueryFilterInterface { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetAreaCost()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAreaCost(uint8 AreaType, float Cost)"
  },
  {
    "label": "SetFixedAreaEnteringCost()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFixedAreaEnteringCost(uint8 AreaType, float Cost)"
  },
  {
    "label": "SetExcludedArea()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExcludedArea(uint8 AreaType)"
  },
  {
    "label": "SetAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllAreaCosts(const float* CostArray, const int32 Count)"
  },
  {
    "label": "GetAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllAreaCosts(float* CostArray, float* FixedCostArray, const int32 Count)"
  },
  {
    "label": "SetBacktrackingEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBacktrackingEnabled(const bool bBacktracking)"
  },
  {
    "label": "IsBacktrackingEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBacktrackingEnabled()"
  },
  {
    "label": "GetIncludeFlags()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetIncludeFlags()"
  },
  {
    "label": "GetExcludeFlags()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetExcludeFlags()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: NAVIGATIONSYSTEM_API AAbstractNavData(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "SupportsExternalPackaging()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "SupportsExternalPackaging()"
  },
  {
    "label": "FindMoveAlongSurface()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "FindMoveAlongSurface(const FNavLocation& StartLocation, const FVector& TargetPosition, FNavLocation& OutLocation, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (} ; FNavLocation)",
    "insertText": "GetRandomPoint(FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRandomReachablePointInRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "CalcPathCost()",
    "kind": "Method",
    "detail": "Function (} ENavigationQueryResult::Type)",
    "insertText": "CalcPathCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL)"
  },
  {
    "label": "OnNavAreaRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNavAreaRemoved(const UClass* NavAreaClass)"
  },
  {
    "label": "IsNodeRefValid()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsNodeRefValid(NavNodeRef NodeRef)"
  },
  {
    "label": "TestPathAbstract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestPathAbstract(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "RaycastAbstract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastAbstract(const ANavigationData* NavDataInstance, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  },
  {
    "label": "RaycastAbstract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastAbstract(const ANavigationData* NavDataInstance, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  }
]