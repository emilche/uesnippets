[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFontOutlineSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontOutlineSettings"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Fonts / CompositeFont . h \" # include \" HAL / IConsoleManager . h \" # include \" SlateFontInfo . generated . h \" namespace FontConstants { const uint32 RenderDPI = 9 6 ; } enum class EFontFallback : uint8 { FF_NoFallback,FF_LastResortFallback,FF_Max } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=OutlineSettings, meta=(ClampMin=\"0\", ClampMax=\"1024\"))"
  },
  {
    "label": "FFontOutlineSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFontOutlineSettings() : OutlineSize(0) , bMiteredCorners(false) , bSeparateFillAlpha(false) , bApplyOutlineToDropShadows(false) , OutlineMaterial(nullptr) , OutlineColor(FLinearColor::Black)"
  },
  {
    "label": "FFontOutlineSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFontOutlineSettings(int32 InOutlineSize, FLinearColor InColor = FLinearColor::Black) : OutlineSize(InOutlineSize) , bMiteredCorners(false) , bSeparateFillAlpha(false) , bApplyOutlineToDropShadows(false) , OutlineMaterial(nullptr) , OutlineColor(InColor)"
  },
  {
    "label": "IsIdenticalToForCaching()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIdenticalToForCaching(const FFontOutlineSettings& Other)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(OutlineSettings.OutlineSize))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(OutlineSettings.bMiteredCorners))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(OutlineSettings.bSeparateFillAlpha))"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=SlateStyleRules, meta=(AllowedClasses=\"/Script/Engine.Font\", DisplayName=\"Font Family\"))"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FSlateFontInfo()"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateFontInfo(TSharedPtr<const FCompositeFont> InCompositeFont, const float InSize, const FName& InTypefaceFontName = NAME_None, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateFontInfo(const UObject* InFontObject, const float InSize, const FName& InTypefaceFontName = NAME_None, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateFontInfo(const FString& InFontName, float InSize, EFontHinting InHinting = EFontHinting::Default, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateFontInfo(const FName& InFontName, float InSize, EFontHinting InHinting = EFontHinting::Default)"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateFontInfo(const ANSICHAR* InFontName, float InSize, EFontHinting InHinting = EFontHinting::Default)"
  },
  {
    "label": "FSlateFontInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateFontInfo(const WIDECHAR* InFontName, float InSize, EFontHinting InHinting = EFontHinting::Default)"
  },
  {
    "label": "IsLegacyIdenticalTo()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsLegacyIdenticalTo(const FSlateFontInfo& Other)"
  },
  {
    "label": "IsIdenticalTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIdenticalTo(const FSlateFontInfo& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSlateFontInfo& Other)"
  },
  {
    "label": "HasValidFont()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidFont()"
  },
  {
    "label": "GetCompositeFont()",
    "kind": "Method",
    "detail": "Function (const FCompositeFont*)",
    "insertText": "GetCompositeFont()"
  },
  {
    "label": "GetClampSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClampSize()"
  },
  {
    "label": "GetClampSkew()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClampSkew()"
  },
  {
    "label": "GetLegacyTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLegacyTypeHash(const FSlateFontInfo& FontInfo)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.FontObject))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.CompositeFont))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.TypefaceFontName))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.GetClampSize()))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.FontMaterial))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.LetterSpacing))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.GetClampSkew()))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(FontInfo.OutlineSettings))"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "UpgradeLegacyFontInfo()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpgradeLegacyFontInfo(FName LegacyFontName, EFontHinting LegacyHinting)"
  }
]