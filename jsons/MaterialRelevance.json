[
  {
    "label": "FPrimitiveViewRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveViewRelevance"
  },
  {
    "label": "FMaterialRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialRelevance"
  },
  {
    "label": "FMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FPrimitiveViewRelevance ; struct FMaterialRelevance { union { struct { uint16 ShadingModelMask ; uint8 SubstrateUintPerPixel ; uint8 SubstrateClosureCountMask ; uint8 bUsesComplexSpecialRenderPath : 1 ; uint8 bOpaque : 1 ; uint8 bMasked : 1 ; uint8 bDistortion : 1 ; uint8 bHairStrands : 1 ; uint8 bTwoSided : 1 ; uint8 bSeparateTranslucency : 1 ; uint8 bTranslucencyModulate : 1 ; uint8 bPostMotionBlurTranslucency : 1 ; uint8 bNormalTranslucency : 1 ; uint8 bUsesSceneColorCopy : 1 ; uint8 bOutputsTranslucentVelocity : 1 ; uint8 bUsesGlobalDistanceField : 1 ; uint8 bUsesWorldPositionOffset : 1 ; uint8 bUsesDisplacement : 1 ; uint8 bUsesPixelDepthOffset : 1 ; uint8 bUsesCustomizedUVs : 1 ; uint8 bUsesVertexInterpolator : 1 ; uint8 bDecal : 1 ; uint8 bTranslucentSurfaceLighting : 1 ; uint8 bUsesSceneDepth : 1 ; uint8 bUsesSkyMaterial : 1 ; uint8 bUsesSingleLayerWaterMaterial : 1 ; uint8 bHasVolumeMaterialDomain : 1 ; uint8 CustomDepthStencilUsageMask : 2 ; uint8 bUsesDistanceCullFade : 1 ; uint8 bDisableDepthTest : 1 ; uint8 bUsesAnisotropy : 1 ; uint8 bIsLightFunctionAtlasCompatible : 1 ; } ; uint64 Raw ; } ;)",
    "insertText": "FMaterialRelevance() : Raw(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMaterialRelevance&)",
    "insertText": "operator(const FMaterialRelevance& B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const uint8 LocalSubstrateUintPerPixel = SubstrateUintPerPixel ; Raw | = B . Raw ; SubstrateUintPerPixel =)",
    "insertText": "Max(LocalSubstrateUintPerPixel, B.SubstrateUintPerPixel)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(FMaterialRelevance) == sizeof(FMaterialRelevance::Raw), \"Union Raw type is too small\")"
  }
]