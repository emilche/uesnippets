[
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FMixerBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerBuffer"
  },
  {
    "label": "FProceduralAudioTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProceduralAudioTaskData"
  },
  {
    "label": "FDecodeAudioTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecodeAudioTaskData"
  },
  {
    "label": "FHeaderParseAudioTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeaderParseAudioTaskData"
  },
  {
    "label": "FProceduralAudioTaskResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProceduralAudioTaskResults"
  },
  {
    "label": "FDecodeAudioTaskResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecodeAudioTaskResults"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IAudioTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioTask"
  },
  {
    "label": "FProceduralAudioTaskData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Queue . h \" # include \" Sound / SoundWaveProcedural . h \" # include \" Sound / SoundGenerator . h \" # include \" AudioDecompress . h \" # include \" AudioMixerBuffer . h \" class USoundWave ; namespace Audio { class FMixerBuffer ; struct FProceduralAudioTaskData { USoundWave* ProceduralSoundWave ; ISoundGeneratorPtr SoundGenerator ; float* AudioData ; int32 NumSamples ; int32 NumChannels ; bool bForceSyncDecode ;)",
    "insertText": "FProceduralAudioTaskData() : ProceduralSoundWave(nullptr) , AudioData(nullptr) , NumSamples(0) , NumChannels(0) , bForceSyncDecode(false)"
  },
  {
    "label": "FDecodeAudioTaskData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDecodeAudioTaskData { float* AudioData ; ICompressedAudioInfo* DecompressionState ; Audio::EBufferType::Type BufferType ; int32 NumChannels ; int32 NumPrecacheFrames ; int32 NumFramesToDecode ; bool bLoopingMode ; bool bSkipFirstBuffer ; bool bForceSyncDecode ;)",
    "insertText": "FDecodeAudioTaskData() : AudioData(nullptr) , DecompressionState(nullptr) , BufferType(Audio::EBufferType::Invalid) , NumChannels(0) , NumPrecacheFrames(0) , NumFramesToDecode(0) , bLoopingMode(false) , bSkipFirstBuffer(false) , bForceSyncDecode(false)"
  },
  {
    "label": "FHeaderParseAudioTaskData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FHeaderParseAudioTaskData { FMixerBuffer* MixerBuffer ; USoundWave* SoundWave ;)",
    "insertText": "FHeaderParseAudioTaskData() : MixerBuffer(nullptr) , SoundWave(nullptr)"
  },
  {
    "label": "FProceduralAudioTaskResults()",
    "kind": "Method",
    "detail": "Function (} } ; struct FProceduralAudioTaskResults { int32 NumSamplesWritten ; bool bIsFinished ; float RelativeRenderCost = 1 . f ; # if ENABLE_AUDIO_DEBUG double CPUDuration = 0 . 0 ; # endif)",
    "insertText": "FProceduralAudioTaskResults() : NumSamplesWritten(0) , bIsFinished(false)"
  },
  {
    "label": "FDecodeAudioTaskResults()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDecodeAudioTaskResults { bool bIsFinishedOrLooped ; # if ENABLE_AUDIO_DEBUG double CPUDuration = 0 ; # endif)",
    "insertText": "FDecodeAudioTaskResults() : bIsFinishedOrLooped(false)"
  },
  {
    "label": "IAudioTask()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EAudioTaskType { Procedural,Header,Decode,Invalid,} ; class IAudioTask { public : ~)",
    "insertText": "IAudioTask()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EAudioTaskType)",
    "insertText": "GetType()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "CancelTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTask()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResult(FProceduralAudioTaskResults& OutResult)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetResult(FDecodeAudioTaskResults& OutResult)"
  },
  {
    "label": "CreateAudioTask()",
    "kind": "Method",
    "detail": "Function (} ; } ; IAudioTask*)",
    "insertText": "CreateAudioTask(Audio::FDeviceId InDeviceId, const FHeaderParseAudioTaskData& InJobData)"
  },
  {
    "label": "CreateAudioTask()",
    "kind": "Method",
    "detail": "Function (IAudioTask*)",
    "insertText": "CreateAudioTask(Audio::FDeviceId InDeviceId, const FProceduralAudioTaskData& InJobData)"
  },
  {
    "label": "CreateAudioTask()",
    "kind": "Method",
    "detail": "Function (IAudioTask*)",
    "insertText": "CreateAudioTask(Audio::FDeviceId InDeviceId, const FDecodeAudioTaskData& InJobData)"
  },
  {
    "label": "CreateSynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSynchronizedAudioTaskQueue(AudioTaskQueueId QueueId)"
  },
  {
    "label": "DestroySynchronizedAudioTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySynchronizedAudioTaskQueue(AudioTaskQueueId QueueId, bool RunCurrentQueue = false)"
  },
  {
    "label": "KickQueuedTasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "KickQueuedTasks(AudioTaskQueueId QueueId)"
  }
]