[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "IObjectBindingExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IObjectBindingExtension"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IncrementTotalNodeCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementTotalNodeCount()"
  },
  {
    "label": "FilterInNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterInNode(UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension> InNodeWeak)"
  },
  {
    "label": "FilterOutNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutNode(UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::IOutlinerExtension> InNodeWeak)"
  },
  {
    "label": "FilterInParentChildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterInParentChildNodes(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode\n\t\t, const bool bInIncludeSelf, const bool bInIncludeParents, const bool bInIncludeChildren = false)"
  },
  {
    "label": "FilterInNodeWithAncestors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterInNodeWithAncestors(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode)"
  },
  {
    "label": "ResolveTrack()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::ITrackExtension>)",
    "insertText": "ResolveTrack(FSequencerTrackFilterType InNode)"
  }
]