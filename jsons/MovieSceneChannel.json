[
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FKeyDataOptimizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDataOptimizationParams"
  },
  {
    "label": "FMovieSceneChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannel"
  },
  {
    "label": "FKeyAddOrDeleteEventItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAddOrDeleteEventItem"
  },
  {
    "label": "FKeyMoveEventItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyMoveEventItem"
  },
  {
    "label": "FCycleParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCycleParams"
  },
  {
    "label": "FKeyAddOrDeleteEventItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Math / Range . h \" # include \" Misc / CoreDefines . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Curves / KeyHandle . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneChannel . generated . h \" struct FFrameNumber ; struct FFrameRate ; struct FKeyDataOptimizationParams ; struct FMovieSceneChannel ; struct FKeyAddOrDeleteEventItem {)",
    "insertText": "FKeyAddOrDeleteEventItem(int32 InIndex, FFrameNumber InFrame) : Index(InIndex), Frame(InFrame)"
  },
  {
    "label": "FKeyMoveEventItem()",
    "kind": "Method",
    "detail": "Function (} ; int32 Index ; FFrameNumber Frame ; ; } ; struct FKeyMoveEventItem {)",
    "insertText": "FKeyMoveEventItem(int32 InIndex, FFrameNumber InFrame, int32 InNewIndex, FFrameNumber InNewFrame) : Index(InIndex), Frame(InFrame), NewIndex(InNewIndex), NewFrame(InNewFrame)"
  },
  {
    "label": "FCycleParams()",
    "kind": "Method",
    "detail": "Function (} ; int32 Index ; FFrameNumber Frame ; int32 NewIndex ; FFrameNumber NewFrame ; } ; namespace UE { namespace MovieScene { struct FCycleParams { double ValueOffset ; FFrameTime Time ; int32 CycleCount ; int32 Duration ; bool bMirrorCurve ;)",
    "insertText": "FCycleParams(FFrameTime InTime, int32 InDuration) : ValueOffset(0.0) , Time(InTime) , CycleCount(0) , Duration(InDuration) , bMirrorCurve(false)"
  },
  {
    "label": "ComputePreValueOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputePreValueOffset(double FirstValue, double LastValue)"
  },
  {
    "label": "ValueOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueOffset(LastValue - FirstValue)"
  },
  {
    "label": "ComputePostValueOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputePostValueOffset(double FirstValue, double LastValue)"
  },
  {
    "label": "ShouldMirrorCurve()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldMirrorCurve()"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (bMirrorCurve = true ; const int64 Offset =)",
    "insertText": "int64(MaxFrame) - int64(Time.FrameNumber.Value)"
  },
  {
    "label": "FFrameTime()",
    "kind": "Method",
    "detail": "Function (Time =)",
    "insertText": "FFrameTime(MinFrame) + FFrameTime(static_cast<int32>(Offset)) - FFrameTime(0, Time.GetSubFrame())"
  },
  {
    "label": "CycleTime()",
    "kind": "Method",
    "detail": "Function (} } } ; FCycleParams)",
    "insertText": "CycleTime(FFrameNumber MinFrame, FFrameNumber MaxFrame, FFrameTime InTime)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneChannelDataKeyAddedEvent, FMovieSceneChannel*, const TArray<FKeyAddOrDeleteEventItem>& Items)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneChannelDataKeyDeletedEvent, FMovieSceneChannel*, const TArray<FKeyAddOrDeleteEventItem>& Items)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneChannelDataKeyMovedEvent, FMovieSceneChannel*, const TArray<FKeyMoveEventItem>& Items)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneChannel()"
  },
  {
    "label": "FMovieSceneChannel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMovieSceneChannel()"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeyTime(const FKeyHandle InHandle, FFrameNumber& OutKeyTime)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime(const FKeyHandle InHandle, const FFrameNumber InKeyTime)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeys(const TRange<FFrameNumber>& WithinRange, TArray<FFrameNumber>* OutKeyTimes, TArray<FKeyHandle>* OutKeyHandles)"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<FFrameNumber> OutKeyTimes)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyTimes(TArrayView<const FKeyHandle> InHandles, TArrayView<const FFrameNumber> InKeyTimes)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DuplicateKeys(TArrayView<const FKeyHandle> InHandles, TArrayView<FKeyHandle> OutNewHandles)"
  },
  {
    "label": "DeleteKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteKeys(TArrayView<const FKeyHandle> InHandles)"
  },
  {
    "label": "DeleteKeysFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteKeysFrom(FFrameNumber InTime, bool bDeleteKeysBefore)"
  },
  {
    "label": "ChangeFrameResolution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeFrameResolution(FFrameRate SourceRate, FFrameRate DestinationRate)"
  },
  {
    "label": "ComputeEffectiveRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "ComputeEffectiveRange()"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Offset(FFrameNumber DeltaPosition)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Optimize(const FKeyDataOptimizationParams& InParameters)"
  },
  {
    "label": "ClearDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDefault()"
  },
  {
    "label": "PostEditChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEditChange()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FKeyHandle)",
    "insertText": "GetHandle(int32 Index)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex(FKeyHandle Handle)"
  }
]