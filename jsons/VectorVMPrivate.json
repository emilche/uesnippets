[
  {
    "label": "FVectorVMContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMContext"
  },
  {
    "label": "FDummyHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDummyHandler"
  },
  {
    "label": "FVectorVMDebuggerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorVMDebuggerImpl"
  },
  {
    "label": "VectorVM",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorVM"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VectorVM . h \" # define ENABLE_VM_DEBUGGING 0 struct FVectorVMContext ; namespace VectorVM { enum { MaxInstanceSizeBytes = 4,} ; } struct FDummyHandler { void)",
    "insertText": "Advance()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "Get()"
  },
  {
    "label": "InitForScriptRun()",
    "kind": "Method",
    "detail": "Function (} TMap<int32,TArray<VectorVM::FOpDebugInfo>> DebugInfo ; EVectorVMOp CurrOp ; VectorVM::EVMType OpType ; int32 CurrNumArgs ; int32 CurrInstanceBase ; int32 NumInstancesPerOp ; int32 StartInstance ; VectorVM::FDebugValue CachedPreOpData [ NUM_VM_OP_DEBUG_VALUES ] ; public : void)",
    "insertText": "InitForScriptRun(int32 InStartInstance, const TArray<int32> InstancesToDebug)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (StartInstance = InStartInstance ; DebugInfo .)",
    "insertText": "Empty(InstancesToDebug.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DebugInfo .)",
    "insertText": "Add(i)"
  },
  {
    "label": "BeginOp()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BeginOp(FVectorVMContext& Context, VectorVM::EVMType InType, int32 InNumArgs, int32 InNumInstancesPerOp)"
  },
  {
    "label": "PreOp()",
    "kind": "Method",
    "detail": "Function (template<DstHandler,Arg0Handler,Arg1Handler = FDummyHandler,Arg2Handler = FDummyHandler,Arg3Handler = FDummyHandler> void)",
    "insertText": "PreOp(FVectorVMContext& Context, DstHandler& Dst, Arg0Handler& Arg, Arg1Handler& Arg1 = DummyHandler, Arg2Handler& Arg2 = DummyHandler, Arg3Handler& Arg3 = DummyHandler)"
  },
  {
    "label": "PostOp()",
    "kind": "Method",
    "detail": "Function (template<DstHandler,Arg0Handler,Arg1Handler = FDummyHandler,Arg2Handler = FDummyHandler,Arg3Handler = FDummyHandler> void)",
    "insertText": "PostOp(FVectorVMContext& Context, DstHandler& Dst, Arg0Handler& Arg, Arg1Handler& Arg1 = DummyHandler, Arg2Handler& Arg2 = DummyHandler, Arg3Handler& Arg3 = DummyHandler)"
  }
]