[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSampleBufferReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSampleBufferReader"
  },
  {
    "label": "FSampleBufferReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" SampleBuffer . h \" namespace Audio { namespace ESeekType { enum Type { FromBeginning,FromCurrentPosition,FromEnd } ; } class FSampleBufferReader { public :)",
    "insertText": "FSampleBufferReader()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const int32 InSampleRate)"
  },
  {
    "label": "SetBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuffer(const int16* InBufferPtr, const int32 InNumBufferSamples, const int32 InNumChannels, const int32 InBufferSampleRate)"
  },
  {
    "label": "SeekTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekTime(const float InTimeSec, const ESeekType::Type InSeekType = ESeekType::FromBeginning, const bool bWrap = true)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitch(const float InPitch, const float InterpolationTimeSec = 0.0f)"
  },
  {
    "label": "SetScrubMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubMode(const bool bInIsScrubMode)"
  },
  {
    "label": "SetScrubTimeWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScrubTimeWidth(const float InScrubTimeWidthSec)"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChannels()"
  },
  {
    "label": "HasBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBuffer()"
  },
  {
    "label": "GetSampleValueForChannel()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetSampleValueForChannel(const int32 Channel)"
  },
  {
    "label": "UpdateScrubMinAndMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrubMinAndMax()"
  },
  {
    "label": "UpdateSeekFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSeekFrame()"
  },
  {
    "label": "GetSampleValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleValue(const int16* InBuffer, const int32 SampleIndex)"
  }
]