[
  {
    "label": "FCurlHttpResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlHttpResponse"
  },
  {
    "label": "FCurlHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlHttpRequest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / SpscQueue . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" GenericPlatform / HttpRequestCommon . h \" # include \" GenericPlatform / HttpResponseCommon . h \" class FCurlHttpResponse ; # if WITH_CURL # if PLATFORM_MICROSOFT # include \" Microsoft / AllowMicrosoftPlatformTypes . h \" # endif # ifdef PLATFORM_CURL_INCLUDE # include PLATFORM_CURL_INCLUDE # else # include \" curl / curl . h \" # endif # if PLATFORM_MICROSOFT # include \" Microsoft / HideMicrosoftPlatformTypes . h \" # endif # if !)",
    "insertText": "defined(CURL_ENABLE_DEBUG_CALLBACK) #define CURL_ENABLE_DEBUG_CALLBACK 0 #endif #if !defined(CURL_ENABLE_NO_TIMEOUTS_OPTION)"
  },
  {
    "label": "CurlMalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CurlMalloc(size_t Size)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Networking/Curl\"))"
  },
  {
    "label": "CurlFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CurlFree(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "CurlRealloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "CurlRealloc(void* Ptr, size_t Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* Return = NULL ;)",
    "insertText": "if(Size)"
  },
  {
    "label": "CurlStrdup()",
    "kind": "Method",
    "detail": "Function (} return Return ; } char*)",
    "insertText": "CurlStrdup(const char * ZeroTerminatedString)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (char* Copy = NULL ;)",
    "insertText": "check(ZeroTerminatedString)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (SIZE_T StrLen =)",
    "insertText": "Strlen(ZeroTerminatedString)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (Copy = reinterpret_cast<)",
    "insertText": "char(FMemory::Malloc(StrLen + 1))"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcpy(Copy, StrLen, ZeroTerminatedString)"
  },
  {
    "label": "CurlCalloc()",
    "kind": "Method",
    "detail": "Function (} } return Copy ; } void*)",
    "insertText": "CurlCalloc(size_t NumElems, size_t ElemSize)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Return, Size)"
  },
  {
    "label": "GetURL()",
    "kind": "Method",
    "detail": "Function (} } return Return ; } } PRAGMA_DISABLE_DEPRECATION_WARNINGS class FCurlHttpRequest : public FHttpRequestCommon PRAGMA_ENABLE_DEPRECATION_WARNINGS { public : class FCurlHttpResponse ; FString)",
    "insertText": "GetURL()"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHeader(const FString& HeaderName)"
  },
  {
    "label": "GetAllHeaders()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAllHeaders()"
  },
  {
    "label": "GetContentType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentType()"
  },
  {
    "label": "GetContentLength()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetContentLength()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetContent()"
  },
  {
    "label": "GetVerb()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVerb()"
  },
  {
    "label": "SetVerb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerb(const FString& InVerb)"
  },
  {
    "label": "SetURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURL(const FString& InURL)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(const FName Option, const FString& OptionValue)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(const TArray<uint8>& ContentPayload)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TArray<uint8>&& ContentPayload)"
  },
  {
    "label": "SetContentAsString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentAsString(const FString& ContentString)"
  },
  {
    "label": "SetContentAsStreamedFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetContentAsStreamedFile(const FString& Filename)"
  },
  {
    "label": "SetContentFromStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetContentFromStream(TSharedRef<FArchive, ESPMode::ThreadSafe> Stream)"
  },
  {
    "label": "SetHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeader(const FString& HeaderName, const FString& HeaderValue)"
  },
  {
    "label": "AppendToHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToHeader(const FString& HeaderName, const FString& AdditionalHeaderValue)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRequest()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "StartThreadedRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartThreadedRequest()"
  },
  {
    "label": "FinishRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRequest()"
  },
  {
    "label": "IsThreadedRequestComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadedRequestComplete()"
  },
  {
    "label": "TickThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickThreadedRequest(float DeltaSeconds)"
  },
  {
    "label": "SetupRequestHttpThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupRequestHttpThread()"
  },
  {
    "label": "CleanupRequestHttpThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRequestHttpThread()"
  },
  {
    "label": "GetEasyHandle()",
    "kind": "Method",
    "detail": "Function (CURL*)",
    "insertText": "GetEasyHandle()"
  },
  {
    "label": "SetAddToCurlMultiResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddToCurlMultiResult(CURLMcode Result)"
  },
  {
    "label": "FCurlHttpRequest()",
    "kind": "Method",
    "detail": "Function (CurlAddToMultiResult = Result ; })",
    "insertText": "FCurlHttpRequest()"
  },
  {
    "label": "StaticUploadCallback()",
    "kind": "Method",
    "detail": "Function (private : size_t)",
    "insertText": "StaticUploadCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes, void* UserData)"
  },
  {
    "label": "UploadCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "UploadCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes)"
  },
  {
    "label": "StaticSeekCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StaticSeekCallback(void* UserData, curl_off_t Offset, int Origin)"
  },
  {
    "label": "SeekCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SeekCallback(curl_off_t Offset, int Origin)"
  },
  {
    "label": "StaticReceiveResponseHeaderCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StaticReceiveResponseHeaderCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes, void* UserData)"
  },
  {
    "label": "ReceiveResponseHeaderCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReceiveResponseHeaderCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes)"
  },
  {
    "label": "StaticReceiveResponseBodyCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StaticReceiveResponseBodyCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes, void* UserData)"
  },
  {
    "label": "ReceiveResponseBodyCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReceiveResponseBodyCallback(void* Ptr, size_t SizeInBlocks, size_t BlockSizeInBytes)"
  },
  {
    "label": "StaticDebugCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StaticDebugCallback(CURL * Handle, curl_infotype DebugInfoType, char * DebugInfo, size_t DebugInfoSize, void* UserData)"
  },
  {
    "label": "DebugCallback()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DebugCallback(CURL * Handle, curl_infotype DebugInfoType, char * DebugInfo, size_t DebugInfoSize)"
  },
  {
    "label": "SetupRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupRequest()"
  },
  {
    "label": "AbortRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortRequest()"
  },
  {
    "label": "CheckProgressDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckProgressDelegate()"
  },
  {
    "label": "BroadcastNewlyReceivedHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastNewlyReceivedHeaders()"
  },
  {
    "label": "CombineHeaderKeyValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CombineHeaderKeyValue(const FString& HeaderKey, const FString& HeaderValue)"
  },
  {
    "label": "CleanupRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRequest()"
  },
  {
    "label": "OnAnyActivityOccur()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnyActivityOccur(FStringView Reason)"
  },
  {
    "label": "ClearInCaseOfRetry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInCaseOfRetry()"
  },
  {
    "label": "CreateResponse()",
    "kind": "Method",
    "detail": "Function (FHttpResponsePtr)",
    "insertText": "CreateResponse()"
  },
  {
    "label": "MockResponseData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockResponseData()"
  },
  {
    "label": "GetContentAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentAsString()"
  },
  {
    "label": "FCurlHttpResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCurlHttpResponse(const FCurlHttpRequest& InRequest)"
  }
]