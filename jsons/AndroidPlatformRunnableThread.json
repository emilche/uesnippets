[
  {
    "label": "FRunnableThreadAndroid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThreadAndroid"
  },
  {
    "label": "FRunnableThreadAndroid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Runtime / Core / Private / HAL / PThreadRunnableThread . h \" # include \" Android / AndroidPlatformMisc . h \" # include \" AndroidPlatform . h \" class FRunnableThreadAndroid : public FRunnableThreadPThread { enum { AndroidThreadNameLimit = 1 5 } ; public :)",
    "insertText": "FRunnableThreadAndroid() : FRunnableThreadPThread()"
  },
  {
    "label": "FRunnableThreadAndroid()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRunnableThreadAndroid()"
  },
  {
    "label": "FRunnableThreadPThread_DestructorBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRunnableThreadPThread_DestructorBody()"
  },
  {
    "label": "PreRun()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PreRun()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString SizeLimitedThreadName = ThreadName ;)",
    "insertText": "if(SizeLimitedThreadName.Len() > AndroidThreadNameLimit)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (SizeLimitedThreadName = SizeLimitedThreadName .)",
    "insertText": "Replace(TEXT(\"Thread\"), TEXT(\"\"))"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (SizeLimitedThreadName = SizeLimitedThreadName .)",
    "insertText": "Replace(TEXT(\"Runnable\"), TEXT(\"\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString Temp = SizeLimitedThreadName ; const TCHAR Dash [ ] =)",
    "insertText": "TEXT(\"-\")"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (const int32 DashLen =)",
    "insertText": "UE_ARRAY_COUNT(Dash)"
  },
  {
    "label": "NumToLeave()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumToLeave(AndroidThreadNameLimit - DashLen)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (SizeLimitedThreadName = Temp .)",
    "insertText": "Left(AndroidThreadNameLimit - (NumToLeave + DashLen))"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (SizeLimitedThreadName + = Dash ; SizeLimitedThreadName + = Temp .)",
    "insertText": "Right(NumToLeave)"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SetThreadName(*SizeLimitedThreadName)"
  },
  {
    "label": "AdjustStackSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AdjustStackSize(uint32 InStackSize)"
  },
  {
    "label": "AdjustStackSize()",
    "kind": "Method",
    "detail": "Function (InStackSize =)",
    "insertText": "AdjustStackSize(InStackSize)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (InStackSize = 1 2 8* 1 0 2 4 ; } return InStackSize ; } # if ANDROID_USE_NICE_VALUE_THREADPRIORITY int32 ErrorLogLimit = 5 ; void)",
    "insertText": "SetThreadPriority(pthread_t InThread, EThreadPriority NewPriority)"
  }
]