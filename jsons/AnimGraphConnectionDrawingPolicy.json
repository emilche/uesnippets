[
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FConnectionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectionParams"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "FAnimGraphConnectionDrawingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimGraphConnectionDrawingPolicy"
  },
  {
    "label": "FAnimGraphConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimationPins / SGraphPinPose . h \" # include \" BlueprintConnectionDrawingPolicy . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Delegates / IDelegateInstance . h \" # include \" HAL / Platform . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" class FArrangedWidget ; class FSlateRect ; class FSlateWindowElementList ; class SWidget ; class UEdGraph ; class UEdGraphPin ; struct FConnectionParams ; struct FLinearColor ; class FAnimGraphConnectionDrawingPolicy : public FKismetConnectionDrawingPolicy { public :)",
    "insertText": "FAnimGraphConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float ZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements, UEdGraph* InGraphObj)"
  },
  {
    "label": "TreatWireAsExecutionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TreatWireAsExecutionPin(UEdGraphPin* InputPin, UEdGraphPin* OutputPin)"
  },
  {
    "label": "BuildExecutionRoadmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildExecutionRoadmap()"
  },
  {
    "label": "DetermineStyleOfExecWire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineStyleOfExecWire(float& Thickness, FLinearColor& WireColor, bool& bDrawBubbles, const FTimePair& Times)"
  },
  {
    "label": "DrawConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConnection(int32 LayerId, const FVector2D& Start, const FVector2D& End, const FConnectionParams& Params)"
  },
  {
    "label": "BuildPinToPinWidgetMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPinToPinWidgetMap(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries)"
  },
  {
    "label": "ApplyHoverDeemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHoverDeemphasis(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, float& Thickness, FLinearColor& WireColor)"
  }
]