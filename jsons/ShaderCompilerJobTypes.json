[
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderPipelineCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCompileJob"
  },
  {
    "label": "FShaderCacheSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCacheSerializeContext"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "FShaderMapCompileResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderMapCompileResults"
  },
  {
    "label": "FPendingShaderMapCompileResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingShaderMapCompileResults"
  },
  {
    "label": "FShaderJobCacheRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderJobCacheRef"
  },
  {
    "label": "FShaderJobDataBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderJobDataBlock"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileJobKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompileJobKey"
  },
  {
    "label": "FShaderPipelineCompileJobKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPipelineCompileJobKey"
  },
  {
    "label": "FShaderMapCompileResults()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / PlatformTime . h \" # include \" Hash / Blake3 . h \" # include \" Shader . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderPreprocessTypes . h \" # include \" VertexFactory . h \" # include \" Templates / Function . h \" class FShaderCommonCompileJob ; class FShaderCompileJob ; class FShaderPipelineCompileJob ; struct FShaderCacheSerializeContext ; namespace UE::DerivedData { class FRequestOwner ; } struct FShaderMapCompileResults {)",
    "insertText": "FShaderMapCompileResults() : bAllJobsSucceeded(true), bSkipResultProcessing(false), TimeStarted(FPlatformTime::Seconds()), bIsHung(false)"
  },
  {
    "label": "CheckIfHung()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckIfHung()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<class FShaderCommonCompileJob>> FinishedJobs ; FThreadSafeCounter NumPendingJobs ; bool bAllJobsSucceeded ; bool bSkipResultProcessing ; double TimeStarted ; bool bIsHung ; } ; struct FPendingShaderMapCompileResults : public FShaderMapCompileResults,public FRefCountBase { } ; using FPendingShaderMapCompileResultsPtr = TRefCountPtr<FPendingShaderMapCompileResults> ; struct FShaderJobCacheRef { struct FShaderJobDataBlock* Block = nullptr ; int32 IndexInBlock = INDEX_NONE ; int32 DuplicateIndex = INDEX_NONE ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (FPendingShaderMapCompileResultsPtr PendingShaderMap ; FThreadSafeCounter NumRefs ; int32 JobIndex ; uint32 Hash ; uint32 Id ; EShaderCompileJobType Type ; EShaderCompileJobPriority Priority ; EShaderCompileJobPriority PendingPriority ; EShaderCompilerWorkerType CurrentWorker ; TPimplPtr<UE::DerivedData::FRequestOwner> RequestOwner ; uint8 bFinalized : 1 ; uint8 bSucceeded : 1 ; uint8 bErrorsAreLikelyToBeCode : 1 ; uint8 bReleased : 1 ; uint8 bInputHashSet : 1 ; uint8 bIsDefaultMaterial : 1 ; uint8 bIsGlobalShader : 1 ; FShaderCompilerInputHash InputHash ; double TimeAddedToPendingQueue = 0 . 0 ; double TimeAssignedToExecution = 0 . 0 ; double TimeExecutionCompleted = 0 . 0 ; double TimeTaskSubmitJobs = 0 . 0 ; double TimeTaskSubmitJobsStall = 0 . 0 ; FShaderJobCacheRef JobCacheRef ; uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Refs =)",
    "insertText": "uint32(NumRefs.Decrement())"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} return Refs ; } uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "GetInputHash()",
    "kind": "Method",
    "detail": "Function (} FShaderCompilerInputHash)",
    "insertText": "GetInputHash()"
  },
  {
    "label": "SerializeOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeOutput(FShaderCacheSerializeContext& Ctx)"
  },
  {
    "label": "GetSingleShaderJob()",
    "kind": "Method",
    "detail": "Function (} FShaderCompileJob*)",
    "insertText": "GetSingleShaderJob()"
  },
  {
    "label": "GetShaderPipelineJob()",
    "kind": "Method",
    "detail": "Function (FShaderPipelineCompileJob*)",
    "insertText": "GetShaderPipelineJob()"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComplete()"
  },
  {
    "label": "AppendDebugName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDebugName(FStringBuilderBase& OutName)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FShaderCommonCompileJob& Rhs)"
  },
  {
    "label": "ForEachSingleShaderJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSingleShaderJob(const TFunction<void(const FShaderCompileJob& SingleJob)>& Predicate)"
  },
  {
    "label": "ForEachSingleShaderJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachSingleShaderJob(const TFunction<void(FShaderCompileJob& SingleJob)>& Predicate)"
  },
  {
    "label": "GetNextJobId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextJobId()"
  },
  {
    "label": "FShaderCommonCompileJob()",
    "kind": "Method",
    "detail": "Function (protected : class FShaderCompilingManager ; class FShaderPipelineCompileJob ;)",
    "insertText": "FShaderCommonCompileJob(EShaderCompileJobType InType, uint32 InHash, uint32 InId, EShaderCompileJobPriority InPriority) : NumRefs(0), JobIndex(INDEX_NONE), Hash(InHash), Id(InId), Type(InType), Priority(InPriority), PendingPriority(EShaderCompileJobPriority::None), CurrentWorker(EShaderCompilerWorkerType::None), bFinalized(false), bSucceeded(false), bErrorsAreLikelyToBeCode(false), bReleased(false), bInputHashSet(false), bIsDefaultMaterial(false), bIsGlobalShader(false)"
  },
  {
    "label": "FShaderCommonCompileJob()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FShaderCommonCompileJob()"
  },
  {
    "label": "FShaderCompileJobKey()",
    "kind": "Method",
    "detail": "Function (} ; using FShaderCommonCompileJobPtr = TRefCountPtr<FShaderCommonCompileJob> ; struct FShaderCompileJobKey {)",
    "insertText": "FShaderCompileJobKey(const FShaderType* InType = nullptr, const FVertexFactoryType* InVFType = nullptr, int32 InPermutationId = 0) : ShaderType(InType), VFType(InVFType), PermutationId(InPermutationId)"
  },
  {
    "label": "MakeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "MakeHash(uint32 Id)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FShaderType* ShaderType ; const FVertexFactoryType* VFType ; int32 PermutationId ; bool)",
    "insertText": "operator(const FShaderCompileJobKey& Lhs, const FShaderCompileJobKey& Rhs)"
  },
  {
    "label": "SerializeOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeOutput(FShaderCacheSerializeContext& Ctx, int32 CodeIndex)"
  },
  {
    "label": "SerializeOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeOutput(Ctx, 0)"
  },
  {
    "label": "SerializeWorkerOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWorkerOutput(FArchive& Ar)"
  },
  {
    "label": "SerializeWorkerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWorkerInput(FArchive& Ar)"
  },
  {
    "label": "GetFinalSourceView()",
    "kind": "Method",
    "detail": "Function (FString Empty ; return Empty ; } FStringView)",
    "insertText": "GetFinalSourceView()"
  },
  {
    "label": "FShaderCompileJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompileJob() : FShaderCommonCompileJob(Type, 0u, 0u, EShaderCompileJobPriority::Num)"
  },
  {
    "label": "FShaderCompileJob()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCompileJob(uint32 InHash, uint32 InId, EShaderCompileJobPriority InPriroity, const FShaderCompileJobKey& InKey) : FShaderCommonCompileJob(Type, InHash, InId, InPriroity), Key(InKey)"
  },
  {
    "label": "FShaderPipelineCompileJobKey()",
    "kind": "Method",
    "detail": "Function (} } ; struct FShaderPipelineCompileJobKey {)",
    "insertText": "FShaderPipelineCompileJobKey(const FShaderPipelineType* InType = nullptr, const FVertexFactoryType* InVFType = nullptr, int32 InPermutationId = 0) : ShaderPipeline(InType), VFType(InVFType), PermutationId(InPermutationId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FShaderPipelineType* ShaderPipeline ; const FVertexFactoryType* VFType ; int32 PermutationId ; bool)",
    "insertText": "operator(const FShaderPipelineCompileJobKey& Lhs, const FShaderPipelineCompileJobKey& Rhs)"
  },
  {
    "label": "FShaderPipelineCompileJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderPipelineCompileJob(int32 NumStages)"
  },
  {
    "label": "FShaderPipelineCompileJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderPipelineCompileJob(uint32 InHash, uint32 InId, EShaderCompileJobPriority InPriroity, const FShaderPipelineCompileJobKey& InKey)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "FShaderPipelineCompileJob()",
    "kind": "Method",
    "detail": "Function (break ; case EShaderCompileJobType::Pipeline : delete static_cast<const)",
    "insertText": "FShaderPipelineCompileJob(this)"
  },
  {
    "label": "ForEachSingleShaderJob()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachSingleShaderJob(const TFunction<void(const FShaderCompileJob&)>& Function)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(*SingleJob)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const FShaderPipelineCompileJob* PipelineJob = GetShaderPipelineJob())"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(*SingleStageJob)"
  },
  {
    "label": "ForEachSingleShaderJob()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ForEachSingleShaderJob(const TFunction<void(FShaderCompileJob&)>& Function)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FShaderPipelineCompileJob* PipelineJob = GetShaderPipelineJob())"
  }
]