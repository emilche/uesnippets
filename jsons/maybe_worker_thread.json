[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "MaybeWorkerThread()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_UTILITY_MAYBE_WORKER_THREAD_H_ # define MODULES_UTILITY_MAYBE_WORKER_THREAD_H_ # include<memory> # include \" absl / strings / string_view . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RTC_LOCKABLE MaybeWorkerThread { public :)",
    "insertText": "MaybeWorkerThread(const FieldTrialsView& field_trials, absl::string_view task_queue_name, TaskQueueFactory* factory)"
  },
  {
    "label": "MaybeWorkerThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MaybeWorkerThread()"
  },
  {
    "label": "RunOrPost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunOrPost(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "RunSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSynchronous(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "TaskQueueForDelayedTasks()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "TaskQueueForDelayedTasks()"
  },
  {
    "label": "TaskQueueForPost()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "TaskQueueForPost()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (absl::AnyInvocable<)",
    "insertText": "void() &&> MaybeSafeTask( rtc::scoped_refptr<PendingTaskSafetyFlag> flag, absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  }
]