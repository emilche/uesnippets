[
  {
    "label": "TestTurnRedirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestTurnRedirector"
  },
  {
    "label": "TestTurnServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestTurnServer"
  },
  {
    "label": "TestTurnRedirector()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TEST_TURN_SERVER_H_ # define P2P_BASE_TEST_TURN_SERVER_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / sequence_checker . h \" # include \" api / transport / stun . h \" # include \" p2p / base / basic_packet_socket_factory . h \" # include \" p2p / base / turn_server . h \" # include \" rtc_base / async_udp_socket . h \" # include \" rtc_base / ssl_adapter . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / thread . h \" namespace cricket { const char kTestRealm [ ] = \" example . org \" ; const char kTestSoftware [ ] = \" TestTurnServer \" ; class TestTurnRedirector : public TurnRedirectInterface { public :)",
    "insertText": "TestTurnRedirector(const std::vector<rtc::SocketAddress>& addresses) : alternate_server_addresses_(addresses), iter_(alternate_server_addresses_.begin())"
  },
  {
    "label": "ShouldRedirect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRedirect(const rtc::SocketAddress&, rtc::SocketAddress* out)"
  },
  {
    "label": "AddInternalSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternalSocket(int_addr, int_protocol, ignore_bad_cert, common_name)"
  },
  {
    "label": "SetExternalSocketFactory()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "SetExternalSocketFactory(new rtc::BasicPacketSocketFactory(socket_factory), udp_ext_addr)"
  },
  {
    "label": "set_realm()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_realm(kTestRealm)"
  },
  {
    "label": "set_software()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_software(kTestSoftware)"
  },
  {
    "label": "set_auth_hook()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_auth_hook(this)"
  },
  {
    "label": "TestTurnServer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TestTurnServer()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(thread_checker_.IsCurrent())"
  },
  {
    "label": "set_enable_otu_nonce()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_enable_otu_nonce(bool enable)"
  },
  {
    "label": "set_enable_otu_nonce()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_enable_otu_nonce(enable)"
  },
  {
    "label": "server()",
    "kind": "Method",
    "detail": "Function (} TurnServer*)",
    "insertText": "server()"
  },
  {
    "label": "set_redirect_hook()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_redirect_hook(redirect_hook)"
  },
  {
    "label": "set_enable_permission_checks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_enable_permission_checks(bool enable)"
  },
  {
    "label": "set_enable_permission_checks()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "set_enable_permission_checks(enable)"
  },
  {
    "label": "AddInternalSocket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddInternalSocket(const rtc::SocketAddress& int_addr, ProtocolType proto, bool ignore_bad_cert = true, absl::string_view common_name = \"test turn server\")"
  },
  {
    "label": "AddInternalSocket()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "AddInternalSocket(rtc::AsyncUDPSocket::Create(socket_factory_, int_addr), proto)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(proto == cricket::PROTO_TCP || proto == cricket::PROTO_TLS)"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (rtc::Socket* socket = socket_factory_ ->)",
    "insertText": "CreateSocket(AF_INET, SOCK_STREAM)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (socket ->)",
    "insertText": "Bind(int_addr)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (socket ->)",
    "insertText": "Listen(5)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::SSLAdapterFactory> ssl_adapter_factory = rtc::)",
    "insertText": "Create()"
  },
  {
    "label": "SetRole()",
    "kind": "Method",
    "detail": "Function (ssl_adapter_factory ->)",
    "insertText": "SetRole(rtc::SSL_SERVER)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (ssl_adapter_factory ->)",
    "insertText": "SetIdentity(rtc::SSLIdentity::Create(common_name, rtc::KeyParams()))"
  },
  {
    "label": "SetIgnoreBadCert()",
    "kind": "Method",
    "detail": "Function (ssl_adapter_factory ->)",
    "insertText": "SetIgnoreBadCert(ignore_bad_cert)"
  },
  {
    "label": "AddInternalServerSocket()",
    "kind": "Method",
    "detail": "Function (server_ .)",
    "insertText": "AddInternalServerSocket(socket, proto, std::move(ssl_adapter_factory))"
  },
  {
    "label": "AddInternalServerSocket()",
    "kind": "Method",
    "detail": "Function (} else { server_ .)",
    "insertText": "AddInternalServerSocket(socket, proto)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "FindAllocation()",
    "kind": "Method",
    "detail": "Function (} } TurnServerAllocation*)",
    "insertText": "FindAllocation(const rtc::SocketAddress& src)"
  },
  {
    "label": "allocations()",
    "kind": "Method",
    "detail": "Function (const TurnServer::AllocationMap& map = server_ .)",
    "insertText": "allocations()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} } return NULL ; } private : bool)",
    "insertText": "GetKey(absl::string_view username, absl::string_view realm, std::string* key)"
  }
]