[
  {
    "label": "DataType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataType"
  },
  {
    "label": "TTripleBufferedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTripleBufferedData"
  },
  {
    "label": "DataTypeWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataTypeWrapper"
  },
  {
    "label": "TTripleBufferedData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" namespace Chaos { template<class DataType> class TTripleBufferedData { public :)",
    "insertText": "TTripleBufferedData() : ProducerThreadBuffer(&Buffers[0]) , ConsumerThreadBuffer(&Buffers[1]) , Interchange(&Buffers[2]) , Counter(0) , LastId(0)"
  },
  {
    "label": "ExchangeProducerBuffer()",
    "kind": "Method",
    "detail": "Function (} DataType*)",
    "insertText": "ExchangeProducerBuffer()"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (ProducerThreadBuffer = Interchange .)",
    "insertText": "Exchange(ProducerThreadBuffer)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (ProducerThreadBuffer -> Value = TUniquePtr<)",
    "insertText": "DataType(new DataType())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ProducerThreadBuffer -> Id = + + Counter ; return ProducerThreadBuffer -> Value .)",
    "insertText": "Get()"
  },
  {
    "label": "ExchangeConsumerBuffer()",
    "kind": "Method",
    "detail": "Function (} DataType*)",
    "insertText": "ExchangeConsumerBuffer()"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (ConsumerThreadBuffer = Interchange .)",
    "insertText": "Exchange(ConsumerThreadBuffer)"
  },
  {
    "label": "TTripleBufferedData()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TTripleBufferedData(TTripleBufferedData&& Other)"
  },
  {
    "label": "TTripleBufferedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTripleBufferedData(const TTripleBufferedData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTripleBufferedData&)",
    "insertText": "operator(TTripleBufferedData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TTripleBufferedData&)",
    "insertText": "operator(const TTripleBufferedData&)"
  },
  {
    "label": "DataTypeWrapper()",
    "kind": "Method",
    "detail": "Function (struct DataTypeWrapper {)",
    "insertText": "DataTypeWrapper() : Value(nullptr) , Id(0)"
  },
  {
    "label": "DataTypeWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DataTypeWrapper(const DataTypeWrapper&)"
  },
  {
    "label": "DataTypeWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataTypeWrapper(DataTypeWrapper&& Other) : Value(MoveTemp(Other.Value)) , Id(MoveTemp(Other.Id))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const DataTypeWrapper& Other)"
  },
  {
    "label": "DataTypeWrapper()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<DataType> Value ; uint64 Id ; } ; DataTypeWrapper Buffers [ 3 ] = {)",
    "insertText": "DataTypeWrapper(), DataTypeWrapper(), DataTypeWrapper()"
  }
]