[
  {
    "label": "SpectralCorrelator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpectralCorrelator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SPECTRAL_FEATURES_INTERNAL_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SPECTRAL_FEATURES_INTERNAL_H_ # include<stddef . h> # include<array> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / agc2 / rnn_vad / common . h \" namespace webrtc { namespace rnn_vad { int kOpusBands24kHz = 2 0 ;)",
    "insertText": "static_assert(kOpusBands24kHz < kNumBands, \"The number of bands at 24 kHz must be less than those defined \" \"in the Opus scale at 48 kHz.\")"
  },
  {
    "label": "GetOpusScaleNumBins24kHz20ms()",
    "kind": "Method",
    "detail": "Function (std::array<int,kOpusBands24kHz - 1>)",
    "insertText": "GetOpusScaleNumBins24kHz20ms()"
  },
  {
    "label": "SpectralCorrelator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpectralCorrelator(const SpectralCorrelator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpectralCorrelator&)",
    "insertText": "operator(const SpectralCorrelator&)"
  },
  {
    "label": "SpectralCorrelator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SpectralCorrelator()"
  },
  {
    "label": "ComputeAutoCorrelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAutoCorrelation(rtc::ArrayView<const float> x, rtc::ArrayView<float, kOpusBands24kHz> auto_corr)"
  },
  {
    "label": "ComputeCrossCorrelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCrossCorrelation(rtc::ArrayView<const float> x, rtc::ArrayView<const float> y, rtc::ArrayView<float, kOpusBands24kHz> cross_corr)"
  },
  {
    "label": "ComputeSmoothedLogMagnitudeSpectrum()",
    "kind": "Method",
    "detail": "Function (private : const std::vector<float> weights_ ; } ; void)",
    "insertText": "ComputeSmoothedLogMagnitudeSpectrum(rtc::ArrayView<const float> bands_energy, rtc::ArrayView<float, kNumBands> log_bands_energy)"
  },
  {
    "label": "ComputeDctTable()",
    "kind": "Method",
    "detail": "Function (std::array<float,kNumBands* kNumBands>)",
    "insertText": "ComputeDctTable()"
  },
  {
    "label": "ComputeDct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDct(rtc::ArrayView<const float> in, rtc::ArrayView<const float, kNumBands * kNumBands> dct_table, rtc::ArrayView<float> out)"
  }
]