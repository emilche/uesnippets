[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRayTracingAccelerationStructureSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingAccelerationStructureSize"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRayTracingSkinnedGeometryUpdateQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingSkinnedGeometryUpdateQueue"
  },
  {
    "label": "FRayTracingUpdateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingUpdateInfo"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHIDefinitions . h \" # include \" RenderGraphDefinitions . h \" # if RHI_RAYTRACING enum class EAccelerationStructureBuildMode ; struct FRayTracingAccelerationStructureSize ; class FRayTracingGeometry ; class FRDGBuilder ; class FRHIBuffer ; class FRHICommandList ; class FRayTracingSkinnedGeometryUpdateQueue { public : void)",
    "insertText": "Add(FRayTracingGeometry* InRayTracingGeometry, const FRayTracingAccelerationStructureSize& StructureSize)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FRayTracingGeometry* RayTracingGeometry, uint32 EstimatedMemory = 0)"
  },
  {
    "label": "ComputeScratchBufferSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeScratchBufferSize()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit(FRDGBuilder& GraphBuilder, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  }
]