[
  {
    "label": "FConnectionCircularBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConnectionCircularBuffer"
  },
  {
    "label": "FBuiltInHttpClientPlatformSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuiltInHttpClientPlatformSocket"
  },
  {
    "label": "FBuiltInHttpClientPlatformSocketPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuiltInHttpClientPlatformSocketPool"
  },
  {
    "label": "FConnectionCircularBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BuiltInHttpClient . h \" # include \" Experimental / Async / ConditionVariable . h \" # include \" GenericPlatform / GenericPlatformHostCommunication . h \" # include \" GenericPlatform / GenericPlatformHostSocket . h \" # include \" Containers / LockFreeList . h \" # if ! UE_BUILD_SHIPPING class FConnectionCircularBuffer { public :)",
    "insertText": "FConnectionCircularBuffer(uint64 InCapacity) : CapacityMask(FMath::RoundUpToPowerOfTwo(InCapacity) - 1)"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (Allocation = new uint8 [)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "FConnectionCircularBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FConnectionCircularBuffer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] Allocation ; } uint8)",
    "insertText": "operator(uint64 Index)"
  },
  {
    "label": "DataOffset()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "DataOffset(Index + Tail) & (CapacityMask)"
  },
  {
    "label": "SpaceLeft()",
    "kind": "Method",
    "detail": "Function (Tail = 0 ; Head = 0 ; Size = 0 ; } uint64)",
    "insertText": "SpaceLeft()"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Peek(uint8* Data, const uint64 DataSize, uint64& OutSize)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (OutSize =)",
    "insertText": "Min(DataSize, Size)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (uint64 LenFromBegin = OutSize - LenToEnd ;)",
    "insertText": "Memcpy(Data, Allocation + Tail, LenToEnd)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data + LenToEnd, Allocation, LenFromBegin)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Memcpy(Data, Allocation + Tail, OutSize)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Consume(uint8* Data, const uint64 DataSize, uint64& OutSize)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Peek(Data, DataSize, OutSize)"
  },
  {
    "label": "Tail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tail(Tail + OutSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Size - = OutSize ;)",
    "insertText": "if(Size == 0)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (Head = 0 ; Tail = 0 ; } } bool)",
    "insertText": "Put(uint8* Data, uint64 DataSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (uint64 LenFromBegin = DataSize - LenToEnd ;)",
    "insertText": "Memcpy(Allocation + Head, Data, LenToEnd)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Allocation, Data + LenToEnd, LenFromBegin)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Memcpy(Allocation + Head, Data, DataSize)"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Head(Head + DataSize) & (CapacityMask)"
  },
  {
    "label": "FBuiltInHttpClientPlatformSocket()",
    "kind": "Method",
    "detail": "Function (Size + = DataSize ; return true ; } private : uint8* Allocation { nullptr } ; uint64 CapacityMask { 0 } ; uint64 Size { 0 } ; uint64 Head { 0 } ; uint64 Tail { 0 } ; } ; class FBuiltInHttpClientPlatformSocket : public IBuiltInHttpClientSocket { public :)",
    "insertText": "FBuiltInHttpClientPlatformSocket(IPlatformHostCommunication* InCommunication, IPlatformHostSocketPtr InSocket, int32 InProtocolNumber)"
  },
  {
    "label": "FBuiltInHttpClientPlatformSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuiltInHttpClientPlatformSocket()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const uint8* Data, const uint64 DataSize)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recv(uint8* Data, const uint64 DataSize, uint64& BytesRead, ESocketReceiveFlags::Type ReceiveFlags)"
  },
  {
    "label": "HasPendingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingData(uint64& PendingDataSize)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetProtocolNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProtocolNumber()"
  },
  {
    "label": "FBuiltInHttpClientPlatformSocketPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuiltInHttpClientPlatformSocketPool()"
  },
  {
    "label": "AcquireSocket()",
    "kind": "Method",
    "detail": "Function (IBuiltInHttpClientSocket*)",
    "insertText": "AcquireSocket(float TimeoutSeconds = -1.f)"
  },
  {
    "label": "ReleaseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSocket(IBuiltInHttpClientSocket* Socket, bool bKeepAlive)"
  }
]