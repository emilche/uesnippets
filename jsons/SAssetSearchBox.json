[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FAssetSearchBoxSuggestion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetSearchBoxSuggestion"
  },
  {
    "label": "EDITORWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORWIDGETS_API"
  },
  {
    "label": "FSuggestionListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestionListEntry"
  },
  {
    "label": "MakeSimpleSuggestion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Filters / SFilterSearchBox . h \" # include \" Framework / SlateDelegates . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" SlateFwd . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" class ITableRow ; class SMenuAnchor ; class STableViewBase ; struct FFocusEvent ; struct FGeometry ; struct FKeyEvent ; struct FAssetSearchBoxSuggestion { FString SuggestionString ; FText DisplayName ; FText CategoryName ; FAssetSearchBoxSuggestion)",
    "insertText": "MakeSimpleSuggestion(FString InSuggestionString)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FAssetSearchBoxSuggestion SimpleSuggestion ; SimpleSuggestion . SuggestionString =)",
    "insertText": "MoveTemp(InSuggestionString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (SimpleSuggestion . DisplayName =)",
    "insertText": "FromString(SimpleSuggestion.SuggestionString)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FText, FOnAssetSearchBoxSuggestionChosen, const FText& , const FString&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SAssetSearchBox : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAssetSearchBox) : _SuggestionListPlacement( MenuPlacement_BelowAnchor ) , _OnTextChanged() , _OnTextCommitted() , _InitialText() , _HintText() , _PossibleSuggestions(TArray<FAssetSearchBoxSuggestion>()) , _DelayChangeNotificationsWhileTyping( false ) , _MustMatchPossibleSuggestions( false ) , _ShowSearchHistory(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EMenuPlacement, SuggestionListPlacement ) SLATE_EVENT( FOnTextChanged, OnTextChanged ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_ATTRIBUTE( FText, InitialText ) SLATE_ATTRIBUTE( FText, HintText ) SLATE_ATTRIBUTE( TArray<FAssetSearchBoxSuggestion>, PossibleSuggestions ) SLATE_ATTRIBUTE( bool, DelayChangeNotificationsWhileTyping ) SLATE_ATTRIBUTE( bool, MustMatchPossibleSuggestions ) SLATE_EVENT( FOnAssetSearchBoxSuggestionFilter, OnAssetSearchBoxSuggestionFilter ) SLATE_EVENT( FOnAssetSearchBoxSuggestionChosen, OnAssetSearchBoxSuggestionChosen ) SLATE_EVENT( FOnKeyDown, OnKeyDownHandler ) SLATE_ATTRIBUTE(bool, ShowSearchHistory) SLATE_EVENT(SFilterSearchBox::FOnSaveSearchClicked, OnSaveSearchClicked) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FText& InError)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FString& InError)"
  },
  {
    "label": "SetOnSaveSearchHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnSaveSearchHandler(SFilterSearchBox::FOnSaveSearchClicked InOnSaveSearchHandler)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "HandleKeyDown()",
    "kind": "Method",
    "detail": "Function (private : struct FSuggestionListEntry { FString Suggestion ; FText DisplayName ; bool bIsHeader = false ; } ; FReply)",
    "insertText": "HandleKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextChanged(const FText& NewText)"
  },
  {
    "label": "HandleTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextCommitted(const FText& NewText, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FSuggestionListEntry> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "MakeSuggestionListItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeSuggestionListItemWidget(TSharedPtr<FSuggestionListEntry> Suggestion, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHighlightText()"
  },
  {
    "label": "UpdateSuggestionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSuggestionList()"
  },
  {
    "label": "FocusEditBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusEditBox()"
  },
  {
    "label": "GetSelectedSuggestion()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSuggestionListEntry>)",
    "insertText": "GetSelectedSuggestion()"
  },
  {
    "label": "DefaultSuggestionFilterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultSuggestionFilterImpl(const FText& SearchText, TArray<FAssetSearchBoxSuggestion>& PossibleSuggestions, FText& SuggestionHighlightText)"
  },
  {
    "label": "DefaultSuggestionChosenImpl()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "DefaultSuggestionChosenImpl(const FText& SearchText, const FString& Suggestion)"
  }
]