[
  {
    "label": "CefRequestContextHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRequestContextHandler"
  },
  {
    "label": "CefSchemeHandlerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefSchemeHandlerFactory"
  },
  {
    "label": "CefResolveCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefResolveCallback"
  },
  {
    "label": "CefRequestContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRequestContext"
  },
  {
    "label": "OnResolveCompleted()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CEF_REQUEST_CONTEXT_H_ # define CEF_INCLUDE_CEF_REQUEST_CONTEXT_H_ # pragma once # include<vector> # include \" include / cef_callback . h \" # include \" include / cef_cookie . h \" # include \" include / cef_extension . h \" # include \" include / cef_extension_handler . h \" # include \" include / cef_media_router . h \" # include \" include / cef_values . h \" class CefRequestContextHandler ; class CefSchemeHandlerFactory ; class CefResolveCallback : public CefBaseRefCounted { public : void)",
    "insertText": "OnResolveCompleted(cef_errorcode_t result, const std::vector<CefString>& resolved_ips)"
  },
  {
    "label": "GetGlobalContext()",
    "kind": "Method",
    "detail": "Function (} ; class CefRequestContext : public CefBaseRefCounted { public : CefRefPtr<CefRequestContext>)",
    "insertText": "GetGlobalContext()"
  },
  {
    "label": "CreateContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContext>)",
    "insertText": "CreateContext(const CefRequestContextSettings& settings, CefRefPtr<CefRequestContextHandler> handler)"
  },
  {
    "label": "CreateContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContext>)",
    "insertText": "CreateContext(CefRefPtr<CefRequestContext> other, CefRefPtr<CefRequestContextHandler> handler)"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(CefRefPtr<CefRequestContext> other)"
  },
  {
    "label": "IsSharingWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharingWith(CefRefPtr<CefRequestContext> other)"
  },
  {
    "label": "IsGlobal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlobal()"
  },
  {
    "label": "GetHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContextHandler>)",
    "insertText": "GetHandler()"
  },
  {
    "label": "GetCachePath()",
    "kind": "Method",
    "detail": "Function (CefString)",
    "insertText": "GetCachePath()"
  },
  {
    "label": "GetCookieManager()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefCookieManager>)",
    "insertText": "GetCookieManager(CefRefPtr<CefCompletionCallback> callback)"
  },
  {
    "label": "RegisterSchemeHandlerFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSchemeHandlerFactory(const CefString& scheme_name, const CefString& domain_name, CefRefPtr<CefSchemeHandlerFactory> factory)"
  },
  {
    "label": "ClearSchemeHandlerFactories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearSchemeHandlerFactories()"
  },
  {
    "label": "PurgePluginListCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgePluginListCache(bool reload_pages)"
  },
  {
    "label": "HasPreference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreference(const CefString& name)"
  },
  {
    "label": "GetPreference()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefValue>)",
    "insertText": "GetPreference(const CefString& name)"
  },
  {
    "label": "GetAllPreferences()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefDictionaryValue>)",
    "insertText": "GetAllPreferences(bool include_defaults)"
  },
  {
    "label": "CanSetPreference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetPreference(const CefString& name)"
  },
  {
    "label": "SetPreference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPreference(const CefString& name, CefRefPtr<CefValue> value, CefString& error)"
  },
  {
    "label": "ClearCertificateExceptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCertificateExceptions(CefRefPtr<CefCompletionCallback> callback)"
  },
  {
    "label": "ClearHttpAuthCredentials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHttpAuthCredentials(CefRefPtr<CefCompletionCallback> callback)"
  },
  {
    "label": "CloseAllConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllConnections(CefRefPtr<CefCompletionCallback> callback)"
  },
  {
    "label": "ResolveHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveHost(const CefString& origin, CefRefPtr<CefResolveCallback> callback)"
  },
  {
    "label": "LoadExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadExtension(const CefString& root_directory, CefRefPtr<CefDictionaryValue> manifest, CefRefPtr<CefExtensionHandler> handler)"
  },
  {
    "label": "DidLoadExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidLoadExtension(const CefString& extension_id)"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExtension(const CefString& extension_id)"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExtensions(std::vector<CefString>& extension_ids)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefExtension>)",
    "insertText": "GetExtension(const CefString& extension_id)"
  },
  {
    "label": "GetMediaRouter()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefMediaRouter>)",
    "insertText": "GetMediaRouter(CefRefPtr<CefCompletionCallback> callback)"
  }
]