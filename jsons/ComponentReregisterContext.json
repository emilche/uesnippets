[
  {
    "label": "FComponentReregisterContextBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentReregisterContextBase"
  },
  {
    "label": "FComponentReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentReregisterContext"
  },
  {
    "label": "FMultiComponentReregisterPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiComponentReregisterPair"
  },
  {
    "label": "FMultiComponentReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiComponentReregisterContext"
  },
  {
    "label": "FGlobalComponentReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalComponentReregisterContext"
  },
  {
    "label": "ComponentType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComponentType"
  },
  {
    "label": "TComponentReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TComponentReregisterContext"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" RenderingThread . h \" # include \" UObject / UObjectIterator . h \" # include \" Engine / World . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogActorComponent, Log, All)"
  },
  {
    "label": "UnRegister()",
    "kind": "Method",
    "detail": "Function (class FComponentReregisterContextBase { protected : TSet<FSceneInterface*>* ScenesToUpdateAllPrimitiveSceneInfos = nullptr ; UWorld*)",
    "insertText": "UnRegister(UActorComponent* InComponent)"
  },
  {
    "label": "ReRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReRegister(UActorComponent* InComponent, UWorld* InWorld)"
  },
  {
    "label": "FComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} ; class FComponentReregisterContext : public FComponentReregisterContextBase { private : TWeakObjectPtr<UActorComponent> Component ; TWeakObjectPtr<UWorld> World ; public :)",
    "insertText": "FComponentReregisterContext(UActorComponent* InComponent, TSet<FSceneInterface*>* InScenesToUpdateAllPrimitiveSceneInfos = nullptr) : World(nullptr)"
  },
  {
    "label": "UnRegister()",
    "kind": "Method",
    "detail": "Function (ScenesToUpdateAllPrimitiveSceneInfos = InScenesToUpdateAllPrimitiveSceneInfos ; World =)",
    "insertText": "UnRegister(InComponent)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Component = World .)",
    "insertText": "IsValid()"
  },
  {
    "label": "FComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FComponentReregisterContext()"
  },
  {
    "label": "ReRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReRegister(Component.Get(), World.Get())"
  },
  {
    "label": "FMultiComponentReregisterPair()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FMultiComponentReregisterPair { UActorComponent* Component ; UWorld* World ;)",
    "insertText": "FMultiComponentReregisterPair(UActorComponent* _Component, UWorld* _World) : Component(_Component), World(_World)"
  },
  {
    "label": "FMultiComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} } ; class FMultiComponentReregisterContext : public FComponentReregisterContextBase { private : TArray<FMultiComponentReregisterPair> ComponentsPair ; public :)",
    "insertText": "FMultiComponentReregisterContext(const TArray<UActorComponent*>& InComponents)"
  },
  {
    "label": "UnRegister()",
    "kind": "Method",
    "detail": "Function (UWorld* World =)",
    "insertText": "UnRegister(Component)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ComponentsPair .)",
    "insertText": "Push(FMultiComponentReregisterPair(Component, World))"
  },
  {
    "label": "FMultiComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "FMultiComponentReregisterContext()"
  },
  {
    "label": "pair()",
    "kind": "Method",
    "detail": "Function (FMultiComponentReregisterPair&)",
    "insertText": "pair(*Iter)"
  },
  {
    "label": "ReRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReRegister(pair.Component, pair.World)"
  },
  {
    "label": "FGlobalComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} } } } ; class FGlobalComponentReregisterContext { public :)",
    "insertText": "FGlobalComponentReregisterContext()"
  },
  {
    "label": "FGlobalComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGlobalComponentReregisterContext(const TArray<UClass*>& ExcludeComponents)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfos()",
    "kind": "Method",
    "detail": "Function (int32 ActiveGlobalReregisterContextCount ; private : TIndirectArray<FComponentReregisterContext> ComponentContexts ; TSet<FSceneInterface*> ScenesToUpdateAllPrimitiveSceneInfos ; void)",
    "insertText": "UpdateAllPrimitiveSceneInfos()"
  },
  {
    "label": "TComponentReregisterContext()",
    "kind": "Method",
    "detail": "Function (} ; template<class ComponentType> class TComponentReregisterContext { public :)",
    "insertText": "TComponentReregisterContext()"
  },
  {
    "label": "FlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderingCommands()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ComponentContexts .)",
    "insertText": "Add(new FComponentReregisterContext(*ComponentIt, &ScenesToUpdateAllPrimitiveSceneInfos))"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfosForScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfosForScenes(MoveTemp(ScenesToUpdateAllPrimitiveSceneInfos))"
  }
]