[
  {
    "label": "STimecode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimecode"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Misc / Attribute . h \" # include \" Misc / Timecode . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateColor . h \" class STimecode : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimecode) : _TimecodeColor(FLinearColor::White) , _DisplayLabel(true) , _LabelColor(FLinearColor::Gray)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo NormalFontInfo =)",
    "insertText": "Get().GetFontStyle(TEXT(\"NormalText\"))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_LabelFont = NormalFontInfo ; NormalFontInfo . Size + = 1 6 ; _TimecodeFont = NormalFontInfo ; })",
    "insertText": "SLATE_ATTRIBUTE(FTimecode, Timecode) SLATE_ATTRIBUTE(FSlateFontInfo, TimecodeFont) SLATE_ATTRIBUTE(FSlateColor, TimecodeColor) SLATE_ATTRIBUTE(bool, DisplayLabel) SLATE_ATTRIBUTE(FSlateFontInfo, LabelFont) SLATE_ATTRIBUTE(FSlateColor, LabelColor) SLATE_END_ARGS() TIMEMANAGEMENT_API STimecode()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  }
]