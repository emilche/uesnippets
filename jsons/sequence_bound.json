[
  {
    "label": "DefaultCrossThreadBindTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultCrossThreadBindTraits"
  },
  {
    "label": "CallbackType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackType"
  },
  {
    "label": "CrossThreadBindTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CrossThreadBindTraits"
  },
  {
    "label": "SequenceBound",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceBound"
  },
  {
    "label": "Binder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Binder"
  },
  {
    "label": "AsyncCallBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncCallBuilderBase"
  },
  {
    "label": "AsyncCallBuilderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncCallBuilderImpl"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncCallWithBoundArgsBuilderBase"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderDefault",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncCallWithBoundArgsBuilderDefault"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderVoid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncCallWithBoundArgsBuilderVoid"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SEQUENCE_BOUND_H_ # define BASE_THREADING_SEQUENCE_BOUND_H_ # include<new> # include<tuple> # include<type_traits> # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / callback_helpers . h \" # include \" base / check . h \" # include \" base / compiler_specific . h \" # include \" base / location . h \" # include \" base / memory / aligned_memory . h \" # include \" base / memory / ptr_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / run_loop . h \" # include \" base / sequence_checker . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / threading / sequenced_task_runner_handle . h \" namespace base { namespace internal { struct DefaultCrossThreadBindTraits { template<Signature> using CrossThreadTask = OnceCallback<Signature> ; template<Functor,. . . Args> auto)",
    "insertText": "BindOnce(Functor&& functor, Args&&... args)"
  },
  {
    "label": "Unretained()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "Unretained(T ptr)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} template<Signature> bool)",
    "insertText": "PostTask(SequencedTaskRunner& task_runner, const Location& location, CrossThreadTask<Signature>&& task)"
  },
  {
    "label": "PostTaskAndReply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PostTaskAndReply(SequencedTaskRunner& task_runner, const Location& location, OnceClosure&& task, OnceClosure&& reply)"
  },
  {
    "label": "PostTaskAndReplyWithResult()",
    "kind": "Method",
    "detail": "Function (} template<TaskReturnType,ReplyArgType> bool)",
    "insertText": "PostTaskAndReplyWithResult(SequencedTaskRunner& task_runner, const Location& location, OnceCallback<TaskReturnType()>&& task, OnceCallback<void(ReplyArgType)>&& reply)"
  },
  {
    "label": "SequenceBound()",
    "kind": "Method",
    "detail": "Function (} template<template<> class CallbackType> using EnableIfIsCrossThreadTask = EnableIfIsBaseCallback<CallbackType> ; } ; } template<T,class CrossThreadBindTraits = internal::DefaultCrossThreadBindTraits> class SequenceBound { public : template<Signature> using CrossThreadTask = CrossThreadBindTraits::template CrossThreadTask<Signature> ;)",
    "insertText": "SequenceBound()"
  },
  {
    "label": "SequenceBound()",
    "kind": "Method",
    "detail": "Function (template<. . . Args>)",
    "insertText": "SequenceBound(scoped_refptr<SequencedTaskRunner> task_runner, Args&&... args) : impl_task_runner_(std::move(task_runner))"
  },
  {
    "label": "AsyncConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncConstruct(std::forward<Args>(args)...)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SequenceBound()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SequenceBound(const SequenceBound&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceBound&)",
    "insertText": "operator(const SequenceBound&)"
  },
  {
    "label": "SequenceBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceBound(SequenceBound&& other)"
  },
  {
    "label": "MoveRecordFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveRecordFrom(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SequenceBound&)",
    "insertText": "operator(SequenceBound&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<From> SequenceBound&)",
    "insertText": "operator(SequenceBound<From, CrossThreadBindTraits>&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (impl_task_runner_ =)",
    "insertText": "move(task_runner)"
  },
  {
    "label": "AsyncCall()",
    "kind": "Method",
    "detail": "Function (} template<R,C,. . . Args,= std::enable_if_t<std::is_base_of_v<C,T>>> auto)",
    "insertText": "AsyncCall(R (C::*method)(Args...) const, const Location& location = Location::Current())"
  },
  {
    "label": "AsyncCall()",
    "kind": "Method",
    "detail": "Function (} template<R,C,. . . Args,= std::enable_if_t<std::is_base_of_v<C,T>>> auto)",
    "insertText": "AsyncCall(internal::IgnoreResultHelper<R (C::*)(Args...) const> method, const Location& location = Location::Current())"
  },
  {
    "label": "AsyncCall()",
    "kind": "Method",
    "detail": "Function (} template<R,C,. . . Args,= std::enable_if_t<std::is_base_of_v<C,T>>> auto)",
    "insertText": "AsyncCall(internal::IgnoreResultHelper<R (C::*)(Args...)> method, const Location& location = Location::Current())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using ConstPostTaskCallback = CrossThreadTask<)",
    "insertText": "void(const T&)"
  },
  {
    "label": "PostTaskWithThisObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTaskWithThisObject(ConstPostTaskCallback callback, const Location& location = Location::Current())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!is_null())"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*impl_task_runner_, location, CrossThreadBindTraits::BindOnce(std::move(callback), std::cref(*t_)))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using PostTaskCallback = CrossThreadTask<)",
    "insertText": "void(T*)"
  },
  {
    "label": "PostTaskWithThisObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTaskWithThisObject(PostTaskCallback callback, const Location& location = Location::Current())"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*impl_task_runner_, location, CrossThreadBindTraits::BindOnce(std::move(callback), CrossThreadBindTraits::Unretained(t_)))"
  },
  {
    "label": "FlushPostedTasksForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushPostedTasksForTesting()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (RunLoop run_loop ;)",
    "insertText": "PostTask(*impl_task_runner_, FROM_HERE, OnceClosure(run_loop.QuitClosure()))"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (run_loop .)",
    "insertText": "Run()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*impl_task_runner_, FROM_HERE, CrossThreadBindTraits::BindOnce( &DeleteOwnerRecord, CrossThreadBindTraits::Unretained(t_), CrossThreadBindTraits::Unretained(storage_)))"
  },
  {
    "label": "SynchronouslyResetForTest()",
    "kind": "Method",
    "detail": "Function (impl_task_runner_ = nullptr ; t_ = nullptr ; storage_ = nullptr ; } void)",
    "insertText": "SynchronouslyResetForTest()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (RunLoop run_loop ;)",
    "insertText": "PostTask(*impl_task_runner_, FROM_HERE, CrossThreadBindTraits::BindOnce( [](T* t, void* storage) { DeleteOwnerRecord(t, storage); }, t_, storage_) .Then(run_loop.QuitClosure()))"
  },
  {
    "label": "is_null()",
    "kind": "Method",
    "detail": "Function (impl_task_runner_ = nullptr ; t_ = nullptr ; storage_ = nullptr ; } bool)",
    "insertText": "is_null()"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (} private : template<U,class Binder> class SequenceBound ; template<template<> class CallbackType> using EnableIfIsCrossThreadTask = CrossThreadBindTraits::template EnableIfIsCrossThreadTask<CallbackType> ; template<. . . Args>)",
    "insertText": "NO_SANITIZE(\"cfi-unrelated-cast\") void AsyncConstruct(Args&&... args)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!t_)"
  },
  {
    "label": "AlignedAlloc()",
    "kind": "Method",
    "detail": "Function (storage_ =)",
    "insertText": "AlignedAlloc(sizeof(T), sizeof(void*) > alignof(T) ? sizeof(void*) : alignof(T))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (t_ = reinterpret_cast<)",
    "insertText": "T(storage_)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*impl_task_runner_, FROM_HERE, CrossThreadBindTraits::BindOnce(&ConstructOwnerRecord<Args...>, CrossThreadBindTraits::Unretained(t_), std::forward<Args>(args)...))"
  },
  {
    "label": "AsyncCallBuilderBase()",
    "kind": "Method",
    "detail": "Function (} template<MethodRef> class AsyncCallBuilderBase { protected :)",
    "insertText": "AsyncCallBuilderBase(const SequenceBound* sequence_bound, const Location* location, MethodRef method) : sequence_bound_(sequence_bound), location_(location), method_(method)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(sequence_bound_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(sequence_bound_->t_)"
  },
  {
    "label": "AsyncCallBuilderBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsyncCallBuilderBase(AsyncCallBuilderBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncCallBuilderBase&)",
    "insertText": "operator(AsyncCallBuilderBase&&)"
  },
  {
    "label": "AsyncCallBuilderImpl()",
    "kind": "Method",
    "detail": "Function (raw_ptr<const SequenceBound<T,CrossThreadBindTraits>,DanglingUntriaged> sequence_bound_ ; const raw_ptr<const Location> location_ ; MethodRef method_ ; } ; template<MethodRef,ReturnType,ArgsTuple> class AsyncCallBuilderImpl ; template<MethodRef> class AsyncCallBuilderImpl<MethodRef,void,std::tuple<>> : public AsyncCallBuilderBase<MethodRef> { public : using AsyncCallBuilderBase<MethodRef>::AsyncCallBuilderBase ; ~)",
    "insertText": "AsyncCallBuilderImpl()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*this->sequence_bound_->impl_task_runner_, *this->location_, CrossThreadBindTraits::BindOnce( this->method_, CrossThreadBindTraits::Unretained(this->sequence_bound_->t_)))"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Then(OnceClosure then_callback)"
  },
  {
    "label": "PostTaskAndThenHelper()",
    "kind": "Method",
    "detail": "Function (this -> sequence_bound_ ->)",
    "insertText": "PostTaskAndThenHelper(*this->location_, CrossThreadBindTraits::BindOnce( this->method_, CrossThreadBindTraits::Unretained(this->sequence_bound_->t_)), std::move(then_callback))"
  },
  {
    "label": "AsyncCallBuilderImpl()",
    "kind": "Method",
    "detail": "Function (this -> sequence_bound_ = nullptr ; } private : SequenceBound ;)",
    "insertText": "AsyncCallBuilderImpl(AsyncCallBuilderImpl&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncCallBuilderImpl&)",
    "insertText": "operator(AsyncCallBuilderImpl&&)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (\"<<\" make sure to invoke)",
    "insertText": "Then() or use base::IgnoreResult()"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} template<template<> class CallbackType,ThenArg,= EnableIfIsCrossThreadTask<CallbackType>> void)",
    "insertText": "Then(CallbackType<void(ThenArg)> then_callback)"
  },
  {
    "label": "WithArgs()",
    "kind": "Method",
    "detail": "Function (} template<. . . BoundArgs> auto)",
    "insertText": "WithArgs(BoundArgs&&... bound_args)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (const SequenceBound* const sequence_bound =)",
    "insertText": "exchange(this->sequence_bound_, nullptr)"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderBase()",
    "kind": "Method",
    "detail": "Function (} ; template<MethodRef,R,ArgsTuple> using AsyncCallBuilder = AsyncCallBuilderImpl<MethodRef,R,ArgsTuple> ; template<ReturnType> class AsyncCallWithBoundArgsBuilderBase { protected :)",
    "insertText": "AsyncCallWithBoundArgsBuilderBase(const SequenceBound* sequence_bound, const Location* location, CrossThreadTask<ReturnType()> callback) : sequence_bound_(sequence_bound), location_(location), callback_(std::move(callback))"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AsyncCallWithBoundArgsBuilderBase(AsyncCallWithBoundArgsBuilderBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncCallWithBoundArgsBuilderBase&)",
    "insertText": "operator(AsyncCallWithBoundArgsBuilderBase&&)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (raw_ptr<const SequenceBound<T,CrossThreadBindTraits>> sequence_bound_ ; const raw_ptr<const Location> location_ ; CrossThreadTask<)",
    "insertText": "ReturnType()"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderDefault()",
    "kind": "Method",
    "detail": "Function (} ; template<ReturnType> class AsyncCallWithBoundArgsBuilderDefault : public AsyncCallWithBoundArgsBuilderBase<ReturnType> { public : ~)",
    "insertText": "AsyncCallWithBoundArgsBuilderDefault()"
  },
  {
    "label": "PostTaskAndThenHelper()",
    "kind": "Method",
    "detail": "Function (this -> sequence_bound_ ->)",
    "insertText": "PostTaskAndThenHelper(*this->location_, std::move(this->callback_), std::move(then_callback))"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderDefault()",
    "kind": "Method",
    "detail": "Function (this -> sequence_bound_ = nullptr ; } protected : using AsyncCallWithBoundArgsBuilderBase<ReturnType>::AsyncCallWithBoundArgsBuilderBase ; private : SequenceBound ;)",
    "insertText": "AsyncCallWithBoundArgsBuilderDefault(AsyncCallWithBoundArgsBuilderDefault&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncCallWithBoundArgsBuilderDefault&)",
    "insertText": "operator(AsyncCallWithBoundArgsBuilderDefault&&)"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderVoid()",
    "kind": "Method",
    "detail": "Function (} ; class AsyncCallWithBoundArgsBuilderVoid : public AsyncCallWithBoundArgsBuilderBase<void> { public : using AsyncCallWithBoundArgsBuilderBase<void>::AsyncCallWithBoundArgsBuilderBase ; ~)",
    "insertText": "AsyncCallWithBoundArgsBuilderVoid()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(*this->sequence_bound_->impl_task_runner_, *this->location_, std::move(this->callback_))"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Then(CrossThreadTask<void()> then_callback)"
  },
  {
    "label": "AsyncCallWithBoundArgsBuilderVoid()",
    "kind": "Method",
    "detail": "Function (this -> sequence_bound_ = nullptr ; } private : SequenceBound ;)",
    "insertText": "AsyncCallWithBoundArgsBuilderVoid(AsyncCallWithBoundArgsBuilderVoid&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncCallWithBoundArgsBuilderVoid&)",
    "insertText": "operator(AsyncCallWithBoundArgsBuilderVoid&&)"
  },
  {
    "label": "PostTaskAndThenHelper()",
    "kind": "Method",
    "detail": "Function (} ; template<ReturnType> using AsyncCallWithBoundArgsBuilder = std::conditional<std::is_void<ReturnType>::value,AsyncCallWithBoundArgsBuilderVoid,AsyncCallWithBoundArgsBuilderDefault<ReturnType>>::type ; void)",
    "insertText": "PostTaskAndThenHelper(const Location& location, CrossThreadTask<void()> callback, CrossThreadTask<void()> then_callback)"
  },
  {
    "label": "PostTaskAndReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTaskAndReply(*impl_task_runner_, location, std::move(callback), std::move(then_callback))"
  },
  {
    "label": "PostTaskAndThenHelper()",
    "kind": "Method",
    "detail": "Function (} template<ReturnType,template<> class CallbackType,ThenArg,= EnableIfIsCrossThreadTask<CallbackType>> void)",
    "insertText": "PostTaskAndThenHelper(const Location& location, CrossThreadTask<ReturnType()> callback, CallbackType<void(ThenArg)> then_callback)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (CrossThreadTask<)",
    "insertText": "void(ThenArg)>&& once_then_callback = std::move(then_callback)"
  },
  {
    "label": "PostTaskAndReplyWithResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTaskAndReplyWithResult(*impl_task_runner_, location, std::move(callback), std::move(once_then_callback))"
  },
  {
    "label": "NO_SANITIZE()",
    "kind": "Method",
    "detail": "Function (} template<From> void)",
    "insertText": "NO_SANITIZE(\"cfi-unrelated-cast\") MoveRecordFrom(From&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (impl_task_runner_ =)",
    "insertText": "move(other.impl_task_runner_)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (t_ =)",
    "insertText": "exchange(other.t_, nullptr)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (storage_ =)",
    "insertText": "exchange(other.storage_, nullptr)"
  },
  {
    "label": "ConstructOwnerRecord()",
    "kind": "Method",
    "detail": "Function (} T* t_ = nullptr ; void* storage_ = nullptr ; scoped_refptr<SequencedTaskRunner> impl_task_runner_ ; template<. . . Args> void)",
    "insertText": "ConstructOwnerRecord(T* t, std::decay_t<Args>&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(t) T(std::move(args)...)"
  },
  {
    "label": "DeleteOwnerRecord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteOwnerRecord(T* t, void* storage)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (t -> ~)",
    "insertText": "T()"
  },
  {
    "label": "AlignedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignedFree(storage)"
  }
]