[
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "UMovieSceneCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCondition"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FMovieSceneCompiledDataID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneCompiledDataID"
  },
  {
    "label": "FMovieSceneContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneContext"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FInstanceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceHandle"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ISequenceUpdater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequenceUpdater"
  },
  {
    "label": "FactoryInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" Math / Range . h \" # include \" Misc / FrameTime . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class UMovieSceneCompiledDataManager ; class UMovieSceneEntitySystemLinker ; class UMovieSceneCondition ; class UMovieSceneSequence ; struct FFrameTime ; struct FMovieSceneCompiledDataID ; struct FMovieSceneContext ; struct FMovieSceneSequenceID ; template<ElementType> class TRange ; namespace UE { namespace MovieScene { struct FInstanceHandle ; struct FSharedPlaybackState ; enum class ESequenceInstanceUpdateFlags : uint8 ; enum class ESequenceInstanceInvalidationType : uint8 ; struct ISequenceUpdater { void)",
    "insertText": "FactoryInstance(TUniquePtr<ISequenceUpdater>& OutPtr, UMovieSceneCompiledDataManager* CompiledDataManager, FMovieSceneCompiledDataID CompiledDataID)"
  },
  {
    "label": "ISequenceUpdater()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ISequenceUpdater()"
  },
  {
    "label": "PopulateUpdateFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateUpdateFlags(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, ESequenceInstanceUpdateFlags& OutUpdateFlags)"
  },
  {
    "label": "DissectContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DissectContext(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, const FMovieSceneContext& InContext, TArray<TRange<FFrameTime>>& OutDissections)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, const FMovieSceneContext& InContext)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, const FMovieSceneContext& InContext)"
  },
  {
    "label": "CanFinishImmediately()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFinishImmediately(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "InvalidateCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCachedData(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, ESequenceInstanceInvalidationType InvalidationType)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "OverrideRootSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRootSequence(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, FMovieSceneSequenceID NewRootOverrideSequenceID)"
  },
  {
    "label": "MigrateToHierarchical()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISequenceUpdater>)",
    "insertText": "MigrateToHierarchical()"
  },
  {
    "label": "FindSubInstance()",
    "kind": "Method",
    "detail": "Function (FInstanceHandle)",
    "insertText": "FindSubInstance(FMovieSceneSequenceID SubSequenceID)"
  },
  {
    "label": "EvaluateCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateCondition(const FGuid& BindingID, const FMovieSceneSequenceID& SequenceID, const UMovieSceneCondition* Condition, UObject* ConditionOwnerObject, TSharedRef<const UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  }
]