[
  {
    "label": "VideoSendStreamPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSendStreamPeer"
  },
  {
    "label": "CallStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallStats"
  },
  {
    "label": "IvfFileWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IvfFileWriter"
  },
  {
    "label": "RateLimiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateLimiter"
  },
  {
    "label": "RtpRtcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpRtcp"
  },
  {
    "label": "RtpTransportControllerSendInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransportControllerSendInterface"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "VideoSendStreamImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSendStreamImpl"
  },
  {
    "label": "VideoSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSendStream"
  },
  {
    "label": "test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "test"
  },
  {
    "label": "VideoSendStream()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_VIDEO_SEND_STREAM_H_ # define VIDEO_VIDEO_SEND_STREAM_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" api / fec_controller . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" call / bitrate_allocator . h \" # include \" call / video_receive_stream . h \" # include \" call / video_send_stream . h \" # include \" modules / utility / maybe_worker_thread . h \" # include \" rtc_base / event . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" video / encoder_rtcp_feedback . h \" # include \" video / send_delay_stats . h \" # include \" video / send_statistics_proxy . h \" # include \" video / video_send_stream_impl . h \" # include \" video / video_stream_encoder_interface . h \" namespace webrtc { namespace test { class VideoSendStreamPeer ; } class CallStats ; class IvfFileWriter ; class RateLimiter ; class RtpRtcp ; class RtpTransportControllerSendInterface ; class RtcEventLog ; namespace internal { class VideoSendStreamImpl ; class VideoSendStream : public webrtc::VideoSendStream { public : using RtpStateMap = std::map<uint32_t,RtpState> ; using RtpPayloadStateMap = std::map<uint32_t,RtpPayloadState> ;)",
    "insertText": "VideoSendStream(Clock* clock, int num_cpu_cores, TaskQueueFactory* task_queue_factory, TaskQueueBase* network_queue, RtcpRttStats* call_stats, RtpTransportControllerSendInterface* transport, BitrateAllocatorInterface* bitrate_allocator, SendDelayStats* send_delay_stats, RtcEventLog* event_log, VideoSendStream::Config config, VideoEncoderConfig encoder_config, const std::map<uint32_t, RtpState>& suspended_ssrcs, const std::map<uint32_t, RtpPayloadState>& suspended_payload_states, std::unique_ptr<FecController> fec_controller, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoSendStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoSendStream()"
  },
  {
    "label": "DeliverRtcp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "UpdateActiveSimulcastLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSimulcastLayers(std::vector<bool> active_layers)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "started()"
  },
  {
    "label": "AddAdaptationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptationResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetAdaptationResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<Resource>>)",
    "insertText": "GetAdaptationResources()"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<webrtc::VideoFrame>* source, const DegradationPreference& degradation_preference)"
  },
  {
    "label": "ReconfigureVideoEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconfigureVideoEncoder(VideoEncoderConfig)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "StopPermanentlyAndGetRtpStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPermanentlyAndGetRtpStates(RtpStateMap* rtp_state_map, RtpPayloadStateMap* payload_state_map)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame(const std::vector<std::string>& rids)"
  },
  {
    "label": "GetPacingFactorOverride()",
    "kind": "Method",
    "detail": "Function (private : class test::VideoSendStreamPeer ; absl::optional<float>)",
    "insertText": "GetPacingFactorOverride()"
  },
  {
    "label": "CreateDetached()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker thread_checker_ ; MaybeWorkerThread* const rtp_transport_queue_ ; RtpTransportControllerSendInterface* const transport_ ; rtc::Event thread_sync_event_ ; rtc::scoped_refptr<PendingTaskSafetyFlag> transport_queue_safety_ =)",
    "insertText": "CreateDetached()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SendStatisticsProxy stats_proxy_ ; const VideoSendStream::Config config_ ; const VideoEncoderConfig::ContentType content_type_ ; std::unique_ptr<VideoStreamEncoderInterface> video_stream_encoder_ ; EncoderRtcpFeedback encoder_feedback_ ; RtpVideoSenderInterface* const rtp_video_sender_ ; VideoSendStreamImpl send_stream_ ; bool running_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  }
]