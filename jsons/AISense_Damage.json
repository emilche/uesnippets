[
  {
    "label": "IAIPerceptionListenerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAIPerceptionListenerInterface"
  },
  {
    "label": "UAISenseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseEvent"
  },
  {
    "label": "FAIDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIDamageEvent"
  },
  {
    "label": "UAISense_Damage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense_Damage"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Perception / AISense . h \" # include \" AISense_Damage . generated . h \" class IAIPerceptionListenerInterface ; class UAISenseEvent ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAIDamageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIDamageEvent()"
  },
  {
    "label": "FAIDamageEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIDamageEvent(AActor* InDamagedActor, AActor* InInstigator, float DamageAmount, const FVector& EventLocation, const FVector& InHitLocation = FAISystem::InvalidLocation, FName InTag = NAME_None)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(ClassGroup=AI, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "RegisterEvent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RegisterEvent(const FAIDamageEvent& Event)"
  },
  {
    "label": "RegisterWrappedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWrappedEvent(UAISenseEvent& PerceptionEvent)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "Update()"
  }
]