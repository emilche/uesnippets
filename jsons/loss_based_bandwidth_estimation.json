[
  {
    "label": "LossBasedControlConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LossBasedControlConfig"
  },
  {
    "label": "LossBasedBandwidthEstimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LossBasedBandwidthEstimation"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "LossBasedControlConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_LOSS_BASED_BANDWIDTH_ESTIMATION_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_LOSS_BASED_BANDWIDTH_ESTIMATION_H_ # include<vector> # include \" api / field_trials_view . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { struct LossBasedControlConfig {)",
    "insertText": "LossBasedControlConfig(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "LossBasedControlConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LossBasedControlConfig(const LossBasedControlConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LossBasedControlConfig&)",
    "insertText": "operator(const LossBasedControlConfig&)"
  },
  {
    "label": "LossBasedControlConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LossBasedControlConfig()"
  },
  {
    "label": "LossBasedBandwidthEstimation()",
    "kind": "Method",
    "detail": "Function (bool enabled ; FieldTrialParameter<double> min_increase_factor ; FieldTrialParameter<double> max_increase_factor ; FieldTrialParameter<TimeDelta> increase_low_rtt ; FieldTrialParameter<TimeDelta> increase_high_rtt ; FieldTrialParameter<double> decrease_factor ; FieldTrialParameter<TimeDelta> loss_window ; FieldTrialParameter<TimeDelta> loss_max_window ; FieldTrialParameter<TimeDelta> acknowledged_rate_max_window ; FieldTrialParameter<DataRate> increase_offset ; FieldTrialParameter<DataRate> loss_bandwidth_balance_increase ; FieldTrialParameter<DataRate> loss_bandwidth_balance_decrease ; FieldTrialParameter<DataRate> loss_bandwidth_balance_reset ; FieldTrialParameter<double> loss_bandwidth_balance_exponent ; FieldTrialParameter<bool> allow_resets ; FieldTrialParameter<TimeDelta> decrease_interval ; FieldTrialParameter<TimeDelta> loss_report_timeout ; } ; class LossBasedBandwidthEstimation { public :)",
    "insertText": "LossBasedBandwidthEstimation(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "Update(Timestamp at_time, DataRate min_bitrate, DataRate wanted_bitrate, TimeDelta last_round_trip_time)"
  },
  {
    "label": "UpdateAcknowledgedBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAcknowledgedBitrate(DataRate acknowledged_bitrate, Timestamp at_time)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(DataRate bitrate)"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enabled()"
  },
  {
    "label": "UpdateLossStatistics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateLossStatistics(const std::vector<PacketResult>& packet_results, Timestamp at_time)"
  },
  {
    "label": "GetEstimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetEstimate()"
  },
  {
    "label": "decreased_bitrate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "decreased_bitrate()"
  }
]