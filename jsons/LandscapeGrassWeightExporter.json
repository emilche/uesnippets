[
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "FLandscapeComponentSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeComponentSceneProxy"
  },
  {
    "label": "FTextureRenderTarget2DResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureRenderTarget2DResource"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "FLandscapeGrassWeightExporter_RenderThread_FixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassWeightExporter_RenderThread_FixLayout"
  },
  {
    "label": "FLandscapeGrassWeightExporter_RenderThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassWeightExporter_RenderThread"
  },
  {
    "label": "FLandscapeGrassWeightExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassWeightExporter"
  },
  {
    "label": "FComponentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentInfo"
  },
  {
    "label": "FLandscapeGrassWeightExporter_RenderThread_FixLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LandscapeComponent . h \" # include \" MeshMaterialShader . h \" # include \" LandscapeAsyncTextureReadback . h \" class ALandscapeProxy ; class FLandscapeComponentSceneProxy ; class FTextureRenderTarget2DResource ; class UTextureRenderTarget2D ; class FLandscapeGrassWeightExporter_RenderThread_FixLayout { public : ~)",
    "insertText": "FLandscapeGrassWeightExporter_RenderThread_FixLayout()"
  },
  {
    "label": "FLandscapeGrassWeightExporter_RenderThread()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeGrassWeightExporter_RenderThread : public FLandscapeGrassWeightExporter_RenderThread_FixLayout {)",
    "insertText": "FLandscapeGrassWeightExporter_RenderThread(const TArray<int32>& InHeightMips) : HeightMips(InHeightMips)"
  },
  {
    "label": "FLandscapeAsyncTextureReadback()",
    "kind": "Method",
    "detail": "Function (AsyncReadbackPtr = new)",
    "insertText": "FLandscapeAsyncTextureReadback()"
  },
  {
    "label": "FLandscapeGrassWeightExporter_RenderThread()",
    "kind": "Method",
    "detail": "Function (} class FLandscapeGrassWeightExporter ; public : ~)",
    "insertText": "FLandscapeGrassWeightExporter_RenderThread()"
  },
  {
    "label": "QueueDeletionFromGameThread()",
    "kind": "Method",
    "detail": "Function (AsyncReadbackPtr ->)",
    "insertText": "QueueDeletionFromGameThread()"
  },
  {
    "label": "FComponentInfo()",
    "kind": "Method",
    "detail": "Function (AsyncReadbackPtr = nullptr ; } } struct FComponentInfo { TObjectPtr<ULandscapeComponent> Component = nullptr ; TArray<TObjectPtr<ULandscapeGrassType>> RequestedGrassTypes ; FVector2D ViewOffset = FVector2D::ZeroVector ; int32 PixelOffsetX = 0 ; FLandscapeComponentSceneProxy* SceneProxy = nullptr ; int32 NumPasses = 0 ; int32 FirstHeightMipsPassIndex = MAX_int32 ;)",
    "insertText": "FComponentInfo(ULandscapeComponent* InComponent, bool bInNeedsGrassmap, bool bInNeedsHeightmap, const TArray<int32>& InHeightMips) : Component(InComponent) , SceneProxy((FLandscapeComponentSceneProxy*)InComponent->SceneProxy)"
  },
  {
    "label": "GetGrassTypes()",
    "kind": "Method",
    "detail": "Function (RequestedGrassTypes = InComponent ->)",
    "insertText": "GetGrassTypes()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 NumGrassMaps = RequestedGrassTypes .)",
    "insertText": "Num()"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (NumPasses + =)",
    "insertText": "DivideAndRoundUp(2 + NumGrassMaps, 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InHeightMips.Num() > 0)"
  },
  {
    "label": "RenderLandscapeComponentToTexture_RenderThread()",
    "kind": "Method",
    "detail": "Function (} } } ; FSceneInterface* SceneInterface = nullptr ; TArray<FComponentInfo,TInlineAllocator<1>> ComponentInfos ; FIntPoint TargetSize ; TArray<int32> HeightMips ; float PassOffsetX ; FVector ViewOrigin ; FLandscapeAsyncTextureReadback* AsyncReadbackPtr = nullptr ; FMatrix ViewRotationMatrix ; FMatrix ProjectionMatrix ; void)",
    "insertText": "RenderLandscapeComponentToTexture_RenderThread(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "FLandscapeGrassWeightExporter()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeGrassWeightExporter : public FLandscapeGrassWeightExporter_RenderThread { TObjectPtr<ALandscapeProxy> LandscapeProxy ; int32 ComponentSizeVerts ; int32 SubsectionSizeQuads ; int32 NumSubsections ; TArray<TObjectPtr<ULandscapeGrassType>> GrassTypes ; public :)",
    "insertText": "FLandscapeGrassWeightExporter(ALandscapeProxy* InLandscapeProxy, TArrayView<ULandscapeComponent* const> InLandscapeComponents, bool bInNeedsGrassmap = true, bool bInNeedsHeightmap = true, const TArray<int32>& InHeightMips = {})"
  },
  {
    "label": "CheckAndUpdateAsyncReadback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAndUpdateAsyncReadback(bool& bOutRenderCommandsQueued, const bool bInForceFinish = false)"
  },
  {
    "label": "IsAsyncReadbackComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsyncReadbackComplete()"
  },
  {
    "label": "FetchResults()",
    "kind": "Method",
    "detail": "Function (} TMap<ULandscapeComponent*,TUniquePtr<FLandscapeComponentGrassData>,TInlineSetAllocator<1>>)",
    "insertText": "FetchResults(bool bFreeAsyncReadback)"
  },
  {
    "label": "FreeAsyncReadback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAsyncReadback()"
  },
  {
    "label": "ApplyResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyResults(TMap<ULandscapeComponent*, TUniquePtr<FLandscapeComponentGrassData>, TInlineSetAllocator<1>>& Results)"
  },
  {
    "label": "ApplyResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyResults()"
  },
  {
    "label": "CancelAndSelfDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAndSelfDestruct()"
  },
  {
    "label": "AddGrassWeightShaderTypes()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::Landscape::Grass { void)",
    "insertText": "AddGrassWeightShaderTypes(FMaterialShaderTypes& InOutShaderTypes)"
  }
]