[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UnboundConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnboundConversion"
  },
  {
    "label": "InputValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputValue"
  },
  {
    "label": "ConvTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConvTag"
  },
  {
    "label": "ParsedFormatBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParsedFormatBase"
  },
  {
    "label": "ParsedFormatConsumer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParsedFormatConsumer"
  },
  {
    "label": "ConversionItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConversionItem"
  },
  {
    "label": "ExtendedParsedFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtendedParsedFormat"
  },
  {
    "label": "LengthModToString()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_FORMAT_PARSER_H_ # define ABSL_STRINGS_INTERNAL_STR_FORMAT_PARSER_H_ # include<limits . h> # include<stddef . h> # include<stdlib . h> # include<cassert> # include<cstdint> # include<initializer_list> # include<iosfwd> # include<iterator> # include<memory> # include<string> # include<vector> # include \" absl / strings / internal / str_format / checker . h \" # include \" absl / strings / internal / str_format / extension . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace str_format_internal { enum class LengthMod : std::uint8_t { h,hh,l,ll,L,j,z,t,q,none } ; std::string)",
    "insertText": "LengthModToString(LengthMod v)"
  },
  {
    "label": "UnboundConversion()",
    "kind": "Method",
    "detail": "Function (struct UnboundConversion {)",
    "insertText": "UnboundConversion()"
  },
  {
    "label": "set_value()",
    "kind": "Method",
    "detail": "Function (} class InputValue { public : void)",
    "insertText": "set_value(int value)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(value >= 0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (value_ = value ; } int)",
    "insertText": "value()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(value > 0)"
  },
  {
    "label": "is_from_arg()",
    "kind": "Method",
    "detail": "Function (value_ = - value - 1 ; } bool)",
    "insertText": "is_from_arg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is_from_arg())"
  },
  {
    "label": "ConvTag()",
    "kind": "Method",
    "detail": "Function (class ConvTag { public :)",
    "insertText": "ConvTag(FormatConversionChar conversion_char) : tag_(static_cast<uint8_t>(conversion_char))"
  },
  {
    "label": "ConvTag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvTag(LengthMod length_mod) : tag_(0x80 | static_cast<uint8_t>(length_mod))"
  },
  {
    "label": "ConvTag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvTag(Flags flags) : tag_(0xc0 | static_cast<uint8_t>(flags))"
  },
  {
    "label": "ConvTag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConvTag() : tag_(0xFF)"
  },
  {
    "label": "is_conv()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_conv()"
  },
  {
    "label": "is_length()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_length()"
  },
  {
    "label": "is_flags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_flags()"
  },
  {
    "label": "as_conv()",
    "kind": "Method",
    "detail": "Function (} FormatConversionChar)",
    "insertText": "as_conv()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is_conv())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!is_length())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!is_flags())"
  },
  {
    "label": "as_length()",
    "kind": "Method",
    "detail": "Function (} LengthMod)",
    "insertText": "as_length()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!is_conv())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is_length())"
  },
  {
    "label": "as_flags()",
    "kind": "Method",
    "detail": "Function (} Flags)",
    "insertText": "as_flags()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is_flags())"
  },
  {
    "label": "GetTagForChar()",
    "kind": "Method",
    "detail": "Function (} private : uint8_t tag_ ; } ; const ConvTag kTags [ 2 5 6 ] ; ConvTag)",
    "insertText": "GetTagForChar(char c)"
  },
  {
    "label": "ParseFormatString()",
    "kind": "Method",
    "detail": "Function (} template<Consumer> bool)",
    "insertText": "ParseFormatString(string_view src, Consumer consumer)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (int next_arg = 0 ; const char* p = src .)",
    "insertText": "data()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const char* const end = p + src .)",
    "insertText": "size()"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const char* percent = static_cast<const)",
    "insertText": "char(memchr(p, '%', static_cast<size_t>(end - p)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ABSL_PREDICT_FALSE(!consumer.Append( string_view(p, static_cast<size_t>(percent - p)))))"
  },
  {
    "label": "GetTagForChar()",
    "kind": "Method",
    "detail": "Function (auto tag =)",
    "insertText": "GetTagForChar(percent[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (conv . arg_position = + + next_arg ;)",
    "insertText": "if(ABSL_PREDICT_FALSE( !consumer.ConvertOne(conv, string_view(percent + 1, 1))))"
  },
  {
    "label": "ConsumeUnboundConversion()",
    "kind": "Method",
    "detail": "Function (UnboundConversion conv ; p =)",
    "insertText": "ConsumeUnboundConversion(percent + 1, end, &conv, &next_arg)"
  },
  {
    "label": "EnsureConstexpr()",
    "kind": "Method",
    "detail": "Function (p = percent + 2 ; continue ; } } return true ; } bool)",
    "insertText": "EnsureConstexpr(string_view s)"
  },
  {
    "label": "ParsedFormatBase()",
    "kind": "Method",
    "detail": "Function (} class ParsedFormatBase { public :)",
    "insertText": "ParsedFormatBase(string_view format, bool allow_ignored, std::initializer_list<FormatConversionCharSet> convs)"
  },
  {
    "label": "ParsedFormatBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParsedFormatBase(const ParsedFormatBase& other)"
  },
  {
    "label": "ParsedFormatBase()",
    "kind": "Method",
    "detail": "Function (* this = other ; })",
    "insertText": "ParsedFormatBase(ParsedFormatBase&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "move(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ParsedFormatBase&)",
    "insertText": "operator(const ParsedFormatBase& other)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (has_error_ = other . has_error_ ; items_ = other . items_ ; size_t text_size = items_ .)",
    "insertText": "empty() ? 0 : items_.back()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "reset(new char[text_size])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(data_.get(), other.data_.get(), text_size)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (has_error_ = other . has_error_ ; data_ =)",
    "insertText": "move(other.data_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (items_ =)",
    "insertText": "move(other.items_)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (other . items_ .)",
    "insertText": "clear()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const char* const base = data_ .)",
    "insertText": "get()"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (string_view)",
    "insertText": "text(base, 0)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const char* const end = text .)",
    "insertText": "data() + text.size()"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (text =)",
    "insertText": "string_view(end, static_cast<size_t>((base + item.text_end) - end))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!consumer.Append(text))"
  },
  {
    "label": "has_error()",
    "kind": "Method",
    "detail": "Function (} } return ! has_error_ ; } bool)",
    "insertText": "has_error()"
  },
  {
    "label": "ExtendedParsedFormat()",
    "kind": "Method",
    "detail": "Function (struct ParsedFormatConsumer ; struct ConversionItem { bool is_conversion ; size_t text_end ; UnboundConversion conv ; } ; bool has_error_ ; std::unique_ptr<char [ ]> data_ ; std::vector<ConversionItem> items_ ; } ; template<FormatConversionCharSet . . . C> class ExtendedParsedFormat : public str_format_internal::ParsedFormatBase { public :)",
    "insertText": "ExtendedParsedFormat(string_view format) #ifdef ABSL_INTERNAL_ENABLE_FORMAT_CHECKER __attribute__(( enable_if(str_format_internal::EnsureConstexpr(format), \"Format string is not constexpr.\"), enable_if(str_format_internal::ValidFormatImpl<C...>(format), \"Format specified does not match the template arguments.\"))) #endif : ExtendedParsedFormat(format, false)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ExtendedParsedFormat>)",
    "insertText": "New(string_view format)"
  },
  {
    "label": "NewAllowIgnored()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ExtendedParsedFormat>)",
    "insertText": "NewAllowIgnored(string_view format)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} private : std::unique_ptr<ExtendedParsedFormat>)",
    "insertText": "New(string_view format, bool allow_ignored)"
  },
  {
    "label": "conv()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ExtendedParsedFormat>)",
    "insertText": "conv(new ExtendedParsedFormat(format, allow_ignored))"
  }
]