[
  {
    "label": "VoiceActivityDetectorWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceActivityDetectorWrapper"
  },
  {
    "label": "MonoVad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonoVad"
  },
  {
    "label": "MonoVad()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_VAD_WRAPPER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_VAD_WRAPPER_H_ # include<memory> # include<vector> # include \" api / array_view . h \" # include \" common_audio / resampler / include / push_resampler . h \" # include \" modules / audio_processing / agc2 / cpu_features . h \" # include \" modules / audio_processing / include / audio_frame_view . h \" namespace webrtc { class VoiceActivityDetectorWrapper { public : class MonoVad { public : ~)",
    "insertText": "MonoVad()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Analyze(rtc::ArrayView<const float> frame)"
  },
  {
    "label": "VoiceActivityDetectorWrapper()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "VoiceActivityDetectorWrapper(int vad_reset_period_ms, const AvailableCpuFeatures& cpu_features, int sample_rate_hz)"
  },
  {
    "label": "VoiceActivityDetectorWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoiceActivityDetectorWrapper(int vad_reset_period_ms, std::unique_ptr<MonoVad> vad, int sample_rate_hz)"
  },
  {
    "label": "VoiceActivityDetectorWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoiceActivityDetectorWrapper(const VoiceActivityDetectorWrapper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VoiceActivityDetectorWrapper&)",
    "insertText": "operator(const VoiceActivityDetectorWrapper&)"
  },
  {
    "label": "VoiceActivityDetectorWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VoiceActivityDetectorWrapper()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int sample_rate_hz)"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Analyze(AudioFrameView<const float> frame)"
  }
]