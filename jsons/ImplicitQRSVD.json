[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GivensRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GivensRotation"
  },
  {
    "label": "GivensRotation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Matrix . h \" # include \" VectorTypes . h \" # include \" Chaos / Vector . h \" # include \" GenericPlatform / GenericPlatformMath . h \" # include \" Math / NumericLimits . h \" # include \" MathUtil . h \" namespace Chaos { template<class T> class GivensRotation { public : int rowi ; int rowk ; T c ; T s ;)",
    "insertText": "GivensRotation() : rowi(0), rowk(0), c((T)0.), s((T)0.)"
  },
  {
    "label": "GivensRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GivensRotation(int rowi_in, int rowk_in) : rowi(rowi_in), rowk(rowk_in), c(1), s(0)"
  },
  {
    "label": "GivensRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GivensRotation(T a, T b, int rowi_in, int rowk_in) : rowi(rowi_in), rowk(rowk_in)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute(a, b)"
  },
  {
    "label": "GivensRotation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GivensRotation()"
  },
  {
    "label": "TransposeInPlace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TransposeInPlace()"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (s = - s ; } void)",
    "insertText": "Compute(const T a, const T b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = a* a + b* b ; c = 1 ; s = 0 ;)",
    "insertText": "if(d != 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T t =)",
    "insertText": "T(1)/FMath::Sqrt(d)"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (c = a* t ; s = - b* t ; } } void)",
    "insertText": "ComputeUnconventional(const T a, const T b)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (s = a* t ; c = b* t ; } } void)",
    "insertText": "Fill(const PMatrix<T, 2, 2>& R)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>& A = const_cast<PMatrix<)",
    "insertText": "T(R)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (A = PMatrix<)",
    "insertText": "T((FReal)1., (FReal)0., (FReal)0., (FReal)1.)"
  },
  {
    "label": "RowRotation()",
    "kind": "Method",
    "detail": "Function (A . M [ rowi* 2 + rowi ] = c ; A . M [ rowi* 2 + rowk ] = - s ; A . M [ rowk* 2 + rowi ] = s ; A . M [ rowk* 2 + rowk ] = c ; } void)",
    "insertText": "RowRotation(PMatrix<T, 2, 2>& A)"
  },
  {
    "label": "RowRotation()",
    "kind": "Method",
    "detail": "Function (T tau1 = A . M [ j* 2 + rowi ] ; T tau2 = A . M [ j* 2 + rowk ] ; A . M [ j* 2 + rowi ] = c* tau1 - s* tau2 ; A . M [ j* 2 + rowk ] = s* tau1 + c* tau2 ; } } void)",
    "insertText": "RowRotation(PMatrix<T, 3, 3>& A)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (T tau1 = A . M [ j ] [ rowi ] ; T tau2 = A . M [ j ] [ rowk ] ; A . M [ j ] [ rowi ] = c* tau1 - s* tau2 ; A . M [ j ] [ rowk ] = s* tau1 + c* tau2 ; } } void)",
    "insertText": "ColumnRotation(PMatrix<T, 2, 2>& A)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (T tau1 = A . M [ rowi* 2 + j ] ; T tau2 = A . M [ rowk* 2 + j ] ; A . M [ rowi* 2 + j ] = c* tau1 - s* tau2 ; A . M [ rowk* 2 + j ] = s* tau1 + c* tau2 ; } } void)",
    "insertText": "ColumnRotation(PMatrix<T, 3, 3>& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T tau1 = A . M [ rowi ] [ j ] ; T tau2 = A . M [ rowk ] [ j ] ; A . M [ rowi ] [ j ] = c* tau1 - s* tau2 ; A . M [ rowk ] [ j ] = s* tau1 + c* tau2 ; } } void)",
    "insertText": "operator(const GivensRotation<T>& A)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r(*this)"
  },
  {
    "label": "ZeroChase()",
    "kind": "Method",
    "detail": "Function (r* = A ; return r ; } } ; template<class T> void)",
    "insertText": "ZeroChase(PMatrix<T, 3, 3>& H, PMatrix<T, 3, 3>& U, PMatrix<T, 3, 3>& V)"
  },
  {
    "label": "r1()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r1(H.M[0][0], H.M[0][1], 0, 1)"
  },
  {
    "label": "r2()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r2(1, 2)"
  },
  {
    "label": "RowRotation()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "RowRotation(H)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (r2 .)",
    "insertText": "ColumnRotation(H)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (r2 .)",
    "insertText": "ColumnRotation(V)"
  },
  {
    "label": "r3()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r3(H.M[1][1], H.M[1][2], 1, 2)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "ColumnRotation(U)"
  },
  {
    "label": "MakeUpperBidiag()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "MakeUpperBidiag(PMatrix<T, 3, 3>& H, PMatrix<T, 3, 3>& U, PMatrix<T, 3, 3>& V)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (U = PMatrix<)",
    "insertText": "T(1, 1, 1)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r(H.M[0][1], H.M[0][2], 1, 2)"
  },
  {
    "label": "ZeroChase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroChase(H, U, V)"
  },
  {
    "label": "MakeLambdaShape()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "MakeLambdaShape(PMatrix<T, 3, 3>& H, PMatrix<T, 3, 3>& U, PMatrix<T, 3, 3>& V)"
  },
  {
    "label": "r1()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r1(H.M[1][0], H.M[2][0], 1, 2)"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "ComputeUnconventional(H.M[2][1], H.M[2][2])"
  },
  {
    "label": "r2()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r2(H.M[0][2], H.M[1][2], 0, 1)"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (r2 .)",
    "insertText": "ComputeUnconventional(H.M[1][0], H.M[1][1])"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "PolarDecomposition(const PMatrix<T, 2, 2>& A, GivensRotation<T>& R, PMatrix<T, 2, 2>& S_Sym)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>& A_copy = const_cast<PMatrix<)",
    "insertText": "T(A)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (TVector<T,2>)",
    "insertText": "x(A_copy.M[0*2+0] + A_copy.M[1*2+1], A_copy.M[0*2+1] - A_copy.M[1*2+0])"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (T denominator = x .)",
    "insertText": "Size()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (R .)",
    "insertText": "c(T)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (R .)",
    "insertText": "s(T)"
  },
  {
    "label": "RowRotation()",
    "kind": "Method",
    "detail": "Function (R . c = x [ 0 ] / denominator ; R . s = - x [ 1 ] / denominator ; } S_Sym = A ; R .)",
    "insertText": "RowRotation(S_Sym)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "PolarDecomposition(const PMatrix<T, 2, 2>& A, PMatrix<T, 2, 2>& R, PMatrix<T, 2, 2>& S_Sym)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r(0, 1)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(A, r, S_Sym)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "Fill(R)"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "SingularValueDecomposition(const PMatrix<T, 2, 2>& A, GivensRotation<T>& U, const TVector<T, 2>& Sigma, GivensRotation<T>& V, const T tol = 64 * TMathUtilConstants<T>::Epsilon)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TVector<T,2>& sigma = const_cast<TVector<)",
    "insertText": "T(Sigma)"
  },
  {
    "label": "S_Sym()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>)",
    "insertText": "S_Sym((T)0., (T)0., (T)0.)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(A, U, S_Sym)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T cosine,sine ; T x = S_Sym . M [ 0* 2 + 0 ] ; T y = S_Sym . M [ 1* 2 + 0 ] ; T z = S_Sym . M [ 3 ] ;)",
    "insertText": "if(y == 0)"
  },
  {
    "label": "cosine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cosine(T)"
  },
  {
    "label": "sine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sine(T)"
  },
  {
    "label": "tau()",
    "kind": "Method",
    "detail": "Function (sigma [ 0 ] = x ; sigma [ 1 ] = z ; } else { T)",
    "insertText": "tau(T)0.5 * (x - z)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "Sqrt(tau * tau + y * y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T t ;)",
    "insertText": "if(tau > 0)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "y(tau + w)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (} else { t =)",
    "insertText": "y(tau - w)"
  },
  {
    "label": "cosine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "cosine(T)1. / FMath::Sqrt(t * t + (T)1.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sine = - t* cosine ; T c2 = cosine* cosine ; T csy = 2* cosine* sine* y ; T s2 = sine* sine ; sigma [ 0 ] = c2* x - csy + s2* z ; sigma [ 1 ] = s2* x + csy + c2* z ; })",
    "insertText": "if(sigma[0] < sigma[1])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(sigma[0], sigma[1])"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (V . c = - sine ; V . s = cosine ; } else { V . c = cosine ; V . s = sine ; } U* = V ; } template<class T> void)",
    "insertText": "SingularValueDecomposition(const PMatrix<T, 2, 2>& A, const PMatrix<T, 2, 2>& U, const TVector<T, 2>& Sigma, const PMatrix<T, 2, 2>& V, const T tol = 64 * TMathUtilConstants<T>::Epsilon)"
  },
  {
    "label": "gv()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "gv(0, 1)"
  },
  {
    "label": "gu()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "gu(0, 1)"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SingularValueDecomposition(A, gu, Sigma, gv)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (gu .)",
    "insertText": "Fill(U)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (gv .)",
    "insertText": "Fill(V)"
  },
  {
    "label": "WilkinsonShift()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "WilkinsonShift(const T a1, const T b1, const T a2)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "d(T)0.5 * (a1 - a2)"
  },
  {
    "label": "a2()",
    "kind": "Method",
    "detail": "Function (T bs = b1* b1 ; T mu =)",
    "insertText": "a2(T)FMath::Sign(d) * bs / ((FGenericPlatformMath::Abs(d) + FMath::Sqrt(d * d + bs)))"
  },
  {
    "label": "other()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "other(t == 1)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "u(0, 1)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "v(0, 1)"
  },
  {
    "label": "B_sub()",
    "kind": "Method",
    "detail": "Function (sigma [ other ] = B . M [ other ] [ other ] ; const PMatrix<T,2,2>)",
    "insertText": "B_sub(B.M[t][t], B.M[t][t+1], B.M[t+1][t], B.M[t+1][t+1])"
  },
  {
    "label": "sigma_sub()",
    "kind": "Method",
    "detail": "Function (const TVector<T,2>)",
    "insertText": "sigma_sub(sigma[t], sigma[t + 1])"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SingularValueDecomposition(B_sub, u, sigma_sub, v)"
  },
  {
    "label": "FlipSign()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "FlipSign(int i, PMatrix<T, 3, 3>& U, TVector<T, 3>& sigma)"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (sigma [ i ] = - sigma [ i ] ; U .)",
    "insertText": "SetColumn(i, -U.GetColumn(i))"
  },
  {
    "label": "SwapCols()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "SwapCols(PMatrix<T, 3, 3>& A, const int i1, const int i2)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (auto OtherCol = A .)",
    "insertText": "GetColumn(i1)"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "SetColumn(i1, A.GetColumn(i2))"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "SetColumn(i2, OtherCol)"
  },
  {
    "label": "Sort0()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "Sort0(PMatrix<T, 3, 3>& U, TVector<T, 3>& sigma, PMatrix<T, 3, 3>& V)"
  },
  {
    "label": "FlipSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipSign(1, U, sigma)"
  },
  {
    "label": "FlipSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipSign(2, U, sigma)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "if(sigma[2] < (T)0.)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Swap(sigma[1], sigma[2])"
  },
  {
    "label": "SwapCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCols(U, 1, 2)"
  },
  {
    "label": "SwapCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCols(V, 1, 2)"
  },
  {
    "label": "SwapCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCols(U, 0, 1)"
  },
  {
    "label": "SwapCols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCols(V, 0, 1)"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (} else { U .)",
    "insertText": "SetColumn(2, -U.GetColumn(2))"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (V .)",
    "insertText": "SetColumn(2, -V.GetColumn(2))"
  },
  {
    "label": "Sort1()",
    "kind": "Method",
    "detail": "Function (} } template<class T> void)",
    "insertText": "Sort1(PMatrix<T, 3, 3>& U, TVector<T, 3>& sigma, PMatrix<T, 3, 3>& V)"
  },
  {
    "label": "FlipSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipSign(0, U, sigma)"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (} else { U .)",
    "insertText": "SetColumn(1, -U.GetColumn(1))"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (V .)",
    "insertText": "SetColumn(1, -V.GetColumn(1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(sigma[1] < (T)0.)"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (} } template<class T> int)",
    "insertText": "SingularValueDecomposition(const PMatrix<T, 3, 3>& A, PMatrix<T, 3, 3>& U, TVector<T, 3>& sigma, PMatrix<T, 3, 3>& V, T tol = 1024 * TMathUtilConstants<T>::Epsilon)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (sigma [ 0 ] =)",
    "insertText": "T(0.)"
  },
  {
    "label": "MakeUpperBidiag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUpperBidiag(B, U, V)"
  },
  {
    "label": "mu()",
    "kind": "Method",
    "detail": "Function (int count = 0 ; T)",
    "insertText": "mu(T)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (T alpha_1 = B . M [ 0 ] [ 0 ] ; T beta_1 = B . M [ 1 ] [ 0 ] ; T alpha_2 = B . M [ 1 ] [ 1 ] ; T alpha_3 = B . M [ 2 ] [ 2 ] ; T beta_2 = B . M [ 2 ] [ 1 ] ; T gamma_1 = alpha_1* beta_1 ; T gamma_2 = alpha_2* beta_2 ; tol* =)",
    "insertText": "Max((T)0.5 * FMath::Sqrt(alpha_1 * alpha_1 + alpha_2 * alpha_2 + alpha_3 * alpha_3 + beta_1 * beta_1 + beta_2 * beta_2), (T)1)"
  },
  {
    "label": "WilkinsonShift()",
    "kind": "Method",
    "detail": "Function (mu =)",
    "insertText": "WilkinsonShift(alpha_2 * alpha_2 + beta_1 * beta_1, gamma_2, alpha_3 * alpha_3 + beta_2 * beta_2)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "Compute(alpha_1 * alpha_1 - mu, gamma_1)"
  },
  {
    "label": "ColumnRotation()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "ColumnRotation(B)"
  },
  {
    "label": "ZeroChase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroChase(B, U, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (alpha_1 = B . M [ 0 ] [ 0 ] ; beta_1 = B . M [ 1 ] [ 0 ] ; alpha_2 = B . M [ 1 ] [ 1 ] ; alpha_3 = B . M [ 2 ] [ 2 ] ; beta_2 = B . M [ 2 ] [ 1 ] ; gamma_1 = alpha_1* beta_1 ; gamma_2 = alpha_2* beta_2 ; count + + ; })",
    "insertText": "if(FGenericPlatformMath::Abs(beta_2) <= tol)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(B, U, sigma, V)"
  },
  {
    "label": "Sort0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort0(U, sigma, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGenericPlatformMath::Abs(beta_1) <= tol)"
  },
  {
    "label": "Sort1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort1(U, sigma, V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGenericPlatformMath::Abs(alpha_2) <= tol)"
  },
  {
    "label": "r1()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r1(1, 2)"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "ComputeUnconventional(B.M[2][1], B.M[2][2])"
  },
  {
    "label": "RowRotation()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "RowRotation(B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGenericPlatformMath::Abs(alpha_3) <= tol)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "Compute(B.M[1][1], B.M[2][1])"
  },
  {
    "label": "r2()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r2(0, 2)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (r2 .)",
    "insertText": "Compute(B.M[0][0], B.M[2][0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FGenericPlatformMath::Abs(alpha_1) <= tol)"
  },
  {
    "label": "r1()",
    "kind": "Method",
    "detail": "Function (GivensRotation<T>)",
    "insertText": "r1(0, 1)"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (r1 .)",
    "insertText": "ComputeUnconventional(B.M[1][0], B.M[1][1])"
  },
  {
    "label": "ComputeUnconventional()",
    "kind": "Method",
    "detail": "Function (r2 .)",
    "insertText": "ComputeUnconventional(B.M[2][0], B.M[2][2])"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (} return count ; } template<class T> void)",
    "insertText": "PolarDecomposition(const PMatrix<T, 3, 3>& A, PMatrix<T, 3, 3>& R, PMatrix<T, 3, 3>& S_Sym)"
  },
  {
    "label": "SingularValueDecomposition()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> U ; TVector<T,3> sigma ; PMatrix<T,3,3> V ;)",
    "insertText": "SingularValueDecomposition(A, U, sigma, V)"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (R = V .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (S_Sym = V .)",
    "insertText": "GetTransposed() * PMatrix<T, 3, 3>(sigma)"
  },
  {
    "label": "dRdFCorotated()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "dRdFCorotated(const PMatrix<T, 3, 3>& F, TVector<T, 81>& dRdF)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> R,S,Dinv ;)",
    "insertText": "PolarDecomposition(F, R, S)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "D(S.M[0][0] + S.M[1][1] + S.M[2][2]) * PMatrix<T, 3, 3>(1, 1, 1)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (Dinv = D .)",
    "insertText": "Inverse()"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) + R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) + R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) - R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) - R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) - R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) + R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) + R.GetAt(0, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) + R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) - R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) + R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) + R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) - R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) - R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) - R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) + R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) + R.GetAt(0, 1) *Dinv.GetAt(2, 1) * R.GetAt(1, 0) + R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) - R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) + R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) + R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) - R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) - R.GetAt(0, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) - R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) + R.GetAt(0, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) + R.GetAt(0, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) + R.GetAt(0, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) - R.GetAt(0, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) - R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) - R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) + R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) + R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) + R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) - R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) - R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) - R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) + R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) - R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) - R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) + R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) + R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) + R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) - R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) - R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 0) - R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) + R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) - R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) - R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) + R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) + R.GetAt(0, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) + R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) - R.GetAt(0, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) - R.GetAt(0, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) - R.GetAt(0, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) + R.GetAt(0, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) + R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 1) + R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) - R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) - R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 0) - R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) + R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) + R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 0) + R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) - R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) + R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 1) + R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) - R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) - R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 0) - R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) + R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) + R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 0) + R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) - R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) + R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 1) + R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) - R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) - R.GetAt(0, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 0) - R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) + R.GetAt(0, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(0, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) + R.GetAt(0, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 0) + R.GetAt(0, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) - R.GetAt(0, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) + R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) + R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) - R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) - R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) - R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) + R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) + R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) + R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) - R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) + R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) + R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) - R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) - R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) - R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) + R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) + R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(1, 0) + R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) - R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) + R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) + R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) - R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) - R.GetAt(1, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) - R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) + R.GetAt(1, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) + R.GetAt(1, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) + R.GetAt(1, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) - R.GetAt(1, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) - R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) - R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) + R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) + R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) + R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) - R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) - R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) - R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) + R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) - R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) - R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) + R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) + R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) + R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) - R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) - R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 0) - R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) + R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) - R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) - R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) + R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) + R.GetAt(1, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) + R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) - R.GetAt(1, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) - R.GetAt(1, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) - R.GetAt(1, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) + R.GetAt(1, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) + R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 1) + R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) - R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) - R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 0) - R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) + R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) + R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 0) + R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) - R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) + R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 1) + R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) - R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) - R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 0) - R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) + R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) + R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 0) + R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) - R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) + R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 1) + R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) - R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) - R.GetAt(1, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 0) - R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) + R.GetAt(1, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(1, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) + R.GetAt(1, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 0) + R.GetAt(1, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) - R.GetAt(1, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) + R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) + R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) - R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) - R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) - R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) + R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) + R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) + R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) - R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) + R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) + R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) - R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) - R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) - R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) + R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) + R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(1, 0) + R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) - R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) + R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) + R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) - R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) - R.GetAt(2, 1) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) - R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) + R.GetAt(2, 2) * Dinv.GetAt(1, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 1) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) + R.GetAt(2, 1) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) + R.GetAt(2, 2) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) - R.GetAt(2, 2) * Dinv.GetAt(1, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 2) - R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 1) - R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) + R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 2) + R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(0, 0) + R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) - R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(0, 1) - R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(0, 0) - R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) + R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 2) - R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 1) - R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) + R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 2) + R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(1, 0) + R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) - R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(1, 1) - R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(1, 0) - R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) + R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 2) - R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 1) - R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) + R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 2) + R.GetAt(2, 0) * Dinv.GetAt(2, 2) * R.GetAt(2, 0) + R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) - R.GetAt(2, 2) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(2, 0) * R.GetAt(2, 1) - R.GetAt(2, 0) * Dinv.GetAt(2, 1) * R.GetAt(2, 0) - R.GetAt(2, 2) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) + R.GetAt(2, 2) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 2) + R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 1) + R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 2) - R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 2) - R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(0, 0) - R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 2) + R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(0, 1) + R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(0, 0) + R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(0, 1) - R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(0, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 2) + R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 1) + R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 2) - R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 2) - R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(1, 0) - R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 2) + R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(1, 1) + R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(1, 0) + R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(1, 1) - R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(1, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 2) + R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 1) + R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 2) - R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 1))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 2) - R.GetAt(2, 0) * Dinv.GetAt(1, 2) * R.GetAt(2, 0) - R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 2) + R.GetAt(2, 1) * Dinv.GetAt(0, 2) * R.GetAt(2, 0))"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdF(-R.GetAt(2, 0) * Dinv.GetAt(1, 0) * R.GetAt(2, 1) + R.GetAt(2, 0) * Dinv.GetAt(1, 1) * R.GetAt(2, 0) + R.GetAt(2, 1) * Dinv.GetAt(0, 0) * R.GetAt(2, 1) - R.GetAt(2, 1) * Dinv.GetAt(0, 1) * R.GetAt(2, 0))"
  }
]