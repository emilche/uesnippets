[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextureReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureReference"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FValueId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueId"
  },
  {
    "label": "FTextureSourceLayerColorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSourceLayerColorInfo"
  },
  {
    "label": "FTextureSourceBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSourceBlock"
  },
  {
    "label": "FTextureSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSource"
  },
  {
    "label": "FMipData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipData"
  },
  {
    "label": "IImageWrapperModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWrapperModule"
  },
  {
    "label": "FMipAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipAllocation"
  },
  {
    "label": "FDeleterFree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleterFree"
  },
  {
    "label": "FMipLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipLock"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "UVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVolumeTexture"
  },
  {
    "label": "UTexture2DArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2DArray"
  },
  {
    "label": "UTextureCubeArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCubeArray"
  },
  {
    "label": "ETextureSourceCompressionFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureSourceCompressionFormat"
  },
  {
    "label": "ETextureSourceFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureSourceFormat"
  },
  {
    "label": "FOptTexturePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptTexturePlatformData"
  },
  {
    "label": "FTexturePlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexturePlatformData"
  },
  {
    "label": "FTexture2DMipMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexture2DMipMap"
  },
  {
    "label": "FVirtualTextureBuiltData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualTextureBuiltData"
  },
  {
    "label": "FSharedImage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedImage"
  },
  {
    "label": "FTextureEncodeResultMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureEncodeResultMetadata"
  },
  {
    "label": "FStructuredDerivedDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructuredDerivedDataKey"
  },
  {
    "label": "FTextureAsyncCacheDerivedDataTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureAsyncCacheDerivedDataTask"
  },
  {
    "label": "FTextureBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureBuildSettings"
  },
  {
    "label": "ITextureCompressorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureCompressorModule"
  },
  {
    "label": "FTextureFormatSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureFormatSettings"
  },
  {
    "label": "TextureCompressionSettings",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureCompressionSettings"
  },
  {
    "label": "FTextureSourceColorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSourceColorSettings"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "ETextureCompressionQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureCompressionQuality"
  },
  {
    "label": "ETexturePowerOfTwoSetting",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETexturePowerOfTwoSetting"
  },
  {
    "label": "TextureMipGenSettings",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureMipGenSettings"
  },
  {
    "label": "ECompositeTextureMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompositeTextureMode"
  },
  {
    "label": "TextureFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureFilter"
  },
  {
    "label": "TextureCookPlatformTilingSettings",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureCookPlatformTilingSettings"
  },
  {
    "label": "TextureGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureGroup"
  },
  {
    "label": "FTextureEditorCustomEncode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureEditorCustomEncode"
  },
  {
    "label": "FVirtualTextureBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualTextureBuildSettings"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnum"
  },
  {
    "label": "FTextureCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureCompilingManager"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" RenderCommandFence . h \" # include \" Serialization / EditorBulkData . h \" # include \" Engine / TextureDefines . h \" # include \" MaterialValueType . h \" # include \" Engine / StreamableRenderAsset . h \" # include \" UObject / PerPlatformProperties . h \" # include \" ImageCore . h \" # if WITH_EDITORONLY_DATA # include \" Misc / TVariant . h \" # include \" ObjectCacheEventSink . h \" # include \" DerivedDataCacheKeyProxy . h \" # endif # if WITH_EDITOR # include \" Templates / DontCopy . h \" # endif # include \" Texture . generated . h \" namespace FOodleDataCompression { enum class ECompressor : uint8 ; enum class ECompressionLevel : int8 ; } class FTextureReference ; class FTextureResource ; class ITargetPlatform ; class ITargetPlatformSettings ; class UAssetUserData ; struct FPropertyChangedEvent ; # if WITH_EDITORONLY_DATA namespace UE::DerivedData { struct FValueId ; } # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FTextureSourceBlock()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ENGINE_API FTextureSource()"
  },
  {
    "label": "GetBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBytesPerPixel(ETextureSourceFormat Format)"
  },
  {
    "label": "InitBlocked()",
    "kind": "Method",
    "detail": "Function (} enum class ELockState : uint8 { None,ReadOnly,ReadWrite } ; # if WITH_EDITOR struct FMipData ; void)",
    "insertText": "InitBlocked(const ETextureSourceFormat* InLayerFormats, const FTextureSourceBlock* InBlocks, int32 InNumLayers, int32 InNumBlocks, const uint8** InDataPerBlock)"
  },
  {
    "label": "InitBlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBlocked(const ETextureSourceFormat* InLayerFormats, const FTextureSourceBlock* InBlocks, int32 InNumLayers, int32 InNumBlocks, UE::Serialization::FEditorBulkData::FSharedBufferWithID NewData)"
  },
  {
    "label": "InitLayered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLayered(int32 NewSizeX, int32 NewSizeY, int32 NewNumSlices, int32 NewNumLayers, int32 NewNumMips, const ETextureSourceFormat* NewLayerFormat, const uint8* NewData = NULL)"
  },
  {
    "label": "InitLayered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLayered(int32 NewSizeX, int32 NewSizeY, int32 NewNumSlices, int32 NewNumLayers, int32 NewNumMips, const ETextureSourceFormat* NewLayerFormat, UE::Serialization::FEditorBulkData::FSharedBufferWithID NewData)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 NewSizeX, int32 NewSizeY, int32 NewNumSlices, int32 NewNumMips, ETextureSourceFormat NewFormat, const uint8* NewData = NULL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FImageView & Image)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 NewSizeX, int32 NewSizeY, int32 NewNumSlices, int32 NewNumMips, ETextureSourceFormat NewFormat, UE::Serialization::FEditorBulkData::FSharedBufferWithID NewData)"
  },
  {
    "label": "Init2DWithMipChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init2DWithMipChain(int32 NewSizeX, int32 NewSizeY, ETextureSourceFormat NewFormat)"
  },
  {
    "label": "InitLayered2DWithMipChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLayered2DWithMipChain(int32 NewSizeX, int32 NewSizeY, int32 NewNumLayers, const ETextureSourceFormat* NewFormat)"
  },
  {
    "label": "InitCubeWithMipChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCubeWithMipChain(int32 NewSizeX, int32 NewSizeY, ETextureSourceFormat NewFormat)"
  },
  {
    "label": "InitWithCompressedSourceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithCompressedSourceData(int32 NewSizeX, int32 NewSizeY, int32 NewNumMips, ETextureSourceFormat NewFormat, const TArrayView64<uint8> NewSourceData, ETextureSourceCompressionFormat NewSourceFormat)"
  },
  {
    "label": "InitWithCompressedSourceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithCompressedSourceData(int32 NewSizeX, int32 NewSizeY, int32 NewNumMips, ETextureSourceFormat NewFormat, UE::Serialization::FEditorBulkData::FSharedBufferWithID NewSourceData, ETextureSourceCompressionFormat NewSourceFormat)"
  },
  {
    "label": "CopyTornOff()",
    "kind": "Method",
    "detail": "Function (FTextureSource)",
    "insertText": "CopyTornOff()"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress()"
  },
  {
    "label": "ForceGenerateGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceGenerateGuid()"
  },
  {
    "label": "LockMipReadOnly()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "LockMipReadOnly(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "LockMip()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "LockMip(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "UnlockMip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockMip(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMipData(TArray64<uint8>& OutMipData, int32 BlockIndex, int32 LayerIndex, int32 MipIndex, class IImageWrapperModule* ImageWrapperModule = nullptr)"
  },
  {
    "label": "GetMipImage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetMipImage(FImage & OutImage, int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (} FMipData)",
    "insertText": "GetMipData(class IImageWrapperModule* ImageWrapperModule)"
  },
  {
    "label": "GetMipImageInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMipImageInfo(FImageInfo & OutImageInfo, int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "CalcMipSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcMipSize(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "CalcMipOffset()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcMipOffset(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBytesPerPixel(int32 LayerIndex = 0)"
  },
  {
    "label": "IsBlockPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBlockPowerOfTwo(int32 BlockIndex)"
  },
  {
    "label": "AreAllBlocksPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllBlocksPowerOfTwo()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBlock(int32 Index, FTextureSourceBlock& OutBlock)"
  },
  {
    "label": "GetLogicalSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetLogicalSize()"
  },
  {
    "label": "GetSizeInBlocks()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeInBlocks()"
  },
  {
    "label": "GetTotalTopMipPixelCount()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotalTopMipPixelCount()"
  },
  {
    "label": "GetIdString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetIdString()"
  },
  {
    "label": "GetSourceCompressionAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSourceCompressionAsString()"
  },
  {
    "label": "RemoveCompression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCompression()"
  },
  {
    "label": "GetGammaSpace()",
    "kind": "Method",
    "detail": "Function (EGammaSpace)",
    "insertText": "GetGammaSpace(int LayerIndex)"
  },
  {
    "label": "GetTextureClass()",
    "kind": "Method",
    "detail": "Function (ETextureClass)",
    "insertText": "GetTextureClass()"
  },
  {
    "label": "GetMippedNumSlices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMippedNumSlices(int NumSlices,int MipIndex)"
  },
  {
    "label": "ExportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportCustomProperties(FOutputDevice& Out, uint32 Indent)"
  },
  {
    "label": "ImportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportCustomProperties(const TCHAR* SourceText, FFeedbackContext* Warn)"
  },
  {
    "label": "GetPersistentId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetPersistentId()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetId()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (} ETextureSourceFormat)",
    "insertText": "GetFormat(int32 LayerIndex = 0)"
  },
  {
    "label": "IsCubeOrCubeArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCubeOrCubeArray()"
  },
  {
    "label": "IsVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolume()"
  },
  {
    "label": "IsLongLatCubemap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLongLatCubemap()"
  },
  {
    "label": "GetVolumeSizeZ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVolumeSizeZ()"
  },
  {
    "label": "HasPayloadData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPayloadData()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "OperateOnLoadedBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OperateOnLoadedBulkData(TFunctionRef<void (const FSharedBuffer& BulkDataBuffer)> Operation)"
  },
  {
    "label": "GetBulkDataPayload()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "GetBulkDataPayload()"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetId(const FGuid& InId, bool bInGuidIsHash)"
  },
  {
    "label": "LockMipReadOnly()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "LockMipReadOnly(int32 MipIndex)"
  },
  {
    "label": "LockMip()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "LockMip(int32 MipIndex)"
  },
  {
    "label": "UnlockMip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockMip(int32 MipIndex)"
  },
  {
    "label": "UnlockMip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockMip(0, 0, MipIndex)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOwner(UTexture* InOwner)"
  },
  {
    "label": "FMipAllocation()",
    "kind": "Method",
    "detail": "Function (Owner = InOwner ; } struct FMipAllocation {)",
    "insertText": "FMipAllocation()"
  },
  {
    "label": "FMipAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipAllocation(FSharedBuffer SrcData)"
  },
  {
    "label": "FMipAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipAllocation(const FMipAllocation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMipAllocation&)",
    "insertText": "operator(const FMipAllocation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMipAllocation&)",
    "insertText": "operator(FMipAllocation&&)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetDataReadOnly()",
    "kind": "Method",
    "detail": "Function (} const FSharedBuffer&)",
    "insertText": "GetDataReadOnly()"
  },
  {
    "label": "GetDataReadWriteView()",
    "kind": "Method",
    "detail": "Function (} FMutableMemoryView)",
    "insertText": "GetDataReadWriteView()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "Release()"
  },
  {
    "label": "CreateReadWriteBuffer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateReadWriteBuffer(const void* SrcData, int64 DataLength)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FDeleterFree { void)",
    "insertText": "operator()(uint8* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "FMipData()",
    "kind": "Method",
    "detail": "Function (} } } ; FSharedBuffer ReadOnlyReference ; TUniquePtr<uint8,FDeleterFree> ReadWriteBuffer ; } ; struct FMipData {)",
    "insertText": "FMipData(FMipData&& Other) : TextureSource(Other.TextureSource)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MipData =)",
    "insertText": "MoveTemp(Other.MipData)"
  },
  {
    "label": "FMipData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMipData()"
  },
  {
    "label": "FMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipData(const FMipData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMipData&)",
    "insertText": "operator(const FMipData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMipData&)",
    "insertText": "operator(FMipData&& Other)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMipData(TArray64<uint8>& OutMipData, int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "GetMipData(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetMipDataWithInfo()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "GetMipDataWithInfo(int32 InBlockIndex, int32 InLayerIndex, int32 InMipIndex, FImageInfo& OutMipImageInfo)"
  },
  {
    "label": "GetMipDataImageView()",
    "kind": "Method",
    "detail": "Function (FImageView)",
    "insertText": "GetMipDataImageView(int32 BlockIndex, int32 LayerIndex, int32 MipIndex)"
  },
  {
    "label": "GetMipDataWithInfo()",
    "kind": "Method",
    "detail": "Function (FImageInfo Info ; FSharedBuffer Buffer =)",
    "insertText": "GetMipDataWithInfo(BlockIndex,LayerIndex,MipIndex,Info)"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetData()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} FSharedBuffer)",
    "insertText": "GetData()"
  },
  {
    "label": "FMipLock()",
    "kind": "Method",
    "detail": "Function (const FTextureSource& TextureSource ; FSharedBuffer MipData ; } ; struct FMipLock {)",
    "insertText": "FMipLock(ELockState InLockState,FTextureSource * InTextureSource,int32 InBlockIndex, int32 InLayerIndex, int32 InMipIndex)"
  },
  {
    "label": "FMipLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipLock(ELockState InLockState,FTextureSource * InTextureSource,int32 InMipIndex)"
  },
  {
    "label": "FMipLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipLock(FMipLock&&)"
  },
  {
    "label": "FMipLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMipLock()"
  },
  {
    "label": "GetRawData()",
    "kind": "Method",
    "detail": "Function (ELockState LockState ; FTextureSource* TextureSource ; int32 BlockIndex ; int32 LayerIndex ; int32 MipIndex ; FImageView Image ; const void*)",
    "insertText": "GetRawData()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool bNotNull = Image . RawData ! = nullptr ; bool bNotNone = LockState ! = ELockState::None ;)",
    "insertText": "check(bNotNull == bNotNone)"
  },
  {
    "label": "FMipLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMipLock(const FMipLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMipLock&)",
    "insertText": "operator(const FMipLock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMipLock&)",
    "insertText": "operator(FMipLock&& Other)"
  },
  {
    "label": "CheckTextureIsUnlocked()",
    "kind": "Method",
    "detail": "Function (} ; # endif private : class UTexture ; class UTexture2D ; class UTextureCube ; class UVolumeTexture ; class UTexture2DArray ; class UTextureCubeArray ; # if WITH_EDITOR TDontCopy<FCriticalSection> BulkDataLock ; UTexture* Owner ; ETextureClass TornOffTextureClass ; TArray<EGammaSpace,TInlineAllocator<1>> TornOffGammaSpace ; FString TornOffOwnerName ; # endif UE::Serialization::FEditorBulkData BulkData ; uint32 NumLockedMips ; ELockState LockState ; void)",
    "insertText": "CheckTextureIsUnlocked(const TCHAR* DebugMessage)"
  },
  {
    "label": "LockMipInternal()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FMipAllocation LockedMipData ; FMutableMemoryView)",
    "insertText": "LockMipInternal(int32 BlockIndex, int32 LayerIndex, int32 MipIndex, ELockState RequestedLockState, FImageInfo & OutImageInfo)"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "Decompress(class IImageWrapperModule* ImageWrapperModule = nullptr)"
  },
  {
    "label": "TryDecompressData()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "TryDecompressData()"
  },
  {
    "label": "DoUEDeltaTransform()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "DoUEDeltaTransform(FSharedBuffer InBuffer,bool bForward)"
  },
  {
    "label": "CalcTotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcTotalSize()"
  },
  {
    "label": "CalcBlockSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcBlockSize(int32 BlockIndex)"
  },
  {
    "label": "CalcLayerSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcLayerSize(int32 BlockIndex, int32 LayerIndex)"
  },
  {
    "label": "CalcBlockSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcBlockSize(const FTextureSourceBlock& Block)"
  },
  {
    "label": "CalcLayerSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "CalcLayerSize(const FTextureSourceBlock& Block, int32 LayerIndex)"
  },
  {
    "label": "InitLayeredImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLayeredImpl(int32 NewSizeX, int32 NewSizeY, int32 NewNumSlices, int32 NewNumLayers, int32 NewNumMips, const ETextureSourceFormat* NewLayerFormat)"
  },
  {
    "label": "InitBlockedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBlockedImpl(const ETextureSourceFormat* InLayerFormats, const FTextureSourceBlock* InBlocks, int32 InNumLayers, int32 InNumBlocks)"
  },
  {
    "label": "EnsureBlocksAreSorted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureBlocksAreSorted()"
  },
  {
    "label": "UpdateChannelLinearMinMax()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "UpdateChannelLinearMinMax()"
  },
  {
    "label": "ComputeChannelLinearMinMax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeChannelLinearMinMax(int32 InLayerIndex, FLinearColor& OutMinColor, FLinearColor& OutMaxColor)"
  },
  {
    "label": "GetLayerColorInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLayerColorInfo(TArray<FTextureSourceLayerColorInfo> & OutLayerColorInfo)"
  },
  {
    "label": "SetLayerColorInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerColorInfo(const TArray<FTextureSourceLayerColorInfo> & InLayerColorInfo)"
  },
  {
    "label": "ResetLayerColorInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLayerColorInfo()"
  },
  {
    "label": "HasLayerColorInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLayerColorInfo()"
  },
  {
    "label": "UpdateChannelMinMaxFromIncomingTextureData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateChannelMinMaxFromIncomingTextureData(FMemoryView InNewTextureData)"
  },
  {
    "label": "UseHashAsGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseHashAsGuid()"
  },
  {
    "label": "FOptTexturePlatformData()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FOptTexturePlatformData { uint32 ExtData ; uint32 NumMipsInTail ;)",
    "insertText": "FOptTexturePlatformData() : ExtData(0) , NumMipsInTail(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FOptTexturePlatformData const& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FOptTexturePlatformData& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 SizeY ; uint32 PackedData ; EPixelFormat PixelFormat ; FOptTexturePlatformData OptData ; TIndirectArray<struct FTexture2DMipMap> Mips ; struct FVirtualTextureBuiltData* VTData = nullptr ; TRefCountPtr<const struct FSharedImage> CPUCopy ; # if WITH_EDITORONLY_DATA uint64 PreEncodeMipsHash = 0 ; TVariant<FString,UE::DerivedData::FCacheKeyProxy> DerivedDataKey ; struct FTextureEncodeResultMetadata { FName Encoder ; EPixelFormat EncodedFormat = PF_Unknown ; bool bIsValid = false ; bool bSupportsEncodeSpeed = false ; bool bWasEditorCustomEncoding = false ; enum class OodleRDOSource : uint8 { Default,LODGroup,Texture,} ; OodleRDOSource RDOSource = OodleRDOSource::Default ; uint8 OodleRDO = 0 ; uint8 OodleEncodeEffort = 0 ; uint8 OodleUniversalTiling = 0 ; uint8 EncodeSpeed = 0 ; } ; FTextureEncodeResultMetadata ResultMetadata ; struct FStructuredDerivedDataKey { FIoHash TilingBuildDefinitionKey ; FIoHash DeTilingBuildDefinitionKey ; FIoHash DecodeBuildDefinitionKey ; FIoHash BuildDefinitionKey ; FGuid SourceGuid ; FGuid CompositeSourceGuid ; bool)",
    "insertText": "operator(const FStructuredDerivedDataKey& Other)"
  },
  {
    "label": "FTexturePlatformData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTexturePlatformData()"
  },
  {
    "label": "IsReadyForAsyncPostLoad()",
    "kind": "Method",
    "detail": "Function (private : uint32 BitMask_CubeMap = 1 u<<3 1 u ; uint32 BitMask_HasOptData = 1 u<<3 0 u ; uint32 BitMask_HasCpuCopy = 1 u<<2 9 u ; uint32 BitMask_NumSlices = BitMask_HasCpuCopy - 1 u ; public : bool)",
    "insertText": "IsReadyForAsyncPostLoad()"
  },
  {
    "label": "TryLoadMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadMips(int32 FirstMipToLoad, void** OutMipData, FStringView DebugContext)"
  },
  {
    "label": "TryLoadMipsWithSizes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadMipsWithSizes(int32 FirstMipToLoad, void** OutMipData, int64 * OutMipSize, FStringView DebugContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, class UTexture* Owner)"
  },
  {
    "label": "GetDerivedDataMipKeyString()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FString)",
    "insertText": "GetDerivedDataMipKeyString(int32 MipIndex, const FTexture2DMipMap& Mip)"
  },
  {
    "label": "MakeMipId()",
    "kind": "Method",
    "detail": "Function (UE::DerivedData::FValueId)",
    "insertText": "MakeMipId(int32 MipIndex)"
  },
  {
    "label": "SerializeCooked()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SerializeCooked(FArchive& Ar, class UTexture* Owner, bool bStreamable, const bool bSerializeMipData)"
  },
  {
    "label": "SetPackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackedData(int32 InNumSlices, bool bInHasOptData, bool bInCubeMap, bool bInHasCpuCopy)"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackedData(InNumSlices & BitMask_NumSlices) | (bInCubeMap ? BitMask_CubeMap : 0) | (bInHasOptData ? BitMask_HasOptData : 0) | (bInHasCpuCopy ? BitMask_HasCpuCopy : 0)"
  },
  {
    "label": "GetHasOptData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetHasOptData()"
  },
  {
    "label": "SetOptData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOptData(FOptTexturePlatformData Data)"
  },
  {
    "label": "FOptTexturePlatformData()",
    "kind": "Method",
    "detail": "Function (bool bHasOptData = Data ! =)",
    "insertText": "FOptTexturePlatformData()"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackedData(bHasOptData ? BitMask_HasOptData : 0) | (PackedData & (~BitMask_HasOptData))"
  },
  {
    "label": "GetHasCpuCopy()",
    "kind": "Method",
    "detail": "Function (OptData = Data ; } bool)",
    "insertText": "GetHasCpuCopy()"
  },
  {
    "label": "SetHasCpuCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasCpuCopy(bool bInHasCpuCopy)"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackedData(bInHasCpuCopy ? BitMask_HasCpuCopy : 0) | (PackedData & (~BitMask_HasCpuCopy))"
  },
  {
    "label": "IsCubemap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCubemap()"
  },
  {
    "label": "SetIsCubemap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsCubemap(bool bCubemap)"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackedData(bCubemap ? BitMask_CubeMap : 0) | (PackedData & (~BitMask_CubeMap))"
  },
  {
    "label": "GetNumSlices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSlices()"
  },
  {
    "label": "SetNumSlices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumSlices(int32 NumSlices)"
  },
  {
    "label": "PackedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackedData(NumSlices & BitMask_NumSlices) | (PackedData & (~BitMask_NumSlices))"
  },
  {
    "label": "GetNumMipsInTail()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumMipsInTail()"
  },
  {
    "label": "IsAsyncWorkComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncWorkComplete()"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache(class UTexture& InTexture, const struct FTextureBuildSettings* InSettingsPerLayerFetchFirst, const struct FTextureBuildSettings* InSettingsPerLayerFetchOrBuild, const FTexturePlatformData::FTextureEncodeResultMetadata* OutResultMetadataPerLayerFetchFirst, const FTexturePlatformData::FTextureEncodeResultMetadata* OutResultMetadataPerLayerFetchOrBuild, uint32 InFlags, class ITextureCompressorModule* Compressor)"
  },
  {
    "label": "FinishCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCache()"
  },
  {
    "label": "TryCancelCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCancelCache()"
  },
  {
    "label": "CancelCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCache()"
  },
  {
    "label": "TryInlineMipData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInlineMipData(int32 FirstMipToLoad = 0, FStringView DebugContext=FStringView())"
  },
  {
    "label": "LaunchEstimateOnDiskSizeTask()",
    "kind": "Method",
    "detail": "Function (TFuture<TTuple<uint64,uint64>>)",
    "insertText": "LaunchEstimateOnDiskSizeTask(FOodleDataCompression::ECompressor InOodleCompressor, FOodleDataCompression::ECompressionLevel InOodleCompressionLevel, uint32 InCompressionBlockSize, FStringView InDebugContext)"
  },
  {
    "label": "AreDerivedMipsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDerivedMipsAvailable(FStringView Context)"
  },
  {
    "label": "AreDerivedVTChunksAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDerivedVTChunksAvailable(FStringView Context)"
  },
  {
    "label": "GetNumNonStreamingMips()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumNonStreamingMips(bool bIsStreamingPossible)"
  },
  {
    "label": "GetNumNonOptionalMips()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNonOptionalMips()"
  },
  {
    "label": "CanBeLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeLoaded()"
  },
  {
    "label": "GetNumVTMips()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumVTMips()"
  },
  {
    "label": "GetLayerPixelFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetLayerPixelFormat(uint32 LayerIndex)"
  },
  {
    "label": "GetPayloadSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetPayloadSize(int32 MipBias)"
  },
  {
    "label": "CanUseCookedDataPath()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanUseCookedDataPath()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTextureFormatSettings() : CompressionSettings(TC_Default) , CompressionNoAlpha(false) , CompressionForceAlpha(false) , CompressionNone(false) , CompressionYCoCg(false) , SRGB(false)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTextureSourceColorSettings() : EncodingOverride(ETextureSourceEncoding::TSE_None) , ColorSpace(ETextureColorSpace::TCS_None) , RedChromaticityCoordinate(FVector2D::ZeroVector) , GreenChromaticityCoordinate(FVector2D::ZeroVector) , BlueChromaticityCoordinate(FVector2D::ZeroVector) , WhiteChromaticityCoordinate(FVector2D::ZeroVector) , ChromaticAdaptationMethod(ETextureChromaticAdaptationMethod::TCAM_Bradford)"
  },
  {
    "label": "UpdateColorSpaceChromaticities()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "UpdateColorSpaceChromaticities()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(abstract, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "OutdatedKnownCompositeTextureDetected()",
    "kind": "Method",
    "detail": "Function (private : class UTexture* KnownCompositeTexture = nullptr ; void)",
    "insertText": "OutdatedKnownCompositeTextureDetected()"
  },
  {
    "label": "NotifyIfCompositeTextureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyIfCompositeTextureChanged()"
  },
  {
    "label": "SetCompositeTexture()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCompositeTexture(UTexture* InCompositeTexture)"
  },
  {
    "label": "GetCompositeTexture()",
    "kind": "Method",
    "detail": "Function (} UTexture*)",
    "insertText": "GetCompositeTexture()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(KnownCompositeTexture != CompositeTexture)"
  },
  {
    "label": "UTexture()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR TMap<FString,bool> DidSerializeStreamingMipsForPlatform ; # endif private : class FTextureResource* PrivateResource ; class FTextureResource* PrivateResourceRenderThread ; public :)",
    "insertText": "UTexture(FVTableHelper& Helper)"
  },
  {
    "label": "UTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UTexture()"
  },
  {
    "label": "SetResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResource(FTextureResource* Resource)"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (FTextureResource*)",
    "insertText": "GetResource()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FTextureReference& TextureReference ; FRenderCommandFence ReleaseFence ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTextureSaved, class UTexture*)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "GetTextureClass()",
    "kind": "Method",
    "detail": "Function (ETextureClass)",
    "insertText": "GetTextureClass() const PURE_VIRTUAL(UTexture::GetTextureClass, return ETextureClass::Invalid;)"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "UpdateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResource()"
  },
  {
    "label": "CreateResource()",
    "kind": "Method",
    "detail": "Function (class FTextureResource*)",
    "insertText": "CreateResource() PURE_VIRTUAL(UTexture::CreateResource,return NULL;)"
  },
  {
    "label": "GetCachedLODBias()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCachedLODBias()"
  },
  {
    "label": "CalculateLODBias()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CalculateLODBias(bool bWithCinematicMipBias)"
  },
  {
    "label": "GetMaterialType()",
    "kind": "Method",
    "detail": "Function (EMaterialValueType)",
    "insertText": "GetMaterialType() const PURE_VIRTUAL(UTexture::GetMaterialType,return MCT_Texture;)"
  },
  {
    "label": "IsCurrentlyVirtualTextured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentlyVirtualTextured()"
  },
  {
    "label": "RequiresVirtualTexturing()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "RequiresVirtualTexturing()"
  },
  {
    "label": "IsVirtualTexturingEnabled()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsVirtualTexturingEnabled(const ITargetPlatformSettings * TargetPlatform = nullptr)"
  },
  {
    "label": "GetRunningPlatformData()",
    "kind": "Method",
    "detail": "Function (FTexturePlatformData**)",
    "insertText": "GetRunningPlatformData()"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuiltTextureSize(const ITargetPlatform* TargetPlatform , int32 & OutSizeX, int32 & OutSizeY, int32 & OutSizeZ)"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuiltTextureSize(const class ITargetPlatformSettings* TargetPlatformSettings, const class ITargetPlatformControls* TargetPlatformControls, int32 & OutSizeX, int32 & OutSizeY, int32 & OutSizeZ)"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuiltTextureSize(const ITargetPlatform* TargetPlatform , int32 & OutSizeX, int32 & OutSizeY)"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (int32 IgnoredSizeZ ;)",
    "insertText": "GetBuiltTextureSize(TargetPlatform,OutSizeX,OutSizeY,IgnoredSizeZ)"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBuiltTextureSize(const class ITargetPlatformSettings* TargetPlatformSettings, const class ITargetPlatformControls* TargetPlatformControls, int32 & OutSizeX, int32 & OutSizeY)"
  },
  {
    "label": "GetBuiltTextureSize()",
    "kind": "Method",
    "detail": "Function (int32 IgnoredSizeZ ;)",
    "insertText": "GetBuiltTextureSize(TargetPlatformSettings,TargetPlatformControls,OutSizeX,OutSizeY,IgnoredSizeZ)"
  },
  {
    "label": "SerializeCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeCookedPlatformData(class FArchive& Ar, const bool bSerializeMipData = true)"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetUserData(UAssetUserData* InUserData)"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "CachePlatformData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CachePlatformData(bool bAsyncCache = false, bool bAllowAsyncBuild = false, bool bAllowAsyncLoading = false, class ITextureCompressorModule* Compressor = nullptr)"
  },
  {
    "label": "CanBuildPlatformData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBuildPlatformData(const ITargetPlatformSettings * TargetPlatform = nullptr)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearAllCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCachedCookedPlatformData()"
  },
  {
    "label": "IsDefaultTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultTexture()"
  },
  {
    "label": "BeginCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCachePlatformData()"
  },
  {
    "label": "IsAsyncCacheComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncCacheComplete()"
  },
  {
    "label": "FinishCachePlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCachePlatformData()"
  },
  {
    "label": "ForceRebuildPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuildPlatformData(uint8 InEncodeSpeedOverride=255)"
  },
  {
    "label": "MarkPlatformDataTransient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPlatformDataTransient()"
  },
  {
    "label": "GetMaximumDimension()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaximumDimension()"
  },
  {
    "label": "GetLayerFormatSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLayerFormatSettings(int32 LayerIndex, FTextureFormatSettings& OutSettings)"
  },
  {
    "label": "SetLayerFormatSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerFormatSettings(int32 LayerIndex, const FTextureFormatSettings& InSettings)"
  },
  {
    "label": "GetDefaultFormatSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultFormatSettings(FTextureFormatSettings& OutSettings)"
  },
  {
    "label": "GetDesiredEncodeSpeed()",
    "kind": "Method",
    "detail": "Function (ETextureEncodeSpeed)",
    "insertText": "GetDesiredEncodeSpeed()"
  },
  {
    "label": "ValidateSettingsAfterImportOrEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSettingsAfterImportOrEdit(bool * pRequiresNotifyMaterials = nullptr)"
  },
  {
    "label": "UpdateOodleTextureSdkVersionToLatest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOodleTextureSdkVersionToLatest(bool bDoPrePostEditChangeIfChanging = false)"
  },
  {
    "label": "SetModernSettingsForNewOrChangedTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModernSettingsForNewOrChangedTexture()"
  },
  {
    "label": "GetPlatformTextureFormatNamesWithPrefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformTextureFormatNamesWithPrefix(const class ITargetPlatform* TargetPlatform,TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetGammaSpace()",
    "kind": "Method",
    "detail": "Function (# endif EGammaSpace)",
    "insertText": "GetGammaSpace()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(SRGB && bUseLegacyGamma)"
  },
  {
    "label": "GetSurfaceHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSurfaceHeight() const PURE_VIRTUAL(UTexture::GetSurfaceHeight,return 0;)"
  },
  {
    "label": "GetSurfaceDepth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSurfaceDepth() const PURE_VIRTUAL(UTexture::GetSurfaceDepth, return 0;)"
  },
  {
    "label": "GetSurfaceArraySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSurfaceArraySize() const PURE_VIRTUAL(UTexture::GetSurfaceArraySize, return 0;)"
  },
  {
    "label": "GetTextureAddressX()",
    "kind": "Method",
    "detail": "Function (TextureAddress)",
    "insertText": "GetTextureAddressX()"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "BlockOnAnyAsyncBuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlockOnAnyAsyncBuild()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PostCDOContruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCDOContruct()"
  },
  {
    "label": "AppendToClassSchema()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "AppendToClassSchema(FAppendToClassSchemaContext& Context)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "GetLODGroupForStreaming()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODGroupForStreaming()"
  },
  {
    "label": "GetRenderAssetType()",
    "kind": "Method",
    "detail": "Function (} EStreamableRenderAssetType)",
    "insertText": "GetRenderAssetType()"
  },
  {
    "label": "DoesMipDataExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMipDataExist(const int32 MipIndex)"
  },
  {
    "label": "HasPendingRenderResourceInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingRenderResourceInitialization()"
  },
  {
    "label": "HasPendingLODTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingLODTransition()"
  },
  {
    "label": "InvalidateLastRenderTimeForStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLastRenderTimeForStreaming()"
  },
  {
    "label": "GetLastRenderTimeForStreaming()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastRenderTimeForStreaming()"
  },
  {
    "label": "ShouldMipLevelsBeForcedResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldMipLevelsBeForcedResident()"
  },
  {
    "label": "CancelPendingTextureStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingTextureStreaming()"
  },
  {
    "label": "GetAverageBrightness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAverageBrightness(bool bIgnoreTrueBlack, bool bUseGrayscale)"
  },
  {
    "label": "GetTextureGroupString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTextureGroupString(TextureGroup InGroup)"
  },
  {
    "label": "GetMipGenSettingsString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetMipGenSettingsString(TextureMipGenSettings InEnum)"
  },
  {
    "label": "GetMipGenSettingsFromString()",
    "kind": "Method",
    "detail": "Function (TextureMipGenSettings)",
    "insertText": "GetMipGenSettingsFromString(const TCHAR* InStr, bool bTextureGroup)"
  },
  {
    "label": "ForceUpdateTextureStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceUpdateTextureStreaming()"
  },
  {
    "label": "HasHDRSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHDRSource(int32 LayerIndex = 0)"
  },
  {
    "label": "IsHDR()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return)",
    "insertText": "IsHDR(Source.GetFormat(LayerIndex))"
  },
  {
    "label": "IsNormalMap()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } bool)",
    "insertText": "IsNormalMap()"
  },
  {
    "label": "IsUncompressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUncompressed()"
  },
  {
    "label": "IsCookPlatformTilingDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCookPlatformTilingDisabled(const ITargetPlatformSettings* TargetPlatformSettings)"
  },
  {
    "label": "IsCookPlatformTilingDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookPlatformTilingDisabled(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CalcTextureMemorySizeEnum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CalcTextureMemorySizeEnum(ETextureMipCount Enum)"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA LightingGuid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (# else LightingGuid =)",
    "insertText": "FGuid(0, 0, 0, 0)"
  },
  {
    "label": "SetLightingGuid()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "SetLightingGuid(const FGuid& Guid)"
  },
  {
    "label": "SetDeterministicLightingGuid()",
    "kind": "Method",
    "detail": "Function (LightingGuid = Guid ; } void)",
    "insertText": "SetDeterministicLightingGuid()"
  },
  {
    "label": "GetPixelFormatEnum()",
    "kind": "Method",
    "detail": "Function (class UEnum*)",
    "insertText": "GetPixelFormatEnum()"
  },
  {
    "label": "GetStaticMinTextureResidentMipCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStaticMinTextureResidentMipCount()"
  },
  {
    "label": "IsPossibleToStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPossibleToStream()"
  },
  {
    "label": "IsCandidateForTextureStreamingOnPlatformDuringCook()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsCandidateForTextureStreamingOnPlatformDuringCook(const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "DownsizeImageUsingTextureSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DownsizeImageUsingTextureSettings(const ITargetPlatform* TargetPlatform, FImage& InOutImage, int32 TargetSize, int32 LayerIndex, bool & OutMadeChanges)"
  },
  {
    "label": "GetTargetPlatformBuildSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTargetPlatformBuildSettings(const ITargetPlatform* TargetPlatform, TArray<TArray<FTextureBuildSettings>>& OutSettingsPerFormatPerLayer)"
  },
  {
    "label": "GetMaximumDimensionOfNonVT()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetMaximumDimensionOfNonVT()"
  },
  {
    "label": "TryCancelCachePlatformData()",
    "kind": "Method",
    "detail": "Function (protected : int32 GMinTextureResidentMipCount ; # if WITH_EDITOR class FTextureCompilingManager ; enum class ENotifyMaterialsEffectOnShaders { Default,DoesNotInvalidate } ; bool)",
    "insertText": "TryCancelCachePlatformData()"
  },
  {
    "label": "NotifyMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMaterials(const ENotifyMaterialsEffectOnShaders EffectOnShaders = ENotifyMaterialsEffectOnShaders::Default)"
  },
  {
    "label": "BeginFinalReleaseResource()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginFinalReleaseResource()"
  },
  {
    "label": "GetResourcePostInitState()",
    "kind": "Method",
    "detail": "Function (FStreamableRenderResourceState)",
    "insertText": "GetResourcePostInitState(const FTexturePlatformData* PlatformData, bool bAllowStreaming, int32 MinRequestMipCount = 0, int32 MaxMipCount = 0, bool bSkipCanBeLoaded = false)"
  }
]