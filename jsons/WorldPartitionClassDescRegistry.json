[
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "FWorldPartitionClassDescRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionClassDescRegistry"
  },
  {
    "label": "FActorDescArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDescArchive"
  },
  {
    "label": "UWorldPartitionResaveActorsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionResaveActorsBuilder"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Misc / LazySingleton . h \" # include \" UObject / ObjectMacros . h \" # include \" WorldPartition / ActorDescList . h \" # include \" ModuleDescriptor . h \" class UActorDescContainer ; class FWorldPartitionClassDescRegistry : public FActorDescList { using FNameClassDescMap = TMap<FTopLevelAssetPath,TUniquePtr<FWorldPartitionActorDesc>*> ; using FParentClassMap = TMap<FTopLevelAssetPath,FTopLevelAssetPath> ; using FRedirectClassMap = TMap<FTopLevelAssetPath,FTopLevelAssetPath> ; public : FWorldPartitionClassDescRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "PrefetchClassDescs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchClassDescs(const TArray<FTopLevelAssetPath>& InClassPaths)"
  },
  {
    "label": "IsRegisteredClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegisteredClass(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "IsDerivedFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDerivedFrom(const FWorldPartitionActorDesc* InClassDesc, const FWorldPartitionActorDesc* InParentClassDesc)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FWorldPartitionClassDescRegistry, FClassDescriptorUpdated, const FWorldPartitionActorDesc*)"
  },
  {
    "label": "OnClassDescriptorUpdated()",
    "kind": "Method",
    "detail": "Function (FClassDescriptorUpdated&)",
    "insertText": "OnClassDescriptorUpdated()"
  },
  {
    "label": "RegisterClassDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClassDescriptor(FWorldPartitionActorDesc* InClassDesc)"
  },
  {
    "label": "UnregisterClassDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterClassDescriptor(FWorldPartitionActorDesc* InClassDesc)"
  },
  {
    "label": "RegisterClassDescriptorFromAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClassDescriptorFromAssetData(const FAssetData& InAssetData)"
  },
  {
    "label": "RegisterClassDescriptorFromActorClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClassDescriptorFromActorClass(const UClass* InActorClass)"
  },
  {
    "label": "GetClassDescDefault()",
    "kind": "Method",
    "detail": "Function (class FActorDescArchive ; class UActorDescContainer ; const FWorldPartitionActorDesc*)",
    "insertText": "GetClassDescDefault(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "GetClassDescDefaultForActor()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc*)",
    "insertText": "GetClassDescDefaultForActor(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "GetClassDescDefaultForClass()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc*)",
    "insertText": "GetClassDescDefaultForClass(const FTopLevelAssetPath& InClassPath)"
  },
  {
    "label": "GetParentClassMap()",
    "kind": "Method",
    "detail": "Function (class UWorldPartitionResaveActorsBuilder ; const FParentClassMap&)",
    "insertText": "GetParentClassMap()"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* InObject, FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "OnPluginLoadingPhaseComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPluginLoadingPhaseComplete(ELoadingPhase::Type InLoadingPhase, bool bInPhaseSuccessful)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const FAssetData& InAssetData)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRenamed(const FAssetData& InAssetData, const FString& InOldObjectPath)"
  },
  {
    "label": "RegisterClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClass(UClass* Class)"
  },
  {
    "label": "RegisterClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClasses()"
  },
  {
    "label": "UpdateClassDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClassDescriptor(UObject* InObject, bool bOnlyIfExists)"
  },
  {
    "label": "ValidateInternalState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateInternalState()"
  },
  {
    "label": "RedirectClassPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "RedirectClassPath(const FTopLevelAssetPath& InClassPath)"
  }
]