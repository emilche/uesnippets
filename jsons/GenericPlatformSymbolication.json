[
  {
    "label": "FProgramCounterSymbolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProgramCounterSymbolInfo"
  },
  {
    "label": "TSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSet"
  },
  {
    "label": "TCallTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraits"
  },
  {
    "label": "FGenericPlatformSymbolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSymbolInfo"
  },
  {
    "label": "FGenericPlatformSymbolData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSymbolData"
  },
  {
    "label": "FGenericPlatformSymbolDatabase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSymbolDatabase"
  },
  {
    "label": "FGenericPlatformSymbolDatabaseKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSymbolDatabaseKeyFuncs"
  },
  {
    "label": "FGenericPlatformSymbolication",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSymbolication"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformStackWalk . h \" # include \" Serialization / Archive . h \" # include \" Templates / UnrealTypeTraits . h \" struct FProgramCounterSymbolInfo ; template<InElementType,KeyFuncs,Allocator> class TSet ; template<T> struct TCallTraits ; struct FGenericPlatformSymbolInfo { uint32 Line ; uint64 Start ; uint64 Length ; int32 PathIdx ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FGenericPlatformSymbolInfo& Info)"
  },
  {
    "label": "LoadSymbolDatabaseForBinary()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSet<FGenericPlatformSymbolDatabase,FGenericPlatformSymbolDatabaseKeyFuncs> FGenericPlatformSymbolDatabaseSet ; struct FGenericPlatformSymbolication { bool)",
    "insertText": "LoadSymbolDatabaseForBinary(FString SourceFolder, FString BinaryPath, FString BinarySignature, TOptional<FString> Architecture, FGenericPlatformSymbolDatabase& OutDatabase)"
  },
  {
    "label": "SaveSymbolDatabaseForBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveSymbolDatabaseForBinary(FString TargetFolder, FString Name, FGenericPlatformSymbolDatabase& Database)"
  },
  {
    "label": "SymbolInfoForStrippedSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SymbolInfoForStrippedSymbol(FGenericPlatformSymbolDatabase const& Database, uint64 ProgramCounter, uint64 ModuleOffset, FString ModuleSignature, FProgramCounterSymbolInfo& Info)"
  },
  {
    "label": "SymbolInfoForAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SymbolInfoForAddress(uint64 ProgramCounter, FProgramCounterSymbolInfo& Info)"
  }
]