[
  {
    "label": "String",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "String"
  },
  {
    "label": "LocalObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalObject"
  },
  {
    "label": "CHECK_FOR_JNI_EXCEPTION_AND_RETURN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<jni . h> # include<string> # include<vector> # define)",
    "insertText": "CHECK_FOR_JNI_EXCEPTION_AND_RETURN(A) \\ if (RawExceptionCheck())"
  },
  {
    "label": "GetExceptionMessage()",
    "kind": "Method",
    "detail": "Function (\\ std::string exception_msg =)",
    "insertText": "GetExceptionMessage()"
  },
  {
    "label": "ALOGW()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ALOGW(\"%s\", exception_msg.c_str())"
  },
  {
    "label": "SAFE_LOGGING_CHECK_FOR_JNI_EXCEPTION_AND_RETURN()",
    "kind": "Method",
    "detail": "Function (\\ return A ; \\ } # define)",
    "insertText": "SAFE_LOGGING_CHECK_FOR_JNI_EXCEPTION_AND_RETURN(A, B) \\ if (RawExceptionCheck())"
  },
  {
    "label": "GetExceptionMessage()",
    "kind": "Method",
    "detail": "Function (\\ std::string exception_msg = \\ B ?)",
    "insertText": "GetExceptionMessage() \\ : RemoveSensitiveInfoFromExceptionMessage( \\ GetExceptionMessage())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (\\ return A ; \\ } namespace gamesdk { namespace jni { void)",
    "insertText": "Init(JNIEnv* env, jobject ctx)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (JNIEnv*)",
    "insertText": "Env()"
  },
  {
    "label": "DetachThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachThread()"
  },
  {
    "label": "AppContextGlobalRef()",
    "kind": "Method",
    "detail": "Function (jobject)",
    "insertText": "AppContextGlobalRef()"
  },
  {
    "label": "FindClass()",
    "kind": "Method",
    "detail": "Function (jclass)",
    "insertText": "FindClass(const char* class_name)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (class String { jstring j_str_ ; const char* c_str_ ; public :)",
    "insertText": "String(const char* s) : j_str_(Env()->NewStringUTF(s)), c_str_(nullptr)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "String(jstring s) : j_str_(s), c_str_(nullptr)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "String(String&& rhs) : j_str_(rhs.j_str_), c_str_(rhs.c_str_)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (rhs . j_str_ = nullptr ; rhs . c_str_ = nullptr ; })",
    "insertText": "String(const String& rhs) : j_str_(rhs.j_str_), c_str_(nullptr)"
  },
  {
    "label": "jstring()",
    "kind": "Method",
    "detail": "Function (j_str_ = reinterpret_cast<)",
    "insertText": "jstring(Env()->NewLocalRef(j_str_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } String&)",
    "insertText": "operator(const String& rhs)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "jstring()",
    "kind": "Method",
    "detail": "Function (j_str_ = reinterpret_cast<)",
    "insertText": "jstring(Env()->NewLocalRef(rhs.j_str_))"
  },
  {
    "label": "J()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } jstring)",
    "insertText": "J()"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (c_str_ =)",
    "insertText": "Env()->GetStringUTFChars(j_str_, nullptr)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (} return c_str_ ; } ~)",
    "insertText": "String()"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Env()->ReleaseStringUTFChars(j_str_, c_str_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (c_str_ = nullptr ; })",
    "insertText": "if(j_str_ != nullptr)"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Env()->DeleteLocalRef(j_str_)"
  },
  {
    "label": "LocalObject()",
    "kind": "Method",
    "detail": "Function (j_str_ = nullptr ; } } } ; class LocalObject { jobject obj_ ; jclass clz_ ; public : int BAD_FIELD = - 1 ;)",
    "insertText": "LocalObject(jobject o = nullptr, jclass c = nullptr) : obj_(o), clz_(c)"
  },
  {
    "label": "LocalObject()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LocalObject()"
  },
  {
    "label": "LocalObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LocalObject(LocalObject&& o) : obj_(o.obj_), clz_(o.clz_)"
  },
  {
    "label": "LocalObject()",
    "kind": "Method",
    "detail": "Function (o . obj_ = nullptr ; o . clz_ = nullptr ; })",
    "insertText": "LocalObject(const LocalObject& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalObject&)",
    "insertText": "operator(const LocalObject& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LocalObject&)",
    "insertText": "operator(LocalObject&& o)"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Env()->DeleteLocalRef(obj_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} obj_ = o . obj_ ; })",
    "insertText": "if(clz_ != o.clz_)"
  },
  {
    "label": "Env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Env()->DeleteLocalRef(clz_)"
  },
  {
    "label": "ObjNewRef()",
    "kind": "Method",
    "detail": "Function (} clz_ = o . clz_ ; } o . obj_ = nullptr ; o . clz_ = nullptr ; return* this ; } jobject)",
    "insertText": "ObjNewRef()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "SetClass()",
    "kind": "Method",
    "detail": "Function (obj_ = o ; } void)",
    "insertText": "SetClass(jclass c)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (clz_ = c ; } bool)",
    "insertText": "Cast(const std::string& clz_to = \"\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (jclass c ;)",
    "insertText": "if(clz_to.empty())"
  },
  {
    "label": "FindClass()",
    "kind": "Method",
    "detail": "Function (} else { c =)",
    "insertText": "FindClass(clz_to.c_str())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(c == nullptr)"
  },
  {
    "label": "SetClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClass(c)"
  },
  {
    "label": "CallStaticObjectMethod()",
    "kind": "Method",
    "detail": "Function (jobject)",
    "insertText": "CallStaticObjectMethod(const char* name, const char* sig, ...)"
  },
  {
    "label": "CallStringMethod()",
    "kind": "Method",
    "detail": "Function (jni::String)",
    "insertText": "CallStringMethod(const char* name, const char* sig, ...)"
  },
  {
    "label": "CallVoidMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallVoidMethod(const char* name, const char* sig, ...)"
  },
  {
    "label": "CallIntMethod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CallIntMethod(const char* name, const char* sig, ...)"
  },
  {
    "label": "CallBooleanMethod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallBooleanMethod(const char* name, const char* sig, ...)"
  },
  {
    "label": "GetObjectField()",
    "kind": "Method",
    "detail": "Function (LocalObject)",
    "insertText": "GetObjectField(const char* field_name, const char* sig)"
  },
  {
    "label": "GetIntField()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIntField(const char* field_name)"
  },
  {
    "label": "GetBooleanField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBooleanField(const char* field_name)"
  },
  {
    "label": "GetLongField()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetLongField(const char* field_name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(obj_ != nullptr)"
  },
  {
    "label": "NewObjectV()",
    "kind": "Method",
    "detail": "Function (} obj_ = nullptr ; clz_ = nullptr ; } } ; LocalObject)",
    "insertText": "NewObjectV(const char* cclz, const char* ctorSig, va_list argptr)"
  },
  {
    "label": "NewObject()",
    "kind": "Method",
    "detail": "Function (LocalObject)",
    "insertText": "NewObject(const char* cclz, const char* ctorSig, ...)"
  },
  {
    "label": "RawExceptionCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RawExceptionCheck()"
  },
  {
    "label": "RemoveSensitiveInfoFromExceptionMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "RemoveSensitiveInfoFromExceptionMessage(const std::string& exception_message)"
  },
  {
    "label": "CheckForException()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForException(std::string& msg)"
  },
  {
    "label": "GetByteArrayBytesAndDeleteRef()",
    "kind": "Method",
    "detail": "Function (std::vector<unsigned char>)",
    "insertText": "GetByteArrayBytesAndDeleteRef(jbyteArray jbs)"
  },
  {
    "label": "GetStaticStringField()",
    "kind": "Method",
    "detail": "Function (jni::String)",
    "insertText": "GetStaticStringField(const char* class_name, const char* field_name)"
  },
  {
    "label": "DumpLocalRefTable()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG void)",
    "insertText": "DumpLocalRefTable()"
  }
]