[
  {
    "label": "GetTopologicalSplitType()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_SDC_BILINEAR_SCHEME_H # define OPENSUBDIV3_SDC_BILINEAR_SCHEME_H # include \" . . / version . h \" # include \" . . / sdc / scheme . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Sdc { template<> Split Scheme<SCHEME_BILINEAR)",
    "insertText": "GetTopologicalSplitType()"
  },
  {
    "label": "assignCreaseMaskForEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseMaskForEdge(edge, mask)"
  },
  {
    "label": "ComputeVertexVertexMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "ComputeVertexVertexMask(VERTEX const& vertex, MASK& mask, Crease::Rule, Crease::Rule)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerMaskForVertex(vertex, mask)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignCornerLimitMask(VERTEX const& , MASK& posMask)"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "SetNumVertexWeights(1)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "SetNumEdgeWeights(0)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "SetNumFaceWeights(0)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "SetFaceWeightsForFaceCenters(false)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (posMask .)",
    "insertText": "VertexWeight(0)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignCreaseLimitMask(VERTEX const& vertex, MASK& posMask, int const [2])"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerLimitMask(vertex, posMask)"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignSmoothLimitMask(VERTEX const& vertex, MASK& posMask)"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignCornerLimitTangentMasks(VERTEX const& , MASK& tan1Mask, MASK& tan2Mask)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "SetNumEdgeWeights(2)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "EdgeWeight(0)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (tan1Mask .)",
    "insertText": "EdgeWeight(1)"
  },
  {
    "label": "assignCreaseLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignCreaseLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask, int const [2])"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerLimitTangentMasks(vertex, tan1Mask, tan2Mask)"
  },
  {
    "label": "assignSmoothLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (} template<> template<VERTEX,MASK> void Scheme<SCHEME_BILINEAR)",
    "insertText": "assignSmoothLimitTangentMasks(VERTEX const& vertex, MASK& tan1Mask, MASK& tan2Mask)"
  }
]