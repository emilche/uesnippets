[
  {
    "label": "PKCS12_MAC_DATA_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PKCS12_MAC_DATA_st"
  },
  {
    "label": "PKCS12_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PKCS12_st"
  },
  {
    "label": "PKCS12_SAFEBAG_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PKCS12_SAFEBAG_st"
  },
  {
    "label": "pkcs12_bag_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pkcs12_bag_st"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_PKCS12_H # define HEADER_PKCS12_H # include<openssl / bio . h> # include<openssl / x509 . h> # include<openssl / pkcs12err . h> # ifdef __cplusplus \" C \" { # endif # define PKCS12_KEY_ID 1 # define PKCS12_IV_ID 2 # define PKCS12_MAC_ID 3 # ifndef PKCS12_DEFAULT_ITER # define PKCS12_DEFAULT_ITER PKCS5_DEFAULT_ITER # endif # define PKCS12_MAC_KEY_LENGTH 2 0 # define PKCS12_SALT_LEN 8 # define PKCS12_key_gen PKCS12_key_gen_utf8 # define PKCS12_add_friendlyname PKCS12_add_friendlyname_utf8 # define KEY_EX 0 x10 # define KEY_SIG 0 x80 typedef struct PKCS12_MAC_DATA_st PKCS12_MAC_DATA ; typedef struct PKCS12_st PKCS12 ; typedef struct PKCS12_SAFEBAG_st PKCS12_SAFEBAG ;)",
    "insertText": "DEFINE_STACK_OF(PKCS12_SAFEBAG)"
  },
  {
    "label": "DEPRECATEDIN_1_1_0()",
    "kind": "Method",
    "detail": "Function (# define PKCS12_ERROR 0 # define PKCS12_OK 1 # if OPENSSL_API_COMPAT<0 x10100000L # define M_PKCS12_bag_type PKCS12_bag_type # define M_PKCS12_cert_bag_type PKCS12_cert_bag_type # define M_PKCS12_crl_bag_type PKCS12_cert_bag_type # define PKCS12_certbag2x509 PKCS12_SAFEBAG_get1_cert # define PKCS12_certbag2scrl PKCS12_SAFEBAG_get1_crl # define PKCS12_bag_type PKCS12_SAFEBAG_get_nid # define PKCS12_cert_bag_type PKCS12_SAFEBAG_get_bag_nid # define PKCS12_x5092certbag PKCS12_SAFEBAG_create_cert # define PKCS12_x509crl2certbag PKCS12_SAFEBAG_create_crl # define PKCS12_MAKE_KEYBAG PKCS12_SAFEBAG_create0_p8inf # define PKCS12_MAKE_SHKEYBAG PKCS12_SAFEBAG_create_pkcs8_encrypt # endif)",
    "insertText": "DEPRECATEDIN_1_1_0(ASN1_TYPE *PKCS12_get_attr(const PKCS12_SAFEBAG *bag, int attr_nid)) ASN1_TYPE *PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid)"
  },
  {
    "label": "PKCS12_mac_present()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_mac_present(const PKCS12 *p12)"
  },
  {
    "label": "PKCS12_get0_mac()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac, const X509_ALGOR **pmacalg, const ASN1_OCTET_STRING **psalt, const ASN1_INTEGER **piter, const PKCS12 *p12)"
  },
  {
    "label": "PKCS12_SAFEBAG_get0_attr()",
    "kind": "Method",
    "detail": "Function (const ASN1_TYPE*)",
    "insertText": "PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag, int attr_nid)"
  },
  {
    "label": "PKCS12_SAFEBAG_get0_type()",
    "kind": "Method",
    "detail": "Function (const ASN1_OBJECT*)",
    "insertText": "PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get_bag_nid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get1_cert()",
    "kind": "Method",
    "detail": "Function (X509*)",
    "insertText": "PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get1_crl()",
    "kind": "Method",
    "detail": "Function (X509_CRL*)",
    "insertText": "PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(PKCS12_SAFEBAG) * PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get0_p8inf()",
    "kind": "Method",
    "detail": "Function (const PKCS8_PRIV_KEY_INFO*)",
    "insertText": "PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_get0_pkcs8()",
    "kind": "Method",
    "detail": "Function (const X509_SIG*)",
    "insertText": "PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_SAFEBAG_create_cert()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_SAFEBAG_create_cert(X509 *x509)"
  },
  {
    "label": "PKCS12_SAFEBAG_create_crl()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_SAFEBAG_create_crl(X509_CRL *crl)"
  },
  {
    "label": "PKCS12_SAFEBAG_create0_p8inf()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8)"
  },
  {
    "label": "PKCS12_SAFEBAG_create0_pkcs8()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8)"
  },
  {
    "label": "PKCS12_SAFEBAG_create_pkcs8_encrypt()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8inf)"
  },
  {
    "label": "PKCS12_item_pack_safebag()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it, int nid1, int nid2)"
  },
  {
    "label": "PKCS8_decrypt()",
    "kind": "Method",
    "detail": "Function (PKCS8_PRIV_KEY_INFO*)",
    "insertText": "PKCS8_decrypt(const X509_SIG *p8, const char *pass, int passlen)"
  },
  {
    "label": "PKCS12_decrypt_skey()",
    "kind": "Method",
    "detail": "Function (PKCS8_PRIV_KEY_INFO*)",
    "insertText": "PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag, const char *pass, int passlen)"
  },
  {
    "label": "PKCS8_encrypt()",
    "kind": "Method",
    "detail": "Function (X509_SIG*)",
    "insertText": "PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8)"
  },
  {
    "label": "PKCS8_set0_pbe()",
    "kind": "Method",
    "detail": "Function (X509_SIG*)",
    "insertText": "PKCS8_set0_pbe(const char *pass, int passlen, PKCS8_PRIV_KEY_INFO *p8inf, X509_ALGOR *pbe)"
  },
  {
    "label": "PKCS12_pack_p7data()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7)"
  },
  {
    "label": "PKCS12_pack_p7encdata()",
    "kind": "Method",
    "detail": "Function (PKCS7*)",
    "insertText": "PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) *bags)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass, int passlen)"
  },
  {
    "label": "PKCS12_pack_authsafes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(PKCS7) *PKCS12_unpack_authsafes(const PKCS12 *p12)"
  },
  {
    "label": "PKCS12_add_localkeyid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name, int namelen)"
  },
  {
    "label": "PKCS12_add_friendlyname_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)"
  },
  {
    "label": "PKCS12_add_friendlyname_utf8()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name, int namelen)"
  },
  {
    "label": "PKCS12_add_CSPName_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)"
  },
  {
    "label": "PKCS12_add_friendlyname_uni()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag, const unsigned char *name, int namelen)"
  },
  {
    "label": "PKCS8_add_keyusage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)"
  },
  {
    "label": "PKCS12_get_attr_gen()",
    "kind": "Method",
    "detail": "Function (ASN1_TYPE*)",
    "insertText": "PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs, int attr_nid)"
  },
  {
    "label": "PKCS12_get_friendlyname()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(X509_ATTRIBUTE) * PKCS12_SAFEBAG_get0_attrs(const PKCS12_SAFEBAG *bag)"
  },
  {
    "label": "PKCS12_pbe_crypt()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "PKCS12_pbe_crypt(const X509_ALGOR *algor, const char *pass, int passlen, const unsigned char *in, int inlen, unsigned char **data, int *datalen, int en_de)"
  },
  {
    "label": "PKCS12_item_decrypt_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, const ASN1_OCTET_STRING *oct, int zbuf)"
  },
  {
    "label": "PKCS12_item_i2d_encrypt()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "PKCS12_item_i2d_encrypt(X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, void *obj, int zbuf)"
  },
  {
    "label": "PKCS12_init()",
    "kind": "Method",
    "detail": "Function (PKCS12*)",
    "insertText": "PKCS12_init(int mode)"
  },
  {
    "label": "PKCS12_key_gen_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const EVP_MD *md_type)"
  },
  {
    "label": "PKCS12_key_gen_uni()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const EVP_MD *md_type)"
  },
  {
    "label": "PKCS12_key_gen_utf8()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const EVP_MD *md_type)"
  },
  {
    "label": "PKCS12_PBE_keyivgen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md_type, int en_de)"
  },
  {
    "label": "PKCS12_gen_mac()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen, unsigned char *mac, unsigned int *maclen)"
  },
  {
    "label": "PKCS12_verify_mac()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)"
  },
  {
    "label": "PKCS12_set_mac()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, const EVP_MD *md_type)"
  },
  {
    "label": "PKCS12_setup_mac()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen, const EVP_MD *md_type)"
  },
  {
    "label": "OPENSSL_asc2uni()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "OPENSSL_asc2uni(const char *asc, int asclen, unsigned char **uni, int *unilen)"
  },
  {
    "label": "OPENSSL_uni2asc()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "OPENSSL_uni2asc(const unsigned char *uni, int unilen)"
  },
  {
    "label": "OPENSSL_utf82uni()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "OPENSSL_utf82uni(const char *asc, int asclen, unsigned char **uni, int *unilen)"
  },
  {
    "label": "OPENSSL_uni2utf8()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "OPENSSL_uni2utf8(const unsigned char *uni, int unilen)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(PKCS12) DECLARE_ASN1_FUNCTIONS(PKCS12_MAC_DATA) DECLARE_ASN1_FUNCTIONS(PKCS12_SAFEBAG) DECLARE_ASN1_FUNCTIONS(PKCS12_BAGS) DECLARE_ASN1_ITEM(PKCS12_SAFEBAGS) DECLARE_ASN1_ITEM(PKCS12_AUTHSAFES) void PKCS12_PBE_add(void)"
  },
  {
    "label": "PKCS12_parse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca)"
  },
  {
    "label": "PKCS12_create()",
    "kind": "Method",
    "detail": "Function (PKCS12*)",
    "insertText": "PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey, X509 *cert, STACK_OF(X509) *ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype)"
  },
  {
    "label": "PKCS12_add_cert()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert)"
  },
  {
    "label": "PKCS12_add_key()",
    "kind": "Method",
    "detail": "Function (PKCS12_SAFEBAG*)",
    "insertText": "PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags, EVP_PKEY *key, int key_usage, int iter, int key_nid, const char *pass)"
  },
  {
    "label": "PKCS12_add_safe()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags, int safe_nid, int iter, const char *pass)"
  },
  {
    "label": "PKCS12_add_safes()",
    "kind": "Method",
    "detail": "Function (PKCS12*)",
    "insertText": "PKCS12_add_safes(STACK_OF(PKCS7) *safes, int p7_nid)"
  },
  {
    "label": "i2d_PKCS12_bio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)"
  },
  {
    "label": "i2d_PKCS12_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)"
  },
  {
    "label": "d2i_PKCS12_bio()",
    "kind": "Method",
    "detail": "Function (# endif PKCS12*)",
    "insertText": "d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)"
  },
  {
    "label": "d2i_PKCS12_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO PKCS12*)",
    "insertText": "d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)"
  },
  {
    "label": "PKCS12_newpass()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass)"
  }
]