[
  {
    "label": "allocator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "allocator_traits"
  },
  {
    "label": "rebind_alloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind_alloc"
  },
  {
    "label": "allocator_rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "allocator_rebind"
  },
  {
    "label": "allocator_copy_assignment()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_allocator_traits_H # define __TBB_allocator_traits_H # include \" . . / tbb_stddef . h \" # if __TBB_ALLOCATOR_TRAITS_PRESENT # include<memory> # endif # if __TBB_CPP11_RVALUE_REF_PRESENT # include<utility> # endif # include __TBB_STD_SWAP_HEADER namespace tbb { namespace internal { # if __TBB_ALLOCATOR_TRAITS_PRESENT typedef std::true_type traits_true_type ; typedef std::false_type traits_false_type ; # else typedef tbb::internal::true_type traits_true_type ; typedef tbb::internal::false_type traits_false_type ; # endif template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_copy_assignment(MyAlloc& my_allocator, OtherAlloc& other_allocator, traits_true_type)"
  },
  {
    "label": "allocator_copy_assignment()",
    "kind": "Method",
    "detail": "Function (my_allocator = other_allocator ; } template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_copy_assignment(MyAlloc&, OtherAlloc&, traits_false_type)"
  },
  {
    "label": "allocator_move_assignment()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_move_assignment(MyAlloc& my_allocator, OtherAlloc& other_allocator, traits_true_type)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (my_allocator =)",
    "insertText": "move(other_allocator)"
  },
  {
    "label": "allocator_move_assignment()",
    "kind": "Method",
    "detail": "Function (} template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_move_assignment(MyAlloc&, OtherAlloc&, traits_false_type)"
  },
  {
    "label": "allocator_swap()",
    "kind": "Method",
    "detail": "Function (} # endif template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_swap(MyAlloc& my_allocator, OtherAlloc& other_allocator, traits_true_type)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(my_allocator, other_allocator)"
  },
  {
    "label": "allocator_swap()",
    "kind": "Method",
    "detail": "Function (} template<MyAlloc,OtherAlloc> void)",
    "insertText": "allocator_swap(MyAlloc&, OtherAlloc&, traits_false_type)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_ALLOCATOR_TRAITS_PRESENT using std::allocator_traits ; # else template<Alloc> struct allocator_traits { typedef tbb::internal::false_type propagate_on_container_move_assignment ; typedef tbb::internal::false_type propagate_on_container_copy_assignment ; typedef tbb::internal::false_type propagate_on_container_swap ; typedef Alloc allocator_type ; typedef allocator_type::value_type value_type ; typedef allocator_type::pointer pointer ; typedef allocator_type::const_pointer const_pointer ; typedef allocator_type::difference_type difference_type ; typedef allocator_type::size_type size_type ; template<U> struct rebind_alloc { typedef Alloc::template rebind<U>::other other ; } ; pointer)",
    "insertText": "allocate(Alloc& a, size_type n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(Alloc& a, pointer p, size_type n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "deallocate(p, n)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<PT> void)",
    "insertText": "construct(Alloc&, PT* p)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(p)) PT()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<PT,T1> void)",
    "insertText": "construct(Alloc&, PT* p, __TBB_FORWARDING_REF(T1) t1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(p)) PT(tbb::internal::forward<T1>(t1))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<PT,T1,T2> void)",
    "insertText": "construct(Alloc&, PT* p, __TBB_FORWARDING_REF(T1) t1, __TBB_FORWARDING_REF(T2) t2)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(p)) PT(tbb::internal::forward<T1>(t1), tbb::internal::forward<T2>(t2))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<PT,T1,T2,T3> void)",
    "insertText": "construct(Alloc&, PT* p, __TBB_FORWARDING_REF(T1) t1, __TBB_FORWARDING_REF(T2) t2, __TBB_FORWARDING_REF(T3) t3)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(p)) PT(tbb::internal::forward<T1>(t1), tbb::internal::forward<T2>(t2), tbb::internal::forward<T3>(t3))"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "destroy(Alloc&, T* p)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "T()"
  },
  {
    "label": "suppress_unused_warning()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "suppress_unused_warning(p)"
  },
  {
    "label": "select_on_container_copy_construction()",
    "kind": "Method",
    "detail": "Function (} Alloc)",
    "insertText": "select_on_container_copy_construction(const Alloc& a)"
  }
]