[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Callback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Callback"
  },
  {
    "label": "CallbackList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackList"
  },
  {
    "label": "CallbackListReceivers()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_CALLBACK_LIST_H_ # define RTC_BASE_CALLBACK_LIST_H_ # include<utility> # include<vector> # include \" api / function_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / assume . h \" # include \" rtc_base / system / . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / untyped_function . h \" namespace webrtc { namespace callback_list_impl { class RTC_EXPORT CallbackListReceivers { public :)",
    "insertText": "CallbackListReceivers()"
  },
  {
    "label": "CallbackListReceivers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackListReceivers(const CallbackListReceivers&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackListReceivers&)",
    "insertText": "operator(const CallbackListReceivers&)"
  },
  {
    "label": "CallbackListReceivers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackListReceivers(CallbackListReceivers&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackListReceivers&)",
    "insertText": "operator(CallbackListReceivers&&)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template<UntypedFunctionArgsT> RTC_NO_INLINE void)",
    "insertText": "AddReceiver(const void* removal_tag, UntypedFunctionArgsT args)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(!send_in_progress_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(removal_tag != nullptr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "push_back({removal_tag, UntypedFunction::Create(args)})"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (} template<UntypedFunctionArgsT> RTC_NO_INLINE void)",
    "insertText": "AddReceiver(UntypedFunctionArgsT args)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "push_back({nullptr, UntypedFunction::Create(args)})"
  },
  {
    "label": "RemoveReceivers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveReceivers(const void* removal_tag)"
  },
  {
    "label": "Foreach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Foreach(rtc::FunctionView<void(UntypedFunction&)> fv)"
  },
  {
    "label": "pending_removal_tag()",
    "kind": "Method",
    "detail": "Function (private : const void*)",
    "insertText": "pending_removal_tag()"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(const void*, UntypedFunction::TrivialUntypedFunctionArgs<2>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(const void*, UntypedFunction::TrivialUntypedFunctionArgs<3>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(const void*, UntypedFunction::TrivialUntypedFunctionArgs<4>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(const void*, UntypedFunction::NontrivialUntypedFunctionArgs)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(const void*, UntypedFunction::FunctionPointerUntypedFunctionArgs)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::TrivialUntypedFunctionArgs<1>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::TrivialUntypedFunctionArgs<2>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::TrivialUntypedFunctionArgs<3>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::TrivialUntypedFunctionArgs<4>)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::NontrivialUntypedFunctionArgs)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "AddReceiver(UntypedFunction::FunctionPointerUntypedFunctionArgs)"
  },
  {
    "label": "CallbackList()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgT> class CallbackList { public :)",
    "insertText": "CallbackList()"
  },
  {
    "label": "CallbackList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackList(const CallbackList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackList&)",
    "insertText": "operator(const CallbackList&)"
  },
  {
    "label": "CallbackList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackList(CallbackList&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackList&)",
    "insertText": "operator(CallbackList&&)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (template<F> void)",
    "insertText": "AddReceiver(const void* removal_tag, F&& f)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "AddReceiver(removal_tag, UntypedFunction::PrepareArgs<void(ArgT...)>(std::forward<F>(f)))"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "AddReceiver(F&& f)"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "AddReceiver(UntypedFunction::PrepareArgs<void(ArgT...)>(std::forward<F>(f)))"
  },
  {
    "label": "RemoveReceivers()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "RemoveReceivers(removal_tag)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgU> void)",
    "insertText": "Send(ArgU&&... args)"
  },
  {
    "label": "Foreach()",
    "kind": "Method",
    "detail": "Function (receivers_ .)",
    "insertText": "Foreach([&](UntypedFunction& f) { f.Call<void(ArgT...)>(std::forward<ArgU>(args)...); })"
  }
]