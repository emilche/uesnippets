[
  {
    "label": "ITextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextFilterExpressionContext"
  },
  {
    "label": "FFileCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileCache"
  },
  {
    "label": "FCollectionManagerCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionManagerCache"
  },
  {
    "label": "FCollectionLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionLock"
  },
  {
    "label": "FCollectionLock_Read",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionLock_Read"
  },
  {
    "label": "FCollectionLock_RW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionLock_RW"
  },
  {
    "label": "FCollectionLock_Write",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionLock_Write"
  },
  {
    "label": "FObjectCollectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectCollectionInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCollectionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionManager"
  },
  {
    "label": "FObjectCollectionInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" Collection . h \" # include \" CollectionManagerTypes . h \" # include \" ICollectionManager . h \" # include \" Misc / Guid . h \" # include \" Templates / PimplPtr . h \" class ITextFilterExpressionContext ; namespace DirectoryWatcher { class FFileCache ; } class FCollectionManagerCache ; class FCollectionLock ; class FCollectionLock_Read ; class FCollectionLock_RW ; class FCollectionLock_Write ; struct FObjectCollectionInfo {)",
    "insertText": "FObjectCollectionInfo(const FCollectionNameType& InCollectionKey) : CollectionKey(InCollectionKey) , Reason(0)"
  },
  {
    "label": "FObjectCollectionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectCollectionInfo(const FCollectionNameType& InCollectionKey, const ECollectionRecursionFlags::Flags InReason) : CollectionKey(InCollectionKey) , Reason(InReason)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FCollectionNameType CollectionKey ; ECollectionRecursionFlags::Flags Reason ; } ; enum class ECollectionCacheFlags { None = 0,Names = 1<<0,Objects = 1<<1,Hierarchy = 1<<2,Colors = 1<<3,RecursionWorker = Names | Hierarchy,All = Names | Objects | Hierarchy | Colors,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECollectionCacheFlags)"
  },
  {
    "label": "FCollectionManager()",
    "kind": "Method",
    "detail": "Function (class FCollectionManager : public ICollectionManager { public :)",
    "insertText": "FCollectionManager()"
  },
  {
    "label": "GetAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "GetAssetsInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FName>& AssetPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FSoftObjectPath> Temp ;)",
    "insertText": "if(GetAssetsInCollection(CollectionName, ShareType, Temp, RecursionMode))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (AssetPaths .)",
    "insertText": "Append(UE::SoftObjectPath::Private::ConvertSoftObjectPaths(Temp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FSoftObjectPath> Temp ;)",
    "insertText": "if(GetObjectsInCollection(CollectionName, ShareType, Temp, RecursionMode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FTopLevelAssetPath> Temp ;)",
    "insertText": "if(GetClassesInCollection(CollectionName, ShareType, Temp, RecursionMode))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ClassPaths .)",
    "insertText": "Add(Path.ToFName())"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (} return true ; } return false ; } void)",
    "insertText": "GetCollectionsContainingObject(FName ObjectPath, ECollectionShareType::Type ShareType, TArray<FName>& OutCollectionNames, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(FSoftObjectPath(ObjectPath), ShareType, OutCollectionNames, RecursionMode)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCollectionsContainingObject(FName ObjectPath, TArray<FCollectionNameType>& OutCollections, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(FSoftObjectPath(ObjectPath), OutCollections, RecursionMode)"
  },
  {
    "label": "GetCollectionsContainingObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCollectionsContainingObjects(const TArray<FName>& ObjectPathNames, TMap<FCollectionNameType, TArray<FName>>& OutCollectionsAndMatchedObjects, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "ConvertObjectPathNames()",
    "kind": "Method",
    "detail": "Function (TArray<FSoftObjectPath> Paths = UE::SoftObjectPath::)",
    "insertText": "ConvertObjectPathNames(ObjectPathNames)"
  },
  {
    "label": "GetCollectionsContainingObjects()",
    "kind": "Method",
    "detail": "Function (TMap<FCollectionNameType,TArray<FSoftObjectPath>> TmpMap ;)",
    "insertText": "GetCollectionsContainingObjects(Paths, TmpMap, RecursionMode)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<FName>& Names = OutCollectionsAndMatchedObjects .)",
    "insertText": "FindOrAdd(Pair.Key)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Names .)",
    "insertText": "Append(UE::SoftObjectPath::Private::ConvertSoftObjectPaths(Pair.Value))"
  },
  {
    "label": "GetCollectionsStringForObject()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetCollectionsStringForObject(FName ObjectPath, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self, bool bFullPaths = true)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ObjectPath)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, const TArray<FName>& ObjectPaths, int32* OutNumAdded = nullptr)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ObjectPath)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, const TArray<FName>& ObjectPaths, int32* OutNumRemoved = nullptr)"
  },
  {
    "label": "IsObjectInCollection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectInCollection(FName ObjectPath, FName CollectionName, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "HandleRedirectorDeleted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleRedirectorDeleted(const FName& ObjectPath)"
  },
  {
    "label": "HandleObjectRenamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleObjectRenamed(const FName& OldObjectPath, const FName& NewObjectPath)"
  },
  {
    "label": "HandleObjectDeleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleObjectDeleted(const FName& ObjectPath)"
  },
  {
    "label": "HasCollections()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "HasCollections()"
  },
  {
    "label": "GetCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollections(TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollections(FName CollectionName, TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionNames(ECollectionShareType::Type ShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetRootCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootCollections(TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetRootCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootCollectionNames(ECollectionShareType::Type ShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetChildCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildCollections(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FCollectionNameType>& OutCollections)"
  },
  {
    "label": "GetChildCollectionNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildCollectionNames(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionShareType::Type ChildShareType, TArray<FName>& CollectionNames)"
  },
  {
    "label": "GetParentCollection()",
    "kind": "Method",
    "detail": "Function (TOptional<FCollectionNameType>)",
    "insertText": "GetParentCollection(FName CollectionName, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "CollectionExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectionExists(FName CollectionName, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "GetAssetsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FSoftObjectPath>& AssetPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetObjectsInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetObjectsInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FSoftObjectPath>& ObjectPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetClassesInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClassesInCollection(FName CollectionName, ECollectionShareType::Type ShareType, TArray<FTopLevelAssetPath>& ClassPaths, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(const FSoftObjectPath& ObjectPath, ECollectionShareType::Type ShareType, TArray<FName>& OutCollectionNames, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObject(const FSoftObjectPath& ObjectPath, TArray<FCollectionNameType>& OutCollections, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsContainingObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionsContainingObjects(const TArray<FSoftObjectPath>& ObjectPaths, TMap<FCollectionNameType, TArray<FSoftObjectPath>>& OutCollectionsAndMatchedObjects, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self)"
  },
  {
    "label": "GetCollectionsStringForObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCollectionsStringForObject(const FSoftObjectPath& ObjectPath, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self, bool bFullPaths = true)"
  },
  {
    "label": "CreateUniqueCollectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUniqueCollectionName(const FName& BaseName, ECollectionShareType::Type ShareType, FName& OutCollectionName)"
  },
  {
    "label": "IsValidCollectionName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCollectionName(const FString& CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "CreateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCollection(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionStorageMode::Type StorageMode, FText* OutError = nullptr)"
  },
  {
    "label": "RenameCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameCollection(FName CurrentCollectionName, ECollectionShareType::Type CurrentShareType, FName NewCollectionName, ECollectionShareType::Type NewShareType, FText* OutError = nullptr)"
  },
  {
    "label": "ReparentCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReparentCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ParentCollectionName, ECollectionShareType::Type ParentShareType, FText* OutError = nullptr)"
  },
  {
    "label": "DestroyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "AddToCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToCollection(FName CollectionName, ECollectionShareType::Type ShareType, TConstArrayView<FSoftObjectPath> ObjectPaths, int32* OutNumAdded = nullptr, FText* OutError = nullptr)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "RemoveFromCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromCollection(FName CollectionName, ECollectionShareType::Type ShareType, TConstArrayView<FSoftObjectPath> ObjectPaths, int32* OutNumRemoved = nullptr, FText* OutError = nullptr)"
  },
  {
    "label": "SetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDynamicQueryText(FName CollectionName, ECollectionShareType::Type ShareType, const FString& InQueryText, FText* OutError = nullptr)"
  },
  {
    "label": "GetDynamicQueryText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDynamicQueryText(FName CollectionName, ECollectionShareType::Type ShareType, FString& OutQueryText, FText* OutError = nullptr)"
  },
  {
    "label": "TestDynamicQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestDynamicQuery(FName CollectionName, ECollectionShareType::Type ShareType, const ITextFilterExpressionContext& InContext, bool& OutResult, FText* OutError = nullptr)"
  },
  {
    "label": "EmptyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmptyCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "SaveCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "UpdateCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCollection(FName CollectionName, ECollectionShareType::Type ShareType, FText* OutError = nullptr)"
  },
  {
    "label": "GetCollectionStatusInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionStatusInfo(FName CollectionName, ECollectionShareType::Type ShareType, FCollectionStatusInfo& OutStatusInfo, FText* OutError = nullptr)"
  },
  {
    "label": "HasCollectionColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCollectionColors(TArray<FLinearColor>* OutColors = nullptr)"
  },
  {
    "label": "GetCollectionColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionColor(FName CollectionName, ECollectionShareType::Type ShareType, TOptional<FLinearColor>& OutColor, FText* OutError = nullptr)"
  },
  {
    "label": "SetCollectionColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCollectionColor(FName CollectionName, ECollectionShareType::Type ShareType, const TOptional<FLinearColor>& NewColor, FText* OutError = nullptr)"
  },
  {
    "label": "GetCollectionStorageMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollectionStorageMode(FName CollectionName, ECollectionShareType::Type ShareType, ECollectionStorageMode::Type& OutStorageMode, FText* OutError = nullptr)"
  },
  {
    "label": "IsObjectInCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInCollection(const FSoftObjectPath& ObjectPath, FName CollectionName, ECollectionShareType::Type ShareType, ECollectionRecursionFlags::Flags RecursionMode = ECollectionRecursionFlags::Self, FText* OutError = nullptr)"
  },
  {
    "label": "IsValidParentCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidParentCollection(FName CollectionName, ECollectionShareType::Type ShareType, FName ParentCollectionName, ECollectionShareType::Type ParentShareType, FText* OutError)"
  },
  {
    "label": "HandleFixupRedirectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleFixupRedirectors(ICollectionRedirectorFollower& InRedirectorFollower)"
  },
  {
    "label": "HandleRedirectorDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRedirectorDeleted(const FSoftObjectPath& ObjectPath, FText* OutError = nullptr)"
  },
  {
    "label": "HandleRedirectorsDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRedirectorsDeleted(TConstArrayView<FSoftObjectPath> ObjectPaths, FText* OutError = nullptr)"
  },
  {
    "label": "HandleObjectRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectRenamed(const FSoftObjectPath& OldObjectPath, const FSoftObjectPath& NewObjectPath)"
  },
  {
    "label": "HandleObjectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectDeleted(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "HandleObjectsDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsDeleted(TConstArrayView<FSoftObjectPath> ObjectPaths)"
  },
  {
    "label": "SuppressObjectDeletionHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressObjectDeletionHandling()"
  },
  {
    "label": "ResumeObjectDeletionHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeObjectDeletionHandling()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FCollectionManager, ICollectionManager::FCollectionCreatedEvent, FCollectionCreatedEvent)"
  },
  {
    "label": "OnCollectionCreated()",
    "kind": "Method",
    "detail": "Function (FCollectionCreatedEvent&)",
    "insertText": "OnCollectionCreated()"
  },
  {
    "label": "OnCollectionDestroyed()",
    "kind": "Method",
    "detail": "Function (FCollectionDestroyedEvent&)",
    "insertText": "OnCollectionDestroyed()"
  },
  {
    "label": "OnCollectionRenamed()",
    "kind": "Method",
    "detail": "Function (FCollectionRenamedEvent&)",
    "insertText": "OnCollectionRenamed()"
  },
  {
    "label": "OnCollectionReparented()",
    "kind": "Method",
    "detail": "Function (FCollectionReparentedEvent&)",
    "insertText": "OnCollectionReparented()"
  },
  {
    "label": "OnCollectionUpdated()",
    "kind": "Method",
    "detail": "Function (FCollectionUpdatedEvent&)",
    "insertText": "OnCollectionUpdated()"
  },
  {
    "label": "OnAddToCollectionCheckinDescriptionEvent()",
    "kind": "Method",
    "detail": "Function (FAddToCollectionCheckinDescriptionEvent&)",
    "insertText": "OnAddToCollectionCheckinDescriptionEvent()"
  },
  {
    "label": "LoadCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCollections()"
  },
  {
    "label": "ShouldUseSCC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseSCC(ECollectionShareType::Type ShareType)"
  },
  {
    "label": "GetCollectionFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCollectionFilename(const FName& InCollectionName, const ECollectionShareType::Type InCollectionShareType)"
  },
  {
    "label": "AddCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCollection(FCollectionLock_Write& InGuard, const TSharedRef<FCollection>& CollectionRef, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "RemoveCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCollection(FCollectionLock_Write& InGuard, const TSharedRef<FCollection>& CollectionRef, ECollectionShareType::Type ShareType)"
  },
  {
    "label": "RemoveObjectFromCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObjectFromCollections(FCollectionLock_Write& InGuard, const FSoftObjectPath& ObjectPath, TArray<FCollectionNameType>& OutUpdatedCollections)"
  },
  {
    "label": "ReplaceObjectInCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceObjectInCollections(FCollectionLock_Write& InGuard, const FSoftObjectPath& OldObjectPath, const FSoftObjectPath& NewObjectPath, TArray<FCollectionNameType>& OutUpdatedCollections)"
  },
  {
    "label": "InternalSaveCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InternalSaveCollection(FCollectionLock_Write&, const TSharedRef<FCollection>& CollectionRef, FText* OutError, bool bForceCommitToRevisionControl)"
  },
  {
    "label": "IsValidParentCollection_Locked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidParentCollection_Locked(FCollectionLock& InGuard, FName CollectionName, ECollectionShareType::Type ShareType, FName ParentCollectionName, ECollectionShareType::Type ParentShareType, FText* OutError)"
  },
  {
    "label": "CollectionExists_Locked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectionExists_Locked(FCollectionLock& InGuard, FName CollectionName, ECollectionShareType::Type ShareType)"
  }
]