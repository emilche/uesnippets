[
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "NodeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeFilter"
  },
  {
    "label": "NodeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeFilter"
  },
  {
    "label": "caches",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "caches"
  },
  {
    "label": "NodeList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeList"
  },
  {
    "label": "NodeRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeRange"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "OpWithoutIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpWithoutIndex"
  },
  {
    "label": "OpWithIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpWithIndex"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "NodeTransformerCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeTransformerCopy"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "NodeTransformer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeTransformer"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "NodeReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeReducer"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "NodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManagerLink"
  },
  {
    "label": "NodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManagerLink"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "OffsetOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetOp"
  },
  {
    "label": "NodeCountOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeCountOp"
  },
  {
    "label": "ForeachFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForeachFilterOp"
  },
  {
    "label": "ForeachFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForeachFilterOp"
  },
  {
    "label": "ReduceFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReduceFilterOp"
  },
  {
    "label": "ReduceFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReduceFilterOp"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "DynamicNodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManagerLink"
  },
  {
    "label": "DynamicNodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManagerLink"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "DensifyOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DensifyOp"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "NodeCountOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeCountOp"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (count)",
    "insertText": "for(size_t i = 1; i < nodeCounts.size()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Iterator(*this, mBegin)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Iterator(*this, mEnd)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (NodeTransformerCopy<NodeOp>)",
    "insertText": "transform(op)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (NodeReducer<NodeOp>)",
    "insertText": "transform(op)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (OpWithIndex>)",
    "insertText": "transform(op)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (OpWithIndex>)",
    "insertText": "transform(op)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OpT::template)",
    "insertText": "eval(mNodeOp, it)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OpT::template)",
    "insertText": "eval(mNodeOp, it)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OpT::template)",
    "insertText": "eval(*mNodeOp, it)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (OffsetOp<FloatTree>)",
    "insertText": "op(3.0f)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<FloatTree>)",
    "insertText": "nodes(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (OffsetOp<T>)",
    "insertText": "op(3.0f)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<T>)",
    "insertText": "nodes(leafManager)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<FloatTree>)",
    "insertText": "nodes(tree)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::NodeManager<T>)",
    "insertText": "nodes(leafManager)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<FloatTree>)",
    "insertText": "nodes(tree)"
  },
  {
    "label": "nodes()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<FloatTree>)",
    "insertText": "nodes(tree)"
  }
]