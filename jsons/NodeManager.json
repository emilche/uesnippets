[
  {
    "label": "NodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManager"
  },
  {
    "label": "DynamicNodeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManager"
  },
  {
    "label": "NodeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeFilter"
  },
  {
    "label": "NodeList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeList"
  },
  {
    "label": "NodeRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeRange"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "OpWithoutIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpWithoutIndex"
  },
  {
    "label": "OpWithIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpWithIndex"
  },
  {
    "label": "NodeTransformerCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeTransformerCopy"
  },
  {
    "label": "NodeTransformer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeTransformer"
  },
  {
    "label": "NodeReducer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeReducer"
  },
  {
    "label": "NodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeManagerLink"
  },
  {
    "label": "ForeachFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForeachFilterOp"
  },
  {
    "label": "ReduceFilterOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReduceFilterOp"
  },
  {
    "label": "DynamicNodeManagerLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DynamicNodeManagerLink"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TREE_NODEMANAGER_HAS_BEEN_INCLUDED # define OPENVDB_TREE_NODEMANAGER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<deque> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tree { template<TreeOrLeafManagerT,Index LEVELS = TreeOrLeafManagerT::RootNodeType::LEVEL> class NodeManager ; template<TreeOrLeafManagerT,Index _LEVELS = TreeOrLeafManagerT::RootNodeType::LEVEL> class DynamicNodeManager ; struct NodeFilter { bool)",
    "insertText": "valid(size_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NodeT&)",
    "insertText": "operator()(size_t n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n<mNodeCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} NodeT*&)",
    "insertText": "operator(size_t n)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mNodePtrs .)",
    "insertText": "reset()"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (mNodes = nullptr ; mNodeCount = 0 ; } template<RootT> bool)",
    "insertText": "initRootChildren(RootT& root)"
  },
  {
    "label": "childCount()",
    "kind": "Method",
    "detail": "Function (size_t nodeCount = root .)",
    "insertText": "childCount()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mNodePtrs .)",
    "insertText": "reset(new NodeT*[nodeCount])"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (mNodes = mNodePtrs .)",
    "insertText": "get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mNodes = nullptr ; } mNodeCount = nodeCount ; })",
    "insertText": "if(mNodeCount == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NodeT** nodePtr = mNodes ;)",
    "insertText": "for(auto iter = root.beginChildOn(); iter; ++iter)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (* nodePtr + + =& iter .)",
    "insertText": "getValue()"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<ParentsT,NodeFilterT> bool)",
    "insertText": "initNodeChildren(ParentsT& parents, const NodeFilterT& nodeFilter = NodeFilterT(), bool serial = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<Index32> nodeCounts ;)",
    "insertText": "if(serial)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (nodeCounts .)",
    "insertText": "reserve(parents.nodeCount())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} } else { nodeCounts .)",
    "insertText": "resize(parents.nodeCount())"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<Index64>(0, parents.nodeCount(), 64), [&](tbb::blocked_range<Index64>& range) { for (Index64 i = range.begin(); i < range.end(); i++) { if (!nodeFilter.valid(i)) nodeCounts[i] = 0; else nodeCounts[i] = parents(i).childCount(); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 1; i < nodeCounts.size(); i++)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (nodeCounts [ i ] + = nodeCounts [ i - 1 ] ; } const size_t nodeCount = nodeCounts .)",
    "insertText": "empty() ? 0 : nodeCounts.back()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NodeT** nodePtr = mNodes ;)",
    "insertText": "for(size_t i = 0; i < parents.nodeCount(); i++)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "parallel_for(tbb::blocked_range<Index64>(0, parents.nodeCount()), [&](tbb::blocked_range<Index64>& range) { Index64 i = range.begin(); NodeT** nodePtr = mNodes; if (i > 0) nodePtr += nodeCounts[i-1]; for ( ; i < range.end(); i++) { if (!nodeFilter.valid(i)) continue; for (auto iter = parents(i).beginChildOn(); iter; ++iter) { *nodePtr++ = &iter.getValue(); } } })"
  },
  {
    "label": "NodeRange()",
    "kind": "Method",
    "detail": "Function (} return true ; } class NodeRange { public :)",
    "insertText": "NodeRange(size_t begin, size_t end, const NodeList& nodeList, size_t grainSize=1): mEnd(end), mBegin(begin), mGrainSize(grainSize), mNodeList(nodeList)"
  },
  {
    "label": "NodeRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeRange(NodeRange& r, tbb::split): mEnd(r.mEnd), mBegin(doSplit(r)), mGrainSize(r.mGrainSize), mNodeList(r.mNodeList)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} class Iterator { public :)",
    "insertText": "Iterator(const NodeRange& range, size_t pos): mRange(range), mPos(pos)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->isValid())"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iterator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "pos()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Iterator& other)"
  },
  {
    "label": "nodeRange()",
    "kind": "Method",
    "detail": "Function (} const NodeRange&)",
    "insertText": "nodeRange()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "doSplit()",
    "kind": "Method",
    "detail": "Function (} private : size_t mEnd,mBegin,mGrainSize ; const NodeList& mNodeList ; size_t)",
    "insertText": "doSplit(NodeRange& r)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(r.is_divisible())"
  },
  {
    "label": "mBegin()",
    "kind": "Method",
    "detail": "Function (size_t middle = r .)",
    "insertText": "mBegin(r.mEnd - r.mBegin)"
  },
  {
    "label": "nodeRange()",
    "kind": "Method",
    "detail": "Function (r . mEnd = middle ; return middle ; } } ; NodeRange)",
    "insertText": "nodeRange(size_t grainsize = 1)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreach(const NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (NodeTransformerCopy<NodeOp>)",
    "insertText": "transform(op)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (transform .)",
    "insertText": "run(this->nodeRange(grainSize), threaded)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduce(NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachWithIndex(const NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceWithIndex(NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (} private : struct OpWithoutIndex { template<T> void)",
    "insertText": "eval(T& node, typename NodeRange::Iterator& iter)"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "node(*iter)"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "node(*iter, iter.pos())"
  },
  {
    "label": "NodeTransformerCopy()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeOp,OpT = OpWithoutIndex> struct NodeTransformerCopy {)",
    "insertText": "NodeTransformerCopy(const NodeOp& nodeOp) : mNodeOp(nodeOp)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "run(const NodeRange& range, bool threaded = true)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (threaded ?)",
    "insertText": "parallel_for(range, *this) : (*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const NodeRange& range)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OpT::template)",
    "insertText": "eval(mNodeOp, it)"
  },
  {
    "label": "NodeTransformer()",
    "kind": "Method",
    "detail": "Function (} } const NodeOp mNodeOp ; } ; template<NodeOp,OpT = OpWithoutIndex> struct NodeTransformer {)",
    "insertText": "NodeTransformer(const NodeOp& nodeOp) : mNodeOp(nodeOp)"
  },
  {
    "label": "NodeReducer()",
    "kind": "Method",
    "detail": "Function (} } const NodeOp& mNodeOp ; } ; template<NodeOp,OpT = OpWithoutIndex> struct NodeReducer {)",
    "insertText": "NodeReducer(NodeOp& nodeOp) : mNodeOp(&nodeOp)"
  },
  {
    "label": "NodeReducer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeReducer(const NodeReducer& other, tbb::split) : mNodeOpPtr(std::make_unique<NodeOp>(*(other.mNodeOp), tbb::split())) , mNodeOp(mNodeOpPtr.get())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (threaded ?)",
    "insertText": "parallel_reduce(range, *this) : (*this)(range)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OpT::template)",
    "insertText": "eval(*mNodeOp, it)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "join(const NodeReducer& other)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (mNodeOp ->)",
    "insertText": "join(*(other.mNodeOp))"
  },
  {
    "label": "NodeManagerLink()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<NodeOp> mNodeOpPtr ; NodeOp* mNodeOp = nullptr ; } ; protected : size_t mNodeCount = 0 ; std::unique_ptr<NodeT* [ ]> mNodePtrs ; NodeT** mNodes = nullptr ; } ; template<NodeT,Index LEVEL> class NodeManagerLink { public : using NonConstChildNodeType = NodeT::ChildNodeType ; using ChildNodeType = CopyConstness<NodeT,NonConstChildNodeType>::Type ;)",
    "insertText": "NodeManagerLink()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (} template<RootT> void)",
    "insertText": "initRootChildren(RootT& root, bool serial = false)"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "initRootChildren(root)"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "initNodeChildren(mList, serial)"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (} template<ParentsT> void)",
    "insertText": "initNodeChildren(ParentsT& parents, bool serial = false)"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "initNodeChildren(parents, NodeFilter(), serial)"
  },
  {
    "label": "nodeCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "nodeCount()"
  },
  {
    "label": "nodeCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "nodeCount(Index i)"
  },
  {
    "label": "foreachBottomUp()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachBottomUp(const NodeOp& op, bool threaded, size_t grainSize)"
  },
  {
    "label": "foreachBottomUp()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "foreachBottomUp(op, threaded, grainSize)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "foreach(op, threaded, grainSize)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachTopDown(const NodeOp& op, bool threaded, size_t grainSize)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "foreachTopDown(op, threaded, grainSize)"
  },
  {
    "label": "reduceBottomUp()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceBottomUp(NodeOp& op, bool threaded, size_t grainSize)"
  },
  {
    "label": "reduceBottomUp()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "reduceBottomUp(op, threaded, grainSize)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "reduce(op, threaded, grainSize)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceTopDown(NodeOp& op, bool threaded, size_t grainSize)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "reduceTopDown(op, threaded, grainSize)"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (} template<RootT> void)",
    "insertText": "initRootChildren(RootT& root, bool = false)"
  },
  {
    "label": "nodeCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "nodeCount(Index)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} protected : NodeList<NodeT> mList ; } ; template<TreeOrLeafManagerT,Index _LEVELS> class NodeManager { public : const Index LEVELS = _LEVELS ;)",
    "insertText": "static_assert(LEVELS > 0, \"expected instantiation of template specialization\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ; using NonConstChildNodeType = RootNodeType::ChildNodeType ; using ChildNodeType = CopyConstness<TreeOrLeafManagerT,NonConstChildNodeType>::Type ;)",
    "insertText": "static_assert(RootNodeType::LEVEL >= LEVELS, \"number of levels exceeds root node height\")"
  },
  {
    "label": "NodeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeManager(TreeOrLeafManagerT& tree, bool serial = false) : mRoot(tree.root())"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "rebuild(serial)"
  },
  {
    "label": "NodeManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeManager(const NodeManager&)"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(bool serial = false)"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (mChain .)",
    "insertText": "initRootChildren(mRoot, serial)"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (} const RootNodeType&)",
    "insertText": "root()"
  },
  {
    "label": "foreachBottomUp()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachBottomUp(const NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mRoot)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachTopDown(const NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "reduceBottomUp()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceBottomUp(NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceTopDown(NodeOp& op, bool threaded = true, size_t grainSize=1)"
  },
  {
    "label": "ForeachFilterOp()",
    "kind": "Method",
    "detail": "Function (} protected : RootNodeType& mRoot ; NodeManagerLink<ChildNodeType,LEVELS - 1> mChain ; } ; template<OpT> struct ForeachFilterOp {)",
    "insertText": "ForeachFilterOp(const OpT& op, openvdb::Index64 size) : mOp(op) , mValidPtr(std::make_unique<bool[]>(size)) , mValid(mValidPtr.get())"
  },
  {
    "label": "ForeachFilterOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForeachFilterOp(const ForeachFilterOp& other) : mOp(other.mOp) , mValid(other.mValid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> void)",
    "insertText": "operator()(NodeT& node, size_t idx)"
  },
  {
    "label": "mOp()",
    "kind": "Method",
    "detail": "Function (mValid [ idx ] =)",
    "insertText": "mOp(node, idx)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid(size_t idx)"
  },
  {
    "label": "ReduceFilterOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReduceFilterOp(const ReduceFilterOp& other) : mOp(other.mOp) , mValid(other.mValid)"
  },
  {
    "label": "ReduceFilterOp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReduceFilterOp(const ReduceFilterOp& other, tbb::split) : mOpPtr(std::make_unique<OpT>(*(other.mOp), tbb::split())) , mOp(mOpPtr.get()) , mValid(other.mValid)"
  },
  {
    "label": "idx()",
    "kind": "Method",
    "detail": "Function (mValid [)",
    "insertText": "idx(*mOp)(node, idx)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(const ReduceFilterOp& other)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (mOp ->)",
    "insertText": "join(*(other.mOp))"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (template<NodeOpT,RootT> void)",
    "insertText": "foreachTopDown(const NodeOpT& op, RootT& root, bool threaded, size_t grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "foreachWithIndex(filterOp, threaded, grainSize)"
  },
  {
    "label": "foreachTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "foreachTopDownRecurse(filterOp, mList, threaded, grainSize)"
  },
  {
    "label": "foreachTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (} template<FilterOpT,ParentT> void)",
    "insertText": "foreachTopDownRecurse(const FilterOpT& filterOp, ParentT& parent, bool threaded, size_t grainSize)"
  },
  {
    "label": "childFilterOp()",
    "kind": "Method",
    "detail": "Function (FilterOpT)",
    "insertText": "childFilterOp(filterOp.op(), mList.nodeCount())"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "foreachWithIndex(childFilterOp, threaded, grainSize)"
  },
  {
    "label": "foreachTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "foreachTopDownRecurse(childFilterOp, mList, threaded, grainSize)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOpT,RootT> void)",
    "insertText": "reduceTopDown(NodeOpT& op, RootT& root, bool threaded, size_t grainSize)"
  },
  {
    "label": "filterOp()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOpT>)",
    "insertText": "filterOp(op, mList.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "reduceWithIndex(filterOp, threaded, grainSize)"
  },
  {
    "label": "reduceTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "reduceTopDownRecurse(filterOp, mList, threaded, grainSize)"
  },
  {
    "label": "reduceTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (} template<FilterOpT,ParentT> void)",
    "insertText": "reduceTopDownRecurse(FilterOpT& filterOp, ParentT& parent, bool threaded, size_t grainSize)"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "reduceWithIndex(childFilterOp, threaded, grainSize)"
  },
  {
    "label": "reduceTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "reduceTopDownRecurse(childFilterOp, mList, threaded, grainSize)"
  },
  {
    "label": "DynamicNodeManagerLink()",
    "kind": "Method",
    "detail": "Function (} protected : NodeList<NodeT> mList ; DynamicNodeManagerLink<ChildNodeType,LEVEL - 1> mNext ; } ; template<NodeT> class DynamicNodeManagerLink<NodeT,0> { public :)",
    "insertText": "DynamicNodeManagerLink()"
  },
  {
    "label": "foreachTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (template<NodeFilterOp,ParentT> void)",
    "insertText": "foreachTopDownRecurse(const NodeFilterOp& nodeFilterOp, ParentT& parent, bool threaded, size_t grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "foreachWithIndex(nodeFilterOp.op(), threaded, grainSize)"
  },
  {
    "label": "reduceTopDownRecurse()",
    "kind": "Method",
    "detail": "Function (} template<NodeFilterOp,ParentT> void)",
    "insertText": "reduceTopDownRecurse(NodeFilterOp& nodeFilterOp, ParentT& parent, bool threaded, size_t grainSize)"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList .)",
    "insertText": "reduceWithIndex(nodeFilterOp.op(), threaded, grainSize)"
  },
  {
    "label": "DynamicNodeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicNodeManager(TreeOrLeafManagerT& tree) : mRoot(tree.root())"
  },
  {
    "label": "DynamicNodeManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DynamicNodeManager(const DynamicNodeManager&)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (mChain .)",
    "insertText": "foreachTopDown(op, mRoot, threaded, grainSize)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (mChain .)",
    "insertText": "reduceTopDown(op, mRoot, threaded, grainSize)"
  },
  {
    "label": "NodeManager()",
    "kind": "Method",
    "detail": "Function (} protected : RootNodeType& mRoot ; DynamicNodeManagerLink<ChildNodeType,LEVELS - 1> mChain ; } ; template<TreeOrLeafManagerT> class NodeManager<TreeOrLeafManagerT,0> { public : using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ; const Index LEVELS = 0 ;)",
    "insertText": "NodeManager(TreeOrLeafManagerT& tree, bool = false) : mRoot(tree.root())"
  },
  {
    "label": "rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rebuild(bool = false)"
  },
  {
    "label": "foreachTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "foreachTopDown(const NodeOp& op, bool, size_t)"
  },
  {
    "label": "reduceBottomUp()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceBottomUp(NodeOp& op, bool, size_t)"
  },
  {
    "label": "reduceTopDown()",
    "kind": "Method",
    "detail": "Function (} template<NodeOp> void)",
    "insertText": "reduceTopDown(NodeOp& op, bool, size_t)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} protected : RootNodeType& mRoot ; } ; template<TreeOrLeafManagerT> class NodeManager<TreeOrLeafManagerT,1> { public : using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ;)",
    "insertText": "static_assert(RootNodeType::LEVEL > 0, \"expected instantiation of template specialization\")"
  },
  {
    "label": "initRootChildren()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "initRootChildren(mRoot)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} protected : using NodeT1 = RootNodeType ; using NonConstNodeT0 = NodeT1::ChildNodeType ; using NodeT0 = CopyConstness<RootNodeType,NonConstNodeT0>::Type ; using ListT0 = NodeList<NodeT0> ; NodeT1& mRoot ; ListT0 mList0 ; } ; template<TreeOrLeafManagerT> class NodeManager<TreeOrLeafManagerT,2> { public : using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ;)",
    "insertText": "static_assert(RootNodeType::LEVEL > 1, \"expected instantiation of template specialization\")"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "initNodeChildren(mList1, NodeFilter(), serial)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} protected : using NodeT2 = RootNodeType ; using NonConstNodeT1 = NodeT2::ChildNodeType ; using NodeT1 = CopyConstness<RootNodeType,NonConstNodeT1>::Type ; using NonConstNodeT0 = NodeT1::ChildNodeType ; using NodeT0 = CopyConstness<RootNodeType,NonConstNodeT0>::Type ; using ListT1 = NodeList<NodeT1> ; using ListT0 = NodeList<NodeT0> ; NodeT2& mRoot ; ListT1 mList1 ; ListT0 mList0 ; } ; template<TreeOrLeafManagerT> class NodeManager<TreeOrLeafManagerT,3> { public : using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ;)",
    "insertText": "static_assert(RootNodeType::LEVEL > 2, \"expected instantiation of template specialization\")"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (mList1 .)",
    "insertText": "initNodeChildren(mList2, NodeFilter(), serial)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} protected : using NodeT3 = RootNodeType ; using NonConstNodeT2 = NodeT3::ChildNodeType ; using NodeT2 = CopyConstness<RootNodeType,NonConstNodeT2>::Type ; using NonConstNodeT1 = NodeT2::ChildNodeType ; using NodeT1 = CopyConstness<RootNodeType,NonConstNodeT1>::Type ; using NonConstNodeT0 = NodeT1::ChildNodeType ; using NodeT0 = CopyConstness<RootNodeType,NonConstNodeT0>::Type ; using ListT2 = NodeList<NodeT2> ; using ListT1 = NodeList<NodeT1> ; using ListT0 = NodeList<NodeT0> ; NodeT3& mRoot ; ListT2 mList2 ; ListT1 mList1 ; ListT0 mList0 ; } ; template<TreeOrLeafManagerT> class NodeManager<TreeOrLeafManagerT,4> { public : using NonConstRootNodeType = TreeOrLeafManagerT::RootNodeType ; using RootNodeType = CopyConstness<TreeOrLeafManagerT,NonConstRootNodeType>::Type ;)",
    "insertText": "static_assert(RootNodeType::LEVEL > 3, \"expected instantiation of template specialization\")"
  },
  {
    "label": "initNodeChildren()",
    "kind": "Method",
    "detail": "Function (mList2 .)",
    "insertText": "initNodeChildren(mList3, NodeFilter(), serial)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "foreachWithIndex(nodeOp, threaded, grainSize)"
  },
  {
    "label": "nodeOp()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOp>)",
    "insertText": "nodeOp(op, mList0.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "reduceWithIndex(nodeOp, threaded, grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "foreachWithIndex(op, threaded, grainSize)"
  },
  {
    "label": "nodeOp()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOp>)",
    "insertText": "nodeOp(op, mList1.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList0 .)",
    "insertText": "reduceWithIndex(op, threaded, grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList2 .)",
    "insertText": "foreachWithIndex(nodeOp2, threaded, grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList1 .)",
    "insertText": "foreachWithIndex(nodeOp1, threaded, grainSize)"
  },
  {
    "label": "nodeOp2()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOp>)",
    "insertText": "nodeOp2(op, mList2.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList2 .)",
    "insertText": "reduceWithIndex(nodeOp2, threaded, grainSize)"
  },
  {
    "label": "nodeOp1()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOp>)",
    "insertText": "nodeOp1(op, mList1.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList1 .)",
    "insertText": "reduceWithIndex(nodeOp1, threaded, grainSize)"
  },
  {
    "label": "foreachWithIndex()",
    "kind": "Method",
    "detail": "Function (mList3 .)",
    "insertText": "foreachWithIndex(nodeOp3, threaded, grainSize)"
  },
  {
    "label": "nodeOp3()",
    "kind": "Method",
    "detail": "Function (ReduceFilterOp<NodeOp>)",
    "insertText": "nodeOp3(op, mList3.nodeCount())"
  },
  {
    "label": "reduceWithIndex()",
    "kind": "Method",
    "detail": "Function (mList3 .)",
    "insertText": "reduceWithIndex(nodeOp3, threaded, grainSize)"
  }
]