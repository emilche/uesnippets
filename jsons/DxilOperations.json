[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OP"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "OpCodeCacheItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpCodeCacheItem"
  },
  {
    "label": "OpCodeProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpCodeProperty"
  },
  {
    "label": "InitWithMinPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithMinPrecision(bool bMinPrecision)"
  },
  {
    "label": "FixOverloadNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixOverloadNames()"
  },
  {
    "label": "RefreshCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCache()"
  },
  {
    "label": "RemoveFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunction(llvm::Function *F)"
  },
  {
    "label": "IsResRetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResRetType(llvm::Type *Ty)"
  },
  {
    "label": "GetOpCodeClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOpCodeClass(const llvm::Function *F, OpCodeClass &opClass)"
  },
  {
    "label": "UseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMinPrecision()"
  },
  {
    "label": "GetAllocSizeForType()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetAllocSizeForType(llvm::Type *Ty)"
  },
  {
    "label": "getOpCode()",
    "kind": "Method",
    "detail": "Function (OP::OpCode)",
    "insertText": "getOpCode(const llvm::Instruction *I)"
  },
  {
    "label": "GetDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (OpCode)",
    "insertText": "GetDxilOpFuncCallInst(const llvm::Instruction *I)"
  },
  {
    "label": "GetOpCodeClass()",
    "kind": "Method",
    "detail": "Function (OpCodeClass)",
    "insertText": "GetOpCodeClass(OpCode OpCode)"
  },
  {
    "label": "GetMemAccessAttr()",
    "kind": "Method",
    "detail": "Function (llvm::Attribute::AttrKind)",
    "insertText": "GetMemAccessAttr(OpCode opCode)"
  },
  {
    "label": "IsOverloadLegal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverloadLegal(OpCode OpCode, llvm::Type *pType)"
  },
  {
    "label": "CheckOpCodeTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOpCodeTable()"
  },
  {
    "label": "IsDxilOpFuncName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncName(llvm::StringRef name)"
  },
  {
    "label": "IsDxilOpFunc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFunc(const llvm::Function *F)"
  },
  {
    "label": "IsDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncCallInst(const llvm::Instruction *I)"
  },
  {
    "label": "IsDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncCallInst(const llvm::Instruction *I, OpCode opcode)"
  },
  {
    "label": "IsDxilOpWave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpWave(OpCode C)"
  },
  {
    "label": "IsDxilOpGradient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpGradient(OpCode C)"
  },
  {
    "label": "IsDxilOpFeedback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFeedback(OpCode C)"
  },
  {
    "label": "IsDxilOpBarrier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpBarrier(OpCode C)"
  },
  {
    "label": "BarrierRequiresGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BarrierRequiresGroup(const llvm::CallInst *CI)"
  },
  {
    "label": "BarrierRequiresNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BarrierRequiresNode(const llvm::CallInst *CI)"
  },
  {
    "label": "TranslateToBarrierMode()",
    "kind": "Method",
    "detail": "Function (DXIL::BarrierMode)",
    "insertText": "TranslateToBarrierMode(const llvm::CallInst *CI)"
  },
  {
    "label": "IsDxilOpTypeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpTypeName(llvm::StringRef name)"
  },
  {
    "label": "IsDxilOpType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpType(llvm::StructType *ST)"
  },
  {
    "label": "IsDupDxilOpType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDupDxilOpType(llvm::StructType *ST)"
  },
  {
    "label": "GetMinShaderModelAndMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinShaderModelAndMask(OpCode C, bool bWithTranslation,\n                                       unsigned &major, unsigned &minor,\n                                       unsigned &mask)"
  },
  {
    "label": "GetMinShaderModelAndMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinShaderModelAndMask(const llvm::CallInst *CI,\n                                       bool bWithTranslation, unsigned valMajor,\n                                       unsigned valMinor, unsigned &major,\n                                       unsigned &minor, unsigned &mask)"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCache(OpCodeClass opClass, llvm::Type *Ty, llvm::Function *F)"
  },
  {
    "label": "GetTypeSlot()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetTypeSlot(llvm::Type *pType)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetTypeName(llvm::Type *Ty, std::string &str)"
  },
  {
    "label": "ConstructOverloadName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "ConstructOverloadName(llvm::Type *Ty,\n                                               DXIL::OpCode opCode,\n                                               std::string &funcNameStorage)"
  }
]