[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OP"
  },
  {
    "label": "OpCodeCacheItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpCodeCacheItem"
  },
  {
    "label": "OpCodeProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OpCodeProperty"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace llvm { class LLVMContext ; class Module ; class Type ; class StructType ; class PointerType ; class Function ; class Constant ; class Value ; class Instruction ; class CallInst ; } # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / IR / Attributes . h \" # include \" DxilConstants . h \" # include<unordered_map> namespace hlsl { class OP { public : using OpCode = DXIL::OpCode ; using OpCodeClass = DXIL::OpCodeClass ; public :)",
    "insertText": "OP()"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP(llvm::LLVMContext &Ctx, llvm::Module *pModule)"
  },
  {
    "label": "InitWithMinPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithMinPrecision(bool bMinPrecision)"
  },
  {
    "label": "FixOverloadNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixOverloadNames()"
  },
  {
    "label": "RefreshCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCache()"
  },
  {
    "label": "GetOpFunc()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetOpFunc(OpCode OpCode, llvm::Type *pOverloadType)"
  },
  {
    "label": "GetOpFuncList()",
    "kind": "Method",
    "detail": "Function (const llvm::SmallMapVector<llvm::Type*,llvm::Function*,8>&)",
    "insertText": "GetOpFuncList(OpCode OpCode)"
  },
  {
    "label": "IsDxilOpUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpUsed(OpCode opcode)"
  },
  {
    "label": "RemoveFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunction(llvm::Function *F)"
  },
  {
    "label": "GetCtx()",
    "kind": "Method",
    "detail": "Function (llvm::LLVMContext&)",
    "insertText": "GetCtx()"
  },
  {
    "label": "GetNodeHandleType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetNodeHandleType()"
  },
  {
    "label": "GetNodeRecordHandleType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetNodeRecordHandleType()"
  },
  {
    "label": "GetResourcePropertiesType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetResourcePropertiesType()"
  },
  {
    "label": "GetNodePropertiesType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetNodePropertiesType()"
  },
  {
    "label": "GetNodeRecordPropertiesType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetNodeRecordPropertiesType()"
  },
  {
    "label": "GetResourceBindingType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetResourceBindingType()"
  },
  {
    "label": "GetDimensionsType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetDimensionsType()"
  },
  {
    "label": "GetSamplePosType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetSamplePosType()"
  },
  {
    "label": "GetBinaryWithCarryType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetBinaryWithCarryType()"
  },
  {
    "label": "GetBinaryWithTwoOutputsType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetBinaryWithTwoOutputsType()"
  },
  {
    "label": "GetSplitDoubleType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetSplitDoubleType()"
  },
  {
    "label": "GetFourI32Type()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetFourI32Type()"
  },
  {
    "label": "GetFourI16Type()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetFourI16Type()"
  },
  {
    "label": "GetWaveMatrixPropertiesType()",
    "kind": "Method",
    "detail": "Function (llvm::StructType*)",
    "insertText": "GetWaveMatrixPropertiesType()"
  },
  {
    "label": "GetWaveMatPtrType()",
    "kind": "Method",
    "detail": "Function (llvm::PointerType*)",
    "insertText": "GetWaveMatPtrType()"
  },
  {
    "label": "GetResRetType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetResRetType(llvm::Type *pOverloadType)"
  },
  {
    "label": "GetCBufferRetType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetCBufferRetType(llvm::Type *pOverloadType)"
  },
  {
    "label": "GetVectorType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetVectorType(unsigned numElements, llvm::Type *pOverloadType)"
  },
  {
    "label": "IsResRetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResRetType(llvm::Type *Ty)"
  },
  {
    "label": "GetOpCodeClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOpCodeClass(const llvm::Function *F, OpCodeClass &opClass)"
  },
  {
    "label": "UseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMinPrecision()"
  },
  {
    "label": "GetAllocSizeForType()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetAllocSizeForType(llvm::Type *Ty)"
  },
  {
    "label": "GetI1Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetI1Const(bool v)"
  },
  {
    "label": "GetI8Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetI8Const(char v)"
  },
  {
    "label": "GetU8Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetU8Const(unsigned char v)"
  },
  {
    "label": "GetI16Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetI16Const(int v)"
  },
  {
    "label": "GetU16Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetU16Const(unsigned v)"
  },
  {
    "label": "GetI32Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetI32Const(int v)"
  },
  {
    "label": "GetU32Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetU32Const(unsigned v)"
  },
  {
    "label": "GetU64Const()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetU64Const(unsigned long long v)"
  },
  {
    "label": "GetFloatConst()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetFloatConst(float v)"
  },
  {
    "label": "GetDoubleConst()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "GetDoubleConst(double v)"
  },
  {
    "label": "getOpCode()",
    "kind": "Method",
    "detail": "Function (OP::OpCode)",
    "insertText": "getOpCode(const llvm::Instruction *I)"
  },
  {
    "label": "GetOverloadType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetOverloadType(OpCode OpCode, llvm::Function *F)"
  },
  {
    "label": "GetDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (OpCode)",
    "insertText": "GetDxilOpFuncCallInst(const llvm::Instruction *I)"
  },
  {
    "label": "GetOpCodeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetOpCodeName(OpCode OpCode)"
  },
  {
    "label": "GetAtomicOpName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetAtomicOpName(DXIL::AtomicBinOpCode OpCode)"
  },
  {
    "label": "GetOpCodeClass()",
    "kind": "Method",
    "detail": "Function (OpCodeClass)",
    "insertText": "GetOpCodeClass(OpCode OpCode)"
  },
  {
    "label": "GetOpCodeClassName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetOpCodeClassName(OpCode OpCode)"
  },
  {
    "label": "GetMemAccessAttr()",
    "kind": "Method",
    "detail": "Function (llvm::Attribute::AttrKind)",
    "insertText": "GetMemAccessAttr(OpCode opCode)"
  },
  {
    "label": "IsOverloadLegal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverloadLegal(OpCode OpCode, llvm::Type *pType)"
  },
  {
    "label": "CheckOpCodeTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOpCodeTable()"
  },
  {
    "label": "IsDxilOpFuncName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncName(llvm::StringRef name)"
  },
  {
    "label": "IsDxilOpFunc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFunc(const llvm::Function *F)"
  },
  {
    "label": "IsDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncCallInst(const llvm::Instruction *I)"
  },
  {
    "label": "IsDxilOpFuncCallInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFuncCallInst(const llvm::Instruction *I, OpCode opcode)"
  },
  {
    "label": "IsDxilOpWave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpWave(OpCode C)"
  },
  {
    "label": "IsDxilOpGradient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpGradient(OpCode C)"
  },
  {
    "label": "IsDxilOpFeedback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpFeedback(OpCode C)"
  },
  {
    "label": "IsDxilOpBarrier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpBarrier(OpCode C)"
  },
  {
    "label": "BarrierRequiresGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BarrierRequiresGroup(const llvm::CallInst *CI)"
  },
  {
    "label": "BarrierRequiresNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BarrierRequiresNode(const llvm::CallInst *CI)"
  },
  {
    "label": "TranslateToBarrierMode()",
    "kind": "Method",
    "detail": "Function (DXIL::BarrierMode)",
    "insertText": "TranslateToBarrierMode(const llvm::CallInst *CI)"
  },
  {
    "label": "IsDxilOpTypeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpTypeName(llvm::StringRef name)"
  },
  {
    "label": "IsDxilOpType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDxilOpType(llvm::StructType *ST)"
  },
  {
    "label": "IsDupDxilOpType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDupDxilOpType(llvm::StructType *ST)"
  },
  {
    "label": "GetOriginalDxilOpType()",
    "kind": "Method",
    "detail": "Function (llvm::StructType*)",
    "insertText": "GetOriginalDxilOpType(llvm::StructType *ST, llvm::Module &M)"
  },
  {
    "label": "GetMinShaderModelAndMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinShaderModelAndMask(OpCode C, bool bWithTranslation, unsigned &major, unsigned &minor, unsigned &mask)"
  },
  {
    "label": "GetMinShaderModelAndMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinShaderModelAndMask(const llvm::CallInst *CI, bool bWithTranslation, unsigned valMajor, unsigned valMinor, unsigned &major, unsigned &minor, unsigned &mask)"
  },
  {
    "label": "m_OpCodeClassCache()",
    "kind": "Method",
    "detail": "Function (private : llvm::LLVMContext& m_Ctx ; llvm::Module* m_pModule ; llvm::Type* m_pHandleType ; llvm::Type* m_pNodeHandleType ; llvm::Type* m_pNodeRecordHandleType ; llvm::Type* m_pResourcePropertiesType ; llvm::Type* m_pNodePropertiesType ; llvm::Type* m_pNodeRecordPropertiesType ; llvm::Type* m_pResourceBindingType ; llvm::Type* m_pDimensionsType ; llvm::Type* m_pSamplePosType ; llvm::Type* m_pBinaryWithCarryType ; llvm::Type* m_pBinaryWithTwoOutputsType ; llvm::Type* m_pSplitDoubleType ; llvm::Type* m_pFourI32Type ; llvm::Type* m_pFourI16Type ; llvm::StructType* m_pWaveMatInfoType ; llvm::PointerType* m_pWaveMatPtrType ; DXIL::LowPrecisionMode m_LowPrecisionMode ; const unsigned kUserDefineTypeSlot = 9 ; const unsigned kObjectTypeSlot = 1 0 ; const unsigned kNumTypeOverloads = 1 1 ; llvm::Type* m_pResRetType [ kNumTypeOverloads ] ; llvm::Type* m_pCBufferRetType [ kNumTypeOverloads ] ; struct OpCodeCacheItem { llvm::SmallMapVector<llvm::Type*,llvm::Function*,8> pOverloads ; } ; OpCodeCacheItem)",
    "insertText": "m_OpCodeClassCache(unsigned)"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (std::unordered_map<const llvm::Function*,OpCodeClass> m_FunctionToOpClass ; void)",
    "insertText": "UpdateCache(OpCodeClass opClass, llvm::Type *Ty, llvm::Function *F)"
  },
  {
    "label": "m_OpCodeProps()",
    "kind": "Method",
    "detail": "Function (private : struct OpCodeProperty { OpCode opCode ; const char* pOpCodeName ; OpCodeClass opCodeClass ; const char* pOpCodeClassName ; bool bAllowOverload [ kNumTypeOverloads ] ; llvm::Attribute::AttrKind FuncAttr ; } ; const OpCodeProperty)",
    "insertText": "m_OpCodeProps(unsigned)"
  },
  {
    "label": "GetTypeSlot()",
    "kind": "Method",
    "detail": "Function (const char* m_OverloadTypeName [ kNumTypeOverloads ] ; const char* m_NamePrefix ; const char* m_TypePrefix ; const char* m_MatrixTypePrefix ; unsigned)",
    "insertText": "GetTypeSlot(llvm::Type *pType)"
  },
  {
    "label": "GetOverloadTypeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetOverloadTypeName(unsigned TypeSlot)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetTypeName(llvm::Type *Ty, std::string &str)"
  },
  {
    "label": "ConstructOverloadName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "ConstructOverloadName(llvm::Type *Ty, DXIL::OpCode opCode, std::string &funcNameStorage)"
  }
]