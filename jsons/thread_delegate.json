[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ThreadDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_THREAD_DELEGATE_H_ # define BASE_PROFILER_THREAD_DELEGATE_H_ # include<vector> # include \" base / base_export . h \" # include \" base / profiler / register_context . h \" # include \" base / threading / platform_thread . h \" namespace base { class BASE_EXPORT ThreadDelegate { public :)",
    "insertText": "ThreadDelegate()"
  },
  {
    "label": "ThreadDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadDelegate(const ThreadDelegate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadDelegate&)",
    "insertText": "operator(const ThreadDelegate&)"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId)",
    "insertText": "GetThreadId()"
  },
  {
    "label": "GetStackBaseAddress()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetStackBaseAddress()"
  },
  {
    "label": "GetRegistersToRewrite()",
    "kind": "Method",
    "detail": "Function (std::vector<uintptr_t*>)",
    "insertText": "GetRegistersToRewrite(RegisterContext* thread_context)"
  }
]