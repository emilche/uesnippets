[
  {
    "label": "raw_string_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_string_ostream"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CompilerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompilerInstance"
  },
  {
    "label": "DxcLangExtensionsHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcLangExtensionsHelper"
  },
  {
    "label": "ParsedSemanticDefine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParsedSemanticDefine"
  },
  {
    "label": "SetupSema()",
    "kind": "Method",
    "detail": "Function (# ifndef __DXCLANGEXTENSIONSHELPER_H__ # define __DXCLANGEXTENSIONSHELPER_H__ # include \" dxc / Support / DxcLangExtensionsCommonHelper . h \" # include \" dxc / Support / FileIOHelper . h \" # include \" dxc / Support / Unicode . h \" # include \" clang / AST / ASTContext . h \" # include \" clang / AST / Decl . h \" # include \" clang / Frontend / CompilerInstance . h \" # include \" clang / Sema / Sema . h \" # include \" clang / Sema / SemaHLSL . h \" # include<vector> namespace llvm { class raw_string_ostream ; class CallInst ; class Value ; } namespace clang { class CompilerInstance ; } namespace hlsl { class DxcLangExtensionsHelper : public DxcLangExtensionsCommonHelper,public DxcLangExtensionsHelperApply { private : public : void)",
    "insertText": "SetupSema(clang::Sema &S)"
  },
  {
    "label": "getASTContext()",
    "kind": "Method",
    "detail": "Function (clang::ExternalASTSource* astSource = S .)",
    "insertText": "getASTContext().getExternalSource()"
  },
  {
    "label": "RegisterIntrinsicTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterIntrinsicTable(externalSema, table)"
  },
  {
    "label": "SetupPreprocessorOptions()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetupPreprocessorOptions(clang::PreprocessorOptions &PPOpts)"
  },
  {
    "label": "addMacroDef()",
    "kind": "Method",
    "detail": "Function (PPOpts .)",
    "insertText": "addMacroDef(llvm::StringRef(define.c_str()))"
  },
  {
    "label": "GetDxcLangExtensionsHelper()",
    "kind": "Method",
    "detail": "Function (} } DxcLangExtensionsHelper*)",
    "insertText": "GetDxcLangExtensionsHelper()"
  },
  {
    "label": "IsMacroMatch()",
    "kind": "Method",
    "detail": "Function (} } ; struct ParsedSemanticDefine { std::string Name ; std::string Value ; unsigned Location ; } ; typedef std::vector<ParsedSemanticDefine> ParsedSemanticDefineList ; bool)",
    "insertText": "IsMacroMatch(StringRef name, const std::string &mask)"
  },
  {
    "label": "CollectSemanticDefinesParsedByCompiler()",
    "kind": "Method",
    "detail": "Function (} ParsedSemanticDefineList)",
    "insertText": "CollectSemanticDefinesParsedByCompiler(clang::CompilerInstance &compiler, DxcLangExtensionsHelper *helper)"
  }
]