[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModel"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "SharedPointerInternals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPointerInternals"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / Database . h \" # include \" Core / CADEntity . h \" # include \" Core / Types . h \" # include \" Math / Geometry . h \" class FArchive ; namespace UE::CADKernel { class FEntity ; class FModel ; class FSession { FEntity ; FCADKernelArchive ; template<,ESPMode> class SharedPointerInternals::TIntrusiveReferenceController ; protected : double GeometricTolerance ; FDatabase Database ; int32 LastHostId ; public : # if)",
    "insertText": "defined(CADKERNEL_DEV) || defined(CADKERNEL_STDA)"
  },
  {
    "label": "FSession()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FSession(double InGeometricTolerance) : GeometricTolerance(InGeometricTolerance)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTolerance(InGeometricTolerance)"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (} FModel&)",
    "insertText": "GetModel()"
  },
  {
    "label": "GetModelAsShared()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FModel>)",
    "insertText": "GetModelAsShared()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "SetTolerance()",
    "kind": "Method",
    "detail": "Function (Ar<<GeometricTolerance ;)",
    "insertText": "SetTolerance(GeometricTolerance)"
  },
  {
    "label": "GetDatabase()",
    "kind": "Method",
    "detail": "Function (} FDatabase&)",
    "insertText": "GetDatabase()"
  },
  {
    "label": "SaveDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDatabase(const TCHAR* FileName, const TArray<TSharedPtr<FEntity>>& Entities)"
  },
  {
    "label": "SaveDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDatabase(const TCHAR* FileName, const TArray<FEntity*>& Entities)"
  },
  {
    "label": "SaveDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDatabase(const TCHAR* FileName, FEntity& Entity)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TArray<FEntity*> Entities ; Entities .)",
    "insertText": "Emplace(&Entity)"
  },
  {
    "label": "SaveDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveDatabase(FileName, Entities)"
  },
  {
    "label": "SaveDatabase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveDatabase(const TCHAR* FileName, const TSharedPtr<FEntity> Entity)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FEntity>> Entities ; Entities .)",
    "insertText": "Emplace(Entity)"
  },
  {
    "label": "LoadDatabase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadDatabase(const TCHAR* FilePath)"
  },
  {
    "label": "AddDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDatabase(const TArray<uint8>& InRawData)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Database .)",
    "insertText": "Empty()"
  },
  {
    "label": "SpawnEntityIdent()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "SpawnEntityIdent(FEntity& SelectedEntity, bool bForceSpawning = false)"
  },
  {
    "label": "SpawnEntityIdents()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "SpawnEntityIdents(const TArray<TSharedPtr<FEntity>>& SelectedEntities, bool bForceSpawning = false)"
  },
  {
    "label": "SpawnEntityIdents()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "SpawnEntityIdents(const TArray<FEntity*>& SelectedEntities, bool bForceSpawning = false)"
  },
  {
    "label": "GetLastHostId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLastHostId()"
  }
]