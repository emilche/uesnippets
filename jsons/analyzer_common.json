[
  {
    "label": "AnalyzerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalyzerConfig"
  },
  {
    "label": "LayerDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LayerDescription"
  },
  {
    "label": "GetCallTimeSec()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_ANALYZER_COMMON_H_ # define RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_ANALYZER_COMMON_H_ # include<cstdint> # include<string> # include \" absl / types / optional . h \" # include \" api / function_view . h \" # include \" logging / rtc_event_log / rtc_event_log_parser . h \" # include \" rtc_tools / rtc_event_log_visualizer / plot_base . h \" namespace webrtc { int kNumMicrosecsPerSec = 1 0 0 0 0 0 0 ; int kNumMillisecsPerSec = 1 0 0 0 ; float kLeftMargin = 0 . 0 1 f ; float kRightMargin = 0 . 0 2 f ; float kBottomMargin = 0 . 0 2 f ; float kTopMargin = 0 . 0 5 f ; class AnalyzerConfig { public : float)",
    "insertText": "GetCallTimeSec(Timestamp timestamp)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (Timestamp offset = normalize_time_ ? begin_time_ :)",
    "insertText": "Zero()"
  },
  {
    "label": "GetCallTimeSecFromMs()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCallTimeSecFromMs(int64_t timestamp_ms)"
  },
  {
    "label": "CallBeginTimeSec()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "CallBeginTimeSec()"
  },
  {
    "label": "CallEndTimeSec()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "CallEndTimeSec()"
  },
  {
    "label": "CallTimeToUtcOffsetMs()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "CallTimeToUtcOffsetMs()"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (Timestamp utc_begin_time_ = begin_time_ + rtc_to_utc_offset_ ; return utc_begin_time_ .)",
    "insertText": "ms()"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (} TimeDelta window_duration_ =)",
    "insertText": "Millis(250)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (TimeDelta step_ =)",
    "insertText": "Millis(10)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp begin_time_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "LayerDescription()",
    "kind": "Method",
    "detail": "Function (bool normalize_time_ ; } ; struct LayerDescription {)",
    "insertText": "LayerDescription(uint32_t ssrc, uint8_t spatial_layer, uint8_t temporal_layer) : ssrc(ssrc), spatial_layer(spatial_layer), temporal_layer(temporal_layer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const LayerDescription& other)"
  },
  {
    "label": "IsVideoSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVideoSsrc(const ParsedRtcEventLog& parsed_log, PacketDirection direction, uint32_t ssrc)"
  },
  {
    "label": "IsAudioSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioSsrc(const ParsedRtcEventLog& parsed_log, PacketDirection direction, uint32_t ssrc)"
  },
  {
    "label": "GetStreamName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetStreamName(const ParsedRtcEventLog& parsed_log, PacketDirection direction, uint32_t ssrc)"
  },
  {
    "label": "GetLayerName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetLayerName(LayerDescription layer)"
  },
  {
    "label": "ProcessPoints()",
    "kind": "Method",
    "detail": "Function (template<DataType,IterableType> void)",
    "insertText": "ProcessPoints(rtc::FunctionView<float(const DataType&)> fx, rtc::FunctionView<absl::optional<float>(const DataType&)> fy, const IterableType& data_view, TimeSeries* result)"
  },
  {
    "label": "fx()",
    "kind": "Method",
    "detail": "Function (const DataType& elem = data_view [ i ] ; float x =)",
    "insertText": "fx(elem)"
  },
  {
    "label": "fy()",
    "kind": "Method",
    "detail": "Function (absl::optional<float> y =)",
    "insertText": "fy(elem)"
  },
  {
    "label": "ProcessPairs()",
    "kind": "Method",
    "detail": "Function (} } template<DataType,ResultType,IterableType> void)",
    "insertText": "ProcessPairs(rtc::FunctionView<float(const DataType&)> fx, rtc::FunctionView<absl::optional<ResultType>(const DataType&, const DataType&)> fy, const IterableType& data, TimeSeries* result)"
  },
  {
    "label": "fx()",
    "kind": "Method",
    "detail": "Function (float x =)",
    "insertText": "fx(data[i])"
  },
  {
    "label": "fy()",
    "kind": "Method",
    "detail": "Function (absl::optional<ResultType> y =)",
    "insertText": "fy(data[i - 1], data[i])"
  },
  {
    "label": "AccumulatePairs()",
    "kind": "Method",
    "detail": "Function (} } template<DataType,ResultType,IterableType> void)",
    "insertText": "AccumulatePairs(rtc::FunctionView<float(const DataType&)> fx, rtc::FunctionView<absl::optional<ResultType>(const DataType&, const DataType&)> fy, const IterableType& data, TimeSeries* result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ResultType sum = 0 ;)",
    "insertText": "for(size_t i = 1; i < data.size(); i++)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (sum + =* y ; result -> points .)",
    "insertText": "emplace_back(x, static_cast<float>(sum))"
  },
  {
    "label": "MovingAverage()",
    "kind": "Method",
    "detail": "Function (} } } template<DataType,ResultType,IterableType> void)",
    "insertText": "MovingAverage(rtc::FunctionView<absl::optional<ResultType>(const DataType&)> fy, const IterableType& data_view, AnalyzerConfig config, TimeSeries* result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t window_index_begin = 0 ; size_t window_index_end = 0 ; ResultType sum_in_window = 0 ;)",
    "insertText": "for(Timestamp t = config.begin_time_; t < config.end_time_ + config.step_; t += config.step_)"
  },
  {
    "label": "fy()",
    "kind": "Method",
    "detail": "Function (absl::optional<ResultType> value =)",
    "insertText": "fy(data_view[window_index_end])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + window_index_end ; })",
    "insertText": "while(window_index_begin < data_view.size() && data_view[window_index_begin].log_time() < t - config.window_duration_)"
  },
  {
    "label": "fy()",
    "kind": "Method",
    "detail": "Function (absl::optional<ResultType> value =)",
    "insertText": "fy(data_view[window_index_begin])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (+ + window_index_begin ; } float window_duration_s = static_cast<)",
    "insertText": "float(config.window_duration_.us())"
  },
  {
    "label": "GetCallTimeSec()",
    "kind": "Method",
    "detail": "Function (float x = config .)",
    "insertText": "GetCallTimeSec(t)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (float y = sum_in_window / window_duration_s ; result -> points .)",
    "insertText": "emplace_back(x, y)"
  }
]