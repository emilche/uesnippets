[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "FieldTrialsRegistry()",
    "kind": "Method",
    "detail": "Function (# ifndef API_FIELD_TRIALS_REGISTRY_H_ # define API_FIELD_TRIALS_REGISTRY_H_ # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" api / field_trials_view . h \" # include \" rtc_base / containers / flat_set . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT FieldTrialsRegistry : public FieldTrialsView { public :)",
    "insertText": "FieldTrialsRegistry()"
  },
  {
    "label": "FieldTrialsRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldTrialsRegistry(const FieldTrialsRegistry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FieldTrialsRegistry&)",
    "insertText": "operator(const FieldTrialsRegistry&)"
  },
  {
    "label": "Lookup()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Lookup(absl::string_view key)"
  },
  {
    "label": "RegisterKeysForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterKeysForTesting(flat_set<std::string> keys)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (test_keys_ =)",
    "insertText": "move(keys)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} private : std::string)",
    "insertText": "GetValue(absl::string_view key)"
  }
]