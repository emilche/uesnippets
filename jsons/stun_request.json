[
  {
    "label": "StunRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunRequest"
  },
  {
    "label": "StunRequestManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunRequestManager"
  },
  {
    "label": "StunRequestManager()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_STUN_REQUEST_H_ # define P2P_BASE_STUN_REQUEST_H_ # include<stddef . h> # include<stdint . h> # include<functional> # include<map> # include<memory> # include<string> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / transport / stun . h \" # include \" api / units / time_delta . h \" namespace cricket { class StunRequest ; const int kAllRequestsForTest = 0 ; const int STUN_TOTAL_TIMEOUT = 3 9 7 5 0 ; class StunRequestManager { public :)",
    "insertText": "StunRequestManager(webrtc::TaskQueueBase* thread, std::function<void(const void*, size_t, StunRequest*)> send_packet)"
  },
  {
    "label": "StunRequestManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StunRequestManager()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(StunRequest* request)"
  },
  {
    "label": "SendDelayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDelayed(StunRequest* request, int delay)"
  },
  {
    "label": "FlushForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushForTest(int msg_type)"
  },
  {
    "label": "HasRequestForTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRequestForTest(int msg_type)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CheckResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckResponse(StunMessage* msg)"
  },
  {
    "label": "CheckResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckResponse(const char* data, size_t size)"
  },
  {
    "label": "OnRequestTimedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestTimedOut(StunRequest* request)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase*)",
    "insertText": "network_thread()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<std::string,std::unique_ptr<StunRequest>> RequestMap ; webrtc::TaskQueueBase* const thread_ ; RequestMap requests_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void(const void*, size_t, StunRequest*)"
  },
  {
    "label": "StunRequest()",
    "kind": "Method",
    "detail": "Function (} ; class StunRequest { public :)",
    "insertText": "StunRequest(StunRequestManager& manager)"
  },
  {
    "label": "StunRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StunRequest(StunRequestManager& manager, std::unique_ptr<StunMessage> message)"
  },
  {
    "label": "StunRequest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StunRequest()"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (StunRequestManager*)",
    "insertText": "manager()"
  },
  {
    "label": "reduced_transaction_id()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "reduced_transaction_id()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "type()"
  },
  {
    "label": "msg()",
    "kind": "Method",
    "detail": "Function (const StunMessage*)",
    "insertText": "msg()"
  },
  {
    "label": "Elapsed()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Elapsed()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (protected : class StunRequestManager ; void)",
    "insertText": "Send(webrtc::TimeDelta delay)"
  },
  {
    "label": "ResetTasksForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTasksForTest()"
  },
  {
    "label": "mutable_msg()",
    "kind": "Method",
    "detail": "Function (StunMessage*)",
    "insertText": "mutable_msg()"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResponse(StunMessage* response)"
  },
  {
    "label": "OnErrorResponse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnErrorResponse(StunMessage* response)"
  },
  {
    "label": "OnTimeout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTimeout()"
  },
  {
    "label": "OnSent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSent()"
  },
  {
    "label": "resend_delay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "resend_delay()"
  },
  {
    "label": "set_timed_out()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_timed_out()"
  },
  {
    "label": "SendInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SendInternal()"
  },
  {
    "label": "SendDelayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDelayed(webrtc::TimeDelta delay)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (StunRequestManager& manager_ ; const std::unique_ptr<StunMessage> msg_ ; int64_t tstamp_)",
    "insertText": "RTC_GUARDED_BY(network_thread())"
  },
  {
    "label": "CreateDetachedInactive()",
    "kind": "Method",
    "detail": "Function (webrtc::ScopedTaskSafety task_safety_ { webrtc::)",
    "insertText": "CreateDetachedInactive()"
  }
]