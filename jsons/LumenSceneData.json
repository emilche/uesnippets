[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDistanceFieldSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldSceneData"
  },
  {
    "label": "FLumenCardBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardBuildData"
  },
  {
    "label": "FLumenCardPassUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardPassUniformParameters"
  },
  {
    "label": "FLumenCardRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardRenderer"
  },
  {
    "label": "FLumenMeshCards",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenMeshCards"
  },
  {
    "label": "FLumenViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenViewState"
  },
  {
    "label": "FMeshCardsBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshCardsBuildData"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FViewUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewUniformShaderParameters"
  },
  {
    "label": "FLumenPageTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenPageTableEntry"
  },
  {
    "label": "FLumenSurfaceMipMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenSurfaceMipMap"
  },
  {
    "label": "FLumenMipMapDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenMipMapDesc"
  },
  {
    "label": "FLumenCard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCard"
  },
  {
    "label": "FSurfaceStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSurfaceStats"
  },
  {
    "label": "FLumenPrimitiveGroupRemoveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenPrimitiveGroupRemoveInfo"
  },
  {
    "label": "FLumenPrimitiveGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenPrimitiveGroup"
  },
  {
    "label": "FSurfaceCacheRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurfaceCacheRequest"
  },
  {
    "label": "FLumenSurfaceCacheAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSurfaceCacheAllocator"
  },
  {
    "label": "FAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocation"
  },
  {
    "label": "FBinStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinStats"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "FPageBinAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageBinAllocation"
  },
  {
    "label": "FPageBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageBin"
  },
  {
    "label": "FLumenSharedRT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSharedRT"
  },
  {
    "label": "FLumenViewOrigin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenViewOrigin"
  },
  {
    "label": "FLumenSceneFrameTemporaries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenSceneFrameTemporaries"
  },
  {
    "label": "FLumenGlobalLightingState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenGlobalLightingState"
  },
  {
    "label": "FLumenSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSceneData"
  },
  {
    "label": "FFeedbackData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFeedbackData"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / BinaryHeap . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" Lumen / Lumen . h \" # include \" Lumen / LumenHeightfields . h \" # include \" Lumen / LumenSparseSpanArray . h \" # include \" Lumen / LumenSceneGPUDrivenUpdate . h \" # include \" Lumen / LumenSurfaceCacheFeedback . h \" # include \" Lumen / LumenUniqueList . h \" # include \" LumenDefinitions . h \" # include \" MeshCardRepresentation . h \" # include \" RenderTransform . h \" # include \" ShaderParameterMacros . h \" # include \" UnifiedBuffer . h \" # include \" Tasks / Task . h \" # include \" Math / DoubleFloat . h \" enum class ELumenReflectionPass { Opaque,SingleLayerWater,FrontLayerTranslucency,MAX } ; class FDistanceFieldSceneData ; class FLumenCardBuildData ; class FLumenCardPassUniformParameters ; class FLumenCardRenderer ; class FLumenMeshCards ; class FLumenViewState ; class FMeshCardsBuildData ; class FPrimitiveSceneInfo ; class FViewUniformShaderParameters ; struct FLumenPageTableEntry ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLumenCardScene, ) SHADER_PARAMETER(uint32, NumCards) SHADER_PARAMETER(uint32, NumMeshCards) SHADER_PARAMETER(uint32, NumCardPages) SHADER_PARAMETER(uint32, NumHeightfields) SHADER_PARAMETER(uint32, NumPrimitiveGroups) SHADER_PARAMETER(FVector2f, PhysicalAtlasSize) SHADER_PARAMETER(FVector2f, InvPhysicalAtlasSize) SHADER_PARAMETER(float, IndirectLightingAtlasDownsampleFactor) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, CardData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, CardPageData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, MeshCardsData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, HeightfieldData) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, PrimitiveGroupData) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, PageTableBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(ByteAddressBuffer, SceneInstanceIndexToMeshCardsIndexBuffer) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AlbedoAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, OpacityAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, NormalAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, EmissiveAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DepthAtlas) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "GetFeedbackBufferSize()",
    "kind": "Method",
    "detail": "Function (uint32 FeedbackBufferElementStride = 2 ; uint32)",
    "insertText": "GetFeedbackBufferSize(const FViewFamilyInfo& ViewFamily)"
  },
  {
    "label": "GetCompactedFeedbackBufferSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCompactedFeedbackBufferSize()"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (} ; struct FLumenSurfaceMipMap { uint8 SizeInPagesX = 0 ; uint8 SizeInPagesY = 0 ; uint8 ResLevelX = 0 ; uint8 ResLevelY = 0 ; int32 PageTableSpanOffset = - 1 ; uint16 PageTableSpanSize = 0 ; bool bLocked = false ; bool)",
    "insertText": "IsAllocated()"
  },
  {
    "label": "GetPageTableIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPageTableIndex(int32 LocalPageIndex)"
  },
  {
    "label": "FLumenCard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLumenCard()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FLumenCardOBBf LocalOBB ; FLumenCardOBBd WorldOBB ; FLumenCardOBBf MeshCardsOBB ; bool bVisible = false ; bool bHeightfield = false ; uint8 MinAllocatedResLevel = UINT8_MAX ; uint8 MaxAllocatedResLevel = 0 ; uint8 DesiredLockedResLevel = 0 ; FLumenSurfaceMipMap SurfaceMipMaps [ Lumen::NumResLevels ] ; int32 MeshCardsIndex = - 1 ; int32 IndexInMeshCards = - 1 ; uint8 IndexInBuildData = UINT8_MAX ; uint8 AxisAlignedDirectionIndex = UINT8_MAX ; float ResolutionScale = 1 . 0 f ; float CardAspect = 1 . 0 f ; void)",
    "insertText": "Initialize(float InResolutionScale, const FMatrix& LocalToWorld, const FLumenMeshCards& InMeshCardsInstance, const FLumenCardBuildData& CardBuildData, int32 InIndexInMeshCards, int32 InMeshCardsIndex, uint8 InIndexInBuildData)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FMatrix& LocalToWorld, const FLumenMeshCards& MeshCards)"
  },
  {
    "label": "UpdateMinMaxAllocatedLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMinMaxAllocatedLevel()"
  },
  {
    "label": "GetMipMap()",
    "kind": "Method",
    "detail": "Function (FLumenSurfaceMipMap&)",
    "insertText": "GetMipMap(int32 ResLevel)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 MipIndex = ResLevel - Lumen::MinResLevel ;)",
    "insertText": "check(MipIndex >= 0 && MipIndex < UE_ARRAY_COUNT(SurfaceMipMaps))"
  },
  {
    "label": "GetMipMapDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMipMapDesc(int32 ResLevel, FLumenMipMapDesc& Desc)"
  },
  {
    "label": "HasMergedInstances()",
    "kind": "Method",
    "detail": "Function (const FPrimitiveSceneInfo* Primitive ; int32 PrimitiveIndex ; TArray<int32,TInlineAllocator<1>> LumenPrimitiveGroupIndices ; } ; class FLumenPrimitiveGroup { public : TArray<FPrimitiveSceneInfo*,TInlineAllocator<1>> Primitives ; int32 PrimitiveInstanceIndex = - 1 ; int32 MeshCardsIndex = - 1 ; int32 HeightfieldIndex = - 1 ; FRenderBounds WorldSpaceBoundingBox ; Experimental::FHashElementId RayTracingGroupMapElementId ; float CardResolutionScale = 1 . 0 f ; bool bValidMeshCards = false ; bool bFarField = false ; bool bHeightfield = false ; bool bEmissiveLightSource = false ; bool bOpaqueOrMasked = true ; uint32 LightingChannelMask = UINT32_MAX ; bool)",
    "insertText": "HasMergedInstances()"
  },
  {
    "label": "HasMergedPrimitives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMergedPrimitives()"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLumenPageTableEntry { FIntPoint PhysicalPageCoord =)",
    "insertText": "FIntPoint(-1, -1)"
  },
  {
    "label": "IsSubAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubAllocation()"
  },
  {
    "label": "GetNumPhysicalTexels()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumPhysicalTexels()"
  },
  {
    "label": "IsLockedMip()",
    "kind": "Method",
    "detail": "Function (} } ; class FSurfaceCacheRequest { public : int32 CardIndex = - 1 ; uint16 ResLevel = 0 ; uint16 LocalPageIndex = UINT16_MAX ; float Distance = 0 . 0 f ; bool)",
    "insertText": "IsLockedMip()"
  },
  {
    "label": "FVirtualPageIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVirtualPageIndex(int32 InCardIndex, uint16 InResLevel, uint16 InLocalPageIndex) : CardIndex(InCardIndex), ResLevel(InResLevel), LocalPageIndex(InLocalPageIndex)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntRect PhysicalAtlasRect ; } ; struct FBinStats { FIntPoint ElementSize =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (int32 NumAllocations = 0 ; int32 NumPages = 0 ; } ; struct FStats { uint32 NumFreePages = 0 ; uint32 BinNumPages = 0 ; uint32 BinNumWastedPages = 0 ; uint32 BinPageFreeTexels = 0 ; TArray<FBinStats> Bins ; } ; void)",
    "insertText": "Init(const FIntPoint& InPageAtlasSizeInPages)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(const FLumenPageTableEntry& Page, FAllocation& Allocation)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(const FLumenPageTableEntry& Page)"
  },
  {
    "label": "IsSpaceAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpaceAvailable(const FLumenCard& Card, int32 ResLevel, bool bSinglePage)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(FStats& Stats)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : struct FPageBinAllocation { public : void)",
    "insertText": "Init(const FIntPoint& InPageCoord, const FIntPoint& InPageSizeInElements)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (PageCoord = InPageCoord ; PageSizeInElements = InPageSizeInElements ; SubPageFreeCount = InPageSizeInElements . X* InPageSizeInElements . Y ; SubPageList .)",
    "insertText": "SetNum(SubPageFreeCount, false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "Add()"
  },
  {
    "label": "FindAndSetFirstZeroBit()",
    "kind": "Method",
    "detail": "Function (const int32 Index = SubPageList .)",
    "insertText": "FindAndSetFirstZeroBit()"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (- - SubPageFreeCount ; return)",
    "insertText": "FIntPoint(Index % PageSizeInElements.X, Index / PageSizeInElements.X)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const FIntPoint& In)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const int32 Index = In . X + PageSizeInElements . X* In . Y ;)",
    "insertText": "checkSlow(SubPageList.IsValidIndex(Index))"
  },
  {
    "label": "GetSubPageFreeCount()",
    "kind": "Method",
    "detail": "Function (+ + SubPageFreeCount ; SubPageList [ Index ] = false ; } uint32)",
    "insertText": "GetSubPageFreeCount()"
  },
  {
    "label": "GetSubPageCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSubPageCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Count = 0 ;)",
    "insertText": "for(auto& BinAllocation : BinAllocations)"
  },
  {
    "label": "HasFreeElements()",
    "kind": "Method",
    "detail": "Function (} return Count ; } bool)",
    "insertText": "HasFreeElements()"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (FPageBinAllocation& NewBinAllocation = BinAllocations .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NewBinAllocation .)",
    "insertText": "Init(InPageCoord, PageSizeInElements)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPageBinAllocation& BinAllocation = BinAllocations [ BinAllocIt ] ;)",
    "insertText": "if(BinAllocation.PageCoord == Page.PhysicalPageCoord)"
  },
  {
    "label": "ElementCoord()",
    "kind": "Method",
    "detail": "Function (const FIntPoint)",
    "insertText": "ElementCoord(Page.PhysicalAtlasRect.Min - BinAllocation.PageCoord * Lumen::PhysicalPageSize)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BinAllocation .)",
    "insertText": "Remove(ElementCoord)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (BinAllocations .)",
    "insertText": "RemoveAtSwap(BinAllocIt)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} return bIsEmpty ; } })",
    "insertText": "check(false)"
  },
  {
    "label": "AllocatePhysicalAtlasPage()",
    "kind": "Method",
    "detail": "Function (private : TArray<FPageBinAllocation,TInlineAllocator<1 6>> BinAllocations ; } ; FIntPoint)",
    "insertText": "AllocatePhysicalAtlasPage()"
  },
  {
    "label": "FreePhysicalAtlasPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePhysicalAtlasPage(const FIntPoint& PageCoord)"
  },
  {
    "label": "GetLookupIndex()",
    "kind": "Method",
    "detail": "Function (TBitArray<TInlineAllocator<3 2>> PhysicalPageList ; int32 PhysicalPageFreeCount = 0 ; FIntPoint PageAtlasSizeInPages = FIntPoint::ZeroValue ; TArray<FPageBin> PageBins ; const uint8 InvalidPageBinIndex = 0 xFF ; typedef TStaticArray<uint8,6 4 u> FPageBinLookup ; FPageBinLookup PageBinLookup ; uint8)",
    "insertText": "GetLookupIndex(const FIntPoint& InRes)"
  },
  {
    "label": "FloorLog2()",
    "kind": "Method",
    "detail": "Function (const uint32 OutIndex =)",
    "insertText": "FloorLog2(InRes.X) + FMath::FloorLog2(InRes.Y)"
  },
  {
    "label": "GetBin()",
    "kind": "Method",
    "detail": "Function (} const FPageBin*)",
    "insertText": "GetBin(const FIntPoint& InRes)"
  },
  {
    "label": "GetLookupIndex()",
    "kind": "Method",
    "detail": "Function (const uint8 LookupIndex =)",
    "insertText": "GetLookupIndex(InRes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint8 BinIndex = PageBinLookup [ LookupIndex ] ;)",
    "insertText": "if(BinIndex != InvalidPageBinIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint8 BinIndex = PageBinLookup [ LookupIndex ] ;)",
    "insertText": "if(BinIndex == InvalidPageBinIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (PageBinLookup [ LookupIndex ] = PageBins .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PageBins .)",
    "insertText": "Add(FPageBin(InRes))"
  },
  {
    "label": "CreateSharedRT()",
    "kind": "Method",
    "detail": "Function (} else { return& PageBins [ BinIndex ] ; } } } ; enum class ESurfaceCacheCompression : uint8 { Disabled,UAVAliasing,CopyTextureRegion } ; class FLumenSharedRT { public : FRDGTextureRef)",
    "insertText": "CreateSharedRT(FRDGBuilder& Builder, const FRDGTextureDesc& Desc, FIntPoint VisibleExtent, const TCHAR* Name, ERDGTextureFlags Flags = ERDGTextureFlags::None)"
  },
  {
    "label": "GetRenderTarget()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetRenderTarget()"
  },
  {
    "label": "IsPerspectiveProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerspectiveProjection()"
  },
  {
    "label": "ReflectSpecularIndirect()",
    "kind": "Method",
    "detail": "Function (FLumenSurfaceCacheFeedback::FFeedbackResources SurfaceCacheFeedbackResources ; FRDGTextureRef AlbedoAtlas = nullptr ; FRDGTextureRef OpacityAtlas = nullptr ; FRDGTextureRef NormalAtlas = nullptr ; FRDGTextureRef EmissiveAtlas = nullptr ; FRDGTextureRef DepthAtlas = nullptr ; FRDGTextureRef DirectLightingAtlas = nullptr ; FRDGTextureRef IndirectLightingAtlas = nullptr ; FRDGTextureRef RadiosityNumFramesAccumulatedAtlas = nullptr ; FRDGTextureRef FinalLightingAtlas = nullptr ; FRDGBufferRef TileShadowDownsampleFactorAtlas = nullptr ; FRDGTextureRef DiffuseLightingAndSecondMomentHistoryAtlas = nullptr ; FRDGTextureRef NumFramesAccumulatedHistoryAtlas = nullptr ; FRDGBufferSRV* CardBufferSRV = nullptr ; FRDGBufferSRV* MeshCardsBufferSRV = nullptr ; FRDGBufferSRV* HeightfieldBufferSRV = nullptr ; FRDGBufferSRV* PrimitiveGroupBufferSRV = nullptr ; FRDGBufferSRV* SceneInstanceIndexToMeshCardsIndexBufferSRV = nullptr ; FRDGBufferSRV* PageTableBufferSRV = nullptr ; FRDGBufferSRV* CardPageBufferSRV = nullptr ; FRDGBufferUAV* CardPageBufferUAV = nullptr ; FRDGBufferUAV* CardPageLastUsedBufferUAV = nullptr ; FRDGBufferSRV* CardPageLastUsedBufferSRV = nullptr ; FRDGBufferUAV* CardPageHighResLastUsedBufferUAV = nullptr ; FRDGBufferSRV* CardPageHighResLastUsedBufferSRV = nullptr ; TRDGUniformBufferRef<FLumenCardScene> LumenCardSceneUniformBuffer = nullptr ; FRHIGPUBufferReadback* SceneAddOpsReadbackBuffer = nullptr ; FRHIGPUBufferReadback* SceneRemoveOpsReadbackBuffer = nullptr ; FRHIGPUBufferReadback* SurfaceCacheFeedbackBuffer = nullptr ; UE::Tasks::FTask UpdateSceneTask ; bool bReallocateAtlas = false ; TArray<FLumenViewOrigin,TFixedAllocator<LUMEN_MAX_VIEWS>> ViewOrigins ; FIntPoint ViewExtent ; FLumenSharedRT)",
    "insertText": "ReflectSpecularIndirect(uint32)"
  },
  {
    "label": "ReflectNumHistoryFrames()",
    "kind": "Method",
    "detail": "Function (FLumenSharedRT)",
    "insertText": "ReflectNumHistoryFrames(uint32)"
  },
  {
    "label": "ReflectResolveVariance()",
    "kind": "Method",
    "detail": "Function (FLumenSharedRT)",
    "insertText": "ReflectResolveVariance(uint32)"
  },
  {
    "label": "FLumenGlobalLightingState()",
    "kind": "Method",
    "detail": "Function (FLumenSharedRT DiffuseIndirect ; FLumenSharedRT BackfaceDiffuseIndirect ; FLumenSharedRT RoughSpecularIndirect ; FLumenSharedRT NumHistoryFrames ; FLumenSharedRT ResolveVariance ; FLumenSharedRT NewDiffuseIndirect ; FLumenSharedRT NewBackfaceDiffuseIndirect ; FLumenSharedRT NewRoughSpecularIndirect ; FLumenSharedRT NewNumHistoryFrames ; FLumenSharedRT NewResolveVariance ; FLumenSharedRT NewHistoryFastUpdateMode ; FLumenSharedRT DepthHistory ; FLumenSharedRT NormalHistory ; FLumenSharedRT ReservoirRayDirection ; FLumenSharedRT ReservoirTraceRadiance ; FLumenSharedRT ReservoirTraceHitDistance ; FLumenSharedRT ReservoirTraceHitNormal ; FLumenSharedRT ReservoirWeights ; FLumenSharedRT DownsampledSceneDepth ; FLumenSharedRT DownsampledWorldNormal ; FRDGBufferSRVRef DebugData = nullptr ; } ; class FLumenGlobalLightingState { public : FLinearColor DirectionalLightColor ; FLinearColor SkyLightColor ; bool bDirectionalLightValid ; bool bSkyLightValid ;)",
    "insertText": "FLumenGlobalLightingState()"
  },
  {
    "label": "FLumenSceneData()",
    "kind": "Method",
    "detail": "Function (DirectionalLightColor = FLinearColor::Black ; SkyLightColor = FLinearColor::Black ; bDirectionalLightValid = false ; bSkyLightValid = false ; } } ; class FLumenSceneData { public : bool bDebugClearAllCachedState = false ; bool bReuploadSceneRequest = false ; TSparseSpanArray<FLumenCard> Cards ; FUniqueIndexList CardIndicesToUpdateInBuffer ; TRefCountPtr<FRDGPooledBuffer> CardBuffer ; FRDGScatterUploadBuffer CardUploadBuffer ; FUniqueIndexList PrimitiveGroupIndicesToUpdateInBuffer ; TSparseSpanArray<FLumenPrimitiveGroup> PrimitiveGroups ; TRefCountPtr<FRDGPooledBuffer> PrimitiveGroupBuffer ; FRDGScatterUploadBuffer PrimitiveGroupUploadBuffer ; Experimental::TRobinHoodHashMap<int32,int32> RayTracingGroups ; TArray<const FPrimitiveSceneInfo*> LandscapePrimitives ; FUniqueIndexList MeshCardsIndicesToUpdateInBuffer ; TSparseSpanArray<FLumenMeshCards> MeshCards ; TRefCountPtr<FRDGPooledBuffer> MeshCardsBuffer ; FRDGScatterUploadBuffer MeshCardsUploadBuffer ; FUniqueIndexList HeightfieldIndicesToUpdateInBuffer ; TSparseSpanArray<FLumenHeightfield> Heightfields ; TRefCountPtr<FRDGPooledBuffer> HeightfieldBuffer ; FRDGScatterUploadBuffer HeightfieldUploadBuffer ; FUniqueIndexList PrimitivesToUpdateMeshCards ; TRefCountPtr<FRDGPooledBuffer> SceneInstanceIndexToMeshCardsIndexBuffer ; FRDGScatterUploadBuffer SceneInstanceIndexToMeshCardsIndexUploadBuffer ; TRefCountPtr<FRDGPooledBuffer> CardPageBuffer ; FRDGScatterUploadBuffer CardPageUploadBuffer ; TRefCountPtr<FRDGPooledBuffer> CardPageLastUsedBuffer ; TRefCountPtr<FRDGPooledBuffer> CardPageHighResLastUsedBuffer ; TRefCountPtr<IPooledRenderTarget> AlbedoAtlas ; TRefCountPtr<IPooledRenderTarget> OpacityAtlas ; TRefCountPtr<IPooledRenderTarget> NormalAtlas ; TRefCountPtr<IPooledRenderTarget> EmissiveAtlas ; TRefCountPtr<IPooledRenderTarget> DepthAtlas ; TRefCountPtr<IPooledRenderTarget> DirectLightingAtlas ; TRefCountPtr<IPooledRenderTarget> IndirectLightingAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityNumFramesAccumulatedAtlas ; TRefCountPtr<IPooledRenderTarget> FinalLightingAtlas ; TRefCountPtr<FRDGPooledBuffer> TileShadowDownsampleFactorAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityTraceRadianceAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityTraceHitDistanceAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityProbeSHRedAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityProbeSHGreenAtlas ; TRefCountPtr<IPooledRenderTarget> RadiosityProbeSHBlueAtlas ; TRefCountPtr<IPooledRenderTarget> DiffuseLightingAndSecondMomentHistoryAtlas ; TRefCountPtr<IPooledRenderTarget> NumFramesAccumulatedHistoryAtlas ; FLumenSceneReadback SceneReadback ; FLumenSurfaceCacheFeedback SurfaceCacheFeedback ; FLumenGlobalLightingState GlobalLightingState ; bool bFinalLightingAtlasContentsValid ; int32 NumMeshCardsToAdd = 0 ; int32 NumLockedCardsToUpdate = 0 ; int32 NumHiResPagesToAdd = 0 ; bool bTrackAllPrimitives ; TSet<FPrimitiveSceneInfo*> PendingAddOperations ; TSet<FPrimitiveSceneInfo*> PendingUpdateOperations ; TSet<FPrimitiveSceneInfo*> PendingSurfaceCacheInvalidationOperations ; TArray<FLumenPrimitiveGroupRemoveInfo> PendingRemoveOperations ; float SurfaceCacheResolution = 1 . 0 f ; bool bViewSpecific = false ; # if WITH_MGPU bool bViewSpecificMaskInitialized = false ; FRHIGPUMask ViewSpecificMask ; # endif)",
    "insertText": "FLumenSceneData(EShaderPlatform ShaderPlatform, EWorldType::Type WorldType)"
  },
  {
    "label": "FLumenSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLumenSceneData(bool bInTrackAllPrimitives)"
  },
  {
    "label": "FLumenSceneData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLumenSceneData()"
  },
  {
    "label": "UpdatePrimitiveInstanceOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveInstanceOffset(int32 PrimitiveIndex)"
  },
  {
    "label": "ResetAndConsolidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAndConsolidate()"
  },
  {
    "label": "AddMeshCards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshCards(int32 PrimitiveGroupIndex)"
  },
  {
    "label": "UpdateMeshCards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMeshCards(const FMatrix& LocalToWorld, int32 MeshCardsIndex, const FMeshCardsBuildData& MeshCardsBuildData)"
  },
  {
    "label": "InvalidateSurfaceCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateSurfaceCache(FRHIGPUMask GPUMask, int32 MeshCardsIndex)"
  },
  {
    "label": "RemoveMeshCards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMeshCards(int32 PrimitiveGroupIndex)"
  },
  {
    "label": "RemoveCardFromAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCardFromAtlas(int32 CardIndex)"
  },
  {
    "label": "HasPendingOperations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingOperations()"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpStats(const FDistanceFieldSceneData& DistanceFieldSceneData, bool bDumpMeshDistanceFields, bool bDumpPrimitiveGroups)"
  },
  {
    "label": "UpdateAtlasSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAtlasSize()"
  },
  {
    "label": "ReleaseAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAtlas()"
  },
  {
    "label": "RemoveAllMeshCards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllMeshCards()"
  },
  {
    "label": "UploadPageTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadPageTable(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "FillFrameTemporaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFrameTemporaries(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries)"
  },
  {
    "label": "AllocateCardAtlases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateCardAtlases(FRDGBuilder& GraphBuilder, FLumenSceneFrameTemporaries& FrameTemporaries, const FSceneViewFamily* ViewFamily)"
  },
  {
    "label": "ReallocVirtualSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocVirtualSurface(FLumenCard& Card, int32 CardIndex, int32 ResLevel, bool bLockPages)"
  },
  {
    "label": "FreeVirtualSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVirtualSurface(FLumenCard& Card, uint8 FromResLevel, uint8 ToResLevel)"
  },
  {
    "label": "UpdateCardMipMapHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCardMipMapHierarchy(FLumenCard& Card)"
  },
  {
    "label": "IsPhysicalSpaceAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPhysicalSpaceAvailable(const FLumenCard& Card, int32 ResLevel, bool bSinglePage)"
  },
  {
    "label": "ForceEvictEntireCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForceEvictEntireCache()"
  },
  {
    "label": "EvictOldestAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvictOldestAllocation(uint32 MaxFramesSinceLastUsed, TSparseUniqueList<int32, SceneRenderingAllocator>& DirtyCards)"
  },
  {
    "label": "GetSurfaceCacheUpdateFrameIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSurfaceCacheUpdateFrameIndex()"
  },
  {
    "label": "IncrementSurfaceCacheUpdateFrameIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSurfaceCacheUpdateFrameIndex()"
  },
  {
    "label": "GetPageTableEntry()",
    "kind": "Method",
    "detail": "Function (const FLumenPageTableEntry&)",
    "insertText": "GetPageTableEntry(int32 PageTableIndex)"
  },
  {
    "label": "GetNumCardPages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCardPages()"
  },
  {
    "label": "GetPhysicalAtlasSize()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetPhysicalAtlasSize()"
  },
  {
    "label": "GetCardCaptureAtlasSizeInPages()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetCardCaptureAtlasSizeInPages()"
  },
  {
    "label": "GetCardCaptureAtlasSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetCardCaptureAtlasSize()"
  },
  {
    "label": "GetCardCaptureRefreshNumTexels()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCardCaptureRefreshNumTexels()"
  },
  {
    "label": "GetCardCaptureRefreshNumPages()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCardCaptureRefreshNumPages()"
  },
  {
    "label": "GetPhysicalAtlasCompression()",
    "kind": "Method",
    "detail": "Function (ESurfaceCacheCompression)",
    "insertText": "GetPhysicalAtlasCompression()"
  },
  {
    "label": "ProcessLumenSurfaceCacheRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLumenSurfaceCacheRequests(const FViewInfo& MainView, float MaxCardUpdateDistanceFromCamera, int32 MaxTileCapturesPerFrame, FLumenCardRenderer& LumenCardRenderer, FRHIGPUMask GPUMask, const TArray<FSurfaceCacheRequest, SceneRenderingAllocator>& SurfaceCacheRequests)"
  },
  {
    "label": "GetMeshCardsIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshCardsIndex(const FPrimitiveSceneInfo* PrimitiveSceneInfo, int32 InstanceIndex)"
  },
  {
    "label": "CopyInitialData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyInitialData(const FLumenSceneData& SourceSceneData)"
  },
  {
    "label": "UpdateGPUMask()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU void)",
    "insertText": "UpdateGPUMask(FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, FLumenViewState& LumenViewState, FRHIGPUMask ViewGPUMask)"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (# endif uint64)",
    "insertText": "GetGPUSizeBytes(bool bLogSizes)"
  },
  {
    "label": "AddMeshCardsFromBuildData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddMeshCardsFromBuildData(int32 PrimitiveGroupIndex, const FMatrix& LocalToWorld, const FMeshCardsBuildData& MeshCardsBuildData, FLumenPrimitiveGroup& PrimitiveGroup)"
  },
  {
    "label": "UnmapSurfaceCachePage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapSurfaceCachePage(bool bLocked, FLumenPageTableEntry& Page, int32 PageIndex)"
  },
  {
    "label": "RecaptureCardPage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecaptureCardPage(const FViewInfo& MainView, FLumenCardRenderer& LumenCardRenderer, FLumenSurfaceCacheAllocator& CaptureAtlasAllocator, FRHIGPUMask GPUMask, int32 PageTableIndex)"
  }
]