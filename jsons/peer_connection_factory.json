[
  {
    "label": "BasicNetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicNetworkManager"
  },
  {
    "label": "BasicPacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicPacketSocketFactory"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "PeerConnectionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionFactory"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PEER_CONNECTION_FACTORY_H_ # define PC_PEER_CONNECTION_FACTORY_H_ # include<stdint . h> # include<stdio . h> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" api / audio_options . h \" # include \" api / fec_controller . h \" # include \" api / field_trials_view . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / metronome / metronome . h \" # include \" api / neteq / neteq_factory . h \" # include \" api / network_state_predictor . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / rtc_event_log / rtc_event_log_factory_interface . h \" # include \" api / rtp_parameters . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / transport / network_control . h \" # include \" api / transport / sctp_transport_factory_interface . h \" # include \" call / call . h \" # include \" call / rtp_transport_controller_send_factory_interface . h \" # include \" p2p / base / port_allocator . h \" # include \" pc / connection_context . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / rtc_certificate_generator . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class BasicNetworkManager ; class BasicPacketSocketFactory ; } namespace webrtc { class RtcEventLog ; class PeerConnectionFactory : public PeerConnectionFactoryInterface { public : rtc::scoped_refptr<PeerConnectionFactory>)",
    "insertText": "Create(PeerConnectionFactoryDependencies dependencies)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptions(const Options& options)"
  },
  {
    "label": "CreatePeerConnectionOrError()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<PeerConnectionInterface>>)",
    "insertText": "CreatePeerConnectionOrError(const PeerConnectionInterface::RTCConfiguration& configuration, PeerConnectionDependencies dependencies)"
  },
  {
    "label": "GetRtpSenderCapabilities()",
    "kind": "Method",
    "detail": "Function (RtpCapabilities)",
    "insertText": "GetRtpSenderCapabilities(cricket::MediaType kind)"
  },
  {
    "label": "GetRtpReceiverCapabilities()",
    "kind": "Method",
    "detail": "Function (RtpCapabilities)",
    "insertText": "GetRtpReceiverCapabilities(cricket::MediaType kind)"
  },
  {
    "label": "CreateLocalMediaStream()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<MediaStreamInterface>)",
    "insertText": "CreateLocalMediaStream(const std::string& stream_id)"
  },
  {
    "label": "CreateAudioSource()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioSourceInterface>)",
    "insertText": "CreateAudioSource(const cricket::AudioOptions& options)"
  },
  {
    "label": "CreateVideoTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoTrackInterface>)",
    "insertText": "CreateVideoTrack(const std::string& id, VideoTrackSourceInterface* video_source)"
  },
  {
    "label": "CreateAudioTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioTrackInterface>)",
    "insertText": "CreateAudioTrack(const std::string& id, AudioSourceInterface* audio_source)"
  },
  {
    "label": "StartAecDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAecDump(FILE* file, int64_t max_size_bytes)"
  },
  {
    "label": "StopAecDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAecDump()"
  },
  {
    "label": "sctp_transport_factory()",
    "kind": "Method",
    "detail": "Function (SctpTransportFactoryInterface*)",
    "insertText": "sctp_transport_factory()"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (} const Options&)",
    "insertText": "options()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread())"
  },
  {
    "label": "media_engine()",
    "kind": "Method",
    "detail": "Function (} cricket::MediaEngineInterface*)",
    "insertText": "media_engine()"
  },
  {
    "label": "PeerConnectionFactory()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "PeerConnectionFactory(rtc::scoped_refptr<ConnectionContext> context, PeerConnectionFactoryDependencies* dependencies)"
  },
  {
    "label": "PeerConnectionFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerConnectionFactory(PeerConnectionFactoryDependencies dependencies)"
  },
  {
    "label": "PeerConnectionFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionFactory()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (private : rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "IsTrialEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTrialEnabled(absl::string_view key)"
  },
  {
    "label": "CreateRtcEventLog_w()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtcEventLog>)",
    "insertText": "CreateRtcEventLog_w()"
  },
  {
    "label": "CreateCall_w()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Call>)",
    "insertText": "CreateCall_w(RtcEventLog* event_log, const FieldTrialsView& field_trials)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<ConnectionContext> context_ ; PeerConnectionFactoryInterface::Options options_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueueFactory> task_queue_factory_ ; std::unique_ptr<RtcEventLogFactoryInterface> event_log_factory_ ; std::unique_ptr<FecControllerFactoryInterface> fec_controller_factory_ ; std::unique_ptr<NetworkStatePredictorFactoryInterface> network_state_predictor_factory_ ; std::unique_ptr<NetworkControllerFactoryInterface> injected_network_controller_factory_ ; std::unique_ptr<NetEqFactory> neteq_factory_ ; const std::unique_ptr<RtpTransportControllerSendFactoryInterface> transport_controller_send_factory_ ; std::unique_ptr<Metronome> metronome_)",
    "insertText": "RTC_GUARDED_BY(worker_thread())"
  }
]