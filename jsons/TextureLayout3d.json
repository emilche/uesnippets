[
  {
    "label": "FTextureLayout3d",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureLayout3d"
  },
  {
    "label": "FTextureLayoutNode3d",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureLayoutNode3d"
  },
  {
    "label": "FUnusedLeaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnusedLeaf"
  },
  {
    "label": "FTextureLayout3d()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FTextureLayout3d { public :)",
    "insertText": "FTextureLayout3d(uint32 InMinSizeX, uint32 InMinSizeY, uint32 InMinSizeZ, uint32 MaxSizeX, uint32 MaxSizeY, uint32 MaxSizeZ, bool bInPowerOfTwoSize = false, bool bInAlignByFour = true, bool bInAllowShrink = true): MinSizeX(InMinSizeX), MinSizeY(InMinSizeY), MinSizeZ(InMinSizeZ), SizeX(InMinSizeX), SizeY(InMinSizeY), SizeZ(InMinSizeZ), bPowerOfTwoSize(bInPowerOfTwoSize), bAlignByFour(bInAlignByFour), bAllowShrink(bInAllowShrink)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Emplace(static_cast<uint16>(0), static_cast<uint16>(0), static_cast<uint16>(0), IntCastChecked<uint16>(MaxSizeX), IntCastChecked<uint16>(MaxSizeY), IntCastChecked<uint16>(MaxSizeZ), INDEX_NONE)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (UnusedLeaves .)",
    "insertText": "Emplace(static_cast<uint16>(0), static_cast<uint16>(0), static_cast<uint16>(0), IntCastChecked<uint16>(MaxSizeX), IntCastChecked<uint16>(MaxSizeY), IntCastChecked<uint16>(MaxSizeZ), 0)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddElement(uint32& OutBaseX, uint32& OutBaseY, uint32& OutBaseZ, uint32 ElementSizeX, uint32 ElementSizeY, uint32 ElementSizeZ)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutBaseX = 0 ; OutBaseY = 0 ; OutBaseZ = 0 ; return true ; })",
    "insertText": "if(bAlignByFour)"
  },
  {
    "label": "ElementSizeX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementSizeX(ElementSizeX + 3)"
  },
  {
    "label": "ElementSizeY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementSizeY(ElementSizeY + 3)"
  },
  {
    "label": "ElementSizeZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementSizeZ(ElementSizeZ + 3)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int32 IdealNodeIndex = INDEX_NONE ; int32 ContainingNodeIndex = INDEX_NONE ; int32 RemoveIndex = INDEX_NONE ;)",
    "insertText": "for(int32 Index = 0; Index < UnusedLeaves.Num(); ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ContainingNodeIndex = UnusedLeaves [ Index ] . NodeIndex ; RemoveIndex = Index ; })",
    "insertText": "if(UnusedLeaves[Index].MinX + ElementSizeX <= SizeX && UnusedLeaves[Index].MinY + ElementSizeY <= SizeY && UnusedLeaves[Index].MinZ + ElementSizeZ <= SizeZ)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IdealNodeIndex = UnusedLeaves [ Index ] . NodeIndex ; RemoveIndex = Index ; break ; } } })",
    "insertText": "if(RemoveIndex != INDEX_NONE)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (UnusedLeaves .)",
    "insertText": "RemoveAtSwap(RemoveIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int32 NodeIndex = INDEX_NONE ;)",
    "insertText": "if(IdealNodeIndex != INDEX_NONE)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (NodeIndex =)",
    "insertText": "AddSurfaceInner(IdealNodeIndex, ElementSizeX, ElementSizeY, ElementSizeZ, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ContainingNodeIndex != INDEX_NONE)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (NodeIndex =)",
    "insertText": "AddSurfaceInner(ContainingNodeIndex, ElementSizeX, ElementSizeY, ElementSizeZ, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NodeIndex != INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FTextureLayoutNode3d& Node = Nodes [ NodeIndex ] ; Node . bUsed = true ; OutBaseX = Node . MinX ; OutBaseY = Node . MinY ; OutBaseZ = Node . MinZ ; UsedLeaves .)",
    "insertText": "Add(FIntVector(OutBaseX, OutBaseY, OutBaseZ), NodeIndex)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSize(OutBaseX + ElementSizeX, OutBaseY + ElementSizeY, OutBaseZ + ElementSizeZ)"
  },
  {
    "label": "RemoveAndCopyValue()",
    "kind": "Method",
    "detail": "Function (int32 FoundNodeIndex = INDEX_NONE ; UsedLeaves .)",
    "insertText": "RemoveAndCopyValue(FIntVector(ElementBaseX, ElementBaseY, ElementBaseZ), FoundNodeIndex)"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (Nodes [ FoundNodeIndex ] . bUsed = false ; int32 ParentNodeIndex =)",
    "insertText": "FindParentNode(FoundNodeIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 LastParentNodeIndex = INDEX_NONE ;)",
    "insertText": "while(ParentNodeIndex != INDEX_NONE && !IsNodeUsed(Nodes[ParentNodeIndex].ChildA) && !IsNodeUsed(Nodes[ParentNodeIndex].ChildB))"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (LastParentNodeIndex = ParentNodeIndex ; ParentNodeIndex =)",
    "insertText": "FindParentNode(ParentNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LastParentNodeIndex != INDEX_NONE)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(LastParentNodeIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FoundNodeIndex = LastParentNodeIndex ; } UnusedLeaves .)",
    "insertText": "Emplace(Nodes[FoundNodeIndex].MinX, Nodes[FoundNodeIndex].MinY, Nodes[FoundNodeIndex].MinZ, Nodes[FoundNodeIndex].SizeX, Nodes[FoundNodeIndex].SizeY, Nodes[FoundNodeIndex].SizeZ, FoundNodeIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SizeX = MinSizeX ; SizeY = MinSizeY ; SizeZ = MinSizeZ ;)",
    "insertText": "for(int32 NodeIndex = 0; NodeIndex < Nodes.Num(); NodeIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTextureLayoutNode3d& Node = Nodes [ NodeIndex ] ;)",
    "insertText": "if(Node.bUsed)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSize(Node.MinX + Node.SizeX, Node.MinY + Node.SizeY, Node.MinZ + Node.SizeZ)"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (} } } return true ; } return false ; } uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "GetMaxSizeX()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMaxSizeX()"
  },
  {
    "label": "FUnusedLeaf()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUnusedLeaf { uint16 MinX,MinY,MinZ ; uint16 SizeX,SizeY,SizeZ ; int32 NodeIndex ;)",
    "insertText": "FUnusedLeaf(uint16 InMinX, uint16 InMinY, uint16 InMinZ, uint16 InSizeX, uint16 InSizeY, uint16 InSizeZ, int32 InNodeIndex) : MinX(InMinX), MinY(InMinY), MinZ(InMinZ), SizeX(InSizeX), SizeY(InSizeY), SizeZ(InSizeZ), NodeIndex(InNodeIndex)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (} } ; uint32 MinSizeX ; uint32 MinSizeY ; uint32 MinSizeZ ; uint32 SizeX ; uint32 SizeY ; uint32 SizeZ ; bool bPowerOfTwoSize ; bool bAlignByFour ; bool bAllowShrink ; TArray<FTextureLayoutNode3d,TInlineAllocator<5>> Nodes ; TArray<int32> FreeNodeIndices ; TArray<FUnusedLeaf> UnusedLeaves ; TMap<FIntVector,int32> UsedLeaves ; int32)",
    "insertText": "AddSurfaceInner(int32 NodeIndex, uint32 ElementSizeX, uint32 ElementSizeY, uint32 ElementSizeZ, bool bAllowTextureEnlargement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FTextureLayoutNode3d* CurrentNodePtr =& Nodes [ NodeIndex ] ;)",
    "insertText": "if(CurrentNodePtr->ChildA != INDEX_NONE)"
  },
  {
    "label": "AddSurfaceInner()",
    "kind": "Method",
    "detail": "Function (const int32 Result =)",
    "insertText": "AddSurfaceInner(CurrentNodePtr->ChildA, ElementSizeX, ElementSizeY, ElementSizeZ, bAllowTextureEnlargement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentNodePtr = 0 ;)",
    "insertText": "if(Result != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(CurrentNodePtr->bUsed)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ChildBNodeIndex = FreeNodeIndices .)",
    "insertText": "Num() ? FreeNodeIndices.Pop() : Nodes.AddUninitialized()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nodes [ NodeIndex ] . ChildA = ChildANodeIndex ; Nodes [ NodeIndex ] . ChildB = ChildBNodeIndex ;)",
    "insertText": "if(ExcessWidth > ExcessHeight)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Nodes[ChildANodeIndex]) FTextureLayoutNode3d( CurrentNode.MinX, CurrentNode.MinY, CurrentNode.MinZ, IntCastChecked<uint16>(ElementSizeX), CurrentNode.SizeY, CurrentNode.SizeZ, NodeIndex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Nodes[ChildBNodeIndex]) FTextureLayoutNode3d( IntCastChecked<uint16>(CurrentNode.MinX + ElementSizeX), CurrentNode.MinY, CurrentNode.MinZ, IntCastChecked<uint16>(CurrentNode.SizeX - ElementSizeX), CurrentNode.SizeY, CurrentNode.SizeZ, NodeIndex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(&Nodes[ChildANodeIndex]) FTextureLayoutNode3d( CurrentNode.MinX, CurrentNode.MinY, CurrentNode.MinZ, CurrentNode.SizeX, CurrentNode.SizeY, IntCastChecked<uint16>(ElementSizeZ), NodeIndex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Nodes[ChildBNodeIndex]) FTextureLayoutNode3d( CurrentNode.MinX, CurrentNode.MinY, IntCastChecked<uint16>(CurrentNode.MinZ + ElementSizeZ), CurrentNode.SizeX, CurrentNode.SizeY, IntCastChecked<uint16>(CurrentNode.SizeZ - ElementSizeZ), NodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(ExcessHeight > ExcessDepth)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Nodes[ChildANodeIndex]) FTextureLayoutNode3d( CurrentNode.MinX, CurrentNode.MinY, CurrentNode.MinZ, CurrentNode.SizeX, IntCastChecked<uint16>(ElementSizeY), CurrentNode.SizeZ, NodeIndex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Nodes[ChildBNodeIndex]) FTextureLayoutNode3d( CurrentNode.MinX, IntCastChecked<uint16>(CurrentNode.MinY + ElementSizeY), CurrentNode.MinZ, CurrentNode.SizeX, IntCastChecked<uint16>(CurrentNode.SizeY - ElementSizeY), CurrentNode.SizeZ, NodeIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} } const FTextureLayoutNode3d& ChildBNode = Nodes [ ChildBNodeIndex ] ; UnusedLeaves .)",
    "insertText": "Emplace(ChildBNode.MinX, ChildBNode.MinY, ChildBNode.MinZ, ChildBNode.SizeX, ChildBNode.SizeY, ChildBNode.SizeZ, ChildBNodeIndex)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateSize(uint32 ElementMaxX, uint32 ElementMaxY, uint32 ElementMaxZ)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeX = FMath::Max<)",
    "insertText": "uint32(SizeX, FMath::RoundUpToPowerOfTwo(ElementMaxX))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeY = FMath::Max<)",
    "insertText": "uint32(SizeY, FMath::RoundUpToPowerOfTwo(ElementMaxY))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeZ = FMath::Max<)",
    "insertText": "uint32(SizeZ, FMath::RoundUpToPowerOfTwo(ElementMaxZ))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} else { SizeX = FMath::Max<)",
    "insertText": "uint32(SizeX, ElementMaxX)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeY = FMath::Max<)",
    "insertText": "uint32(SizeY, ElementMaxY)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (SizeZ = FMath::Max<)",
    "insertText": "uint32(SizeZ, ElementMaxZ)"
  },
  {
    "label": "FindParentNode()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "FindParentNode(int32 SearchNodeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bChildrenUsed = false ;)",
    "insertText": "if(Nodes[NodeIndex].ChildA != INDEX_NONE)"
  },
  {
    "label": "IsNodeUsed()",
    "kind": "Method",
    "detail": "Function (bChildrenUsed =)",
    "insertText": "IsNodeUsed(Nodes[NodeIndex].ChildA) || IsNodeUsed(Nodes[NodeIndex].ChildB)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (} return bChildrenUsed | | Nodes [ NodeIndex ] . bUsed ; } void)",
    "insertText": "RemoveChildren(int32 NodeIndex)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(Nodes[NodeIndex].ChildA)"
  },
  {
    "label": "RemoveChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildren(Nodes[NodeIndex].ChildB)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function ({ const int32 ChildNodeIndex = Nodes [ NodeIndex ] . ChildA ; FreeNodeIndices .)",
    "insertText": "Add(ChildNodeIndex)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (UnusedLeaves .)",
    "insertText": "RemoveAtSwap(Index)"
  }
]