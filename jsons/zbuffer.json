[
  {
    "label": "msgpack_zbuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_zbuffer"
  },
  {
    "label": "msgpack_zbuffer_init()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_ZBUFFER_H # define MSGPACK_ZBUFFER_H # include \" sysdep . h \" # include<stdlib . h> # include<string . h> # include<zlib . h> # ifdef __cplusplus \" C \" { # endif typedef struct msgpack_zbuffer { z_stream stream ; char* data ; size_t init_size ; } msgpack_zbuffer ; # ifndef MSGPACK_ZBUFFER_INIT_SIZE # define MSGPACK_ZBUFFER_INIT_SIZE 8 1 9 2 # endif bool)",
    "insertText": "msgpack_zbuffer_init(msgpack_zbuffer* zbuf, int level, size_t init_size)"
  },
  {
    "label": "msgpack_zbuffer_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_zbuffer_destroy(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_new()",
    "kind": "Method",
    "detail": "Function (msgpack_zbuffer*)",
    "insertText": "msgpack_zbuffer_new(int level, size_t init_size)"
  },
  {
    "label": "msgpack_zbuffer_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_zbuffer_free(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_flush()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "msgpack_zbuffer_flush(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_data()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "msgpack_zbuffer_data(const msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "msgpack_zbuffer_size(const msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_reset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "msgpack_zbuffer_reset(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_reset_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "msgpack_zbuffer_reset_buffer(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_release_buffer()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "msgpack_zbuffer_release_buffer(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "msgpack_zbuffer_write()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_ZBUFFER_RESERVE_SIZE # define MSGPACK_ZBUFFER_RESERVE_SIZE 5 1 2 # endif int)",
    "insertText": "msgpack_zbuffer_write(void* data, const char* buf, size_t len)"
  },
  {
    "label": "msgpack_zbuffer_expand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "msgpack_zbuffer_expand(msgpack_zbuffer* zbuf)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(zbuf, 0, sizeof(msgpack_zbuffer))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (zbuf -> init_size = init_size ;)",
    "insertText": "if(deflateInit(&zbuf->stream, level) != Z_OK)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(zbuf->data)"
  },
  {
    "label": "deflateEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deflateEnd(&zbuf->stream)"
  },
  {
    "label": "zbuf()",
    "kind": "Method",
    "detail": "Function (msgpack_zbuffer*)",
    "insertText": "zbuf(msgpack_zbuffer*)malloc(sizeof(msgpack_zbuffer))"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(zbuf)"
  },
  {
    "label": "used()",
    "kind": "Method",
    "detail": "Function (stream.next_out - zbuf->data)",
    "insertText": "used(char*)"
  },
  {
    "label": "nsize()",
    "kind": "Method",
    "detail": "Function (init_size : csize * 2)",
    "insertText": "nsize(csize == 0)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "tmp(char*)realloc(zbuf->data, nsize)"
  },
  {
    "label": "zbuf()",
    "kind": "Method",
    "detail": "Function (msgpack_zbuffer*)",
    "insertText": "zbuf(msgpack_zbuffer*)"
  },
  {
    "label": "next_in()",
    "kind": "Method",
    "detail": "Function (zbuf -> stream .)",
    "insertText": "next_in(Bytef*)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (zbuf -> stream . avail_in = len ;)",
    "insertText": "while(zbuf->stream.avail_in > 0)"
  },
  {
    "label": "avail_out()",
    "kind": "Method",
    "detail": "Function (stream.next_out - zbuf->data)",
    "insertText": "avail_out(char*)"
  },
  {
    "label": "next_out()",
    "kind": "Method",
    "detail": "Function (data)",
    "insertText": "next_out(Bytef*)"
  }
]