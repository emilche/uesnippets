[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_DIRECT_MMAP_H_ # define ABSL_BASE_INTERNAL_DIRECT_MMAP_H_ # include \" absl / base / config . h \" # ifdef ABSL_HAVE_MMAP # include<sys / mman . h> # ifdef __linux__ # include<sys / types . h> # ifdef __BIONIC__ # include<sys / syscall . h> # else # include<syscall . h> # endif # include<linux / unistd . h> # include<unistd . h> # include<cerrno> # include<cstdarg> # include<cstdint> # ifdef __mips__ # if)",
    "insertText": "defined(__BIONIC__) || !defined(__GLIBC__) #include <asm/sgidefs.h> #else #include <sgidefs.h> #endif #endif #ifdef __BIONIC__ extern \"C\" void* __mmap2(void*, size_t, int, int, int, size_t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__NR_mmap) && !defined(SYS_mmap) #define SYS_mmap __NR_mmap #endif #ifndef SYS_munmap #define SYS_munmap __NR_munmap #endif #endif #if defined(__NR_mmap2) && !defined(SYS_mmap2)"
  },
  {
    "label": "DirectMmap()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace base_internal { void*)",
    "insertText": "DirectMmap(void* start, size_t length, int prot, int flags, int fd, off64_t offset)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__i386__) || defined(__ARM_ARCH_3__) || defined(__ARM_EABI__) || \\ defined(__m68k__) || defined(__sh__) || \\ (defined(__hppa__) && !defined(__LP64__)) || \\ (defined(__mips__) && _MIPS_SIM == _MIPS_SIM_ABI32) || \\ (defined(__PPC__) && !defined(__PPC64__)) || \\ (defined(__riscv) && __riscv_xlen == 32) || \\ (defined(__s390__) && !defined(__s390x__)) || \\ (defined(__sparc__) && !defined(__arch64__))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__wasm__) || defined(__asmjs__) pagesize = getpagesize()"
  },
  {
    "label": "sysconf()",
    "kind": "Method",
    "detail": "Function (# else pagesize =)",
    "insertText": "sysconf(_SC_PAGESIZE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(offset < 0 || offset % pagesize != 0)"
  },
  {
    "label": "__mmap2()",
    "kind": "Method",
    "detail": "Function (errno = EINVAL ; return MAP_FAILED ; } # ifdef __BIONIC__ return)",
    "insertText": "__mmap2(start, length, prot, flags, fd, static_cast<size_t>(offset / pagesize))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# else return reinterpret_cast<)",
    "insertText": "void(syscall(SYS_mmap2, start, length, prot, flags, fd, static_cast<off_t>(offset / pagesize)))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # elif)",
    "insertText": "defined(__s390x__)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<unsigned)",
    "insertText": "long(start), static_cast<unsigned long>(length), static_cast<unsigned long>(prot), static_cast<unsigned long>(flags), static_cast<unsigned long>(fd), static_cast<unsigned long>(offset)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__x86_64__) #define MMAP_SYSCALL_ARG(x) ((uint64_t)(uintptr_t)(x)) return reinterpret_cast<void*>( syscall(SYS_mmap, MMAP_SYSCALL_ARG(start), MMAP_SYSCALL_ARG(length), MMAP_SYSCALL_ARG(prot), MMAP_SYSCALL_ARG(flags), MMAP_SYSCALL_ARG(fd), static_cast<uint64_t>(offset)))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# undef MMAP_SYSCALL_ARG # else)",
    "insertText": "static_assert(sizeof(unsigned long) == 8, \"Platform is not 64-bit\")"
  },
  {
    "label": "DirectMunmap()",
    "kind": "Method",
    "detail": "Function (# endif } int)",
    "insertText": "DirectMunmap(void* start, size_t length)"
  },
  {
    "label": "DirectMmap()",
    "kind": "Method",
    "detail": "Function (} } ABSL_NAMESPACE_END } # else namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { void*)",
    "insertText": "DirectMmap(void* start, size_t length, int prot, int flags, int fd, off_t offset)"
  }
]