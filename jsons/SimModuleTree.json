[
  {
    "label": "ESimTreeProcessingOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimTreeProcessingOrder"
  },
  {
    "label": "FGeometryCollectionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionPhysicsProxy"
  },
  {
    "label": "ISimulationModuleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISimulationModuleBase"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FPendingModuleAdds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingModuleAdds"
  },
  {
    "label": "FPendingModuleDeletions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingModuleDeletions"
  },
  {
    "label": "FSimTreeUpdates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimTreeUpdates"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FModularVehicleBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModularVehicleBuilder"
  },
  {
    "label": "FSimModuleNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimModuleNode"
  },
  {
    "label": "GetRootNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootNodes(TArray<int>& RootNodesOut)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddRoot(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reparent(int Index, int ParentIndex)"
  },
  {
    "label": "AddNodeBelow()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddNodeBelow(int AtIndex, ISimulationModuleBase* SimModule)"
  },
  {
    "label": "InsertNodeAbove()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertNodeAbove(int AtIndex, ISimulationModuleBase* SimModule)"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(int AtIndex)"
  },
  {
    "label": "AppendTreeUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTreeUpdates(const FSimTreeUpdates& TreeUpdates)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime, FAllInputs& Inputs, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "OnContactModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContactModification(FCollisionContactModifier& Modifier, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "GenerateReplicationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateReplicationStructure(Chaos::FModuleNetDataArray& NetData)"
  },
  {
    "label": "SetNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetState(Chaos::FModuleNetDataArray& ModuleDatas)"
  },
  {
    "label": "SetSimState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimState(const Chaos::FModuleNetDataArray& ModuleDatas)"
  },
  {
    "label": "InterpolateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateState(const float LerpFactor, Chaos::FModuleNetDataArray& LerpDatas, const Chaos::FModuleNetDataArray& MinDatas, const Chaos::FModuleNetDataArray& MaxDatas)"
  },
  {
    "label": "SimulateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateNode(float DeltaTime, FAllInputs& Inputs, int NodeIdx, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "OnContactModificationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContactModificationInternal(int NodeIndex, FCollisionContactModifier& Modifier, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "SimulateNodeBFS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateNodeBFS(float DeltaTime, FAllInputs& Inputs, const TArray<int>& RootNodes, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "DeleteNodesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNodesBelow(int NodeIdx)"
  },
  {
    "label": "GetNextIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNextIndex()"
  },
  {
    "label": "UpdateModuleVelocites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModuleVelocites(FGeometryCollectionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "UpdateModuleVelocites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModuleVelocites(FClusterUnionPhysicsProxy* PhysicsProxy, bool bWake)"
  },
  {
    "label": "UpdateVehicleState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVehicleState(FClusterUnionPhysicsProxy* PhysicsProxy)"
  }
]