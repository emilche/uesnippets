[
  {
    "label": "ESimTreeProcessingOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimTreeProcessingOrder"
  },
  {
    "label": "FGeometryCollectionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionPhysicsProxy"
  },
  {
    "label": "ISimulationModuleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISimulationModuleBase"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FPendingModuleAdds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingModuleAdds"
  },
  {
    "label": "FPendingModuleDeletions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingModuleDeletions"
  },
  {
    "label": "FSimTreeUpdates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimTreeUpdates"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FModularVehicleBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModularVehicleBuilder"
  },
  {
    "label": "FSimModuleNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimModuleNode"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / DeferredForcesModular . h \" # include \" SimModule / SimulationModuleBase . h \" # include \" SimModule / ModuleInput . h \" # include \" SimModule / VehicleBlackboard . h \" # include \" SimModuleTree . generated . h \")",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"ModularVehicle.SimTree\"), STATGROUP_ModularVehicleSimTree, STATGROUP_Advanced)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "FPendingModuleAdds()",
    "kind": "Method",
    "detail": "Function (ManualOverride = 0,LeafFirst = 1,RootFirst = 2,LeafFirstBFS = 3 } ; class FGeometryCollectionPhysicsProxy ; namespace Chaos { class ISimulationModuleBase ; class FClusterUnionPhysicsProxy ; struct FAllInputs ; struct FPendingModuleAdds {)",
    "insertText": "FPendingModuleAdds(int ParentIndexIn, ISimulationModuleBase* NewSimModuleIn) : ParentIndex(ParentIndexIn), NewSimModule(NewSimModuleIn)"
  },
  {
    "label": "FPendingModuleDeletions()",
    "kind": "Method",
    "detail": "Function (} int ParentIndex ; ISimulationModuleBase* NewSimModule ; } ; struct FPendingModuleDeletions {)",
    "insertText": "FPendingModuleDeletions(int GuidIn) : Guid(GuidIn)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (} int Guid ; } ; class FSimTreeUpdates { public : int)",
    "insertText": "AddRoot(ISimulationModuleBase* NewSimModuleIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewModules .)",
    "insertText": "Add(FPendingModuleAdds(-1, NewSimModuleIn))"
  },
  {
    "label": "AddNodeBelow()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddNodeBelow(int ParentIndex, ISimulationModuleBase* NewSimModuleIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewModules .)",
    "insertText": "Add(FPendingModuleAdds(ParentIndex, NewSimModuleIn))"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNode(int Guid)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeletedModules .)",
    "insertText": "Add(FPendingModuleDeletions(Guid))"
  },
  {
    "label": "ClearUpdates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearUpdates()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NewModules .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetNewModules()",
    "kind": "Method",
    "detail": "Function (} const TArray<FPendingModuleAdds>&)",
    "insertText": "GetNewModules()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FSimModuleTree()",
    "kind": "Method",
    "detail": "Function (} ISimulationModuleBase* SimModule ; int Parent ; TSet<int> Children ; const int INVALID_IDX = - 1 ; } ;)",
    "insertText": "FSimModuleTree()"
  },
  {
    "label": "FVehicleBlackboard()",
    "kind": "Method",
    "detail": "Function (bAnimationEnabled = true ; bSimulationEnabled = true ; SimTreeProcessingOrder = ESimTreeProcessingOrder::LeafFirst ; SimBlackboard = MakeUnique<)",
    "insertText": "FVehicleBlackboard()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SimBlackboard .)",
    "insertText": "Reset()"
  },
  {
    "label": "DeleteNodesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNodesBelow(0)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetParent(int Index)"
  },
  {
    "label": "AccessSimModule()",
    "kind": "Method",
    "detail": "Function (} ISimulationModuleBase*)",
    "insertText": "AccessSimModule(int Index)"
  },
  {
    "label": "IsValidNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidNode(int Index)"
  },
  {
    "label": "NumActiveNodes()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumActiveNodes()"
  },
  {
    "label": "GetRootNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetRootNodes(TArray<int>& RootNodesOut)"
  },
  {
    "label": "GetNumNodes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumNodes()"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddRoot(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reparent(int Index, int ParentIndex)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (FSimModuleNode&)",
    "insertText": "GetNode(int Index)"
  },
  {
    "label": "InsertNodeAbove()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertNodeAbove(int AtIndex, ISimulationModuleBase* SimModule)"
  },
  {
    "label": "DeleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNode(int AtIndex)"
  },
  {
    "label": "AppendTreeUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTreeUpdates(const FSimTreeUpdates& TreeUpdates)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime, FAllInputs& Inputs, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "OnContactModification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContactModification(FCollisionContactModifier& Modifier, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "SetSimTreeProcessingOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimTreeProcessingOrder(ESimTreeProcessingOrder OrderIn)"
  },
  {
    "label": "AccessDeferredForces()",
    "kind": "Method",
    "detail": "Function (SimTreeProcessingOrder = OrderIn ; } FDeferredForcesModular&)",
    "insertText": "AccessDeferredForces()"
  },
  {
    "label": "IsAnimationEnabled()",
    "kind": "Method",
    "detail": "Function (bAnimationEnabled = bInEnabled ; } bool)",
    "insertText": "IsAnimationEnabled()"
  },
  {
    "label": "IsSimulationEnabled()",
    "kind": "Method",
    "detail": "Function (bSimulationEnabled = bInEnabled ; } bool)",
    "insertText": "IsSimulationEnabled()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int LargestIndex = - 1 ;)",
    "insertText": "for(int I = 0; I < GetNumNodes(); I++)"
  },
  {
    "label": "GetTransformIndex()",
    "kind": "Method",
    "detail": "Function (LargestIndex = SimModule ->)",
    "insertText": "GetTransformIndex()"
  },
  {
    "label": "GenerateReplicationStructure()",
    "kind": "Method",
    "detail": "Function (} } } return LargestIndex ; } void)",
    "insertText": "GenerateReplicationStructure(Chaos::FModuleNetDataArray& NetData)"
  },
  {
    "label": "SetNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetState(Chaos::FModuleNetDataArray& ModuleDatas)"
  },
  {
    "label": "SetSimState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimState(const Chaos::FModuleNetDataArray& ModuleDatas)"
  },
  {
    "label": "InterpolateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateState(const float LerpFactor, Chaos::FModuleNetDataArray& LerpDatas, const Chaos::FModuleNetDataArray& MinDatas, const Chaos::FModuleNetDataArray& MaxDatas)"
  },
  {
    "label": "GetSimBlackboard()",
    "kind": "Method",
    "detail": "Function (FVehicleBlackboard*)",
    "insertText": "GetSimBlackboard()"
  },
  {
    "label": "SimulateNode()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SimulateNode(float DeltaTime, FAllInputs& Inputs, int NodeIdx, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "OnContactModificationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContactModificationInternal(int NodeIndex, FCollisionContactModifier& Modifier, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "SimulateNodeBFS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateNodeBFS(float DeltaTime, FAllInputs& Inputs, const TArray<int>& RootNodes, FClusterUnionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "DeleteNodesBelow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteNodesBelow(int NodeIdx)"
  },
  {
    "label": "GetNextIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNextIndex()"
  },
  {
    "label": "UpdateModuleVelocites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModuleVelocites(FGeometryCollectionPhysicsProxy* PhysicsProxy)"
  },
  {
    "label": "UpdateModuleVelocites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModuleVelocites(FClusterUnionPhysicsProxy* PhysicsProxy, bool bWake)"
  },
  {
    "label": "UpdateVehicleState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVehicleState(FClusterUnionPhysicsProxy* PhysicsProxy)"
  }
]