[
  {
    "label": "IHttpClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpClient"
  },
  {
    "label": "IHttpConnectionPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpConnectionPool"
  },
  {
    "label": "IHttpReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpReceiver"
  },
  {
    "label": "IHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpRequest"
  },
  {
    "label": "IHttpResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpResponse"
  },
  {
    "label": "FHttpClientParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpClientParams"
  },
  {
    "label": "FHttpConnectionPoolParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpConnectionPoolParams"
  },
  {
    "label": "FHttpRequestParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpRequestParams"
  },
  {
    "label": "FHttpResponseStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpResponseStats"
  },
  {
    "label": "FHttpRequestQueueData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpRequestQueueData"
  },
  {
    "label": "THttpDestroyer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THttpDestroyer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IHttpManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpManager"
  },
  {
    "label": "IHttpResponseMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpResponseMonitor"
  },
  {
    "label": "FHttpByteArrayReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpByteArrayReceiver"
  },
  {
    "label": "FHttpRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestQueue"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Memory / MemoryFwd . h \" # include \" Templates / Function . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" namespace UE { class IHttpClient ; } namespace UE { class IHttpConnectionPool ; } namespace UE { class IHttpReceiver ; } namespace UE { class IHttpRequest ; } namespace UE { class IHttpResponse ; } namespace UE { struct FHttpClientParams ; } namespace UE { struct FHttpConnectionPoolParams ; } namespace UE { struct FHttpRequestParams ; } namespace UE { struct FHttpResponseStats ; } namespace UE::Http::Private { struct FHttpRequestQueueData ; } namespace UE::Http::Private { template<T> struct THttpDestroyer { void)",
    "insertText": "operator()(void* Object)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } } ; } namespace UE { template<Type,BaseType = Type> using THttpUniquePtr = TUniquePtr<Type,Http::Private::THttpDestroyer<BaseType>> ; enum class EHttpMethod : uint8 { Get,Put,Post,Head,Delete,} ; FAnsiStringView)",
    "insertText": "LexToString(EHttpMethod Method)"
  },
  {
    "label": "TryLexFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLexFromString(EHttpMethod& OutMethod, FAnsiStringView View)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EHttpMediaType : uint8 { Any,Binary,Text,Json,Yaml,CbObject,CbPackage,CbPackageOffer,CompressedBinary,FormUrlEncoded,} ; FAnsiStringView)",
    "insertText": "LexToString(EHttpMediaType MediaType)"
  },
  {
    "label": "TryLexFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLexFromString(EHttpMediaType& OutMediaType, FAnsiStringView View)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (enum class EHttpVersion : uint8 { None = 0,V1_0,V1_1,V2,V2Only,} ; enum class EHttpTlsLevel : uint8 { None = 0,Try,All,} ; enum class EHttpErrorCode : uint8 { None = 0,Unknown,Canceled,ResolveHost,Connect,TlsConnect,TlsPeerVerification,TimedOut,} ; class IHttpManager { public : IHttpManager&)",
    "insertText": "Get()"
  },
  {
    "label": "CreateConnectionPool()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] THttpUniquePtr<IHttpConnectionPool>)",
    "insertText": "CreateConnectionPool(const FHttpConnectionPoolParams& Params)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (} ; class IHttpConnectionPool { public : [ [ nodiscard ] ] THttpUniquePtr<IHttpClient>)",
    "insertText": "CreateClient(const FHttpClientParams& Params)"
  },
  {
    "label": "IHttpConnectionPool()",
    "kind": "Method",
    "detail": "Function (protected : Http::Private::THttpDestroyer<IHttpConnectionPool> ; ~)",
    "insertText": "IHttpConnectionPool()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "TryCreateRequest()",
    "kind": "Method",
    "detail": "Function (} ; struct FHttpConnectionPoolParams final { uint32 MaxConnections = 0 ; uint32 MinConnections = 0 ; uint32 MaxRequestsPerConnection = 0 ; bool bAllowAsync = true ; } ; class IHttpClient { public : [ [ nodiscard ] ] THttpUniquePtr<IHttpRequest>)",
    "insertText": "TryCreateRequest(const FHttpRequestParams& Params)"
  },
  {
    "label": "IHttpClient()",
    "kind": "Method",
    "detail": "Function (protected : Http::Private::THttpDestroyer<IHttpClient> ; ~)",
    "insertText": "IHttpClient()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct FHttpClientParams final { TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FHttpClientParams()",
    "kind": "Method",
    "detail": "Function (uint32 MaxRequests = 0 ; uint32 MinRequests = 0 ; uint32 DnsCacheTimeout = 6 0 ; uint32 ConnectTimeout = 0 ; uint32 LowSpeedLimit = 0 ; uint32 LowSpeedTime = 0 ; EHttpVersion Version = EHttpVersion::None ; EHttpTlsLevel TlsLevel = EHttpTlsLevel::None ; bool bFollowRedirects : 1 ; bool bFollow301Post : 1 ; bool bFollow302Post : 1 ; bool bFollow303Post : 1 ; bool bBypassProxy : 1 ; bool bVerbose : 1 ;)",
    "insertText": "FHttpClientParams() : bFollowRedirects(false) , bFollow301Post(false) , bFollow302Post(false) , bFollow303Post(false) , bBypassProxy(false) , bVerbose(false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } ; class IHttpRequest { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetUri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUri(FAnsiStringView Uri)"
  },
  {
    "label": "SetMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMethod(EHttpMethod Method)"
  },
  {
    "label": "SetBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBody(const FCompositeBuffer& Body)"
  },
  {
    "label": "SetContentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentType(EHttpMediaType Type, FAnsiStringView Param = {})"
  },
  {
    "label": "AddAcceptType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAcceptType(EHttpMediaType Type, float Weight = 1.0)"
  },
  {
    "label": "AddHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHeader(FAnsiStringView Name, FAnsiStringView Value)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(IHttpReceiver* Receiver, THttpUniquePtr<IHttpResponse>& OutResponse)"
  },
  {
    "label": "SendAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendAsync(IHttpReceiver* Receiver, THttpUniquePtr<IHttpResponse>& OutResponse)"
  },
  {
    "label": "IHttpRequest()",
    "kind": "Method",
    "detail": "Function (protected : Http::Private::THttpDestroyer<IHttpRequest> ; ~)",
    "insertText": "IHttpRequest()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (} ; struct FHttpRequestParams final { bool bIgnoreMaxRequests = false ; } ; class IHttpResponseMonitor { public : void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Poll()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "GetMonitor()",
    "kind": "Method",
    "detail": "Function (} ; class IHttpResponse { public : [ [ nodiscard ] ] TRefCountPtr<IHttpResponseMonitor>)",
    "insertText": "GetMonitor()"
  },
  {
    "label": "GetUri()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FAnsiStringView)",
    "insertText": "GetUri()"
  },
  {
    "label": "GetMethod()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] EHttpMethod)",
    "insertText": "GetMethod()"
  },
  {
    "label": "GetStatusCode()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetStatusCode()"
  },
  {
    "label": "GetErrorCode()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] EHttpErrorCode)",
    "insertText": "GetErrorCode()"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FAnsiStringView)",
    "insertText": "GetError()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] const FHttpResponseStats&)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetAllHeaders()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TConstArrayView<FAnsiStringView>)",
    "insertText": "GetAllHeaders()"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FAnsiStringView)",
    "insertText": "GetHeader(FAnsiStringView Name)"
  },
  {
    "label": "GetHeaders()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "GetHeaders(FAnsiStringView Name, TArrayView<FAnsiStringView> OutValues)"
  },
  {
    "label": "GetContentType()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] EHttpMediaType)",
    "insertText": "GetContentType()"
  },
  {
    "label": "IHttpResponse()",
    "kind": "Method",
    "detail": "Function (protected : Http::Private::THttpDestroyer<IHttpResponse> ; ~)",
    "insertText": "IHttpResponse()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const IHttpResponse& Response)"
  },
  {
    "label": "GetLatency()",
    "kind": "Method",
    "detail": "Function (struct FHttpResponseStats final { uint64 SendSize = 0 ; uint64 RecvSize = 0 ; uint64 SendRate = 0 ; uint64 RecvRate = 0 ; double NameResolveTime = 0 . 0 ; double ConnectTime = 0 . 0 ; double TlsConnectTime = 0 . 0 ; double PreTransferTime = 0 . 0 ; double StartTransferTime = 0 . 0 ; double TotalTime = 0 . 0 ; double)",
    "insertText": "GetLatency()"
  },
  {
    "label": "IHttpReceiver()",
    "kind": "Method",
    "detail": "Function (} } ; class IHttpReceiver { public : ~)",
    "insertText": "IHttpReceiver()"
  },
  {
    "label": "OnCreate()",
    "kind": "Method",
    "detail": "Function (IHttpReceiver*)",
    "insertText": "OnCreate(IHttpResponse& Response)"
  },
  {
    "label": "OnBody()",
    "kind": "Method",
    "detail": "Function (IHttpReceiver*)",
    "insertText": "OnBody(IHttpResponse& Response, FMemoryView& Data)"
  },
  {
    "label": "OnComplete()",
    "kind": "Method",
    "detail": "Function (IHttpReceiver*)",
    "insertText": "OnComplete(IHttpResponse& Response)"
  },
  {
    "label": "FHttpRequestQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHttpRequestQueue(IHttpConnectionPool& ConnectionPool, const FHttpClientParams& ClientParams)"
  },
  {
    "label": "CreateRequest()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] THttpUniquePtr<IHttpRequest>)",
    "insertText": "CreateRequest(const FHttpRequestParams& Params)"
  }
]