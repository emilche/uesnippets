[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "FLandscapeImportLayerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportLayerInfo"
  },
  {
    "label": "FLandscapeConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeConfig"
  },
  {
    "label": "FLandscapeConfigChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeConfigChange"
  },
  {
    "label": "FLandscapeConfigHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeConfigHelper"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" ActorPartition / ActorPartitionSubsystem . h \" # include \" LandscapeConfigHelper . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "FLandscapeConfig()",
    "kind": "Method",
    "detail": "Function (Resample = 0,Clip = 1,Expand = 2 } ; # if WITH_EDITOR class ULandscapeInfo ; class ULandscapeComponent ; class ALandscapeProxy ; struct FLandscapeImportLayerInfo ; struct FLandscapeConfig {)",
    "insertText": "FLandscapeConfig(int32 InComponentNumSubSections, int32 InSubsectionSizeQuads, int32 InGridSizeInComponents) : ComponentNumSubsections(InComponentNumSubSections) , SubsectionSizeQuads(InSubsectionSizeQuads) , GridSizeInComponents(InGridSizeInComponents)"
  },
  {
    "label": "FLandscapeConfig()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeConfig(ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "GetComponentSizeQuads()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetComponentSizeQuads()"
  },
  {
    "label": "GetGridSizeQuads()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetGridSizeQuads()"
  },
  {
    "label": "FLandscapeConfigChange()",
    "kind": "Method",
    "detail": "Function (} int32 ComponentNumSubsections ; int32 SubsectionSizeQuads ; int32 GridSizeInComponents ; int32 NumSectionValues [ 2 ] ; int32 SubsectionSizeQuadsValues [ 6 ] ; } ; struct FLandscapeConfigChange : public FLandscapeConfig {)",
    "insertText": "FLandscapeConfigChange(int32 InComponentNumSubSections, int32 InSubsectionSizeQuads, int32 InGridSize, ELandscapeResizeMode InResizeMode, bool bInZeroBased) : FLandscapeConfig(InComponentNumSubSections, InSubsectionSizeQuads, InGridSize) , ResizeMode(InResizeMode) , bZeroBased(bInZeroBased)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Validate()"
  },
  {
    "label": "FindOrAddLandscapeStreamingProxy()",
    "kind": "Method",
    "detail": "Function (ELandscapeResizeMode ResizeMode ; bool bZeroBased ; } ; class FLandscapeConfigHelper { public : ALandscapeProxy*)",
    "insertText": "FindOrAddLandscapeStreamingProxy(ULandscapeInfo* InLandscapeInfo, const FIntPoint& InSectionBase)"
  },
  {
    "label": "ChangeConfiguration()",
    "kind": "Method",
    "detail": "Function (ULandscapeInfo*)",
    "insertText": "ChangeConfiguration(ULandscapeInfo* InLandscapeInfo, const FLandscapeConfigChange& InNewConfig, TSet<AActor*>& OutActorsToDelete, TSet<AActor*>& OutModifiedActors)"
  },
  {
    "label": "ChangeGridSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChangeGridSize(ULandscapeInfo* InLandscapeInfo, uint32 InNewGridSizeInComponents, TSet<AActor*>& OutActorsToDelete)"
  },
  {
    "label": "PartitionLandscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PartitionLandscape(UWorld* InWorld, ULandscapeInfo* InLandscapeInfo, uint32 InGridSizeInComponents)"
  },
  {
    "label": "FindOrAddLandscapeStreamingProxy()",
    "kind": "Method",
    "detail": "Function (private : ALandscapeProxy*)",
    "insertText": "FindOrAddLandscapeStreamingProxy(UActorPartitionSubsystem* ActorPartitionSubsystem, ULandscapeInfo* LandscapeInfo, const UActorPartitionSubsystem::FCellCoord& CellCoord)"
  },
  {
    "label": "CopyRegionToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRegionToComponent(ULandscapeInfo* LandscapeInfo, const FIntRect& Region, bool bResample, ULandscapeComponent* Component)"
  },
  {
    "label": "ExtractLandscapeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractLandscapeData(ULandscapeInfo* LandscapeInfo, const FIntRect& Region, const FGuid& LayerGuid, TArray<uint16>& OutHeightData, TArray<FLandscapeImportLayerInfo>& OutImportMaterialLayerInfos)"
  },
  {
    "label": "MoveSplinesToLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSplinesToLandscape(ULandscapeInfo* InLandscapeInfo, ALandscapeProxy* InLandscape, float InScaleFactor)"
  },
  {
    "label": "MoveFoliageToLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFoliageToLandscape(ULandscapeInfo* InLandscapeInfo, ULandscapeInfo* InNewLandscapeInfo)"
  },
  {
    "label": "CopyData()",
    "kind": "Method",
    "detail": "Function (public : template<T> void)",
    "insertText": "CopyData(const TArray<T>& InData, TArray<T>& OutData, const FIntRect& InSrcRegion, const FIntRect& InDestRegion, bool bInResample)"
  },
  {
    "label": "ResampleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResampleData(InData, OutData, InSrcRegion, InDestRegion)"
  },
  {
    "label": "ExpandData()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ExpandData(InData, OutData, InSrcRegion, InDestRegion, true)"
  },
  {
    "label": "ExpandData()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "ExpandData(const TArray<T>& InData, TArray<T>& OutData, const FIntRect& InSrcRegion, const FIntRect& InDestRegion, bool bOffset)"
  },
  {
    "label": "Width()",
    "kind": "Method",
    "detail": "Function (const int32 SrcWidth = InSrcRegion .)",
    "insertText": "Width()"
  },
  {
    "label": "Height()",
    "kind": "Method",
    "detail": "Function (const int32 SrcHeight = InSrcRegion .)",
    "insertText": "Height()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (const int32 OffsetX = bOffset ? InDestRegion . Min . X - InSrcRegion . Min . X : 0 ; const int32 OffsetY = bOffset ? InDestRegion . Min . Y - InSrcRegion . Min . X : 0 ; OutData .)",
    "insertText": "Empty(DestWidth * DestHeight)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddUninitialized(DestWidth * DestHeight)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 OldY = FMath::Clamp<)",
    "insertText": "int32(Y + OffsetY, 0, SrcHeight - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const T PadLeft = InData [ OldY* SrcWidth ] ;)",
    "insertText": "for(int32 X = 0; X < -OffsetX; ++X)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (OutData [ Y* DestWidth + X ] = PadLeft ; } { const int32 X =)",
    "insertText": "Max(0, -OffsetX)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 OldX = FMath::Clamp<)",
    "insertText": "int32(X + OffsetX, 0, SrcWidth - 1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 CopySize = FMath::Min<)",
    "insertText": "int32(SrcWidth - OldX, DestWidth) * sizeof(T)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&OutData[Y * DestWidth + X], &InData[OldY * SrcWidth + OldX], CopySize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} const T PadRight = InData [ OldY* SrcWidth + SrcWidth - 1 ] ;)",
    "insertText": "for(int32 X = -OffsetX + SrcWidth; X < DestWidth; ++X)"
  },
  {
    "label": "CopySubregion()",
    "kind": "Method",
    "detail": "Function (OutData [ Y* DestWidth + X ] = PadRight ; } } } template<T> void)",
    "insertText": "CopySubregion(const TArrayView<T>& InData, TArray<T>& OutData, const FIntRect& InSrcRegion, uint32 InSrcDataPitch)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Empty(SrcWidth * SrcHeight)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddUninitialized(SrcWidth * SrcHeight)"
  },
  {
    "label": "ResampleData()",
    "kind": "Method",
    "detail": "Function (OutData [ DstIndex ] = InData [ SrcIndex ] ; } } } template<T> void)",
    "insertText": "ResampleData(const TArray<T>& InData, TArray<T>& OutData, const FIntRect& InSrcRegion, const FIntRect& InDestRegion)"
  },
  {
    "label": "XScale()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "XScale(float)(SrcWidth - 1) / (DestWidth - 1)"
  },
  {
    "label": "YScale()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "YScale(float)(SrcHeight - 1) / (DestHeight - 1)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const float OldY = Y* YScale ; const float OldX = X* XScale ; const int32 X0 =)",
    "insertText": "FloorToInt(OldX)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 X1 =)",
    "insertText": "Min(FMath::FloorToInt(OldX) + 1, SrcWidth - 1)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 Y0 =)",
    "insertText": "FloorToInt(OldY)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 Y1 =)",
    "insertText": "Min(FMath::FloorToInt(OldY) + 1, SrcHeight - 1)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const T& Original00 = InData [ Y0* SrcWidth + X0 ] ; const T& Original10 = InData [ Y0* SrcWidth + X1 ] ; const T& Original01 = InData [ Y1* SrcWidth + X0 ] ; const T& Original11 = InData [ Y1* SrcWidth + X1 ] ; int32 Index = Y* DestWidth + X ;)",
    "insertText": "check(Index < OutData.Num())"
  },
  {
    "label": "BiLerp()",
    "kind": "Method",
    "detail": "Function (OutData [ Y* DestWidth + X ] =)",
    "insertText": "BiLerp(Original00, Original10, Original01, Original11, FMath::Fractional(OldX), FMath::Fractional(OldY))"
  }
]