[
  {
    "label": "FSolverCollisionParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverCollisionParticles"
  },
  {
    "label": "FSolverCollisionParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimpleGeometryParticles . h \" # include \" PBDSoftsEvolutionFwd . h \" namespace Chaos::Softs { class FSolverCollisionParticles : public TSimpleGeometryParticles<FSolverReal,3> { typedef TSimpleGeometryParticles<FSolverReal,3> Base ; public :)",
    "insertText": "FSolverCollisionParticles() : TSimpleGeometryParticles<FSolverReal, 3>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MV)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MW)"
  },
  {
    "label": "FSolverCollisionParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverCollisionParticles(const FSolverCollisionParticles& Other)"
  },
  {
    "label": "FSolverCollisionParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSolverCollisionParticles(FSolverCollisionParticles&& Other) : TSimpleGeometryParticles<FSolverReal, 3>(MoveTemp(Other)), MV(MoveTemp(Other.MV)), MW(MoveTemp(Other.MW))"
  },
  {
    "label": "FSolverCollisionParticles()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSolverCollisionParticles()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FSolverCollisionParticles&)",
    "insertText": "operator(const FSolverCollisionParticles& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSolverCollisionParticles&)",
    "insertText": "operator(FSolverCollisionParticles&& Other)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const TVector<FSolverReal,3>&)",
    "insertText": "X(const int32 Index)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "X(Index)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const FSolverVec3&)",
    "insertText": "V(const int32 Index)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TSimpleGeometryParticles<FSolverReal,3)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "AllV()",
    "kind": "Method",
    "detail": "Function (Ar<<MV<<MW ; } TArray<FSolverVec3>&)",
    "insertText": "AllV()"
  }
]