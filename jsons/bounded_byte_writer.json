[
  {
    "label": "BoundedByteWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoundedByteWriter"
  },
  {
    "label": "StoreBigEndian8()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_BOUNDED_BYTE_WRITER_H_ # define NET_DCSCTP_PACKET_BOUNDED_BYTE_WRITER_H_ # include<algorithm> # include \" api / array_view . h \" namespace dcsctp { namespace internal { void)",
    "insertText": "StoreBigEndian8(uint8_t* data, uint8_t val)"
  },
  {
    "label": "StoreBigEndian16()",
    "kind": "Method",
    "detail": "Function (data [ 0 ] = val ; } void)",
    "insertText": "StoreBigEndian16(uint8_t* data, uint16_t val)"
  },
  {
    "label": "StoreBigEndian32()",
    "kind": "Method",
    "detail": "Function (data [ 0 ] = val>> 8 ; data [ 1 ] = val ; } void)",
    "insertText": "StoreBigEndian32(uint8_t* data, uint32_t val)"
  },
  {
    "label": "BoundedByteWriter()",
    "kind": "Method",
    "detail": "Function (data [ 0 ] = val>> 2 4 ; data [ 1 ] = val>> 1 6 ; data [ 2 ] = val>> 8 ; data [ 3 ] = val ; } } template<int FixedSize> class BoundedByteWriter { public :)",
    "insertText": "BoundedByteWriter(rtc::ArrayView<uint8_t> data) : data_(data)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(data.size() >= FixedSize)"
  },
  {
    "label": "Store8()",
    "kind": "Method",
    "detail": "Function (} template<size_t offset> void)",
    "insertText": "Store8(uint8_t value)"
  },
  {
    "label": "StoreBigEndian8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreBigEndian8(&data_[offset], value)"
  },
  {
    "label": "Store16()",
    "kind": "Method",
    "detail": "Function (} template<size_t offset> void)",
    "insertText": "Store16(uint16_t value)"
  },
  {
    "label": "StoreBigEndian16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreBigEndian16(&data_[offset], value)"
  },
  {
    "label": "Store32()",
    "kind": "Method",
    "detail": "Function (} template<size_t offset> void)",
    "insertText": "Store32(uint32_t value)"
  },
  {
    "label": "StoreBigEndian32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreBigEndian32(&data_[offset], value)"
  },
  {
    "label": "sub_writer()",
    "kind": "Method",
    "detail": "Function (} template<size_t SubSize> BoundedByteWriter<SubSize>)",
    "insertText": "sub_writer(size_t variable_offset)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(FixedSize + variable_offset + SubSize <= data_.size())"
  },
  {
    "label": "CopyToVariableData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyToVariableData(rtc::ArrayView<const uint8_t> source)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t copy_size =)",
    "insertText": "min(source.size(), data_.size() - FixedSize)"
  }
]