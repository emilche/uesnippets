[
  {
    "label": "TArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArray"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef WIN32 # include<stdio . h> # include<stdarg . h> # include<stddef . h> # include<stdint . h> # include<limits . h> # include<math . h> # include<string . h> # include<stdlib . h> # endif # ifndef check # include<assert . h> # define)",
    "insertText": "check(x) assert(x)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "static_assert(sizeof(uint64_t) == 8, \"Bad!\")"
  },
  {
    "label": "isalpha()",
    "kind": "Method",
    "detail": "Function (# endif # if __cplusplus bool)",
    "insertText": "isalpha(char c)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef CPP # include<vector> template<InElementType> class TArray { public : typedef InElementType ElementType ; typedef std::vector<ElementType> TSTLVector ; void)",
    "insertText": "Add(const ElementType& Element)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "push_back(Element)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushFront(const ElementType& Element)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "insert(Vector.begin(), Element)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(int Index)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TSTLVector::iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TSTLVector::const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int NewSize)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "clear()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "reserve(NewSize)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddZeroed(int Count)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "resize(Vector.size() + Count, (ElementType)0)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (} TSTLVector Vector ; } ; template<T> void)",
    "insertText": "Exchange(TArray<T>& A, TArray<T>& B)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (A . Vector .)",
    "insertText": "swap(B.Vector)"
  }
]