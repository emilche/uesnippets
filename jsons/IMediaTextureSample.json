[
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "IMediaTextureSampleConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSampleConverter"
  },
  {
    "label": "IMediaTextureSampleColorConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSampleColorConverter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaTextureTilingDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaTextureTilingDescription"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "EnumToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" IMediaTimeSource . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / Plane . h \" # include \" Misc / Optional . h \" # include \" Misc / Timecode . h \" # include \" Misc / Timespan . h \" # include \" Misc / FrameRate . h \" # include \" Templates / SharedPointer . h \" # include \" HDRHelper . h \" # include \" ColorManagement / ColorManagementDefines . h \" # include \" ColorManagement / ColorSpace . h \" # include \" MediaShaders . h \" # if WITH_ENGINE class FRHITexture ; class IMediaTextureSampleConverter ; class IMediaTextureSampleColorConverter ; # endif enum class EMediaTextureSampleFormat { Undefined,CharAYUV,CharBGRA,CharRGBA,CharBGR10A2,CharBMP,CharNV12,CharNV21,CharUYVY,CharYUY2,Char2VUY,CharYVYU,FloatRGB,FloatRGBA,YUVv210,YUVv216,Y416,R4FL,P010,DXT1,DXT5,BC4,YCoCg_DXT5,YCoCg_DXT5_Alpha_BC4,P010_RGB1010102,RGBA16,ABGR16,ARGB16_BIG,ExternalVYU,} ; namespace MediaTextureSampleFormat { const TCHAR*)",
    "insertText": "EnumToString(const EMediaTextureSampleFormat InSampleFormat)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ; struct FMediaTextureTilingDescription { FIntPoint TileNum = FIntPoint::ZeroValue ; FIntPoint TileSize = FIntPoint::ZeroValue ; int32 TileBorderSize = 0 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDim()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetDim()"
  },
  {
    "label": "GetNumMips()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetNumMips()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (EMediaTextureSampleFormat)",
    "insertText": "GetFormat()"
  },
  {
    "label": "GetOutputDim()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetOutputDim()"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStride()"
  },
  {
    "label": "ShouldApplyColorConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyColorConversion()"
  },
  {
    "label": "GetMediaTextureSampleConverter()",
    "kind": "Method",
    "detail": "Function (IMediaTextureSampleConverter*)",
    "insertText": "GetMediaTextureSampleConverter()"
  },
  {
    "label": "GetTimecode()",
    "kind": "Method",
    "detail": "Function (TOptional<FTimecode>)",
    "insertText": "GetTimecode()"
  },
  {
    "label": "GetFramerate()",
    "kind": "Method",
    "detail": "Function (} TOptional<FFrameRate>)",
    "insertText": "GetFramerate()"
  },
  {
    "label": "IsCacheable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCacheable()"
  },
  {
    "label": "IsOutputSrgb()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputSrgb()"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EMediaOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "GetScaleRotation()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetScaleRotation()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetOffset()"
  },
  {
    "label": "GetYUVToRGBMatrix()",
    "kind": "Method",
    "detail": "Function (} const FMatrix&)",
    "insertText": "GetYUVToRGBMatrix()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FMatrix Pre = FMatrix::Identity ; FVector Off ;)",
    "insertText": "switch(GetFormat())"
  },
  {
    "label": "GetSourceColorSpace()",
    "kind": "Method",
    "detail": "Function (} const UE::Color::FColorSpace&)",
    "insertText": "GetSourceColorSpace()"
  },
  {
    "label": "GetEncodingType()",
    "kind": "Method",
    "detail": "Function (} UE::Color::EEncoding)",
    "insertText": "GetEncodingType()"
  },
  {
    "label": "GetHDRNitsNormalizationFactor()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetHDRNitsNormalizationFactor()"
  },
  {
    "label": "GetDisplayMasteringLuminance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDisplayMasteringLuminance(float& OutMin, float& OutMax)"
  },
  {
    "label": "GetMaxLuminanceLevels()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetMaxLuminanceLevels(uint16& OutCLL, uint16& OutFALL)"
  },
  {
    "label": "IMediaTextureSample()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IMediaTextureSample()"
  }
]