[
  {
    "label": "FIOSTargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSTargetDevice"
  },
  {
    "label": "FIOSDeviceOutputReaderRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSDeviceOutputReaderRunnable"
  },
  {
    "label": "FIOSTargetDeviceOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSTargetDeviceOutput"
  },
  {
    "label": "GetLibImobileDeviceExe()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / PlatformProcess . h \" # include \" Interfaces / ITargetDeviceOutput . h \" # include \" Misc / ConfigCacheIni . h \" # include \" HAL / ThreadSafeCounter . h \" class FIOSTargetDevice ; FString)",
    "insertText": "GetLibImobileDeviceExe(const FString& ExeName)"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (FString ToReturn ; # if PLATFORM_WINDOWS ToReturn =)",
    "insertText": "ConvertRelativePathToFull(FPaths::EngineDir() / TEXT(\"Extras/ThirdPartyNotUE/libimobiledevice/x64/\"))"
  },
  {
    "label": "ConvertRelativePathToFull()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_MAC ToReturn =)",
    "insertText": "ConvertRelativePathToFull(FPaths::EngineDir() / TEXT(\"Extras/ThirdPartyNotUE/libimobiledevice/Mac/\"))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "UE_LOG(LogIOSDeviceHelper, Error, TEXT(\"The current platform is unsupported by Libimobile library.\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# endif ToReturn + = ExeName ; # if PLATFORM_WINDOWS ToReturn + =)",
    "insertText": "TEXT(\".exe\")"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "FileExists(ToReturn) ? ToReturn : TEXT(\"\")"
  },
  {
    "label": "FIOSDeviceOutputReaderRunnable()",
    "kind": "Method",
    "detail": "Function (} class FIOSDeviceOutputReaderRunnable : public FRunnable { public :)",
    "insertText": "FIOSDeviceOutputReaderRunnable(const FString& InDeviceUDID, FOutputDevice* Output)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(void)"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit(void)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(void)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run(void)"
  },
  {
    "label": "StartSyslogProcess()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "StartSyslogProcess(void)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FThreadSafeCounter StopTaskCounter ; FString DeviceUDID ; FOutputDevice* Output ; void* SyslogReadPipe ; void* SyslogWritePipe ; FProcHandle SyslogProcHandle ; } ; class FIOSTargetDeviceOutput : public ITargetDeviceOutput { public : bool)",
    "insertText": "Init(const FIOSTargetDevice& TargetDevice, FOutputDevice* Output)"
  }
]