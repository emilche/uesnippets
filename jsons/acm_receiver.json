[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "NetEq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEq"
  },
  {
    "label": "RTPHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPHeader"
  },
  {
    "label": "AcmReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AcmReceiver"
  },
  {
    "label": "explicit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "explicit"
  },
  {
    "label": "DecoderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecoderInfo"
  },
  {
    "label": "AcmReceiver()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AcmReceiver(const AudioCodingModule::Config& config)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertPacket(const RTPHeader& rtp_header,\n                   rtc::ArrayView<const uint8_t> incoming_payload)"
  },
  {
    "label": "GetAudio()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAudio(int desired_freq_hz, AudioFrame* audio_frame, bool* muted)"
  },
  {
    "label": "SetCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "SetMinimumDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetMinimumDelay(int delay_ms)"
  },
  {
    "label": "SetMaximumDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetMaximumDelay(int delay_ms)"
  },
  {
    "label": "SetBaseMinimumDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumDelayMs(int delay_ms)"
  },
  {
    "label": "ResetInitialDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInitialDelay()"
  },
  {
    "label": "FlushBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushBuffers()"
  },
  {
    "label": "RemoveAllCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCodecs()"
  },
  {
    "label": "GetPlayoutTimestamp()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetPlayoutTimestamp()"
  },
  {
    "label": "EnableNack()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EnableNack(size_t max_nack_list_size)"
  },
  {
    "label": "DisableNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableNack()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_decoder_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (resampler_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_audio_buffer_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (call_stats_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (resampled_last_output_frame_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]