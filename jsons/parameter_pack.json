[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ParameterPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterPack"
  },
  {
    "label": "any_of()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PARAMETER_PACK_H_ # define BASE_PARAMETER_PACK_H_ # include<stddef . h> # include<initializer_list> # include<tuple> # include<type_traits> # include \" base / containers / contains . h \" namespace base { bool)",
    "insertText": "any_of(std::initializer_list<bool> ilist)"
  },
  {
    "label": "all_of()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "all_of(std::initializer_list<bool> ilist)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} template<class T> size_t)",
    "insertText": "count(std::initializer_list<T> ilist, T value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t c = 0 ;)",
    "insertText": "for(const auto& v : ilist)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c(v == value)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} return c ; } size_t pack_npos = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "any_of()",
    "kind": "Method",
    "detail": "Function (template<. . . Ts> struct ParameterPack { template<Type> using HasType = std::bool_constant<)",
    "insertText": "any_of({std::is_same<Type, Ts>::value...})"
  },
  {
    "label": "all_of()",
    "kind": "Method",
    "detail": "Function (template<Type> using OnlyHasType = std::bool_constant<)",
    "insertText": "all_of({std::is_same<Type, Ts>::value...})"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (template<Type> using IsUniqueInPack = std::bool_constant<)",
    "insertText": "count({std::is_same<Type, Ts>::value...}, true)"
  },
  {
    "label": "IndexInPack()",
    "kind": "Method",
    "detail": "Function (template<Type> size_t)",
    "insertText": "IndexInPack()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t index = 0 ;)",
    "insertText": "for(bool value : {std::is_same<Type, Ts>::value...})"
  },
  {
    "label": "all_of()",
    "kind": "Method",
    "detail": "Function (index + + ; } return pack_npos ; } template<size_t N> using NthType = std::tuple_element_t<N,std::tuple<Ts . . .>> ; using IsAllSameType = std::bool_constant<)",
    "insertText": "all_of({std::is_same<NthType<0>, Ts>::value...})"
  }
]